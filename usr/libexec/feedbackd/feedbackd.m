uint64_t sub_1000055B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006EDC8);
  v1 = sub_1000097B4(v0, (uint64_t)qword_10006EDC8);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  return Logger.init(subsystem:category:)(v2);
}

uint64_t CFBBiomeReader.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 48, 7);
  CFBBiomeReader.init()();
  return v1;
}

_QWORD *CFBBiomeReader.init()()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v1 = (id)((uint64_t (*)(void))BiomeLibrary)();
  v2 = objc_msgSend(v1, "Feedback");
  swift_unknownObjectRelease(v1);
  v3 = objc_msgSend(v2, "EvaluationResponse");
  v4 = swift_unknownObjectRelease(v2);
  v0[2] = v3;
  v5 = (id)BiomeLibrary(v4);
  v6 = objc_msgSend(v5, "Feedback");
  swift_unknownObjectRelease(v5);
  v7 = objc_msgSend(v6, "TextToTextEvaluationData");
  v8 = swift_unknownObjectRelease(v6);
  v0[3] = v7;
  v9 = (id)BiomeLibrary(v8);
  v10 = objc_msgSend(v9, "Feedback");
  swift_unknownObjectRelease(v9);
  v11 = objc_msgSend(v10, "TextToImageEvaluationData");
  v12 = swift_unknownObjectRelease(v10);
  v0[4] = v11;
  v13 = (id)BiomeLibrary(v12);
  v14 = objc_msgSend(v13, "Feedback");
  swift_unknownObjectRelease(v13);
  v15 = objc_msgSend(v14, "TextImageToImageEvaluationData");
  swift_unknownObjectRelease(v14);
  v0[5] = v15;
  return v0;
}

id CFBBiomeReader.fetchDonation(evaluationID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  Class isa;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id *v48;
  id v49;
  _QWORD *v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v55;
  id *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  char v69[24];
  void **aBlock;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t (*v74)();
  uint64_t v75;

  v2 = v1;
  v68 = a1;
  v64 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v64 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v64);
  v62 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D4C(&qword_10006EF20);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v55 - v9;
  sub_100005D8C();
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(v8, 1, 1, v11);
  v13 = sub_100005DC8((uint64_t)v10, (uint64_t)v8, 0, 0, 1);
  v14 = swift_allocObject(&unk_1000696D0, 24, 7);
  v61 = v14;
  *(_QWORD *)(v14 + 16) = 0;
  v56 = (id *)(v14 + 16);
  v15 = swift_allocObject(&unk_1000696F8, 24, 7);
  v60 = v15;
  *(_QWORD *)(v15 + 16) = 0;
  v63 = (_QWORD *)(v15 + 16);
  v16 = objc_msgSend(*(id *)(v2 + 24), "publisherWithOptions:", v13);
  v17 = objc_msgSend(*(id *)(v2 + 32), "publisherWithOptions:", v13);
  v57 = v2;
  v18 = *(void **)(v2 + 40);
  v67 = v13;
  v19 = objc_msgSend(v18, "publisherWithOptions:", v13);
  v20 = sub_100005D4C(&qword_10006EF30);
  v21 = swift_allocObject(v20, 48, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100059430;
  *(_QWORD *)(v21 + 32) = v17;
  *(_QWORD *)(v21 + 40) = v19;
  aBlock = (void **)v21;
  specialized Array._endMutation()(v21);
  v22 = aBlock;
  v65 = v17;
  v59 = v19;
  sub_100005D4C(&qword_10006EF98);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  v74 = (uint64_t (*)())sub_100005F20;
  v75 = 0;
  aBlock = _NSConcreteStackBlock;
  v71 = 1107296256;
  v72 = sub_100006004;
  v73 = &unk_100069710;
  v24 = _Block_copy(&aBlock);
  v66 = v16;
  v25 = objc_msgSend(v16, "orderedMergeWithOthers:comparator:", isa, v24);
  _Block_release(v24);

  v74 = nullsub_1;
  v75 = 0;
  aBlock = _NSConcreteStackBlock;
  v71 = 1107296256;
  v72 = sub_1000060BC;
  v73 = &unk_100069738;
  v26 = _Block_copy(&aBlock);
  v27 = v3;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v29 = v62;
  v30 = v64;
  v28(v62, v68, v64);
  v31 = *(unsigned __int8 *)(v27 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = (v4 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_100069770, v34 + 8, v31 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v35 + v32, v29, v30);
  v36 = v61;
  *(_QWORD *)(v35 + v33) = v61;
  v37 = v60;
  *(_QWORD *)(v35 + v34) = v60;
  v74 = (uint64_t (*)())sub_100006E40;
  v75 = v35;
  aBlock = _NSConcreteStackBlock;
  v71 = 1107296256;
  v72 = sub_100006E4C;
  v73 = &unk_100069788;
  v38 = _Block_copy(&aBlock);
  v39 = v75;
  swift_retain(v36);
  swift_retain(v37);
  swift_release(v39);
  v40 = objc_msgSend(v25, "sinkWithCompletion:shouldContinue:", v26, v38);
  _Block_release(v38);
  _Block_release(v26);

  v41 = v63;
  swift_beginAccess(v63, &aBlock, 0, 0);
  if (*v41)
  {
    v42 = swift_errorRetain(*v41);
    swift_willThrow(v42);

    swift_release(v36);
    swift_release(v37);

  }
  else
  {
    v44 = v65;
    v43 = v66;
    v46 = v67;
    v45 = v68;
    v47 = v58;
    v48 = v56;
    swift_beginAccess(v56, v69, 0, 0);
    if (*v48)
    {
      v49 = *v48;
      v50 = CFBBiomeReader.fetchEvaluation(evaluationID:)(v45);
      if (v47)
      {

        swift_errorRelease(v47);
      }
      else
      {
        v51 = v50;
        if (v50)
        {
          v52 = v49;
          dispatch thunk of FBKSInteraction.firstEvaluation.setter(0);

        }
        else
        {

        }
      }
    }
    else
    {

    }
    v25 = *(id *)(v36 + 16);
    v53 = v25;
    swift_release(v36);
    swift_release(v37);
  }
  return v25;
}

uint64_t sub_100005D4C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005D8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006EF28;
  if (!qword_10006EF28)
  {
    v1 = objc_opt_self(BMPublisherOptions);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10006EF28);
  }
  return result;
}

id sub_100005DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v16;
  id v17;

  v6 = v5;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  isa = 0;
  if (v14(a1, 1, v12) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  }
  if (v14(a2, 1, v12) == 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "initWithStartDate:endDate:maxEvents:lastN:reversed:", isa, v16, a3, a4, a5 & 1);

  return v17;
}

uint64_t sub_100005ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100005EFC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100005F20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  id v11;
  _BYTE v12[32];

  sub_100009C84(a1, (uint64_t)v12);
  v3 = sub_100005D4C(&qword_10006F118);
  swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v3, 7);
  v4 = v11;
  objc_msgSend(v11, "timestamp");
  v6 = v5;
  swift_unknownObjectRelease(v4);
  sub_100009C84(a2, (uint64_t)v12);
  swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v3, 7);
  v7 = v11;
  objc_msgSend(v11, "timestamp");
  v9 = v8;
  swift_unknownObjectRelease(v7);
  if (v6 >= v9)
    return 1;
  else
    return -1;
}

uint64_t sub_100006004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD *, _QWORD *);
  uint64_t v7;
  _QWORD v9[4];
  _QWORD v10[4];

  v6 = *(uint64_t (**)(_QWORD *, _QWORD *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v10[3] = swift_getObjectType(a2);
  v10[0] = a2;
  v9[3] = swift_getObjectType(a3);
  v9[0] = a3;
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a3);
  v7 = v6(v10, v9);
  swift_release(v5);
  sub_100009C64(v9);
  sub_100009C64(v10);
  return v7;
}

uint64_t sub_1000060A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000060B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000060BC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10000610C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  char **v50;
  unsigned __int8 v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  void (*v60)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  void **v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  void (*v69)(_BYTE *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char **v73;
  unsigned __int8 v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  _BYTE *v81;
  id v82;
  void *v83;
  id v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  void (*v88)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t);
  int v96;
  void *v97;
  _BYTE *v98;
  id v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  _BYTE *v107;
  void (*v108)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  char v113;
  void (*v114)(_BYTE *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  void **v119;
  void *v120;
  void (*v121)(_BYTE *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  unsigned int (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  char v128;
  void (*v129)(_BYTE *, uint64_t);
  uint64_t v130;
  _BYTE v132[12];
  int v133;
  void (*v134)(_BYTE *, uint64_t, uint64_t);
  void *v135;
  _BYTE *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  uint64_t v142;
  _BYTE *v143;
  void **v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  _BYTE *v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  _BYTE v155[40];

  v151 = a2;
  v7 = type metadata accessor for UUID(0);
  v154 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v136 = &v132[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v137 = &v132[-v11];
  v12 = __chkstk_darwin(v10);
  v138 = &v132[-v13];
  __chkstk_darwin(v12);
  v143 = &v132[-v14];
  v150 = sub_100005D4C(&qword_10006F078);
  v15 = __chkstk_darwin(v150);
  v146 = &v132[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v149 = &v132[-v18];
  __chkstk_darwin(v17);
  v20 = &v132[-v19];
  v21 = sub_100005D4C(&qword_10006F080);
  v22 = __chkstk_darwin(v21);
  v24 = &v132[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = __chkstk_darwin(v22);
  v153 = &v132[-v26];
  v27 = __chkstk_darwin(v25);
  v152 = &v132[-v28];
  v29 = __chkstk_darwin(v27);
  v145 = &v132[-v30];
  v31 = __chkstk_darwin(v29);
  v140 = &v132[-v32];
  v33 = __chkstk_darwin(v31);
  v148 = &v132[-v34];
  v35 = __chkstk_darwin(v33);
  v141 = &v132[-v36];
  v37 = __chkstk_darwin(v35);
  v147 = &v132[-v38];
  v39 = __chkstk_darwin(v37);
  v41 = &v132[-v40];
  v42 = __chkstk_darwin(v39);
  v44 = &v132[-v43];
  v45 = __chkstk_darwin(v42);
  v47 = &v132[-v46];
  __chkstk_darwin(v45);
  v49 = &v132[-v48];
  v144 = (void **)(a3 + 16);
  v142 = a4 + 16;
  v50 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  v51 = objc_msgSend(a1, "respondsToSelector:", "eventBody");
  v139 = v24;
  if ((v51 & 1) != 0)
  {
    v52 = objc_msgSend(a1, "eventBody");
    if (v52)
    {
      v53 = v52;
      v54 = objc_opt_self(BMFeedbackTextToTextEvaluationData);
      v55 = (void *)swift_dynamicCastObjCClass(v53, v54);
      v56 = v53;
      if (v55)
      {
        v135 = v55;
        v57 = objc_msgSend(v55, "commonMetadata");
        if (v57)
        {
          v58 = v57;
          v59 = objc_msgSend(v57, "evaluationUuid");

          if (v59)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

            v60 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v154 + 56);
            v60(v47, 0, 1, v7);
          }
          else
          {
            v60 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v154 + 56);
            v60(v47, 1, 1, v7);
          }
          sub_10000976C((uint64_t)v47, (uint64_t)v49);
          v61 = v154;
        }
        else
        {
          v61 = v154;
          v60 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v154 + 56);
          v60(v49, 1, 1, v7);
        }
        v134 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v61 + 16);
        v134(v44, v151, v7);
        v60(v44, 0, 1, v7);
        v62 = (uint64_t)&v20[*(int *)(v150 + 48)];
        sub_1000096E8((uint64_t)v49, (uint64_t)v20);
        sub_1000096E8((uint64_t)v44, v62);
        v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
        if (v63((uint64_t)v20, 1, v7) == 1)
        {
          sub_100009730((uint64_t)v44, &qword_10006F080);
          sub_100009730((uint64_t)v49, &qword_10006F080);
          v64 = v63(v62, 1, v7);
          v65 = v144;
          if (v64 == 1)
          {
            sub_100009730((uint64_t)v20, &qword_10006F080);
LABEL_17:
            type metadata accessor for FBKSDonation(0);
            v70 = (uint64_t)v138;
            v134(v138, v151, v7);
            v71 = sub_10002DBA4(v135, v70);
            swift_beginAccess(v65, v155, 1, 0);
            v72 = *v65;
            *v65 = (void *)v71;

            return 0;
          }
        }
        else
        {
          sub_1000096E8((uint64_t)v20, (uint64_t)v41);
          if (v63(v62, 1, v7) != 1)
          {
            v66 = v154;
            v67 = v143;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v154 + 32))(v143, v62, v7);
            v68 = sub_100009BE4(&qword_10006F088, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v133 = dispatch thunk of static Equatable.== infix(_:_:)(v41, v67, v7, v68);
            v69 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
            v69(v67, v7);
            sub_100009730((uint64_t)v44, &qword_10006F080);
            sub_100009730((uint64_t)v49, &qword_10006F080);
            v69(v41, v7);
            sub_100009730((uint64_t)v20, &qword_10006F080);
            v65 = v144;
            if ((v133 & 1) != 0)
              goto LABEL_17;
            goto LABEL_18;
          }
          sub_100009730((uint64_t)v44, &qword_10006F080);
          sub_100009730((uint64_t)v49, &qword_10006F080);
          (*(void (**)(_BYTE *, uint64_t))(v154 + 8))(v41, v7);
        }
        sub_100009730((uint64_t)v20, &qword_10006F078);
      }
LABEL_18:
      swift_unknownObjectRelease(v56);
      v50 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    }
  }
  v73 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  v74 = objc_msgSend(a1, "respondsToSelector:", "eventBody");
  v75 = v153;
  v76 = v154;
  v77 = (uint64_t)v152;
  if ((v74 & 1) != 0)
  {
    v78 = objc_msgSend(a1, "eventBody");
    if (v78)
    {
      v79 = v78;
      v80 = objc_opt_self(BMFeedbackTextToImageEvaluationData);
      v81 = (_BYTE *)swift_dynamicCastObjCClass(v79, v80);
      if (v81)
      {
        v138 = v81;
        v82 = objc_msgSend(v81, "commonMetadata");
        if (v82)
        {
          v83 = v82;
          v84 = objc_msgSend(v82, "evaluationUuid");

          v86 = v148;
          v85 = v149;
          if (v84)
          {
            v87 = v141;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v84);

            v88 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v76 + 56);
            v88(v87, 0, 1, v7);
            v89 = (uint64_t)v87;
          }
          else
          {
            v88 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v76 + 56);
            v91 = v141;
            v88(v141, 1, 1, v7);
            v89 = (uint64_t)v91;
          }
          v90 = v147;
          sub_10000976C(v89, (uint64_t)v147);
        }
        else
        {
          v88 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v76 + 56);
          v90 = v147;
          v88(v147, 1, 1, v7);
          v86 = v148;
          v85 = v149;
        }
        v141 = *(_BYTE **)(v76 + 16);
        ((void (*)(_BYTE *, uint64_t, uint64_t))v141)(v86, v151, v7);
        v88(v86, 0, 1, v7);
        v92 = (uint64_t)&v85[*(int *)(v150 + 48)];
        sub_1000096E8((uint64_t)v90, (uint64_t)v85);
        sub_1000096E8((uint64_t)v86, v92);
        v93 = v76;
        v94 = (uint64_t)v85;
        v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
        if (v95(v94, 1, v7) == 1)
        {
          sub_100009730((uint64_t)v86, &qword_10006F080);
          v75 = v153;
          sub_100009730((uint64_t)v90, &qword_10006F080);
          v96 = v95(v92, 1, v7);
          v76 = v154;
          if (v96 == 1)
          {
            sub_100009730((uint64_t)v149, &qword_10006F080);
            v97 = v138;
LABEL_43:
            type metadata accessor for FBKSDonation(0);
            v116 = (uint64_t)v137;
            ((void (*)(_BYTE *, uint64_t, uint64_t))v141)(v137, v151, v7);
            v117 = sub_10002DBC4(v97, v116);
LABEL_44:
            v118 = (void *)v117;
            v119 = v144;
            swift_beginAccess(v144, v155, 1, 0);
            v120 = *v119;
            *v119 = v118;

            return 0;
          }
        }
        else
        {
          v98 = v140;
          sub_1000096E8(v94, (uint64_t)v140);
          if (v95(v92, 1, v7) != 1)
          {
            v110 = v154;
            v111 = v143;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v154 + 32))(v143, v92, v7);
            v112 = sub_100009BE4(&qword_10006F088, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v113 = dispatch thunk of static Equatable.== infix(_:_:)(v98, v111, v7, v112);
            v114 = *(void (**)(_BYTE *, uint64_t))(v110 + 8);
            v114(v111, v7);
            sub_100009730((uint64_t)v148, &qword_10006F080);
            sub_100009730((uint64_t)v147, &qword_10006F080);
            v114(v98, v7);
            v115 = v94;
            v76 = v110;
            v75 = v153;
            sub_100009730(v115, &qword_10006F080);
            v77 = (uint64_t)v152;
            v50 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
            v73 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
            v97 = v138;
            if ((v113 & 1) != 0)
              goto LABEL_43;
            goto LABEL_34;
          }
          sub_100009730((uint64_t)v148, &qword_10006F080);
          sub_100009730((uint64_t)v147, &qword_10006F080);
          v76 = v154;
          (*(void (**)(_BYTE *, uint64_t))(v154 + 8))(v98, v7);
          v73 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
          v75 = v153;
        }
        sub_100009730((uint64_t)v149, &qword_10006F078);
        v77 = (uint64_t)v152;
        v50 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
      }
LABEL_34:
      swift_unknownObjectRelease(v79);
    }
  }
  if ((objc_msgSend(a1, v73[13], v50[11]) & 1) == 0)
    return 1;
  v99 = objc_msgSend(a1, v50[11]);
  if (!v99)
    return 1;
  v100 = v99;
  v101 = objc_opt_self(BMFeedbackTextImageToImageEvaluationData);
  v102 = (void *)swift_dynamicCastObjCClass(v100, v101);
  if (v102)
  {
    v103 = v102;
    v104 = objc_msgSend(v102, "commonMetadata");
    if (v104)
    {
      v105 = v104;
      v106 = objc_msgSend(v104, "evaluationUuid");

      v107 = v145;
      if (v106)
      {
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v106);

        v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
        v108(v77, 0, 1, v7);
      }
      else
      {
        v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
        v108(v77, 1, 1, v7);
      }
      v109 = (uint64_t)v146;
      sub_10000976C(v77, (uint64_t)v107);
    }
    else
    {
      v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
      v107 = v145;
      v108((uint64_t)v145, 1, 1, v7);
      v109 = (uint64_t)v146;
    }
    v121 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v76 + 16);
    v121(v75, v151, v7);
    v108((uint64_t)v75, 0, 1, v7);
    v122 = v109 + *(int *)(v150 + 48);
    sub_1000096E8((uint64_t)v107, v109);
    sub_1000096E8((uint64_t)v75, v122);
    v123 = (uint64_t)v107;
    v124 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    if (v124(v109, 1, v7) == 1)
    {
      sub_100009730((uint64_t)v75, &qword_10006F080);
      v109 = (uint64_t)v146;
      sub_100009730(v123, &qword_10006F080);
      if (v124(v122, 1, v7) == 1)
      {
        sub_100009730(v109, &qword_10006F080);
LABEL_54:
        type metadata accessor for FBKSDonation(0);
        v130 = (uint64_t)v136;
        v121(v136, v151, v7);
        v117 = sub_10002E724(v103, v130);
        goto LABEL_44;
      }
    }
    else
    {
      v125 = (uint64_t)v139;
      sub_1000096E8(v109, (uint64_t)v139);
      if (v124(v122, 1, v7) != 1)
      {
        v126 = v143;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v76 + 32))(v143, v122, v7);
        v127 = sub_100009BE4(&qword_10006F088, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v128 = dispatch thunk of static Equatable.== infix(_:_:)(v125, v126, v7, v127);
        v129 = *(void (**)(_BYTE *, uint64_t))(v76 + 8);
        v129(v126, v7);
        sub_100009730((uint64_t)v153, &qword_10006F080);
        sub_100009730((uint64_t)v145, &qword_10006F080);
        v129((_BYTE *)v125, v7);
        sub_100009730(v109, &qword_10006F080);
        if ((v128 & 1) != 0)
          goto LABEL_54;
        goto LABEL_56;
      }
      sub_100009730((uint64_t)v75, &qword_10006F080);
      sub_100009730((uint64_t)v145, &qword_10006F080);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v125, v7);
    }
    sub_100009730(v109, &qword_10006F078);
  }
LABEL_56:
  swift_unknownObjectRelease(v100);
  return 1;
}

uint64_t sub_100006E40(uint64_t a1)
{
  return sub_100009090(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_10000610C);
}

uint64_t sub_100006E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  LOBYTE(v4) = v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v4 & 1;
}

uint64_t sub_100006EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100009BE4((unint64_t *)&unk_10006FC20, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain, (uint64_t)&protocol conformance descriptor for FBKSInteraction.FeatureDomain), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100009BE4(&qword_10006F0B0, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain, (uint64_t)&protocol conformance descriptor for FBKSInteraction.FeatureDomain);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

_QWORD *CFBBiomeReader.fetchDonations(count:fromLatest:)(int a1, char a2)
{
  id *v2;
  uint64_t v3;
  id *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  void *v35;
  void *v36;
  BOOL (*v37)(void *);
  uint64_t v38;

  v4 = v2;
  v7 = sub_100005D4C(&qword_10006EF20);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = _swiftEmptyArrayStorage;
  if (a1)
  {
    sub_100005D8C();
    v32 = v3;
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v12, 1, 1, v14);
    v15(v10, 1, 1, v14);
    v16 = sub_100005DC8((uint64_t)v12, (uint64_t)v10, 0, 0, a2 & 1);
    v17 = objc_msgSend(v4[3], "publisherWithOptions:", v16);
    v30 = v17;
    v18 = objc_msgSend(v4[4], "publisherWithOptions:", v16);
    v31 = v18;
    v19 = objc_msgSend(v4[5], "publisherWithOptions:", v16);
    v20 = swift_allocObject(&unk_1000697C0, 24, 7);
    *(_QWORD *)(v20 + 16) = _swiftEmptyArrayStorage;
    v21 = objc_msgSend(v17, "mergeWithOther:", v18);
    v22 = objc_msgSend(v21, "mergeWithOther:", v19);

    v37 = (BOOL (*)(void *))nullsub_1;
    v38 = 0;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1000060BC;
    v36 = &unk_1000697D8;
    v23 = _Block_copy(&aBlock);
    v24 = swift_allocObject(&unk_100069810, 36, 7);
    *(_QWORD *)(v24 + 16) = v4;
    *(_QWORD *)(v24 + 24) = v20;
    *(_DWORD *)(v24 + 32) = a1;
    v37 = sub_100008C00;
    v38 = v24;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_100006E4C;
    v36 = &unk_100069828;
    v25 = _Block_copy(&aBlock);
    v26 = v38;
    swift_retain(v4);
    swift_retain(v20);
    swift_release(v26);
    v27 = objc_msgSend(v22, "sinkWithCompletion:shouldContinue:", v23, v25);

    _Block_release(v25);
    _Block_release(v23);

    swift_beginAccess(v20 + 16, &aBlock, 0, 0);
    v13 = *(_QWORD **)(v20 + 16);
    swift_bridgeObjectRetain(v13);
    swift_release(v20);
  }
  return v13;
}

BOOL sub_10000733C(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  id v53;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned __int8 v69;
  unsigned int v70;
  id v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  id v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  id v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184[4];

  v181 = a4;
  v7 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v173 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v172 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006F080);
  v10 = __chkstk_darwin(v9);
  v175 = (char *)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v178 = (char *)&v164 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v164 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v164 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v164 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v164 - v23;
  v25 = type metadata accessor for UUID(0);
  v179 = *(_QWORD *)(v25 - 8);
  v180 = v25;
  v26 = __chkstk_darwin(v25);
  v169 = (char *)&v164 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v176 = (char *)&v164 - v29;
  v30 = __chkstk_darwin(v28);
  v170 = (char *)&v164 - v31;
  v32 = __chkstk_darwin(v30);
  v174 = (char *)&v164 - v33;
  v34 = __chkstk_darwin(v32);
  v171 = (char *)&v164 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v164 - v37;
  __chkstk_darwin(v36);
  v177 = (char *)&v164 - v39;
  v40 = (_QWORD *)(a3 + 16);
  if ((objc_msgSend(a1, "respondsToSelector:", "eventBody") & 1) != 0)
  {
    v41 = objc_msgSend(a1, "eventBody");
    if (v41)
    {
      v167 = a2;
      v42 = v40;
      v43 = v41;
      v44 = objc_opt_self(BMFeedbackTextToTextEvaluationData);
      v45 = (void *)swift_dynamicCastObjCClass(v43, v44);
      if (v45)
      {
        v165 = v43;
        v168 = v42;
        v164 = v45;
        v46 = objc_msgSend(v45, "commonMetadata");
        if (v46)
        {
          v47 = v46;
          v166 = v7;
          v48 = objc_msgSend(v46, "evaluationUuid");

          if (v48)
          {
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

            v49 = 0;
          }
          else
          {
            v49 = 1;
          }
          v50 = v179;
          v51 = v180;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v22, v49, 1, v180);
          sub_10000976C((uint64_t)v22, (uint64_t)v24);
          v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v24, 1, v51);
          v7 = v166;
          v40 = v168;
          if (v52 != 1)
          {
            v62 = v179;
            v63 = v180;
            v64 = (uint64_t)v177;
            (*(void (**)(char *, char *, uint64_t))(v179 + 32))(v177, v24, v180);
            v91 = CFBBiomeReader.fetchEvaluation(evaluationID:)(v64);

            if (!v91)
            {
              if (qword_10006EDC0 != -1)
                swift_once(&qword_10006EDC0, sub_1000055B8);
              v98 = type metadata accessor for Logger(0);
              sub_1000097B4(v98, (uint64_t)qword_10006EDC8);
              v99 = *(char **)(v62 + 16);
              v100 = ((uint64_t (*)(char *, char *, uint64_t))v99)(v38, v177, v63);
              v101 = Logger.logObject.getter(v100);
              v102 = v62;
              v103 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v101, v103))
              {
                v104 = (uint8_t *)swift_slowAlloc(12, -1);
                v105 = swift_slowAlloc(32, -1);
                v184[0] = v105;
                *(_DWORD *)v104 = 136315138;
                v178 = v99;
                v106 = sub_100009BE4((unint64_t *)&unk_10006F0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v107 = dispatch thunk of CustomStringConvertible.description.getter(v180, v106);
                v109 = v108;
                v182 = sub_1000572F8(v107, v108, v184);
                v99 = v178;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, &v183);
                swift_bridgeObjectRelease(v109);
                v110 = *(void (**)(char *, uint64_t))(v102 + 8);
                v110(v38, v180);
                _os_log_impl((void *)&_mh_execute_header, v101, v103, "Fetching donation for %s", v104, 0xCu);
                swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
                v111 = v105;
                v63 = v180;
                swift_slowDealloc(v111, -1, -1);
                v112 = v104;
                v40 = v168;
                swift_slowDealloc(v112, -1, -1);
              }
              else
              {
                v110 = *(void (**)(char *, uint64_t))(v102 + 8);
                v110(v38, v63);
              }

              type metadata accessor for FBKSDonation(0);
              v138 = (uint64_t)v171;
              ((void (*)(char *, char *, uint64_t))v99)(v171, v177, v63);
              swift_unknownObjectRetain(v165);
              v139 = (void *)sub_10002DBA4(v164, v138);
              v140 = v40;
              v141 = sub_100005D4C(&qword_10006F098);
              v142 = v173;
              v143 = *(unsigned __int8 *)(v173 + 80);
              v144 = (v143 + 32) & ~v143;
              v145 = swift_allocObject(v141, v144 + *(_QWORD *)(v173 + 72), v143 | 7);
              *(_OWORD *)(v145 + 16) = xmmword_100059440;
              v146 = v145 + v144;
              v147 = v166;
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v142 + 104))(v146, enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:), v166);
              v148 = sub_10002AE08(v145);
              swift_setDeallocating(v145);
              swift_arrayDestroy(v146, 1, v147);
              v149 = swift_deallocClassInstance(v145, 32, 7);
              v150 = (uint64_t)v172;
              dispatch thunk of FBKSInteraction.featureDomain.getter(v149);
              LOBYTE(v145) = sub_100006EA0(v150, (uint64_t)v148);
              swift_bridgeObjectRelease(v148);
              (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v150, v147);
              if ((v145 & 1) == 0)
              {
                v40 = v140;
                swift_beginAccess(v140, v184, 33, 0);
                v151 = v139;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                v153 = *(_QWORD *)((*v140 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v152 = *(_QWORD *)((*v140 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v153 >= v152 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v152 > 1, v153 + 1, 1);
                v154 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v153, v151);
                specialized Array._endMutation()(v154);
                swift_endAccess(v184);
                swift_unknownObjectRelease(v165);

                v110(v177, v63);
                goto LABEL_44;
              }
              v110(v177, v63);

              swift_unknownObjectRelease(v165);
              v70 = v181;
              v40 = v140;
              goto LABEL_45;
            }
            (*(void (**)(char *, uint64_t))(v62 + 8))(v177, v63);
            v92 = v165;
            goto LABEL_43;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v24, 1, 1, v180);
          v40 = v168;
        }
        swift_unknownObjectRelease(v165);
        sub_100009730((uint64_t)v24, &qword_10006F080);
      }
      else
      {
        swift_unknownObjectRelease(v43);
        v40 = v42;
      }
    }
  }
  if ((objc_msgSend(a1, "respondsToSelector:", "eventBody") & 1) != 0)
  {
    v53 = objc_msgSend(a1, "eventBody");
    if (v53)
    {
      v54 = v53;
      v55 = objc_opt_self(BMFeedbackTextToImageEvaluationData);
      v56 = (void *)swift_dynamicCastObjCClass(v54, v55);
      if (v56)
      {
        v57 = v56;
        v168 = v40;
        v58 = objc_msgSend(v56, "commonMetadata");
        if (!v58)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v19, 1, 1, v180);
          v40 = v168;
LABEL_23:
          swift_unknownObjectRelease(v54);
          sub_100009730((uint64_t)v19, &qword_10006F080);
          goto LABEL_24;
        }
        v59 = v58;
        v166 = v7;
        v60 = objc_msgSend(v58, "evaluationUuid");

        if (v60)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

          v61 = 0;
        }
        else
        {
          v61 = 1;
        }
        v65 = v168;
        v66 = v179;
        v67 = v180;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v16, v61, 1, v180);
        sub_10000976C((uint64_t)v16, (uint64_t)v19);
        v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48))(v19, 1, v67);
        v7 = v166;
        v40 = v65;
        if (v68 == 1)
          goto LABEL_23;
        v86 = v179;
        v87 = (uint64_t)v174;
        v88 = v19;
        v89 = v180;
        (*(void (**)(char *, char *, uint64_t))(v179 + 32))(v174, v88, v180);
        v93 = CFBBiomeReader.fetchEvaluation(evaluationID:)(v87);

        if (!v93)
        {
          type metadata accessor for FBKSDonation(0);
          v113 = (uint64_t)v170;
          (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v170, v87, v89);
          swift_unknownObjectRetain(v54);
          v114 = (void *)sub_10002DBC4(v57, v113);
          v115 = sub_100005D4C(&qword_10006F098);
          v116 = v173;
          v117 = *(unsigned __int8 *)(v173 + 80);
          v118 = (v117 + 32) & ~v117;
          v119 = swift_allocObject(v115, v118 + *(_QWORD *)(v173 + 72), v117 | 7);
          *(_OWORD *)(v119 + 16) = xmmword_100059440;
          v120 = v119 + v118;
          v121 = v119 + v118;
          v122 = v166;
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v116 + 104))(v121, enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:), v166);
          v123 = sub_10002AE08(v119);
          swift_setDeallocating(v119);
          swift_arrayDestroy(v120, 1, v122);
          v124 = swift_deallocClassInstance(v119, 32, 7);
          v125 = (uint64_t)v172;
          dispatch thunk of FBKSInteraction.featureDomain.getter(v124);
          LOBYTE(v119) = sub_100006EA0(v125, (uint64_t)v123);
          swift_bridgeObjectRelease(v123);
          (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v125, v122);
          if ((v119 & 1) == 0)
          {
            v40 = v168;
            swift_beginAccess(v168, v184, 33, 0);
            v155 = v114;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v157 = *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v156 = *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v157 >= v156 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1, v157 + 1, 1);
            v158 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v157, v155);
            specialized Array._endMutation()(v158);
            swift_endAccess(v184);
            swift_unknownObjectRelease(v54);

            (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v89);
            goto LABEL_44;
          }
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v89);

          swift_unknownObjectRelease(v54);
          v70 = v181;
          v40 = v168;
          goto LABEL_45;
        }
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v89);
        v92 = v54;
LABEL_43:
        swift_unknownObjectRelease(v92);
        goto LABEL_44;
      }
      swift_unknownObjectRelease(v54);
    }
  }
LABEL_24:
  v69 = objc_msgSend(a1, "respondsToSelector:", "eventBody");
  v70 = v181;
  if ((v69 & 1) != 0)
  {
    v71 = objc_msgSend(a1, "eventBody");
    if (v71)
    {
      v72 = v71;
      v73 = objc_opt_self(BMFeedbackTextImageToImageEvaluationData);
      v74 = (void *)swift_dynamicCastObjCClass(v72, v73);
      if (!v74)
      {
        swift_unknownObjectRelease(v72);
        goto LABEL_45;
      }
      v75 = v74;
      v76 = objc_msgSend(v74, "commonMetadata");
      if (!v76)
      {
        v82 = (uint64_t)v178;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v179 + 56))(v178, 1, 1, v180);
LABEL_35:
        swift_unknownObjectRelease(v72);
        sub_100009730(v82, &qword_10006F080);
LABEL_44:
        v70 = v181;
        goto LABEL_45;
      }
      v77 = v76;
      v78 = v7;
      v79 = objc_msgSend(v76, "evaluationUuid");

      v80 = v179;
      v81 = v180;
      v82 = (uint64_t)v178;
      if (v79)
      {
        v83 = v175;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v79);

        v84 = (uint64_t)v83;
        v85 = 0;
      }
      else
      {
        v85 = 1;
        v84 = (uint64_t)v175;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))(v84, v85, 1, v81);
      sub_10000976C(v84, v82);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v82, 1, v81) == 1)
        goto LABEL_35;
      v90 = (uint64_t)v176;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v176, v82, v81);
      v94 = CFBBiomeReader.fetchEvaluation(evaluationID:)(v90);

      if (v94)
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v176, v81);
        v92 = v72;
        goto LABEL_43;
      }
      type metadata accessor for FBKSDonation(0);
      v126 = (uint64_t)v169;
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v169, v176, v81);
      swift_unknownObjectRetain(v72);
      v127 = (void *)sub_10002E724(v75, v126);
      v128 = v40;
      v129 = sub_100005D4C(&qword_10006F098);
      v130 = v173;
      v131 = *(unsigned __int8 *)(v173 + 80);
      v132 = (v131 + 32) & ~v131;
      v133 = swift_allocObject(v129, v132 + *(_QWORD *)(v173 + 72), v131 | 7);
      *(_OWORD *)(v133 + 16) = xmmword_100059440;
      v134 = v133 + v132;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v130 + 104))(v134, enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:), v78);
      v135 = sub_10002AE08(v133);
      swift_setDeallocating(v133);
      swift_arrayDestroy(v134, 1, v78);
      v136 = swift_deallocClassInstance(v133, 32, 7);
      v137 = (uint64_t)v172;
      dispatch thunk of FBKSInteraction.featureDomain.getter(v136);
      LOBYTE(v133) = sub_100006EA0(v137, (uint64_t)v135);
      swift_bridgeObjectRelease(v135);
      (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v137, v78);
      if ((v133 & 1) == 0)
      {
        v40 = v128;
        swift_beginAccess(v128, v184, 33, 0);
        v159 = v127;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v161 = *(_QWORD *)((*v128 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v160 = *(_QWORD *)((*v128 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v161 >= v160 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v160 > 1, v161 + 1, 1);
        v162 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v161, v159);
        specialized Array._endMutation()(v162);
        swift_endAccess(v184);
        swift_unknownObjectRelease(v72);

        (*(void (**)(char *, uint64_t))(v179 + 8))(v176, v81);
        goto LABEL_44;
      }
      (*(void (**)(char *, uint64_t))(v179 + 8))(v176, v81);

      swift_unknownObjectRelease(v72);
      v70 = v181;
      v40 = v128;
    }
  }
LABEL_45:
  swift_beginAccess(v40, v184, 0, 0);
  v95 = *v40;
  if (*v40 >> 62)
  {
    if (v95 < 0)
      v163 = *v40;
    else
      v163 = v95 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v40);
    v96 = _CocoaArrayWrapper.endIndex.getter(v163);
    swift_bridgeObjectRelease(v95);
  }
  else
  {
    v96 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v96 < v70;
}

_QWORD *CFBBiomeReader.fetchEvaluation(evaluationID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  const void *v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char v46[24];
  void **aBlock;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;

  v2 = v1;
  v44 = a1;
  v43 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v43 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v43);
  v5 = sub_100005D4C(&qword_10006EF20);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v38 - v9;
  sub_100005D8C();
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(v8, 1, 1, v11);
  v13 = sub_100005DC8((uint64_t)v10, (uint64_t)v8, 0, 0, 1);
  v14 = *(void **)(v2 + 16);
  v45 = v13;
  v41 = objc_msgSend(v14, "publisherWithOptions:");
  v15 = swift_allocObject(&unk_100069860, 24, 7);
  *(_QWORD *)(v15 + 16) = 0;
  v39 = v15 + 16;
  v16 = (_QWORD *)swift_allocObject(&unk_1000696F8, 24, 7);
  v16[2] = 0;
  v42 = v16 + 2;
  v51 = (uint64_t (*)(uint64_t))nullsub_1;
  v52 = 0;
  aBlock = _NSConcreteStackBlock;
  v48 = 1107296256;
  v49 = sub_1000060BC;
  v50 = &unk_100069878;
  v40 = _Block_copy(&aBlock);
  v17 = v3;
  v18 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v18, v44, v43);
  v20 = *(unsigned __int8 *)(v3 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v4 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1000698B0, v23 + 8, v20 | 7);
  v25 = v24 + v21;
  v26 = v41;
  v27 = v19;
  v28 = v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25, v18, v27);
  *(_QWORD *)(v24 + v22) = v15;
  *(_QWORD *)(v24 + v23) = v16;
  v51 = sub_100009084;
  v52 = v24;
  aBlock = _NSConcreteStackBlock;
  v48 = 1107296256;
  v49 = sub_1000090FC;
  v50 = &unk_1000698C8;
  v29 = _Block_copy(&aBlock);
  v30 = v52;
  swift_retain(v15);
  swift_retain(v16);
  swift_release(v30);
  v31 = v40;
  v32 = objc_msgSend(v26, "sinkWithCompletion:shouldContinue:", v40, v29);
  _Block_release(v29);
  _Block_release(v31);

  v33 = v42;
  swift_beginAccess(v42, &aBlock, 0, 0);
  v34 = *v33;
  if (v34)
  {
    v35 = swift_errorRetain(v34);
    swift_willThrow(v35);

    swift_release(v15);
    swift_release(v16);
  }
  else
  {

    swift_beginAccess(v39, v46, 0, 0);
    v16 = *(_QWORD **)(v15 + 16);
    v36 = v16;
    swift_release(v15);
    swift_release(v28);
  }
  return v16;
}

uint64_t sub_100008BB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100008BD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 36, 7);
}

BOOL sub_100008C00(void *a1)
{
  uint64_t v1;

  return sub_10000733C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t sub_100008C0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  void **v33;
  void *v34;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  char v39[32];

  v38 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v37 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D4C(&qword_10006F078);
  __chkstk_darwin(v10);
  v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D4C(&qword_10006F080);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)v36 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)v36 - v20;
  v22 = objc_msgSend(a1, "eventBody");
  if (!v22)
    return 1;
  v23 = v22;
  v36[1] = a4;
  v24 = objc_msgSend(v22, "evaluationUuid");
  v36[0] = a3;
  if (v24)
  {
    v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v26(v21, 0, 1, v7);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v26(v21, 1, 1, v7);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v19, v38, v7);
  v26(v19, 0, 1, v7);
  v27 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1000096E8((uint64_t)v21, (uint64_t)v12);
  sub_1000096E8((uint64_t)v19, v27);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v28((uint64_t)v12, 1, v7) == 1)
  {
    sub_100009730((uint64_t)v19, &qword_10006F080);
    sub_100009730((uint64_t)v21, &qword_10006F080);
    if (v28(v27, 1, v7) == 1)
    {
      sub_100009730((uint64_t)v12, &qword_10006F080);
LABEL_12:
      type metadata accessor for FBKSEvaluation(0);
      v32 = sub_10001AF78(v23);
      v33 = (void **)(v36[0] + 16);
      swift_beginAccess(v36[0] + 16, v39, 1, 0);
      v34 = *v33;
      *v33 = v32;

      return 0;
    }
  }
  else
  {
    sub_1000096E8((uint64_t)v12, (uint64_t)v16);
    if (v28(v27, 1, v7) != 1)
    {
      v29 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v37, v27, v7);
      v30 = sub_100009BE4(&qword_10006F088, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v38) = dispatch thunk of static Equatable.== infix(_:_:)(v16, v29, v7, v30);
      v31 = *(void (**)(char *, uint64_t))(v8 + 8);
      v31(v29, v7);
      sub_100009730((uint64_t)v19, &qword_10006F080);
      sub_100009730((uint64_t)v21, &qword_10006F080);
      v31(v16, v7);
      sub_100009730((uint64_t)v12, &qword_10006F080);
      if ((v38 & 1) != 0)
        goto LABEL_12;
      goto LABEL_13;
    }
    sub_100009730((uint64_t)v19, &qword_10006F080);
    sub_100009730((uint64_t)v21, &qword_10006F080);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }
  sub_100009730((uint64_t)v12, &qword_10006F078);
LABEL_13:

  return 1;
}

uint64_t sub_100008FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100009084(uint64_t a1)
{
  return sub_100009090(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_100008C0C);
}

uint64_t sub_100009090(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(a1, v2 + v5, *(_QWORD *)(v2 + v6), *(_QWORD *)(v2 + ((v6 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000090FC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

id *CFBBiomeDonator.deinit()
{
  id *v0;

  return v0;
}

uint64_t CFBBiomeDonator.__deallocating_deinit()
{
  id *v0;

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for CFBBiomeReader()
{
  return objc_opt_self(_TtC9feedbackd14CFBBiomeReader);
}

_QWORD *sub_1000091DC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000091F0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100009220(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100009234(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

void sub_100009248(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100009250(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100059A98, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000928C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100059A98, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000092D4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_100059A98, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10000932C(uint64_t a1, uint64_t a2)
{
  return sub_100009A70(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000934C(uint64_t a1, uint64_t a2)
{
  return sub_100009A70(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100009358(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000093CC(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100009448@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

id sub_100009488()
{
  id *v0;

  return *v0;
}

uint64_t sub_100009490@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *sub_100009498@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000094A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100059A98, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1000094F4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(BGSystemTaskSchedulerErrorDomain);
}

uint64_t sub_100009504(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009544(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009584(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000095E8()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10000961C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000966C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_1000096C8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000096D8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000096E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009730(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005D4C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000976C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000097B4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000097CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100009BE4(&qword_10006F1E0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100059A54);
  v3 = sub_100009BE4(&qword_10006F1E8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1000599A8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009850@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100009894@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000098BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100009BE4(&qword_10006F1F0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000598B0);
  v3 = sub_100009BE4(&qword_10006F1F8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100059850);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100009940(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009BE4(&qword_10006F1B0, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_1000596C8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009980(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009BE4(&qword_10006F1B0, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_1000596C8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000099C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100009A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100009A5C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100009A70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100009AAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100009AEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100009B5C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100009BE4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_100009C24(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100009C64(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100009C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F120, (uint64_t)&unk_1000699E0);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F128, (uint64_t)&unk_100069A00);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F130, (uint64_t)&unk_100069A28);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F138, (uint64_t)&unk_100069A50);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F140, (uint64_t)&unk_100069A80);
}

void type metadata accessor for BGSystemTaskSchedulerError(uint64_t a1)
{
  sub_100009D38(a1, &qword_10006F148, (uint64_t)&unk_100069AA0);
}

void sub_100009D38(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100009D7C()
{
  return sub_100009BE4(&qword_10006F150, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_1000595F0);
}

uint64_t sub_100009DA8()
{
  return sub_100009BE4(&qword_10006F158, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059618);
}

uint64_t sub_100009DD4()
{
  return sub_100009BE4((unint64_t *)&unk_10006F160, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100059708);
}

uint64_t sub_100009E00()
{
  return sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
}

uint64_t sub_100009E2C()
{
  return sub_100009BE4(&qword_10006F170, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100059814);
}

uint64_t sub_100009E58()
{
  return sub_100009BE4(&qword_10006F178, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1000597E8);
}

uint64_t sub_100009E84()
{
  return sub_100009BE4(&qword_10006F180, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100059884);
}

uint64_t sub_100009EB0()
{
  return sub_100009BE4(&qword_10006F188, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10005996C);
}

uint64_t sub_100009EDC()
{
  return sub_100009BE4(&qword_10006F190, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100059940);
}

uint64_t sub_100009F08()
{
  return sub_100009BE4(&qword_10006F198, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1000599DC);
}

uint64_t sub_100009F34()
{
  return sub_100009BE4((unint64_t *)&qword_10006F1A0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100059AC4);
}

uint64_t sub_100009F60()
{
  return sub_100009BE4(&qword_10006F1A8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1000597B0);
}

uint64_t sub_100009F8C()
{
  return sub_100009BE4(&qword_10006F1B0, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_1000596C8);
}

uint64_t sub_100009FB8()
{
  return sub_100009BE4(&qword_10006F1B8, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059698);
}

uint64_t sub_100009FE4()
{
  return sub_100009BE4(&qword_10006F1C0, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059658);
}

uint64_t sub_10000A010()
{
  return sub_100009BE4(&qword_10006F1C8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100059730);
}

uint64_t sub_10000A03C()
{
  return sub_100009BE4(&qword_10006F1D0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100059768);
}

unint64_t sub_10000A06C()
{
  unint64_t result;

  result = qword_10006F1D8;
  if (!qword_10006F1D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10006F1D8);
  }
  return result;
}

void sub_10000A108(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSString v4;
  NSString v5;
  Class isa;
  NSString v7;
  Class v8;
  NSString v9;
  NSString v10;
  NSString v11;

  v2 = v1;
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v4, v5);

  isa = Date._bridgeToObjectiveC()().super.isa;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", isa, v7);

  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v8 = NSNumber.init(integerLiteral:)(*(_QWORD *)(v2 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId)).super.super.isa;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v8, v9);

  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "encodeObject:forKey:", v10, v11);

}

id sub_10000A2F0(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  uint64_t *v33;
  objc_class *v34;
  id v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;

  v2 = v1;
  sub_100005D4C(&qword_10006EF20);
  ((void (*)(void))__chkstk_darwin)();
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v38 - v11;
  v13 = sub_10000A968(0, &qword_10006F310, NSString_ptr);
  v14 = v2;
  v15 = NSCoder.decodeObject<A>(of:forKey:)(v13, 0x6E6564496D726F66, 0xEE00726569666974, v13);
  if (!v15)
  {

LABEL_13:
    v36 = type metadata accessor for FeedbackSubmission(0);
    swift_deallocPartialClassInstance(v14, v36, *(unsigned int *)((swift_isaMask & *v14) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v14) + 0x34));
    return 0;
  }
  v16 = (void *)v15;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19 = sub_10000A968(0, &qword_10006F318, NSDate_ptr);
  v20 = NSCoder.decodeObject<A>(of:forKey:)(v19, 1702125924, 0xE400000000000000, v19);
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_9;
  }
  v21 = (void *)v20;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v22 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v22(v5, v10, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_9:

    swift_bridgeObjectRelease(v18);
    sub_10000A9A0((uint64_t)v5);
    goto LABEL_13;
  }
  v22(v12, v5, v6);
  v23 = sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v24 = NSCoder.decodeObject<A>(of:forKey:)(v23, 0x6B63616264656566, 0xEA00000000006449, v23);
  if (!v24)
  {

LABEL_12:
    swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    goto LABEL_13;
  }
  v25 = (void *)v24;
  v26 = NSCoder.decodeObject<A>(of:forKey:)(v13, 0x646C697562, 0xE500000000000000, v13);
  if (!v26)
  {

    goto LABEL_12;
  }
  v27 = (void *)v26;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v30 = v29;

  v31 = (_QWORD *)((char *)v14 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_formIdentifier);
  *v31 = v39;
  v31[1] = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))((uint64_t)v14 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date, v12, v6);
  v32 = objc_msgSend(v25, "integerValue");

  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId) = v32;
  v33 = (_QWORD *)((char *)v14 + OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build);
  *v33 = v28;
  v33[1] = v30;

  v34 = (objc_class *)type metadata accessor for FeedbackSubmission(0);
  v40.receiver = v14;
  v40.super_class = v34;
  v35 = objc_msgSendSuper2(&v40, "init");

  return v35;
}

id sub_10000A6D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedbackSubmission(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000A76C()
{
  return type metadata accessor for FeedbackSubmission(0);
}

uint64_t type metadata accessor for FeedbackSubmission(uint64_t a1)
{
  uint64_t result;

  result = qword_10006F2F0;
  if (!qword_10006F2F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeedbackSubmission);
  return result;
}

uint64_t sub_10000A7B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100059BA8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100059BA8;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

id sub_10000A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  char *v11;
  char *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  objc_super v20;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (objc_class *)type metadata accessor for FeedbackSubmission(0);
  v11 = (char *)objc_allocWithZone(v10);
  v12 = &v11[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_formIdentifier];
  *(_QWORD *)v12 = a1;
  *((_QWORD *)v12 + 1) = a2;
  v13 = v11;
  Date.init()(v13);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date], v9, v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId] = a3;
  v14 = objc_msgSend((id)objc_opt_self(FBKSSharedConstants), "swVers");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18 = (uint64_t *)&v13[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build];
  *v18 = v15;
  v18[1] = v17;

  v20.receiver = v13;
  v20.super_class = v10;
  return objc_msgSendSuper2(&v20, "init");
}

uint64_t sub_10000A968(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000A9A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D4C(&qword_10006EF20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A9E0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006F380);
  sub_1000097B4(v0, (uint64_t)qword_10006F380);
  v1 = static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10000AA48()
{
  return 1;
}

Swift::Int sub_10000AA50()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10000AA90()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10000AAB4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10000AAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = static Strings.Daemon.bundleIdentifier.getter();
  v2 = v1;
  v3 = String.utf8CString.getter(v0);
  swift_bridgeObjectRelease(v2);
  LOBYTE(v2) = os_variant_has_internal_diagnostics(v3 + 32);
  result = swift_release(v3);
  byte_10006F398 = v2;
  return result;
}

uint64_t sub_10000AB48()
{
  uint64_t result;
  uint64_t v1;

  if (qword_10006EDE8 != -1)
    swift_once(&qword_10006EDE8, sub_10000AAFC);
  if (byte_10006F398 == 1)
    result = static Strings.feedbackInternalBundleIdentifier.getter();
  else
    result = static Strings.fbaBundleIdentifier.getter();
  qword_10006F3A0 = result;
  *(_QWORD *)algn_10006F3A8 = v1;
  return result;
}

uint64_t sub_10000ABA8()
{
  uint64_t v0;
  uint64_t result;

  if (qword_10006EDE8 != -1)
    result = swift_once(&qword_10006EDE8, sub_10000AAFC);
  v0 = 168;
  if (byte_10006F398)
    v0 = 24;
  qword_10006F3B0 = v0;
  return result;
}

id sub_10000AC00()
{
  uint64_t v0;
  id result;

  v0 = type metadata accessor for CFBNotificationController(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10000C470();
  qword_100072518 = (uint64_t)result;
  return result;
}

id sub_10000AC3C()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return sub_10000C470();
}

uint64_t sub_10000AC6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[22] = v0;
  v2 = type metadata accessor for Date(0);
  v1[23] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D4C(&qword_10006F428);
  v1[26] = v4;
  v1[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006EF20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[28] = swift_task_alloc(v5);
  v1[29] = swift_task_alloc(v5);
  v1[30] = swift_task_alloc(v5);
  return swift_task_switch(sub_10000AD34, v0, 0);
}

uint64_t sub_10000AD34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10006EDE0 != -1)
    swift_once(&qword_10006EDE0, sub_10000A9E0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_10006F380);
  v0[31] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[21] = sub_1000572F8(0xD000000000000012, 0x800000010005ADC0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_10006F404);
  v0[32] = v7;
  *v7 = v0;
  v7[1] = sub_10000AED0;
  return sub_10000B8E8();
}

uint64_t sub_10000AED0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_BYTE *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000AF30, v3, 0);
}

uint64_t sub_10000AF30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(v0 + 320) & 1) != 0)
  {
    *(_QWORD *)(v0 + 264) = *(_QWORD *)(*(_QWORD *)(v0 + 176)
                                      + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter);
    v1 = (_QWORD *)swift_task_alloc(dword_10006F40C);
    *(_QWORD *)(v0 + 272) = v1;
    *v1 = v0;
    v1[1] = sub_10000B02C;
    v2 = *(_QWORD *)(v0 + 176);
    v1[24] = v2;
    return swift_task_switch(sub_10000BE20, v2, 0);
  }
  else
  {
    v4 = sub_10000C874();
    v5 = swift_allocError(&type metadata for CFBNotificationController.NotificationError, v4, 0, 0);
    swift_willThrow(v5);
    v6 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000B02C()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 272);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10000B0DC, v2[22], 0);
  v6 = v2[29];
  v5 = v2[30];
  v8 = v2[27];
  v7 = v2[28];
  v9 = v2[25];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10000B0DC()
{
  _QWORD *v0;
  id v1;
  Swift::String v2;
  void *object;
  NSString v4;
  Swift::String v5;
  void *v6;
  NSString v7;
  unint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  NSString v14;
  _QWORD *v15;

  v1 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  v0[35] = v1;
  v2._countAndFlagsBits = 0xD000000000000016;
  v2._object = (void *)0x800000010005AD20;
  object = FBKSLocalizedString(key:)(v2)._object;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v1, "setTitle:", v4);

  v5._countAndFlagsBits = 0xD000000000000018;
  v5._object = (void *)0x800000010005AD40;
  v6 = FBKSLocalizedString(key:)(v5)._object;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v1, "setBody:", v7);

  v8 = sub_100014354((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v1, "setUserInfo:", isa);

  static Strings.Notification.cfbCategoryIdentifier.getter(objc_msgSend(v1, "setInterruptionLevel:", 1));
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v1, "setCategoryIdentifier:", v12);

  v13 = v1;
  v14 = String._bridgeToObjectiveC()();
  v0[36] = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v14, v13, 0);

  v15 = (_QWORD *)swift_task_alloc(dword_10006F404);
  v0[37] = v15;
  *v15 = v0;
  v15[1] = sub_10000B2D4;
  return sub_10000B8E8();
}

uint64_t sub_10000B2D4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_BYTE *)(*(_QWORD *)v1 + 321) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000B334, v3, 0);
}

uint64_t sub_10000B334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(v0 + 321) & 1) != 0)
  {
    v1 = v0 + 16;
    v2 = *(_QWORD *)(v0 + 288);
    v3 = *(void **)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 240);
    v5 = *(_QWORD *)(v0 + 176);
    v6 = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
    *(_QWORD *)(v0 + 304) = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
    v7 = v5 + v6;
    swift_beginAccess(v5 + v6, v0 + 120, 0, 0);
    sub_10000C82C(v7, v4);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10000B498;
    v8 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v9 = (_QWORD *)(v0 + 80);
    v9[1] = 0x40000000;
    v9[2] = sub_100022054;
    v9[3] = &unk_100069C80;
    v9[4] = v8;
    objc_msgSend(v3, "addNotificationRequest:withCompletionHandler:", v2, v9);
    return swift_continuation_await(v1);
  }
  else
  {
    v12 = *(void **)(v0 + 280);
    v11 = *(void **)(v0 + 288);
    v13 = sub_10000C8B8();
    v14 = swift_allocError(&type metadata for NotificationController.Error, v13, 0, 0);
    swift_willThrow(v14);

    v15 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000B498()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 312) = v2;
  if (v2)
    v3 = sub_10000B854;
  else
    v3 = sub_10000B4F8;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_10000B4F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(uint64_t, uint64_t);
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  NSString v29;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = v2 + *(int *)(*(_QWORD *)(v0 + 208) + 48);
  sub_10000C82C(*(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 304), v2);
  sub_10000C82C(v1, v5);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v6(v2, 1, v3) == 1)
  {
    if (v6(v5, 1, *(_QWORD *)(v0 + 184)) == 1)
    {
      v7 = sub_100009730(*(_QWORD *)(v0 + 216), &qword_10006EF20);
      goto LABEL_11;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 184);
    sub_10000C82C(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 232));
    v9 = v6(v5, 1, v8);
    v10 = *(_QWORD *)(v0 + 232);
    if (v9 != 1)
    {
      v11 = *(_QWORD *)(v0 + 216);
      v13 = *(_QWORD *)(v0 + 192);
      v12 = *(_QWORD *)(v0 + 200);
      v14 = *(_QWORD *)(v0 + 184);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, v5, v14);
      v15 = sub_10000C944(&qword_10006F440, (uint64_t)&protocol conformance descriptor for Date);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v12, v14, v15);
      v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v17(v12, v14);
      v17(v10, v14);
      v7 = sub_100009730(v11, &qword_10006EF20);
      if ((v16 & 1) != 0)
        goto LABEL_11;
      goto LABEL_8;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 184));
  }
  v7 = sub_100009730(*(_QWORD *)(v0 + 216), &qword_10006F428);
LABEL_8:
  v18 = Logger.logObject.getter(v7);
  v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Race condition detected in notification posts count", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

LABEL_11:
  v31 = *(void **)(v0 + 288);
  v32 = *(void **)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 232);
  v34 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 176) + *(_QWORD *)(v0 + 304);
  v26 = *(_QWORD *)(v0 + 192);
  v25 = *(_QWORD *)(v0 + 200);
  static Date.now.getter(v7);
  v27 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v28 = Date.timeIntervalSince1970.getter();
  v29 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setDouble:forKey:", v29, v28);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v22, v25, v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v23);
  swift_beginAccess(v24, v0 + 144, 33, 0);
  sub_10000C8FC(v22, v24);
  swift_endAccess(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v23);
  sub_100009730(v21, &qword_10006EF20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v33);
  swift_task_dealloc(v22);
  swift_task_dealloc(v34);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000B854(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(void **)(v1 + 280);
  v2 = *(void **)(v1 + 288);
  v4 = *(_QWORD *)(v1 + 240);
  swift_willThrow(a1);

  sub_100009730(v4, &qword_10006EF20);
  v5 = *(_QWORD *)(v1 + 232);
  v7 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v1 + 224);
  v8 = *(_QWORD *)(v1 + 200);
  swift_task_dealloc(*(_QWORD *)(v1 + 240));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10000B8E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1[5] = v0;
  v2 = type metadata accessor for Calendar.Component(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  v1[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[10] = v5;
  v1[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006EF20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[12] = swift_task_alloc(v6);
  v1[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for Date(0);
  v1[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v9);
  v1[17] = swift_task_alloc(v9);
  v1[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_10000B9E8, v0, 0);
}

uint64_t sub_10000B9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  static Calendar.current.getter();
  v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for Calendar.Component.hour(_:), v3);
  if (qword_10006EDF8 != -1)
    v4 = swift_once(&qword_10006EDF8, sub_10000ABA8);
  v5 = -qword_10006F3B0;
  if (__OFSUB__(0, qword_10006F3B0))
  {
    __break(1u);
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 64);
  v51 = *(_QWORD *)(v0 + 80);
  v52 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  static Date.now.getter(v4);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v11, v5, v6, 0);
  v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v14(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v10, v52);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v15(v9, 1, v7) == 1)
  {
    sub_100009730(*(_QWORD *)(v0 + 104), &qword_10006EF20);
    if (qword_10006EDE0 == -1)
    {
LABEL_6:
      v16 = type metadata accessor for Logger(0);
      v17 = sub_1000097B4(v16, (uint64_t)qword_10006F380);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to get interval start for notification limits.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

LABEL_18:
      v30 = 0;
      goto LABEL_19;
    }
LABEL_21:
    swift_once(&qword_10006EDE0, sub_10000A9E0);
    goto LABEL_6;
  }
  v21 = v14;
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  v25(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 104), v22);
  v26 = v24 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  swift_beginAccess(v26, v0 + 16, 0, 0);
  sub_10000C82C(v26, v23);
  v27 = v15(v23, 1, v22);
  v28 = *(_QWORD *)(v0 + 144);
  if (v27 == 1)
  {
    v29 = *(_QWORD *)(v0 + 96);
    v21(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
    sub_100009730(v29, &qword_10006EF20);
    v30 = 1;
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 112);
    v25(v31, *(_QWORD *)(v0 + 96), v32);
    v33 = sub_10000C944(&qword_10006F420, (uint64_t)&protocol conformance descriptor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v31, v28, v32, v33) & 1) == 0)
    {
      if (qword_10006EDE0 != -1)
        swift_once(&qword_10006EDE0, sub_10000A9E0);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_1000097B4(v36, (uint64_t)qword_10006F380);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Reached maximum number of notifications for this interval.", v40, 2u);
        swift_slowDealloc(v40, -1, -1);
      }
      v41 = *(_QWORD *)(v0 + 144);
      v42 = *(_QWORD *)(v0 + 128);
      v43 = *(_QWORD *)(v0 + 112);

      v21(v42, v43);
      v21(v41, v43);
      goto LABEL_18;
    }
    v34 = *(_QWORD *)(v0 + 144);
    v35 = *(_QWORD *)(v0 + 112);
    v21(*(_QWORD *)(v0 + 128), v35);
    v21(v34, v35);
    v30 = 1;
  }
LABEL_19:
  v44 = *(_QWORD *)(v0 + 136);
  v45 = *(_QWORD *)(v0 + 128);
  v47 = *(_QWORD *)(v0 + 96);
  v46 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 88);
  v49 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v30);
}

uint64_t sub_10000BE08()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 192) = v0;
  return swift_task_switch(sub_10000BE20, v0, 0);
}

uint64_t sub_10000BE20()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = *(void **)(v0[24] + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter);
  v0[25] = v2;
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_10000BEC4;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[18] = _NSConcreteStackBlock;
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_1000220C8;
  v4[3] = &unk_100069C50;
  v4[4] = v3;
  objc_msgSend(v2, "getNotificationSettingsWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10000BEC4()
{
  uint64_t v0;

  return swift_task_switch(sub_10000BF10, *(_QWORD *)(*(_QWORD *)v0 + 192), 0);
}

uint64_t sub_10000BF10()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 10;
  v2 = (void *)v0[25];
  v0[26] = v0[23];
  v0[15] = v0 + 23;
  v0[10] = v0;
  v0[11] = sub_10000BFB0;
  v3 = swift_continuation_init(v0 + 10, 1);
  v0[18] = _NSConcreteStackBlock;
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_1000220F8;
  v4[3] = &unk_100069C68;
  v4[4] = v3;
  objc_msgSend(v2, "requestAuthorizationWithOptions:completionHandler:", 7, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10000BFB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 216) = v2;
  if (v2)
    v3 = sub_10000C430;
  else
    v3 = sub_10000C010;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 192), 0);
}

uint64_t sub_10000C010()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  void *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(void);
  NSObject *v24;
  uint8_t *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(unsigned __int8 *)(v0 + 184);
  if (qword_10006EDE0 != -1)
    swift_once(&qword_10006EDE0, sub_10000A9E0);
  v2 = *(void **)(v0 + 208);
  v3 = type metadata accessor for Logger(0);
  sub_1000097B4(v3, (uint64_t)qword_10006F380);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 208);
  v8 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  if (v6)
  {
    v9 = swift_slowAlloc(28, -1);
    v27 = (_QWORD *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v9 = 136446722;
    *(_QWORD *)(v0 + 144) = objc_msgSend(v7, "authorizationStatus");
    type metadata accessor for UNAuthorizationStatus(0);
    v11 = String.init<A>(describing:)(v0 + 144, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 144) = sub_1000572F8(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    swift_bridgeObjectRelease(v13);

    *(_WORD *)(v9 + 12) = 1026;
    *(_DWORD *)(v0 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 148);
    *(_WORD *)(v9 + 18) = 2112;
    *(_QWORD *)(v0 + 144) = v7;
    v14 = v7;
    v8 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    *v27 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Previous status [%{public}s], authorized? %{BOOL,public}d\nSettings: %@", (uint8_t *)v9, 0x1Cu);
    v15 = sub_100005D4C(&qword_10006F418);
    swift_arrayDestroy(v27, 1, v15);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {

  }
  v16 = objc_msgSend(*(id *)(v0 + 208), v8[25]);
  switch((unint64_t)v16)
  {
    case 0uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Not Determined";
      goto LABEL_18;
    case 1uLL:
      v20 = *(void **)(v0 + 208);
      v21 = sub_10000C7E8();
      swift_allocError(&type metadata for FeedbackdError, v21, 0, 0);
      *v22 = 5;
      swift_willThrow();

      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
    case 2uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Authorized";
      goto LABEL_18;
    case 3uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Provisional";
      goto LABEL_18;
    case 4uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Ephemeral";
      goto LABEL_18;
    default:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = "Notification status is Unknown Default";
LABEL_18:
        v24 = v17;
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v18, v19, v25, 2u);
        swift_slowDealloc(v25, -1, -1);
        v17 = *(NSObject **)(v0 + 208);
      }
      else
      {
LABEL_19:
        v24 = *(NSObject **)(v0 + 208);
      }

      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
  }
}

uint64_t sub_10000C430()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10000C470()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  id v14;
  objc_class *v15;
  objc_super v17;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v0);
  v6 = &v0[OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = OBJC_IVAR____TtC9feedbackd25CFBNotificationController_notificationCenter;
  v9 = qword_10006EDF0;
  swift_retain(v1);
  if (v9 != -1)
    swift_once(&qword_10006EDF0, sub_10000AB48);
  v10 = *(_QWORD *)algn_10006F3A8;
  sub_10000C7AC();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
  swift_bridgeObjectRetain(v10);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v14 = objc_msgSend(v12, "initWithBundleIdentifier:queue:", v13, v11);

  *(_QWORD *)&v1[v8] = v14;
  swift_release(v1);
  v15 = (objc_class *)type metadata accessor for CFBNotificationController(0);
  v17.receiver = v1;
  v17.super_class = v15;
  return objc_msgSendSuper2(&v17, "init");
}

uint64_t sub_10000C640()
{
  uint64_t v0;

  sub_100009730(v0 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate, &qword_10006EF20);

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10000C684()
{
  return type metadata accessor for CFBNotificationController(0);
}

uint64_t type metadata accessor for CFBNotificationController(uint64_t a1)
{
  uint64_t result;

  result = qword_10006F3E8;
  if (!qword_10006F3E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CFBNotificationController);
  return result;
}

void sub_10000C6C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10000C74C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10000C74C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10006F410)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10006F410);
  }
}

uint64_t sub_10000C7A0()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_10000C7AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006FC10;
  if (!qword_10006FC10)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10006FC10);
  }
  return result;
}

unint64_t sub_10000C7E8()
{
  unint64_t result;

  result = qword_10006FB80;
  if (!qword_10006FB80)
  {
    result = swift_getWitnessTable(&unk_100059F28, &type metadata for FeedbackdError);
    atomic_store(result, (unint64_t *)&qword_10006FB80);
  }
  return result;
}

uint64_t sub_10000C82C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006EF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000C874()
{
  unint64_t result;

  result = qword_10006F430;
  if (!qword_10006F430)
  {
    result = swift_getWitnessTable(&unk_100059CDC, &type metadata for CFBNotificationController.NotificationError);
    atomic_store(result, (unint64_t *)&qword_10006F430);
  }
  return result;
}

unint64_t sub_10000C8B8()
{
  unint64_t result;

  result = qword_10006F438;
  if (!qword_10006F438)
  {
    result = swift_getWitnessTable(&unk_10005A518, &type metadata for NotificationController.Error);
    atomic_store(result, (unint64_t *)&qword_10006F438);
  }
  return result;
}

uint64_t sub_10000C8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006EF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C944(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CFBNotificationController.NotificationError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CFBNotificationController.NotificationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10000CA1C + 4 * byte_100059BE5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10000CA3C + 4 * byte_100059BEA[v4]))();
}

_BYTE *sub_10000CA1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10000CA3C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000CA44(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000CA4C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10000CA54(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10000CA5C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10000CA68()
{
  return 0;
}

ValueMetadata *type metadata accessor for CFBNotificationController.NotificationError()
{
  return &type metadata for CFBNotificationController.NotificationError;
}

unint64_t sub_10000CA84()
{
  unint64_t result;

  result = qword_10006F448;
  if (!qword_10006F448)
  {
    result = swift_getWitnessTable(&unk_100059CB4, &type metadata for CFBNotificationController.NotificationError);
    atomic_store(result, (unint64_t *)&qword_10006F448);
  }
  return result;
}

uint64_t sub_10000CAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006F450);
  v1 = sub_1000097B4(v0, (uint64_t)qword_10006F450);
  if (qword_10006EE38 != -1)
    swift_once(&qword_10006EE38, sub_1000221E4);
  v2 = sub_1000097B4(v0, (uint64_t)qword_100072538);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10000CB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for NotificationScheduler();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize(v1);
  qword_100072528 = v1;
  return result;
}

uint64_t sub_10000CB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  v8 = type metadata accessor for FormLaunchConfiguration(0);
  v7[12] = v8;
  v7[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006EF20);
  v7[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000CC1C, v6, 0);
}

uint64_t sub_10000CC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v10;

  if (qword_10006EE08 != -1)
    swift_once(&qword_10006EE08, sub_10000CAC8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_10006F450);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_1000572F8(0xD00000000000002CLL, 0x800000010005AE50, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_10006EE40 != -1)
    swift_once(&qword_10006EE40, sub_100022594);
  v7 = *(_BYTE *)(*(_QWORD *)(v0 + 80) + 80);
  *(_BYTE *)(v0 + 160) = v7;
  v8 = (_QWORD *)swift_task_alloc(dword_10006FA74);
  *(_QWORD *)(v0 + 128) = v8;
  *v8 = v0;
  v8[1] = sub_10000CDF4;
  return sub_100022274(v7);
}

uint64_t sub_10000CDF4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_BYTE *)(*(_QWORD *)v1 + 161) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000CE54, v3, 0);
}

uint64_t sub_10000CE54()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_10000CEB4, qword_100072530, 0);
}

uint64_t sub_10000CEB4()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "arrayForKey:", v2);

  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

    v6 = sub_10001E5F4(v5);
    swift_bridgeObjectRelease(v5);
    if (v6)
      v4 = v6;
  }
  *(_QWORD *)(v0 + 136) = v4;
  return swift_task_switch(sub_10000CFA4, *(_QWORD *)(v0 + 88), 0);
}

uint64_t sub_10000CFA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(unsigned __int8 *)(v0 + 161);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = swift_bridgeObjectRelease(v1);
  if (v2 != 1 || v3 != 0)
  {
    if ((*(_BYTE *)(v0 + 160) & 1) == 0)
      return swift_task_switch(sub_10000D2D4, qword_100072530, 0);
    goto LABEL_8;
  }
  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
LABEL_8:
    v7 = Logger.logObject.getter(v4);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Used configuration to notify immediately", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  v10 = (_QWORD *)swift_task_alloc(dword_10006FA84);
  *(_QWORD *)(v0 + 144) = v10;
  *v10 = v0;
  v10[1] = sub_10000D0CC;
  return sub_100025228(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_10000D0CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10000D328;
  else
    v4 = sub_10000D130;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), 0);
}

uint64_t sub_10000D130()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = v0[13];
  v1 = v0[14];
  v3 = (int *)v0[12];
  v4 = v0[10];
  v6 = v0[7];
  v5 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  v9 = v2 + v3[8];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_10000C82C(v1, v2 + v3[9]);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v5);
  v11 = sub_10000F794((_QWORD *)v4);
  Date.init()(v11);
  *(_QWORD *)v2 = v8;
  *(_QWORD *)(v2 + 8) = v7;
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)(v2 + 24) = v5;
  v12 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)v4;
  *(_OWORD *)(v2 + 48) = v12;
  v13 = *(_OWORD *)(v4 + 32);
  v14 = *(_OWORD *)(v4 + 48);
  v15 = *(_OWORD *)(v4 + 64);
  *(_BYTE *)(v2 + 112) = *(_BYTE *)(v4 + 80);
  *(_OWORD *)(v2 + 80) = v14;
  *(_OWORD *)(v2 + 96) = v15;
  *(_OWORD *)(v2 + 64) = v13;
  *(_QWORD *)(v2 + v3[7]) = 0;
  *(_QWORD *)(v2 + v3[10]) = 0;
  return swift_task_switch(sub_10000D238, qword_100072530, 0);
}

uint64_t sub_10000D238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  sub_10001F0F4(*(Swift::String **)(v0 + 104));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10000D280, v1, 0);
}

uint64_t sub_10000D280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 112);
  sub_10000F758(*(_QWORD *)(v0 + 104));
  sub_100009730(v1, &qword_10006EF20);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001F270(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 16) = v1;
  swift_errorRetain(v1);
  v2 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v2, v0 + 16, v2, &type metadata for NotificationController.Error, 0))
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 48);
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    swift_bridgeObjectRetain_n(v4, 2);
    v5 = swift_bridgeObjectRetain_n(v3, 2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 48);
    if (v8)
    {
      v11 = *(_QWORD *)(v0 + 40);
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v18 = v13;
      *(_DWORD *)v12 = 136446210;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v0 + 24) = sub_1000572F8(v11, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease_n(v10, 3);
      swift_bridgeObjectRelease_n(v9, 2);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Posting notification for [%{public}s] was halted because we have already posted the max amount allowed for this interval. Will enqueue notification for later", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
      swift_bridgeObjectRelease_n(v9, 2);
    }

    return swift_task_switch(sub_10000D568, qword_100072530, 0);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v16 = swift_errorRelease(*(_QWORD *)(v0 + 16));
    swift_willThrow(v16);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000D568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  sub_10001F270(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10000D5B4, v1, 0);
}

uint64_t sub_10000D5B4()
{
  uint64_t v0;
  uint64_t v1;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000D5F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1[18] = v0;
  v2 = sub_100005D4C(&qword_10006EF20);
  v1[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D4C((uint64_t *)&unk_1000705A0);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FormItem(0);
  v1[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[22] = v5;
  v1[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D4C(&qword_10006F528);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FormLaunchConfiguration(0);
  v1[25] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[26] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[27] = swift_task_alloc(v9);
  v1[28] = swift_task_alloc(v9);
  v1[29] = swift_task_alloc(v9);
  v1[30] = swift_task_alloc(v9);
  return swift_task_switch(sub_10000D714, v0, 0);
}

uint64_t sub_10000D714()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (qword_10006EE08 != -1)
    swift_once(&qword_10006EE08, sub_10000CAC8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_10006F450);
  v0[31] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[17] = sub_1000572F8(0xD00000000000001ALL, 0x800000010005AE10, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_10006EE40 != -1)
    swift_once(&qword_10006EE40, sub_100022594);
  v7 = (_QWORD *)swift_task_alloc(dword_10006FA74);
  v0[32] = v7;
  *v7 = v0;
  v7[1] = sub_10000D8E0;
  return sub_100022274(0);
}

uint64_t sub_10000D8E0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_BYTE *)(*(_QWORD *)v1 + 97) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000D940, v3, 0);
}

uint64_t sub_10000D940(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v1 + 97) == 1)
  {
    if (qword_10006EE28 != -1)
      swift_once(&qword_10006EE28, sub_10001B5C0);
    return swift_task_switch(sub_10000DAA0, qword_100072530, 0);
  }
  else
  {
    v3 = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Too soon to post another notification. Will not inspect pending queue", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = *(_QWORD *)(v1 + 232);
    v8 = *(_QWORD *)(v1 + 216);
    v7 = *(_QWORD *)(v1 + 224);
    v10 = *(_QWORD *)(v1 + 184);
    v9 = *(_QWORD *)(v1 + 192);
    v12 = *(_QWORD *)(v1 + 152);
    v11 = *(_QWORD *)(v1 + 160);
    swift_task_dealloc(*(_QWORD *)(v1 + 240));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10000DAA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 264) = sub_10001F618();
  return swift_task_switch(sub_10000DAE0, v1, 0);
}

uint64_t sub_10000DAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 272) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v1 + 32);
    v3 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v0 + 288) = v3;
    *(_BYTE *)(v0 + 98) = *(_BYTE *)(v1 + 48);
    v4 = dword_10006FA74;
    swift_bridgeObjectRetain(v3);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 296) = v5;
    *v5 = v0;
    v5[1] = sub_10000DBEC;
    return sub_100022274(0);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000DBEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_BYTE *)(*(_QWORD *)v1 + 99) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000DC4C, v3, 0);
}

uint64_t sub_10000DC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(v0 + 99) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 280);
    v1 = *(_QWORD *)(v0 + 288);
    *(_BYTE *)(v0 + 100) = *(_BYTE *)(v0 + 98);
    *(_QWORD *)(v0 + 304) = v2;
    *(_QWORD *)(v0 + 312) = v1;
    v3 = qword_100072530;
    *(_QWORD *)(v0 + 320) = 1;
    *(_QWORD *)(v0 + 328) = v3;
    return swift_task_switch(sub_10000DD3C, v3, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
    swift_bridgeObjectRelease(v5);
    v6 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000DD3C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[18];
  sub_10001D124(v0[38], v0[39], v0[24]);
  return swift_task_switch(sub_10000DD88, v1, 0);
}

uint64_t sub_10000DD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 192);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 48))(v1, 1, *(_QWORD *)(v0 + 200)) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 312));
    result = sub_100009730(v1, &qword_10006F528);
    v3 = *(_QWORD *)(v0 + 320);
    if (v3 == *(_QWORD *)(v0 + 272))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
      v4 = *(_QWORD *)(v0 + 232);
      v6 = *(_QWORD *)(v0 + 216);
      v5 = *(_QWORD *)(v0 + 224);
      v8 = *(_QWORD *)(v0 + 184);
      v7 = *(_QWORD *)(v0 + 192);
      v10 = *(_QWORD *)(v0 + 152);
      v9 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 240));
      swift_task_dealloc(v4);
      swift_task_dealloc(v5);
      swift_task_dealloc(v6);
      swift_task_dealloc(v7);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 264);
      if (v3 >= *(_QWORD *)(v22 + 16))
      {
        __break(1u);
      }
      else
      {
        v23 = v22 + 24 * v3;
        v24 = *(_QWORD *)(v23 + 40);
        *(_QWORD *)(v0 + 432) = v24;
        *(_BYTE *)(v0 + 101) = *(_BYTE *)(v23 + 48);
        *(_QWORD *)(v0 + 440) = *(_QWORD *)(v23 + 32);
        v25 = dword_10006FA74;
        swift_bridgeObjectRetain(v24);
        v26 = (_QWORD *)swift_task_alloc(v25);
        *(_QWORD *)(v0 + 448) = v26;
        *v26 = v0;
        v26[1] = sub_10000EECC;
        return sub_100022274(0);
      }
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 232);
    sub_10000F6D0(v1, v11);
    v13 = sub_10000F714(v11, v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(uint64_t **)(v0 + 232);
    if (v16)
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v35 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = *v17;
      v21 = v17[1];
      swift_bridgeObjectRetain(v21);
      *(_QWORD *)(v18 + 4) = sub_1000572F8(v20, v21, &v35);
      swift_bridgeObjectRelease(v21);
      sub_10000F758((uint64_t)v17);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found pending notification %s", (uint8_t *)v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_10000F758(*(_QWORD *)(v0 + 232));
    }

    v27 = *(uint64_t **)(v0 + 240);
    v28 = type metadata accessor for SeedPortal(0);
    *(_QWORD *)(v0 + 336) = static SeedPortal.shared.getter(v28);
    v29 = *v27;
    v30 = v27[1];
    *(_QWORD *)(v0 + 344) = v30;
    v31 = v27[2];
    v32 = v27[3];
    *(_QWORD *)(v0 + 352) = v32;
    v33 = dword_10006F714;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v32);
    v34 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v0 + 360) = v34;
    *v34 = v0;
    v34[1] = sub_10000E090;
    return sub_100013544(*(_QWORD *)(v0 + 160), v29, v30, v31, v32, 0);
  }
  return result;
}

uint64_t sub_10000E090()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[18];
    v5 = sub_10000E400;
  }
  else
  {
    v6 = v2[43];
    v7 = v2[44];
    v8 = v2[42];
    v9 = v2[18];
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    swift_release(v8);
    v5 = sub_10000E120;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10000E120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 240);
    v5 = *(_QWORD *)(v0 + 216);
    sub_100009730(v3, (uint64_t *)&unk_1000705A0);
    v6 = sub_10000F714(v4, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(uint64_t **)(v0 + 216);
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v31 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = *v10;
      v14 = v10[1];
      swift_bridgeObjectRetain(v14);
      *(_QWORD *)(v0 + 128) = sub_1000572F8(v13, v14, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
      swift_bridgeObjectRelease(v14);
      sub_10000F758((uint64_t)v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not authenticate for Form %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_10000F758(*(_QWORD *)(v0 + 216));
    }

    v26 = sub_10000C7E8();
    v27 = swift_allocError(&type metadata for FeedbackdError, v26, 0, 0);
    *(_QWORD *)(v0 + 408) = v27;
    *v28 = 1;
    v29 = _convertErrorToNSError(_:)(v27);
    *(_QWORD *)(v0 + 416) = v29;
    v30 = (_QWORD *)swift_task_alloc(dword_10006F84C);
    *(_QWORD *)(v0 + 424) = v30;
    *v30 = v0;
    v30[1] = sub_10000ED20;
    return sub_10001D3E0(*(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 100), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), v29);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 240);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 184), v3, v2);
    v16 = *(_QWORD *)v15;
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v0 + 376) = v17;
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v0 + 384) = v19;
    v20 = *(_OWORD *)(v15 + 48);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v0 + 32) = v20;
    v21 = *(_BYTE *)(v15 + 112);
    v23 = *(_OWORD *)(v15 + 80);
    v22 = *(_OWORD *)(v15 + 96);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v15 + 64);
    *(_OWORD *)(v0 + 64) = v23;
    *(_OWORD *)(v0 + 80) = v22;
    *(_BYTE *)(v0 + 96) = v21;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    sub_10000F794((_QWORD *)(v0 + 16));
    v24 = (_QWORD *)swift_task_alloc(dword_10006FA84);
    *(_QWORD *)(v0 + 392) = v24;
    *v24 = v0;
    v24[1] = sub_10000E8D4;
    return sub_100025228(*(_QWORD *)(v0 + 152), v16, v17, v18, v19, *(_QWORD *)(v0 + 184), v0 + 16);
  }
}

uint64_t sub_10000E400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 344));
  swift_bridgeObjectRelease(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 104) = v3;
  *(_QWORD *)(v0 + 456) = v3;
  swift_errorRetain(v3);
  v4 = sub_100005D4C(&qword_10006F090);
  if ((swift_dynamicCast(v4, v0 + 104, v4, &type metadata for NotificationController.Error, 0) & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 312);
    swift_errorRelease(v3);
    v6 = swift_bridgeObjectRetain(v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 312);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 304);
      v12 = *(_QWORD *)(v0 + 240);
      v13 = swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v39 = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v13 + 4) = sub_1000572F8(v11, v10, &v39);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Posting pending notification [%{public}s] halted because we have already posted the max amount allowed for this interval", (uint8_t *)v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {
      v12 = *(_QWORD *)(v0 + 240);

      swift_bridgeObjectRelease_n(v10, 2);
    }
    sub_10000F758(v12);
    result = swift_errorRelease(*(_QWORD *)(v0 + 104));
    v24 = *(_QWORD *)(v0 + 320);
    if (v24 == *(_QWORD *)(v0 + 272))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
      v25 = *(_QWORD *)(v0 + 232);
      v27 = *(_QWORD *)(v0 + 216);
      v26 = *(_QWORD *)(v0 + 224);
      v29 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 192);
      v31 = *(_QWORD *)(v0 + 152);
      v30 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 240));
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 264);
      if (v24 >= *(_QWORD *)(v34 + 16))
      {
        __break(1u);
      }
      else
      {
        v35 = v34 + 24 * v24;
        v36 = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v0 + 432) = v36;
        *(_BYTE *)(v0 + 101) = *(_BYTE *)(v35 + 48);
        *(_QWORD *)(v0 + 440) = *(_QWORD *)(v35 + 32);
        v37 = dword_10006FA74;
        swift_bridgeObjectRetain(v36);
        v38 = (_QWORD *)swift_task_alloc(v37);
        *(_QWORD *)(v0 + 448) = v38;
        *v38 = v0;
        v38[1] = sub_10000EECC;
        return sub_100022274(0);
      }
    }
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRetain(v3);
    v15 = swift_errorRetain(v3);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      v20 = swift_slowAlloc(32, -1);
      v39 = v20;
      *(_DWORD *)v18 = 136446466;
      *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000001ALL, 0x800000010005AE10, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
      *(_WORD *)(v18 + 12) = 2114;
      swift_errorRetain(v3);
      v21 = _swift_stdlib_bridgeErrorToNSError(v3);
      *(_QWORD *)(v0 + 120) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
      *v19 = v21;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s error: %{public}@", (uint8_t *)v18, 0x16u);
      v22 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v19, 1, v22);
      swift_slowDealloc(v19, -1, -1);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }

    v32 = _convertErrorToNSError(_:)(v3);
    *(_QWORD *)(v0 + 464) = v32;
    v33 = (_QWORD *)swift_task_alloc(dword_10006F84C);
    *(_QWORD *)(v0 + 472) = v33;
    *v33 = v0;
    v33[1] = sub_10000F020;
    return sub_10001D3E0(*(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 100), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), v32);
  }
  return result;
}

uint64_t sub_10000E8D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 384);
  v3 = *(_QWORD *)(*v1 + 392);
  v5 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  sub_10000F7E8((_QWORD *)(v2 + 16));
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  if (v0)
    v6 = sub_10000F1CC;
  else
    v6 = sub_10000E968;
  return swift_task_switch(v6, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_10000E968()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (uint64_t *)v0[30];
  v2 = v0[28];
  v3 = (int *)v0[25];
  v4 = v0[19];
  v25 = *v1;
  v13 = v1[1];
  v14 = v1[3];
  v5 = v1[5];
  v23 = v1[4];
  v24 = v1[2];
  v6 = v1[7];
  v7 = v1[9];
  v21 = v1[8];
  v22 = v1[6];
  v8 = v1[11];
  v20 = v1[10];
  v19 = *((_WORD *)v1 + 48);
  v9 = v2 + v3[8];
  v16 = *((_BYTE *)v1 + 112);
  v17 = *(uint64_t *)((char *)v1 + v3[7]);
  v18 = v1[13];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v15 = *(uint64_t *)((char *)v1 + v3[10]);
  sub_10000C82C(v4, v2 + v3[9]);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11 = swift_bridgeObjectRetain(v7);
  Date.init()(v11);
  *(_QWORD *)v2 = v25;
  *(_QWORD *)(v2 + 8) = v13;
  *(_QWORD *)(v2 + 16) = v24;
  *(_QWORD *)(v2 + 24) = v14;
  *(_QWORD *)(v2 + 32) = v23;
  *(_QWORD *)(v2 + 40) = v5;
  *(_QWORD *)(v2 + 48) = v22;
  *(_QWORD *)(v2 + 56) = v6;
  *(_QWORD *)(v2 + 64) = v21;
  *(_QWORD *)(v2 + 72) = v7;
  *(_QWORD *)(v2 + 80) = v20;
  *(_QWORD *)(v2 + 88) = v8;
  *(_WORD *)(v2 + 96) = v19;
  *(_QWORD *)(v2 + 104) = v18;
  *(_BYTE *)(v2 + 112) = v16;
  *(_QWORD *)(v2 + v3[7]) = v17;
  *(_QWORD *)(v2 + v3[10]) = v15;
  return swift_task_switch(sub_10000EB08, qword_100072530, 0);
}

uint64_t sub_10000EB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  sub_10001F0F4(*(Swift::String **)(v0 + 224));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_10000EB50, v1, 0);
}

uint64_t sub_10000EB50()
{
  return swift_task_switch(sub_10000EB68, qword_100072530, 0);
}

uint64_t sub_10000EB68()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 144);
  sub_10001FA90(*(_QWORD *)(v0 + 304), v1, *(_BYTE *)(v0 + 100));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10000EBB8, v2, 0);
}

uint64_t sub_10000EBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  sub_10000F758(*(_QWORD *)(v0 + 224));
  sub_100009730(v5, &qword_10006EF20);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  result = sub_10000F758(v1);
  v7 = *(_QWORD *)(v0 + 320);
  if (v7 == *(_QWORD *)(v0 + 272))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v8 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 216);
    v9 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 264);
    if (v7 >= *(_QWORD *)(v15 + 16))
    {
      __break(1u);
    }
    else
    {
      v16 = v15 + 24 * v7;
      v17 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)(v0 + 432) = v17;
      *(_BYTE *)(v0 + 101) = *(_BYTE *)(v16 + 48);
      *(_QWORD *)(v0 + 440) = *(_QWORD *)(v16 + 32);
      v18 = dword_10006FA74;
      swift_bridgeObjectRetain(v17);
      v19 = (_QWORD *)swift_task_alloc(v18);
      *(_QWORD *)(v0 + 448) = v19;
      *v19 = v0;
      v19[1] = sub_10000EECC;
      return sub_100022274(0);
    }
  }
  return result;
}

uint64_t sub_10000ED20()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 416);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  swift_bridgeObjectRelease(v3);

  swift_errorRelease(v2);
  return swift_task_switch(sub_10000ED9C, v4, 0);
}

uint64_t sub_10000ED9C()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  result = sub_10000F758(*(_QWORD *)(v0 + 240));
  v2 = *(_QWORD *)(v0 + 320);
  if (v2 == *(_QWORD *)(v0 + 272))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v3 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 264);
    if (v2 >= *(_QWORD *)(v10 + 16))
    {
      __break(1u);
    }
    else
    {
      v11 = v10 + 24 * v2;
      v12 = *(_QWORD *)(v11 + 40);
      *(_QWORD *)(v0 + 432) = v12;
      *(_BYTE *)(v0 + 101) = *(_BYTE *)(v11 + 48);
      *(_QWORD *)(v0 + 440) = *(_QWORD *)(v11 + 32);
      v13 = dword_10006FA74;
      swift_bridgeObjectRetain(v12);
      v14 = (_QWORD *)swift_task_alloc(v13);
      *(_QWORD *)(v0 + 448) = v14;
      *v14 = v0;
      v14[1] = sub_10000EECC;
      return sub_100022274(0);
    }
  }
  return result;
}

uint64_t sub_10000EECC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_BYTE *)(*(_QWORD *)v1 + 102) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000EF2C, v3, 0);
}

uint64_t sub_10000EF2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(v0 + 102) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 432);
    v1 = *(_QWORD *)(v0 + 440);
    v3 = *(_QWORD *)(v0 + 320) + 1;
    *(_BYTE *)(v0 + 100) = *(_BYTE *)(v0 + 101);
    *(_QWORD *)(v0 + 304) = v1;
    *(_QWORD *)(v0 + 312) = v2;
    v4 = qword_100072530;
    *(_QWORD *)(v0 + 320) = v3;
    *(_QWORD *)(v0 + 328) = v4;
    return swift_task_switch(sub_10000DD3C, v4, 0);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 432));
    swift_bridgeObjectRelease(v6);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10000F020()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(*(_QWORD *)v0 + 464);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_bridgeObjectRelease(v2);

  return swift_task_switch(sub_10000F090, v3, 0);
}

uint64_t sub_10000F090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 240);
  swift_errorRelease(*(_QWORD *)(v0 + 456));
  result = sub_10000F758(v1);
  v3 = *(_QWORD *)(v0 + 320);
  if (v3 == *(_QWORD *)(v0 + 272))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v4 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 264);
    if (v3 >= *(_QWORD *)(v11 + 16))
    {
      __break(1u);
    }
    else
    {
      v12 = v11 + 24 * v3;
      v13 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v0 + 432) = v13;
      *(_BYTE *)(v0 + 101) = *(_BYTE *)(v12 + 48);
      *(_QWORD *)(v0 + 440) = *(_QWORD *)(v12 + 32);
      v14 = dword_10006FA74;
      swift_bridgeObjectRetain(v13);
      v15 = (_QWORD *)swift_task_alloc(v14);
      *(_QWORD *)(v0 + 448) = v15;
      *v15 = v0;
      v15[1] = sub_10000EECC;
      return sub_100022274(0);
    }
  }
  return result;
}

uint64_t sub_10000F1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  v1 = *(_QWORD *)(v0 + 400);
  *(_QWORD *)(v0 + 104) = v1;
  *(_QWORD *)(v0 + 456) = v1;
  swift_errorRetain(v1);
  v2 = sub_100005D4C(&qword_10006F090);
  if ((swift_dynamicCast(v2, v0 + 104, v2, &type metadata for NotificationController.Error, 0) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 312);
    swift_errorRelease(v1);
    v4 = swift_bridgeObjectRetain(v3);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 312);
    if (v7)
    {
      v9 = *(_QWORD *)(v0 + 304);
      v10 = *(_QWORD *)(v0 + 240);
      v11 = swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v37 = v12;
      *(_DWORD *)v11 = 136446210;
      swift_bridgeObjectRetain(v8);
      *(_QWORD *)(v11 + 4) = sub_1000572F8(v9, v8, &v37);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Posting pending notification [%{public}s] halted because we have already posted the max amount allowed for this interval", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {
      v10 = *(_QWORD *)(v0 + 240);

      swift_bridgeObjectRelease_n(v8, 2);
    }
    sub_10000F758(v10);
    result = swift_errorRelease(*(_QWORD *)(v0 + 104));
    v22 = *(_QWORD *)(v0 + 320);
    if (v22 == *(_QWORD *)(v0 + 272))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
      v23 = *(_QWORD *)(v0 + 232);
      v25 = *(_QWORD *)(v0 + 216);
      v24 = *(_QWORD *)(v0 + 224);
      v27 = *(_QWORD *)(v0 + 184);
      v26 = *(_QWORD *)(v0 + 192);
      v29 = *(_QWORD *)(v0 + 152);
      v28 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 240));
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 264);
      if (v22 >= *(_QWORD *)(v32 + 16))
      {
        __break(1u);
      }
      else
      {
        v33 = v32 + 24 * v22;
        v34 = *(_QWORD *)(v33 + 40);
        *(_QWORD *)(v0 + 432) = v34;
        *(_BYTE *)(v0 + 101) = *(_BYTE *)(v33 + 48);
        *(_QWORD *)(v0 + 440) = *(_QWORD *)(v33 + 32);
        v35 = dword_10006FA74;
        swift_bridgeObjectRetain(v34);
        v36 = (_QWORD *)swift_task_alloc(v35);
        *(_QWORD *)(v0 + 448) = v36;
        *v36 = v0;
        v36[1] = sub_10000EECC;
        return sub_100022274(0);
      }
    }
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRetain(v1);
    v13 = swift_errorRetain(v1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v37 = v18;
      *(_DWORD *)v16 = 136446466;
      *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000001ALL, 0x800000010005AE10, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
      *(_WORD *)(v16 + 12) = 2114;
      swift_errorRetain(v1);
      v19 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 120) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
      *v17 = v19;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s error: %{public}@", (uint8_t *)v16, 0x16u);
      v20 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v17, 1, v20);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v30 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 464) = v30;
    v31 = (_QWORD *)swift_task_alloc(dword_10006F84C);
    *(_QWORD *)(v0 + 472) = v31;
    *v31 = v0;
    v31[1] = sub_10000F020;
    return sub_10001D3E0(*(_QWORD *)(v0 + 240), *(_BYTE *)(v0 + 100), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312), v30);
  }
  return result;
}

uint64_t sub_10000F694()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NotificationScheduler()
{
  return objc_opt_self(_TtC9feedbackd21NotificationScheduler);
}

uint64_t sub_10000F6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000F758(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10000F794(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_10000F7E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10000F83C()
{
  uint64_t *v0;
  uint64_t *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FBKSLaunchConfiguration(0)), "init");
  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter(v3, v4);
  v5 = v1[2];
  v6 = v1[3];
  swift_bridgeObjectRetain(v6);
  dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter(v5, v6);
  v7 = v1[4];
  v8 = v1[5];
  swift_bridgeObjectRetain(v8);
  dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.setter(v7, v8);
  v9 = v1[6];
  v10 = v1[7];
  swift_bridgeObjectRetain(v10);
  dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.setter(v9, v10);
  dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.setter(*((unsigned __int8 *)v1 + 64));
  dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.setter(*((unsigned __int8 *)v1 + 65));
  v11 = FBKSPromptStyle.rawValue.getter(v1[9]);
  result = FBKSPromptStyle.init(rawValue:)(v11);
  if ((v13 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter(result);
    dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.setter(*((unsigned __int8 *)v1 + 80));
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_10000F910@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t result;
  _BYTE v27[16];
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;

  v3 = v2;
  sub_10000FB20(v2, (uint64_t)v30);
  sub_10000FB20((uint64_t)v30, (uint64_t)&v31);
  object = v32;
  if (v32)
  {
    countAndFlagsBits = v31;
  }
  else
  {
    if ((a1 & 1) != 0)
    {
      v8 = 0xD000000000000014;
      v9 = 0x800000010005AF70;
    }
    else
    {
      v9 = 0x800000010005AE80;
      v8 = 0xD000000000000016;
    }
    v10 = FBKSLocalizedString(key:)(*(Swift::String *)&v8);
    countAndFlagsBits = v10._countAndFlagsBits;
    object = v10._object;
  }
  sub_10000FB20(v3 + 16, (uint64_t)v29);
  sub_10000FB20((uint64_t)v29, (uint64_t)&v33);
  v11 = v34;
  if (v34)
  {
    v12 = v33;
    sub_10000FB68((uint64_t)v30);
  }
  else
  {
    sub_10000FB68((uint64_t)v30);
    if ((a1 & 1) != 0)
    {
      v13 = 0x800000010005AF50;
      v14 = 0xD000000000000016;
    }
    else
    {
      v14 = 0xD000000000000018;
      v13 = 0x800000010005AEA0;
    }
    v15 = FBKSLocalizedString(key:)(*(Swift::String *)&v14);
    v12 = v15._countAndFlagsBits;
    v11 = v15._object;
  }
  sub_10000FB20(v3 + 32, (uint64_t)v28);
  sub_10000FB20((uint64_t)v28, (uint64_t)&v35);
  v16 = v36;
  if (v36)
  {
    v17 = v35;
    sub_10000FB68((uint64_t)v29);
  }
  else
  {
    sub_10000FB68((uint64_t)v29);
    if ((a1 & 1) != 0)
    {
      v18 = 0xD000000000000028;
      v19 = "DEFAULT_SURVEY_ALERT_VIEW_PROCEED_BUTTON";
    }
    else
    {
      v18 = 0xD00000000000002ALL;
      v19 = "DEFAULT_FEEDBACK_ALERT_VIEW_PROCEED_BUTTON";
    }
    v20 = (unint64_t)(v19 - 32) | 0x8000000000000000;
    v21 = FBKSLocalizedString(key:)(*(Swift::String *)&v18);
    v17 = v21._countAndFlagsBits;
    v16 = v21._object;
  }
  sub_10000FB20(v3 + 48, (uint64_t)v27);
  sub_10000FB20((uint64_t)v27, (uint64_t)&v37);
  v22 = v38;
  if (v38)
  {
    v23 = v37;
    sub_10000FB68((uint64_t)v28);
  }
  else
  {
    sub_10000FB68((uint64_t)v28);
    v24._countAndFlagsBits = 0xD000000000000029;
    v24._object = (void *)0x800000010005AEF0;
    v25 = FBKSLocalizedString(key:)(v24);
    v23 = v25._countAndFlagsBits;
    v22 = v25._object;
  }
  result = sub_10000FB68((uint64_t)v27);
  *a2 = countAndFlagsBits;
  a2[1] = (uint64_t)object;
  a2[2] = v12;
  a2[3] = (uint64_t)v11;
  a2[4] = v17;
  a2[5] = (uint64_t)v16;
  a2[6] = v23;
  a2[7] = (uint64_t)v22;
  return result;
}

uint64_t sub_10000FB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F530);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000FB68(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SendableLaunchConfiguration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SendableLaunchConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SendableLaunchConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableLaunchConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableLaunchConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableLaunchConfiguration()
{
  return &type metadata for SendableLaunchConfiguration;
}

uint64_t sub_10000FEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  unint64_t v50;

  v44 = a3;
  v7 = type metadata accessor for FBKSForm.Question(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D4C(&qword_10006F538);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v48 = (char *)&v43 - v15;
  objc_allocWithZone((Class)type metadata accessor for FBKSForm(0));
  swift_bridgeObjectRetain(a2);
  v16 = FBKSForm.init(identifier:)(a1, a2);
  v17 = *(_QWORD *)(a4 + 64);
  v45 = a4 + 64;
  v18 = 1 << *(_BYTE *)(a4 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v47 = a4;
  v43 = v46 - 1;
  result = swift_bridgeObjectRetain(a4);
  v49 = 0;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v23 = (v20 - 1) & v20;
      v24 = v22 | (v49 << 6);
LABEL_7:
      v25 = v47;
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v14, *(_QWORD *)(v47 + 48) + *(_QWORD *)(v8 + 72) * v24, v7);
      v26 = *(_QWORD *)(v25 + 56);
      v27 = sub_100005D4C(&qword_10006F540);
      v28 = *(_QWORD *)(v26 + 8 * v24);
      *(_QWORD *)&v14[*(int *)(v27 + 48)] = v28;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v14, 0, 1, v27);
      swift_bridgeObjectRetain(v28);
      v29 = (uint64_t)v48;
      goto LABEL_26;
    }
    v30 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    v29 = (uint64_t)v48;
    if (v30 < v46)
    {
      v31 = *(_QWORD *)(v45 + 8 * v30);
      if (v31)
        goto LABEL_11;
      v32 = v49 + 2;
      ++v49;
      if (v30 + 1 < v46)
      {
        v31 = *(_QWORD *)(v45 + 8 * v32);
        if (v31)
          goto LABEL_14;
        v49 = v30 + 1;
        if (v30 + 2 < v46)
        {
          v31 = *(_QWORD *)(v45 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_11;
          }
          v32 = v30 + 3;
          v49 = v30 + 2;
          if (v30 + 3 < v46)
            break;
        }
      }
    }
LABEL_25:
    v33 = sub_100005D4C(&qword_10006F540);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    v23 = 0;
LABEL_26:
    sub_1000102A0((uint64_t)v14, v29);
    v34 = sub_100005D4C(&qword_10006F540);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v29, 1, v34) == 1)
    {
      swift_release(v47);
      dispatch thunk of FBKSForm.authenticationMethod.setter(v44);
      return v16;
    }
    v50 = v23;
    v35 = v14;
    v36 = *(_QWORD *)(v29 + *(int *)(v34 + 48));
    v37 = v8;
    v38 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
    v39 = *(_QWORD *)(v36 + 16);
    if (v39)
    {
      v40 = (_QWORD *)(v36 + 40);
      do
      {
        v42 = *(v40 - 1);
        v41 = *v40;
        swift_bridgeObjectRetain(*v40);
        dispatch thunk of FBKSForm.prefill(question:answer:)(v10, v42, v41);
        swift_bridgeObjectRelease(v41);
        v40 += 2;
        --v39;
      }
      while (v39);
    }
    swift_bridgeObjectRelease(v36);
    v8 = v37;
    v7 = v38;
    result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v10, v38);
    v14 = v35;
    v20 = v50;
  }
  v31 = *(_QWORD *)(v45 + 8 * v32);
  if (v31)
  {
LABEL_14:
    v30 = v32;
LABEL_11:
    v23 = (v31 - 1) & v31;
    v24 = __clz(__rbit64(v31)) + (v30 << 6);
    v49 = v30;
    goto LABEL_7;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v46)
    {
      v49 = v43;
      goto LABEL_25;
    }
    v31 = *(_QWORD *)(v45 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_11;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000102A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SendableForm(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for SendableForm(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SendableForm(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for SendableForm(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for SendableForm(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SendableForm(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SendableForm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SendableForm()
{
  return &type metadata for SendableForm;
}

uint64_t CFBBiomeDonator.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 48, 7);
  CFBBiomeDonator.init()(v1);
  return v1;
}

_QWORD *CFBBiomeDonator.init()(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v2 = (id)BiomeLibrary(a1);
  v3 = objc_msgSend(v2, "Feedback");
  swift_unknownObjectRelease(v2);
  v4 = objc_msgSend(v3, "EvaluationResponse");
  swift_unknownObjectRelease(v3);
  v5 = objc_msgSend(v4, "source");

  v1[2] = v5;
  v7 = (id)BiomeLibrary(v6);
  v8 = objc_msgSend(v7, "Feedback");
  swift_unknownObjectRelease(v7);
  v9 = objc_msgSend(v8, "TextToTextEvaluationData");
  swift_unknownObjectRelease(v8);
  v10 = objc_msgSend(v9, "source");

  v1[3] = v10;
  v12 = (id)BiomeLibrary(v11);
  v13 = objc_msgSend(v12, "Feedback");
  swift_unknownObjectRelease(v12);
  v14 = objc_msgSend(v13, "TextToImageEvaluationData");
  swift_unknownObjectRelease(v13);
  v15 = objc_msgSend(v14, "source");

  v1[4] = v15;
  v17 = (id)BiomeLibrary(v16);
  v18 = objc_msgSend(v17, "Feedback");
  swift_unknownObjectRelease(v17);
  v19 = objc_msgSend(v18, "TextImageToImageEvaluationData");
  swift_unknownObjectRelease(v18);
  v20 = objc_msgSend(v19, "source");

  v1[5] = v20;
  return v1;
}

void CFBBiomeDonator.write(donation:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v5;
  id v6;
  void *v7;

  v3 = v1;
  v5 = sub_10002E748();
  if (!v2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        sub_10000A968(0, &qword_10006F550, BMFeedbackTextToImageEvaluationData_ptr);
        v6 = sub_10002EBF4(a1);
        v7 = (void *)v3[4];
      }
      else
      {
        sub_10000A968(0, &qword_10006F548, BMFeedbackTextImageToImageEvaluationData_ptr);
        v6 = sub_10002EC20(a1);
        v7 = (void *)v3[5];
      }
    }
    else
    {
      sub_10000A968(0, &qword_10006F558, BMFeedbackTextToTextEvaluationData_ptr);
      v6 = sub_10002EA08(a1);
      v7 = (void *)v3[3];
    }
    objc_msgSend(v7, "sendEvent:", v6);

  }
}

void CFBBiomeDonator.write(evaluation:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v5)(void **, uint64_t);
  uint64_t (**v6)(void **, uint64_t);

  v3 = v1;
  sub_10000A968(0, &qword_100070320, BMFeedbackEvaluationResponse_ptr);
  v5 = sub_10002EE64(a1);
  if (!v2)
  {
    v6 = v5;
    objc_msgSend(*(id *)(v3 + 16), "sendEvent:", v5);

  }
}

void CFBBiomeDonator.invalidate(evaluationID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  id v10;
  uint64_t v11;

  v2 = v1;
  v4 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)BMFeedbackEvaluationResponse), "initWithEvaluationUuid:userResponse:", isa, 6);

  objc_msgSend(*(id *)(v2 + 16), "sendEvent:", v10);
}

uint64_t type metadata accessor for CFBBiomeDonator()
{
  return objc_opt_self(_TtC9feedbackd15CFBBiomeDonator);
}

void sub_1000109AC(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_1000109F8()
{
  return 0xD00000000000001DLL;
}

BOOL sub_100010ACC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100010AE0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100010B24()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100010B4C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100010B8C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000113E4(*a1);
  *a2 = result;
  return result;
}

void sub_100010BB4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_100010BC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100011860();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100010BE8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100011860();
  v3 = sub_1000118A4();
  v4 = sub_10000A06C();
  return Error<>._code.getter(a1, v2, v3, v4);
}

void sub_100010C30()
{
  char *v0;

  sub_1000109AC(*v0);
}

uint64_t sub_100010C3C()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_100010C44()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *v0;
  v2 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v2, &v8);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  *(_QWORD *)(inited + 40) = v4;
  sub_1000109AC(v1);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v6;
  return sub_100014494(inited);
}

uint64_t sub_100010CC0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005D4C(&qword_10006F638);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_37;
      v15 = *(_QWORD *)(v32 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_37;
        v15 = *(_QWORD *)(v32 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_37;
          v15 = *(_QWORD *)(v32 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = 16 * v13;
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v18);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v42[0] = *v19;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_100011684(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_100011684(v41, v42);
    sub_100011684(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(_QWORD *)(v11 + 32) = v36;
    result = (uint64_t)sub_100011684(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100011694(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v32 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10001107C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t result;
  int64_t i;
  char *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100005D4C(&qword_10006F630);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  result = swift_bridgeObjectRetain(v1);
  i = 0;
  v11 = (char *)&type metadata for Any + 8;
  v12 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v21 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v21 >= v40)
    goto LABEL_32;
  v22 = *(_QWORD *)(v41 + 8 * v21);
  v23 = i + 1;
  if (!v22)
  {
    v23 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v22 = *(_QWORD *)(v41 + 8 * v23);
    if (!v22)
    {
      v23 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v22 = *(_QWORD *)(v41 + 8 * v23);
      if (!v22)
      {
        v23 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v22 = *(_QWORD *)(v41 + 8 * v23);
        if (!v22)
        {
          v24 = i + 5;
          if (i + 5 < v40)
          {
            v22 = *(_QWORD *)(v41 + 8 * v24);
            if (v22)
            {
              v23 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v23 = v24 + 1;
              if (__OFADD__(v24, 1))
                goto LABEL_36;
              if (v23 >= v40)
                break;
              v22 = *(_QWORD *)(v41 + 8 * v23);
              ++v24;
              if (v22)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100011694(v1);
          return (unint64_t)v3;
        }
      }
    }
  }
LABEL_26:
  v43 = (v22 - 1) & v22;
  v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    v25 = 16 * v20;
    v26 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v20);
    v28 = *v26;
    v27 = v26[1];
    v29 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v25);
    v30 = *v29;
    v31 = v29[1];
    v45 = v28;
    v46 = v27;
    v44[0] = v30;
    v44[1] = v31;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v31);
    swift_dynamicCast(v7, v44, v12, v11, 7);
    v32 = v45;
    v33 = v46;
    sub_100011684(v7, v8);
    sub_100011684(v8, v50);
    sub_100011684(v50, &v48);
    result = sub_1000161EC(v32, v33);
    v34 = result;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v13 = v8;
      v14 = v7;
      v15 = v1;
      v16 = v12;
      v17 = v11;
      v18 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v18[1]);
      *v18 = v32;
      v18[1] = v33;
      v11 = v17;
      v12 = v16;
      v1 = v15;
      v7 = v14;
      v8 = v13;
      i = v42;
      v19 = (_QWORD *)(v3[7] + 32 * v34);
      sub_100009C64(v19);
      result = (unint64_t)sub_100011684(&v48, v19);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v36 = (uint64_t *)(v3[6] + 16 * result);
    *v36 = v32;
    v36[1] = v33;
    result = (unint64_t)sub_100011684(&v48, (_OWORD *)(v3[7] + 32 * result));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_1000113E4(unint64_t result)
{
  if (result >= 9)
    return 9;
  return result;
}

id sub_1000113F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[64];

  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)SharedLog);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(a2);
    v22 = sub_1000572F8(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v10 = sub_100005D4C(&qword_10006FB90);
  inited = swift_initStackObject(v10, v24);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  *(_QWORD *)(inited + 40) = v12;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain(a2);
  v13 = sub_1000145C8(inited);
  static Strings.Daemon.errorDomain.getter();
  v15 = v14;
  v16 = sub_10001107C(v13);
  swift_bridgeObjectRelease(v13);
  v17 = objc_allocWithZone((Class)NSError);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v20 = objc_msgSend(v17, "initWithDomain:code:userInfo:", v18, 0, isa);

  return v20;
}

_OWORD *sub_100011684(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100011694(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_BYTE *initializeBufferWithCopyOfBuffer for FeedbackdError(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FeedbackdError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeedbackdError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100011784 + 4 * byte_100059E02[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000117B8 + 4 * byte_100059DFD[v4]))();
}

uint64_t sub_1000117B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000117C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000117C8);
  return result;
}

uint64_t sub_1000117D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000117DCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000117E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000117E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000117F4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000117FC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackdError()
{
  return &type metadata for FeedbackdError;
}

unint64_t sub_10001181C()
{
  unint64_t result;

  result = qword_10006F640;
  if (!qword_10006F640)
  {
    result = swift_getWitnessTable(&unk_100059F00, &type metadata for FeedbackdError);
    atomic_store(result, (unint64_t *)&qword_10006F640);
  }
  return result;
}

unint64_t sub_100011860()
{
  unint64_t result;

  result = qword_10006F648;
  if (!qword_10006F648)
  {
    result = swift_getWitnessTable(&unk_100059E20, &type metadata for FeedbackdError);
    atomic_store(result, (unint64_t *)&qword_10006F648);
  }
  return result;
}

unint64_t sub_1000118A4()
{
  unint64_t result;

  result = qword_10006F650;
  if (!qword_10006F650)
  {
    result = swift_getWitnessTable(&unk_100059E88, &type metadata for FeedbackdError);
    atomic_store(result, (unint64_t *)&qword_10006F650);
  }
  return result;
}

unint64_t sub_1000118E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char *v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  char v38;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[5];
  uint64_t v50;
  _OWORD v51[5];
  char v52;

  v1 = (uint64_t *)v0;
  v2 = sub_100005D4C(&qword_10006EF20);
  v3 = __chkstk_darwin(v2);
  v44 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)&v40 - v5;
  v6 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v41 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v40 = (char *)&v40 - v9;
  v10 = sub_100005D4C(&qword_10006F660);
  inited = swift_initStackObject(v10, &v50);
  *(_OWORD *)(inited + 16) = xmmword_100059F70;
  *(_QWORD *)&v51[0] = 0x736572756C696166;
  *((_QWORD *)&v51[0] + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)(v51, &type metadata for String, &protocol witness table for String);
  v12 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v13 = *(_QWORD *)(v0 + v12[7]);
  *(_QWORD *)(inited + 96) = &type metadata for Int;
  *(_QWORD *)(inited + 72) = v13;
  *(_QWORD *)&v51[0] = 1702125924;
  *((_QWORD *)&v51[0] + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v51, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 168) = v6;
  sub_100011E60((_QWORD *)(inited + 144));
  static Date.now.getter();
  *(_QWORD *)&v51[0] = 0x6F43657A6F6F6E73;
  *((_QWORD *)&v51[0] + 1) = 0xEB00000000746E75;
  AnyHashable.init<A>(_:)(v51, &type metadata for String, &protocol witness table for String);
  v14 = *(_QWORD *)(v0 + v12[10]);
  *(_QWORD *)(inited + 240) = &type metadata for Int;
  *(_QWORD *)(inited + 216) = v14;
  *(_QWORD *)&v51[0] = 0xD000000000000013;
  *((_QWORD *)&v51[0] + 1) = 0x800000010005B170;
  AnyHashable.init<A>(_:)(v51, &type metadata for String, &protocol witness table for String);
  v15 = *(_OWORD *)(v0 + 80);
  v51[2] = *(_OWORD *)(v0 + 64);
  v51[3] = v15;
  v51[4] = *(_OWORD *)(v0 + 96);
  v52 = *(_BYTE *)(v0 + 112);
  v16 = *(_OWORD *)(v0 + 48);
  v51[0] = *(_OWORD *)(v0 + 32);
  v51[1] = v16;
  v17 = (void *)sub_10000F83C();
  v18 = objc_msgSend(v17, "asJSON");

  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  *(_QWORD *)(inited + 312) = &type metadata for Data;
  *(_QWORD *)(inited + 288) = v19;
  *(_QWORD *)(inited + 296) = v21;
  v22 = (uint64_t)v42;
  v49[0] = 1836216166;
  v49[1] = 0xE400000000000000;
  AnyHashable.init<A>(_:)(v49, &type metadata for String, &protocol witness table for String);
  v23 = (void *)sub_10000FEC0(*v1, v1[1], v1[2], v1[3]);
  v24 = objc_msgSend(v23, "asJSON");

  v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  *(_QWORD *)(inited + 384) = &type metadata for Data;
  *(_QWORD *)(inited + 360) = v25;
  *(_QWORD *)(inited + 368) = v27;
  v28 = v43;
  v29 = sub_100014354(inited);
  sub_10000C82C((uint64_t)v1 + v12[8], v22);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v30(v22, 1, v6) == 1)
  {
    sub_100009730(v22, &qword_10006EF20);
  }
  else
  {
    v31 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v40, v22, v6);
    *(_QWORD *)&v47 = 0x75614C7466617264;
    *((_QWORD *)&v47 + 1) = 0xEF6574614468636ELL;
    AnyHashable.init<A>(_:)(&v47, &type metadata for String, &protocol witness table for String);
    v48 = v6;
    v32 = sub_100011E60(&v47);
    (*(void (**)(_QWORD *, char *, uint64_t))(v28 + 16))(v32, v31, v6);
    sub_100011684(&v47, v46);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
    v45 = v29;
    sub_100017D94(v46, (uint64_t)v49, isUniquelyReferenced_nonNull_native);
    v29 = v45;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000126EC((uint64_t)v49);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v6);
  }
  v34 = (uint64_t)v1 + v12[9];
  v35 = v44;
  sub_10000C82C(v34, v44);
  if (v30(v35, 1, v6) == 1)
  {
    sub_100009730(v35, &qword_10006EF20);
  }
  else
  {
    v36 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v41, v35, v6);
    *(_QWORD *)&v47 = 0xD000000000000017;
    *((_QWORD *)&v47 + 1) = 0x800000010005B190;
    AnyHashable.init<A>(_:)(&v47, &type metadata for String, &protocol witness table for String);
    v48 = v6;
    v37 = sub_100011E60(&v47);
    (*(void (**)(_QWORD *, char *, uint64_t))(v28 + 16))(v37, v36, v6);
    sub_100011684(&v47, v46);
    v38 = swift_isUniquelyReferenced_nonNull_native(v29);
    v45 = v29;
    sub_100017D94(v46, (uint64_t)v49, v38);
    v29 = v45;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000126EC((uint64_t)v49);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v6);
  }
  return v29;
}

uint64_t type metadata accessor for FormLaunchConfiguration(uint64_t a1)
{
  uint64_t result;

  result = qword_10006F6C0;
  if (!qword_10006F6C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FormLaunchConfiguration);
  return result;
}

_QWORD *sub_100011E60(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100011E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  id v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE v80[40];
  __int128 v81;
  __int128 v82;

  v4 = sub_100005D4C(&qword_10006EF20);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v58 - v8;
  v78 = 0xD000000000000013;
  v79 = 0x800000010005B170;
  AnyHashable.init<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v10 = sub_1000162BC((uint64_t)v80), (v11 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v81);
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  sub_1000126EC((uint64_t)v80);
  if (!*((_QWORD *)&v82 + 1))
    goto LABEL_29;
  if ((swift_dynamicCast(&v78, &v81, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_34:
    v27 = type metadata accessor for FormLaunchConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
  v13 = v78;
  v12 = (id)v79;
  type metadata accessor for FBKSLaunchConfiguration(0);
  v14 = static FBKSLaunchConfiguration.fromJSON(data:)(v13, v12);
  if (!v14)
  {
LABEL_32:
    v25 = v13;
    v26 = (unint64_t)v12;
    goto LABEL_33;
  }
  v15 = (void *)v14;
  v78 = 1836216166;
  v79 = 0xE400000000000000;
  AnyHashable.init<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v16 = sub_1000162BC((uint64_t)v80), (v17 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v81);
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  sub_1000126EC((uint64_t)v80);
  if (!*((_QWORD *)&v82 + 1))
  {
    sub_100012720(v13, (unint64_t)v12);

LABEL_29:
    sub_100009730((uint64_t)&v81, (uint64_t *)&unk_10006FB60);
    goto LABEL_34;
  }
  if ((swift_dynamicCast(&v78, &v81, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
    sub_100012720(v13, (unint64_t)v12);

    goto LABEL_34;
  }
  v19 = v78;
  v18 = v79;
  v78 = 0x6F43657A6F6F6E73;
  v79 = 0xEB00000000746E75;
  AnyHashable.init<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16))
  {
    v77 = v12;
    v20 = sub_1000162BC((uint64_t)v80);
    if ((v21 & 1) != 0)
    {
      sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v81);
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
    }
    v12 = v77;
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  sub_1000126EC((uint64_t)v80);
  if (!*((_QWORD *)&v82 + 1))
  {
    sub_100012720(v13, (unint64_t)v12);

    sub_100012720(v19, v18);
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v78, &v81, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
    sub_100012720(v13, (unint64_t)v12);

    v25 = v19;
    v26 = v18;
LABEL_33:
    sub_100012720(v25, v26);
    goto LABEL_34;
  }
  v76 = v78;
  v77 = v15;
  type metadata accessor for FBKSForm(0);
  v75 = static FBKSForm.fromJSON(data:)(v19, v18);
  if (!v75)
  {
    sub_100012720(v19, v18);

    goto LABEL_32;
  }
  v73 = v19;
  v74 = v18;
  *(_QWORD *)&v81 = 0x736572756C696166;
  *((_QWORD *)&v81 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)(&v81, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16))
  {
    v22 = sub_1000162BC((uint64_t)v80);
    v23 = v77;
    if ((v24 & 1) != 0)
    {
      sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v81);
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
    }
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
    v23 = v77;
  }
  sub_1000126EC((uint64_t)v80);
  if (*((_QWORD *)&v82 + 1))
  {
    v29 = swift_dynamicCast(&v78, &v81, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    v30 = v78;
    if (!v29)
      v30 = 0;
    v59 = v30;
  }
  else
  {
    sub_100009730((uint64_t)&v81, (uint64_t *)&unk_10006FB60);
    v59 = 0;
  }
  v78 = 0x75614C7466617264;
  v79 = 0xEF6574614468636ELL;
  AnyHashable.init<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v31 = sub_1000162BC((uint64_t)v80), (v32 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v31, (uint64_t)&v81);
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  sub_1000126EC((uint64_t)v80);
  if (*((_QWORD *)&v82 + 1))
  {
    v33 = type metadata accessor for Date(0);
    v34 = swift_dynamicCast(v9, &v81, (char *)&type metadata for Any + 8, v33, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v9, v34 ^ 1u, 1, v33);
  }
  else
  {
    sub_100009730((uint64_t)&v81, (uint64_t *)&unk_10006FB60);
    v35 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 1, 1, v35);
  }
  v78 = 0xD000000000000017;
  v79 = 0x800000010005B190;
  AnyHashable.init<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v36 = sub_1000162BC((uint64_t)v80), (v37 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(a1 + 56) + 32 * v36, (uint64_t)&v81);
  }
  else
  {
    v81 = 0u;
    v82 = 0u;
  }
  sub_1000126EC((uint64_t)v80);
  if (*((_QWORD *)&v82 + 1))
  {
    v38 = type metadata accessor for Date(0);
    v39 = swift_dynamicCast(v7, &v81, (char *)&type metadata for Any + 8, v38, 6);
    v40 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v7, v39 ^ 1u, 1, v38);
  }
  else
  {
    sub_100009730((uint64_t)&v81, (uint64_t *)&unk_10006FB60);
    v41 = type metadata accessor for Date(0);
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v7, 1, 1, v41);
  }
  v42 = (void *)v75;
  v77 = (id)dispatch thunk of FBKSForm.identifier.getter(v40);
  v72 = v43;
  v71 = dispatch thunk of FBKSForm.authenticationMethod.getter();
  v70 = dispatch thunk of FBKSForm.answers.getter();
  v69 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter();
  v68 = v44;
  v67 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter();
  v66 = v45;
  v65 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter();
  v64 = v46;
  v63 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter();
  v62 = v47;
  v61 = dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter();
  v60 = dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter();
  v48 = dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter();
  v49 = dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter();
  v50 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  sub_10000C82C((uint64_t)v9, a2 + v50[8]);
  v51 = sub_10000C82C((uint64_t)v7, a2 + v50[9]);
  Date.init()(v51);
  sub_100012720(v13, (unint64_t)v12);

  sub_100012720(v73, v74);
  v52 = v72;
  *(_QWORD *)a2 = v77;
  *(_QWORD *)(a2 + 8) = v52;
  v53 = v70;
  *(_QWORD *)(a2 + 16) = v71;
  *(_QWORD *)(a2 + 24) = v53;
  v54 = v68;
  *(_QWORD *)(a2 + 32) = v69;
  *(_QWORD *)(a2 + 40) = v54;
  v55 = v66;
  *(_QWORD *)(a2 + 48) = v67;
  *(_QWORD *)(a2 + 56) = v55;
  v56 = v64;
  *(_QWORD *)(a2 + 64) = v65;
  *(_QWORD *)(a2 + 72) = v56;
  v57 = v62;
  *(_QWORD *)(a2 + 80) = v63;
  *(_QWORD *)(a2 + 88) = v57;
  *(_BYTE *)(a2 + 96) = v61;
  *(_BYTE *)(a2 + 97) = v60;
  *(_QWORD *)(a2 + 104) = v48;
  *(_BYTE *)(a2 + 112) = v49;
  *(_QWORD *)(a2 + v50[7]) = v59;
  *(_QWORD *)(a2 + v50[10]) = v76;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v50 - 1) + 56))(a2, 0, 1, v50);
  sub_100009730((uint64_t)v7, &qword_10006EF20);
  return sub_100009730((uint64_t)v9, &qword_10006EF20);
}

uint64_t sub_1000126EC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100012720(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_100012764(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v29 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v29;
    v10 = a2[10];
    v11 = a2[11];
    *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    v12 = a3[6];
    v27 = (uint64_t)a2 + v12;
    v28 = a1 + v12;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v11);
    v15(v28, v27, v13);
    v16 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v19((char *)a2 + v16, 1, v13))
    {
      v20 = sub_100005D4C(&qword_10006EF20);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v15((uint64_t)v17, (uint64_t)v18, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
    }
    v22 = a3[9];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    if (v19((char *)a2 + v22, 1, v13))
    {
      v25 = sub_100005D4C(&qword_10006EF20);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v15((uint64_t)v23, (uint64_t)v24, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
    }
    *(_QWORD *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t sub_100012980(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t result;
  void (*v11)(char *, uint64_t);

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  v4 = (char *)a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v4, v5);
  v7 = (char *)a1 + a2[8];
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v8(v7, 1, v5))
    v11(v7, v5);
  v9 = (char *)a1 + a2[9];
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v8)(v9, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(char *, uint64_t))v11)(v9, v5);
  return result;
}

uint64_t sub_100012A84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  const void *v26;
  void *v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v28 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v28;
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v11 = a3[6];
  v26 = (const void *)(a2 + v11);
  v27 = (void *)(a1 + v11);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v10);
  v14(v27, v26, v12);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v18(a2 + v15, 1, v12))
  {
    v19 = sub_100005D4C(&qword_10006EF20);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  v20 = a3[9];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (v18(a2 + v20, 1, v12))
  {
    v23 = sub_100005D4C(&qword_10006EF20);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v14(v21, v22, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100012C74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void *, const void *, uint64_t);
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t (*v27)(const void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v18 = a3[6];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(void *, const void *, uint64_t))(v22 + 24);
  v23(v19, v20, v21);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v24 = a3[8];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  v28 = v27((const void *)(a1 + v24), 1, v21);
  v29 = v27(v26, 1, v21);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v25, v26, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v25, v21);
LABEL_6:
    v30 = sub_100005D4C(&qword_10006EF20);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v23(v25, v26, v21);
LABEL_7:
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = v27((const void *)(a1 + v31), 1, v21);
  v35 = v27(v33, 1, v21);
  if (!v34)
  {
    if (!v35)
    {
      v23(v32, v33, v21);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v32, v21);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_100005D4C(&qword_10006EF20);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v32, v33, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
LABEL_13:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100012F48(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  v15 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v18(a2 + v15, 1, v12))
  {
    v19 = sub_100005D4C(&qword_10006EF20);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  v20 = a3[9];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (v18(a2 + v20, 1, v12))
  {
    v23 = sub_100005D4C(&qword_10006EF20);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v14(v21, v22, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000130D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void *, const void *, uint64_t);
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t (*v27)(const void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRelease(v17);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v18 = a3[6];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(void *, const void *, uint64_t))(v22 + 40);
  v23(v19, v20, v21);
  v24 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  v28 = v27((const void *)(a1 + v24), 1, v21);
  v29 = v27(v26, 1, v21);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v25, v26, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v25, v21);
LABEL_6:
    v30 = sub_100005D4C(&qword_10006EF20);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v23(v25, v26, v21);
LABEL_7:
  v31 = a3[9];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = v27((const void *)(a1 + v31), 1, v21);
  v35 = v27(v33, 1, v21);
  if (!v34)
  {
    if (!v35)
    {
      v23(v32, v33, v21);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v32, v21);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_100005D4C(&qword_10006EF20);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v32, v33, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v32, 0, 1, v21);
LABEL_13:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100013340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001334C);
}

uint64_t sub_10001334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100005D4C(&qword_10006EF20);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1000133F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000133FC);
}

uint64_t sub_1000133FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100005D4C(&qword_10006EF20);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10001349C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v6[0] = " ";
  v6[1] = &unk_100059FC0;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    v6[3] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10000C74C(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_100013544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(v7 + 312) = a6;
  *(_QWORD *)(v7 + 128) = a5;
  *(_QWORD *)(v7 + 136) = v6;
  *(_QWORD *)(v7 + 112) = a3;
  *(_QWORD *)(v7 + 120) = a4;
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006F718) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v8);
  *(_QWORD *)(v7 + 152) = swift_task_alloc(v8);
  *(_QWORD *)(v7 + 160) = swift_task_alloc(v8);
  v9 = type metadata accessor for User(0);
  *(_QWORD *)(v7 + 168) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 176) = v10;
  *(_QWORD *)(v7 + 184) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SeedPortal(0);
  *(_QWORD *)(v7 + 192) = v11;
  v12 = sub_1000142C4();
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
  *(_QWORD *)(v7 + 200) = v13;
  *(_QWORD *)(v7 + 208) = v14;
  return swift_task_switch(sub_100013618, v13, v14);
}

uint64_t sub_100013618()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)SharedLog);
  v0[27] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[11] = sub_1000572F8(0xD00000000000002ELL, 0x800000010005B1B0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_10006EEF8 != -1)
    swift_once(&qword_10006EEF8, sub_100054D88);
  v7 = qword_1000725B0;
  v0[28] = qword_1000725B0;
  return swift_task_switch(sub_1000137D0, v7, 0);
}

uint64_t sub_1000137D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[28];
  v2 = v0[21];
  v3 = v0[22];
  v4 = v0[19];
  sub_100055154();
  v5 = v1 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v5, v0 + 6, 0, 0);
  sub_10001430C(v5, v4);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[29] = (uint64_t)v6;
  if (v6(v4, 1, v2) == 1)
  {
    sub_100009730(v0[19], &qword_10006F718);
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[22] + 32))(v0[20], v0[19], v0[21]);
    v7 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[22] + 56))(v0[20], v7, 1, v0[21]);
  return swift_task_switch(sub_1000138B0, v0[25], v0[26]);
}

uint64_t sub_1000138B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  char *v14;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 232))(v2, 1, v1) == 1)
  {
    sub_100009730(v2, &qword_10006F718);
LABEL_6:
    v11 = (_QWORD *)swift_task_alloc(dword_10007063C);
    *(_QWORD *)(v0 + 240) = v11;
    *v11 = v0;
    v11[1] = sub_100013A24;
    return sub_100055670(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  }
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 32))(*(_QWORD *)(v0 + 184), v2, v1);
  v4 = User.isUnauthenticated.getter(v3);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 168);
  if ((v4 & 1) != 0)
  {
    v8 = (*(uint64_t (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  }
  else
  {
    v9 = FBKSForm.AuthenticationMethod.rawValue.getter(*(_QWORD *)(v0 + 120));
    v10 = FBKSForm.AuthenticationMethod.rawValue.getter(1);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    if (v9 == v10)
      goto LABEL_6;
  }
  *(_QWORD *)(v0 + 256) = static SeedPortal.shared.getter(v8);
  v14 = (char *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
      + async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:);
  v13 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
                                   + 1));
  *(_QWORD *)(v0 + 264) = v13;
  *v13 = v0;
  v13[1] = sub_100013B0C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v14)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_100013A24()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[30];
  (*v1)[31] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[25];
    v5 = v2[26];
    v6 = sub_100013BB4;
  }
  else
  {
    sub_100009730(v2[18], &qword_10006F718);
    v4 = v2[25];
    v5 = v2[26];
    v6 = sub_100013A98;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100013A98()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v0[32] = static SeedPortal.shared.getter();
  v3 = (char *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
     + async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SeedPortal.fetchFormItem(identifier:)
                                  + 1));
  v0[33] = v1;
  *v1 = v0;
  v1[1] = sub_100013B0C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v3)(v0[12], v0[13], v0[14]);
}

uint64_t sub_100013B0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 264);
  v3 = *v1;
  *(_QWORD *)(v3 + 272) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100013C10, *(_QWORD *)(v3 + 200), *(_QWORD *)(v3 + 208));
  swift_release(*(_QWORD *)(v3 + 256));
  v5 = *(_QWORD *)(v3 + 152);
  v6 = *(_QWORD *)(v3 + 160);
  v7 = *(_QWORD *)(v3 + 144);
  swift_task_dealloc(*(_QWORD *)(v3 + 184));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100013BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013C10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 256));
  v2 = (void *)_convertErrorToNSError(_:)(v1);
  *(_QWORD *)(v0 + 280) = v2;
  v3 = objc_msgSend(v2, "userInfo");
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBKSSeedPortalErrorsKey);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16) && (v8 = sub_1000161EC(v5, v6), (v9 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(v4 + 56) + 32 * v8, v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v4);
  if (!*(_QWORD *)(v0 + 40))
  {
    v12 = sub_100009730(v0 + 16, (uint64_t *)&unk_10006FB60);
    goto LABEL_18;
  }
  v10 = (uint64_t *)(v0 + 72);
  v11 = sub_100005D4C(&qword_10006F728);
  v12 = swift_dynamicCast(v0 + 72, v0 + 16, (char *)&type metadata for Any + 8, v11, 6);
  if ((v12 & 1) == 0)
  {
LABEL_18:
    v20 = *(_QWORD *)(v0 + 272);
    swift_willThrow(v12);
    swift_errorRelease(v20);
    v22 = *(_QWORD *)(v0 + 152);
    v21 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *v10;
  if (!((unint64_t)*v10 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v10);
    if (v14)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_23:
  if (v13 < 0)
    v30 = v13;
  else
    v30 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v14 = _CocoaArrayWrapper.endIndex.getter(v30);
  if (!v14)
  {
LABEL_16:
    v12 = swift_bridgeObjectRelease_n(v13, 2);
    goto LABEL_18;
  }
LABEL_9:
  v15 = 0;
  while (1)
  {
    if ((v13 & 0xC000000000000001) != 0)
      v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
    else
      v16 = *(id *)(v13 + 8 * v15 + 32);
    v17 = v16;
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    v19 = objc_msgSend(v16, "code");

    if (v19 == (id)16)
      break;
    ++v15;
    if (v18 == v14)
      goto LABEL_16;
  }
  v25 = swift_bridgeObjectRelease_n(v13, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found invalid session error. Will clear out user and try again", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = (_QWORD *)swift_task_alloc(dword_100070634);
  *(_QWORD *)(v0 + 288) = v29;
  *v29 = v0;
  v29[1] = sub_100013F0C;
  return sub_1000552EC(1);
}

uint64_t sub_100013F0C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 288));
  return swift_task_switch(sub_100013F58, *(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 208));
}

uint64_t sub_100013F58(uint64_t a1)
{
  uint64_t v1;
  char v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_BYTE *)(v1 + 312);
  v3 = Logger.logObject.getter(a1);
  if ((v2 & 1) != 0)
  {
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed with invalid session twice in a row", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = *(_QWORD *)(v1 + 272);
    swift_willThrow();
    swift_errorRelease(v6);
    v8 = *(_QWORD *)(v1 + 152);
    v7 = *(_QWORD *)(v1 + 160);
    v9 = *(_QWORD *)(v1 + 144);
    swift_task_dealloc(*(_QWORD *)(v1 + 184));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v15 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v1 + 80) = sub_1000572F8(0xD00000000000002ELL, 0x800000010005B1B0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88);
      _os_log_impl((void *)&_mh_execute_header, v3, v11, "Retrying %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = (_QWORD *)swift_task_alloc(dword_10006F714);
    *(_QWORD *)(v1 + 296) = v14;
    *v14 = v1;
    v14[1] = sub_10001418C;
    return sub_100013544(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), 1);
  }
}

uint64_t sub_10001418C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100014258;
  else
    v4 = sub_1000141EC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208));
}

uint64_t sub_1000141EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);

  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100014258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);

  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000142C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006F720;
  if (!qword_10006F720)
  {
    v1 = type metadata accessor for SeedPortal(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedPortal, v1);
    atomic_store(result, (unint64_t *)&qword_10006F720);
  }
  return result;
}

uint64_t sub_10001430C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100014354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005D4C(&qword_10006F638);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001AE58(v7, (uint64_t)v16, &qword_10006F778);
    result = sub_1000162BC((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100011684(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100014494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005D4C(&qword_10006F630);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001AE58(v7, (uint64_t)&v16, &qword_10006F798);
    v8 = v16;
    v9 = v17;
    result = sub_1000161EC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100011684(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000145C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005D4C(&qword_10006F770);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_1000161EC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000146E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005D4C(&qword_10006F7D8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_1000161EC(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100014800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005D4C(&qword_10006F780);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001AE58(v7, (uint64_t)&v14, &qword_10006F788);
    v8 = v14;
    result = sub_1000162EC(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100011684(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001492C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006F730);
  v1 = sub_1000097B4(v0, (uint64_t)qword_10006F730);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  return Logger.init(subsystem:category:)(v2);
}

uint64_t sub_10001499C(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v5;
  Swift::String v6;

  swift_bridgeObjectRetain(a2);
  v2 = String.Iterator.next()();
  if (v2.value._object)
  {
    countAndFlagsBits = v2.value._countAndFlagsBits;
    object = v2.value._object;
    do
    {
      if ((Character.isWhitespace.getter(countAndFlagsBits, object) & 1) == 0)
      {
        v6._countAndFlagsBits = countAndFlagsBits;
        v6._object = object;
        String.append(_:)(v6);
      }
      swift_bridgeObjectRelease(object);
      v5 = String.Iterator.next()();
      countAndFlagsBits = v5.value._countAndFlagsBits;
      object = v5.value._object;
    }
    while (v5.value._object);
  }
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100014A60()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v10[0] = 58;
  v10[1] = 0xE100000000000000;
  v0 = sub_10001AE9C();
  Collection<>.trimmingPrefix<A>(_:)(&v11, v10, &type metadata for String, &type metadata for String, v0, &protocol witness table for String, &protocol witness table for Character);
  v1 = v13;
  v7 = v11;
  v8 = v12;
  v9 = v13;
  strcpy((char *)v10, "[^A-Za-z0-9_]");
  HIWORD(v10[1]) = -4864;
  v6[0] = 95;
  v6[1] = 0xE100000000000000;
  v2 = sub_10001AEE0();
  v3 = sub_10001AF24();
  v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v10, v6, 1024, 0, 0, 1, &type metadata for Substring, &type metadata for String, &type metadata for String, v2, v3, v3);
  swift_bridgeObjectRelease(v1);
  return v4;
}

uint64_t sub_100014B64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  __int128 v24;
  NSNumber v25;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  FBKSForm.Question.stringValue.getter();
  v6 = v5;
  v45 = sub_100014A60();
  v8 = v7;
  swift_bridgeObjectRelease(v6);
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    return swift_bridgeObjectRelease(v8);
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  swift_bridgeObjectRetain(a2);
  v43 = v8;
  v44 = sub_10001AE9C();
  v42 = a2;
  v10 = (uint64_t *)(a2 + 40);
  while (1)
  {
    v46 = v9;
    v14 = *v10;
    *(_QWORD *)&v48 = *(v10 - 1);
    *((_QWORD *)&v48 + 1) = v14;
    v51[0] = 58;
    v51[1] = 0xE100000000000000;
    swift_bridgeObjectRetain(v14);
    Collection<>.trimmingPrefix<A>(_:)(&v52, v51, &type metadata for String, &type metadata for String, v44, &protocol witness table for String, &protocol witness table for Character);
    v15 = v54;
    v48 = v52;
    v49 = v53;
    v50 = v54;
    strcpy((char *)v51, "[^A-Za-z0-9_]");
    HIWORD(v51[1]) = -4864;
    v47[0] = 95;
    v47[1] = 0xE100000000000000;
    v16 = sub_10001AEE0();
    v17 = sub_10001AF24();
    v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v51, v47, 1024, 0, 0, 1, &type metadata for Substring, &type metadata for String, &type metadata for String, v16, v17, v17);
    v20 = v19;
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)&v52 = 1599164753;
    *((_QWORD *)&v52 + 1) = 0xE400000000000000;
    v21._countAndFlagsBits = v45;
    v21._object = v8;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 0x5F4141415FLL;
    v22._object = (void *)0xE500000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v18;
    v23._object = v20;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v20);
    v24 = v52;
    v25.super.super.isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    *(_QWORD *)&v52 = *a3;
    v27 = v52;
    v28 = a3;
    *a3 = 0x8000000000000000;
    v30 = sub_1000161EC(v24, *((uint64_t *)&v24 + 1));
    v31 = *(_QWORD *)(v27 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (*(_QWORD *)(v27 + 24) >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v37 = (_QWORD *)v52;
        if ((v29 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_10001879C();
        v37 = (_QWORD *)v52;
        if ((v34 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_10001744C(v33, isUniquelyReferenced_nonNull_native);
      v35 = sub_1000161EC(v24, *((uint64_t *)&v24 + 1));
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_20;
      v30 = v35;
      v37 = (_QWORD *)v52;
      if ((v34 & 1) != 0)
      {
LABEL_3:
        v11 = v37[7];
        v12 = 8 * v30;

        *(NSNumber *)(v11 + v12) = v25;
        goto LABEL_4;
      }
    }
    v37[(v30 >> 6) + 8] |= 1 << v30;
    *(_OWORD *)(v37[6] + 16 * v30) = v24;
    *(NSNumber *)(v37[7] + 8 * v30) = v25;
    v38 = v37[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_19;
    v37[2] = v40;
    swift_bridgeObjectRetain(*((_QWORD *)&v24 + 1));
LABEL_4:
    v10 += 2;
    a3 = v28;
    v13 = *v28;
    *v28 = v37;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(*((_QWORD *)&v24 + 1));
    swift_bridgeObjectRelease(v13);
    v9 = v46 - 1;
    v8 = v43;
    if (v46 == 1)
    {
      swift_bridgeObjectRelease(v43);
      return swift_bridgeObjectRelease(v42);
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall FBKSEvaluation.CAPayload(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  unint64_t v14;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  Class v18;
  unint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Bool v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[16];
  unint64_t v31;
  unint64_t v32;
  Swift::OpaquePointer_optional result;

  v1 = sub_100005D4C(&qword_100070300);
  __chkstk_darwin(v1);
  v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for FBKSEvaluation.Action(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for FBKSEvaluation.Subject(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (void **)&v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  FBKSEvaluation.subject.getter(v10);
  if ((*(unsigned int (**)(void **, uint64_t))(v9 + 88))(v12, v8) == enum case for FBKSEvaluation.Subject.interaction(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v12, v8);
    v13 = *v12;
    v14 = FBKSInteraction.CAPayload(_:)();
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    v31 = v14;
    sub_100017ECC((uint64_t)isa, 0x656E696C6E497369, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    v32 = v31;
    v17 = swift_bridgeObjectRelease(0x8000000000000000);
    FBKSEvaluation.action.getter(v17);
    v18 = FBKSEvaluation.Action.caEnumValue()().super.super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    v19 = v32;
    v20 = swift_isUniquelyReferenced_nonNull_native(v32);
    v31 = v19;
    sub_100017ECC((uint64_t)v18, 0x6E456E6F69746361, 0xEA00000000006D75, v20);
    v21 = (void *)v31;
    v32 = v31;
    v22 = swift_bridgeObjectRelease(0x8000000000000000);
    FBKSEvaluation.formResponse.getter(v22);
    v23 = type metadata accessor for FBKSEvaluation.FormResponse(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v3, 1, v23) == 1)
    {

      sub_100009730((uint64_t)v3, &qword_100070300);
    }
    else
    {
      v26 = FBKSEvaluation.FormResponse.answers.getter();
      (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v3, v23);
      v31 = sub_1000146E8((uint64_t)_swiftEmptyArrayStorage);
      __chkstk_darwin(v31);
      *(_QWORD *)&v30[-16] = &v31;
      sub_100018D20(v26, (void (*)(char *, uint64_t))sub_100019C50);
      v27 = swift_bridgeObjectRelease(v26);
      v28 = v31;
      __chkstk_darwin(v27);
      *(_QWORD *)&v30[-16] = &v32;
      sub_100018F54(v28, (void (*)(uint64_t, uint64_t, id))sub_100019C58);
      swift_bridgeObjectRelease(v28);

      v21 = (void *)v32;
    }
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v9 + 8))(v12, v8);
    v21 = 0;
  }
  v29 = v21;
  result.value._rawValue = v29;
  result.is_nil = v25;
  return result;
}

unint64_t FBKSInteraction.CAPayload(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  Class v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  Class v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  Class v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  Class v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Class v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Class v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  Class v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  Class v85;
  char v86;
  unint64_t v87;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;

  v0 = sub_100005D4C(&qword_10006F748);
  v1 = __chkstk_darwin(v0);
  v92 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v89 - v3;
  v5 = type metadata accessor for FBKSInteraction.Content(0);
  v93 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v90 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v91 = (char *)&v89 - v9;
  __chkstk_darwin(v8);
  v89 = (char *)&v89 - v10;
  v11 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v89 - v16;
  v18 = sub_1000146E8((uint64_t)_swiftEmptyArrayStorage);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  v94 = v18;
  sub_100017ECC((uint64_t)isa, 0x656E696C6E497369, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  v95 = v94;
  v21 = swift_bridgeObjectRelease(0x8000000000000000);
  dispatch thunk of FBKSInteraction.featureDomain.getter(v21);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  v22 = sub_10001928C((uint64_t)v15);
  v23 = FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter(v22).super.super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  v24 = v95;
  v25 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v24;
  sub_100017ECC((uint64_t)v23, 0xD000000000000011, 0x800000010005B1E0, v25);
  v26 = v94;
  v27 = swift_bridgeObjectRelease(0x8000000000000000);
  v28 = dispatch thunk of FBKSInteraction.bundleID.getter(v27);
  if (v29)
  {
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v32 = swift_isUniquelyReferenced_nonNull_native(v26);
    v94 = v26;
    sub_100017ECC((uint64_t)v31, 0x4449656C646E7562, 0xE800000000000000, v32);
    v26 = v94;
    v28 = swift_bridgeObjectRelease(0x8000000000000000);
  }
  v33 = dispatch thunk of FBKSInteraction.prefillQuestions.getter(v28);
  v34 = v93;
  if (v33)
    swift_bridgeObjectRelease(v33);
  v35 = Bool._bridgeToObjectiveC()().super.super.isa;
  v36 = swift_isUniquelyReferenced_nonNull_native(v26);
  v94 = v26;
  sub_100017ECC((uint64_t)v35, 0xD000000000000010, 0x800000010005B200, v36);
  v95 = v94;
  v37 = swift_bridgeObjectRelease(0x8000000000000000);
  v38 = dispatch thunk of FBKSInteraction.prefillQuestions.getter(v37);
  if (v38)
  {
    v39 = v38;
    v94 = sub_1000146E8((uint64_t)_swiftEmptyArrayStorage);
    __chkstk_darwin(v94);
    *(&v89 - 2) = (char *)&v94;
    sub_100018D20(v39, (void (*)(char *, uint64_t))sub_10001AF6C);
    v40 = swift_bridgeObjectRelease(v39);
    v41 = v94;
    __chkstk_darwin(v40);
    *(&v89 - 2) = (char *)&v95;
    sub_100018F54(v41, (void (*)(uint64_t, uint64_t, id))sub_10001AF74);
    v38 = swift_bridgeObjectRelease(v41);
  }
  dispatch thunk of FBKSInteraction.originalContent.getter(v38);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v42(v4, 1, v5) == 1)
  {
    v43 = sub_100009730((uint64_t)v4, &qword_10006F748);
  }
  else
  {
    v44 = v89;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v89, v4, v5);
    v45 = (uint64_t)v91;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v91, v44, v5);
    v46 = sub_1000194FC(v45);
    v47 = FBKSInteraction.Content.CAEnum.rawValue.getter(v46).super.super.isa;
    v48 = swift_isUniquelyReferenced_nonNull_native(v95);
    v94 = v95;
    v95 = 0x8000000000000000;
    sub_100017ECC((uint64_t)v47, 0xD000000000000013, 0x800000010005B260, v48);
    v49 = v95;
    v95 = v94;
    swift_bridgeObjectRelease(v49);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v44, v5);
  }
  v50 = (uint64_t)v92;
  dispatch thunk of FBKSInteraction.generatedContent.getter(v43);
  if (v42((char *)v50, 1, v5) == 1)
  {
    v51 = sub_100009730(v50, &qword_10006F748);
  }
  else
  {
    v52 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v90, v50, v5);
    v53 = (uint64_t)v91;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v91, v52, v5);
    v54 = sub_1000194FC(v53);
    v55 = FBKSInteraction.Content.CAEnum.rawValue.getter(v54).super.super.isa;
    v56 = swift_isUniquelyReferenced_nonNull_native(v95);
    v94 = v95;
    v95 = 0x8000000000000000;
    sub_100017ECC((uint64_t)v55, 0xD000000000000014, 0x800000010005B240, v56);
    v57 = v95;
    v95 = v94;
    swift_bridgeObjectRelease(v57);
    v51 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v52, v5);
  }
  v58 = dispatch thunk of FBKSInteraction.modelVersion.getter(v51);
  if (v59)
  {
    v60 = v59;
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    v62 = swift_isUniquelyReferenced_nonNull_native(v95);
    v94 = v95;
    v95 = 0x8000000000000000;
    sub_100017ECC((uint64_t)v61, 0x7265566C65646F6DLL, 0xEC0000006E6F6973, v62);
    v63 = v95;
    v95 = v94;
    v58 = swift_bridgeObjectRelease(v63);
  }
  dispatch thunk of FBKSInteraction.diagnostics.getter(v58);
  if (v64)
    swift_bridgeObjectRelease(v64);
  v65 = Bool._bridgeToObjectiveC()().super.super.isa;
  v66 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v95;
  v95 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v65, 0x74736F6E67616964, 0xEB00000000736369, v66);
  v67 = v95;
  v95 = v94;
  v68 = swift_bridgeObjectRelease(v67);
  v69 = dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter(v68);
  if (v69)
    swift_bridgeObjectRelease(v69);
  v70 = Bool._bridgeToObjectiveC()().super.super.isa;
  v71 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v95;
  v95 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v70, 0xD000000000000010, 0x800000010005B220, v71);
  v72 = v95;
  v95 = v94;
  v73 = swift_bridgeObjectRelease(v72);
  v74 = dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter(v73);
  if (v74)
  {
    v75 = v74;
    v76 = __chkstk_darwin(v74);
    *(&v89 - 2) = (char *)&v95;
    sub_100019104(v76, (void (*)(uint64_t, uint64_t, uint64_t))sub_100019EB0);
    swift_bridgeObjectRelease(v75);
  }
  dispatch thunk of FBKSInteraction.isHighPriority.getter();
  v77 = Bool._bridgeToObjectiveC()().super.super.isa;
  v78 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v95;
  v95 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v77, 0x7250686769487369, 0xEE00797469726F69, v78);
  v79 = v95;
  v95 = v94;
  v80 = swift_bridgeObjectRelease(v79);
  dispatch thunk of FBKSInteraction.sentPresented.getter(v80);
  v81 = Bool._bridgeToObjectiveC()().super.super.isa;
  v82 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v95;
  v95 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v81, 0x73657250746E6573, 0xED00006465746E65, v82);
  v83 = v95;
  v95 = v94;
  v84 = swift_bridgeObjectRelease(v83);
  dispatch thunk of FBKSInteraction.firstEvaluation.getter(v84);
  v85 = Bool._bridgeToObjectiveC()().super.super.isa;
  v86 = swift_isUniquelyReferenced_nonNull_native(v95);
  v94 = v95;
  v95 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v85, 0x6176457473726966, 0xEF6E6F697461756CLL, v86);
  v87 = v95;
  v95 = v94;
  swift_bridgeObjectRelease(v87);
  return v95;
}

NSNumber __swiftcall FBKSInteraction.FeatureDomain.caEnumValue()()
{
  return (NSNumber)sub_100015A90((void (*)(_QWORD))&type metadata accessor for FBKSInteraction.FeatureDomain, (uint64_t (*)(char *))sub_10001928C, (uint64_t (*)(uint64_t))FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter);
}

NSNumber __swiftcall FBKSInteraction.Content.caEnumValue()()
{
  return (NSNumber)sub_100015A90((void (*)(_QWORD))&type metadata accessor for FBKSInteraction.Content, (uint64_t (*)(char *))sub_1000194FC, (uint64_t (*)(uint64_t))FBKSInteraction.Content.CAEnum.rawValue.getter);
}

uint64_t sub_100015A90(void (*a1)(_QWORD), uint64_t (*a2)(char *), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  a1(0);
  __chkstk_darwin();
  v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t))(v8 + 16))((char *)&v11 - v6, v3);
  v9 = a2(v7);
  return a3(v9);
}

uint64_t sub_100015B10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  swift_bridgeObjectRetain(a2);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v11 = *a4;
  *a4 = 0x8000000000000000;
  sub_100017ECC((uint64_t)isa, a1, a2, isUniquelyReferenced_nonNull_native);
  v9 = *a4;
  *a4 = v11;
  swift_bridgeObjectRelease(a2);
  return swift_bridgeObjectRelease(v9);
}

NSNumber __swiftcall FBKSEvaluation.Action.caEnumValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  Swift::Int v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for FBKSEvaluation.Action(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for FBKSEvaluation.Action.thumbsUp(_:))
  {
    v7 = 2;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.thumbsDown(_:))
  {
    v7 = 3;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.reportConcern(_:))
  {
    v7 = 4;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.skip(_:))
  {
    v7 = 5;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.invalidData(_:))
  {
    v7 = 6;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.contentDeleted(_:))
  {
    v7 = 7;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v7 = 0;
  }
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  return NSNumber.init(integerLiteral:)(v7);
}

uint64_t sub_100015D10(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  swift_bridgeObjectRetain(a2);
  v8 = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  v12 = *a4;
  *a4 = 0x8000000000000000;
  sub_100017ECC((uint64_t)v8, a1, a2, isUniquelyReferenced_nonNull_native);
  v10 = *a4;
  *a4 = v12;
  swift_bridgeObjectRelease(a2);
  return swift_bridgeObjectRelease(v10);
}

NSNumber FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter(char a1)
{
  Swift::Int v1;

  v1 = qword_10005A200[a1];
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  return NSNumber.init(integerLiteral:)(v1);
}

uint64_t sub_100015DF8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100015F0C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter);
}

Swift::Int sub_100015E04(uint64_t a1, uint64_t a2)
{
  return sub_1000160A8(a1, a2, (uint64_t (*)(uint64_t))FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter);
}

void sub_100015E10(uint64_t a1)
{
  char *v1;
  Class isa;

  isa = FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter(*v1).super.super.isa;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100015E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001614C(a1, a2, a3, (uint64_t (*)(uint64_t))FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter);
}

uint64_t sub_100015E60@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s15FeedbackService15FBKSInteractionC13FeatureDomainO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(*a1);
  *a2 = result;
  return result;
}

NSNumber sub_100015E88@<X0>(NSNumber *a1@<X8>)
{
  char *v1;
  NSNumber result;

  result.super.super.isa = FBKSInteraction.FeatureDomain.CAEnum.rawValue.getter(*v1).super.super.isa;
  a1->super.super.isa = result.super.super.isa;
  return result;
}

NSNumber FBKSInteraction.Content.CAEnum.rawValue.getter(char a1)
{
  Swift::Int v1;

  v1 = qword_10005A2A0[a1];
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  return NSNumber.init(integerLiteral:)(v1);
}

uint64_t sub_100015F00(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100015F0C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))FBKSInteraction.Content.CAEnum.rawValue.getter);
}

uint64_t sub_100015F0C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v6 = *a1;
  v7 = *a2;
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v8 = (void *)a5(v6);
  v9 = (void *)a5(v7);
  LOBYTE(v6) = static NSObject.== infix(_:_:)(v8, v9);

  return v6 & 1;
}

Swift::Int sub_100015F94(uint64_t a1, uint64_t a2)
{
  return sub_1000160A8(a1, a2, (uint64_t (*)(uint64_t))FBKSInteraction.Content.CAEnum.rawValue.getter);
}

void sub_100015FA0(uint64_t a1)
{
  char *v1;
  Class isa;

  isa = FBKSInteraction.Content.CAEnum.rawValue.getter(*v1).super.super.isa;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100015FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001614C(a1, a2, a3, (uint64_t (*)(uint64_t))FBKSInteraction.Content.CAEnum.rawValue.getter);
}

uint64_t sub_100015FF0@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s15FeedbackService15FBKSInteractionC7ContentO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(*a1);
  *a2 = result;
  return result;
}

NSNumber sub_100016018@<X0>(NSNumber *a1@<X8>)
{
  char *v1;
  NSNumber result;

  result.super.super.isa = FBKSInteraction.Content.CAEnum.rawValue.getter(*v1).super.super.isa;
  a1->super.super.isa = result.super.super.isa;
  return result;
}

NSNumber FBKSEvaluation.Action.CAEnum.rawValue.getter(char a1)
{
  Swift::Int v1;

  v1 = qword_10005A320[a1];
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  return NSNumber.init(integerLiteral:)(v1);
}

uint64_t sub_100016090(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100015F0C(a1, a2, a3, a4, (uint64_t (*)(uint64_t))FBKSEvaluation.Action.CAEnum.rawValue.getter);
}

Swift::Int sub_10001609C(uint64_t a1, uint64_t a2)
{
  return sub_1000160A8(a1, a2, (uint64_t (*)(uint64_t))FBKSEvaluation.Action.CAEnum.rawValue.getter);
}

Swift::Int sub_1000160A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;
  void *v6;
  _QWORD v8[9];

  v5 = *v3;
  Hasher.init(_seed:)(v8);
  v6 = (void *)a3(v5);
  NSObject.hash(into:)(v8);

  return Hasher._finalize()();
}

void sub_1000160FC(uint64_t a1)
{
  char *v1;
  Class isa;

  isa = FBKSEvaluation.Action.CAEnum.rawValue.getter(*v1).super.super.isa;
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100016140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001614C(a1, a2, a3, (uint64_t (*)(uint64_t))FBKSEvaluation.Action.CAEnum.rawValue.getter);
}

Swift::Int sub_10001614C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;
  void *v7;
  _QWORD v9[9];

  v6 = *v4;
  Hasher.init(_seed:)(v9);
  v7 = (void *)a4(v6);
  NSObject.hash(into:)(v9);

  return Hasher._finalize()();
}

uint64_t sub_10001619C@<X0>(void **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s15FeedbackService14FBKSEvaluationC6ActionO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(*a1);
  *a2 = result;
  return result;
}

NSNumber sub_1000161C4@<X0>(NSNumber *a1@<X8>)
{
  char *v1;
  NSNumber result;

  result.super.super.isa = FBKSEvaluation.Action.CAEnum.rawValue.getter(*v1).super.super.isa;
  a1->super.super.isa = result.super.super.isa;
  return result;
}

unint64_t sub_1000161EC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_100016424(a1, a2, v4);
}

unint64_t sub_100016250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for FBKSForm.Question(0);
  v6 = sub_100009BE4(&qword_10006F7E8, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100016504(a1, v7);
}

unint64_t sub_1000162BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100016644(a1, v4);
}

unint64_t sub_1000162EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_100009BE4(&qword_10006F790, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100059A98);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_100016708(a1, v5);
}

unint64_t sub_100016374(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_100016848(a1, v5);
}

unint64_t sub_1000163F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000169BC(a1, v4);
}

unint64_t sub_100016424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100016504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for FBKSForm.Question(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100009BE4(&qword_10006F7F0, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100016644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10001AE1C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000126EC((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100016708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100009BE4(&qword_10006F790, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100059A98);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100016848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000169BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10000A968(0, (unint64_t *)&unk_100070550, NSXPCConnection_ptr);
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

Swift::Int sub_100016AD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005D4C(&qword_10006F7F8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }
    if (__OFADD__(v15++, 1))
      goto LABEL_43;
    if (v15 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v15);
    if (!v25)
    {
      v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        v3 = v36;
        if ((v38 & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      }
      v25 = *(_QWORD *)(v37 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v15 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v15 >= v12)
            goto LABEL_34;
          v25 = *(_QWORD *)(v37 + 8 * v15);
          ++v26;
          if (v25)
            goto LABEL_23;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      ++v15;
    }
LABEL_23:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v27[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v29, v28);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v18 == v32;
        if (v18 == v32)
          v18 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v30;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100016DBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for FBKSForm.Question(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100005D4C(&qword_10006F7E0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    if (__OFADD__(v19++, 1))
      goto LABEL_43;
    if (v19 >= v42)
      break;
    v24 = v43;
    v25 = v43[v19];
    if (!v25)
    {
      v26 = v19 + 1;
      if (v19 + 1 >= v42)
      {
LABEL_34:
        swift_release(v10);
        v3 = v41;
        if ((v45 & 1) == 0)
          goto LABEL_41;
        goto LABEL_37;
      }
      v25 = v43[v26];
      if (!v25)
      {
        while (1)
        {
          v19 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v19 >= v42)
            goto LABEL_34;
          v25 = v43[v19];
          ++v26;
          if (v25)
            goto LABEL_21;
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }
      ++v19;
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100009BE4(&qword_10006F7E8, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSForm.Question, (uint64_t)&protocol conformance descriptor for FBKSForm.Question);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100017138(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005D4C(&qword_10006F638);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_100011684((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_10001AE1C(v26, (uint64_t)&v39);
      sub_100009C84(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_100011684(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10001744C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005D4C(&qword_10006F7D8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_100017758(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for FormLaunchConfiguration(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100005D4C(&qword_10006F7A0);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_10000F6D0(v31, (uint64_t)v8);
    }
    else
    {
      sub_10000F714(v31, (uint64_t)v8);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v45);
    String.hash(into:)(v45, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_10000F6D0((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_100017AC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005D4C(&qword_10006F768);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_retain(v33);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

_OWORD *sub_100017D94(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1000162BC(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100009C64(v17);
        return sub_100011684(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000185B8();
      goto LABEL_7;
    }
    sub_100017138(v13, a3 & 1);
    v19 = sub_1000162BC(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10001AE1C(a2, (uint64_t)v21);
      return sub_100018188(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_100017ECC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1000161EC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10001879C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10001744C(v15, a4 & 1);
  v20 = sub_1000161EC(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

id sub_100018028(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000163F4((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100018B78();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_release(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_100017AC0(v12, a3 & 1);
  v18 = sub_1000163F4((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_10000A968(0, (unint64_t *)&unk_100070550, NSXPCConnection_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

_OWORD *sub_100018188(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_100011684(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

void *sub_100018200()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100005D4C(&qword_10006F7F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    if (!v24)
      break;
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void *sub_100018394()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = type metadata accessor for FBKSForm.Question(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D4C(&qword_10006F7E0);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_26:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v12++, 1))
      goto LABEL_28;
    if (v12 >= v27)
    {
LABEL_24:
      result = (void *)swift_release(v6);
      v1 = v25;
      goto LABEL_26;
    }
    v22 = *(_QWORD *)(v26 + 8 * v12);
    if (!v22)
      break;
LABEL_23:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v2);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v2);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v23 = v12 + 1;
  if (v12 + 1 >= v27)
    goto LABEL_24;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    ++v12;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_24;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000185B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_100005D4C(&qword_10006F638);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10001AE1C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100009C84(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_100011684(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10001879C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100005D4C(&qword_10006F7D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10001894C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for FormLaunchConfiguration(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100005D4C(&qword_10006F7A0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v28 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    sub_10000F714(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v21;
    v23[1] = v20;
    sub_10000F6D0((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100018B78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100005D4C(&qword_10006F768);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_retain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100018D20(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = sub_100005D4C(&qword_10006F540);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      return swift_release(a1);
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      v12 = v18 + 1;
      if (v18 + 1 >= v23)
        return swift_release(a1);
      v19 = *(_QWORD *)(v22 + 8 * v12);
      if (!v19)
      {
        v12 = v18 + 2;
        if (v18 + 2 >= v23)
          return swift_release(a1);
        v19 = *(_QWORD *)(v22 + 8 * v12);
        if (!v19)
        {
          v12 = v18 + 3;
          if (v18 + 3 >= v23)
            return swift_release(a1);
          v19 = *(_QWORD *)(v22 + 8 * v12);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for FBKSForm.Question(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
    *(_QWORD *)&v6[*(int *)(v4 + 48)] = v17;
    swift_bridgeObjectRetain(v17);
    a2(v6, v17);
    result = sub_100009730((uint64_t)v6, &qword_10006F540);
  }
  v20 = v18 + 4;
  if (v20 >= v23)
    return swift_release(a1);
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v23)
      return swift_release(a1);
    v19 = *(_QWORD *)(v22 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100018F54(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v20 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v7)
        return swift_release(a1);
      v18 = *(_QWORD *)(v20 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v7)
          return swift_release(a1);
        v18 = *(_QWORD *)(v20 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 3;
          if (v17 + 3 >= v7)
            return swift_release(a1);
          v18 = *(_QWORD *)(v20 + 8 * v9);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v14);
    v16 = v15;
    a2(v13, v14, v16);

    result = swift_bridgeObjectRelease(v14);
  }
  v19 = v17 + 4;
  if (v19 >= v7)
    return swift_release(a1);
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      return swift_release(a1);
    v18 = *(_QWORD *)(v20 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100019104(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release(a1);
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release(a1);
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release(a1);
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_bridgeObjectRetain(v15);
    a2(v14, v15, v16);
    result = swift_bridgeObjectRelease(v15);
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release(a1);
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10001928C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for FBKSInteraction.FeatureDomain.temporary(_:))
  {
    v5 = 17;
  }
  else
  {
    if (v4 == enum case for FBKSInteraction.FeatureDomain.imageGeneration(_:))
      return 0;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:))
      return 1;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.handwriting(_:))
      return 2;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.systemAssistant(_:))
      return 3;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.deviceExpert(_:))
      return 4;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.writingTools(_:))
      return 5;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.smartReplies(_:))
      return 6;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.emojiGeneration(_:))
      return 7;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.mailSummarization(_:))
      return 8;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.mailHighlights(_:))
      return 9;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.messagesSummarization(_:))
      return 10;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.notificationsSummarization(_:))
      return 11;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.notificationsHighlights(_:))
      return 12;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.notificationsBreakthrough(_:))
      return 13;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.magicPaper(_:))
      return 14;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.swiftAssist(_:))
      return 15;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.photosCleanup(_:))
      return 16;
    if (v4 == enum case for FBKSInteraction.FeatureDomain.test(_:))
      return 18;
    v5 = 19;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v5;
}

uint64_t sub_1000194FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = type metadata accessor for FBKSInteraction.Content(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for FBKSInteraction.Content.text(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  else if (v4 == enum case for FBKSInteraction.Content.image(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 1;
  }
  else if (v4 == enum case for FBKSInteraction.Content.audio(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 2;
  }
  else if (v4 == enum case for FBKSInteraction.Content.handwriting(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 3;
  }
  else if (v4 == enum case for FBKSInteraction.Content.sketch(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 4;
  }
  else if (v4 == enum case for FBKSInteraction.Content.imageText(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 5;
  }
  else if (v4 == enum case for FBKSInteraction.Content.sketchText(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 6;
  }
  else if (v4 == enum case for FBKSInteraction.Content.video(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 7;
  }
  else if (v4 == enum case for FBKSInteraction.Content.sourceCode(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 8;
  }
  else if (v4 == enum case for FBKSInteraction.Content.structured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 9;
  }
  else if (v4 == enum case for FBKSInteraction.Content.imageStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 96))(a1, v2);
    sub_100012720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v6 = a1 + *(int *)(sub_100005D4C(&qword_10006F7B0) + 48);
    v7 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    return 10;
  }
  else if (v4 == enum case for FBKSInteraction.Content.sketchStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 96))(a1, v2);
    sub_100012720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v8 = a1 + *(int *)(sub_100005D4C(&qword_10006F7A8) + 48);
    v9 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    return 11;
  }
  else if (v4 == enum case for FBKSInteraction.Content.notification(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 12;
  }
  else
  {
    v11 = v4;
    if (v4 == enum case for FBKSInteraction.Content.mailMessage(_:))
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
      return 13;
    }
    else
    {
      v10 = enum case for FBKSInteraction.Content.emoji(_:);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
      if (v11 == v10)
        return 14;
      else
        return 15;
    }
  }
}

void _s9feedbackd12CFBAnalyticsV14sendEvaluation_8isInliney15FeedbackService14FBKSEvaluationC_SbtFZ_0(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  NSString v19;
  Class isa;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  unint64_t v30;
  NSString v31;
  Class v32;
  void (*v33)(void **, uint64_t);
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FBKSEvaluation.Subject(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (void **)((char *)&v45 - v14);
  FBKSEvaluation.subject.getter(v13);
  if ((*(unsigned int (**)(void **, uint64_t))(v9 + 88))(v15, v8) == enum case for FBKSEvaluation.Subject.interaction(_:))
  {
    (*(void (**)(void **, uint64_t))(v9 + 96))(v15, v8);
    v16 = *v15;
    v17 = (unint64_t)FBKSEvaluation.CAPayload(_:)(a2 & 1);
    if (v17)
    {
      v18 = v17;
      v19 = String._bridgeToObjectiveC()();
      sub_10000A968(0, &qword_10006F7B8, NSObject_ptr);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      AnalyticsSendEvent(v19, isa);

      v22 = dispatch thunk of FBKSInteraction.featureDomain.getter(v21);
      v23 = FBKSInteraction.FeatureDomain.description.getter(v22);
      v25 = v24;
      v26 = sub_10001499C(v23, v24);
      v28 = v27;
      swift_bridgeObjectRelease(v25);
      v48 = 0xD00000000000002ALL;
      v49 = 0x800000010005B2B0;
      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v28);
      v30 = v49;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      v32 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v18);
      AnalyticsSendEvent(v31, v32);

    }
  }
  else
  {
    v33 = *(void (**)(void **, uint64_t))(v9 + 8);
    v33(v15, v8);
    if (qword_10006EE18 != -1)
      swift_once(&qword_10006EE18, sub_10001492C);
    v34 = type metadata accessor for Logger(0);
    sub_1000097B4(v34, (uint64_t)qword_10006F730);
    v35 = a1;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v46 = (void (*)(char *, uint64_t))v33;
      v39 = (uint8_t *)v38;
      v40 = swift_slowAlloc(32, -1);
      *(_DWORD *)v39 = 136315138;
      v47 = v39 + 4;
      v48 = v40;
      v41 = FBKSEvaluation.subject.getter(v40);
      v42 = FBKSEvaluation.Subject.description.getter(v41);
      v44 = v43;
      v46(v12, v8);
      v50 = sub_1000572F8(v42, v44, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to send analytics without Interaction: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100019C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100014B64(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_100019C58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_100015D10(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

void _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  NSString v8;
  Class v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  unint64_t v19;
  NSString v20;
  Class v21;
  unint64_t v22;
  unint64_t v23;

  v0 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = FBKSInteraction.CAPayload(_:)();
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  v22 = v4;
  sub_100017ECC((uint64_t)isa, 0x6E456E6F69746361, 0xEA00000000006D75, isUniquelyReferenced_nonNull_native);
  v7 = v22;
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = String._bridgeToObjectiveC()();
  sub_10000A968(0, &qword_10006F7B8, NSObject_ptr);
  swift_bridgeObjectRetain(v7);
  v9 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  AnalyticsSendEvent(v8, v9);

  v11 = dispatch thunk of FBKSInteraction.featureDomain.getter(v10);
  v12 = FBKSInteraction.FeatureDomain.description.getter(v11);
  v14 = v13;
  v15 = sub_10001499C(v12, v13);
  v17 = v16;
  swift_bridgeObjectRelease(v14);
  v22 = 0xD00000000000002ALL;
  v23 = 0x800000010005B2B0;
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19 = v23;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  AnalyticsSendEvent(v20, v21);

}

uint64_t sub_100019EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100015B10(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t _s15FeedbackService15FBKSInteractionC13FeatureDomainO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(void *a1)
{
  id v2;
  Class isa;
  char v4;
  id v6;
  Class v7;
  char v8;
  id v9;
  Class v10;
  char v11;
  id v12;
  Class v13;
  char v14;
  id v15;
  Class v16;
  char v17;
  id v18;
  Class v19;
  char v20;
  id v21;
  Class v22;
  char v23;
  id v24;
  Class v25;
  char v26;
  id v27;
  Class v28;
  char v29;
  id v30;
  Class v31;
  char v32;
  id v33;
  Class v34;
  char v35;
  id v36;
  Class v37;
  char v38;
  id v39;
  Class v40;
  char v41;
  id v42;
  Class v43;
  char v44;
  id v45;
  Class v46;
  char v47;
  id v48;
  Class v49;
  char v50;
  id v51;
  Class v52;
  char v53;
  id v54;
  Class v55;
  char v56;
  id v57;
  Class v58;
  char v59;
  id v60;
  Class v61;
  char v62;

  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v2 = a1;
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v4 = static NSObject.== infix(_:_:)(isa, v2);

  if ((v4 & 1) != 0)
  {

    return 0;
  }
  else
  {
    v6 = v2;
    v7 = NSNumber.init(integerLiteral:)(2).super.super.isa;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
    {

      return 1;
    }
    else
    {
      v9 = v6;
      v10 = NSNumber.init(integerLiteral:)(3).super.super.isa;
      v11 = static NSObject.== infix(_:_:)(v10, v9);

      if ((v11 & 1) != 0)
      {

        return 2;
      }
      else
      {
        v12 = v9;
        v13 = NSNumber.init(integerLiteral:)(4).super.super.isa;
        v14 = static NSObject.== infix(_:_:)(v13, v12);

        if ((v14 & 1) != 0)
        {

          return 3;
        }
        else
        {
          v15 = v12;
          v16 = NSNumber.init(integerLiteral:)(5).super.super.isa;
          v17 = static NSObject.== infix(_:_:)(v16, v15);

          if ((v17 & 1) != 0)
          {

            return 4;
          }
          else
          {
            v18 = v15;
            v19 = NSNumber.init(integerLiteral:)(6).super.super.isa;
            v20 = static NSObject.== infix(_:_:)(v19, v18);

            if ((v20 & 1) != 0)
            {

              return 5;
            }
            else
            {
              v21 = v18;
              v22 = NSNumber.init(integerLiteral:)(7).super.super.isa;
              v23 = static NSObject.== infix(_:_:)(v22, v21);

              if ((v23 & 1) != 0)
              {

                return 6;
              }
              else
              {
                v24 = v21;
                v25 = NSNumber.init(integerLiteral:)(8).super.super.isa;
                v26 = static NSObject.== infix(_:_:)(v25, v24);

                if ((v26 & 1) != 0)
                {

                  return 7;
                }
                else
                {
                  v27 = v24;
                  v28 = NSNumber.init(integerLiteral:)(9).super.super.isa;
                  v29 = static NSObject.== infix(_:_:)(v28, v27);

                  if ((v29 & 1) != 0)
                  {

                    return 8;
                  }
                  else
                  {
                    v30 = v27;
                    v31 = NSNumber.init(integerLiteral:)(10).super.super.isa;
                    v32 = static NSObject.== infix(_:_:)(v31, v30);

                    if ((v32 & 1) != 0)
                    {

                      return 9;
                    }
                    else
                    {
                      v33 = v30;
                      v34 = NSNumber.init(integerLiteral:)(11).super.super.isa;
                      v35 = static NSObject.== infix(_:_:)(v34, v33);

                      if ((v35 & 1) != 0)
                      {

                        return 10;
                      }
                      else
                      {
                        v36 = v33;
                        v37 = NSNumber.init(integerLiteral:)(12).super.super.isa;
                        v38 = static NSObject.== infix(_:_:)(v37, v36);

                        if ((v38 & 1) != 0)
                        {

                          return 11;
                        }
                        else
                        {
                          v39 = v36;
                          v40 = NSNumber.init(integerLiteral:)(13).super.super.isa;
                          v41 = static NSObject.== infix(_:_:)(v40, v39);

                          if ((v41 & 1) != 0)
                          {

                            return 12;
                          }
                          else
                          {
                            v42 = v39;
                            v43 = NSNumber.init(integerLiteral:)(14).super.super.isa;
                            v44 = static NSObject.== infix(_:_:)(v43, v42);

                            if ((v44 & 1) != 0)
                            {

                              return 13;
                            }
                            else
                            {
                              v45 = v42;
                              v46 = NSNumber.init(integerLiteral:)(15).super.super.isa;
                              v47 = static NSObject.== infix(_:_:)(v46, v45);

                              if ((v47 & 1) != 0)
                              {

                                return 14;
                              }
                              else
                              {
                                v48 = v45;
                                v49 = NSNumber.init(integerLiteral:)(16).super.super.isa;
                                v50 = static NSObject.== infix(_:_:)(v49, v48);

                                if ((v50 & 1) != 0)
                                {

                                  return 15;
                                }
                                else
                                {
                                  v51 = v48;
                                  v52 = NSNumber.init(integerLiteral:)(17).super.super.isa;
                                  v53 = static NSObject.== infix(_:_:)(v52, v51);

                                  if ((v53 & 1) != 0)
                                  {

                                    return 16;
                                  }
                                  else
                                  {
                                    v54 = v51;
                                    v55 = NSNumber.init(integerLiteral:)(9999).super.super.isa;
                                    v56 = static NSObject.== infix(_:_:)(v55, v54);

                                    if ((v56 & 1) != 0)
                                    {

                                      return 17;
                                    }
                                    else
                                    {
                                      v57 = v54;
                                      v58 = NSNumber.init(integerLiteral:)(10000).super.super.isa;
                                      v59 = static NSObject.== infix(_:_:)(v58, v57);

                                      if ((v59 & 1) != 0)
                                      {

                                        return 18;
                                      }
                                      else
                                      {
                                        v60 = v57;
                                        v61 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                                        v62 = static NSObject.== infix(_:_:)(v61, v60);

                                        if ((v62 & 1) != 0)
                                          return 19;
                                        else
                                          return 20;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t _s15FeedbackService15FBKSInteractionC7ContentO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(void *a1)
{
  id v2;
  Class isa;
  char v4;
  id v6;
  Class v7;
  char v8;
  id v9;
  Class v10;
  char v11;
  id v12;
  Class v13;
  char v14;
  id v15;
  Class v16;
  char v17;
  id v18;
  Class v19;
  char v20;
  id v21;
  Class v22;
  char v23;
  id v24;
  Class v25;
  char v26;
  id v27;
  Class v28;
  char v29;
  id v30;
  Class v31;
  char v32;
  id v33;
  Class v34;
  char v35;
  id v36;
  Class v37;
  char v38;
  id v39;
  Class v40;
  char v41;
  id v42;
  Class v43;
  char v44;
  id v45;
  Class v46;
  char v47;
  id v48;
  Class v49;
  char v50;

  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v2 = a1;
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v4 = static NSObject.== infix(_:_:)(isa, v2);

  if ((v4 & 1) != 0)
  {

    return 0;
  }
  else
  {
    v6 = v2;
    v7 = NSNumber.init(integerLiteral:)(2).super.super.isa;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
    {

      return 1;
    }
    else
    {
      v9 = v6;
      v10 = NSNumber.init(integerLiteral:)(3).super.super.isa;
      v11 = static NSObject.== infix(_:_:)(v10, v9);

      if ((v11 & 1) != 0)
      {

        return 2;
      }
      else
      {
        v12 = v9;
        v13 = NSNumber.init(integerLiteral:)(4).super.super.isa;
        v14 = static NSObject.== infix(_:_:)(v13, v12);

        if ((v14 & 1) != 0)
        {

          return 3;
        }
        else
        {
          v15 = v12;
          v16 = NSNumber.init(integerLiteral:)(5).super.super.isa;
          v17 = static NSObject.== infix(_:_:)(v16, v15);

          if ((v17 & 1) != 0)
          {

            return 4;
          }
          else
          {
            v18 = v15;
            v19 = NSNumber.init(integerLiteral:)(6).super.super.isa;
            v20 = static NSObject.== infix(_:_:)(v19, v18);

            if ((v20 & 1) != 0)
            {

              return 5;
            }
            else
            {
              v21 = v18;
              v22 = NSNumber.init(integerLiteral:)(7).super.super.isa;
              v23 = static NSObject.== infix(_:_:)(v22, v21);

              if ((v23 & 1) != 0)
              {

                return 6;
              }
              else
              {
                v24 = v21;
                v25 = NSNumber.init(integerLiteral:)(8).super.super.isa;
                v26 = static NSObject.== infix(_:_:)(v25, v24);

                if ((v26 & 1) != 0)
                {

                  return 7;
                }
                else
                {
                  v27 = v24;
                  v28 = NSNumber.init(integerLiteral:)(9).super.super.isa;
                  v29 = static NSObject.== infix(_:_:)(v28, v27);

                  if ((v29 & 1) != 0)
                  {

                    return 8;
                  }
                  else
                  {
                    v30 = v27;
                    v31 = NSNumber.init(integerLiteral:)(13).super.super.isa;
                    v32 = static NSObject.== infix(_:_:)(v31, v30);

                    if ((v32 & 1) != 0)
                    {

                      return 9;
                    }
                    else
                    {
                      v33 = v30;
                      v34 = NSNumber.init(integerLiteral:)(14).super.super.isa;
                      v35 = static NSObject.== infix(_:_:)(v34, v33);

                      if ((v35 & 1) != 0)
                      {

                        return 10;
                      }
                      else
                      {
                        v36 = v33;
                        v37 = NSNumber.init(integerLiteral:)(15).super.super.isa;
                        v38 = static NSObject.== infix(_:_:)(v37, v36);

                        if ((v38 & 1) != 0)
                        {

                          return 11;
                        }
                        else
                        {
                          v39 = v36;
                          v40 = NSNumber.init(integerLiteral:)(10).super.super.isa;
                          v41 = static NSObject.== infix(_:_:)(v40, v39);

                          if ((v41 & 1) != 0)
                          {

                            return 12;
                          }
                          else
                          {
                            v42 = v39;
                            v43 = NSNumber.init(integerLiteral:)(11).super.super.isa;
                            v44 = static NSObject.== infix(_:_:)(v43, v42);

                            if ((v44 & 1) != 0)
                            {

                              return 13;
                            }
                            else
                            {
                              v45 = v42;
                              v46 = NSNumber.init(integerLiteral:)(12).super.super.isa;
                              v47 = static NSObject.== infix(_:_:)(v46, v45);

                              if ((v47 & 1) != 0)
                              {

                                return 14;
                              }
                              else
                              {
                                v48 = v45;
                                v49 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                                v50 = static NSObject.== infix(_:_:)(v49, v48);

                                if ((v50 & 1) != 0)
                                  return 15;
                                else
                                  return 16;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t _s15FeedbackService14FBKSEvaluationC6ActionO9feedbackdE6CAEnumO8rawValueAHSgSo8NSNumberC_tcfC_0(void *a1)
{
  id v2;
  Class isa;
  char v4;
  id v6;
  Class v7;
  char v8;
  id v9;
  Class v10;
  char v11;
  id v12;
  Class v13;
  char v14;
  id v15;
  Class v16;
  char v17;
  id v18;
  Class v19;
  char v20;
  id v21;
  Class v22;
  char v23;
  id v24;
  Class v25;
  char v26;

  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  v2 = a1;
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v4 = static NSObject.== infix(_:_:)(isa, v2);

  if ((v4 & 1) != 0)
  {

    return 0;
  }
  else
  {
    v6 = v2;
    v7 = NSNumber.init(integerLiteral:)(2).super.super.isa;
    v8 = static NSObject.== infix(_:_:)(v7, v6);

    if ((v8 & 1) != 0)
    {

      return 1;
    }
    else
    {
      v9 = v6;
      v10 = NSNumber.init(integerLiteral:)(3).super.super.isa;
      v11 = static NSObject.== infix(_:_:)(v10, v9);

      if ((v11 & 1) != 0)
      {

        return 2;
      }
      else
      {
        v12 = v9;
        v13 = NSNumber.init(integerLiteral:)(4).super.super.isa;
        v14 = static NSObject.== infix(_:_:)(v13, v12);

        if ((v14 & 1) != 0)
        {

          return 3;
        }
        else
        {
          v15 = v12;
          v16 = NSNumber.init(integerLiteral:)(5).super.super.isa;
          v17 = static NSObject.== infix(_:_:)(v16, v15);

          if ((v17 & 1) != 0)
          {

            return 4;
          }
          else
          {
            v18 = v15;
            v19 = NSNumber.init(integerLiteral:)(6).super.super.isa;
            v20 = static NSObject.== infix(_:_:)(v19, v18);

            if ((v20 & 1) != 0)
            {

              return 5;
            }
            else
            {
              v21 = v18;
              v22 = NSNumber.init(integerLiteral:)(7).super.super.isa;
              v23 = static NSObject.== infix(_:_:)(v22, v21);

              if ((v23 & 1) != 0)
              {

                return 6;
              }
              else
              {
                v24 = v21;
                v25 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                v26 = static NSObject.== infix(_:_:)(v25, v24);

                if ((v26 & 1) != 0)
                  return 7;
                else
                  return 8;
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_10001A924()
{
  unint64_t result;

  result = qword_10006F750;
  if (!qword_10006F750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FBKSInteraction.FeatureDomain.CAEnum, &type metadata for FBKSInteraction.FeatureDomain.CAEnum);
    atomic_store(result, (unint64_t *)&qword_10006F750);
  }
  return result;
}

unint64_t sub_10001A96C()
{
  unint64_t result;

  result = qword_10006F758;
  if (!qword_10006F758)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FBKSInteraction.Content.CAEnum, &type metadata for FBKSInteraction.Content.CAEnum);
    atomic_store(result, (unint64_t *)&qword_10006F758);
  }
  return result;
}

unint64_t sub_10001A9B4()
{
  unint64_t result;

  result = qword_10006F760;
  if (!qword_10006F760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FBKSEvaluation.Action.CAEnum, &type metadata for FBKSEvaluation.Action.CAEnum);
    atomic_store(result, (unint64_t *)&qword_10006F760);
  }
  return result;
}

ValueMetadata *type metadata accessor for CFBAnalytics()
{
  return &type metadata for CFBAnalytics;
}

uint64_t _s6CAEnumOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6CAEnumOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_10001AAE4 + 4 * byte_100059FDD[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_10001AB18 + 4 * byte_100059FD8[v4]))();
}

uint64_t sub_10001AB18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AB20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001AB28);
  return result;
}

uint64_t sub_10001AB34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001AB3CLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_10001AB40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AB48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FBKSInteraction.FeatureDomain.CAEnum()
{
  return &type metadata for FBKSInteraction.FeatureDomain.CAEnum;
}

uint64_t _s6CAEnumOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6CAEnumOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_10001AC40 + 4 * byte_100059FE7[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10001AC74 + 4 * byte_100059FE2[v4]))();
}

uint64_t sub_10001AC74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AC7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001AC84);
  return result;
}

uint64_t sub_10001AC90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001AC98);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_10001AC9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ACA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FBKSInteraction.Content.CAEnum()
{
  return &type metadata for FBKSInteraction.Content.CAEnum;
}

uint64_t _s6CAEnumOwet_1(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s6CAEnumOwst_1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10001AD9C + 4 * byte_100059FF1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10001ADD0 + 4 * byte_100059FEC[v4]))();
}

uint64_t sub_10001ADD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001ADD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001ADE0);
  return result;
}

uint64_t sub_10001ADEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001ADF4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10001ADF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001AE00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FBKSEvaluation.Action.CAEnum()
{
  return &type metadata for FBKSEvaluation.Action.CAEnum;
}

uint64_t sub_10001AE1C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10001AE58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005D4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10001AE9C()
{
  unint64_t result;

  result = qword_10006F7C0;
  if (!qword_10006F7C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10006F7C0);
  }
  return result;
}

unint64_t sub_10001AEE0()
{
  unint64_t result;

  result = qword_10006F7C8;
  if (!qword_10006F7C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10006F7C8);
  }
  return result;
}

unint64_t sub_10001AF24()
{
  unint64_t result;

  result = qword_10006F7D0;
  if (!qword_10006F7D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10006F7D0);
  }
  return result;
}

char *sub_10001AF78(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  unsigned int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v2 = sub_100005D4C(&qword_100070300);
  __chkstk_darwin(v2);
  v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FBKSEvaluation.Action(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v36 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for FBKSEvaluation.Subject(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v34 - v17;
  v19 = a1;
  v20 = objc_msgSend(a1, "evaluationUuid");
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_7;
  }
  v21 = v20;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v16, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_7:
    sub_10001B308((uint64_t)v11);
    v27 = sub_10001B348();
    v28 = swift_allocError(&type metadata for StorageError, v27, 0, 0);
    *v29 = 12;
    swift_willThrow(v28);

    return v16;
  }
  v22(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v18, v12);
  v16 = (char *)v38;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for FBKSEvaluation.Subject.id(_:), v38);
  v23 = objc_msgSend(v19, "userResponse") - 2;
  if (v23 >= 6)
  {
    v31 = sub_10001B348();
    v32 = swift_allocError(&type metadata for StorageError, v31, 0, 0);
    *v33 = 11;
    swift_willThrow(v32);

    (*(void (**)(char *, char *))(v6 + 8))(v8, v16);
  }
  else
  {
    v24 = v36;
    (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v36, *(unsigned int *)*(&off_10006A238 + (int)v23), v35);
    v25 = type metadata accessor for FBKSEvaluation.FormResponse(0);
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v37, 1, 1, v25);
    v16 = (char *)dispatch thunk of FBKSEvaluation.__allocating_init(subject:action:formResponse:)(v8, v24, v26);

  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  return v16;
}

uint64_t sub_10001B308(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D4C(&qword_10006F080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001B348()
{
  unint64_t result;

  result = qword_100070410;
  if (!qword_100070410)
  {
    result = swift_getWitnessTable(&unk_10005A894, &type metadata for StorageError);
    atomic_store(result, (unint64_t *)&qword_100070410);
  }
  return result;
}

uint64_t sub_10001B38C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006F800);
  sub_1000097B4(v0, (uint64_t)qword_10006F800);
  v1 = static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)(v1);
}

unint64_t sub_10001B3F8(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  Swift::String v6;
  unint64_t v8;

  if ((a3 & 1) != 0)
  {
    v8 = 0;
    _StringGuts.grow(_:)(61);
    v5._countAndFlagsBits = 0xD00000000000003BLL;
    v5._object = (void *)0x800000010005B680;
    String.append(_:)(v5);
  }
  else
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(0xE000000000000000);
    v8 = 0xD000000000000026;
  }
  v6._countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  return v8;
}

unint64_t sub_10001B4B0()
{
  uint64_t v0;

  return sub_10001B3F8(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_10001B4BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001B4F8 + 4 * byte_10005A360[a1]))(0xD000000000000012, 0x800000010005B480);
}

unint64_t sub_10001B4F8()
{
  return 0xD000000000000013;
}

uint64_t sub_10001B520()
{
  return 0x4364657472656C61;
}

uint64_t sub_10001B544(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001B580 + 4 * byte_10005A364[a1]))(0xD000000000000013, 0x800000010005B3A0);
}

unint64_t sub_10001B580()
{
  return 0xD000000000000014;
}

uint64_t sub_10001B5A8()
{
  uint64_t v0;

  return v0 - 4;
}

uint64_t sub_10001B5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for Persistence();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize(v1);
  qword_100072530 = v1;
  return result;
}

uint64_t sub_10001B5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006EF20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[10] = swift_task_alloc(v4);
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for Date(0);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v7);
  v3[16] = swift_task_alloc(v7);
  v3[17] = swift_task_alloc(v7);
  v3[18] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006F528) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v8);
  v3[20] = swift_task_alloc(v8);
  v3[21] = swift_task_alloc(v8);
  v3[22] = swift_task_alloc(v8);
  v9 = type metadata accessor for FormLaunchConfiguration(0);
  v3[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[24] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v11);
  v3[26] = swift_task_alloc(v11);
  v3[27] = swift_task_alloc(v11);
  v3[28] = swift_task_alloc(v11);
  v3[29] = swift_task_alloc(v11);
  v3[30] = swift_task_alloc(v11);
  v3[31] = swift_task_alloc(v11);
  return swift_task_switch(sub_10001B784, v2, 0);
}

uint64_t sub_10001B784()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  NSString v20;
  id v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180[2];

  v1 = (void *)objc_opt_self(NSUserDefaults);
  v2 = objc_msgSend(v1, "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "arrayForKey:", v3);

  v5 = &_swiftEmptyArrayStorage;
  if (v4)
  {
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);

    v7 = sub_10001E5F4(v6);
    swift_bridgeObjectRelease(v6);
    if (v7)
      v5 = v7;
  }
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v9);
  v176 = sub_10001FE68((uint64_t)v5, v8, v9);
  *(_QWORD *)(v0 + 256) = v176;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  v10 = objc_msgSend(v1, "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "arrayForKey:", v11);

  v13 = &_swiftEmptyArrayStorage;
  if (v12)
  {
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, (char *)&type metadata for Any + 8);

    v15 = sub_10001E5F4(v14);
    swift_bridgeObjectRelease(v14);
    if (v15)
      v13 = v15;
  }
  v17 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v16);
  v18 = (_QWORD *)sub_10001FE68((uint64_t)v13, v17, v16);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v16);
  v19 = objc_msgSend(v1, "standardUserDefaults");
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "arrayForKey:", v20);

  v22 = &_swiftEmptyArrayStorage;
  if (v21)
  {
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, (char *)&type metadata for Any + 8);

    v24 = sub_10001E5F4(v23);
    swift_bridgeObjectRelease(v23);
    if (v24)
      v22 = v24;
  }
  v26 = *(_QWORD *)(v0 + 56);
  v25 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v25);
  v178 = sub_10001FE68((uint64_t)v22, v26, v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v25);
  v27 = objc_msgSend(v1, "standardUserDefaults");
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "arrayForKey:", v28);

  v30 = &_swiftEmptyArrayStorage;
  if (v29)
  {
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, (char *)&type metadata for Any + 8);

    v32 = sub_10001E5F4(v31);
    swift_bridgeObjectRelease(v31);
    if (v32)
      v30 = v32;
  }
  v167 = (uint64_t *)(v0 + 24);
  v174 = (uint64_t *)(v0 + 40);
  v33 = (uint64_t *)(v0 + 56);
  v35 = *(_QWORD *)(v0 + 56);
  v34 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v34);
  v172 = sub_10001FE68((uint64_t)v30, v35, v34);
  *(_QWORD *)(v0 + 264) = v172;
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)(v0 + 272) = type metadata accessor for FBKSSharedPersistence(0);
  v36 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)(v35, v34);
  *(_QWORD *)(v0 + 280) = v36;
  v180[0] = v176;
  swift_bridgeObjectRetain(v176);
  v37 = swift_bridgeObjectRetain(v18);
  sub_10001E758(v37);
  v38 = (_QWORD *)v178;
  v39 = swift_bridgeObjectRetain(v178);
  sub_10001E758(v39);
  v40 = *(_QWORD *)(v176 + 16);
  if (v40 < 2)
  {
    if (v40 && !v36)
      goto LABEL_33;
    goto LABEL_21;
  }
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v41 = *(_QWORD *)(v0 + 64);
  v42 = type metadata accessor for Logger(0);
  sub_1000097B4(v42, (uint64_t)qword_10006F800);
  swift_bridgeObjectRetain_n(v41, 2);
  v43 = swift_bridgeObjectRetain_n(v176, 2);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter();
  v46 = os_log_type_enabled(v44, v45);
  v47 = *(_QWORD *)(v0 + 64);
  if (v46)
  {
    v48 = *v33;
    v49 = swift_slowAlloc(22, -1);
    v162 = swift_slowAlloc(64, -1);
    v180[0] = v162;
    *(_DWORD *)v49 = 136446466;
    v164 = v36;
    swift_bridgeObjectRetain(v47);
    *v174 = sub_1000572F8(v48, v47, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v174, v0 + 48);
    swift_bridgeObjectRelease_n(v47, 3);
    *(_WORD *)(v49 + 12) = 2082;
    v50 = swift_bridgeObjectRetain(v176);
    v51 = Array.description.getter(v50, &type metadata for String);
    v53 = v52;
    swift_bridgeObjectRelease(v176);
    v54 = v51;
    v36 = v164;
    *(_QWORD *)(v0 + 48) = sub_1000572F8(v54, v53, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease_n(v176, 2);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Form identifier [%{public}s] found in more than one queue: [%{public}s]", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy(v162, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v162, -1, -1);
    v55 = v49;
    v33 = (uint64_t *)(v0 + 56);
    swift_slowDealloc(v55, -1, -1);

    v38 = (_QWORD *)v178;
    if (!v164)
      goto LABEL_33;
LABEL_21:
    swift_bridgeObjectRelease(v176);
    goto LABEL_22;
  }

  swift_bridgeObjectRelease_n(v176, 2);
  swift_bridgeObjectRelease_n(v47, 2);
  v38 = (_QWORD *)v178;
  if (v36)
    goto LABEL_21;
LABEL_33:
  v169 = v33;
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v81 = *(_QWORD *)(v0 + 64);
  v82 = type metadata accessor for Logger(0);
  sub_1000097B4(v82, (uint64_t)qword_10006F800);
  swift_bridgeObjectRetain_n(v81, 2);
  v83 = swift_bridgeObjectRetain(v176);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter();
  v86 = os_log_type_enabled(v84, v85);
  v87 = *(_QWORD *)(v0 + 64);
  if (v86)
  {
    v88 = *v169;
    v165 = v36;
    v89 = swift_slowAlloc(22, -1);
    v170 = swift_slowAlloc(64, -1);
    v180[0] = v170;
    *(_DWORD *)v89 = 136446466;
    swift_bridgeObjectRetain(v87);
    *v167 = sub_1000572F8(v88, v87, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v167, v0 + 32);
    swift_bridgeObjectRelease_n(v87, 3);
    *(_WORD *)(v89 + 12) = 2082;
    v90 = swift_bridgeObjectRetain(v176);
    v91 = Array.description.getter(v90, &type metadata for String);
    v93 = v92;
    swift_bridgeObjectRelease(v176);
    *(_QWORD *)(v0 + 32) = sub_1000572F8(v91, v93, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v174);
    swift_bridgeObjectRelease_n(v176, 2);
    v94 = v93;
    v38 = (_QWORD *)v178;
    swift_bridgeObjectRelease(v94);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Form identifier [%{public}s] found in queue: [%{public}s] but not in FBA inbox", (uint8_t *)v89, 0x16u);
    swift_arrayDestroy(v170, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v170, -1, -1);
    v95 = v89;
    v36 = v165;
    swift_slowDealloc(v95, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v176, 2);
    swift_bridgeObjectRelease_n(v87, 2);
  }
LABEL_22:
  if (!v18[2])
  {
    swift_bridgeObjectRelease(v18);
    if (!v38[2])
      goto LABEL_25;
LABEL_29:
    v68 = v38[4];
    v69 = v38[5];
    *(_QWORD *)(v0 + 288) = v69;
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRelease(v38);
    v70 = (_QWORD *)swift_task_alloc(dword_10006F85C);
    *(_QWORD *)(v0 + 296) = v70;
    *v70 = v0;
    v70[1] = sub_10001C728;
    v71 = *(_QWORD *)(v0 + 168);
    v72 = *(_QWORD *)(v0 + 72);
    v70[8] = v69;
    v70[9] = v72;
    v70[6] = v71;
    v70[7] = v68;
    return swift_task_switch(sub_10001DC34, v72, 0);
  }
  v56 = v36;
  v57 = *(_QWORD *)(v0 + 184);
  v58 = *(_QWORD *)(v0 + 192);
  v59 = *(_QWORD *)(v0 + 176);
  v60 = v18[4];
  v61 = v18[5];
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v18);
  sub_10001D124(v60, v61, v59);
  swift_bridgeObjectRelease(v61);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v57) != 1)
  {
    v74 = *(_QWORD *)(v0 + 248);
    v75 = *(_QWORD *)(v0 + 176);
    v76 = *(_QWORD *)(v0 + 184);
    v77 = *(_QWORD *)(v0 + 144);
    v78 = *(_QWORD *)(v0 + 104);
    v79 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease(v172);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v176);
    sub_10000F6D0(v75, v74);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v77, v74 + *(int *)(v76 + 24), v78);
    v80 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
    v161 = FBKSCampaign.init(state:updatedAt:)(2, v77);
    swift_release(v56);
    goto LABEL_31;
  }
  sub_100009730(*(_QWORD *)(v0 + 176), &qword_10006F528);
  if (v38[2])
    goto LABEL_29;
LABEL_25:
  swift_bridgeObjectRelease(v38);
  v62 = *(_QWORD **)(v0 + 256);
  if (v62[2])
  {
    v63 = *(_QWORD *)(v0 + 184);
    v64 = *(_QWORD *)(v0 + 192);
    v65 = *(_QWORD *)(v0 + 160);
    v66 = v62[4];
    v67 = v62[5];
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRelease(v62);
    sub_10001D124(v66, v67, v65);
    swift_bridgeObjectRelease(v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v65, 1, v63) != 1)
    {
      v101 = *(_QWORD *)(v0 + 280);
      v102 = *(_QWORD *)(v0 + 224);
      v103 = *(_QWORD *)(v0 + 184);
      v104 = *(_QWORD *)(v0 + 160);
      v105 = *(_QWORD *)(v0 + 144);
      v106 = *(_QWORD *)(v0 + 104);
      v107 = *(_QWORD *)(v0 + 112);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
      sub_10000F6D0(v104, v102);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v105, v102 + *(int *)(v103 + 24), v106);
      v108 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
      v109 = 0;
      v110 = v105;
LABEL_42:
      v161 = FBKSCampaign.init(state:updatedAt:)(v109, v110);
      swift_release(v101);
      sub_10000F758(v102);
      goto LABEL_53;
    }
    sub_100009730(*(_QWORD *)(v0 + 160), &qword_10006F528);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  }
  v96 = *(_QWORD *)(v0 + 280);
  v97 = *(_QWORD **)(v0 + 264);
  if (v96)
  {
    v98 = *(_QWORD *)(v0 + 144);
    swift_retain(*(_QWORD *)(v0 + 280));
    v99 = swift_bridgeObjectRelease(v97);
    FBKSSInboxTat.dateAdded.getter(v99);
    v100 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
    v161 = FBKSCampaign.init(state:updatedAt:)(3, v98);
    swift_release_n(v96, 2);
    goto LABEL_53;
  }
  if (!v97[2])
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
LABEL_52:
    v161 = 0;
    goto LABEL_53;
  }
  v112 = v97[4];
  v111 = v97[5];
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRelease(v97);
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v113 = type metadata accessor for Logger(0);
  sub_1000097B4(v113, (uint64_t)qword_10006F800);
  v114 = swift_bridgeObjectRetain_n(v111, 2);
  v115 = Logger.logObject.getter(v114);
  v116 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v115, v116))
  {
    v117 = (uint8_t *)swift_slowAlloc(12, -1);
    v118 = swift_slowAlloc(32, -1);
    v180[0] = v118;
    *(_DWORD *)v117 = 136446210;
    swift_bridgeObjectRetain(v111);
    *(_QWORD *)(v0 + 16) = sub_1000572F8(v112, v111, v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v167);
    swift_bridgeObjectRelease_n(v111, 3);
    _os_log_impl((void *)&_mh_execute_header, v115, v116, "Using alerted campaign [%{public}s]", v117, 0xCu);
    swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v117, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v111, 2);
  }
  v119 = *(_QWORD *)(v0 + 184);
  v120 = *(_QWORD *)(v0 + 192);
  v121 = *(_QWORD *)(v0 + 152);
  sub_10001CED0(v112, v111, v121);
  swift_bridgeObjectRelease(v111);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v121, 1, v119) == 1)
  {
    sub_100009730(*(_QWORD *)(v0 + 152), &qword_10006F528);
    goto LABEL_52;
  }
  v131 = *(_QWORD *)(v0 + 216);
  v132 = *(_QWORD *)(v0 + 184);
  v133 = *(_QWORD *)(v0 + 112);
  v135 = *(_QWORD *)(v0 + 56);
  v134 = *(_QWORD *)(v0 + 64);
  sub_10000F6D0(*(_QWORD *)(v0 + 152), v131);
  v101 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)(v135, v134);
  v136 = v131 + *(int *)(v132 + 32);
  v137 = *(_QWORD *)(v0 + 216);
  v138 = *(_QWORD *)(v0 + 104);
  if (v101)
  {
    v139 = *(_QWORD *)(v0 + 208);
    v140 = *(_QWORD *)(v0 + 88);
    sub_10000C82C(v136, v140);
    sub_10000F714(v137, v139);
    v141 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v140, 1, v138);
    v142 = *(_QWORD *)(v0 + 208);
    if (v141 == 1)
    {
      v143 = *(_QWORD *)(v0 + 88);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 128), v142 + *(int *)(*(_QWORD *)(v0 + 184) + 24), *(_QWORD *)(v0 + 104));
      sub_10000F758(v142);
      sub_100009730(v143, &qword_10006EF20);
    }
    else
    {
      v149 = *(_QWORD *)(v0 + 128);
      v150 = *(_QWORD *)(v0 + 104);
      v151 = *(_QWORD *)(v0 + 112);
      v152 = *(_QWORD *)(v0 + 88);
      sub_10000F758(*(_QWORD *)(v0 + 208));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 32))(v149, v152, v150);
    }
    v102 = *(_QWORD *)(v0 + 216);
    v153 = *(_QWORD *)(v0 + 128);
    v154 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
    v109 = 3;
    v110 = v153;
    goto LABEL_42;
  }
  v144 = *(_QWORD *)(v0 + 200);
  v145 = *(_QWORD *)(v0 + 80);
  sub_10000C82C(v136, v145);
  sub_10000F714(v137, v144);
  v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v145, 1, v138);
  v147 = *(_QWORD *)(v0 + 200);
  if (v146 == 1)
  {
    v148 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 120), v147 + *(int *)(*(_QWORD *)(v0 + 184) + 24), *(_QWORD *)(v0 + 104));
    sub_10000F758(v147);
    sub_100009730(v148, &qword_10006EF20);
  }
  else
  {
    v156 = *(_QWORD *)(v0 + 112);
    v155 = *(_QWORD *)(v0 + 120);
    v157 = *(_QWORD *)(v0 + 104);
    v158 = *(_QWORD *)(v0 + 80);
    sub_10000F758(*(_QWORD *)(v0 + 200));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 32))(v155, v158, v157);
  }
  v74 = *(_QWORD *)(v0 + 216);
  v159 = *(_QWORD *)(v0 + 120);
  v160 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
  v161 = FBKSCampaign.init(state:updatedAt:)(4, v159);
LABEL_31:
  sub_10000F758(v74);
LABEL_53:
  v122 = *(_QWORD *)(v0 + 240);
  v124 = *(_QWORD *)(v0 + 224);
  v123 = *(_QWORD *)(v0 + 232);
  v125 = *(_QWORD *)(v0 + 208);
  v126 = *(_QWORD *)(v0 + 216);
  v127 = *(_QWORD *)(v0 + 200);
  v129 = *(_QWORD *)(v0 + 168);
  v128 = *(_QWORD *)(v0 + 176);
  v130 = *(_QWORD *)(v0 + 160);
  v163 = *(_QWORD *)(v0 + 152);
  v166 = *(_QWORD *)(v0 + 144);
  v168 = *(_QWORD *)(v0 + 136);
  v171 = *(_QWORD *)(v0 + 128);
  v173 = *(_QWORD *)(v0 + 120);
  v175 = *(_QWORD *)(v0 + 96);
  v177 = *(_QWORD *)(v0 + 88);
  v179 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v163);
  swift_task_dealloc(v166);
  swift_task_dealloc(v168);
  swift_task_dealloc(v171);
  swift_task_dealloc(v173);
  swift_task_dealloc(v175);
  swift_task_dealloc(v177);
  swift_task_dealloc(v179);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v161);
}

uint64_t sub_10001C728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 288);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10001C788, v2, 0);
}

uint64_t sub_10001C788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 48))(v2, 1, v1) != 1)
  {
    v9 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    swift_bridgeObjectRelease(v9);
    sub_10000F6D0(v2, v10);
    sub_10000C82C(v10 + *(int *)(v1 + 32), v14);
    sub_10000F714(v10, v11);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
    v16 = *(_QWORD *)(v0 + 232);
    if (v15 == 1)
    {
      v17 = *(_QWORD *)(v0 + 96);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 136), v16 + *(int *)(*(_QWORD *)(v0 + 184) + 24), *(_QWORD *)(v0 + 104));
      sub_10000F758(v16);
      sub_100009730(v17, &qword_10006EF20);
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 136);
      v19 = *(_QWORD *)(v0 + 104);
      v20 = *(_QWORD *)(v0 + 112);
      v21 = *(_QWORD *)(v0 + 96);
      sub_10000F758(*(_QWORD *)(v0 + 232));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v18, v21, v19);
    }
    v22 = *(_QWORD *)(v0 + 280);
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 136);
    objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
    v25 = 1;
LABEL_9:
    v26 = v24;
LABEL_14:
    v89 = FBKSCampaign.init(state:updatedAt:)(v25, v26);
    swift_release(v22);
    v38 = v23;
LABEL_15:
    sub_10000F758(v38);
    goto LABEL_16;
  }
  sub_100009730(v2, &qword_10006F528);
  v3 = *(_QWORD **)(v0 + 256);
  if (v3[2])
  {
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = v3[4];
    v8 = v3[5];
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRelease(v3);
    sub_10001D124(v7, v8, v6);
    swift_bridgeObjectRelease(v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) != 1)
    {
      v22 = *(_QWORD *)(v0 + 280);
      v23 = *(_QWORD *)(v0 + 224);
      v32 = *(_QWORD *)(v0 + 184);
      v33 = *(_QWORD *)(v0 + 160);
      v34 = *(_QWORD *)(v0 + 144);
      v35 = *(_QWORD *)(v0 + 104);
      v36 = *(_QWORD *)(v0 + 112);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
      sub_10000F6D0(v33, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v34, v23 + *(int *)(v32 + 24), v35);
      v37 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
      v25 = 0;
      v26 = v34;
      goto LABEL_14;
    }
    sub_100009730(*(_QWORD *)(v0 + 160), &qword_10006F528);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  }
  v27 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD **)(v0 + 264);
  if (!v27)
  {
    if (!v28[2])
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
LABEL_26:
      v89 = 0;
      goto LABEL_16;
    }
    v50 = v28[4];
    v49 = v28[5];
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease(v28);
    if (qword_10006EE20 != -1)
      swift_once(&qword_10006EE20, sub_10001B38C);
    v51 = type metadata accessor for Logger(0);
    sub_1000097B4(v51, (uint64_t)qword_10006F800);
    v52 = swift_bridgeObjectRetain_n(v49, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v56 = swift_slowAlloc(32, -1);
      v98 = v56;
      *(_DWORD *)v55 = 136446210;
      swift_bridgeObjectRetain(v49);
      *(_QWORD *)(v0 + 16) = sub_1000572F8(v50, v49, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease_n(v49, 3);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Using alerted campaign [%{public}s]", v55, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v49, 2);
    }
    v57 = *(_QWORD *)(v0 + 184);
    v58 = *(_QWORD *)(v0 + 192);
    v59 = *(_QWORD *)(v0 + 152);
    sub_10001CED0(v50, v49, v59);
    swift_bridgeObjectRelease(v49);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v57) == 1)
    {
      sub_100009730(*(_QWORD *)(v0 + 152), &qword_10006F528);
      goto LABEL_26;
    }
    v60 = *(_QWORD *)(v0 + 216);
    v61 = *(_QWORD *)(v0 + 184);
    v62 = *(_QWORD *)(v0 + 112);
    v64 = *(_QWORD *)(v0 + 56);
    v63 = *(_QWORD *)(v0 + 64);
    sub_10000F6D0(*(_QWORD *)(v0 + 152), v60);
    v22 = static FBKSSharedPersistence.fbaInboxFormTat(formIdentifier:)(v64, v63);
    v65 = v60 + *(int *)(v61 + 32);
    v66 = *(_QWORD *)(v0 + 216);
    v67 = *(_QWORD *)(v0 + 104);
    if (!v22)
    {
      v73 = *(_QWORD *)(v0 + 200);
      v74 = *(_QWORD *)(v0 + 80);
      sub_10000C82C(v65, v74);
      sub_10000F714(v66, v73);
      v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v74, 1, v67);
      v76 = *(_QWORD *)(v0 + 200);
      if (v75 == 1)
      {
        v77 = *(_QWORD *)(v0 + 80);
        (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 120), v76 + *(int *)(*(_QWORD *)(v0 + 184) + 24), *(_QWORD *)(v0 + 104));
        sub_10000F758(v76);
        sub_100009730(v77, &qword_10006EF20);
      }
      else
      {
        v83 = *(_QWORD *)(v0 + 112);
        v82 = *(_QWORD *)(v0 + 120);
        v84 = *(_QWORD *)(v0 + 104);
        v85 = *(_QWORD *)(v0 + 80);
        sub_10000F758(*(_QWORD *)(v0 + 200));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v82, v85, v84);
      }
      v86 = *(_QWORD *)(v0 + 216);
      v87 = *(_QWORD *)(v0 + 120);
      v88 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
      v89 = FBKSCampaign.init(state:updatedAt:)(4, v87);
      v38 = v86;
      goto LABEL_15;
    }
    v68 = *(_QWORD *)(v0 + 208);
    v69 = *(_QWORD *)(v0 + 88);
    sub_10000C82C(v65, v69);
    sub_10000F714(v66, v68);
    v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v69, 1, v67);
    v71 = *(_QWORD *)(v0 + 208);
    if (v70 == 1)
    {
      v72 = *(_QWORD *)(v0 + 88);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 16))(*(_QWORD *)(v0 + 128), v71 + *(int *)(*(_QWORD *)(v0 + 184) + 24), *(_QWORD *)(v0 + 104));
      sub_10000F758(v71);
      sub_100009730(v72, &qword_10006EF20);
    }
    else
    {
      v78 = *(_QWORD *)(v0 + 128);
      v79 = *(_QWORD *)(v0 + 104);
      v80 = *(_QWORD *)(v0 + 112);
      v81 = *(_QWORD *)(v0 + 88);
      sub_10000F758(*(_QWORD *)(v0 + 208));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v78, v81, v79);
    }
    v23 = *(_QWORD *)(v0 + 216);
    v24 = *(_QWORD *)(v0 + 128);
    objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
    v25 = 3;
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(v0 + 144);
  swift_retain(*(_QWORD *)(v0 + 280));
  v30 = swift_bridgeObjectRelease(v28);
  FBKSSInboxTat.dateAdded.getter(v30);
  v31 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaign(0));
  v89 = FBKSCampaign.init(state:updatedAt:)(3, v29);
  swift_release_n(v27, 2);
LABEL_16:
  v39 = *(_QWORD *)(v0 + 240);
  v41 = *(_QWORD *)(v0 + 224);
  v40 = *(_QWORD *)(v0 + 232);
  v42 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 216);
  v44 = *(_QWORD *)(v0 + 200);
  v46 = *(_QWORD *)(v0 + 168);
  v45 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 160);
  v90 = *(_QWORD *)(v0 + 152);
  v91 = *(_QWORD *)(v0 + 144);
  v92 = *(_QWORD *)(v0 + 136);
  v93 = *(_QWORD *)(v0 + 128);
  v94 = *(_QWORD *)(v0 + 120);
  v95 = *(_QWORD *)(v0 + 96);
  v96 = *(_QWORD *)(v0 + 88);
  v97 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v89);
}

uint64_t sub_10001CED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  sub_10001E238(a1, a2, a3);
  v4 = type metadata accessor for FormLaunchConfiguration(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 0, 1, v4);
}

uint64_t sub_10001D124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  sub_10001E238(a1, a2, a3);
  v4 = type metadata accessor for FormLaunchConfiguration(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 0, 1, v4);
}

uint64_t sub_10001D3E0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v6 + 48) = a4;
  *(_QWORD *)(v6 + 56) = a5;
  *(_BYTE *)(v6 + 112) = a2;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a3;
  v7 = type metadata accessor for FormLaunchConfiguration(0);
  *(_QWORD *)(v6 + 64) = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 72) = swift_task_alloc(v8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v8);
  return swift_task_switch(sub_10001D454, v5, 0);
}

uint64_t sub_10001D454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  id v30;
  unint64_t v31;
  Class isa;
  NSString v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_1000097B4(v3, (uint64_t)qword_10006F800);
  v4 = sub_10000F714(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(uint64_t **)(v0 + 80);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_1000572F8(0xD000000000000047, 0x800000010005B5B0, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *(_WORD *)(v9 + 12) = 2080;
    v11 = *v8;
    v10 = v8[1];
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 24) = sub_1000572F8(v11, v10, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v10);
    sub_10000F758((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s [%s]", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_10000F758(*(_QWORD *)(v0 + 80));
  }

  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + *(int *)(v12 + 28));
  if (qword_10006EE80 != -1)
    swift_once(&qword_10006EE80, sub_100042D04);
  v14 = *(_QWORD *)algn_1000701E8;
  v15 = (void *)qword_1000701F0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000701E8);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "integerForKey:", v17);

  swift_bridgeObjectRelease(v14);
  if (v13 >= (uint64_t)v18)
  {
    sub_10001FA90(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 112));
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v36 = *(_QWORD **)(v0 + 32);
    v37 = qword_100072558;
    *(_QWORD *)(v0 + 88) = qword_100072558;
    *(_QWORD *)(v0 + 96) = *v36;
    *(_QWORD *)(v0 + 104) = v36[1];
    return swift_task_switch(sub_10001D95C, v37, 0);
  }
  else
  {
    v20 = *(int **)(v0 + 64);
    v19 = *(_QWORD *)(v0 + 72);
    v21 = *(uint64_t **)(v0 + 32);
    v47 = v21[2];
    v48 = *v21;
    v38 = v21[1];
    v39 = v21[3];
    v22 = v21[5];
    v45 = v21[6];
    v46 = v21[4];
    v50 = v12;
    v23 = v21[7];
    v24 = v21[9];
    v43 = v21[10];
    v44 = v21[8];
    v25 = v21[11];
    v42 = *((_WORD *)v21 + 48);
    v41 = v21[13];
    v49 = v13 + 1;
    v26 = v19 + v20[8];
    v40 = *((_BYTE *)v21 + 112);
    v27 = type metadata accessor for Date(0);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
    v28(v26, 1, 1, v27);
    v28(v19 + v20[9], 1, 1, v27);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v29 = swift_bridgeObjectRetain(v24);
    Date.init()(v29);
    *(_QWORD *)v19 = v48;
    *(_QWORD *)(v19 + 8) = v38;
    *(_QWORD *)(v19 + 16) = v47;
    *(_QWORD *)(v19 + 24) = v39;
    *(_QWORD *)(v19 + 32) = v46;
    *(_QWORD *)(v19 + 40) = v22;
    *(_QWORD *)(v19 + 48) = v45;
    *(_QWORD *)(v19 + 56) = v23;
    *(_QWORD *)(v19 + 64) = v44;
    *(_QWORD *)(v19 + 72) = v24;
    *(_QWORD *)(v19 + 80) = v43;
    *(_QWORD *)(v19 + 88) = v25;
    *(_WORD *)(v19 + 96) = v42;
    *(_QWORD *)(v19 + 104) = v41;
    *(_BYTE *)(v19 + 112) = v40;
    *(_QWORD *)(v19 + *(int *)(v50 + 28)) = v49;
    *(_QWORD *)(v19 + v20[10]) = 0;
    v30 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v31 = sub_1000118E8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v31);
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v30, "setObject:forKey:", isa, v33);

    sub_10000F758(v19);
    v34 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001D95C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100031498(*(void **)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_100005D4C(&qword_10006F528);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FormLaunchConfiguration(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001DA2C, v3, 0);
}

uint64_t sub_10001DA2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  String.append(_:)(*(Swift::String *)(v0 + 24));
  *(_QWORD *)(v0 + 80) = 0xD000000000000013;
  *(_QWORD *)(v0 + 88) = 0x800000010005B4E0;
  v1 = (_QWORD *)swift_task_alloc(dword_10006F85C);
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = sub_10001DAC4;
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v1[8] = 0x800000010005B4E0;
  v1[9] = v2;
  v1[6] = v3;
  v1[7] = 0xD000000000000013;
  return swift_task_switch(sub_10001DC34, v2, 0);
}

uint64_t sub_10001DAC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_10001DB1C, v1, 0);
}

uint64_t sub_10001DB1C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 48))(v1, 1, *(_QWORD *)(v0 + 56));
  v3 = *(_QWORD *)(v0 + 88);
  if (v2 == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    sub_100009730(v1, &qword_10006F528);
    v4 = sub_100005D4C(&qword_10006FA18);
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 16);
    sub_10000F6D0(v1, v6);
    v4 = sub_100005D4C(&qword_10006FA18);
    v9 = (_QWORD *)(v8 + *(int *)(v4 + 48));
    sub_10000F6D0(v6, v8);
    v5 = 0;
    *v9 = v7;
    v9[1] = v3;
  }
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(*(_QWORD *)(v0 + 16), v5, 1, v4);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return swift_task_switch(sub_10001DC34, v3, 0);
}

uint64_t sub_10001DC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001E238(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DF44()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(void **)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  sub_100031498(*(void **)(v0 + 80), v3, (uint64_t)v1);
  swift_bridgeObjectRelease(v3);

  swift_errorRelease(v2);
  return swift_task_switch(sub_10001DFB4, v4, 0);
}

uint64_t sub_10001DFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_100005D4C(&qword_10006F9E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D4C(&qword_10006F9F0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D4C(&qword_10006F9F8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005D4C(&qword_10006FA00);
  Regex.init(_regexString:version:)(0xD000000000000020, 0x800000010005B580, 1, v15);
  v22 = a1;
  v23 = a2;
  v16 = sub_100021DC0();
  v17 = sub_100021E04();
  BidirectionalCollection<>.wholeMatch<A>(of:)(v14, &type metadata for String, v11, v16, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_100009730((uint64_t)v6, &qword_10006F9E8);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    KeyPath = swift_getKeyPath(&unk_10005A3A8);
    Regex.Match.subscript.getter(&v22, KeyPath, v7);
    swift_release(KeyPath);
    v20 = v25;
    v18 = static String._fromSubstring(_:)(v22, v23, v24, v25);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v18;
}

uint64_t sub_10001E238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  _BYTE v23[24];
  uint64_t v24;

  v6 = sub_100005D4C(&qword_10006F528);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "objectForKey:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(v22, v11);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    memset(v22, 0, sizeof(v22));
  }
  sub_100021D2C((uint64_t)v22, (uint64_t)v23);
  if (!v24)
  {
    sub_100009730((uint64_t)v23, (uint64_t *)&unk_10006FB60);
    goto LABEL_9;
  }
  v12 = sub_100005D4C(&qword_10006F9E0);
  if ((swift_dynamicCast(&v21, v23, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  v13 = v21;
  sub_100011E9C(v21, (uint64_t)v8);
  swift_bridgeObjectRelease(v13);
  v14 = type metadata accessor for FormLaunchConfiguration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v8, 1, v14) == 1)
  {
    sub_100009730((uint64_t)v8, &qword_10006F528);
    v15 = 1;
LABEL_10:
    v16 = sub_100021D74();
    swift_allocError(&type metadata for Persistence.FetchError, v16, 0, 0);
    *(_QWORD *)v17 = a1;
    *(_QWORD *)(v17 + 8) = a2;
    *(_BYTE *)(v17 + 16) = v15;
    v18 = swift_bridgeObjectRetain(a2);
    return swift_willThrow(v18);
  }
  return sub_10000F6D0((uint64_t)v8, a3);
}

uint64_t sub_10001E434(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

uint64_t sub_10001E518(unint64_t a1)
{
  char **v1;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_10001EA2C((uint64_t)v3);
  v4 = *((_QWORD *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[16 * a1];
      v8 = *((_QWORD *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((_QWORD *)v3 + 2) = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10001E5F4(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = &_swiftEmptyArrayStorage;
  sub_10001E8A8(0, v2, 0);
  v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100009C84(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10001E8A8(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10001E8A8(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = (char *)&v3[2 * v8];
      *((_QWORD *)v9 + 4) = v5;
      *((_QWORD *)v9 + 5) = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for Persistence()
{
  return objc_opt_self(_TtC9feedbackd11Persistence);
}

uint64_t sub_10001E758(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100056E28(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001E8A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10001E8C4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10001E8C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D4C(&qword_10006F9D0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

char *sub_10001EA2C(uint64_t a1)
{
  return sub_100056E28(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_10001EA40(char a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  __asm { BR              X10 }
}

_QWORD *sub_10001EAB0()
{
  void *v0;
  NSString v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010005AE30);
  v2 = objc_msgSend(v0, "arrayForKey:", v1);

  v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = ((uint64_t (*)(id, char *))static Array._unconditionallyBridgeFromObjectiveC(_:))(v2, (char *)&type metadata for Any + 8);

    v5 = sub_10001E5F4(v4);
    swift_bridgeObjectRelease(v4);
    if (v5)
      return v5;
  }
  return v3;
}

uint64_t sub_10001EB90(uint64_t a1, unint64_t a2, char a3)
{
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  id v17;
  uint64_t v19;
  uint64_t v20;

  sub_10001EA40(a3);
  v7 = v6;
  sub_10001E434(a1, a2, v6);
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      v7 = sub_100056E28(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v15 = *((_QWORD *)v7 + 2);
    v14 = *((_QWORD *)v7 + 3);
    if (v15 >= v14 >> 1)
      v7 = sub_100056E28((char *)(v14 > 1), v15 + 1, 1, v7);
    *((_QWORD *)v7 + 2) = v15 + 1;
    v16 = &v7[16 * v15];
    *((_QWORD *)v16 + 4) = a1;
    *((_QWORD *)v16 + 5) = a2;
    v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    Array._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease(v7);
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v9 = type metadata accessor for Logger(0);
  sub_1000097B4(v9, (uint64_t)qword_10006F800);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(96, -1);
    *(_DWORD *)v13 = 136446722;
    v19 = sub_1000572F8(0xD000000000000015, 0x800000010005B3C0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v19 = sub_1000572F8(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v13 + 22) = 2082;
    __asm { BR              X10 }
  }

  return swift_bridgeObjectRelease_n(a2, 2);
}

unint64_t sub_10001EFEC(Swift::String *a1)
{
  unint64_t v2;
  id v3;
  Class isa;
  NSString v5;

  v2 = sub_1000118E8();
  String.append(_:)(*a1);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", isa, v5);

  sub_10001EB90(0xD000000000000013, 0x800000010005B4E0, 0);
  return 0xD000000000000013;
}

unint64_t sub_10001F0F4(Swift::String *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000097B4(v2, (uint64_t)qword_10006F800);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136446210;
    v9 = sub_1000572F8(0xD000000000000026, 0x800000010005B600, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return sub_10001EFEC(a1);
}

uint64_t sub_10001F270(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  NSString v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v10 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v13[*(int *)(v11 + 32)];
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v16(&v13[v10[9]], 1, 1, v15);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  v17 = sub_10000F794((_QWORD *)a1);
  Date.init()(v17);
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = a4;
  *((_QWORD *)v13 + 3) = a5;
  v18 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v13 + 4) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v13 + 5) = v18;
  *((_OWORD *)v13 + 6) = *(_OWORD *)(a1 + 64);
  v13[112] = *(_BYTE *)(a1 + 80);
  v19 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v13 + 2) = *(_OWORD *)a1;
  *((_OWORD *)v13 + 3) = v19;
  *(_QWORD *)&v13[v10[7]] = 0;
  *(_QWORD *)&v13[v10[10]] = 0;
  v20 = sub_1000118E8();
  sub_10000F758((uint64_t)v13);
  v36 = 0xD000000000000014;
  v37 = 0x800000010005B630;
  v21._countAndFlagsBits = a2;
  v21._object = a3;
  String.append(_:)(v21);
  v23 = v36;
  v22 = v37;
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v24 = type metadata accessor for Logger(0);
  sub_1000097B4(v24, (uint64_t)qword_10006F800);
  v25 = swift_bridgeObjectRetain_n(v22, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v36 = v29;
    *(_DWORD *)v28 = 136446466;
    v35 = sub_1000572F8(0xD00000000000002ELL, 0x800000010005B650, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain(v22);
    v35 = sub_1000572F8(v23, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s [%{public}s]", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  v30 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setObject:forKey:", isa, v32);

  sub_10001EB90(v23, v22, 1);
  return v23;
}

_QWORD *sub_10001F618()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  NSString v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v0 = (void *)objc_opt_self(NSUserDefaults);
  v1 = objc_msgSend(v0, "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "arrayForKey:", v2);

  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

    v6 = sub_10001E5F4(v5);
    swift_bridgeObjectRelease(v5);
    if (v6)
      v4 = v6;
  }
  v7 = v4[2];
  if (v7)
  {
    v8 = v4 + 5;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      v11 = *(v8 - 1);
      v10 = *v8;
      swift_bridgeObjectRetain(*v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_100056F34(0, v9[2] + 1, 1, v9);
      v13 = v9[2];
      v12 = v9[3];
      if (v13 >= v12 >> 1)
        v9 = sub_100056F34((_QWORD *)(v12 > 1), v13 + 1, 1, v9);
      v8 += 2;
      v9[2] = v13 + 1;
      v14 = &v9[3 * v13];
      v14[4] = v11;
      v14[5] = v10;
      *((_BYTE *)v14 + 48) = 0;
      --v7;
    }
    while (v7);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v4);
  v15 = objc_msgSend(v0, "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "arrayForKey:", v16);

  v18 = _swiftEmptyArrayStorage;
  if (v17)
  {
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, (char *)&type metadata for Any + 8);

    v20 = sub_10001E5F4(v19);
    swift_bridgeObjectRelease(v19);
    if (v20)
      v18 = v20;
  }
  v21 = v18[2];
  if (v21)
  {
    v22 = v18 + 5;
    do
    {
      v24 = *(v22 - 1);
      v23 = *v22;
      swift_bridgeObjectRetain(*v22);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_100056F34(0, v9[2] + 1, 1, v9);
      v26 = v9[2];
      v25 = v9[3];
      if (v26 >= v25 >> 1)
        v9 = sub_100056F34((_QWORD *)(v25 > 1), v26 + 1, 1, v9);
      v22 += 2;
      v9[2] = v26 + 1;
      v27 = &v9[3 * v26];
      v27[4] = v24;
      v27[5] = v23;
      *((_BYTE *)v27 + 48) = 1;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease(v18);
  return v9;
}

uint64_t sub_10001F904(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  _QWORD *v13;

  sub_10001EA40(a3);
  v7 = v6;
  v13 = v6;
  v8 = sub_10001E434(a1, a2, v6);
  if ((v9 & 1) == 0)
  {
    sub_10001E518(v8);
    swift_bridgeObjectRelease(v10);
    v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    Array._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease(v7);
}

void sub_10001FA1C()
{
  JUMPOUT(0x10001FA30);
}

void sub_10001FA90(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  id v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v6 = type metadata accessor for Logger(0);
  sub_1000097B4(v6, (uint64_t)qword_10006F800);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain(a2);
    v15 = sub_1000572F8(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removing %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  if ((a3 & 1) != 0)
    v12 = 2;
  else
    v12 = 1;
  sub_10001F904(a1, a2, v12);
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "removeObjectForKey:", v14);

}

void sub_10001FCA0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000097B4(v0, (uint64_t)qword_10006F800);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136446210;
    v10 = sub_1000572F8(0x6C416574656C6564, 0xEF2928617461446CLL, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  static Strings.Daemon.bundleIdentifier.getter(v6);
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v6, "removePersistentDomainForName:", v9);

}

uint64_t sub_10001FE68(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[4];
  _QWORD *v22;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)&_swiftEmptyArrayStorage;
  v5 = 0;
  v6 = result + 40;
  v7 = -(uint64_t)v3;
  v8 = &_swiftEmptyArrayStorage;
  v18 = result + 40;
  v19 = *(_QWORD *)(result + 16);
  do
  {
    if (v5 <= v3)
      v9 = v3;
    else
      v9 = v5;
    v10 = -(uint64_t)v9;
    for (i = (uint64_t *)(v6 + 16 * v5++); ; i += 2)
    {
      if (v10 + v5 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v12 = *i;
      v21[2] = v13;
      v21[3] = v12;
      v21[0] = a2;
      v21[1] = a3;
      v14 = sub_10001AF24();
      swift_bridgeObjectRetain(v12);
      if ((StringProtocol.contains<A>(_:)(v21, &type metadata for String, &type metadata for String, v14, v14) & 1) != 0)
        break;
      result = swift_bridgeObjectRelease(v12);
      ++v5;
      if (v7 + v5 == 1)
        return (uint64_t)v8;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v8);
    v22 = v8;
    if ((result & 1) == 0)
    {
      result = sub_10001E8A8(0, v8[2] + 1, 1);
      v8 = v22;
    }
    v16 = v8[2];
    v15 = v8[3];
    if (v16 >= v15 >> 1)
    {
      result = sub_10001E8A8(v15 > 1, v16 + 1, 1);
      v8 = v22;
    }
    v8[2] = v16 + 1;
    v17 = (char *)&v8[2 * v16];
    *((_QWORD *)v17 + 4) = v13;
    *((_QWORD *)v17 + 5) = v12;
    v6 = v18;
    v3 = v19;
  }
  while (v7 + v5);
  return (uint64_t)v8;
}

uint64_t sub_10001FFF8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  NSString v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)qword_10006F800);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(a2);
    v13 = sub_1000572F8(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removing %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "removeObjectForKey:", v11);

  return sub_10001F904(a1, a2, 0);
}

void sub_1000201F4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)qword_10006F800);
  v5 = swift_bridgeObjectRetain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v13 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(a2);
    v12 = sub_1000572F8(a1, a2, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removing %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10001F904(a1, a2, 3);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "removeObjectForKey:", v11);

}

BOOL sub_1000203F0(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  NSString v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  NSString v31;
  id v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = (void *)objc_opt_self(NSUserDefaults);
  v5 = objc_msgSend(v4, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "arrayForKey:", v6);

  v8 = &_swiftEmptyArrayStorage;
  if (v7)
  {
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, (char *)&type metadata for Any + 8);

    v10 = sub_10001E5F4(v9);
    swift_bridgeObjectRelease(v9);
    if (v10)
      v8 = v10;
  }
  swift_bridgeObjectRetain(a2);
  v11 = sub_10001FE68((uint64_t)v8, a1, a2);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(a2);
  v12 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRelease(v11);
  if (v12)
    return 1;
  v13 = objc_msgSend(v4, "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "arrayForKey:", v14);

  v16 = &_swiftEmptyArrayStorage;
  if (v15)
  {
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);

    v18 = sub_10001E5F4(v17);
    swift_bridgeObjectRelease(v17);
    if (v18)
      v16 = v18;
  }
  swift_bridgeObjectRetain(a2);
  v19 = sub_10001FE68((uint64_t)v16, a1, a2);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(a2);
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRelease(v19);
  if (v20)
    return 1;
  v21 = objc_msgSend(v4, "standardUserDefaults");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "arrayForKey:", v22);

  v24 = &_swiftEmptyArrayStorage;
  if (v23)
  {
    v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);

    v26 = sub_10001E5F4(v25);
    swift_bridgeObjectRelease(v25);
    if (v26)
      v24 = v26;
  }
  swift_bridgeObjectRetain(a2);
  v27 = sub_10001FE68((uint64_t)v24, a1, a2);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(a2);
  v28 = *(_QWORD *)(v27 + 16);
  swift_bridgeObjectRelease(v27);
  if (v28)
    return 1;
  v30 = objc_msgSend(v4, "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "arrayForKey:", v31);

  v33 = &_swiftEmptyArrayStorage;
  if (v32)
  {
    v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, (char *)&type metadata for Any + 8);

    v35 = sub_10001E5F4(v34);
    swift_bridgeObjectRelease(v34);
    if (v35)
      v33 = v35;
  }
  swift_bridgeObjectRetain(a2);
  v36 = sub_10001FE68((uint64_t)v33, a1, a2);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(a2);
  v37 = *(_QWORD *)(v36 + 16);
  swift_bridgeObjectRelease(v36);
  return v37 != 0;
}

uint64_t sub_1000207CC(uint64_t a1, uint64_t a2)
{
  void *v3;
  char **v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  Class v40;
  NSString v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  id v48;
  NSString v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  NSString v60;
  id v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  id v70;
  NSString v71;
  id v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  NSString v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  NSString v92;
  id v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  id v105;
  Class isa;
  NSString v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v113;
  uint64_t result;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[2];

  v3 = (void *)objc_opt_self(NSUserDefaults);
  v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  v5 = objc_msgSend(v3, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "arrayForKey:", v6);

  if (v7)
  {
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, (char *)&type metadata for Any + 8);

    v9 = sub_10001E5F4(v8);
    swift_bridgeObjectRelease(v8);
    if (!v9)
      v9 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a2);
  v10 = sub_10001FE68((uint64_t)v9, a1, a2);
  swift_bridgeObjectRelease(v9);
  v115 = a2;
  swift_bridgeObjectRelease(a2);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease(v10);
    goto LABEL_40;
  }
  v12 = 0;
LABEL_10:
  v13 = (uint64_t *)(v10 + 32 + 16 * v12);
  v14 = *v13;
  v15 = v13[1];
  v16 = qword_10006EE20;
  swift_bridgeObjectRetain(v15);
  if (v16 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v17 = type metadata accessor for Logger(0);
  sub_1000097B4(v17, (uint64_t)qword_10006F800);
  v18 = swift_bridgeObjectRetain_n(v15, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v119[0] = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)(v21 + 4) = sub_1000572F8(v14, v15, v119);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Removing %{public}s", (uint8_t *)v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v15, 2);
  }
  v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  v23 = objc_msgSend(v3, "standardUserDefaults");
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "removeObjectForKey:", v24);

  v25 = objc_msgSend(v3, "standardUserDefaults");
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "arrayForKey:", v26);

  if (v27)
  {
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, (char *)&type metadata for Any + 8);

    v29 = sub_10001E5F4(v28);
    swift_bridgeObjectRelease(v28);
    if (!v29)
      v29 = _swiftEmptyArrayStorage;
  }
  else
  {
    v29 = _swiftEmptyArrayStorage;
  }
  ++v12;
  v30 = v29[2];
  if (!v30)
  {
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v29);
    goto LABEL_9;
  }
  v31 = v29[4];
  v32 = v29[5];
  if (v31 == v14 && v32 == v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v14, v15, 0) & 1) != 0)
  {
    v33 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      goto LABEL_36;
    goto LABEL_25;
  }
  v42 = v29 + 7;
  v43 = 1;
  do
  {
    if (v30 == v43)
    {
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v29);
      v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
LABEL_9:
      if (v12 == v11)
      {
        swift_bridgeObjectRelease(v10);
LABEL_40:
        v48 = objc_msgSend(v3, v4[33]);
        v49 = String._bridgeToObjectiveC()();
        v50 = objc_msgSend(v48, "arrayForKey:", v49);

        v51 = _swiftEmptyArrayStorage;
        if (v50)
        {
          v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, (char *)&type metadata for Any + 8);

          v53 = sub_10001E5F4(v52);
          swift_bridgeObjectRelease(v52);
          if (v53)
            v51 = v53;
        }
        swift_bridgeObjectRetain(v115);
        v54 = sub_10001FE68((uint64_t)v51, a1, v115);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v115);
        v55 = *(_QWORD *)(v54 + 16);
        if (v55)
        {
          v56 = (unint64_t *)(v54 + 40);
          do
          {
            v57 = *(v56 - 1);
            v58 = *v56;
            swift_bridgeObjectRetain(*v56);
            sub_10001FA90(v57, v58, 0);
            swift_bridgeObjectRelease(v58);
            v56 += 2;
            --v55;
          }
          while (v55);
        }
        swift_bridgeObjectRelease(v54);
        v59 = objc_msgSend(v3, v4[33]);
        v60 = String._bridgeToObjectiveC()();
        v61 = objc_msgSend(v59, "arrayForKey:", v60);

        v62 = _swiftEmptyArrayStorage;
        if (v61)
        {
          v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, (char *)&type metadata for Any + 8);

          v64 = sub_10001E5F4(v63);
          swift_bridgeObjectRelease(v63);
          if (v64)
            v62 = v64;
        }
        swift_bridgeObjectRetain(v115);
        v65 = sub_10001FE68((uint64_t)v62, a1, v115);
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v115);
        v66 = *(_QWORD *)(v65 + 16);
        if (v66)
        {
          v67 = (unint64_t *)(v65 + 40);
          do
          {
            v68 = *(v67 - 1);
            v69 = *v67;
            swift_bridgeObjectRetain(*v67);
            sub_10001FA90(v68, v69, 1);
            swift_bridgeObjectRelease(v69);
            v67 += 2;
            --v66;
          }
          while (v66);
        }
        swift_bridgeObjectRelease(v65);
        v70 = objc_msgSend(v3, v4[33]);
        v71 = String._bridgeToObjectiveC()();
        v72 = objc_msgSend(v70, "arrayForKey:", v71);

        if (v72)
        {
          v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, (char *)&type metadata for Any + 8);

          v74 = sub_10001E5F4(v73);
          swift_bridgeObjectRelease(v73);
          if (!v74)
            v74 = _swiftEmptyArrayStorage;
        }
        else
        {
          v74 = _swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRetain(v115);
        v75 = sub_10001FE68((uint64_t)v74, a1, v115);
        swift_bridgeObjectRelease(v74);
        swift_bridgeObjectRelease(v115);
        v76 = *(_QWORD *)(v75 + 16);
        if (!v76)
          return swift_bridgeObjectRelease(v75);
        v77 = 0;
        v117 = v75;
        v118 = v75 + 32;
        while (2)
        {
          v80 = (uint64_t *)(v118 + 16 * v77);
          v81 = *v80;
          v82 = v80[1];
          v83 = qword_10006EE20;
          swift_bridgeObjectRetain(v82);
          if (v83 != -1)
            swift_once(&qword_10006EE20, sub_10001B38C);
          v84 = type metadata accessor for Logger(0);
          sub_1000097B4(v84, (uint64_t)qword_10006F800);
          v85 = swift_bridgeObjectRetain_n(v82, 2);
          v86 = Logger.logObject.getter(v85);
          v87 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v86, v87))
          {
            v88 = swift_slowAlloc(12, -1);
            v89 = swift_slowAlloc(32, -1);
            v119[0] = v89;
            *(_DWORD *)v88 = 136446210;
            swift_bridgeObjectRetain(v82);
            *(_QWORD *)(v88 + 4) = sub_1000572F8(v81, v82, v119);
            swift_bridgeObjectRelease_n(v82, 3);
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "Removing %{public}s", (uint8_t *)v88, 0xCu);
            swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
            v90 = v89;
            v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
            swift_slowDealloc(v90, -1, -1);
            swift_slowDealloc(v88, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v82, 2);
          }
          v91 = objc_msgSend(v3, v4[33]);
          v92 = String._bridgeToObjectiveC()();
          v93 = objc_msgSend(v91, "arrayForKey:", v92);

          if (v93)
          {
            v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v93, (char *)&type metadata for Any + 8);

            v95 = sub_10001E5F4(v94);
            swift_bridgeObjectRelease(v94);
            if (!v95)
              v95 = _swiftEmptyArrayStorage;
            v96 = v95[2];
            if (!v96)
            {
LABEL_59:
              swift_bridgeObjectRelease(v95);
              goto LABEL_60;
            }
          }
          else
          {
            v95 = _swiftEmptyArrayStorage;
            v96 = _swiftEmptyArrayStorage[2];
            if (!v96)
              goto LABEL_59;
          }
          v97 = v95[4];
          v98 = v95[5];
          if (v97 == v81 && v98 == v82
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, v81, v82, 0) & 1) != 0)
          {
            v99 = 0;
            if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) != 0)
            {
LABEL_76:
              v100 = v95[2];
              if (v99 >= v100)
                goto LABEL_92;
              v101 = v100 - 1;
              v102 = v100 - 1 - v99;
              if (v102 < 0)
                goto LABEL_93;
              v103 = &v95[2 * v99];
              v104 = v103[5];
              memmove(v103 + 4, v103 + 6, 16 * v102);
              v95[2] = v101;
              swift_bridgeObjectRelease(v104);
              v105 = objc_msgSend(v3, v4[33]);
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v95);
              v107 = String._bridgeToObjectiveC()();
              objc_msgSend(v105, "setObject:forKey:", isa, v107);

LABEL_60:
              ++v77;
              v78 = objc_msgSend(v3, v4[33]);
              v79 = String._bridgeToObjectiveC()();
              objc_msgSend(v78, "removeObjectForKey:", v79);
              swift_bridgeObjectRelease(v82);

              if (v77 == v76)
                return swift_bridgeObjectRelease(v117);
              continue;
            }
          }
          else
          {
            v108 = v95 + 7;
            v109 = 1;
            do
            {
              if (v96 == v109)
              {
                swift_bridgeObjectRelease(v95);
                v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
                goto LABEL_60;
              }
              v99 = v109;
              v110 = *(v108 - 1);
              v111 = *v108;
              if (v110 == v81 && v111 == v82)
                break;
              v113 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v111, v81, v82, 0);
              v109 = v99 + 1;
              v108 += 2;
            }
            while ((v113 & 1) == 0);
            v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
            if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) != 0)
              goto LABEL_76;
          }
          break;
        }
        v95 = sub_10001EA2C((uint64_t)v95);
        goto LABEL_76;
      }
      goto LABEL_10;
    }
    v33 = v43;
    v44 = *(v42 - 1);
    v45 = *v42;
    if (v44 == v14 && v45 == v15)
      break;
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v14, v15, 0);
    v43 = v33 + 1;
    v42 += 2;
  }
  while ((v47 & 1) == 0);
  v4 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
LABEL_36:
    v29 = sub_10001EA2C((uint64_t)v29);
LABEL_25:
  v34 = v29[2];
  if (v33 >= v34)
  {
    __break(1u);
LABEL_92:
    __break(1u);
  }
  else
  {
    v35 = v34 - 1;
    v36 = v34 - 1 - v33;
    if (v36 >= 0)
    {
      v37 = &v29[2 * v33];
      v38 = v37[5];
      memmove(v37 + 4, v37 + 6, 16 * v36);
      v29[2] = v35;
      swift_bridgeObjectRelease(v38);
      v39 = objc_msgSend(v3, v4[33]);
      v40 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v29);
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v39, "setObject:forKey:", v40, v41);
      swift_bridgeObjectRelease(v15);

      goto LABEL_9;
    }
  }
LABEL_93:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100021460(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Class isa;
  NSString v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v2 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(a1 + 8);
  v43 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v49 = *(_QWORD *)(a1 + 32);
  v50 = v7;
  v10 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD *)(a1 + 56);
  v11 = v39;
  v40 = v9;
  v12 = *(_QWORD *)(a1 + 72);
  v47 = *(_QWORD *)(a1 + 64);
  v48 = v10;
  v13 = *(_QWORD *)(a1 + 88);
  v46 = *(_QWORD *)(a1 + 80);
  v45 = *(unsigned __int16 *)(a1 + 96);
  v44 = *(_QWORD *)(a1 + 104);
  v14 = *(int *)(v3 + 28);
  v15 = &v5[*(int *)(v3 + 32)];
  v41 = *(unsigned __int8 *)(a1 + 112);
  v42 = *(_QWORD *)(a1 + v14);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  v16 = swift_bridgeObjectRetain(v12);
  Date.init()(v16);
  v17 = type metadata accessor for Date(0);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v15, 0, 1, v17);
  v19 = *(_QWORD *)(a1 + v2[10]);
  v20 = v18(&v5[v2[9]], 1, 1, v17);
  Date.init()(v20);
  v21 = v43;
  *(_QWORD *)v5 = v43;
  *((_QWORD *)v5 + 1) = v6;
  *((_QWORD *)v5 + 2) = v50;
  *((_QWORD *)v5 + 3) = v8;
  v22 = v40;
  *((_QWORD *)v5 + 4) = v49;
  *((_QWORD *)v5 + 5) = v22;
  v23 = v39;
  *((_QWORD *)v5 + 6) = v48;
  *((_QWORD *)v5 + 7) = v23;
  *((_QWORD *)v5 + 8) = v47;
  *((_QWORD *)v5 + 9) = v12;
  *((_QWORD *)v5 + 10) = v46;
  *((_QWORD *)v5 + 11) = v13;
  *((_WORD *)v5 + 48) = v45;
  *((_QWORD *)v5 + 13) = v44;
  v5[112] = v41;
  *(_QWORD *)&v5[v2[7]] = v42;
  *(_QWORD *)&v5[v2[10]] = v19;
  v24 = sub_1000118E8();
  v52 = 0xD000000000000010;
  v53 = 0x800000010005B310;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v25._countAndFlagsBits = v21;
  v25._object = v6;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  v27 = v52;
  v26 = v53;
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v28 = type metadata accessor for Logger(0);
  sub_1000097B4(v28, (uint64_t)qword_10006F800);
  v29 = swift_bridgeObjectRetain_n(v26, 2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    v52 = v33;
    *(_DWORD *)v32 = 136446466;
    v51 = sub_1000572F8(0xD00000000000002DLL, 0x800000010005B330, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    *(_WORD *)(v32 + 12) = 2082;
    swift_bridgeObjectRetain(v26);
    v51 = sub_1000572F8(v27, v26, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s [%{public}s]", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v26, 2);
  }
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "setObject:forKey:", isa, v36);

  sub_10001EB90(v27, v26, 3);
  sub_10000F758((uint64_t)v5);
  return v27;
}

unint64_t sub_1000218BC(Swift::String *a1)
{
  unint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  NSString v12;
  uint64_t v14;
  uint64_t v15[2];

  v2 = sub_1000118E8();
  v3 = *a1;
  v15[0] = 0xD000000000000014;
  v15[1] = 0x800000010005B500;
  String.append(_:)(v3);
  if (qword_10006EE20 != -1)
    swift_once(&qword_10006EE20, sub_10001B38C);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)qword_10006F800);
  v5 = swift_bridgeObjectRetain_n(0x800000010005B500, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v15[0] = v9;
    *(_DWORD *)v8 = 136446466;
    v14 = sub_1000572F8(0xD000000000000025, 0x800000010005B520, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15);
    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain(0x800000010005B500);
    v14 = sub_1000572F8(0xD000000000000014, 0x800000010005B500, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15);
    swift_bridgeObjectRelease_n(0x800000010005B500, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s [%{public}s]", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(0x800000010005B500, 2);
  }
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setObject:forKey:", isa, v12);

  sub_10001EB90(0xD000000000000014, 0x800000010005B500, 2);
  return 0xD000000000000014;
}

uint64_t sub_100021B64(uint64_t *a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v3 = __chkstk_darwin(v2);
  v5 = (Swift::String *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *a1;
  v7 = (void *)a1[1];
  v8 = (void *)a1[3];
  v38 = a1[2];
  v39 = v6;
  v28 = v8;
  v29 = v7;
  v9 = a1[4];
  v10 = (void *)a1[5];
  v11 = (void *)a1[7];
  v36 = a1[6];
  v37 = v9;
  v12 = a1[8];
  v13 = (void *)a1[9];
  v14 = (void *)a1[11];
  v34 = a1[10];
  v35 = v12;
  v33 = *((unsigned __int16 *)a1 + 48);
  v15 = (void *)a1[13];
  v16 = *(int *)(v3 + 28);
  v17 = (char *)v5 + *(int *)(v3 + 32);
  v30 = *((unsigned __int8 *)a1 + 112);
  v31 = *(uint64_t *)((char *)a1 + v16);
  v32 = v15;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v18 = swift_bridgeObjectRetain(v13);
  Date.init()(v18);
  v19 = type metadata accessor for Date(0);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v17, 0, 1, v19);
  v21 = *(uint64_t *)((char *)a1 + v2[10]);
  v22 = v20((char *)v5 + v2[9], 1, 1, v19);
  Date.init()(v22);
  v23 = v29;
  v5->_countAndFlagsBits = v39;
  v5->_object = v23;
  v24 = v28;
  v5[1]._countAndFlagsBits = v38;
  v5[1]._object = v24;
  v5[2]._countAndFlagsBits = v37;
  v5[2]._object = v10;
  v5[3]._countAndFlagsBits = v36;
  v5[3]._object = v11;
  v5[4]._countAndFlagsBits = v35;
  v5[4]._object = v13;
  v5[5]._countAndFlagsBits = v34;
  v5[5]._object = v14;
  LOWORD(v5[6]._countAndFlagsBits) = v33;
  v25 = v31;
  v5[6]._object = v32;
  LOBYTE(v5[7]._countAndFlagsBits) = v30;
  *(uint64_t *)((char *)&v5->_countAndFlagsBits + v2[7]) = v25;
  *(uint64_t *)((char *)&v5->_countAndFlagsBits + v2[10]) = v21;
  sub_10001EFEC(v5);
  swift_bridgeObjectRelease(v26);
  return sub_10000F758((uint64_t)v5);
}

uint64_t sub_100021D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C((uint64_t *)&unk_10006FB60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100021D74()
{
  unint64_t result;

  result = qword_10006F9D8;
  if (!qword_10006F9D8)
  {
    result = swift_getWitnessTable(&unk_10005A3F8, &type metadata for Persistence.FetchError);
    atomic_store(result, (unint64_t *)&qword_10006F9D8);
  }
  return result;
}

uint64_t sub_100021DB8(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

unint64_t sub_100021DC0()
{
  unint64_t result;

  result = qword_10006FA08;
  if (!qword_10006FA08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10006FA08);
  }
  return result;
}

unint64_t sub_100021E04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006FA10;
  if (!qword_10006FA10)
  {
    v1 = sub_100021E50(&qword_10006F9F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for Regex<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10006FA10);
  }
  return result;
}

uint64_t sub_100021E50(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100021E98(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t destroy for Persistence.FetchError(uint64_t *a1)
{
  return sub_100021DB8(*a1, a1[1]);
}

uint64_t _s9feedbackd11PersistenceC10FetchErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100021E98(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Persistence.FetchError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100021E98(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100021DB8(v6, v7);
  return a1;
}

__n128 initializeWithTake for Persistence.FetchError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Persistence.FetchError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_100021DB8(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Persistence.FetchError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Persistence.FetchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100022030(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100022038(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Persistence.FetchError()
{
  return &type metadata for Persistence.FetchError;
}

uint64_t sub_100022054(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100005D4C(&qword_10006F090);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_1000220C8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v2 + 64) + 40) = a2;
  v3 = a2;
  return swift_continuation_resume(v2);
}

uint64_t sub_1000220F8(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100005D4C(&qword_10006F090);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100022178()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006FA20);
  sub_1000097B4(v0, (uint64_t)qword_10006FA20);
  v1 = static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000221E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_100072538);
  v1 = sub_1000097B4(v0, (uint64_t)qword_100072538);
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v2 = sub_1000097B4(v0, (uint64_t)qword_10006FA20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100022274(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 32) = a1;
  return swift_task_switch(sub_100022290, 0, 0);
}

uint64_t sub_100022290()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  char *v11;
  __objc2_class_ro **p_info;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char v21;
  uint64_t v22;

  if (qword_10006EE78 != -1)
    swift_once(&qword_10006EE78, sub_100042BE8);
  v1 = unk_1000701D0;
  v2 = (void *)qword_1000701D8;
  swift_bridgeObjectRetain(unk_1000701D0);
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "integerForKey:", v4);

  swift_bridgeObjectRelease(v1);
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v6 = *(void **)(v0 + 24);
  v7 = type metadata accessor for Logger(0);
  sub_1000097B4(v7, (uint64_t)qword_10006FA20);
  v8 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.debug.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(char **)(v0 + 24);
  p_info = _TtC9feedbackd14CFBBiomeReader.info;
  if (v10)
  {
    v13 = swift_slowAlloc(32, -1);
    v14 = swift_slowAlloc(32, -1);
    v22 = v14;
    *(_DWORD *)v13 = 136446722;
    *(_QWORD *)(v0 + 16) = sub_1000572F8(0xD000000000000029, 0x800000010005B8F0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *(_WORD *)(v13 + 12) = 2048;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)&v11[OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);

    *(_WORD *)(v13 + 22) = 2048;
    *(_QWORD *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Notifications posted in this interval: %ld. Max allowed: %ld", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v15 = v13;
    p_info = (__objc2_class_ro **)(_TtC9feedbackd14CFBBiomeReader + 32);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

  }
  if (*(_QWORD *)((char *)&p_info[327]->flags + *(_QWORD *)(v0 + 24)) < (uint64_t)v5)
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  v18 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reached maximum number of notifications for this interval.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }
  v21 = *(_BYTE *)(v0 + 32);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v21 & 1);
}

id sub_100022594()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotificationController()), "init");
  qword_100072550 = (uint64_t)result;
  return result;
}

id sub_1000225C0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  objc_class *v14;
  objc_super v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount] = 0;
  v6 = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter;
  v7 = v0;
  static Strings.fbaBundleIdentifier.getter();
  v9 = v8;
  sub_10000A968(0, (unint64_t *)&qword_10006FC10, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
  v10 = (void *)static OS_dispatch_queue.global(qos:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v13 = objc_msgSend(v11, "initWithBundleIdentifier:queue:", v12, v10);

  *(_QWORD *)&v1[v6] = v13;
  v14 = (objc_class *)type metadata accessor for NotificationController();
  v16.receiver = v7;
  v16.super_class = v14;
  return objc_msgSendSuper2(&v16, "init");
}

id sub_100022744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  id result;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000097B4(v2, (uint64_t)qword_10006FA20);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v11 = v7;
    *(_DWORD *)v6 = 136446210;
    v10 = sub_1000572F8(0xD000000000000018, 0x800000010005B8D0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(void **)(v1 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  objc_msgSend(v8, "removeAllPendingNotificationRequests");
  result = objc_msgSend(v8, "removeAllDeliveredNotifications");
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount) = 0;
  return result;
}

uint64_t sub_1000228F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1[36] = v0;
  v2 = type metadata accessor for Date(0);
  v1[37] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[38] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[39] = swift_task_alloc(v4);
  v1[40] = swift_task_alloc(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006EF20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[41] = swift_task_alloc(v5);
  v1[42] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006F528) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[43] = swift_task_alloc(v6);
  v1[44] = swift_task_alloc(v6);
  v7 = type metadata accessor for FormLaunchConfiguration(0);
  v1[45] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[46] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[47] = swift_task_alloc(v9);
  v1[48] = swift_task_alloc(v9);
  v1[49] = swift_task_alloc(v9);
  return swift_task_switch(sub_100022A0C, 0, 0);
}

uint64_t sub_100022A0C()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0[36] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[50] = v1;
  objc_msgSend(v1, "setDelegate:");
  objc_msgSend(v1, "setWantsNotificationResponsesDelivered");
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  v2 = (_QWORD *)swift_task_alloc(dword_10006FBD4);
  v0[51] = v2;
  *v2 = v0;
  v2[1] = sub_100022AB4;
  return sub_100024738();
}

uint64_t sub_100022AB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100022B10, 0, 0);
}

uint64_t sub_100022B10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  NSString v6;
  NSString v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSString v25;
  Class isa;
  Class v27;
  id v28;
  uint64_t inited;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  Class v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v1[36] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount) = v1[52];
  static Strings.Notification.snoozeActionIdentifier.getter(a1);
  v3 = v2;
  v4._countAndFlagsBits = 0x657A6F6F6E53;
  v4._object = (void *)0xE600000000000000;
  object = FBKSLocalizedString(key:)(v4)._object;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v8 = (void *)objc_opt_self(UNNotificationAction);
  v9 = objc_msgSend(v8, "actionWithIdentifier:title:options:", v6, v7, 0);
  v1[53] = v9;

  static Strings.Notification.declineActionIdentifier.getter(v10);
  v12 = v11;
  v13._countAndFlagsBits = 0x656E696C636544;
  v13._object = (void *)0xE700000000000000;
  v14 = FBKSLocalizedString(key:)(v13)._object;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v17 = objc_msgSend(v8, "actionWithIdentifier:title:options:", v15, v16, 2);
  v1[54] = v17;

  static Strings.Notification.categoryIdentifier.getter(v18);
  v20 = v19;
  v21 = sub_100005D4C(&qword_10006EF30);
  v22 = swift_allocObject(v21, 48, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100059430;
  *(_QWORD *)(v22 + 32) = v9;
  *(_QWORD *)(v22 + 40) = v17;
  v43 = v22;
  specialized Array._endMutation()(v22);
  v23 = v9;
  v24 = v17;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  sub_10000A968(0, &qword_10006FBE0, UNNotificationAction_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v43);
  v27 = Array._bridgeToObjectiveC()().super.isa;
  v28 = objc_msgSend((id)objc_opt_self(UNNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v25, isa, v27, 0);
  v1[55] = v28;

  inited = swift_initStackObject(v21, v1 + 10);
  *(_OWORD *)(inited + 16) = xmmword_10005A450;
  *(_QWORD *)(inited + 32) = v28;
  v44 = inited;
  specialized Array._endMutation()(inited);
  if ((unint64_t)v44 >> 62)
  {
    if (v44 < 0)
      v34 = v44;
    else
      v34 = v44 & 0xFFFFFFFFFFFFFF8;
    v35 = v28;
    swift_bridgeObjectRetain(v44);
    v36 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease(v44);
    if (v36)
      goto LABEL_3;
LABEL_8:
    v33 = &_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v30 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
  v31 = v28;
  if (!v30)
    goto LABEL_8;
LABEL_3:
  sub_10002C1B0(v44);
  v33 = v32;
LABEL_9:
  v37 = v1 + 2;
  v38 = (void *)v1[50];
  swift_bridgeObjectRelease(v44);
  sub_10000A968(0, &qword_10006FBE8, UNNotificationCategory_ptr);
  sub_10002D20C();
  v39 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v33);
  objc_msgSend(v38, "setNotificationCategories:", v39);

  v1[7] = v1 + 34;
  v1[2] = v1;
  v1[3] = sub_100022EDC;
  v40 = swift_continuation_init(v1 + 2, 0);
  v1[20] = _NSConcreteStackBlock;
  v41 = v1 + 20;
  v41[1] = 0x40000000;
  v41[2] = sub_100025040;
  v41[3] = &unk_10006A480;
  v41[4] = v40;
  objc_msgSend(v38, "getDeliveredNotificationsWithCompletionHandler:", v41);
  return swift_continuation_await(v37);
}

uint64_t sub_100022EDC()
{
  return swift_task_switch(sub_100022F28, 0, 0);
}

void sub_100022F28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31[2];

  v1 = v0[34];
  v0[33] = &_swiftEmptySetSingleton;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v26 = v1;
    else
      v26 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease(v1);
    swift_task_switch(sub_1000232E4, qword_100072530, 0);
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_26;
LABEL_3:
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = (uint64_t)(v0 + 15);
    v5 = v0 + 29;
    v28 = v0 + 31;
    v29 = v1 & 0xC000000000000001;
    v30 = v0 + 25;
    v27 = v0;
    while (1)
    {
      v6 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1) : *(id *)(v1 + 8 * v3 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, "request");
      v9 = objc_msgSend(v8, "content");

      v10 = objc_msgSend(v9, "userInfo");
      v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v10, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v0[29] = 7955819;
      v0[30] = 0xE300000000000000;
      AnyHashable.init<A>(_:)(v5, &type metadata for String, &protocol witness table for String);
      if (!*(_QWORD *)(v11 + 16))
        goto LABEL_13;
      v12 = sub_1000162BC(v4);
      if ((v13 & 1) != 0)
      {
        sub_100009C84(*(_QWORD *)(v11 + 56) + 32 * v12, (uint64_t)v30);
      }
      else
      {
LABEL_13:
        *v30 = 0u;
        v30[1] = 0u;
      }
      swift_bridgeObjectRelease(v11);
      sub_1000126EC(v4);
      if (!v0[28])
        break;
      if ((swift_dynamicCast(v28, v30, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
        goto LABEL_18;
      sub_1000294D0(v31, v0[31], v0[32]);

      swift_bridgeObjectRelease(v31[1]);
LABEL_6:
      if (v2 == ++v3)
        goto LABEL_26;
    }
    sub_100009730((uint64_t)v30, (uint64_t *)&unk_10006FB60);
LABEL_18:
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v14 = type metadata accessor for Logger(0);
    sub_1000097B4(v14, (uint64_t)qword_10006FA20);
    v15 = v7;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v19 = v5;
      v20 = v4;
      v21 = v1;
      v22 = v2;
      v23 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      *(_QWORD *)(v18 + 4) = v15;
      *v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Found invalid payload for notification %@", (uint8_t *)v18, 0xCu);
      v24 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v23, 1, v24);
      v25 = v23;
      v2 = v22;
      v1 = v21;
      v4 = v20;
      v5 = v19;
      v0 = v27;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_1000232E4()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "arrayForKey:", v2);

  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

    v6 = sub_10001E5F4(v5);
    swift_bridgeObjectRelease(v5);
    if (v6)
      v4 = v6;
  }
  *(_QWORD *)(v0 + 448) = v4;
  return swift_task_switch(sub_1000233D4, 0, 0);
}

uint64_t sub_1000233D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  unint64_t *v63;

  v1 = *(_QWORD **)(v0 + 448);
  v2 = v1[2];
  *(_QWORD *)(v0 + 456) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 464) = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)(v0 + 472) = 0;
    v3 = v1[4];
    *(_QWORD *)(v0 + 480) = v3;
    v4 = v1[5];
    *(_QWORD *)(v0 + 488) = v4;
    v5 = dword_10006F85C;
    swift_bridgeObjectRetain(v4);
    v6 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 496) = v6;
    *v6 = v0;
    v6[1] = sub_100023964;
    return sub_10001DC18(*(_QWORD *)(v0 + 352), v3, v4);
  }
  *(_QWORD *)(v0 + 504) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v1);
  v8 = swift_bridgeObjectRetain(&_swiftEmptyDictionarySingleton);
  v9 = sub_100025094(v8);
  v10 = v9;
  v11 = *(_QWORD *)(v0 + 264);
  if (*(_QWORD *)(v11 + 16) <= *(_QWORD *)(v9 + 16) >> 3)
  {
    v63 = (unint64_t *)v9;
    v14 = swift_bridgeObjectRetain(v11);
    sub_10002967C(v14);
    swift_bridgeObjectRelease(v11);
    v13 = v63;
  }
  else
  {
    v12 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 264));
    v13 = sub_100029810(v12, v10);
    swift_bridgeObjectRelease(v11);
  }
  *(_QWORD *)(v0 + 512) = v13;
  v15 = *(_QWORD *)(v0 + 368);
  v16 = *((_BYTE *)v13 + 32);
  *(_BYTE *)(v0 + 552) = v16;
  v17 = -1;
  v18 = -1 << v16;
  if (-v18 < 64)
    v17 = ~(-1 << -(char)v18);
  v19 = v17 & v13[7];
  if (v19)
  {
    v20 = 0;
    v21 = __clz(__rbit64(v19));
    v22 = (v19 - 1) & v19;
    goto LABEL_10;
  }
  v32 = 63 - v18;
  if (v32 <= 0x7F)
    goto LABEL_43;
  v33 = v13[8];
  if (!v33)
  {
    if (v32 >= 0xC0)
    {
      v33 = v13[9];
      if (v33)
      {
        v20 = 2;
        goto LABEL_16;
      }
      if (v32 >= 0x100)
      {
        v33 = v13[10];
        if (v33)
        {
          v20 = 3;
          goto LABEL_16;
        }
        if (v32 >= 0x140)
        {
          v33 = v13[11];
          if (v33)
          {
            v20 = 4;
            goto LABEL_16;
          }
          v48 = 0;
          v49 = v32 >> 6;
          if (v49 <= 5)
            v49 = 5;
          v50 = v49 - 5;
          while (v50 != v48)
          {
            v33 = v13[v48++ + 12];
            if (v33)
            {
              v20 = v48 + 4;
              goto LABEL_16;
            }
          }
        }
      }
    }
LABEL_43:
    v51 = *(_QWORD *)(v0 + 504);
    v53 = *(void **)(v0 + 432);
    v52 = *(void **)(v0 + 440);

    swift_release(v13);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v40 = v51;
    goto LABEL_44;
  }
  v20 = 1;
LABEL_16:
  v22 = (v33 - 1) & v33;
  v21 = __clz(__rbit64(v33)) + (v20 << 6);
LABEL_10:
  *(_QWORD *)(v0 + 528) = v22;
  *(_QWORD *)(v0 + 520) = v20;
  v23 = *(_QWORD *)(v0 + 504);
  v24 = (uint64_t *)(v13[6] + 16 * v21);
  v26 = *v24;
  v25 = v24[1];
  *(_QWORD *)(v0 + 536) = v25;
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain_n(v25, 2);
    v27 = sub_1000161EC(v26, v25);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(v0 + 360);
      v30 = *(_QWORD *)(v0 + 368);
      v31 = *(_QWORD *)(v0 + 344);
      sub_10000F714(*(_QWORD *)(*(_QWORD *)(v0 + 504) + 56) + *(_QWORD *)(v30 + 72) * v27, v31);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v29);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
    }
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v15 + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
    swift_bridgeObjectRetain(v25);
  }
  v34 = *(_QWORD *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 48))(v34, 1, *(_QWORD *)(v0 + 360)) == 1)
  {
    v36 = *(_QWORD *)(v0 + 504);
    v35 = *(_QWORD *)(v0 + 512);
    v38 = *(void **)(v0 + 432);
    v37 = *(void **)(v0 + 440);
    v39 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease(v25);

    swift_release(v35);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    sub_100009730(v34, &qword_10006F528);
    v40 = v36;
LABEL_44:
    swift_bridgeObjectRelease(v40);
    v54 = *(_QWORD *)(v0 + 384);
    v55 = *(_QWORD *)(v0 + 376);
    v57 = *(_QWORD *)(v0 + 344);
    v56 = *(_QWORD *)(v0 + 352);
    v59 = *(_QWORD *)(v0 + 328);
    v58 = *(_QWORD *)(v0 + 336);
    v61 = *(_QWORD *)(v0 + 312);
    v60 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_10000F6D0(v34, *(_QWORD *)(v0 + 376));
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v41 = type metadata accessor for Logger(0);
  sub_1000097B4(v41, (uint64_t)qword_10006FA20);
  v42 = swift_bridgeObjectRetain_n(v25, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    v63 = (unint64_t *)v46;
    *(_DWORD *)v45 = 136315138;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v45 + 4) = sub_1000572F8(v26, v25, (uint64_t *)&v63);
    swift_bridgeObjectRelease_n(v25, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }

  v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000705B0 + dword_1000705B0);
  v47 = (_QWORD *)swift_task_alloc(unk_1000705B4);
  *(_QWORD *)(v0 + 544) = v47;
  *v47 = v0;
  v47[1] = sub_10002425C;
  return v62(*(_QWORD *)(v0 + 376), v26, v25);
}

uint64_t sub_100023964()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 496));
  return swift_task_switch(sub_1000239B8, 0, 0);
}

uint64_t sub_1000239B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  unint64_t *v107;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 48))(v2, 1, v1) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
    sub_100009730(v2, &qword_10006F528);
LABEL_3:
    v3 = *(_QWORD **)(v0 + 464);
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  sub_10000F6D0(v2, v4);
  sub_10000C82C(v4 + *(int *)(v1 + 32), v5);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(v5, 1, v6);
  v10 = *(_QWORD *)(v0 + 336);
  if (v9 != 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 488));
    sub_100009730(v10, &qword_10006EF20);
    v3 = *(_QWORD **)(v0 + 464);
LABEL_22:
    sub_10000F758(*(_QWORD *)(v0 + 392));
LABEL_23:
    v48 = *(_QWORD *)(v0 + 472) + 1;
    if (v48 != *(_QWORD *)(v0 + 456))
    {
      *(_QWORD *)(v0 + 464) = v3;
      *(_QWORD *)(v0 + 472) = v48;
      v55 = *(_QWORD *)(v0 + 448) + 16 * v48;
      v56 = *(_QWORD *)(v55 + 32);
      *(_QWORD *)(v0 + 480) = v56;
      v57 = *(_QWORD *)(v55 + 40);
      *(_QWORD *)(v0 + 488) = v57;
      v58 = dword_10006F85C;
      swift_bridgeObjectRetain(v57);
      v59 = (_QWORD *)swift_task_alloc(v58);
      *(_QWORD *)(v0 + 496) = v59;
      *v59 = v0;
      v59[1] = sub_100023964;
      return sub_10001DC18(*(_QWORD *)(v0 + 352), v56, v57);
    }
    *(_QWORD *)(v0 + 504) = v3;
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 448));
    v49 = swift_bridgeObjectRetain(v3);
    v50 = sub_100025094(v49);
    v51 = v50;
    v52 = *(_QWORD *)(v0 + 264);
    if (*(_QWORD *)(v52 + 16) <= *(_QWORD *)(v50 + 16) >> 3)
    {
      v107 = (unint64_t *)v50;
      v60 = swift_bridgeObjectRetain(v52);
      sub_10002967C(v60);
      swift_bridgeObjectRelease(v52);
      v54 = v107;
    }
    else
    {
      v53 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 264));
      v54 = sub_100029810(v53, v51);
      swift_bridgeObjectRelease(v52);
    }
    *(_QWORD *)(v0 + 512) = v54;
    v61 = *(_QWORD *)(v0 + 368);
    v62 = *((_BYTE *)v54 + 32);
    *(_BYTE *)(v0 + 552) = v62;
    v63 = -1;
    v64 = -1 << v62;
    if (-v64 < 64)
      v63 = ~(-1 << -(char)v64);
    v65 = v63 & v54[7];
    if (v65)
    {
      v66 = 0;
      v67 = __clz(__rbit64(v65));
      v68 = (v65 - 1) & v65;
      goto LABEL_32;
    }
    v76 = 63 - v64;
    if (v76 > 0x7F)
    {
      v77 = v54[8];
      if (v77)
      {
        v66 = 1;
LABEL_38:
        v68 = (v77 - 1) & v77;
        v67 = __clz(__rbit64(v77)) + (v66 << 6);
LABEL_32:
        *(_QWORD *)(v0 + 528) = v68;
        *(_QWORD *)(v0 + 520) = v66;
        v69 = *(_QWORD *)(v0 + 504);
        v70 = (uint64_t *)(v54[6] + 16 * v67);
        v14 = *v70;
        v27 = v70[1];
        *(_QWORD *)(v0 + 536) = v27;
        if (*(_QWORD *)(v69 + 16))
        {
          swift_bridgeObjectRetain_n(v27, 2);
          v71 = sub_1000161EC(v14, v27);
          if ((v72 & 1) != 0)
          {
            v73 = *(_QWORD *)(v0 + 360);
            v74 = *(_QWORD *)(v0 + 368);
            v75 = *(_QWORD *)(v0 + 344);
            sub_10000F714(*(_QWORD *)(*(_QWORD *)(v0 + 504) + 56) + *(_QWORD *)(v74 + 72) * v71, v75);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v75, 0, 1, v73);
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
          }
          swift_bridgeObjectRelease(v27);
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v61 + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
          swift_bridgeObjectRetain(v27);
        }
        v78 = *(_QWORD *)(v0 + 344);
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 48))(v78, 1, *(_QWORD *)(v0 + 360)) == 1)
        {
          v80 = *(_QWORD *)(v0 + 504);
          v79 = *(_QWORD *)(v0 + 512);
          v82 = *(void **)(v0 + 432);
          v81 = *(void **)(v0 + 440);
          v83 = *(void **)(v0 + 424);
          swift_bridgeObjectRelease(v27);

          swift_release(v79);
          swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
          sub_100009730(v78, &qword_10006F528);
          v84 = v80;
LABEL_65:
          swift_bridgeObjectRelease(v84);
          v98 = *(_QWORD *)(v0 + 384);
          v99 = *(_QWORD *)(v0 + 376);
          v101 = *(_QWORD *)(v0 + 344);
          v100 = *(_QWORD *)(v0 + 352);
          v103 = *(_QWORD *)(v0 + 328);
          v102 = *(_QWORD *)(v0 + 336);
          v105 = *(_QWORD *)(v0 + 312);
          v104 = *(_QWORD *)(v0 + 320);
          swift_task_dealloc(*(_QWORD *)(v0 + 392));
          swift_task_dealloc(v98);
          swift_task_dealloc(v99);
          swift_task_dealloc(v100);
          swift_task_dealloc(v101);
          swift_task_dealloc(v102);
          swift_task_dealloc(v103);
          swift_task_dealloc(v104);
          swift_task_dealloc(v105);
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
        sub_10000F6D0(v78, *(_QWORD *)(v0 + 376));
        if (qword_10006EE30 == -1)
          goto LABEL_45;
        goto LABEL_67;
      }
      if (v76 >= 0xC0)
      {
        v77 = v54[9];
        if (v77)
        {
          v66 = 2;
          goto LABEL_38;
        }
        if (v76 >= 0x100)
        {
          v77 = v54[10];
          if (v77)
          {
            v66 = 3;
            goto LABEL_38;
          }
          if (v76 >= 0x140)
          {
            v77 = v54[11];
            if (v77)
            {
              v66 = 4;
              goto LABEL_38;
            }
            v92 = 0;
            v93 = v76 >> 6;
            if (v93 <= 5)
              v93 = 5;
            v94 = v93 - 5;
            while (v94 != v92)
            {
              v77 = v54[v92++ + 12];
              if (v77)
              {
                v66 = v92 + 4;
                goto LABEL_38;
              }
            }
          }
        }
      }
    }
    v95 = *(_QWORD *)(v0 + 504);
    v97 = *(void **)(v0 + 432);
    v96 = *(void **)(v0 + 440);

    swift_release(v54);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    v84 = v95;
    goto LABEL_65;
  }
  v11 = *(_QWORD *)(v0 + 392);
  v12 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 296);
  sub_100009730(*(_QWORD *)(v0 + 336), &qword_10006EF20);
  sub_10000C82C(v11 + *(int *)(v12 + 36), v13);
  if (v8(v13, 1, v14) == 1)
  {
    sub_100009730(*(_QWORD *)(v0 + 328), &qword_10006EF20);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 320);
    v16 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 304);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v15, *(_QWORD *)(v0 + 328), v16);
    static Date.now.getter(v18);
    v19 = sub_100009BE4(&qword_10006F420, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v20 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v14, v16, v19);
    v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v21(v14, v16);
    v21(v15, v16);
    if ((v20 & 1) == 0)
    {
      v37 = *(_QWORD *)(v0 + 488);
      sub_10000F758(*(_QWORD *)(v0 + 392));
      swift_bridgeObjectRelease(v37);
      goto LABEL_3;
    }
  }
  v22 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 488);
  v24 = *(_QWORD *)(v0 + 464);
  sub_10000F714(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 384));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  *(_QWORD *)(v0 + 280) = v24;
  v27 = sub_1000161EC(v22, v23);
  v28 = *(_QWORD *)(v24 + 16);
  v29 = (v26 & 1) == 0;
  v30 = v28 + v29;
  if (!__OFADD__(v28, v29))
  {
    v31 = v26;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 464) + 24) >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_10001894C();
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 480);
      v32 = *(_QWORD *)(v0 + 488);
      sub_100017758(v30, isUniquelyReferenced_nonNull_native);
      v34 = sub_1000161EC(v33, v32);
      if ((v31 & 1) != (v35 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v27 = v34;
    }
    v3 = *(_QWORD **)(v0 + 280);
    if ((v31 & 1) != 0)
    {
      sub_10002D264(*(_QWORD *)(v0 + 384), v3[7] + *(_QWORD *)(*(_QWORD *)(v0 + 368) + 72) * v27);
    }
    else
    {
      v39 = *(_QWORD *)(v0 + 480);
      v38 = *(_QWORD *)(v0 + 488);
      v40 = *(_QWORD *)(v0 + 384);
      v41 = *(_QWORD *)(v0 + 368);
      v3[(v27 >> 6) + 8] |= 1 << v27;
      v42 = (_QWORD *)(v3[6] + 16 * v27);
      *v42 = v39;
      v42[1] = v38;
      result = sub_10000F6D0(v40, v3[7] + *(_QWORD *)(v41 + 72) * v27);
      v43 = v3[2];
      v44 = __OFADD__(v43, 1);
      v45 = v43 + 1;
      if (v44)
      {
        __break(1u);
        return result;
      }
      v46 = *(_QWORD *)(v0 + 488);
      v3[2] = v45;
      swift_bridgeObjectRetain(v46);
    }
    v47 = *(_QWORD *)(v0 + 488);
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRelease(v47);
    goto LABEL_22;
  }
  __break(1u);
LABEL_67:
  swift_once(&qword_10006EE30, sub_100022178);
LABEL_45:
  v85 = type metadata accessor for Logger(0);
  sub_1000097B4(v85, (uint64_t)qword_10006FA20);
  v86 = swift_bridgeObjectRetain_n(v27, 2);
  v87 = Logger.logObject.getter(v86);
  v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v87, v88))
  {
    v89 = swift_slowAlloc(12, -1);
    v90 = swift_slowAlloc(32, -1);
    v107 = (unint64_t *)v90;
    *(_DWORD *)v89 = 136315138;
    swift_bridgeObjectRetain(v27);
    *(_QWORD *)(v89 + 4) = sub_1000572F8(v14, v27, (uint64_t *)&v107);
    swift_bridgeObjectRelease_n(v27, 3);
    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v89, 0xCu);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v89, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v27, 2);
  }

  v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000705B0 + dword_1000705B0);
  v91 = (_QWORD *)swift_task_alloc(unk_1000705B4);
  *(_QWORD *)(v0 + 544) = v91;
  *v91 = v0;
  v91[1] = sub_10002425C;
  return v106(*(_QWORD *)(v0 + 376), v14, v27);
}

uint64_t sub_10002425C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000242BC, 0, 0);
}

uint64_t sub_1000242BC()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;

  result = sub_10000F758(*(_QWORD *)(v0 + 376));
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 520);
  if (!v2)
  {
    v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
    }
    else
    {
      v17 = (unint64_t)((1 << *(_BYTE *)(v0 + 552)) + 63) >> 6;
      v6 = *(_QWORD *)(v0 + 512);
      if (v16 >= v17)
        goto LABEL_31;
      v18 = v6 + 56;
      v19 = *(_QWORD *)(v6 + 56 + 8 * v16);
      ++v3;
      if (v19)
      {
LABEL_9:
        v4 = (v19 - 1) & v19;
        v5 = __clz(__rbit64(v19)) + (v3 << 6);
        goto LABEL_3;
      }
      v3 = v16 + 1;
      if (v16 + 1 >= v17)
        goto LABEL_31;
      v19 = *(_QWORD *)(v18 + 8 * v3);
      if (v19)
        goto LABEL_9;
      v3 = v16 + 2;
      if (v16 + 2 >= v17)
        goto LABEL_31;
      v19 = *(_QWORD *)(v18 + 8 * v3);
      if (v19)
        goto LABEL_9;
      v34 = v16 + 3;
      if (v34 >= v17)
      {
LABEL_31:
        v35 = *(_QWORD *)(v0 + 504);
        v37 = *(void **)(v0 + 432);
        v36 = *(void **)(v0 + 440);

        swift_release(v6);
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
        v26 = v35;
        goto LABEL_32;
      }
      v19 = *(_QWORD *)(v18 + 8 * v34);
      if (v19)
      {
        v3 = v34;
        goto LABEL_9;
      }
      while (1)
      {
        v3 = v34 + 1;
        if (__OFADD__(v34, 1))
          break;
        if (v3 >= v17)
          goto LABEL_31;
        v19 = *(_QWORD *)(v18 + 8 * v3);
        ++v34;
        if (v19)
          goto LABEL_9;
      }
    }
    __break(1u);
    return result;
  }
  v4 = (v2 - 1) & v2;
  v5 = __clz(__rbit64(v2)) | (v3 << 6);
  v6 = *(_QWORD *)(v0 + 512);
LABEL_3:
  *(_QWORD *)(v0 + 528) = v4;
  *(_QWORD *)(v0 + 520) = v3;
  v7 = *(_QWORD *)(v0 + 504);
  v8 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v5);
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(v0 + 536) = v9;
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain_n(v9, 2);
    v11 = sub_1000161EC(v10, v9);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v0 + 360);
      v14 = *(_QWORD *)(v0 + 368);
      v15 = *(_QWORD *)(v0 + 344);
      sub_10000F714(*(_QWORD *)(*(_QWORD *)(v0 + 504) + 56) + *(_QWORD *)(v14 + 72) * v11, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
    }
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 56))(*(_QWORD *)(v0 + 344), 1, 1, *(_QWORD *)(v0 + 360));
    swift_bridgeObjectRetain(v9);
  }
  v20 = *(_QWORD *)(v0 + 344);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 48))(v20, 1, *(_QWORD *)(v0 + 360)) == 1)
  {
    v22 = *(_QWORD *)(v0 + 504);
    v21 = *(_QWORD *)(v0 + 512);
    v24 = *(void **)(v0 + 432);
    v23 = *(void **)(v0 + 440);
    v25 = *(void **)(v0 + 424);
    swift_bridgeObjectRelease(v9);

    swift_release(v21);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
    sub_100009730(v20, &qword_10006F528);
    v26 = v22;
LABEL_32:
    swift_bridgeObjectRelease(v26);
    v38 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 376);
    v41 = *(_QWORD *)(v0 + 344);
    v40 = *(_QWORD *)(v0 + 352);
    v43 = *(_QWORD *)(v0 + 328);
    v42 = *(_QWORD *)(v0 + 336);
    v45 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 392));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_10000F6D0(v20, *(_QWORD *)(v0 + 376));
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v27 = type metadata accessor for Logger(0);
  sub_1000097B4(v27, (uint64_t)qword_10006FA20);
  v28 = swift_bridgeObjectRetain_n(v9, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v47 = v32;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v31 + 4) = sub_1000572F8(v10, v9, &v47);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found dismissed notification %s. Will put it in snoozed queue", (uint8_t *)v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }

  v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000705B0 + dword_1000705B0);
  v33 = (_QWORD *)swift_task_alloc(unk_1000705B4);
  *(_QWORD *)(v0 + 544) = v33;
  *v33 = v0;
  v33[1] = sub_10002425C;
  return v46(*(_QWORD *)(v0 + 376), v10, v9);
}

uint64_t sub_100024738()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1[2] = v0;
  v2 = sub_100005D4C(&qword_10006F528);
  v1[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FormLaunchConfiguration(0);
  v1[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[5] = v4;
  v1[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar.Component(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v1[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v1[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[11] = v8;
  v1[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006EF20);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v1[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[15] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v12);
  v1[17] = swift_task_alloc(v12);
  return swift_task_switch(sub_100024868, v0, 0);
}

uint64_t sub_100024868()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);

  if (qword_10006EE70 != -1)
    swift_once(&qword_10006EE70, sub_100042ACC);
  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  v4 = *(_QWORD *)algn_1000701B8;
  v5 = (void *)qword_1000701C0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1000701B8);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  v8 = (uint64_t)objc_msgSend(v6, "integerForKey:", v7);

  swift_bridgeObjectRelease(v4);
  v10 = static Date.now.getter(v9);
  static Calendar.current.getter(v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for Calendar.Component.hour(_:), v3);
  v11 = -v8;
  if (__OFSUB__(0, v8))
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = v0[15];
  v14 = v0[13];
  v13 = v0[14];
  v16 = v0[11];
  v15 = v0[12];
  v18 = v0[9];
  v17 = v0[10];
  v19 = v0[7];
  v20 = v0[8];
  Calendar.date(byAdding:value:to:wrappingComponents:)(v18, v11, v0[16], 0);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13);
  if ((_DWORD)result != 1)
  {
    v22 = v0[16];
    v23 = v0[14];
    v24 = v0[15];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v24 + 32))(v0[17], v0[13], v23);
    v25 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v0[18] = v25;
    v25(v22, v23);
    if (qword_10006EE28 == -1)
      return swift_task_switch(sub_100024A40, qword_100072530, 0);
LABEL_8:
    swift_once(&qword_10006EE28, sub_10001B5C0);
    return swift_task_switch(sub_100024A40, qword_100072530, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100024A40()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "arrayForKey:", v2);

  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);

    v6 = sub_10001E5F4(v5);
    swift_bridgeObjectRelease(v5);
    if (v6)
      v4 = v6;
  }
  *(_QWORD *)(v0 + 152) = v4;
  return swift_task_switch(sub_100024B30, *(_QWORD *)(v0 + 16), 0);
}

uint64_t sub_100024B30()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    *(_QWORD *)(v0 + 160) = 0;
    *(_QWORD *)(v0 + 168) = v2;
    if (v2 > *(_QWORD *)(result + 16))
    {
      __break(1u);
    }
    else
    {
      v3 = result + 16 * v2;
      v4 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v0 + 176) = v4;
      v5 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v0 + 184) = v5;
      v6 = dword_10006F85C;
      swift_bridgeObjectRetain(v5);
      v7 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 192) = v7;
      *v7 = v0;
      v7[1] = sub_100024C78;
      return sub_10001DC18(*(_QWORD *)(v0 + 24), v4, v5);
    }
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 136);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v10 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 24);
    swift_bridgeObjectRelease(result);
    v9(v8, v11);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  return result;
}

uint64_t sub_100024C78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_100024CD0, v1, 0);
}

uint64_t sub_100024CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 40) + 48))(v2, 1, v1) != 1)
  {
    v13 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
    sub_10000F6D0(v2, v9);
    v15 = v9 + *(int *)(v1 + 24);
    v16 = sub_100009BE4(&qword_10006F420, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v17 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v13, v14, v16);
    sub_10000F758(v9);
    v6 = *(NSObject **)(v0 + 160);
    if ((v17 & 1) != 0)
      goto LABEL_11;
    v18 = __OFADD__(v6, 1);
    v6 = ((char *)v6 + 1);
    if (!v18)
      goto LABEL_11;
    __break(1u);
    goto LABEL_9;
  }
  sub_100009730(v2, &qword_10006F528);
  if (qword_10006EE30 != -1)
    goto LABEL_16;
  while (1)
  {
    v3 = *(_QWORD *)(v0 + 184);
    v4 = type metadata accessor for Logger(0);
    sub_1000097B4(v4, (uint64_t)qword_10006FA20);
    v5 = swift_bridgeObjectRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 184);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 176);
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v37 = v12;
      *(_DWORD *)v11 = 136446466;
      *(_QWORD *)(v11 + 4) = sub_1000572F8(0xD00000000000002BLL, 0x800000010005B8A0, &v37);
      *(_WORD *)(v11 + 12) = 2080;
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)(v11 + 14) = sub_1000572F8(v10, v9, &v37);
      swift_bridgeObjectRelease_n(v9, 3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s no object for key: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
LABEL_9:
      swift_bridgeObjectRelease_n(v9, 2);
    }

    v6 = *(NSObject **)(v0 + 160);
LABEL_11:
    v19 = *(_QWORD *)(v0 + 168);
    v20 = v19 - 1;
    if (v19 == 1)
      break;
    *(_QWORD *)(v0 + 160) = v6;
    *(_QWORD *)(v0 + 168) = v20;
    v21 = *(_QWORD *)(v0 + 152);
    if (v20 <= *(_QWORD *)(v21 + 16))
    {
      v22 = (uint64_t *)(v21 + 16 * v19);
      v23 = *v22;
      *(_QWORD *)(v0 + 176) = *v22;
      v24 = v22[1];
      *(_QWORD *)(v0 + 184) = v24;
      v25 = dword_10006F85C;
      swift_bridgeObjectRetain(v24);
      v26 = (_QWORD *)swift_task_alloc(v25);
      *(_QWORD *)(v0 + 192) = v26;
      *v26 = v0;
      v26[1] = sub_100024C78;
      return sub_10001DC18(*(_QWORD *)(v0 + 24), v23, v24);
    }
    __break(1u);
LABEL_16:
    swift_once(&qword_10006EE30, sub_100022178);
  }
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v30 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 136);
  v32 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 112);
  v33 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 48);
  v36 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  v28(v29, v31);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**))(v0 + 8))(v6);
}

uint64_t sub_100025040(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_10000A968(0, &qword_10006FB88, UNNotification_ptr);
  **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  return swift_continuation_resume(v3);
}

uint64_t sub_100025094(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  result = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1000294D0(v17, v12, v13);
    result = swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100025228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[39] = a7;
  v8[40] = v7;
  v8[37] = a3;
  v8[38] = a6;
  v8[35] = a1;
  v8[36] = a2;
  v9 = sub_100005D4C(&qword_10006EF20);
  v8[41] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000252B8, 0, 0);
}

uint64_t sub_1000252B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_10006FA20);
  *(_QWORD *)(v0 + 336) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 272) = sub_1000572F8(0xD000000000000034, 0x800000010005B860, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = *(_BYTE *)(*(_QWORD *)(v0 + 312) + 80);
  *(_BYTE *)(v0 + 424) = v7;
  v8 = swift_task_alloc(dword_10006FA74);
  *(_QWORD *)(v0 + 344) = v8;
  *(_QWORD *)v8 = v0;
  *(_QWORD *)(v8 + 8) = sub_1000254A8;
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v0 + 320);
  *(_BYTE *)(v8 + 32) = v7;
  return swift_task_switch(sub_100022290, 0, 0);
}

uint64_t sub_1000254A8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_BYTE *)(*(_QWORD *)v1 + 425) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100025530, 0, 0);
}

uint64_t sub_100025530()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 425) & 1) != 0)
  {
    *(_QWORD *)(v0 + 352) = *(_QWORD *)(*(_QWORD *)(v0 + 320)
                                      + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
    v1 = (_QWORD *)swift_task_alloc(dword_10006FA9C);
    *(_QWORD *)(v0 + 360) = v1;
    *v1 = v0;
    v1[1] = sub_100025640;
    v1[24] = *(_QWORD *)(v0 + 320);
    return swift_task_switch(sub_100027F48, 0, 0);
  }
  else
  {
    v3 = sub_10000C8B8();
    v4 = swift_allocError(&type metadata for NotificationController.Error, v3, 0, 0);
    swift_willThrow(v4);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100025640()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 360);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_100025700, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 328));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100025700()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  unint64_t v22;
  id v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  id v32;
  id v33;
  NSString v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = FormItem.isSurvey.getter();
  sub_10000F910(v1 & 1, &v41);
  v3 = v41;
  v2 = v42;
  v4 = v44;
  v39 = v43;
  v6 = v45;
  v5 = v46;
  v8 = v47;
  v7 = v48;
  swift_bridgeObjectRetain_n(v42, 2);
  swift_bridgeObjectRetain_n(v4, 2);
  swift_bridgeObjectRetain_n(v5, 2);
  v40 = v7;
  v9 = swift_bridgeObjectRetain_n(v7, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 144) = v3;
    v41 = v38;
    *(_DWORD *)v12 = 136446210;
    *(_QWORD *)(v0 + 152) = v2;
    *(_QWORD *)(v0 + 160) = v39;
    *(_QWORD *)(v0 + 168) = v4;
    *(_QWORD *)(v0 + 176) = v6;
    *(_QWORD *)(v0 + 184) = v5;
    *(_QWORD *)(v0 + 192) = v8;
    *(_QWORD *)(v0 + 200) = v40;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v40);
    v13 = sub_100005D4C(&qword_10006FB98);
    v14 = String.init<A>(describing:)(v0 + 144, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 264) = sub_1000572F8(v14, v15, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272);
    swift_bridgeObjectRelease_n(v40, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Using strings %{public}s", v12, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v40, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v2, 2);
  }
  v17 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 296);
  v20 = sub_100005D4C(&qword_10006FB90);
  inited = swift_initStackObject(v20, v0 + 80);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  strcpy((char *)(inited + 32), "formIdentifier");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v18;
  swift_bridgeObjectRetain(v18);
  v22 = sub_1000145C8(inited);
  v23 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  *(_QWORD *)(v0 + 368) = v23;
  swift_bridgeObjectRetain(v2);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  objc_msgSend(v23, "setTitle:", v24);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v40);

  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v23, "setBody:", v25);

  v26 = sub_100010CC0(v22);
  swift_bridgeObjectRelease(v22);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  objc_msgSend(v23, "setUserInfo:", isa);

  static Strings.Notification.categoryIdentifier.getter(objc_msgSend(v23, "setInterruptionLevel:", 1));
  v29 = v28;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v23, "setCategoryIdentifier:", v30);

  objc_msgSend(v23, "setShouldBackgroundDefaultAction:", 1);
  objc_msgSend(v23, "setShouldAuthenticateDefaultAction:", 1);
  v31 = sub_10002B2D8(v17);
  *(_QWORD *)(v0 + 376) = v31;
  swift_bridgeObjectRetain(v18);
  v32 = v31;
  v33 = v23;
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v0 + 384) = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v34, v33, v32);

  v35 = swift_task_alloc(dword_10006FA74);
  *(_QWORD *)(v0 + 392) = v35;
  *(_QWORD *)v35 = v0;
  *(_QWORD *)(v35 + 8) = sub_100025C38;
  v36 = *(_BYTE *)(v0 + 424);
  *(_QWORD *)(v35 + 24) = *(_QWORD *)(v0 + 320);
  *(_BYTE *)(v35 + 32) = v36;
  return swift_task_switch(sub_100022290, 0, 0);
}

uint64_t sub_100025C38(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_BYTE *)(*(_QWORD *)v1 + 426) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100025CC0, 0, 0);
}

uint64_t sub_100025CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(v0 + 426) & 1) != 0)
  {
    v1 = v0 + 16;
    v2 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 320);
    v4 = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount;
    *(_QWORD *)(v0 + 400) = OBJC_IVAR____TtC9feedbackd22NotificationController_notificationPostedInThisIntervalCount;
    v5 = *(void **)(v0 + 352);
    *(_QWORD *)(v0 + 408) = *(_QWORD *)(v3 + v4);
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100025E28;
    v6 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 208) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 208);
    v7[1] = 0x40000000;
    v7[2] = sub_100022054;
    v7[3] = &unk_10006A468;
    v7[4] = v6;
    objc_msgSend(v5, "addNotificationRequest:withCompletionHandler:", v2, v7);
    return swift_continuation_await(v1);
  }
  else
  {
    v10 = *(void **)(v0 + 376);
    v9 = *(void **)(v0 + 384);
    v11 = *(void **)(v0 + 368);
    v12 = sub_10000C8B8();
    v13 = swift_allocError(&type metadata for NotificationController.Error, v12, 0, 0);
    swift_willThrow(v13);

    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100025E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 416) = v1;
  if (v1)
    v2 = sub_1000261D8;
  else
    v2 = sub_100025ECC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100025ECC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  void *v3;
  uint8_t *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = Logger.logObject.getter(*(id *)(v0 + 384));
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(void **)(v0 + 384);
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v4 = 138543362;
    v6 = objc_msgSend(v3, "trigger");
    if (v6)
    {
      v7 = v0 + 248;
      *(_QWORD *)(v0 + 248) = v6;
      v8 = v0 + 256;
    }
    else
    {
      *(_QWORD *)(v0 + 256) = 0;
      v8 = v0 + 264;
      v7 = v0 + 256;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7, v8);
    v9 = *(void **)(v0 + 384);
    *v5 = v6;

    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Posted notification with trigger [%{public}@]", v4, 0xCu);
    v10 = sub_100005D4C(&qword_10006F418);
    swift_arrayDestroy(v5, 1, v10);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {

    v1 = *(NSObject **)(v0 + 384);
  }
  v12 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 320);

  if (*(_QWORD *)(v13 + v12) != v11)
  {
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Race condition detected in notification posts count", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  v18 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v19 + v18);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  v23 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v19 + v18) = v22;
  if (v23)
  {
    v24 = objc_msgSend(*(id *)(v0 + 376), "nextTriggerDate");
    if (v24)
    {
      v25 = v24;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v26 = 0;
    }
    else
    {
      v26 = 1;
    }
    v31 = *(void **)(v0 + 376);
    v30 = *(void **)(v0 + 384);
    v32 = *(_QWORD *)(v0 + 328);
    v33 = *(_QWORD *)(v0 + 280);

    v34 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v32, v26, 1, v34);
    sub_10002D1C4(v32, v33);
  }
  else
  {
    v27 = *(void **)(v0 + 384);
    v28 = *(_QWORD *)(v0 + 280);

    v29 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000261D8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 376);
  v2 = *(void **)(v0 + 384);
  v3 = *(void **)(v0 + 368);
  swift_willThrow();

  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100026264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch(sub_100026280, 0, 0);
}

uint64_t sub_100026280()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = *(void **)(v0[18] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[19] = v2;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_100026324;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100025040;
  v4[3] = &unk_10006A450;
  v4[4] = v3;
  objc_msgSend(v2, "getDeliveredNotificationsWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100026324()
{
  return swift_task_switch(sub_100026370, 0, 0);
}

uint64_t sub_100026370()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  Class isa;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(void **)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(v2);
  v4 = (uint64_t)sub_10002C00C(v3, v1, v2);
  swift_bridgeObjectRelease(v2);
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v4);
LABEL_17:
    v19 = *(void **)(v0 + 152);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    objc_msgSend(v19, "removeDeliveredNotificationsWithIdentifiers:", isa);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v4 < 0)
    v18 = v4;
  else
    v18 = v4 & 0xFFFFFFFFFFFFFF8;
  v5 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (!v5)
    goto LABEL_16;
LABEL_3:
  result = sub_10001E8A8(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v21 = v0;
    v7 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      else
        v8 = *(id *)(v4 + 8 * v7 + 32);
      v9 = v8;
      v10 = objc_msgSend(v8, "request", v21);
      v11 = objc_msgSend(v10, "identifier");

      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        sub_10001E8A8(v15 > 1, v16 + 1, 1);
      ++v7;
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = (char *)&_swiftEmptyArrayStorage[2 * v16];
      *((_QWORD *)v17 + 4) = v12;
      *((_QWORD *)v17 + 5) = v14;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease(v4);
    v0 = v21;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100026564(id *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  _BYTE v47[32];
  __int128 v48;
  __int128 v49;

  v5 = *a1;
  v6 = objc_msgSend(*a1, "request");
  v7 = objc_msgSend(v6, "content");

  v8 = objc_msgSend(v7, "userInfo");
  v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  strcpy((char *)v45, "formIdentifier");
  HIBYTE(v45[1]) = -18;
  AnyHashable.init<A>(_:)(v45, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_1000162BC((uint64_t)&v46), (v11 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease(v9);
  sub_1000126EC((uint64_t)&v46);
  if (!*((_QWORD *)&v49 + 1))
  {
    sub_100009730((uint64_t)&v48, (uint64_t *)&unk_10006FB60);
LABEL_11:
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v20 = type metadata accessor for Logger(0);
    sub_1000097B4(v20, (uint64_t)qword_10006FA20);
    v21 = v5;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      v46 = (uint64_t)v21;
      v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      *v25 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found invalid payload for notification %@", v24, 0xCu);
      v27 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v25, 1, v27);
      v28 = v25;
LABEL_27:
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      return 0;
    }
LABEL_28:

    return 0;
  }
  if ((swift_dynamicCast(v45, &v48, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_11;
  v13 = v45[0];
  v12 = v45[1];
  v14 = objc_msgSend(v5, "request");
  v15 = objc_msgSend(v14, "content");

  v16 = objc_msgSend(v15, "userInfo");
  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v16, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v45[0] = 7955819;
  v45[1] = 0xE300000000000000;
  AnyHashable.init<A>(_:)(v45, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_1000162BC((uint64_t)&v46), (v19 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  sub_1000126EC((uint64_t)&v46);
  if (!*((_QWORD *)&v49 + 1))
  {
    swift_bridgeObjectRelease(v12);
    sub_100009730((uint64_t)&v48, (uint64_t *)&unk_10006FB60);
    goto LABEL_23;
  }
  if ((swift_dynamicCast(v45, &v48, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v12);
LABEL_23:
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v31 = type metadata accessor for Logger(0);
    sub_1000097B4(v31, (uint64_t)qword_10006FA20);
    v21 = v5;
    v22 = Logger.logObject.getter(v21);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v32))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      v46 = (uint64_t)v21;
      v34 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      *v33 = v21;

      _os_log_impl((void *)&_mh_execute_header, v22, v32, "Found invalid payload for notification %@", v24, 0xCu);
      v35 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v33, 1, v35);
      v28 = v33;
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  v30 = v45[0];
  v29 = v45[1];
  if (v13 != a2 || v12 != a3)
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, a2, a3, 0);
    swift_bridgeObjectRelease(v12);
    if ((v38 & 1) != 0)
      goto LABEL_32;
    swift_bridgeObjectRelease(v29);
    return 0;
  }
  swift_bridgeObjectRelease(a3);
LABEL_32:
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v39 = type metadata accessor for Logger(0);
  sub_1000097B4(v39, (uint64_t)qword_10006FA20);
  v40 = swift_bridgeObjectRetain(v29);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v46 = v44;
    *(_DWORD *)v43 = 136446210;
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)&v48 = sub_1000572F8(v30, v29, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 8);
    swift_bridgeObjectRelease_n(v29, 3);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Will remove posted notification for completed form %{public}s", v43, 0xCu);
    v36 = 1;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v29, 2);
    return 1;
  }
  return v36;
}

uint64_t sub_100026C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for FormLaunchConfiguration(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v4);
  v3[37] = swift_task_alloc(v4);
  return swift_task_switch(sub_100026CC4, 0, 0);
}

uint64_t sub_100026CC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v1 = v0[37];
  v2 = v0[33];
  v3 = type metadata accessor for Logger(0);
  v0[38] = sub_1000097B4(v3, (uint64_t)qword_10006FA20);
  v4 = sub_10000F714(v2, v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = (uint64_t *)v0[37];
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136446210;
    v12 = *v8;
    v11 = v8[1];
    swift_bridgeObjectRetain(v11);
    v0[30] = sub_1000572F8(v12, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31);
    swift_bridgeObjectRelease(v11);
    sub_10000F758((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Will try re-posting notification for [%{public}s]", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_10000F758(v0[37]);
  }

  v13 = (_QWORD *)swift_task_alloc(dword_10006FA9C);
  v0[39] = v13;
  *v13 = v0;
  v13[1] = sub_100026EB8;
  v13[24] = v0[35];
  return swift_task_switch(sub_100027F48, 0, 0);
}

uint64_t sub_100026EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100027374;
  else
    v3 = sub_100026F1C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100026F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = objc_msgSend(*(id *)(v0 + 272), "content");
  *(_QWORD *)(v0 + 328) = v4;
  v5 = *(_QWORD *)(v3 + 8);
  swift_bridgeObjectRetain(v5);
  v6 = v4;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v7, v6, 0);
  *(_QWORD *)(v0 + 336) = v8;

  v9 = *(void **)(v2 + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_100027050;
  v10 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v11 = (_QWORD *)(v0 + 80);
  v11[1] = 0x40000000;
  v11[2] = sub_100022054;
  v11[3] = &unk_10006A438;
  v11[4] = v10;
  objc_msgSend(v9, "addNotificationRequest:withCompletionHandler:", v8, v11);
  return swift_continuation_await(v1);
}

uint64_t sub_100027050()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 344) = v1;
  if (v1)
    v2 = sub_100027948;
  else
    v2 = sub_1000270B0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000270B0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;

  v1 = sub_10000F714(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 288));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void **)(v0 + 336);
    v14 = *(void **)(v0 + 328);
    v4 = *(uint64_t **)(v0 + 288);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = *v4;
    v8 = v4[1];
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 256) = sub_1000572F8(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264);
    swift_bridgeObjectRelease(v8);
    sub_10000F758((uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Re-posted notification for form [%{public}s]", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    v9 = *(void **)(v0 + 336);
    v10 = *(_QWORD *)(v0 + 288);

    sub_10000F758(v10);
  }
  v11 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027260()
{
  uint64_t v0;

  sub_100031498(*(void **)(v0 + 376), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360));
  return swift_task_switch(sub_1000272A0, 0, 0);
}

uint64_t sub_1000272A0()
{
  uint64_t v0;
  uint64_t v1;

  swift_errorRelease(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000272E8()
{
  uint64_t v0;

  sub_100031498(*(void **)(v0 + 408), *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 392));
  return swift_task_switch(sub_100027328, 0, 0);
}

uint64_t sub_100027328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 352);

  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 248) = v1;
  *(_QWORD *)(v0 + 352) = v1;
  swift_errorRetain(v1);
  v2 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v0 + 424, v0 + 248, v2, &type metadata for FeedbackdError, 0))
  {
    v3 = swift_errorRelease(v1);
    v4 = *(unsigned __int8 *)(v0 + 424);
    v5 = Logger.logObject.getter(v3);
    if (v4 == 5)
    {
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = swift_slowAlloc(22, -1);
        v8 = swift_slowAlloc(64, -1);
        v41 = v8;
        *(_DWORD *)v7 = 136446466;
        *(_QWORD *)(v0 + 224) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232);
        *(_WORD *)(v7 + 12) = 2080;
        sub_10003A2CC(5);
        v10 = v9;
        *(_QWORD *)(v0 + 232) = sub_1000572F8(v11, v9, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240);
        swift_bridgeObjectRelease(v10);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed with: %s", (uint8_t *)v7, 0x16u);
        swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v8, -1, -1);
        v12 = v7;
LABEL_9:
        swift_slowDealloc(v12, -1, -1);
      }
    }
    else
    {
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v24))
      {
        v25 = swift_slowAlloc(22, -1);
        v26 = swift_slowAlloc(64, -1);
        v41 = v26;
        *(_DWORD *)v25 = 136446466;
        *(_QWORD *)(v0 + 208) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
        *(_WORD *)(v25 + 12) = 2080;
        sub_10003A2CC(v4);
        v28 = v27;
        *(_QWORD *)(v0 + 216) = sub_1000572F8(v29, v27, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
        swift_bridgeObjectRelease(v28);
        _os_log_impl((void *)&_mh_execute_header, v5, v24, "%{public}s failed with: %s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        v12 = v25;
        goto LABEL_9;
      }
    }

    v30 = sub_10000C7E8();
    v31 = swift_allocError(&type metadata for FeedbackdError, v30, 0, 0);
    *v32 = v4;
    *(_QWORD *)(v0 + 360) = _convertErrorToNSError(_:)(v31);
    swift_errorRelease(v31);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v33 = *(_QWORD **)(v0 + 264);
    v34 = qword_100072558;
    *(_QWORD *)(v0 + 368) = qword_100072558;
    *(_QWORD *)(v0 + 376) = *v33;
    *(_QWORD *)(v0 + 384) = v33[1];
    v35 = sub_100027260;
    return swift_task_switch(v35, v34, 0);
  }
  v13 = (_QWORD *)(v0 + 120);
  v14 = v0 + 176;
  swift_errorRelease(*(_QWORD *)(v0 + 248));
  swift_errorRetain(v1);
  v15 = swift_errorRetain(v1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v41 = v19;
    *(_DWORD *)v18 = 136446466;
    *(_QWORD *)(v0 + 184) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, &v41);
    v14 = v0 + 176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
    *(_WORD *)(v18 + 12) = 2080;
    *(_QWORD *)(v0 + 192) = v1;
    swift_errorRetain(v1);
    v20 = String.init<A>(describing:)(v0 + 192, v2);
    v22 = v21;
    *(_QWORD *)(v0 + 200) = sub_1000572F8(v20, v21, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    v23 = v22;
    v13 = (_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(v23);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s failed with: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_getErrorValue(v1, v14, v0 + 152);
  v37 = *(_QWORD *)(v0 + 152);
  v36 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 144) = v36;
  v38 = sub_100011E60(v13);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v38, v37, v36);
  *(_QWORD *)(v0 + 392) = static FBKSError.nsError(anyError:)(v13);
  sub_100009C64(v13);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v39 = *(_QWORD **)(v0 + 264);
  v34 = qword_100072558;
  *(_QWORD *)(v0 + 400) = qword_100072558;
  *(_QWORD *)(v0 + 408) = *v39;
  *(_QWORD *)(v0 + 416) = v39[1];
  v35 = sub_1000272E8;
  return swift_task_switch(v35, v34, 0);
}

uint64_t sub_100027948(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v44[2];

  v2 = *(void **)(v1 + 336);
  v3 = *(void **)(v1 + 328);
  swift_willThrow(a1);

  v4 = *(_QWORD *)(v1 + 344);
  *(_QWORD *)(v1 + 248) = v4;
  *(_QWORD *)(v1 + 352) = v4;
  swift_errorRetain(v4);
  v5 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v1 + 424, v1 + 248, v5, &type metadata for FeedbackdError, 0))
  {
    v6 = swift_errorRelease(v4);
    v7 = *(unsigned __int8 *)(v1 + 424);
    v8 = Logger.logObject.getter(v6);
    if (v7 == 5)
    {
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(22, -1);
        v11 = swift_slowAlloc(64, -1);
        v44[0] = v11;
        *(_DWORD *)v10 = 136446466;
        *(_QWORD *)(v1 + 224) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232);
        *(_WORD *)(v10 + 12) = 2080;
        sub_10003A2CC(5);
        v13 = v12;
        *(_QWORD *)(v1 + 232) = sub_1000572F8(v14, v12, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 232, v1 + 240);
        swift_bridgeObjectRelease(v13);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s failed with: %s", (uint8_t *)v10, 0x16u);
        swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        v15 = v10;
LABEL_9:
        swift_slowDealloc(v15, -1, -1);
      }
    }
    else
    {
      v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v27))
      {
        v28 = swift_slowAlloc(22, -1);
        v29 = swift_slowAlloc(64, -1);
        v44[0] = v29;
        *(_DWORD *)v28 = 136446466;
        *(_QWORD *)(v1 + 208) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216);
        *(_WORD *)(v28 + 12) = 2080;
        sub_10003A2CC(v7);
        v31 = v30;
        *(_QWORD *)(v1 + 216) = sub_1000572F8(v32, v30, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 216, v1 + 224);
        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v8, v27, "%{public}s failed with: %s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        v15 = v28;
        goto LABEL_9;
      }
    }

    v33 = sub_10000C7E8();
    v34 = swift_allocError(&type metadata for FeedbackdError, v33, 0, 0);
    *v35 = v7;
    *(_QWORD *)(v1 + 360) = _convertErrorToNSError(_:)(v34);
    swift_errorRelease(v34);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v36 = *(_QWORD **)(v1 + 264);
    v37 = qword_100072558;
    *(_QWORD *)(v1 + 368) = qword_100072558;
    *(_QWORD *)(v1 + 376) = *v36;
    *(_QWORD *)(v1 + 384) = v36[1];
    v38 = sub_100027260;
    return swift_task_switch(v38, v37, 0);
  }
  v16 = (_QWORD *)(v1 + 120);
  v17 = v1 + 176;
  swift_errorRelease(*(_QWORD *)(v1 + 248));
  swift_errorRetain(v4);
  v18 = swift_errorRetain(v4);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v44[0] = v22;
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v1 + 184) = sub_1000572F8(0xD000000000000047, 0x800000010005B7F0, v44);
    v17 = v1 + 176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192);
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v1 + 192) = v4;
    swift_errorRetain(v4);
    v23 = String.init<A>(describing:)(v1 + 192, v5);
    v25 = v24;
    *(_QWORD *)(v1 + 200) = sub_1000572F8(v23, v24, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 200, v1 + 208);
    v26 = v25;
    v16 = (_QWORD *)(v1 + 120);
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s failed with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  swift_getErrorValue(v4, v17, v1 + 152);
  v40 = *(_QWORD *)(v1 + 152);
  v39 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 144) = v39;
  v41 = sub_100011E60(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v41, v40, v39);
  *(_QWORD *)(v1 + 392) = static FBKSError.nsError(anyError:)(v16);
  sub_100009C64(v16);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v42 = *(_QWORD **)(v1 + 264);
  v37 = qword_100072558;
  *(_QWORD *)(v1 + 400) = qword_100072558;
  *(_QWORD *)(v1 + 408) = *v42;
  *(_QWORD *)(v1 + 416) = v42[1];
  v38 = sub_1000272E8;
  return swift_task_switch(v38, v37, 0);
}

uint64_t sub_100027F30()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 192) = v0;
  return swift_task_switch(sub_100027F48, 0, 0);
}

uint64_t sub_100027F48()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = *(void **)(v0[24] + OBJC_IVAR____TtC9feedbackd22NotificationController_notificationCenter);
  v0[25] = v2;
  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_100027FEC;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[18] = _NSConcreteStackBlock;
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_1000220C8;
  v4[3] = &unk_10006A408;
  v4[4] = v3;
  objc_msgSend(v2, "getNotificationSettingsWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100027FEC()
{
  return swift_task_switch(sub_100028038, 0, 0);
}

uint64_t sub_100028038()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 10;
  v2 = (void *)v0[25];
  v0[26] = v0[23];
  v0[15] = v0 + 23;
  v0[10] = v0;
  v0[11] = sub_1000280D8;
  v3 = swift_continuation_init(v0 + 10, 1);
  v0[18] = _NSConcreteStackBlock;
  v4 = v0 + 18;
  v4[1] = 0x40000000;
  v4[2] = sub_1000220F8;
  v4[3] = &unk_10006A420;
  v4[4] = v3;
  objc_msgSend(v2, "requestAuthorizationWithOptions:completionHandler:", 7, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000280D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 216) = v1;
  if (v1)
    v2 = sub_10000C430;
  else
    v2 = sub_100028138;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100028138()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  void *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(void);
  NSObject *v24;
  uint8_t *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(unsigned __int8 *)(v0 + 184);
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v2 = *(void **)(v0 + 208);
  v3 = type metadata accessor for Logger(0);
  sub_1000097B4(v3, (uint64_t)qword_10006FA20);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 208);
  v8 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  if (v6)
  {
    v9 = swift_slowAlloc(28, -1);
    v27 = (_QWORD *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v9 = 136446722;
    *(_QWORD *)(v0 + 144) = objc_msgSend(v7, "authorizationStatus");
    type metadata accessor for UNAuthorizationStatus(0);
    v11 = String.init<A>(describing:)(v0 + 144, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 144) = sub_1000572F8(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    swift_bridgeObjectRelease(v13);

    *(_WORD *)(v9 + 12) = 1026;
    *(_DWORD *)(v0 + 144) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 148);
    *(_WORD *)(v9 + 18) = 2112;
    *(_QWORD *)(v0 + 144) = v7;
    v14 = v7;
    v8 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    *v27 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Previous status [%{public}s], authorized? %{BOOL,public}d\nSettings: %@", (uint8_t *)v9, 0x1Cu);
    v15 = sub_100005D4C(&qword_10006F418);
    swift_arrayDestroy(v27, 1, v15);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {

  }
  v16 = objc_msgSend(*(id *)(v0 + 208), v8[25]);
  switch((unint64_t)v16)
  {
    case 0uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Not Determined";
      goto LABEL_18;
    case 1uLL:
      v20 = *(void **)(v0 + 208);
      v21 = sub_10000C7E8();
      swift_allocError(&type metadata for FeedbackdError, v21, 0, 0);
      *v22 = 5;
      swift_willThrow();

      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
    case 2uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Authorized";
      goto LABEL_18;
    case 3uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Provisional";
      goto LABEL_18;
    case 4uLL:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v17, v18))
        goto LABEL_19;
      v19 = "Notification status is Ephemeral";
      goto LABEL_18;
    default:
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = "Notification status is Unknown Default";
LABEL_18:
        v24 = v17;
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v18, v19, v25, 2u);
        swift_slowDealloc(v25, -1, -1);
        v17 = *(NSObject **)(v0 + 208);
      }
      else
      {
LABEL_19:
        v24 = *(NSObject **)(v0 + 208);
      }

      v23 = *(uint64_t (**)(void))(v0 + 8);
      return v23();
  }
}

id sub_100028558()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NotificationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NotificationController()
{
  return objc_opt_self(_TtC9feedbackd22NotificationController);
}

uint64_t sub_1000285B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 88) = v11;
  *(_OWORD *)(v8 + 72) = v10;
  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 32) = a4;
  return swift_task_switch(sub_1000285EC, 0, 0);
}

uint64_t sub_1000285EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  _BOOL4 v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59[2];

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v1 = (uint64_t *)(v0 + 32);
  _StringGuts.grow(_:)(23);
  v4 = static Strings.Daemon.bundleIdentifier.getter();
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);
  v59[0] = v4;
  v59[1] = v6;
  v7._object = (void *)0x800000010005B7D0;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8 = String.utf8CString.getter(v4);
  swift_bridgeObjectRelease(v6);
  v9 = os_transaction_create(v8 + 32);
  swift_release(v8);
  swift_unknownObjectRelease(v9);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(UNNotificationDefaultActionIdentifier);
  if (v10 == v2 && v11 == v3)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
    goto LABEL_10;
  }
  v13 = v11;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, *v1, *(_QWORD *)(v0 + 40), 0);
  swift_bridgeObjectRelease(v13);
  if ((v14 & 1) != 0)
  {
LABEL_10:
    v20 = objc_msgSend(*(id *)(v0 + 72), "notification");
    v21 = objc_msgSend(v20, "request");
    *(_QWORD *)(v0 + 96) = v21;

    v56 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100070598 + dword_100070598);
    v22 = (_QWORD *)swift_task_alloc(unk_10007059C);
    *(_QWORD *)(v0 + 104) = v22;
    *v22 = v0;
    v22[1] = sub_100028BBC;
    return v56(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), (uint64_t)v21);
  }
  v16 = *(_QWORD *)(v0 + 32);
  v15 = *(_QWORD *)(v0 + 40);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(UNNotificationDismissActionIdentifier);
  v19 = v18;
  if (v17 == v16 && v18 == v15)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
LABEL_12:
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_1000097B4(v26, (uint64_t)qword_10006FA20);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v28, v29))
      goto LABEL_17;
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "dismissed notification", v30, 2u);
    v31 = (uint64_t)v30;
    goto LABEL_16;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *v1, *(_QWORD *)(v0 + 40), 0);
  v25 = swift_bridgeObjectRelease(v19);
  if ((v24 & 1) != 0)
    goto LABEL_12;
  v33 = *(_QWORD *)(v0 + 32);
  v32 = *(_QWORD *)(v0 + 40);
  v34 = static Strings.Notification.declineActionIdentifier.getter(v25);
  v36 = v35;
  if (v34 == v33 && v35 == v32)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
LABEL_22:
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v39 = *(_QWORD **)(v0 + 48);
    v40 = qword_100072558;
    *(_QWORD *)(v0 + 112) = qword_100072558;
    *(_QWORD *)(v0 + 120) = *v39;
    *(_QWORD *)(v0 + 128) = v39[1];
    return swift_task_switch(sub_100028C08, v40, 0);
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, *v1, *(_QWORD *)(v0 + 40), 0);
  v38 = swift_bridgeObjectRelease(v36);
  if ((v37 & 1) != 0)
    goto LABEL_22;
  v42 = *(_QWORD *)(v0 + 32);
  v41 = *(_QWORD *)(v0 + 40);
  v43 = static Strings.Notification.snoozeActionIdentifier.getter(v38);
  v45 = v44;
  if (v43 == v42 && v44 == v41)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  }
  else
  {
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *v1, *(_QWORD *)(v0 + 40), 0);
    swift_bridgeObjectRelease(v45);
    if ((v46 & 1) == 0)
    {
      if (qword_10006EE30 != -1)
        swift_once(&qword_10006EE30, sub_100022178);
      v48 = *(_QWORD *)(v0 + 40);
      v49 = type metadata accessor for Logger(0);
      sub_1000097B4(v49, (uint64_t)qword_10006FA20);
      v50 = swift_bridgeObjectRetain_n(v48, 2);
      v28 = Logger.logObject.getter(v50);
      v51 = static os_log_type_t.error.getter();
      v52 = os_log_type_enabled(v28, v51);
      v53 = *(_QWORD *)(v0 + 40);
      if (!v52)
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
        goto LABEL_17;
      }
      v55 = *v1;
      v54 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(64, -1);
      v59[0] = v58;
      *(_DWORD *)v54 = 136315394;
      *(_QWORD *)(v0 + 16) = sub_1000572F8(0xD000000000000025, 0x800000010005B7A0, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      *(_WORD *)(v54 + 12) = 2080;
      swift_bridgeObjectRetain(v53);
      *(_QWORD *)(v0 + 24) = sub_1000572F8(v55, v53, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
      swift_bridgeObjectRelease_n(v53, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v51, "%s action: %s not handled", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      v31 = v54;
LABEL_16:
      swift_slowDealloc(v31, -1, -1);
LABEL_17:

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000705B0 + dword_1000705B0);
  v47 = (_QWORD *)swift_task_alloc(unk_1000705B4);
  *(_QWORD *)(v0 + 136) = v47;
  *v47 = v0;
  v47[1] = sub_100028CD8;
  return v57(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100028BBC()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 96);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100028C08()
{
  uint64_t v0;

  sub_100032344(*(void **)(v0 + 120), *(_QWORD *)(v0 + 128));
  return swift_task_switch(sub_100028C48, 0, 0);
}

uint64_t sub_100028C48()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_100028CA8, qword_100072530, 0);
}

uint64_t sub_100028CA8()
{
  uint64_t v0;

  sub_10001FFF8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028CD8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100028E58(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t (*v14)(id);

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = unk_10006FB4C;
  v14 = (uint64_t (*)(id))((char *)&dword_10006FB48 + dword_10006FB48);
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v12 = (_QWORD *)swift_task_alloc(v8);
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_100028EF4;
  return v14(v10);
}

uint64_t sub_100028EF4()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  void *v2;
  void *v3;
  void *v4;
  uint64_t v6;

  v1 = *(void (***)(_QWORD))(*v0 + 40);
  v3 = *(void **)(*v0 + 24);
  v2 = *(void **)(*v0 + 32);
  v4 = *(void **)(*v0 + 16);
  v6 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100028F6C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100028FA8()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_10006FB0C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_10002D38C;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10006FB08 + dword_10006FB08))(v2, v3, v5, v4);
}

uint64_t sub_100029020(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_10002D38C;
  return v6();
}

uint64_t sub_100029078()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10006FB1C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002D38C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10006FB18 + dword_10006FB18))(v2, v3, v4);
}

uint64_t sub_1000290F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_10002D38C;
  return v7();
}

uint64_t sub_100029148()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100029174(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10006FB2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002D38C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10006FB28 + dword_10006FB28))(a1, v4, v5, v6);
}

uint64_t sub_1000291F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100009730(a1, &qword_10006FB00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10006A3C8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10006FB40, v16);
}

uint64_t sub_100029344(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000293A8;
  return v6(a1);
}

uint64_t sub_1000293A8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000293F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100029418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10006FB3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100029488;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10006FB38 + dword_10006FB38))(a1, v4);
}

uint64_t sub_100029488()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000294D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10002AC70(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10002967C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        return swift_release(v2);
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          return swift_release(v2);
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            return swift_release(v2);
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_100029C78(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    result = swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
    return swift_release(v2);
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t *sub_100029810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_100011694(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_10002A0E0((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_100011694(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_10002A0E0((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_100011694(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100029C78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10002A650();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_10002AAAC(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

Swift::Int sub_100029E04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005D4C(&qword_10006FC00);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t *sub_10002A0E0(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  unint64_t *v40;
  _QWORD v41[9];
  uint64_t v42;

  v7 = *(_QWORD *)(a3 + 16);
  v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v42 = a3 + 56;
  while (2)
  {
    v39 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_45;
          }
          v14 = (unint64_t)(a5[2] + 64) >> 6;
          v15 = a5[3];
          if (v13 >= v14)
            goto LABEL_43;
          v16 = a5[1];
          v17 = *(_QWORD *)(v16 + 8 * v13);
          if (!v17)
          {
            v15 = v9 + 1;
            if (v9 + 2 >= v14)
              goto LABEL_43;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              v13 = v9 + 2;
            }
            else
            {
              v15 = v9 + 2;
              if (v9 + 3 >= v14)
                goto LABEL_43;
              v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                v13 = v9 + 3;
              }
              else
              {
                v13 = v9 + 4;
                v15 = v9 + 3;
                if (v9 + 4 >= v14)
                  goto LABEL_43;
                v17 = *(_QWORD *)(v16 + 8 * v13);
                if (!v17)
                {
                  v15 = v14 - 1;
                  v18 = v9 + 5;
                  while (v14 != v18)
                  {
                    v17 = *(_QWORD *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      v13 = v18 - 1;
                      goto LABEL_21;
                    }
                  }
LABEL_43:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain(a3);
                  return (unint64_t *)sub_10002A3BC(v40, a2, v39, a3);
                }
              }
            }
          }
LABEL_21:
          v11 = (v17 - 1) & v17;
          v12 = __clz(__rbit64(v17)) + (v13 << 6);
          v9 = v13;
        }
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v41);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v41, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v42 + 8 * (v24 >> 6))) != 0)
          break;
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      v27 = *(_QWORD *)(a3 + 48);
      v28 = (_QWORD *)(v27 + 16 * v24);
      v29 = v28[1];
      v30 = *v28 == v21 && v29 == v20;
      if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) == 0)
      {
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v42 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_29;
          }
        }
        goto LABEL_3;
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_29:
      v31 = v40[v25];
      v40[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v39 - 1;
    if (__OFSUB__(v39, 1))
    {
LABEL_45:
      __break(1u);
      return result;
    }
    if (v39 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

Swift::Int sub_10002A3BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100005D4C(&qword_10006FC00);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_10002A650()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100005D4C(&qword_10006FC00);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_10002A800(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100005D4C(&qword_10006FC00);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_10002AAAC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10002AC70(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100029E04(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10002A650();
      goto LABEL_22;
    }
    sub_10002A800(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_10002AE08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100005D4C(&qword_10006FC18);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100009BE4((unint64_t *)&unk_10006FC20, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain, (uint64_t)&protocol conformance descriptor for FBKSInteraction.FeatureDomain);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100009BE4(&qword_10006F0B0, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSInteraction.FeatureDomain, (uint64_t)&protocol conformance descriptor for FBKSInteraction.FeatureDomain);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void *sub_10002B070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100005D4C(&qword_10006FBB0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100009BE4(&qword_10006FBB8, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100009BE4((unint64_t *)&unk_10006FBC0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

id sub_10002B2D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  NSString v47;
  id v48;
  char *v49;
  char *v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v73;
  uint64_t (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  char *v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint8_t *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint8_t *v110;
  Class isa;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  void (*v122)(uint64_t);
  void (*v123)(char *, uint64_t);
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE v138[24];
  uint64_t v139[4];

  v2 = type metadata accessor for Calendar.Component(0);
  v133 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v126 = (char *)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D4C(&qword_10006EF20);
  v5 = __chkstk_darwin(v4);
  v127 = (char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v112 - v7;
  v136 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v136 - 8);
  v10 = __chkstk_darwin(v136);
  v125 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v128 = (char *)&v112 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v112 - v14;
  v134 = type metadata accessor for DateComponents(0);
  v132 = *(_QWORD *)(v134 - 8);
  v16 = __chkstk_darwin(v134);
  v124 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v135 = (char *)&v112 - v18;
  v19 = type metadata accessor for Calendar(0);
  v130 = *(_QWORD *)(v19 - 8);
  v131 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_BYTE *)(a1 + 80);
  if (qword_10006EEA0 != -1)
    swift_once(&qword_10006EEA0, sub_100043174);
  v23 = *(_QWORD *)algn_100070248;
  v24 = qword_100070250;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100070248);
  v25 = (id)v24;
  v26 = String._bridgeToObjectiveC()();
  LOBYTE(v24) = objc_msgSend(v25, "BOOLForKey:", v26);

  swift_bridgeObjectRelease(v23);
  if ((v24 & 1) != 0 || (v22 & 1) != 0)
  {
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_1000097B4(v62, (uint64_t)qword_10006FA20);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Not using triggers", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    return 0;
  }
  static Calendar.current.getter();
  v27 = sub_100005D4C(&qword_10006FBA0);
  v28 = v133;
  v29 = *(_QWORD *)(v133 + 72);
  v30 = *(unsigned __int8 *)(v133 + 80);
  v31 = (v30 + 32) & ~v30;
  v120 = 3 * v29;
  v116 = v27;
  v115 = v30 | 7;
  v32 = swift_allocObject(v27, v31 + 3 * v29, v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_10005A460;
  v117 = v31;
  v33 = v32 + v31;
  v34 = *(void (**)(uint64_t))(v28 + 104);
  v114 = enum case for Calendar.Component.year(_:);
  v34(v33);
  v118 = v29;
  v113 = enum case for Calendar.Component.month(_:);
  v34(v33 + v29);
  v119 = 2 * v29;
  v121 = enum case for Calendar.Component.day(_:);
  v122 = v34;
  v34(v33 + 2 * v29);
  v35 = sub_10002B070(v32);
  swift_setDeallocating(v32);
  swift_arrayDestroy(v33, 3, v2);
  v36 = swift_deallocClassInstance(v32, 32, 7);
  Date.init()(v36);
  v37 = v21;
  v38 = v135;
  v129 = v37;
  Calendar.dateComponents(_:from:)(v35, v15);
  swift_bridgeObjectRelease(v35);
  v123 = (void (*)(char *, uint64_t))v9[1];
  v123(v15, v136);
  DateComponents.second.setter(0, 0);
  if (qword_10006EE90 != -1)
    swift_once(&qword_10006EE90, sub_100042F3C);
  v39 = *(_QWORD *)algn_100070218;
  v40 = (void *)qword_100070220;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100070218);
  v41 = v40;
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "integerForKey:", v42);

  swift_bridgeObjectRelease(v39);
  DateComponents.minute.setter(v43, 0);
  if (qword_10006EE88 != -1)
    swift_once(&qword_10006EE88, sub_100042E20);
  v44 = unk_100070200;
  v45 = (void *)qword_100070208;
  swift_bridgeObjectRetain(unk_100070200);
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v46, "integerForKey:", v47);

  swift_bridgeObjectRelease(v44);
  DateComponents.hour.setter(v48, 0);
  v49 = v129;
  if ((DateComponents.isValidDate(in:)(v129) & 1) == 0)
  {
    v67 = v134;
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_1000097B4(v68, (uint64_t)qword_10006FA20);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Invalid date for notification trigger", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v131);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v135, v67);
    return 0;
  }
  v50 = v38;
  Calendar.date(from:)(v38);
  v51 = (uint64_t (*)(char *, uint64_t, uint64_t))v9[6];
  v52 = v136;
  v53 = v51(v8, 1, v136);
  v54 = v134;
  v55 = v49;
  if (v53 == 1)
  {
    sub_100009730((uint64_t)v8, &qword_10006EF20);
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_1000097B4(v56, (uint64_t)qword_10006FA20);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Error generating date for notification trigger", v60, 2u);
      v61 = v60;
      v55 = v129;
      swift_slowDealloc(v61, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v130 + 8))(v55, v131);
    (*(void (**)(char *, uint64_t))(v132 + 8))(v50, v54);
    return 0;
  }
  v75 = (uint64_t (*)(char *, char *, uint64_t))v9[4];
  v76 = v128;
  v77 = v75(v128, v8, v52);
  Date.init()(v77);
  LOBYTE(v76) = static Date.< infix(_:_:)(v76, v15);
  v123(v15, v52);
  if ((v76 & 1) != 0)
  {
    if (qword_10006EE30 != -1)
      swift_once(&qword_10006EE30, sub_100022178);
    v78 = type metadata accessor for Logger(0);
    v112 = sub_1000097B4(v78, (uint64_t)qword_10006FA20);
    v79 = Logger.logObject.getter(v112);
    v80 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Will post tomorrow", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    v82 = v126;
    v83 = v121;
    v84 = v122;
    ((void (*)(char *, _QWORD, uint64_t))v122)(v126, v121, v2);
    v85 = (uint64_t)v127;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v82, 1, v128, 0);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v82, v2);
    v86 = v136;
    if (v51((char *)v85, 1, v136) == 1)
    {
      v87 = sub_100009730(v85, &qword_10006EF20);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Error generating date for notification trigger", v90, 2u);
        v91 = v90;
        v55 = v129;
        swift_slowDealloc(v91, -1, -1);
      }

      v123(v128, v136);
      (*(void (**)(char *, uint64_t))(v130 + 8))(v55, v131);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v50, v134);
      return 0;
    }
    v92 = v125;
    v75(v125, (char *)v85, v86);
    v93 = v118;
    v94 = v117;
    v95 = swift_allocObject(v116, v117 + 5 * v118, v115);
    *(_OWORD *)(v95 + 16) = xmmword_100059F70;
    v96 = v95 + v94;
    ((void (*)(uint64_t, _QWORD, uint64_t))v84)(v96, v114, v2);
    ((void (*)(uint64_t, _QWORD, uint64_t))v84)(v96 + v93, v113, v2);
    ((void (*)(uint64_t, uint64_t, uint64_t))v84)(v96 + v119, v83, v2);
    ((void (*)(uint64_t, _QWORD, uint64_t))v84)(v96 + v120, enum case for Calendar.Component.hour(_:), v2);
    v50 = v135;
    ((void (*)(uint64_t, _QWORD, uint64_t))v84)(v96 + 4 * v93, enum case for Calendar.Component.minute(_:), v2);
    v97 = sub_10002B070(v95);
    swift_setDeallocating(v95);
    swift_arrayDestroy(v96, 5, v2);
    swift_deallocClassInstance(v95, 32, 7);
    v98 = v124;
    Calendar.dateComponents(_:from:)(v97, v92);
    v99 = v97;
    v55 = v129;
    swift_bridgeObjectRelease(v99);
    v123(v92, v136);
    v54 = v134;
    (*(void (**)(char *, char *, uint64_t))(v132 + 40))(v50, v98, v134);
  }
  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v100 = type metadata accessor for Logger(0);
  v101 = sub_1000097B4(v100, (uint64_t)qword_10006FA20);
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc(12, -1);
    v105 = swift_slowAlloc(32, -1);
    v139[0] = v105;
    *(_DWORD *)v104 = 136315138;
    swift_beginAccess(v50, v138, 0, 0);
    v106 = sub_100009BE4(&qword_10006FBA8, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t)&protocol conformance descriptor for DateComponents);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v54, v106);
    v109 = v108;
    v137 = sub_1000572F8(v107, v108, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
    swift_bridgeObjectRelease(v109);
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "Trigger date %s", v104, 0xCu);
    swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1, -1);
    v110 = v104;
    v55 = v129;
    swift_slowDealloc(v110, -1, -1);
  }

  swift_beginAccess(v50, v139, 0, 0);
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  v73 = objc_msgSend((id)objc_opt_self(UNCalendarNotificationTrigger), "triggerWithDateMatchingComponents:repeats:", isa, 0);

  v123(v128, v136);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v55, v131);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v50, v54);
  return v73;
}

void *sub_10002C00C(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;

  v6 = a1;
  v24 = &_swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v21 = v6;
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
      v20 = v7;
      while (v9)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_9:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v23 = v10;
        v13 = sub_100026564(&v23, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease(v6);

          swift_release(v24);
          return a3;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v9;
          v15 = v24[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
          v16 = v15;
          v9 = v14;
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v11);
          specialized ContiguousArray._endMutation()(v17);
          v7 = v20;
          v6 = v21;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v24;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v18 = v6;
      else
        v18 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v7)
        goto LABEL_22;
    }
    v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a3 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return a3;
}

void sub_10002C1B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100005D4C(&qword_10006FC08);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v43 = v1;
    while (1)
    {
      while (1)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        v11 = __OFADD__(v9++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }
        v12 = v10;
        v13 = NSObject._rawHashValue(seed:)(v4[5]);
        v14 = -1 << *((_BYTE *)v4 + 32);
        v15 = v13 & ~v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if (((1 << v15) & v17) != 0)
          break;
LABEL_26:
        *(_QWORD *)&v8[8 * v16] = v18 | v17;
        *(_QWORD *)(v4[6] + 8 * v15) = v12;
        v24 = v4[2];
        v11 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v11)
          goto LABEL_43;
        v4[2] = v25;
        if (v9 == v5)
          return;
      }
      sub_10000A968(0, &qword_10006FBE8, UNNotificationCategory_ptr);
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)(v19, v12);

      if ((v20 & 1) == 0)
      {
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)(v22, v12);

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v43;
        v5 = v45;
        goto LABEL_26;
      }
LABEL_17:
      swift_unknownObjectRelease(v12);
      v1 = v43;
      v5 = v45;
      if (v9 == v45)
        return;
    }
  }
  v26 = 0;
  v42 = v1 + 32;
  v44 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v44)
  {
    v27 = v4[5];
    v28 = *(id *)(v42 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_10000A968(0, &qword_10006FBE8, UNNotificationCategory_ptr);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }
      v37 = ~v30;
      while (1)
      {
        v31 = (v31 + 1) & v37;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
        v34 = 1 << v31;
        if ((v33 & (1 << v31)) == 0)
          break;
        v38 = *(id *)(v4[6] + 8 * v31);
        v39 = static NSObject.== infix(_:_:)(v38, v28);

        if ((v39 & 1) != 0)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_44;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45)
      return;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_10002C50C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[19] = a1;
  v2 = sub_100005D4C(&qword_10006FB00);
  v1[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005D4C(&qword_10006FB50);
  v1[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005D4C(&qword_10006FB58);
  v1[22] = v4;
  v1[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for FormLaunchConfiguration(0) - 8);
  v1[24] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v1[25] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[26] = swift_task_alloc(v7);
  v1[27] = swift_task_alloc(v7);
  return swift_task_switch(sub_10002C5EC, 0, 0);
}

uint64_t sub_10002C5EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  char **v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (qword_10006EE30 != -1)
    swift_once(&qword_10006EE30, sub_100022178);
  v1 = *(void **)(v0 + 152);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 224) = sub_1000097B4(v2, (uint64_t)qword_10006FA20);
  v3 = Logger.logObject.getter(v1);
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(void **)(v0 + 152);
  v7 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
  v43 = v0 + 16;
  if (v5)
  {
    v8 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v44 = v42;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 136) = sub_1000572F8(0xD000000000000025, 0x800000010005B7A0, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = objc_msgSend(v6, "actionIdentifier");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    *(_QWORD *)(v0 + 144) = sub_1000572F8(v10, v12, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
    swift_bridgeObjectRelease(v12);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s action: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v13 = v8;
    v7 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {

  }
  v14 = *(void **)(v0 + 152);
  v15 = objc_msgSend(v14, "notification");
  v16 = objc_msgSend(v15, "request");

  v17 = objc_msgSend(v16, "content");
  v18 = objc_msgSend(v17, "userInfo");

  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v20 = objc_msgSend(v14, v7[52]);
  v21 = v20;
  if (!v20)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v23 = v22;
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
  }
  *(_QWORD *)(v0 + 232) = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v26 = v25;
  *(_QWORD *)(v0 + 240) = v24;
  *(_QWORD *)(v0 + 248) = v25;
  strcpy((char *)(v0 + 88), "formIdentifier");
  *(_BYTE *)(v0 + 103) = -18;
  AnyHashable.init<A>(_:)(v0 + 88, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v19 + 16) && (v27 = sub_1000162BC(v43), (v28 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(v19 + 56) + 32 * v27, v0 + 56);
  }
  else
  {
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease(v19);
  sub_1000126EC(v43);
  if (*(_QWORD *)(v0 + 80))
  {
    if ((swift_dynamicCast(v0 + 104, v0 + 56, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v30 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 256) = v30;
      *(_QWORD *)(v0 + 264) = v29;
      if (qword_10006EE28 != -1)
        swift_once(&qword_10006EE28, sub_10001B5C0);
      v31 = (_QWORD *)swift_task_alloc(dword_10006F854);
      *(_QWORD *)(v0 + 272) = v31;
      *v31 = v0;
      v31[1] = sub_10002CB9C;
      return sub_10001D9A4(*(_QWORD *)(v0 + 168), v30, v29);
    }

    v33 = swift_bridgeObjectRelease(v26);
  }
  else
  {

    swift_bridgeObjectRelease(v26);
    v33 = sub_100009730(v0 + 56, (uint64_t *)&unk_10006FB60);
  }
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v44 = v37;
    *(_DWORD *)v36 = 136315138;
    *(_QWORD *)(v0 + 120) = sub_1000572F8(0xD000000000000025, 0x800000010005B7A0, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s failed to get form identifier from notification", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }

  v38 = *(_QWORD *)(v0 + 208);
  v39 = *(_QWORD *)(v0 + 184);
  v41 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CB9C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  return swift_task_switch(sub_10002CBF0, 0, 0);
}

uint64_t sub_10002CBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = sub_100005D4C(&qword_10006FA18);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 264);
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(void **)(v0 + 232);
    sub_100009730(v1, &qword_10006FB50);

    swift_bridgeObjectRelease(v5);
    v7 = swift_bridgeObjectRelease(v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v51 = v11;
      *(_DWORD *)v10 = 136315138;
      *(_QWORD *)(v0 + 128) = sub_1000572F8(0xD000000000000025, 0x800000010005B7A0, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s no notification data found. Ignoring response", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  else
  {
    v49 = *(_QWORD *)(v0 + 248);
    v50 = *(_QWORD *)(v0 + 256);
    v12 = *(void **)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 216);
    v44 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 184);
    v42 = *(_QWORD *)(v0 + 208);
    v43 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 240);
    v47 = *(void **)(v0 + 152);
    v17 = (uint64_t *)(v1 + *(int *)(v2 + 48));
    v48 = *(_QWORD *)(v0 + 264);
    v19 = *v17;
    v18 = v17[1];
    v20 = (_QWORD *)(v14 + *(int *)(v15 + 48));
    sub_10000F6D0(v1, v14);
    *v20 = v19;
    v20[1] = v18;
    v21 = (uint64_t *)(v14 + *(int *)(v15 + 48));
    v22 = *v21;
    v45 = v21[1];
    sub_10000F6D0(v14, v13);
    v23 = (void *)objc_opt_self(FBKSAnalytics);
    v24 = *(_QWORD *)(v13 + 8);
    swift_bridgeObjectRetain(v24);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v23, "logFeedbackdReceivedNotificationResponse:formIdentifier:", v12, v25);

    static TaskPriority.utility.getter();
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v16, 0, 1, v26);
    sub_10000F714(v13, v42);
    v27 = *(unsigned __int8 *)(v43 + 80);
    v28 = (v27 + 48) & ~v27;
    v29 = (v44 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
    v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v32 = (_QWORD *)swift_allocObject(&unk_10006A3F0, v31 + 16, v27 | 7);
    v32[2] = 0;
    v32[3] = 0;
    v32[4] = v46;
    v32[5] = v49;
    sub_10000F6D0(v42, (uint64_t)v32 + v28);
    v33 = (_QWORD *)((char *)v32 + v29);
    *v33 = v22;
    v33[1] = v45;
    *(_QWORD *)((char *)v32 + v30) = v47;
    v34 = (_QWORD *)((char *)v32 + v31);
    *v34 = v50;
    v34[1] = v48;
    v35 = v47;
    v36 = sub_10004F334(v16, (uint64_t)&unk_10006FB78, (uint64_t)v32);
    swift_release(v36);
    sub_100009730(v16, &qword_10006FB00);
    sub_10000F758(v13);
  }
  v37 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 184);
  v40 = *(_QWORD *)(v0 + 160);
  v39 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CF88()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 88));
  v6 = v0 + v4 + v1[6];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v0 + v4 + v1[8];
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v11(v10, 1, v7))
    v9(v10, v7);
  v12 = v0 + v4 + v1[9];
  if (!v11(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v3 | 7);
}

uint64_t sub_10002D0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = *(_QWORD *)(type metadata accessor for FormLaunchConfiguration(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = v0 + v3;
  v9 = (uint64_t *)(v0 + v4);
  v10 = *(_QWORD *)(v0 + v5);
  v11 = *v9;
  v12 = v9[1];
  v13 = (uint64_t *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  v14 = *v13;
  v15 = v13[1];
  v16 = (_QWORD *)swift_task_alloc(dword_10006FB74);
  *(_QWORD *)(v1 + 16) = v16;
  *v16 = v1;
  v16[1] = sub_100029488;
  v16[10] = v14;
  v16[11] = v15;
  v16[8] = v12;
  v16[9] = v10;
  v16[6] = v8;
  v16[7] = v11;
  v16[4] = v6;
  v16[5] = v7;
  return swift_task_switch(sub_1000285EC, 0, 0);
}

uint64_t sub_10002D1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006EF20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002D20C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006FBF0;
  if (!qword_10006FBF0)
  {
    v1 = sub_10000A968(255, &qword_10006FBE8, UNNotificationCategory_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10006FBF0);
  }
  return result;
}

uint64_t sub_10002D264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FormLaunchConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for NotificationController.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002D2E8 + 4 * byte_10005A475[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002D308 + 4 * byte_10005A47A[v4]))();
}

_BYTE *sub_10002D2E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002D308(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002D310(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002D318(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002D320(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002D328(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotificationController.Error()
{
  return &type metadata for NotificationController.Error;
}

unint64_t sub_10002D348()
{
  unint64_t result;

  result = qword_10006FC30;
  if (!qword_10006FC30)
  {
    result = swift_getWitnessTable(&unk_10005A4F0, &type metadata for NotificationController.Error);
    atomic_store(result, (unint64_t *)&qword_10006FC30);
  }
  return result;
}

uint64_t sub_10002D390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006FC40);
  v1 = sub_1000097B4(v0, (uint64_t)qword_10006FC40);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  return Logger.init(subsystem:category:)(v2);
}

CFUserNotificationRef sub_10002D3F0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  _QWORD *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  unint64_t v24;
  const __CFDictionary *isa;
  CFUserNotificationRef v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  SInt32 v36;
  SInt32 error[2];
  _BYTE v38[192];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  sub_10000F910(a2, &v39);
  v2 = v40;
  v3 = v42;
  v34 = v41;
  v35 = v39;
  v4 = v44;
  v5 = v46;
  v32 = v45;
  v33 = v43;
  if (qword_10006EE48 != -1)
    swift_once(&qword_10006EE48, sub_10002D390);
  v6 = type metadata accessor for Logger(0);
  sub_1000097B4(v6, (uint64_t)qword_10006FC40);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain_n(v4, 2);
  v7 = swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_QWORD *)error = v11;
    *(_DWORD *)v10 = 136315138;
    v39 = v35;
    v40 = v2;
    v41 = v34;
    v42 = v3;
    v43 = v33;
    v44 = v4;
    v45 = v32;
    v46 = v5;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    v12 = sub_100005D4C(&qword_10006FB98);
    v13 = String.init<A>(describing:)(&v39, v12);
    v15 = v14;
    v39 = sub_1000572F8(v13, v14, (uint64_t *)error);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    v16 = v5;
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Using strings: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    v16 = v5;
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease_n(v2, 2);
  }
  v17 = sub_100005D4C(&qword_10006FC60);
  inited = swift_initStackObject(v17, v38);
  *(_OWORD *)(inited + 16) = xmmword_10005A560;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_16;
  }
  v19 = (_QWORD *)inited;
  *(_QWORD *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v20 = (id)kCFUserNotificationAlertHeaderKey;
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  v19[8] = &type metadata for String;
  v19[5] = v35;
  v19[6] = v2;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[9] = kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v21 = (id)kCFUserNotificationAlertMessageKey;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  v19[13] = &type metadata for String;
  v19[10] = v34;
  v19[11] = v3;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  v19[14] = kCFUserNotificationDefaultButtonTitleKey;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  v22 = (id)kCFUserNotificationDefaultButtonTitleKey;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  v19[18] = &type metadata for String;
  v19[15] = v33;
  v19[16] = v4;
  if (!kCFUserNotificationAlternateButtonTitleKey)
    goto LABEL_18;
  v19[19] = kCFUserNotificationAlternateButtonTitleKey;
  v23 = (id)kCFUserNotificationAlternateButtonTitleKey;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  v19[23] = &type metadata for String;
  v19[20] = v32;
  v19[21] = v16;
  v24 = sub_100014800((uint64_t)v19);
  error[0] = 0;
  type metadata accessor for CFString(0);
  sub_10002DB5C();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  v26 = CFUserNotificationCreate(0, 0.0, 0, error, isa);

  if (!v26)
  {
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 67109120;
      swift_beginAccess(error, &v39, 0, 0);
      v36 = error[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, error);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to show CFUserNotification. Error: %d", v30, 8u);
      swift_slowDealloc(v30, -1, -1);
    }

    return 0;
  }
  return v26;
}

uint64_t sub_10002D948(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 40) = a2;
  *(_QWORD *)(v2 + 32) = a1;
  return swift_task_switch(sub_10002D9B0, 0, 0);
}

uint64_t sub_10002D9B0()
{
  uint64_t v0;
  __CFUserNotification *v1;
  __CFUserNotification *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Swift::String v7;
  void *object;
  uint64_t v9;

  v1 = sub_10002D3F0(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  if (v1)
  {
    v2 = v1;
    *(_QWORD *)(v0 + 16) = 0;
    CFUserNotificationReceiveResponse(v1, 0.0, (CFOptionFlags *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 16);
    if (!v3)
    {
      v4 = 0;
      goto LABEL_7;
    }
    if (v3 == 1)
    {
      CFUserNotificationCancel(v2);
      v4 = 1;
LABEL_7:

      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
    }
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)(v0 + 24) = v3;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    sub_1000113F4(0xD000000000000023, 0x800000010005B950);
    v9 = swift_bridgeObjectRelease(0x800000010005B950);
    swift_willThrow(v9);

  }
  else
  {
    v5 = sub_1000113F4(0xD000000000000023, 0x800000010005B920);
    swift_willThrow(v5);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10002DB5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006F1A0;
  if (!qword_10006F1A0)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(&unk_100059AC4, v1);
    atomic_store(result, (unint64_t *)&qword_10006F1A0);
  }
  return result;
}

uint64_t sub_10002DBA4(void *a1, uint64_t a2)
{
  return sub_10002DBE8(a1, a2, (void (*)(void))sub_100036078, (void (*)(void))sub_100036078);
}

uint64_t sub_10002DBC4(void *a1, uint64_t a2)
{
  return sub_10002DBE8(a1, a2, (void (*)(void))sub_100036078, (void (*)(void))sub_100036360);
}

uint64_t sub_10002DBE8(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  _QWORD *v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t result;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  char *v79;
  id v80;
  void *v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  id v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(void);
  uint64_t v140;
  uint64_t v141;
  void (**v142)(unint64_t, uint64_t, uint64_t);
  uint64_t v143;
  void (*v144)(void);
  uint64_t v145;
  _QWORD *v146;

  v139 = a4;
  v144 = a3;
  v7 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v7);
  v9 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FBKSInteraction.Content(0);
  v137 = *(_QWORD *)(v10 - 8);
  v138 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v121 - v14;
  v16 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v140 = *(_QWORD *)(v16 - 8);
  v141 = v16;
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for FBKSForm.Question(0);
  v142 = *(void (***)(unint64_t, uint64_t, uint64_t))(v19 - 8);
  __chkstk_darwin(v19);
  v145 = (uint64_t)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = objc_msgSend(a1, "commonMetadata");
  if (!v21)
    goto LABEL_31;
  v22 = v21;
  v136 = v13;
  v23 = (char *)objc_msgSend(v21, "featureDomain");
  if (!v23)
  {

LABEL_31:
    v61 = sub_10001B348();
    v62 = swift_allocError(&type metadata for StorageError, v61, 0, 0);
    *v63 = 3;
    swift_willThrow(v62);

    v64 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8))(a2, v64);
    return (uint64_t)v13;
  }
  v13 = v23;
  v133 = v19;
  v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v25 = v24;

  v26 = (char *)objc_msgSend(a1, "originalContent");
  if (!v26)
  {

    swift_bridgeObjectRelease(v25);
    goto LABEL_31;
  }
  v13 = v26;
  v132 = v25;
  v27 = objc_msgSend(a1, "generatedContent");
  if (!v27)
  {

    swift_bridgeObjectRelease(v132);
    goto LABEL_31;
  }
  v125 = v27;
  v126 = v13;
  v129 = v15;
  v123 = v4;
  v130 = v18;
  v127 = a1;
  v128 = a2;
  v28 = objc_msgSend(v22, "prefilledQuestions");
  v29 = sub_10000A968(0, &qword_10006FC68, BMEvaluationCommonMetadataQuestionAnswer_ptr);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

  if ((unint64_t)v30 >> 62)
    goto LABEL_65;
  v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v30);
  while (1)
  {
    v122 = v9;
    v131 = v22;
    if (!v31)
    {
      v135 = &_swiftEmptyDictionarySingleton;
LABEL_34:
      swift_bridgeObjectRelease_n(v30, 2);
      v66 = objc_msgSend(v22, "auxiliaryAttributes");
      if (v66)
      {
        v67 = v66;
        v68 = objc_msgSend(v66, "attributeDict");

        v69 = sub_10000A968(0, &qword_10006FC70, BMCustomAttributesNamedValue_ptr);
        v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v69);

        if ((unint64_t)v30 >> 62)
        {
          if (v30 < 0)
            v94 = v30;
          else
            v94 = v30 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n(v30, 2);
          v70 = _CocoaArrayWrapper.endIndex.getter(v94);
          swift_bridgeObjectRelease(v30);
          if (v70)
          {
LABEL_37:
            v71 = 0;
            v22 = (id)(v30 & 0xC000000000000001);
            v72 = &_swiftEmptyDictionarySingleton;
LABEL_38:
            v145 = (uint64_t)v72;
            v73 = v71;
            while (1)
            {
              if (v22)
                v74 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v73, v30);
              else
                v74 = *(id *)(v30 + 8 * v73 + 32);
              v75 = v74;
              v71 = v73 + 1;
              if (__OFADD__(v73, 1))
                goto LABEL_64;
              v76 = objc_msgSend(v74, "name");
              if (v76)
              {
                v77 = v76;
                v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
                v9 = v79;

                v80 = objc_msgSend(v75, "value");
                if (v80)
                {
                  v81 = v80;
                  v142 = (void (**)(unint64_t, uint64_t, uint64_t))objc_msgSend(v80, "int64Value");

                  v82 = v145;
                  LODWORD(v133) = swift_isUniquelyReferenced_nonNull_native(v145);
                  v146 = (_QWORD *)v82;
                  v84 = sub_1000161EC(v78, (uint64_t)v9);
                  v85 = *(_QWORD *)(v82 + 16);
                  v86 = (v83 & 1) == 0;
                  v87 = v85 + v86;
                  if (__OFADD__(v85, v86))
                    goto LABEL_89;
                  if (*(_QWORD *)(v82 + 24) >= v87)
                  {
                    if ((v133 & 1) != 0)
                    {
                      v72 = v146;
                      if ((v83 & 1) == 0)
                        goto LABEL_52;
                    }
                    else
                    {
                      LODWORD(v145) = v83;
                      sub_100018200();
                      v72 = v146;
                      if ((v145 & 1) == 0)
                        goto LABEL_52;
                    }
                  }
                  else
                  {
                    LODWORD(v145) = v83;
                    sub_100016AD4(v87, v133);
                    v88 = sub_1000161EC(v78, (uint64_t)v9);
                    if ((v145 & 1) != (v89 & 1))
                      goto LABEL_92;
                    v84 = v88;
                    v72 = v146;
                    if ((v145 & 1) == 0)
                    {
LABEL_52:
                      v72[(v84 >> 6) + 8] |= 1 << v84;
                      v90 = (uint64_t *)(v72[6] + 16 * v84);
                      *v90 = v78;
                      v90[1] = (uint64_t)v9;
                      *(_QWORD *)(v72[7] + 8 * v84) = v142;
                      v91 = v72[2];
                      v59 = __OFADD__(v91, 1);
                      v92 = v91 + 1;
                      if (v59)
                        goto LABEL_90;
                      v72[2] = v92;
                      swift_bridgeObjectRetain(v9);
LABEL_57:

                      swift_bridgeObjectRelease(v9);
                      swift_bridgeObjectRelease(0x8000000000000000);
                      if (v71 != v70)
                        goto LABEL_38;
                      goto LABEL_74;
                    }
                  }
                  *(_QWORD *)(v72[7] + 8 * v84) = v142;
                  goto LABEL_57;
                }

                swift_bridgeObjectRelease(v9);
              }
              else
              {

              }
              ++v73;
              if (v71 == v70)
              {
                v72 = (_QWORD *)v145;
                goto LABEL_74;
              }
            }
          }
        }
        else
        {
          v70 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v30);
          if (v70)
            goto LABEL_37;
        }
        v72 = &_swiftEmptyDictionarySingleton;
LABEL_74:
        swift_bridgeObjectRelease_n(v30, 2);
        v22 = v131;
      }
      else
      {
        v72 = &_swiftEmptyDictionarySingleton;
      }
      v95 = (uint64_t)v72;
      v96 = v130;
      sub_1000357E0(v134, v132, v130);
      v97 = objc_msgSend(v22, "bundleId");
      if (v97)
      {
        v98 = v97;
        v13 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        v100 = v99;

      }
      else
      {
        v13 = 0;
        v100 = 0;
      }
      v101 = v135;
      swift_bridgeObjectRetain(v135);
      v102 = v126;
      v103 = v143;
      v144();
      if (v103)
      {

        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v100);
        v104 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 8))(v128, v104);
        (*(void (**)(_QWORD *, uint64_t))(v140 + 8))(v96, v141);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v95);
      }
      else
      {
        v105 = v125;
        v139();
        v106 = objc_msgSend(v22, "modelVersion");
        if (v106)
        {
          v107 = v106;
          v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
          v143 = v109;
          v144 = (void (*)(void))v108;

        }
        else
        {
          v143 = 0;
          v144 = 0;
        }
        v110 = objc_msgSend(v22, "diagnostics");
        v142 = (void (**)(unint64_t, uint64_t, uint64_t))v13;
        if (v110)
        {
          v111 = v110;
          v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
          v140 = v113;
          v141 = v112;

        }
        else
        {
          v140 = 0;
          v141 = 0;
        }
        v114 = v95;
        v145 = v95;
        swift_bridgeObjectRetain(v95);
        LODWORD(v139) = objc_msgSend(v131, "isHighPriority");
        v115 = type metadata accessor for UUID(0);
        v116 = *(_QWORD *)(v115 - 8);
        v117 = v122;
        v118 = v128;
        (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v122, v128, v115);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v117, 0, 1, v115);
        v120 = v117;
        v119 = v135;
        v13 = (char *)dispatch thunk of FBKSDonation.__allocating_init(featureDomain:bundleID:prefillQuestions:originalContent:generatedContent:modelVersion:diagnostics:auxiliaryMetrics:isHighPriority:evaluationID:)(v130, v142, v100, v135, v129, v136, v144, v143, v141, v140, v114, (_BYTE)v139, v120);

        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v118, v115);
        swift_bridgeObjectRelease(v119);
        swift_bridgeObjectRelease(v145);
      }
      return (uint64_t)v13;
    }
    v135 = &_swiftEmptyDictionarySingleton;
    v9 = (char *)(v30 & 0xC000000000000001);
    v32 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    v33 = 0;
LABEL_9:
    v34 = v9 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v30) : *(id *)(v30 + 8 * v33 + 32);
    v35 = v34;
    v36 = v33 + 1;
    if (!__OFADD__(v33, 1))
      break;
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    if (v30 < 0)
      v93 = v30;
    else
      v93 = v30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v30, 2);
    v31 = _CocoaArrayWrapper.endIndex.getter(v93);
    swift_bridgeObjectRelease(v30);
  }
  v37 = objc_msgSend(v34, v32[74]);
  if (!v37)
  {

    ++v33;
    if (v36 == v31)
      goto LABEL_34;
    goto LABEL_9;
  }
  v38 = v37;
  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  v41 = v40;

  v42 = v145;
  FBKSForm.Question.init(stringValue:)(v39, v41);
  v43 = objc_msgSend(v35, "answer");
  v124 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String);

  v44 = v135;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v135);
  v146 = v44;
  v47 = sub_100016250(v42);
  v48 = v44[2];
  v49 = (v46 & 1) == 0;
  v50 = v48 + v49;
  if (!__OFADD__(v48, v49))
  {
    v51 = v46;
    if (v44[3] >= v50)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100018394();
    }
    else
    {
      sub_100016DBC(v50, isUniquelyReferenced_nonNull_native);
      v52 = sub_100016250(v145);
      if ((v51 & 1) != (v53 & 1))
        goto LABEL_91;
      v47 = v52;
    }
    v22 = v131;
    v54 = v146;
    v135 = v146;
    if ((v51 & 1) != 0)
    {
      v55 = v146[7];
      v56 = *(_QWORD *)(v55 + 8 * v47);
      *(_QWORD *)(v55 + 8 * v47) = v124;
      swift_bridgeObjectRelease(v56);
    }
    else
    {
      v146[(v47 >> 6) + 8] |= 1 << v47;
      v142[2](v54[6] + (_QWORD)v142[9] * v47, v145, v133);
      v57 = v135;
      *(_QWORD *)(v135[7] + 8 * v47) = v124;
      v58 = v57[2];
      v59 = __OFADD__(v58, 1);
      v60 = v58 + 1;
      if (v59)
        goto LABEL_88;
      v57[2] = v60;
    }
    v32 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    swift_bridgeObjectRelease(0x8000000000000000);
    ((void (*)(uint64_t, uint64_t))v142[1])(v145, v133);

    if (v36 == v31)
      goto LABEL_34;
    v33 = v36;
    goto LABEL_9;
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v133);
  __break(1u);
LABEL_92:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_10002E724(void *a1, uint64_t a2)
{
  return sub_10002DBE8(a1, a2, (void (*)(void))sub_1000365A8, (void (*)(void))sub_100036360);
}

uint64_t sub_10002E748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v2 = sub_100005D4C(&qword_10006F748);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v32 - v6;
  v8 = type metadata accessor for FBKSInteraction.Content(0);
  v9 = *(uint64_t **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v32 - v14;
  dispatch thunk of FBKSInteraction.originalContent.getter(v13);
  v16 = (unsigned int (*)(char *, uint64_t, uint64_t))v9[6];
  if (v16(v7, 1, v8) != 1)
  {
    v33 = v1;
    v17 = (uint64_t (*)(char *, char *, uint64_t))v9[4];
    v18 = v17(v15, v7, v8);
    dispatch thunk of FBKSInteraction.generatedContent.getter(v18);
    if (v16(v5, 1, v8) == 1)
    {
      ((void (*)(char *, uint64_t))v9[1])(v15, v8);
      goto LABEL_5;
    }
    v17(v12, v5, v8);
    v22 = v33;
    v23 = sub_10003551C();
    if (v22)
    {
LABEL_13:
      v0 = v9[1];
      ((void (*)(char *, uint64_t))v0)(v12, v8);
      ((void (*)(char *, uint64_t))v0)(v15, v8);
      return v0;
    }
    v24 = v23;
    v25 = sub_10003551C();
    v0 = v25;
    if (v24)
    {
      if (v24 == 1 || v25 != 1)
        goto LABEL_12;
      v0 = 2;
    }
    else if ((_BYTE)v25)
    {
      if (v25 != 1)
      {
LABEL_12:
        v27 = sub_10001B348();
        v28 = swift_allocError(&type metadata for StorageError, v27, 0, 0);
        *v29 = 2;
        swift_willThrow(v28);
        goto LABEL_13;
      }
      v0 = 1;
    }
    v31 = (void (*)(char *, uint64_t))v9[1];
    v31(v12, v8);
    v31(v15, v8);
    return v0;
  }
  v5 = v7;
LABEL_5:
  sub_10002E9C8((uint64_t)v5);
  v19 = sub_10001B348();
  v20 = swift_allocError(&type metadata for StorageError, v19, 0, 0);
  *v21 = 3;
  swift_willThrow(v20);
  return v0;
}

uint64_t sub_10002E9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D4C(&qword_10006F748);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10002EA08(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t *v17;
  id v18;
  uint64_t *v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD v25[2];

  v3 = v1;
  v5 = sub_100005D4C(&qword_10006F748);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v25 - v9;
  v11 = sub_10000A968(0, &qword_10006FC78, BMEvaluationCommonMetadata_ptr);
  v12 = a1;
  v13 = (id)v11;
  v14 = sub_100030710(v12);
  if (v2)
  {

  }
  else
  {
    v15 = v14;
    sub_10000A968(0, &qword_10006FC80, BMTextContent_ptr);
    v16 = v12;
    dispatch thunk of FBKSInteraction.originalContent.getter(v16);

    v17 = sub_10002F740((uint64_t)v10);
    v18 = v16;
    dispatch thunk of FBKSInteraction.generatedContent.getter(v18);

    v19 = sub_10002F740((uint64_t)v8);
    v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
    v21 = v15;
    v22 = v17;
    v23 = v19;
    v13 = objc_msgSend(v20, "initWithCommonMetadata:originalContent:generatedContent:", v21, v22, v23);

  }
  return v13;
}

id sub_10002EBF4(void *a1)
{
  return sub_10002EC4C(a1, &qword_10006FC80, BMTextContent_ptr, (uint64_t (*)(char *))sub_10002F740);
}

id sub_10002EC20(void *a1)
{
  return sub_10002EC4C(a1, &qword_10006FCA0, BMTextImageContent_ptr, (uint64_t (*)(char *))sub_10002FFE4);
}

id sub_10002EC4C(void *a1, unint64_t *a2, _QWORD *a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  _QWORD *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void (*v24)(uint64_t *, char *, uint64_t);
  id v25;
  id v26;
  id v27;
  void (*v28)(uint64_t *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *);

  v32 = a4;
  v8 = v4;
  v10 = sub_100005D4C(&qword_10006F748);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  v16 = sub_10000A968(0, &qword_10006FC78, BMEvaluationCommonMetadata_ptr);
  v17 = a1;
  v18 = (id)v16;
  v19 = sub_100030710(v17);
  if (v5)
  {

  }
  else
  {
    v20 = v19;
    v31 = v8;
    sub_10000A968(0, a2, a3);
    v21 = v17;
    dispatch thunk of FBKSInteraction.originalContent.getter(v21);

    v22 = (void *)v32(v15);
    sub_10000A968(0, &qword_10006FC98, BMImageContent_ptr);
    v23 = v21;
    dispatch thunk of FBKSInteraction.generatedContent.getter(v23);

    v24 = sub_10002FC64((uint64_t)v13);
    v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v31));
    v26 = v20;
    v27 = v22;
    v28 = v24;
    v18 = objc_msgSend(v25, "initWithCommonMetadata:originalContent:generatedContent:", v26, v27, v28);

  }
  return v18;
}

uint64_t (**sub_10002EE64(void *a1))(void **, uint64_t)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t (**v9)(void **, uint64_t);
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  NSUUID v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  id v30;

  v2 = type metadata accessor for FBKSEvaluation.Action(0);
  __chkstk_darwin(v2);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v5);
  v7 = (void **)((char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for FBKSEvaluation.Subject(0);
  v9 = *(uint64_t (***)(void **, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (void **)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  FBKSEvaluation.subject.getter(v14);
  v17 = v9[11](v11, v8);
  if (v17 == enum case for FBKSEvaluation.Subject.id(_:))
  {
    v9[12](v11, v8);
  }
  else
  {
    if (v17 != enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      v22 = sub_10001B348();
      swift_allocError(&type metadata for StorageError, v22, 0, 0);
      *v23 = 12;
      swift_willThrow();

      v9[1](v11, v8);
      return v9;
    }
    v18 = v9[12](v11, v8);
    v19 = *v11;
    dispatch thunk of FBKSInteraction.evaluationID.getter(v18);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
    {
      sub_100009730((uint64_t)v7, &qword_10006F080);
      v20 = sub_10001B348();
      swift_allocError(&type metadata for StorageError, v20, 0, 0);
      *v21 = 12;
      swift_willThrow();

      return v9;
    }

    v11 = v7;
  }
  (*(void (**)(char *, void **, uint64_t))(v13 + 32))(v16, v11, v12);
  v9 = (uint64_t (**)(void **, uint64_t))objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v29[0]));
  v24.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v25 = v30;
  FBKSEvaluation.action.getter();
  v26 = v29[1];
  v27 = sub_100030EC8((uint64_t)v4);
  if (v26)
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    v9 = (uint64_t (**)(void **, uint64_t))objc_msgSend(v9, "initWithEvaluationUuid:userResponse:", v24.super.isa, v27);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  return v9;
}

_QWORD *sub_10002F164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = (_QWORD *)sub_100030CB0(v1);
    v4 = (uint64_t)result;
    v6 = v5;
    v7 = 0;
    v8 = v1 + 64;
    v27 = v1 + 80;
    v28 = v1;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v1 + 32))
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v1 + 36) != v6)
        goto LABEL_23;
      v29 = v7;
      v11 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v4 + 8);
      swift_bridgeObjectRetain(v11);
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v13 = objc_msgSend(objc_allocWithZone((Class)BMCustomAttributesBasicValue), "initWithBoolValue:int64Value:doubleValue:stringValue:", 0, isa, 0, 0);

      v14 = objc_allocWithZone((Class)BMCustomAttributesNamedValue);
      swift_bridgeObjectRetain(v11);
      v15 = v13;
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      v17 = objc_msgSend(v14, "initWithName:value:", v16, v15);
      swift_bridgeObjectRelease(v11);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v19 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = v19;
      v1 = v28;
      v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v21);
      v9 = 1 << *(_BYTE *)(v28 + 32);
      if (v4 >= v9)
        goto LABEL_24;
      v22 = *(_QWORD *)(v8 + 8 * v10);
      if ((v22 & (1 << v4)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(v28 + 36) != v6)
        goto LABEL_26;
      v23 = v22 & (-2 << (v4 & 0x3F));
      if (v23)
      {
        v9 = __clz(__rbit64(v23)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = v10 + 1;
        v25 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v25)
        {
          v26 = *(_QWORD *)(v8 + 8 * v24);
          if (v26)
          {
LABEL_18:
            v9 = __clz(__rbit64(v26)) + (v24 << 6);
          }
          else
          {
            while (v25 - 2 != v10)
            {
              v26 = *(_QWORD *)(v27 + 8 * v10++);
              if (v26)
              {
                v24 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v7 = v29 + 1;
      v4 = v9;
      if (v29 + 1 == v2)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

char *sub_10002F3F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v1;
  v5 = type metadata accessor for FBKSInteraction.Content(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v9 = sub_100036D00((uint64_t)v8);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  }
  else
  {
    sub_100036B08(v9);
    v27 = a1;
    v11 = v10;
    v12 = objc_allocWithZone((Class)BMCustomAttributesBasicValue);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v14 = objc_msgSend(v12, "initWithBoolValue:int64Value:doubleValue:stringValue:", 0, 0, 0, v13);

    v15 = sub_100005D4C(&qword_10006EF30);
    v16 = swift_allocObject(v15, 40, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10005A450;
    v17 = objc_allocWithZone((Class)BMCustomAttributesNamedValue);
    v18 = v14;
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v17, "initWithName:value:", v19, v18);

    *(_QWORD *)(v16 + 32) = v20;
    v28 = v16;
    specialized Array._endMutation()(v21);
    v22 = v28;
    v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
    sub_10000A968(0, &qword_10006FC70, BMCustomAttributesNamedValue_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v8 = (char *)objc_msgSend(v23, "initWithAttributeDict:", isa);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v27, v5);
  }
  return v8;
}

id sub_10002F62C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v1 = objc_msgSend(v0, "attributeDict");
  v2 = sub_10000A968(0, &qword_10006FC70, BMCustomAttributesNamedValue_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v4 = sub_100030D38(v3, 0x61746E6573657270, 0xEC0000006E6F6974);
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend(v4, "value");

  if (v5)
  {
    v6 = objc_msgSend(v5, "stringValue");

    if (v6)
    {
      v5 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t *sub_10002F740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(uint64_t *, char *, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  id v33;
  NSString v34;
  char *v35;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void (*v48)(char *, uint64_t);
  uint64_t *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FBKSInteraction.StructuredValue(0);
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D4C(&qword_10006F748);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FBKSInteraction.Content(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (uint64_t *)((char *)&v49 - v17);
  __chkstk_darwin(v16);
  v20 = (char *)&v49 - v19;
  sub_100031064(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    v51 = a1;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
    v24 = *(void (**)(uint64_t *, char *, uint64_t))(v12 + 16);
    v24(v18, v20, v11);
    v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 88))(v18, v11);
    if (v25 != enum case for FBKSInteraction.Content.text(_:)
      && v25 != enum case for FBKSInteraction.Content.sourceCode(_:))
    {
      if (v25 == enum case for FBKSInteraction.Content.structured(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v18, v11);
        v26 = v53;
        (*(void (**)(char *, uint64_t *, uint64_t))(v52 + 32))(v54, v18, v53);
        v27 = type metadata accessor for JSONEncoder(0);
        v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
        v18 = (uint64_t *)JSONEncoder.init()(v28);
        v29 = sub_1000310AC();
        v30 = dispatch thunk of JSONEncoder.encode<A>(_:)(v54, v26, v29);
        if (v1)
        {
          swift_release(v18);
LABEL_8:
          sub_100009730(v51, &qword_10006F748);
          (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v53);
LABEL_15:
          (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
          return v18;
        }
        v38 = v30;
        v39 = v18;
        v18 = v31;
        v40 = swift_release(v39);
        static String.Encoding.utf8.getter(v40);
        v49 = v18;
        String.init(data:encoding:)(v38, v18, v5);
        if (!v41)
        {
          v42 = sub_10001B348();
          v43 = swift_allocError(&type metadata for StorageError, v42, 0, 0);
          *v44 = 9;
          swift_willThrow(v43);
          sub_100012720(v38, (unint64_t)v49);
          goto LABEL_8;
        }
        v32 = v41;
        v50 = (void (*)(char *, char *, uint64_t))v24;
        sub_100012720(v38, (unint64_t)v49);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v53);
LABEL_13:
        v33 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v55));
        v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v32);
        v18 = (uint64_t *)sub_10000A968(0, &qword_10006FC88, BMCustomAttributes_ptr);
        v50(v15, v20, v11);
        v35 = sub_10002F3F8((uint64_t)v15);
        if (!v1)
        {
          v37 = v35;
          v18 = (uint64_t *)objc_msgSend(v33, "initWithText:metadata:", v34, v35);

          sub_100009730(v51, &qword_10006F748);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
          return v18;
        }

        sub_100009730(v51, &qword_10006F748);
        goto LABEL_15;
      }
      if (v25 != enum case for FBKSInteraction.Content.notification(_:)
        && v25 != enum case for FBKSInteraction.Content.mailMessage(_:)
        && v25 != enum case for FBKSInteraction.Content.html(_:))
      {
        v45 = sub_10001B348();
        v46 = swift_allocError(&type metadata for StorageError, v45, 0, 0);
        *v47 = 1;
        swift_willThrow(v46);
        sub_100009730(v51, &qword_10006F748);
        v48 = *(void (**)(char *, uint64_t))(v12 + 8);
        v48(v20, v11);
        v48((char *)v18, v11);
        return v18;
      }
    }
    v50 = (void (*)(char *, char *, uint64_t))v24;
    (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v18, v11);
    v32 = v18[1];
    goto LABEL_13;
  }
  v18 = &qword_10006F748;
  sub_100009730((uint64_t)v10, &qword_10006F748);
  v21 = sub_10001B348();
  v22 = swift_allocError(&type metadata for StorageError, v21, 0, 0);
  *v23 = 3;
  swift_willThrow(v22);
  sub_100009730(a1, &qword_10006F748);
  return v18;
}

void (*sub_10002FC64(uint64_t a1))(uint64_t *, char *, uint64_t)
{
  uint64_t v1;
  unint64_t v2;
  void (*v3)(uint64_t *, char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void (*v35)(char *, uint64_t);
  char *v37;
  Class v38;
  id v39;
  Class isa;
  unint64_t v41;

  v3 = (void (*)(uint64_t *, char *, uint64_t))v2;
  v5 = sub_100005D4C(&qword_10006F748);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FBKSInteraction.Content(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (uint64_t *)((char *)&v39 - v14);
  __chkstk_darwin(v13);
  v17 = (char *)&v39 - v16;
  sub_100031064(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100009730((uint64_t)v7, &qword_10006F748);
    v18 = sub_10001B348();
    v19 = swift_allocError(&type metadata for StorageError, v18, 0, 0);
    *v20 = 3;
    swift_willThrow(v19);
    sub_100009730(a1, &qword_10006F748);
  }
  else
  {
    v41 = v2;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    v3 = *(void (**)(uint64_t *, char *, uint64_t))(v9 + 16);
    v3(v15, v17, v8);
    v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 88))(v15, v8);
    if (v21 == enum case for FBKSInteraction.Content.image(_:)
      || v21 == enum case for FBKSInteraction.Content.audio(_:)
      || v21 == enum case for FBKSInteraction.Content.handwriting(_:)
      || v21 == enum case for FBKSInteraction.Content.sketch(_:)
      || v21 == enum case for FBKSInteraction.Content.video(_:)
      || v21 == enum case for FBKSInteraction.Content.emoji(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v9 + 96))(v15, v8);
      v29 = v15;
      v27 = *v15;
      v28 = v29[1];
      v39 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000A968(0, &qword_10006FC88, BMCustomAttributes_ptr);
      v3((uint64_t *)v12, v17, v8);
      v30 = v41;
      v31 = sub_10002F3F8((uint64_t)v12);
      if (v30)
      {
        sub_100012720(v27, v28);

      }
      else
      {
        v37 = v31;
        v41 = v28;
        v38 = isa;
        v3 = (void (*)(uint64_t *, char *, uint64_t))objc_msgSend(v39, "initWithImageData:metadata:", isa, v31);

        sub_100012720(v27, v41);
      }
      sub_100009730(a1, &qword_10006F748);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
    else
    {
      v32 = sub_10001B348();
      v33 = swift_allocError(&type metadata for StorageError, v32, 0, 0);
      *v34 = 1;
      swift_willThrow(v33);
      sub_100009730(a1, &qword_10006F748);
      v35 = *(void (**)(char *, uint64_t))(v9 + 8);
      v35(v17, v8);
      v35((char *)v15, v8);
    }
  }
  return v3;
}

uint64_t *sub_10002FFE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  NSData v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v83 = (uint64_t *)((char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for FBKSInteraction.StructuredValue(0);
  v84 = *(_QWORD *)(v4 - 8);
  v85 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v79 - v8;
  v10 = sub_100005D4C(&qword_10006F748);
  __chkstk_darwin(v10);
  v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FBKSInteraction.Content(0);
  v14 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (uint64_t *)((char *)&v79 - v19);
  __chkstk_darwin(v18);
  v22 = (char *)&v79 - v21;
  sub_100031064(a1, (uint64_t)v12);
  if (v14[6](v12, 1, v13) == 1)
  {
    v20 = &qword_10006F748;
    sub_100009730((uint64_t)v12, &qword_10006F748);
    v23 = sub_10001B348();
    v24 = swift_allocError(&type metadata for StorageError, v23, 0, 0);
    *v25 = 3;
    swift_willThrow(v24);
    sub_100009730(a1, &qword_10006F748);
    return v20;
  }
  v82 = a1;
  v14[4](v22, (uint64_t)v12, v13);
  v26 = v14[2];
  v26((char *)v20, (uint64_t)v22, v13);
  v27 = ((uint64_t (*)(uint64_t *, uint64_t))v14[11])(v20, v13);
  if (v27 != enum case for FBKSInteraction.Content.imageText(_:)
    && v27 != enum case for FBKSInteraction.Content.sketchText(_:))
  {
    if (v27 == enum case for FBKSInteraction.Content.imageStructured(_:))
    {
      ((void (*)(uint64_t *, uint64_t))v14[12])(v20, v13);
      v40 = v20[1];
      v79 = *v20;
      v80 = v40;
      v41 = sub_100005D4C(&qword_10006F7B0);
      v42 = v85;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v9, (char *)v20 + *(int *)(v41 + 48), v85);
      v43 = type metadata accessor for JSONEncoder(0);
      v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
      v20 = (uint64_t *)JSONEncoder.init()(v44);
      v45 = sub_1000310AC();
      v46 = v87;
      v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v9, v42, v45);
      v87 = v46;
      if (v46)
      {
        v49 = v22;
        swift_release(v20);
        v50 = v82;
LABEL_13:
        sub_100012720(v79, v80);
        sub_100009730(v50, &qword_10006F748);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
        ((void (*)(char *, uint64_t))v14[1])(v49, v13);
        return v20;
      }
      v65 = v47;
      v66 = v48;
      v81 = v26;
      v67 = swift_release(v20);
      v20 = v83;
      static String.Encoding.utf8.getter(v67);
      String.init(data:encoding:)(v65, v66, v20);
      if (!v68)
      {
        v49 = v22;
        v73 = sub_10001B348();
        v74 = swift_allocError(&type metadata for StorageError, v73, 0, 0);
        *v75 = 9;
        swift_willThrow(v74);
        sub_100012720(v65, v66);
        v50 = v82;
        goto LABEL_13;
      }
      v32 = v68;
      v83 = (uint64_t *)v14;
      v29 = v22;
      sub_100012720(v65, v66);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
LABEL_24:
      v33 = v86;
      v85 = v13;
      v30 = v79;
      v31 = v80;
      goto LABEL_6;
    }
    if (v27 != enum case for FBKSInteraction.Content.sketchStructured(_:))
    {
      v60 = sub_10001B348();
      v61 = swift_allocError(&type metadata for StorageError, v60, 0, 0);
      *v62 = 1;
      swift_willThrow(v61);
      sub_100009730(v82, &qword_10006F748);
      v63 = v14[1];
      ((void (*)(char *, uint64_t))v63)(v22, v13);
      ((void (*)(uint64_t *, uint64_t))v63)(v20, v13);
      return v20;
    }
    ((void (*)(uint64_t *, uint64_t))v14[12])(v20, v13);
    v51 = v20[1];
    v79 = *v20;
    v80 = v51;
    v52 = sub_100005D4C(&qword_10006F7A8);
    v53 = v85;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v7, (char *)v20 + *(int *)(v52 + 48), v85);
    v54 = type metadata accessor for JSONEncoder(0);
    v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
    v20 = (uint64_t *)JSONEncoder.init()(v55);
    v56 = sub_1000310AC();
    v57 = v87;
    v58 = dispatch thunk of JSONEncoder.encode<A>(_:)(v7, v53, v56);
    v87 = v57;
    if (v57)
    {
      swift_release(v20);
    }
    else
    {
      v69 = v58;
      v70 = v59;
      v81 = v26;
      v71 = swift_release(v20);
      v20 = v83;
      static String.Encoding.utf8.getter(v71);
      String.init(data:encoding:)(v69, v70, v20);
      if (v72)
      {
        v32 = v72;
        v83 = (uint64_t *)v14;
        v29 = v22;
        sub_100012720(v69, v70);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v85);
        goto LABEL_24;
      }
      v76 = sub_10001B348();
      v77 = swift_allocError(&type metadata for StorageError, v76, 0, 0);
      *v78 = 9;
      swift_willThrow(v77);
      sub_100012720(v69, v70);
    }
    sub_100012720(v79, v80);
    sub_100009730(v82, &qword_10006F748);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v85);
    ((void (*)(char *, uint64_t))v14[1])(v22, v13);
    return v20;
  }
  v81 = v26;
  v28 = (uint64_t *)v14;
  v29 = v22;
  v83 = v28;
  ((void (*)(uint64_t *, uint64_t))v28[12])(v20, v13);
  v85 = v13;
  v30 = *v20;
  v31 = v20[1];
  v32 = v20[3];
  v33 = v86;
LABEL_6:
  v34 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v33));
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v36.super.isa = Data._bridgeToObjectiveC()().super.isa;
  v20 = (uint64_t *)sub_10000A968(0, &qword_10006FC88, BMCustomAttributes_ptr);
  v81(v17, (uint64_t)v29, v85);
  v37 = v87;
  v38 = sub_10002F3F8((uint64_t)v17);
  if (v37)
  {
    sub_100012720(v30, v31);

  }
  else
  {
    v39 = v38;
    v20 = (uint64_t *)objc_msgSend(v34, "initWithText:imageData:metadata:", v35, v36.super.isa, v38);

    sub_100012720(v30, v31);
  }
  sub_100009730(v82, &qword_10006F748);
  ((void (*)(char *, uint64_t))v83[1])(v29, v85);
  return v20;
}

_QWORD *sub_100030710(void *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  id v39;
  int v40;
  void *v41;
  id v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  id v47;
  _QWORD *v48;
  Class v49;
  id v50;
  Class v51;
  void *v52;
  Class v53;
  uint64_t v55;
  Class v56;
  NSString v57;
  _QWORD *v58;
  Class v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v2 = (_QWORD *)type metadata accessor for FBKSInteraction.FeatureDomain(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D4C(&qword_10006F080);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v55 - v10;
  v12 = a1;
  dispatch thunk of FBKSInteraction.evaluationID.getter(v12);

  v13 = type metadata accessor for UUID(0);
  v58 = *(_QWORD **)(v13 - 8);
  v59 = (Class)v58[6];
  v14 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v11, 1, v13);
  sub_100009730((uint64_t)v11, &qword_10006F080);
  if (v14 == 1)
  {
    v15 = sub_10001B348();
    v16 = swift_allocError(&type metadata for StorageError, v15, 0, 0);
    *v17 = 12;
    swift_willThrow(v16);

  }
  else
  {
    v57 = v2;
    v18 = v12;
    v19 = dispatch thunk of FBKSInteraction.auxiliaryMetrics.getter(v18);

    if (v19)
    {
      v20 = v61;
      v21 = sub_10002F164(v19);
      v61 = v20;
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = objc_allocWithZone((Class)BMCustomAttributes);
    sub_10000A968(0, &qword_10006FC70, BMCustomAttributesNamedValue_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    v24 = objc_msgSend(v22, "initWithAttributeDict:", isa);

    v62 = _swiftEmptyArrayStorage;
    v25 = v18;
    v26 = dispatch thunk of FBKSInteraction.prefillQuestions.getter(v25);

    if (v26)
    {
      __chkstk_darwin(v27);
      v28 = v61;
      sub_100018D20(v26, (void (*)(char *, uint64_t))sub_1000310F4);
      v61 = v28;
      swift_bridgeObjectRelease(v26);
    }
    v29 = v57;
    v30 = v25;
    dispatch thunk of FBKSInteraction.featureDomain.getter(v30);

    FBKSInteraction.FeatureDomain.description.getter(v31);
    v33 = v32;
    (*(void (**)(char *, NSString))(v3 + 8))(v5, v29);
    v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v34 = v30;
    dispatch thunk of FBKSInteraction.bundleID.getter(v34);
    v36 = v35;

    if (v36)
    {
      v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = v61;
    v39 = v34;
    dispatch thunk of FBKSInteraction.evaluationID.getter(v39);

    v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v9, 1, v13);
    v61 = v38;
    v41 = v37;
    if (v40 == 1)
    {
      v56 = 0;
    }
    else
    {
      v56 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(char *, uint64_t))v58[1])(v9, v13);
    }
    v42 = v39;
    dispatch thunk of FBKSInteraction.isHighPriority.getter();

    v59 = Bool._bridgeToObjectiveC()().super.super.isa;
    v43 = v42;
    dispatch thunk of FBKSInteraction.diagnostics.getter(v43);
    v45 = v44;
    v58 = v43;

    if (v45)
    {
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
    }
    else
    {
      v46 = 0;
    }
    v47 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v60));
    v48 = v62;
    sub_10000A968(0, &qword_10006FC68, BMEvaluationCommonMetadataQuestionAnswer_ptr);
    swift_bridgeObjectRetain(v48);
    v49 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    v50 = v24;
    v51 = v56;
    v52 = v57;
    v53 = v59;
    v2 = objc_msgSend(v47, "initWithFeatureDomain:bundleId:evaluationUuid:isHighPriority:diagnostics:prefilledQuestions:auxiliaryAttributes:systemBuild:modelVersion:", v57, v41, v56, v59, v46, v49, v50, 0, 0);
    swift_bridgeObjectRelease(v48);

  }
  return v2;
}

uint64_t sub_100030BB4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  Class isa;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  FBKSForm.Question.stringValue.getter();
  v6 = v5;
  v7 = objc_allocWithZone((Class)BMEvaluationCommonMetadataQuestionAnswer);
  swift_bridgeObjectRetain(a2);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v10 = objc_msgSend(v7, "initWithQuestion:answer:", v8, isa);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v12 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v11 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v12 >= v11 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
  v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
  return specialized Array._endMutation()(v13);
}

uint64_t sub_100030CB0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void *sub_100030D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "name");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100030EC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v8;
  _BYTE *v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v2 = type metadata accessor for FBKSEvaluation.Action(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for FBKSEvaluation.Action.thumbsUp(_:))
  {
    v5 = 2;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.thumbsDown(_:))
  {
    v5 = 3;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.reportConcern(_:))
  {
    v5 = 4;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.skip(_:))
  {
    v5 = 5;
  }
  else if (v6 == enum case for FBKSEvaluation.Action.invalidData(_:))
  {
    v5 = 6;
  }
  else
  {
    if (v6 != enum case for FBKSEvaluation.Action.contentDeleted(_:))
    {
      v8 = sub_10001B348();
      swift_allocError(&type metadata for StorageError, v8, 0, 0);
      *v9 = 11;
      swift_willThrow();
      v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v10(a1, v2);
      v10(v5, v2);
      return v5;
    }
    v5 = 7;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v5;
}

uint64_t sub_100031064(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000310AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006FC90;
  if (!qword_10006FC90)
  {
    v1 = type metadata accessor for FBKSInteraction.StructuredValue(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FBKSInteraction.StructuredValue, v1);
    atomic_store(result, (unint64_t *)&qword_10006FC90);
  }
  return result;
}

uint64_t sub_1000310F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100030BB4(a1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t sub_1000310FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for LongTermPersistence(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize(v1);
  v2 = v1 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory;
  v3 = sub_100005D4C(&qword_100070020);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  qword_100072558 = v1;
  return result;
}

uint64_t sub_10003116C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  void *v16;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  id v23;
  uint64_t (*v24)(char *, uint64_t);
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_1000097B4(v8, (uint64_t)SharedLog);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v30 = v0;
    v13 = (uint8_t *)v12;
    v14 = (void *)swift_slowAlloc(32, -1);
    v29 = v7;
    v15 = v14;
    v32 = v14;
    *(_DWORD *)v13 = 136446210;
    v31 = sub_1000572F8(0x6C416574656C6564, 0xEF2928617461446CLL, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s", v13, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v16 = v15;
    v7 = v29;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1000339F0(0, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return sub_100009730((uint64_t)v3, &qword_100070020);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  v18 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v19);
  v21 = v20;
  v32 = 0;
  v22 = objc_msgSend(v18, "removeItemAtURL:error:", v20, &v32);

  v23 = v32;
  if (v22)
  {
    v24 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v25 = v32;
    return v24(v7, v4);
  }
  else
  {
    v26 = v32;
    _convertNSErrorToError(_:)(v23);

    swift_willThrow(v27);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_100031498(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;

  v4 = v3;
  v51 = a1;
  v7 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v49 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v46 - v14;
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000097B4(v16, (uint64_t)SharedLog);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v50 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v48 = v4;
    v22 = v21;
    v46 = (void *)swift_slowAlloc(64, -1);
    v54 = v46;
    *(_DWORD *)v22 = 136446466;
    v52 = sub_1000572F8(0xD00000000000002BLL, 0x800000010005BA50, (uint64_t *)&v54);
    v47 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v52 = sub_1000572F8((uint64_t)v51, a2, (uint64_t *)&v54);
    v9 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s [%{public}s]", (uint8_t *)v22, 0x16u);
    v23 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v24 = (void *)static FBKSError.xpcSafeNSError(error:)(a3);
  v25 = (void *)objc_opt_self(NSKeyedArchiver);
  v54 = 0;
  v26 = objc_msgSend(v25, "archivedDataWithRootObject:requiringSecureCoding:error:", v24, 1, &v54);
  v27 = v54;
  if (v26)
  {
    v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    sub_10003406C(v51, a2, (void *)0x73726F727265, 0xE600000000000000, 1, (unint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {

      sub_100012720(v28, v30);
      sub_100009730((uint64_t)v9, &qword_100070020);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
      v34 = v49;
      sub_100031A54(v49);
      Data.write(to:options:)(v34, 0, v28, v30);
      sub_100012720(v28, v30);

      v45 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v45(v34, v10);
      v45((uint64_t)v15, v10);
    }
  }
  else
  {
    v31 = v27;
    v32 = _convertNSErrorToError(_:)(v27);

    swift_willThrow(v33);
    swift_errorRetain(v32);
    v35 = swift_errorRetain(v32);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void *)swift_slowAlloc(32, -1);
      v54 = v40;
      *(_DWORD *)v39 = 136446210;
      v52 = v32;
      swift_errorRetain(v32);
      v41 = sub_100005D4C(&qword_10006F090);
      v42 = String.init<A>(describing:)(&v52, v41);
      v44 = v43;
      v52 = sub_1000572F8(v42, v43, (uint64_t *)&v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to save failure to collect: %{public}s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      swift_errorRelease(v32);
    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
  }
}

uint64_t sub_100031A54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a1;
  v1 = type metadata accessor for URL.DirectoryHint(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = objc_msgSend(v12, "stringFromDate:", isa);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v23 = v15;
  v24 = v17;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.notDirectory(_:), v1);
  v18 = sub_10001AF24();
  URL.appending<A>(path:directoryHint:)(&v23, v4, &type metadata for String, v18);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease(v24);
  URL.appendingPathExtension(_:)(0x7473696C70, 0xE500000000000000);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
}

void sub_100031C40(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;

  v60 = type metadata accessor for URL.DirectoryHint(0);
  v62 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v61 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  v66 = (char *)&v56 - v17;
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_1000097B4(v18, (uint64_t)SharedLog);
  v20 = swift_bridgeObjectRetain_n(a2, 2);
  v64 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(32, -1);
    v24 = (void *)swift_slowAlloc(64, -1);
    v63 = a1;
    v25 = v24;
    v69 = v24;
    *(_DWORD *)v23 = 136446722;
    v57 = a3;
    v67 = sub_1000572F8(0xD000000000000039, 0x800000010005BA10, (uint64_t *)&v69);
    v58 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v67 = sub_1000572F8(v63, a2, (uint64_t *)&v69);
    a3 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v23 + 22) = 2050;
    v67 = (uint64_t)a3;
    v10 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s [%{public}s] id: [%{public}ld] ", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v26 = v25;
    a1 = v63;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_bridgeObjectRetain(a2);
  v27 = sub_10000A838(a1, a2, (uint64_t)a3);
  v28 = (void *)objc_opt_self(NSKeyedArchiver);
  v69 = 0;
  v29 = objc_msgSend(v28, "archivedDataWithRootObject:requiringSecureCoding:error:", v27, 1, &v69);
  v30 = v69;
  if (v29)
  {
    v31 = (void *)a1;
    v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v63 = v33;

    sub_10003406C(v31, a2, (void *)0x657474696D627573, 0xE900000000000064, 1, (unint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {

      sub_100012720(v32, v63);
      sub_100009730((uint64_t)v9, &qword_100070020);
    }
    else
    {
      v37 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v65 = v11;
      v37(v66, v9, v10);
      v69 = a3;
      v69 = (id)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v70 = v38;
      v40 = v61;
      v39 = v62;
      v41 = v60;
      (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v61, enum case for URL.DirectoryHint.notDirectory(_:), v60);
      v42 = sub_10001AF24();
      v43 = v59;
      URL.appending<A>(path:directoryHint:)(&v69, v40, &type metadata for String, v42);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
      swift_bridgeObjectRelease(v70);
      URL.appendingPathExtension(_:)(0x7473696C70, 0xE500000000000000);
      v44 = *(void (**)(char *, uint64_t))(v65 + 8);
      v44(v43, v10);
      v45 = v63;
      Data.write(to:options:)(v16, 0, v32, v63);
      sub_100012720(v32, v45);

      v44(v16, v10);
      v44(v66, v10);
    }
  }
  else
  {
    v34 = v30;
    v35 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v36);
    swift_errorRetain(v35);
    v46 = swift_errorRetain(v35);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = (void *)swift_slowAlloc(32, -1);
      v69 = v51;
      *(_DWORD *)v50 = 136446210;
      v67 = v35;
      swift_errorRetain(v35);
      v52 = sub_100005D4C(&qword_10006F090);
      v53 = String.init<A>(describing:)(&v67, v52);
      v55 = v54;
      v67 = sub_1000572F8(v53, v54, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_bridgeObjectRelease(v55);
      swift_errorRelease(v35);
      swift_errorRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to save feedback: %{public}s", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      swift_errorRelease(v35);
    }
    else
    {
      swift_errorRelease(v35);
      swift_errorRelease(v35);
      swift_errorRelease(v35);

    }
  }
}

uint64_t sub_100032344(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35[2];

  v3 = v2;
  v6 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000097B4(v16, (uint64_t)SharedLog);
  v18 = swift_bridgeObjectRetain_n(a2, 2);
  v32 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v31 = v10;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v33 = v13;
    v24 = v23;
    v35[0] = v23;
    *(_DWORD *)v22 = 136446466;
    v29 = v3;
    v30 = v9;
    v34 = sub_1000572F8(0xD000000000000025, 0x800000010005B9E0, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v34 = sub_1000572F8((uint64_t)a1, a2, v35);
    v9 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s [%{public}s]", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    v25 = v24;
    v13 = v33;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    v10 = v31;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10003406C(a1, a2, (void *)0x64656E696C636564, 0xE800000000000000, 1, (unint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100009730((uint64_t)v8, &qword_100070020);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  sub_100031A54((uint64_t)v13);
  Data.write(to:options:)(v13, 0, 0, 0xC000000000000000);
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v13, v9);
  return ((uint64_t (*)(char *, uint64_t))v28)(v15, v9);
}

_QWORD *sub_1000327DC(void *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v4 = sub_100005D4C(&qword_10006FDF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (void **)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10003B128(a1, a2, (void *)0x73726F727265, 0xE600000000000000);
  v9 = v8;
  v10 = v8[2];
  if (v10)
  {
    v21 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v10);
    v11 = (uint64_t)v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v12 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10001AE58(v11, (uint64_t)v7, &qword_10006FDF0);
      sub_100032960(v7, &v20);
      v13 = sub_100009730((uint64_t)v7, &qword_10006FDF0);
      v14 = v20;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v15 = v21[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      v11 += v12;
      --v10;
    }
    while (v10);
    v17 = v21;
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    return &_swiftEmptyArrayStorage;
  }
  return v17;
}

void sub_100032960(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  void **v42;
  char *v43;
  uint64_t *v44;
  _QWORD v45[2];
  __int128 v46;
  __int128 v47;

  v44 = a2;
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005D4C(&qword_10006FDF0);
  v6 = __chkstk_darwin(v5);
  v8 = (void **)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = v6;
  v42 = a1;
  v9 = *(int *)(v6 + 48);
  v10 = (char *)v8 + v9;
  v11 = (char *)a1 + v9;
  v12 = *a1;
  *v8 = v12;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v40 = v11;
  v38 = v15;
  v15(v10, v11, v13);
  v16 = *(void (**)(char *, uint64_t))(v14 + 8);
  v17 = v12;
  v39 = v16;
  v16(v10, v13);
  v18 = objc_msgSend(v17, "userInfo");
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v18, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
  v22 = v21;
  if (*(_QWORD *)(v19 + 16) && (v23 = sub_1000161EC(v20, v21), (v24 & 1) != 0))
  {
    sub_100009C84(*(_QWORD *)(v19 + 56) + 32 * v23, (uint64_t)&v46);
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
  }
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v19);
  if (!*((_QWORD *)&v47 + 1))
  {
    sub_100009730((uint64_t)&v46, (uint64_t *)&unk_10006FB60);
    goto LABEL_9;
  }
  if (!swift_dynamicCast(v45, &v46, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
LABEL_9:
    v25 = 0xE700000000000000;
    v26 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  v26 = v45[0];
  v25 = v45[1];
LABEL_10:
  v27 = objc_msgSend(v17, "code");
  v28 = objc_msgSend(v17, "domain");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  v32 = v40;
  v33 = (char *)v8 + *(int *)(v41 + 48);
  *v8 = *v42;
  v38(v33, v32, v13);
  v34 = v43;
  sub_100032C2C(v43);
  v39(v33, v13);
  v35 = objc_allocWithZone((Class)type metadata accessor for FBKSCampaignError(0));
  v36 = FBKSCampaignError.init(code:domain:errorDescription:date:)(v27, v29, v31, v26, v25, v34);

  *v44 = v36;
}

void sub_100032C2C(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSString *v38;
  unint64_t v39;
  char *v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  id v71;
  char *v72;
  _QWORD v73[2];
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;

  v2 = v1;
  v72 = a1;
  v3 = type metadata accessor for URL(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3);
  v70 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006EF20);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v68 - v14;
  v16 = URL.lastPathComponent.getter(v13);
  v18 = v17;
  *(_QWORD *)&v76 = v16;
  *((_QWORD *)&v76 + 1) = v17;
  v74 = 0x7473696C702ELL;
  v75 = 0xE600000000000000;
  v73[0] = 0;
  v73[1] = 0xE000000000000000;
  v19 = sub_10001AF24();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v74, v73, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v19, v19, v19);
  v21 = v20;
  swift_bridgeObjectRelease(v18);
  v22 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v71 = v22;
  v24 = objc_msgSend(v22, "dateFromString:", v23);

  if (v24)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v25(v15, v8, v5);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v26(v15, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) != 1)
    {

      v25(v72, v15, v5);
      return;
    }
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v26(v15, 1, 1, v5);
  }
  sub_100009730((uint64_t)v15, &qword_10006EF20);
  v27 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v29 = v28;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  *(_QWORD *)&v76 = 0;
  v31 = objc_msgSend(v27, "attributesOfItemAtPath:error:", v30, &v76);

  v32 = (void *)v76;
  if (v31)
  {
    type metadata accessor for FileAttributeKey(0);
    v34 = v33;
    v35 = sub_100009BE4(&qword_10006F1E0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100059A54);
    v36 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v31, v34, (char *)&type metadata for Any + 8, v35);
    v37 = v32;

    if (*(_QWORD *)(v36 + 16))
    {
      v38 = NSFileCreationDate;
      v39 = sub_100016374((uint64_t)v38);
      v40 = v70;
      if ((v41 & 1) != 0)
      {
        sub_100009C84(*(_QWORD *)(v36 + 56) + 32 * v39, (uint64_t)&v76);
      }
      else
      {
        v76 = 0u;
        v77 = 0u;
      }

    }
    else
    {
      v76 = 0u;
      v77 = 0u;
      v40 = v70;
    }
    swift_bridgeObjectRelease(v36);
    if (*((_QWORD *)&v77 + 1))
    {
      v53 = swift_dynamicCast(v12, &v76, (char *)&type metadata for Any + 8, v5, 6);
      v26(v12, v53 ^ 1u, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) != 1)
      {

        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v72, v12, v5);
        return;
      }
    }
    else
    {
      sub_100009730((uint64_t)&v76, (uint64_t *)&unk_10006FB60);
      v26(v12, 1, 1, v5);
    }
    sub_100009730((uint64_t)v12, &qword_10006EF20);
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v54 = type metadata accessor for Logger(0);
    sub_1000097B4(v54, (uint64_t)SharedLog);
    v56 = v68;
    v55 = v69;
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 16))(v40, v2, v69);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v76 = v61;
      *(_DWORD *)v60 = 136446210;
      v62 = sub_100009BE4(&qword_10006FDF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v55, v62);
      v65 = v64;
      v74 = sub_1000572F8(v63, v64, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_bridgeObjectRelease(v65);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v55);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Error getting date from url [%{public}s]", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v55);
    }

    Date.init()(v66);
  }
  else
  {
    v42 = (id)v76;
    v43 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v44);
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v45 = type metadata accessor for Logger(0);
    sub_1000097B4(v45, (uint64_t)SharedLog);
    swift_errorRetain(v43);
    v46 = swift_errorRetain(v43);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = 138543362;
      swift_errorRetain(v43);
      v51 = _swift_stdlib_bridgeErrorToNSError(v43);
      *(_QWORD *)&v76 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, (char *)&v76 + 8);
      *v50 = v51;
      swift_errorRelease(v43);
      swift_errorRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error getting date from url [%{public}@]", v49, 0xCu);
      v52 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v50, 1, v52);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_errorRelease(v43);
      swift_errorRelease(v43);
    }

    Date.init()(v67);
    swift_errorRelease(v43);
  }

}

uint64_t sub_1000333E4(void *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v4);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v40 - v12;
  sub_10003406C(a1, a2, (void *)0x64656E696C636564, 0xE800000000000000, 0, (unint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100009730((uint64_t)v6, &qword_100070020);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  v14 = (void *)objc_opt_self(NSFileManager);
  v15 = objc_msgSend(v14, "defaultManager");
  v16 = objc_msgSend(v14, "defaultManager");
  v17 = sub_100005D4C(&qword_10006FDE8);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100059440;
  *(_QWORD *)(v18 + 32) = NSURLIsDirectoryKey;
  v19 = NSURLIsDirectoryKey;
  v20 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v13, v18, 5, 0, 0);

  swift_bridgeObjectRelease(v18);
  if (!v20)
  {
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v29 = type metadata accessor for Logger(0);
    sub_1000097B4(v29, (uint64_t)SharedLog);
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v42 = v34;
      *(_DWORD *)v33 = 136446210;
      v40[1] = v33 + 4;
      v35 = URL.path.getter();
      v37 = v36;
      v41 = sub_1000572F8(v35, v36, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v37);
      v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to read directory [%{public}s]", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      v38 = *(void (**)(char *, uint64_t))(v8 + 8);
      v38(v11, v7);
    }
    v38(v13, v7);
    return 0;
  }
  v21 = objc_msgSend(v20, "allObjects");
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, (char *)&type metadata for Any + 8);

  v23 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_1000097B4(v24, (uint64_t)SharedLog);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v28 = 134349056;
    v42 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Declined count [%{public}ld]", v28, 0xCu);
    swift_slowDealloc(v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return v23;
}

uint64_t sub_100033884@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_100005D4C(&qword_10006FDE0);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory;
  swift_beginAccess(v1 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory, v14, 0, 0);
  sub_10001AE58(v9, (uint64_t)v8, &qword_10006FDE0);
  v10 = sub_100005D4C(&qword_100070020);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return sub_100034B4C((uint64_t)v8, (uint64_t)a1);
  sub_100009730((uint64_t)v8, &qword_10006FDE0);
  sub_1000339F0(1, a1);
  sub_10001AE58((uint64_t)a1, (uint64_t)v6, &qword_100070020);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_100034B04((uint64_t)v6, v9);
  return swift_endAccess(v13);
}

uint64_t sub_1000339F0@<X0>(int a1@<W0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void (*v29)(uint64_t, char *, uint64_t);
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  NSURL *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  id v41;
  void (*v42)(char *, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;

  LODWORD(v67) = a1;
  v70 = a2;
  v2 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D4C(&qword_100070020);
  __chkstk_darwin(v6);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v68 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v66 - v14;
  __chkstk_darwin(v13);
  v69 = (char *)&v66 - v16;
  v66 = (id)objc_opt_self(NSFileManager);
  v17 = objc_msgSend(v66, "defaultManager");
  static Strings.fbaGroupIdentifier.getter();
  v19 = v18;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v21 = objc_msgSend(v17, "containerURLForSecurityApplicationGroupIdentifier:", v20);

  if (v21)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v22(v8, v15, v9);
    v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v23(v8, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v24 = v69;
      v25 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v69, v8, v9);
      v73 = (id)static Strings.Daemon.directoryName.getter(v25);
      v74 = v26;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.isDirectory(_:), v2);
      v27 = sub_10001AF24();
      v28 = v68;
      URL.appending<A>(path:directoryHint:)(&v73, v5, &type metadata for String, v27);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      swift_bridgeObjectRelease(v74);
      if ((v67 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
        v51 = v70;
        v22(v70, v28, v9);
LABEL_22:
        v49 = v51;
        v50 = 0;
        return v23(v49, v50, 1, v9);
      }
      v29 = (void (*)(uint64_t, char *, uint64_t))v22;
      v30 = v10;
      v31 = v66;
      v32 = objc_msgSend(v66, "defaultManager");
      URL.path.getter();
      v34 = v33;
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      LODWORD(v34) = objc_msgSend(v32, "fileExistsAtPath:isDirectory:", v35, 0);

      if (!(_DWORD)v34)
      {
        v36 = objc_msgSend(v31, "defaultManager");
        URL._bridgeToObjectiveC()(v37);
        v39 = v38;
        v73 = 0;
        v40 = objc_msgSend(v36, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v38, 1, 0, &v73);

        v41 = v73;
        if (v40)
        {
          v42 = *(void (**)(char *, uint64_t))(v30 + 8);
          v43 = v73;
          v42(v69, v9);
LABEL_21:
          v51 = v70;
          v29((uint64_t)v70, v28, v9);
          goto LABEL_22;
        }
        v52 = v73;
        v53 = _convertNSErrorToError(_:)(v41);

        swift_willThrow();
        if (qword_10006EEE0 != -1)
          swift_once(&qword_10006EEE0, sub_10004F6A4);
        v54 = type metadata accessor for Logger(0);
        sub_1000097B4(v54, (uint64_t)SharedLog);
        swift_errorRetain(v53);
        v55 = swift_errorRetain(v53);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(12, -1);
          v67 = swift_slowAlloc(32, -1);
          v73 = (id)v67;
          *(_DWORD *)v58 = 136446210;
          v66 = v58 + 4;
          v71 = v53;
          swift_errorRetain(v53);
          v59 = sub_100005D4C(&qword_10006F090);
          v60 = String.init<A>(describing:)(&v71, v59);
          v62 = v61;
          v71 = sub_1000572F8(v60, v61, (uint64_t *)&v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
          v63 = v62;
          v28 = v68;
          swift_bridgeObjectRelease(v63);
          swift_errorRelease(v53);
          swift_errorRelease(v53);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to create feedbackd directory: %{public}s", v58, 0xCu);
          v64 = v67;
          swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v58, -1, -1);

        }
        else
        {

          swift_errorRelease(v53);
          swift_errorRelease(v53);
        }
        swift_errorRelease(v53);
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v69, v9);
      goto LABEL_21;
    }
  }
  else
  {
    v23 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v23(v8, 1, 1, v9);
  }
  sub_100009730((uint64_t)v8, &qword_100070020);
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v44 = type metadata accessor for Logger(0);
  v45 = sub_1000097B4(v44, (uint64_t)SharedLog);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to lookup container directory", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  v49 = v70;
  v50 = 1;
  return v23(v49, v50, 1, v9);
}

uint64_t sub_10003406C@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  unsigned int v64;
  id v65;
  id v66;
  id v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(char *);
  int v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  void *v91;
  uint64_t v92;
  id v93;
  unint64_t v94;

  v83 = a5;
  v88 = a4;
  v91 = a3;
  v84 = a1;
  v85 = a2;
  v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))type metadata accessor for URL.DirectoryHint(0);
  v86 = *((_QWORD *)v90 - 1);
  __chkstk_darwin(v90);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v87 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v81 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v81 - v16;
  v18 = sub_100005D4C(&qword_100070020);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v81 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v81 - v25;
  sub_100033884(v24);
  v27 = (unsigned int (*)(char *, uint64_t, uint64_t))v10;
  v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v89(v24, 1, v9))
  {
    sub_100009730((uint64_t)v24, &qword_100070020);
    v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v90(v26, 1, 1, v9);
    v28 = (uint64_t)v26;
    v29 = (uint64_t)v91;
    v30 = a6;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v24, v9);
    sub_100009730((uint64_t)v24, &qword_100070020);
    v93 = v84;
    v94 = v85;
    LODWORD(v84) = enum case for URL.DirectoryHint.isDirectory(_:);
    v85 = a6;
    v31 = v86;
    v82 = *(void (**)(char *))(v86 + 104);
    v32 = v90;
    v82(v8);
    v81 = sub_10001AF24();
    URL.appending<A>(path:directoryHint:)(&v93, v8, &type metadata for String, v81);
    v86 = *(_QWORD *)(v31 + 8);
    ((void (*)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))v86)(v8, v32);
    v33 = (void (*)(char *, uint64_t))*((_QWORD *)v27 + 1);
    v33(v15, v9);
    v34 = (uint64_t)v91;
    v93 = v91;
    v94 = v88;
    ((void (*)(char *, _QWORD, void (*)(char *, uint64_t, uint64_t, uint64_t)))v82)(v8, v84, v32);
    URL.appending<A>(path:directoryHint:)(&v93, v8, &type metadata for String, v81);
    ((void (*)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))v86)(v8, v32);
    v30 = v85;
    v33(v17, v9);
    v90 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v27 + 7);
    v90(v26, 0, 1, v9);
    v28 = (uint64_t)v26;
    v29 = v34;
  }
  sub_10001AE58(v28, (uint64_t)v21, &qword_100070020);
  if (v89(v21, 1, v9) == 1)
  {
    sub_100009730((uint64_t)v21, &qword_100070020);
    v35 = v88;
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v36 = type metadata accessor for Logger(0);
    sub_1000097B4(v36, (uint64_t)SharedLog);
    v37 = swift_bridgeObjectRetain_n(v35, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void *)swift_slowAlloc(32, -1);
      v89 = (unsigned int (*)(char *, uint64_t, uint64_t))v28;
      v42 = v41;
      v93 = v41;
      *(_DWORD *)v40 = 136446210;
      swift_bridgeObjectRetain(v35);
      v92 = sub_1000572F8(v29, v35, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
      swift_bridgeObjectRelease_n(v35, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to get [%{public}s] directory", v40, 0xCu);
      v43 = 1;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      sub_100009730((uint64_t)v89, &qword_100070020);
      return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))v90)(v30, v43, 1, v9);
    }
    swift_bridgeObjectRelease_n(v35, 2);

LABEL_21:
    sub_100009730(v28, &qword_100070020);
    v43 = 1;
    return ((uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))v90)(v30, v43, 1, v9);
  }
  v89 = v27;
  v44 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v27 + 4);
  v45 = v87;
  v44(v87, v21, v9);
  v46 = (void *)objc_opt_self(NSFileManager);
  v47 = objc_msgSend(v46, "defaultManager");
  URL.path.getter();
  v49 = v48;
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  LODWORD(v49) = objc_msgSend(v47, "fileExistsAtPath:isDirectory:", v50, 0);

  if ((_DWORD)v49)
  {
    sub_100009730(v28, &qword_100070020);
    v51 = v30;
    v52 = v45;
LABEL_19:
    v44((char *)v51, v52, v9);
    v43 = 0;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v90)(v30, v43, 1, v9);
  }
  if ((v83 & 1) == 0)
  {
    (*((void (**)(char *, uint64_t))v89 + 1))(v87, v9);
    goto LABEL_21;
  }
  v86 = v9;
  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v53 = v28;
  v85 = v30;
  v54 = type metadata accessor for Logger(0);
  v55 = sub_1000097B4(v54, (uint64_t)SharedLog);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "URL does not exist. Will create one", v58, 2u);
    swift_slowDealloc(v58, -1, -1);
  }

  v59 = objc_msgSend(v46, "defaultManager");
  v60 = v87;
  URL.path.getter();
  v62 = v61;
  v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v62);
  v93 = 0;
  v64 = objc_msgSend(v59, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v63, 1, 0, &v93);

  v65 = v93;
  if (v64)
  {
    v66 = v93;
    sub_100009730(v53, &qword_100070020);
    v30 = v85;
    v9 = v86;
    v51 = v85;
    v52 = v60;
    goto LABEL_19;
  }
  v68 = v93;
  v69 = _convertNSErrorToError(_:)(v65);

  swift_willThrow();
  v70 = v88;
  swift_bridgeObjectRetain(v88);
  swift_errorRetain(v69);
  swift_bridgeObjectRetain(v70);
  v71 = swift_errorRetain(v69);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = swift_slowAlloc(22, -1);
    v75 = (void *)swift_slowAlloc(64, -1);
    v93 = v75;
    *(_DWORD *)v74 = 136446466;
    swift_bridgeObjectRetain(v70);
    v92 = sub_1000572F8((uint64_t)v91, v70, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
    swift_bridgeObjectRelease_n(v70, 3);
    *(_WORD *)(v74 + 12) = 2082;
    v92 = v69;
    swift_errorRetain(v69);
    v76 = sub_100005D4C(&qword_10006F090);
    v77 = String.init<A>(describing:)(&v92, v76);
    v79 = v78;
    v92 = sub_1000572F8(v77, v78, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
    swift_bridgeObjectRelease(v79);
    swift_errorRelease(v69);
    swift_errorRelease(v69);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to create [%{public}s] directory: [%{public}s]", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    swift_errorRelease(v69);
    swift_errorRelease(v69);
    swift_bridgeObjectRelease_n(v70, 2);
  }
  swift_errorRelease(v69);
  v80 = v86;
  (*((void (**)(char *, uint64_t))v89 + 1))(v87, v86);
  sub_100009730(v53, &qword_100070020);
  v43 = 1;
  v30 = v85;
  v9 = v80;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v90)(v30, v43, 1, v9);
}

uint64_t sub_1000349BC()
{
  uint64_t v0;

  sub_100009730(v0 + OBJC_IVAR____TtC9feedbackd19LongTermPersistence____lazy_storage___feedbackdDirectory, &qword_10006FDE0);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1000349F0()
{
  return type metadata accessor for LongTermPersistence(0);
}

uint64_t type metadata accessor for LongTermPersistence(uint64_t a1)
{
  uint64_t result;

  result = qword_10006FCD8;
  if (!qword_10006FCD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LongTermPersistence);
  return result;
}

void sub_100034A34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100034AAC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100034AAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10006FCE8)
  {
    v2 = sub_100021E50(&qword_100070020);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10006FCE8);
  }
}

uint64_t sub_100034B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006FDE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_100070020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeedbackdEntitlements(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain(v3);
  *a1 = v3;
  return a1;
}

unint64_t destroy for FeedbackdEntitlements(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t *assignWithCopy for FeedbackdEntitlements(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain(v4);
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }
  return a1;
}

_QWORD *initializeWithTake for FeedbackdEntitlements(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for FeedbackdEntitlements(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeedbackdEntitlements(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FeedbackdEntitlements(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100034D84(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100034D9C(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackdEntitlements()
{
  return &type metadata for FeedbackdEntitlements;
}

uint64_t sub_100034DCC(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  if (!v2)
    return !v3;
  if (v2 == (_QWORD *)1)
    return v3 == (_QWORD *)1;
  if ((unint64_t)v3 < 2)
    return 0;
  return sub_100035414(v2, v3);
}

uint64_t sub_100034E0C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;
  uint64_t v27;

  if ((sub_10003525C() & 1) != 0)
  {
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v1 = type metadata accessor for Logger(0);
    sub_1000097B4(v1, (uint64_t)SharedLog);
    v2 = v0;
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 67240192;
      LODWORD(v27) = objc_msgSend(v2, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Client with pid [%{public}d] has admin entitlement", v5, 8u);
      swift_slowDealloc(v5, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  else
  {
    v7 = sub_100035334();
    if (v7)
    {
      v6 = v7;
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v8 = type metadata accessor for Logger(0);
      sub_1000097B4(v8, (uint64_t)SharedLog);
      v9 = v0;
      swift_bridgeObjectRetain_n(v6, 2);
      v10 = v9;
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc(18, -1);
        v14 = swift_slowAlloc(32, -1);
        v27 = v14;
        *(_DWORD *)v13 = 67240450;
        v15 = objc_msgSend(v10, "processIdentifier");

        LODWORD(v26) = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4);

        *(_WORD *)(v13 + 8) = 2082;
        v16 = swift_bridgeObjectRetain(v6);
        v17 = Array.description.getter(v16, &type metadata for String);
        v19 = v18;
        swift_bridgeObjectRelease(v6);
        v26 = sub_1000572F8(v17, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client with pid [%{public}d] is entitled to use forms [%{public}s]", (uint8_t *)v13, 0x12u);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v6, 2);
      }
    }
    else
    {
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v20 = type metadata accessor for Logger(0);
      sub_1000097B4(v20, (uint64_t)SharedLog);
      v21 = v0;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v24 = 67240192;
        LODWORD(v27) = objc_msgSend(v21, "processIdentifier");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4);

        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Client with pid [%{public}d] is not entitled", v24, 8u);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

      }
      return 2;
    }
  }
  return v6;
}

uint64_t sub_10003525C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t result;
  unsigned __int8 v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  static Strings.XPC.adminEntitlement.getter();
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = objc_msgSend(v0, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v7, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100021D2C((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    result = swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v6;
  }
  else
  {
    sub_1000354D8((uint64_t)v8);
    return 0;
  }
  return result;
}

uint64_t sub_100035334()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  static Strings.XPC.clientEntitlement.getter();
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = objc_msgSend(v0, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v8, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_100021D2C((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    v5 = sub_100005D4C(&qword_10006FE00);
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
      return v7;
  }
  else
  {
    sub_1000354D8((uint64_t)v9);
  }
  return 0;
}

uint64_t sub_100035414(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = *(i - 1);
      v18 = *i;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000354D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D4C((uint64_t *)&unk_10006FB60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003551C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for FBKSInteraction.Content(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for FBKSInteraction.Content.text(_:))
    goto LABEL_2;
  if (v6 == enum case for FBKSInteraction.Content.image(_:)
    || v6 == enum case for FBKSInteraction.Content.audio(_:)
    || v6 == enum case for FBKSInteraction.Content.handwriting(_:)
    || v6 == enum case for FBKSInteraction.Content.sketch(_:))
  {
    goto LABEL_7;
  }
  if (v6 == enum case for FBKSInteraction.Content.imageText(_:)
    || v6 == enum case for FBKSInteraction.Content.sketchText(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 2;
  }
  if (v6 == enum case for FBKSInteraction.Content.video(_:))
    goto LABEL_7;
  if (v6 == enum case for FBKSInteraction.Content.sourceCode(_:)
    || v6 == enum case for FBKSInteraction.Content.structured(_:))
  {
    goto LABEL_2;
  }
  if (v6 == enum case for FBKSInteraction.Content.imageStructured(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_100012720(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
    v8 = &qword_10006F7B0;
LABEL_19:
    v9 = &v5[*(int *)(sub_100005D4C(v8) + 48)];
    v10 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    return 2;
  }
  if (v6 == enum case for FBKSInteraction.Content.sketchStructured(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_100012720(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
    v8 = &qword_10006F7A8;
    goto LABEL_19;
  }
  if (v6 == enum case for FBKSInteraction.Content.notification(_:)
    || v6 == enum case for FBKSInteraction.Content.mailMessage(_:))
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  if (v6 == enum case for FBKSInteraction.Content.emoji(_:))
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 1;
  }
  if (v6 == enum case for FBKSInteraction.Content.html(_:))
    goto LABEL_2;
  v11 = sub_10001B348();
  v12 = swift_allocError(&type metadata for StorageError, v11, 0, 0);
  *v13 = 0;
  swift_willThrow(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000357E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  if (a1 == 0xD000000000000010)
  {
    v6 = 0x800000010005BA80;
    if (a2 == 0x800000010005BA80)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010005BA80, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v6);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.imageGeneration(_:);
    goto LABEL_6;
  }
  if (a1 == 0x432079726F6D654DLL && a2 == 0xEF6E6F6974616572)
  {
    v11 = 0xEF6E6F6974616572;
LABEL_12:
    swift_bridgeObjectRelease(v11);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.memoryCreation(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x432079726F6D654DLL, 0xEF6E6F6974616572, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x74697277646E6148 && a2 == 0xEB00000000676E69)
  {
    v12 = 0xEB00000000676E69;
LABEL_18:
    swift_bridgeObjectRelease(v12);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.handwriting(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74697277646E6148, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000010)
  {
    v13 = 0x800000010005BAA0;
    if (a2 == 0x800000010005BAA0)
    {
LABEL_23:
      swift_bridgeObjectRelease(v13);
      v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.systemAssistant(_:);
      goto LABEL_6;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010005BAA0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000010)
  {
    v14 = 0x800000010005BAC0;
    if (a2 == 0x800000010005BAC0)
    {
LABEL_32:
      swift_bridgeObjectRelease(v14);
      v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.deviceExpert(_:);
      goto LABEL_6;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010005BAC0, a1, a2, 0) & 1) != 0)
    goto LABEL_31;
  if (a1 == 0x4520656369766544 && a2 == 0xED00007472657078)
  {
    v14 = 0xED00007472657078;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4520656369766544, 0xED00007472657078, a1, a2, 0) & 1) != 0)
  {
LABEL_31:
    v14 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x20676E6974697257 && a2 == 0xED0000736C6F6F54)
  {
    v15 = 0xED0000736C6F6F54;
LABEL_38:
    swift_bridgeObjectRelease(v15);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.writingTools(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x20676E6974697257, 0xED0000736C6F6F54, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6552207472616D53 && a2 == 0xED00007365696C70)
  {
    v16 = 0xED00007365696C70;
LABEL_44:
    swift_bridgeObjectRelease(v16);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.smartReplies(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6552207472616D53, 0xED00007365696C70, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000010)
  {
    v17 = 0x800000010005BAE0;
    if (a2 == 0x800000010005BAE0)
    {
LABEL_49:
      swift_bridgeObjectRelease(v17);
      v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.emojiGeneration(_:);
      goto LABEL_6;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010005BAE0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010005BB00)
  {
    v18 = 0x800000010005BB00;
LABEL_55:
    swift_bridgeObjectRelease(v18);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.mailSummarization(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010005BB00, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x676948206C69614DLL && a2 == 0xEF73746867696C68)
  {
    v19 = 0xEF73746867696C68;
LABEL_61:
    swift_bridgeObjectRelease(v19);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.mailHighlights(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676948206C69614DLL, 0xEF73746867696C68, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000010005BB20)
  {
    v20 = 0x800000010005BB20;
LABEL_67:
    swift_bridgeObjectRelease(v20);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.messagesSummarization(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010005BB20, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_67;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x800000010005BB40)
  {
    v21 = 0x800000010005BB40;
LABEL_73:
    swift_bridgeObjectRelease(v21);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsSummarization(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010005BB40, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000010005BB60)
  {
    v22 = 0x800000010005BB60;
LABEL_79:
    swift_bridgeObjectRelease(v22);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsHighlights(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010005BB60, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010005BB80)
  {
    v23 = 0x800000010005BB80;
LABEL_85:
    swift_bridgeObjectRelease(v23);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.notificationsBreakthrough(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010005BB80, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x615020636967614DLL && a2 == 0xEB00000000726570)
  {
    v24 = 0xEB00000000726570;
LABEL_91:
    swift_bridgeObjectRelease(v24);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.magicPaper(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x615020636967614DLL, 0xEB00000000726570, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x7341207466697753 && a2 == 0xEC00000074736973)
  {
    v25 = 0xEC00000074736973;
LABEL_97:
    swift_bridgeObjectRelease(v25);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.swiftAssist(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7341207466697753, 0xEC00000074736973, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_97;
  }
  if (a1 == 0x4320736F746F6850 && a2 == 0xEE0070756E61656CLL)
  {
    v26 = 0xEE0070756E61656CLL;
LABEL_103:
    swift_bridgeObjectRelease(v26);
    v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.photosCleanup(_:);
    goto LABEL_6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4320736F746F6850, 0xEE0070756E61656CLL, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_103;
  }
  if (a1 == 1953719636 && a2 == 0xE400000000000000)
  {
    v27 = 0xE400000000000000;
  }
  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953719636, 0xE400000000000000, a1, a2, 0) & 1) == 0)
    {
      *a3 = a1;
      a3[1] = a2;
      v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.temporary(_:);
      goto LABEL_6;
    }
    v27 = a2;
  }
  swift_bridgeObjectRelease(v27);
  v7 = (unsigned int *)&enum case for FBKSInteraction.FeatureDomain.test(_:);
LABEL_6:
  v8 = *v7;
  v9 = type metadata accessor for FBKSInteraction.FeatureDomain(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a3, v8, v9);
}

void sub_100036078(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  Swift::String v28;

  v5 = type metadata accessor for FBKSInteraction.Content(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(a1, "text");
  if (!v9)
  {
    v22 = sub_10001B348();
    v19 = swift_allocError(&type metadata for StorageError, v22, 0, 0);
    v21 = 7;
    goto LABEL_7;
  }
  v10 = v9;
  v26 = a2;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = objc_msgSend(a1, "metadata");
  if (!v13 || (v14 = v13, v15 = sub_10002F62C(), v17 = v16, v14, !v17))
  {
    swift_bridgeObjectRelease(v12);
    v18 = sub_10001B348();
    v19 = swift_allocError(&type metadata for StorageError, v18, 0, 0);
    v21 = 5;
LABEL_7:
    *v20 = v21;
    swift_willThrow(v19);

    return;
  }
  v28._countAndFlagsBits = (uint64_t)v15;
  v28._object = v17;
  switch(sub_100036CB8(v28))
  {
    case 0u:
    case 8u:
    case 0xCu:
    case 0xDu:
    case 0xFu:

      v24 = v26;
      *v26 = v27;
      v24[1] = v12;
      (*(void (**)(void))(v6 + 104))();
      break;
    case 9u:
      sub_1000369A4(v27, v12);

      if (!v2)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for FBKSInteraction.Content.structured(_:), v5);
        (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 32))(v26, v8, v5);
      }
      break;
    default:
      swift_bridgeObjectRelease(v12);
      v23 = sub_10001B348();
      v19 = swift_allocError(&type metadata for StorageError, v23, 0, 0);
      v21 = 1;
      goto LABEL_7;
  }
}

void sub_100036360(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v4 = objc_msgSend(a1, "imageData");
  if (v4)
  {
    v5 = v4;
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = objc_msgSend(a1, "metadata");
    if (v9 && (v10 = v9, v11 = sub_10002F62C(), v13 = v12, v10, v13))
    {
      v25._countAndFlagsBits = (uint64_t)v11;
      v25._object = v13;
      switch(sub_100036CB8(v25))
      {
        case 1u:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.image(_:);
          break;
        case 2u:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.audio(_:);
          break;
        case 3u:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.handwriting(_:);
          break;
        case 4u:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.sketch(_:);
          break;
        case 7u:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.video(_:);
          break;
        case 0xEu:

          *a2 = v6;
          a2[1] = v8;
          v14 = (unsigned int *)&enum case for FBKSInteraction.Content.emoji(_:);
          break;
        default:
          v22 = sub_10001B348();
          v16 = swift_allocError(&type metadata for StorageError, v22, 0, 0);
          v18 = 1;
          goto LABEL_7;
      }
      v23 = *v14;
      v24 = type metadata accessor for FBKSInteraction.Content(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(a2, v23, v24);
    }
    else
    {
      v15 = sub_10001B348();
      v16 = swift_allocError(&type metadata for StorageError, v15, 0, 0);
      v18 = 5;
LABEL_7:
      *v17 = v18;
      swift_willThrow(v16);

      sub_100012720(v6, v8);
    }
  }
  else
  {
    v19 = sub_10001B348();
    v20 = swift_allocError(&type metadata for StorageError, v19, 0, 0);
    *v21 = 8;
    swift_willThrow(v20);

  }
}

void sub_1000365A8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::String v46;

  v5 = type metadata accessor for FBKSInteraction.Content(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v41 - v10);
  v12 = objc_msgSend(a1, "text");
  if (!v12)
  {
    v24 = sub_10001B348();
    v25 = swift_allocError(&type metadata for StorageError, v24, 0, 0);
    v27 = 7;
LABEL_11:
    *v26 = v27;
    swift_willThrow(v25);

    return;
  }
  v13 = v12;
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = objc_msgSend(a1, "imageData");
  if (!v16)
  {
    swift_bridgeObjectRelease(v15);
    v34 = sub_10001B348();
    v25 = swift_allocError(&type metadata for StorageError, v34, 0, 0);
    v27 = 8;
    goto LABEL_11;
  }
  v17 = v16;
  v43 = v15;
  v41 = a2;
  v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v45 = v18;

  v19 = objc_msgSend(a1, "metadata");
  if (v19 && (v20 = v19, v21 = sub_10002F62C(), v23 = v22, v20, v23))
  {
    v46._countAndFlagsBits = (uint64_t)v21;
    v46._object = v23;
    switch(sub_100036CB8(v46))
    {
      case 5u:
      case 6u:

        v35 = v41;
        v36 = v45;
        *v41 = v44;
        v35[1] = v36;
        v37 = v43;
        v35[2] = v42;
        v35[3] = v37;
        (*(void (**)(void))(v6 + 104))();
        return;
      case 0xAu:
        sub_100005D4C(&qword_10006F7B0);
        v39 = v44;
        v40 = v45;
        *v11 = v44;
        v11[1] = v40;
        sub_100037234(v39, v40);
        sub_1000369A4(v42, v43);

        sub_100012720(v39, v40);
        if (v2)
          goto LABEL_18;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v11, enum case for FBKSInteraction.Content.imageStructured(_:), v5);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(v41, v11, v5);
        return;
      case 0xBu:
        sub_100005D4C(&qword_10006F7A8);
        v39 = v44;
        v40 = v45;
        *v9 = v44;
        v9[1] = v40;
        sub_100037234(v39, v40);
        sub_1000369A4(v42, v43);
        if (!v2)
        {

          sub_100012720(v39, v40);
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for FBKSInteraction.Content.sketchStructured(_:), v5);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 32))(v41, v9, v5);
          return;
        }

        sub_100012720(v39, v40);
LABEL_18:
        v32 = v39;
        v33 = v40;
        break;
      default:
        swift_bridgeObjectRelease(v43);
        v38 = sub_10001B348();
        v29 = swift_allocError(&type metadata for StorageError, v38, 0, 0);
        v31 = 1;
        goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v43);
    v28 = sub_10001B348();
    v29 = swift_allocError(&type metadata for StorageError, v28, 0, 0);
    v31 = 5;
LABEL_8:
    *v30 = v31;
    swift_willThrow(v29);

    v32 = v44;
    v33 = v45;
  }
  sub_100012720(v32, v33);
}

uint64_t sub_1000369A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v6);
  v9 = String.data(using:allowLossyConversion:)(v8, 0, a1, a2);
  v11 = v10;
  swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 == 15)
  {
    v12 = sub_10001B348();
    v13 = swift_allocError(&type metadata for StorageError, v12, 0, 0);
    *v14 = 9;
    return swift_willThrow(v13);
  }
  else
  {
    v16 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = JSONDecoder.init()();
    v18 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    sub_1000371D8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v18);
    sub_100037220(v9, v11);
    return swift_release(v17);
  }
}

uint64_t sub_100036B08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100036B34 + 4 * byte_10005A650[a1]))(1954047316, 0xE400000000000000);
}

uint64_t sub_100036B34()
{
  return 0x6567616D49;
}

uint64_t sub_100036B48()
{
  return 0x6F69647541;
}

uint64_t sub_100036B5C()
{
  return 0x74697277646E6148;
}

uint64_t sub_100036B7C()
{
  return 0x686374656B53;
}

uint64_t sub_100036B90()
{
  return 0x65542B6567616D49;
}

uint64_t sub_100036BAC()
{
  return 0x542B686374656B53;
}

uint64_t sub_100036BCC()
{
  return 0x6F65646956;
}

uint64_t sub_100036BE0()
{
  return 0x6320656372756F53;
}

uint64_t sub_100036C00()
{
  return 0x7275746375727453;
}

unint64_t sub_100036C1C()
{
  return 0xD000000000000010;
}

unint64_t sub_100036C38()
{
  return 0xD000000000000011;
}

uint64_t sub_100036C58()
{
  return 0x6163696669746F4ELL;
}

uint64_t sub_100036C78()
{
  return 0x73656D206C69614DLL;
}

uint64_t sub_100036C98()
{
  return 0x696A6F6D45;
}

uint64_t sub_100036CAC()
{
  return 1280136264;
}

unint64_t sub_100036CB8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000694E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t sub_100036D00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  v2 = type metadata accessor for FBKSInteraction.Content(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for FBKSInteraction.Content.text(_:))
  {
    v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v7(a1, v2);
    v7((uint64_t)v5, v2);
    return 0;
  }
  else if (v6 == enum case for FBKSInteraction.Content.image(_:))
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v9(a1, v2);
    v9((uint64_t)v5, v2);
    return 1;
  }
  else if (v6 == enum case for FBKSInteraction.Content.audio(_:))
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v10(a1, v2);
    v10((uint64_t)v5, v2);
    return 2;
  }
  else if (v6 == enum case for FBKSInteraction.Content.handwriting(_:))
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v11(a1, v2);
    v11((uint64_t)v5, v2);
    return 3;
  }
  else if (v6 == enum case for FBKSInteraction.Content.sketch(_:))
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v12(a1, v2);
    v12((uint64_t)v5, v2);
    return 4;
  }
  else if (v6 == enum case for FBKSInteraction.Content.imageText(_:))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v13(a1, v2);
    v13((uint64_t)v5, v2);
    return 5;
  }
  else if (v6 == enum case for FBKSInteraction.Content.sketchText(_:))
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v14(a1, v2);
    v14((uint64_t)v5, v2);
    return 6;
  }
  else if (v6 == enum case for FBKSInteraction.Content.video(_:))
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v15(a1, v2);
    v15((uint64_t)v5, v2);
    return 7;
  }
  else if (v6 == enum case for FBKSInteraction.Content.sourceCode(_:))
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v16(a1, v2);
    v16((uint64_t)v5, v2);
    return 8;
  }
  else if (v6 == enum case for FBKSInteraction.Content.structured(_:))
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v17(a1, v2);
    v17((uint64_t)v5, v2);
    return 9;
  }
  else if (v6 == enum case for FBKSInteraction.Content.imageStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_100012720(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
    v18 = &v5[*(int *)(sub_100005D4C(&qword_10006F7B0) + 48)];
    v19 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    return 10;
  }
  else if (v6 == enum case for FBKSInteraction.Content.sketchStructured(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    sub_100012720(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
    v20 = &v5[*(int *)(sub_100005D4C(&qword_10006F7A8) + 48)];
    v21 = type metadata accessor for FBKSInteraction.StructuredValue(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    return 11;
  }
  else if (v6 == enum case for FBKSInteraction.Content.notification(_:))
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v22(a1, v2);
    v22((uint64_t)v5, v2);
    return 12;
  }
  else if (v6 == enum case for FBKSInteraction.Content.mailMessage(_:))
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v23(a1, v2);
    v23((uint64_t)v5, v2);
    return 13;
  }
  else if (v6 == enum case for FBKSInteraction.Content.emoji(_:))
  {
    v24 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v24(a1, v2);
    v24((uint64_t)v5, v2);
    return 14;
  }
  else if (v6 == enum case for FBKSInteraction.Content.html(_:))
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v25(a1, v2);
    v25((uint64_t)v5, v2);
    return 15;
  }
  else
  {
    v26 = sub_10001B348();
    v27 = swift_allocError(&type metadata for StorageError, v26, 0, 0);
    *v28 = 6;
    swift_willThrow(v27);
    v29 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v29(a1, v2);
    return ((uint64_t (*)(char *, uint64_t))v29)(v5, v2);
  }
}

unint64_t sub_1000371D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10006FE08;
  if (!qword_10006FE08)
  {
    v1 = type metadata accessor for FBKSInteraction.StructuredValue(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FBKSInteraction.StructuredValue, v1);
    atomic_store(result, (unint64_t *)&qword_10006FE08);
  }
  return result;
}

uint64_t sub_100037220(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100012720(result, a2);
  return result;
}

uint64_t sub_100037234(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100037278()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_10006FE10);
  sub_1000097B4(v0, (uint64_t)qword_10006FE10);
  v1 = static Strings.Daemon.loggingSubsystem.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_1000372D8(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100005D4C(&qword_10006F090);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100037364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch(sub_1000373C8, 0, 0);
}

uint64_t sub_1000373C8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = v0 + 72;
  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v1 = v0 + 16;
  v2 = (_BYTE *)(v0 + 124);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000097B4(v3, (uint64_t)qword_10006FE10);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v36 = v8;
    *(_DWORD *)v7 = 136446210;
    *(_QWORD *)(v0 + 72) = sub_1000572F8(0xD000000000000019, 0x800000010005BE80, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v0 + 80);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s ", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  *v2 = 0;
  v9 = SBSGetScreenLockStatus(v0 + 124);
  v10 = v9;
  v11 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = v10 != 0;
    v14 = swift_slowAlloc(18, -1);
    v15 = swift_slowAlloc(32, -1);
    v36 = v15;
    *(_DWORD *)v14 = 67240450;
    *(_DWORD *)(v0 + 120) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 124);
    *(_WORD *)(v14 + 8) = 2082;
    swift_beginAccess(v0 + 124, v0 + 40, 0, 0);
    v16 = DarwinBoolean.description.getter(*v2);
    v18 = v17;
    *(_QWORD *)(v0 + 64) = sub_1000572F8(v16, v17, &v36);
    v1 = v0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v35);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Is device locked? [%{BOOL,public}d] passcodeRequired [%{public}s]", (uint8_t *)v14, 0x12u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }

  v19 = swift_beginAccess(v0 + 124, v1, 0, 0);
  if (*v2)
  {
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Detected race condition with remote alert launching while device is locked.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = sub_10000C7E8();
    v24 = swift_allocError(&type metadata for FeedbackdError, v23, 0, 0);
    *v25 = 8;
    swift_willThrow(v24);
    v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  v28 = *(_QWORD *)(v0 + 88);
  v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RemoteAlertManager(0)), "init");
  v30 = *(void **)(v28 + 16);
  *(_QWORD *)(v28 + 16) = v29;

  v31 = *(void **)(v28 + 16);
  *(_QWORD *)(v0 + 96) = v31;
  if (!v31)
  {
    v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  v32 = dword_10006FFA4;
  v33 = v31;
  v34 = (_QWORD *)swift_task_alloc(v32);
  *(_QWORD *)(v0 + 104) = v34;
  *v34 = v0;
  v34[1] = sub_100037854;
  v34[2] = *(_QWORD *)(v0 + 80);
  v34[3] = v33;
  return swift_task_switch(sub_100037A20, 0, 0);
}

uint64_t sub_100037854()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100037964;
  }
  else
  {

    v4 = sub_10003790C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003790C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037964()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000379C4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for LaunchController()
{
  return objc_opt_self(_TtC9feedbackd16LaunchController);
}

uint64_t sub_100037A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100037A20, 0, 0);
}

uint64_t sub_100037A20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = swift_allocObject(&unk_10006A6B0, 24, 7);
  v0[4] = v3;
  swift_unknownObjectWeakInit(v3 + 16, v1);
  v4 = swift_task_alloc(32);
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_100037AE8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100037AE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100037B68;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 40);
    swift_release(*(_QWORD *)(v2 + 32));
    swift_task_dealloc(v5);
    v4 = sub_100037B5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100037B5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100037B68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100037BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  char *v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t inited;
  unint64_t v23;
  Class isa;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  _QWORD v38[3];
  char v39[112];
  char v40[32];

  v4 = sub_100005D4C(&qword_100070028);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v40, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = (char *)Strong;
    v9 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
    v10 = String._bridgeToObjectiveC()();
    v11 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v9, "initWithServiceName:viewControllerClassName:", v10, v11);

    v12 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext), "init");
    v13 = objc_msgSend((id)objc_opt_self(NSXPCListener), "anonymousListener");
    objc_msgSend(v13, "setDelegate:", v8);
    v14 = objc_msgSend(v13, "endpoint");
    v15 = objc_msgSend(v14, "_endpoint");
    objc_msgSend(v12, "setXpcEndpoint:", v15);
    swift_unknownObjectRelease(v15);
    v16 = type metadata accessor for FBKSRemoteAlertRequest(0);
    v17 = sub_100009BE4(&qword_100070030, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSRemoteAlertRequest, (uint64_t)&protocol conformance descriptor for FBKSRemoteAlertRequest);
    v18 = JSONCodable.encode()(v16, v17);
    v20 = v19;
    v21 = sub_100005D4C(&qword_10006F660);
    inited = swift_initStackObject(v21, v39);
    *(_OWORD *)(inited + 16) = xmmword_100059440;
    v36 = v13;
    v38[0] = 0x74736575716572;
    v38[1] = 0xE700000000000000;
    sub_100037234(v18, v20);
    AnyHashable.init<A>(_:)(v38, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Data;
    *(_QWORD *)(inited + 72) = v18;
    *(_QWORD *)(inited + 80) = v20;
    v23 = sub_100014354(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    objc_msgSend(v12, "setUserInfo:", isa);

    v25 = (void *)objc_opt_self(SBSRemoteAlertHandle);
    v26 = objc_msgSend(v25, "newHandleWithDefinition:configurationContext:", v37, v12);
    objc_msgSend(v26, "registerObserver:", v8);
    v27 = sub_100005D4C(&qword_10006FFB0);
    v28 = a1;
    v29 = *(_QWORD *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v6, v28, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v6, 0, 1, v27);
    v30 = (uint64_t)&v8[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation];
    swift_beginAccess(&v8[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation], v38, 33, 0);
    sub_10003A250((uint64_t)v6, v30);
    swift_endAccess(v38);
    v31 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertActivationContext), "init");
    objc_msgSend(v26, "activateWithContext:", v31);

    v32 = *(void **)&v8[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle];
    *(_QWORD *)&v8[OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle] = v26;
    v33 = v26;

    v34 = v36;
    objc_msgSend(v36, "resume");
    sub_100012720(v18, v20);

  }
}

uint64_t sub_1000381AC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v2 = v1;
  v4 = sub_100005D4C(&qword_10006FFB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D4C(&qword_100070028);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_1000097B4(v14, (uint64_t)qword_10006FE10);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v27 = v2;
    v18 = swift_slowAlloc(12, -1);
    v28 = v7;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v31[0] = v20;
    v26 = v4;
    *(_DWORD *)v19 = 136446210;
    v29 = sub_1000572F8(0xD000000000000022, 0x800000010005BDB0, v31);
    v4 = v26;
    v2 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v21 = v19;
    v7 = v28;
    swift_slowDealloc(v21, -1, -1);
  }

  objc_msgSend(a1, "unregisterObserver:", v2);
  v22 = v2
      + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
  swift_beginAccess(v22, v31, 0, 0);
  sub_10003A1F0(v22, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    sub_100009730((uint64_t)v13, &qword_100070028);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v13, v4);
    v23 = sub_100009730((uint64_t)v13, &qword_100070028);
    CheckedContinuation.resume(returning:)(v23, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
  swift_beginAccess(v22, &v29, 33, 0);
  sub_10003A250((uint64_t)v11, v22);
  return swift_endAccess(&v29);
}

uint64_t sub_100038528(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __objc2_class_ro **p_info;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  char *v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53[3];

  v3 = v2;
  v6 = sub_100005D4C(&qword_10006FFB0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_100070028);
  v10 = __chkstk_darwin(v9);
  v12 = ((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v45 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v45 - v16;
  objc_msgSend(a1, "unregisterObserver:", v3);
  p_info = (__objc2_class_ro **)(_TtC9feedbackd14CFBBiomeReader + 32);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10006EE58 != -1)
      swift_once(&qword_10006EE58, sub_100037278);
    v19 = type metadata accessor for Logger(0);
    sub_1000097B4(v19, (uint64_t)qword_10006FE10);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v49 = v21;
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v46 = (uint64_t *)swift_slowAlloc(8, -1);
      v47 = swift_slowAlloc(32, -1);
      v48 = v3;
      v53[0] = v47;
      *(_DWORD *)v23 = 136446466;
      v51 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005BD80, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      *(_WORD *)(v23 + 12) = 2112;
      swift_errorRetain(a2);
      v24 = v6;
      v25 = _swift_stdlib_bridgeErrorToNSError(a2);
      v51 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      v26 = v46;
      *v46 = v25;
      v6 = v24;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      v27 = v49;
      _os_log_impl((void *)&_mh_execute_header, v49, v22, "%{public}s Error: %@", (uint8_t *)v23, 0x16u);
      v28 = sub_100005D4C(&qword_10006F418);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      v29 = v47;
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v3 = v48;
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    p_info = _TtC9feedbackd14CFBBiomeReader.info;
    v40 = v3
        + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
    swift_beginAccess(v3+ OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation, v53, 0, 0);
    sub_10003A1F0(v40, (uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6))
    {
      swift_errorRelease(a2);
      v39 = (uint64_t)v17;
      goto LABEL_15;
    }
    v41 = v50;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v50, v17, v6);
    sub_100009730((uint64_t)v17, &qword_100070028);
    v51 = a2;
    CheckedContinuation.resume(throwing:)(&v51, v6);
LABEL_18:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v41, v6);
    goto LABEL_19;
  }
  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_1000097B4(v30, (uint64_t)qword_10006FE10);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(12, -1);
    v49 = v12;
    v35 = (uint8_t *)v34;
    v36 = swift_slowAlloc(32, -1);
    v53[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v51 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005BD80, v53);
    p_info = _TtC9feedbackd14CFBBiomeReader.info;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v37 = v35;
    v12 = v49;
    swift_slowDealloc(v37, -1, -1);
  }

  v38 = (uint64_t)p_info[479] + v3;
  swift_beginAccess(v38, v53, 0, 0);
  sub_10003A1F0(v38, (uint64_t)v15);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    v41 = v50;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v50, v15, v6);
    v42 = sub_100009730((uint64_t)v15, &qword_100070028);
    CheckedContinuation.resume(returning:)(v42, v6);
    goto LABEL_18;
  }
  v39 = (uint64_t)v15;
LABEL_15:
  sub_100009730(v39, &qword_100070028);
LABEL_19:
  (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  v43 = (uint64_t)p_info[479] + v3;
  swift_beginAccess(v43, &v51, 33, 0);
  sub_10003A250((uint64_t)v12, v43);
  return swift_endAccess(&v51);
}

id sub_100038C04()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteAlertManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100038C78()
{
  return type metadata accessor for RemoteAlertManager(0);
}

uint64_t type metadata accessor for RemoteAlertManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10006FF90;
  if (!qword_10006FF90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RemoteAlertManager);
  return result;
}

void sub_100038CBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100038D30(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100038D30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10006FFA8)
  {
    v2 = sub_100021E50(&qword_10006FFB0);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10006FFA8);
  }
}

void sub_100038D88()
{
  sub_100038DA0("feedback remote view controller connection invalidated");
}

void sub_100038D94()
{
  sub_100038DA0("feedback remote view controller connection interrupted");
}

void sub_100038DA0(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_1000097B4(v2, (uint64_t)qword_10006FE10);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a1, v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

}

uint64_t sub_100038F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[98] = a5;
  v5[97] = a4;
  v5[96] = a3;
  v5[95] = a2;
  v5[94] = a1;
  v6 = sub_100005D4C(&qword_100070020);
  v5[99] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v5[100] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[101] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[102] = swift_task_alloc(v9);
  v5[103] = swift_task_alloc(v9);
  v5[104] = swift_task_alloc(v9);
  return swift_task_switch(sub_100038FD8, 0, 0);
}

uint64_t sub_100038FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  Class isa;
  id v75;
  uint64_t v76;
  uint64_t v77;
  NSString v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  _QWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98[3];

  v97 = v0 + 736;
  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v1 = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 840) = sub_1000097B4(v3, (uint64_t)qword_10006FE10);
  swift_bridgeObjectRetain_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 776);
  v9 = *(_QWORD *)(v0 + 760);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 752);
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v98[0] = v12;
    *(_DWORD *)v11 = 136446466;
    *(_QWORD *)(v0 + 736) = sub_1000572F8(0xD000000000000019, 0x800000010005BD20, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v97, v0 + 744);
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 744) = sub_1000572F8(v10, v9, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752);
    swift_bridgeObjectRelease_n(v9, 3);
    swift_bridgeObjectRelease_n(v8, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s form %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 760), 2);
    swift_bridgeObjectRelease_n(v8, 2);
  }

  v13 = *(_QWORD *)(v0 + 776);
  v14 = *(_QWORD *)(v0 + 768);
  v15 = *(_QWORD *)(v0 + 760);
  v16 = *(_QWORD *)(v0 + 752);
  v17 = sub_100014354((uint64_t)&_swiftEmptyArrayStorage);
  v18 = (void *)sub_10000FEC0(v16, v15, v14, v13);
  v19 = objc_msgSend(v18, "asFBAURLSchemeWithIsSurvey:", FormItem.isSurvey.getter() & 1);

  if (!v19)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 808) + 56))(*(_QWORD *)(v0 + 792), 1, 1, *(_QWORD *)(v0 + 800));
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(v0 + 824);
  v21 = *(_QWORD *)(v0 + 808);
  v22 = *(_QWORD *)(v0 + 800);
  v23 = *(_QWORD *)(v0 + 792);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v24(v23, v20, v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
LABEL_11:
    v44 = *(_QWORD *)(v0 + 792);
    swift_bridgeObjectRelease(v17);
    sub_100009730(v44, &qword_100070020);
    v45 = sub_1000113F4(0xD00000000000001ALL, 0x800000010005BCB0);
    swift_willThrow(v45);
LABEL_12:
    v46 = *(_QWORD *)(v0 + 824);
    v47 = *(_QWORD *)(v0 + 816);
    v48 = *(_QWORD *)(v0 + 792);
    swift_task_dealloc(*(_QWORD *)(v0 + 832));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v92 = v17;
  v25 = v0 + 120;
  v95 = v0 + 160;
  v94 = v0 + 280;
  v89 = (_OWORD *)(v0 + 320);
  v90 = v0 + 200;
  v86 = (_QWORD *)(v0 + 384);
  v91 = (_OWORD *)(v0 + 448);
  v87 = (_OWORD *)(v0 + 480);
  v88 = v0 + 240;
  v26 = *(_QWORD *)(v0 + 832);
  v27 = *(_QWORD *)(v0 + 816);
  v93 = (_OWORD *)(v0 + 576);
  v96 = (_OWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 808);
  v29 = *(_QWORD *)(v0 + 800);
  v24(v26, *(_QWORD *)(v0 + 792), v29);
  v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v30 = v85(v27, v26, v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  v33 = os_log_type_enabled(v31, v32);
  v34 = *(_QWORD *)(v0 + 816);
  v35 = *(_QWORD *)(v0 + 808);
  v36 = *(_QWORD *)(v0 + 800);
  if (v33)
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v98[0] = v38;
    *(_DWORD *)v37 = 136446210;
    v39 = sub_100009BE4(&qword_10006FDF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v36, v39);
    v42 = v41;
    *(_QWORD *)(v0 + 728) = sub_1000572F8(v40, v41, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v97);
    v43 = v42;
    v25 = v0 + 120;
    swift_bridgeObjectRelease(v43);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Launching FBA with [%{public}s]", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v35 + 8))(*(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 800));
  }

  v50 = *(_QWORD *)(v0 + 832);
  v51 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 688) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPayloadURL);
  *(_QWORD *)(v0 + 696) = v52;
  AnyHashable.init<A>(_:)(v0 + 688, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v0 + 408) = v51;
  v53 = sub_100011E60(v86);
  v85((uint64_t)v53, v50, v51);
  sub_100011684(v86, v87);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v92);
  v98[0] = v92;
  sub_100017D94(v87, v88, isUniquelyReferenced_nonNull_native);
  v55 = v98[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000126EC(v88);
  *(_QWORD *)(v0 + 704) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyLaunchIntent);
  *(_QWORD *)(v0 + 712) = v56;
  AnyHashable.init<A>(_:)(v0 + 704, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v0 + 376) = &type metadata for Int;
  *(_QWORD *)(v0 + 352) = 3;
  sub_100011684((_OWORD *)(v0 + 352), v89);
  v57 = swift_isUniquelyReferenced_nonNull_native(v55);
  v98[0] = v55;
  sub_100017D94(v89, v90, v57);
  v58 = v98[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000126EC(v90);
  *(_QWORD *)(v0 + 672) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
  *(_QWORD *)(v0 + 680) = v59;
  AnyHashable.init<A>(_:)(v0 + 672, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v0 + 440) = &type metadata for Bool;
  *(_BYTE *)(v0 + 416) = 1;
  sub_100011684((_OWORD *)(v0 + 416), v91);
  v60 = swift_isUniquelyReferenced_nonNull_native(v58);
  v98[0] = v58;
  sub_100017D94(v91, v94, v60);
  v61 = v98[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000126EC(v94);
  *(_QWORD *)(v0 + 656) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
  *(_QWORD *)(v0 + 664) = v62;
  AnyHashable.init<A>(_:)(v0 + 656, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(v0 + 568) = &type metadata for Bool;
  *(_BYTE *)(v0 + 544) = 1;
  sub_100011684((_OWORD *)(v0 + 544), v93);
  v63 = swift_isUniquelyReferenced_nonNull_native(v61);
  v98[0] = v61;
  sub_100017D94(v93, v95, v63);
  v64 = v98[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000126EC(v95);
  *(_QWORD *)(v0 + 640) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyLaunchOrigin);
  *(_QWORD *)(v0 + 648) = v65;
  v66 = AnyHashable.init<A>(_:)(v0 + 640, &type metadata for String, &protocol witness table for String);
  v67 = static Strings.Daemon.bundleIdentifier.getter(v66);
  *(_QWORD *)(v0 + 536) = &type metadata for String;
  *(_QWORD *)(v0 + 512) = v67;
  *(_QWORD *)(v0 + 520) = v68;
  sub_100011684((_OWORD *)(v0 + 512), v96);
  v69 = swift_isUniquelyReferenced_nonNull_native(v64);
  v98[0] = v64;
  sub_100017D94(v96, v25, v69);
  v70 = v98[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000126EC(v25);
  v71 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
  *(_QWORD *)(v0 + 848) = v71;
  if (!v71)
  {
    v81 = *(_QWORD *)(v0 + 832);
    v82 = *(_QWORD *)(v0 + 808);
    v83 = *(_QWORD *)(v0 + 800);
    swift_bridgeObjectRelease(v70);
    v84 = sub_1000113F4(0xD00000000000001BLL, 0x800000010005BCD0);
    swift_willThrow(v84);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v83);
    goto LABEL_12;
  }
  v72 = v71;
  v73 = v0 + 16;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v70);
  v75 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);
  *(_QWORD *)(v0 + 856) = v75;

  static Strings.fbaBundleIdentifier.getter();
  v77 = v76;
  v78 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 864) = v78;
  swift_bridgeObjectRelease(v77);
  *(_QWORD *)(v0 + 56) = v0 + 720;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1000399E0;
  v79 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
  v80 = (_QWORD *)(v0 + 80);
  v80[1] = 0x40000000;
  v80[2] = sub_1000372D8;
  v80[3] = &unk_10006A638;
  v80[4] = v79;
  objc_msgSend(v72, "openApplication:withOptions:completion:", v78, v75, v80);
  return swift_continuation_await(v73);
}

uint64_t sub_1000399E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 872) = v1;
  if (v1)
    v2 = sub_100039B5C;
  else
    v2 = sub_100039A40;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100039A40()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 864);

  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Launched FBA", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void **)(v0 + 848);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 824);
  v8 = *(_QWORD *)(v0 + 816);
  v9 = *(_QWORD *)(v0 + 808);
  v10 = *(_QWORD *)(v0 + 800);
  v11 = *(_QWORD *)(v0 + 792);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v10);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039B5C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 864);
  v2 = *(void **)(v0 + 856);
  v3 = *(void **)(v0 + 848);
  v4 = *(_QWORD *)(v0 + 832);
  v5 = *(_QWORD *)(v0 + 808);
  v6 = *(_QWORD *)(v0 + 800);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(_QWORD *)(v0 + 824);
  v8 = *(_QWORD *)(v0 + 816);
  v9 = *(_QWORD *)(v0 + 792);
  swift_task_dealloc(*(_QWORD *)(v0 + 832));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039D90(void *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  void **v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  void (*v11)();
  uint64_t v12;

  v11 = sub_100038D88;
  v12 = 0;
  v7 = _NSConcreteStackBlock;
  v8 = 1107296256;
  v9 = sub_10004F4CC;
  v10 = &unk_10006A650;
  v3 = _Block_copy(&v7);
  objc_msgSend(a1, "setInvalidationHandler:", v3);
  _Block_release(v3);
  v11 = sub_100038D94;
  v12 = 0;
  v7 = _NSConcreteStackBlock;
  v8 = 1107296256;
  v9 = sub_10004F4CC;
  v10 = &unk_10006A678;
  v4 = _Block_copy(&v7);
  objc_msgSend(a1, "setInterruptionHandler:", v4);
  _Block_release(v4);
  objc_msgSend(a1, "resume");
  v5 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP15FeedbackService33RemoteViewControllerReplyProtocol_);
  objc_msgSend(a1, "setExportedInterface:", v5);

  objc_msgSend(a1, "setExportedObject:", v1);
  return 1;
}

uint64_t sub_100039EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v4 = sub_100005D4C(&qword_10006FFB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005D4C(&qword_100070028);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EE58 != -1)
    swift_once(&qword_10006EE58, sub_100037278);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_1000097B4(v11, (uint64_t)qword_10006FE10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v30 = a2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v29 = v5;
    v18 = v7;
    v19 = v17;
    v32[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v31 = sub_1000572F8(0xD000000000000035, 0x800000010005BD40, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    v7 = v18;
    v5 = v29;
    swift_slowDealloc(v20, -1, -1);
    v21 = v16;
    a2 = v30;
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle;
  v23 = *(void **)(a1
                 + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_remoteAlertHandle);
  if (v23)
  {
    objc_msgSend(v23, "unregisterObserver:", a1);
    v23 = *(void **)(a1 + v22);
  }
  objc_msgSend(v23, "invalidate");
  v24 = a1
      + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation;
  swift_beginAccess(a1 + OBJC_IVAR____TtC9feedbackdP33_109D9EA95C5E46A2F39C291451DCB14618RemoteAlertManager_checkedThrowingContinuation, v32, 0, 0);
  sub_10003A1F0(v24, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
  {
    sub_100009730((uint64_t)v10, &qword_100070028);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    sub_100009730((uint64_t)v10, &qword_100070028);
    v25 = sub_10000C7E8();
    v26 = swift_allocError(&type metadata for FeedbackdError, v25, 0, 0);
    *v27 = 8;
    v31 = v26;
    CheckedContinuation.resume(throwing:)(&v31, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10003A1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_100070028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003A238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003A248(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10003A250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_100070028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003A298()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10003A2BC(uint64_t a1)
{
  uint64_t v1;

  sub_100037BA4(a1, *(_QWORD *)(v1 + 16));
}

void sub_10003A2CC(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_10003A318()
{
  return 0xD00000000000001DLL;
}

_QWORD *sub_10003A3EC(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;

  v8 = sub_100005D4C(&qword_1000701A0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (void **)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (void **)((char *)&v34 - v13);
  v15 = sub_10003A5B4(a1, a2, a3, a4);
  v16 = v15;
  v17 = v15[2];
  if (v17)
  {
    v37 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    v18 = (uint64_t)v16 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v19 = *(_QWORD *)(v9 + 72);
    v35 = v16;
    v36 = v19;
    do
    {
      sub_10004299C(v18, (uint64_t)v14);
      v20 = *(int *)(v8 + 48);
      v21 = (char *)v12 + v20;
      v22 = (char *)v14 + v20;
      v23 = *v14;
      *v12 = *v14;
      v24 = type metadata accessor for URL(0);
      v25 = v8;
      v26 = *(_QWORD *)(v24 - 8);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v21, v22, v24);
      v27 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28 = v23;
      v27(v21, v24);
      v8 = v25;
      v29 = sub_100009730((uint64_t)v14, &qword_1000701A0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v30 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v28);
      specialized ContiguousArray._endMutation()(v31);
      v18 += v36;
      --v17;
    }
    while (v17);
    v32 = v37;
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    return &_swiftEmptyArrayStorage;
  }
  return v32;
}

_QWORD *sub_10003A5B4(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSString *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  os_log_t v80;
  id v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  char *v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t);
  void (*v113)(char *, uint64_t);
  os_log_t v115;
  void (*v116)(char *, uint64_t);
  id v117;
  void *v118;
  _QWORD *v119;
  char *v120;
  __int128 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  char *v131;
  unsigned int (*v132)(char *, uint64_t, uint64_t);
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136[3];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v8 = sub_100005D4C(&qword_1000701A0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v9 = __chkstk_darwin(v8);
  v126 = (os_log_t *)((char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v122 = (char *)&v115 - v12;
  __chkstk_darwin(v11);
  v125 = (uint64_t *)((char *)&v115 - v13);
  v14 = type metadata accessor for NSFastEnumerationIterator(0);
  v127 = *(_QWORD *)(v14 - 8);
  v128 = v14;
  __chkstk_darwin(v14);
  v129 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D4C(&qword_100070020);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v115 - v20;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v131 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v133 = (char *)&v115 - v27;
  v28 = __chkstk_darwin(v26);
  v134 = (char *)&v115 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v115 - v30;
  sub_10003406C(a1, a2, a3, a4, 0, (unint64_t)v21);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v32(v21, 1, v22) == 1)
  {
    sub_100009730((uint64_t)v21, &qword_100070020);
    return &_swiftEmptyArrayStorage;
  }
  v132 = v32;
  v130 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v130(v31, v21, v22);
  v33 = (void *)objc_opt_self(NSFileManager);
  v34 = objc_msgSend(v33, "defaultManager");
  v35 = objc_msgSend(v33, "defaultManager");
  v36 = sub_100005D4C(&qword_10006FDE8);
  v37 = swift_allocObject(v36, 40, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100059440;
  *(_QWORD *)(v37 + 32) = NSURLIsDirectoryKey;
  v38 = NSURLIsDirectoryKey;
  v39 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v31, v37, 5, 0, 0);

  swift_bridgeObjectRelease(v37);
  if (!v39)
  {
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v99 = type metadata accessor for Logger(0);
    sub_1000097B4(v99, (uint64_t)SharedLog);
    v100 = v134;
    v101 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v134, v31, v22);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = v100;
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v120 = v31;
      v107 = v106;
      v136[0] = v106;
      *(_DWORD *)v105 = 136446210;
      v108 = v104;
      v109 = URL.path.getter();
      v111 = v110;
      v138 = sub_1000572F8(v109, v110, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);
      swift_bridgeObjectRelease(v111);
      v112 = *(void (**)(char *, uint64_t))(v23 + 8);
      v112(v108, v22);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed to read directory [%{public}s]", v105, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      v112(v120, v22);
    }
    else
    {

      v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v100, v22);
      v113(v31, v22);
    }
    return &_swiftEmptyArrayStorage;
  }
  v120 = v31;
  v40 = v129;
  v41 = NSEnumerator.makeIterator()();
  NSFastEnumerationIterator.next()(v136, v41);
  if (!v137)
  {
    v43 = &_swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  v134 = 0;
  v43 = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v42 = 136446210;
  v121 = v42;
  v44 = v133;
  v118 = v39;
  do
  {
    v119 = v43;
    v46 = v131;
    v45 = v132;
    while (1)
    {
      v48 = swift_dynamicCast(v19, v136, (char *)&type metadata for Any + 8, v22, 6);
      v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      if ((v48 & 1) != 0)
        break;
      v49(v19, 1, 1, v22);
LABEL_8:
      v47 = sub_100009730((uint64_t)v19, &qword_100070020);
LABEL_9:
      NSFastEnumerationIterator.next()(v136, v47);
      if (!v137)
      {
        v39 = v118;
        v43 = v119;
        goto LABEL_39;
      }
    }
    v49(v19, 0, 1, v22);
    if (v45(v19, 1, v22) == 1)
      goto LABEL_8;
    v130(v44, v19, v22);
    v50 = v44;
    v51 = v134;
    v52 = Data.init(contentsOf:options:)(v50, 0);
    if (v51)
    {
      v134 = 0;
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v58 = type metadata accessor for Logger(0);
      sub_1000097B4(v58, (uint64_t)SharedLog);
      swift_errorRetain(v51);
      v59 = swift_errorRetain(v51);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(12, -1);
        v63 = (id)swift_slowAlloc(32, -1);
        v138 = (uint64_t)v63;
        *(_DWORD *)v62 = v121;
        v135 = v51;
        swift_errorRetain(v51);
        v64 = sub_100005D4C(&qword_10006F090);
        v65 = String.init<A>(describing:)(&v135, v64);
        v67 = v66;
        *(_QWORD *)(v62 + 4) = sub_1000572F8(v65, v66, &v138);
        v68 = v67;
        v40 = v129;
        swift_bridgeObjectRelease(v68);
        swift_errorRelease(v51);
        swift_errorRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to read item with error: [%{public}s]", (uint8_t *)v62, 0xCu);
        swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
        v69 = v63;
        v46 = v131;
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        swift_errorRelease(v51);
        swift_errorRelease(v51);
      }
      swift_errorRelease(v51);
      v44 = v133;
      v47 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v133, v22);
      goto LABEL_20;
    }
    v54 = v52;
    v55 = v53;
    sub_10000A968(0, &qword_1000701A8, NSKeyedUnarchiver_ptr);
    v56 = type metadata accessor for FeedbackSubmission(0);
    v57 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v56, v54, v55, v56);
    v70 = (void *)v57;
    v134 = 0;
    if (!v57)
    {
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v71 = type metadata accessor for Logger(0);
      sub_1000097B4(v71, (uint64_t)SharedLog);
      v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v46, v133, v22);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc(12, -1);
        v117 = (id)swift_slowAlloc(32, -1);
        v138 = (uint64_t)v117;
        *(_DWORD *)v75 = v121;
        v76 = sub_100009BE4(&qword_10006FDF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v115 = v73;
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v22, v76);
        v79 = v78;
        *(_QWORD *)(v75 + 4) = sub_1000572F8(v77, v78, &v138);
        swift_bridgeObjectRelease(v79);
        v116 = *(void (**)(char *, uint64_t))(v23 + 8);
        v116(v131, v22);
        v80 = v115;
        _os_log_impl((void *)&_mh_execute_header, v115, v74, "Failed to decode NSError in [%{public}s]", (uint8_t *)v75, 0xCu);
        v81 = v117;
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        v82 = v75;
        v46 = v131;
        swift_slowDealloc(v82, -1, -1);
        sub_100012720(v54, v55);

        v44 = v133;
        v47 = ((uint64_t (*)(char *, uint64_t))v116)(v133, v22);
      }
      else
      {
        sub_100012720(v54, v55);

        v83 = *(void (**)(char *, uint64_t))(v23 + 8);
        v83(v46, v22);
        v44 = v133;
        v47 = ((uint64_t (*)(char *, uint64_t))v83)(v133, v22);
      }
LABEL_20:
      v45 = v132;
      goto LABEL_9;
    }
    v85 = v124;
    v84 = v125;
    v86 = *(int *)(v124 + 48);
    v87 = (char *)v125 + v86;
    *v125 = v57;
    v88 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v88((char *)v84 + v86, v133, v22);
    v89 = v88;
    v90 = *(int *)(v85 + 48);
    v91 = v122;
    v92 = &v122[v90];
    *(_QWORD *)v122 = v70;
    v89(&v91[v90], v87, v22);
    v93 = (char *)v126 + *(int *)(v85 + 48);
    *v126 = v70;
    v130(v93, v92, v22);
    v117 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0)
      v119 = (_QWORD *)sub_100057054(0, v119[2] + 1, 1, (unint64_t)v119);
    v40 = v129;
    v95 = v119[2];
    v94 = v119[3];
    if (v95 >= v94 >> 1)
      v119 = (_QWORD *)sub_100057054(v94 > 1, v95 + 1, 1, (unint64_t)v119);
    v96 = (unint64_t)v119;
    v119[2] = v95 + 1;
    sub_1000429F4((uint64_t)v126, v96+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v95, &qword_1000701A0);
    v97 = v54;
    v43 = (_QWORD *)v96;
    sub_100012720(v97, v55);

    sub_100009730((uint64_t)v125, &qword_1000701A0);
    v44 = v133;
    v98 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v133, v22);
    NSFastEnumerationIterator.next()(v136, v98);
    v39 = v118;
  }
  while (v137);
LABEL_39:

  (*(void (**)(char *, uint64_t))(v127 + 8))(v40, v128);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v120, v22);
  return v43;
}

_QWORD *sub_10003B128(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSString *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  os_log_t v80;
  id v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  char *v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t);
  void (*v113)(char *, uint64_t);
  os_log_t v115;
  void (*v116)(char *, uint64_t);
  id v117;
  void *v118;
  _QWORD *v119;
  char *v120;
  __int128 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, uint64_t);
  char *v131;
  unsigned int (*v132)(char *, uint64_t, uint64_t);
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136[3];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v8 = sub_100005D4C(&qword_10006FDF0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  v9 = __chkstk_darwin(v8);
  v126 = (os_log_t *)((char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v122 = (char *)&v115 - v12;
  __chkstk_darwin(v11);
  v125 = (uint64_t *)((char *)&v115 - v13);
  v14 = type metadata accessor for NSFastEnumerationIterator(0);
  v127 = *(_QWORD *)(v14 - 8);
  v128 = v14;
  __chkstk_darwin(v14);
  v129 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005D4C(&qword_100070020);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v115 - v20;
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v131 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v133 = (char *)&v115 - v27;
  v28 = __chkstk_darwin(v26);
  v134 = (char *)&v115 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v115 - v30;
  sub_10003406C(a1, a2, a3, a4, 0, (unint64_t)v21);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v32(v21, 1, v22) == 1)
  {
    sub_100009730((uint64_t)v21, &qword_100070020);
    return &_swiftEmptyArrayStorage;
  }
  v132 = v32;
  v130 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v130(v31, v21, v22);
  v33 = (void *)objc_opt_self(NSFileManager);
  v34 = objc_msgSend(v33, "defaultManager");
  v35 = objc_msgSend(v33, "defaultManager");
  v36 = sub_100005D4C(&qword_10006FDE8);
  v37 = swift_allocObject(v36, 40, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100059440;
  *(_QWORD *)(v37 + 32) = NSURLIsDirectoryKey;
  v38 = NSURLIsDirectoryKey;
  v39 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v31, v37, 5, 0, 0);

  swift_bridgeObjectRelease(v37);
  if (!v39)
  {
    if (qword_10006EEE0 != -1)
      swift_once(&qword_10006EEE0, sub_10004F6A4);
    v99 = type metadata accessor for Logger(0);
    sub_1000097B4(v99, (uint64_t)SharedLog);
    v100 = v134;
    v101 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v134, v31, v22);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = v100;
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v120 = v31;
      v107 = v106;
      v136[0] = v106;
      *(_DWORD *)v105 = 136446210;
      v108 = v104;
      v109 = URL.path.getter();
      v111 = v110;
      v138 = sub_1000572F8(v109, v110, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139);
      swift_bridgeObjectRelease(v111);
      v112 = *(void (**)(char *, uint64_t))(v23 + 8);
      v112(v108, v22);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed to read directory [%{public}s]", v105, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      v112(v120, v22);
    }
    else
    {

      v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v100, v22);
      v113(v31, v22);
    }
    return &_swiftEmptyArrayStorage;
  }
  v120 = v31;
  v40 = v129;
  v41 = NSEnumerator.makeIterator()();
  NSFastEnumerationIterator.next()(v136, v41);
  if (!v137)
  {
    v43 = &_swiftEmptyArrayStorage;
    goto LABEL_39;
  }
  v134 = 0;
  v43 = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v42 = 136446210;
  v121 = v42;
  v44 = v133;
  v118 = v39;
  do
  {
    v119 = v43;
    v46 = v131;
    v45 = v132;
    while (1)
    {
      v48 = swift_dynamicCast(v19, v136, (char *)&type metadata for Any + 8, v22, 6);
      v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      if ((v48 & 1) != 0)
        break;
      v49(v19, 1, 1, v22);
LABEL_8:
      v47 = sub_100009730((uint64_t)v19, &qword_100070020);
LABEL_9:
      NSFastEnumerationIterator.next()(v136, v47);
      if (!v137)
      {
        v39 = v118;
        v43 = v119;
        goto LABEL_39;
      }
    }
    v49(v19, 0, 1, v22);
    if (v45(v19, 1, v22) == 1)
      goto LABEL_8;
    v130(v44, v19, v22);
    v50 = v44;
    v51 = v134;
    v52 = Data.init(contentsOf:options:)(v50, 0);
    if (v51)
    {
      v134 = 0;
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v58 = type metadata accessor for Logger(0);
      sub_1000097B4(v58, (uint64_t)SharedLog);
      swift_errorRetain(v51);
      v59 = swift_errorRetain(v51);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(12, -1);
        v63 = (id)swift_slowAlloc(32, -1);
        v138 = (uint64_t)v63;
        *(_DWORD *)v62 = v121;
        v135 = v51;
        swift_errorRetain(v51);
        v64 = sub_100005D4C(&qword_10006F090);
        v65 = String.init<A>(describing:)(&v135, v64);
        v67 = v66;
        *(_QWORD *)(v62 + 4) = sub_1000572F8(v65, v66, &v138);
        v68 = v67;
        v40 = v129;
        swift_bridgeObjectRelease(v68);
        swift_errorRelease(v51);
        swift_errorRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to read item with error: [%{public}s]", (uint8_t *)v62, 0xCu);
        swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
        v69 = v63;
        v46 = v131;
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        swift_errorRelease(v51);
        swift_errorRelease(v51);
      }
      swift_errorRelease(v51);
      v44 = v133;
      v47 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v133, v22);
      goto LABEL_20;
    }
    v54 = v52;
    v55 = v53;
    sub_10000A968(0, &qword_1000701A8, NSKeyedUnarchiver_ptr);
    v56 = sub_10000A968(0, &qword_1000702E0, NSError_ptr);
    v57 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v56, v54, v55, v56);
    v70 = (void *)v57;
    v134 = 0;
    if (!v57)
    {
      if (qword_10006EEE0 != -1)
        swift_once(&qword_10006EEE0, sub_10004F6A4);
      v71 = type metadata accessor for Logger(0);
      sub_1000097B4(v71, (uint64_t)SharedLog);
      v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v46, v133, v22);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc(12, -1);
        v117 = (id)swift_slowAlloc(32, -1);
        v138 = (uint64_t)v117;
        *(_DWORD *)v75 = v121;
        v76 = sub_100009BE4(&qword_10006FDF8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v115 = v73;
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v22, v76);
        v79 = v78;
        *(_QWORD *)(v75 + 4) = sub_1000572F8(v77, v78, &v138);
        swift_bridgeObjectRelease(v79);
        v116 = *(void (**)(char *, uint64_t))(v23 + 8);
        v116(v131, v22);
        v80 = v115;
        _os_log_impl((void *)&_mh_execute_header, v115, v74, "Failed to decode NSError in [%{public}s]", (uint8_t *)v75, 0xCu);
        v81 = v117;
        swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        v82 = v75;
        v46 = v131;
        swift_slowDealloc(v82, -1, -1);
        sub_100012720(v54, v55);

        v44 = v133;
        v47 = ((uint64_t (*)(char *, uint64_t))v116)(v133, v22);
      }
      else
      {
        sub_100012720(v54, v55);

        v83 = *(void (**)(char *, uint64_t))(v23 + 8);
        v83(v46, v22);
        v44 = v133;
        v47 = ((uint64_t (*)(char *, uint64_t))v83)(v133, v22);
      }
LABEL_20:
      v45 = v132;
      goto LABEL_9;
    }
    v85 = v124;
    v84 = v125;
    v86 = *(int *)(v124 + 48);
    v87 = (char *)v125 + v86;
    *v125 = v57;
    v88 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
    v88((char *)v84 + v86, v133, v22);
    v89 = v88;
    v90 = *(int *)(v85 + 48);
    v91 = v122;
    v92 = &v122[v90];
    *(_QWORD *)v122 = v70;
    v89(&v91[v90], v87, v22);
    v93 = (char *)v126 + *(int *)(v85 + 48);
    *v126 = v70;
    v130(v93, v92, v22);
    v117 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0)
      v119 = (_QWORD *)sub_100057068(0, v119[2] + 1, 1, (unint64_t)v119);
    v40 = v129;
    v95 = v119[2];
    v94 = v119[3];
    if (v95 >= v94 >> 1)
      v119 = (_QWORD *)sub_100057068(v94 > 1, v95 + 1, 1, (unint64_t)v119);
    v96 = (unint64_t)v119;
    v119[2] = v95 + 1;
    sub_1000429F4((uint64_t)v126, v96+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v95, &qword_10006FDF0);
    v97 = v54;
    v43 = (_QWORD *)v96;
    sub_100012720(v97, v55);

    sub_100009730((uint64_t)v125, &qword_10006FDF0);
    v44 = v133;
    v98 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v133, v22);
    NSFastEnumerationIterator.next()(v136, v98);
    v39 = v118;
  }
  while (v137);
LABEL_39:

  (*(void (**)(char *, uint64_t))(v127 + 8))(v40, v128);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v120, v22);
  return v43;
}

uint64_t sub_10003BCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_100070038);
  v1 = sub_1000097B4(v0, (uint64_t)qword_100070038);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  return Logger.init(subsystem:category:)(v2);
}

void sub_10003BD0C(uint64_t a1, uint64_t a2, uint64_t a3, id a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  NSObject *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)(void);
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void (*v131)(void);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[2];

  v7 = v6;
  v132 = a6;
  v13 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v13);
  v130 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FormLaunchConfiguration(0);
  v16 = *(_QWORD *)(v15 - 8);
  v126 = (int *)v15;
  v127 = v16;
  v17 = __chkstk_darwin(v15);
  v128 = v18;
  v129 = (uint64_t)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v109 - v19;
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_1000097B4(v21, (uint64_t)qword_100070038);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v124 = v7;
    v25 = swift_slowAlloc(12, -1);
    v125 = a4;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v131 = a5;
    v28 = v27;
    v134[0] = v27;
    v123 = a1;
    *(_DWORD *)v26 = 136446210;
    v133 = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, v134);
    a1 = v123;
    v7 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v29 = v28;
    a5 = v131;
    swift_slowDealloc(v29, -1, -1);
    v30 = v26;
    a4 = v125;
    swift_slowDealloc(v30, -1, -1);
  }

  type metadata accessor for FBKSForm(0);
  v31 = static FBKSForm.fromJSON(data:)(a1, a2);
  if (!v31)
  {
    if (!a5)
      return;
    v53 = sub_1000113F4(0xD00000000000001FLL, 0x800000010005BF90);
    a5();
    goto LABEL_18;
  }
  v32 = (void *)v31;
  v33 = *(_QWORD **)(v7 + 16);
  if (v33)
  {
    if (v33 == (_QWORD *)1
      || (v34 = swift_bridgeObjectRetain(v33),
          v35 = dispatch thunk of FBKSForm.identifier.getter(v34),
          v37 = v36,
          v38 = sub_100054C68(v35, v36, v33),
          swift_bridgeObjectRelease(v37),
          sub_100041478((unint64_t)v33),
          (v38 & 1) == 0))
    {
      v53 = v32;
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v57 = swift_slowAlloc(32, -1);
        v134[0] = v57;
        *(_DWORD *)v56 = 136446210;
        v58 = dispatch thunk of FBKSForm.identifier.getter(v57);
        v60 = v59;
        v133 = sub_1000572F8(v58, v59, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);

        swift_bridgeObjectRelease(v60);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Client is not entitled to access form [%{public}s]", v56, 0xCu);
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);

        if (a5)
        {
LABEL_16:
          v61 = sub_10000C7E8();
          v62 = swift_allocError(&type metadata for FeedbackdError, v61, 0, 0);
          *v63 = 7;
          v64 = (void *)_convertErrorToNSError(_:)(v62);
          a5();

          swift_errorRelease(v62);
          return;
        }
      }
      else
      {

        if (a5)
          goto LABEL_16;
      }
LABEL_18:

      return;
    }
  }
  type metadata accessor for FBKSLaunchConfiguration(0);
  v125 = (id)static FBKSLaunchConfiguration.fromJSON(data:)(a3, a4);
  if (v125)
  {
    v131 = a5;
    v39 = v32;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(32, -1);
      v124 = swift_slowAlloc(96, -1);
      v134[0] = v124;
      *(_DWORD *)v42 = 136446722;
      v133 = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, v134);
      v43 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);
      *(_WORD *)(v42 + 12) = 2082;
      v44 = dispatch thunk of FBKSForm.identifier.getter(v43);
      v46 = v45;
      v133 = sub_1000572F8(v44, v45, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);

      v47 = swift_bridgeObjectRelease(v46);
      *(_WORD *)(v42 + 22) = 2082;
      v48 = dispatch thunk of FBKSForm.authenticationMethod.getter(v47);
      v49 = FBKSForm.AuthenticationMethod.description.getter(v48);
      v51 = v50;
      v133 = sub_1000572F8(v49, v50, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134);

      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s form: [%{public}s] authentication method: [%{public}s]", (uint8_t *)v42, 0x20u);
      v52 = v124;
      swift_arrayDestroy(v124, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

      v40 = v39;
    }

    v112 = v39;
    v124 = dispatch thunk of FBKSForm.identifier.getter(v66);
    v68 = v67;
    v123 = dispatch thunk of FBKSForm.authenticationMethod.getter(v124);
    v69 = dispatch thunk of FBKSForm.answers.getter();
    v70 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.getter();
    v115 = v71;
    v116 = v70;
    v72 = dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.getter();
    v114 = v73;
    v122 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewProceedButtonTitle.getter();
    v113 = v74;
    v121 = dispatch thunk of FBKSLaunchConfiguration.localizedAlertViewDeclineButtonTitle.getter();
    v76 = v75;
    v120 = dispatch thunk of FBKSLaunchConfiguration.skipsPrompt.getter();
    v119 = dispatch thunk of FBKSLaunchConfiguration.alwaysLaunchInRemoteAlert.getter();
    v118 = dispatch thunk of FBKSLaunchConfiguration.promptStyle.getter();
    v117 = dispatch thunk of FBKSLaunchConfiguration.notifyImmediately.getter();
    v77 = v126;
    v78 = &v20[v126[8]];
    v79 = type metadata accessor for Date(0);
    v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56);
    v80(v78, 1, 1, v79);
    v80(&v20[v77[9]], 1, 1, v79);
    swift_bridgeObjectRetain(v76);
    v81 = v68;
    v110 = v68;
    swift_bridgeObjectRetain(v68);
    v82 = v69;
    v111 = v69;
    swift_bridgeObjectRetain(v69);
    v83 = v115;
    swift_bridgeObjectRetain(v115);
    v84 = v114;
    swift_bridgeObjectRetain(v114);
    v85 = v113;
    v86 = swift_bridgeObjectRetain(v113);
    v87 = Date.init()(v86);
    *(_QWORD *)v20 = v124;
    *((_QWORD *)v20 + 1) = v81;
    *((_QWORD *)v20 + 2) = v123;
    *((_QWORD *)v20 + 3) = v82;
    *((_QWORD *)v20 + 4) = v116;
    *((_QWORD *)v20 + 5) = v83;
    v88 = v72;
    *((_QWORD *)v20 + 6) = v72;
    *((_QWORD *)v20 + 7) = v84;
    *((_QWORD *)v20 + 8) = v122;
    *((_QWORD *)v20 + 9) = v85;
    *((_QWORD *)v20 + 10) = v121;
    *((_QWORD *)v20 + 11) = v76;
    v20[96] = v120;
    v20[97] = v119;
    *(_DWORD *)(v20 + 98) = v134[0];
    *((_WORD *)v20 + 51) = WORD2(v134[0]);
    *((_QWORD *)v20 + 13) = v118;
    v20[112] = v117;
    *(_QWORD *)&v20[v77[7]] = 0;
    *(_QWORD *)&v20[v77[10]] = 0;
    v89 = (uint64_t)v130;
    static TaskPriority.utility.getter(v87);
    v90 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v89, 0, 1, v90);
    v91 = v129;
    sub_10000F714((uint64_t)v20, v129);
    v92 = *(unsigned __int8 *)(v127 + 80);
    v93 = (v92 + 64) & ~v92;
    v94 = (v128 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    v95 = (v94 + 103) & 0xFFFFFFFFFFFFFFF8;
    v96 = (_QWORD *)swift_allocObject(&unk_10006A6E0, v95 + 16, v92 | 7);
    v96[2] = 0;
    v96[3] = 0;
    v97 = v110;
    v96[4] = v124;
    v96[5] = v97;
    v98 = v111;
    v96[6] = v123;
    v96[7] = v98;
    sub_10000F6D0(v91, (uint64_t)v96 + v93);
    v99 = v112;
    *(_QWORD *)((char *)v96 + v94) = v112;
    v100 = (char *)v96 + ((v94 + 15) & 0xFFFFFFFFFFFFFFF8);
    v101 = v115;
    *(_QWORD *)v100 = v116;
    *((_QWORD *)v100 + 1) = v101;
    v102 = v114;
    *((_QWORD *)v100 + 2) = v88;
    *((_QWORD *)v100 + 3) = v102;
    v103 = v113;
    *((_QWORD *)v100 + 4) = v122;
    *((_QWORD *)v100 + 5) = v103;
    *((_QWORD *)v100 + 6) = v121;
    *((_QWORD *)v100 + 7) = v76;
    v100[64] = v120;
    v100[65] = v119;
    *(_DWORD *)(v100 + 66) = v134[0];
    *((_WORD *)v100 + 35) = WORD2(v134[0]);
    *((_QWORD *)v100 + 9) = v118;
    v100[80] = v117;
    v104 = (void (**)(void))((char *)v96 + v95);
    v105 = (uint64_t)v131;
    v106 = v132;
    *v104 = v131;
    v104[1] = (void (*)(void))v106;
    v107 = v99;
    sub_100041710(v105, v106);
    v108 = sub_10004F334(v89, (uint64_t)&unk_100070140, (uint64_t)v96);

    swift_release(v108);
    sub_100009730(v89, &qword_10006FB00);
    sub_10000F758((uint64_t)v20);
  }
  else
  {
    if (a5)
    {
      v65 = sub_1000113F4(0xD00000000000002ALL, 0x800000010005BFB0);
      a5();

    }
  }
}

uint64_t sub_10003C6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 280) = v15;
  *(_QWORD *)(v8 + 288) = v16;
  *(_OWORD *)(v8 + 264) = v14;
  *(_QWORD *)(v8 + 248) = a7;
  *(_QWORD *)(v8 + 256) = a8;
  *(_QWORD *)(v8 + 232) = a5;
  *(_QWORD *)(v8 + 240) = a6;
  *(_QWORD *)(v8 + 224) = a4;
  v9 = sub_100005D4C((uint64_t *)&unk_1000705A0);
  *(_QWORD *)(v8 + 296) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormItem(0);
  *(_QWORD *)(v8 + 304) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 312) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 320) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 328) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 336) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 344) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 352) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 360) = swift_task_alloc(v12);
  return swift_task_switch(sub_10003C790, 0, 0);
}

uint64_t sub_10003C790(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1[28];
  v2 = (void *)v1[29];
  v12 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v13 = v4;
  v5._countAndFlagsBits = 0x7463656C6C6F632ELL;
  v5._object = (void *)0xE90000000000002ELL;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  v6._countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v2);
  v7 = String.utf8CString.getter(v12);
  swift_bridgeObjectRelease(v13);
  v8 = os_transaction_create(v7 + 32);
  swift_release(v7);
  swift_unknownObjectRelease(v8);
  v9 = type metadata accessor for SeedPortal(0);
  v1[46] = static SeedPortal.shared.getter(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10006F714);
  v1[47] = (uint64_t)v10;
  *v10 = v1;
  v10[1] = (uint64_t *)sub_10003C888;
  return sub_100013544(v1[37], v1[28], v1[29], v1[30], v1[31], 0);
}

uint64_t sub_10003C888()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10003D5C0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 368));
    v4 = sub_10003C8F4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003C8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void (*v97)(_QWORD);
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  _QWORD *v102;
  _QWORD *v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  _QWORD *v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void (*v114)(id);
  Swift::String v115;
  void *object;
  unint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  void (*v126)(uint64_t, uint64_t);
  uint64_t *v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v130)(uint64_t, char);
  uint64_t v131;
  unint64_t v132;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100009730(v3, (uint64_t *)&unk_1000705A0);
    if (qword_10006EE60 != -1)
      swift_once(&qword_10006EE60, sub_10003BCAC);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = type metadata accessor for Logger(0);
    sub_1000097B4(v6, (uint64_t)qword_100070038);
    swift_bridgeObjectRetain_n(v5, 2);
    v7 = swift_bridgeObjectRetain_n(v4, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 232);
    if (v10)
    {
      v13 = *(_QWORD *)(v0 + 224);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v131 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)(v0 + 168) = sub_1000572F8(v13, v12, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
      swift_bridgeObjectRelease_n(v12, 3);
      swift_bridgeObjectRelease_n(v11, 2);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Form [%s] is not available. Will not proceed.", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 232), 2);
      swift_bridgeObjectRelease_n(v11, 2);
    }

    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v35 = *(_QWORD **)(v0 + 256);
    v36 = qword_100072558;
    *(_QWORD *)(v0 + 480) = qword_100072558;
    *(_QWORD *)(v0 + 488) = *v35;
    *(_QWORD *)(v0 + 496) = v35[1];
    v37 = sub_10000C7E8();
    v38 = swift_allocError(&type metadata for FeedbackdError, v37, 0, 0);
    *(_QWORD *)(v0 + 504) = v38;
    *v39 = 1;
    *(_QWORD *)(v0 + 512) = _convertErrorToNSError(_:)(v38);
    return swift_task_switch(sub_10003EEE8, v36, 0);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 360), v3, v1);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v128 = v0 + 593;
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 312);
  v20 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 392) = sub_1000097B4(v20, (uint64_t)qword_100070038);
  v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v21 = v129(v16, v17, v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 304);
  v27 = *(_QWORD *)(v0 + 312);
  v127 = (uint64_t *)(v0 + 160);
  if (v24)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v131 = v29;
    *(_DWORD *)v28 = 136315138;
    v30 = sub_100009BE4(&qword_100070148, (uint64_t (*)(uint64_t))&type metadata accessor for FormItem, (uint64_t)&protocol conformance descriptor for FormItem);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v26, v30);
    v33 = v32;
    *(_QWORD *)(v0 + 152) = sub_1000572F8(v31, v32, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v127);
    swift_bridgeObjectRelease(v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v34(v25, v26);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetched form [%s]", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v34(v25, v26);
  }

  *(_QWORD *)(v0 + 400) = v34;
  v41 = *(_QWORD *)(v0 + 360);
  v42 = *(_QWORD *)(v0 + 344);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = FBKSForm.AuthenticationMethod.rawValue.getter(*(_QWORD *)(v0 + 240));
  v45 = FBKSForm.AuthenticationMethod.rawValue.getter(1);
  v46 = v129;
  v47 = v129(v42, v41, v43);
  v48 = *(_QWORD *)(v0 + 344);
  v49 = *(_QWORD *)(v0 + 304);
  if (v44 == v45)
  {
    v34(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304));
  }
  else
  {
    v50 = FormItem.isSurvey.getter(v47);
    v34(v48, v49);
    if ((v50 & 1) != 0)
    {
      v51 = v129(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter();
      v54 = os_log_type_enabled(v52, v53);
      v55 = *(_QWORD *)(v0 + 336);
      v56 = *(_QWORD *)(v0 + 304);
      if (v54)
      {
        v57 = (uint8_t *)swift_slowAlloc(12, -1);
        v58 = swift_slowAlloc(32, -1);
        v131 = v58;
        *(_DWORD *)v57 = 136315138;
        v59 = sub_100009BE4(&qword_100070148, (uint64_t (*)(uint64_t))&type metadata accessor for FormItem, (uint64_t)&protocol conformance descriptor for FormItem);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v56, v59);
        v62 = v61;
        *(_QWORD *)(v0 + 96) = sub_1000572F8(v60, v61, &v131);
        v46 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
        swift_bridgeObjectRelease(v62);
        v34(v55, v56);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Making survey [%s] available in FBA inbox", v57, 0xCu);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);
      }
      else
      {
        v34(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 304));
      }

      v63 = type metadata accessor for FBKSSharedPersistence(0);
      v64 = dispatch thunk of FBKSForm.identifier.getter(v63);
      v66 = v65;
      static FBKSSharedPersistence.saveSurveyTatInFBAInbox(formIdentifier:)(v64);
      swift_bridgeObjectRelease(v66);
    }
  }
  sub_1000429F4(*(_QWORD *)(v0 + 272) + 64, v128, &qword_100070590);
  v67 = sub_1000429F4(v128, v0 + 594, &qword_100070590);
  if ((*(_BYTE *)(v0 + 594) & 1) != 0)
  {
    v125 = v34;
    v68 = FormItem.isSurvey.getter(v67);
    v69 = *(_QWORD *)(v0 + 360);
    v70 = *(_QWORD *)(v0 + 304);
    if ((v68 & 1) != 0)
    {
      v71 = v46(*(_QWORD *)(v0 + 328), v69, v70);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter();
      v74 = os_log_type_enabled(v72, v73);
      v75 = *(_QWORD *)(v0 + 328);
      v76 = *(_QWORD *)(v0 + 304);
      if (v74)
      {
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v78 = swift_slowAlloc(32, -1);
        v131 = v78;
        *(_DWORD *)v77 = 136315138;
        v79 = sub_100009BE4(&qword_100070148, (uint64_t (*)(uint64_t))&type metadata accessor for FormItem, (uint64_t)&protocol conformance descriptor for FormItem);
        v80 = dispatch thunk of CustomStringConvertible.description.getter(v76, v79);
        v82 = v81;
        *v127 = sub_1000572F8(v80, v81, &v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v0 + 168);
        swift_bridgeObjectRelease(v82);
        v125(v75, v76);
        v83 = v73;
        v34 = v125;
        _os_log_impl((void *)&_mh_execute_header, v72, v83, "Skipping prompt for form [%s].", v77, 0xCu);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v77, -1, -1);
      }
      else
      {
        v34 = v125;
        v125(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 304));
      }

      v97 = *(void (**)(_QWORD))(v0 + 280);
      if (v97)
        v97(0);
LABEL_44:
      v34(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
      v119 = *(_QWORD *)(v0 + 352);
      v121 = *(_QWORD *)(v0 + 336);
      v120 = *(_QWORD *)(v0 + 344);
      v123 = *(_QWORD *)(v0 + 320);
      v122 = *(_QWORD *)(v0 + 328);
      v124 = *(_QWORD *)(v0 + 296);
      swift_task_dealloc(*(_QWORD *)(v0 + 360));
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v84 = v46(*(_QWORD *)(v0 + 320), v69, v70);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    v87 = os_log_type_enabled(v85, v86);
    v88 = *(_QWORD *)(v0 + 320);
    v89 = *(_QWORD *)(v0 + 304);
    if (v87)
    {
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(32, -1);
      v131 = v91;
      *(_DWORD *)v90 = 136315138;
      v92 = sub_100009BE4(&qword_100070148, (uint64_t (*)(uint64_t))&type metadata accessor for FormItem, (uint64_t)&protocol conformance descriptor for FormItem);
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v89, v92);
      v95 = v94;
      *(_QWORD *)(v0 + 216) = sub_1000572F8(v93, v94, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224);
      swift_bridgeObjectRelease(v95);
      v96 = v89;
      v34 = v125;
      v125(v88, v96);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Skipping prompt is not compatible with feedback form [%s].", v90, 0xCu);
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v90, -1, -1);
    }
    else
    {
      v34 = v125;
      v125(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    }

  }
  v98 = *(_QWORD **)(v0 + 272);
  v99 = v98[9];
  if (v99 == 1)
  {
    v101 = FormItem.isSurvey.getter(v67);
    v130 = (uint64_t (*)(uint64_t, char))((char *)&dword_10006FC58 + dword_10006FC58);
    v102 = (_QWORD *)swift_task_alloc(unk_10006FC5C);
    *(_QWORD *)(v0 + 424) = v102;
    *v102 = v0;
    v102[1] = sub_10003DC8C;
    return v130(*(_QWORD *)(v0 + 272), v101 & 1);
  }
  if (v99 != 2)
  {
    sub_10000F794(*(_QWORD **)(v0 + 272));
    v103 = sub_10000F794(v98);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter();
    v106 = os_log_type_enabled(v104, v105);
    v107 = *(_QWORD **)(v0 + 272);
    if (v106)
    {
      v126 = v34;
      v108 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      v131 = v109;
      *(_DWORD *)v108 = 136315138;
      *(_QWORD *)(v0 + 184) = v99;
      v110 = String.init<A>(describing:)(v0 + 184, &type metadata for FBKSPromptStyle);
      v112 = v111;
      *(_QWORD *)(v0 + 192) = sub_1000572F8(v110, v111, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200);
      v113 = v112;
      v34 = v126;
      swift_bridgeObjectRelease(v113);
      sub_10000F7E8(v107);
      sub_10000F7E8(v107);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Prompt style not handled %s", v108, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {
      sub_10000F7E8(*(_QWORD **)(v0 + 272));
      sub_10000F7E8(v107);
    }

    v114 = *(void (**)(id))(v0 + 280);
    if (v114)
    {
      v131 = 0;
      v132 = 0xE000000000000000;
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease(v132);
      v131 = 0xD000000000000019;
      v132 = 0x800000010005C020;
      *(_QWORD *)(v0 + 176) = v99;
      v115._countAndFlagsBits = String.init<A>(describing:)(v0 + 176, &type metadata for FBKSPromptStyle);
      object = v115._object;
      String.append(_:)(v115);
      swift_bridgeObjectRelease(object);
      v117 = v132;
      v118 = sub_1000113F4(v131, v132);
      swift_bridgeObjectRelease(v117);
      v114(v118);

    }
    goto LABEL_44;
  }
  if (qword_10006EE10 != -1)
    swift_once(&qword_10006EE10, sub_10000CB58);
  v100 = (_QWORD *)swift_task_alloc(dword_10006F494);
  *(_QWORD *)(v0 + 408) = v100;
  *v100 = v0;
  v100[1] = sub_10003DC28;
  return sub_10000CB90(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 272));
}

uint64_t sub_10003D5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;

  swift_release(*(_QWORD *)(v0 + 368));
  v1 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v0 + 88;
  *(_QWORD *)(v0 + 520) = v1;
  swift_errorRetain(v1);
  v3 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v0 + 592, v0 + 72, v3, &type metadata for FeedbackdError, 0))
  {
    swift_errorRelease(v1);
    v4 = *(unsigned __int8 *)(v0 + 592);
    if (v4 == 5)
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000097B4(v5, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 104) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(5);
      v12 = v11;
      *(_QWORD *)(v0 + 80) = sub_1000572F8(v13, v11, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v12);
      v14 = v7;
      v15 = v8;
    }
    else
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_1000097B4(v28, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v29);
      v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v30))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 136) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(v4);
      v32 = v31;
      *(_QWORD *)(v0 + 144) = sub_1000572F8(v33, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
      swift_bridgeObjectRelease(v32);
      v14 = v7;
      v15 = v30;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_16:

    v34 = sub_10000C7E8();
    v35 = swift_allocError(&type metadata for FeedbackdError, v34, 0, 0);
    *v36 = v4;
    *(_QWORD *)(v0 + 528) = _convertErrorToNSError(_:)(v35);
    swift_errorRelease(v35);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v37 = *(_QWORD **)(v0 + 256);
    v38 = qword_100072558;
    *(_QWORD *)(v0 + 536) = qword_100072558;
    *(_QWORD *)(v0 + 544) = *v37;
    *(_QWORD *)(v0 + 552) = v37[1];
    v39 = sub_10003EF84;
    return swift_task_switch(v39, v38, 0);
  }
  v16 = (_QWORD *)(v0 + 16);
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v17 = type metadata accessor for Logger(0);
  sub_1000097B4(v17, (uint64_t)qword_100070038);
  swift_errorRetain(v1);
  v18 = swift_errorRetain(v1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v45 = v22;
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = v1;
    swift_errorRetain(v1);
    v23 = String.init<A>(describing:)(v0 + 120, v3);
    v25 = v24;
    *(_QWORD *)(v0 + 128) = sub_1000572F8(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    v26 = v25;
    v2 = v0 + 88;
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s failed with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    v27 = v22;
    v16 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_getErrorValue(v1, v2, v0 + 48);
  v41 = *(_QWORD *)(v0 + 48);
  v40 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = v40;
  v42 = sub_100011E60(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v41, v40);
  *(_QWORD *)(v0 + 560) = static FBKSError.nsError(anyError:)(v16);
  sub_100009C64(v16);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v43 = *(_QWORD **)(v0 + 256);
  v38 = qword_100072558;
  *(_QWORD *)(v0 + 568) = qword_100072558;
  *(_QWORD *)(v0 + 576) = *v43;
  *(_QWORD *)(v0 + 584) = v43[1];
  v39 = sub_10003F07C;
  return swift_task_switch(v39, v38, 0);
}

uint64_t sub_10003DC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003F184;
  else
    v3 = sub_100042A48;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003DC8C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 424);
  *(_QWORD *)(*v2 + 432) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10003E03C;
  }
  else
  {
    *(_BYTE *)(v4 + 595) = a1;
    v6 = sub_10003DD00;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10003DD00()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_BYTE *)(v0 + 595);
  v2 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 232), 2);
  v3 = swift_bridgeObjectRetain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 232);
  if ((v1 & 1) != 0)
  {
    if (v6)
    {
      v19 = *(_QWORD *)(v0 + 224);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v21 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain(v8);
      *(_QWORD *)(v0 + 200) = sub_1000572F8(v19, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
      swift_bridgeObjectRelease_n(v8, 3);
      swift_bridgeObjectRelease_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "User declined [%s].", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 232), 2);
      swift_bridgeObjectRelease_n(v7, 2);
    }

    if (qword_10006EE50 != -1)
      v15 = swift_once(&qword_10006EE50, sub_1000310FC);
    v16 = qword_100072558;
    *(_QWORD *)(v0 + 456) = qword_100072558;
    *(_QWORD *)(v0 + 464) = dispatch thunk of FBKSForm.identifier.getter(v15);
    *(_QWORD *)(v0 + 472) = v17;
    v14 = sub_10003EE9C;
    v13 = v16;
  }
  else
  {
    if (v6)
    {
      v20 = *(_QWORD *)(v0 + 224);
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v21 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain(v8);
      *(_QWORD *)(v0 + 208) = sub_1000572F8(v20, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
      swift_bridgeObjectRelease_n(v8, 3);
      swift_bridgeObjectRelease_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "User agreed to [%s]. Will launch feedback", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 232), 2);
      swift_bridgeObjectRelease_n(v7, 2);
    }

    if (qword_10006EE28 != -1)
      swift_once(&qword_10006EE28, sub_10001B5C0);
    v13 = qword_100072530;
    v14 = sub_10003E6AC;
  }
  return swift_task_switch(v14, v13, 0);
}

uint64_t sub_10003E03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;

  (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 432);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v0 + 88;
  *(_QWORD *)(v0 + 520) = v1;
  swift_errorRetain(v1);
  v3 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v0 + 592, v0 + 72, v3, &type metadata for FeedbackdError, 0))
  {
    swift_errorRelease(v1);
    v4 = *(unsigned __int8 *)(v0 + 592);
    if (v4 == 5)
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000097B4(v5, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 104) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(5);
      v12 = v11;
      *(_QWORD *)(v0 + 80) = sub_1000572F8(v13, v11, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v12);
      v14 = v7;
      v15 = v8;
    }
    else
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_1000097B4(v28, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v29);
      v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v30))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 136) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(v4);
      v32 = v31;
      *(_QWORD *)(v0 + 144) = sub_1000572F8(v33, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
      swift_bridgeObjectRelease(v32);
      v14 = v7;
      v15 = v30;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_16:

    v34 = sub_10000C7E8();
    v35 = swift_allocError(&type metadata for FeedbackdError, v34, 0, 0);
    *v36 = v4;
    *(_QWORD *)(v0 + 528) = _convertErrorToNSError(_:)(v35);
    swift_errorRelease(v35);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v37 = *(_QWORD **)(v0 + 256);
    v38 = qword_100072558;
    *(_QWORD *)(v0 + 536) = qword_100072558;
    *(_QWORD *)(v0 + 544) = *v37;
    *(_QWORD *)(v0 + 552) = v37[1];
    v39 = sub_10003EF84;
    return swift_task_switch(v39, v38, 0);
  }
  v16 = (_QWORD *)(v0 + 16);
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v17 = type metadata accessor for Logger(0);
  sub_1000097B4(v17, (uint64_t)qword_100070038);
  swift_errorRetain(v1);
  v18 = swift_errorRetain(v1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v45 = v22;
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = v1;
    swift_errorRetain(v1);
    v23 = String.init<A>(describing:)(v0 + 120, v3);
    v25 = v24;
    *(_QWORD *)(v0 + 128) = sub_1000572F8(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    v26 = v25;
    v2 = v0 + 88;
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s failed with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    v27 = v22;
    v16 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_getErrorValue(v1, v2, v0 + 48);
  v41 = *(_QWORD *)(v0 + 48);
  v40 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = v40;
  v42 = sub_100011E60(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v41, v40);
  *(_QWORD *)(v0 + 560) = static FBKSError.nsError(anyError:)(v16);
  sub_100009C64(v16);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v43 = *(_QWORD **)(v0 + 256);
  v38 = qword_100072558;
  *(_QWORD *)(v0 + 568) = qword_100072558;
  *(_QWORD *)(v0 + 576) = *v43;
  *(_QWORD *)(v0 + 584) = v43[1];
  v39 = sub_10003F07C;
  return swift_task_switch(v39, v38, 0);
}

uint64_t sub_10003E6AC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_100021460(v0[32]);
  swift_bridgeObjectRelease(v1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100070578
                                                                                    + dword_100070578);
  v2 = (_QWORD *)swift_task_alloc(unk_10007057C);
  v0[55] = v2;
  *v2 = v0;
  v2[1] = sub_10003E728;
  return v4(v0[28], v0[29], v0[30], v0[31], v0[34], v0[45]);
}

uint64_t sub_10003E728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003E82C;
  else
    v3 = sub_10003E78C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003E78C()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(_QWORD))(v0 + 280);
  if (v1)
    v1(0);
  (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;

  (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 448);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v0 + 88;
  *(_QWORD *)(v0 + 520) = v1;
  swift_errorRetain(v1);
  v3 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v0 + 592, v0 + 72, v3, &type metadata for FeedbackdError, 0))
  {
    swift_errorRelease(v1);
    v4 = *(unsigned __int8 *)(v0 + 592);
    if (v4 == 5)
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000097B4(v5, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 104) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(5);
      v12 = v11;
      *(_QWORD *)(v0 + 80) = sub_1000572F8(v13, v11, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v12);
      v14 = v7;
      v15 = v8;
    }
    else
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_1000097B4(v28, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v29);
      v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v30))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 136) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(v4);
      v32 = v31;
      *(_QWORD *)(v0 + 144) = sub_1000572F8(v33, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
      swift_bridgeObjectRelease(v32);
      v14 = v7;
      v15 = v30;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_16:

    v34 = sub_10000C7E8();
    v35 = swift_allocError(&type metadata for FeedbackdError, v34, 0, 0);
    *v36 = v4;
    *(_QWORD *)(v0 + 528) = _convertErrorToNSError(_:)(v35);
    swift_errorRelease(v35);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v37 = *(_QWORD **)(v0 + 256);
    v38 = qword_100072558;
    *(_QWORD *)(v0 + 536) = qword_100072558;
    *(_QWORD *)(v0 + 544) = *v37;
    *(_QWORD *)(v0 + 552) = v37[1];
    v39 = sub_10003EF84;
    return swift_task_switch(v39, v38, 0);
  }
  v16 = (_QWORD *)(v0 + 16);
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v17 = type metadata accessor for Logger(0);
  sub_1000097B4(v17, (uint64_t)qword_100070038);
  swift_errorRetain(v1);
  v18 = swift_errorRetain(v1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v45 = v22;
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = v1;
    swift_errorRetain(v1);
    v23 = String.init<A>(describing:)(v0 + 120, v3);
    v25 = v24;
    *(_QWORD *)(v0 + 128) = sub_1000572F8(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    v26 = v25;
    v2 = v0 + 88;
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s failed with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    v27 = v22;
    v16 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_getErrorValue(v1, v2, v0 + 48);
  v41 = *(_QWORD *)(v0 + 48);
  v40 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = v40;
  v42 = sub_100011E60(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v41, v40);
  *(_QWORD *)(v0 + 560) = static FBKSError.nsError(anyError:)(v16);
  sub_100009C64(v16);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v43 = *(_QWORD **)(v0 + 256);
  v38 = qword_100072558;
  *(_QWORD *)(v0 + 568) = qword_100072558;
  *(_QWORD *)(v0 + 576) = *v43;
  *(_QWORD *)(v0 + 584) = v43[1];
  v39 = sub_10003F07C;
  return swift_task_switch(v39, v38, 0);
}

uint64_t sub_10003EE9C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 472);
  sub_100032344(*(void **)(v0 + 464), v1);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_100042A48, 0, 0);
}

uint64_t sub_10003EEE8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 504);
  v1 = *(void **)(v0 + 512);
  sub_100031498(*(void **)(v0 + 488), *(_QWORD *)(v0 + 496), (uint64_t)v1);

  swift_errorRelease(v2);
  v3 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003EF84()
{
  uint64_t v0;

  sub_100031498(*(void **)(v0 + 544), *(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 528));
  return swift_task_switch(sub_10003EFCC, 0, 0);
}

uint64_t sub_10003EFCC()
{
  uint64_t v0;
  void (*v1)(void *);
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(void *))(v0 + 280);
  if (v1)
  {
    v2 = *(void **)(v0 + 528);
    v3 = v2;
    v1(v2);

  }
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F07C()
{
  uint64_t v0;

  sub_100031498(*(void **)(v0 + 576), *(_QWORD *)(v0 + 584), *(_QWORD *)(v0 + 560));
  return swift_task_switch(sub_10003F0C4, 0, 0);
}

uint64_t sub_10003F0C4()
{
  uint64_t v0;
  void (*v1)(void *);
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void (**)(void *))(v0 + 280);
  v2 = *(void **)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 520);
  if (v1)
  {
    v4 = v2;
    v1(v2);

    swift_errorRelease(v3);
  }
  else
  {

    swift_errorRelease(v3);
  }
  v5 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v45;

  (*(void (**)(_QWORD, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 416);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v0 + 88;
  *(_QWORD *)(v0 + 520) = v1;
  swift_errorRetain(v1);
  v3 = sub_100005D4C(&qword_10006F090);
  if (swift_dynamicCast(v0 + 592, v0 + 72, v3, &type metadata for FeedbackdError, 0))
  {
    swift_errorRelease(v1);
    v4 = *(unsigned __int8 *)(v0 + 592);
    if (v4 == 5)
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_1000097B4(v5, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 104) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(5);
      v12 = v11;
      *(_QWORD *)(v0 + 80) = sub_1000572F8(v13, v11, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease(v12);
      v14 = v7;
      v15 = v8;
    }
    else
    {
      if (qword_10006EE60 != -1)
        swift_once(&qword_10006EE60, sub_10003BCAC);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_1000097B4(v28, (uint64_t)qword_100070038);
      v7 = Logger.logObject.getter(v29);
      v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v7, v30))
        goto LABEL_16;
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v45 = v10;
      *(_DWORD *)v9 = 136446466;
      *(_QWORD *)(v0 + 136) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144);
      *(_WORD *)(v9 + 12) = 2080;
      sub_10003A2CC(v4);
      v32 = v31;
      *(_QWORD *)(v0 + 144) = sub_1000572F8(v33, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152);
      swift_bridgeObjectRelease(v32);
      v14 = v7;
      v15 = v30;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
LABEL_16:

    v34 = sub_10000C7E8();
    v35 = swift_allocError(&type metadata for FeedbackdError, v34, 0, 0);
    *v36 = v4;
    *(_QWORD *)(v0 + 528) = _convertErrorToNSError(_:)(v35);
    swift_errorRelease(v35);
    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v37 = *(_QWORD **)(v0 + 256);
    v38 = qword_100072558;
    *(_QWORD *)(v0 + 536) = qword_100072558;
    *(_QWORD *)(v0 + 544) = *v37;
    *(_QWORD *)(v0 + 552) = v37[1];
    v39 = sub_10003EF84;
    return swift_task_switch(v39, v38, 0);
  }
  v16 = (_QWORD *)(v0 + 16);
  swift_errorRelease(*(_QWORD *)(v0 + 72));
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v17 = type metadata accessor for Logger(0);
  sub_1000097B4(v17, (uint64_t)qword_100070038);
  swift_errorRetain(v1);
  v18 = swift_errorRetain(v1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v45 = v22;
    *(_DWORD *)v21 = 136446466;
    *(_QWORD *)(v0 + 112) = sub_1000572F8(0xD00000000000003DLL, 0x800000010005BFE0, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    *(_WORD *)(v21 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = v1;
    swift_errorRetain(v1);
    v23 = String.init<A>(describing:)(v0 + 120, v3);
    v25 = v24;
    *(_QWORD *)(v0 + 128) = sub_1000572F8(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136);
    v26 = v25;
    v2 = v0 + 88;
    swift_bridgeObjectRelease(v26);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s failed with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    v27 = v22;
    v16 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_getErrorValue(v1, v2, v0 + 48);
  v41 = *(_QWORD *)(v0 + 48);
  v40 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = v40;
  v42 = sub_100011E60(v16);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v41, v40);
  *(_QWORD *)(v0 + 560) = static FBKSError.nsError(anyError:)(v16);
  sub_100009C64(v16);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v43 = *(_QWORD **)(v0 + 256);
  v38 = qword_100072558;
  *(_QWORD *)(v0 + 568) = qword_100072558;
  *(_QWORD *)(v0 + 576) = *v43;
  *(_QWORD *)(v0 + 584) = v43[1];
  v39 = sub_10003F07C;
  return swift_task_switch(v39, v38, 0);
}

uint64_t sub_10003F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch(sub_10003F90C, 0, 0);
}

uint64_t sub_10003F90C(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1[3];
  v2 = (void *)v1[4];
  v11 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v12 = v4;
  v5._countAndFlagsBits = 0x2E746E756F632ELL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  v7 = String.utf8CString.getter(v11);
  swift_bridgeObjectRelease(v12);
  v8 = os_transaction_create(v7 + 32);
  swift_release(v7);
  swift_unknownObjectRelease(v8);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v9 = qword_100072558;
  v1[7] = qword_100072558;
  return swift_task_switch(sub_10003F9E4, v9, 0);
}

uint64_t sub_10003F9E4()
{
  _QWORD *v0;
  void *v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[3];
  v2 = v0[4];
  v3 = sub_10003A3EC(v1, v2, (void *)0x657474696D627573, 0xE900000000000064);
  swift_bridgeObjectRetain(v2);
  v0[8] = sub_100041720((uint64_t)v3, (uint64_t)v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10003FA90, 0, 0);
}

uint64_t sub_10003FA90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_100072558;
  *(_QWORD *)(v0 + 72) = qword_100072558;
  return swift_task_switch(sub_10003FAAC, v1, 0);
}

uint64_t sub_10003FAAC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = sub_1000327DC(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_10003FAF0, 0, 0);
}

uint64_t sub_10003FAF0()
{
  uint64_t *v0;
  uint64_t **v1;

  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  v1 = (uint64_t **)swift_task_alloc(dword_10006F844);
  v0[11] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10003FB6C;
  return sub_10001B5F8(v0[3], v0[4]);
}

uint64_t sub_10003FB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003FBC8, 0, 0);
}

uint64_t sub_10003FBC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = qword_100072558;
  *(_QWORD *)(v0 + 104) = qword_100072558;
  return swift_task_switch(sub_10003FBE4, v1, 0);
}

uint64_t sub_10003FBE4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = sub_1000333E4(*(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_10003FC28, 0, 0);
}

uint64_t sub_10003FC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(void (**)(void))(v0 + 40);
  v6 = objc_allocWithZone((Class)type metadata accessor for FBKSFeedbackCount(0));
  v7 = (void *)FBKSFeedbackCount.init(feedbackFiled:errors:currentCampaign:declineCount:)(v4, v3, v2, v1);
  v8 = FBKSFeedbackCount.asJSON.getter();
  v10 = v9;
  v5();
  sub_100012720(v8, v10);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10003FD68, 0, 0);
}

uint64_t sub_10003FD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;

  _StringGuts.grow(_:)(21);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  v4 = v3;
  swift_bridgeObjectRelease(0xE000000000000000);
  v5._object = (void *)0x800000010005C140;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  v6 = String.utf8CString.getter(v2);
  swift_bridgeObjectRelease(v4);
  v7 = os_transaction_create(v6 + 32);
  swift_release(v6);
  swift_unknownObjectRelease(v7);
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v8 = qword_100072558;
  *(_QWORD *)(v0 + 32) = qword_100072558;
  v9 = sub_10000C7E8();
  v10 = swift_allocError(&type metadata for FeedbackdError, v9, 0, 0);
  *v11 = 2;
  v12 = (void *)_convertErrorToNSError(_:)(v10);
  *(_QWORD *)(v0 + 40) = static FBKSError.xpcSafeNSError(error:)(v12);

  swift_errorRelease(v10);
  return swift_task_switch(sub_10003FEA0, v8, 0);
}

uint64_t sub_10003FEA0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);
  sub_100031498(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return swift_task_switch(sub_10003FF78, 0, 0);
}

uint64_t sub_10003FF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;

  _StringGuts.grow(_:)(24);
  v1 = static Strings.Daemon.bundleIdentifier.getter(v0);
  v3 = v2;
  swift_bridgeObjectRelease(0xE000000000000000);
  v4._object = (void *)0x800000010005C0E0;
  v4._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v4);
  v5 = String.utf8CString.getter(v1);
  swift_bridgeObjectRelease(v3);
  v6 = os_transaction_create(v5 + 32);
  swift_release(v5);
  swift_unknownObjectRelease(v6);
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_100040064, qword_100072530, 0);
}

uint64_t sub_100040064()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 112) = sub_1000203F0(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_1000400A8, 0, 0);
}

uint64_t sub_1000400A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    if (qword_10006EE60 != -1)
      swift_once(&qword_10006EE60, sub_10003BCAC);
    v1 = *(_QWORD *)(v0 + 48);
    v2 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 72) = sub_1000097B4(v2, (uint64_t)qword_100070038);
    v3 = swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 48);
    if (v6)
    {
      v8 = *(_QWORD *)(v0 + 40);
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v23 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain(v7);
      *(_QWORD *)(v0 + 32) = sub_1000572F8(v8, v7, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
      swift_bridgeObjectRelease_n(v7, 3);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Marking form [%{public}s] as submitted", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
    }

    if (qword_10006EE40 != -1)
      swift_once(&qword_10006EE40, sub_100022594);
    v21 = (_QWORD *)swift_task_alloc(dword_10006FA8C);
    *(_QWORD *)(v0 + 80) = v21;
    *v21 = v0;
    v21[1] = sub_100040440;
    return sub_100026264(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else
  {
    if (qword_10006EE60 != -1)
      swift_once(&qword_10006EE60, sub_10003BCAC);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = type metadata accessor for Logger(0);
    sub_1000097B4(v12, (uint64_t)qword_100070038);
    v13 = swift_bridgeObjectRetain_n(v11, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 48);
    if (v16)
    {
      v18 = *(_QWORD *)(v0 + 40);
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v23 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(v17);
      *(_QWORD *)(v0 + 16) = sub_1000572F8(v18, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Form [%{public}s] is not known to feedbackd", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100040440()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100040494, 0, 0);
}

uint64_t sub_100040494()
{
  return swift_task_switch(sub_1000404AC, qword_100072530, 0);
}

uint64_t sub_1000404AC()
{
  uint64_t v0;

  sub_1000207CC(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_1000404E8, 0, 0);
}

uint64_t sub_1000404E8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t (*v5)();
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = qword_10006EE50;
    v3 = v1;
    if (v2 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v4 = qword_100072558;
    *(_QWORD *)(v0 + 88) = qword_100072558;
    v5 = sub_100040738;
    return swift_task_switch(v5, v4, 0);
  }
  v7 = *(void **)(v0 + 64);
  if (v7)
  {
    v8 = v7;
    if (objc_msgSend(v8, "integerValue"))
    {
      if (qword_10006EE50 != -1)
        swift_once(&qword_10006EE50, sub_1000310FC);
      v9 = qword_100072558;
      *(_QWORD *)(v0 + 96) = qword_100072558;
      *(_QWORD *)(v0 + 104) = objc_msgSend(v8, "integerValue");
      v5 = sub_1000407AC;
      v4 = v9;
      return swift_task_switch(v5, v4, 0);
    }

  }
  v10 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 48), 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.fault.getter();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 48);
  if (v13)
  {
    v15 = *(_QWORD *)(v0 + 40);
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v16 = 136446210;
    swift_bridgeObjectRetain(v14);
    *(_QWORD *)(v0 + 24) = sub_1000572F8(v15, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cannot record feedback submission for [%{public}s]. Feedback ID is invalid", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 48), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040738()
{
  uint64_t v0;

  sub_100031498(*(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_task_switch(sub_10004077C, 0, 0);
}

uint64_t sub_10004077C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000407AC()
{
  uint64_t v0;

  sub_100031C40(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 104));
  return swift_task_switch(sub_1000407EC, 0, 0);
}

uint64_t sub_1000407EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000408E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = a5;
  return swift_task_switch(sub_1000408FC, 0, 0);
}

uint64_t sub_1000408FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v8 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v9 = v2;
  v3._countAndFlagsBits = 0x74657365722ELL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  v4 = String.utf8CString.getter(v8);
  swift_bridgeObjectRelease(v9);
  v5 = os_transaction_create(v4 + 32);
  swift_release(v4);
  swift_unknownObjectRelease(v5);
  if (qword_10006EEF8 != -1)
    swift_once(&qword_10006EEF8, sub_100054D88);
  v6 = (_QWORD *)swift_task_alloc(dword_100070634);
  *(_QWORD *)(v1 + 128) = v6;
  *v6 = v1;
  v6[1] = sub_1000409D0;
  return sub_1000552EC(0);
}

uint64_t sub_1000409D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_100040A24, 0, 0);
}

uint64_t sub_100040A24()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_100040A84, qword_100072530, 0);
}

uint64_t sub_100040A84()
{
  sub_10001FCA0();
  return swift_task_switch(sub_100040ABC, 0, 0);
}

uint64_t sub_100040ABC()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_10006EE40 != -1)
    swift_once(&qword_10006EE40, sub_100022594);
  sub_100022744();
  type metadata accessor for FBKSSharedPersistence(0);
  static FBKSSharedPersistence.removeAllInboxTats()();
  if (qword_10006EE50 != -1)
    swift_once(&qword_10006EE50, sub_1000310FC);
  v1 = qword_100072558;
  *(_QWORD *)(v0 + 136) = qword_100072558;
  return swift_task_switch(sub_100040B64, v1, 0);
}

uint64_t sub_100040B64()
{
  uint64_t v0;

  sub_10003116C();
  *(_QWORD *)(v0 + 144) = 0;
  return swift_task_switch(sub_100040BC0, 0, 0);
}

uint64_t sub_100040BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  (*(void (**)(_QWORD))(v0 + 112))(0);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_100070038);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v8 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 80) = sub_1000572F8(0xD000000000000018, 0x800000010005C070, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Finished %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(void *);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v1 = v0 + 72;
  v29 = v0 + 88;
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = type metadata accessor for Logger(0);
  sub_1000097B4(v3, (uint64_t)qword_100070038);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 144);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v30 = v10;
    *(_DWORD *)v9 = 136446466;
    *(_QWORD *)(v0 + 88) = sub_1000572F8(0xD000000000000018, 0x800000010005C070, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v0 + 96);
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 96) = v8;
    swift_errorRetain(v8);
    v11 = sub_100005D4C(&qword_10006F090);
    v12 = String.init<A>(describing:)(v0 + 96, v11);
    v14 = v13;
    *(_QWORD *)(v0 + 104) = sub_1000572F8(v12, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
    v15 = v14;
    v1 = v0 + 72;
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed with: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 144));
    swift_errorRelease(v8);
  }

  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(void (**)(void *))(v0 + 112);
  swift_getErrorValue(v16, v1, v0 + 48);
  v18 = *(_QWORD *)(v0 + 48);
  v19 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = v19;
  v20 = sub_100011E60((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v20, v18, v19);
  v21 = (void *)static FBKSError.nsError(anyError:)(v0 + 16);
  sub_100009C64((_QWORD *)(v0 + 16));
  v22 = v21;
  v17(v21);

  swift_errorRelease(v16);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v23 = sub_1000097B4(v3, (uint64_t)qword_100070038);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v30 = v27;
    *(_DWORD *)v26 = 136446210;
    *(_QWORD *)(v0 + 80) = sub_1000572F8(0xD000000000000018, 0x800000010005C070, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v29);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Finished %{public}s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000411D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1000411F0, 0, 0);
}

uint64_t sub_1000411F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v8 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v9 = v2;
  v3._countAndFlagsBits = 0x752D74657365722ELL;
  v3._object = (void *)0xEB00000000726573;
  String.append(_:)(v3);
  v4 = String.utf8CString.getter(v8);
  swift_bridgeObjectRelease(v9);
  v5 = os_transaction_create(v4 + 32);
  swift_release(v4);
  swift_unknownObjectRelease(v5);
  if (qword_10006EEF8 != -1)
    swift_once(&qword_10006EEF8, sub_100054D88);
  v6 = (_QWORD *)swift_task_alloc(dword_100070634);
  *(_QWORD *)(v1 + 32) = v6;
  *v6 = v1;
  v6[1] = sub_1000412D0;
  return sub_1000552EC(0);
}

uint64_t sub_1000412D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_100041324, 0, 0);
}

uint64_t sub_100041324()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000413F0()
{
  uint64_t v0;

  sub_100041478(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for FeedbackDaemonDelegate()
{
  return objc_opt_self(_TtC9feedbackd22FeedbackDaemonDelegate);
}

uint64_t sub_100041434(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_100041458(uint64_t (*a1)(void))
{
  return a1();
}

unint64_t sub_100041478(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100041488()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  char *v15;

  v1 = (int *)type metadata accessor for FormLaunchConfiguration(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  v6 = (char *)v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 88));
  v7 = (char *)v0 + v4 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(char *, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = &v6[v1[8]];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (!v12(v11, 1, v8))
    v10(v11, v8);
  v13 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v5 + 103) & 0xFFFFFFFFFFFFFFF8;
  v15 = &v6[v1[9]];
  if (!v12(v15, 1, v8))
    v10(v15, v8);

  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v13 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v13 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v13 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v13 + 56));
  if (*(_QWORD *)((char *)v0 + v14))
    swift_release(*(_QWORD *)((char *)v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_100041620(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(type metadata accessor for FormLaunchConfiguration(0) - 8);
  v4 = v1[4];
  v11 = v1[3];
  v12 = v1[2];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v9 = (_QWORD *)swift_task_alloc(dword_10007013C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002D38C;
  return sub_10003C6B0(a1, v12, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_100041710(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

_QWORD *sub_100041720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v4 = v3;
  v26 = a2;
  v7 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  __chkstk_darwin();
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = &_swiftEmptyArrayStorage;
    if (!v10)
      break;
    v27 = &_swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v10);
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }
    v12 = 0;
    v22[1] = v4;
    v23 = a1 & 0xC000000000000001;
    v13 = a1;
    while (v10 != v12)
    {
      if (v23)
        v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
      else
        v14 = (char *)*(id *)(a1 + 8 * v12 + 32);
      v15 = v14;
      ++v12;
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v9, &v14[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_date], v25);
      v16 = *(_QWORD *)&v15[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build];
      v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_build + 8];
      v18 = *(_QWORD *)&v15[OBJC_IVAR____TtC9feedbackd18FeedbackSubmission_feedbackId];
      objc_allocWithZone((Class)type metadata accessor for FBKSFeedback(0));
      swift_bridgeObjectRetain(a3);
      swift_bridgeObjectRetain(v17);
      v19 = FBKSFeedback.init(formIdentifier:submissionDate:build:id:)(v26, a3, v9, v16, v17, v18);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v4 = v27[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v19);
      specialized ContiguousArray._endMutation()(v20);
      a1 = v13;
      if (v10 == v12)
        return v27;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v21 = a1;
    else
      v21 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_100041920(uint64_t a1)
{
  uint64_t v1;

  return sub_10004328C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100041928(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_10006A7F8, 24, 7);
  *(_QWORD *)(v11 + 16) = a4;
  _Block_copy(a4);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_1000097B4(v12, (uint64_t)qword_100070038);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v39 = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v40 = a1;
    v19 = v18;
    v42 = v18;
    v38 = v10;
    *(_DWORD *)v17 = 136446210;
    v41 = sub_1000572F8(0xD00000000000002ALL, 0x800000010005C160, &v42);
    v10 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a1 = v40;
    swift_slowDealloc(v20, -1, -1);
    v21 = v17;
    a3 = v39;
    swift_slowDealloc(v21, -1, -1);
  }

  v23 = *(_QWORD **)(a3 + 16);
  if (v23 && (v23 == (_QWORD *)1 || (v22 = sub_100054C68(a1, a2, v23), (v22 & 1) == 0)))
  {
    v27 = swift_bridgeObjectRetain_n(a2, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v42 = v31;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain(a2);
      v41 = sub_1000572F8(a1, a2, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client is not entitled to access form [%{public}s]", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v32 = sub_10000C7E8();
    v33 = swift_allocError(&type metadata for FeedbackdError, v32, 0, 0);
    *v34 = 7;
    v35 = (void *)_convertErrorToNSError(_:)(v33);
    ((void (**)(_QWORD, _QWORD, void *))a4)[2](a4, 0, v35);

    swift_errorRelease(v33);
  }
  else
  {
    static TaskPriority.utility.getter(v22);
    v24 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 0, 1, v24);
    v25 = (_QWORD *)swift_allocObject(&unk_10006A820, 64, 7);
    v25[2] = 0;
    v25[3] = 0;
    v25[4] = a1;
    v25[5] = a2;
    v25[6] = sub_1000428E8;
    v25[7] = v11;
    swift_bridgeObjectRetain(a2);
    swift_retain(v11);
    v26 = sub_10004F334((uint64_t)v10, (uint64_t)&unk_100070198, (uint64_t)v25);
    swift_release(v26);
    sub_100009730((uint64_t)v10, &qword_10006FB00);
  }
  return swift_release(v11);
}

uint64_t sub_100041D68(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v9 = type metadata accessor for Logger(0);
  sub_1000097B4(v9, (uint64_t)qword_100070038);
  v10 = swift_bridgeObjectRetain_n(a2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136446466;
    v20 = sub_1000572F8(0xD000000000000035, 0x800000010005C100, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v20 = sub_1000572F8(a1, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s form: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  type metadata accessor for FBKSSharedPersistence(0);
  v15 = static FBKSSharedPersistence.removeInboxTat(_:)(a1, a2);
  static TaskPriority.utility.getter(v15);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_10006A7D0, 48, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a1;
  v17[5] = a2;
  swift_bridgeObjectRetain(a2);
  v18 = sub_10004F4F8((uint64_t)v8, (uint64_t)&unk_100070188, (uint64_t)v17);
  swift_release(v18);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
}

uint64_t sub_10004201C(uint64_t a1, unint64_t a2, void *a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v44 = a4;
  v11 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v14 = type metadata accessor for Logger(0);
  sub_1000097B4(v14, (uint64_t)qword_100070038);
  v15 = a5;
  swift_bridgeObjectRetain_n(a2, 2);
  v16 = a3;
  v17 = v15;
  v18 = v16;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v45 = a3;
  if (!v21)
  {

    swift_bridgeObjectRelease_n(a2, 2);
    v26 = v17;
    if ((v44 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v40 = v17;
  v42 = a5;
  v43 = a6;
  v22 = a1;
  v23 = swift_slowAlloc(38, -1);
  v38 = (_QWORD *)swift_slowAlloc(8, -1);
  v39 = swift_slowAlloc(64, -1);
  v47 = v39;
  *(_DWORD *)v23 = 136446978;
  v46 = sub_1000572F8(0xD000000000000049, 0x800000010005C090, &v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
  *(_WORD *)(v23 + 12) = 2082;
  swift_bridgeObjectRetain(a2);
  v41 = v22;
  v46 = sub_1000572F8(v22, a2, &v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
  swift_bridgeObjectRelease_n(a2, 3);
  *(_WORD *)(v23 + 22) = 2114;
  if (a3)
  {
    v46 = (uint64_t)v18;
    v24 = v18;
  }
  else
  {
    v46 = 0;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
  v27 = v38;
  *v38 = v45;

  *(_WORD *)(v23 + 32) = 1024;
  v26 = v40;

  a5 = v42;
  LODWORD(v46) = v42 != 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 4);

  _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s form: %{public}s feedback: [%{public}@] has error? %{BOOL}d", (uint8_t *)v23, 0x26u);
  v28 = sub_100005D4C(&qword_10006F418);
  swift_arrayDestroy(v27, 1, v28);
  swift_slowDealloc(v27, -1, -1);
  v29 = v39;
  swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1, -1);
  swift_slowDealloc(v23, -1, -1);

  a6 = v43;
  a1 = v41;
  if ((v44 & 1) != 0)
  {
LABEL_10:
    type metadata accessor for FBKSSharedPersistence(0);
    v25 = static FBKSSharedPersistence.removeInboxTat(_:)(a1, a2);
  }
LABEL_11:
  static TaskPriority.utility.getter(v25);
  v30 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 0, 1, v30);
  v31 = (_QWORD *)swift_allocObject(&unk_10006A7A8, 64, 7);
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = a1;
  v31[5] = a2;
  v32 = v45;
  v31[6] = a5;
  v31[7] = v32;
  swift_bridgeObjectRetain(a2);
  v33 = v18;
  v34 = v26;
  v35 = sub_10004F334((uint64_t)v13, (uint64_t)&unk_100070178, (uint64_t)v31);
  swift_release(v35);
  sub_100009730((uint64_t)v13, &qword_10006FB00);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
}

uint64_t sub_100042450(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v12 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EE60 != -1)
    swift_once(&qword_10006EE60, sub_10003BCAC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_1000097B4(v15, (uint64_t)qword_100070038);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v31 = a1;
    v19 = swift_slowAlloc(12, -1);
    v33 = a6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v32 = a5;
    v22 = v21;
    v35 = v21;
    *(_DWORD *)v20 = 136446210;
    v34 = sub_1000572F8(a3, a4, &v35);
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v23 = v22;
    a5 = v32;
    swift_slowDealloc(v23, -1, -1);
    v24 = v20;
    a6 = v33;
    swift_slowDealloc(v24, -1, -1);
  }

  static TaskPriority.utility.getter(v25);
  v26 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 0, 1, v26);
  v27 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = a1;
  v27[5] = a2;
  swift_retain(a2);
  v28 = sub_10004F334((uint64_t)v14, a6, (uint64_t)v27);
  swift_release(v28);
  return sub_100009730((uint64_t)v14, &qword_10006FB00);
}

uint64_t sub_100042694()
{
  return sub_100042850((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1000426A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_100070154);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_10002D38C;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1000411F0, 0, 0);
}

uint64_t sub_100042700()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100042724()
{
  return sub_100042850((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100042730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_100070164);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100029488;
  *(_OWORD *)(v2 + 112) = v3;
  return swift_task_switch(sub_1000408FC, 0, 0);
}

uint64_t sub_100042790()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000427CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v6 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_100070174);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10002D38C;
  *(_QWORD *)(v4 + 56) = v2;
  *(_QWORD *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 40) = v6;
  return swift_task_switch(sub_10003FF78, 0, 0);
}

uint64_t sub_100042844()
{
  return sub_100042850((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100042850(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_100042888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_100070184);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002D38C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10003FD68, 0, 0);
}

void sub_1000428E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1000432A0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1000428F0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100042924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_100070194);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10002D38C;
  *(_QWORD *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 24) = v2;
  return swift_task_switch(sub_10003F90C, 0, 0);
}

uint64_t sub_10004299C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_1000701A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000429E4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_1000429F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005D4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100042A4C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;

  static Strings.Daemon.configurationUserDefaultsDomain.getter();
  v1 = v0;
  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4)
    qword_100072568 = (uint64_t)v4;
  else
    __break(1u);
}

void sub_100042ACC()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x800000010005C360;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 48;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_1000701B0 = 0xD000000000000014;
  *(_QWORD *)algn_1000701B8 = 0x800000010005C360;
  qword_1000701C0 = (uint64_t)v3;
}

void sub_100042BE8()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0xD000000000000018;
  *(_QWORD *)(inited + 40) = 0x800000010005C380;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 1;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_1000701C8 = 0xD000000000000018;
  unk_1000701D0 = 0x800000010005C380;
  qword_1000701D8 = (uint64_t)v3;
}

void sub_100042D04()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x800000010005C3A0;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 5;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_1000701E0 = 0xD000000000000011;
  *(_QWORD *)algn_1000701E8 = 0x800000010005C3A0;
  qword_1000701F0 = (uint64_t)v3;
}

void sub_100042E20()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x800000010005C320;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 11;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_1000701F8 = 0xD000000000000010;
  unk_100070200 = 0x800000010005C320;
  qword_100070208 = (uint64_t)v3;
}

void sub_100042F3C()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000010005C340;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 0;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_100070210 = 0xD000000000000012;
  *(_QWORD *)algn_100070218 = 0x800000010005C340;
  qword_100070220 = (uint64_t)v3;
}

void sub_100043054()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0x6F43657A6F6F6E73;
  *(_QWORD *)(inited + 40) = 0xEB00000000746E75;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = 3;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_100070228 = 0x6F43657A6F6F6E73;
  unk_100070230 = 0xEB00000000746E75;
  qword_100070238 = (uint64_t)v3;
}

void sub_100043174()
{
  void *v0;
  uint64_t v1;
  uint64_t inited;
  id v3;
  unint64_t v4;
  Class isa;
  uint64_t v6;

  if (qword_10006EE68 != -1)
    swift_once(&qword_10006EE68, sub_100042A4C);
  v0 = (void *)qword_100072568;
  v1 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v1, &v6);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = 0x6567676972546F6ELL;
  *(_QWORD *)(inited + 40) = 0xE900000000000072;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 0;
  v3 = v0;
  v4 = sub_100014494(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "registerDefaults:", isa);

  qword_100070240 = 0x6567676972546F6ELL;
  *(_QWORD *)algn_100070248 = 0xE900000000000072;
  qword_100070250 = (uint64_t)v3;
}

uint64_t sub_10004328C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1000432A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  Class v6;

  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = isa;
  (*(void (**)(uint64_t))(a4 + 16))(a4);

}

uint64_t sub_1000432FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_100070260);
  v1 = sub_1000097B4(v0, (uint64_t)qword_100070260);
  v2 = static Strings.Daemon.bundleIdentifier.getter(v1);
  return Logger.init(subsystem:category:)(v2);
}

uint64_t sub_100043364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, CFBLog);
  v1 = sub_1000097B4(v0, (uint64_t)CFBLog);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v2 = sub_1000097B4(v0, (uint64_t)qword_100070260);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t CFBLog.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10006EEB0 != -1)
    swift_once(&qword_10006EEB0, sub_100043364);
  v0 = type metadata accessor for Logger(0);
  return sub_1000097B4(v0, (uint64_t)CFBLog);
}

uint64_t sub_10004343C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  objc_msgSend(v0, "auditToken");
  v8[0] = v6;
  v8[1] = v7;
  if (xpc_copy_code_signing_identity_for_token(v8) && (v1 = String.init(utf8String:)(), v2))
  {
    v3 = v2;
    v4 = sub_100054C68(v1, v2, &off_100069680);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t sub_1000434E0(void (*a1)(void))
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t result;
  unsigned __int8 v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  a1();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v5 = objc_msgSend(v1, "valueForEntitlement:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v8, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_100021D2C((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    result = swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v7;
  }
  else
  {
    sub_100009730((uint64_t)v9, (uint64_t *)&unk_10006FB60);
    return 0;
  }
  return result;
}

id sub_1000435C0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CentralizedFeedbackDaemon()), "init");
  qword_100072588 = (uint64_t)result;
  return result;
}

uint64_t sub_1000435EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = static Strings.Daemon.bundleIdentifier.getter();
  v2 = v1;
  v3 = String.utf8CString.getter(v0);
  swift_bridgeObjectRelease(v2);
  LOBYTE(v2) = os_variant_has_internal_diagnostics(v3 + 32);
  result = swift_release(v3);
  byte_100070278 = v2;
  return result;
}

uint64_t sub_100043638()
{
  int v0;
  uint64_t result;

  if (qword_10006EEC0 != -1)
    result = swift_once(&qword_10006EEC0, sub_1000435EC);
  if (byte_100070278)
    v0 = 5;
  else
    v0 = 10;
  dword_10007027C = v0;
  return result;
}

uint64_t sub_100043690()
{
  double v0;
  uint64_t result;

  if (qword_10006EEC0 != -1)
    result = swift_once(&qword_10006EEC0, sub_1000435EC);
  v0 = 86400.0;
  if (byte_100070278)
    v0 = 10800.0;
  qword_100070280 = *(_QWORD *)&v0;
  return result;
}

id sub_100043740()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  void *v28;
  id result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_1000097B4(v6, (uint64_t)qword_100070260);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    v31 = ObjectType;
    *(_DWORD *)v10 = 136446210;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v13 = String.init<A>(describing:)(&v31, MetatypeMetadata);
    v15 = v14;
    v31 = sub_1000572F8(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Started %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  static TaskPriority.utility.getter(v16);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_10006A960, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v1;
  v19 = v1;
  v20 = sub_10004F334((uint64_t)v5, (uint64_t)&unk_100070358, (uint64_t)v18);
  swift_release(v20);
  v21 = sub_100009730((uint64_t)v5, &qword_10006FB00);
  static Strings.XPC.CentralizedFeedback.machService.getter(v21);
  v23 = v22;
  v24 = objc_allocWithZone((Class)NSXPCListener);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v26 = objc_msgSend(v24, "initWithMachServiceName:", v25);

  v27 = OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener;
  v28 = *(void **)&v19[OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener];
  *(_QWORD *)&v19[OBJC_IVAR____TtC9feedbackd25CentralizedFeedbackDaemon_listener] = v26;

  result = *(id *)&v19[v27];
  if (result)
  {
    objc_msgSend(result, "setDelegate:", v19);
    result = *(id *)&v19[v27];
    if (result)
      return objc_msgSend(result, "resume");
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100043A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 40) = a4;
  v5 = sub_100005D4C(&qword_10006EF20);
  *(_QWORD *)(v4 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100043A78, 0, 0);
}

uint64_t sub_100043A78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v4 = v3;
  v10 = v2;
  v11 = v3;
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = 0x6D6561446266632ELL;
  v5._object = (void *)0xEF74726174536E6FLL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = String.utf8CString.getter(v10);
  swift_bridgeObjectRelease(v11);
  v7 = os_transaction_create(v6 + 32);
  swift_unknownObjectRelease(v7);
  swift_release(v6);
  if (qword_10006EE00 != -1)
    swift_once(&qword_10006EE00, sub_10000AC00);
  v8 = qword_100072518;
  *(_QWORD *)(v1 + 56) = qword_100072518;
  return swift_task_switch(sub_100043B54, v8, 0);
}

uint64_t sub_100043B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "doubleForKey:", v4);
  v6 = v5;

  Date.init(timeIntervalSince1970:)(v6);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 0, 1, v7);
  v8 = v2 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate;
  swift_beginAccess(v2 + OBJC_IVAR____TtC9feedbackd25CFBNotificationController_lastNotificationDate, v0 + 16, 33, 0);
  sub_10000C8FC(v1, v8);
  swift_endAccess(v0 + 16);
  return swift_task_switch(sub_100043C6C, 0, 0);
}

uint64_t sub_100043C6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_10004A7F8();
  sub_10004B318();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100043CA8(void *a1, const char *a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;

  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)qword_100070260);
  v8 = a1;
  v5 = Logger.logObject.getter(v8);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 67240192;
    v9 = objc_msgSend(v8, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 8u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100043E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  v8 = sub_100005D4C(&qword_10006F080);
  v7[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v7[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[27] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[28] = swift_task_alloc(v11);
  v7[29] = swift_task_alloc(v11);
  return swift_task_switch(sub_100043EF0, 0, 0);
}

uint64_t sub_100043EF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t inited;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t *type;
  void *v61;
  uint64_t v62;
  uint64_t v63;

  v2 = (uint64_t *)(v1 + 96);
  v3 = v1 + 104;
  v4 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v6 = v5;
  v62 = v4;
  v63 = v5;
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = 0x64696C61766E692ELL;
  v7._object = (void *)0xED00006E6F697461;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8 = String.utf8CString.getter(v62);
  swift_bridgeObjectRelease(v63);
  v9 = os_transaction_create(v8 + 32);
  swift_release(v8);
  swift_unknownObjectRelease(v9);
  v10 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = JSONDecoder.init()();
  v12 = type metadata accessor for FBKSDonation(0);
  sub_100009BE4(&qword_100070338, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSDonation, (uint64_t)&protocol conformance descriptor for FBKSInteraction);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v12);
  swift_release(v11);
  type = (uint64_t *)(v1 + 160);
  v13 = qword_10006EEA8;
  v14 = *(id *)(v1 + 104);
  if (v13 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_1000097B4(v15, (uint64_t)qword_100070260);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v61 = v14;
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v62 = v20;
    *(_DWORD *)v19 = 136315138;
    *type = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C860, &v62);
    v3 = v1 + 104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(type, v1 + 168);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: Decoded donation", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    v14 = v61;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  v22 = *(_QWORD *)(v1 + 208);
  v23 = *(_QWORD *)(v1 + 216);
  v24 = *(_QWORD *)(v1 + 200);
  dispatch thunk of FBKSInteraction.evaluationID.getter(v25);

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
  {
    v26 = sub_100009730(*(_QWORD *)(v1 + 200), &qword_10006F080);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v62 = v30;
      *(_DWORD *)v29 = 136446210;
      *v2 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C860, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s donation evaluationID is undefined", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    (*(void (**)(_QWORD))(v1 + 184))(0);
  }
  else
  {
    v31 = *(_QWORD *)(v1 + 224);
    v32 = *(_QWORD *)(v1 + 232);
    v33 = *(_QWORD *)(v1 + 208);
    v34 = *(_QWORD *)(v1 + 216);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 32))(v32, *(_QWORD *)(v1 + 200), v33);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v31, v32, v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v1 + 224);
    v40 = *(_QWORD *)(v1 + 208);
    if (v38)
    {
      v58 = *(_QWORD *)(v1 + 216);
      v41 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(64, -1);
      v62 = v59;
      *(_DWORD *)v41 = 136315394;
      *(_QWORD *)(v1 + 144) = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C860, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
      *(_WORD *)(v41 + 12) = 2080;
      v42 = sub_100009BE4((unint64_t *)&unk_10006F0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v40, v42);
      v44 = v37;
      v46 = v45;
      *(_QWORD *)(v1 + 152) = sub_1000572F8(v43, v45, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, type);
      swift_bridgeObjectRelease(v46);
      v47 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v47(v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v36, v44, "%s: Donation has valid evaluationID: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 216) + 8);
      v47(v39, v40);
    }

    v51 = *(_QWORD *)(v1 + 232);
    v52 = type metadata accessor for CFBBiomeDonator();
    inited = swift_initStackObject(v52, v1 + 16);
    v54 = CFBBiomeDonator.init()(inited);
    CFBBiomeDonator.invalidate(evaluationID:)(v51);
    v55 = *(_QWORD *)(v1 + 232);
    v56 = *(_QWORD *)(v1 + 208);
    v57 = *(void (**)(_QWORD))(v1 + 184);
    swift_release(v54);
    v57(0);

    v47(v55, v56);
  }
  v48 = *(_QWORD *)(v1 + 224);
  v49 = *(_QWORD *)(v1 + 200);
  swift_task_dealloc(*(_QWORD *)(v1 + 232));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100044A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;

  v6 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000096E8(a1, (uint64_t)v8);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  (*(void (**)(uint64_t, Class, uint64_t))(a3 + 16))(a3, isa, a2);

}

uint64_t sub_100044AF0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = v4;
  ObjectType = swift_getObjectType(v4);
  v11 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_1000097B4(v14, (uint64_t)qword_100070260);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v33 = a1;
    v18 = swift_slowAlloc(12, -1);
    v31 = ObjectType;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v32 = a3;
    v21 = v20;
    v35 = v20;
    *(_DWORD *)v19 = 136446210;
    v34 = sub_1000572F8(0xD000000000000021, 0x800000010005C600, &v35);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v22 = v21;
    a3 = v32;
    swift_slowDealloc(v22, -1, -1);
    v23 = v19;
    ObjectType = v31;
    swift_slowDealloc(v23, -1, -1);
  }

  static TaskPriority.utility.getter(v24);
  v25 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
  v26 = (_QWORD *)swift_allocObject(&unk_10006A910, 80, 7);
  v26[2] = 0;
  v26[3] = 0;
  v26[4] = a1;
  v26[5] = a2;
  v26[6] = a3;
  v26[7] = a4;
  v26[8] = v5;
  v26[9] = ObjectType;
  sub_100037234(a1, a2);
  swift_retain(a4);
  v27 = v5;
  v28 = sub_10004F334((uint64_t)v13, (uint64_t)&unk_100070330, (uint64_t)v26);
  swift_release(v28);
  return sub_100009730((uint64_t)v13, &qword_10006FB00);
}

uint64_t sub_100044D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v8[21] = a8;
  v8[22] = v15;
  v8[19] = a6;
  v8[20] = a7;
  v8[17] = a4;
  v8[18] = a5;
  v9 = sub_100005D4C(&qword_10006F080);
  v8[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005D4C(&qword_10006FB00);
  v8[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v8[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[26] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[27] = swift_task_alloc(v13);
  v8[28] = swift_task_alloc(v13);
  return swift_task_switch(sub_100044E40, 0, 0);
}

uint64_t sub_100044E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t inited;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v2 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v4 = v3;
  v52 = v2;
  v53 = v3;
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = 0x6F6974616E6F642ELL;
  v5._object = (void *)0xE90000000000006ELL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = String.utf8CString.getter(v52);
  swift_bridgeObjectRelease(v53);
  v7 = os_transaction_create(v6 + 32);
  swift_unknownObjectRelease(v7);
  swift_release(v6);
  v8 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONDecoder.init()();
  v10 = type metadata accessor for FBKSDonation(0);
  sub_100009BE4(&qword_100070338, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSDonation, (uint64_t)&protocol conformance descriptor for FBKSInteraction);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10);
  v11 = *(_QWORD *)(v1 + 224);
  swift_release(v9);
  v12 = *(id *)(v1 + 112);
  UUID.init()(v12);
  v13 = v12;
  dispatch thunk of FBKSInteraction.setEvaluationID(_:)(v11);

  v14 = sub_10004B290(0x20000000000001uLL);
  if (v14 == 0x20000000000000 || (double)v14 * 1.11022302e-16 + 0.0 <= 1.0)
  {
    v30 = type metadata accessor for CFBBiomeDonator();
    inited = swift_initStackObject(v30, v1 + 16);
    v32 = CFBBiomeDonator.init()(inited);
    CFBBiomeDonator.write(donation:)(v13);
    swift_release(v32);

  }
  else
  {

    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v16 = *(_QWORD *)(v1 + 216);
    v15 = *(_QWORD *)(v1 + 224);
    v18 = *(_QWORD *)(v1 + 200);
    v17 = *(_QWORD *)(v1 + 208);
    v19 = type metadata accessor for Logger(0);
    sub_1000097B4(v19, (uint64_t)qword_100070260);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v1 + 216);
    if (v23)
    {
      v48 = *(_QWORD *)(v1 + 208);
      v49 = *(_QWORD *)(v1 + 200);
      v25 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(32, -1);
      v52 = v50;
      *(_DWORD *)v25 = 141558275;
      *(_QWORD *)(v1 + 96) = 1752392040;
      v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104);
      *(_WORD *)(v25 + 12) = 2081;
      v27 = UUID.uuidString.getter(v26);
      v29 = v28;
      *(_QWORD *)(v1 + 104) = sub_1000572F8(v27, v28, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v24, v49);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Donation dropped due to sampling: %{private,mask.hash}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 208) + 8))(*(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 200));
    }

  }
  if (qword_10006EEC0 != -1)
    v33 = swift_once(&qword_10006EEC0, sub_1000435EC);
  if (byte_100070278 == 1)
  {
    v34 = *(_QWORD *)(v1 + 192);
    v51 = *(_OWORD *)(v1 + 168);
    static TaskPriority.utility.getter(v33);
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
    v36 = swift_allocObject(&unk_10006A938, 48, 7);
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = 0;
    *(_OWORD *)(v36 + 32) = v51;
    v37 = (id)v51;
    v38 = sub_10004F334(v34, (uint64_t)&unk_100070348, v36);
    swift_release(v38);
    sub_100009730(v34, &qword_10006FB00);
  }
  v39 = *(_QWORD *)(v1 + 224);
  v40 = *(_QWORD *)(v1 + 200);
  v41 = *(_QWORD *)(v1 + 208);
  v42 = *(_QWORD *)(v1 + 184);
  v43 = *(void (**)(uint64_t, _QWORD))(v1 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v42, v39, v40);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
  v43(v42, 0);

  sub_100009730(v42, &qword_10006F080);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  v44 = *(_QWORD *)(v1 + 216);
  v46 = *(_QWORD *)(v1 + 184);
  v45 = *(_QWORD *)(v1 + 192);
  swift_task_dealloc(*(_QWORD *)(v1 + 224));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000457BC()
{
  return swift_task_switch(sub_1000457D0, 0, 0);
}

uint64_t sub_1000457D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  NSString v19;
  unsigned __int8 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSString v33;
  NSString v34;
  __CFNotificationCenter *v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v4 = v3;
  v37 = v2;
  v38 = v3;
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = 0x6F446B636568632ELL;
  v5._object = (void *)0xEF736E6F6974616ELL;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = String.utf8CString.getter(v37);
  swift_bridgeObjectRelease(v38);
  v7 = os_transaction_create(v6 + 32);
  swift_release(v6);
  swift_unknownObjectRelease(v7);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_1000097B4(v8, (uint64_t)qword_100070260);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Configuring internal app visibility.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  static Strings.feedbackInternalBundleIdentifier.getter();
  v14 = v13;
  v15 = objc_allocWithZone((Class)NSUserDefaults);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v17 = objc_msgSend(v15, "initWithSuiteName:", v16);

  if (!v17)
  {
    v22 = Logger.logObject.getter(v18);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v37 = v27;
      *(_DWORD *)v26 = 136446210;
      *(_QWORD *)(v1 + 16) = sub_1000572F8(0xD000000000000021, 0x800000010005C600, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
      _os_log_impl((void *)&_mh_execute_header, v22, v25, "%{public}s error: Failed to access the FeedbackInternal UserDefaults from daemonHi .", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    goto LABEL_12;
  }
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v17, "BOOLForKey:", v19);

  if ((v20 & 1) != 0)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "FeedbackInternal is already visible.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

LABEL_12:
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v29 = sub_10004CAA8();
  if ((v29 & 1) != 0)
  {
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Changing the visibility of FeedbackInternal app.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "setBool:forKey:", 1, v33);

    v34 = String._bridgeToObjectiveC()();
    v35 = CFNotificationCenterGetDarwinNotifyCenter();
    v36 = v34;
    CFNotificationCenterPostNotification(v35, v36, 0, 0, 1u);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100045C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v7 + 168) = a7;
  *(_QWORD *)(v7 + 128) = a5;
  *(_QWORD *)(v7 + 136) = a6;
  *(_QWORD *)(v7 + 120) = a4;
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 144) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 152) = v9;
  *(_QWORD *)(v7 + 160) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100045CB0, 0, 0);
}

uint64_t sub_100045CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  void (*v12)(_QWORD);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(void);
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v5 = v4;
  v38 = v3;
  v39 = v4;
  swift_bridgeObjectRetain(v4);
  v6._countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x800000010005C810;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7 = String.utf8CString.getter(v38);
  swift_bridgeObjectRelease(v39);
  v8 = os_transaction_create(v7 + 32);
  swift_release(v7);
  swift_unknownObjectRelease(v8);
  v9 = type metadata accessor for CFBBiomeReader();
  swift_initStackObject(v9, v1 + 16);
  v10 = CFBBiomeReader.init()();
  v11 = CFBBiomeReader.fetchDonation(evaluationID:)(v2);
  swift_release(v10);
  if (v11)
  {
    v12 = *(void (**)(_QWORD))(v1 + 128);
    v13 = v11;
    _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0();
    v12(0);

  }
  else
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v14 = *(_QWORD *)(v1 + 152);
    v15 = *(_QWORD *)(v1 + 160);
    v16 = *(_QWORD *)(v1 + 144);
    v17 = *(_QWORD *)(v1 + 120);
    v18 = type metadata accessor for Logger(0);
    sub_1000097B4(v18, (uint64_t)qword_100070260);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v17, v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v1 + 160);
    if (v22)
    {
      v35 = *(_QWORD *)(v1 + 152);
      v36 = *(_QWORD *)(v1 + 144);
      v24 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(64, -1);
      v38 = v37;
      *(_DWORD *)v24 = 136446723;
      *(_QWORD *)(v1 + 96) = sub_1000572F8(0xD00000000000002BLL, 0x800000010005C830, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104);
      *(_WORD *)(v24 + 12) = 2160;
      *(_QWORD *)(v1 + 104) = 1752392040;
      v25 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112);
      *(_WORD *)(v24 + 22) = 2081;
      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      *(_QWORD *)(v1 + 112) = sub_1000572F8(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120);
      swift_bridgeObjectRelease(v28);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v23, v36);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 152) + 8))(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 144));
    }

    v29 = *(void (**)(void))(v1 + 128);
    v30 = sub_10001B348();
    v31 = swift_allocError(&type metadata for StorageError, v30, 0, 0);
    *v32 = 13;
    v33 = (void *)_convertErrorToNSError(_:)(v31);
    v29();

    swift_errorRelease(v31);
  }
  swift_task_dealloc(*(_QWORD *)(v1 + 160));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10004635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_BYTE *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  return swift_task_switch(sub_10004637C, 0, 0);
}

uint64_t sub_10004637C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void (*v17)(_QWORD);
  uint64_t v19;
  uint64_t v20;

  v2 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v4 = v3;
  v19 = v2;
  v20 = v3;
  swift_bridgeObjectRetain(v3);
  v5._object = (void *)0x800000010005C810;
  v5._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = String.utf8CString.getter(v19);
  swift_bridgeObjectRelease(v20);
  v7 = os_transaction_create(v6 + 32);
  swift_release(v6);
  swift_unknownObjectRelease(v7);
  v8 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONDecoder.init()();
  v10 = type metadata accessor for FBKSInteraction(0);
  sub_100009BE4(&qword_1000703F8, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSInteraction, (uint64_t)&protocol conformance descriptor for FBKSInteraction);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10);
  swift_release(v9);
  v11 = *(id *)(v1 + 16);
  if ((dispatch thunk of FBKSInteraction.sentPresented.getter(v11) & 1) != 0)
  {

    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_1000097B4(v12, (uint64_t)qword_100070260);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Ignoring .presented(), sentPresented already set", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(void (**)(_QWORD))(v1 + 56);

  }
  else
  {
    v17 = *(void (**)(_QWORD))(v1 + 56);
    _s9feedbackd12CFBAnalyticsV24sendInteractionPresented_8isInliney15FeedbackService15FBKSInteractionC_SbtFZ_0();

  }
  v17(0);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100046828(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;

  v12 = _Block_copy(aBlock);
  v13 = a3;
  v18 = a1;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = v15;

  v17 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v17 + 16) = v12;
  a7(v14, v16, a6, v17);
  swift_release(v17);
  sub_100012720(v14, v16);

}

uint64_t sub_1000468E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 104) = a6;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  v9 = sub_100005D4C(&qword_10006F080);
  *(_QWORD *)(v8 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 80) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 88) = v11;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100046974, 0, 0);
}

uint64_t sub_100046974(uint64_t a1)
{
  uint64_t v1;
  uint8_t *v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = *(uint8_t **)(v1 + 96);
  v3 = *(unsigned __int8 *)(v1 + 104);
  v4 = *(void **)(v1 + 48);
  v5 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v7 = v6;
  v18 = v5;
  v19 = v6;
  swift_bridgeObjectRetain(v6);
  v8._object = (void *)0x800000010005C7B0;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9 = String.utf8CString.getter(v18);
  swift_bridgeObjectRelease(v19);
  v10 = os_transaction_create(v9 + 32);
  swift_release(v9);
  swift_unknownObjectRelease(v10);
  sub_100046DA8(v4, v3, v2);
  v12 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 96);
  v14 = *(_QWORD *)(v1 + 72);
  v13 = *(_QWORD *)(v1 + 80);
  v15 = *(void (**)(uint64_t, _QWORD))(v1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v11, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v13);
  v15(v14, 0);
  sub_100009730(v14, &qword_10006F080);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v16 = *(_QWORD *)(v1 + 72);
  swift_task_dealloc(*(_QWORD *)(v1 + 96));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100046D00(void *a1, int a2, void *a3, void *aBlock, void (*a5)(uint64_t, unint64_t, id, void *))
{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  v13 = a1;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v11;

  _Block_copy(v8);
  a5(v10, v12, v13, v8);
  _Block_release(v8);
  _Block_release(v8);
  sub_100012720(v10, v12);

}

void sub_100046DA8(void *a1@<X0>, int a2@<W1>, uint8_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  int v27;
  void (*v28)(uint8_t *, char *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  char *v43;
  id v44;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t inited;
  _QWORD *v69;
  uint64_t (**v70)(void **, uint64_t);
  uint64_t (**v71)(void **, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  char *v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  id v92;
  int v93;
  uint8_t *v94;
  uint64_t v95;
  char v96[48];
  uint64_t v97;
  _BYTE v98[56];
  uint64_t v99;

  v94 = a3;
  v93 = a2;
  v4 = sub_100005D4C(&qword_10006F080);
  __chkstk_darwin(v4);
  v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005D4C(&qword_100070300);
  __chkstk_darwin(v7);
  v90 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FBKSEvaluation.Action(0);
  __chkstk_darwin(v9);
  v89 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v91 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v88 = (char *)&v86 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v86 - v17;
  v19 = type metadata accessor for FBKSEvaluation.Subject(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (uint64_t *)((char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __chkstk_darwin(v21);
  v26 = (void **)((char *)&v86 - v25);
  v92 = a1;
  FBKSEvaluation.subject.getter(v24);
  v27 = (*(uint64_t (**)(void **, uint64_t))(v20 + 88))(v26, v19);
  if (v27 == enum case for FBKSEvaluation.Subject.id(_:))
  {
    (*(void (**)(void **, uint64_t))(v20 + 96))(v26, v19);
    (*(void (**)(char *, void **, uint64_t))(v12 + 32))(v18, v26, v11);
    v28 = *(void (**)(uint8_t *, char *, uint64_t))(v12 + 16);
    v28(v94, v18, v11);
    v29 = type metadata accessor for CFBBiomeReader();
    swift_initStackObject(v29, v96);
    v30 = CFBBiomeReader.init()();
    v31 = v95;
    v32 = CFBBiomeReader.fetchDonation(evaluationID:)((uint64_t)v18);
    v95 = v31;
    if (v31)
    {
      swift_release(v30);
      v33 = *(void (**)(char *, uint64_t))(v12 + 8);
      v33(v18, v11);
      v33((char *)v94, v11);
      return;
    }
    v41 = v32;
    v87 = v12;
    v86 = v11;
    swift_release(v30);
    if (v41)
    {
      *v23 = v41;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for FBKSEvaluation.Subject.interaction(_:), v19);
      v42 = v41;
      v43 = v89;
      v44 = v92;
      v45 = FBKSEvaluation.action.getter(v42);
      v46 = v90;
      FBKSEvaluation.formResponse.getter(v45);
      v47 = objc_allocWithZone((Class)type metadata accessor for FBKSEvaluation(0));
      v48 = (id)FBKSEvaluation.init(subject:action:formResponse:)(v23, v43, v46);

      v38 = v87;
      v11 = v86;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v18, v86);
    }
    else
    {
      v44 = v92;
      if (qword_10006EEA8 != -1)
        swift_once(&qword_10006EEA8, sub_1000432FC);
      v50 = type metadata accessor for Logger(0);
      sub_1000097B4(v50, (uint64_t)qword_100070260);
      v51 = v88;
      v52 = v18;
      v11 = v86;
      v53 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v88, v18, v86);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc(32, -1);
        v57 = swift_slowAlloc(64, -1);
        v99 = v57;
        *(_DWORD *)v56 = 136446723;
        v97 = sub_1000572F8(0xD000000000000027, 0x800000010005C5D0, &v99);
        v90 = v52;
        v58 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        *(_WORD *)(v56 + 12) = 2160;
        v97 = 1752392040;
        v59 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        *(_WORD *)(v56 + 22) = 2081;
        v60 = UUID.uuidString.getter(v59);
        v62 = v61;
        v97 = sub_1000572F8(v60, v61, &v99);
        v11 = v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
        swift_bridgeObjectRelease(v62);
        v63 = v87;
        v64 = *(void (**)(char *, uint64_t))(v87 + 8);
        v64(v58, v11);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v56, 0x20u);
        swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
        v65 = v57;
        v38 = v63;
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v56, -1, -1);

        v64(v90, v11);
      }
      else
      {

        v38 = v87;
        v66 = *(void (**)(char *, uint64_t))(v87 + 8);
        v66(v51, v11);
        v66(v52, v11);
      }
      v48 = v44;
    }
    v35 = v94;
    v49 = v95;
  }
  else
  {
    v35 = v94;
    v34 = v95;
    if (v27 != enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      v40 = sub_1000113F4(0xD00000000000001FLL, 0x800000010005C5B0);
      swift_willThrow(v40);
      (*(void (**)(void **, uint64_t))(v20 + 8))(v26, v19);
      return;
    }
    v36 = (*(uint64_t (**)(void **, uint64_t))(v20 + 96))(v26, v19);
    v37 = *v26;
    dispatch thunk of FBKSInteraction.evaluationID.getter(v36);
    v38 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) == 1)
    {
      v39 = sub_100009730((uint64_t)v6, &qword_10006F080);
      UUID.init()(v39);
      dispatch thunk of FBKSInteraction.setEvaluationID(_:)(v35);

    }
    else
    {

      (*(void (**)(uint8_t *, char *, uint64_t))(v12 + 32))(v35, v6, v11);
    }
    v49 = v34;
    v44 = v92;
    v48 = v92;
  }
  _s9feedbackd12CFBAnalyticsV14sendEvaluation_8isInliney15FeedbackService14FBKSEvaluationC_SbtFZ_0(v48, v93 & 1);
  v67 = type metadata accessor for CFBBiomeDonator();
  inited = swift_initStackObject(v67, v98);
  v69 = CFBBiomeDonator.init()(inited);
  sub_10000A968(0, &qword_100070320, BMFeedbackEvaluationResponse_ptr);
  v70 = sub_10002EE64(v44);
  if (v49)
  {
    swift_release(v69);

    (*(void (**)(uint8_t *, uint64_t))(v38 + 8))(v35, v11);
  }
  else
  {
    v71 = v70;
    objc_msgSend((id)v69[2], "sendEvent:", v70);
    swift_release(v69);

    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v72 = type metadata accessor for Logger(0);
    sub_1000097B4(v72, (uint64_t)qword_100070260);
    v73 = v91;
    v74 = (*(uint64_t (**)(char *, uint8_t *, uint64_t))(v38 + 16))(v91, v35, v11);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = v73;
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = swift_slowAlloc(32, -1);
      v87 = v38;
      v95 = v79;
      v99 = v79;
      *(_DWORD *)v78 = 136446210;
      v94 = v78 + 4;
      v80 = sub_100009BE4((unint64_t *)&unk_10006F0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v81 = v77;
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v11, v80);
      v84 = v83;
      v97 = sub_1000572F8(v82, v83, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, v98);
      swift_bridgeObjectRelease(v84);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v81, v11);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Evaluation recorded with ID: %{public}s", v78, 0xCu);
      v85 = v95;
      swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v73, v11);

    }
  }
}

uint64_t sub_100047660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[20] = v8;
  v6[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000476C4, 0, 0);
}

uint64_t sub_1000476C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, unint64_t, _QWORD);
  uint64_t v39;
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = (_QWORD *)(v1 + 96);
  v4 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v6 = v5;
  v42 = v4;
  v43 = v5;
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = 0xD000000000000010;
  v7._object = (void *)0x800000010005C760;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8 = String.utf8CString.getter(v42);
  swift_bridgeObjectRelease(v43);
  v9 = os_transaction_create(v8 + 32);
  swift_release(v8);
  swift_unknownObjectRelease(v9);
  v10 = type metadata accessor for CFBBiomeReader();
  swift_initStackObject(v10, v1 + 16);
  v11 = CFBBiomeReader.init()();
  v12 = CFBBiomeReader.fetchEvaluation(evaluationID:)(v2);
  swift_release(v11);
  if (!v12)
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v13 = *(_QWORD *)(v1 + 160);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = *(_QWORD *)(v1 + 152);
    v16 = *(_QWORD *)(v1 + 128);
    v17 = type metadata accessor for Logger(0);
    sub_1000097B4(v17, (uint64_t)qword_100070260);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v16, v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v1 + 160);
    v23 = *(_QWORD *)(v1 + 168);
    if (v21)
    {
      type = v20;
      v39 = *(_QWORD *)(v1 + 152);
      v24 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(64, -1);
      v42 = v40;
      *(_DWORD *)v24 = 136446723;
      *(_QWORD *)(v1 + 104) = sub_1000572F8(0xD000000000000029, 0x800000010005C730, &v42);
      v3 = (_QWORD *)(v1 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112);
      *(_WORD *)(v24 + 12) = 2160;
      *(_QWORD *)(v1 + 112) = 1752392040;
      v25 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120);
      *(_WORD *)(v24 + 22) = 2081;
      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      *(_QWORD *)(v1 + 120) = sub_1000572F8(v26, v27, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128);
      swift_bridgeObjectRelease(v28);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v39);
      _os_log_impl((void *)&_mh_execute_header, v19, type, "%{public}s could not find Evaluation: %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 152));

    }
  }
  v29 = type metadata accessor for JSONEncoder(0);
  v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v31 = JSONEncoder.init()(v30);
  *v3 = v12;
  v32 = sub_100005D4C(&qword_1000703C0);
  v33 = sub_10004E880();
  v34 = dispatch thunk of JSONEncoder.encode<A>(_:)(v3, v32, v33);
  v36 = v35;
  v37 = *(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 136);
  swift_release(v31);
  sub_100037234(v34, v36);
  v37(v34, v36, 0);
  sub_100012720(v34, v36);
  sub_100012720(v34, v36);

  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100047DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[20] = v8;
  v6[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100047E60, 0, 0);
}

uint64_t sub_100047E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, unint64_t, _QWORD);
  uint64_t v39;
  uint64_t v40;
  os_log_type_t type;
  uint64_t v42;
  uint64_t v43;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = (_QWORD *)(v1 + 96);
  v4 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v6 = v5;
  v42 = v4;
  v43 = v5;
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = 0xD000000000000011;
  v7._object = (void *)0x800000010005C710;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8 = String.utf8CString.getter(v42);
  swift_bridgeObjectRelease(v43);
  v9 = os_transaction_create(v8 + 32);
  swift_release(v8);
  swift_unknownObjectRelease(v9);
  v10 = type metadata accessor for CFBBiomeReader();
  swift_initStackObject(v10, v1 + 16);
  v11 = CFBBiomeReader.init()();
  v12 = CFBBiomeReader.fetchDonation(evaluationID:)(v2);
  swift_release(v11);
  if (!v12)
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v13 = *(_QWORD *)(v1 + 160);
    v14 = *(_QWORD *)(v1 + 168);
    v15 = *(_QWORD *)(v1 + 152);
    v16 = *(_QWORD *)(v1 + 128);
    v17 = type metadata accessor for Logger(0);
    sub_1000097B4(v17, (uint64_t)qword_100070260);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v16, v15);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v1 + 160);
    v23 = *(_QWORD *)(v1 + 168);
    if (v21)
    {
      type = v20;
      v39 = *(_QWORD *)(v1 + 152);
      v24 = swift_slowAlloc(32, -1);
      v40 = swift_slowAlloc(64, -1);
      v42 = v40;
      *(_DWORD *)v24 = 136446723;
      *(_QWORD *)(v1 + 104) = sub_1000572F8(0xD000000000000027, 0x800000010005C6E0, &v42);
      v3 = (_QWORD *)(v1 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112);
      *(_WORD *)(v24 + 12) = 2160;
      *(_QWORD *)(v1 + 112) = 1752392040;
      v25 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120);
      *(_WORD *)(v24 + 22) = 2081;
      v26 = UUID.uuidString.getter(v25);
      v28 = v27;
      *(_QWORD *)(v1 + 120) = sub_1000572F8(v26, v27, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128);
      swift_bridgeObjectRelease(v28);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v39);
      _os_log_impl((void *)&_mh_execute_header, v19, type, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 152));

    }
  }
  v29 = type metadata accessor for JSONEncoder(0);
  v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v31 = JSONEncoder.init()(v30);
  *v3 = v12;
  v32 = sub_100005D4C(&qword_1000703A0);
  v33 = sub_10004E6C4(&qword_1000703A8, &qword_1000703A0, (uint64_t)&protocol conformance descriptor for <A> A?);
  v34 = dispatch thunk of JSONEncoder.encode<A>(_:)(v3, v32, v33);
  v36 = v35;
  v37 = *(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 136);
  swift_release(v31);
  sub_100037234(v34, v36);
  v37(v34, v36, 0);
  sub_100012720(v34, v36);
  sub_100012720(v34, v36);

  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000485B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 40) = a6;
  *(_QWORD *)(v7 + 48) = a7;
  *(_BYTE *)(v7 + 60) = a5;
  *(_DWORD *)(v7 + 56) = a4;
  return swift_task_switch(sub_1000485D0, 0, 0);
}

uint64_t sub_1000485D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, unint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = (uint64_t *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 60);
  v4 = *(_DWORD *)(v1 + 56);
  v5 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v7 = v6;
  v31 = v5;
  v32 = v6;
  swift_bridgeObjectRetain(v6);
  v8._countAndFlagsBits = 0x6F4468637465662ELL;
  v8._object = (void *)0xEF736E6F6974616ELL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9 = String.utf8CString.getter(v31);
  swift_bridgeObjectRelease(v32);
  v10 = os_transaction_create(v9 + 32);
  swift_release(v9);
  swift_unknownObjectRelease(v10);
  v11 = type metadata accessor for CFBBiomeReader();
  swift_allocObject(v11, 48, 7);
  v12 = CFBBiomeReader.init()();
  v13 = (uint64_t)CFBBiomeReader.fetchDonations(count:fromLatest:)(v4, v3);
  swift_release(v12);
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v29 = v13;
    else
      v29 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v13);
    if (v30)
      goto LABEL_8;
  }
  else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_8;
  }
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_1000097B4(v14, (uint64_t)qword_100070260);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_DWORD *)v18 = 136446210;
    v31 = v19;
    *v2 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C6B0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s could not find any donations", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

LABEL_8:
  v20 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = JSONEncoder.init()();
  *v2 = v13;
  v22 = sub_100005D4C(&qword_100070378);
  v23 = sub_10004E6C4(&qword_100070380, &qword_100070378, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v24 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1 + 16, v22, v23);
  v26 = v25;
  v27 = *(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 40);
  swift_release(v21);
  swift_bridgeObjectRelease(v13);
  sub_100037234(v24, v26);
  v27(v24, v26, 0);
  sub_100012720(v24, v26);
  sub_100012720(v24, v26);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100048C08(uint64_t a1, unint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint8_t *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  char *v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v60 = a2;
  v64 = a4;
  v59 = a1;
  v5 = type metadata accessor for Failure(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v56 - v11;
  __chkstk_darwin(v10);
  v62 = (char *)&v56 - v13;
  v14 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v14);
  v58 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000097B4(v16, (uint64_t)qword_100070260);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  v20 = os_log_type_enabled(v18, v19);
  v63 = v9;
  if (v20)
  {
    v21 = swift_slowAlloc(12, -1);
    v57 = a3;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v66 = v23;
    *(_DWORD *)v22 = 136446210;
    v65 = sub_1000572F8(0xD000000000000023, 0x800000010005C510, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v22;
    a3 = v57;
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v25)
  {
    v26 = v25;
    v27 = sub_1000434E0((void (*)(void))&static Strings.XPC.CentralizedFeedback.remoteEvaluationEntitlement.getter);
    if ((v27 & 1) != 0)
    {
      v28 = (uint64_t)v58;
      static TaskPriority.userInitiated.getter();
      v29 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
      v30 = (_QWORD *)swift_allocObject(&unk_10006A8E8, 72, 7);
      v30[2] = 0;
      v30[3] = 0;
      v31 = v59;
      v32 = v60;
      v30[4] = v59;
      v30[5] = v32;
      v33 = v64;
      v30[6] = a3;
      v30[7] = v33;
      v34 = v61;
      v30[8] = v61;
      sub_100037234(v31, v32);
      sub_100041710((uint64_t)a3, v33);
      v35 = v34;
      v36 = sub_10004F334(v28, (uint64_t)&unk_1000702F8, (uint64_t)v30);
      swift_release(v36);

      sub_100009730(v28, &qword_10006FB00);
      return;
    }
    v45 = Logger.logObject.getter(v27);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v63 = v12;
      v49 = a3;
      v50 = v48;
      v66 = v48;
      *(_DWORD *)v47 = 136315138;
      v65 = sub_1000572F8(0xD000000000000023, 0x800000010005C510, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Client not entitled to call %s", v47, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v51 = v50;
      a3 = v49;
      v12 = v63;
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }

    v52 = v62;
    v66 = 0;
    v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(v67);
    Failure.init(message:)(0xD00000000000003FLL, 0x800000010005C4D0);
    if (a3)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v52, v5);
      v53 = sub_100009BE4(&qword_1000702E8, (uint64_t (*)(uint64_t))&type metadata accessor for Failure, (uint64_t)&protocol conformance descriptor for Failure);
      v42 = swift_allocError(v5, v53, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v54, v12, v5);
      v55 = (void *)_convertErrorToNSError(_:)(v42);
      a3(0, 0xF000000000000000, v55);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v52, v5);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v52, v5);

  }
  else
  {
    v37 = Logger.logObject.getter(0);
    v38 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Current XPC connection is nil. Cannot check entitlements", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    v40 = v63;
    Failure.init(message:)(0xD000000000000038, 0x800000010005C490);
    if (a3)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v40, v5);
      v41 = sub_100009BE4(&qword_1000702E8, (uint64_t (*)(uint64_t))&type metadata accessor for Failure, (uint64_t)&protocol conformance descriptor for Failure);
      v42 = swift_allocError(v5, v41, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v43, v12, v5);
      v44 = (void *)_convertErrorToNSError(_:)(v42);
      a3(0, 0xF000000000000000, v44);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
LABEL_16:
      swift_errorRelease(v42);
      return;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
  }
}

uint64_t sub_1000492A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8[17] = a7;
  v8[18] = a8;
  v8[15] = a5;
  v8[16] = a6;
  v8[14] = a4;
  v9 = type metadata accessor for FBKSRemoteAlertRequest(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FBKSRemoteEvaluationRequest(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005D4C(&qword_100070300);
  v8[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FBKSEvaluation.Action(0);
  v8[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Failure(0);
  v8[27] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[28] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[29] = swift_task_alloc(v17);
  v8[30] = swift_task_alloc(v17);
  v8[31] = swift_task_alloc(v17);
  v18 = type metadata accessor for UUID(0);
  v8[32] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[33] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[34] = swift_task_alloc(v20);
  v8[35] = swift_task_alloc(v20);
  v8[36] = swift_task_alloc(v20);
  v8[37] = swift_task_alloc(v20);
  v21 = type metadata accessor for FBKSEvaluation.Subject(0);
  v8[38] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v8[39] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[40] = swift_task_alloc(v23);
  v8[41] = swift_task_alloc(v23);
  v24 = type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation(0);
  v8[42] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v8[43] = v25;
  v8[44] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100049468, 0, 0);
}

uint64_t sub_100049468(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  id *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t *v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  objc_class *v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  void (*v131)(uint64_t, unint64_t, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  void *object;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  void (*v163)(_QWORD, unint64_t, void *);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  void (*v174)(_QWORD, unint64_t, void *);
  uint8_t *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;

  v2 = v1;
  v3 = v1 + 14;
  v4 = v1[14];
  v5 = v1[42];
  v6 = v1[15];
  v7 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v9 = v8;
  v178 = v7;
  v179 = v8;
  swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits = 0x4565746F6D65722ELL;
  v10._object = (void *)0xEF657461756C6176;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11 = String.utf8CString.getter(v178);
  swift_bridgeObjectRelease(v179);
  v12 = os_transaction_create(v11 + 32);
  swift_release(v11);
  swift_unknownObjectRelease(v12);
  v13 = sub_100009BE4(&qword_100070308, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSEvaluation.Subject.RemoteEvaluation, (uint64_t)&protocol conformance descriptor for FBKSEvaluation.Subject.RemoteEvaluation);
  v14 = static JSONCodable.decode(from:)(v4, v6, v5, v13);
  v15 = v1 + 10;
  v16 = v1[41];
  v18 = v1[38];
  v17 = v1[39];
  FBKSEvaluation.Subject.RemoteEvaluation.subject.getter(v14);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18);
  if (v19 != enum case for FBKSEvaluation.Subject.id(_:))
  {
    if (v19 != enum case for FBKSEvaluation.Subject.interaction(_:))
    {
      if (qword_10006EEA8 != -1)
        swift_once(&qword_10006EEA8, sub_1000432FC);
      v54 = type metadata accessor for Logger(0);
      v55 = sub_1000097B4(v54, (uint64_t)qword_100070260);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = v3 - 5;
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v178 = v60;
        *(_DWORD *)v59 = 136315138;
        *v58 = sub_1000572F8(0xD000000000000023, 0x800000010005C510, &v178);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v15);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unknown default in %s", v59, 0xCu);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);
      }

      v61 = v2[16];
      v178 = 0;
      v179 = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease(v179);
      Failure.init(message:)(0xD000000000000036, 0x800000010005C540);
      v63 = v2[43];
      v62 = v2[44];
      v64 = v2[42];
      if (v61)
      {
        v65 = v2[29];
        v66 = v2[30];
        v67 = v2[27];
        v68 = v2[28];
        v174 = (void (*)(_QWORD, unint64_t, void *))v2[16];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v66, v65, v67);
        v69 = sub_100009BE4(&qword_1000702E8, (uint64_t (*)(uint64_t))&type metadata accessor for Failure, (uint64_t)&protocol conformance descriptor for Failure);
        v70 = swift_allocError(v67, v69, 0, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v71, v66, v67);
        v72 = (void *)_convertErrorToNSError(_:)(v70);
        v174(0, 0xF000000000000000, v72);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v65, v67);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
        swift_errorRelease(v70);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v2[28] + 8))(v2[29], v2[27]);
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
      }
      v100 = v2[41];
      v101 = v2[38];
      v102 = *(void (**)(uint64_t, uint64_t))(v2[39] + 8);
      goto LABEL_31;
    }
    v43 = (id *)v2[41];
    (*(void (**)(id *, _QWORD))(v2[39] + 96))(v43, v2[38]);
    v44 = *v43;
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_1000097B4(v45, (uint64_t)qword_100070260);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Using Interaction", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    goto LABEL_22;
  }
  v161 = v3 - 4;
  v167 = v3 - 1;
  v20 = v2[41];
  v21 = v2[37];
  v23 = v2[32];
  v22 = v2[33];
  (*(void (**)(uint64_t, _QWORD))(v2[39] + 96))(v20, v2[38]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v20, v23);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v25 = v2[36];
  v24 = v2[37];
  v27 = v2[32];
  v26 = v2[33];
  v28 = type metadata accessor for Logger(0);
  sub_1000097B4(v28, (uint64_t)qword_100070260);
  v162 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
  v29 = v162(v25, v24, v27);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  v32 = os_log_type_enabled(v30, v31);
  v33 = v2[36];
  v35 = v2[32];
  v34 = v2[33];
  v173 = v2;
  if (v32)
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v178 = v37;
    *(_DWORD *)v36 = 136446210;
    v38 = sub_100009BE4((unint64_t *)&unk_10006F0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v35, v38);
    v41 = v40;
    *v167 = sub_1000572F8(v39, v40, &v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v167, v3);
    swift_bridgeObjectRelease(v41);
    v42 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v42(v33, v35);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Fetching donation for donationId %{public}s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    v42 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v42(v33, v35);
  }

  v51 = v2[37];
  v52 = type metadata accessor for CFBBiomeReader();
  swift_initStackObject(v52, v3 - 12);
  v53 = CFBBiomeReader.init()();
  v44 = CFBBiomeReader.fetchDonation(evaluationID:)(v51);
  swift_release(v53);
  if (v44)
  {
    v50 = ((uint64_t (*)(_QWORD, _QWORD))v42)(v2[37], v2[32]);
LABEL_22:
    v2[45] = v44;
    if ((FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter(v50) & 1) != 0)
    {
      v73 = v2[26];
      v75 = v2[23];
      v74 = v2[24];
      v77 = v2[21];
      v76 = v2[22];
      v78 = v2[19];
      v79 = v2[20];
      FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
      v80 = v44;
      v81 = FBKSEvaluation.Subject.RemoteEvaluation.showFeedbackForm.getter(v80);
      FBKSRemoteEvaluationRequest.init(action:interaction:showFeedbackForm:)(v73, v80, v81 & 1);
      v82 = type metadata accessor for LaunchController();
      swift_initStaticObject(v82, &unk_10006EF08);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v77, v74, v76);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v79 + 104))(v77, enum case for FBKSRemoteAlertRequest.evaluation(_:), v78);
      v83 = (_QWORD *)swift_task_alloc(dword_10006FE54);
      v2[46] = v83;
      *v83 = v2;
      v83[1] = sub_10004A364;
      return sub_100037364(v2[21]);
    }
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v85 = type metadata accessor for Logger(0);
    v86 = sub_1000097B4(v85, (uint64_t)qword_100070260);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Client doesn't now want to show feedback form. Will record evaluation now and exit", v89, 2u);
      swift_slowDealloc(v89, -1, -1);
    }
    v90 = v2[39];
    v91 = (_QWORD *)v2[40];
    v92 = v2[38];
    v175 = (uint8_t *)v2[34];
    v93 = v2[25];
    v94 = v2[26];

    *v91 = v44;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v90 + 104))(v91, enum case for FBKSEvaluation.Subject.interaction(_:), v92);
    v95 = v44;
    FBKSEvaluation.Subject.RemoteEvaluation.action.getter();
    v96 = type metadata accessor for FBKSEvaluation.FormResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v93, 1, 1, v96);
    v97 = (objc_class *)type metadata accessor for FBKSEvaluation(0);
    v98 = objc_allocWithZone(v97);
    v99 = (void *)FBKSEvaluation.init(subject:action:formResponse:)(v91, v94, v93);
    sub_100046DA8(v99, 1, v175);
    v128 = v2[16];
    (*(void (**)(_QWORD, _QWORD))(v2[33] + 8))(v2[34], v2[32]);
    if (v128)
    {
      v129 = v3 - 6;
      v131 = (void (*)(uint64_t, unint64_t, _QWORD))v2[16];
      v130 = v2[17];
      v132 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v132, *(unsigned int *)(v132 + 48), *(unsigned __int16 *)(v132 + 52));
      v133 = swift_retain(v130);
      v134 = JSONEncoder.init()(v133);
      v2[8] = v99;
      v135 = sub_100009BE4((unint64_t *)&unk_100070310, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSEvaluation, (uint64_t)&protocol conformance descriptor for FBKSEvaluation);
      v136 = dispatch thunk of JSONEncoder.encode<A>(_:)(v129, v97, v135);
      v137 = v2;
      v139 = v138;
      v165 = v137[43];
      v169 = v137[42];
      v171 = v137[44];
      v141 = v137[16];
      v140 = v137[17];
      v177 = v137;
      swift_release(v134);
      sub_100037234(v136, v139);
      v131(v136, v139, 0);

      sub_1000429E4(v141, v140);
      sub_100012720(v136, v139);
      sub_100012720(v136, v139);

      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v171, v169);
      v2 = v177;
      goto LABEL_32;
    }
    v160 = v2[43];
    v147 = v2[44];
    v149 = v2[42];

    v102 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
    goto LABEL_42;
  }
  v114 = v162(v2[35], v2[37], v2[32]);
  v115 = Logger.logObject.getter(v114);
  v116 = static os_log_type_t.default.getter();
  v117 = os_log_type_enabled(v115, (os_log_type_t)v116);
  v118 = v2[35];
  v119 = v2[32];
  if (v117)
  {
    v120 = v3 - 3;
    v121 = v3 - 2;
    v122 = swift_slowAlloc(32, -1);
    v123 = swift_slowAlloc(64, -1);
    v178 = v123;
    *(_DWORD *)v122 = 136446723;
    *v161 = sub_1000572F8(0xD000000000000023, 0x800000010005C510, &v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v161, v120);
    *(_WORD *)(v122 + 12) = 2160;
    *v120 = 1752392040;
    v124 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v121);
    *(_WORD *)(v122 + 22) = 2081;
    v125 = UUID.uuidString.getter(v124);
    v127 = v126;
    *v121 = sub_1000572F8(v125, v126, &v178);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v167);
    swift_bridgeObjectRelease(v127);
    v42(v118, v119);
    _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v116, "%{public}s could not find Donation: %{private,mask.hash}s", (uint8_t *)v122, 0x20u);
    swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1, -1);
    swift_slowDealloc(v122, -1, -1);
  }
  else
  {
    v42(v118, v119);
  }

  v2 = v173;
  v142 = v173[32];
  v143 = v173[16];
  v178 = 0;
  v179 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(v179);
  v178 = 0xD000000000000020;
  v179 = 0x800000010005C580;
  v144 = sub_100009BE4((unint64_t *)&unk_10006F0A0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v145._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v142, v144);
  object = v145._object;
  String.append(_:)(v145);
  swift_bridgeObjectRelease(object);
  Failure.init(message:)(v178, v179);
  v148 = v173[43];
  v147 = v173[44];
  v149 = v173[42];
  v150 = v173[37];
  v152 = v173[31];
  v151 = v173[32];
  if (v143)
  {
    v153 = v173[30];
    v166 = v173[43];
    v172 = v173[42];
    v154 = v173[27];
    v155 = v173[28];
    v163 = (void (*)(_QWORD, unint64_t, void *))v173[16];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 16))(v153, v152, v154);
    v156 = sub_100009BE4(&qword_1000702E8, (uint64_t (*)(uint64_t))&type metadata accessor for Failure, (uint64_t)&protocol conformance descriptor for Failure);
    v157 = swift_allocError(v154, v156, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(v158, v153, v154);
    v159 = (void *)_convertErrorToNSError(_:)(v157);
    v163(0, 0xF000000000000000, v159);

    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v152, v154);
    v42(v150, v151);
    (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v147, v172);
    swift_errorRelease(v157);
    goto LABEL_32;
  }
  (*(void (**)(_QWORD, _QWORD))(v173[28] + 8))(v173[31], v173[27]);
  v42(v150, v151);
  v102 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
LABEL_42:
  v100 = v147;
  v101 = v149;
LABEL_31:
  v102(v100, v101);
LABEL_32:
  v103 = v2[44];
  v104 = v2[40];
  v105 = v2[41];
  v107 = v2[36];
  v106 = v2[37];
  v109 = v2[34];
  v108 = v2[35];
  v111 = v2[30];
  v110 = v2[31];
  v112 = v2;
  v113 = v2[29];
  v164 = v112[26];
  v168 = v112[25];
  v170 = v112[24];
  v176 = v112[21];
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v164);
  swift_task_dealloc(v168);
  swift_task_dealloc(v170);
  swift_task_dealloc(v176);
  return ((uint64_t (*)(void))v112[1])();
}

uint64_t sub_10004A364()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[20] + 8))(v2[21], v2[19]);
  if (v0)
    v4 = sub_10004A5CC;
  else
    v4 = sub_10004A3D8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10004A3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_100070260);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Did finish launching hidden app", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 128);

  v7 = *(void **)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 176);
  if (v6)
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 128))(0, 0xF000000000000000, 0);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 272);
  v15 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004A5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, unint64_t, void *);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 376);
  v8 = *(void (**)(_QWORD, unint64_t, void *))(v0 + 128);
  if (v8)
  {
    v9 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)(v0 + 376));
    v8(0, 0xF000000000000000, v9);
    swift_errorRelease(v7);

  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 376));
  }
  v10 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 192);
  v23 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10004A7F8()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t aBlock[3];
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for FeedbackFeatureFlags(0);
  v17 = (void *)v1;
  v18 = sub_100009BE4((unint64_t *)&unk_1000702B8, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v2 = sub_100011E60(aBlock);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v2, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v1);
  LOBYTE(v1) = isFeatureEnabled(_:)(aBlock);
  sub_100009C64(aBlock);
  if ((v1 & 1) != 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(BGSystemTaskScheduler), "sharedScheduler");
    static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    v5 = v4;
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v7 = swift_allocObject(&unk_10006A870, 24, 7);
    *(_QWORD *)(v7 + 16) = v0;
    v18 = (uint64_t)sub_10004B12C;
    v19 = v7;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000060BC;
    v17 = &unk_10006A888;
    v8 = _Block_copy(aBlock);
    v9 = v19;
    v10 = v0;
    swift_release(v9);
    -[NSObject registerForTaskWithIdentifier:usingQueue:launchHandler:](v3, "registerForTaskWithIdentifier:usingQueue:launchHandler:", v6, 0, v8);
    _Block_release(v8);

  }
  else
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_1000097B4(v11, (uint64_t)qword_100070260);
    v3 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      aBlock[0] = v15;
      *(_DWORD *)v14 = 136446210;
      v20 = sub_1000572F8(0xD000000000000018, 0x800000010005C430, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      _os_log_impl((void *)&_mh_execute_header, v3, v13, "%{public}s not registering background task because BatchEvaluation is disabled.", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
  }

}

uint64_t sub_10004AAA0(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_1000097B4(v7, (uint64_t)qword_100070260);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v23 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
    v15 = v14;
    v22 = sub_1000572F8(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Registering task %s with feedbackd.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_10006A8C0, 48, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a2;
  v17[5] = a1;
  v18 = a2;
  v19 = a1;
  v20 = sub_10004F4F8((uint64_t)v6, (uint64_t)&unk_1000702D0, (uint64_t)v17);
  return swift_release(v20);
}

uint64_t sub_10004ACB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch(sub_10004ACCC, 0, 0);
}

uint64_t sub_10004ACCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if ((sub_10004CAA8() & 1) != 0)
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_1000097B4(v1, (uint64_t)qword_100070260);
    *(_QWORD *)(v0 + 40) = v2;
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Triggering notification for batch evaluation", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    if (qword_10006EE00 != -1)
      swift_once(&qword_10006EE00, sub_10000AC00);
    v6 = (_QWORD *)swift_task_alloc(dword_10006F3FC);
    *(_QWORD *)(v0 + 48) = v6;
    *v6 = v0;
    v6[1] = sub_10004AE28;
    return sub_10000AC6C();
  }
  else
  {
    objc_msgSend(*(id *)(v0 + 32), "setTaskCompleted");
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10004AE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10004AEC4;
  else
    v3 = sub_10004AE8C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004AE8C()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 32), "setTaskCompleted");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 56);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    *(_QWORD *)(v0 + 16) = v5;
    swift_errorRetain(v5);
    v8 = sub_100005D4C(&qword_10006F090);
    v9 = String.init<A>(describing:)(v0 + 16, v8);
    v11 = v10;
    *(_QWORD *)(v0 + 24) = sub_1000572F8(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Post notification error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 56);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  objc_msgSend(*(id *)(v0 + 32), "setTaskCompleted");
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10004B088()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CentralizedFeedbackDaemon();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CentralizedFeedbackDaemon()
{
  return objc_opt_self(_TtC9feedbackd25CentralizedFeedbackDaemon);
}

uint64_t sub_10004B0E8(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_10004B108()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004B12C(void *a1)
{
  uint64_t v1;

  return sub_10004AAA0(a1, *(void **)(v1 + 16));
}

uint64_t sub_10004B134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B144(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004B14C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004B180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1000702CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002D38C;
  v3[4] = v2;
  return swift_task_switch(sub_10004ACCC, 0, 0);
}

void sub_10004B1E0(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

unint64_t sub_10004B290(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10004B318()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  char **v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  unsigned int v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83[5];

  v0 = type metadata accessor for FeedbackFeatureFlags(0);
  v83[3] = (id)v0;
  v83[4] = (id)sub_100009BE4((unint64_t *)&unk_1000702B8, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v1 = sub_100011E60(v83);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)(v83);
  v2 = sub_100009C64(v83);
  if ((v0 & 1) != 0)
  {
    v3 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter(v2);
    v5 = v4;
    v6 = (void *)objc_opt_self(BGSystemTaskScheduler);
    v7 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
    v8 = objc_msgSend(v6, "sharedScheduler");
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "taskRequestForIdentifier:", v9);

    if (v10)
    {
      if (qword_10006EEA8 != -1)
        swift_once(&qword_10006EEA8, sub_1000432FC);
      v12 = type metadata accessor for Logger(0);
      sub_1000097B4(v12, (uint64_t)qword_100070260);
      v13 = swift_bridgeObjectRetain(v5);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = (void *)swift_slowAlloc(32, -1);
        v83[0] = v17;
        *(_DWORD *)v16 = 136315138;
        swift_bridgeObjectRetain(v5);
        v81 = (id)sub_1000572F8(v3, v5, (uint64_t *)v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
        swift_bridgeObjectRelease_n(v5, 3);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Task request %s already exists", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v5, 2);
      }
      v37 = v10;
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = (void *)swift_slowAlloc(32, -1);
        v83[0] = v41;
        *(_DWORD *)v40 = 136315138;
        v42 = objc_msgSend(v37, "description");
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v81 = (id)sub_1000572F8(v43, v45, (uint64_t *)v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);

        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Existing BGST.taskRequest: %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

LABEL_21:
        return;
      }

    }
    else
    {
      static Strings.Daemon.CheckDonationsTaskIdentifier.getter(v11);
      v25 = v24;
      v26 = objc_allocWithZone((Class)BGRepeatingSystemTaskRequest);
      v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      v28 = objc_msgSend(v26, "initWithIdentifier:", v27);

      objc_msgSend(v28, "setPriority:", 2);
      objc_msgSend(v28, "setRequiresNetworkConnectivity:", 0);
      objc_msgSend(v28, "setRequiresExternalPower:", 0);
      if (qword_10006EED0 != -1)
        swift_once(&qword_10006EED0, sub_100043690);
      objc_msgSend(v28, "setInterval:", *(double *)&qword_100070280);
      if (qword_10006EEA8 != -1)
        swift_once(&qword_10006EEA8, sub_1000432FC);
      v29 = type metadata accessor for Logger(0);
      sub_1000097B4(v29, (uint64_t)qword_100070260);
      swift_bridgeObjectRetain_n(v5, 2);
      v30 = v28;
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.info.getter();
      v76 = v3;
      v77 = v5;
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc(22, -1);
        v74 = (_QWORD *)swift_slowAlloc(8, -1);
        v75 = (void *)swift_slowAlloc(32, -1);
        v83[0] = v75;
        *(_DWORD *)v33 = 136315394;
        swift_bridgeObjectRetain(v5);
        v81 = (id)sub_1000572F8(v3, v5, (uint64_t *)v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
        swift_bridgeObjectRelease_n(v5, 3);
        *(_WORD *)(v33 + 12) = 2112;
        v81 = v30;
        v34 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
        *v74 = v30;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Task %s has no request, submitting request: %@", (uint8_t *)v33, 0x16u);
        v35 = sub_100005D4C(&qword_10006F418);
        swift_arrayDestroy(v74, 1, v35);
        swift_slowDealloc(v74, -1, -1);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        v36 = v33;
        v7 = &selRef_fetchDonationsWithCount_fromLatest_completion_;
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v5, 2);
      }
      v46 = objc_msgSend(v6, v7[134]);
      v83[0] = 0;
      v47 = objc_msgSend(v46, "submitTaskRequest:error:", v30, v83);

      v48 = v83[0];
      if (v47)
      {
        v49 = v83[0];

        swift_bridgeObjectRelease(v77);
      }
      else
      {
        v50 = v83[0];
        v51 = (void *)_convertNSErrorToError(_:)(v48);

        swift_willThrow(v52);
        v83[0] = v51;
        swift_errorRetain(v51);
        v53 = sub_100005D4C(&qword_10006F090);
        type metadata accessor for BGSystemTaskSchedulerError(0);
        v55 = v54;
        if (swift_dynamicCast(&v81, v83, v53, v54, 0))
        {
          swift_errorRelease(v51);
          v56 = v81;
          swift_bridgeObjectRetain(v77);
          v57 = v56;
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v58, v59))
          {
            v60 = swift_slowAlloc(22, -1);
            v61 = swift_slowAlloc(64, -1);
            v82 = v61;
            *(_DWORD *)v60 = 136315394;
            swift_bridgeObjectRetain(v77);
            v79 = sub_1000572F8(v76, v77, &v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
            swift_bridgeObjectRelease_n(v77, 3);
            *(_WORD *)(v60 + 12) = 2080;
            v62 = sub_100009BE4(&qword_100070360, (uint64_t (*)(uint64_t))type metadata accessor for BGSystemTaskSchedulerError, (uint64_t)&unk_100059B08);
            _BridgedStoredNSError.code.getter(&v79, v55, v62);
            v78 = v79;
            type metadata accessor for Code(0);
            v64 = String.init<A>(describing:)(&v78, v63);
            v66 = v65;
            v79 = sub_1000572F8(v64, v65, &v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);

            swift_bridgeObjectRelease(v66);
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Task %s schedule request failed: %s", (uint8_t *)v60, 0x16u);
            swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v61, -1, -1);
            swift_slowDealloc(v60, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v77, 2);
          }
          swift_errorRelease(v83[0]);
        }
        else
        {
          swift_errorRelease(v83[0]);
          swift_errorRetain(v51);
          swift_bridgeObjectRetain(v77);
          v67 = swift_errorRetain(v51);
          v38 = Logger.logObject.getter(v67);
          v68 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v38, v68))
          {

            swift_errorRelease(v51);
            swift_bridgeObjectRelease_n(v77, 2);
            swift_errorRelease(v51);
            swift_errorRelease(v51);
            goto LABEL_21;
          }
          v69 = swift_slowAlloc(22, -1);
          v70 = (_QWORD *)swift_slowAlloc(8, -1);
          v71 = (void *)swift_slowAlloc(32, -1);
          v83[0] = v71;
          *(_DWORD *)v69 = 136315394;
          swift_bridgeObjectRetain(v77);
          v81 = (id)sub_1000572F8(v76, v77, (uint64_t *)v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
          swift_bridgeObjectRelease_n(v77, 3);
          *(_WORD *)(v69 + 12) = 2112;
          swift_errorRetain(v51);
          v72 = (void *)_swift_stdlib_bridgeErrorToNSError(v51);
          v81 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
          *v70 = v72;
          swift_errorRelease(v51);
          swift_errorRelease(v51);
          _os_log_impl((void *)&_mh_execute_header, v38, v68, "Task %s schedule request failed: %@", (uint8_t *)v69, 0x16u);
          v73 = sub_100005D4C(&qword_10006F418);
          swift_arrayDestroy(v70, 1, v73);
          swift_slowDealloc(v70, -1, -1);
          swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v71, -1, -1);
          swift_slowDealloc(v69, -1, -1);

          swift_errorRelease(v51);
        }
      }
    }
  }
  else
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_1000097B4(v18, (uint64_t)qword_100070260);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (void *)swift_slowAlloc(32, -1);
      v83[0] = v23;
      *(_DWORD *)v22 = 136446210;
      v81 = (id)sub_1000572F8(0xD000000000000018, 0x800000010005C690, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s not submitting background task because BatchEvaluation is disabled.", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }

  }
}

uint64_t sub_10004BF84(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void **v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = type metadata accessor for FeedbackFeatureFlags(0);
  v34 = (void *)v4;
  v35 = sub_100009BE4((unint64_t *)&unk_1000702B8, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v5 = sub_100011E60(&v31);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v5, enum case for FeedbackFeatureFlags.CentralizedFeedback(_:), v4);
  LOBYTE(v4) = isFeatureEnabled(_:)(&v31);
  sub_100009C64(&v31);
  if ((v4 & 1) == 0)
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v11 = type metadata accessor for Logger(0);
    sub_1000097B4(v11, (uint64_t)qword_100070260);
    v12 = a1;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 67240192;
      LODWORD(v31) = objc_msgSend(v12, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4);

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Centralized Feedback feature disabled. Rejecting XPC connection from: %{public}d", v15, 8u);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  if ((sub_1000434E0((void (*)(void))&static Strings.XPC.CentralizedFeedback.entitlement.getter) & 1) == 0
    && (sub_1000434E0((void (*)(void))&static Strings.XPC.CentralizedFeedback.draftingEntitlement.getter) & 1) == 0
    && (sub_1000434E0((void (*)(void))&static Strings.XPC.CentralizedFeedback.remoteEvaluationEntitlement.getter) & 1) == 0)
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v26 = type metadata accessor for Logger(0);
    sub_1000097B4(v26, (uint64_t)qword_100070260);
    v27 = a1;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 67240192;
      LODWORD(v31) = -[NSObject processIdentifier](v27, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4);

      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Process %{public}d is not entitled to use this service. Refusing connection.", v30, 8u);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {

      v28 = v27;
    }

    -[NSObject invalidate](v27, "invalidate");
    return 0;
  }
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v6 = type metadata accessor for Logger(0);
  sub_1000097B4(v6, (uint64_t)qword_100070260);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67240192;
    LODWORD(v31) = -[NSObject processIdentifier](v7, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4);

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Accepting a new XPC connection from: %{public}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {

    v8 = v7;
  }

  v16 = swift_allocObject(&unk_10006AC08, 24, 7);
  *(_QWORD *)(v16 + 16) = v7;
  v35 = (uint64_t)sub_10004EC88;
  v36 = v16;
  v31 = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_10004F4CC;
  v34 = &unk_10006AC20;
  v17 = _Block_copy(&v31);
  v18 = v36;
  v19 = v7;
  swift_release(v18);
  -[NSObject setInterruptionHandler:](v19, "setInterruptionHandler:", v17);
  _Block_release(v17);
  v20 = swift_allocObject(&unk_10006AC58, 24, 7);
  *(_QWORD *)(v20 + 16) = v19;
  v35 = (uint64_t)sub_10004ECA8;
  v36 = v20;
  v31 = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_10004F4CC;
  v34 = &unk_10006AC70;
  v21 = _Block_copy(&v31);
  v22 = v36;
  v23 = v19;
  swift_release(v22);
  -[NSObject setInvalidationHandler:](v23, "setInvalidationHandler:", v21);
  _Block_release(v21);
  v24 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CentralizedFeedbackDaemonInterface(0)), "init");
  -[NSObject setExportedInterface:](v23, "setExportedInterface:", v24);

  -[NSObject setExportedObject:](v23, "setExportedObject:", v2);
  -[NSObject resume](v23, "resume");
  return 1;
}

uint64_t sub_10004C4F8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_1000097B4(v11, (uint64_t)qword_100070260);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v23 = a1;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v25 = v16;
    *(_DWORD *)v15 = 136315138;
    v24 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C860, &v25);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  static TaskPriority.utility.getter(v17);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 0, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_10006ABE0, 64, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = a1;
  v19[5] = a2;
  v19[6] = a3;
  v19[7] = a4;
  sub_100037234(a1, a2);
  swift_retain(a4);
  v20 = sub_10004F334((uint64_t)v10, (uint64_t)&unk_100070428, (uint64_t)v19);
  swift_release(v20);
  return sub_100009730((uint64_t)v10, &qword_10006FB00);
}

uint64_t sub_10004C764(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;

  v7 = type metadata accessor for FBKSDonation.DonationError(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005D4C(&qword_10006F080);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v32 - v15;
  v17 = swift_allocObject(&unk_10006AB90, 24, 7);
  *(_QWORD *)(v17 + 16) = a4;
  _Block_copy(a4);
  if (qword_10006EEC0 != -1)
    swift_once(&qword_10006EEC0, sub_1000435EC);
  if (byte_100070278 == 1)
  {
    sub_100044AF0(a1, a2, (uint64_t)sub_10004ECC8, v17);
    return swift_release(v17);
  }
  else
  {
    if (qword_10006EEA8 != -1)
      swift_once(&qword_10006EEA8, sub_1000432FC);
    v33 = v8;
    v19 = type metadata accessor for Logger(0);
    v20 = sub_1000097B4(v19, (uint64_t)qword_100070260);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Donation not enabled", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = type metadata accessor for UUID(0);
    v25 = *(_QWORD *)(v24 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v16, 1, 1, v24);
    v26 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v10, enum case for FBKSDonation.DonationError.unsupported(_:), v7);
    v27 = sub_100009BE4(&qword_100070418, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSDonation.DonationError, (uint64_t)&protocol conformance descriptor for FBKSDonation.DonationError);
    v28 = swift_allocError(v7, v27, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v29, v10, v7);
    v30 = (void *)_convertErrorToNSError(_:)(v28);
    sub_1000096E8((uint64_t)v16, (uint64_t)v14);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v24) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v24);
    }
    ((void (**)(_QWORD, Class, void *))a4)[2](a4, isa, v30);

    sub_100009730((uint64_t)v16, &qword_10006F080);
    swift_errorRelease(v28);
    return swift_release(v17);
  }
}

uint64_t sub_10004CAA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[5];

  v0 = type metadata accessor for FeedbackFeatureFlags(0);
  v25[3] = v0;
  v25[4] = sub_100009BE4((unint64_t *)&unk_1000702B8, (uint64_t (*)(uint64_t))&type metadata accessor for FeedbackFeatureFlags, (uint64_t)&protocol conformance descriptor for FeedbackFeatureFlags);
  v1 = sub_100011E60(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for FeedbackFeatureFlags.BatchEvaluation(_:), v0);
  LOBYTE(v0) = isFeatureEnabled(_:)(v25);
  sub_100009C64(v25);
  if ((v0 & 1) != 0)
  {
    if (qword_10006EEC8 != -1)
      swift_once(&qword_10006EEC8, sub_100043638);
    v2 = dword_10007027C;
    v3 = type metadata accessor for CFBBiomeReader();
    swift_allocObject(v3, 48, 7);
    v4 = CFBBiomeReader.init()();
    v12 = (uint64_t)CFBBiomeReader.fetchDonations(count:fromLatest:)(v2, 0);
    swift_release(v4);
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0)
        v23 = v12;
      else
        v23 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
      v13 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v12);
      if (v13 < v2)
        goto LABEL_12;
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v13 < v2)
      {
LABEL_12:
        if (qword_10006EEA8 != -1)
          swift_once(&qword_10006EEA8, sub_1000432FC);
        v14 = type metadata accessor for Logger(0);
        sub_1000097B4(v14, (uint64_t)qword_100070260);
        v15 = swift_bridgeObjectRetain(v12);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc(22, -1);
          v19 = swift_slowAlloc(32, -1);
          v25[0] = v19;
          *(_DWORD *)v18 = 136315394;
          v20 = static Strings.Daemon.CheckDonationsTaskIdentifier.getter();
          v22 = v21;
          v24 = sub_1000572F8(v20, v21, v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
          swift_bridgeObjectRelease(v22);
          *(_WORD *)(v18 + 12) = 2048;
          swift_bridgeObjectRelease(v12);
          v24 = v13;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
          swift_bridgeObjectRelease(v12);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s Do not have enough donations to trigger notification. %ld", (uint8_t *)v18, 0x16u);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v18, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v12, 2);
        }
        return 0;
      }
    }
    swift_bridgeObjectRelease(v12);
    return 1;
  }
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_1000097B4(v5, (uint64_t)qword_100070260);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v25[0] = v10;
    *(_DWORD *)v9 = 136446210;
    v24 = sub_1000572F8(0xD000000000000015, 0x800000010005C470, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s returns false because BatchEvaluation is disabled.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  return 0;
}

uint64_t sub_10004D104()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100012720(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  if (*(_QWORD *)(v0 + 48))
    swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004D148(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_1000702F4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10002D38C;
  return sub_1000492A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10004D1DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100012720(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10004D218(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_10007032C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10002D38C;
  return sub_100044D7C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10004D2B8()
{
  return sub_10004D320(48);
}

uint64_t sub_10004D2C0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100070344);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002D38C;
  return swift_task_switch(sub_1000457D0, 0, 0);
}

uint64_t sub_10004D318()
{
  return sub_10004D320(40);
}

uint64_t sub_10004D320(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10004D358(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100070354);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002D38C;
  return sub_100043A1C(a1, v4, v5, v6);
}

uint64_t sub_10004D3C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004D3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  id v22;
  void *v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v38 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_1000097B4(v12, (uint64_t)qword_100070260);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v37 = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v35 = a1;
    v19 = v18;
    v40 = v18;
    v36 = v7;
    *(_DWORD *)v17 = 136446210;
    v39 = sub_1000572F8(0xD00000000000002BLL, 0x800000010005C830, &v40);
    v7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a1 = v35;
    swift_slowDealloc(v20, -1, -1);
    v21 = v17;
    a3 = v37;
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v22)
  {
    v23 = v22;
    v24 = sub_10004343C();

    v25 = v24 ^ 1;
  }
  else
  {
    v25 = 1;
  }
  static TaskPriority.userInitiated.getter();
  v26 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v11, 0, 1, v26);
  v27 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v38, a1, v6);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = (v8 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_10006AB68, v30 + 17, v28 | 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31 + v29, v27, v6);
  v32 = v31 + v30;
  *(_QWORD *)v32 = a2;
  *(_QWORD *)(v32 + 8) = a3;
  *(_BYTE *)(v32 + 16) = v25 & 1;
  swift_retain(a3);
  v33 = sub_10004F334((uint64_t)v11, (uint64_t)&unk_100070408, v31);
  swift_release(v33);
  return sub_100009730((uint64_t)v11, &qword_10006FB00);
}

uint64_t sub_10004D71C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  void *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v8 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_1000097B4(v11, (uint64_t)qword_100070260);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v28 = a3;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v30 = v17;
    *(_DWORD *)v16 = 136446210;
    v29 = sub_1000572F8(0xD000000000000031, 0x800000010005C7D0, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v18 = v16;
    a3 = v28;
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v19)
  {
    v20 = v19;
    v21 = sub_10004343C();

    v22 = v21 ^ 1;
  }
  else
  {
    v22 = 1;
  }
  static TaskPriority.userInitiated.getter();
  v23 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 0, 1, v23);
  v24 = swift_allocObject(&unk_10006AB18, 65, 7);
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = a1;
  *(_QWORD *)(v24 + 40) = a2;
  *(_QWORD *)(v24 + 48) = a3;
  *(_QWORD *)(v24 + 56) = a4;
  *(_BYTE *)(v24 + 64) = v22 & 1;
  sub_100037234(a1, a2);
  swift_retain(a4);
  v25 = sub_10004F334((uint64_t)v10, (uint64_t)&unk_1000703F0, v24);
  swift_release(v25);
  return sub_100009730((uint64_t)v10, &qword_10006FB00);
}

uint64_t sub_10004D9B8(uint64_t a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  void *v21;
  id v22;
  void *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _QWORD v36[4];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;

  v6 = sub_100005D4C(&qword_10006F080);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v36 - v10;
  v12 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v12);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = swift_allocObject(&unk_10006AAA0, 24, 7);
  *(_QWORD *)(v37 + 16) = a4;
  _Block_copy(a4);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_1000097B4(v15, (uint64_t)qword_100070260);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  v19 = os_log_type_enabled(v17, v18);
  v36[2] = v11;
  v36[3] = a4;
  v36[1] = v9;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (void *)swift_slowAlloc(32, -1);
    v40 = v21;
    v36[0] = v14;
    *(_DWORD *)v20 = 136446210;
    v38 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C780, (uint64_t *)&v40);
    v14 = (char *)v36[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }

  v22 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v22)
  {
    v23 = v22;
    v24 = sub_10004343C();

    v25 = v24 ^ 1;
  }
  else
  {
    v25 = 1;
  }
  v26 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = JSONDecoder.init()();
  v28 = type metadata accessor for FBKSEvaluation(0);
  sub_100009BE4(&qword_1000703D0, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSEvaluation, (uint64_t)&protocol conformance descriptor for FBKSEvaluation);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v28);
  swift_release(v27);
  v29 = v40;
  static TaskPriority.userInitiated.getter();
  v30 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
  v31 = swift_allocObject(&unk_10006AAC8, 72, 7);
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = a3;
  *(_QWORD *)(v31 + 40) = v29;
  *(_BYTE *)(v31 + 48) = v25 & 1;
  v32 = v37;
  *(_QWORD *)(v31 + 56) = sub_10004E8FC;
  *(_QWORD *)(v31 + 64) = v32;
  v33 = a3;
  swift_retain(v32);
  v34 = sub_10004F334((uint64_t)v14, (uint64_t)&unk_1000703E0, v31);

  swift_release(v34);
  sub_100009730((uint64_t)v14, &qword_10006FB00);
  return swift_release(v32);
}

uint64_t sub_10004E02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a4;
  v41 = a5;
  v42 = a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v43 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_1000097B4(v17, (uint64_t)qword_100070260);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v36 = v13;
    v21 = swift_slowAlloc(12, -1);
    v39 = a7;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v38 = a6;
    v24 = v23;
    v45 = v23;
    v37 = v12;
    *(_DWORD *)v22 = 136446210;
    v44 = sub_1000572F8(v40, v41, &v45);
    v13 = v36;
    v12 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
    a6 = v38;
    swift_slowDealloc(v25, -1, -1);
    v26 = v22;
    a7 = v39;
    swift_slowDealloc(v26, -1, -1);
  }

  static TaskPriority.userInitiated.getter();
  v27 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v16, 0, 1, v27);
  v28 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v43, v42, v11);
  v29 = *(unsigned __int8 *)(v12 + 80);
  v30 = (v29 + 32) & ~v29;
  v31 = (v13 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(a6, v31 + 16, v29 | 7);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v32 + v30, v28, v11);
  v33 = (_QWORD *)(v32 + v31);
  *v33 = a2;
  v33[1] = a3;
  swift_retain(a3);
  v34 = sub_10004F334((uint64_t)v16, a7, v32);
  swift_release(v34);
  return sub_100009730((uint64_t)v16, &qword_10006FB00);
}

uint64_t sub_10004E308(int a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EEA8 != -1)
    swift_once(&qword_10006EEA8, sub_1000432FC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_1000097B4(v11, (uint64_t)qword_100070260);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v22 = a4;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v24 = v16;
    *(_DWORD *)v15 = 136446210;
    v23 = sub_1000572F8(0xD00000000000002CLL, 0x800000010005C6B0, &v24);
    a4 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }

  static TaskPriority.userInitiated.getter();
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 0, 1, v17);
  v18 = swift_allocObject(&unk_10006A9D8, 56, 7);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 32) = a1;
  *(_BYTE *)(v18 + 36) = a2 & 1;
  *(_QWORD *)(v18 + 40) = a3;
  *(_QWORD *)(v18 + 48) = a4;
  swift_retain(a4);
  v19 = sub_10004F334((uint64_t)v10, (uint64_t)&unk_100070370, v18);
  swift_release(v19);
  return sub_100009730((uint64_t)v10, &qword_10006FB00);
}

uint64_t sub_10004E570()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004E59C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 36);
  v4 = swift_task_alloc(dword_10007036C);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_10002D38C;
  *(_OWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 60) = v3;
  *(_DWORD *)(v4 + 56) = v2;
  return swift_task_switch(sub_1000485D0, 0, 0);
}

uint64_t sub_10004E618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_100070394);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100029488;
  return sub_100047DFC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10004E6C4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100021E50(a2);
    sub_100009BE4(&qword_100070388, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSDonation, (uint64_t)&protocol conformance descriptor for FBKSInteraction);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004E740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10004E7D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1000703B4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_10002D38C;
  return sub_100047660(a1, v6, v7, v8, v10, v11);
}

unint64_t sub_10004E880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000703C8;
  if (!qword_1000703C8)
  {
    v1 = sub_100021E50(&qword_1000703C0);
    sub_100009BE4((unint64_t *)&unk_100070310, (uint64_t (*)(uint64_t))&type metadata accessor for FBKSEvaluation, (uint64_t)&protocol conformance descriptor for FBKSEvaluation);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000703C8);
  }
  return result;
}

void sub_10004E8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100044A14(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10004E904()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004E940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc(dword_1000703DC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_10002D38C;
  return sub_1000468E8(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_10004E9D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10004E9E4()
{
  return sub_10004EBBC(65);
}

uint64_t sub_10004E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_BYTE *)(v0 + 64);
  v5 = swift_task_alloc(dword_1000703EC);
  v6 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_10002D38C;
  *(_BYTE *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v3;
  return swift_task_switch(sub_10004637C, 0, 0);
}

uint64_t sub_10004EA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 17, v5);
}

uint64_t sub_10004EAF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  v13 = (_QWORD *)swift_task_alloc(dword_100070404);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_10002D38C;
  return sub_100045C48(a1, v6, v7, v8, v10, v11, v12);
}

uint64_t sub_10004EBB4()
{
  return sub_10004EBBC(64);
}

uint64_t sub_10004EBBC(uint64_t a1)
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  sub_100012720(v1[4], v1[5]);
  swift_release(v1[7]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10004EBFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_100070424);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10002D38C;
  return sub_100043E58(a1, v4, v5, v6, v7, v9, v8);
}

void sub_10004EC88()
{
  uint64_t v0;

  sub_100043CA8(*(void **)(v0 + 16), "XPC service connection interrupted: %{public}d");
}

void sub_10004ECA8()
{
  uint64_t v0;

  sub_100043CA8(*(void **)(v0 + 16), "XPC service connection invalidated: %{public}d");
}

uint64_t getEnumTagSinglePayload for StorageError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StorageError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10004EDEC + 4 * byte_10005A761[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10004EE20 + 4 * asc_10005A75C[v4]))();
}

uint64_t sub_10004EE20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004EE28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004EE30);
  return result;
}

uint64_t sub_10004EE3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004EE44);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10004EE48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004EE50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StorageError()
{
  return &type metadata for StorageError;
}

uint64_t sub_10004EE70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10004EEAC + 4 * byte_10005A766[a1]))(0xD00000000000002CLL, 0x800000010005CBE0);
}

uint64_t sub_10004EEAC()
{
  uint64_t v0;

  return v0 + 29;
}

uint64_t sub_10004EF7C()
{
  return 0x6E756F6620746F4ELL;
}

Swift::Int sub_10004EF98()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10004EFDC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_10004F008()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_10004F048@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10004F2D8(*a1);
  *a2 = result;
  return result;
}

void sub_10004F070(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_10004F080(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10004F250();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10004F0A8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10004F250();
  v3 = sub_10004F294();
  v4 = sub_10000A06C();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_10004F0F0()
{
  unsigned __int8 *v0;

  return sub_10004EE70(*v0);
}

uint64_t sub_10004F0F8()
{
  return 0x45656761726F7453;
}

uint64_t sub_10004F118(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10004F294();
  v5 = sub_10000A06C();
  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

unint64_t sub_10004F15C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[80];

  v5 = *v2;
  v6 = sub_100005D4C(&qword_10006F658);
  inited = swift_initStackObject(v6, v13);
  *(_OWORD *)(inited + 16) = xmmword_100059440;
  *(_QWORD *)(inited + 32) = sub_10004EE70(v5);
  *(_QWORD *)(inited + 40) = v8;
  v9 = sub_10004F294();
  v10 = sub_10000A06C();
  v11 = CustomNSError<>.errorCode.getter(a1, a2, v9, v10);
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  *(_QWORD *)(inited + 48) = v11;
  return sub_100014494(inited);
}

unint64_t sub_10004F20C()
{
  unint64_t result;

  result = qword_100070430;
  if (!qword_100070430)
  {
    result = swift_getWitnessTable(&unk_10005A86C, &type metadata for StorageError);
    atomic_store(result, (unint64_t *)&qword_100070430);
  }
  return result;
}

unint64_t sub_10004F250()
{
  unint64_t result;

  result = qword_100070438;
  if (!qword_100070438)
  {
    result = swift_getWitnessTable(&unk_10005A78C, &type metadata for StorageError);
    atomic_store(result, (unint64_t *)&qword_100070438);
  }
  return result;
}

unint64_t sub_10004F294()
{
  unint64_t result;

  result = qword_100070440;
  if (!qword_100070440)
  {
    result = swift_getWitnessTable(&unk_10005A7F4, &type metadata for StorageError);
    atomic_store(result, (unint64_t *)&qword_100070440);
  }
  return result;
}

uint64_t sub_10004F2D8(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0xE)
    return 14;
  else
    return a1 - 1;
}

uint64_t SharedLog.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_10006EEE0 != -1)
    swift_once(&qword_10006EEE0, sub_10004F6A4);
  v0 = type metadata accessor for Logger(0);
  return sub_1000097B4(v0, (uint64_t)SharedLog);
}

uint64_t sub_10004F334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001AE58(a1, (uint64_t)v8, &qword_10006FB00);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100009730((uint64_t)v8, &qword_10006FB00);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_10006AE18, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_1000704C8, v19);
}

uint64_t sub_10004F4CC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10004F4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100009730(a1, &qword_10006FB00);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10006AEB8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100070540, v16);
}

uint64_t sub_10004F644()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_100070450);
  sub_1000097B4(v0, (uint64_t)qword_100070450);
  v1 = static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_10004F6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, SharedLog);
  v1 = sub_1000097B4(v0, (uint64_t)SharedLog);
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v2 = sub_1000097B4(v0, (uint64_t)qword_100070450);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_10004F734()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeedbackDaemon()), "init");
  qword_1000725A8 = (uint64_t)result;
  return result;
}

id sub_10004F760()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  objc_class *v25;
  _QWORD v27[3];
  uint64_t v28;
  objc_super v29;
  _QWORD *v30;
  unint64_t v31;

  v1 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v1);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener] = 0;
  v28 = OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue;
  v27[2] = sub_10000A968(0, (unint64_t *)&qword_10006FC10, OS_dispatch_queue_ptr);
  v30 = 0;
  v31 = 0xE000000000000000;
  v11 = v0;
  _StringGuts.grow(_:)(17);
  v12 = v31;
  v14 = static Strings.Daemon.bundleIdentifier.getter(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v12);
  v30 = (_QWORD *)v14;
  v31 = v16;
  v17._countAndFlagsBits = 0x636162646565662DLL;
  v17._object = (void *)0xEF6E6F6D6561446BLL;
  String.append(_:)(v17);
  v18 = v30;
  v19 = v31;
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v21 = sub_1000546CC();
  v22 = sub_100005D4C(&qword_100070568);
  v23 = sub_100054714();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v1, v21);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v18, v19, v6, v3, v10, 0);
  *(_QWORD *)(v27[1] + v28) = v24;
  *(_QWORD *)&v11[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_connectionDelegates] = &_swiftEmptyDictionarySingleton;

  v25 = (objc_class *)type metadata accessor for FeedbackDaemon();
  v29.receiver = v11;
  v29.super_class = v25;
  return objc_msgSendSuper2(&v29, "init");
}

id sub_10004F9C8()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  void *v28;
  id result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_1000097B4(v6, (uint64_t)qword_100070450);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v30 = v11;
    v31 = ObjectType;
    *(_DWORD *)v10 = 136446210;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v13 = String.init<A>(describing:)(&v31, MetatypeMetadata);
    v15 = v14;
    v31 = sub_1000572F8(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Started %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  static TaskPriority.utility.getter(v16);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v5, 0, 1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_10006ADF0, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v1;
  v19 = v1;
  v20 = sub_10004F334((uint64_t)v5, (uint64_t)&unk_1000704B8, (uint64_t)v18);
  swift_release(v20);
  v21 = sub_100009730((uint64_t)v5, &qword_10006FB00);
  static Strings.XPC.machService.getter(v21);
  v23 = v22;
  v24 = objc_allocWithZone((Class)NSXPCListener);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v26 = objc_msgSend(v24, "initWithMachServiceName:", v25);

  v27 = OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener;
  v28 = *(void **)&v19[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener];
  *(_QWORD *)&v19[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_listener] = v26;

  result = *(id *)&v19[v27];
  if (result)
  {
    objc_msgSend(result, "setDelegate:", v19);
    result = *(id *)&v19[v27];
    if (result)
      return objc_msgSend(result, "resume");
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004FCA4()
{
  return swift_task_switch(sub_10004FCB8, 0, 0);
}

uint64_t sub_10004FCB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  v8 = static Strings.Daemon.bundleIdentifier.getter(a1);
  v9 = v2;
  v3._countAndFlagsBits = 0x74726174732ELL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  v4 = String.utf8CString.getter(v8);
  swift_bridgeObjectRelease(v9);
  v5 = os_transaction_create(v4 + 32);
  swift_release(v4);
  swift_unknownObjectRelease(v5);
  if (qword_10006EE40 != -1)
    swift_once(&qword_10006EE40, sub_100022594);
  v6 = (_QWORD *)swift_task_alloc(dword_10006FA7C);
  *(_QWORD *)(v1 + 64) = v6;
  *v6 = v1;
  v6[1] = sub_10004FD88;
  return sub_1000228F0();
}

uint64_t sub_10004FD88()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_10004FDDC, 0, 0);
}

uint64_t sub_10004FDDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = static Strings.Daemon.XPCActivityIdentifier.getter();
  v3 = v2;
  v4 = swift_allocObject(&unk_10006AE40, 32, 7);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  v0[6] = sub_1000512A8;
  v0[7] = v4;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1000510B0;
  v0[5] = &unk_10006AE58;
  v5 = _Block_copy(v0 + 2);
  v6 = v0[7];
  swift_bridgeObjectRetain(v3);
  swift_release(v6);
  v7 = String.utf8CString.getter(v1);
  swift_bridgeObjectRelease(v3);
  xpc_activity_register((const char *)(v7 + 32), XPC_ACTIVITY_CHECK_IN, v5);
  swift_release(v7);
  _Block_release(v5);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_10004FED4(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  unsigned int v7;
  uint64_t v8;

  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v2 = type metadata accessor for Logger(0);
  sub_1000097B4(v2, (uint64_t)qword_100070450);
  v6 = a1;
  v3 = Logger.logObject.getter(v6);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67240192;
    v7 = objc_msgSend(v6, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8);

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "XPC service connection interrupted: %{public}d", v5, 8u);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100050024(void *a1, char *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  char *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v18[5];
  uint64_t v19;

  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v4 = type metadata accessor for Logger(0);
  sub_1000097B4(v4, (uint64_t)qword_100070450);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67240192;
    LODWORD(v18[0]) = objc_msgSend(v5, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v18, (char *)v18 + 4);

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "XPC service connection invalidated: %{public}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v9 = *(NSObject **)&a2[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue];
  v10 = swift_allocObject(&unk_10006AFF8, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = v5;
  v11 = swift_allocObject(&unk_10006B020, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1000546B4;
  *(_QWORD *)(v11 + 24) = v10;
  v18[4] = sub_100054760;
  v19 = v11;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000502C8;
  v18[3] = &unk_10006B038;
  v12 = _Block_copy(v18);
  v13 = v19;
  v14 = v5;
  v15 = a2;
  swift_retain(v11);
  swift_release(v13);
  dispatch_sync(v9, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 111, 74, 33, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100050268(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_connectionDelegates, v5, 33, 0);
  v3 = sub_100051438(a2);
  swift_endAccess(v5);
  return swift_release(v3);
}

uint64_t sub_1000502C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000502E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a1 + OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_connectionDelegates, v7, 33, 0);
  v5 = a2;
  v6 = swift_retain(a3);
  sub_100051584(v6, v5);
  swift_endAccess(v7);

}

uint64_t sub_1000503BC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v2 = (void *)_convertErrorToNSError(_:)(a1);
  v3 = objc_msgSend(v2, "domain");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationServiceErrorDomain);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
      goto LABEL_13;
  }
  if (objc_msgSend(v2, "code") == (id)1)
  {
    if (qword_10006EED8 != -1)
      swift_once(&qword_10006EED8, sub_10004F644);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_1000097B4(v12, (uint64_t)qword_100070450);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to unlock device for app launch", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    goto LABEL_20;
  }
LABEL_13:
  v29 = a1;
  swift_errorRetain(a1);
  v17 = sub_100005D4C(&qword_10006F090);
  if ((swift_dynamicCast(&v28, &v29, v17, &type metadata for FeedbackdError, 6) & 1) == 0
    || v28 != 8)
  {

    return 0;
  }
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_1000097B4(v18, (uint64_t)qword_100070450);
  v14 = Logger.logObject.getter(v19);
  v20 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v20))
  {
LABEL_20:

    return 1;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v22 = swift_slowAlloc(32, -1);
  v29 = v22;
  *(_DWORD *)v21 = 136446210;
  sub_10003A2CC(8);
  v24 = v23;
  v28 = sub_1000572F8(v25, v23, &v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
  swift_bridgeObjectRelease(v24);
  _os_log_impl((void *)&_mh_execute_header, v14, v20, "[%{public}s]", v21, 0xCu);
  v26 = 1;
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v21, -1, -1);

  return v26;
}

void sub_1000506EC(_xpc_activity_s *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  xpc_activity_state_t state;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_100005D4C(&qword_10006FB00);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    if (qword_10006EED8 != -1)
      swift_once(&qword_10006EED8, sub_10004F644);
    v16 = type metadata accessor for Logger(0);
    sub_1000097B4(v16, (uint64_t)qword_100070450);
    v17 = swift_bridgeObjectRetain_n(a3, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    v20 = os_log_type_enabled(v18, v19);
    v35 = v8;
    v36 = a2;
    if (v20)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v38 = v22;
      *(_DWORD *)v21 = 136446210;
      swift_bridgeObjectRetain(a3);
      v37 = sub_1000572F8(a2, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Activity %{public}s: RUN", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v23 = xpc_activity_set_state(a1, 4);
    v24 = swift_bridgeObjectRetain_n(a3, 2);
    v25 = Logger.logObject.getter(v24);
    if (v23)
    {
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v38 = v28;
        *(_DWORD *)v27 = 136446210;
        swift_bridgeObjectRetain(a3);
        v29 = v36;
        v37 = sub_1000572F8(v36, a3, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
        swift_bridgeObjectRelease_n(a3, 3);
        v30 = "Activity %{public}s: CONTINUE";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v25, v26, v30, v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

LABEL_20:
        v31 = (uint64_t)v35;
        v32 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
        v33 = swift_allocObject(&unk_10006AE90, 64, 7);
        *(_QWORD *)(v33 + 16) = 0;
        *(_QWORD *)(v33 + 24) = 0;
        *(_BYTE *)(v33 + 32) = v23;
        *(_QWORD *)(v33 + 40) = a1;
        *(_QWORD *)(v33 + 48) = v29;
        *(_QWORD *)(v33 + 56) = a3;
        swift_bridgeObjectRetain(a3);
        swift_unknownObjectRetain(a1);
        v34 = sub_10004F4F8(v31, (uint64_t)&unk_100070538, v33);
        swift_release(v34);
        return;
      }
    }
    else
    {
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v38 = v28;
        *(_DWORD *)v27 = 136446210;
        swift_bridgeObjectRetain(a3);
        v29 = v36;
        v37 = sub_1000572F8(v36, a3, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
        swift_bridgeObjectRelease_n(a3, 3);
        v30 = "Failed to set activity %{public}s to CONTINUE";
        goto LABEL_18;
      }
    }

    swift_bridgeObjectRelease_n(a3, 2);
    v29 = v36;
    goto LABEL_20;
  }
  if (!state)
  {
    if (qword_10006EED8 != -1)
      swift_once(&qword_10006EED8, sub_10004F644);
    v10 = type metadata accessor for Logger(0);
    sub_1000097B4(v10, (uint64_t)qword_100070450);
    v11 = swift_bridgeObjectRetain_n(a3, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v38 = v15;
      *(_DWORD *)v14 = 136446210;
      swift_bridgeObjectRetain(a3);
      v37 = sub_1000572F8(a2, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Activity %{public}s: CHECK_IN", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
}

uint64_t sub_100050CA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 40) = a6;
  *(_QWORD *)(v7 + 48) = a7;
  *(_QWORD *)(v7 + 32) = a5;
  *(_BYTE *)(v7 + 64) = a4;
  return swift_task_switch(sub_100050CC0, 0, 0);
}

uint64_t sub_100050CC0()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_10006EE10 != -1)
    swift_once(&qword_10006EE10, sub_10000CB58);
  v1 = (_QWORD *)swift_task_alloc(dword_10006F49C);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_100050D34;
  return sub_10000D5F8();
}

uint64_t sub_100050D34()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_100050D88, 0, 0);
}

uint64_t sub_100050D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    if (xpc_activity_set_state(*(xpc_activity_t *)(v0 + 32), 5))
    {
      if (qword_10006EED8 != -1)
        swift_once(&qword_10006EED8, sub_10004F644);
      v1 = *(_QWORD *)(v0 + 48);
      v2 = type metadata accessor for Logger(0);
      sub_1000097B4(v2, (uint64_t)qword_100070450);
      v3 = swift_bridgeObjectRetain_n(v1, 2);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.default.getter();
      v6 = os_log_type_enabled(v4, v5);
      v7 = *(_QWORD *)(v0 + 48);
      if (v6)
      {
        v22 = *(_QWORD *)(v0 + 40);
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v23 = v9;
        *(_DWORD *)v8 = 136446210;
        swift_bridgeObjectRetain(v7);
        *(_QWORD *)(v0 + 24) = sub_1000572F8(v22, v7, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
        swift_bridgeObjectRelease_n(v7, 3);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Activity %{public}s: DONE", v8, 0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        v10 = v8;
LABEL_11:
        swift_slowDealloc(v10, -1, -1);
LABEL_15:

        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v20 = *(_QWORD *)(v0 + 48);
    }
    else
    {
      if (qword_10006EED8 != -1)
        swift_once(&qword_10006EED8, sub_10004F644);
      v11 = *(_QWORD *)(v0 + 48);
      v12 = type metadata accessor for Logger(0);
      sub_1000097B4(v12, (uint64_t)qword_100070450);
      v13 = swift_bridgeObjectRetain_n(v11, 2);
      v4 = Logger.logObject.getter(v13);
      v14 = static os_log_type_t.error.getter();
      v15 = os_log_type_enabled(v4, v14);
      v16 = *(_QWORD *)(v0 + 48);
      if (v15)
      {
        v17 = *(_QWORD *)(v0 + 40);
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        v23 = v19;
        *(_DWORD *)v18 = 136446210;
        swift_bridgeObjectRetain(v16);
        *(_QWORD *)(v0 + 16) = sub_1000572F8(v17, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
        swift_bridgeObjectRelease_n(v16, 3);
        _os_log_impl((void *)&_mh_execute_header, v4, v14, "Failed to set activity %{public}s to DONE", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        v10 = v18;
        goto LABEL_11;
      }
      v20 = *(_QWORD *)(v0 + 48);
    }
    swift_bridgeObjectRelease_n(v20, 2);
    goto LABEL_15;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000510B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id sub_1000510F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedbackDaemon();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FeedbackDaemon()
{
  return objc_opt_self(_TtC9feedbackd14FeedbackDaemon);
}

uint64_t sub_100051190()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000511BC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000704B4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002D38C;
  return swift_task_switch(sub_10004FCB8, 0, 0);
}

uint64_t sub_100051214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000704C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10002D38C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000704C0 + dword_1000704C0))(a1, v4);
}

uint64_t sub_100051284()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000512A8(_xpc_activity_s *a1)
{
  uint64_t v1;

  sub_1000506EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000512B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000512C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000512C8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000512FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v2 = *(_BYTE *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = swift_task_alloc(dword_1000704D4);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100029488;
  *(_QWORD *)(v4 + 48) = v3;
  *(_OWORD *)(v4 + 32) = v6;
  *(_BYTE *)(v4 + 64) = v2;
  return swift_task_switch(sub_100050CC0, 0, 0);
}

uint64_t sub_10005137C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000513A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000704C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100029488;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000704C0 + dword_1000704C0))(a1, v4);
}

uint64_t sub_100051410@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100051438(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v17;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_1000163F4(a1);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      v4 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100018B78();
        v4 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v6 = (id)a1;
  v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  swift_unknownObjectRelease(v7);
  v8 = __CocoaDictionary.count.getter(v5);
  v4 = sub_100051624(v5, v8);
  swift_retain(v4);
  a1 = sub_1000163F4((uint64_t)v6);
  v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v14 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * a1);
  sub_10005185C(a1, v4);
  v15 = *v2;
  *v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

uint64_t sub_100051584(uint64_t a1, void *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v10;
  Swift::Int v11;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1))
  {
    v6 = sub_100051624(v7, result + 1);
    *v3 = v6;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_100018028(a1, a2, isUniquelyReferenced_nonNull_native);
    v10 = *v3;
    *v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }
  __break(1u);
  return result;
}

Swift::Int sub_100051624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_100005D4C(&qword_10006F768);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10000A968(0, (unint64_t *)&unk_100070550, NSXPCConnection_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = type metadata accessor for FeedbackDaemonDelegate();
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_100017AC0(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

void sub_10005185C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_100051A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v4 = type metadata accessor for FormLaunchConfiguration(0);
  v3[13] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v5);
  v3[15] = swift_task_alloc(v5);
  return swift_task_switch(sub_100051A7C, 0, 0);
}

uint64_t sub_100051A7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSString v31;
  id v32;
  int *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t typea;
  os_log_type_t typeb[8];
  os_log_type_t type[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v85 = v0 + 8;
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v1 = v0[12];
  v2 = type metadata accessor for Logger(0);
  sub_1000097B4(v2, (uint64_t)qword_100070450);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[12];
  if (v6)
  {
    v8 = v0[11];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v88 = v10;
    *(_DWORD *)v9 = 136446466;
    v0[8] = sub_1000572F8(0xD00000000000002BLL, 0x800000010005CD60, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v85, v0 + 9);
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain(v7);
    v0[9] = sub_1000572F8(v8, v7, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s [%s]", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[12], 2);
  }

  v11 = v0[12];
  v0[2] = v0[11];
  v0[3] = v11;
  v0[4] = 0xD000000000000013;
  v0[5] = 0x800000010005B440;
  v12 = sub_10001AF24();
  if ((StringProtocol.contains<A>(_:)(v0 + 4, &type metadata for String, &type metadata for String, v12, v12) & 1) != 0)
  {
    v13 = v0[13];
    v14 = *(_QWORD *)(v0[10] + *(int *)(v13 + 40));
    if (qword_10006EE98 != -1)
      swift_once(&qword_10006EE98, sub_100043054);
    v15 = unk_100070230;
    v16 = (void *)qword_100070238;
    swift_bridgeObjectRetain(unk_100070230);
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "integerForKey:", v18);

    swift_bridgeObjectRelease(v15);
    if ((uint64_t)v19 < v14)
    {
      v20 = sub_10000F714(v0[10], v0[15]);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter();
      v23 = os_log_type_enabled(v21, v22);
      v24 = (uint64_t *)v0[15];
      if (v23)
      {
        typea = v22;
        v25 = swift_slowAlloc(22, -1);
        v82 = swift_slowAlloc(32, -1);
        v88 = v82;
        *(_DWORD *)v25 = 136446466;
        v27 = *v24;
        v26 = v24[1];
        swift_bridgeObjectRetain(v26);
        v0[6] = sub_1000572F8(v27, v26, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7);
        swift_bridgeObjectRelease(v26);
        sub_10000F758((uint64_t)v24);
        *(_WORD *)(v25 + 12) = 2050;
        v28 = unk_100070230;
        v29 = (void *)qword_100070238;
        swift_bridgeObjectRetain(unk_100070230);
        v30 = v29;
        v31 = String._bridgeToObjectiveC()();
        v32 = objc_msgSend(v30, "integerForKey:", v31);

        swift_bridgeObjectRelease(v28);
        v0[7] = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v85);
        _os_log_impl((void *)&_mh_execute_header, v21, typea, "Form [%{public}s] has been snoozed more than [%{public}ld]. Marking it as declined", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        sub_10000F758(v0[15]);
      }

      if (qword_10006EE50 != -1)
        swift_once(&qword_10006EE50, sub_1000310FC);
      v59 = (_QWORD *)v0[10];
      v44 = qword_100072558;
      v0[16] = qword_100072558;
      v0[17] = *v59;
      v0[18] = v59[1];
      v45 = sub_10005228C;
      return swift_task_switch(v45, v44, 0);
    }
    v87 = v13;
    v46 = (uint64_t *)v0[10];
    v84 = *v46;
    *(_QWORD *)type = v46[1];
    v47 = v46[3];
    v78 = v46[2];
    v48 = v46[5];
    v76 = v46[4];
    v49 = v46[7];
    v74 = v46[6];
    v50 = v46[9];
    v72 = v46[8];
    v51 = v46[11];
    v70 = v46[10];
    v68 = *((_BYTE *)v46 + 96);
    v66 = *((_BYTE *)v46 + 97);
    v64 = v46[13];
    v52 = v0[14] + *(int *)(v0[13] + 32);
    v62 = *((_BYTE *)v46 + 112);
    v53 = type metadata accessor for Date(0);
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
    v54(v52, 1, 1, v53);
    v55 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
    }
    else
    {
      v56 = v0[13];
      v57 = v0[14];
      v61 = v55;
      v54(v57 + *(int *)(v56 + 36), 1, 1, v53);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(*(_QWORD *)type);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v49);
      v58 = swift_bridgeObjectRetain(v50);
      Date.init()(v58);
      *(_QWORD *)v57 = v84;
      *(_QWORD *)(v57 + 8) = *(_QWORD *)type;
      *(_QWORD *)(v57 + 16) = v78;
      *(_QWORD *)(v57 + 24) = v47;
      *(_QWORD *)(v57 + 32) = v76;
      *(_QWORD *)(v57 + 40) = v48;
      *(_QWORD *)(v57 + 48) = v74;
      *(_QWORD *)(v57 + 56) = v49;
      *(_QWORD *)(v57 + 64) = v72;
      *(_QWORD *)(v57 + 72) = v50;
      *(_QWORD *)(v57 + 80) = v70;
      *(_QWORD *)(v57 + 88) = v51;
      *(_BYTE *)(v57 + 96) = v68;
      *(_BYTE *)(v57 + 97) = v66;
      *(_QWORD *)(v57 + 104) = v64;
      *(_BYTE *)(v57 + 112) = v62;
      *(_QWORD *)(v57 + *(int *)(v56 + 28)) = 0;
      *(_QWORD *)(v57 + *(int *)(v87 + 40)) = v61;
      if (qword_10006EE28 == -1)
      {
LABEL_17:
        v44 = qword_100072530;
        v45 = sub_100052370;
        return swift_task_switch(v45, v44, 0);
      }
    }
    swift_once(&qword_10006EE28, sub_10001B5C0);
    goto LABEL_17;
  }
  v33 = (int *)v0[13];
  v34 = v0[14];
  v35 = (uint64_t *)v0[10];
  v86 = *v35;
  v63 = v35[1];
  v65 = v35[3];
  v36 = v35[5];
  *(_QWORD *)typeb = v35[4];
  v83 = v35[2];
  v37 = v35[7];
  v38 = v35[9];
  v75 = v35[8];
  v77 = v35[6];
  v39 = v35[11];
  v73 = v35[10];
  v71 = *((_WORD *)v35 + 48);
  v69 = v35[13];
  v40 = v34 + v33[8];
  v67 = *((_BYTE *)v35 + 112);
  v41 = type metadata accessor for Date(0);
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v42(v40, 1, 1, v41);
  v42(v34 + v33[9], 1, 1, v41);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  v43 = swift_bridgeObjectRetain(v38);
  Date.init()(v43);
  *(_QWORD *)v34 = v86;
  *(_QWORD *)(v34 + 8) = v63;
  *(_QWORD *)(v34 + 16) = v83;
  *(_QWORD *)(v34 + 24) = v65;
  *(_QWORD *)(v34 + 32) = *(_QWORD *)typeb;
  *(_QWORD *)(v34 + 40) = v36;
  *(_QWORD *)(v34 + 48) = v77;
  *(_QWORD *)(v34 + 56) = v37;
  *(_QWORD *)(v34 + 64) = v75;
  *(_QWORD *)(v34 + 72) = v38;
  *(_QWORD *)(v34 + 80) = v73;
  *(_QWORD *)(v34 + 88) = v39;
  *(_WORD *)(v34 + 96) = v71;
  *(_QWORD *)(v34 + 104) = v69;
  *(_BYTE *)(v34 + 112) = v67;
  *(_QWORD *)(v34 + v33[7]) = 0;
  *(_QWORD *)(v34 + v33[10]) = 1;
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  v44 = qword_100072530;
  v45 = sub_1000523F4;
  return swift_task_switch(v45, v44, 0);
}

uint64_t sub_10005228C()
{
  uint64_t v0;

  sub_100032344(*(void **)(v0 + 136), *(_QWORD *)(v0 + 144));
  return swift_task_switch(sub_1000522CC, 0, 0);
}

uint64_t sub_1000522CC()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_10005232C, qword_100072530, 0);
}

uint64_t sub_10005232C()
{
  uint64_t v0;
  uint64_t v1;

  sub_10001FA90(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), 1);
  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052370()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000218BC(*(Swift::String **)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_1000523B4, 0, 0);
}

uint64_t sub_1000523B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10000F758(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000523F4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000218BC(*(Swift::String **)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10005477C, 0, 0);
}

uint64_t sub_100052438(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[5] = a1;
  v2[6] = a2;
  v3 = sub_100005D4C(&qword_10006F718);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for User(0);
  v2[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[9] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v6);
  v2[11] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000524CC, 0, 0);
}

uint64_t sub_1000524CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 == 1)
    goto LABEL_15;
  if (v1 != 2)
  {
    if (v1 != 3)
    {
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease(0xE000000000000000);
      v5._countAndFlagsBits = FBKSForm.AuthenticationMethod.description.getter(v1);
      object = v5._object;
      String.append(_:)(v5);
      swift_bridgeObjectRelease(object);
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x800000010005CCE0, "feedbackd/FeedbackDaemon.swift", 30, 2, 222, 0);
    }
    sub_1000429F4(*(_QWORD *)(v0 + 48) + 65, v0 + 107, &qword_100070590);
    sub_1000429F4(v0 + 107, v0 + 104, &qword_100070590);
    if ((*(_BYTE *)(v0 + 104) & 1) == 0)
    {
      v2 = 0;
LABEL_16:
      v12 = *(_QWORD *)(v0 + 80);
      v13 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 88));
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    if (qword_10006EED8 != -1)
      swift_once(&qword_10006EED8, sub_10004F644);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_1000097B4(v7, (uint64_t)qword_100070450);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Forcing to use hidden app as configured by client", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

LABEL_15:
    v2 = 1;
    goto LABEL_16;
  }
  if (qword_10006EEF8 != -1)
    swift_once(&qword_10006EEF8, sub_100054D88);
  v3 = qword_1000725B0;
  *(_QWORD *)(v0 + 96) = qword_1000725B0;
  return swift_task_switch(sub_10005271C, v3, 0);
}

uint64_t sub_10005271C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  sub_100055154();
  sub_100055154();
  v5 = v1 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v5, v0 + 16, 0, 0);
  sub_10001AE58(v5, v4, &qword_10006F718);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_100009730(*(_QWORD *)(v0 + 56), &qword_10006F718);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
    v13(v9, *(_QWORD *)(v0 + 56), v11);
    v14 = v13(v10, v9, v11);
    *(_BYTE *)(v0 + 108) = User.isUnauthenticated.getter(v14) & 1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    return swift_task_switch(sub_10005285C, 0, 0);
  }
}

uint64_t sub_10005285C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(v0 + 108) & 1) != 0)
  {
LABEL_9:
    v1 = 1;
    goto LABEL_10;
  }
  sub_1000429F4(*(_QWORD *)(v0 + 48) + 65, v0 + 106, &qword_100070590);
  sub_1000429F4(v0 + 106, v0 + 105, &qword_100070590);
  if ((*(_BYTE *)(v0 + 105) & 1) != 0)
  {
    if (qword_10006EED8 != -1)
      swift_once(&qword_10006EED8, sub_10004F644);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_1000097B4(v2, (uint64_t)qword_100070450);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Forcing to use hidden app as configured by client", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    goto LABEL_9;
  }
  v1 = 0;
LABEL_10:
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1000529A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6[5] = a4;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  v9 = type metadata accessor for FBKSRemoteAlertRequest(0);
  v6[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[8] = v10;
  v6[9] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_100070584);
  v6[10] = v11;
  *v11 = v6;
  v11[1] = sub_100052A30;
  return sub_100052438(a3, a5);
}

uint64_t sub_100052A30(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_BYTE *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100052A8C, 0, 0);
}

uint64_t sub_100052A8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  char *v12;

  if (*(_BYTE *)(v0 + 112) == 1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v1 = *(uint64_t **)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    v6 = *(_QWORD *)(v0 + 24);
    v8 = type metadata accessor for LaunchController();
    swift_initStaticObject(v8, &unk_10006EF08);
    *v1 = sub_10000FEC0(v7, v6, v5, v4);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v1, enum case for FBKSRemoteAlertRequest.form(_:), v3);
    v9 = (_QWORD *)swift_task_alloc(dword_10006FE54);
    *(_QWORD *)(v0 + 88) = v9;
    *v9 = v0;
    v9[1] = sub_100052BC4;
    return sub_100037364(*(_QWORD *)(v0 + 72));
  }
  else
  {
    v12 = (char *)&dword_100070018 + dword_100070018;
    v11 = (_QWORD *)swift_task_alloc(unk_10007001C);
    *(_QWORD *)(v0 + 104) = v11;
    *v11 = v0;
    v11[1] = sub_100052D10;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_100052BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100052CDC;
  else
    v6 = sub_100052C48;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100052C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSString v4;

  v1 = *(unsigned __int8 *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = (void *)objc_opt_self(FBKSAnalytics);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "logFeedbackdLaunchedFeedbackWithForm:usedAlertPrompt:usedNotificationPrompt:usedHiddenApp:", v4, 1, 0, v1);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052CDC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052D10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_100054768, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100052D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v5 = type metadata accessor for FormLaunchConfiguration(0);
  v4[28] = v5;
  v4[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005D4C((uint64_t *)&unk_1000705A0);
  v4[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FormItem(0);
  v4[31] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[32] = v8;
  v4[33] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100052E2C, 0, 0);
}

uint64_t sub_100052E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 272) = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v0 + 280) = v3;
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 288) = v4;
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 296) = v5;
  v6 = *(_OWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 80);
  v8 = *(_OWORD *)(v1 + 96);
  *(_BYTE *)(v0 + 96) = *(_BYTE *)(v1 + 112);
  *(_OWORD *)(v0 + 64) = v7;
  *(_OWORD *)(v0 + 80) = v8;
  *(_OWORD *)(v0 + 48) = v6;
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v0 + 32) = v9;
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 304) = sub_1000097B4(v10, (uint64_t)qword_100070450);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  sub_10000F794((_QWORD *)(v0 + 16));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  v11 = sub_10000F794((_QWORD *)(v0 + 16));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v24 = v2;
    v14 = swift_slowAlloc(32, -1);
    v23 = swift_slowAlloc(96, -1);
    v25 = v23;
    *(_DWORD *)v14 = 136446722;
    *(_QWORD *)(v0 + 160) = sub_1000572F8(0xD00000000000004BLL, 0x800000010005CD10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(v3);
    *(_QWORD *)(v0 + 168) = sub_1000572F8(v2, v3, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176);
    swift_bridgeObjectRelease_n(v3, 3);
    swift_bridgeObjectRelease_n(v5, 2);
    *(_WORD *)(v14 + 22) = 2080;
    sub_1000429F4(v0 + 16, v0 + 104, &qword_10006F530);
    sub_1000429F4(v0 + 104, v0 + 120, &qword_10006F530);
    sub_10000FB68(v0 + 104);
    v15 = sub_100005D4C(&qword_10006F530);
    v16 = String.init<A>(describing:)(v0 + 120, v15);
    v18 = v17;
    *(_QWORD *)(v0 + 184) = sub_1000572F8(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
    v19 = v18;
    v2 = v24;
    swift_bridgeObjectRelease(v19);
    sub_10000F7E8((_QWORD *)(v0 + 16));
    sub_10000F7E8((_QWORD *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s form: %s prompt title: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    sub_10000F7E8((_QWORD *)(v0 + 16));
    sub_10000F7E8((_QWORD *)(v0 + 16));
  }

  v20 = type metadata accessor for SeedPortal(0);
  *(_QWORD *)(v0 + 312) = static SeedPortal.shared.getter(v20);
  v21 = (_QWORD *)swift_task_alloc(dword_10006F714);
  *(_QWORD *)(v0 + 320) = v21;
  *v21 = v0;
  v21[1] = sub_1000531B8;
  return sub_100013544(*(_QWORD *)(v0 + 240), v2, v3, v4, v5, 0);
}

uint64_t sub_1000531B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    v4 = sub_100053468;
  else
    v4 = sub_100053224;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100053224()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v17;

  v1 = v0[31];
  v2 = v0[32];
  v3 = v0[30];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = sub_100009730(v3, (uint64_t *)&unk_1000705A0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v17 = v8;
      *(_DWORD *)v7 = 136446210;
      v0[19] = sub_1000572F8(0xD00000000000004BLL, 0x800000010005CD10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed to launch because form item is no longer available", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v9 = (_QWORD *)v0[24];
    v10 = qword_100072558;
    v0[44] = qword_100072558;
    v0[45] = *v9;
    v0[46] = v9[1];
    v11 = sub_10000C7E8();
    v12 = swift_allocError(&type metadata for FeedbackdError, v11, 0, 0);
    v0[47] = v12;
    *v13 = 1;
    v0[48] = _convertErrorToNSError(_:)(v12);
    v14 = sub_100053AB0;
    v15 = v10;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(v0[33], v3, v1);
    if (qword_10006EE28 != -1)
      swift_once(&qword_10006EE28, sub_10001B5C0);
    v15 = qword_100072530;
    v14 = sub_1000536EC;
  }
  return swift_task_switch(v14, v15, 0);
}

uint64_t sub_100053468()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v1 = v0[41];
  v0[49] = v1;
  if ((sub_1000503BC(v1) & 1) != 0)
  {
    if (qword_10006EE28 != -1)
      swift_once(&qword_10006EE28, sub_10001B5C0);
    v2 = qword_100072530;
    v3 = sub_100053BB8;
  }
  else
  {
    swift_errorRetain(v1);
    v4 = swift_errorRetain(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v16 = v8;
      *(_DWORD *)v7 = 136446466;
      v0[22] = sub_1000572F8(0xD00000000000004BLL, 0x800000010005CD10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23);
      *(_WORD *)(v7 + 12) = 2080;
      v0[17] = v1;
      swift_errorRetain(v1);
      v9 = sub_100005D4C(&qword_10006F090);
      v10 = String.init<A>(describing:)(v0 + 17, v9);
      v12 = v11;
      v0[18] = sub_1000572F8(v10, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed with: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v13 = (_QWORD *)v0[24];
    v14 = qword_100072558;
    v0[51] = qword_100072558;
    v0[52] = *v13;
    v0[53] = v13[1];
    v0[54] = _convertErrorToNSError(_:)(v1);
    v3 = sub_100053EA8;
    v2 = v14;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1000536EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_100021B64(*(uint64_t **)(v0 + 192));
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100070578
                                                                                    + dword_100070578);
  v1 = (_QWORD *)swift_task_alloc(unk_10007057C);
  *(_QWORD *)(v0 + 336) = v1;
  *v1 = v0;
  v1[1] = sub_100053764;
  return v3(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), v0 + 16, *(_QWORD *)(v0 + 264));
}

uint64_t sub_100053764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10005381C;
  else
    v3 = sub_1000537C8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000537C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005381C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  (*(void (**)(_QWORD, _QWORD))(v0[32] + 8))(v0[33], v0[31]);
  v1 = v0[43];
  v0[49] = v1;
  if ((sub_1000503BC(v1) & 1) != 0)
  {
    if (qword_10006EE28 != -1)
      swift_once(&qword_10006EE28, sub_10001B5C0);
    v2 = qword_100072530;
    v3 = sub_100053BB8;
  }
  else
  {
    swift_errorRetain(v1);
    v4 = swift_errorRetain(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v16 = v8;
      *(_DWORD *)v7 = 136446466;
      v0[22] = sub_1000572F8(0xD00000000000004BLL, 0x800000010005CD10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23);
      *(_WORD *)(v7 + 12) = 2080;
      v0[17] = v1;
      swift_errorRetain(v1);
      v9 = sub_100005D4C(&qword_10006F090);
      v10 = String.init<A>(describing:)(v0 + 17, v9);
      v12 = v11;
      v0[18] = sub_1000572F8(v10, v11, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s failed with: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    if (qword_10006EE50 != -1)
      swift_once(&qword_10006EE50, sub_1000310FC);
    v13 = (_QWORD *)v0[24];
    v14 = qword_100072558;
    v0[51] = qword_100072558;
    v0[52] = *v13;
    v0[53] = v13[1];
    v0[54] = _convertErrorToNSError(_:)(v1);
    v3 = sub_100053EA8;
    v2 = v14;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_100053AB0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 376);
  v1 = *(void **)(v0 + 384);
  sub_100031498(*(void **)(v0 + 360), *(_QWORD *)(v0 + 368), (uint64_t)v1);

  swift_errorRelease(v2);
  return swift_task_switch(sub_100053B0C, 0, 0);
}

uint64_t sub_100053B0C()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_100053B6C, qword_100072530, 0);
}

uint64_t sub_100053B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001FFF8(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053BB8()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)v0[28];
  v2 = v0[29];
  v3 = (uint64_t *)v0[24];
  v26 = *v3;
  v13 = v3[1];
  v25 = v3[2];
  v14 = v3[3];
  v15 = v3[5];
  v4 = v3[7];
  v23 = v3[6];
  v24 = v3[4];
  v5 = v3[9];
  v6 = v3[11];
  v21 = v3[10];
  v22 = v3[8];
  v20 = *((_WORD *)v3 + 48);
  v19 = v3[13];
  v18 = *((_BYTE *)v3 + 112);
  v7 = v2 + v1[8];
  v17 = *(uint64_t *)((char *)v3 + v1[7]);
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v16 = *(uint64_t *)((char *)v3 + v1[10]);
  v9(v2 + v1[9], 1, 1, v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v4);
  v10 = swift_bridgeObjectRetain(v5);
  Date.init()(v10);
  *(_QWORD *)v2 = v26;
  *(_QWORD *)(v2 + 8) = v13;
  *(_QWORD *)(v2 + 16) = v25;
  *(_QWORD *)(v2 + 24) = v14;
  *(_QWORD *)(v2 + 32) = v24;
  *(_QWORD *)(v2 + 40) = v15;
  *(_QWORD *)(v2 + 48) = v23;
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = v22;
  *(_QWORD *)(v2 + 72) = v5;
  *(_QWORD *)(v2 + 80) = v21;
  *(_QWORD *)(v2 + 88) = v6;
  *(_WORD *)(v2 + 96) = v20;
  *(_QWORD *)(v2 + 104) = v19;
  *(_BYTE *)(v2 + 112) = v18;
  *(_QWORD *)(v2 + v1[7]) = v17;
  *(_QWORD *)(v2 + v1[10]) = v16;
  sub_10001EFEC((Swift::String *)v2);
  swift_bridgeObjectRelease(v11);
  return swift_task_switch(sub_100053D7C, 0, 0);
}

uint64_t sub_100053D7C()
{
  uint64_t *v0;
  uint64_t **v1;

  if (qword_10006EE40 != -1)
    swift_once(&qword_10006EE40, sub_100022594);
  v1 = (uint64_t **)swift_task_alloc(dword_10006FA94);
  v0[50] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100053DFC;
  return sub_100026C58(v0[29], v0[27]);
}

uint64_t sub_100053DFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  return swift_task_switch(sub_100053E50, 0, 0);
}

uint64_t sub_100053E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  swift_errorRelease(*(_QWORD *)(v0 + 392));
  sub_10000F758(v1);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053EA8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 432);
  sub_100031498(*(void **)(v0 + 416), *(_QWORD *)(v0 + 424), (uint64_t)v1);

  return swift_task_switch(sub_100053EF0, 0, 0);
}

uint64_t sub_100053EF0()
{
  if (qword_10006EE28 != -1)
    swift_once(&qword_10006EE28, sub_10001B5C0);
  return swift_task_switch(sub_100053F50, qword_100072530, 0);
}

uint64_t sub_100053F50()
{
  uint64_t v0;

  sub_10001FFF8(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  return swift_task_switch(sub_100053F8C, 0, 0);
}

uint64_t sub_100053F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(*(_QWORD *)(v0 + 392));
  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053FD8(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void **v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  uint64_t result;
  objc_class *v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  void **aBlock;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  void *v43;
  void *v44;
  uint64_t v45;

  v2 = v1;
  if (qword_10006EED8 != -1)
    swift_once(&qword_10006EED8, sub_10004F644);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_1000097B4(v4, (uint64_t)qword_100070450);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void **)swift_slowAlloc(32, -1);
    aBlock = v9;
    *(_DWORD *)v8 = 136446210;
    v39 = sub_1000572F8(0xD000000000000026, 0x800000010005CC90, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &aBlock);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = sub_100034E0C();
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  if (v10 == 2)
  {
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 67240192;
      LODWORD(aBlock) = -[NSObject processIdentifier](v11, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);

      _os_log_impl((void *)&_mh_execute_header, v12, v15, "Process %{public}d is not entitled to use this service. Refusing connection.", v16, 8u);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {

      v12 = v11;
    }

    -[NSObject invalidate](v11, "invalidate");
    return v10 != 2;
  }
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 67240192;
    LODWORD(aBlock) = -[NSObject processIdentifier](v11, "processIdentifier");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4);

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Accepting a new XPC connection from: %{public}d", v14, 8u);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

    v12 = v11;
  }

  v17 = swift_allocObject(&unk_10006AEE0, 24, 7);
  *(_QWORD *)(v17 + 16) = v11;
  v44 = sub_1000545D8;
  v45 = v17;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_10004F4CC;
  v43 = &unk_10006AEF8;
  v18 = _Block_copy(&aBlock);
  v19 = v45;
  v20 = v11;
  swift_release(v19);
  -[NSObject setInterruptionHandler:](v20, "setInterruptionHandler:", v18);
  _Block_release(v18);
  v21 = swift_allocObject(&unk_10006AF30, 32, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = v2;
  v44 = sub_10005460C;
  v45 = v21;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_10004F4CC;
  v43 = &unk_10006AF48;
  v22 = _Block_copy(&aBlock);
  v23 = v45;
  v24 = v20;
  v25 = v2;
  swift_release(v23);
  -[NSObject setInvalidationHandler:](v24, "setInvalidationHandler:", v22);
  _Block_release(v22);
  v26 = type metadata accessor for FeedbackDaemonDelegate();
  v27 = swift_allocObject(v26, 24, 7);
  *(_QWORD *)(v27 + 16) = v10;
  v28 = *(NSObject **)&v25[OBJC_IVAR____TtC9feedbackd14FeedbackDaemon_syncQueue];
  v29 = (_QWORD *)swift_allocObject(&unk_10006AF80, 40, 7);
  v29[2] = v25;
  v29[3] = v24;
  v29[4] = v27;
  v30 = swift_allocObject(&unk_10006AFA8, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_100054648;
  *(_QWORD *)(v30 + 24) = v29;
  v44 = sub_100054664;
  v45 = v30;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_1000502C8;
  v43 = &unk_10006AFC0;
  v31 = _Block_copy(&aBlock);
  v32 = v45;
  v33 = v24;
  v34 = v25;
  swift_retain(v27);
  swift_retain(v30);
  sub_100054684(v10);
  swift_release(v32);
  dispatch_sync(v28, v31);
  _Block_release(v31);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation(v30, "", 111, 83, 29, 1);
  result = swift_release(v30);
  if ((v25 & 1) == 0)
  {
    if (v10)
    {
      v36 = (objc_class *)type metadata accessor for FeedbackDaemonInterface(0);
      v37 = v10;
    }
    else
    {
      v36 = (objc_class *)type metadata accessor for FeedbackDaemonAdminInterface(0);
      v37 = 0;
    }
    v38 = objc_msgSend(objc_allocWithZone(v36), "init");
    sub_1000546A4(v37);
    -[NSObject setExportedInterface:](v33, "setExportedInterface:", v38);

    -[NSObject setExportedObject:](v33, "setExportedObject:", v27);
    -[NSObject resume](v33, "resume");
    swift_release(v29);
    swift_release(v27);
    return v10 != 2;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000545B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000545D8()
{
  uint64_t v0;

  sub_10004FED4(*(void **)(v0 + 16));
}

uint64_t sub_1000545E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005460C()
{
  uint64_t v0;

  return sub_100050024(*(void **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_100054614()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100054648()
{
  uint64_t v0;

  sub_1000502E8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100054654()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100054664()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_100054684(unint64_t result)
{
  if (result != 2)
    return sub_100054694(result);
  return result;
}

unint64_t sub_100054694(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain(result);
  return result;
}

unint64_t sub_1000546A4(unint64_t result)
{
  if (result != 2)
    return sub_100041478(result);
  return result;
}

uint64_t sub_1000546B4()
{
  uint64_t v0;

  return sub_100050268(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000546BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000546CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070560;
  if (!qword_100070560)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100070560);
  }
  return result;
}

unint64_t sub_100054714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100070570;
  if (!qword_100070570)
  {
    v1 = sub_100021E50(&qword_100070568);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100070570);
  }
  return result;
}

uint64_t sub_100054794()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  void *v16;
  void *v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  unsigned int v23;
  void (*v24)(char *);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void **aBlock;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  uint64_t (*v34)();
  uint64_t v35;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000C7AC();
  v23 = enum case for DispatchQoS.QoSClass.userInitiated(_:);
  v24 = *(void (**)(char *))(v7 + 104);
  v24(v9);
  v10 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v9, v6);
  v34 = sub_100054AB4;
  v35 = 0;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_10004F4CC;
  v33 = &unk_10006B060;
  v11 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v11);
  v29 = _swiftEmptyArrayStorage;
  v12 = sub_100054BCC();
  v21 = v12;
  v13 = sub_100005D4C(&qword_1000705C0);
  v20 = v13;
  v19 = sub_100054C14();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v13, v19, v0, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v11);
  _Block_release(v11);

  v28 = *(_QWORD *)(v28 + 8);
  ((void (*)(char *, uint64_t))v28)(v2, v0);
  v14 = v27;
  v15 = *(void (**)(char *, uint64_t))(v26 + 8);
  v15(v5, v27);
  ((void (*)(char *, _QWORD, uint64_t))v24)(v9, v23, v6);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v9);
  v22(v9, v6);
  v34 = sub_100054AD8;
  v35 = 0;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_10004F4CC;
  v33 = &unk_10006B088;
  v17 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v17);
  v29 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v20, v19, v0, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v2, v17);
  _Block_release(v17);

  ((void (*)(char *, uint64_t))v28)(v2, v0);
  return ((uint64_t (*)(char *, uint64_t))v15)(v5, v14);
}

uint64_t sub_100054AB4()
{
  return sub_100054AFC(&qword_10006EEE8, (uint64_t)&qword_1000725A8, (uint64_t (*)(void))sub_10004F9C8);
}

uint64_t sub_100054AD8()
{
  return sub_100054AFC(&qword_10006EEB8, (uint64_t)&qword_100072588, (uint64_t (*)(void))sub_100043740);
}

uint64_t sub_100054AFC(_QWORD *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (*a1 != -1)
    swift_once();
  return a3();
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  id v4;

  v3 = objc_autoreleasePoolPush();
  sub_100054794();
  objc_autoreleasePoolPop(v3);
  v4 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v4, "run");

  return 0;
}

uint64_t sub_100054BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100054BC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100054BCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000705B8;
  if (!qword_1000705B8)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000705B8);
  }
  return result;
}

unint64_t sub_100054C14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000705C8;
  if (!qword_1000705C8)
  {
    v1 = sub_100021E50(&qword_1000705C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000705C8);
  }
  return result;
}

uint64_t sub_100054C68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100054D2C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_100009C24(v0, qword_1000705D0);
  sub_1000097B4(v0, (uint64_t)qword_1000705D0);
  v1 = static Strings.Daemon.bundleIdentifier.getter();
  return Logger.init(subsystem:category:)(v1);
}

uint64_t sub_100054D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for Authentication(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize(v1);
  v2 = v1 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  v3 = type metadata accessor for User(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens) = &_swiftEmptyArrayStorage;
  qword_1000725B0 = v1;
  return result;
}

uint64_t sub_100054E08()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::Int v3;
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  Swift::Int v25;
  uint64_t v26;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(FBKSSharedConstants), "sharedUserDefaults");
  v3 = (Swift::Int)objc_msgSend(v2, "integerForKey:", FBKSLastSuccessfulUserIDKey);

  if (v3 < 1)
  {
    if (qword_10006EEF0 != -1)
      swift_once(&qword_10006EEF0, sub_100054D2C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_1000097B4(v17, (uint64_t)qword_1000705D0);
    v13 = Logger.logObject.getter(v18);
    v14 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "No user id found in preferences";
    goto LABEL_12;
  }
  v4 = (void *)objc_opt_self(FBKSDeviceToken);
  sub_10000A968(0, (unint64_t *)&unk_10006F300, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(v3).super.super.isa;
  v6 = objc_msgSend(v4, "fetchDeviceTokenForParticipantID:", isa);

  if (!v6)
  {
    if (qword_10006EEF0 != -1)
      swift_once(&qword_10006EEF0, sub_100054D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_1000097B4(v19, (uint64_t)qword_1000705D0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v23 = 134349056;
      v25 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No device token found for user: %{public}ld", v23, 0xCu);
      swift_slowDealloc(v23, -1, -1);
    }

    return 0;
  }
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = (_QWORD **)(v1 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens);
  swift_beginAccess(v10, &v25, 0, 0);
  if ((sub_100054C68(v7, v9, *v10) & 1) != 0)
  {
    swift_bridgeObjectRelease(v9);
    if (qword_10006EEF0 != -1)
      swift_once(&qword_10006EEF0, sub_100054D2C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_1000097B4(v11, (uint64_t)qword_1000705D0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v13, v14))
      goto LABEL_13;
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "Device token is invalid";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
    swift_slowDealloc(v15, -1, -1);
LABEL_13:

    return 0;
  }
  return v7;
}

uint64_t sub_100055154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v1 = sub_100005D4C(&qword_10006F718);
  v2 = __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v6 = &v15[-v5];
  v7 = type metadata accessor for User(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser, v16, 0, 0);
  sub_10001430C(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100057A04((uint64_t)v6);
    return 0;
  }
  v12 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
  v13 = User.hasExpiredSession.getter(v12);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    swift_beginAccess(v11, v15, 33, 0);
    sub_100056DAC((uint64_t)v4, v11);
    swift_endAccess(v15);
    return 0;
  }
  return 1;
}

uint64_t sub_1000552EC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 72) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  v3 = sub_100005D4C(&qword_10006F718);
  *(_QWORD *)(v2 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10005534C, v1, 0);
}

uint64_t sub_10005534C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (qword_10006EEF0 != -1)
    swift_once(&qword_10006EEF0, sub_100054D2C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_1000705D0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v26 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 64) = sub_1000572F8(0xD000000000000028, 0x800000010005D060, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (*(_BYTE *)(v0 + 88) == 1)
  {
    v7 = sub_100054E08();
    if (v8)
    {
      v9 = v7;
      v10 = v8;
      v11 = Logger.logObject.getter(v7);
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Adding token to deny list", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }
      v14 = *(_QWORD *)(v0 + 72);

      v15 = (char **)(v14 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens);
      swift_beginAccess(v14 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens, v0 + 40, 33, 0);
      v16 = *v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
      *v15 = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v16 = sub_100056E28(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
        *v15 = v16;
      }
      v19 = *((_QWORD *)v16 + 2);
      v18 = *((_QWORD *)v16 + 3);
      if (v19 >= v18 >> 1)
      {
        v16 = sub_100056E28((char *)(v18 > 1), v19 + 1, 1, v16);
        *v15 = v16;
      }
      *((_QWORD *)v16 + 2) = v19 + 1;
      v20 = &v16[16 * v19];
      *((_QWORD *)v20 + 4) = v9;
      *((_QWORD *)v20 + 5) = v10;
      swift_endAccess(v0 + 40);
    }
  }
  v22 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 80);
  v23 = type metadata accessor for User(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  v24 = v22 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v24, v0 + 16, 33, 0);
  sub_100056DAC(v21, v24);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v4 = type metadata accessor for User(0);
  v3[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[18] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v6);
  v3[20] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006F718) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v7);
  v3[22] = swift_task_alloc(v7);
  v3[23] = swift_task_alloc(v7);
  v3[24] = swift_task_alloc(v7);
  v3[25] = swift_task_alloc(v7);
  v3[26] = swift_task_alloc(v7);
  return swift_task_switch(sub_100055748, v2, 0);
}

uint64_t sub_100055748()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v1 = FBKSForm.AuthenticationMethod.rawValue.getter(*(_QWORD *)(v0 + 120));
  if (v1 == FBKSForm.AuthenticationMethod.rawValue.getter(1))
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100070644);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_10005594C;
    v3 = *(_QWORD *)(v0 + 208);
    return sub_1000565C0(v3);
  }
  v5 = sub_100054E08();
  *(_QWORD *)(v0 + 232) = v6;
  if (v6)
  {
    v7 = v5;
    v8 = v6;
    type metadata accessor for SeedPortal(0);
    *(_QWORD *)(v0 + 240) = static SeedPortal.shared.getter();
    v22 = (char *)&async function pointer to dispatch thunk of SeedPortal.loginWithDeviceToken(token:)
        + async function pointer to dispatch thunk of SeedPortal.loginWithDeviceToken(token:);
    v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SeedPortal.loginWithDeviceToken(token:)
                                    + 1));
    *(_QWORD *)(v0 + 248) = v9;
    *v9 = v0;
    v9[1] = sub_100055B00;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v22)(*(_QWORD *)(v0 + 160), v7, v8);
  }
  else
  {
    v10 = FBKSForm.AuthenticationMethod.rawValue.getter(*(_QWORD *)(v0 + 120));
    if (v10 != FBKSForm.AuthenticationMethod.rawValue.getter(3))
    {
      v21 = (_QWORD *)swift_task_alloc(dword_100070644);
      *(_QWORD *)(v0 + 264) = v21;
      *v21 = v0;
      v21[1] = sub_100055E00;
      v3 = *(_QWORD *)(v0 + 176);
      return sub_1000565C0(v3);
    }
    v11 = sub_10000C7E8();
    v12 = swift_allocError(&type metadata for FeedbackdError, v11, 0, 0);
    *v13 = 3;
    swift_willThrow(v12);
    v14 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005594C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100055FB4;
  else
    v4 = sub_1000559B0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_1000559B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  sub_100056D64(*(_QWORD *)(v0 + 208), v1);
  v6 = v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser, v0 + 64, 33, 0);
  sub_100056DAC(v1, v6);
  swift_endAccess(v0 + 64);
  sub_100055154();
  sub_10001430C(v6, v2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 112);
  if (v7 == 1)
  {
    sub_100057A04(*(_QWORD *)(v0 + 192));
    v11 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 136));
    v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, v11, 1, v8);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055B00()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v3);
  v5 = v2[29];
  v4 = v2[30];
  v6 = v2[16];
  swift_release(v4);
  swift_bridgeObjectRelease(v5);
  if (v0)
    v7 = sub_1000560D4;
  else
    v7 = sub_100055B80;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100055B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (qword_10006EEF0 != -1)
    swift_once(&qword_10006EEF0, sub_100054D2C);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = type metadata accessor for Logger(0);
  sub_1000097B4(v5, (uint64_t)qword_1000705D0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7 = v6(v1, v2, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    v15 = v6;
    v16 = User.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_QWORD *)(v0 + 104) = v16;
    v6 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Logged in as user %ld", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  }

  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 184);
  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 112);
  v6(v17, v19, v20);
  v24 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v24(v17, 0, 1, v20);
  sub_100056D64(v17, v18);
  v25 = v22 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v22 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser, v0 + 40, 33, 0);
  sub_100056DAC(v18, v25);
  swift_endAccess(v0 + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v23, v19, v20);
  v24(v23, 0, 1, v20);
  v26 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 192);
  v30 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 176);
  v32 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055E00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100056044;
  else
    v4 = sub_100055E64;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_100055E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  sub_100056D64(*(_QWORD *)(v0 + 176), v1);
  v6 = v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v5 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser, v0 + 16, 33, 0);
  sub_100056DAC(v1, v6);
  swift_endAccess(v0 + 16);
  sub_100055154();
  sub_10001430C(v6, v2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 112);
  if (v7 == 1)
  {
    sub_100057A04(*(_QWORD *)(v0 + 168));
    v11 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 32))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
    v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, v11, 1, v8);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000560D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;

  v1 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = (_QWORD *)(v0 + 88);
  swift_errorRetain(v1);
  v3 = sub_100005D4C(&qword_10006F090);
  v4 = sub_10000A968(0, &qword_1000702E0, NSError_ptr);
  if (!swift_dynamicCast(v0 + 96, v0 + 88, v3, v4, 0))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    goto LABEL_15;
  }
  swift_errorRelease(*(_QWORD *)(v0 + 256));
  v5 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 280) = v5;
  v6 = v5;
  v7 = (void *)_convertErrorToNSError(_:)(v6);

  v8 = FBKSErrorContainsSP2ErrorCode(v7, 16);
  if (!v8)
  {
    if (qword_10006EEF0 != -1)
      swift_once(&qword_10006EEF0, sub_100054D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_1000097B4(v19, (uint64_t)qword_1000705D0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Login failed", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    swift_willThrow(v24);
    swift_errorRelease(*v2);
    goto LABEL_15;
  }
  if (qword_10006EEF0 != -1)
    swift_once(&qword_10006EEF0, sub_100054D2C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000097B4(v9, (uint64_t)qword_1000705D0);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Device token is no longer valid", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }
  v14 = *(_QWORD *)(v0 + 120);

  v15 = FBKSForm.AuthenticationMethod.rawValue.getter(v14);
  if (v15 == FBKSForm.AuthenticationMethod.rawValue.getter(3))
  {
    v16 = sub_10000C7E8();
    v17 = swift_allocError(&type metadata for FeedbackdError, v16, 0, 0);
    *v18 = 3;
    swift_willThrow(v17);

    swift_errorRelease(*v2);
LABEL_15:
    v25 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v33 = (_QWORD *)swift_task_alloc(dword_100070644);
  *(_QWORD *)(v0 + 288) = v33;
  *v33 = v0;
  v33[1] = sub_10005641C;
  return sub_1000565C0(*(_QWORD *)(v0 + 112));
}

uint64_t sub_10005641C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100056520;
  else
    v4 = sub_100056480;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_100056480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_errorRelease(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000565C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[9] = a1;
  v2[10] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_100005D4C(&qword_10006F718) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v3);
  v2[12] = swift_task_alloc(v3);
  v4 = type metadata accessor for User(0);
  v2[13] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[14] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v6);
  v2[16] = swift_task_alloc(v6);
  return swift_task_switch(sub_100056664, v1, 0);
}

uint64_t sub_100056664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;

  if (qword_10006EEF0 != -1)
    swift_once(&qword_10006EEF0, sub_100054D2C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000097B4(v1, (uint64_t)qword_1000705D0);
  v0[17] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[8] = sub_1000572F8(0xD000000000000016, 0x800000010005CDE0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  type metadata accessor for SeedPortal(0);
  v0[18] = static SeedPortal.shared.getter();
  v9 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of SeedPortal.unauthenticatedLogin()
                                      + async function pointer to dispatch thunk of SeedPortal.unauthenticatedLogin());
  v7 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of SeedPortal.unauthenticatedLogin()
                                  + 1));
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_100056830;
  return v9(v0[16]);
}

uint64_t sub_100056830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 80);
    v5 = sub_100056AA0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 80);
    swift_release(*(_QWORD *)(v2 + 144));
    v5 = sub_1000568A4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000568A4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);

  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 16);
  v1 = v20(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v8 = User.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    *(_QWORD *)(v0 + 56) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Logged in as user %ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  }
  v9 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 80);

  v20(v13, v9, v11);
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56);
  v16(v13, 0, 1, v11);
  sub_100056D64(v13, v12);
  v17 = v14 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser;
  swift_beginAccess(v17, v0 + 16, 33, 0);
  sub_100056DAC(v12, v17);
  swift_endAccess(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v15, v9, v11);
  v16(v15, 0, 1, v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v19);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 144));
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v2 = sub_100005D4C(&qword_10006F090);
  v3 = sub_10000A968(0, &qword_1000702E0, NSError_ptr);
  if (swift_dynamicCast(v0 + 48, v0 + 40, v2, v3, 0))
  {
    v4 = swift_errorRelease(*(_QWORD *)(v0 + 160));
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Login failed", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    swift_willThrow(v8);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056BFC()
{
  uint64_t v0;

  sub_100057A04(v0 + OBJC_IVAR____TtC9feedbackd14Authentication__loggedInUser);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC9feedbackd14Authentication_invalidTokens));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100056C38()
{
  return type metadata accessor for Authentication(0);
}

uint64_t type metadata accessor for Authentication(uint64_t a1)
{
  uint64_t result;

  result = qword_100070620;
  if (!qword_100070620)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Authentication);
  return result;
}

void sub_100056C7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100056D00(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100056D00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100070648)
  {
    v2 = type metadata accessor for User(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100070648);
  }
}

uint64_t sub_100056D54(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100056D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005D4C(&qword_10006F718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056DF4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

char *sub_100056E28(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005D4C(&qword_10006F9D0);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100057A44(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100056F34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005D4C(&qword_100070758);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100057B34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100057054(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005707C(a1, a2, a3, a4, &qword_100070748, &qword_1000701A0);
}

uint64_t sub_100057068(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005707C(a1, a2, a3, a4, &qword_100070750, &qword_10006FDF0);
}

uint64_t sub_10005707C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100005D4C(a5);
  v14 = *(_QWORD *)(sub_100005D4C(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_100005D4C(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100057C40(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_100057288(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_1000572F8(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_1000572F8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000573C8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100009C84((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100009C84((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100009C64(v12);
  return v7;
}

uint64_t sub_1000573C8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100057580(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100057580(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100057614(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1000577EC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1000577EC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100057614(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100057788(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100057788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100005D4C(&qword_100070740);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000577EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005D4C(&qword_100070740);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100057938(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void *sub_100057948(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_1000579DC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100057A04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005D4C(&qword_10006F718);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100057A44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100057B34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100005D4C((uint64_t *)&unk_100070760);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100057C40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    v18 = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_100005D4C(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  v18 = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)(v18);
}
