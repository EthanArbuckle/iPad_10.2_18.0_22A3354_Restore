void sub_1001DFD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001DFD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001DFD70(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

__n128 sub_1001DFD88(__n128 *a1, uint64_t a2)
{
  unint64_t *v4;
  std::ios_base *v5;
  void **v6;
  uint64_t v7;
  __n128 result;
  void *__p[2];
  unsigned __int8 v10;

  v4 = &a1[6].n128_u64[1];
  v5 = (std::ios_base *)&a1[6].n128_i8[*(_QWORD *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  sub_100060EDC(a2, (uint64_t)__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (uint64_t)__p[1];
  sub_1000F0508(v4, (uint64_t)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  result = *(__n128 *)(*(unint64_t *)((char *)v4 + *(_QWORD *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t sub_1001DFE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v24;
  char v25;

  if (v25 < 0)
    operator delete(v24);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_1001DFEA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  uint64_t v5;
  std::ios_base *v6;
  void (__cdecl **v7)(std::ostringstream *__hidden);
  char *v8;
  const std::locale::facet *v9;
  void (__cdecl **v11)(std::ostringstream *__hidden);
  _QWORD v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  void (__cdecl **v16)(std::ostringstream *__hidden);
  std::locale v17;

  v11 = v4;
  *(_QWORD *)((char *)&v12[-1] + (_QWORD)*(v4 - 3)) = v5;
  v6 = (std::ios_base *)((char *)&v12[-1] + (_QWORD)*(v11 - 3));
  std::ios_base::init(v6, v12);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v12);
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  v7 = v11;
  v8 = (char *)&v12[-1] + (_QWORD)*(v11 - 3);
  if (*((_DWORD *)v8 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v12[-1] + (_QWORD)*(v11 - 3)));
    v9 = std::locale::use_facet(&v17, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
    std::locale::~locale(&v17);
    v7 = v11;
  }
  *((_DWORD *)v8 + 36) = 48;
  for (*(_DWORD *)((char *)v12 + (_QWORD)*(v7 - 3)) = *(_DWORD *)((_BYTE *)v12 + (_QWORD)*(v7 - 3)) & 0xFFFFFFB5 | 8;
        a1 != a2;
        ++a1)
  {
    *(_QWORD *)((char *)&v12[2] + (_QWORD)*(v11 - 3)) = 2;
    std::ostream::operator<<(&v11, *a1);
  }
  std::stringbuf::str(v12);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v12);
  return std::ios::~ios(&v16);
}

void sub_1001E0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001E0098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 88));
  sub_1000F0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001E00B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001E00C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::ostream::~ostream(&a9, v10 + 8);
  std::ios::~ios(v9);
  _Unwind_Resume(a1);
}

void sub_1001E00E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_1001E00FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F0484((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001E0110(uint64_t a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v25;
  uint64_t v28;
  int v29;
  int v32;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  float v44;
  float v45;
  uint64_t v46;
  _QWORD *v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t prime;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v58;
  char *v59;

  v59 = &v58;
  v8 = (unint64_t *)(a2 + 8);
  if (*(_DWORD *)a2 != *(int *)a2 >> 31)
    sub_1001D79E4();
  v9 = *v8;
  v59 = &v58;
  v10 = (_QWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32) != *(int *)(a2 + 32) >> 31)
    sub_1001D79E4();
  v12 = *v10 ^ v9 ^ ((*v10 ^ v9) >> 32);
  v13 = v12 + 31;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v12 + 31;
      if (v13 >= v14)
        v4 = v13 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        v17 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
        v18 = *(_QWORD *)(a2 + 8);
        v19 = *(_DWORD *)(a2 + 32) ^ (*(int *)(a2 + 32) >> 31);
        v20 = *(_QWORD *)(a2 + 40);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v28 = v16[1];
            if (v28 != v13)
            {
              if ((v28 & (v14 - 1)) != v4)
                goto LABEL_73;
              goto LABEL_46;
            }
            v29 = *((_DWORD *)v16 + 4);
            if (v17 == ((v29 >> 31) ^ v29))
            {
              if (v29 >> 31 == v29)
              {
                if (v18 != v16[3])
                  goto LABEL_46;
              }
              else if (*v8 != v16[3]
                     || *(_QWORD *)(a2 + 16) != v16[4]
                     || *(_DWORD *)(a2 + 24) != (unint64_t)*((unsigned int *)v16 + 10))
              {
                goto LABEL_46;
              }
              v32 = *((_DWORD *)v16 + 12);
              if (v19 == ((v32 >> 31) ^ v32))
              {
                if (v32 >> 31 == v32)
                {
                  if (v20 == v16[7])
                    return v16;
                }
                else if (*v10 == v16[7]
                       && *(_QWORD *)(a2 + 48) == v16[8]
                       && *(_DWORD *)(a2 + 56) == (unint64_t)*((unsigned int *)v16 + 18))
                {
                  return v16;
                }
              }
            }
LABEL_46:
            v16 = (_QWORD *)*v16;
            if (!v16)
              goto LABEL_73;
          }
        }
        do
        {
          v21 = v16[1];
          if (v21 == v13)
          {
            v22 = *((_DWORD *)v16 + 4);
            if (v17 == ((v22 >> 31) ^ v22))
            {
              if (v22 >> 31 == v22)
              {
                if (v18 != v16[3])
                  goto LABEL_16;
              }
              else if (*v8 != v16[3]
                     || *(_QWORD *)(a2 + 16) != v16[4]
                     || *(_DWORD *)(a2 + 24) != (unint64_t)*((unsigned int *)v16 + 10))
              {
                goto LABEL_16;
              }
              v25 = *((_DWORD *)v16 + 12);
              if (v19 == ((v25 >> 31) ^ v25))
              {
                if (v25 >> 31 == v25)
                {
                  if (v20 == v16[7])
                    return v16;
                }
                else if (*v10 == v16[7]
                       && *(_QWORD *)(a2 + 48) == v16[8]
                       && *(_DWORD *)(a2 + 56) == (unint64_t)*((unsigned int *)v16 + 18))
                {
                  return v16;
                }
              }
            }
          }
          else
          {
            if (v21 >= v14)
              v21 %= v14;
            if (v21 != v4)
              break;
          }
LABEL_16:
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_73:
  v35 = operator new(0x60uLL);
  v16 = v35;
  *v35 = 0;
  v35[1] = v13;
  v36 = v35 + 3;
  v38 = a3 + 2;
  v37 = *a3;
  v39 = (int)*a3 >> 31;
  if (v37 >> 31 == v37)
  {
    *v36 = *v38;
    v39 = v37;
  }
  else
  {
    *(_OWORD *)v36 = *(_OWORD *)v38;
    *((_DWORD *)v35 + 10) = a3[6];
  }
  *((_DWORD *)v35 + 4) = v39 ^ v37;
  v40 = v35 + 7;
  v41 = a3[8];
  v42 = v41 >> 31;
  v43 = a3 + 10;
  if (v41 >> 31 == v41)
  {
    *v40 = *v43;
    v42 = v41;
  }
  else
  {
    *(_OWORD *)v40 = *(_OWORD *)v43;
    *((_DWORD *)v35 + 18) = a3[14];
  }
  *((_DWORD *)v35 + 12) = v42 ^ v41;
  *((_OWORD *)v35 + 5) = *a4;
  v44 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v45 = *(float *)(a1 + 32);
  if (v14 && (float)(v45 * (float)v14) >= v44)
  {
    v46 = *(_QWORD *)a1;
    v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v47)
    {
LABEL_82:
      *v16 = *v47;
LABEL_117:
      *v47 = v16;
      goto LABEL_118;
    }
  }
  else
  {
    v48 = 1;
    if (v14 >= 3)
      v48 = (v14 & (v14 - 1)) != 0;
    v49 = v48 | (2 * v14);
    v50 = vcvtps_u32_f32(v44 / v45);
    if (v49 <= v50)
      prime = v50;
    else
      prime = v49;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v14)
      goto LABEL_93;
    if (prime < v14)
    {
      v52 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
      {
        v52 = std::__next_prime(v52);
      }
      else
      {
        v54 = 1 << -(char)__clz(v52 - 1);
        if (v52 >= 2)
          v52 = v54;
      }
      if (prime <= v52)
        prime = v52;
      if (prime < v14)
LABEL_93:
        sub_100005DD8(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    v55 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        v4 = v13 % v14;
        v46 = *(_QWORD *)a1;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v13 % v14));
        if (v47)
          goto LABEL_82;
      }
      else
      {
        v4 = v13;
        v46 = *(_QWORD *)a1;
        v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
        if (v47)
          goto LABEL_82;
      }
    }
    else
    {
      v4 = v55 & v13;
      v46 = *(_QWORD *)a1;
      v47 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v55 & v13));
      if (v47)
        goto LABEL_82;
    }
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v46 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    v56 = *(_QWORD *)(*v16 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v56 >= v14)
        v56 %= v14;
    }
    else
    {
      v56 &= v14 - 1;
    }
    v47 = (_QWORD *)(*(_QWORD *)a1 + 8 * v56);
    goto LABEL_117;
  }
LABEL_118:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_1001E0668(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E067C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E06D8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

std::string *sub_1001E0734@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E0764(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1001E0780@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E07B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E07CC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E0828()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E0884(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  return result;
}

void sub_1001E0890(int *a1@<X0>, int **a2@<X8>)
{
  int **v3;
  int **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _OWORD *v29;
  int *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  __int128 v51;
  int v52;

  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  while (sub_100258CE8(a1) && !sub_100258C90((uint64_t)a1, 1))
  {
    v4 = v3;
    sub_100258CD8((uint64_t)a1, 1);
    v5 = sub_100258C40((uint64_t)a1, a1[4]);
    if (sub_100258CE8(a1))
    {
      v6 = 0;
      do
      {
        if (!sub_100258C90((uint64_t)a1, 1))
          break;
        sub_100258CD8((uint64_t)a1, 1);
        v7 = sub_100258C40((uint64_t)a1, 1);
        if (v7)
          v8 = 6;
        else
          v8 = 2;
        v9 = sub_100258C40((uint64_t)a1, v8);
        v10 = sub_100258CE8(a1);
        v11 = v6 + 5;
        if (!v7)
          v11 = v6 + 1;
        v6 = v11 + v9;
      }
      while (v10);
      if (v6 >= 1)
      {
        v13 = v3[1];
        v12 = v3[2];
        if (v13 >= v12)
        {
          v15 = *v3;
          v16 = (char *)v13 - (char *)*v3;
          v17 = v16 >> 2;
          v18 = (v16 >> 2) + 1;
          if (v18 >> 62)
            goto LABEL_61;
          v19 = (char *)v12 - (char *)v15;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 62)
              goto LABEL_62;
            v21 = v20;
            v22 = operator new(4 * v20);
            v20 = v21;
            v23 = (int *)&v22[4 * v17];
            *v23 = v5;
            v14 = v23 + 1;
            if (v13 != v15)
            {
LABEL_26:
              v24 = (char *)(v13 - 1) - (char *)v15;
              if (v24 < 0x2C)
              {
                v3 = v4;
                goto LABEL_34;
              }
              v25 = (char *)v13 - &v22[v16];
              v3 = v4;
              if (v25 < 0x20)
                goto LABEL_65;
              v26 = (v24 >> 2) + 1;
              v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              v28 = &v13[v27 / 0xFFFFFFFFFFFFFFFCLL];
              v23 = (int *)((char *)v23 - v27);
              v29 = &v22[4 * v17 - 16];
              v30 = v13 - 4;
              v31 = v26 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v32 = *(_OWORD *)v30;
                *(v29 - 1) = *((_OWORD *)v30 - 1);
                *v29 = v32;
                v29 -= 2;
                v30 -= 8;
                v31 -= 8;
              }
              while (v31);
              v13 = v28;
              if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_65:
                do
                {
LABEL_34:
                  v33 = *--v13;
                  *--v23 = v33;
                }
                while (v13 != v15);
              }
LABEL_35:
              v12 = (int *)&v22[4 * v20];
              *v3 = v23;
              v3[1] = v14;
              v3[2] = v12;
              if (v15)
              {
                operator delete(v15);
                v12 = v3[2];
              }
              goto LABEL_37;
            }
          }
          else
          {
            v22 = 0;
            v23 = (int *)(4 * v17);
            *(_DWORD *)(4 * v17) = v5;
            v14 = (int *)(4 * v17 + 4);
            if (v13 != v15)
              goto LABEL_26;
          }
          v3 = v4;
          goto LABEL_35;
        }
        *v13 = v5;
        v14 = v13 + 1;
LABEL_37:
        v3[1] = v14;
        if (v14 < v12)
        {
          *v14 = v6;
          v3[1] = v14 + 1;
        }
        else
        {
          v34 = *v3;
          v35 = (char *)v14 - (char *)*v3;
          v36 = v35 >> 2;
          v37 = (v35 >> 2) + 1;
          if (v37 >> 62)
LABEL_61:
            sub_1000D02C0();
          v38 = (char *)v12 - (char *)v34;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            if (v39 >> 62)
LABEL_62:
              sub_1000CDEB8();
            v40 = v39;
            v41 = operator new(4 * v39);
            v39 = v40;
            v42 = (int *)&v41[4 * v36];
            *v42 = v6;
            v43 = (uint64_t)(v42 + 1);
            v3 = v4;
            if (v14 == v34)
              goto LABEL_57;
          }
          else
          {
            v41 = 0;
            v42 = (int *)(4 * v36);
            *(_DWORD *)(4 * v36) = v6;
            v43 = 4 * v36 + 4;
            v3 = v4;
            if (v14 == v34)
              goto LABEL_57;
          }
          v44 = (char *)(v14 - 1) - (char *)v34;
          if (v44 >= 0x2C)
          {
            if ((unint64_t)((char *)v14 - v41 - v35) >= 0x20)
            {
              v46 = (v44 >> 2) + 1;
              v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
              v45 = &v14[v47 / 0xFFFFFFFFFFFFFFFCLL];
              v42 = (int *)((char *)v42 - v47);
              v48 = &v41[4 * v36 - 16];
              v49 = v14 - 4;
              v50 = v46 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v51 = *(_OWORD *)v49;
                *(v48 - 1) = *((_OWORD *)v49 - 1);
                *v48 = v51;
                v48 -= 2;
                v49 -= 8;
                v50 -= 8;
              }
              while (v50);
              if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_57;
            }
            else
            {
              v45 = v14;
            }
          }
          else
          {
            v45 = v14;
          }
          do
          {
            v52 = *--v45;
            *--v42 = v52;
          }
          while (v45 != v34);
LABEL_57:
          *v3 = v42;
          v3[1] = (int *)v43;
          v3[2] = (int *)&v41[4 * v39];
          if (v34)
            operator delete(v34);
          v3[1] = (int *)v43;
        }
      }
    }
  }
  sub_1001E0C7C((uint64_t)v3);
}

void sub_1001E0C48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E0C7C(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 4 * v4;
      v9 = 4 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_1000CDEB8();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[4 * v4];
      if ((unint64_t)(v6 - 4) >= 0x2C)
      {
        v9 = (uint64_t)&v7[4 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
          v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[4 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[4 * v4];
      }
      do
      {
        v17 = *((_DWORD *)v1 - 1);
        v1 -= 4;
        *(_DWORD *)(v9 - 4) = v17;
        v9 -= 4;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_1001E0DA4(uint64_t result, uint64_t a2)
{
  int v2;
  __int128 v3;
  double v4;
  BOOL v5;
  double v6;

  v2 = *(_DWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = v3;
  *(_DWORD *)(result + 16) = v2;
  v4 = 1.0 / *(double *)&v3;
  v5 = *(double *)&v3 == 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = v4;
  *(double *)(result + 24) = v6;
  return result;
}

double sub_1001E0DD0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  void *__p;
  void *v5[2];
  char v6;
  std::string v7;
  std::string v8;
  std::string v9;

  v3 = a2;
  if (1 << *(_DWORD *)(a1 + 16) <= a2)
  {
    sub_1000D5048(v5, "");
    sub_1001E0FE4("You tried to convert ", &v7);
    sub_1001E1030(&v3, &v8);
    sub_1001E11D8(" to a float, which is outside the range of our spec", &v9);
    sub_100174738((uint64_t)v5, (uint64_t)&v7, 3);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v9.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_6;
        goto LABEL_10;
      }
    }
    else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      if ((v6 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v5[0]);
LABEL_7:
      sub_1000F2AE4((uint64_t)&__p);
    }
LABEL_10:
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_11;
  }
  return *(double *)(a1 + 8) + (double)a2 * *(double *)a1;
}

void sub_1001E0F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001E0F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void **v17;

  while (1)
  {
    if (*((char *)v17 - 1) < 0)
      operator delete(*(v17 - 3));
    v17 -= 3;
    if (v17 == (void **)&a17)
      JUMPOUT(0x1001E0F48);
  }
}

std::string *sub_1001E0F98@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E0FC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1001E0FE4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E1014(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1001E1030(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  std::string *v5;
  unint64_t v6;
  std::string *v7;
  char *v8;
  __int128 *v9;
  std::string::size_type *v10;
  unint64_t v11;
  __int128 v12;
  std::string::value_type v13;
  _QWORD v14[2];
  char v15;
  int v16;
  _BYTE v18[6];
  _BYTE v19[6];
  _BYTE *v20;
  _BYTE *v21;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v20 = v18;
  v21 = v19;
  v14[0] = *a1;
  v14[1] = v19;
  v15 = 48;
  v16 = 48;
  v3 = sub_100173F80((uint64_t)v14);
  v20 = (_BYTE *)v3;
  v21 = v19;
  v4 = &v19[-v3];
  v5 = a2;
  if ((unint64_t)&v19[-v3] >= 0x17)
  {
    std::string::__grow_by(a2, 0x16uLL, (std::string::size_type)(v4 - 22), 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((_BYTE *)v3 == v19)
  {
    v7 = v5;
  }
  else
  {
    v6 = (unint64_t)&v18[-v3 + 42];
    if (v6 < 0x20 || (unint64_t)v5 - v3 < 0x20)
    {
      v7 = v5;
      v8 = (char *)v3;
    }
    else
    {
      v7 = (std::string *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v8 = (char *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v9 = (__int128 *)(v3 + 16);
      v10 = &v5->__r_.__value_.__r.__words[2];
      v11 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = *v9;
        *((_OWORD *)v10 - 1) = *(v9 - 1);
        *(_OWORD *)v10 = v12;
        v9 += 2;
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_15;
    }
    do
    {
      v13 = *v8++;
      v7->__r_.__value_.__s.__data_[0] = v13;
      v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8 != v19);
  }
LABEL_15:
  v7->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v4 & 0x7F;
}

void sub_1001E11BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1001E11D8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E1208(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E1224()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E1280()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_1001E12DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[26];
  __int16 v7;
  int v8;
  void *__p[2];
  uint64_t v10;
  void *v11;
  std::runtime_error v12;
  char v13;
  std::string v14;

  *a1 = 0;
  a1[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  a1[2] += (*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a2 + 200))(a2, __p);
  v8 = 0;
  v7 = 0;
  a1[2] += (*(unsigned int (**)(uint64_t, void **, int *, __int16 *))(*(_QWORD *)a2 + 216))(a2, __p, &v8, &v7);
  if (!v8)
  {
    sub_1000D5048(&v12, "");
    sub_10016A234("Trying to read past end-of-stream", &v14);
    sub_100174738((uint64_t)&v12, (uint64_t)&v14, 1);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(v12.__vftable);
    sub_1000F2AE4((uint64_t)&v11);
  }
  if (v7 != 1 || v8 != 15)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v14, "SensorLog thrift modified?  I only know how to parse a basic one");
    std::runtime_error::runtime_error(&v12, &v14);
    v12.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
    sub_10018D04C((uint64_t)v6);
    sub_1000EF6D4(&v12, (uint64_t)"streaming::SensorLog::SensorLog(::apache::thrift::protocol::TProtocol *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/thrift/streaming_inertial_types.cpp", 32, (uint64_t)v6);
  }
  LODWORD(v14.__r_.__value_.__l.__data_) = 0;
  LODWORD(v12.__vftable) = 0;
  v4 = a1[2]
     + (*(unsigned int (**)(uint64_t, std::runtime_error *, std::string *))(*(_QWORD *)a2 + 248))(a2, &v12, &v14);
  a1[1] = LODWORD(v14.__r_.__value_.__l.__data_);
  a1[2] = v4;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1001E14F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,int a27,__int16 a28,char a29,char a30)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1001E15BC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  void *__p[2];
  uint64_t v12;
  void *v13[2];
  void *v14[2];
  char v15;
  std::string v16;

  if (*a1 == a1[1])
  {
    sub_1000D5048(v14, "");
    sub_10016A234("Trying to read past end-of-stream", &v16);
    sub_100174738((uint64_t)v14, (uint64_t)&v16, 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[0]);
    sub_1000F2AE4((uint64_t)v13);
  }
  *(_QWORD *)a4 = off_1003F98E8;
  *(_QWORD *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_DWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_DWORD *)(a4 + 72) = 0;
  *(_WORD *)(a4 + 88) &= 0xFC00u;
  *a3 += sub_1001A0388(a4, a2);
  v7 = a1[1];
  v8 = *a1 + 1;
  *a1 = v8;
  if (v8 == v7)
  {
    *a3 += (*(unsigned int (**)(uint64_t *))(*a2 + 256))(a2);
    *a3 += (*(unsigned int (**)(uint64_t *))(*a2 + 224))(a2);
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    v10 = 0;
    v9 = 0;
    *a3 += (*(unsigned int (**)(uint64_t *, void **, int *, __int16 *))(*a2 + 216))(a2, __p, &v10, &v9);
    if (v10)
    {
      sub_1000D5048(v14, "");
      sub_1001E18C4("Didn't get STOP as expected", &v16);
      sub_100174738((uint64_t)v14, (uint64_t)&v16, 1);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (v15 < 0)
        operator delete(v14[0]);
      sub_1000F2AE4((uint64_t)v13);
    }
    *a3 += (*(unsigned int (**)(uint64_t *))(*a2 + 208))(a2);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_1001E1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    nullsub_8(v27);
    _Unwind_Resume(a1);
  }
  nullsub_8(v27);
  _Unwind_Resume(a1);
}

std::string *sub_1001E18C4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E18F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E1910()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E196C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1001E19C8(_QWORD **a1@<X0>, char **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  std::string::size_type v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  int *v30;
  int *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  int v35;
  char *v36;
  unint64_t *v37;
  __int128 v38;
  unint64_t *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  _OWORD *v52;
  unint64_t *v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  NSObject *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  void *v61;
  _BYTE *v62;
  int v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  std::string::size_type v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  NSObject *v86;
  char *v87;
  char *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD **v106;
  char **v107;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  void *v114;
  _BYTE *v115;
  void *v116;
  unint64_t *v117;
  char *v118;
  void *v119;
  char *v120;
  char *v121;
  void *__p[2];
  void *v123[2];
  char v124;
  std::string buf;
  std::string v126;
  std::string v127;
  std::string v128;

  v8 = a5;
  v9 = (uint64_t)(a3[1] - *a3) >> 5;
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  sub_1001E272C(a5, v9, (unint64_t *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v13 = a3[1];
  v14 = v13 - *a3;
  v109 = v8;
  if (v13 != *a3)
  {
    if (v14 < 0)
      sub_1000D02C0();
    v119 = operator new(v14);
    v120 = (char *)v119;
    v121 = (char *)v119 + 32 * (v14 >> 5);
    v116 = operator new((unint64_t)v14 >> 2);
    v117 = (unint64_t *)v116;
    v118 = (char *)v116 + 8 * (v14 >> 5);
  }
  (*(void (**)(void **__return_ptr, _QWORD *, char **, _QWORD *))(*a1[2] + 16))(&v114, a1[2], a2, a3);
  v15 = (char *)v114;
  v16 = (uint64_t)(a3[1] - *a3) >> 5;
  v111 = (void *)(0xAAAAAAAAAAAAAAABLL * ((v115 - (_BYTE *)v114) >> 3));
  v113 = v16;
  if (v111 != (void *)v16)
  {
    sub_1000D5048(v123, "");
    sub_1000F9D38("Number of cache entries ", &buf);
    sub_1001E2B30(&v111, &v126);
    sub_1001E2F54(" != num macs, ", &v127);
    sub_1001E2B30(&v113, &v128);
    sub_100174738((uint64_t)v123, (uint64_t)&buf, 4);
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v128.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_156;
      }
    }
    else if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_157;
    }
LABEL_156:
    operator delete(v126.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((v124 & 0x80000000) == 0)
        goto LABEL_57;
LABEL_158:
      operator delete(v123[0]);
LABEL_57:
      sub_1000F2AE4((uint64_t)__p);
    }
LABEL_157:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v124 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_158;
  }
  v106 = a1;
  v107 = a2;
  if (v115 != v114)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v20 = &v15[24 * v18];
      if (*v20)
      {
        v21 = *v8;
        v22 = *((_QWORD *)v20 + 1);
        v23 = *((_QWORD *)v20 + 2);
        if (v23)
        {
          v24 = (unint64_t *)(v23 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = (_QWORD *)(v21 + 16 * v18);
        v27 = (std::__shared_weak_count *)v26[1];
        ++v17;
        *v26 = v22;
        v26[1] = v23;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        goto LABEL_14;
      }
      if (v18 >= (uint64_t)(a3[1] - *a3) >> 5)
        sub_1001E2FA0();
      v30 = (int *)(*a3 + 32 * v18);
      v31 = (int *)v120;
      if (v120 >= v121)
      {
        v120 = (char *)sub_1001D7E30(&v119, v30);
        v37 = v117;
        v36 = v118;
        if (v117 >= (unint64_t *)v118)
          goto LABEL_32;
      }
      else
      {
        v32 = v120 + 8;
        v34 = v30 + 2;
        v33 = *v30;
        if (v33 == v33 >> 31)
        {
          *v32 = *v34;
          v35 = v33;
        }
        else
        {
          v38 = *(_OWORD *)v34;
          *((_DWORD *)v120 + 6) = v30[6];
          *(_OWORD *)v32 = v38;
          v35 = *v30;
          v33 = *v30 >> 31;
        }
        *v31 = v35 ^ v33;
        v120 = (char *)(v31 + 8);
        v37 = v117;
        v36 = v118;
        if (v117 >= (unint64_t *)v118)
        {
LABEL_32:
          v39 = (unint64_t *)v116;
          v40 = (char *)v37 - (_BYTE *)v116;
          v41 = ((char *)v37 - (_BYTE *)v116) >> 3;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 61)
            sub_1000D02C0();
          v43 = v36 - (_BYTE *)v116;
          if (v43 >> 2 > v42)
            v42 = v43 >> 2;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            if (v44 >> 61)
              sub_1000CDEB8();
            v45 = operator new(8 * v44);
            v46 = (unint64_t *)&v45[8 * v41];
            *v46 = v18;
            v19 = (uint64_t)(v46 + 1);
            if (v37 != v39)
            {
LABEL_41:
              v47 = (char *)(v37 - 1) - (char *)v39;
              if (v47 < 0x58)
              {
                v8 = v109;
                goto LABEL_49;
              }
              v48 = (char *)v37 - &v45[v40];
              v8 = v109;
              if (v48 < 0x20)
                goto LABEL_171;
              v49 = (v47 >> 3) + 1;
              v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v37[v50 / 0xFFFFFFFFFFFFFFF8];
              v46 = (unint64_t *)((char *)v46 - v50);
              v52 = &v45[8 * v41 - 16];
              v53 = v37 - 2;
              v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 4;
                v54 -= 4;
              }
              while (v54);
              v37 = v51;
              if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_171:
                do
                {
LABEL_49:
                  v56 = *--v37;
                  *--v46 = v56;
                }
                while (v37 != v39);
              }
LABEL_50:
              v116 = v46;
              v117 = (unint64_t *)v19;
              v118 = &v45[8 * v44];
              if (v39)
                operator delete(v39);
              goto LABEL_13;
            }
          }
          else
          {
            v45 = 0;
            v46 = (unint64_t *)(8 * v41);
            *(_QWORD *)(8 * v41) = v18;
            v19 = 8 * v41 + 8;
            if (v37 != v39)
              goto LABEL_41;
          }
          v8 = v109;
          goto LABEL_50;
        }
      }
      *v37 = v18;
      v19 = (uint64_t)(v37 + 1);
      v8 = v109;
LABEL_13:
      v117 = (unint64_t *)v19;
LABEL_14:
      ++v18;
      v15 = (char *)v114;
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((v115 - (_BYTE *)v114) >> 3))
        goto LABEL_59;
    }
  }
  v17 = 0;
LABEL_59:
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC1A0);
  v57 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
    v58 = (uint64_t)(a3[1] - *a3) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v58;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                               * ((v115 - (_BYTE *)v114) >> 3);
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v126.__r_.__value_.__r.__words[0] = v17;
    LOWORD(v126.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v126.__r_.__value_.__r.__words[1] + 2) = (v120 - (_BYTE *)v119) >> 5;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "found macs in cache, num macs=%zu num cacheEntries=%zu num foundInCache=%lu num macsToQuery=%zu", (uint8_t *)&buf, 0x2Au);
  }
  v59 = v114;
  if (v114)
  {
    v60 = v115;
    v61 = v114;
    if (v115 != v114)
    {
      v62 = v115;
      do
      {
        v63 = *(v62 - 24);
        v62 -= 24;
        if (v63)
        {
          v64 = (std::__shared_weak_count *)*((_QWORD *)v60 - 1);
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          *v62 = 0;
        }
        v60 = v62;
      }
      while (v62 != v59);
      v61 = v114;
    }
    v115 = v59;
    operator delete(v61);
  }
  if (v119 != v120)
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    sub_1001E272C(&v114, (v120 - (_BYTE *)v119) >> 5, (unint64_t *)&buf);
    v67 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v68 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (qword_100417F08 == -1)
    {
      v70 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_85;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC1A0);
      v70 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_85:
        (*(void (**)(void **__return_ptr, _QWORD *, char **, void **))(*v106[1] + 16))(&v111, v106[1], v107, &v119);
        v73 = (char *)v111;
        v72 = v112;
        v113 = (v112 - (_BYTE *)v111) >> 4;
        v110 = (v120 - (_BYTE *)v119) >> 5;
        if (v113 == v110)
        {
          if (v112 != v111)
          {
            v74 = 0;
            v75 = 0;
            while (1)
            {
              v76 = *(_QWORD *)&v73[16 * v74];
              if (!v76)
                goto LABEL_89;
              ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t, uint64_t))(*v106)[6])(&buf, v106, v76, a4);
              v77 = (char *)v114 + 16 * v74;
              v78 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
              v79 = (std::__shared_weak_count *)*((_QWORD *)v77 + 1);
              *(_OWORD *)v77 = v78;
              if (!v79)
                goto LABEL_95;
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
                v82 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
                if (buf.__r_.__value_.__l.__size_)
                {
LABEL_96:
                  v83 = (unint64_t *)&v82->__shared_owners_;
                  do
                    v84 = __ldaxr(v83);
                  while (__stlxr(v84 - 1, v83));
                  if (!v84)
                  {
                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                    std::__shared_weak_count::__release_weak(v82);
                  }
                }
              }
              else
              {
LABEL_95:
                v82 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
                if (buf.__r_.__value_.__l.__size_)
                  goto LABEL_96;
              }
              ++v75;
              v73 = (char *)v111;
              v72 = v112;
LABEL_89:
              if (++v74 >= (unint64_t)((v72 - v73) >> 4))
                goto LABEL_111;
            }
          }
          v75 = 0;
LABEL_111:
          if (qword_100417F08 == -1)
          {
            v85 = v109;
            v86 = qword_100417F10;
            if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
            {
LABEL_114:
              v87 = (char *)v111;
              if (v111)
              {
                v88 = v112;
                v89 = v111;
                if (v112 != v111)
                {
                  do
                  {
                    v90 = (std::__shared_weak_count *)*((_QWORD *)v88 - 1);
                    if (v90)
                    {
                      v91 = (unint64_t *)&v90->__shared_owners_;
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                        std::__shared_weak_count::__release_weak(v90);
                      }
                    }
                    v88 -= 16;
                  }
                  while (v88 != v87);
                  v89 = v111;
                }
                v112 = v87;
                operator delete(v89);
              }
              (*(void (**)(_QWORD *, char **, void **, void **))(*v106[2] + 24))(v106[2], v107, &v119, &v114);
              v94 = v114;
              v93 = v115;
              if (v115 == v114)
              {
                v94 = v115;
              }
              else
              {
                v95 = 0;
                do
                {
                  v96 = &v94[2 * v95];
                  v97 = *v96;
                  if (*v96)
                  {
                    if (v95 >= ((char *)v117 - (_BYTE *)v116) >> 3)
                      sub_1001E2FA0();
                    v98 = (_QWORD *)(*v85 + 16 * *((_QWORD *)v116 + v95));
                    v99 = v94[2 * v95 + 1];
                    *v96 = 0;
                    v96[1] = 0;
                    v100 = (std::__shared_weak_count *)v98[1];
                    *v98 = v97;
                    v98[1] = v99;
                    if (v100)
                    {
                      v101 = (unint64_t *)&v100->__shared_owners_;
                      do
                        v102 = __ldaxr(v101);
                      while (__stlxr(v102 - 1, v101));
                      if (!v102)
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                      }
                    }
                  }
                  ++v95;
                  v94 = v114;
                  v93 = v115;
                }
                while (v95 < (v115 - (_BYTE *)v114) >> 4);
              }
              if (v94)
              {
                if (v93 != v94)
                {
                  do
                  {
                    v103 = (std::__shared_weak_count *)*(v93 - 1);
                    if (v103)
                    {
                      v104 = (unint64_t *)&v103->__shared_owners_;
                      do
                        v105 = __ldaxr(v104);
                      while (__stlxr(v105 - 1, v104));
                      if (!v105)
                      {
                        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                        std::__shared_weak_count::__release_weak(v103);
                      }
                    }
                    v93 -= 2;
                  }
                  while (v93 != v94);
                  v93 = v114;
                }
                v115 = v94;
                operator delete(v93);
              }
              goto LABEL_147;
            }
          }
          else
          {
            dispatch_once(&qword_100417F08, &stru_1003FC1A0);
            v85 = v109;
            v86 = qword_100417F10;
            if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
              goto LABEL_114;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v75;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "found macs in database and converted heat maps from purpleslam::ApRssiMap to SingleApRadioMap. numFoundInDb=%lu", (uint8_t *)&buf, 0xCu);
          goto LABEL_114;
        }
        sub_1000D5048(v123, "");
        sub_1001E18C4("Number of queried rssi maps", &buf);
        sub_1001E2B30(&v113, &v126);
        sub_1001DFA48(" != num. macs, ", &v127);
        sub_1001E2B30(&v110, &v128);
        sub_100174738((uint64_t)v123, (uint64_t)&buf, 4);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v128.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_106:
            if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_107;
            goto LABEL_161;
          }
        }
        else if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_106;
        }
        operator delete(v127.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_107:
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_108;
          goto LABEL_162;
        }
LABEL_161:
        operator delete(v126.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_108:
          if ((v124 & 0x80000000) == 0)
            goto LABEL_109;
LABEL_163:
          operator delete(v123[0]);
LABEL_109:
          sub_1000F2AE4((uint64_t)__p);
        }
LABEL_162:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v124 & 0x80000000) == 0)
          goto LABEL_109;
        goto LABEL_163;
      }
    }
    v71 = sub_10004BE10(v107);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (v120 - (_BYTE *)v119) >> 5;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "decoding ApRssiMap into SingleApRadioMap, locationId=%{private}s, num. macs=%zu", (uint8_t *)&buf, 0x16u);
    goto LABEL_85;
  }
LABEL_147:
  if (v116)
  {
    v117 = (unint64_t *)v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = (char *)v119;
    operator delete(v119);
  }
}

void sub_1001E25B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  void *v40;

  if (a32 < 0)
    operator delete(__p);
  sub_1000F7D3C(&a14);
  sub_1000F7D3C(&a18);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
    v40 = a24;
    if (!a24)
    {
LABEL_5:
      sub_1000F7D3C(a12);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v40 = a24;
    if (!a24)
      goto LABEL_5;
  }
  a25 = (uint64_t)v40;
  operator delete(v40);
  sub_1000F7D3C(a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001E272C(_QWORD *a1, unint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_1000D02C0();
    v6 = operator new(16 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[2 * a2];
    a1[2] = v7;
    v8 = a3[1];
    if (v8)
    {
      *v6 = *a3;
      v6[1] = v8;
LABEL_5:
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        v8 = a3[1];
        *v6 = *a3;
        v6[1] = v8;
        if (v8)
          goto LABEL_5;
      }
    }
    else
    {
      v11 = *a3;
      v12 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_20;
      v13 = v12 + 1;
      v14 = *a3;
      v15 = v6 + 4;
      v16 = v13 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v15 - 2) = v14;
        *(v15 - 1) = v14;
        *v15 = v14;
        v15[1] = v14;
        v15 += 4;
        v16 -= 4;
      }
      while (v16);
      v6 += 2 * (v13 & 0x1FFFFFFFFFFFFFFCLL);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_20:
        do
        {
          *v6 = v11;
          v6[1] = 0;
          v6 += 2;
        }
        while (v6 != v7);
      }
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_1001E2830(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_100342B7C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001E2850(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (_BYTE *)*a1;
  if (*a1)
  {
    v3 = (_BYTE *)a1[1];
    v4 = (_BYTE *)*a1;
    if (v3 != v2)
    {
      v5 = (_BYTE *)a1[1];
      do
      {
        v6 = *(v5 - 24);
        v5 -= 24;
        if (v6)
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          *v5 = 0;
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (_BYTE *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1001E28F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = operator new(0x20uLL);
  *v9 = off_1003FC1D0;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a1;
  v13 = v9;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 24))(v8, a2, v12);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_1001E29CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1001E2A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D415C(a2, a3);
}

void sub_1001E2A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1001E2AB0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FC120;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

void sub_1001E2B04(id a1)
{
  qword_100417F10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_1001E2B30(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  std::string *v5;
  unint64_t v6;
  std::string *v7;
  char *v8;
  __int128 *v9;
  std::string::size_type *v10;
  unint64_t v11;
  __int128 v12;
  std::string::value_type v13;
  _QWORD v14[2];
  char v15;
  int v16;
  _BYTE v18[6];
  _BYTE v19[6];
  _BYTE *v20;
  _BYTE *v21;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v20 = v18;
  v21 = v19;
  v14[0] = *a1;
  v14[1] = v19;
  v15 = 48;
  v16 = 48;
  v3 = sub_1001E2CD8((uint64_t)v14);
  v20 = (_BYTE *)v3;
  v21 = v19;
  v4 = &v19[-v3];
  v5 = a2;
  if ((unint64_t)&v19[-v3] >= 0x17)
  {
    std::string::__grow_by(a2, 0x16uLL, (std::string::size_type)(v4 - 22), 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((_BYTE *)v3 == v19)
  {
    v7 = v5;
  }
  else
  {
    v6 = (unint64_t)&v18[-v3 + 42];
    if (v6 < 0x20 || (unint64_t)v5 - v3 < 0x20)
    {
      v7 = v5;
      v8 = (char *)v3;
    }
    else
    {
      v7 = (std::string *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v8 = (char *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v9 = (__int128 *)(v3 + 16);
      v10 = &v5->__r_.__value_.__r.__words[2];
      v11 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = *v9;
        *((_OWORD *)v10 - 1) = *(v9 - 1);
        *(_OWORD *)v10 = v12;
        v9 += 2;
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_15;
    }
    do
    {
      v13 = *v8++;
      v7->__r_.__value_.__s.__data_[0] = v13;
      v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8 != v19);
  }
LABEL_15:
  v7->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v4 & 0x7F;
}

void sub_1001E2CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E2CD8(uint64_t a1)
{
  const std::locale *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BYTE *p_p;
  uint64_t *v12;
  int v13;
  char v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *__p;
  unint64_t v25;
  unsigned __int8 v26;
  std::locale v27;

  std::locale::locale(&v27);
  v2 = std::locale::classic();
  if (std::locale::operator==(&v27, v2))
  {
    v3 = *(_QWORD *)a1;
    do
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4 - 1;
      *(_BYTE *)(v4 - 1) = *(_DWORD *)(a1 + 20)
                         + v3
                         - 10 * (((v3 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      v5 = *(_QWORD *)a1;
      v3 = *(_QWORD *)a1 / 0xAuLL;
      *(_QWORD *)a1 = v3;
    }
    while (v5 > 9);
    v6 = *(_QWORD *)(a1 + 8);
    goto LABEL_28;
  }
  v7 = std::locale::use_facet(&v27, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v26 < 0)
  {
    v8 = v25;
    if (!v25 || *(char *)__p <= 0)
      goto LABEL_24;
LABEL_11:
    v9 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
    v10 = 0;
    p_p = __p;
    if ((v26 & 0x80u) == 0)
      p_p = &__p;
    v12 = (uint64_t *)(a1 + 8);
    LOBYTE(v13) = *p_p;
    v14 = *p_p;
    do
    {
      if (!v14)
      {
        if (++v10 < v8)
        {
          v19 = (v26 & 0x80u) == 0 ? &__p : (void **)__p;
          v13 = *((char *)v19 + v10);
          if (v13 < 1)
            LOBYTE(v13) = 127;
        }
        v15 = (_BYTE *)(*v12 - 1);
        *v12 = (uint64_t)v15;
        *v15 = v9;
        v14 = v13;
      }
      --v14;
      v17 = *(_QWORD *)a1;
      v16 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v16 - 1;
      *(_BYTE *)(v16 - 1) = *(_DWORD *)(a1 + 20)
                          + v17
                          - 10 * (((v17 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      v18 = *(_QWORD *)a1;
      *(_QWORD *)a1 /= 0xAuLL;
    }
    while (v18 > 9);
    goto LABEL_26;
  }
  v8 = v26;
  if (v26 && (char)__p > 0)
    goto LABEL_11;
LABEL_24:
  v12 = (uint64_t *)(a1 + 8);
  v20 = *(_QWORD *)a1;
  do
  {
    v21 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21 - 1;
    *(_BYTE *)(v21 - 1) = *(_DWORD *)(a1 + 20)
                        + v20
                        - 10 * (((v20 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
    v22 = *(_QWORD *)a1;
    v20 = *(_QWORD *)a1 / 0xAuLL;
    *(_QWORD *)a1 = v20;
  }
  while (v22 > 9);
LABEL_26:
  v6 = *v12;
  if ((char)v26 < 0)
    operator delete(__p);
LABEL_28:
  std::locale::~locale(&v27);
  return v6;
}

void sub_1001E2F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

std::string *sub_1001E2F54@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1001E2F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1001E2FA0()
{
  sub_10018CB98("vector");
}

void sub_1001E2FB8()
{
  operator delete();
}

__n128 sub_1001E2FCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1003FC1D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1001E300C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FC1D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1001E3034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 48))(&v11, *(_QWORD *)(a1 + 24), a3, *(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    sub_10016CA74();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, a2, &v11);
  v7 = result;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      return v7;
    }
  }
  return result;
}

void sub_1001E30F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_100341FCC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E310C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN25CachingSingleApRadioMapDb15foreachRadioMapERK10LocationIdRK30SingleApRadioMapBuildingParamsNSt3"
                     "__18functionIFbRK10MacAddressNS6_10shared_ptrI16SingleApRadioMapEEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN25CachingSingleApRadioMapDb15foreachRadioMapERK10LocationIdRK30SingleApRadioMapBuildin"
                                "gParamsNSt3__18functionIFbRK10MacAddressNS6_10shared_ptrI16SingleApRadioMapEEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN25CachingSingleApRadioMapDb15foreachRadioMapERK10LocationIdRK30SingleApRadioMapBuildingParamsNSt3__18functionIFbRK10MacAddressNS6_10shared_ptrI16SingleApRadioMapEEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN25CachingSingleApRadioMapDb15foreachRadioMapERK10LocationIdRK30SingleApRadioMapBuildingParamsNSt3__18functionIFbRK10MacAddressNS6_10shared_ptrI16SingleApRadioMapEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_1001E3178()
{
}

void sub_1001E3188(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1001E31AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1001E31C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI16SingleApRadioMapEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI16SingleApRadioMapEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI16SingleApRadioMapEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI16SingleApRadioMapEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_1001E3234()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E3290()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E32EC(uint64_t result, uint64_t a2, double a3)
{
  void *v3[2];
  void *__p[2];
  char v5;

  if (*(_BYTE *)result)
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_6;
  }
  else
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    if (!*(_BYTE *)(result + 16))
      goto LABEL_6;
  }
  if (*(_QWORD *)(result + 24) > a2)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v5 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)v3);
  }
LABEL_6:
  if (a3 > 0.0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v5 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)v3);
  }
  ++*(_QWORD *)(result + 32);
  *(double *)(result + 40) = *(double *)(result + 40) + a3;
  if (!*(_BYTE *)(result + 16))
    *(_BYTE *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_1001E3440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E3460()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E34BC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1001E3518(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FC2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1001E3528(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FC2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1001E3558(__n128 **a1, __n128 *a2, __n128 *a3, unint64_t a4)
{
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (a4)
  {
    if (a4 >= 0x333333333333334)
      sub_1000D02C0();
    v8 = (__n128 *)operator new(80 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[5 * a4];
    if (a2 == a3)
    {
      v9 = v8;
    }
    else
    {
      v9 = v8;
      do
      {
        sub_10003FADC(v9, a2);
        v10 = a2[2];
        v9[1] = a2[1];
        v9[2] = v10;
        v9[3].n128_u16[0] = a2[3].n128_u16[0];
        v11 = a2[4].n128_u64[0];
        v9[3].n128_u64[1] = a2[3].n128_u64[1];
        v9[4].n128_u64[0] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v9[4].n128_u64[1] = a2[4].n128_u64[1];
        a2 += 5;
        v9 += 5;
      }
      while (a2 != a3);
    }
    a1[1] = v9;
  }
}

void sub_1001E3654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1001E3694(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1001E3694(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 80;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1001E375C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E37B8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

BOOL sub_1001E3814(uint64_t a1, int a2)
{
  _BOOL8 v2;

  v2 = *(_DWORD *)(a1 + 32) != a2;
  *(_DWORD *)(a1 + 32) = a2;
  return v2;
}

uint64_t sub_1001E382C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E3888()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1001E38E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  double *v21;
  _QWORD *v22;
  double *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  if (v2 != v3)
  {
    v5 = (void **)(a2 + 24);
    do
    {
      v6 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      v8 = *v6;
      v7 = (std::__shared_weak_count *)v6[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
      if (sub_100044D64(*(_QWORD *)v11))
      {
        v12 = *(_QWORD **)(a2 + 8);
        if ((unint64_t)v12 >= *(_QWORD *)(a2 + 16))
        {
          v16 = sub_1001E3DB8(a2, (__int128 *)v11);
        }
        else
        {
          *v12 = *(_QWORD *)v11;
          v13 = *(_QWORD *)(v11 + 8);
          v12[1] = v13;
          if (v13)
          {
            v14 = (unint64_t *)(v13 + 8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = v12 + 2;
        }
        *(_QWORD *)(a2 + 8) = v16;
      }
      v17 = (*(double (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
      v18 = (*(double (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
      v19 = v18;
      v21 = *(double **)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 40);
      if ((unint64_t)v21 < v20)
      {
        *v21 = v17;
        v21[1] = v18;
        v22 = v21 + 2;
        goto LABEL_28;
      }
      v23 = (double *)*v5;
      v24 = ((char *)v21 - (_BYTE *)*v5) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        sub_1000D02C0();
      v26 = v20 - (_QWORD)v23;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 60)
          sub_1000CDEB8();
        v28 = (char *)operator new(16 * v27);
        v29 = (double *)&v28[16 * v24];
        *v29 = v17;
        v29[1] = v19;
        v30 = (uint64_t)v29;
        if (v21 == v23)
        {
LABEL_26:
          v22 = v29 + 2;
          *(_QWORD *)(a2 + 24) = v30;
          *(_QWORD *)(a2 + 32) = v29 + 2;
          *(_QWORD *)(a2 + 40) = &v28[16 * v27];
          if (v21)
            goto LABEL_27;
          goto LABEL_28;
        }
      }
      else
      {
        v28 = 0;
        v29 = (double *)(16 * v24);
        *v29 = v17;
        v29[1] = v18;
        v30 = 16 * v24;
        if (v21 == v23)
          goto LABEL_26;
      }
      do
      {
        *(_OWORD *)(v30 - 16) = *((_OWORD *)v21 - 1);
        v30 -= 16;
        v21 -= 2;
      }
      while (v21 != v23);
      v21 = (double *)*v5;
      v22 = v29 + 2;
      *(_QWORD *)(a2 + 24) = v30;
      *(_QWORD *)(a2 + 32) = v29 + 2;
      *(_QWORD *)(a2 + 40) = &v28[16 * v27];
      if (v21)
LABEL_27:
        operator delete(v21);
LABEL_28:
      *(_QWORD *)(a2 + 32) = v22;
      if (v7)
      {
        v31 = (unint64_t *)&v7->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_1001E3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  sub_1000E095C((uint64_t)&a9);
  sub_1001E3B8C(v9);
  _Unwind_Resume(a1);
}

void **sub_1001E3B8C(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_1001E3C34(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1000D02C0();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_1000CDEB8();
    v10 = (char *)operator new(16 * v9);
    v11 = a2[1];
    v12 = &v10[16 * v5];
    *(_QWORD *)v12 = *a2;
    *((_QWORD *)v12 + 1) = v11;
    if (!v11)
    {
LABEL_10:
      v13 = &v10[16 * v9];
      v14 = v12 + 16;
      if (v4 == v3)
        goto LABEL_29;
      goto LABEL_16;
    }
  }
  else
  {
    v10 = 0;
    v11 = a2[1];
    v12 = (char *)(16 * v5);
    *(_QWORD *)v12 = *a2;
    *((_QWORD *)v12 + 1) = v11;
    if (!v11)
      goto LABEL_10;
  }
  v15 = (unint64_t *)(v11 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v13 = &v10[16 * v9];
  v14 = v12 + 16;
  if (v4 == *(_QWORD **)a1)
  {
LABEL_29:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    if (!v3)
      return v14;
    goto LABEL_27;
  }
  do
  {
LABEL_16:
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v12 - 1) = v17;
    v12 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_27:
    operator delete(v3);
  return v14;
}

_OWORD *sub_1001E3DB8(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1000D02C0();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_1000CDEB8();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

uint64_t sub_1001E3F18()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E3F74()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

dispatch_object_t *sub_1001E3FD0(dispatch_object_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_object_t v4;
  std::__shared_weak_count *isa;
  unint64_t *p_shared_owners;
  unint64_t v7;

  sub_100005D30(a1 + 4);
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        isa = (std::__shared_weak_count *)v3[-1].isa;
        if (isa)
        {
          p_shared_owners = (unint64_t *)&isa->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))isa->__on_zero_shared)(isa);
            std::__shared_weak_count::__release_weak(isa);
          }
        }
        v3 -= 2;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1001E4080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BYTE v12[16];
  _QWORD v13[10];
  char *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[5];
  _QWORD v17[7];

  v6 = sub_1000C23C0(*(_QWORD *)(a1 + 64));
  sub_1003096F4((uint64_t)v12, a2, v6, a3);
  v7 = (char *)operator new(0x108uLL);
  sub_1001E4650((uint64_t)v7, (uint64_t)v12);
  v14 = v7 + 24;
  v15 = (std::__shared_weak_count *)v7;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3802000000;
  v17[3] = sub_1000BCCD0;
  v17[4] = nullsub_36;
  v17[5] = a1 + 16;
  v17[6] = &v14;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000;
  v16[2] = sub_10005D5C0;
  v16[3] = &unk_1003FC408;
  v16[4] = v17;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 48), v16);
  _Block_object_dispose(v17, 8);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return sub_100073074(v13);
}

void sub_1001E41B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  operator delete(v3);
  sub_100073074((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1001E41D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100073074((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1001E41E8(uint64_t a1, uint64_t a2)
{
  sub_10021D2D8(*(_QWORD *)(a1 + 64), a2);
}

void sub_1001E41F0(uint64_t a1, uint64_t a2)
{
  sub_10021D364(*(_QWORD *)(a1 + 64), a2);
}

void sub_1001E41F8(uint64_t a1, uint64_t a2)
{
  sub_10021D528(*(_QWORD *)(a1 + 64), a2);
}

void sub_1001E4200(uint64_t a1, uint64_t a2)
{
  sub_10021D5B4(*(_QWORD *)(a1 + 64), a2);
}

void sub_1001E4208(uint64_t a1, uint64_t a2)
{
  sub_10021D788(*(_QWORD *)(a1 + 64), a2);
}

void sub_1001E4210(uint64_t a1, uint64_t a2)
{
  sub_10021D820(*(_QWORD *)(a1 + 64), a2);
}

_QWORD *sub_1001E4218(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v7 = 0;
  }
  sub_10021731C(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1001E42F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    sub_1000CDD68(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001E433C(uint64_t a1)
{
  int **v2;
  _QWORD v3[5];
  _QWORD v4[7];

  v2 = 0;
  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x3802000000;
  v4[3] = sub_1001E4794;
  v4[4] = nullsub_116;
  v4[5] = a1 + 16;
  v4[6] = &v2;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_1001E47A4;
  v3[3] = &unk_1003FC430;
  v3[4] = v4;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 48), v3);
  _Block_object_dispose(v4, 8);
  return sub_10005D4C0(*v2);
}

void sub_1001E43E8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[5];
  _QWORD v9[7];

  v7 = 0;
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x3802000000;
  v9[3] = sub_1001E4794;
  v9[4] = nullsub_116;
  v9[5] = a1 + 16;
  v9[6] = &v7;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1001E47A4;
  v8[3] = &unk_1003FC430;
  v8[4] = v9;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 48), v8);
  _Block_object_dispose(v9, 8);
  v3 = (char)v7;
  if (v7)
  {
    v4 = v7[1];
    *(_QWORD *)(a2 + 8) = *v7;
    *(_QWORD *)(a2 + 16) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v3 = 1;
  }
  *(_BYTE *)a2 = v3;
}

void sub_1001E44C0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  uint64_t v4;
  std::string v5;
  std::bad_cast v6;
  void *v7;
  _UNKNOWN **v8;

  v4 = a1;
  memset(&v5, 0, sizeof(v5));
  if ((sub_100169944(&v4, &v5) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v6);
    v6.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v6);
  }
  v3 = std::string::insert(&v5, 0, "BaseLocalizer ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1001E4580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::bad_cast a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001E45B0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_1001E44C0(a1 - 8, a2);
}

uint64_t sub_1001E45B8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    sub_100073738(v5 + 4);
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1001E4650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1003F0840;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 56) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1000B347C(a1 + 64, a2 + 32);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 112) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 24) = 11;
  return a1;
}

void sub_1001E46F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_owners;

  shared_owners = (std::__shared_weak_count *)v1[2].__shared_owners_;
  if (shared_owners)
    sub_100342C78(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E4710(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      sub_100073738(v2 + 4);
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

__n128 sub_1001E4794(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1001E47A4(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *(uint64_t **)(v1 + 40);
  v2 = *(_QWORD **)(v1 + 48);
  if (*v3 == v3[1])
    v4 = 0;
  else
    v4 = *v3;
  *v2 = v4;
  return result;
}

uint64_t sub_1001E47C4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1001E4820()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

id sub_1001E487C()
{
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  return (id)qword_100417F10;
}

uint64_t sub_1001E48C8(uint64_t a1)
{
  sub_10003320C(a1);

  return a1;
}

uint64_t sub_1001E48F8(uint64_t a1)
{
  BOOL v1;
  sqlite3_stmt *v2;
  sqlite3_stmt *i;
  int v4;
  int v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  BOOL v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *j;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  int *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v37;
  void *v38[2];
  char v39;
  void *v40;
  __int128 v41;
  sqlite3 *v42;
  std::string __p;
  _BYTE v44[24];
  _QWORD v45[3];
  std::string v46;
  _BYTE v47[24];
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::runtime_error v52;
  std::string __dst;
  uint8_t buf[4];
  void **v55;

  sub_1000125C0(a1, &__p);
  sub_10006DB18((const char *)&__p, 0, (int *)buf);
  if (*(_DWORD *)buf <= 1u)
  {
    if (qword_100417F08 == -1)
    {
      v7 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
        goto LABEL_15;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v7 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
      {
LABEL_15:
        v8 = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_16;
        return v8;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "doExpectedTablesExist, #warning expecting db to exist", buf, 2u);
    goto LABEL_15;
  }
  sub_1000C6940(&v42, &__p, 294914, 0);
  v40 = operator new(0x40uLL);
  v41 = xmmword_100392540;
  strcpy((char *)v40, "SELECT 1 FROM sqlite_master WHERE type='table' AND name=?");
  v39 = 6;
  strcpy((char *)v38, "venues");
  sub_100085FFC(&v42, (uint64_t)&v40, 0, (uint64_t)&pStmt);
  sub_100085A00(&pStmt, 1, (uint64_t *)v38);
  v1 = 0;
  v2 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    v4 = sqlite3_step(i);
    v5 = v4;
    if (v4 == 100)
    {
      if (sqlite3_column_type(v2, 0) != 5)
        v6 = sqlite3_column_int64(v2, 0) != 0;
      v1 = v6;
      continue;
    }
    if (v4 == 101)
      break;
    if (v4 == 19)
    {
LABEL_54:
      if (qword_100417F08 == -1)
      {
        v20 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_56;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v20 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_56:
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v46.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v46.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v51, &v46);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)v45);
      sub_1001F9F6C((std::runtime_error *)&v51, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:356:23) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)v45);
    }
    sub_10008B9C4(v4, db);
    if (v5)
    {
LABEL_58:
      v21 = __error();
      sub_10025FF8C(*v21, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v49.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v49, " w/ ");
      v22 = std::string::insert(&v49, 0, "Failed sqlite3_step");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v48, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v48 = __dst;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v48;
      else
        v24 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      else
        size = v48.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v50, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v52, &v51);
      v52.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v47);
      sub_1001F2298(&v52, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:356:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v47);
    }
  }
  v10 = sqlite3_reset(pStmt);
  sub_10008B9C4(v10, db);
  if (v10)
    goto LABEL_68;
  if (!v1)
    goto LABEL_37;
  sub_10008581C((uint64_t)&pStmt);

  if (v39 < 0)
    operator delete(v38[0]);
  v39 = 6;
  strcpy((char *)v38, "venues");
  sub_100085FFC(&v42, (uint64_t)&v40, 0, (uint64_t)&pStmt);
  sub_100085A00(&pStmt, 1, (uint64_t *)v38);
  v11 = 0;
  v12 = pStmt;
  for (j = pStmt; ; j = pStmt)
  {
    while (1)
    {
      v14 = sqlite3_step(j);
      v15 = v14;
      if (v14 != 100)
        break;
      if (sqlite3_column_type(v12, 0) != 5)
        v16 = sqlite3_column_int64(v12, 0) != 0;
      v11 = v16;
      j = pStmt;
    }
    if (v14 == 101)
      break;
    if (v14 == 19)
      goto LABEL_54;
    sub_10008B9C4(v14, db);
    if (v15)
      goto LABEL_58;
  }
  v17 = sqlite3_reset(pStmt);
  sub_10008B9C4(v17, db);
  if (v17)
  {
LABEL_68:
    v28 = __error();
    sub_10025FF8C(*v28, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v49.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v49, " w/ ");
    v29 = std::string::insert(&v49, 0, "Failed to execute query");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v48, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v48 = __dst;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v48;
    else
      v31 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      v32 = v48.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v50, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v52, &v51);
    v52.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v44);
    sub_1001F2298(&v52, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:356:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v44);
  }
  if (!v11)
  {
LABEL_37:
    if (qword_100417F08 == -1)
    {
      v18 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v18 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    v19 = v38;
    if (v39 < 0)
      v19 = (void **)v38[0];
    *(_DWORD *)buf = 136446210;
    v55 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#warning table %{public}s does not exist", buf, 0xCu);
LABEL_42:
    sub_10008581C((uint64_t)&pStmt);

    if (v39 < 0)
    {
      operator delete(v38[0]);
      v8 = 0;
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_44;
    }
    else
    {
      v8 = 0;
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_44;
    }
    goto LABEL_35;
  }
  sub_10008581C((uint64_t)&pStmt);

  if (v39 < 0)
  {
    operator delete(v38[0]);
    v8 = 1;
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_44;
LABEL_35:
    operator delete(v40);
    sub_1000C693C(&v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_16;
    return v8;
  }
  v8 = 1;
  if (SHIBYTE(v41) < 0)
    goto LABEL_35;
LABEL_44:
  sub_1000C693C(&v42);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1001E580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *a76;
  char a77;
  std::runtime_error a78;
  char a79;
  std::runtime_error *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;

  std::runtime_error::~runtime_error(v79);
  if (a46 < 0)
  {
    operator delete(__p);
    if ((a39 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a39 & 0x80000000) == 0)
  {
LABEL_3:
    if (a59 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a34);
  if (a59 < 0)
  {
LABEL_4:
    operator delete(a54);
    if ((a52 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a52 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v81 - 208) = v80;
    if (*(char *)(v81 - 177) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a47);
  *(_QWORD *)(v81 - 208) = v80;
  if (*(char *)(v81 - 177) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v81 - 200));
    if ((a65 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a65 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v81 - 160) = &off_1003EDD90;
    v83 = *(_QWORD *)(v81 - 152);
    if (!v83)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a60);
  *(_QWORD *)(v81 - 160) = &off_1003EDD90;
  v83 = *(_QWORD *)(v81 - 152);
  if (!v83)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83))
    *(_QWORD *)(v81 - 152) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v81 - 176));
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v81 - 248));
  if (a79 < 0)
    operator delete(a78.__vftable);
  if (a73 < 0)
    operator delete(a72);
  if (a77 < 0)
    operator delete(a76);
  if (a75 < 0)
    operator delete(a74);
  __cxa_free_exception(v79);
  if (*(char *)(v81 - 209) < 0)
    operator delete(*(void **)(v81 - 232));
  sub_1001E5DA8((uint64_t)&a9);
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  sub_1000C693C(&a24);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E5DA8(uint64_t a1)
{
  sub_10008581C(a1);

  return a1;
}

void sub_1001E5DD8(char *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v4;
  int v5;
  size_t size;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *p_p;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string __p;
  std::string __dst;
  std::string v19;
  std::string v20;

  *((_BYTE *)&v20.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v20, "DbVersion(status=");
  v4 = *a1;
  if (v4 < 3)
    std::string::append(&v20, (&off_1003FD608)[v4]);
  v5 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    size = v20.__r_.__value_.__l.__size_;
  v7 = size + 10;
  if (size + 10 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 10;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 10;
    if (!size)
      goto LABEL_17;
  }
  if (v5 >= 0)
    v11 = &v20;
  else
    v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
  memmove(p_dst, v11, size);
LABEL_17:
  strcpy((char *)p_dst + size, ", version=");
  std::to_string(&__p, *((_DWORD *)a1 + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  v14 = std::string::append(&__dst, (const std::string::value_type *)p_p, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v19, ")");
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
LABEL_30:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void sub_1001E5FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if ((a33 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001E608C(uint64_t a1)
{
  sub_10001C74C(a1);
  operator delete();
}

void sub_1001E60B0(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[2];
  unint64_t v12;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  sub_100260F20(a3, (uint64_t)__dst, *(sqlite3 ***)(a2 + 40), *(NSObject **)(a2 + 32));
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_1001E61A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001E61BC(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = a1;
  v4 = &v5;
  v5 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001E6334(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_10007ED24((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_1001E638C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001E63A0(uint64_t a1)
{
  sub_100089358(a1);

  return a1;
}

uint64_t sub_1001E63D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)(a1 + 136))
      *(_BYTE *)(a1 + 136) = 0;
    if (*(_BYTE *)(a1 + 120))
      *(_BYTE *)(a1 + 120) = 0;
    if (*(_BYTE *)(a1 + 96))
      *(_BYTE *)(a1 + 96) = 0;
    if (*(_BYTE *)(a1 + 72))
      *(_BYTE *)(a1 + 72) = 0;
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_16;
    }
    else
    {
LABEL_14:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_16:
        *(_BYTE *)a1 = 0;
        return a1;
      }
    }
    operator delete(*(void **)(a1 + 8));
    goto LABEL_16;
  }
  return a1;
}

uint64_t sub_1001E6480(uint64_t a1)
{
  sub_10008D030(a1);

  return a1;
}

void sub_1001E64B0(uint64_t *a1, const void **a2, const void **a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v10;
  int v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  std::string *p_p;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  time_t v27;
  int v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  int v44;
  std::string __p;
  std::string __dst;
  std::chrono::system_clock::time_point __t[2];
  std::string::size_type v48;

  if (!*a4)
    return;
  if (!*a5 || (v10 = sub_100050DB0((uint64_t)(a4 + 8)), v10 != sub_100050DB0((uint64_t)(a5 + 8))))
  {
    v11 = *((char *)a2 + 23);
    if (v11 >= 0)
      v12 = *((unsigned __int8 *)a2 + 23);
    else
      v12 = (size_t)a2[1];
    v13 = v12 + 1;
    if (v12 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_63:
      sub_1000CDE30();
    v14 = *a1;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (std::string *)operator new(v16 + 1);
      __dst.__r_.__value_.__l.__size_ = v12 + 1;
      __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
      if (!v12)
        goto LABEL_18;
    }
    if (v11 >= 0)
      v18 = a2;
    else
      v18 = *a2;
    memmove(p_dst, v18, v12);
LABEL_18:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 61;
    v19 = sub_100050DB0((uint64_t)(a4 + 8));
    std::to_string(&__p, v19);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v22 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v48 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__t[0].__d_.__rep_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = *(_QWORD *)(v14 + 8);
    if (v24 >= *(_QWORD *)(v14 + 16))
    {
      v26 = sub_1001697DC((void **)v14, (uint64_t)__t);
    }
    else
    {
      v25 = *(_OWORD *)&__t[0].__d_.__rep_;
      *(_QWORD *)(v24 + 16) = v48;
      *(_OWORD *)v24 = v25;
      __t[1].__d_.__rep_ = 0;
      v48 = 0;
      __t[0].__d_.__rep_ = 0;
      v26 = (char *)(v24 + 24);
    }
    *(_QWORD *)(v14 + 8) = v26;
    if (SHIBYTE(v48) < 0)
    {
      operator delete((void *)__t[0].__d_.__rep_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
LABEL_59:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_59;
  }
LABEL_30:
  __t[0].__d_.__rep_ = sub_100280E28((uint64_t)(a4 + 8));
  v27 = std::chrono::system_clock::to_time_t(__t);
  v28 = *((char *)a3 + 23);
  if (v28 >= 0)
    v29 = *((unsigned __int8 *)a3 + 23);
  else
    v29 = (size_t)a3[1];
  v30 = v29 + 1;
  if (v29 + 1 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_63;
  v31 = v27;
  v32 = *a1;
  if (v30 >= 0x17)
  {
    v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v34 = v30 | 7;
    v35 = v34 + 1;
    v33 = (std::string *)operator new(v34 + 1);
    __dst.__r_.__value_.__l.__size_ = v29 + 1;
    __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v33 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29 + 1;
    if (!v29)
      goto LABEL_44;
  }
  if (v28 >= 0)
    v36 = a3;
  else
    v36 = *a3;
  memmove(v33, v36, v29);
LABEL_44:
  *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v29) = 61;
  std::to_string(&__p, v31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &__p;
  else
    v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v38 = __p.__r_.__value_.__l.__size_;
  v39 = std::string::append(&__dst, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v48 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__t[0].__d_.__rep_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = *(_QWORD *)(v32 + 8);
  if (v41 >= *(_QWORD *)(v32 + 16))
  {
    v43 = sub_1001697DC((void **)v32, (uint64_t)__t);
    v44 = SHIBYTE(v48);
    *(_QWORD *)(v32 + 8) = v43;
    if (v44 < 0)
    {
      operator delete((void *)__t[0].__d_.__rep_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_61;
    }
    else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_61;
    }
  }
  else
  {
    v42 = *(_OWORD *)&__t[0].__d_.__rep_;
    *(_QWORD *)(v41 + 16) = v48;
    *(_OWORD *)v41 = v42;
    __t[1].__d_.__rep_ = 0;
    v48 = 0;
    __t[0].__d_.__rep_ = 0;
    *(_QWORD *)(v32 + 8) = v41 + 24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_61:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_62;
      return;
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_62:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1001E6824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1001E68BC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int buf;
  uint8_t buf_4[8];

  v8 = a2;
  if (qword_100417F08 == -1)
  {
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      v6 = a1;
      v7 = &v8;
      v5 = *(id *)(a1 + 32);
      operator new();
    }
  }
  buf = 134217984;
  *(_QWORD *)buf_4 = a2;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Requesting to remove resource %llu", (uint8_t *)&buf, 0xCu);
  goto LABEL_4;
}

void sub_1001E6AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v8;
  va_list va;

  va_start(va, a4);
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  sub_1001F6340((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1001E6B5C(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  NSObject *v6;
  NSObject *v8;
  int v10;
  unint64_t v11;

  sub_1001E6CFC(a1, a2, (uint64_t)a3);
  if (*a3)
  {
    if (qword_100417F08 == -1)
    {
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_6:
        sub_1001E8148(a1, (uint64_t)(a3 + 8));
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_6;
    }
    v10 = 134217984;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Found resource %llu - removing", (uint8_t *)&v10, 0xCu);
    goto LABEL_6;
  }
  if (qword_100417F08 == -1)
  {
    v8 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      return;
    goto LABEL_10;
  }
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v8 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
  {
LABEL_10:
    v10 = 134217984;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "WARNING: Attempt to remove local resource %llu failed because not found", (uint8_t *)&v10, 0xCu);
  }
}

void sub_1001E6CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E93AC(v1);
  _Unwind_Resume(a1);
}

void sub_1001E6CFC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  sqlite3_stmt *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  NSObject *v31;
  int *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  int *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v48;
  void *__p[2];
  std::string::size_type v50;
  std::string v51;
  std::string v52;
  _BYTE v53[24];
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::runtime_error v58;
  sqlite3_stmt *v59;
  std::string __dst;
  std::string v61;
  _BYTE v62[64];

  *(_BYTE *)a3 = 0;
  std::operator+<char>("SELECT ", &qword_100419F50);
  v6 = std::string::append(&__dst, " FROM ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v51, "venues");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v52, " WHERE ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v12 = (const std::string::value_type *)&qword_100419F80;
  else
    v12 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v13 = byte_100419F97;
  else
    v13 = *(_QWORD *)&byte_100419F88;
  v14 = std::string::append(&v61, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(_QWORD *)&v62[16] = *((_QWORD *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)v62 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append((std::string *)v62, " = ?;");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v50 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v62[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_40:
    operator delete(v51.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_41:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_39:
  operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_40;
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
LABEL_12:
  sub_100085FFC(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  sub_10020617C(&pStmt, 1, a2);
  v18 = pStmt;
  v59 = pStmt;
  while (1)
  {
    v19 = sqlite3_step(v18);
    v20 = v19;
    if (v19 == 100)
    {
      sub_100202A2C(&v59, (uint64_t)v62);
      v61 = *(std::string *)&v62[8];
      sub_10008930C(v62, (uint64_t)&v61);
      v21 = *(_QWORD *)v62;
      if (*(_BYTE *)a3)
      {
        v22 = *(_QWORD *)&v62[8];
        *(_OWORD *)v62 = 0uLL;
        v23 = *(std::__shared_weak_count **)(a3 + 16);
        *(_QWORD *)(a3 + 8) = v21;
        *(_QWORD *)(a3 + 16) = v22;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
        v26 = *(_QWORD *)&v62[8];
        *(_QWORD *)(a3 + 8) = *(_QWORD *)v62;
        *(_QWORD *)(a3 + 16) = v26;
        *(_OWORD *)v62 = 0uLL;
        *(_BYTE *)a3 = 1;
      }
      v27 = *(std::__shared_weak_count **)&v62[8];
      if (*(_QWORD *)&v62[8])
      {
        v28 = (unint64_t *)(*(_QWORD *)&v62[8] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      goto LABEL_15;
    }
    if (v19 == 101)
      break;
    if (v19 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v31 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_44;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v31 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_44:
          *(_WORD *)v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Query constraint violation", v62, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v52.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v52.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v57, &v52);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v51);
      sub_1001F9F6C((std::runtime_error *)&v57, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:848:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v51);
    }
    sub_10008B9C4(v19, db);
    if (v20)
    {
      v32 = __error();
      sub_10025FF8C(*v32, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v55.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v55, " w/ ");
      v33 = std::string::insert(&v55, 0, "Failed sqlite3_step");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v54, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v54 = __dst;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v54;
      else
        v35 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      else
        size = v54.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v56, (const std::string::value_type *)v35, size);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v58, &v57);
      v58.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v53);
      sub_1001F2298(&v58, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:848:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v53);
    }
LABEL_15:
    v18 = pStmt;
  }
  v30 = sqlite3_reset(pStmt);
  sub_10008B9C4(v30, db);
  if (v30)
  {
    v39 = __error();
    sub_10025FF8C(*v39, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v55.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v55, " w/ ");
    v40 = std::string::insert(&v55, 0, "Failed to execute query");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v54, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v54 = __dst;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v54;
    else
      v42 = (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    else
      v43 = v54.__r_.__value_.__l.__size_;
    v44 = std::string::append(&v56, (const std::string::value_type *)v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v58, &v57);
    v58.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v53);
    sub_1001F2298(&v58, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:848:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v53);
  }
  sub_10008581C((uint64_t)&pStmt);

  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
}

void sub_1001E7AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  std::runtime_error a73;
  char a74;
  uint64_t v74;
  std::runtime_error *v75;
  uint64_t v76;
  uint64_t v78;

  std::runtime_error::~runtime_error(v75);
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a24 & 0x80000000) == 0)
  {
LABEL_3:
    if (a45 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a19);
  if (a45 < 0)
  {
LABEL_4:
    operator delete(a40);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a38 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v76 - 208) = off_1003FC7C0;
    if (*(char *)(v76 - 177) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  *(_QWORD *)(v76 - 208) = off_1003FC7C0;
  if (*(char *)(v76 - 177) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v76 - 200));
    if ((a51 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v76 - 160) = &off_1003EDD90;
    v78 = *(_QWORD *)(v76 - 152);
    if (!v78)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a46);
  *(_QWORD *)(v76 - 160) = &off_1003EDD90;
  v78 = *(_QWORD *)(v76 - 152);
  if (!v78)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78))
    *(_QWORD *)(v76 - 152) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 176));
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 256));
  if (a74 < 0)
    operator delete(a73.__vftable);
  if (a64 < 0)
    operator delete(a59);
  if (a72 < 0)
    operator delete(a71);
  if (a70 < 0)
    operator delete(a65);
  __cxa_free_exception(v75);
  if (*(char *)(v76 - 209) < 0)
    operator delete(*(void **)(v76 - 232));
  sub_1001E5DA8((uint64_t)&a10);
  if (a18 < 0)
    operator delete(a13);
  sub_1001E93AC(v74);
  _Unwind_Resume(a1);
}

void sub_1001E8148(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  int v15;
  int v16;
  int *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  NSObject *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  int *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v35;
  void *__p[2];
  std::string::size_type v37;
  std::string v38;
  std::string v39;
  _BYTE v40[24];
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::runtime_error v45;
  std::string __dst;
  std::string v47;
  std::string v48;

  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v38, "DELETE FROM ");
  v4 = std::string::append(&v38, "venues");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v39, " WHERE ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v8 = (const std::string::value_type *)&qword_100419F50;
  else
    v8 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v9 = byte_100419F67;
  else
    v9 = *(_QWORD *)&byte_100419F58;
  v10 = std::string::append(&v47, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v48, " = ?;");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v37 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_24:
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_11;
LABEL_25:
      operator delete(v38.__r_.__value_.__l.__data_);
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
LABEL_10:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_11:
  sub_1001E95F8(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  v14 = (uint64_t *)sub_100050DB0(a2);
  sub_100205B80(&pStmt, 1, v14);
  while (1)
  {
    do
    {
      v15 = sqlite3_step(pStmt);
      v16 = v15;
    }
    while (v15 == 100);
    if (v15 == 101)
      break;
    if (v15 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v21 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_28;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v21 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_28:
          LOWORD(v48.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v48, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v39.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v44, &v39);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v38);
      sub_1001F9F6C((std::runtime_error *)&v44, (uint64_t)"auto db::resources::statement<0, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:824:19) &&)::(anonymous class)::operator()() const [nCols = 0, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v38);
    }
    sub_10008B9C4(v15, db);
    if (v16)
    {
      v17 = __error();
      sub_10025FF8C(*v17, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v42.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v42, " w/ ");
      v18 = std::string::insert(&v42, 0, "Failed sqlite3_step");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v41, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v41 = __dst;
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v41;
      else
        v22 = (std::string *)v41.__r_.__value_.__r.__words[0];
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      else
        size = v41.__r_.__value_.__l.__size_;
      v24 = std::string::append(&v43, (const std::string::value_type *)v22, size);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v45, &v44);
      v45.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v40);
      sub_1001F2298(&v45, (uint64_t)"void db::resources::statement<0, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:824:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v40);
    }
  }
  v20 = sqlite3_reset(pStmt);
  sub_10008B9C4(v20, db);
  if (v20)
  {
    v26 = __error();
    sub_10025FF8C(*v26, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v42.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v42, " w/ ");
    v27 = std::string::insert(&v42, 0, "Failed to execute query");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v41, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v41 = __dst;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v41;
    else
      v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      v30 = v41.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v43, (const std::string::value_type *)v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v45, &v44);
    v45.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v40);
    sub_1001F2298(&v45, (uint64_t)"void db::resources::statement<0, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:824:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v40);
  }
  sub_10020599C((uint64_t)&pStmt);

  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
}

void sub_1001E8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  std::runtime_error *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;

  std::runtime_error::~runtime_error(v72);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_3:
    if (a45 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a20);
  if (a45 < 0)
  {
LABEL_4:
    operator delete(a40);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a38 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v74 - 192) = v73;
    if (*(char *)(v74 - 161) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  *(_QWORD *)(v74 - 192) = v73;
  if (*(char *)(v74 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v74 - 184));
    if ((a51 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v74 - 144) = &off_1003EDD90;
    v76 = *(_QWORD *)(v74 - 136);
    if (!v76)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a46);
  *(_QWORD *)(v74 - 144) = &off_1003EDD90;
  v76 = *(_QWORD *)(v74 - 136);
  if (!v76)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76))
    *(_QWORD *)(v74 - 136) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 160));
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 232));
  if (*(char *)(v74 - 233) < 0)
  {
    operator delete(*(void **)(v74 - 256));
    if (a64 < 0)
    {
LABEL_21:
      operator delete(a59);
      if ((a72 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if (a64 < 0)
  {
    goto LABEL_21;
  }
  if ((a72 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a70 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a71);
  if ((a70 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v72);
    if (*(char *)(v74 - 193) < 0)
      operator delete(*(void **)(v74 - 216));
    sub_1001E9B24((uint64_t)&a10);
    if (a18 < 0)
      operator delete(a13);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a65);
  goto LABEL_27;
}

uint64_t sub_1001E93AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)a1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_1001E9410(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001E958C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1001F5344((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_1001E95E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E95F8(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 0UL, nQueries = 1UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_1001E98FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001E9B24(v68);

            _Unwind_Resume(a1);
          }
          sub_1001E9B24(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_1001E9B24(uint64_t a1)
{
  sub_10020599C(a1);

  return a1;
}

void sub_1001E9B54(uint64_t a1)
{
  dispatch_block_t v2;
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E9BD0;
  block[3] = &unk_1003FC4B0;
  block[4] = a1;
  v2 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_BACKGROUND, 0, block);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 32), v2);

}

void sub_1001E9BD0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_10008E514(*(sqlite3 ***)(v1 + 40), "PRAGMA incremental_vacuum;", "Failed to execute incremental vacuum");
  sub_1002608AC(*(sqlite3 ***)(v1 + 40));
}

void sub_1001E9C08(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v2 = a1;
  v1 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001E9D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  va_list va;

  va_start(va, a8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  sub_1001F6AB0((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1001E9DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001E9DE4(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  std::__shared_weak_count *v2;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v3;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v4;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  int v64;
  int v65;
  sqlite3_stmt *v66;
  int v67;
  int v68;
  char v69;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char v71;
  time_t v72;
  char v73;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v74;
  char v75;
  time_t v76;
  int v77;
  time_t v78;
  int v79;
  time_t v80;
  int v81;
  NSObject *v82;
  int v83;
  std::__shared_weak_count *size;
  unint64_t *v85;
  unint64_t v86;
  int64x2_t *v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  int64x2_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  __int128 v95;
  NSObject *v96;
  uint64_t v97;
  std::string::size_type v98;
  char **v99;
  char *v100;
  int v101;
  int v102;
  int v103;
  unint64_t *v104;
  unint64_t v105;
  int v106;
  NSObject *v107;
  NSObject *v108;
  int *v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  int *v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  __int128 __p;
  std::string::size_type v132;
  std::string v133;
  std::string v134;
  std::string __dst;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  _QWORD v142[3];
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  int v150;
  char v151;
  __int128 v152;
  char v153;
  __int128 v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;

  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  std::operator+<char>("SELECT ", &qword_100419F80);
  v6 = std::string::append(&v124, ", ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F7F >= 0)
    v8 = (const std::string::value_type *)&qword_100419F68;
  else
    v8 = (const std::string::value_type *)qword_100419F68;
  if (byte_100419F7F >= 0)
    v9 = byte_100419F7F;
  else
    v9 = *(_QWORD *)&byte_100419F70;
  v10 = std::string::append(&v125, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v126, ", ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v14 = (const std::string::value_type *)&qword_100419F50;
  else
    v14 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v15 = byte_100419F67;
  else
    v15 = *(_QWORD *)&byte_100419F58;
  v16 = std::string::append(&v127, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v128, ", ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A00F >= 0)
    v20 = (const std::string::value_type *)&qword_100419FF8;
  else
    v20 = (const std::string::value_type *)qword_100419FF8;
  if (byte_10041A00F >= 0)
    v21 = byte_10041A00F;
  else
    v21 = unk_10041A000;
  v22 = std::string::append(&v129, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v130, ", ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FC7 >= 0)
    v26 = (const std::string::value_type *)&xmmword_100419FB0;
  else
    v26 = (const std::string::value_type *)xmmword_100419FB0;
  if (byte_100419FC7 >= 0)
    v27 = byte_100419FC7;
  else
    v27 = *((_QWORD *)&xmmword_100419FB0 + 1);
  v28 = std::string::append(&v133, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v134, ", ");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A027 >= 0)
    v32 = (const std::string::value_type *)&xmmword_10041A010;
  else
    v32 = (const std::string::value_type *)xmmword_10041A010;
  if (byte_10041A027 >= 0)
    v33 = byte_10041A027;
  else
    v33 = *((_QWORD *)&xmmword_10041A010 + 1);
  v34 = std::string::append(&v138, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v139, ", ");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v140.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FDF >= 0)
    v38 = (const std::string::value_type *)&qword_100419FC8;
  else
    v38 = (const std::string::value_type *)qword_100419FC8;
  if (byte_100419FDF >= 0)
    v39 = byte_100419FDF;
  else
    v39 = *(_QWORD *)&dword_100419FD0;
  v40 = std::string::append(&v140, v38, v39);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v143, ", ");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FF7 >= 0)
    v44 = (const std::string::value_type *)&qword_100419FE0;
  else
    v44 = (const std::string::value_type *)qword_100419FE0;
  if (byte_100419FF7 >= 0)
    v45 = byte_100419FF7;
  else
    v45 = qword_100419FE8;
  v46 = std::string::append(&v144, v44, v45);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v145.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v145, ", ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v50 = (const std::string::value_type *)&qword_10041A028;
  else
    v50 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v51 = byte_10041A03F;
  else
    v51 = qword_10041A030;
  v52 = std::string::append(&__dst, v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v136, ", ");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FAF >= 0)
    v56 = (const std::string::value_type *)&qword_100419F98;
  else
    v56 = (const std::string::value_type *)qword_100419F98;
  if (byte_100419FAF >= 0)
    v57 = byte_100419FAF;
  else
    v57 = unk_100419FA0;
  v58 = std::string::append(&v137, v56, v57);
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v141, " FROM ");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&v146, "venues");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v132 = v62->__r_.__value_.__r.__words[2];
  __p = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v146.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_57:
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_58;
      goto LABEL_197;
    }
  }
  else if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v141.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_58:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_198;
  }
LABEL_197:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_59:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_199;
  }
LABEL_198:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_200;
  }
LABEL_199:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_201;
  }
LABEL_200:
  operator delete(v145.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_202;
  }
LABEL_201:
  operator delete(v144.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_203;
  }
LABEL_202:
  operator delete(v143.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_204;
  }
LABEL_203:
  operator delete(v140.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_205;
  }
LABEL_204:
  operator delete(v139.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_206;
  }
LABEL_205:
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_207;
  }
LABEL_206:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_208;
  }
LABEL_207:
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_209;
  }
LABEL_208:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_210;
  }
LABEL_209:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_211;
  }
LABEL_210:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_212;
  }
LABEL_211:
  operator delete(v127.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_213:
    operator delete(v125.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_75;
LABEL_214:
    operator delete(v124.__r_.__value_.__l.__data_);
    goto LABEL_75;
  }
LABEL_212:
  operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_213;
LABEL_74:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_214;
LABEL_75:
  sub_1001EC1A4(*(sqlite3 ***)(a1 + 40), (uint64_t)&__p, 0, (uint64_t)&v130);
  v64 = 0;
  v65 = 0;
  v66 = (sqlite3_stmt *)v130.__r_.__value_.__r.__words[0];
  v126.__r_.__value_.__r.__words[0] = v130.__r_.__value_.__r.__words[0];
  while (1)
  {
    v67 = sqlite3_step(v66);
    v68 = v67;
    if (v67 == 100)
    {
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 4) == 5)
      {
        v69 = 0;
      }
      else
      {
        v2 = (std::__shared_weak_count *)sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 4);
        v69 = 1;
      }
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 3) == 5)
      {
        v71 = 0;
      }
      else
      {
        sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 3);
        v72 = sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 3);
        rep = std::chrono::system_clock::from_time_t(v72).__d_.__rep_;
        v71 = 1;
      }
      sub_100206AA4(&v137, v69, (uint64_t)v2, v71, rep);
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 6) == 5)
      {
        v73 = 0;
      }
      else
      {
        v2 = (std::__shared_weak_count *)sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 6);
        v73 = 1;
      }
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 5) == 5)
      {
        v75 = 0;
      }
      else
      {
        sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 5);
        v76 = sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 5);
        v74 = std::chrono::system_clock::from_time_t(v76).__d_.__rep_;
        v75 = 1;
      }
      sub_100206AA4(&v136, v73, (uint64_t)v2, v75, v74);
      v77 = sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 7);
      if (v77 != 5)
      {
        sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 7);
        v78 = sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 7);
        v3 = std::chrono::system_clock::from_time_t(v78).__d_.__rep_;
      }
      v79 = sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 8);
      if (v79 != 5)
      {
        sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 8);
        v80 = sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 8);
        v4 = std::chrono::system_clock::from_time_t(v80).__d_.__rep_;
      }
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 9) == 5)
        v81 = 0;
      else
        v81 = sqlite3_column_int((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 9);
      if (sqlite3_column_type((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 0) != 5)
        v2 = (std::__shared_weak_count *)sqlite3_column_int64((sqlite3_stmt *)v126.__r_.__value_.__l.__data_, 0);
      sub_1002056B0((sqlite3_stmt **)&v126, (uint64_t)&v141);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v141.__r_.__value_.__r.__words[1];
      __dst.__r_.__value_.__r.__words[2] = v142[0];
      sub_100206C14((sqlite3_stmt **)&v126, (uint64_t)&v141);
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = *(_OWORD *)&v141.__r_.__value_.__r.__words[1];
      v145.__r_.__value_.__r.__words[2] = v142[0];
      sub_10008930C(&v140, (uint64_t)&v145);
      if (v81 == 1)
      {
        v83 = 0;
        v144.__r_.__value_.__s.__data_[0] = 0;
        if (!v137.__r_.__value_.__s.__data_[0])
        {
LABEL_112:
          v143.__r_.__value_.__s.__data_[0] = 0;
          if (v136.__r_.__value_.__s.__data_[0])
          {
            *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = *(_OWORD *)&v136.__r_.__value_.__r.__words[1];
            v143.__r_.__value_.__s.__data_[0] = 1;
          }
          v139.__r_.__value_.__s.__data_[0] = 0;
          if (v77 != 5)
          {
            v139.__r_.__value_.__l.__size_ = v3;
            v139.__r_.__value_.__s.__data_[0] = 1;
          }
          v138.__r_.__value_.__s.__data_[0] = 0;
          if (v79 != 5)
          {
            v138.__r_.__value_.__l.__size_ = v4;
            v138.__r_.__value_.__s.__data_[0] = 1;
          }
          sub_100280E30((uint64_t)&v146, (uint64_t)v2, (uint64_t *)&__dst, &v140, v83, (unsigned __int8 *)&v144, (unsigned __int8 *)&v143, (unsigned __int8 *)&v139, (unsigned __int8 *)&v138);
          if (v138.__r_.__value_.__s.__data_[0])
            v138.__r_.__value_.__s.__data_[0] = 0;
          if (v139.__r_.__value_.__s.__data_[0])
            v139.__r_.__value_.__s.__data_[0] = 0;
          if (v143.__r_.__value_.__s.__data_[0])
            v143.__r_.__value_.__s.__data_[0] = 0;
          if (v144.__r_.__value_.__s.__data_[0])
            v144.__r_.__value_.__s.__data_[0] = 0;
          size = (std::__shared_weak_count *)v140.__r_.__value_.__l.__size_;
          if (!v140.__r_.__value_.__l.__size_)
            goto LABEL_130;
          v85 = (unint64_t *)(v140.__r_.__value_.__l.__size_ + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
            if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_131:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_132;
              goto LABEL_139;
            }
          }
          else
          {
LABEL_130:
            if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_131;
          }
          operator delete(v145.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_132:
            v87 = a2;
            v88 = a2->u64[1];
            if (v88 < a2[1].i64[0])
            {
LABEL_133:
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_10006CED8((_BYTE *)v88, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
              }
              else
              {
                v89 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
                *(_QWORD *)(v88 + 16) = *((_QWORD *)&v146.__r_.__value_.__l + 2);
                *(_OWORD *)v88 = v89;
              }
              *(_QWORD *)(v88 + 24) = v147;
              v92 = v148;
              *(_QWORD *)(v88 + 32) = v148;
              if (v92)
              {
                p_shared_owners = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(p_shared_owners);
                while (__stxr(v94 + 1, p_shared_owners));
              }
              v95 = v149;
              *(_DWORD *)(v88 + 56) = v150;
              *(_OWORD *)(v88 + 40) = v95;
              *(_BYTE *)(v88 + 64) = 0;
              if (v151)
              {
                *(_OWORD *)(v88 + 72) = v152;
                *(_BYTE *)(v88 + 64) = 1;
              }
              *(_BYTE *)(v88 + 88) = 0;
              v91 = a2;
              if (v153)
              {
                *(_OWORD *)(v88 + 96) = v154;
                *(_BYTE *)(v88 + 88) = 1;
              }
              *(_BYTE *)(v88 + 112) = 0;
              if (v155)
              {
                *(_QWORD *)(v88 + 120) = v156;
                *(_BYTE *)(v88 + 112) = 1;
              }
              *(_BYTE *)(v88 + 128) = 0;
              if (v157)
              {
                *(_QWORD *)(v88 + 136) = v158;
                *(_BYTE *)(v88 + 128) = 1;
              }
              v90 = v88 + 144;
              a2->i64[1] = v88 + 144;
              goto LABEL_154;
            }
LABEL_140:
            v90 = sub_100206D1C(v87, (uint64_t)&v146);
            v91 = a2;
LABEL_154:
            v91->i64[1] = v90;
            if (qword_100417F08 != -1)
              dispatch_once(&qword_100417F08, &stru_1003FC628);
            v96 = (id)qword_100417F10;
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
            {
              v97 = nullsub_10(&v146);
              if (*(char *)(v97 + 23) >= 0)
                v98 = v97;
              else
                v98 = *(_QWORD *)v97;
              v99 = (char **)sub_10004F6AC((uint64_t)&v146);
              v100 = sub_10004BE10(v99);
              if (sub_10008D00C((uint64_t)&v146) == 1)
                v101 = 82;
              else
                v101 = 73;
              sub_10008E4F4((uint64_t)&v146, (uint64_t)&v145);
              if (v145.__r_.__value_.__s.__data_[0])
              {
                sub_10008E4F4((uint64_t)&v146, (uint64_t)&v140);
                LODWORD(v141.__r_.__value_.__l.__data_) = 136381443;
                *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 4) = v98;
                WORD2(v141.__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v141.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v100;
                HIWORD(v141.__r_.__value_.__r.__words[2]) = 1026;
                LODWORD(v142[0]) = v101;
                WORD2(v142[0]) = 2050;
                *(_QWORD *)((char *)v142 + 6) = v140.__r_.__value_.__l.__size_;
              }
              else
              {
                LODWORD(v141.__r_.__value_.__l.__data_) = 136381443;
                *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 4) = v98;
                WORD2(v141.__r_.__value_.__r.__words[1]) = 2081;
                *(std::string::size_type *)((char *)&v141.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v100;
                HIWORD(v141.__r_.__value_.__r.__words[2]) = 1026;
                LODWORD(v142[0]) = v101;
                WORD2(v142[0]) = 2050;
                *(_QWORD *)((char *)v142 + 6) = -1;
              }
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "ResourceList, %{private}s, %{private}s, %{public}c, visit, %{public}lld ", (uint8_t *)&v141, 0x26u);
            }

            v102 = sub_10008D00C((uint64_t)&v146);
            if (v102 == 1)
              v103 = v65;
            else
              v103 = v64;
            if (v102 == 1)
              v65 = v103 + 1;
            else
              v64 = v103 + 1;
            if (v157)
              v157 = 0;
            if (v155)
              v155 = 0;
            if (v153)
              v153 = 0;
            if (v151)
              v151 = 0;
            v2 = v148;
            if (v148)
            {
              v104 = (unint64_t *)&v148->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
                std::__shared_weak_count::__release_weak(v2);
              }
            }
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v146.__r_.__value_.__l.__data_);
            goto LABEL_78;
          }
LABEL_139:
          operator delete(__dst.__r_.__value_.__l.__data_);
          v87 = a2;
          v88 = a2->u64[1];
          if (v88 < a2[1].i64[0])
            goto LABEL_133;
          goto LABEL_140;
        }
LABEL_111:
        *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
        v144.__r_.__value_.__s.__data_[0] = 1;
        goto LABEL_112;
      }
      if (v81 != 2)
      {
        if (qword_100417F08 == -1)
        {
          v82 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
            goto LABEL_110;
          goto LABEL_109;
        }
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v82 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        {
LABEL_109:
          LODWORD(v141.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v141.__r_.__value_.__r.__words[0]) = v81;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "location context is an unknown value, %d, will gracefully fail by assuming this is a regional tile. please file a radar", (uint8_t *)&v141, 8u);
        }
      }
LABEL_110:
      v83 = 1;
      v144.__r_.__value_.__s.__data_[0] = 0;
      if (!v137.__r_.__value_.__s.__data_[0])
        goto LABEL_112;
      goto LABEL_111;
    }
    if (v67 == 101)
      break;
    if (v67 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v108 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_219;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v108 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_219:
          LOWORD(v146.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v146, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v137.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v137.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v137.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v145, &v137);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v136);
      sub_1001F9F6C((std::runtime_error *)&v145, (uint64_t)"auto db::resources::statement<10, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:896:19) &&)::(anonymous class)::operator()() const [nCols = 10, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v136);
    }
    sub_10008B9C4(v67, (sqlite3 *)v130.__r_.__value_.__l.__size_);
    if (v68)
    {
      v109 = __error();
      sub_10025FF8C(*v109, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v143.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v143, " w/ ");
      v110 = std::string::insert(&v143, 0, "Failed sqlite3_step");
      v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v111;
      v110->__r_.__value_.__l.__size_ = 0;
      v110->__r_.__value_.__r.__words[2] = 0;
      v110->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v140, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v140 = __dst;
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = &v140;
      else
        v112 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      else
        v113 = v140.__r_.__value_.__l.__size_;
      v114 = std::string::append(&v144, (const std::string::value_type *)v112, v113);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v145.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error((std::runtime_error *)&v129, &v145);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
      sub_10018D04C((uint64_t)&v139);
      sub_1001F2298((std::runtime_error *)&v129, (uint64_t)"void db::resources::statement<10, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 10, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:896:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v139);
    }
LABEL_78:
    v66 = (sqlite3_stmt *)v130.__r_.__value_.__r.__words[0];
  }
  v106 = sqlite3_reset((sqlite3_stmt *)v130.__r_.__value_.__l.__data_);
  sub_10008B9C4(v106, (sqlite3 *)v130.__r_.__value_.__l.__size_);
  if (v106)
  {
    v116 = __error();
    sub_10025FF8C(*v116, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v143.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v143, " w/ ");
    v117 = std::string::insert(&v143, 0, "Failed to execute query");
    v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v140, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v140 = __dst;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v119 = &v140;
    else
      v119 = (std::string *)v140.__r_.__value_.__r.__words[0];
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v120 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    else
      v120 = v140.__r_.__value_.__l.__size_;
    v121 = std::string::append(&v144, (const std::string::value_type *)v119, v120);
    v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v122;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)&v129, &v145);
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
    sub_10018D04C((uint64_t)&v139);
    sub_1001F2298((std::runtime_error *)&v129, (uint64_t)"void db::resources::statement<10, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 10, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:896:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v139);
  }
  if (qword_100417F08 == -1)
  {
    v107 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_191;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v107 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
    {
LABEL_191:
      LODWORD(v146.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(v146.__r_.__value_.__r.__words[0]) = v64;
      LOWORD(v146.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v146.__r_.__value_.__r.__words[1] + 2) = v65;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "ResourceList, indoor, %{public}d, regional, %{public}d", (uint8_t *)&v146, 0xEu);
    }
  }
  sub_1002068C0((uint64_t)&v130);

  if (SHIBYTE(v132) < 0)
    operator delete((void *)__p);
}

void sub_1001EB784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,std::runtime_error a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a71;
  char a72;
  void *__p;
  char a74;
  void *a75;
  unint64_t v75;
  std::runtime_error *v76;
  uint64_t v77;
  uint64_t v79;
  void *v80;

  std::runtime_error::~runtime_error(v76);
  if (a74 < 0)
  {
    operator delete(__p);
    if ((a62 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a62 & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x20F]) < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a57);
  if (SLOBYTE(STACK[0x20F]) < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a69 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a69 & 0x80000000) == 0)
  {
LABEL_5:
    STACK[0x270] = v75;
    if (SLOBYTE(STACK[0x28F]) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a64);
  STACK[0x270] = v75;
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v77 - 240) = &off_1003EDD90;
    v79 = *(_QWORD *)(v77 - 232);
    if (!v79)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete((void *)STACK[0x210]);
  *(_QWORD *)(v77 - 240) = &off_1003EDD90;
  v79 = *(_QWORD *)(v77 - 232);
  if (!v79)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 32))(v79))
    *(_QWORD *)(v77 - 232) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v77 - 256));
  v80 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v80;
    operator delete(v80);
  }
  std::runtime_error::~runtime_error(&a43);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  __cxa_free_exception(v76);
  if (a72 < 0)
    operator delete(a71);
  sub_1001EC6D0((uint64_t)&a46);
  if (a55 < 0)
    operator delete(a50);
  STACK[0x2E0] = a23;
  sub_1002067A8((void ***)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void sub_1001EC1A4(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 10UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_1001EC4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001EC6D0(v68);

            _Unwind_Resume(a1);
          }
          sub_1001EC6D0(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_1001EC6D0(uint64_t a1)
{
  sub_1002068C0(a1);

  return a1;
}

void sub_1001EC700(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v2 = a1;
  v1 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001EC86C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1000D3C40((uint64_t *)(v4 - 40));

  _Unwind_Resume(a1);
}

void sub_1001EC8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1001EC8D8(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  BOOL v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *i;
  int v9;
  int v10;
  int v11;
  NSObject *v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  int *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v30;
  void *__p[2];
  std::string::size_type v32;
  uint64_t v33;
  std::string v34;
  _BYTE v35[24];
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::runtime_error v40;
  std::string __dst;
  std::string v42;
  std::string v43;

  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v42.__r_.__value_.__r.__words[1] = xmmword_1003825D0;
  strcpy(v42.__r_.__value_.__l.__data_, "SELECT EXISTS (SELECT 1 FROM ");
  v2 = std::string::append(&v42, "venues");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  v4 = std::string::append(&v43, ")");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v32 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_18:
    operator delete(v42.__r_.__value_.__l.__data_);
    goto LABEL_3;
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_3:
  sub_100032CE0(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  v6 = 0;
  v7 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    while (1)
    {
      v9 = sqlite3_step(i);
      v10 = v9;
      if (v9 != 100)
        break;
      if (sqlite3_column_type(v7, 0) != 5)
      {
        v6 = sqlite3_column_int(v7, 0) == 1;
        goto LABEL_12;
      }
      v6 = 0;
      i = pStmt;
    }
    if (v9 == 101)
      break;
    if (v9 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v13 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_21;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v13 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_21:
          LOWORD(v43.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v43, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v34.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v39, &v34);
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v33);
      sub_1001F9F6C((std::runtime_error *)&v39, (uint64_t)"auto db::resources::statement<1, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:955:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v33);
    }
    sub_10008B9C4(v9, db);
    if (v10)
    {
      v14 = __error();
      sub_10025FF8C(*v14, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v37, " w/ ");
      v15 = std::string::insert(&v37, 0, "Failed sqlite3_step");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v36, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v36 = __dst;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v36;
      else
        v17 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      v19 = std::string::append(&v38, (const std::string::value_type *)v17, size);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v40, &v39);
      v40.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v35);
      sub_1001F2298(&v40, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:955:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v35);
    }
LABEL_12:
    ;
  }
  v11 = sqlite3_reset(pStmt);
  sub_10008B9C4(v11, db);
  if (v11)
  {
    v21 = __error();
    sub_10025FF8C(*v21, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v37.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v37, " w/ ");
    v22 = std::string::insert(&v37, 0, "Failed to execute query");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v36, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v36 = __dst;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v36;
    else
      v24 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v25 = v36.__r_.__value_.__l.__size_;
    v26 = std::string::append(&v38, (const std::string::value_type *)v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v40, &v39);
    v40.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v35);
    sub_1001F2298(&v40, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:955:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v35);
  }
  sub_10003320C((uint64_t)&pStmt);

  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1001ED504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  std::runtime_error *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;

  std::runtime_error::~runtime_error(v72);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_3:
    if (a45 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a20);
  if (a45 < 0)
  {
LABEL_4:
    operator delete(a40);
    if ((a38 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a38 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v74 - 192) = v73;
    if (*(char *)(v74 - 161) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a33);
  *(_QWORD *)(v74 - 192) = v73;
  if (*(char *)(v74 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v74 - 184));
    if ((a51 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a51 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v74 - 144) = &off_1003EDD90;
    v76 = *(_QWORD *)(v74 - 136);
    if (!v76)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a46);
  *(_QWORD *)(v74 - 144) = &off_1003EDD90;
  v76 = *(_QWORD *)(v74 - 136);
  if (!v76)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76))
    *(_QWORD *)(v74 - 136) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 160));
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 232));
  if (*(char *)(v74 - 233) < 0)
  {
    operator delete(*(void **)(v74 - 256));
    if (a64 < 0)
    {
LABEL_21:
      operator delete(a59);
      if ((a72 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if (a64 < 0)
  {
    goto LABEL_21;
  }
  if ((a72 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a70 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a71);
  if ((a70 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v72);
    if (*(char *)(v74 - 193) < 0)
      operator delete(*(void **)(v74 - 216));
    sub_1001E48C8((uint64_t)&a10);
    if (a18 < 0)
      operator delete(a13);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a65);
  goto LABEL_27;
}

void sub_1001EDA78(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001EDBE8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_1001F7080((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_1001EDC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001EDC54(uint64_t a1@<X0>, unsigned int *a2@<X1>, char **a3@<X8>)
{
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  const std::string::value_type *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string *v97;
  __int128 v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  const std::string::value_type *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  const std::string::value_type *v111;
  std::string::size_type v112;
  std::string *v113;
  __int128 v114;
  char *v115;
  char *v116;
  sqlite3_stmt *v117;
  unsigned int *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  NSObject *v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  _BOOL4 v129;
  _BOOL4 v130;
  int v131;
  NSObject *v132;
  std::string *v133;
  std::string *v134;
  int v135;
  int v136;
  int v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  char *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  NSObject *v155;
  NSObject *v156;
  NSObject *v157;
  std::string *v158;
  void **v159;
  void *v160;
  void **v161;
  NSObject *v162;
  int *v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  std::string::size_type size;
  std::string *v168;
  __int128 v169;
  int *v170;
  std::string *v171;
  __int128 v172;
  std::string *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  char **v178;
  int v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD v184[5];
  int v185;
  _BYTE v186[32];
  int v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  std::string v202;
  std::string v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  std::string v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::string v215;
  void *__p[2];
  std::string::size_type v217;
  std::string v218;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  std::string v223;
  std::string v224;
  std::string v225;
  std::string v226;
  std::string __dst;
  std::string v228;
  std::string v229;
  _BYTE v230[34];
  __int16 v231;
  _BOOL4 v232;
  __int16 v233;
  _BOOL4 v234;
  char v235;

  *((_BYTE *)&v188.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v188, "SELECT ");
  if (byte_100419F67 >= 0)
    v5 = (const std::string::value_type *)&qword_100419F50;
  else
    v5 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v6 = byte_100419F67;
  else
    v6 = *(_QWORD *)&byte_100419F58;
  v7 = std::string::append(&v188, v5, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v189.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v189, ", ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v190.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F7F >= 0)
    v11 = (const std::string::value_type *)&qword_100419F68;
  else
    v11 = (const std::string::value_type *)qword_100419F68;
  if (byte_100419F7F >= 0)
    v12 = byte_100419F7F;
  else
    v12 = *(_QWORD *)&byte_100419F70;
  v13 = std::string::append(&v190, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v191.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v191, ", ");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v192.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FAF >= 0)
    v17 = (const std::string::value_type *)&qword_100419F98;
  else
    v17 = (const std::string::value_type *)qword_100419F98;
  if (byte_100419FAF >= 0)
    v18 = byte_100419FAF;
  else
    v18 = unk_100419FA0;
  v19 = std::string::append(&v192, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v193.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v193, ", ");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v194.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v194, "venues");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v195, ".");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v196.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v27 = (const std::string::value_type *)&qword_100419F80;
  else
    v27 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v28 = byte_100419F97;
  else
    v28 = *(_QWORD *)&byte_100419F88;
  v29 = std::string::append(&v196, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v197.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = std::string::append(&v197, ", LENGTH(");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v198.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = std::string::append(&v198, "tiles");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v199.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v199, ") ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v200.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v200, "FROM ");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v201.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v201, "venues");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v202.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v202, " LEFT OUTER JOIN ");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v203.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v203, "tile_data");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v204.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v204, " ON ");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v205.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v205, "venues");
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v206.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  v49 = std::string::append(&v206, ".");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v207.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v51 = (const std::string::value_type *)&qword_100419F80;
  else
    v51 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v52 = byte_100419F97;
  else
    v52 = *(_QWORD *)&byte_100419F88;
  v53 = std::string::append(&v207, v51, v52);
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v208.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  v55 = std::string::append(&v208, "=");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v209.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v209, "tile_data");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v210.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  v59 = std::string::append(&v210, ".");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v211.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v61 = (const std::string::value_type *)&qword_100419F80;
  else
    v61 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v62 = byte_100419F97;
  else
    v62 = *(_QWORD *)&byte_100419F88;
  v63 = std::string::append(&v211, v61, v62);
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  v65 = std::string::append(&v212, " ");
  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v213.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v67 = std::string::append(&v213, "WHERE (");
  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v214.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FC7 >= 0)
    v69 = (const std::string::value_type *)&xmmword_100419FB0;
  else
    v69 = (const std::string::value_type *)xmmword_100419FB0;
  if (byte_100419FC7 >= 0)
    v70 = byte_100419FC7;
  else
    v70 = *((_QWORD *)&xmmword_100419FB0 + 1);
  v71 = std::string::append(&v214, v69, v70);
  v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v215.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  v73 = std::string::append(&v215, " IS NOT NULL ");
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v218.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  v75 = std::string::append(&v218, "OR ");
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  v219.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FDF >= 0)
    v77 = (const std::string::value_type *)&qword_100419FC8;
  else
    v77 = (const std::string::value_type *)qword_100419FC8;
  if (byte_100419FDF >= 0)
    v78 = byte_100419FDF;
  else
    v78 = *(_QWORD *)&dword_100419FD0;
  v79 = std::string::append(&v219, v77, v78);
  v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v221.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  v81 = std::string::append(&v221, " IS NOT NULL) ");
  v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v222.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  v83 = std::string::append(&v222, "AND ");
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v223.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v85 = (const std::string::value_type *)&qword_10041A028;
  else
    v85 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v86 = byte_10041A03F;
  else
    v86 = qword_10041A030;
  v87 = std::string::append(&v223, v85, v86);
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v224.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v224, " IS NULL ");
  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v225.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  v91 = std::string::append(&v225, "ORDER BY ");
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v226.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FF7 >= 0)
    v93 = (const std::string::value_type *)&qword_100419FE0;
  else
    v93 = (const std::string::value_type *)qword_100419FE0;
  if (byte_100419FF7 >= 0)
    v94 = byte_100419FF7;
  else
    v94 = qword_100419FE8;
  v95 = std::string::append(&v226, v93, v94);
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  v97 = std::string::append(&__dst, " DESC, ");
  v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v229.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A027 >= 0)
    v99 = (const std::string::value_type *)&xmmword_10041A010;
  else
    v99 = (const std::string::value_type *)xmmword_10041A010;
  if (byte_10041A027 >= 0)
    v100 = byte_10041A027;
  else
    v100 = *((_QWORD *)&xmmword_10041A010 + 1);
  v101 = std::string::append(&v229, v99, v100);
  v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v220.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  v103 = std::string::append(&v220, " DESC, ");
  v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v228.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A00F >= 0)
    v105 = (const std::string::value_type *)&qword_100419FF8;
  else
    v105 = (const std::string::value_type *)qword_100419FF8;
  if (byte_10041A00F >= 0)
    v106 = byte_10041A00F;
  else
    v106 = unk_10041A000;
  v107 = std::string::append(&v228, v105, v106);
  v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
  *(_QWORD *)&v186[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
  *(_OWORD *)v186 = v108;
  v107->__r_.__value_.__l.__size_ = 0;
  v107->__r_.__value_.__r.__words[2] = 0;
  v107->__r_.__value_.__r.__words[0] = 0;
  v109 = std::string::append((std::string *)v186, " DESC, ");
  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  *(_QWORD *)&v230[16] = *((_QWORD *)&v109->__r_.__value_.__l + 2);
  *(_OWORD *)v230 = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F7F >= 0)
    v111 = (const std::string::value_type *)&qword_100419F68;
  else
    v111 = (const std::string::value_type *)qword_100419F68;
  if (byte_100419F7F >= 0)
    v112 = byte_100419F7F;
  else
    v112 = *(_QWORD *)&byte_100419F70;
  v113 = std::string::append((std::string *)v230, v111, v112);
  v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  v217 = v113->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  if ((v230[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v230);
    if ((v186[23] & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_82;
      goto LABEL_239;
    }
  }
  else if ((v186[23] & 0x80000000) == 0)
  {
    goto LABEL_81;
  }
  operator delete(*(void **)v186);
  if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(v220.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_240;
  }
LABEL_239:
  operator delete(v228.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v220.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    if ((SHIBYTE(v229.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_241;
  }
LABEL_240:
  operator delete(v220.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v229.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_242;
  }
LABEL_241:
  operator delete(v229.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_85:
    if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_243;
  }
LABEL_242:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_244;
  }
LABEL_243:
  operator delete(v226.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
    goto LABEL_245;
  }
LABEL_244:
  operator delete(v225.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v224.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_246;
  }
LABEL_245:
  operator delete(v224.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_247;
  }
LABEL_246:
  operator delete(v223.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_248;
  }
LABEL_247:
  operator delete(v222.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_249;
  }
LABEL_248:
  operator delete(v221.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
    goto LABEL_250;
  }
LABEL_249:
  operator delete(v219.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_251;
  }
LABEL_250:
  operator delete(v218.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_252;
  }
LABEL_251:
  operator delete(v215.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_95:
    if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_253;
  }
LABEL_252:
  operator delete(v214.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v213.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_254;
  }
LABEL_253:
  operator delete(v213.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v211.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_255;
  }
LABEL_254:
  operator delete(v212.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v211.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_99;
    goto LABEL_256;
  }
LABEL_255:
  operator delete(v211.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v210.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_99:
    if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_257;
  }
LABEL_256:
  operator delete(v210.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_101;
    goto LABEL_258;
  }
LABEL_257:
  operator delete(v209.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_102;
    goto LABEL_259;
  }
LABEL_258:
  operator delete(v208.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_102:
    if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_103;
    goto LABEL_260;
  }
LABEL_259:
  operator delete(v207.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v206.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_261;
  }
LABEL_260:
  operator delete(v206.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_105;
    goto LABEL_262;
  }
LABEL_261:
  operator delete(v205.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v204.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_106;
    goto LABEL_263;
  }
LABEL_262:
  operator delete(v204.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_264;
  }
LABEL_263:
  operator delete(v203.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v202.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_107:
    if ((SHIBYTE(v201.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_108;
    goto LABEL_265;
  }
LABEL_264:
  operator delete(v202.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v201.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_108:
    if ((SHIBYTE(v200.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_109;
    goto LABEL_266;
  }
LABEL_265:
  operator delete(v201.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v200.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_109:
    if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_110;
    goto LABEL_267;
  }
LABEL_266:
  operator delete(v200.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v199.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_110:
    if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_111;
    goto LABEL_268;
  }
LABEL_267:
  operator delete(v199.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_111:
    if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_269;
  }
LABEL_268:
  operator delete(v198.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_112:
    if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_270;
  }
LABEL_269:
  operator delete(v197.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_113:
    if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
    goto LABEL_271;
  }
LABEL_270:
  operator delete(v196.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_114:
    if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_272;
  }
LABEL_271:
  operator delete(v195.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_115:
    if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_273;
  }
LABEL_272:
  operator delete(v194.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_116:
    if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_117;
    goto LABEL_274;
  }
LABEL_273:
  operator delete(v193.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_117:
    if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_118;
    goto LABEL_275;
  }
LABEL_274:
  operator delete(v192.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_118:
    if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_119;
    goto LABEL_276;
  }
LABEL_275:
  operator delete(v191.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v190.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_119:
    if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_120;
LABEL_277:
    operator delete(v189.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_121;
LABEL_278:
    operator delete(v188.__r_.__value_.__l.__data_);
    goto LABEL_121;
  }
LABEL_276:
  operator delete(v190.__r_.__value_.__l.__data_);
  if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_277;
LABEL_120:
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_278;
LABEL_121:
  *a3 = 0;
  a3[1] = 0;
  v178 = a3;
  a3[2] = 0;
  memset(v186, 0, sizeof(v186));
  v187 = 1065353216;
  sub_1001F08DC(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&v215);
  v115 = 0;
  v116 = 0;
  v180 = 0;
  v181 = 0;
  v179 = 0;
  v182 = 0;
  v183 = 0;
  v117 = (sqlite3_stmt *)v215.__r_.__value_.__r.__words[0];
  v211.__r_.__value_.__r.__words[0] = v215.__r_.__value_.__r.__words[0];
  v118 = a2;
  while (1)
  {
    v119 = sqlite3_step(v117);
    v120 = v119;
    if (v119 != 100)
      break;
    sub_100202A2C((sqlite3_stmt **)&v211, (uint64_t)v230);
    v228 = *(std::string *)&v230[8];
    sub_1002056B0((sqlite3_stmt **)&v211, (uint64_t)v230);
    v220 = *(std::string *)&v230[8];
    if (sqlite3_column_type((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 2) == 5)
    {
      v121 = 0;
      goto LABEL_133;
    }
    v122 = sqlite3_column_int((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 2);
    v121 = v122;
    if (v122 != 1)
    {
      if (v122 != 2)
      {
LABEL_133:
        if (qword_100417F08 == -1)
        {
          v123 = qword_100417F10;
          if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
            goto LABEL_135;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v123 = qword_100417F10;
          if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          {
LABEL_135:
            *(_DWORD *)v230 = 67109120;
            *(_DWORD *)&v230[4] = v121;
            _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_ERROR, "location context is an unknown value, %d, will gracefully fail by assuming this is a regional tile. please file a radar", v230, 8u);
          }
        }
      }
      v124 = 0;
      goto LABEL_137;
    }
    v124 = 1;
LABEL_137:
    if (sqlite3_column_type((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 3) == 5)
      v125 = 0;
    else
      v125 = sqlite3_column_int((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 3);
    if (sqlite3_column_type((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 4) == 5)
      v126 = 0;
    else
      v126 = ((uint64_t)sqlite3_column_int((sqlite3_stmt *)v211.__r_.__value_.__l.__data_, 4) << 32) | 1;
    if (v124)
      v127 = 73;
    else
      v127 = 82;
    if ((_BYTE)v126)
      v128 = HIDWORD(v126);
    else
      v128 = 0;
    if (v124)
    {
      v129 = (int)v183 >= (int)sub_1000C27A0(v118);
      HIDWORD(v182) += v128;
      LODWORD(v183) = v183 + 1;
      v130 = SHIDWORD(v182) > (int)sub_1000C2550((uint64_t)v118);
      if (v129)
        goto LABEL_154;
    }
    else
    {
      v129 = SHIDWORD(v183) >= (int)sub_1000C2678((uint64_t)v118);
      LODWORD(v182) = v128 + v182;
      v130 = (int)v182 > (int)sub_1000C2428((uint64_t)v118);
      ++HIDWORD(v183);
      if (v129)
        goto LABEL_154;
    }
    if (!v130)
      goto LABEL_155;
LABEL_154:
    if (sub_100207334(v186, (uint64_t)&v220))
    {
LABEL_155:
      sub_1000FCAFC((uint64_t)v186, (uint64_t)&v220, (uint64_t)&v220);
      v131 = 0;
      if (qword_100417EF8 == -1)
        goto LABEL_156;
      goto LABEL_193;
    }
    v135 = HIDWORD(v180);
    v136 = v179;
    if (v124)
      v137 = v179;
    else
      v137 = HIDWORD(v180);
    if (v124)
      v136 = v137 + 1;
    v179 = v136;
    if (!v124)
      v135 = v137 + 1;
    HIDWORD(v180) = v135;
    if (v181 < v116)
    {
      *(_QWORD *)v181 = v125;
      v138 = v181 + 8;
      goto LABEL_192;
    }
    v139 = (v181 - v115) >> 3;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 61)
      sub_1000D02C0();
    if ((v116 - v115) >> 2 > v140)
      v140 = (v116 - v115) >> 2;
    if ((unint64_t)(v116 - v115) >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v140;
    if (v141)
    {
      if (v141 >> 61)
        sub_1000CDEB8();
      v142 = v141;
      v143 = operator new(8 * v141);
      v141 = v142;
    }
    else
    {
      v143 = 0;
    }
    v144 = &v143[8 * v139];
    *(_QWORD *)v144 = v125;
    v138 = v144 + 8;
    if (v181 != v115)
    {
      v145 = v181 - 8 - v115;
      if (v145 >= 0x168)
      {
        if (&v143[v181 - v115 - 8 - (v145 & 0xFFFFFFFFFFFFFFF8)] > &v143[v181 - v115 - 8])
        {
          v146 = v181;
        }
        else if (&v181[-(v145 & 0xFFFFFFFFFFFFFFF8) - 8] > v181 - 8)
        {
          v146 = v181;
        }
        else if ((unint64_t)(v115 - v143) >= 0x20)
        {
          v148 = (v145 >> 3) + 1;
          v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
          v146 = &v181[-v149];
          v144 -= v149;
          v150 = &v143[8 * v139 - 16];
          v151 = v181 - 16;
          v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v153 = *(_OWORD *)v151;
            *(v150 - 1) = *((_OWORD *)v151 - 1);
            *v150 = v153;
            v150 -= 2;
            v151 -= 32;
            v152 -= 4;
          }
          while (v152);
          if (v148 == (v148 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_189;
        }
        else
        {
          v146 = v181;
        }
      }
      else
      {
        v146 = v181;
      }
      do
      {
        v147 = *((_QWORD *)v146 - 1);
        v146 -= 8;
        *((_QWORD *)v144 - 1) = v147;
        v144 -= 8;
      }
      while (v146 != v115);
    }
LABEL_189:
    v116 = &v143[8 * v141];
    *v178 = v144;
    v178[1] = v138;
    v178[2] = v116;
    if (v115)
      operator delete(v115);
    v115 = v144;
    v118 = a2;
LABEL_192:
    LODWORD(v180) = v180 + (v124 ^ 1);
    v178[1] = v138;
    v131 = 1;
    v181 = v138;
    if (qword_100417EF8 == -1)
    {
LABEL_156:
      v132 = qword_100417F00;
      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
        goto LABEL_157;
      goto LABEL_162;
    }
LABEL_193:
    dispatch_once(&qword_100417EF8, &stru_1003FCD00);
    v132 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_157:
      v133 = &v220;
      if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v133 = (std::string *)v220.__r_.__value_.__r.__words[0];
      v134 = &v228;
      if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v134 = (std::string *)v228.__r_.__value_.__r.__words[0];
      *(_DWORD *)v230 = 67241475;
      *(_DWORD *)&v230[4] = v131;
      *(_WORD *)&v230[8] = 2081;
      *(_QWORD *)&v230[10] = v133;
      *(_WORD *)&v230[18] = 2081;
      *(_QWORD *)&v230[20] = v134;
      *(_WORD *)&v230[28] = 1026;
      *(_DWORD *)&v230[30] = v127;
      v231 = 1026;
      v232 = v129;
      v233 = 1026;
      v234 = v130;
      _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, limits, exec, %{public}d, %{private}s, %{private}s, %{public}c, untouched, -1, reasons, %{public}d, %{public}d", v230, 0x2Eu);
    }
LABEL_162:
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v220.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_123;
    }
    else if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_123;
    }
    operator delete(v228.__r_.__value_.__l.__data_);
LABEL_123:
    v117 = (sqlite3_stmt *)v215.__r_.__value_.__r.__words[0];
  }
  if (v119 != 101)
  {
    if (v119 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v162 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_285;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v162 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_285:
          *(_WORD *)v230 = 0;
          _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_INFO, "Query constraint violation", v230, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v220.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v220.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v220.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v226, &v220);
      v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v229);
      sub_1001F9F6C((std::runtime_error *)&v226, (uint64_t)"auto db::resources::statement<5, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1009:19) &&)::(anonymous class)::operator()() const [nCols = 5, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v229);
    }
    sub_10008B9C4(v119, (sqlite3 *)v215.__r_.__value_.__l.__size_);
    if (v120)
    {
      v163 = __error();
      sub_10025FF8C(*v163, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v224.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v224, " w/ ");
      v164 = std::string::insert(&v224, 0, "Failed sqlite3_step");
      v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
      v225.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v165;
      v164->__r_.__value_.__l.__size_ = 0;
      v164->__r_.__value_.__r.__words[2] = 0;
      v164->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v223, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v223 = __dst;
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v166 = &v223;
      else
        v166 = (std::string *)v223.__r_.__value_.__r.__words[0];
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v223.__r_.__value_.__r.__words[2]);
      else
        size = v223.__r_.__value_.__l.__size_;
      v168 = std::string::append(&v225, (const std::string::value_type *)v166, size);
      v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
      v226.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v169;
      v168->__r_.__value_.__l.__size_ = 0;
      v168->__r_.__value_.__r.__words[2] = 0;
      v168->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error((std::runtime_error *)&v214, &v226);
      v214.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
      sub_10018D04C((uint64_t)&v222);
      sub_1001F2298((std::runtime_error *)&v214, (uint64_t)"void db::resources::statement<5, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 5, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1009:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v222);
    }
    goto LABEL_123;
  }
  v154 = sqlite3_reset((sqlite3_stmt *)v215.__r_.__value_.__l.__data_);
  sub_10008B9C4(v154, (sqlite3 *)v215.__r_.__value_.__l.__size_);
  if (v154)
  {
    v170 = __error();
    sub_10025FF8C(*v170, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v224.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v224, " w/ ");
    v171 = std::string::insert(&v224, 0, "Failed to execute query");
    v172 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
    v225.__r_.__value_.__r.__words[2] = v171->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v172;
    v171->__r_.__value_.__l.__size_ = 0;
    v171->__r_.__value_.__r.__words[2] = 0;
    v171->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v223, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v223 = __dst;
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v173 = &v223;
    else
      v173 = (std::string *)v223.__r_.__value_.__r.__words[0];
    if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v174 = HIBYTE(v223.__r_.__value_.__r.__words[2]);
    else
      v174 = v223.__r_.__value_.__l.__size_;
    v175 = std::string::append(&v225, (const std::string::value_type *)v173, v174);
    v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
    v226.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v176;
    v175->__r_.__value_.__l.__size_ = 0;
    v175->__r_.__value_.__r.__words[2] = 0;
    v175->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)&v214, &v226);
    v214.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
    sub_10018D04C((uint64_t)&v222);
    sub_1001F2298((std::runtime_error *)&v214, (uint64_t)"void db::resources::statement<5, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 5, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1009:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v222);
  }
  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003FCD00);
  v155 = (id)qword_100417F00;
  if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v230 = 67240960;
    *(_DWORD *)&v230[4] = v179;
    *(_WORD *)&v230[8] = 1026;
    *(_DWORD *)&v230[10] = v183;
    *(_WORD *)&v230[14] = 1026;
    *(_DWORD *)&v230[16] = v180;
    *(_WORD *)&v230[20] = 1026;
    *(_DWORD *)&v230[22] = HIDWORD(v183);
    _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, limits, result, indoor, %{public}d, %{public}d, regional, %{public}d, %{public}d", v230, 0x1Au);
  }

  if ((_DWORD)v180)
  {
    if (qword_100417EF8 != -1)
      dispatch_once(&qword_100417EF8, &stru_1003FCD00);
    v156 = (id)qword_100417F00;
    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v230 = 67240704;
      *(_DWORD *)&v230[4] = v180;
      *(_WORD *)&v230[8] = 1026;
      *(_DWORD *)&v230[10] = HIDWORD(v180);
      *(_WORD *)&v230[14] = 1026;
      *(_DWORD *)&v230[16] = 100 * HIDWORD(v180) / (int)v180;
      _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_DEFAULT, "Wifi2Metric, eviction, %{public}d, untouched, %{public}d, pct, %{public}d, trigger, limits", v230, 0x14u);
    }

    v184[0] = _NSConcreteStackBlock;
    v184[1] = 3221225472;
    v184[2] = sub_1001F0E08;
    v184[3] = &unk_1003FC4D0;
    v184[4] = v180;
    v185 = 100 * HIDWORD(v180) / (int)v180;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifi2.eviction"), v184);
  }
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v157 = (id)qword_100417F10;
  if (!os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
    goto LABEL_228;
  *((_BYTE *)&v220.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&v220, ", ");
  sub_1002D2488((char *)&v220, (uint64_t)v230);
  __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)&v186[16];
  v226.__r_.__value_.__r.__words[0] = 0;
  sub_100207560((uint64_t)v230, (uint64_t **)&__dst, (uint64_t **)&v226);
  if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &v228;
  else
    v158 = (std::string *)v228.__r_.__value_.__r.__words[0];
  LODWORD(v229.__r_.__value_.__l.__data_) = 136380675;
  *(std::string::size_type *)((char *)v229.__r_.__value_.__r.__words + 4) = (std::string::size_type)v158;
  _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEBUG, "Relevant Group ids which were not considered for deletion, %{private}s", (uint8_t *)&v229, 0xCu);
  if ((SHIBYTE(v228.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v235 & 0x80000000) == 0)
      goto LABEL_226;
LABEL_280:
    operator delete(*(void **)&v230[24]);
    if ((v230[23] & 0x80000000) != 0)
      goto LABEL_281;
LABEL_227:
    if ((SHIBYTE(v220.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
LABEL_282:
    operator delete(v220.__r_.__value_.__l.__data_);
    goto LABEL_228;
  }
  operator delete(v228.__r_.__value_.__l.__data_);
  if (v235 < 0)
    goto LABEL_280;
LABEL_226:
  if ((v230[23] & 0x80000000) == 0)
    goto LABEL_227;
LABEL_281:
  operator delete(*(void **)v230);
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_282;
LABEL_228:

  sub_100207150((uint64_t)&v215);
  v159 = *(void ***)&v186[16];
  if (*(_QWORD *)&v186[16])
  {
    do
    {
      v161 = (void **)*v159;
      if (*((char *)v159 + 39) < 0)
        operator delete(v159[2]);
      operator delete(v159);
      v159 = v161;
    }
    while (v161);
  }
  v160 = *(void **)v186;
  *(_QWORD *)v186 = 0;
  if (v160)
    operator delete(v160);
  if (SHIBYTE(v217) < 0)
    operator delete(__p[0]);
}

void sub_1001EFC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  std::runtime_error *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  void *v35;

  std::runtime_error::~runtime_error(v28);
  *(_QWORD *)(v31 - 208) = v30;
  if (*(char *)(v31 - 177) < 0)
  {
    operator delete(*(void **)(v31 - 200));
    if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_3:
    STACK[0x490] = v29;
    if (SLOBYTE(STACK[0x4AF]) < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete((void *)STACK[0x450]);
  STACK[0x490] = v29;
  if (SLOBYTE(STACK[0x4AF]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x498]);
    if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v31 - 240) = v27;
    if (*(char *)(v31 - 209) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete((void *)STACK[0x470]);
  *(_QWORD *)(v31 - 240) = v27;
  if (*(char *)(v31 - 209) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v31 - 232));
    if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v31 - 160) = &off_1003EDD90;
    v33 = *(_QWORD *)(v31 - 152);
    if (!v33)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete((void *)STACK[0x4B0]);
  *(_QWORD *)(v31 - 160) = &off_1003EDD90;
  v33 = *(_QWORD *)(v31 - 152);
  if (!v33)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33))
    *(_QWORD *)(v31 - 152) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v31 - 176));
  v34 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v34;
    operator delete(v34);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x3F0]);
  if (SLOBYTE(STACK[0x567]) < 0)
    operator delete((void *)STACK[0x550]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (SLOBYTE(STACK[0x547]) < 0)
    operator delete((void *)STACK[0x530]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  __cxa_free_exception(v28);
  if (SLOBYTE(STACK[0x587]) < 0)
    operator delete((void *)STACK[0x570]);
  sub_1001F0F44((uint64_t)&STACK[0x410]);
  sub_1000F7DE0((uint64_t)&a27);
  v35 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v35;
    operator delete(v35);
  }
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1001F08DC(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 5UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_1001F0BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F0F44(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F0F44(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

id sub_1001F0E08(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v7[4];
  _QWORD v8[4];

  v7[0] = CFSTR("numEvicted");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]));
  v8[0] = v2;
  v7[1] = CFSTR("numUntouched");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]));
  v8[1] = v3;
  v7[2] = CFSTR("pctUntouched");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]));
  v7[3] = CFSTR("trigger");
  v8[2] = v4;
  v8[3] = CFSTR("limits");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 4));

  return v5;
}

void sub_1001F0F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1001F0F44(uint64_t a1)
{
  sub_100207150(a1);

  return a1;
}

uint64_t sub_1001F0F74(uint64_t a1)
{
  sub_1000152CC(a1);

  return a1;
}

void sub_1001F0FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  std::promise<void> *v4;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD block[6];
  std::future<void> v8;
  std::promise<void> v9;

  v5[2] = a1;
  v6 = a2;
  v5[0] = a3;
  v5[1] = &v6;
  v3 = *(id *)(a1 + 32);
  v4 = std::promise<void>::promise(&v9);
  std::promise<void>::get_future(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F7264;
  block[3] = &unk_1003FC648;
  block[4] = v5;
  block[5] = &v9;
  dispatch_sync(v3, block);
  std::future<void>::get(&v8);
  std::future<void>::~future(&v8);
  std::promise<void>::~promise(&v9);

}

void sub_1001F1054(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_1001F1080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  std::promise<void> *v5;
  _QWORD v6[4];
  uint64_t v7;
  _QWORD block[6];
  std::future<void> v9;
  std::promise<void> v10;

  v6[3] = a4;
  v7 = a2;
  v6[0] = a3;
  v6[1] = &v7;
  v6[2] = a1;
  v4 = *(id *)(a1 + 32);
  v5 = std::promise<void>::promise(&v10);
  std::promise<void>::get_future(v5);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FB1E8;
  block[3] = &unk_1003FC648;
  block[4] = v6;
  block[5] = &v10;
  dispatch_sync(v4, block);
  std::future<void>::get(&v9);
  std::future<void>::~future(&v9);
  std::promise<void>::~promise(&v10);

}

void sub_1001F1148(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_1001F1174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1188(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v2 = a1;
  v1 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001F12F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  va_list va;

  va_start(va, a8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  sub_10020001C((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1001F1350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1364(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001F14D4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_100200F2C((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_1001F152C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F1540(uint64_t a1)
{
  id v1;
  uint64_t v2;

  v2 = a1;
  v1 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001F16B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  va_list va;

  va_start(va, a8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  sub_100202C08((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1001F1708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F171C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = a2;
  v6 = a3;
  v3 = *(id *)(a1 + 32);
  operator new();
}

void sub_1001F1890(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_100203378((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_1001F18E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1001F18FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  std::promise<void> *v4;
  _QWORD v5[3];
  _QWORD block[6];
  std::future<void> v7;
  std::promise<void> v8;

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v3 = *(id *)(a1 + 32);
  v4 = std::promise<void>::promise(&v8);
  std::promise<void>::get_future(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100203674;
  block[3] = &unk_1003FC648;
  block[4] = v5;
  block[5] = &v8;
  dispatch_sync(v3, block);
  std::future<void>::get(&v7);
  std::future<void>::~future(&v7);
  std::promise<void>::~promise(&v8);

}

void sub_1001F19A8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_1001F19D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

sqlite3_blob **sub_1001F19E8@<X0>(uint64_t a1@<X0>, sqlite3_int64 a2@<X1>, _DWORD *a3@<X8>)
{
  _QWORD *v5;
  void *v6;
  sqlite3_blob *v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 v13;
  sqlite3_blob *v14;
  sqlite3_blob *v15;

  sub_100080F20(*(sqlite3 ***)(a1 + 40), "tile_data", "tiles", a2, 1, &v14);
  v5 = operator new(0x80uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = off_1003FD520;
  v6 = *(void **)(a1 + 32);
  v7 = v14;
  v14 = 0;
  v15 = v7;
  sub_100207940((uint64_t)(v5 + 3), v6, &v15);
  sub_100200588(&v15);
  v13.n128_u64[0] = (unint64_t)(v5 + 3);
  v13.n128_u64[1] = (unint64_t)v5;
  v8 = sub_1002D44CC(a3, &v13);
  v9 = (std::__shared_weak_count *)v13.n128_u64[1];
  if (v13.n128_u64[1])
  {
    v10 = (unint64_t *)(v13.n128_u64[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return sub_100200588(&v14);
}

void sub_1001F1B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, sqlite3_blob *a13)
{
  sub_1000E095C((uint64_t)&a11);
  sub_1000E095C((uint64_t)&a9);
  sub_100200588(&a13);
  _Unwind_Resume(a1);
}

void sub_1001F1B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  void *v7;
  sqlite3_blob *v8;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, sqlite3_blob *);
  sub_100200588((sqlite3_blob **)va1);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v7);
  sub_100200588((sqlite3_blob **)va);
  _Unwind_Resume(a1);
}

void sub_1001F1B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100200588((sqlite3_blob **)va);
  _Unwind_Resume(a1);
}

void sub_1001F1B70(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003FD128;
  v13 = off_1003FD150;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003FD170;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003FD088;
  v18[0] = off_1003FD0C0;
  v21 = &off_1003FD0F8;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_100203B14();
}

void sub_1001F1DBC(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1001F1DD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F1DE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F1E34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_1001F1E58(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001F1EAC(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003FD240;
  v13 = off_1003FD268;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003FD288;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003FD1A0;
  v18[0] = off_1003FD1D8;
  v21 = &off_1003FD210;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1002043A8();
}

void sub_1001F20F8(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1001F210C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F2124(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F2170(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_1001F2194(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001F21E8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Database");
  v2 = (void *)qword_100417F10;
  qword_100417F10 = (uint64_t)v1;

}

void sub_1001F2218(uint64_t a1)
{
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1001F2244(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_1001F227C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F2298(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003FCAF0;
  v13 = off_1003FCB18;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003FCA50;
  v18[0] = off_1003FCA88;
  v21 = &off_1003FCAC0;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1001F4A2C();
}

void sub_1001F24E4(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1001F24F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F2510(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001F255C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

size_t sub_1001F2580@<X0>(const char **a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (*a1)
    v3 = *a1;
  else
    v3 = "<no message>";
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t sub_1001F2640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003FCA50;
  *(_QWORD *)(a1 + 16) = off_1003FCA88;
  *(_QWORD *)(a1 + 56) = &off_1003FCAC0;
  return a1;
}

void sub_1001F26D4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1001F26E8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1001F2738(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1003FC718;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1001F2784(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1003FC7C0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1001F27D0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1003FC868;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_1001F2828()
{
  operator new();
}

void sub_1001F2A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F2A94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F2A64(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F2A80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001F2A94(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1001F2B14()
{
  operator new();
}

void sub_1001F2B90()
{
  operator delete();
}

void sub_1001F2BB4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FC718;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_1001F2C00(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"P26tag_sqlite_extended_errmsg" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F2E40(a1 + 8);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1001F2D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F2E40(uint64_t a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void (__cdecl **v9)(std::ostringstream *__hidden);
  _QWORD v10[8];
  void *__p[2];
  __int128 v12;
  int v13;
  void (__cdecl **v14)(std::ostringstream *__hidden);

  v9 = v2;
  *(_QWORD *)((char *)&v10[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v10[-1] + (_QWORD)*(v9 - 3));
  std::ios_base::init(v4, v10);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v10);
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v13 = 16;
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  sub_1000F0508(&v9, v6, v7);
  std::stringbuf::str(v10);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v10);
  return std::ios::~ios(&v14);
}

void sub_1001F2F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_1001F2FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_1001F2FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F2FD8()
{
  operator delete();
}

uint64_t sub_1001F2FEC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1001F3004()
{
  return 0;
}

uint64_t sub_1001F300C()
{
  return 0;
}

uint64_t sub_1001F3014()
{
  return 0;
}

void sub_1001F301C()
{
  operator new();
}

void sub_1001F3234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F3288((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F3258(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F3274(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3288(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1001F3308()
{
  operator new();
}

void sub_1001F3384()
{
  operator delete();
}

void sub_1001F33A8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FC7C0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_1001F33F4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"P13tag_sql_query" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F2E40(a1 + 8);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1001F3570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1001F3638()
{
  operator delete();
}

uint64_t sub_1001F364C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1001F3664()
{
  return 0;
}

uint64_t sub_1001F366C()
{
  return 0;
}

uint64_t sub_1001F3674()
{
  return 0;
}

void sub_1001F367C()
{
  operator new();
}

void sub_1001F3894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F38E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F38B8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F38D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001F38E8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1001F3968()
{
  operator new();
}

void sub_1001F39E4()
{
  operator delete();
}

void sub_1001F3A08(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FC868;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_1001F3A54(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"P17tag_sqlite_errmsg" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F2E40(a1 + 8);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1001F3BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1001F3C98()
{
  operator delete();
}

uint64_t sub_1001F3CAC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1001F3CC4()
{
  return 0;
}

uint64_t sub_1001F3CCC()
{
  return 0;
}

uint64_t sub_1001F3CD4()
{
  return 0;
}

void sub_1001F3CDC()
{
  operator new();
}

void sub_1001F3EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F3F38((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F3F08(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F3F24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001F3F38(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1001F3FB8()
{
  operator new();
}

void sub_1001F4000()
{
  operator delete();
}

void sub_1001F4014(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"PN2db6errors22tag_sqlite_ext_errcodeE" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F4254((unsigned int *)(a1 + 8));
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1001F4190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001F4254(unsigned int *a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  _QWORD v7[8];
  void *__p[2];
  __int128 v9;
  int v10;
  void (__cdecl **v11)(std::ostringstream *__hidden);

  v6 = v2;
  *(_QWORD *)((char *)&v7[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v7[-1] + (_QWORD)*(v6 - 3));
  std::ios_base::init(v4, v7);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v7);
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 16;
  std::ostream::operator<<(&v6, *a1);
  std::stringbuf::str(v7);
  if (SBYTE7(v9) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v11);
}

void sub_1001F438C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_1001F43AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_1001F43C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F43D8()
{
  operator delete();
}

uint64_t sub_1001F43EC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1001F4404()
{
  return 0;
}

uint64_t sub_1001F440C()
{
  return 0;
}

uint64_t sub_1001F4414()
{
  return 0;
}

void sub_1001F441C()
{
  operator new();
}

void sub_1001F4624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F4678((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F4648(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F4664(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001F4678(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1001F46F8()
{
  operator new();
}

void sub_1001F4740()
{
  operator delete();
}

void sub_1001F4754(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"PN2db6errors18tag_sqlite_errcodeE" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F4254((unsigned int *)(a1 + 8));
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1001F48D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1001F4998()
{
  operator delete();
}

uint64_t sub_1001F49AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1001F49C4()
{
  return 0;
}

uint64_t sub_1001F49CC()
{
  return 0;
}

uint64_t sub_1001F49D4()
{
  return 0;
}

void sub_1001F49DC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001F4A2C()
{
  operator new();
}

void sub_1001F4C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001F4C68(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001F4C84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F4C98(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001F4CE8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1001F4D4C()
{
  operator new();
}

void sub_1001F4E20()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1001F4E5C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001F2640((uint64_t)exception, a1);
}

void sub_1001F4E98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001F4EAC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1001F4EFC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1001F4F60()
{
  sub_1001F4D4C();
}

void sub_1001F4F70(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001F2640((uint64_t)exception, v1);
}

void sub_1001F4FB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001F4FC8(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_1001F5020(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_1001F508C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1001F50F0(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1001F5140(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1001F51A4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_1001F51C8(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F5214(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1001F5274(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1001F5280(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1001F5318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F5344(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_1001F5430(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1001F538CLL);
}

void sub_1001F546C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::exception_ptr *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char v16[8];
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  char v22;
  __int128 v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  std::exception_ptr v32;
  uint64_t v33;
  std::exception_ptr *v34;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v4 = v1[1];
  v32.__ptr_ = off_1003FD300;
  v33 = v4;
  v34 = &v32;
  v30[0] = off_1003FD390;
  v30[1] = v4;
  v31 = v30;
  sub_100086B2C(v3, 1, (uint64_t)&v32, (uint64_t)v30, v16);
  v5 = v31;
  if (v31 == v30)
  {
    v6 = 4;
    v5 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v34;
  if (v34 == &v32)
  {
    v8 = 4;
    v7 = &v32;
  }
  else
  {
    if (!v34)
      goto LABEL_11;
    v8 = 5;
  }
  (*((void (**)(void))v7->__ptr_ + v8))();
LABEL_11:
  v9 = *v2;
  if (!*v2)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v9 + 24));
  if ((*(_BYTE *)(v9 + 136) & 1) != 0
    || (v32.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v32), v10))
  {
    sub_1000D3E20(2u);
  }
  *(_BYTE *)(v9 + 144) = 0;
  if (v16[0])
  {
    *(_OWORD *)(v9 + 152) = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 168) = v18;
    __p[0] = 0;
    __p[1] = 0;
    v11 = v19;
    v12 = v20;
    v18 = 0;
    v19 = 0uLL;
    *(_OWORD *)(v9 + 176) = v11;
    *(_OWORD *)(v9 + 192) = v12;
    *(_DWORD *)(v9 + 208) = v21;
    *(_BYTE *)(v9 + 216) = 0;
    if (v22)
    {
      *(_OWORD *)(v9 + 224) = v23;
      *(_BYTE *)(v9 + 216) = 1;
    }
    *(_BYTE *)(v9 + 240) = 0;
    if (v24)
    {
      *(_OWORD *)(v9 + 248) = v25;
      *(_BYTE *)(v9 + 240) = 1;
    }
    *(_BYTE *)(v9 + 264) = 0;
    if (v26)
    {
      *(_QWORD *)(v9 + 272) = v27;
      *(_BYTE *)(v9 + 264) = 1;
    }
    *(_BYTE *)(v9 + 280) = 0;
    if (v28)
    {
      *(_QWORD *)(v9 + 288) = v29;
      *(_BYTE *)(v9 + 280) = 1;
    }
    *(_BYTE *)(v9 + 144) = 1;
  }
  *(_DWORD *)(v9 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
  std::mutex::unlock((std::mutex *)(v9 + 24));
  if (v16[0])
  {
    if (v28)
      v28 = 0;
    if (v26)
      v26 = 0;
    if (v24)
      v24 = 0;
    if (v22)
      v22 = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_37;
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (SHIBYTE(v18) < 0)
        goto LABEL_38;
    }
    else
    {
LABEL_37:
      if (SHIBYTE(v18) < 0)
LABEL_38:
        operator delete(__p[0]);
    }
  }
}

void sub_1001F5714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__assoc_sub_state **v38;
  std::__assoc_sub_state *v39;
  std::exception_ptr v40;

  if (!a2)
    _Unwind_Resume(exception_object);
  v34 = *(_QWORD **)(v32 - 96);
  if (v34 == (_QWORD *)(v32 - 120))
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 120);
  }
  else
  {
    if (!v34)
      goto LABEL_7;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_7:
  v36 = *(_QWORD **)(v32 - 64);
  if (v36 == (_QWORD *)(v32 - 88))
  {
    v37 = 4;
    v36 = (_QWORD *)(v32 - 88);
  }
  else
  {
    if (!v36)
      goto LABEL_12;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_12:
  __cxa_begin_catch(exception_object);
  v38 = *(std::__assoc_sub_state ***)(v31 + 32);
  std::current_exception();
  v39 = *v38;
  if (v39)
  {
    std::exception_ptr::exception_ptr(&a11, &a10);
    v40.__ptr_ = &a11;
    std::__assoc_sub_state::set_exception(v39, v40);
    std::exception_ptr::~exception_ptr(&a11);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x1001F56C4);
  }
  sub_1000D3E20(3u);
}

void sub_1001F5874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F589C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1001F58A4);
  sub_1000CDD68(a1);
}

void sub_1001F58B4(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F5900(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::exception_ptr *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[8];
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  char v22;
  __int128 v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  std::exception_ptr v32;
  uint64_t v33;
  std::exception_ptr *v34;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)v1;
  v4 = **(_QWORD **)(v1 + 8);
  v32.__ptr_ = off_1003FD420;
  v33 = v4;
  v34 = &v32;
  v30[0] = off_1003FD4A0;
  v30[1] = v4;
  v31 = v30;
  sub_100086B2C(v3, 0, (uint64_t)&v32, (uint64_t)v30, v16);
  v5 = v31;
  if (v31 == v30)
  {
    v6 = 4;
    v5 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v34;
  if (v34 == &v32)
  {
    v8 = 4;
    v7 = &v32;
  }
  else
  {
    if (!v34)
      goto LABEL_11;
    v8 = 5;
  }
  (*((void (**)(void))v7->__ptr_ + v8))();
LABEL_11:
  v9 = *v2;
  if (!*v2)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v9 + 24));
  if ((*(_BYTE *)(v9 + 136) & 1) != 0
    || (v32.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v32), v10))
  {
    sub_1000D3E20(2u);
  }
  *(_BYTE *)(v9 + 144) = 0;
  if (v16[0])
  {
    *(_OWORD *)(v9 + 152) = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 168) = v18;
    __p[0] = 0;
    __p[1] = 0;
    v11 = v19;
    v12 = v20;
    v18 = 0;
    v19 = 0uLL;
    *(_OWORD *)(v9 + 176) = v11;
    *(_OWORD *)(v9 + 192) = v12;
    *(_DWORD *)(v9 + 208) = v21;
    *(_BYTE *)(v9 + 216) = 0;
    if (v22)
    {
      *(_OWORD *)(v9 + 224) = v23;
      *(_BYTE *)(v9 + 216) = 1;
    }
    *(_BYTE *)(v9 + 240) = 0;
    if (v24)
    {
      *(_OWORD *)(v9 + 248) = v25;
      *(_BYTE *)(v9 + 240) = 1;
    }
    *(_BYTE *)(v9 + 264) = 0;
    if (v26)
    {
      *(_QWORD *)(v9 + 272) = v27;
      *(_BYTE *)(v9 + 264) = 1;
    }
    *(_BYTE *)(v9 + 280) = 0;
    if (v28)
    {
      *(_QWORD *)(v9 + 288) = v29;
      *(_BYTE *)(v9 + 280) = 1;
    }
    *(_BYTE *)(v9 + 144) = 1;
  }
  *(_DWORD *)(v9 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
  std::mutex::unlock((std::mutex *)(v9 + 24));
  if (v16[0])
  {
    if (v28)
      v28 = 0;
    if (v26)
      v26 = 0;
    if (v24)
      v24 = 0;
    if (v22)
      v22 = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_37;
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (SHIBYTE(v18) < 0)
        goto LABEL_38;
    }
    else
    {
LABEL_37:
      if (SHIBYTE(v18) < 0)
LABEL_38:
        operator delete(__p[0]);
    }
  }
}

void sub_1001F5BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__assoc_sub_state **v38;
  std::__assoc_sub_state *v39;
  std::exception_ptr v40;

  if (!a2)
    _Unwind_Resume(exception_object);
  v34 = *(_QWORD **)(v32 - 96);
  if (v34 == (_QWORD *)(v32 - 120))
  {
    v35 = 4;
    v34 = (_QWORD *)(v32 - 120);
  }
  else
  {
    if (!v34)
      goto LABEL_7;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_7:
  v36 = *(_QWORD **)(v32 - 64);
  if (v36 == (_QWORD *)(v32 - 88))
  {
    v37 = 4;
    v36 = (_QWORD *)(v32 - 88);
  }
  else
  {
    if (!v36)
      goto LABEL_12;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_12:
  __cxa_begin_catch(exception_object);
  v38 = *(std::__assoc_sub_state ***)(v31 + 32);
  std::current_exception();
  v39 = *v38;
  if (v39)
  {
    std::exception_ptr::exception_ptr(&a11, &a10);
    v40.__ptr_ = &a11;
    std::__assoc_sub_state::set_exception(v39, v40);
    std::exception_ptr::~exception_ptr(&a11);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x1001F5B5CLL);
  }
  sub_1000D3E20(3u);
}

void sub_1001F5D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F5D34(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1001F5D3CLL);
  sub_1000CDD68(a1);
}

void sub_1001F5D4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::exception_ptr v9;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 40);
  v3 = *v2;
  v4 = sub_10008A354(*v2, v2[1]);
  v6 = v5;
  if ((v5 & 1) == 0)
    sub_10008D748(v3, v2[1]);
  v7 = *v1;
  if (!v7)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v7 + 24));
  if ((*(_BYTE *)(v7 + 136) & 1) != 0
    || (v9.__ptr_ = 0, v8 = *(_QWORD *)(v7 + 16), std::exception_ptr::~exception_ptr(&v9), v8))
  {
    sub_1000D3E20(2u);
  }
  *(_QWORD *)(v7 + 144) = v4;
  *(_QWORD *)(v7 + 152) = v6;
  *(_DWORD *)(v7 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v7 + 88));
  std::mutex::unlock((std::mutex *)(v7 + 24));
}

void sub_1001F5E14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  std::mutex *v19;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::exception_ptr v25[9];

  std::mutex::unlock(v19);
  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v18 + 32);
  std::current_exception();
  v22 = *v21;
  if (!v22)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_1001F5E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F5EC0(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F5F0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::exception_ptr v7;
  _BYTE v8[8];
  __int128 v9;

  v1 = *(uint64_t **)(a1 + 32);
  sub_1001E6B5C(**(_QWORD **)(a1 + 40), **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8), v8);
  v2 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v7), v3))
  {
    sub_1000D3E20(2u);
  }
  *(_BYTE *)(v2 + 144) = 0;
  if (v8[0])
  {
    *(_OWORD *)(v2 + 152) = v9;
    v9 = 0uLL;
    *(_BYTE *)(v2 + 144) = 1;
  }
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  if (v8[0])
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1001F6044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  std::__assoc_sub_state **v14;
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v14 = *(std::__assoc_sub_state ***)(v13 + 32);
    std::current_exception();
    v15 = *v14;
    if (v15)
    {
      std::exception_ptr::exception_ptr(&a11, (const std::exception_ptr *)&a9);
      v16.__ptr_ = &a11;
      std::__assoc_sub_state::set_exception(v15, v16);
      std::exception_ptr::~exception_ptr(&a11);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
      __cxa_end_catch();
      JUMPOUT(0x1001F5FF8);
    }
    sub_1000D3E20(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001F6104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F612C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1001F6134);
  sub_1000CDD68(a1);
}

void sub_1001F6144(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F6190(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1001F61F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0 && *(_BYTE *)(a1 + 144))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 160);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1001F6264(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    if (*(_BYTE *)(a1 + 144))
    {
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_BYTE *)a2 = 1;
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_1001F6314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F6340(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_1001F642C(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1001F6388);
}

void sub_1001F6468(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::exception_ptr v10;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v4 = (char **)v1[1];
  v5 = sub_100081574(*v1, v4);
  v7 = v6;
  if ((_BYTE)v5)
    sub_1001E8148(v3, (uint64_t)v4);
  v8 = *v2;
  if (!*v2)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v8 + 24));
  if ((*(_BYTE *)(v8 + 136) & 1) != 0
    || (v10.__ptr_ = 0, v9 = *(_QWORD *)(v8 + 16), std::exception_ptr::~exception_ptr(&v10), v9))
  {
    sub_1000D3E20(2u);
  }
  *(_QWORD *)(v8 + 144) = v5;
  *(_QWORD *)(v8 + 152) = v7;
  *(_DWORD *)(v8 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
  std::mutex::unlock((std::mutex *)(v8 + 24));
}

void sub_1001F6538(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  std::mutex *v19;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::exception_ptr v25[9];

  std::mutex::unlock(v19);
  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v18 + 32);
  std::current_exception();
  v22 = *v21;
  if (!v22)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_1001F65B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F65E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  char *v5;
  void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;
  std::exception_ptr v13;

  v1 = *(uint64_t **)(a1 + 32);
  sub_1001E9DE4(**(_QWORD **)(a1 + 40), (int64x2_t *)__p);
  v2 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v13.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v13), v3))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v2 + 144) = *(_OWORD *)__p;
  *(_QWORD *)(v2 + 160) = v12;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  v4 = (void **)__p[0];
  if (__p[0])
  {
    v5 = (char *)__p[1];
    v6 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        while (1)
        {
          if (*(v5 - 16))
            *(v5 - 16) = 0;
          if (*(v5 - 32))
            *(v5 - 32) = 0;
          if (*(v5 - 56))
            *(v5 - 56) = 0;
          if (*(v5 - 80))
            *(v5 - 80) = 0;
          v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 14);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v7 = (void **)(v5 - 144);
          if (*(v5 - 121) < 0)
            break;
          v5 -= 144;
          if (v7 == v4)
            goto LABEL_23;
        }
        operator delete(*v7);
        v5 -= 144;
      }
      while (v7 != v4);
LABEL_23:
      v6 = __p[0];
    }
    __p[1] = v4;
    operator delete(v6);
  }
}

void sub_1001F6768(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  std::__assoc_sub_state **v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;
  std::exception_ptr v26;
  std::exception_ptr v27[12];

  __cxa_begin_catch(a1);
  v23 = *(std::__assoc_sub_state ***)(v22 + 32);
  std::current_exception();
  v24 = *v23;
  if (!v24)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v27, &v26);
  v25.__ptr_ = v27;
  std::__assoc_sub_state::set_exception(v24, v25);
  std::exception_ptr::~exception_ptr(v27);
  std::exception_ptr::~exception_ptr(&v26);
  __cxa_end_catch();
}

void sub_1001F68B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F68E4(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F6930(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1001F6990(uint64_t a1)
{
  void **v3;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v3 = (void **)(a1 + 144);
    sub_1002067A8(&v3);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1001F69DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_1001F6A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F6AB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_1001F6B9C(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1001F6AF8);
}

void sub_1001F6BD8(uint64_t a1)
{
  uint64_t *v1;
  BOOL v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  std::exception_ptr v6;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = sub_1001EC8D8(**(_QWORD **)(a1 + 40));
  v3 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  v4 = v2;
  std::mutex::lock((std::mutex *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(v3 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_1000D3E20(2u);
  }
  *(_BYTE *)(v3 + 140) = v4;
  *(_DWORD *)(v3 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v3 + 88));
  std::mutex::unlock((std::mutex *)(v3 + 24));
}

void sub_1001F6C88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  std::mutex *v19;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::exception_ptr v25[9];

  std::mutex::unlock(v19);
  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v18 + 32);
  std::current_exception();
  v22 = *v21;
  if (!v22)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_1001F6D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F6D34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v5;
  std::exception_ptr v6;

  v1 = *(uint64_t **)(a1 + 32);
  sub_1001EDC54(**(_QWORD **)(a1 + 40), *(unsigned int **)(*(_QWORD *)(a1 + 40) + 8), (char **)__p);
  v2 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v6), v3))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v2 + 144) = *(_OWORD *)__p;
  *(_QWORD *)(v2 + 160) = v5;
  __p[1] = 0;
  v5 = 0;
  __p[0] = 0;
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1001F6E00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::exception_ptr v25[10];

  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v20 + 32);
  std::current_exception();
  v22 = *v21;
  if (!v22)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_1001F6E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F6EC0(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001F6F0C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1001F6F6C(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1001F6FAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_1001F7054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_1001F7080(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_1001F716C(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1001F70C8);
}

void sub_1001F71A8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Daemon");
  v2 = (void *)qword_100417F00;
  qword_100417F00 = (uint64_t)v1;

}

void sub_1001F71D8(uint64_t a1)
{
  sub_100037B84(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1001F7210(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_1001F7248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001F7264(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  sqlite3 **v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  std::string *v36;
  __int128 v37;
  int v38;
  const char *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type v47;
  char v48;
  _QWORD *v49;
  int v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  NSObject *v55;
  std::string *v56;
  std::string::size_type size;
  std::string *v58;
  __int128 v59;
  int *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::string v72;
  std::string v73;
  _BYTE v74[24];
  std::string v75;
  std::string v76;
  std::string v77;
  std::runtime_error v78;
  std::string __dst;
  std::string v80;
  std::string v81;
  _BYTE buf[24];
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;

  v2 = *(_QWORD ***)(a1 + 32);
  v3 = v2[2];
  sub_1002CFC34((uint64_t)*v2, &v70);
  v4 = sub_100050DB0((uint64_t)&v70);
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v5 = (id)qword_100417F10;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = sub_1002CFC44((uint64_t)*v2);
    v7 = *v2[1];
    v8 = *(unsigned __int8 *)(v4 + 23);
    v9 = *(_QWORD *)v4;
    if ((v8 & 0x80u) == 0)
      v10 = v4 + v8;
    else
      v10 = *(_QWORD *)v4 + *(_QWORD *)(v4 + 8);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(v4 + 8);
    else
      v9 = v4;
    v11 = *(char *)(v10 - 3);
    v12 = *(char *)(v10 - 4);
    v13 = *(char *)(v10 - 2);
    v14 = *(char *)(v9 + v8 - 1);
    *(_DWORD *)buf = 134219264;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v7;
    buf[22] = 0;
    buf[23] = 4;
    v83 = v12;
    v84 = 1024;
    v85 = v11;
    v86 = 1024;
    v87 = v13;
    v88 = 1024;
    v89 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Writing floor metadata BLOB with version %lld (locally %llu). Last 4 chars = %c, %c, %c, %c", buf, 0x2Eu);
  }

  v15 = (sqlite3 **)v3[5];
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v76, "UPDATE ");
  v16 = std::string::append(&v76, "venues");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v77, " SET ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A057 >= 0)
    v20 = (const std::string::value_type *)&qword_10041A040;
  else
    v20 = (const std::string::value_type *)qword_10041A040;
  if (byte_10041A057 >= 0)
    v21 = byte_10041A057;
  else
    v21 = *(_QWORD *)&byte_10041A048;
  v22 = std::string::append(&__dst, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v72, " = ? WHERE ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v26 = (const std::string::value_type *)&qword_100419F80;
  else
    v26 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v27 = byte_100419F97;
  else
    v27 = *(_QWORD *)&byte_100419F88;
  v28 = std::string::append(&v73, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v80, " = ?;");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_1001F8CD0(v15, (uint64_t)buf, 0, (uint64_t)&pStmt);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_67;
    }
  }
  else if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v80.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(v73.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_69;
  }
LABEL_68:
  operator delete(v72.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_70:
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_71:
    operator delete(v76.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
LABEL_69:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
LABEL_29:
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_71;
LABEL_30:
  v32 = sub_1002CFC50(*v2);
  sub_1001F922C(&pStmt, 1, v32);
  sub_1001F9940(&pStmt, 2, *v2[1]);
  while (1)
  {
    do
    {
      v33 = sqlite3_step(pStmt);
      v34 = v33;
    }
    while (v33 == 100);
    if (v33 == 101)
      break;
    if (v33 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v55 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_82;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v55 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_82:
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v73.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v77, &v73);
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v72);
      sub_1001F9F6C((std::runtime_error *)&v77, (uint64_t)"auto db::resources::statement<0, 2>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1135:22) &&)::(anonymous class)::operator()() const [nCols = 0, nQueries = 2, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v72);
    }
    sub_10008B9C4(v33, db);
    if (v34)
    {
      v35 = __error();
      sub_10025FF8C(*v35, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v81.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v81, " w/ ");
      v36 = std::string::insert(&v81, 0, "Failed sqlite3_step");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v75, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v75 = __dst;
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v75;
      else
        v56 = (std::string *)v75.__r_.__value_.__r.__words[0];
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      else
        size = v75.__r_.__value_.__l.__size_;
      v58 = std::string::append(&v76, (const std::string::value_type *)v56, size);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v78, &v77);
      v78.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v74);
      sub_1001F2298(&v78, (uint64_t)"void db::resources::statement<0, 2>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 2, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1135:22), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v74);
    }
  }
  v38 = sqlite3_reset(pStmt);
  sub_10008B9C4(v38, db);
  if (v38)
  {
    v60 = __error();
    sub_10025FF8C(*v60, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v81.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v81, " w/ ");
    v61 = std::string::insert(&v81, 0, "Failed to execute query");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v75, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v75 = __dst;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v75;
    else
      v63 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      v64 = v75.__r_.__value_.__l.__size_;
    v65 = std::string::append(&v76, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v78, &v77);
    v78.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v74);
    sub_1001F2298(&v78, (uint64_t)"void db::resources::statement<0, 2>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 2, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1135:22), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v74);
  }
  sub_1001FB004((uint64_t)&pStmt);

  if (byte_10041A057 >= 0)
    v39 = (const char *)&qword_10041A040;
  else
    v39 = (const char *)qword_10041A040;
  sub_100080F20((sqlite3 **)v3[5], "venues", v39, *v2[1], 1, (sqlite3_blob **)&v75);
  std::operator+<char>("metadata for ", v4);
  v40 = std::string::append(&v77, " (locally ");
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v76, *v2[1]);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v76;
  else
    v42 = (std::string *)v76.__r_.__value_.__r.__words[0];
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  else
    v43 = v76.__r_.__value_.__l.__size_;
  v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  v46 = std::string::append(&v72, ")");
  v47 = v46->__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
  v81.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v49 = *v2;
  v73.__r_.__value_.__r.__words[0] = v47;
  v73.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&v73.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&v73.__r_.__value_.__s + 23) = v48;
  *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7) = 0;
  v81.__r_.__value_.__r.__words[0] = 0;
  sub_1002698A0((__n128 *)buf, (__n128 *)&v73, v75.__r_.__value_.__r.__words[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v80, (wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf, -1);
  sub_1002CFC60(v49);
  if ((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::Flush((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v80) & 1) == 0)
  {
    sub_100342FA8();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 188, "writeBlob");
    __break(1u);
    return;
  }
  wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v80);
  if (SHIBYTE(v87) < 0)
  {
    operator delete(*(void **)&buf[16]);
    wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_74;
    }
  }
  else
  {
    wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
LABEL_75:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_76;
  }
LABEL_74:
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_54:
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_55;
LABEL_76:
  operator delete(v77.__r_.__value_.__l.__data_);
LABEL_55:
  v50 = sqlite3_blob_close((sqlite3_blob *)v75.__r_.__value_.__l.__data_);
  if (!v50)
    goto LABEL_59;
  if (qword_100417F08 == -1)
  {
    v51 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_59;
    goto LABEL_58;
  }
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v51 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
  {
LABEL_58:
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v50;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", buf, 8u);
  }
LABEL_59:
  v52 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1001F83D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,sqlite3_blob *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a71;
  std::runtime_error a72;
  char a73;
  std::runtime_error a74;
  void *a75;
  char a76;
  uint64_t v76;
  std::runtime_error *v77;
  uint64_t v78;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::promise<void> *v84;
  std::exception_ptr v85;

  if (!a2)
    _Unwind_Resume(a1);
  std::runtime_error::~runtime_error(v77);
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_4:
      if ((a46 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(a20);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a41);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    *(_QWORD *)(v78 - 256) = off_1003FC7C0;
    if ((*(char *)(v78 - 225) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a34);
  *(_QWORD *)(v78 - 256) = off_1003FC7C0;
  if ((*(char *)(v78 - 225) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v78 - 248));
  if ((a52 & 0x80000000) == 0)
  {
LABEL_8:
    *(_QWORD *)(v78 - 160) = &off_1003EDD90;
    v80 = *(_QWORD *)(v78 - 152);
    if (!v80)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a47);
  *(_QWORD *)(v78 - 160) = &off_1003EDD90;
  v80 = *(_QWORD *)(v78 - 152);
  if (!v80)
    goto LABEL_18;
LABEL_16:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80))
    *(_QWORD *)(v78 - 152) = 0;
LABEL_18:
  std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 176));
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  std::runtime_error::~runtime_error(&a74);
  if (a73 < 0)
    operator delete(a72.__vftable);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a67);
  if (*(char *)(v78 - 177) < 0)
    operator delete(*(void **)(v78 - 200));
  __cxa_free_exception(v77);
  if (a76 < 0)
    operator delete(a75);
  sub_1001FB004((uint64_t)&a15);

  v81 = (std::__shared_weak_count *)a19;
  if (a19)
  {
    v82 = (unint64_t *)(a19 + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  __cxa_begin_catch(a1);
  v84 = *(std::promise<void> **)(v76 + 40);
  std::current_exception();
  v85.__ptr_ = &a14;
  std::promise<void>::set_exception(v84, v85);
  std::exception_ptr::~exception_ptr(&a14);
  __cxa_end_catch();
  JUMPOUT(0x1001F787CLL);
}

void sub_1001F8CD0(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 0UL, nQueries = 2UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_1001F8FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F91FC(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F91FC(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_1001F91FC(uint64_t a1)
{
  sub_1001FB004(a1);

  return a1;
}

void sub_1001F922C(sqlite3_stmt **a1, int a2, int a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_zeroblob(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind zero blob of size ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<0, 2>::bind_zeroblob(int, int) [nCols = 0, nQueries = 2, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 479, (uint64_t)v24);
  }
}

void sub_1001F9568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

size_t sub_1001F9858@<X0>(size_t *a1@<X0>, char *a2@<X8>)
{
  char *v2;
  size_t result;
  const char *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = a2;
  result = *a1;
  if (!result)
  {
    a2[23] = 8;
    strcpy(a2, "no query");
    return result;
  }
  v4 = sqlite3_sql((sqlite3_stmt *)result);
  if (v4)
    v5 = v4;
  else
    v5 = "<unknown query>";
  result = strlen(v5);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = (char *)operator new(v7 + 1);
    *((_QWORD *)v2 + 1) = v6;
    *((_QWORD *)v2 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v2 = v9;
    v2 = v9;
  }
  else
  {
    v2[23] = result;
    if (!result)
      goto LABEL_14;
  }
  result = (size_t)memmove(v2, v5, v6);
LABEL_14:
  v2[v6] = 0;
  return result;
}

void sub_1001F9940(sqlite3_stmt **a1, int a2, unint64_t a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<0, 2>::bind(int, uint64_t) [nCols = 0, nQueries = 2, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 425, (uint64_t)v24);
  }
}

void sub_1001F9C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_1001F9F6C(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003FCE60;
  v13 = off_1003FCE88;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003FCEA8;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003FCDC0;
  v18[0] = off_1003FCDF8;
  v21 = &off_1003FCE30;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1001FA868();
}

void sub_1001FA1B8(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1001FA1CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001FA1E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1001FA230(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

uint64_t sub_1001FA254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003FCEA8;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003FCDC0;
  *(_QWORD *)(a1 + 16) = off_1003FCDF8;
  *(_QWORD *)(a1 + 56) = &off_1003FCE30;
  return a1;
}

void sub_1001FA2E8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1001FA2FC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001FA350()
{
  operator new();
}

void sub_1001FA568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F3288((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FA58C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001FA5A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001FA5BC()
{
  operator new();
}

void sub_1001FA7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001F4678((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FA7E8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001FA804(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001FA818(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001FA868()
{
  operator new();
}

void sub_1001FAA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001FAAA4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1001FAAC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001FAAD4(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1001FAB24(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1001FAB88()
{
  operator new();
}

void sub_1001FAC5C()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1001FAC98(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001FA254((uint64_t)exception, a1);
}

void sub_1001FACD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001FACE8(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1001FAD38(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1001FAD9C()
{
  sub_1001FAB88();
}

void sub_1001FADAC(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1001FA254((uint64_t)exception, v1);
}

void sub_1001FADF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1001FAE04(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_1001FAE5C(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_1001FAEC8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1001FAF2C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1001FAF7C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1001FAFE0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_1001FB004(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_1001FB1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FB1E8(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  unint64_t v6;
  sqlite3 **v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __n128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  std::string *v17;
  __int128 v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  _QWORD *v35;
  NSObject *v36;
  uint64_t v37;
  unint64_t v38;
  sqlite3_blob *v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  char v53;
  uint64_t v54;
  NSObject *v55;
  unint64_t v56;
  int v57;
  NSObject *v58;
  NSObject *v59;
  std::string *v60;
  std::string::size_type size;
  std::string *v62;
  __int128 v63;
  int *v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v73;
  std::string v74;
  sqlite3_blob *v75[2];
  std::string v76;
  id v77[2];
  std::string v78;
  std::string v79;
  std::string v80;
  std::runtime_error v81;
  std::string __dst;
  std::string v83;
  _QWORD v84[3];
  std::string v85;
  __n128 buf[2];
  char v87;

  v2 = *(_QWORD ***)(a1 + 32);
  v3 = v2[2];
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v4 = (id)qword_100417F10;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = sub_1002D34F4((uint64_t)*v2);
    v6 = *v2[1];
    buf[0].n128_u32[0] = 134218240;
    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v5;
    buf[0].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Creating tile entry for BLOB with version %lld (locally %llu)", (uint8_t *)buf, 0x16u);
  }

  v7 = (sqlite3 **)v3[5];
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v76, "REPLACE INTO ");
  v8 = std::string::append(&v76, "tile_data");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v83, " VALUES(?, ?, ?)");
  v11 = *(__n128 *)&v10->__r_.__value_.__l.__data_;
  buf[1].n128_u64[0] = v10->__r_.__value_.__r.__words[2];
  buf[0] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_1001FCF34(v7, (uint64_t)buf, 0, (uint64_t)&pStmt);
  if ((buf[1].n128_i8[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_65:
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_66:
    operator delete(v76.__r_.__value_.__l.__data_);
    goto LABEL_8;
  }
  operator delete((void *)buf[0].n128_u64[0]);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_65;
LABEL_7:
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_66;
LABEL_8:
  sub_1001FD490(&pStmt, 1, *v2[1]);
  v12 = sub_1002CFC50(*v2);
  sub_1001FDABC(&pStmt, 2, v12);
  v13 = sub_1002D4EB4((uint64_t)v2[3]);
  sub_1001FDABC(&pStmt, 3, v13);
  while (1)
  {
    do
    {
      v14 = sqlite3_step(pStmt);
      v15 = v14;
    }
    while (v14 == 100);
    if (v14 == 101)
      break;
    if (v14 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v59 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_93;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v59 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_93:
          buf[0].n128_u16[0] = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v76.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v80, &v76);
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v74);
      sub_1001F9F6C((std::runtime_error *)&v80, (uint64_t)"auto db::resources::statement<0, 3>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1153:22) &&)::(anonymous class)::operator()() const [nCols = 0, nQueries = 3, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v74);
    }
    sub_10008B9C4(v14, db);
    if (v15)
    {
      v16 = __error();
      sub_10025FF8C(*v16, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v78.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v78, " w/ ");
      v17 = std::string::insert(&v78, 0, "Failed sqlite3_step");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v85 = __dst;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v85;
      else
        v60 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      v62 = std::string::append(&v79, (const std::string::value_type *)v60, size);
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v81, &v80);
      v81.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v84);
      sub_1001F2298(&v81, (uint64_t)"void db::resources::statement<0, 3>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 3, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1153:22), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v84);
    }
  }
  v19 = sqlite3_reset(pStmt);
  sub_10008B9C4(v19, db);
  if (v19)
  {
    v64 = __error();
    sub_10025FF8C(*v64, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v78.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v78, " w/ ");
    v65 = std::string::insert(&v78, 0, "Failed to execute query");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v85 = __dst;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v85;
    else
      v67 = (std::string *)v85.__r_.__value_.__r.__words[0];
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      v68 = v85.__r_.__value_.__l.__size_;
    v69 = std::string::append(&v79, (const std::string::value_type *)v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v81, &v80);
    v81.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v84);
    sub_1001F2298(&v81, (uint64_t)"void db::resources::statement<0, 3>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 3, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1153:22), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v84);
  }
  sub_1001FE0E8((uint64_t)&pStmt);

  if (qword_100417F08 == -1)
  {
    v20 = (id)qword_100417F10;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      goto LABEL_19;
    goto LABEL_18;
  }
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v20 = (id)qword_100417F10;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
LABEL_18:
    v21 = sub_1002D34F4((uint64_t)*v2);
    v22 = *v2[1];
    buf[0].n128_u32[0] = 134218240;
    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v21;
    buf[0].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Writing tile header BLOB with version %lld (locally %llu)", (uint8_t *)buf, 0x16u);
  }
LABEL_19:

  sub_100080F20((sqlite3 **)v3[5], "tile_data", "headers", *v2[1], 1, v75);
  v23 = sub_1002D34F4((uint64_t)*v2);
  std::to_string(&v79, v23);
  v24 = std::string::insert(&v79, 0, "tile header with version ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v80, " (locally ");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v78, *v2[1]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v78;
  else
    v28 = (std::string *)v78.__r_.__value_.__r.__words[0];
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  else
    v29 = v78.__r_.__value_.__l.__size_;
  v30 = std::string::append(&__dst, (const std::string::value_type *)v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v74, ")");
  v33 = v32->__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
  v85.__r_.__value_.__r.__words[0] = v32->__r_.__value_.__l.__size_;
  v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v35 = *v2;
  v76.__r_.__value_.__r.__words[0] = v33;
  v76.__r_.__value_.__l.__size_ = v85.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = v34;
  *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 7) = 0;
  v85.__r_.__value_.__r.__words[0] = 0;
  sub_1002698A0(buf, (__n128 *)&v76, (unint64_t)v75[0]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83, (wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf, -1);
  sub_1002CFC60(v35);
  if ((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::Flush((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83) & 1) == 0)
  {
    sub_100342FA8();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 188, "writeBlob");
    goto LABEL_115;
  }
  wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83);
  if (v87 < 0)
  {
    operator delete((void *)buf[1].n128_u64[0]);
    wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_69;
    }
  }
  else
  {
    wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v78.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  operator delete(v80.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if (qword_100417F08 == -1)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v79.__r_.__value_.__l.__data_);
  if (qword_100417F08 == -1)
  {
LABEL_35:
    v36 = (id)qword_100417F10;
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_73:
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v36 = (id)qword_100417F10;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
LABEL_36:
    v37 = sub_1002D34F4((uint64_t)*v2);
    v38 = *v2[1];
    buf[0].n128_u32[0] = 134218240;
    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v37;
    buf[0].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v38;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Writing tile data BLOB with version %lld (locally %llu)", (uint8_t *)buf, 0x16u);
  }
LABEL_37:

  sub_100080F20((sqlite3 **)v3[5], "tile_data", "tiles", *v2[1], 1, (sqlite3_blob **)&v83);
  v39 = v75[0];
  v75[0] = (sqlite3_blob *)v83.__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  v40 = sqlite3_blob_close(v39);
  if (v40)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v41 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_41;
      goto LABEL_40;
    }
    v41 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_40:
      buf[0].n128_u32[0] = 67240192;
      buf[0].n128_u32[1] = v40;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)buf, 8u);
    }
  }
LABEL_41:
  v42 = sub_1002D34F4((uint64_t)*v2);
  std::to_string(&v79, v42);
  v43 = std::string::insert(&v79, 0, "tile data with version ");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = std::string::append(&v80, " (locally ");
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v78, *v2[1]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v78;
  else
    v47 = (std::string *)v78.__r_.__value_.__r.__words[0];
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  else
    v48 = v78.__r_.__value_.__l.__size_;
  v49 = std::string::append(&__dst, (const std::string::value_type *)v47, v48);
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v51 = std::string::append(&v74, ")");
  v52 = v51->__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v84 + 7) = *(std::string::size_type *)((char *)&v51->__r_.__value_.__r.__words[1] + 7);
  v84[0] = v51->__r_.__value_.__l.__size_;
  v53 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v54 = (uint64_t)v2[3];
  v76.__r_.__value_.__r.__words[0] = v52;
  v76.__r_.__value_.__l.__size_ = v84[0];
  *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v84 + 7);
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = v53;
  memset(v84, 0, 15);
  sub_1002698A0(buf, (__n128 *)&v76, (unint64_t)v75[0]);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83, (wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf, -1);
  sub_1002D4960(v54, (uint64_t)&v83);
  if ((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::Flush((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83) & 1) != 0)
  {
    wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingOutputStreamAdaptor *)&v83);
    if (v87 < 0)
    {
      operator delete((void *)buf[1].n128_u64[0]);
      wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_52:
        if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_53;
        goto LABEL_77;
      }
    }
    else
    {
      wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)buf);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_52;
    }
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
      goto LABEL_78;
    }
LABEL_77:
    operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_79;
    }
LABEL_78:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_80;
    }
LABEL_79:
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if (qword_100417F08 == -1)
        goto LABEL_57;
      goto LABEL_81;
    }
LABEL_80:
    operator delete(v79.__r_.__value_.__l.__data_);
    if (qword_100417F08 == -1)
    {
LABEL_57:
      v55 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_59;
      goto LABEL_58;
    }
LABEL_81:
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v55 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
    {
LABEL_59:
      v57 = sqlite3_blob_close(v75[0]);
      if (v57)
      {
        if (qword_100417F08 != -1)
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v58 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
            goto LABEL_63;
          goto LABEL_62;
        }
        v58 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        {
LABEL_62:
          buf[0].n128_u32[0] = 67240192;
          buf[0].n128_u32[1] = v57;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)buf, 8u);
        }
      }
LABEL_63:
      std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
      return;
    }
LABEL_58:
    v56 = *v2[1];
    buf[0].n128_u32[0] = 134217984;
    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Tile with version %llu saved successfully", (uint8_t *)buf, 0xCu);
    goto LABEL_59;
  }
  sub_1003430EC(v77);

  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 188, "writeBlob");
LABEL_115:
  __break(1u);
}

void sub_1001FC688(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,sqlite3_blob *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  std::runtime_error a66;
  char a70;
  std::runtime_error a71;
  void *a72;
  char a73;
  void *a74;
  void *a75;
  char a76;
  uint64_t v76;
  std::runtime_error *v77;
  uint64_t v78;
  uint64_t v80;
  void *v81;
  std::promise<void> *v82;
  std::exception_ptr v83;

  if (!a2)
    _Unwind_Resume(a1);
  std::runtime_error::~runtime_error(v77);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_4:
      if ((a42 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(a16);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a35 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a37);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_6:
    a74 = off_1003FC7C0;
    if ((a76 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a30);
  a74 = off_1003FC7C0;
  if ((a76 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a48 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a75);
  if ((a48 & 0x80000000) == 0)
  {
LABEL_8:
    *(_QWORD *)(v78 - 160) = &off_1003EDD90;
    v80 = *(_QWORD *)(v78 - 152);
    if (!v80)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a43);
  *(_QWORD *)(v78 - 160) = &off_1003EDD90;
  v80 = *(_QWORD *)(v78 - 152);
  if (!v80)
    goto LABEL_18;
LABEL_16:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80))
    *(_QWORD *)(v78 - 152) = 0;
LABEL_18:
  std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 176));
  v81 = *(void **)(v78 - 232);
  if (v81)
  {
    *(_QWORD *)(v78 - 224) = v81;
    operator delete(v81);
  }
  std::runtime_error::~runtime_error(&a71);
  if (a70 < 0)
    operator delete(a66.__vftable);
  if (*(char *)(v78 - 185) < 0)
    operator delete(*(void **)(v78 - 208));
  if (a64 < 0)
    operator delete(a59);
  if (a58 < 0)
    operator delete(a53);
  __cxa_free_exception(v77);
  if (a73 < 0)
    operator delete(a72);
  sub_1001FE0E8((uint64_t)&a13);

  __cxa_begin_catch(a1);
  v82 = *(std::promise<void> **)(v76 + 40);
  std::current_exception();
  v83.__ptr_ = &a12;
  std::promise<void>::set_exception(v82, v83);
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  JUMPOUT(0x1001FBA08);
}

void sub_1001FCF34(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 0UL, nQueries = 3UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_1001FD238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001FD460(v68);

            _Unwind_Resume(a1);
          }
          sub_1001FD460(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_1001FD460(uint64_t a1)
{
  sub_1001FE0E8(a1);

  return a1;
}

void sub_1001FD490(sqlite3_stmt **a1, int a2, unint64_t a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<0, 3>::bind(int, uint64_t) [nCols = 0, nQueries = 3, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 425, (uint64_t)v24);
  }
}

void sub_1001FD7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_1001FDABC(sqlite3_stmt **a1, int a2, int a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_zeroblob(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind zero blob of size ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<0, 3>::bind_zeroblob(int, int) [nCols = 0, nQueries = 3, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 479, (uint64_t)v24);
  }
}

void sub_1001FDDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_1001FE0E8(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_1001FE2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001FE2CC(uint64_t a1)
{
  uint64_t *v1;
  sqlite3 **v2;
  std::string *v3;
  __int128 v4;
  char *v5;
  char *v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *i;
  uint64_t v10;
  sqlite3_int64 v11;
  sqlite3_int64 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  sqlite3_int64 *v17;
  unint64_t v18;
  char *v19;
  sqlite3_int64 v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  sqlite3_int64 *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  NSObject *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  _OWORD *v41;
  __int128 v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type size;
  std::string *v58;
  __int128 v59;
  int *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  uint64_t *v67;
  uint64_t v68;
  void *__p[2];
  char *v70;
  sqlite3_int64 *v71;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v74;
  sqlite3_blob *v75;
  std::string v76;
  _BYTE v77[24];
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::runtime_error v82;
  std::string __dst;
  std::string v84;
  __int128 buf;
  std::string::size_type v86;

  v1 = *(uint64_t **)(a1 + 32);
  v70 = 0;
  *(_OWORD *)__p = 0uLL;
  v68 = **(_QWORD **)(a1 + 40);
  v2 = *(sqlite3 ***)(v68 + 40);
  *((_BYTE *)&v84.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&v84, "SELECT rowid FROM ");
  v3 = std::string::append(&v84, "venues");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v86 = v3->__r_.__value_.__r.__words[2];
  buf = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_100032CE0(v2, (uint64_t)&buf, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v86) < 0)
  {
    operator delete((void *)buf);
    v67 = v1;
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_47:
    operator delete(v84.__r_.__value_.__l.__data_);
    goto LABEL_3;
  }
  v67 = v1;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_47;
LABEL_3:
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v71 = 0;
  v8 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    v11 = sqlite3_step(i);
    v12 = v11;
    if ((_DWORD)v11 == 100)
    {
      if (sqlite3_column_type(v8, 0) != 5)
        v12 = sqlite3_column_int64(v8, 0);
      if (v7 < v6)
      {
        *(_QWORD *)v7 = v12;
        v10 = (uint64_t)(v7 + 8);
LABEL_5:
        v7 = (char *)v10;
        continue;
      }
      v13 = (v7 - v5) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        sub_1000D02C0();
      if ((v6 - v5) >> 2 > v14)
        v14 = (v6 - v5) >> 2;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
      {
        if (v15 >> 61)
          sub_1000CDEB8();
        v16 = operator new(8 * v15);
        v17 = (sqlite3_int64 *)&v16[8 * v13];
        *v17 = v12;
        v10 = (uint64_t)(v17 + 1);
        if (v7 == v5)
          goto LABEL_29;
      }
      else
      {
        v16 = 0;
        v17 = (sqlite3_int64 *)(8 * v13);
        *(_QWORD *)(8 * v13) = v12;
        v10 = 8 * v13 + 8;
        if (v7 == v5)
          goto LABEL_29;
      }
      v18 = v7 - 8 - v5;
      if (v18 >= 0x168)
      {
        if (&v16[v7 - v5 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v7 - v5 - 8])
        {
          v19 = v7;
        }
        else if (&v7[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
        {
          v19 = v7;
        }
        else if ((unint64_t)(v5 - v16) >= 0x20)
        {
          v21 = (v18 >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v7[-v22];
          v17 = (sqlite3_int64 *)((char *)v17 - v22);
          v23 = &v16[8 * v13 - 16];
          v24 = v7 - 16;
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_29;
        }
        else
        {
          v19 = v7;
        }
      }
      else
      {
        v19 = v7;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v20;
      }
      while (v19 != v5);
LABEL_29:
      v6 = &v16[8 * v15];
      v71 = v17;
      if (v5)
        operator delete(v5);
      v5 = (char *)v17;
      goto LABEL_5;
    }
    if ((_DWORD)v11 == 101)
      break;
    if (v11 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v52 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_99;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v52 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_99:
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v76.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v81, &v76);
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v75);
      sub_1001F9F6C((std::runtime_error *)&v81, (uint64_t)"auto db::resources::statement<1, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1178:18) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v75);
    }
    sub_10008B9C4(v11, db);
    if ((_DWORD)v12)
    {
      v53 = __error();
      sub_10025FF8C(*v53, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v79, " w/ ");
      v54 = std::string::insert(&v79, 0, "Failed sqlite3_step");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v78, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v78 = __dst;
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v78;
      else
        v56 = (std::string *)v78.__r_.__value_.__r.__words[0];
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      else
        size = v78.__r_.__value_.__l.__size_;
      v58 = std::string::append(&v80, (const std::string::value_type *)v56, size);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v82, &v81);
      v82.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v77);
      sub_1001F2298(&v82, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1178:18), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v77);
    }
  }
  v27 = sqlite3_reset(pStmt);
  sub_10008B9C4(v27, db);
  if (v27)
  {
    v60 = __error();
    sub_10025FF8C(*v60, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v79.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v79, " w/ ");
    v61 = std::string::insert(&v79, 0, "Failed to execute query");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v78, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v78 = __dst;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v78;
    else
      v63 = (std::string *)v78.__r_.__value_.__r.__words[0];
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    else
      v64 = v78.__r_.__value_.__l.__size_;
    v65 = std::string::append(&v80, (const std::string::value_type *)v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v82, &v81);
    v82.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v77);
    sub_1001F2298(&v82, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1178:18), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v77);
  }
  v28 = v71;
  v29 = v7 - (char *)v71;
  v30 = (v7 - (char *)v71) >> 3;
  if (v30)
  {
    if (v29 >= 0x7FFFFFFFFFFFFFF9)
      sub_1000D02C0();
    __p[0] = operator new(2 * v29);
    __p[1] = __p[0];
    v70 = (char *)__p[0] + 16 * v30;
  }
  if (v71 != (sqlite3_int64 *)v7)
  {
    while (1)
    {
      if (byte_10041A057 >= 0)
        v31 = (const char *)&qword_10041A040;
      else
        v31 = (const char *)qword_10041A040;
      sub_100080F20(*(sqlite3 ***)(v68 + 40), "venues", v31, *v28, 1, &v75);
      sub_100081318((uint64_t)&v84, v75);
      wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&v84, -1);
      sub_100081570(&v76, &buf);
      wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
      wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&v84);
      v32 = sqlite3_blob_close(v75);
      if (!v32)
        goto LABEL_59;
      if (qword_100417F08 != -1)
        break;
      v33 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_58;
LABEL_59:
      v34 = __p[1];
      if (__p[1] < v70)
      {
        *(_OWORD *)__p[1] = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
        __p[1] = (char *)__p[1] + 16;
      }
      else
      {
        v35 = ((char *)__p[1] - (char *)__p[0]) >> 4;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 60)
          sub_1000D02C0();
        v37 = v70 - (char *)__p[0];
        if ((v70 - (char *)__p[0]) >> 3 > v36)
          v36 = v37 >> 3;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
          v38 = 0xFFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 60)
            sub_1000CDEB8();
          v39 = (char *)operator new(16 * v38);
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[16 * v35];
        *(_OWORD *)v40 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
        v41 = v40 + 16;
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = 0uLL;
        if (__p[1] == __p[0])
        {
          __p[0] = v40;
          v70 = &v39[16 * v38];
        }
        else
        {
          do
          {
            v42 = *((_OWORD *)v34 - 1);
            v34 -= 2;
            *((_OWORD *)v40 - 1) = v42;
            v40 -= 16;
            *v34 = 0;
            v34[1] = 0;
          }
          while (v34 != __p[0]);
          v43 = __p[1];
          v34 = __p[0];
          __p[0] = v40;
          v70 = &v39[16 * v38];
          while (v43 != v34)
          {
            v44 = (std::__shared_weak_count *)*(v43 - 1);
            if (v44)
            {
              p_shared_owners = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            v43 -= 2;
          }
        }
        if (v34)
          operator delete(v34);
        v47 = (std::__shared_weak_count *)v76.__r_.__value_.__l.__size_;
        __p[1] = v41;
        if (v76.__r_.__value_.__l.__size_)
        {
          v48 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      if (++v28 == (sqlite3_int64 *)v7)
      {
        v7 = (char *)v71;
        goto LABEL_91;
      }
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v33 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_59;
LABEL_58:
    LODWORD(buf) = 67240192;
    DWORD1(buf) = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    goto LABEL_59;
  }
LABEL_91:
  if (v7)
    operator delete(v7);
  sub_10003320C((uint64_t)&pStmt);

  v50 = *v67;
  if (!*v67)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v50 + 24));
  if ((*(_BYTE *)(v50 + 136) & 1) != 0
    || (*(_QWORD *)&buf = 0,
        v51 = *(_QWORD *)(v50 + 16),
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&buf),
        v51))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v50 + 144) = *(_OWORD *)__p;
  *(_QWORD *)(v50 + 160) = v70;
  *(_DWORD *)(v50 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v50 + 88));
  std::mutex::unlock((std::mutex *)(v50 + 24));
}

void sub_1001FF528(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,sqlite3_blob *a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a71;
  void *a72;
  char a73;
  std::runtime_error a74;
  char a75;
  uint64_t v75;
  std::runtime_error *v76;
  uint64_t v77;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__assoc_sub_state **v86;
  std::__assoc_sub_state *v87;
  std::exception_ptr v88;

  if (!a2)
    _Unwind_Resume(a1);
  std::runtime_error::~runtime_error(v76);
  if (a37 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_4:
      if ((a50 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(a25);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a43 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a45);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_6:
    *(_QWORD *)(v77 - 208) = v75;
    if ((*(char *)(v77 - 177) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a38);
  *(_QWORD *)(v77 - 208) = v75;
  if ((*(char *)(v77 - 177) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a56 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v77 - 200));
  if ((a56 & 0x80000000) == 0)
  {
LABEL_8:
    *(_QWORD *)(v77 - 160) = &off_1003EDD90;
    v79 = *(_QWORD *)(v77 - 152);
    if (!v79)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a51);
  *(_QWORD *)(v77 - 160) = &off_1003EDD90;
  v79 = *(_QWORD *)(v77 - 152);
  if (!v79)
    goto LABEL_18;
LABEL_16:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 32))(v79))
    *(_QWORD *)(v77 - 152) = 0;
LABEL_18:
  std::runtime_error::~runtime_error((std::runtime_error *)(v77 - 176));
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v77 - 248));
  if (a75 < 0)
    operator delete(a74.__vftable);
  if (a69 < 0)
    operator delete(a64);
  if (a73 < 0)
    operator delete(a72);
  if (a71 < 0)
    operator delete(a70);
  __cxa_free_exception(v76);
  if (*(char *)(v77 - 209) < 0)
    operator delete(*(void **)(v77 - 232));
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  sub_10003320C((uint64_t)&a22);

  v80 = a15;
  if (a15)
  {
    v81 = a16;
    v82 = a15;
    if ((void *)a16 != a15)
    {
      do
      {
        v83 = *(std::__shared_weak_count **)(v81 - 8);
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(p_shared_owners);
          while (__stlxr(v85 - 1, p_shared_owners));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v81 -= 16;
      }
      while ((void *)v81 != v80);
      v82 = a15;
    }
    a16 = (uint64_t)v80;
    operator delete(v82);
  }
  __cxa_begin_catch(a1);
  v86 = *(std::__assoc_sub_state ***)(a9 + 32);
  std::current_exception();
  v87 = *v86;
  if (v87)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)(v77 - 176), &a14);
    v88.__ptr_ = (void *)(v77 - 176);
    std::__assoc_sub_state::set_exception(v87, v88);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v77 - 176));
    std::exception_ptr::~exception_ptr(&a14);
    __cxa_end_catch();
    JUMPOUT(0x1001FEA20);
  }
  sub_1000D3E20(3u);
}

void sub_1001FFDC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14)
{
  std::exception_ptr::~exception_ptr(&a14);
  __cxa_end_catch();
  JUMPOUT(0x1001FFCBCLL);
}

void sub_1001FFDF4(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1001FFE40(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1001FFEA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1001FFF48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_1001FFFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_10020001C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100200108(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x100200064);
}

void sub_100200144(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  sqlite3_int64 v4;
  const char *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  _BYTE v14[24];
  sqlite3_blob *v15;
  std::exception_ptr buf;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v4 = sub_100082B28(*v1, v1[1]);
  if (byte_10041A057 >= 0)
    v5 = (const char *)&qword_10041A040;
  else
    v5 = (const char *)qword_10041A040;
  sub_100080F20(*(sqlite3 ***)(v3 + 40), "venues", v5, v4, 1, &v15);
  sub_100081318((uint64_t)v14, v15);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v14, -1);
  sub_100081570(&v13, &buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v14);
  v6 = sqlite3_blob_close(v15);
  if (v6)
  {
    if (qword_100417F08 == -1)
    {
      v7 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_8;
      goto LABEL_7;
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v7 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_7:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_8:
  v8 = *v2;
  if (!*v2)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v8 + 24));
  if ((*(_BYTE *)(v8 + 136) & 1) != 0
    || (buf.__ptr_ = 0, v9 = *(_QWORD *)(v8 + 16), std::exception_ptr::~exception_ptr(&buf), v9))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v8 + 144) = v13;
  v13 = 0uLL;
  *(_DWORD *)(v8 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
  std::mutex::unlock((std::mutex *)(v8 + 24));
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10020036C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1000CDD68(exception_object);
}

void sub_100200384(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, sqlite3_blob *a16, std::exception_ptr buf)
{
  uint64_t v17;
  int v19;
  NSObject *v20;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;

  if (!a2)
    JUMPOUT(0x100200374);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&a13);
  v19 = sqlite3_blob_close(a16);
  if (v19)
  {
    if (qword_100417F08 == -1)
    {
      v20 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
      goto LABEL_5;
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v20 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_7:
  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v17 + 32);
  std::current_exception();
  v22 = *v21;
  if (v22)
  {
    std::exception_ptr::exception_ptr(&buf, &a10);
    v23.__ptr_ = &buf;
    std::__assoc_sub_state::set_exception(v22, v23);
    std::exception_ptr::~exception_ptr(&buf);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x1002002F0);
  }
  sub_1000D3E20(3u);
}

void sub_100200510(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100200374);
}

void sub_10020053C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

sqlite3_blob **sub_100200588(sqlite3_blob **a1)
{
  int v2;
  NSObject *v3;
  _DWORD v5[2];

  v2 = sqlite3_blob_close(*a1);
  if (v2)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v3 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        return a1;
      goto LABEL_4;
    }
    v3 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      v5[0] = 67240192;
      v5[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)v5, 8u);
    }
  }
  return a1;
}

void sub_100200680(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000CDD68(a1);
}

void sub_10020068C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  sqlite3 **v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  sqlite3_blob *v14;
  std::exception_ptr buf;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v4 = sub_100083EBC(*v1, v1[1]);
  sub_100080F20(*(sqlite3 ***)(v3 + 40), "tile_data", "headers", (sqlite3_int64)v4, 1, &v14);
  sub_100081318((uint64_t)v13, v14);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v13, -1);
  sub_10008A350(&v12, &buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v13);
  v5 = sqlite3_blob_close(v14);
  if (v5)
  {
    if (qword_100417F08 == -1)
    {
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      goto LABEL_4;
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v6 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_5:
  v7 = *v2;
  if (!*v2)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v7 + 24));
  if ((*(_BYTE *)(v7 + 136) & 1) != 0
    || (buf.__ptr_ = 0, v8 = *(_QWORD *)(v7 + 16), std::exception_ptr::~exception_ptr(&buf), v8))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v7 + 144) = v12;
  v12 = 0uLL;
  *(_DWORD *)(v7 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v7 + 88));
  std::mutex::unlock((std::mutex *)(v7 + 24));
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1002008A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1000CDD68(exception_object);
}

void sub_1002008BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, sqlite3_blob *a16, std::exception_ptr buf)
{
  uint64_t v17;
  int v19;
  NSObject *v20;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;

  if (!a2)
    JUMPOUT(0x1002008ACLL);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)&buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)&a13);
  v19 = sqlite3_blob_close(a16);
  if (v19)
  {
    if (qword_100417F08 == -1)
    {
      v20 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
      goto LABEL_5;
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v20 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      LODWORD(buf.__ptr_) = 67240192;
      HIDWORD(buf.__ptr_) = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_7:
  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v17 + 32);
  std::current_exception();
  v22 = *v21;
  if (v22)
  {
    std::exception_ptr::exception_ptr(&buf, &a10);
    v23.__ptr_ = &buf;
    std::__assoc_sub_state::set_exception(v22, v23);
    std::exception_ptr::~exception_ptr(&buf);
    std::exception_ptr::~exception_ptr(&a10);
    __cxa_end_catch();
    JUMPOUT(0x100200828);
  }
  sub_1000D3E20(3u);
}

void sub_100200A48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1002008ACLL);
}

void sub_100200A74(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

int *sub_100200AC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  sqlite3 **v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  std::exception_ptr v16;

  v2 = *(uint64_t **)(a1 + 32);
  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v4 = sub_100083EBC(*v1, v1[1]);
  sub_1001F19E8(v3, (sqlite3_int64)v4, &v12);
  v5 = *v2;
  if (!v5)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v5 + 24));
  if ((*(_BYTE *)(v5 + 136) & 1) != 0
    || (v16.__ptr_ = 0, v6 = *(_QWORD *)(v5 + 16), std::exception_ptr::~exception_ptr(&v16), v6))
  {
    sub_1000D3E20(2u);
  }
  sub_100068AD4((_DWORD *)(v5 + 144), &v12);
  *(_QWORD *)(v5 + 152) = v13;
  *(_DWORD *)(v5 + 160) = v14;
  *(_OWORD *)(v5 + 168) = v15;
  v13 = 0;
  v15 = 0uLL;
  *(_DWORD *)(v5 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v5 + 88));
  std::mutex::unlock((std::mutex *)(v5 + 24));
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return sub_100068888(&v12);
}

void sub_100200BFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  std::mutex *v23;
  uint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__assoc_sub_state **v28;
  std::__assoc_sub_state *v29;
  std::exception_ptr v30;
  std::exception_ptr v31;
  std::exception_ptr v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  std::mutex::unlock(v23);
  if (v34)
  {
    p_shared_owners = &v34->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v26 - 1, (unint64_t *)p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v27 = v33;
  v33 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_100068888((int *)&v32);
  __cxa_begin_catch(a1);
  v28 = *(std::__assoc_sub_state ***)(v22 + 32);
  std::current_exception();
  v29 = *v28;
  if (!v29)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(&v32, &v31);
  v30.__ptr_ = &v32;
  std::__assoc_sub_state::set_exception(v29, v30);
  std::exception_ptr::~exception_ptr(&v32);
  std::exception_ptr::~exception_ptr(&v31);
  __cxa_end_catch();
}

void sub_100200CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100200D04(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_100200D50(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_100200DB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 176);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_100068888((int *)(a1 + 144));
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_100200E44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v7, (const std::exception_ptr *)(a1 + 16));
    v6.__ptr_ = &v7;
    std::rethrow_exception(v6);
    __break(1u);
  }
  else
  {
    sub_100068AD4((_DWORD *)a2, (_DWORD *)(a1 + 144));
    v5 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_100200F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100200F2C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100201018(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x100200F74);
}

void sub_100201054(uint64_t a1)
{
  uint64_t *v1;
  sqlite3 **v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *i;
  int v13;
  int v14;
  const unsigned __int8 *v15;
  size_t v16;
  std::string::size_type v17;
  void *p_dst;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *ptr;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  int *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  uint64_t *v56;
  void *__p[2];
  char *v58;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v61;
  std::string v62;
  std::string v63;
  _BYTE v64[24];
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::runtime_error v69;
  std::string __s;
  std::string __dst;
  std::exception_ptr v72[9];

  v1 = *(uint64_t **)(a1 + 32);
  v2 = *(sqlite3 ***)(**(_QWORD **)(a1 + 40) + 40);
  v58 = 0;
  *(_OWORD *)__p = 0uLL;
  *((_BYTE *)&v62.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v62, "SELECT ");
  if (byte_100419F67 >= 0)
    v3 = (const std::string::value_type *)&qword_100419F50;
  else
    v3 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v4 = byte_100419F67;
  else
    v4 = *(_QWORD *)&byte_100419F58;
  v5 = std::string::append(&v62, v3, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__s, " FROM ");
  v7 = std::string::append(&v63, (const std::string::value_type *)&__s, 6uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&__dst, "venues");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v72[2] = (std::exception_ptr)v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72[0].__ptr_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  sub_100032CE0(v2, (uint64_t)v72, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v72[2].__ptr_) < 0)
  {
    operator delete(v72[0].__ptr_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_69;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_70:
    operator delete(v63.__r_.__value_.__l.__data_);
    v56 = v1;
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_71:
    operator delete(v62.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_69:
  operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
LABEL_11:
  v56 = v1;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_71;
LABEL_12:
  v11 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    v13 = sqlite3_step(i);
    v14 = v13;
    if (v13 != 100)
      break;
    if (sqlite3_column_type(v11, 0) != 5)
    {
      v15 = sqlite3_column_text(v11, 0);
      v16 = strlen((const char *)v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        sub_1000CDE30();
      v17 = v16;
      if (v16 >= 0x17)
      {
        v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v19 = v16 | 7;
        v20 = v19 + 1;
        p_dst = operator new(v19 + 1);
        __dst.__r_.__value_.__l.__size_ = v17;
        __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
        p_dst = &__dst;
        if (!v16)
          goto LABEL_29;
      }
      memmove(p_dst, v15, v17);
LABEL_29:
      *((_BYTE *)p_dst + v17) = 0;
      *(_OWORD *)((char *)&v72[0].__ptr_ + 7) = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void **)((char *)&v72[2].__ptr_ + 7) = (void *)__dst.__r_.__value_.__r.__words[2];
    }
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)&v72[0].__ptr_ + 7);
    v63.__r_.__value_.__r.__words[2] = *(std::string::size_type *)((char *)&v72[2].__ptr_ + 7);
    sub_10008930C(v72, (uint64_t)&v63);
    v21 = __p[1];
    if (__p[1] < v58)
    {
      *(_OWORD *)__p[1] = *(_OWORD *)&v72[0].__ptr_;
      __p[1] = (char *)__p[1] + 16;
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
      goto LABEL_32;
    }
    v22 = ((char *)__p[1] - (char *)__p[0]) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      sub_1000D02C0();
    v24 = v58 - (char *)__p[0];
    if ((v58 - (char *)__p[0]) >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 60)
        sub_1000CDEB8();
      v26 = (char *)operator new(16 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[16 * v22];
    *(_OWORD *)v27 = *(_OWORD *)&v72[0].__ptr_;
    v28 = v27 + 16;
    v29 = &v26[16 * v25];
    v72[0].__ptr_ = 0;
    v72[1].__ptr_ = 0;
    if (__p[1] == __p[0])
    {
      __p[0] = v27;
      v58 = &v26[16 * v25];
    }
    else
    {
      do
      {
        v30 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *((_OWORD *)v27 - 1) = v30;
        v27 -= 16;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != __p[0]);
      v31 = __p[1];
      v21 = __p[0];
      __p[0] = v27;
      v58 = v29;
      while (v31 != v21)
      {
        v32 = (std::__shared_weak_count *)*(v31 - 1);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v31 -= 2;
      }
    }
    if (v21)
      operator delete(v21);
    ptr = (std::__shared_weak_count *)v72[1].__ptr_;
    __p[1] = v28;
    if (!v72[1].__ptr_)
      goto LABEL_13;
    v36 = (unint64_t *)((char *)v72[1].__ptr_ + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (v37)
    {
LABEL_13:
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
LABEL_32:
      operator delete(v63.__r_.__value_.__l.__data_);
      continue;
    }
    ((void (*)(std::__shared_weak_count *))ptr->__on_zero_shared)(ptr);
    std::__shared_weak_count::__release_weak(ptr);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
LABEL_14:
    ;
  }
  if (v13 != 101)
  {
    if (v13 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v41 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_74;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v41 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_74:
          LOWORD(v72[0].__ptr_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)v72, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v63.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v68, &v63);
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v62);
      sub_1001F9F6C((std::runtime_error *)&v68, (uint64_t)"auto db::resources::statement<1, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1261:18) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v62);
    }
    sub_10008B9C4(v13, db);
    if (v14)
    {
      v42 = __error();
      sub_10025FF8C(*v42, &__s);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v66.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v66, " w/ ");
      v43 = std::string::insert(&v66, 0, "Failed sqlite3_step");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v65, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v65 = __s;
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v65;
      else
        v45 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      else
        size = v65.__r_.__value_.__l.__size_;
      v47 = std::string::append(&v67, (const std::string::value_type *)v45, size);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v69, &v68);
      v69.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v64);
      sub_1001F2298(&v69, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1261:18), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v64);
    }
    goto LABEL_14;
  }
  v38 = sqlite3_reset(pStmt);
  sub_10008B9C4(v38, db);
  if (v38)
  {
    v49 = __error();
    sub_10025FF8C(*v49, &__s);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v66.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v66, " w/ ");
    v50 = std::string::insert(&v66, 0, "Failed to execute query");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v65, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v65 = __s;
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v65;
    else
      v52 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      v53 = v65.__r_.__value_.__l.__size_;
    v54 = std::string::append(&v67, (const std::string::value_type *)v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v69, &v68);
    v69.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v64);
    sub_1001F2298(&v69, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1261:18), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v64);
  }
  sub_10003320C((uint64_t)&pStmt);

  v39 = *v56;
  if (!*v56)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v39 + 24));
  if ((*(_BYTE *)(v39 + 136) & 1) != 0
    || (v72[0].__ptr_ = 0, v40 = *(_QWORD *)(v39 + 16), std::exception_ptr::~exception_ptr(v72), v40))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v39 + 144) = *(_OWORD *)__p;
  *(_QWORD *)(v39 + 160) = v58;
  *(_DWORD *)(v39 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v39 + 88));
  std::mutex::unlock((std::mutex *)(v39 + 24));
}

void sub_100202054(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a70;
  char a71;
  std::exception_ptr a72;
  char a73;
  std::runtime_error *v73;
  uint64_t v74;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__assoc_sub_state **v83;
  std::__assoc_sub_state *v84;
  std::exception_ptr v85;

  if (!a2)
    _Unwind_Resume(a1);
  std::runtime_error::~runtime_error(v73);
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_4:
      if ((a44 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(a19);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a37 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_6:
    *(_QWORD *)(v74 - 208) = off_1003FC7C0;
    if ((*(char *)(v74 - 177) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a32);
  *(_QWORD *)(v74 - 208) = off_1003FC7C0;
  if ((*(char *)(v74 - 177) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v74 - 200));
  if ((a50 & 0x80000000) == 0)
  {
LABEL_8:
    *(_QWORD *)(v74 - 160) = &off_1003EDD90;
    v76 = *(_QWORD *)(v74 - 152);
    if (!v76)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a45);
  *(_QWORD *)(v74 - 160) = &off_1003EDD90;
  v76 = *(_QWORD *)(v74 - 152);
  if (!v76)
    goto LABEL_18;
LABEL_16:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 32))(v76))
    *(_QWORD *)(v74 - 152) = 0;
LABEL_18:
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 176));
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 248));
  if (a73 < 0)
    operator delete(a72.__ptr_);
  if (a63 < 0)
    operator delete(a58);
  if (a71 < 0)
    operator delete(a70);
  if (a69 < 0)
    operator delete(a64);
  __cxa_free_exception(v73);
  if (*(char *)(v74 - 209) < 0)
    operator delete(*(void **)(v74 - 232));
  sub_10003320C((uint64_t)&a16);

  v77 = a13;
  if (a13)
  {
    v78 = a14;
    v79 = a13;
    if ((void *)a14 != a13)
    {
      do
      {
        v80 = *(std::__shared_weak_count **)(v78 - 8);
        if (v80)
        {
          p_shared_owners = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v78 -= 16;
      }
      while ((void *)v78 != v77);
      v79 = a13;
    }
    a14 = (uint64_t)v77;
    operator delete(v79);
  }
  __cxa_begin_catch(a1);
  v83 = *(std::__assoc_sub_state ***)(a10 + 32);
  std::current_exception();
  v84 = *v83;
  if (v84)
  {
    std::exception_ptr::exception_ptr(&a72, &a12);
    v85.__ptr_ = &a72;
    std::__assoc_sub_state::set_exception(v84, v85);
    std::exception_ptr::~exception_ptr(&a72);
    std::exception_ptr::~exception_ptr(&a12);
    __cxa_end_catch();
    JUMPOUT(0x100201540);
  }
  sub_1000D3E20(3u);
}

void sub_1002028A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::exception_ptr a53)
{
  std::exception_ptr::~exception_ptr(&a12);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1002028D8(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_100202924(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_100202984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

double sub_100202A2C@<D0>(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  const unsigned __int8 *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  __int128 __dst;
  unint64_t v12;

  if (sqlite3_column_type(*a1, 0) == 5)
  {
    *(_BYTE *)a2 = 0;
    return result;
  }
  v5 = sqlite3_column_text(*a1, 0);
  v6 = strlen((const char *)v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v6;
    p_dst = &__dst;
    if (!v6)
      goto LABEL_11;
  }
  memmove(p_dst, v5, v7);
LABEL_11:
  *((_BYTE *)p_dst + v7) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)(a2 + 8) = __dst;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

void sub_100202B34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_100202BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100202C08(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100202CF4(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x100202C50);
}

void sub_100202D30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  sqlite3 **v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p[2];
  char *v23;
  sqlite3_blob *v24;
  uint8_t buf[8];

  v1 = *(uint64_t **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)v2;
  v4 = (_QWORD *)(*(_QWORD *)v2 + 56);
  if ((sub_1002BAC34(v4, *(uint64_t ****)(v2 + 8), *(uint64_t **)(v2 + 16)) & 1) != 0)
  {
    v5 = sub_100083EBC(v3, *(_QWORD *)(v2 + 8));
    sub_100080F20(*(sqlite3 ***)(v3 + 40), "tile_data", "tiles", (sqlite3_int64)v5, 1, &v24);
    sub_1002BAAD8(v4, *(uint64_t ****)(v2 + 8), *(_QWORD **)(v2 + 16), &v24, (uint64_t *)__p);
    v6 = sqlite3_blob_close(v24);
    if (!v6)
      goto LABEL_9;
    if (qword_100417F08 == -1)
    {
      v7 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      goto LABEL_5;
    }
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v7 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", buf, 8u);
    }
  }
  else
  {
    v8 = **(_QWORD **)(v2 + 16);
    v9 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
    v10 = v9 - v8;
    if (v9 != v8)
    {
      if (v10 < 0)
        sub_1000D02C0();
      v11 = (char *)operator new((unint64_t)v10 >> 1);
      v12 = 16 * (v10 >> 5);
      v13 = &v11[v12];
      __p[0] = v11;
      v23 = &v11[v12];
      bzero(v11, v12);
      __p[1] = v13;
    }
  }
LABEL_9:
  v14 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v14 + 24));
  if ((*(_BYTE *)(v14 + 136) & 1) != 0
    || (*(_QWORD *)buf = 0,
        v15 = *(_QWORD *)(v14 + 16),
        std::exception_ptr::~exception_ptr((std::exception_ptr *)buf),
        v15))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v14 + 144) = *(_OWORD *)__p;
  *(_QWORD *)(v14 + 160) = v23;
  __p[1] = 0;
  v23 = 0;
  __p[0] = 0;
  *(_DWORD *)(v14 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
  std::mutex::unlock((std::mutex *)(v14 + 24));
  v16 = (char *)__p[0];
  if (__p[0])
  {
    v17 = (char *)__p[1];
    v18 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = __p[0];
    }
    __p[1] = v16;
    operator delete(v18);
  }
}

void sub_100202FD8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1000CDD68(exception_object);
}

void sub_100202FF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, sqlite3_blob *a14)
{
  uint64_t v14;
  int v16;
  std::__assoc_sub_state **v17;
  std::__assoc_sub_state *v18;
  std::exception_ptr v19;

  if (a2)
  {
    v16 = sqlite3_blob_close(a14);
    sub_100343290(v16);
    __cxa_begin_catch(a1);
    v17 = *(std::__assoc_sub_state ***)(v14 + 32);
    std::current_exception();
    v18 = *v17;
    if (v18)
    {
      std::exception_ptr::exception_ptr(&a11, &a10);
      v19.__ptr_ = &a11;
      std::__assoc_sub_state::set_exception(v18, v19);
      std::exception_ptr::~exception_ptr(&a11);
      std::exception_ptr::~exception_ptr(&a10);
      __cxa_end_catch();
      JUMPOUT(0x100202F4CLL);
    }
    sub_1000D3E20(3u);
  }
  JUMPOUT(0x100202FE0);
}

void sub_100203124(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x100202FE0);
}

void sub_100203150(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_10020319C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1002031FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1002032A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_10020334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100203378(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100203464(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1002033C0);
}

void sub_1002034A0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  sqlite3 **v4;
  int v5;
  NSObject *v6;
  sqlite3_blob *v7;
  uint8_t buf[4];
  int v9;

  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  v4 = sub_100083EBC(*v2, v2[1]);
  sub_100080F20(*(sqlite3 ***)(v3 + 40), "tile_data", "tiles", (sqlite3_int64)v4, 1, &v7);
  sub_10008F024(v3 + 56, (char **)v2[1], &v7);
  v5 = sqlite3_blob_close(v7);
  if (v5)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      goto LABEL_4;
    }
    v6 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      *(_DWORD *)buf = 67240192;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", buf, 8u);
    }
  }
LABEL_5:
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1002035E8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1000CDD68(exception_object);
}

void sub_100203600(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, sqlite3_blob *a10)
{
  uint64_t v10;
  int v12;
  std::promise<void> *v13;
  std::exception_ptr v14;

  if (a2)
  {
    v12 = sqlite3_blob_close(a10);
    sub_100343290(v12);
    __cxa_begin_catch(a1);
    v13 = *(std::promise<void> **)(v10 + 40);
    std::current_exception();
    v14.__ptr_ = &a9;
    std::promise<void>::set_exception(v13, v14);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
    __cxa_end_catch();
    JUMPOUT(0x100203588);
  }
  JUMPOUT(0x1002035F0);
}

void sub_100203658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  JUMPOUT(0x1002035F0);
}

void sub_100203674(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  sqlite3 **v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  sqlite3_blob *v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint8_t buf[4];
  int v16;

  v2 = *(uint64_t **)(a1 + 32);
  v3 = *v2;
  v4 = sub_100083EBC(*v2, v2[1]);
  sub_100080F20(*(sqlite3 ***)(v3 + 40), "tile_data", "tiles", (sqlite3_int64)v4, 1, &v12);
  v5 = (_QWORD *)v2[2];
  v6 = (_QWORD *)v5[3];
  if (!v6)
  {
    v7 = 0;
    goto LABEL_5;
  }
  if (v6 != v5)
  {
    v7 = (*(uint64_t (**)(_QWORD))(*v6 + 16))(v5[3]);
LABEL_5:
    v14 = (_QWORD *)v7;
    goto LABEL_7;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v13);
LABEL_7:
  sub_1002BA970(v3 + 56, &v12, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_12;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
  v10 = sqlite3_blob_close(v12);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_15;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", buf, 8u);
    }
  }
LABEL_16:
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_100203838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, sqlite3_blob *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, int a16)
{
  uint64_t v16;
  int v18;
  NSObject *v19;
  std::promise<void> *v20;
  std::exception_ptr v21;

  if (!a2)
    _Unwind_Resume(exception_object);
  v18 = sqlite3_blob_close(a10);
  if (v18)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v19 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_8;
      goto LABEL_6;
    }
    v19 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_6:
      buf = 67240192;
      a16 = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to close blob (error %{public}d)", (uint8_t *)&buf, 8u);
    }
  }
LABEL_8:
  __cxa_begin_catch(exception_object);
  v20 = *(std::promise<void> **)(v16 + 40);
  std::current_exception();
  v21.__ptr_ = &a9;
  std::promise<void>::set_exception(v20, v21);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  __cxa_end_catch();
  JUMPOUT(0x1002037D8);
}

void sub_100203974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception_ptr a9)
{
  std::exception_ptr::~exception_ptr(&a9);
  __cxa_end_catch();
  JUMPOUT(0x10020384CLL);
}

void sub_10020398C(uint64_t a1)
{
  sub_10002BC6C((_QWORD *)(**(_QWORD **)(a1 + 32) + 56), *(uint64_t ****)(*(_QWORD *)(a1 + 32) + 8));
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1002039C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_100203A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100203A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003FD170;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003FD088;
  *(_QWORD *)(a1 + 16) = off_1003FD0C0;
  *(_QWORD *)(a1 + 56) = &off_1003FD0F8;
  return a1;
}

void sub_100203AB0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_100203AC4(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100203B14()
{
  operator new();
}

void sub_100203D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100203D50(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100203D6C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100203D80(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100203DD0(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_100203E34()
{
  operator new();
}

void sub_100203F08()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_100203F44(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100203A1C((uint64_t)exception, a1);
}

void sub_100203F80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100203F94(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100203FE4(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_100204048()
{
  sub_100203E34();
}

void sub_100204058(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100203A1C((uint64_t)exception, v1);
}

void sub_10020409C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002040B0(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_100204108(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_100204174(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1002041D8(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100204228(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10020428C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_1002042B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003FD288;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003FD1A0;
  *(_QWORD *)(a1 + 16) = off_1003FD1D8;
  *(_QWORD *)(a1 + 56) = &off_1003FD210;
  return a1;
}

void sub_100204344(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_100204358(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1002043A8()
{
  operator new();
}

void sub_1002045C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002045E4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100204600(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100204614(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100204664(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1002046C8()
{
  operator new();
}

void sub_10020479C()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1002047D8(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002042B0((uint64_t)exception, a1);
}

void sub_100204814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100204828(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100204878(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1002048DC()
{
  sub_1002046C8();
}

void sub_1002048EC(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002042B0((uint64_t)exception, v1);
}

void sub_100204930(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100204944(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_10020499C(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_100204A08(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_100204A6C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100204ABC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_100204B20(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_100204B44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FD2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100204B54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FD2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100204B88()
{
  operator delete();
}

_QWORD *sub_100204B9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1003FD300;
  result[1] = v3;
  return result;
}

uint64_t sub_100204BD0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1003FD300;
  a2[1] = v2;
  return result;
}

void sub_100204BEC(uint64_t a1, sqlite3_stmt **a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_100050DB0(*(_QWORD *)(a1 + 8));
  sub_100089B7C(a2, 1, v3);
}

uint64_t sub_100204C1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100204C88()
{
}

void sub_100204C98()
{
  operator delete();
}

_QWORD *sub_100204CAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1003FD390;
  result[1] = v3;
  return result;
}

uint64_t sub_100204CE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1003FD390;
  a2[1] = v2;
  return result;
}

sqlite3_int64 sub_100204CFC@<X0>(uint64_t a1@<X0>, sqlite3_stmt **a2@<X1>, sqlite3_int64 *a3@<X8>)
{
  sqlite3_int64 result;
  sqlite3_int64 *v7;
  sqlite3_int64 v8;
  sqlite3_int64 v9;
  unint64_t *v10;
  unint64_t v11;

  result = sqlite3_column_type(*a2, 0);
  if ((_DWORD)result != 5)
    result = sqlite3_column_int64(*a2, 0);
  v7 = *(sqlite3_int64 **)(a1 + 8);
  v9 = *v7;
  v8 = v7[1];
  *a3 = result;
  a3[1] = v9;
  a3[2] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

uint64_t sub_100204D74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK12SqlPrivacyDb37onQueueLookupVenueResourceInformationERK10LocationIdE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100204DE0()
{
}

void sub_100204DF0()
{
  operator delete();
}

_QWORD *sub_100204E04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1003FD420;
  result[1] = v3;
  return result;
}

uint64_t sub_100204E38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1003FD420;
  a2[1] = v2;
  return result;
}

void sub_100204E54(uint64_t a1, sqlite3_stmt **a2)
{
  sub_100204EDC(a2, 1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_100204E64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100204ED0()
{
}

void sub_100204EDC(sqlite3_stmt **a1, int a2, unint64_t a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<8, 1>::bind(int, uint64_t) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 425, (uint64_t)v24);
  }
}

void sub_100205218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_10020550C()
{
  operator delete();
}

_QWORD *sub_100205520(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1003FD4A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100205554(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1003FD4A0;
  a2[1] = v2;
  return result;
}

void sub_100205570(uint64_t a1@<X0>, sqlite3_stmt **a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v6;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;

  sub_100202A2C(a2, (uint64_t)v8);
  *(_OWORD *)__p = v9;
  v6 = v10;
  sub_10008930C(&v7, (uint64_t)__p);
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 8) = v7;
  v7 = 0uLL;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_100205610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100205638(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK12SqlPrivacyDb46onQueueLookupVenueResourceInformationByLocalIdEyE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_1002056A4()
{
}

double sub_1002056B0@<D0>(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  const unsigned __int8 *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  __int128 __dst;
  unint64_t v12;

  if (sqlite3_column_type(*a1, 1) == 5)
  {
    *(_BYTE *)a2 = 0;
    return result;
  }
  v5 = sqlite3_column_text(*a1, 1);
  v6 = strlen((const char *)v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v6;
    p_dst = &__dst;
    if (!v6)
      goto LABEL_11;
  }
  memmove(p_dst, v5, v7);
LABEL_11:
  *((_BYTE *)p_dst + v7) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)(a2 + 8) = __dst;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t sub_1002057B8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  int v10;
  int v11;
  int v12;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(__int128 *)((char *)a2 + 40);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_OWORD *)(a1 + 40) = v9;
  if (*(_BYTE *)(a1 + 64))
  {
    if (*((_BYTE *)a2 + 64))
    {
      *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
      v10 = *((unsigned __int8 *)a2 + 88);
      if (!*(_BYTE *)(a1 + 88))
        goto LABEL_19;
    }
    else
    {
      *(_BYTE *)(a1 + 64) = 0;
      v10 = *((unsigned __int8 *)a2 + 88);
      if (!*(_BYTE *)(a1 + 88))
        goto LABEL_19;
    }
LABEL_15:
    if (v10)
    {
      *(_OWORD *)(a1 + 96) = a2[6];
      v11 = *((unsigned __int8 *)a2 + 112);
      if (*(_BYTE *)(a1 + 112))
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 0;
      v11 = *((unsigned __int8 *)a2 + 112);
      if (*(_BYTE *)(a1 + 112))
        goto LABEL_22;
    }
    goto LABEL_26;
  }
  if (*((_BYTE *)a2 + 64))
  {
    *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
    *(_BYTE *)(a1 + 64) = 1;
  }
  v10 = *((unsigned __int8 *)a2 + 88);
  if (*(_BYTE *)(a1 + 88))
    goto LABEL_15;
LABEL_19:
  if (v10)
  {
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_BYTE *)(a1 + 88) = 1;
  }
  v11 = *((unsigned __int8 *)a2 + 112);
  if (*(_BYTE *)(a1 + 112))
  {
LABEL_22:
    if (v11)
    {
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      v12 = *((unsigned __int8 *)a2 + 128);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_33;
    }
    else
    {
      *(_BYTE *)(a1 + 112) = 0;
      v12 = *((unsigned __int8 *)a2 + 128);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_33;
    }
    goto LABEL_29;
  }
LABEL_26:
  if (v11)
  {
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_BYTE *)(a1 + 112) = 1;
  }
  v12 = *((unsigned __int8 *)a2 + 128);
  if (!*(_BYTE *)(a1 + 128))
  {
LABEL_33:
    if (v12)
    {
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      *(_BYTE *)(a1 + 128) = 1;
      return a1;
    }
    return a1;
  }
LABEL_29:
  if (v12)
  {
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    return a1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

void sub_10020599C(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_100205B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100205B80(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  sqlite3_stmt *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_dst;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  _BYTE v26[24];
  std::string __dst;
  _QWORD v28[2];
  unsigned __int8 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::runtime_error v36;
  std::string v37;

  v3 = a3;
  v6 = *a1;
  v7 = *((char *)a3 + 23);
  v8 = *((_DWORD *)a3 + 2);
  if (v7 >= 0)
  {
    v9 = v7;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    v9 = v8;
  }
  v10 = sqlite3_bind_text(v6, a2, (const char *)a3, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_10008B9C4(v10, a1[1]);
  if (v10)
  {
    v11 = __error();
    sub_10025FF8C(*v11, &v37);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>("Failed to bind ", v3);
    v12 = std::string::append(&v31, " to ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a2);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v30;
    else
      v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v32, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v28, " w/ ");
    if ((v29 & 0x80u) == 0)
      v18 = (const std::string::value_type *)v28;
    else
      v18 = (const std::string::value_type *)v28[0];
    if ((v29 & 0x80u) == 0)
      v19 = v29;
    else
      v19 = v28[1];
    v20 = std::string::append(&v33, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      __dst = v37;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v23 = __dst.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v34, (const std::string::value_type *)p_dst, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v36, &v35);
    v36.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v26);
    sub_1001F2298(&v36, (uint64_t)"void db::resources::statement<0, 1>::bind(int, const std::string &) [nCols = 0, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v26);
  }
}

void sub_100205EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  int v76;
  void *v77;
  uint64_t v78;
  void *v80;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v78 - 152));
    v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0)
          goto LABEL_24;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v76 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0)
            operator delete(*(void **)(v78 - 88));
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v77);
        goto LABEL_35;
      }
LABEL_33:
      if (!v76)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v78 - 152));
  v80 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_10020617C(sqlite3_stmt **a1, int a2, unint64_t a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<1, 1>::bind(int, uint64_t) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 425, (uint64_t)v24);
  }
}

void sub_1002064B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_1002067A8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v4 - 16))
            *((_BYTE *)v4 - 16) = 0;
          if (*((_BYTE *)v4 - 32))
            *((_BYTE *)v4 - 32) = 0;
          if (*((_BYTE *)v4 - 56))
            *((_BYTE *)v4 - 56) = 0;
          if (*((_BYTE *)v4 - 80))
            *((_BYTE *)v4 - 80) = 0;
          v7 = (std::__shared_weak_count *)*(v4 - 14);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v6 = v4 - 18;
          if (*((char *)v4 - 121) < 0)
            break;
          v4 -= 18;
          if (v6 == v2)
            goto LABEL_20;
        }
        operator delete(*v6);
        v4 -= 18;
      }
      while (v6 != v2);
LABEL_20:
      v10 = **a1;
      v1[1] = v2;
      operator delete(v10);
    }
  }
}

void sub_1002068C0(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_100206A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100206AA4(_QWORD *result, char a2, uint64_t a3, char a4, uint64_t a5)
{
  _QWORD *v5;
  _BYTE v6[24];
  std::string v7;
  std::runtime_error v8;

  v5 = result;
  if (a2)
  {
    if (a4)
    {
      result = sub_1000892C0(&v7, a3, a5);
      *(_OWORD *)(v5 + 1) = *(_OWORD *)&v7.__r_.__value_.__l.__data_;
      *(_BYTE *)v5 = 1;
      return result;
    }
LABEL_6:
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v7, "DB is corrupt");
    std::runtime_error::runtime_error(&v8, &v7);
    v8.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v6);
    sub_1000F2F7C(&v8, (uint64_t)"boost::optional<VenueVersion> asVenueVersion(const boost::optional<int64_t> &, const boost::optional<std::chrono::system_clock::time_point> &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 873, (uint64_t)v6);
  }
  if (a4)
    goto LABEL_6;
  *(_BYTE *)result = 0;
  return result;
}

void sub_100206B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

double sub_100206C14@<D0>(sqlite3_stmt **a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  const unsigned __int8 *v5;
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  __int128 __dst;
  unint64_t v12;

  if (sqlite3_column_type(*a1, 2) == 5)
  {
    *(_BYTE *)a2 = 0;
    return result;
  }
  v5 = sqlite3_column_text(*a1, 2);
  v6 = strlen((const char *)v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v12 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = v6;
    p_dst = &__dst;
    if (!v6)
      goto LABEL_11;
  }
  memmove(p_dst, v5, v7);
LABEL_11:
  *((_BYTE *)p_dst + v7) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)(a2 + 8) = __dst;
  *(_QWORD *)(a2 + 24) = v12;
  *(_BYTE *)a2 = 1;
  return result;
}

uint64_t sub_100206D1C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  _OWORD *v36;
  int64x2_t v37;
  char *v38;
  int64x2_t *v39;

  v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7)
    sub_1000D02C0();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0xE38E38E38E38E3)
    v6 = 0x1C71C71C71C71C7;
  else
    v6 = v4;
  v39 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7)
      sub_1000CDEB8();
    v7 = operator new(144 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[9 * v3];
  v36 = v7;
  v37.i64[0] = (uint64_t)v8;
  v37.i64[1] = (uint64_t)v8;
  v38 = (char *)&v7[9 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = (char *)&v7[9 * v3];
  *((_QWORD *)v10 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v10 + 4) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (char *)&v7[9 * v3];
  v14 = *(_OWORD *)(a2 + 40);
  v13[64] = 0;
  v15 = v13 + 64;
  *(_OWORD *)(v15 - 24) = v14;
  *((_DWORD *)v15 - 2) = *(_DWORD *)(a2 + 56);
  if (*(_BYTE *)(a2 + 64))
  {
    *(_OWORD *)((char *)&v7[9 * v3 + 4] + 8) = *(_OWORD *)(a2 + 72);
    *v15 = 1;
  }
  v16 = (char *)&v7[9 * v3];
  v16[88] = 0;
  v17 = v16 + 88;
  if (*(_BYTE *)(a2 + 88))
  {
    v7[9 * v3 + 6] = *(_OWORD *)(a2 + 96);
    *v17 = 1;
  }
  v18 = (char *)&v7[9 * v3];
  v18[112] = 0;
  v19 = v18 + 112;
  if (*(_BYTE *)(a2 + 112))
  {
    *((_QWORD *)&v7[9 * v3 + 7] + 1) = *(_QWORD *)(a2 + 120);
    *v19 = 1;
  }
  v20 = (char *)&v7[9 * v3];
  v20[128] = 0;
  v21 = v20 + 128;
  if (*(_BYTE *)(a2 + 128))
  {
    *((_QWORD *)&v7[9 * v3 + 8] + 1) = *(_QWORD *)(a2 + 136);
    *v21 = 1;
  }
  v22 = v37.i64[0];
  v23 = v37.i64[1] + 144;
  v37.i64[1] += 144;
  v25 = a1->i64[0];
  v24 = a1->u64[1];
  if (v24 == a1->i64[0])
  {
    v33 = vdupq_n_s64(v24);
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = v22 + v26;
      v28 = v24 + v26;
      v29 = *(_OWORD *)(v24 + v26 - 144);
      *(_QWORD *)(v27 - 128) = *(_QWORD *)(v24 + v26 - 128);
      *(_OWORD *)(v27 - 144) = v29;
      *(_QWORD *)(v28 - 136) = 0;
      *(_QWORD *)(v28 - 128) = 0;
      *(_QWORD *)(v28 - 144) = 0;
      *(_OWORD *)(v27 - 120) = *(_OWORD *)(v24 + v26 - 120);
      *(_QWORD *)(v28 - 120) = 0;
      *(_QWORD *)(v28 - 112) = 0;
      v30 = *(_OWORD *)(v24 + v26 - 104);
      *(_DWORD *)(v27 - 88) = *(_DWORD *)(v24 + v26 - 88);
      *(_OWORD *)(v27 - 104) = v30;
      *(_BYTE *)(v27 - 80) = 0;
      if (*(_BYTE *)(v24 + v26 - 80))
      {
        *(_OWORD *)(v27 - 72) = *(_OWORD *)(v28 - 72);
        *(_BYTE *)(v27 - 80) = 1;
      }
      *(_BYTE *)(v27 - 56) = 0;
      if (*(_BYTE *)(v28 - 56))
      {
        *(_OWORD *)(v22 + v26 - 48) = *(_OWORD *)(v24 + v26 - 48);
        *(_BYTE *)(v27 - 56) = 1;
      }
      v31 = v22 + v26;
      v32 = v24 + v26;
      *(_BYTE *)(v22 + v26 - 32) = 0;
      if (*(_BYTE *)(v24 + v26 - 32))
      {
        *(_QWORD *)(v31 - 24) = *(_QWORD *)(v32 - 24);
        *(_BYTE *)(v31 - 32) = 1;
      }
      *(_BYTE *)(v31 - 16) = 0;
      if (*(_BYTE *)(v32 - 16))
      {
        *(_QWORD *)(v22 + v26 - 8) = *(_QWORD *)(v24 + v26 - 8);
        *(_BYTE *)(v31 - 16) = 1;
      }
      v26 -= 144;
    }
    while (v24 + v26 != v25);
    v33 = *a1;
    v23 = v37.i64[1];
    v22 += v26;
  }
  a1->i64[0] = v22;
  a1->i64[1] = v23;
  v37 = v33;
  v34 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v38;
  v38 = v34;
  v36 = (_OWORD *)v33.i64[0];
  sub_100207078((uint64_t)&v36);
  return v23;
}

void sub_100207064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100207078((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100207078(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    if (*(_BYTE *)(i - 16))
      *(_BYTE *)(i - 16) = 0;
    if (*(_BYTE *)(i - 32))
      *(_BYTE *)(i - 32) = 0;
    if (*(_BYTE *)(i - 56))
      *(_BYTE *)(i - 56) = 0;
    if (*(_BYTE *)(i - 80))
      *(_BYTE *)(i - 80) = 0;
    v4 = *(std::__shared_weak_count **)(i - 112);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*(char *)(i - 121) < 0)
      operator delete(*(void **)(i - 144));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100207150(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_10020730C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100207334(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1000CFA7C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_100207560(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  sub_1000FC5A4((uint64_t)v16);
  v6 = *a2;
  if (*a3 != *a2)
  {
    v7 = *((char *)v6 + 39);
    if (v7 >= 0)
      v8 = (uint64_t)(v6 + 2);
    else
      v8 = v6[2];
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v6 + 39);
    else
      v9 = v6[3];
    while (1)
    {
      sub_1000F0508(&v17, v8, v9);
      v6 = (uint64_t *)*v6;
      if (v6 == *a3)
        break;
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = a1;
      else
        v11 = *(_QWORD *)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      sub_1000F0508(&v17, v11, v12);
      v13 = *((char *)v6 + 39);
      if (v13 >= 0)
        v8 = (uint64_t)(v6 + 2);
      else
        v8 = v6[2];
      if (v13 >= 0)
        v9 = *((unsigned __int8 *)v6 + 39);
      else
        v9 = v6[3];
    }
  }
  std::stringbuf::str(v18);
  *(_QWORD *)((char *)v16
  v17 = v14;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v18);
  return std::ios::~ios(&v20);
}

void sub_1002076B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002076C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002076DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1002076F0(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1002078B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FF910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002078C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FD520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002078D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FD520;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100207904(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 72));
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)(a1 + 48));
  sub_100200588((sqlite3_blob **)(a1 + 40));

}

uint64_t sub_100207940(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;

  v5 = a2;
  *(_QWORD *)a1 = off_1003FD570;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *a3;
  *a3 = 0;
  sub_100081318(a1 + 24, *(sqlite3_blob **)(a1 + 16));
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 48), (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)(a1 + 24), -1);

  return a1;
}

void sub_1002079C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  sqlite3_blob **v3;
  wireless_diagnostics::google::protobuf::io::CopyingInputStream *v4;

  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream(v4);
  sub_100200588(v3);

  _Unwind_Resume(a1);
}

uint64_t sub_1002079F0(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 48));
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)(a1 + 24));
  sub_100200588((sqlite3_blob **)(a1 + 16));

  return a1;
}

void sub_100207A30(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 48));
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)(a1 + 24));
  sub_100200588((sqlite3_blob **)(a1 + 16));

  operator delete();
}

uint64_t sub_100207A80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_100207A88(uint64_t a1)
{
  return wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::ByteCount((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)(a1 + 48)) != *(int *)(a1 + 40);
}

void sub_100207AB8(uint64_t a1)
{
  sub_100207AE4(*(void **)(a1 + 8));
}

void sub_100207AE4(void *a1)
{
  id v1;

  v1 = a1;
  operator new();
}

void sub_100207C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;
  va_list va;

  va_start(va, a8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  sub_100208084((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_100207C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100207CA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  std::exception_ptr v8;

  v1 = *(uint64_t **)(a1 + 32);
  sub_1000958F4(**(_QWORD **)(a1 + 40) + 48, &v7);
  v2 = *v1;
  if (!*v1)
    sub_1000D3E20(3u);
  std::mutex::lock((std::mutex *)(v2 + 24));
  if ((*(_BYTE *)(v2 + 136) & 1) != 0
    || (v8.__ptr_ = 0, v3 = *(_QWORD *)(v2 + 16), std::exception_ptr::~exception_ptr(&v8), v3))
  {
    sub_1000D3E20(2u);
  }
  *(_OWORD *)(v2 + 144) = v7;
  v7 = 0uLL;
  *(_DWORD *)(v2 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 88));
  std::mutex::unlock((std::mutex *)(v2 + 24));
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100207DA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  std::__assoc_sub_state **v21;
  std::__assoc_sub_state *v22;
  std::exception_ptr v23;
  std::exception_ptr v24;
  std::exception_ptr v25[10];

  __cxa_begin_catch(a1);
  v21 = *(std::__assoc_sub_state ***)(v20 + 32);
  std::current_exception();
  v22 = *v21;
  if (!v22)
    sub_1000D3E20(3u);
  std::exception_ptr::exception_ptr(v25, &v24);
  v23.__ptr_ = v25;
  std::__assoc_sub_state::set_exception(v22, v23);
  std::exception_ptr::~exception_ptr(v25);
  std::exception_ptr::~exception_ptr(&v24);
  __cxa_end_catch();
}

void sub_100207E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100207E90(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_100207EDC(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_100207F3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_100207FBC(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_100208058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100208084(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100208170(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1002080CCLL);
}

void sub_1002081F0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x26u);
}

void sub_100208204(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

BOOL sub_100208218()
{
  return os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT);
}

void sub_100208238(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, log, OS_LOG_TYPE_INFO, a4, a5, 0x30u);
}

BOOL sub_100208248()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3856), OS_LOG_TYPE_INFO);
}

void sub_100208258(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

BOOL sub_10020826C()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3856));
}

void sub_100208290(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 2082;
}

uint64_t sub_1002082B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a2 + 10) = v2;
  *(_WORD *)(a2 + 18) = 2081;
  *(_QWORD *)(a2 + 20) = result;
  return result;
}

BOOL sub_1002082C4()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_ERROR);
}

uint64_t sub_1002082D0()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10020832C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100208388()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  byte_100419F67 = 8;
  strcpy((char *)&qword_100419F50, "resource");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419F50, (void *)&_mh_execute_header);
  byte_100419F7F = 8;
  strcpy((char *)&qword_100419F68, "grouping");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419F68, (void *)&_mh_execute_header);
  byte_100419F97 = 8;
  strcpy((char *)&qword_100419F80, "local_id");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419F80, (void *)&_mh_execute_header);
  byte_100419FAF = 16;
  strcpy((char *)&qword_100419F98, "location_context");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419F98, (void *)&_mh_execute_header);
  byte_100419FC7 = 16;
  strcpy((char *)&xmmword_100419FB0, "metadata_version");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100419FB0, (void *)&_mh_execute_header);
  byte_100419FDF = 12;
  strcpy((char *)&qword_100419FC8, "tile_version");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419FC8, (void *)&_mh_execute_header);
  byte_100419FF7 = 13;
  strcpy((char *)&qword_100419FE0, "last_relevant");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419FE0, (void *)&_mh_execute_header);
  byte_10041A00F = 21;
  strcpy((char *)&qword_100419FF8, "last_refresh_metadata");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_100419FF8, (void *)&_mh_execute_header);
  byte_10041A027 = 17;
  strcpy((char *)&xmmword_10041A010, "last_refresh_tile");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10041A010, (void *)&_mh_execute_header);
  byte_10041A03F = 12;
  strcpy((char *)&qword_10041A028, "last_visited");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10041A028, (void *)&_mh_execute_header);
  strcpy((char *)&qword_10041A040, "metadata");
  byte_10041A057 = 8;
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10041A040, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002085E0(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

void sub_100208648(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v23[32];
  _BYTE v24[24];
  _BYTE v25[32];
  _QWORD v26[3];
  char v27;
  _BYTE v28[32];
  _BYTE v29[8];
  double v30;
  double v31;
  _BYTE v32[1920];
  _QWORD v33[5];
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;

  v7 = a3 + 32;
  v8 = sub_100281F58(a4, a3 + 32);
  if (v8 > 50.0)
    return;
  sub_1000B53CC(v32, a2);
  sub_100159F88((uint64_t)v32, v33);
  sub_100073738(v32);
  sub_1001A23D4((uint64_t)v28, v7);
  sub_100159CBC((uint64_t)v33, (uint64_t)v28, (uint64_t)v26);
  sub_100159E28((uint64_t)v26, (uint64_t)v29);
  nullsub_22(v28);
  if (v8 > 0.0)
  {
    v26[0] = off_1003F9A68;
    v9 = 1.0 - v8 / 50.0;
    v27 = 0;
    v10 = a1[2];
    v11 = a1[3];
    v12 = v10 - v30;
    v13 = v11 - v31;
    *(double *)&v26[1] = v10 - v30;
    *(double *)&v26[2] = v11 - v31;
    v14 = v9 * v31 + v8 / 50.0 * v11;
    a1[2] = v9 * v30 + v8 / 50.0 * v10;
    a1[3] = v14;
    v15 = sqrt(v9 * (*(double *)(a3 + 96) * *(double *)(a3 + 96))+ v8 / 50.0 * (a1[19] * a1[19])+ v8 / 50.0 * v9 * (v12 * v12 + v13 * v13));
    a1[19] = v15;
    a1[35] = v15 * 0.9443;
    sub_1001A2040((uint64_t)v23, (uint64_t)(a1 + 1));
    sub_100159D24((uint64_t)v33, (uint64_t)v23, (uint64_t)v24);
    sub_10020895C((uint64_t)v24, (uint64_t)v25);
    sub_100077D9C((uint64_t)(a1 + 5), (uint64_t)v25);
    nullsub_22(v25);
    nullsub_23(v23);
    nullsub_23(v26);
    nullsub_23(v29);
    v16 = v35;
    if (!v35)
      goto LABEL_10;
LABEL_6:
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_10;
  }
  sub_1001A23D4((uint64_t)v26, v7);
  sub_100077D9C((uint64_t)(a1 + 5), (uint64_t)v26);
  nullsub_22(v26);
  sub_100077D9C((uint64_t)(a1 + 1), (uint64_t)v29);
  v17 = *(_QWORD *)(a3 + 96);
  *((_QWORD *)a1 + 35) = v17;
  *((_QWORD *)a1 + 19) = v17;
  nullsub_23(v29);
  v16 = v35;
  if (v35)
    goto LABEL_6;
LABEL_10:
  v20 = v34;
  if (v34)
  {
    v21 = (unint64_t *)&v34->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  nullsub_22(v33);
}

void sub_1002088B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  nullsub_23(&a29);
  sub_10015A328(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_100208918(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10015A328(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_10020892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_100073738(&a33);
  _Unwind_Resume(a1);
}

void sub_100208940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  nullsub_22(va);
  sub_10015A328(v17 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_10020895C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  char v19[8];
  std::__shared_weak_count *v20;
  _BYTE v21[32];

  sub_1001A23D4((uint64_t)v21, *(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v4 + 32);
  v5 = *(std::__shared_weak_count **)(v4 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v17 = v6;
  v18 = v5;
  sub_100071CB4((uint64_t)v19, (uint64_t)&v17, *(double *)a1, *(double *)(a1 + 8));
  v9.n128_f64[0] = sub_10015BF50((uint64_t)v21, (uint64_t)v19, a2);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return nullsub_22(v21);
}

void sub_100208AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_1000E095C((uint64_t)&a13);
  sub_1000E095C((uint64_t)&a11);
  sub_1000E095C((uint64_t)&a9);
  nullsub_22(v13 - 48);
  _Unwind_Resume(a1);
}

void sub_100208AD4(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v5;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t ***v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *__p;
  uint64_t ***v25;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 48))(&__p);
  v5 = (uint64_t ***)__p;
  v6 = v25;
  if (__p == v25)
  {
    if (!__p)
      return;
    goto LABEL_29;
  }
  do
  {
    v7 = sub_100050DB0((uint64_t)v5);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = (char *)v7;
    else
      v9 = *(char **)v7;
    v10 = a2[23];
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(char **)a2;
    if (v10 >= 0)
      v12 = a2[23];
    else
      v12 = *((_QWORD *)a2 + 1);
    if (v12)
    {
      if ((v8 & 0x80u) != 0)
        v8 = *(_QWORD *)(v7 + 8);
      if (v8 >= v12)
      {
        v13 = &v9[v8];
        v14 = *v11;
        v15 = v9;
        do
        {
          v16 = v8 - v12;
          if (v16 == -1)
            break;
          v17 = (char *)memchr(v15, v14, v16 + 1);
          if (!v17)
            break;
          v18 = v17;
          if (!memcmp(v17, v11, v12))
          {
            if (v18 != v13 && v18 == v9)
              goto LABEL_4;
            break;
          }
          v15 = v18 + 1;
          v8 = v13 - (v18 + 1);
        }
        while (v8 >= v12);
      }
    }
    else
    {
LABEL_4:
      sub_100213600(a3, v5, v5);
    }
    v5 += 2;
  }
  while (v5 != v6);
  v5 = (uint64_t ***)__p;
  if (__p)
  {
LABEL_29:
    v19 = v25;
    v20 = v5;
    if (v25 != v5)
    {
      do
      {
        v21 = (std::__shared_weak_count *)*(v19 - 1);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v19 -= 2;
      }
      while (v19 != v5);
      v20 = __p;
    }
    v25 = v5;
    operator delete(v20);
  }
}

void sub_100208C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_100208CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000F7D3C((void **)va);
  sub_1000F7AE8(v2);
  _Unwind_Resume(a1);
}

void sub_100208CC0(_QWORD *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  NSObject *v14;
  _OWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  _BYTE *v22;
  char *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  _QWORD *i;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  BOOL v37;
  NSObject *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *__p[2];
  _BYTE v46[25];
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  void *v55;
  char *v56;
  unint64_t v57;
  _QWORD v58[2];
  _QWORD *v59;
  uint64_t v60;
  void **v61;
  char *v62;
  unint64_t v63;
  _OWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;

  if ((double)*a5 / 1000000000.0 - (double)*(uint64_t *)(a4 + 8) / 1000000000.0 <= 2.0)
  {
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    memset(v64, 0, 41);
    v9 = *(char *)(a3 + 31);
    if (v9 >= 0)
      v10 = a3 + 8;
    else
      v10 = *(_QWORD *)(a3 + 8);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 31);
    else
      v11 = *(_QWORD *)(a3 + 16);
    v12 = (char *)(v10 + v11);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    *(_OWORD *)__p = 0uLL;
    memset(v46, 0, sizeof(v46));
    v13 = sub_1002139D0((uint64_t)&unk_10041B0E8, v10, v10 + v11, (uint64_t)__p, 4160);
    sub_100213CDC((void **)v64, v10, v12, (uint64_t *)__p, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v13)
    {
LABEL_13:
      if (qword_100417ED8 == -1)
      {
        v14 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
          goto LABEL_62;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FD640);
        v14 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        {
LABEL_62:
          if (*(_QWORD *)&v64[0])
          {
            *((_QWORD *)&v64[0] + 1) = *(_QWORD *)&v64[0];
            operator delete(*(void **)&v64[0]);
          }
          return;
        }
      }
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "This location configuration's id doesn't satisfy regional naming convention. This should not happen.", (uint8_t *)__p, 2u);
      goto LABEL_62;
    }
    if (v70)
    {
      *((_QWORD *)&v64[0] + 1) = *(_QWORD *)&v64[0];
      goto LABEL_13;
    }
    v15 = *(_OWORD **)&v64[0];
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v64[0] + 1) - *(_QWORD *)&v64[0]) >> 3);
    if (v16 <= 1)
      v17 = v64;
    else
      v17 = *(_OWORD **)&v64[0];
    if (!*((_BYTE *)v17 + 40))
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      goto LABEL_39;
    }
    if (v16 <= 1)
      v15 = v64;
    v19 = *((_QWORD *)v15 + 3);
    v18 = (char *)*((_QWORD *)v15 + 4);
    v20 = (unint64_t)&v18[-v19];
    if ((unint64_t)&v18[-v19] >= 0x7FFFFFFFFFFFFFF8)
      sub_1000CDE30();
    if (v20 > 0x16)
    {
      v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v28 = v20 | 7;
      v29 = v28 + 1;
      v21 = (void **)operator new(v28 + 1);
      v62 = &v18[-v19];
      v63 = v29 | 0x8000000000000000;
      v61 = v21;
      if ((char *)v19 != v18)
      {
LABEL_25:
        if (v20 < 0x20 || (unint64_t)v21 - v19 < 0x20)
        {
          v22 = v21;
          v23 = (char *)v19;
        }
        else
        {
          v22 = (char *)v21 + (v20 & 0xFFFFFFFFFFFFFFE0);
          v23 = (char *)(v19 + (v20 & 0xFFFFFFFFFFFFFFE0));
          v24 = (__int128 *)(v19 + 16);
          v25 = v21 + 2;
          v26 = v20 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v27 = *v24;
            *(v25 - 1) = *(v24 - 1);
            *v25 = v27;
            v24 += 2;
            v25 += 2;
            v26 -= 32;
          }
          while (v26);
          if (v20 == (v20 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_38;
        }
        do
        {
          v30 = *v23++;
          *v22++ = v30;
        }
        while (v23 != v18);
LABEL_38:
        *v22 = 0;
LABEL_39:
        sub_100208AD4((uint64_t)a1, (char *)&v61, (uint64_t)v58);
        if (v60)
        {
          __p[0] = &v61;
          v31 = sub_100215F30((uint64_t)(a1 + 1), (uint64_t)&v61, (uint64_t)&unk_100395958, (__int128 **)__p) + 5;
          if (sub_1002825A0((uint64_t)v31, v58))
          {
            v56 = 0;
            v55 = 0;
            v57 = 0;
            for (i = v59; i; i = (_QWORD *)*i)
            {
              while (1)
              {
                (*(void (**)(void **__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(__p, *a1, i + 2);
                v33 = v56;
                if ((unint64_t)v56 < v57)
                  break;
                v56 = sub_1002165E0(&v55, (uint64_t)__p);
                sub_100073738(__p);
                i = (_QWORD *)*i;
                if (!i)
                  goto LABEL_46;
              }
              sub_1000B53CC(v56, __p);
              v56 = v33 + 1920;
              sub_100073738(__p);
            }
LABEL_46:
            sub_100282610((uint64_t)v31, &v55);
            v34 = (char *)v55;
            if (v55)
            {
              v35 = v55;
              if (v56 != v55)
              {
                v36 = v56 - 1920;
                do
                {
                  (**(void (***)(char *))v36)(v36);
                  v37 = v36 == v34;
                  v36 -= 1920;
                }
                while (!v37);
                v35 = v55;
              }
              v56 = v34;
              operator delete(v35);
            }
          }
          sub_100208648(a2, a3, a4, (uint64_t)v31);
          goto LABEL_57;
        }
        if (qword_100417ED8 == -1)
        {
          v38 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
          {
LABEL_57:
            v39 = v59;
            while (v39)
            {
              v41 = v39;
              v39 = (_QWORD *)*v39;
              v42 = (std::__shared_weak_count *)v41[3];
              if (v42)
              {
                p_shared_owners = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              operator delete(v41);
            }
            v40 = (void *)v58[0];
            v58[0] = 0;
            if (v40)
              operator delete(v40);
            if (SHIBYTE(v63) < 0)
              operator delete(v61);
            goto LABEL_62;
          }
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FD640);
          v38 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
            goto LABEL_57;
        }
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Warning: we have a regional LocationConfiguration, but no regional tiles in that region on disk. Something could be wrong.", (uint8_t *)__p, 2u);
        goto LABEL_57;
      }
    }
    else
    {
      HIBYTE(v63) = (_BYTE)v18 - v19;
      v21 = (void **)&v61;
      if ((char *)v19 != v18)
        goto LABEL_25;
    }
    *(_BYTE *)v21 = 0;
    goto LABEL_39;
  }
}

void sub_1002091F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_100198D18(&STACK[0x788]);
  sub_1000F7AE8(v1 - 256);
  if (*(char *)(v1 - 193) < 0)
    operator delete(*(void **)(v1 - 216));
  v3 = *(void **)(v1 - 192);
  if (v3)
  {
    *(_QWORD *)(v1 - 184) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100209280(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1002092AC(uint64_t a1, const char *a2, int a3)
{
  std::locale *v6;

  v6 = std::locale::locale((std::locale *)a1);
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, &std::ctype<char>::id);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, &std::collate<char>::id);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  strlen(a2);
  sub_100209378();
}

void sub_100209348(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  sub_1000E095C(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_100209364(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_100209378()
{
  operator new();
}

void sub_100209708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100209734(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100209750()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_parse);
}

void sub_100209788(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_10020979C(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v6 = a2;
  do
  {
    v7 = v6;
    v6 = sub_10020A3FC(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2)
    operator new();
  if (v7 != a3)
  {
    if (*v7 == 124)
    {
      v8 = v7 + 1;
      v9 = v7 + 1;
      do
      {
        v10 = v9;
        v9 = sub_10020A3FC(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8)
        operator new();
      operator new();
    }
    return v7;
  }
  return a3;
}

unsigned __int8 *sub_10020998C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v3 = a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
    operator new();
  if (a2 != a3)
  {
    while (v3 != a3)
    {
      v6 = v3;
      v7 = sub_100212790(a1, v3, a3);
      if (v7 != v3)
      {
        v3 = sub_1002129D4(a1, v7, a3);
        if (v3 != v6)
          continue;
      }
      if (v6 + 1 == a3 && *v6 == 36)
        operator new();
      sub_100212744();
    }
  }
  return a3;
}

char *sub_100209B24(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v3 = a3;
  v6 = sub_1002131F4(a1, a2, a3);
  if (v6 == a2)
    goto LABEL_12;
  do
  {
    v7 = v6;
    v6 = sub_1002131F4(a1, v6, v3);
  }
  while (v6 != v7);
  if (v7 == a2)
    goto LABEL_12;
  if (v7 != v3)
  {
    if (*v7 == 124)
    {
      v8 = v7 + 1;
      v9 = sub_1002131F4(a1, v7 + 1, v3);
      if (v9 != v7 + 1)
      {
        do
        {
          v10 = v9;
          v9 = sub_1002131F4(a1, v9, v3);
        }
        while (v9 != v10);
        if (v10 != v8)
          operator new();
      }
LABEL_12:
      sub_100212744();
    }
    return v7;
  }
  return v3;
}

unsigned __int8 *sub_100209CC0(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_10020998C(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_10020998C(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

char *sub_100209ED0(uint64_t a1, char *__s, char *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6)
    v7 = v6;
  else
    v7 = a3;
  if (v7 == __s)
    operator new();
  sub_100209B24(a1, __s, v7);
  if (v7 == a3)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 != a3)
  {
    v9 = (char *)memchr(v8, 10, a3 - v8);
    if (v9)
      v10 = v9;
    else
      v10 = a3;
    if (v10 != v8)
    {
      sub_100209B24(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

void sub_10020A0E0()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_grammar);
}

void sub_10020A118(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10020A130()
{
  operator delete();
}

void sub_10020A144(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_10020A15C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10020A180(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_10020A198(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001003938FELL)
    return a1 + 24;
  if (((v3 & 0x80000001003938FELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001003938FELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001003938FELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_10020A218(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020A25C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_10020A2B0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_10020A2C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020A308(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

char *sub_10020A35C(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  unsigned __int8 *v6;

  do
  {
    v5 = a2;
    a2 = sub_10020A490(a1, a2, a3);
    if (a2 != v5)
      continue;
    v6 = sub_10020A804(a1, v5, a3);
    if (v6 == (unsigned __int8 *)v5)
      break;
    a2 = sub_10020AA80(a1, (char *)v6, a3);
  }
  while (a2 != v5);
  return v5;
}

char *sub_10020A3FC(uint64_t a1, char *a2, char *a3)
{
  char *result;
  char *v7;

  result = sub_10020A490(a1, a2, a3);
  if (result == a2)
  {
    v7 = (char *)sub_10020A804(a1, a2, a3);
    result = a2;
    if (v7 != a2)
      return sub_10020AA80(a1, v7, a3);
  }
  return result;
}

char *sub_10020A490(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  int v10;
  char *v11;
  int v13;
  _BYTE v14[24];
  int v15;

  if (a2 != a3)
  {
    v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          v10 = a2[1];
          if (v10 == 66)
            operator new();
          if (v10 == 98)
            operator new();
        }
      }
      else if (v6 == 94)
      {
        operator new();
      }
    }
    else
    {
      if (v6 == 36)
        operator new();
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v11 = a2 + 2;
        if (v8 && v11 != a3)
        {
          v13 = *v11;
          if (v13 == 33)
          {
            sub_10020B444((uint64_t)v14);
            v15 = *(_DWORD *)(a1 + 24);
            sub_100209378(v14, a2 + 3, a3);
            sub_10020B4B0();
          }
          if (v13 == 61)
          {
            sub_10020B444((uint64_t)v14);
            v15 = *(_DWORD *)(a1 + 24);
            sub_100209378(v14, a2 + 3, a3);
            sub_10020B4B0();
          }
        }
      }
    }
  }
  return a2;
}

void sub_10020A7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1002085E0(&a9);
  _Unwind_Resume(a1);
}

void sub_10020A7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1002085E0(&a9);
  _Unwind_Resume(a1);
}

void sub_10020A7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1002085E0(&a9);
  _Unwind_Resume(a1);
}

void sub_10020A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1002085E0(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10020A804(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  _DWORD *v6;
  char *v7;
  char *v8;
  char *v10;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_24;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v7 = sub_10020979C(a1, a2 + 3, a3);
          if (v7 == a3)
            goto LABEL_24;
          v8 = v7;
          if (*v7 != 41)
            goto LABEL_24;
        }
        else
        {
          if ((*(_BYTE *)(a1 + 24) & 2) == 0)
            operator new();
          v6 = (_DWORD *)(a1 + 36);
          ++*(_DWORD *)(a1 + 36);
          v10 = sub_10020979C(a1, a2 + 1, a3);
          if (v10 == a3 || (v8 = v10, *v10 != 41))
LABEL_24:
            sub_10020B578();
          if ((*(_BYTE *)(a1 + 24) & 2) == 0)
            operator new();
        }
        --*v6;
        v3 = v8 + 1;
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return sub_10020CD4C(a1, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_23;
      case '.':
        operator new();
      case '[':
        return sub_10020CB90(a1, a2, a3);
      case '\\':
        return sub_10020CA18(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (*a2 == 123)
LABEL_23:
          sub_10020CD00();
        return sub_10020CD4C(a1, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

char *sub_10020AA80(uint64_t a1, char *a2, char *a3)
{
  int v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v15;
  BOOL v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;

  if (a2 == a3)
    return a2;
  v3 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v4 = *a2;
  if (v4 <= 62)
  {
    if (v4 == 42)
    {
      v13 = a2 + 1;
      if (v3)
        v14 = 1;
      else
        v14 = v13 == a3;
      if (!v14 && *v13 == 63)
        operator new();
      operator new();
    }
    if (v4 == 43)
    {
      v5 = a2 + 1;
      if (!v3 && v5 != a3 && *v5 == 63)
        operator new();
      operator new();
    }
    return a2;
  }
  if (v4 == 63)
  {
    v15 = a2 + 1;
    if (v3)
      v16 = 1;
    else
      v16 = v15 == a3;
    if (!v16 && *v15 == 63)
      operator new();
    operator new();
  }
  if (v4 == 123)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      goto LABEL_69;
    v7 = *v6;
    if ((v7 & 0xF8) != 0x30 && (v7 & 0xFE) != 0x38)
      goto LABEL_69;
    v8 = v7 - 48;
    v9 = a2 + 2;
    if (a2 + 2 == a3)
    {
LABEL_19:
      v9 = a3;
    }
    else
    {
      while (1)
      {
        v10 = *v9;
        if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
          break;
        if (v8 >= 214748364)
          goto LABEL_69;
        v8 = v10 + 10 * v8 - 48;
        if (++v9 == a3)
          goto LABEL_19;
      }
    }
    if (v9 == v6)
      goto LABEL_69;
    if (v9 != a3)
    {
      v11 = *v9;
      if (v11 != 44)
      {
        if (v11 == 125)
        {
          v12 = v9 + 1;
          if (v3 || v12 == a3 || *v12 != 63)
            operator new();
          goto LABEL_66;
        }
        goto LABEL_69;
      }
      v17 = v9 + 1;
      if (v9 + 1 == a3)
        goto LABEL_69;
      v18 = *v17;
      if (v18 == 125)
      {
        v19 = v9 + 2;
        if (!v3 && v19 != a3 && *v19 == 63)
          sub_100211E2C();
        operator new();
      }
      if ((v18 & 0xF8) == 0x30 || (v18 & 0xFE) == 0x38)
      {
        v20 = v18 - 48;
        v21 = v9 + 2;
        if (v21 == a3)
        {
LABEL_58:
          v21 = a3;
        }
        else
        {
          while (1)
          {
            v22 = *v21;
            if ((v22 & 0xF8) != 0x30 && (v22 & 0xFE) != 0x38)
              break;
            if (v20 >= 214748364)
              goto LABEL_69;
            v20 = v22 + 10 * v20 - 48;
            if (++v21 == a3)
              goto LABEL_58;
          }
        }
        if (v21 != v17 && v21 != a3 && *v21 == 125)
        {
          if (v20 >= v8)
          {
            v23 = v21 + 1;
            if (v3 || v23 == a3 || *v23 != 63)
              operator new();
LABEL_66:
            sub_100211F7C();
          }
LABEL_69:
          sub_1002120D8();
        }
      }
    }
    sub_100212124();
  }
  return a2;
}

void sub_10020B3AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10020B444(uint64_t a1)
{
  std::locale *v2;

  v2 = std::locale::locale((std::locale *)a1);
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, &std::ctype<char>::id);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, &std::collate<char>::id);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_10020B49C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_10020B4B0()
{
  operator new();
}

void sub_10020B578()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_paren);
}

void sub_10020B5B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10020B5C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020B608(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_10020B65C(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_QWORD *sub_10020B6BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020B700(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_10020B754(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_10020B7A4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD850;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_10020B7FC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD850;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

uint64_t sub_10020B864(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_10020B9B8(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)off_1003FD898;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_10020BA58(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)off_1003FD898;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete();
}

void sub_10020BB08(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_10020C104((uint64_t)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_10020BC90(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_10020BC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10020BC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _BYTE v44[56];
  void *__p[2];
  _QWORD v46[3];
  __int128 v47;
  char v48;
  char *v49;
  char *v50;
  unint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v47 = a3;
    *((_QWORD *)&v47 + 1) = a3;
    v48 = 0;
    *(_DWORD *)v44 = 0;
    memset(&v44[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v46, 0, 21);
    v50 = sub_10020C3F4((void **)&v49, (uint64_t)v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v44[32])
    {
      *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
      operator delete(*(void **)&v44[32]);
    }
    v13 = v50;
    *((_DWORD *)v50 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      sub_10020C5D8((void **)v13 - 8, v15 - v16, &v47);
      v13 = v50;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      sub_10020C778((char **)v13 - 5, v18 - v19);
      v13 = v50;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        sub_10020C2DC();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v35 = *a4;
          *(_QWORD *)v35 = a2;
          *(_QWORD *)(v35 + 8) = v23;
          *(_BYTE *)(v35 + 16) = 1;
          v36 = *((_QWORD *)v13 - 8);
          v37 = *((_QWORD *)v13 - 7) - v36;
          if (v37)
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
            v39 = (_BYTE *)(v36 + 16);
            v40 = 1;
            do
            {
              v41 = v35 + 24 * v40;
              *(_OWORD *)v41 = *((_OWORD *)v39 - 1);
              v42 = *v39;
              v39 += 24;
              *(_BYTE *)(v41 + 16) = v42;
            }
            while (v38 > v40++);
          }
          v6 = 1;
          v21 = v49;
          if (!v49)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v50;
          v25 = (void *)*((_QWORD *)v50 - 5);
          if (v25)
          {
            *((_QWORD *)v50 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v50 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_10020C8A0((uint64_t)v44, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v46[1] + 24))(v46[1], 0, v44);
          v27 = v50;
          if ((unint64_t)v50 >= v51)
          {
            v50 = sub_10020C3F4((void **)&v49, (uint64_t)v44);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v44[16];
            *(_OWORD *)v50 = *(_OWORD *)v44;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v44[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v44[48];
            memset(&v44[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v46[0];
            __p[0] = 0;
            __p[1] = 0;
            v46[0] = 0;
            v29 = v46[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v46[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v50 = v27 + 96;
          }
          if (*(_QWORD *)&v44[32])
          {
            *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
            operator delete(*(void **)&v44[32]);
          }
LABEL_16:
          v21 = v49;
          v13 = v50;
          ++v20;
          if (v49 != v50)
            continue;
          v6 = 0;
          if (v49)
          {
LABEL_37:
            v30 = v50;
            v31 = v21;
            if (v50 != v21)
            {
              do
              {
                v32 = (void *)*((_QWORD *)v30 - 5);
                if (v32)
                {
                  *((_QWORD *)v30 - 4) = v32;
                  operator delete(v32);
                }
                v33 = (void *)*((_QWORD *)v30 - 8);
                if (v33)
                {
                  *((_QWORD *)v30 - 7) = v33;
                  operator delete(v33);
                }
                v30 -= 96;
              }
              while (v30 != v21);
              v31 = v49;
            }
            v50 = v21;
            operator delete(v31);
          }
          break;
        default:
          sub_10020C328();
      }
      break;
    }
  }
  return v6;
}

void sub_10020C080(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10020C374((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_10020C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_10020C29C((uint64_t *)va);
  sub_10020C374((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_10020C0DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10020C374((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_10020C0F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10020C374((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_10020C104(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_1000D02C0();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

_QWORD *sub_10020C29C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10020C2DC()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_complexity);
}

void sub_10020C314(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10020C328()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_unknown);
}

void sub_10020C360(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_10020C374(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_10020C3F4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15)
      return v13;
    goto LABEL_23;
  }
  v16 = 0;
  do
  {
    v17 = &v9[v16];
    v18 = &v15[v16];
    v19 = *(_OWORD *)&v15[v16 - 80];
    *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
    *((_OWORD *)v17 - 5) = v19;
    *((_QWORD *)v17 - 7) = 0;
    *((_QWORD *)v17 - 6) = 0;
    *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
    *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *((_QWORD *)v17 - 3) = 0;
    *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
    *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
    *((_QWORD *)v18 - 5) = 0;
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    v20 = *(_QWORD *)&v15[v16 - 16];
    *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
    *((_QWORD *)v17 - 2) = v20;
    v16 -= 96;
  }
  while (&v15[v16] != v14);
  v21 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v21)
  {
    do
    {
      v22 = (void *)*((_QWORD *)v15 - 5);
      if (v22)
      {
        *((_QWORD *)v15 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v15 - 8);
      if (v23)
      {
        *((_QWORD *)v15 - 7) = v23;
        operator delete(v23);
      }
      v15 -= 96;
    }
    while (v15 != v21);
    v15 = v21;
  }
  if (v15)
LABEL_23:
    operator delete(v15);
  return v13;
}

void sub_10020C5D8(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1000D02C0();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_1000CDEB8();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_10020C778(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_1000D02C0();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1000CDEB8();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_10020C8A0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_1000D02C0();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_10020C9E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_10020CA18(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_10020CE54();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
    sub_10020D4D8(a1);
  if ((v7 - 49) <= 8)
  {
    v10 = a2 + 2;
    if (a2 + 2 == a3)
      goto LABEL_13;
    do
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_20;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
    }
    while (v10 != a3);
    if (v8)
    {
LABEL_13:
      if (v8 <= *(_DWORD *)(a1 + 28))
        sub_10020D6A8(a1);
    }
LABEL_20:
    sub_10020D65C();
  }
  v12 = sub_10020CEA0(a1, a2 + 1, a3);
  if (v12 == v5)
  {
    v13 = sub_10020D108(a1, a2 + 1, a3, 0);
    if (v13 == v5)
      return a2;
    else
      return v13;
  }
  return v12;
}

_BYTE *sub_10020CB90(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3)
      operator new();
    sub_10020F684();
  }
  return a2;
}

void sub_10020CCDC()
{
  operator delete();
}

void sub_10020CD00()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badrepeat);
}

void sub_10020CD38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_10020CD4C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case ')':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case ']':
      case '^':
      case '{':
      case '|':
      case '}':
        return a2;
      default:
        sub_10020D4D8(a1);
    }
  }
  return a2;
}

_QWORD *sub_10020CDBC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020CE00(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_10020CE54()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_escape);
}

void sub_10020CE8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_10020CEA0(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        operator new();
      case 'S':
        operator new();
      case 'W':
        operator new();
      case 'd':
        operator new();
      case 's':
        operator new();
      case 'w':
        operator new();
      default:
        return a2;
    }
  }
  return a2;
}

void sub_10020D0D0()
{
  operator delete();
}

unsigned __int8 *sub_10020D108(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  char v5;
  unsigned __int8 *result;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = 0;
  switch(*a2)
  {
    case '0':
      if (!this)
        goto LABEL_48;
      std::string::operator=(this, 0);
      return v4 + 1;
    case 'c':
      if (a2 + 1 == a3)
        goto LABEL_55;
      v8 = a2[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_55;
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, v8 & 0x1F);
      v4 += 2;
      return v4;
    case 'f':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 12);
      return v4 + 1;
    case 'n':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 10);
      return v4 + 1;
    case 'r':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 13);
      return v4 + 1;
    case 't':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 == a3)
        goto LABEL_55;
      v9 = a2[1];
      if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
        goto LABEL_55;
      v4 = a2 + 2;
      if (a2 + 2 == a3)
        goto LABEL_55;
      v10 = *v4;
      v11 = -48;
      if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
        goto LABEL_32;
      v10 |= 0x20u;
      if ((v10 - 97) >= 6)
        goto LABEL_55;
      v11 = -87;
LABEL_32:
      v5 = 16 * (v11 + v10);
LABEL_33:
      if (v4 + 1 == a3)
        goto LABEL_55;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_38;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6)
        goto LABEL_55;
      v13 = -87;
LABEL_38:
      if (v4 + 2 == a3)
        goto LABEL_55;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6)
LABEL_55:
          sub_10020CE54();
        v15 = -87;
      }
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v5));
      result = v4 + 3;
      break;
    case 'v':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 11);
      return v4 + 1;
    case 'x':
      goto LABEL_33;
    default:
      v7 = *a2;
      if (*a2 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v7) & 0x500) != 0)
        goto LABEL_55;
      if (!this)
LABEL_48:
        sub_10020D4D8(a1);
      std::string::operator=(this, v7);
      return v4 + 1;
  }
  return result;
}

void sub_10020D4D8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0)
      operator new();
    operator new();
  }
  operator new();
}

void sub_10020D60C()
{
  _QWORD *v0;
  std::locale *v1;
  uint64_t v2;

  std::locale::~locale(v1);
  *v0 = off_1003FD790;
  v2 = v0[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

void sub_10020D65C()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_backref);
}

void sub_10020D694(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10020D6A8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0)
      operator new();
    operator new();
  }
  operator new();
}

std::locale *sub_10020D7A4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD928;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_10020D7FC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD928;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

uint64_t sub_10020D864(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *sub_10020D8E8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD970;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_10020D940(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FD970;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

uint64_t sub_10020D9A8(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

_QWORD *sub_10020D9F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020DA34(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_10020DA88(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_10020DAD0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FDA00;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_10020DB28(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FDA00;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

uint64_t sub_10020DB90(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *sub_10020DC88(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FDA48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_10020DCE0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)off_1003FDA48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete();
}

uint64_t sub_10020DD48(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = *(unsigned __int8 **)(a2 + 16);
    v9 = v6;
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v8++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v9);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_10020DDD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_10020DE1C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

unsigned int *sub_10020DE70(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_10020D65C();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void sub_10020DF3C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_1000D02C0();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t sub_10020E3B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)a1 = off_1003FDAD8;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_10020E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  sub_1000FE50C((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    sub_10020E564(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_10020E564(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    *(_QWORD *)v9 = off_1003FD790;
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **sub_10020E564(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_10020E5F4(std::locale *a1)
{
  sub_10020F048(a1);
  operator delete();
}

void sub_10020E618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void **v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  size_t v59;
  const void *v60;
  size_t v61;
  int v62;
  _BOOL4 v63;
  int v64;
  size_t v65;
  const void *v66;
  size_t v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  size_t v75;
  void *v76;
  size_t v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  void **v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  void **v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  const void *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  void *__src[2];
  unsigned __int8 v134;
  unsigned __int8 v135;
  void *__p;
  size_t __n;
  char v138;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v37 = 0;
    v35 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_215;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_58;
  v6 = *v4;
  LOBYTE(__src[0]) = *v4;
  v7 = v4[1];
  BYTE1(__src[0]) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(__src[0]) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    BYTE1(__src[0]) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_10020F2B4(__src, a1 + 16, (_BYTE *)__src + 2, (uint64_t)&__p);
  if ((v138 & 0x80000000) == 0)
  {
    if (v138)
      goto LABEL_8;
LABEL_58:
    v35 = 0;
    v37 = 1;
    v39 = **(_BYTE **)(v2 + 16);
    v135 = v39;
    if (!*(_BYTE *)(a1 + 169))
      goto LABEL_60;
    goto LABEL_59;
  }
  v38 = __n;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unsigned __int8 *)(v9 + 1);
    while (LOBYTE(__src[0]) != *(v12 - 1) || BYTE1(__src[0]) != *v12)
    {
      v12 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_212;
  }
LABEL_17:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v35 = 0;
    goto LABEL_166;
  }
  sub_10020F188(a1 + 16, __src, (_BYTE *)__src + 2);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = v138;
  v16 = *(_QWORD *)(a1 + 96) - v14;
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 48;
    v124 = v138;
    if (v138 >= 0)
      v19 = v138;
    else
      v19 = __n;
    if (v138 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v18 <= 1)
      v21 = 1;
    else
      v21 = v16 / 48;
    v22 = 1;
    do
    {
      v23 = *(char *)(v14 + 23);
      if (v23 >= 0)
        v24 = *(unsigned __int8 *)(v14 + 23);
      else
        v24 = *(_QWORD *)(v14 + 8);
      if (v23 >= 0)
        v25 = (const void *)v14;
      else
        v25 = *(const void **)v14;
      if (v24 >= v19)
        v26 = v19;
      else
        v26 = v24;
      v27 = memcmp(p_p, v25, v26);
      v28 = v19 >= v24;
      if (v27)
        v28 = v27 >= 0;
      if (v28)
      {
        v29 = *(char *)(v14 + 47);
        if (v29 >= 0)
          v30 = *(unsigned __int8 *)(v14 + 47);
        else
          v30 = *(_QWORD *)(v14 + 32);
        if (v29 >= 0)
          v31 = (const void *)(v14 + 24);
        else
          v31 = *(const void **)(v14 + 24);
        if (v19 >= v30)
          v32 = v30;
        else
          v32 = v19;
        v33 = memcmp(v31, p_p, v32);
        v34 = v30 >= v19;
        if (v33)
          v34 = v33 >= 0;
        if (v34)
        {
          v35 = 1;
          v36 = 5;
          goto LABEL_161;
        }
      }
      v22 = ++v17 < v18;
      v14 += 48;
    }
    while (v21 != v17);
    v36 = 0;
    v35 = 0;
LABEL_161:
    v8 = a1 + 16;
    v15 = v124;
  }
  else
  {
    v22 = 0;
    v36 = 0;
    v35 = 0;
  }
  if (v15 < 0)
    operator delete(__p);
  if (!v22)
  {
LABEL_166:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_194;
    v132 = v35;
    sub_10020F4F0(__src, v8, (_BYTE *)__src + 2, (uint64_t)&__p);
    v89 = *(_QWORD *)(a1 + 136);
    v90 = *(_QWORD *)(a1 + 144) - v89;
    if (v90)
    {
      v91 = v90 / 24;
      v92 = __n;
      if (v138 >= 0)
        v93 = v138;
      else
        v93 = __n;
      if (v138 < 0)
      {
        v129 = v138;
        v109 = 0;
        v110 = __p;
        if (v91 <= 1)
          v111 = 1;
        else
          v111 = v90 / 24;
        v96 = 1;
        do
        {
          v112 = *(unsigned __int8 *)(v89 + 23);
          v113 = (char)v112;
          if ((v112 & 0x80u) != 0)
            v112 = *(_QWORD *)(v89 + 8);
          if (v93 == v112)
          {
            v114 = v113 >= 0 ? (const void *)v89 : *(const void **)v89;
            if (!memcmp(v110, v114, v92))
            {
              v35 = 1;
              v36 = 5;
              if ((v129 & 0x80000000) == 0)
                goto LABEL_190;
              goto LABEL_189;
            }
          }
          v96 = ++v109 < v91;
          v89 += 24;
        }
        while (v111 != v109);
        v36 = 0;
        v35 = v132;
        if ((v129 & 0x80000000) == 0)
          goto LABEL_190;
LABEL_189:
        operator delete(__p);
        goto LABEL_190;
      }
      if (!v138)
      {
        v115 = *(unsigned __int8 *)(v89 + 23);
        if ((v115 & 0x80u) != 0)
          v115 = *(_QWORD *)(v89 + 8);
        if (v115 == v138)
        {
          v35 = 1;
          goto LABEL_214;
        }
        v116 = 0;
        if (v91 <= 1)
          v117 = 1;
        else
          v117 = v91;
        v118 = v117 - 1;
        v119 = (uint64_t *)(v89 + 32);
        while (v118 != v116)
        {
          ++v116;
          v120 = *((unsigned __int8 *)v119 + 15);
          v122 = *v119;
          v119 += 3;
          v121 = v122;
          if ((v120 & 0x80u) != 0)
            v120 = v121;
          if (v93 == v120)
          {
            v96 = v116 < v91;
            v35 = 1;
            v36 = 5;
            goto LABEL_190;
          }
        }
        v96 = 0;
        v36 = 0;
LABEL_190:
        if (v96)
          goto LABEL_191;
LABEL_194:
        if (SLOBYTE(__src[0]) < 0)
        {
          v105 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          v102 = *(_DWORD *)(a1 + 160);
          v103 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v104 = *(_DWORD *)(v103 + 4 * LOBYTE(__src[0]));
          if (((v104 & v102) != 0 || LOBYTE(__src[0]) == 95 && (v102 & 0x80) != 0)
            && (SBYTE1(__src[0]) & 0x80000000) == 0
            && ((*(_DWORD *)(v103 + 4 * BYTE1(__src[0])) & v102) != 0 || (v102 & 0x80) != 0 && BYTE1(__src[0]) == 95))
          {
            goto LABEL_212;
          }
          v105 = *(_DWORD *)(a1 + 164);
          if ((v104 & v105) != 0 || LOBYTE(__src[0]) == 95 && (v105 & 0x80) != 0)
          {
LABEL_211:
            v106 = v35;
LABEL_213:
            v35 = v106;
            goto LABEL_214;
          }
        }
        if ((SBYTE1(__src[0]) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * BYTE1(__src[0])) & v105) == 0)
          {
            v106 = 1;
            if (BYTE1(__src[0]) != 95 || (v105 & 0x80) == 0)
              goto LABEL_213;
          }
          goto LABEL_211;
        }
LABEL_212:
        v106 = 1;
        goto LABEL_213;
      }
      v94 = 0;
      if (v91 <= 1)
        v95 = 1;
      else
        v95 = v90 / 24;
      v96 = 1;
      do
      {
        v97 = (unsigned __int8 *)(v89 + 24 * v94);
        v98 = v97[23];
        v99 = (char)v98;
        if ((v98 & 0x80u) != 0)
          v98 = *((_QWORD *)v97 + 1);
        if (v93 == v98)
        {
          if (v99 < 0)
            v97 = *(unsigned __int8 **)v97;
          v100 = &__p;
          v101 = v138;
          while (*(unsigned __int8 *)v100 == *v97)
          {
            v100 = (void **)((char *)v100 + 1);
            ++v97;
            if (!--v101)
            {
              v35 = 1;
              v36 = 5;
              if ((v138 & 0x80000000) == 0)
                goto LABEL_190;
              goto LABEL_189;
            }
          }
        }
        v96 = ++v94 < v91;
      }
      while (v94 != v95);
    }
    v96 = 0;
    v36 = 0;
    if ((v138 & 0x80000000) == 0)
      goto LABEL_190;
    goto LABEL_189;
  }
LABEL_191:
  if (v36)
  {
LABEL_214:
    v37 = 2;
    goto LABEL_215;
  }
  v37 = 2;
  v39 = **(_BYTE **)(v2 + 16);
  v135 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_59:
    v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v39);
    v135 = v39;
  }
LABEL_60:
  v40 = *(unsigned __int8 **)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 48) - (_QWORD)v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_65;
    }
LABEL_76:
    v35 = 1;
    goto LABEL_215;
  }
LABEL_65:
  v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v39) & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    v45 = *(void **)(a1 + 72);
    v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(_QWORD *)(a1 + 64));
    v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45)
      goto LABEL_76;
  }
  v49 = *(_QWORD *)(a1 + 88);
  v48 = *(_QWORD *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      v138 = 1;
      LOWORD(__p) = v39;
      (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(__src, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 1);
      if (v138 < 0)
        operator delete(__p);
      v49 = *(_QWORD *)(a1 + 88);
      v50 = v134;
      v51 = *(_QWORD *)(a1 + 96) - v49;
      if (v51)
      {
LABEL_82:
        v125 = v2;
        v127 = v37;
        v130 = v35;
        v52 = 0;
        v53 = v51 / 48;
        v123 = v50;
        if ((v50 & 0x80u) == 0)
          v54 = (void *)v50;
        else
          v54 = __src[1];
        if ((v50 & 0x80u) == 0)
          v55 = __src;
        else
          v55 = (void **)__src[0];
        if (v53 <= 1)
          v56 = 1;
        else
          v56 = v51 / 48;
        v57 = 1;
        do
        {
          v58 = *(char *)(v49 + 23);
          if (v58 >= 0)
            v59 = *(unsigned __int8 *)(v49 + 23);
          else
            v59 = *(_QWORD *)(v49 + 8);
          if (v58 >= 0)
            v60 = (const void *)v49;
          else
            v60 = *(const void **)v49;
          if (v59 >= (unint64_t)v54)
            v61 = (size_t)v54;
          else
            v61 = v59;
          v62 = memcmp(v55, v60, v61);
          v63 = (unint64_t)v54 >= v59;
          if (v62)
            v63 = v62 >= 0;
          if (v63)
          {
            v64 = *(char *)(v49 + 47);
            if (v64 >= 0)
              v65 = *(unsigned __int8 *)(v49 + 47);
            else
              v65 = *(_QWORD *)(v49 + 32);
            if (v64 >= 0)
              v66 = (const void *)(v49 + 24);
            else
              v66 = *(const void **)(v49 + 24);
            if ((unint64_t)v54 >= v65)
              v67 = v65;
            else
              v67 = (size_t)v54;
            v68 = memcmp(v66, v55, v67);
            v69 = v65 >= (unint64_t)v54;
            if (v68)
              v69 = v68 >= 0;
            if (v69)
            {
              v35 = 1;
              v2 = v125;
              v37 = v127;
              if ((v123 & 0x80) == 0)
                goto LABEL_122;
              goto LABEL_121;
            }
          }
          v57 = ++v52 < v53;
          v49 += 48;
        }
        while (v56 != v52);
        v2 = v125;
        v37 = v127;
        v35 = v130;
        if ((v123 & 0x80) == 0)
          goto LABEL_122;
        goto LABEL_121;
      }
    }
    else
    {
      v134 = 1;
      LOWORD(__src[0]) = v39;
      v50 = 1;
      v51 = v48 - v49;
      if (v51)
        goto LABEL_82;
    }
    v57 = 0;
    if ((v50 & 0x80) == 0)
    {
LABEL_122:
      if (v57)
        goto LABEL_215;
      goto LABEL_123;
    }
LABEL_121:
    operator delete(__src[0]);
    goto LABEL_122;
  }
LABEL_123:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
LABEL_154:
    if ((v39 & 0x80) != 0)
      goto LABEL_215;
    v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v39) & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v39 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_215;
    }
    goto LABEL_76;
  }
  sub_10020F4F0(&v135, a1 + 16, &__p, (uint64_t)&__p);
  v70 = *(_QWORD *)(a1 + 136);
  v71 = v138;
  v72 = *(_QWORD *)(a1 + 144) - v70;
  if (v72)
  {
    v128 = v37;
    v131 = v35;
    v73 = 0;
    v74 = v72 / 24;
    v76 = __p;
    v75 = __n;
    if (v138 >= 0)
      v77 = v138;
    else
      v77 = __n;
    if (v74 <= 1)
      v78 = 1;
    else
      v78 = v72 / 24;
    v79 = 1;
    while (1)
    {
      v81 = (unsigned __int8 **)(v70 + 24 * v73);
      v82 = (unsigned __int8 *)*((unsigned __int8 *)v81 + 23);
      v83 = (char)v82;
      if ((char)v82 < 0)
        v82 = v81[1];
      if ((unsigned __int8 *)v77 == v82)
      {
        if (v83 >= 0)
          v84 = (unsigned __int8 *)(v70 + 24 * v73);
        else
          v84 = *v81;
        if ((v71 & 0x80) != 0)
        {
          v126 = v70;
          v80 = memcmp(v76, v84, v75);
          v70 = v126;
          if (!v80)
          {
            v35 = 1;
            v37 = v128;
            goto LABEL_151;
          }
        }
        else
        {
          if (!(_DWORD)v71)
          {
            v35 = 1;
            v37 = v128;
            if (!v79)
              goto LABEL_153;
            goto LABEL_215;
          }
          v85 = &__p;
          v86 = v71;
          while (*(unsigned __int8 *)v85 == *v84)
          {
            v85 = (void **)((char *)v85 + 1);
            ++v84;
            if (!--v86)
            {
              v35 = 1;
              v37 = v128;
              if ((v71 & 0x80) == 0)
                goto LABEL_152;
              goto LABEL_151;
            }
          }
        }
      }
      v79 = ++v73 < v74;
      if (v73 == v78)
      {
        v35 = v131;
        v37 = v128;
        if ((v71 & 0x80) == 0)
          goto LABEL_152;
        goto LABEL_151;
      }
    }
  }
  v79 = 0;
  if (v138 < 0)
LABEL_151:
    operator delete(__p);
LABEL_152:
  if (!v79)
  {
LABEL_153:
    v39 = v135;
    goto LABEL_154;
  }
LABEL_215:
  if (v35 == *(unsigned __int8 *)(a1 + 168))
  {
    v107 = 0;
    v108 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v37;
    v107 = *(_QWORD *)(a1 + 8);
    v108 = -995;
  }
  *(_DWORD *)v2 = v108;
  *(_QWORD *)(v2 + 80) = v107;
}

void sub_10020F02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *sub_10020F048(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)off_1003FDAD8;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)off_1003FD790;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_10020F188(uint64_t a1, _BYTE *__src, _BYTE *a3)
{
  size_t v3;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  void **__dst;
  size_t v13;
  int64_t v14;

  v3 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v3 <= 0x16)
  {
    HIBYTE(v14) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v3);
    p_dst = (void **)((char *)p_dst + v3);
    goto LABEL_9;
  }
  v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17)
    v8 = v3 | 7;
  v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  v13 = v3;
  v14 = v9 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v10 = HIBYTE(v14);
  if (v14 >= 0)
    v11 = (void **)&__dst;
  else
    v11 = __dst;
  if (v14 < 0)
    v10 = v13;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v11, (char *)v11 + v10);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_10020F298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020F2B4(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v19;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a4 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_10020F4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020F4F0(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v5;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a4;
    else
      v16 = *(_BYTE **)a4;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_10020F668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10020F684()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brack);
}

void sub_10020F6BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_10020F6D0(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  char v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  std::string::size_type size;
  std::string __p;
  std::string v32;
  std::string v33;
  std::string v34;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  memset(&v33, 0, sizeof(v33));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_10:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_11;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 != 58)
    {
      if (v9 == 61)
      {
        v6 = sub_10020FC08(a1, a2 + 2, a3, a4);
        v10 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_61;
      }
      goto LABEL_10;
    }
    v19 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v20 = 0;
      v21 = (unsigned __int8 *)v4;
      if (v4[2] != 58)
        goto LABEL_37;
LABEL_36:
      if (v21[3] == 93)
      {
        v27 = &v4[v20 + 2];
        if (v27 != a3)
        {
          v28 = sub_100211348(a1, v19, v27, *(_DWORD *)(a1 + 24) & 1);
          if (!v28)
            sub_1002112FC();
          v10 = 0;
          *((_DWORD *)v6 + 40) |= v28;
          v6 = &v4[v20 + 4];
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_61;
          goto LABEL_62;
        }
      }
      else
      {
LABEL_37:
        while (a3 - v4 - 4 != v20)
        {
          v21 = (unsigned __int8 *)&v4[++v20];
          if (v4[v20 + 2] == 58)
            goto LABEL_36;
        }
      }
    }
LABEL_83:
    sub_10020F684();
  }
  v22 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_83;
  v23 = a3 - v4 - 4;
  v24 = v4 + 2;
  v25 = v22 + 1;
  if (*v22 != 46)
    goto LABEL_43;
LABEL_42:
  if (*v25 != 93)
  {
LABEL_43:
    while (v23)
    {
      --v23;
      v24 = v25;
      v26 = *v25++;
      if (v26 == 46)
        goto LABEL_42;
    }
    goto LABEL_83;
  }
  if (v24 == a3)
    goto LABEL_83;
  sub_100210CF8(v22, a1, v24, (uint64_t)&v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33 = v34;
  size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v33.__r_.__value_.__l.__size_;
  if (size - 1 >= 2)
    sub_100210CAC();
  v4 = v24 + 2;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v14 = v4;
  if (!size)
  {
LABEL_11:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = sub_1002100CC(a1, v13, a3, &v33);
        }
        else
        {
          v14 = (char *)sub_10020FF70(a1, (unsigned __int8 *)v13, (unsigned __int8 *)a3, &v33, (uint64_t)v6);
          v11 = 0;
        }
        goto LABEL_17;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v33, v12);
    v14 = v4 + 1;
  }
LABEL_17:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v33.__r_.__value_.__l.__size_)
        goto LABEL_60;
      if (v33.__r_.__value_.__l.__size_ != 1)
      {
        v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
LABEL_59:
        sub_1002108E4((uint64_t)v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
LABEL_60:
        v10 = 1;
        v4 = v14;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_61;
      }
      v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&v33.__r_.__value_.__s + 23))
        goto LABEL_60;
      v16 = &v33;
      if (HIBYTE(v33.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_59;
    }
    sub_10020DF3C((uint64_t)v6, v16->__r_.__value_.__s.__data_[0]);
    goto LABEL_60;
  }
  memset(&v34, 0, sizeof(v34));
  v4 = v14 + 2;
  if (v14 + 2 == a3 || *v17 != 91 || *v4 != 46)
  {
    if ((v11 | 0x40) == 0x40)
    {
      LODWORD(v17) = *v17;
      if ((_DWORD)v17 == 92)
      {
        if (v11)
          v18 = sub_1002100CC(a1, v14 + 2, a3, &v34);
        else
          v18 = (char *)sub_10020FF70(a1, (unsigned __int8 *)v14 + 2, (unsigned __int8 *)a3, &v34, (uint64_t)v6);
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v17) = *v17;
    }
    std::string::operator=(&v34, (std::string::value_type)v17);
    goto LABEL_74;
  }
  v18 = sub_10020FE74(a1, v14 + 3, a3, (uint64_t)&v34);
LABEL_73:
  v4 = v18;
LABEL_74:
  v32 = v33;
  memset(&v33, 0, sizeof(v33));
  __p = v34;
  memset(&v34, 0, sizeof(v34));
  sub_1002103B8((uint64_t)v6, (char *)&v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_77;
LABEL_81:
      operator delete(v34.__r_.__value_.__l.__data_);
      v10 = 1;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_61;
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_81;
LABEL_77:
  v10 = 1;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_61:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_62:
  if ((v10 & 1) != 0)
    return v4;
  return v6;
}

void sub_10020FB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(v28 - 72));
  if ((a28 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

char *sub_10020FC08(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    sub_10020F684();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  sub_100210CF8(__src, a1, &__src[v7], (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v9 = v22;
    if (v22)
    {
      v10 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_40:
    sub_100210CAC();
  }
  v9 = v21;
  if (!v21)
    goto LABEL_40;
  v10 = (char *)v20;
LABEL_14:
  sub_100210F34(a1, (uint64_t)v10, &v10[v9], (uint64_t)__p);
  v11 = (void *)HIBYTE(v19);
  if (v19 < 0)
    v11 = __p[1];
  if (v11)
  {
    v12 = *(_QWORD *)(a4 + 144);
    if (v12 >= *(_QWORD *)(a4 + 152))
    {
      *(_QWORD *)(a4 + 144) = sub_100211128((char **)(a4 + 136), (uint64_t)__p);
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        sub_10006CED8(*(_BYTE **)(a4 + 144), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v19;
        *(_OWORD *)v12 = v13;
      }
      *(_QWORD *)(a4 + 144) = v12 + 24;
      *(_QWORD *)(a4 + 144) = v12 + 24;
      if (SHIBYTE(v19) < 0)
        goto LABEL_37;
    }
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      sub_1002108E4(a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        sub_100210CAC();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      sub_10020DF3C(a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__p[0]);
      if ((char)v22 < 0)
        goto LABEL_38;
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0)
LABEL_38:
    operator delete(v20);
  return &__src[v7 + 2];
}

void sub_10020FE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_10020FE74(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    sub_10020F684();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  sub_100210CF8(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    sub_100210CAC();
  return &__src[v6 + 2];
}

unsigned __int8 *sub_10020FF70(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    sub_10020CE54();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      sub_100211490(a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      std::string::operator=(this, 8);
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_10020DF3C(a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_6:
        result = sub_10020D108(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        result = a2 + 1;
      }
      break;
  }
  return result;
}

char *sub_1002100CC(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v5;
  char *v7;
  std::string::value_type v8;
  char v9;
  int v10;
  std::string::value_type v11;
  std::string::value_type v12;

  if (a2 == a3)
LABEL_43:
    sub_10020CE54();
  v5 = *a2;
  switch(v5)
  {
    case '"':
    case '/':
    case '\\':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, v5);
      return a2 + 1;
    case 'a':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 7);
      return a2 + 1;
    case 'b':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 8);
      return a2 + 1;
    case 'f':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 12);
      return a2 + 1;
    case 'n':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 10);
      return a2 + 1;
    case 'r':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 13);
      return a2 + 1;
    case 't':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 9);
      return a2 + 1;
    case 'v':
      if (!this)
        sub_10020D4D8(a1);
      std::string::operator=(this, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_43;
      v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v7 = a3;
LABEL_32:
        v12 = v5 - 48;
        if (!this)
          goto LABEL_42;
        goto LABEL_33;
      }
      if ((*v7 & 0xF8) != 0x30)
        goto LABEL_32;
      v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 == a3)
      {
        v7 = a3;
        v12 = v8;
        if (!this)
          goto LABEL_42;
      }
      else
      {
        v9 = a2[2];
        v10 = v9 & 0xF8;
        v11 = v9 + 8 * v8 - 48;
        if (v10 == 48)
          v7 = a2 + 3;
        else
          v7 = a2 + 2;
        if (v10 == 48)
          v8 = v11;
        v12 = v8;
        if (!this)
LABEL_42:
          sub_10020D4D8(a1);
      }
LABEL_33:
      std::string::operator=(this, v12);
      return v7;
  }
}

void sub_1002103B8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      sub_100211A98();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = sub_100211AE4((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_100211908(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  sub_100211908(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = sub_100211AE4((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_100210894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000F7B78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002108A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_1000F7B78((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_1002108E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        sub_1000CDEB8();
      }
LABEL_67:
      sub_1000D02C0();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void sub_100210CAC()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_collate);
}

void sub_100210CE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100210CF8(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  std::string v19;
  std::string __dst;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v5 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_)
      goto LABEL_17;
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
      return;
    v12 = &__dst;
  }
  std::__get_collation_name(&v19, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  v13 = v19.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_17;
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v16 = &__dst;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v19, *(_QWORD *)(a2 + 16), v16, (char *)v16 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v19;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a4 + 23);
    if (v17 != 12 && v17 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a4 + 8);
  if (v18 == 1 || v18 == 12)
  {
LABEL_33:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_100210EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100210F34(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _OWORD *p_p;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v25 = v5;
    v26 = v17 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v10 = p_p;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = p_p + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a4 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21 == 1)
    goto LABEL_32;
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p);
      return;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0)
    goto LABEL_35;
}

void sub_10021110C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100211128(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1002112E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FF910((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002112FC()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_ctype);
}

void sub_100211334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100211348(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0)
    v14 = (const char *)&__dst;
  else
    v14 = (const char *)__dst;
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  return classname;
}

void sub_100211474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100211490(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_1000D02C0();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void sub_100211908(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *p_p;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  void *__p;
  unint64_t v20;
  int64_t v21;

  v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    v20 = v3;
    v21 = v15 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v8 = p_p;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = p_p + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = HIBYTE(v21);
  if (v21 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  if (v21 < 0)
    v17 = v20;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_100211A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100211A98()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_range);
}

void sub_100211AD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_100211AE4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_1000D02C0();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_1000CDEB8();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 3);
    *((_QWORD *)v8 - 4) = *((_QWORD *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((_QWORD *)v13 - 5) = 0;
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 6) = 0;
    v15 = *(_OWORD *)(v13 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v13 - 1);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    *((_QWORD *)v13 - 2) = 0;
    *((_QWORD *)v13 - 1) = 0;
    *((_QWORD *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  v16 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0)
LABEL_20:
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        v13 = v16;
        break;
      }
    }
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v11;
}

_QWORD *sub_100211C94(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100211CD8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_100211D2C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_100211D5C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100211DA0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_100211DF4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_100211E2C()
{
  operator new();
}

void sub_100211F40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100211F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100211F7C()
{
  operator new();
}

void sub_10021209C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1002120B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1002120D8()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_badbrace);
}

void sub_100212110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100212124()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, error_brace);
}

void sub_10021215C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100212170(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1002121D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

uint64_t sub_100212250(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t sub_100212434(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

_QWORD *sub_1002124FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100212564(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

void sub_1002125E0()
{
  operator delete();
}

uint64_t sub_1002125F4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_100212608(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100212670(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003FDC10;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = off_1003FD790;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete();
}

void sub_1002126E8(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1002126F4(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_10021271C()
{
  operator delete();
}

uint64_t sub_100212730(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_100212744()
{
  std::regex_error *exception;

  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_10021277C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100212790(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v6 = sub_100212F6C(a1, a2, a3);
  v7 = v6;
  if (v6 != a2 || v6 == a3)
    return v7;
  if (a2 + 1 == a3)
    return a2;
  if (*a2 == 92)
  {
    v8 = a2[1];
    if (v8 == 40)
    {
      v9 = a2 + 2;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        operator new();
      do
      {
        if (v9 == a3)
          goto LABEL_24;
        v11 = v9;
        v12 = (unsigned __int8 *)sub_100212790(a1, v9, a3);
        if (v12 == v9)
          break;
        v9 = sub_1002129D4(a1, v12, a3);
      }
      while (v9 != v11);
      if (v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
LABEL_24:
        sub_10020B578();
      v7 = &v11[2 * (v11[1] == 41)];
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
        operator new();
      return v7;
    }
    if (((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38) && (v8 - 49) <= 8)
    {
      if ((v8 - 48) <= *(_DWORD *)(a1 + 28))
        sub_10020D6A8(a1);
      sub_10020D65C();
    }
  }
  return a2;
}

unsigned __int8 *sub_1002129D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (a2 != a3)
  {
    v3 = *a2;
    if (v3 == 42)
      operator new();
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      v4 = &a2[2 * (a2[1] == 123)];
      if (v4 == a3)
        goto LABEL_43;
      v5 = *v4;
      if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
        goto LABEL_43;
      v6 = v5 - 48;
      v7 = v4 + 1;
      if (v4 + 1 == a3)
      {
LABEL_15:
        v7 = a3;
      }
      else
      {
        while (1)
        {
          v8 = *v7;
          if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38)
            break;
          if (v6 >= 214748364)
            goto LABEL_43;
          v6 = v8 + 10 * v6 - 48;
          if (++v7 == a3)
            goto LABEL_15;
        }
      }
      if (v7 == v4)
LABEL_43:
        sub_1002120D8();
      if (v7 != a3)
      {
        v9 = v7 + 1;
        v10 = *v7;
        if (v10 == 44)
        {
          if (v9 == a3)
            goto LABEL_40;
          v11 = *v9;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
          {
            v9 = v7 + 2;
            if (v7 + 2 == a3)
              goto LABEL_40;
            v12 = v11 - 48;
            while (1)
            {
              v13 = *v9;
              if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
                break;
              if (v12 >= 214748364)
                goto LABEL_43;
              v12 = v13 + 10 * v12 - 48;
              if (++v9 == a3)
                goto LABEL_40;
            }
          }
          else
          {
            v12 = -1;
          }
          if (v9 != a3 && v9 + 1 != a3 && *v9 == 92 && v9[1] == 125)
          {
            if (v12 == -1)
              operator new();
            if (v12 >= v6)
              operator new();
            goto LABEL_43;
          }
        }
        else if (v9 != a3 && v10 == 92 && v7[1] == 125)
        {
          operator new();
        }
      }
LABEL_40:
      sub_100212124();
    }
  }
  return a2;
}

void sub_100212EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_100212F6C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3;
  unsigned __int8 *v4;
  unsigned int v7;

  if (a2 != a3)
  {
    v4 = a2 + 1;
    v3 = *a2;
    if (a2 + 1 != a3 || v3 != 36)
    {
      if ((v3 - 46) > 0x2E || ((1 << (v3 - 46)) & 0x600000000001) == 0)
        sub_10020D4D8(a1);
      if (v4 != a3 && v3 == 92)
      {
        v7 = (char)*v4 - 36;
        if (v7 <= 0x3A && ((1 << v7) & 0x580000000000441) != 0)
          sub_10020D4D8(a1);
      }
      if (*a2 == 46)
        operator new();
    }
  }
  return sub_10020CB90(a1, a2, a3);
}

_QWORD *sub_1002130BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FD790;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100213100(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_1003FD790;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

uint64_t sub_100213154(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_100213194(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28))
      sub_10020D6A8(a1);
    sub_10020D65C();
  }
  return 0;
}

char *sub_1002131F4(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  int v7;
  char *v8;

  v6 = sub_1002134C8(a1, a2, a3);
  if (v6 == a2 && (v6 = sub_100213540(a1, a2, a3), v6 == a2))
  {
    if (a2 != a3 && *a2 == 46)
      operator new();
    v6 = sub_10020CB90(a1, a2, a3);
    if (v6 != a2)
      goto LABEL_22;
  }
  else if (v6 != a2)
  {
    goto LABEL_22;
  }
  if (v6 != a3)
  {
    v7 = *a2;
    if (v7 == 36)
      operator new();
    if (v7 != 40)
    {
      if (v7 == 94)
        operator new();
      return a2;
    }
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      operator new();
    ++*(_DWORD *)(a1 + 36);
    v8 = (char *)sub_100209B24(a1, a2 + 1, a3);
    if (v8 == a3 || *v8 != 41)
      sub_10020B578();
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      operator new();
    --*(_DWORD *)(a1 + 36);
    v6 = v8 + 1;
  }
LABEL_22:
  if (v6 != a2)
    return sub_10020AA80(a1, v6, a3);
  return a2;
}

_BYTE *sub_1002134C8(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        return a2;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_5;
        return a2;
      default:
LABEL_5:
        sub_10020D4D8(a1);
    }
  }
  return a2;
}

char *sub_100213540(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  char *result;
  int v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v4 = a2 + 1;
  if (a2 + 1 == a3 || *a2 != 92)
    return a2;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_10020D4D8(a1);
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = sub_1002100CC(a1, v4, a3, 0);
      }
      else
      {
        v6 = sub_100213194(a1, *v4);
        v7 = 2;
        if (!v6)
          v7 = 0;
        result = &a2[v7];
      }
      break;
  }
  return result;
}

void *sub_100213600(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;

  v7 = sub_1000B40D8((uint64_t)v34, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = *(void **)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x20uLL);
  v34[0] = v12;
  v34[1] = a1 + 16;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  v16 = a3[1];
  *((_QWORD *)v12 + 2) = *a3;
  *((_QWORD *)v12 + 3) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v35 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v22)
    {
LABEL_29:
      *(_QWORD *)v12 = *v22;
LABEL_64:
      *v22 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v22)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v22)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v31 & v8;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v8));
      if (v22)
        goto LABEL_29;
    }
  }
  *(_QWORD *)v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v21 + 8 * v3) = v15;
  if (*(_QWORD *)v12)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9)
        v32 %= v9;
    }
    else
    {
      v32 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_100213940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100213954(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1002139D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  __int128 *v11;
  int v12;
  uint64_t i;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v11 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_10020C104(a4, (v10 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  if ((v9 & 0x800) == 0)
    *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_10020BC90(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) != 0)
      goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_1002147A4(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
      goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = a2 + 1; i != a3; ++i)
      {
        sub_10020C104(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_1002147A4(a1, i, a3, (uint64_t *)a4, v12, 0))
              goto LABEL_28;
          }
          else if ((sub_100213E98(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((sub_10020BC90(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        sub_10020C104(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      }
      sub_10020C104(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_1002147A4(a1, a3, a3, (uint64_t *)a4, v12, 0))
            goto LABEL_28;
        }
        else if ((sub_100213E98(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((sub_10020BC90(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    return result;
  }
  if ((sub_100213E98(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0)
    goto LABEL_13;
LABEL_28:
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
    v14 = v11;
  else
    v14 = *(__int128 **)a4;
  v15 = *(_QWORD *)v14;
  *(_QWORD *)(a4 + 56) = *(_QWORD *)v14;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v15;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(a4 + 72) = v16;
  *(_BYTE *)(a4 + 88) = v16 != *(_QWORD *)(a4 + 80);
  return 1;
}

void sub_100213CDC(void **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  char v24;
  char *v25;
  char *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a1) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v13 = &v12[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v13;
    }
  }
  else
  {
    sub_100215D9C(a1, v11 - v14);
    v12 = (char *)*a1;
    v13 = (char *)a1[1];
  }
  if (v13 != v12)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      *(_QWORD *)&v12[v15] = a2 + *v21 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = a4 + 3;
      else
        v22 = (uint64_t *)(*a4 + v15);
      *(_QWORD *)((char *)*a1 + v15 + 8) = a2 + v22[1] - v10;
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = a4 + 3;
      else
        v23 = (uint64_t *)(*a4 + v15);
      v24 = *((_BYTE *)v23 + 16);
      v12 = (char *)*a1;
      v25 = (char *)a1[1];
      *((_BYTE *)*a1 + v15 + 16) = v24;
      ++v16;
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v25 - v12) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((_BYTE *)a1 + 40) = 0;
  v26 = (char *)(a2 + a4[6] - v10);
  a1[6] = v26;
  a1[7] = (void *)(a2 + a4[7] - v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a4 + 64);
  a1[9] = (void *)(a2 + a4[9] - v10);
  a1[10] = (void *)(a2 + a4[10] - v10);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[13] = v26;
  *((_BYTE *)a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_100213E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  _BYTE v96[56];
  void *__p[2];
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((_QWORD *)&v99 + 1);
    v85 = (void **)v100;
    *((_QWORD *)&v101 + 1) = 0;
    v86 = v100 - *((_QWORD *)&v99 + 1);
    if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v100;
      v84 = (void **)(*((_QWORD *)&v99 + 1) + 8);
      *((_QWORD *)&v99 + 1) = v84;
      v86 = v100 - (_QWORD)v84;
    }
    while ((_QWORD)v100 - (_QWORD)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v96 = 0;
  memset(&v96[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v98, 0, 21);
  sub_100214F50((uint64_t)&v99);
  v11 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
      + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
  v12 = *(_OWORD *)&v96[16];
  *(_OWORD *)v11 = *(_OWORD *)v96;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v96[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v98[0] = 0;
  v13 = v98[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v101 + 1);
  v14 = v101;
  v16 = ++*((_QWORD *)&v101 + 1);
  v17 = *((_QWORD *)&v99 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v15 + v101;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = v23 + 56;
  v25 = v26;
  v27 = (*(_QWORD *)(v24 + 8) - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      *(_QWORD *)(v24 + 8) = v25 + 16 * v18;
  }
  else
  {
    sub_10020C778((char **)v24, v18 - v27);
    v16 = *((_QWORD *)&v101 + 1);
    v14 = v101;
    v17 = *((_QWORD *)&v99 + 1);
  }
  v93 = 0;
  v28 = 0;
  v92 = 0;
  v29 = v16 + v14 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      sub_10020C2DC();
    v35 = v16 + v101 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v64 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v65 = v92;
        if ((v93 & (v92 >= v64)) == 0)
          v65 = v64;
        if (v65 == v32)
        {
          v66 = (void **)*((_QWORD *)&v99 + 1);
          v67 = v100;
          if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          {
            *((_QWORD *)&v101 + 1) = 0;
            v81 = 0;
          }
          else
          {
            v68 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            v69 = (_QWORD *)(*v68 + 96 * ((unint64_t)v101 % 0x2A));
            v70 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
            if (v69 != (_QWORD *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((_QWORD *)((char *)v69 - *v68) == (_QWORD *)4032)
                {
                  v73 = (_QWORD *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (_QWORD *)v70);
              v66 = (void **)*((_QWORD *)&v99 + 1);
              v67 = v100;
            }
            *((_QWORD *)&v101 + 1) = 0;
            v81 = v67 - (_QWORD)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((_QWORD *)&v99 + 1) + 8);
                *((_QWORD *)&v99 + 1) = v66;
                v81 = v100 - (_QWORD)v66;
              }
              while ((_QWORD)v100 - (_QWORD)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              v93 = 1;
              v92 = a3 - a2;
              goto LABEL_8;
            }
            v82 = 42;
          }
          *(_QWORD *)&v101 = v82;
          goto LABEL_76;
        }
        v92 = v65;
        v74 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v75 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v74 / 0x2A));
        v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(_QWORD *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(_QWORD *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        v79 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v80 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v79 = 0;
        if ((unint64_t)(v79 - (*((_QWORD *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        v93 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          continue;
        if ((v93 & 1) != 0)
        {
          v83 = *v91;
          *(_QWORD *)v83 = a2;
          *(_QWORD *)(v83 + 8) = a2 + v92;
          v6 = 1;
          *(_BYTE *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v84 = (void **)*((_QWORD *)&v99 + 1);
        v85 = (void **)v100;
        *((_QWORD *)&v101 + 1) = 0;
        v86 = v100 - *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v87 = v86 >> 3;
        if (v87 == 1)
        {
          v88 = 21;
LABEL_85:
          *(_QWORD *)&v101 = v88;
        }
        else if (v87 == 2)
        {
          v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((_QWORD)v100 != *((_QWORD *)&v99 + 1))
            *(_QWORD *)&v100 = v100 + ((*((_QWORD *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v99)
          operator delete((void *)v99);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v101;
        if (!(_QWORD)v101)
        {
          sub_10021550C((uint64_t)&v99);
          v49 = v101;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v101 + 1);
        *(_QWORD *)&v101 = v101 - 1;
        ++*((_QWORD *)&v101 + 1);
        v56 = v55 + v101;
        v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v48 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_10020C8A0((uint64_t)v96, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v98[1] + 24))(v98[1], 0, v96);
        v58 = *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v59 = 0;
        else
          v59 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v60 = *((_QWORD *)&v101 + 1) + v101;
        if (v59 == *((_QWORD *)&v101 + 1) + (_QWORD)v101)
        {
          sub_100214F50((uint64_t)&v99);
          v58 = *((_QWORD *)&v99 + 1);
          v60 = *((_QWORD *)&v101 + 1) + v101;
        }
        v61 = *(_QWORD *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        v62 = *(_OWORD *)&v96[16];
        *(_OWORD *)v61 = *(_OWORD *)v96;
        *(_OWORD *)(v61 + 16) = v62;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v96[32];
        *(_QWORD *)(v61 + 48) = *(_QWORD *)&v96[48];
        memset(&v96[32], 0, 24);
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 72) = v98[0];
        __p[0] = 0;
        __p[1] = 0;
        v98[0] = 0;
        v63 = v98[1];
        *(_QWORD *)(v61 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
        *(_QWORD *)(v61 + 80) = v63;
        ++*((_QWORD *)&v101 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v96[32])
        {
          *(_QWORD *)&v96[40] = *(_QWORD *)&v96[32];
          operator delete(*(void **)&v96[32]);
        }
        goto LABEL_8;
      default:
        sub_10020C328();
    }
  }
}

void sub_100214720(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100214EDC((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_100214734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_10020C29C((uint64_t *)va);
  sub_100214EDC((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_10021477C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100214EDC((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_100214790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100214EDC((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_1002147A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[3];
  __int128 v64;
  char v65;
  _BYTE v66[40];
  __int128 v67;
  void *v68[6];
  char *v69;
  char *v70;
  unint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  *(_DWORD *)v66 = 0;
  memset(&v66[8], 0, 32);
  v67 = 0u;
  memset(v68, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  *(_QWORD *)&v64 = a3;
  *((_QWORD *)&v64 + 1) = a3;
  v65 = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v63, 0, 21);
  v70 = sub_10020C3F4((void **)&v69, (uint64_t)v61);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v61[32])
  {
    *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
    operator delete(*(void **)&v61[32]);
  }
  v12 = v70;
  *((_DWORD *)v70 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    sub_10020C5D8((void **)v12 - 8, v14 - v15, &v64);
    v12 = v70;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    sub_10020C778((char **)v12 - 5, v17 - v18);
    v12 = v70;
  }
  v19 = 0;
  v59 = 0;
  v20 = 0;
  v21 = a3 - a2;
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v58 = a3;
  *(v12 - 4) = a6;
  do
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
      sub_10020C2DC();
    v24 = v12 - 16;
    v23 = *((_QWORD *)v12 - 2);
    v25 = v12 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = *((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v58)
          goto LABEL_29;
        v33 = v19;
        v34 = v26 - *((_QWORD *)v12 - 11);
        if ((v59 & (v33 >= v34)) == 0)
        {
          v35 = *(_OWORD *)v25;
          *(_OWORD *)&v66[16] = *((_OWORD *)v12 - 5);
          *(_OWORD *)v66 = v35;
          if (v66 != v25)
          {
            sub_1002158C4((char **)&v66[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            sub_100215AC0((uint64_t)v68, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(void **)v24;
          *(void **)((char *)&v68[3] + 5) = *(void **)(v12 - 11);
          v68[3] = v36;
          v33 = v34;
        }
        v37 = v70;
        if (v33 == v21)
        {
          v38 = v69;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v70 = v38;
          v59 = 1;
          v19 = v21;
        }
        else
        {
          v19 = v33;
          v41 = (void *)*((_QWORD *)v70 - 5);
          if (v41)
          {
            *((_QWORD *)v70 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v70 = v37 - 96;
          v59 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v27 = v70;
        v28 = (void *)*((_QWORD *)v70 - 5);
        if (v28)
        {
          *((_QWORD *)v70 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v70 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_10020C8A0((uint64_t)v61, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
        v30 = v70;
        if ((unint64_t)v70 >= v71)
        {
          v70 = sub_10020C3F4((void **)&v69, (uint64_t)v61);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v61[16];
          *(_OWORD *)v70 = *(_OWORD *)v61;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v61[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v61[48];
          memset(&v61[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v30 + 9) = v63[0];
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v32 = v63[1];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
          *((_QWORD *)v30 + 10) = v32;
          v70 = v30 + 96;
        }
        if (*(_QWORD *)&v61[32])
        {
          *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
          operator delete(*(void **)&v61[32]);
        }
        break;
      default:
        sub_10020C328();
    }
    v12 = v70;
  }
  while (v69 != v70);
  if ((v59 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = v68[0];
    if (!v68[0])
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = a2 + v19;
  *(_BYTE *)(v43 + 16) = 1;
  if ((_QWORD)v67 != *(_QWORD *)&v66[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(_QWORD *)&v66[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v66[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v22 = v44 > v46++;
    }
    while (v22);
  }
  v49 = 1;
  v50 = v68[0];
  if (v68[0])
  {
LABEL_64:
    v68[1] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v66[32])
  {
    *(_QWORD *)&v67 = *(_QWORD *)&v66[32];
    operator delete(*(void **)&v66[32]);
  }
  v51 = v69;
  if (v69)
  {
    v52 = v70;
    v53 = v69;
    if (v70 != v69)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v69;
    }
    v70 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_100214D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_10020C29C(&a33);
  sub_10020C374((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_100214D88(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x2A];
  v6 = (char *)*v5 + 96 * (v4 % 0x2A);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
  if (v6 != (char *)v7)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 + 7);
      if (v8)
      {
        *((_QWORD *)v6 + 8) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v6 + 4);
      if (v9)
      {
        *((_QWORD *)v6 + 5) = v9;
        operator delete(v9);
      }
      v6 += 96;
      if (v6 - (_BYTE *)*v5 == 4032)
      {
        v10 = (char *)v5[1];
        ++v5;
        v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    v2 = (void **)a1[1];
    v3 = (void **)a1[2];
  }
  a1[5] = 0;
  v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      v12 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = v12 - (_QWORD)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **sub_100214EDC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_100214D88(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100214F50(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFC0uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFC0uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1002154AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002154C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002154DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002154F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10021550C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v48 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    sub_100190EA8((void **)a1, &v48);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v48 = operator new(0xFC0uLL);
      sub_100190D1C((char **)a1, &v48);
      v18 = *(_QWORD *)(a1 + 16);
      v48 = *(void **)(v18 - 8);
      *(_QWORD *)(a1 + 16) = v18 - 8;
      sub_100190EA8((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v48 = operator new(0xFC0uLL);
      sub_100190EA8((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_19:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    sub_1000CDEB8();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    v17 = v12;
    if (v3 != v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  v19 = (char *)operator new(8uLL);
  v15 = v19 + 8;
  operator delete(v12);
  v3 = *(uint64_t **)(a1 + 8);
  v20 = *(uint64_t **)(a1 + 16);
  v12 = v19;
  *(_QWORD *)v19 = v14;
  v16 = v19 + 8;
  v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_27:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17)
            v32 = 1;
          else
            v32 = (v16 - v17) >> 2;
          if (v32 >> 61)
            sub_1000CDEB8();
          v33 = (char *)operator new(8 * v32);
          v34 = v33;
          v35 = v32 >> 2;
          v21 = &v33[8 * (v32 >> 2)];
          v24 = v21;
          v36 = v16 - v12;
          if (v16 != v12)
          {
            v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            v37 = v36 - 8;
            if (v37 < 0x38 || (v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_43;
            }
            v42 = (v37 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v21[v43];
            v40 = &v12[v43];
            v44 = (__int128 *)(v12 + 16);
            v45 = &v33[v38 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_43:
                v41 = *(_QWORD *)v40;
                v40 += 8;
                *(_QWORD *)v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          v16 = &v33[8 * v32];
          if (v17)
            operator delete(v17);
          v17 = v34;
          goto LABEL_26;
        }
        v26 = (v12 - v17) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v12[-8 * (v27 >> 1)];
        v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          v30 = v12;
        }
        v31 = -v28;
        v24 = &v29[v16 - v12];
        v21 = &v30[8 * v31];
      }
      else
      {
        v21 = v12;
        v24 = v16;
        v16 = v15;
      }
LABEL_26:
      v15 = v16;
      v25 = *v3++;
      *(_QWORD *)v24 = v25;
      v22 = v24 + 8;
      v16 = v22;
      v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16))
        goto LABEL_22;
    }
  }
LABEL_21:
  v21 = v12;
  v22 = v16;
LABEL_22:
  v23 = *(void **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v23)
LABEL_24:
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v23)
      goto LABEL_24;
  }
}

void sub_100215888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_1002158C4(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_1000D02C0();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *sub_100215AC0(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      sub_1000D02C0();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void sub_100215D9C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = (char *)&v5[3 * a2];
      v12 = 24 * a2;
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_BYTE *)v5 + 16) = 0;
        v5 += 3;
        v12 -= 24;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1000D02C0();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_1000CDEB8();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[24 * v6];
    v14 = 24 * a2;
    v15 = &v13[24 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v16[16] = 0;
      v16 += 24;
      v14 -= 24;
    }
    while (v14);
    v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v18 = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        v5 -= 3;
      }
      while (v5 != v17);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

uint64_t *sub_100215F30(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_1000CFA7C((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0xB0uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_10006CED8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *((_QWORD *)v26 + 21) = 0;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  *((_QWORD *)v26 + 10) = 0;
  *((_QWORD *)v26 + 11) = 0;
  *((_QWORD *)v26 + 12) = 0;
  v26[104] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_100005DD8(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1002163AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002163D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002163C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002163D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002163D8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_10021642C(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_10021642C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 128);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 112);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    nullsub_22(a1 + 72);
    *(_BYTE *)(a1 + 64) = 0;
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(void **)(a1 + 40);
    if (v9 != v8)
    {
      do
      {
        v11 = *(_QWORD *)(v9 - 24);
        if (v11)
        {
          v12 = *(_QWORD *)(v9 - 16);
          v13 = *(void **)(v9 - 24);
          if (v12 != v11)
          {
            v14 = *(_QWORD *)(v9 - 16);
            do
            {
              v16 = *(void **)(v14 - 24);
              v14 -= 24;
              v15 = v16;
              if (v16)
              {
                *(_QWORD *)(v12 - 16) = v15;
                operator delete(v15);
              }
              v12 = v14;
            }
            while (v14 != v11);
            v13 = *(void **)(v9 - 24);
          }
          *(_QWORD *)(v9 - 16) = v11;
          operator delete(v13);
        }
        v17 = v9 - 48;
        v18 = *(void **)(v9 - 48);
        if (v18)
        {
          *(_QWORD *)(v9 - 40) = v18;
          operator delete(v18);
        }
        v9 -= 48;
      }
      while (v17 != v8);
      v10 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v8;
    operator delete(v10);
  }
  v19 = *(_QWORD **)(a1 + 16);
  while (v19)
  {
    v22 = v19;
    v19 = (_QWORD *)*v19;
    v23 = (std::__shared_weak_count *)v22[3];
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    operator delete(v22);
  }
  v20 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v20)
    operator delete(v20);
  return a1;
}

char *sub_1002165E0(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v16;
  __int128 v17;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 7);
  v4 = v3 + 1;
  if (v3 + 1 > 0x22222222222222)
    sub_1000D02C0();
  if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7);
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 7) >= 0x11111111111111)
    v6 = 0x22222222222222;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x22222222222222)
      sub_1000CDEB8();
    v7 = (char *)operator new(1920 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = &v7[1920 * v3];
  *((_QWORD *)&v17 + 1) = &v7[1920 * v6];
  sub_1000B53CC(v16, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_1000B53CC(&v16[v8], v8 + i))
    v8 -= 1920;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = &v16[v8];
  *(_QWORD *)&v17 = v16 + 1920;
  *(_OWORD *)(a1 + 1) = v17;
  if (v11 != v12)
  {
    v13 = v11 - 1920;
    do
    {
      (**(void (***)(char *))v13)(v13);
      v14 = v13 == v12;
      v13 -= 1920;
    }
    while (!v14);
  }
  if (v12)
    operator delete(v12);
  return v16 + 1920;
}

void sub_100216750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10019C528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021679C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002167F8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100216854()
{
  sub_1002092AC((uint64_t)&unk_10041B0E8, "(.*)X[0-9]+Y[0-9]+", 0);
}

void sub_10021689C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  if (a1)
  {
    v10 = sub_10016E2B8();
    v11 = v9;
    if (sub_1000AC110((uint64_t)&v10, (_BYTE *)&v11 + 1))
      sub_1000D10DC(a2, a3, a4, a5);
  }
}

void sub_100216910(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a11)
    JUMPOUT(0x1002168F8);
  JUMPOUT(0x1002168E4);
}

void sub_100216924(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_100216958()
{
  sub_100216A38();
}

BOOL sub_10021696C@<W0>(unsigned int *a1@<X8>)
{
  int v1;

  v1 = *a1;
  sub_100216B8C(*a1);
  return v1 != 0;
}

BOOL sub_100216990@<W0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  v1 = *a1;
  sub_100216C08(*a1);
  return v1 != 0;
}

BOOL sub_1002169B4@<W0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100216C84(a1, a2);
}

BOOL sub_1002169CC@<W0>(double *a1@<X8>)
{
  double v1;
  double v2;
  double v3;

  v1 = *a1;
  sub_100216EF8(*a1);
  v2 = ceil(v1);
  v3 = floor(v1);
  if (v1 >= 0.0)
    v2 = v3;
  return v2 != 0.0;
}

void sub_100216A00()
{
  sub_100216F7C();
}

void sub_100216A1C()
{
  sub_1002170D0();
}

void sub_100216A38()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6A0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(boost::none_t) const [T = BOOL]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_100216AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_100216B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x100216B44);
}

void sub_100216B78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100216B8C(uint64_t result)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * ((int)result > 1);
  if ((int)result < 0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
  return result;
}

uint64_t sub_100216C08(uint64_t result)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (result > 1);
  if (result < 0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
  return result;
}

BOOL sub_100216C84(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  char *v5;
  uint64_t v6;
  BOOL v7;
  _BOOL8 result;
  _BOOL4 v10;
  int v11;
  BOOL v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  std::locale v22;
  std::string v23;

  std::locale::locale(&v22);
  v3 = *(char *)(a2 + 23);
  v4 = v3 < 0;
  if (v3 >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4)
    v6 = *(_QWORD *)(a2 + 8);
  sub_1000CDD78(&v23, v5, &v22, &v5[v6]);
  std::locale::~locale(&v22);
  if ((*((_BYTE *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v23.__r_.__value_.__l.__size_ == 4)
    {
      if (*(_DWORD *)v23.__r_.__value_.__l.__data_ == 1702195828)
      {
        operator delete(v23.__r_.__value_.__l.__data_);
        return 1;
      }
    }
    else if (v23.__r_.__value_.__l.__size_ == 5)
    {
      v10 = *(_DWORD *)v23.__r_.__value_.__l.__data_ != 1936482662
         || *(_BYTE *)(v23.__r_.__value_.__r.__words[0] + 4) != 101;
      operator delete(v23.__r_.__value_.__l.__data_);
      if (!v10)
        return 0;
      goto LABEL_30;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  else if (HIBYTE(v23.__r_.__value_.__r.__words[2]) == 4)
  {
    if (LODWORD(v23.__r_.__value_.__l.__data_) == 1702195828)
      return 1;
  }
  else if (HIBYTE(v23.__r_.__value_.__r.__words[2]) == 5)
  {
    v7 = LODWORD(v23.__r_.__value_.__l.__data_) == 1936482662 && v23.__r_.__value_.__s.__data_[4] == 101;
    if (v7)
      return 0;
  }
LABEL_30:
  v11 = *(char *)(a2 + 23);
  v12 = v11 < 0;
  v13 = *(unsigned __int8 **)a2;
  if (v11 >= 0)
    v13 = (unsigned __int8 *)a2;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if (v12)
    v14 = *(_QWORD *)(a2 + 8);
  if (!v14)
    goto LABEL_54;
  v15 = &v13[v14 - 1];
  v16 = *v15;
  result = v16 == 49;
  if ((v16 & 0xFE) != 0x30)
    goto LABEL_54;
  if (v13 != v15)
  {
    v7 = v16 == 49;
    v17 = *v13;
    v18 = !v7 && v17 == 45;
    v19 = v18 || v17 == 43;
    v20 = v19;
    if (v19)
      ++v13;
    if (v13 != v15)
    {
      v21 = ~v20 + v14;
      while (*v13 == 48)
      {
        ++v13;
        if (!--v21)
          return result;
      }
LABEL_54:
      std::bad_cast::bad_cast((std::bad_cast *)&v23);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v23);
    }
  }
  return result;
}

void sub_100216ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_100216EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  std::bad_cast::~bad_cast(&a10);
  _Unwind_Resume(a1);
}

void sub_100216EF8(double a1)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (a1 >= 2.0);
  if (a1 <= -1.0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
}

void sub_100216F7C()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(const F &) const [T = BOOL, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_100217030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_100217098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x100217088);
}

void sub_1002170BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002170D0()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(const F &) const [T = BOOL, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_100217184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1002171EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002171DCLL);
}

void sub_100217210(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100217224(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100217250()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002172AC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100217308()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_10021731C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[6];
  _BYTE v15[24];
  _BYTE *v16;

  v11 = a1;
  v3 = v12;
  v4 = a2 + 3;
  v5 = (_QWORD *)a2[3];
  if (!v5)
  {
    v4 = &v13;
    goto LABEL_5;
  }
  if (v5 != a2)
  {
    v13 = (_QWORD *)a2[3];
LABEL_5:
    *v4 = 0;
    v6 = a1;
    goto LABEL_7;
  }
  v13 = v12;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
  v6 = v11;
LABEL_7:
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x5002000000;
  v14[3] = sub_10021803C;
  v14[4] = sub_1002180A0;
  v14[5] = v6;
  v7 = v15;
  if (v13)
  {
    if (v13 == v12)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _BYTE *))(v12[0] + 24))(v12, v15);
    }
    else
    {
      v16 = v13;
      v13 = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_1002180DC;
  v10[3] = &unk_1003FDE00;
  v10[4] = v14;
  sub_1000C7D70((dispatch_queue_t *)(a1 + 144), v10);
  _Block_object_dispose(v14, 8);
  if (v16 == v15)
  {
    v8 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v8 = 5;
    v7 = v16;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v8))(v7);
LABEL_17:
  if (v13 == v12)
  {
    v9 = 4;
  }
  else
  {
    if (!v13)
      return;
    v9 = 5;
    v3 = v13;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v9))(v3);
}

void sub_1002174E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_1002174FC(uint64_t a1)
{
  std::mutex *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  os_activity_scope_state_s v10;
  char v11;
  _QWORD v12[5];
  uint8_t buf[8];
  uint8_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)();
  char *v18;
  uint64_t v19;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_BYTE *)(a1 + 17) = 1;
  std::mutex::unlock(v2);
  if (qword_100417ED8 == -1)
  {
    v3 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
  v3 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Apply event queue in batch", buf, 2u);
  }
LABEL_4:
  v4 = _os_activity_create((void *)&_mh_execute_header, "applying localizer events", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &v10);
  v5 = sub_1002176F8(*(_QWORD *)a1);
  v6 = atomic_load((unsigned __int8 *)(a1 + 16));
  if ((v6 & 1) == 0)
  {
    v7 = v5;
    do
    {
      v8 = *(_QWORD *)a1;
      v11 = 0;
      *(_QWORD *)buf = 0;
      v14 = buf;
      v15 = 0x3802000000;
      v16 = sub_100218410;
      v17 = nullsub_138;
      v18 = &v11;
      v19 = v8;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      v12[2] = sub_100218420;
      v12[3] = &unk_1003FDE50;
      v12[4] = buf;
      sub_10005C5D4((dispatch_queue_t *)(v8 + 32), v12);
      _Block_object_dispose(buf, 8);
      if (v11)
        break;
      sub_10004D550((uint64_t *)a1, v7);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), v7);
      v7 += 250000000;
      v9 = atomic_load((unsigned __int8 *)(a1 + 16));
    }
    while ((v9 & 1) == 0);
  }
  sub_100016DF8(a1);
  os_activity_scope_leave(&v10);
}

uint64_t sub_1002176F8(uint64_t a1)
{
  _BYTE v2[24];
  int **v3;
  std::runtime_error v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  std::string *v7;
  std::string v8;
  __n128 (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;
  int ***v12;

  v3 = 0;
  v8.__r_.__value_.__r.__words[0] = 0;
  v8.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
  v8.__r_.__value_.__r.__words[2] = 0x3802000000;
  v9 = sub_100218C10;
  v10 = nullsub_145;
  v11 = a1;
  v12 = &v3;
  v4.__vftable = (std::runtime_error_vtbl *)_NSConcreteStackBlock;
  v4.__imp_.__imp_ = (const char *)0x40000000;
  v5 = sub_100218C20;
  v6 = &unk_1003FDFA8;
  v7 = &v8;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 32), &v4);
  _Block_object_dispose(&v8, 8);
  if (!v3)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v8, "No events in queue");
    std::runtime_error::runtime_error(&v4, &v8);
    v4.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v2);
    sub_1000F2F7C(&v4, (uint64_t)"static std::chrono::nanoseconds EventGenerator::getFirstTimestamp(const BaseLocalizer::EventPriorityQueue &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/event_generator.cpp", 320, (uint64_t)v2);
  }
  return sub_10005D4C0(*v3);
}

void sub_100217830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a13);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1002178AC(std::string::size_type a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  std::string *p_p;
  void *v17;
  _BYTE buf[12];
  __int16 v19;
  uint64_t v20;
  char v21;
  std::string __p;

  v8 = sub_10005D4C0(*a4);
  v9 = v8;
  if (!*(_BYTE *)a3)
  {
    *(_BYTE *)a3 = 1;
    goto LABEL_11;
  }
  if (v8 == *(_QWORD *)(a3 + 8))
  {
LABEL_11:
    *(_QWORD *)(a3 + 8) = v8;
    goto LABEL_12;
  }
  if (*(_BYTE *)a2)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if (v8 - v10 >= 2500000000000)
    {
      sub_1000D5048(buf, "");
      sub_100218440("Unreasonably large gap the data, likely corrupt", &__p);
      sub_100174738((uint64_t)buf, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v21 < 0)
        operator delete(*(void **)buf);
      sub_1000F2AE4((uint64_t)&v17);
    }
    if (v8 - v10 > 249999999)
    {
      v11 = v8 - v10;
      v12 = v10 + 250000000;
      do
      {
        (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)a1 + 248))(a1, v12);
        if (!*(_BYTE *)a2)
          *(_BYTE *)a2 = 1;
        *(_QWORD *)(a2 + 8) = v12;
        v11 -= 250000000;
        v12 += 250000000;
      }
      while (v11 > 249999999);
    }
  }
  else
  {
    (*(void (**)(std::string::size_type))(*(_QWORD *)a1 + 248))(a1);
    if (*(_BYTE *)a2)
    {
      if (*(_BYTE *)a3)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      else
        *(_BYTE *)a2 = 0;
    }
    else if (*(_BYTE *)a3)
    {
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_BYTE *)a2 = 1;
    }
  }
LABEL_12:
  if (qword_100417ED8 == -1)
  {
    v13 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_19;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v13 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_19;
  }
  sub_100217D24(*a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = p_p;
  v19 = 2048;
  v20 = v9;
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Applying event %s @ %lld", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_19:
  __p.__r_.__value_.__r.__words[0] = a1;
  return sub_10004E050(*a4, (uint64_t)&__p, v14);
}

void sub_100217B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100217BD8(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  dispatch_queue_t *v4;
  _QWORD v5[5];
  uint8_t buf[8];
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)();
  uint64_t v11;

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WARNING: Dropping all events", buf, 2u);
  }
LABEL_4:
  v3 = *a1;
  v4 = (dispatch_queue_t *)(*a1 + 32);
  *(_QWORD *)buf = 0;
  v7 = buf;
  v8 = 0x3002000000;
  v9 = sub_100218B68;
  v10 = nullsub_144;
  v11 = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100218B78;
  v5[3] = &unk_1003FDF80;
  v5[4] = buf;
  sub_10005C5D4(v4, v5);
  _Block_object_dispose(buf, 8);
}

void sub_100217CF8(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100217D24(int *a1)
{
  return ((uint64_t (*)(int *))((char *)sub_100217D44 + 4 * byte_100393CE6[*a1 ^ (*a1 >> 31)]))(a1 + 2);
}

void sub_100217D44(char *a1@<X8>)
{
  strcpy(a1, "ActivityState");
  a1[23] = 13;
}

void sub_100217D6C(char *a1@<X8>)
{
  sub_100309838(a1);
}

void sub_100217D7C(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  int v2;

  if (v2 < 0)
    a1 = (_QWORD *)*a1;
  sub_1003092F8((uint64_t)a1, a2);
}

void sub_100217D88(char *a1@<X8>)
{
  sub_1003096D4(a1);
}

void sub_100217D94(char *a1@<X8>)
{
  sub_1003097B4(a1);
}

double sub_100217DA0@<D0>(uint64_t a1@<X8>)
{
  return sub_10030987C(a1);
}

void sub_100217DAC(char *a1@<X8>)
{
  sub_1003094C0(a1);
}

void sub_100217DB8(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  int v2;

  if (v2 < 0)
    a1 = (_QWORD *)*a1;
  sub_100308FB4((uint64_t)a1, a2);
}

void sub_100217DC4(char *a1@<X8>)
{
  strcpy(a1, "OutdoorPosInputEvent");
  a1[23] = 20;
}

void sub_100217DF0(char *a1@<X8>)
{
  sub_1003097F4(a1);
}

void sub_100217E00(char *a1@<X8>)
{
  strcpy(a1, "UserLocationInput");
  a1[23] = 17;
}

void sub_100217E28(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "WifiInputEvent");
}

void sub_100217E50(char *a1@<X8>)
{
  sub_1003098CC(a1);
}

char *sub_100217E60@<X0>(uint64_t a1@<X8>)
{
  return sub_100309A2C(a1);
}

char *sub_100217E6C@<X0>(uint64_t a1@<X8>)
{
  return sub_100309B7C(a1);
}

double sub_100217E78@<D0>(uint64_t a1@<X8>)
{
  return sub_100309CCC(a1);
}

double sub_100217E84@<D0>(uint64_t a1@<X8>)
{
  return sub_100309E2C(a1);
}

char *sub_100217E90@<X0>(uint64_t a1@<X8>)
{
  return sub_100309F14(a1);
}

uint64_t sub_100217E9C(uint64_t a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  void (__cdecl **v8)(std::ostringstream *__hidden);
  _QWORD v9[8];
  void *__p[2];
  __int128 v11;
  int v12;
  void (__cdecl **v13)(std::ostringstream *__hidden);

  v8 = v2;
  *(_QWORD *)((char *)&v9[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v9[-1] + (_QWORD)*(v8 - 3));
  std::ios_base::init(v4, v9);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v9);
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v12 = 16;
  v5 = sub_1000F0508(&v8, (uint64_t)"VideoFrameInputEvent(", 21);
  v6 = sub_100308F78(v5, *(unsigned __int8 *)(a1 + 8));
  sub_1000F0508(v6, (uint64_t)")", 1);
  std::stringbuf::str(v9);
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v13);
}

void sub_100217FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_100218014(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_100218028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021803C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(a2 + 72);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  if (!v3)
  {
    v2 = (_QWORD *)(result + 72);
    goto LABEL_5;
  }
  if (v3 != a2 + 48)
  {
    *(_QWORD *)(result + 72) = v3;
LABEL_5:
    *v2 = 0;
    return result;
  }
  *(_QWORD *)(result + 72) = result + 48;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
}

uint64_t sub_1002180A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 48;
  result = *(_QWORD *)(a1 + 72);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_1002180DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = v1[5];
  if (!*(_BYTE *)(v2 + 176))
  {
    v5 = v1 + 6;
    v6 = *(_QWORD *)(v2 + 160);
    if (v6 >= *(_QWORD *)(v2 + 168))
    {
      result = sub_1002181A8((uint64_t *)(v2 + 152), v5);
      *(_QWORD *)(v2 + 160) = result;
      return result;
    }
    v9 = (_QWORD *)v1[9];
    v7 = v1 + 9;
    v8 = v9;
    if (v9)
    {
      if (v8 == v5)
      {
        *(_QWORD *)(v6 + 24) = v6;
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v7 + 24))(*v7, v6);
        result = v6 + 32;
        *(_QWORD *)(v2 + 160) = v6 + 32;
        return result;
      }
      *(_QWORD *)(v6 + 24) = v8;
    }
    else
    {
      v7 = (_QWORD *)(v6 + 24);
    }
    *v7 = 0;
    result = v6 + 32;
    *(_QWORD *)(v2 + 160) = v6 + 32;
    return result;
  }
  v3 = v1[9];
  if (!v3)
    sub_10016CA74();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
}

uint64_t sub_1002181A8(uint64_t *a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (uint64_t)&v3[-*a1] >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1000D02C0();
  v8 = a1[2] - (_QWORD)v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 59)
      sub_1000CDEB8();
    v10 = (char *)operator new(32 * v9);
    v11 = (uint64_t)&v10[32 * v5];
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(_QWORD *)(v11 + 24) = v11;
        (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v11);
        v4 = (char *)*a1;
        v3 = (char *)a1[1];
        v14 = v11;
        if (v3 == (char *)*a1)
          goto LABEL_26;
      }
      else
      {
        *(_QWORD *)(v11 + 24) = v13;
        *v12 = 0;
        v14 = v11;
        if (v3 == v4)
          goto LABEL_26;
      }
      goto LABEL_17;
    }
  }
  else
  {
    v10 = 0;
    v11 = 32 * v5;
    v12 = a2 + 3;
    v13 = (_QWORD *)a2[3];
    if (v13)
      goto LABEL_10;
  }
  *(_QWORD *)(v11 + 24) = 0;
  v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    v15 = 0;
    v16 = v3;
    while (1)
    {
      v18 = v11 + v15;
      v19 = &v3[v15];
      v20 = *(char **)&v3[v15 - 8];
      if (v20)
      {
        if (v19 - 32 == v20)
        {
          *(_QWORD *)(v18 - 8) = v18 - 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 - 1) + 24))(*((_QWORD *)v19 - 1));
          goto LABEL_20;
        }
        v17 = v16 - 8;
        *(_QWORD *)(v18 - 8) = v20;
      }
      else
      {
        v17 = (char *)(v18 - 8);
      }
      *(_QWORD *)v17 = 0;
LABEL_20:
      v16 -= 32;
      v15 -= 32;
      if (&v3[v15] == v4)
      {
        v14 = v11 + v15;
        break;
      }
    }
  }
LABEL_26:
  v22 = (char *)*a1;
  v21 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)&v10[32 * v9];
  if (v21 != v22)
  {
    do
    {
      v26 = v21 - 32;
      v24 = (char *)*((_QWORD *)v21 - 1);
      if (v21 - 32 == v24)
      {
        v24 = v21 - 32;
        v25 = 4;
      }
      else
      {
        if (!v24)
          goto LABEL_32;
        v25 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_32:
      v21 = v26;
    }
    while (v26 != v22);
  }
  if (v22)
    operator delete(v22);
  return v11 + 32;
}

uint64_t sub_1002183A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

uint64_t sub_1002183B4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40);
  *(_BYTE *)(v1 + 176) = 1;
  v2 = *(_QWORD *)(v1 + 152);
  for (i = *(_QWORD *)(v1 + 160); v2 != i; v2 += 32)
  {
    v4 = *(_QWORD *)(v2 + 24);
    if (!v4)
      sub_10016CA74();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  return result;
}

__n128 sub_100218410(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100218420(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 48);
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = *v1 == v1[1];
  return result;
}

std::string *sub_100218440@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100218470(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100218490()
{
  operator delete();
}

_QWORD *sub_1002184A4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1003FDE80;
  return result;
}

void sub_1002184C8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1003FDE80;
}

uint64_t sub_1002184E0()
{
  return 0;
}

uint64_t sub_1002184E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN14EventGenerator15applyInRealTimeEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14EventGenerator15applyInRealTimeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14EventGenerator15applyInRealTimeEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14EventGenerator15applyInRealTimeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100218554()
{
}

__n128 sub_100218560(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100218570(uint64_t result)
{
  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 48)
                                                                                          + 8)
                                                                              - **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8)
                                                                                            + 48)) >> 4;
  return result;
}

__n128 sub_100218590(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void sub_1002185A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char v16;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (uint64_t *)v1[5];
  v4 = *v2;
  v3 = v2[1];
  while (v4 != v3)
  {
    v5 = (uint64_t *)v1[6];
    if (sub_10005D4C0(*(int **)v4) >= *v5)
      break;
    v6 = v1[7];
    v7 = *(_QWORD **)(v6 + 8);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 16))
    {
      v11 = sub_1001E3C34(v1[7], (_QWORD *)v4);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 8);
      *v7 = *(_QWORD *)v4;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = v7 + 2;
    }
    *(_QWORD *)(v6 + 8) = v11;
    sub_1002186B0(*v2, v2[1], (uint64_t)&v16, (v2[1] - *v2) >> 4);
    v12 = v2[1];
    v13 = *(std::__shared_weak_count **)(v12 - 8);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v3 = v12 - 16;
    v2[1] = v12 - 16;
    v4 = *v2;
  }
}

void sub_1002186B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v33;
  __int128 v34;

  if (a4 >= 2)
  {
    v7 = 0;
    v33 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = a1;
    do
    {
      v10 = v9;
      v9 += 16 * v7 + 16;
      v11 = 2 * v7;
      v7 = (2 * v7) | 1;
      v12 = v11 + 2;
      if (v11 + 2 < a4)
      {
        v13 = sub_10005D4C0(*(int **)v9);
        if (v13 >= sub_10005D4C0(*(int **)(v9 + 16)))
        {
          v9 += 16;
          v7 = v12;
        }
      }
      v14 = *(_OWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      v15 = *(std::__shared_weak_count **)(v10 + 8);
      *(_OWORD *)v10 = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    while (v7 <= v8);
    if (v9 == a2 - 16)
    {
      v28 = v33;
      v34 = 0uLL;
      v29 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)v9 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    else
    {
      v18 = *(_OWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      v19 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)v9 = v18;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v33;
      v34 = 0uLL;
      v23 = *(std::__shared_weak_count **)(a2 - 8);
      *(_OWORD *)(a2 - 16) = v22;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      sub_1000FF340(a1, v9 + 16, a3, (v9 + 16 - a1) >> 4);
    }
    if (*((_QWORD *)&v34 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 16))(*((_QWORD *)&v34 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
      }
    }
  }
}

void sub_1002188F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000FEAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000FEAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100218920(uint64_t *a1, int **a2)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *p_p;
  void *__p;
  char v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;

  v3 = (**a2 ^ (**a2 >> 31)) - 11;
  if (v3 >= 2)
  {
    v5 = sub_10005D4C0(*a2);
    v6 = *a1;
    if (qword_100417ED8 == -1)
    {
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return v3 < 2;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return v3 < 2;
    }
    sub_100217D24(*a2);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v13 = p_p;
    v14 = 2048;
    v15 = v5 - v6 - 100000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Dropping event '%s' from %lld ns (in the past), too out-of-sync", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p);
  }
  return v3 < 2;
}

__n128 sub_100218A94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void sub_100218AAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = **(_QWORD ***)(v1 + 40);
  if (**(_QWORD ***)(v1 + 48) != v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    do
    {
      v5 = (_QWORD *)v3[1];
      if ((unint64_t)v5 >= v3[2])
      {
        v4 = sub_1001E3C34((uint64_t)v3, v2);
      }
      else
      {
        v6 = v2[1];
        *v5 = *v2;
        v5[1] = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        v4 = v5 + 2;
      }
      v3[1] = (uint64_t)v4;
      sub_1000FF340(*v3, (uint64_t)v4, (uint64_t)&v9, ((uint64_t)v4 - *v3) >> 4);
      v2 += 2;
    }
    while (v2 != **(_QWORD ***)(v1 + 48));
  }
}

uint64_t sub_100218B68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

void sub_100218B78(uint64_t a1)
{
  char **v1;
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v1 = *(char ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v2 = *v1;
  v3 = v1[1];
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  if (v2)
  {
    while (v3 != v2)
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v3 -= 16;
    }
    operator delete(v2);
  }
}

__n128 sub_100218C10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100218C20(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *(uint64_t **)(v1 + 40);
  v2 = *(_QWORD **)(v1 + 48);
  if (*v3 == v3[1])
    v4 = 0;
  else
    v4 = *v3;
  *v2 = v4;
  return result;
}

__n128 sub_100218C40(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void sub_100218C58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v2 = (uint64_t *)v1[5];
  v4 = *v2;
  v3 = v2[1];
  while (1)
  {
    if (v4 == v3)
      return;
    v5 = (uint64_t *)v1[6];
    if (*v5 < sub_10005D4C0(*(int **)v4))
      break;
    v6 = v1[7];
    v7 = *(_QWORD **)(v6 + 8);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 16))
    {
      v11 = sub_1001E3C34(v1[7], (_QWORD *)v4);
    }
    else
    {
      *v7 = *(_QWORD *)v4;
      v8 = *(_QWORD *)(v4 + 8);
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = v7 + 2;
    }
    *(_QWORD *)(v6 + 8) = v11;
    sub_1002186B0(*v2, v2[1], (uint64_t)&v19, (v2[1] - *v2) >> 4);
    v12 = v2[1];
    v13 = *(std::__shared_weak_count **)(v12 - 8);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v3 = v12 - 16;
    v2[1] = v12 - 16;
    v4 = *v2;
  }
  if (qword_100417ED8 == -1)
  {
    v16 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return;
    goto LABEL_18;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
  v16 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_18:
    v17 = sub_10005D4C0(*(int **)v4);
    v18 = *v5;
    v19 = 134218240;
    v20 = v17;
    v21 = 2048;
    v22 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Next %lld is after %lld, we're done", (uint8_t *)&v19, 0x16u);
  }
}

uint64_t sub_100218E50()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100218EAC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t *sub_100218F08(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  void *v13;
  void *__p[2];
  char v15;

  sub_10007B804(a3, a1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v7 = *(const void **)a2;
  v8 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v8)
  {
    if (v8 < 0)
      sub_1000D02C0();
    v9 = (char *)operator new(v8);
    a1[3] = (uint64_t)v9;
    a1[4] = (uint64_t)v9;
    v10 = &v9[8 * (v8 >> 3)];
    a1[5] = (uint64_t)v10;
    memcpy(v9, v7, v8);
    a1[4] = (uint64_t)v10;
    v11 = (unint64_t)v8 >> 3;
  }
  else
  {
    v11 = 0;
  }
  a1[6] = a4;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4) != v11)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v15 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v13);
  }
  return a1;
}

void sub_10021902C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void *v17;

  if (a14 < 0)
  {
    operator delete(__p);
    v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      sub_10021908C((void **)v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v17 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v14 + 32) = v17;
  operator delete(v17);
  sub_10021908C((void **)v14);
  _Unwind_Resume(a1);
}

void **sub_10021908C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  int v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_DWORD *)v3 - 44);
        if (v6 == v6 >> 31)
        {
          if (*(v3 - 128))
            *(v3 - 128) = 0;
        }
        else
        {
          v5 = *((_QWORD *)v3 - 21);
          if (v6 < 0)
          {
            if (v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          }
          else
          {
            (*(void (**)(char *))v5)(v3 - 168);
          }
        }
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100219134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_DWORD *)(v3 - 176);
        if (v6 == v6 >> 31)
        {
          if (*(_BYTE *)(v3 - 128))
            *(_BYTE *)(v3 - 128) = 0;
        }
        else
        {
          v5 = *(_QWORD *)(v3 - 168);
          if (v6 < 0)
          {
            if (v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          }
          else
          {
            (*(void (**)(uint64_t))v5)(v3 - 168);
          }
        }
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

void **sub_1002191E8(void **a1)
{
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  int v7;

  v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (char *)*a1;
  if (*a1)
  {
    v4 = (char *)a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v7 = *((_DWORD *)v4 - 44);
        if (v7 == v7 >> 31)
        {
          if (*(v4 - 128))
            *(v4 - 128) = 0;
        }
        else
        {
          v6 = *((_QWORD *)v4 - 21);
          if (v7 < 0)
          {
            if (v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
          else
          {
            (*(void (**)(char *))v6)(v4 - 168);
          }
        }
        v4 -= 208;
      }
      while (v4 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10021929C(uint64_t a1)
{
  void *v2;

  sub_1000410F4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_1002192D4(uint64_t a1)
{
  void *v2;

  sub_1000424C0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t sub_10021930C(double a1)
{
  _BOOL4 v1;

  v1 = a1 == 0.0;
  if ((double)2000000000 == a1)
    v1 = 1;
  if (a1 == -1.0)
    v1 = 1;
  if (a1 > -20.0)
    v1 = 1;
  return a1 < -120.0 || v1;
}

_QWORD *sub_10021935C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v5 = sub_100043D44(a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v7)
  {
    if (v7 < 0)
      sub_1000D02C0();
    v8 = (char *)operator new(v7);
    a1[3] = v8;
    a1[4] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  return a1;
}

void sub_1002193DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_1003433CC((void **)v1);
  _Unwind_Resume(a1);
}

void sub_100219400(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_10021942C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  int v15;
  int *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;

  v4 = a4;
  v24 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v10 = (_QWORD *)(v4 + 8);
      v12 = (_QWORD *)(v6 + 8);
      v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *v10 = *v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)v10 = v14;
        v13 = *(_DWORD *)v6;
        v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)v4 = v13 ^ v11;
      v15 = *(_DWORD *)(v6 + 32);
      v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        v17 = (_QWORD *)(v4 + 48);
        v18 = *(_DWORD *)(v6 + 40);
        v19 = (_QWORD *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *v17 = *v19;
          v20 = v18;
        }
        else
        {
          v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)v17 = v22;
          v20 = *v16;
          v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 40) = v20 ^ v18;
        *(_QWORD *)(v4 + 72) = *(_QWORD *)(v6 + 72);
        *(_BYTE *)(v4 + 80) = 0;
        if (*(_BYTE *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(_BYTE *)(v4 + 80) = 1;
        }
        v7 = *(_OWORD *)(v6 + 88);
        v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 120) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        v9 = v4;
      }
      else
      {
        if (v15 >= 0)
          v21 = v6 + 40;
        else
          v21 = *(_QWORD *)v16;
        sub_1001A4778(v4 + 40, v21);
        v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      v4 = v9 + 208;
      v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1002195A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002195B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002195B4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (1)
    {
      while (1)
      {
        if (v3 == v4)
          return a1;
        v5 = *(_DWORD *)(v3 - 176);
        if (v5 == v5 >> 31)
          break;
        v6 = *(_QWORD *)(v3 - 168);
        if (v5 < 0)
        {
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
LABEL_4:
          v3 -= 208;
        }
        else
        {
          (*(void (**)(uint64_t))v6)(v3 - 168);
          v3 -= 208;
        }
      }
      if (!*(_BYTE *)(v3 - 128))
        goto LABEL_4;
      *(_BYTE *)(v3 - 128) = 0;
      v3 -= 208;
    }
  }
  return a1;
}

BOOL sub_100219654(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_10021970C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v34;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL)
    sub_1000D02C0();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL)
    v8 = 0x13B13B13B13B13BLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL)
      sub_1000CDEB8();
    v9 = operator new(208 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[52 * v5];
  v34 = v10;
  v11 = v10 + 2;
  v13 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2;
  v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *v11 = *v13;
    v14 = v12;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *v10 = v14 ^ v12;
  v15 = &v9[52 * v5 + 10];
  v16 = *(_DWORD *)(a2 + 32);
  v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    v18 = &v9[52 * v5 + 12];
    v19 = *(_DWORD *)(a2 + 40);
    v20 = v19 >> 31;
    v21 = (_QWORD *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *v18 = *v21;
      v20 = v19;
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *v15 = v20 ^ v19;
    v24 = (char *)&v9[52 * v5];
    v25 = *(_QWORD *)(a2 + 72);
    v24[80] = 0;
    v26 = v24 + 80;
    *((_QWORD *)v26 - 1) = v25;
    if (*(_BYTE *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *v26 = 1;
    }
    v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 30) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0)
      v22 = a2 + 40;
    else
      v22 = *(_QWORD *)(a2 + 40);
    sub_1001A4778((uint64_t)v15, v22);
    v16 = *(_DWORD *)(a2 + 32);
    v3 = *a1;
    v4 = a1[1];
    v10 = v34;
    v23 = (char *)&v9[52 * v5];
    v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  v27 = (uint64_t)(v23 + 208);
  sub_100219A90((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  v28 = (char *)*a1;
  v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  while (v29 != v28)
  {
    v31 = *((_DWORD *)v29 - 44);
    if (v31 == v31 >> 31)
    {
      if (!*(v29 - 128))
        goto LABEL_26;
      *(v29 - 128) = 0;
      v29 -= 208;
    }
    else
    {
      v32 = *((_QWORD *)v29 - 21);
      if (v31 < 0)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_26:
        v29 -= 208;
      }
      else
      {
        (*(void (**)(char *))v32)(v29 - 168);
        v29 -= 208;
      }
    }
  }
  if (v28)
    operator delete(v28);
  return v27;
}

void sub_1002199E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002199F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002199F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 208;
    v4 = *(_DWORD *)(v2 - 176);
    if (v4 == v4 >> 31)
    {
      if (!*(_BYTE *)(v2 - 128))
        goto LABEL_2;
      *(_BYTE *)(v2 - 128) = 0;
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = *(_QWORD *)(v2 - 168);
      v6 = v2 - 168;
      v5 = v7;
      if (v4 < 0)
      {
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_2:
        v2 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        (*(void (**)(uint64_t))v5)(v6);
        v2 = *(_QWORD *)(a1 + 16);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100219A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  int *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  int v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;

  v7 = a7;
  v27 = a6;
  v28 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    v10 = a3;
    while (1)
    {
      v14 = *(_DWORD *)(v10 - 208);
      v10 -= 208;
      v15 = (_QWORD *)(v7 - 200);
      v16 = (_QWORD *)(v10 + 8);
      if (v14 == v14 >> 31)
      {
        *v15 = *v16;
        *(_DWORD *)(v7 - 208) = 0;
        v17 = *(_DWORD *)(v9 - 176);
        v18 = (int *)(v9 - 168);
        if (v17 == v17 >> 31)
          goto LABEL_12;
      }
      else
      {
        v20 = *(_OWORD *)v16;
        *(_DWORD *)(v7 - 184) = *(_DWORD *)(v10 + 24);
        *(_OWORD *)v15 = v20;
        *(_DWORD *)(v7 - 208) = *(_DWORD *)(v9 - 208) ^ (*(int *)(v9 - 208) >> 31);
        v17 = *(_DWORD *)(v9 - 176);
        v18 = (int *)(v9 - 168);
        if (v17 == v17 >> 31)
        {
LABEL_12:
          v21 = (_QWORD *)(v7 - 160);
          v22 = *(_DWORD *)(v9 - 168);
          v23 = (_QWORD *)(v9 - 160);
          if (v22 == v22 >> 31)
          {
            *v21 = *v23;
            v24 = v22;
          }
          else
          {
            v25 = *(_OWORD *)v23;
            *(_DWORD *)(v7 - 144) = *(_DWORD *)(v9 - 144);
            *(_OWORD *)v21 = v25;
            v24 = *v18;
            v22 = v24 >> 31;
          }
          *(_DWORD *)(v7 - 168) = v24 ^ v22;
          *(_QWORD *)(v7 - 136) = *(_QWORD *)(v9 - 136);
          *(_BYTE *)(v7 - 128) = 0;
          if (*(_BYTE *)(v9 - 128))
          {
            *(_DWORD *)(v7 - 124) = *(_DWORD *)(v9 - 124);
            *(_BYTE *)(v7 - 128) = 1;
          }
          v11 = *(_OWORD *)(v9 - 120);
          v12 = *(_OWORD *)(v9 - 104);
          *(_DWORD *)(v7 - 88) = *(_DWORD *)(v9 - 88);
          *(_OWORD *)(v7 - 104) = v12;
          *(_OWORD *)(v7 - 120) = v11;
          v13 = v7;
          goto LABEL_4;
        }
      }
      if (v17 >= 0)
        v19 = (uint64_t)v18;
      else
        v19 = *(_QWORD *)v18;
      sub_1001A4778(v7 - 168, v19);
      v13 = v28;
LABEL_4:
      *(_DWORD *)(v7 - 176) = *(_DWORD *)(v9 - 176) ^ (*(int *)(v9 - 176) >> 31);
      v7 = v13 - 208;
      v28 = v13 - 208;
      v9 = v10;
      if (v10 == a5)
        return v27;
    }
  }
  return a6;
}

void sub_100219C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100219C48((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100219C48(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
    if (v3 != v4)
    {
      v5 = v3 + 5;
      do
      {
        v8 = *((_DWORD *)v5 - 2);
        if (v8 == v8 >> 31)
        {
          if (*((_BYTE *)v5 + 40))
            *((_BYTE *)v5 + 40) = 0;
        }
        else
        {
          v6 = *v5;
          if (v8 < 0)
          {
            if (v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
          else
          {
            (*(void (**)(uint64_t *))v6)(v5);
          }
        }
        v7 = v5 + 21;
        v5 += 26;
      }
      while (v7 != v4);
    }
  }
  return a1;
}

void sub_100219CE8(uint64_t a1, _QWORD *__p)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;

  if (!*(_BYTE *)(a1 + 8))
  {
    if (!__p)
      return;
    goto LABEL_14;
  }
  v3 = __p[6];
  if (v3)
  {
    v4 = __p[7];
    v5 = (void *)__p[6];
    if (v4 != v3)
    {
      do
      {
        v7 = *(_DWORD *)(v4 - 176);
        if (v7 == v7 >> 31)
        {
          if (*(_BYTE *)(v4 - 128))
            *(_BYTE *)(v4 - 128) = 0;
        }
        else
        {
          v6 = *(_QWORD *)(v4 - 168);
          if (v7 < 0)
          {
            if (v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
          else
          {
            (*(void (**)(uint64_t))v6)(v4 - 168);
          }
        }
        v4 -= 208;
      }
      while (v4 != v3);
      v5 = (void *)__p[6];
    }
    __p[7] = v3;
    operator delete(v5);
  }
  v8 = (void *)__p[3];
  if (!v8)
  {
LABEL_14:
    operator delete(__p);
    return;
  }
  __p[4] = v8;
  operator delete(v8);
  operator delete(__p);
}

std::string *sub_100219DCC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100219DFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100219E18(uint64_t a1, _QWORD *__p)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;

  if (!*(_BYTE *)(a1 + 8))
  {
    if (!__p)
      return;
    goto LABEL_16;
  }
  v3 = (void *)__p[6];
  if (v3)
  {
    __p[7] = v3;
    operator delete(v3);
  }
  v4 = __p[3];
  if (!v4)
  {
LABEL_16:
    operator delete(__p);
    return;
  }
  v5 = __p[4];
  v6 = (void *)__p[3];
  if (v5 != v4)
  {
    do
    {
      v8 = *(_DWORD *)(v5 - 176);
      if (v8 == v8 >> 31)
      {
        if (*(_BYTE *)(v5 - 128))
          *(_BYTE *)(v5 - 128) = 0;
      }
      else
      {
        v7 = *(_QWORD *)(v5 - 168);
        if (v8 < 0)
        {
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        }
        else
        {
          (*(void (**)(uint64_t))v7)(v5 - 168);
        }
      }
      v5 -= 208;
    }
    while (v5 != v4);
    v6 = (void *)__p[3];
  }
  __p[4] = v4;
  operator delete(v6);
  operator delete(__p);
}

uint64_t sub_100219EFC@<X0>(uint64_t (**a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  return (*a1)(a2);
}

uint64_t sub_100219F08()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100219F64()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

const void ***sub_100219FC0(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  const void ***v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char v13;

  __p = operator new(0x30uLL);
  *(_QWORD *)__p = 0;
  *((_QWORD *)__p + 1) = 0;
  sub_10008930C((_QWORD *)__p + 2, a2);
  *((_OWORD *)__p + 2) = *a3;
  *((_QWORD *)__p + 1) = sub_1000B40D8((uint64_t)&v13, (uint64_t ***)__p + 2);
  v6 = sub_10006A618(a1, (uint64_t)__p);
  if ((v7 & 1) == 0 && __p)
  {
    v8 = (std::__shared_weak_count *)*((_QWORD *)__p + 3);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    operator delete(__p);
  }
  return v6;
}

void sub_10021A0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10021A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void ***sub_10021A0E4(uint64_t a1, unint64_t a2, unsigned __int8 ***a3)
{
  unint64_t v4;
  uint8x8_t v7;
  unint64_t v8;
  const void ****v9;
  const void ***v10;
  unint64_t v11;
  const void **v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_23;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v8 = a2 % v4;
    else
      v8 = a2;
    v9 = *(const void *****)(*(_QWORD *)a1 + 8 * v8);
    if (!v9)
      goto LABEL_23;
  }
  else
  {
    v8 = (v4 - 1) & a2;
    v9 = *(const void *****)(*(_QWORD *)a1 + 8 * v8);
    if (!v9)
      goto LABEL_23;
  }
  v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      while (1)
      {
        v12 = v10[1];
        if (v12 == (const void **)a2)
        {
          if ((sub_1000790EC(v10 + 2, a3) & 1) != 0)
            return v10;
        }
        else if (((unint64_t)v12 & (v4 - 1)) != v8)
        {
          goto LABEL_23;
        }
        v10 = (const void ***)*v10;
        if (!v10)
          goto LABEL_23;
      }
    }
    do
    {
      v11 = (unint64_t)v10[1];
      if (v11 == a2)
      {
        if ((sub_1000790EC(v10 + 2, a3) & 1) != 0)
          return v10;
      }
      else
      {
        if (v11 >= v4)
          v11 %= v4;
        if (v11 != v8)
          break;
      }
      v10 = (const void ***)*v10;
    }
    while (v10);
  }
LABEL_23:
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v4 && (float)(v14 * (float)v4) >= v13)
    return 0;
  v15 = 1;
  if (v4 >= 3)
    v15 = (v4 & (v4 - 1)) != 0;
  v16 = v15 | (2 * v4);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v19 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v19)
    goto LABEL_47;
  if (prime < *(_QWORD *)&v19)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
    {
      v23 = std::__next_prime(v20);
      if (prime <= v23)
        prime = v23;
      if (prime >= *(_QWORD *)&v19)
        return 0;
    }
    else
    {
      v22 = 1 << -(char)__clz(v20 - 1);
      if (v20 >= 2)
        v20 = v22;
      if (prime <= v20)
        prime = v20;
      if (prime >= *(_QWORD *)&v19)
        return 0;
    }
LABEL_47:
    sub_100005DD8(a1, prime);
  }
  return 0;
}

uint64_t sub_10021A310()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10021A36C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_BYTE *sub_10021A3C8(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = a1 + 304;
  if (!*(_BYTE *)(a1 + 456))
  {
    v2 = (_BYTE *)(a1 + 152);
    if (!*(_BYTE *)(a1 + 304))
      return v2;
    if (!*v2)
      return (_BYTE *)v1;
LABEL_9:
    if (*(_QWORD *)(v1 + 16) > *(_QWORD *)(a1 + 168))
      return (_BYTE *)v1;
    return v2;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    if (*(_QWORD *)(a1 + 472) > *(_QWORD *)(a1 + 320))
      v1 = a1 + 456;
    v2 = (_BYTE *)(a1 + 152);
    if (!*(_BYTE *)(a1 + 152))
      return (_BYTE *)v1;
    goto LABEL_9;
  }
  v2 = (_BYTE *)(a1 + 152);
  v1 = a1 + 456;
  if (*(_BYTE *)(a1 + 152))
    goto LABEL_9;
  return (_BYTE *)v1;
}

uint64_t sub_10021A440(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result + 304;
  if (*(_BYTE *)(result + 456))
  {
    if (*(_BYTE *)(result + 304))
    {
      if (*(_QWORD *)(result + 472) > *(_QWORD *)(result + 320))
        v1 = result + 456;
      v2 = result + 152;
      if (!*(_BYTE *)(result + 152))
      {
LABEL_14:
        v2 = v1;
        if (!*(_BYTE *)v1)
          return result;
        goto LABEL_15;
      }
    }
    else
    {
      v2 = result + 152;
      v1 = result + 456;
      if (!*(_BYTE *)(result + 152))
        goto LABEL_14;
    }
  }
  else
  {
    v2 = result + 152;
    if (!*(_BYTE *)(result + 304))
      goto LABEL_11;
    if (!*(_BYTE *)v2)
      goto LABEL_14;
  }
  if (*(_QWORD *)(v1 + 16) > *(_QWORD *)(result + 168))
    v2 = v1;
LABEL_11:
  if (!*(_BYTE *)v2)
    return result;
LABEL_15:
  if (!*(_BYTE *)result)
    return v2;
  if (*(_QWORD *)(v2 + 16) > *(_QWORD *)(result + 16))
    return v2;
  return result;
}

uint64_t sub_10021A4E4(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_10021642C((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_10021A554(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

_BYTE *sub_10021A5A0(_BYTE *a1)
{
  if (a1[456])
  {
    sub_100051ED0((uint64_t)(a1 + 464));
    a1[456] = 0;
  }
  if (a1[304])
  {
    sub_100051ED0((uint64_t)(a1 + 312));
    a1[304] = 0;
  }
  if (a1[152])
  {
    sub_100051ED0((uint64_t)(a1 + 160));
    a1[152] = 0;
  }
  if (*a1)
  {
    sub_100051ED0((uint64_t)(a1 + 8));
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_10021A610(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1000C7030(v2);
    operator delete();
  }
  return a1;
}

char **sub_10021A654(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 88)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10021A6A8(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  BOOL v6;

  v2 = *(void (****)(_QWORD))(a1 + 8);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      v5 = v3 - 95;
      do
      {
        (**v5)(v5);
        v6 = v5 == v2;
        v5 -= 95;
      }
      while (!v6);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_10021A718(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 16);
      v4 = *(void **)(v1 + 8);
      if (v3 != v2)
      {
        do
        {
          v6 = *(_DWORD *)(v3 - 176);
          if (v6 == v6 >> 31)
          {
            if (*(_BYTE *)(v3 - 128))
              *(_BYTE *)(v3 - 128) = 0;
          }
          else
          {
            v5 = *(_QWORD *)(v3 - 168);
            if (v6 < 0)
            {
              if (v5)
                (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
            }
            else
            {
              (*(void (**)(uint64_t))v5)(v3 - 168);
            }
          }
          v3 -= 208;
        }
        while (v3 != v2);
        v4 = *(void **)(v1 + 8);
      }
      *(_QWORD *)(v1 + 16) = v2;
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10021A7E4(uint64_t a1)
{
  return sub_10006DD40(a1 - 8);
}

void sub_10021A7EC(uint64_t a1)
{
  sub_10006DD40(a1 - 8);
  operator delete();
}

void sub_10021A814(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::mutex *v9;
  _QWORD *v10;
  _QWORD *i;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void **v21;

  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_8;
  }
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_100023E6C(",", (char *)(a2 + 48), (uint64_t)__p);
  if (v13 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  *(_DWORD *)buf = 134218755;
  v15 = v5;
  v16 = 2049;
  v17 = v7;
  v18 = 2049;
  v19 = v6;
  v20 = 2081;
  v21 = v8;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveLocalizerUniverseState = {timestampNanos=%lld,latlon={ lat=%{private}.18f,lon=%{private}.18f }, locationGroupIds={%{private}s} }", buf, 0x2Au);
  if (v13 < 0)
    operator delete(__p[0]);
LABEL_8:
  v9 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  v10 = *(_QWORD **)(a1 + 1744);
  for (i = *(_QWORD **)(a1 + 1752); v10 != i; ++v10)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 24))(*v10, a2);
  std::mutex::unlock(v9);
}

void sub_10021A9B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10021A9C8(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  _BYTE *v5;
  unsigned __int8 v6;
  __int128 *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  void *__p;
  int v28;
  __int128 v29;
  int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  char v36;
  int v37;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  char v49;
  int v50;
  _OWORD v51[2];
  int v52;

  result = sub_100096748();
  v5 = result;
  v6 = atomic_load((unsigned __int8 *)result + 20);
  if ((v6 & 1) != 0 || *((_BYTE *)result + 16))
  {
    if (!*((_BYTE *)result + 17))
      return result;
  }
  else
  {
    result = (uint64_t *)sub_1000AC110((uint64_t)result, (_BYTE *)result + 9);
    v5[17] = (_BYTE)result;
    v5[16] = 1;
    atomic_store(1u, v5 + 20);
    if (!(_BYTE)result)
      return result;
  }
  result = (uint64_t *)sub_100307A88(a2);
  if ((_DWORD)result)
  {
    sub_10023403C((uint64_t)&v41, a2);
    v7 = (__int128 *)(v45 + 8);
    if (v44 >= 0)
      v7 = &v46;
    if (v44 == v44 >> 31)
      v8 = (uint64_t *)v51 + 1;
    else
      v8 = (uint64_t *)v7;
    v9 = *v8;
    v10 = sub_1000C30D8();
    v11 = v10;
    v12 = atomic_load((unsigned __int8 *)v10 + 26);
    if ((v12 & 1) == 0 && !*((_BYTE *)v10 + 16))
    {
      *((_DWORD *)v10 + 5) = sub_1000AAF28((uint64_t)v10, (unsigned int *)v10 + 3);
      *((_BYTE *)v11 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v11 + 26);
    }
    v13 = v9 + 1000000000 * *((int *)v11 + 5);
    if (*(_BYTE *)(a1 + 2016))
    {
      *(_QWORD *)(a1 + 2024) = v13;
      v14 = v41;
      v15 = v41 >> 31;
      if (v41 >> 31 == v41)
      {
LABEL_15:
        *(_QWORD *)&v29 = v42;
        v15 = v14;
        goto LABEL_20;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 2016) = 1;
      *(_QWORD *)(a1 + 2024) = v13;
      v14 = v41;
      v15 = v41 >> 31;
      if (v41 >> 31 == v41)
        goto LABEL_15;
    }
    v29 = v42;
    v30 = v43;
LABEL_20:
    v28 = v15 ^ v14;
    v16 = v44;
    v17 = v44 >> 31;
    if (v44 >> 31 == v44)
    {
      v18 = (int)v45 >> 31;
      if ((int)v45 >> 31 == (_DWORD)v45)
      {
        *(_QWORD *)&v33 = v46;
        v18 = v45;
      }
      else
      {
        v33 = v46;
        v34 = v47;
      }
      LODWORD(v32) = v18 ^ v45;
      v35 = v48;
      v36 = 0;
      if (v49)
      {
        v37 = v50;
        v36 = 1;
      }
      v38 = v51[0];
      v39 = v51[1];
      v40 = v52;
    }
    else
    {
      if (v44 >= 0)
        v19 = &v45;
      else
        v19 = (uint64_t *)v45;
      sub_1001A4778((uint64_t)&v32, (uint64_t)v19);
      v16 = v44;
      v17 = v44 >> 31;
    }
    v31 = v17 ^ v16;
    sub_10021AF0C(&__p, (uint64_t)&v28, 1uLL);
    v20 = (uint64_t *)(v45 + 8);
    if (v44 >= 0)
      v20 = (uint64_t *)&v46;
    if (v44 == v44 >> 31)
      v21 = (uint64_t *)v51 + 1;
    else
      v21 = v20;
    v22 = *v21;
    v23 = *(_QWORD *)(a1 + 144);
    v26[0] = *(_QWORD *)(a1 + 136);
    v26[1] = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    sub_1000428F8(a1, (uint64_t *)&__p, 0, v22, v26);
  }
  return result;
}

void sub_10021ADD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x10021AA98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021AE8C(uint64_t a1)
{
  int v2;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == v2 >> 31)
  {
    if (*(_BYTE *)(a1 + 80))
      *(_BYTE *)(a1 + 80) = 0;
    return a1;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v2 < 0)
  {
    if (!v4)
      return a1;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return a1;
  }
  else
  {
    (*(void (**)(uint64_t))v4)(a1 + 40);
    return a1;
  }
}

_QWORD *sub_10021AF0C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  char *v7;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x13B13B13B13B13CLL)
      sub_1000D02C0();
    v7 = (char *)operator new(208 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[208 * a3];
    a1[1] = sub_10021E540(v4, a2, a2 + 208 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_10021AFB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    sub_100343894((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10021AFE4(uint64_t a1)
{
  void *v2;

  sub_10021D8D0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *sub_10021B020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t);
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a1 + 296);
  v4 = *(void (****)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 176);
  v7[0] = off_1003FE558;
  v7[1] = a1;
  v7[2] = v2;
  v8 = v7;
  *(_BYTE *)(a1 + 304) |= sub_10028014C(a1 + 328, a2, v3, v4, (_BYTE *)(a1 + 304), 0, v7, a1 + 2184);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_10021B0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10021B11C(uint64_t *a1, uint64_t a2)
{
  sub_100280020(a1 + 41, a2, a1[37], a1[22]);
}

uint64_t sub_10021B140(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 128))(*(_QWORD *)(a1 + 296));
}

uint64_t *sub_10021B150(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t v6;

  result = (uint64_t *)sub_10026A700(*(_QWORD *)(a1 + 248));
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 520))
    {
      sub_100263F30(*(_QWORD *)(a1 + 152), a2, *(_DWORD *)(a1 + 524));
      v5 = *(uint64_t **)(a1 + 1504);
      v6 = sub_10008E4E4(*(_QWORD *)(a1 + 152));
      return sub_1002781BC(v5, v6);
    }
  }
  return result;
}

uint64_t sub_10021B1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint8_t v8[16];

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2528) + 208))(*(_QWORD *)(a1 + 2528), a2, a3);
    goto LABEL_3;
  }
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received VIO Estimation", v8, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2528) + 208))(*(_QWORD *)(a1 + 2528), a2, a3);
}

uint64_t sub_10021B280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint8_t v8[16];

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2528) + 216))(*(_QWORD *)(a1 + 2528), a2, a3);
    goto LABEL_3;
  }
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received VL localization result", v8, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2528) + 216))(*(_QWORD *)(a1 + 2528), a2, a3);
}

uint64_t sub_10021B34C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _BYTE v12[8];
  uint64_t v13;
  uint8_t buf[4];
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;

  result = sub_1000E48C0(a3);
  if ((_DWORD)result)
  {
    sub_1000E48C8((uint64_t)a3, (uint64_t)v12);
    sub_1000520EC(a1, (uint64_t)v12);
    sub_100051ED0((uint64_t)v12);
    sub_1000E4A28((uint64_t)a3, (uint64_t)v12);
    if (!*(_BYTE *)(a1 + 688))
    {
      sub_1001A3BF0(a1 + 696, v12);
      *(_BYTE *)(a1 + 688) = 1;
LABEL_6:
      if (qword_100417ED8 == -1)
      {
        v6 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        {
LABEL_8:
          v7 = (_QWORD *)(a1 + 760);
          if (*(char *)(a1 + 783) < 0)
            v7 = (_QWORD *)*v7;
          v8 = *(_QWORD *)(a1 + 792);
          *(_DWORD *)buf = 136380931;
          v15 = v7;
          v16 = 2050;
          v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fLastGpsLikePreciseLocation vision location type %{private}s with accuracy %{public}f", buf, 0x16u);
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v6 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_8;
      }
      if (*(_BYTE *)(a1 + 1536))
      {
        v9 = *(void **)(a1 + 1568);
        if (v9)
        {
          *(_QWORD *)(a1 + 1576) = v9;
          operator delete(v9);
        }
        v10 = *(void **)(a1 + 1544);
        if (v10)
        {
          *(_QWORD *)(a1 + 1552) = v10;
          operator delete(v10);
        }
        *(_BYTE *)(a1 + 1536) = 0;
      }
      if (*(_BYTE *)(a1 + 2505))
      {
        sub_10022C52C(*(_QWORD *)(a1 + 176), (uint64_t)v12);
        *(_BYTE *)(a1 + 304) = 1;
      }
      return sub_10000CF0C((uint64_t)v12);
    }
    if (v13 > *(_QWORD *)(a1 + 704))
    {
      sub_1000CBA38(a1 + 696, (uint64_t)v12);
      goto LABEL_6;
    }
    if (qword_100417ED8 == -1)
    {
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return sub_10000CF0C((uint64_t)v12);
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return sub_10000CF0C((uint64_t)v12);
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring VL because older than last precise location", buf, 2u);
    return sub_10000CF0C((uint64_t)v12);
  }
  return result;
}

void sub_10021B5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000CF0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021B5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100051ED0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10021B5CC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_10021B34C(a1 - 8, a2, a3);
}

uint64_t sub_10021B898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const std::string *v6;
  double v7;
  double v8;
  double v9;
  double v11[4];
  _BYTE v12[32];

  sub_10007A94C(a1);
  v6 = (const std::string *)sub_100050DB0(a2);
  std::string::operator=((std::string *)(a1 + 104), v6);
  v11[0] = (*(double (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v11[1] = v7;
  v11[2] = v8;
  v11[3] = v9;
  sub_100303CB0(v11, (uint64_t)v12);
  sub_100077D9C(a1 + 8, (uint64_t)v12);
  return nullsub_23(v12);
}

void sub_10021B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  nullsub_23(va);
  sub_100076820(v5);
  _Unwind_Resume(a1);
}

void sub_10021B93C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_10021B950(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_10021B964(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  double *v35;
  unint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  double *v42;
  uint64_t v43;
  __int128 v44;
  double *v45;
  int64_t v46;
  signed int v47;
  signed int v48;
  signed int v49;
  double *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const std::string *v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  double v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  double v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  double v93;
  float v94;
  int v95;
  uint64_t v96;
  double v97;
  float v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  __n128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE v124[32];
  _BYTE v125[32];
  _BYTE v126[32];
  void *__p;
  double *v128;
  _QWORD v129[25];
  char v130;
  _BYTE v131[1920];
  _QWORD v132[5];
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *v138;
  char *v139;
  void *v140;
  void *v141;
  std::__shared_weak_count *v142;
  double v143;
  char v144[8];
  _QWORD v145[5];
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t buf;
  double v150;
  double v151;
  double v152;

  v9 = (_QWORD *)sub_10004F6AC(a4);
  v10 = a2[1];
  v136 = *a2;
  v137 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_10025A37C(v9, &v136, (uint64_t)&v138);
  v13 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_100259484((_BYTE **)(a1 + 528), (uint64_t)&v138);
  if (!*(_BYTE *)(a1 + 664) || a3 - *(_QWORD *)(a1 + 672) >= 2000000001)
  {
    sub_100259B70(a1 + 528, (uint64_t)&v138);
    if (!*(_BYTE *)(a1 + 664))
      *(_BYTE *)(a1 + 664) = 1;
    *(_QWORD *)(a1 + 672) = a3;
  }
  sub_10025A374((uint64_t *)(a1 + 528), a5);
  v122 = *a2;
  v123 = a5;
  __p = 0;
  v128 = 0;
  v129[0] = 0;
  v16 = nullsub_10(a4);
  v17 = (_QWORD *)sub_100050DB0(v16);
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17[1] - *v17) >> 4);
  if (v18)
  {
    if (v18 >> 61)
      sub_1000D02C0();
    v19 = (char *)operator new(0x6666666666666668 * ((uint64_t)(v17[1] - *v17) >> 4));
    __p = &v19[(unint64_t)v128 & 0xFFFFFFFFFFFFFFF8];
    v128 = (double *)__p;
    v129[0] = &v19[8 * v18];
  }
  v118 = a1;
  v119 = a2;
  v117 = a3;
  v20 = *(_QWORD **)(sub_10004F6AC(a4) + 16);
  v21 = v123;
  if (v20)
  {
    v121 = a1 + 2032;
    sub_1001D550C(a1 + 2032, v20[2], v122, (uint64_t)&buf);
    while (1)
    {
      v22 = v20[6];
      v23 = v20[7];
      if (v22 != v23)
        break;
LABEL_19:
      nullsub_23(&buf);
      v20 = (_QWORD *)*v20;
      if (!v20)
        goto LABEL_50;
      sub_1001D550C(v121, v20[2], v122, (uint64_t)&buf);
    }
    v24 = v128;
    while (1)
    {
      v26 = *(double *)(v22 + 16) - *(double *)(v21 + 16) + v150;
      v27 = (*(double *)(v22 + 24) - *(double *)(v21 + 24) + v151)
          * (*(double *)(v22 + 24) - *(double *)(v21 + 24) + v151)
          + v26 * v26;
      if ((unint64_t)v24 < v129[0])
      {
        *v24 = v27;
        v25 = v24 + 1;
      }
      else
      {
        v28 = (double *)__p;
        v29 = (char *)v24 - (_BYTE *)__p;
        v30 = ((char *)v24 - (_BYTE *)__p) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          sub_1000D02C0();
        v32 = v129[0] - (_QWORD)__p;
        if ((uint64_t)(v129[0] - (_QWORD)__p) >> 2 > v31)
          v31 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 >> 61)
            sub_1000CDEB8();
          v34 = operator new(8 * v33);
          v35 = (double *)&v34[8 * v30];
          *v35 = v27;
          v25 = v35 + 1;
          if (v24 != v28)
          {
LABEL_35:
            v36 = (char *)(v24 - 1) - (char *)v28;
            if (v36 < 0x168
              || &v34[v29 - 8 - (v36 & 0xFFFFFFFFFFFFFFF8)] > &v34[v29 - 8]
              || (double *)((char *)v24 - (v36 & 0xFFFFFFFFFFFFFFF8) - 8) > v24 - 1
              || (unint64_t)((char *)v24 - v34 - v29) < 0x20)
            {
              v37 = v24;
              v21 = v123;
            }
            else
            {
              v39 = (v36 >> 3) + 1;
              v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
              v37 = &v24[v40 / 0xFFFFFFFFFFFFFFF8];
              v35 = (double *)((char *)v35 - v40);
              v41 = &v34[8 * v30 - 16];
              v42 = v24 - 2;
              v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v44 = *(_OWORD *)v42;
                *(v41 - 1) = *((_OWORD *)v42 - 1);
                *v41 = v44;
                v41 -= 2;
                v42 -= 4;
                v43 -= 4;
              }
              while (v43);
              v21 = v123;
              if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_38:
                __p = v35;
                v128 = v25;
                v129[0] = &v34[8 * v33];
                if (!v28)
                  goto LABEL_24;
LABEL_42:
                operator delete(v28);
                goto LABEL_24;
              }
            }
            do
            {
              v38 = *((_QWORD *)v37-- - 1);
              *((_QWORD *)v35-- - 1) = v38;
            }
            while (v37 != v28);
            goto LABEL_38;
          }
        }
        else
        {
          v34 = 0;
          v35 = (double *)(8 * v30);
          *(double *)(8 * v30) = v27;
          v25 = (double *)(8 * v30 + 8);
          if (v24 != v28)
            goto LABEL_35;
        }
        v21 = v123;
        __p = v35;
        v128 = v25;
        v129[0] = &v34[8 * v33];
        if (v28)
          goto LABEL_42;
      }
LABEL_24:
      v128 = v25;
      v22 += 80;
      v24 = v25;
      if (v22 == v23)
        goto LABEL_19;
    }
  }
LABEL_50:
  v45 = (double *)__p;
  v46 = ((char *)v128 - (_BYTE *)__p) >> 3;
  v47 = v46 - 1;
  v48 = llround((double)(unint64_t)v46 * 0.655);
  if (v47 >= v48)
    v49 = v48;
  else
    v49 = v47;
  v50 = (double *)((char *)__p + 8 * v49);
  if (v50 == v128)
  {
    v51 = v117;
    v54 = v118;
    v52 = v119;
    v53 = a4;
  }
  else
  {
    sub_10021DB68((double *)__p, v50, v128);
    v51 = v117;
    v52 = v119;
    v53 = a4;
    v45 = (double *)__p;
    v54 = v118;
  }
  sub_10019D914(v123, sqrt(v45[v49]));
  if (__p)
  {
    v128 = (double *)__p;
    operator delete(__p);
  }
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v52 + 64))(*v52);
  v56 = (const std::string *)sub_100050DB0(v55);
  std::string::operator=((std::string *)(v123 + 104), v56);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v52 + 72))(*v52) != 0;
  sub_10019D978(v123, 4 * v57);
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v52 + 56))(*v52);
  v59 = v58;
  if (*(_BYTE *)(v54 + 688) && !*(_DWORD *)(v123 + 524) && v58)
  {
    sub_1000B53CC(v131, v58);
    sub_100159F88((uint64_t)v131, v132);
    sub_100073738(v131);
    __p = off_1003FE220;
    sub_1001A3BF0(v129, v54 + 696);
    v130 = 1;
    LOBYTE(v128) = 1;
    v144[0] = 0;
    sub_1001A23D4((uint64_t)v145, (uint64_t)v132);
    v145[4] = v132[4];
    v146 = v133;
    if (v133)
    {
      v60 = (unint64_t *)&v133->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    v147 = v134;
    v148 = v135;
    if (v135)
    {
      v62 = (unint64_t *)&v135->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
    }
    v144[0] = 1;
    sub_10021CDAC((uint64_t)&__p, (uint64_t)v144, (uint64_t)&buf);
    if (v144[0])
    {
      v64 = v148;
      if (v148)
      {
        v65 = (unint64_t *)&v148->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v146;
      if (v146)
      {
        v68 = (unint64_t *)&v146->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      nullsub_22(v145);
      v144[0] = 0;
    }
    __p = off_1003FE220;
    sub_10000CF0C((uint64_t)v129);
    v53 = a4;
    if (sub_10026A70C(*(_QWORD *)(v54 + 248)))
    {
      sub_10015E440(*v119, (uint64_t)&buf, (uint8_t *)v123, v51, *(_QWORD *)(v54 + 248), (uint64_t)&__p);
      sub_100077824(v123, (uint64_t)&__p);
      sub_100076820((uint64_t)&__p);
    }
    if (sub_10022BC24(a4) == 2)
    {
      sub_1001A2040((uint64_t)v126, (uint64_t)&v150);
      v70 = sub_100317D88(v59, (uint64_t)v126, 0, 0, v152);
      nullsub_23(v126);
      sub_10019DA20(v123, v70);
    }
    sub_100076820((uint64_t)&buf);
    v71 = v135;
    if (v135)
    {
      v72 = (unint64_t *)&v135->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = v133;
    if (v133)
    {
      v75 = (unint64_t *)&v133->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    nullsub_22(v132);
  }
  v77 = sub_10022BC24(v53);
  sub_10019DA0C(v123, v77);
  v78 = *v119;
  v79 = *(_QWORD *)(v54 + 248);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v119 + 72))(*v119) != 1)
  {
    if ((v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78),
          v81 = v80,
          v82 = *(_DWORD *)(v123 + 524),
          v82 != 2)
      && (v82 || *(_DWORD *)(v123 + 608) != 2)
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80) & 1) == 0)
    {
      v83 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v81 + 16))(v81, *(double *)(v123 + 16), *(double *)(v123 + 24));
      if ((v83 & 1) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v78 + 80))(&buf, v78, v123 + 8);
        sub_10019D98C(v123, (uint64_t)&buf);
        if ((v83 & 0x100) != 0)
        {
          v84 = sub_10026AAE8(v79);
          sub_1002D688C(v81, v123 + 8, (uint64_t)&__p, v84);
          sub_10019D8A4(v123, (uint64_t)&__p);
          nullsub_23(&__p);
        }
        nullsub_22(&buf);
      }
    }
  }
  v85 = sub_10007814C(v53);
  *(_OWORD *)(v123 + 168) = *(_OWORD *)(v85 + 16);
  sub_10019D8D8(v123, v143);
  v86 = *(double *)(v123 + 184);
  v87 = sub_1000C23A4(v85);
  *(double *)(v123 + 160) = v86 * v87 * v143;
  if (v59)
  {
    sub_1001A2040((uint64_t)v125, v123 + 8);
    v88 = sub_100317888((_QWORD *)v59, (uint64_t)v125, 0, 1, 1, *(double *)(v123 + 280));
    nullsub_23(v125);
    sub_10019D9BC(v123, v88);
    if (sub_10022BC24(v53) == 2)
    {
      sub_1001A2040((uint64_t)v124, v123 + 8);
      v89 = sub_100317D88(v59, (uint64_t)v124, 0, 1, *(double *)(v123 + 152));
      nullsub_23(v124);
      sub_10019D9F8(v123, v89);
    }
  }
  v90 = *(_QWORD *)(v54 + 248);
  if (sub_10022BC24(v53) != 2)
  {
    v95 = sub_10022BC2C(v53, *(double *)(v123 + 160));
    *(_DWORD *)(v123 + 296) = !sub_10022BD54(v95);
    if (!v59)
      goto LABEL_124;
    goto LABEL_121;
  }
  v91 = *(double *)(v123 + 152);
  if (v91 > sub_10026A8DC(v90))
    goto LABEL_120;
  v92 = *(_QWORD *)(v123 + 752);
  if ((v92 & 0x2000000000000) != 0)
  {
    v93 = *(double *)(v123 + 648);
    v94 = sub_10026A98C(v90);
LABEL_114:
    if (v93 > v94)
      goto LABEL_120;
    goto LABEL_115;
  }
  if ((v92 & 0x4000000000000) != 0)
  {
    v93 = *(double *)(v123 + 656);
    v94 = sub_10026A960(v90);
    goto LABEL_114;
  }
LABEL_115:
  v96 = *(_QWORD *)(v123 + 752);
  if ((v96 & 0x80000000000) != 0)
  {
    v97 = *(double *)(v123 + 600);
    v98 = sub_10026A934(v90);
  }
  else
  {
    if ((v96 & 0x20000000000) == 0)
      goto LABEL_120;
    v97 = *(double *)(v123 + 560);
    v98 = sub_10026A908(v90);
  }
  if (v97 > v98)
  {
LABEL_120:
    *(_DWORD *)(v123 + 296) = 1;
    if (!v59)
      goto LABEL_124;
    goto LABEL_121;
  }
  *(_DWORD *)(v123 + 296) = 0;
  if (!v59)
    goto LABEL_124;
LABEL_121:
  if ((*(_BYTE *)(v59 + 1913) & 0x40) != 0 && sub_100258E34(v59))
  {
    sub_10019D8BC(v123, *(_DWORD *)(v59 + 1616));
    *(_DWORD *)(v54 + 524) = *(_DWORD *)(v59 + 1616);
    *(_BYTE *)(v54 + 520) = 1;
  }
LABEL_124:
  v99 = sub_10008E4E4(*(_QWORD *)(v54 + 152));
  sub_10019D9D0(v123, v99);
  sub_10007AB9C(v123, NAN);
  sub_10007AB6C(v123, NAN);
  sub_10019D900(v123, 0.0);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*v119 + 48))(&__p);
  if (sub_10024D8F8(*(_QWORD *)(v54 + 296)))
  {
    if (__p)
    {
      v100 = sub_10024D908(*(_QWORD *)(v54 + 296), (uint64_t)__p);
      sub_10007AB6C(v123, v100);
      if (*(_QWORD *)(v54 + 368) != *(_QWORD *)(v54 + 376))
      {
        v101 = nullsub_10(v54 + 328);
        v102 = sub_1002424A0(v101, (uint64_t)__p);
        sub_10007AB6C(v123, v102);
        v103 = sub_1002806E8(v54 + 328);
        sub_10019D900(v123, v103);
        sub_1002806DC(v54 + 328);
      }
    }
  }
  sub_10019D8EC(v123, NAN);
  v104.n128_u64[0] = *(_QWORD *)(v123 + 24);
  v105 = (std::__shared_weak_count *)v128;
  if (v128)
  {
    v106 = (unint64_t *)(v128 + 1);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v105->__on_zero_shared)(v105, v104);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v142;
  if (v142)
  {
    v109 = (unint64_t *)&v142->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v108->__on_zero_shared)(v108, v104);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  v111 = (char *)v138;
  if (v138)
  {
    v112 = v139;
    v113 = v138;
    if (v139 != v138)
    {
      do
      {
        v114 = (std::__shared_weak_count *)*((_QWORD *)v112 - 2);
        if (v114)
        {
          v115 = (unint64_t *)&v114->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v114->__on_zero_shared)(v114, v104);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        v112 -= 80;
      }
      while (v112 != v111);
      v113 = v138;
    }
    v139 = v111;
    operator delete(v113);
  }
}

void sub_10021CB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_23(&a27);
  sub_100076820((uint64_t)&STACK[0xC30]);
  sub_10015A328((uint64_t)&STACK[0xB48]);
  sub_100076820(a18);
  sub_10021D1EC((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_10021CC90(_Unwind_Exception *a1)
{
  sub_1000E095C((uint64_t)&STACK[0xB88]);
  _Unwind_Resume(a1);
}

void sub_10021CCA8(_Unwind_Exception *a1)
{
  sub_10021D1EC((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_10021CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (a35)
  {
    operator delete(a35);
    sub_100076820(a18);
    sub_10021D1EC(&STACK[0xB98]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10021CD3CLL);
}

void sub_10021CCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  sub_10021D1EC((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_10021CCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;

  if (a35)
  {
    operator delete(a35);
    sub_100076820(v35);
    sub_10021D1EC((void **)&STACK[0xB98]);
    _Unwind_Resume(a1);
  }
  sub_100076820(v35);
  sub_10021D1EC((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_10021CCF4()
{
  nullsub_23(&STACK[0xC30]);
  JUMPOUT(0x10021CD08);
}

void sub_10021CD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1000E095C((uint64_t)&a35);
  JUMPOUT(0x10021CD3CLL);
}

void **sub_10021CD54(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_1000788EC(v3 - 37);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10021CDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  double v9;
  uint64_t result;
  double v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[32];
  _BYTE v21[24];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)a3 = off_1003F97F8;
  *(_QWORD *)(a3 + 8) = off_1003F9A68;
  v6 = a3 + 8;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) &= 0xFCu;
  *(_QWORD *)(a3 + 40) = off_1003F9A88;
  v7 = a3 + 40;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) &= 0xFCu;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_QWORD *)(a3 + 304) = off_1003F97B8;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_OWORD *)(a3 + 376) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_DWORD *)(a3 + 424) = 0;
  *(_QWORD *)(a3 + 440) = 0;
  *(_QWORD *)(a3 + 448) = 0;
  *(_QWORD *)(a3 + 432) = 0;
  *(_BYTE *)(a3 + 456) &= 0xC0u;
  *(_WORD *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_OWORD *)(a3 + 488) = 0u;
  *(_OWORD *)(a3 + 504) = 0u;
  *(_QWORD *)(a3 + 520) = 0;
  *(_QWORD *)(a3 + 528) = off_1003F9A88;
  *(_QWORD *)(a3 + 544) = 0;
  *(_QWORD *)(a3 + 536) = 0;
  *(_BYTE *)(a3 + 552) &= 0xFCu;
  *(_QWORD *)(a3 + 560) = 0;
  *(_QWORD *)(a3 + 568) = off_1003F97D8;
  *(_QWORD *)(a3 + 584) = 0;
  *(_QWORD *)(a3 + 576) = 0;
  *(_BYTE *)(a3 + 592) &= 0xF8u;
  *(_QWORD *)(a3 + 600) = 0;
  *(_DWORD *)(a3 + 608) = 0;
  v8 = (_OWORD *)(a3 + 616);
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  *(_DWORD *)(a3 + 664) = 0;
  *(_OWORD *)(a3 + 700) = 0u;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_QWORD *)(a3 + 752) = *(_QWORD *)(a3 + 752) & 0xF000000000000000 | 0x10000000;
  *(_QWORD *)(a3 + 296) = 4;
  sub_100077D9C(v7, a1 + 48);
  *(_QWORD *)(a3 + 752) |= 2uLL;
  v9 = *(double *)(a1 + 112);
  *(double *)(a3 + 152) = v9;
  sub_10019D914(a3, v9);
  sub_10007AB88(a3, *(_QWORD *)(a1 + 24));
  *(_DWORD *)(a3 + 296) = 0;
  sub_10019D978(a3, 1);
  result = sub_1000CB850(a3, 8.0);
  if (*(_BYTE *)a2)
  {
    sub_1001A23D4((uint64_t)v20, a1 + 48);
    sub_100159CBC(a2 + 8, (uint64_t)v20, (uint64_t)v21);
    sub_100159E28((uint64_t)v21, (uint64_t)&v22);
    sub_100077D9C(v6, (uint64_t)&v22);
    nullsub_23(&v22);
    result = nullsub_22(v20);
    if ((~*(unsigned __int16 *)(a1 + 208) & 0x8080) == 0)
    {
      v11 = sub_10015BF30(*(double *)(a1 + 176));
      v12 = *(double *)(a1 + 120);
      v13 = *(std::__shared_weak_count **)(a2 + 48);
      v22 = *(_QWORD *)(a2 + 40);
      v23 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = sub_10015C2A4((uint64_t)&v22, v12);
      sub_10007AB9C(a3, v16);
      v17 = v23;
      if (v23)
      {
        v18 = (unint64_t *)&v23->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      return sub_1000CB804(a3, v11 * v11);
    }
  }
  return result;
}

void sub_10021D094(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_10021D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_1000E095C((uint64_t)va);
  sub_100076820(v9);
  _Unwind_Resume(a1);
}

void sub_10021D0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  nullsub_23(va1);
  nullsub_22((uint64_t *)va);
  sub_100076820(v2);
  _Unwind_Resume(a1);
}

void sub_10021D104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10021D118(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    nullsub_22(a1 + 8);
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

_QWORD *sub_10021D1BC(_QWORD *a1)
{
  *a1 = off_1003FE220;
  sub_10000CF0C((uint64_t)(a1 + 2));
  return a1;
}

void **sub_10021D1EC(void **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (char *)*a1;
  if (*a1)
  {
    v7 = (char *)a1[1];
    v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)v7 - 2);
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 80;
      }
      while (v7 != v6);
      v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

void sub_10021D2D8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  int64_t v7;

  v4 = (std::mutex *)(a1 + 1592);
  std::mutex::lock((std::mutex *)(a1 + 1592));
  v5 = *(char **)(a1 + 1656);
  v6 = *(char **)(a1 + 1664);
  if (v5 != v6)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        v5 = *(char **)(a1 + 1664);
        break;
      }
    }
  }
  if (v5 != v6)
  {
    v7 = v6 - (v5 + 8);
    if (v6 != v5 + 8)
      memmove(v5, v5 + 8, v6 - (v5 + 8));
    *(_QWORD *)(a1 + 1664) = &v5[v7];
  }
  std::mutex::unlock(v4);
}

void sub_10021D364(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  v5 = *(char **)(a1 + 1752);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 1760);
  if ((unint64_t)v5 < v7)
  {
    *(_QWORD *)v5 = a2;
    v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 1744);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 1744) = v15;
      *(_QWORD *)(a1 + 1752) = v8;
      *(_QWORD *)(a1 + 1760) = v16;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  v6 = *(char **)(a1 + 1744);
  *(_QWORD *)(a1 + 1744) = v15;
  *(_QWORD *)(a1 + 1752) = v8;
  *(_QWORD *)(a1 + 1760) = v16;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 1752) = v8;
  std::mutex::unlock(v4);
}

void sub_10021D514(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10021D528(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  int64_t v7;

  v4 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  v5 = *(char **)(a1 + 1744);
  v6 = *(char **)(a1 + 1752);
  if (v5 != v6)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        v5 = *(char **)(a1 + 1752);
        break;
      }
    }
  }
  if (v5 != v6)
  {
    v7 = v6 - (v5 + 8);
    if (v6 != v5 + 8)
      memmove(v5, v5 + 8, v6 - (v5 + 8));
    *(_QWORD *)(a1 + 1752) = &v5[v7];
  }
  std::mutex::unlock(v4);
}

void sub_10021D5B4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 1768);
  std::mutex::lock((std::mutex *)(a1 + 1768));
  v5 = *(char **)(a1 + 1840);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 1848);
  if ((unint64_t)v5 < v7)
  {
    *(_QWORD *)v5 = a2;
    v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 1832);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 1832) = v15;
      *(_QWORD *)(a1 + 1840) = v8;
      *(_QWORD *)(a1 + 1848) = v16;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  v6 = *(char **)(a1 + 1832);
  *(_QWORD *)(a1 + 1832) = v15;
  *(_QWORD *)(a1 + 1840) = v8;
  *(_QWORD *)(a1 + 1848) = v16;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 1840) = v8;
  *(_BYTE *)(a1 + 2232) = *(_QWORD *)(a1 + 1832) != v8;
  std::mutex::unlock(v4);
}

void sub_10021D774(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10021D788(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;

  v4 = (std::mutex *)(a1 + 1768);
  std::mutex::lock((std::mutex *)(a1 + 1768));
  v5 = *(char **)(a1 + 1832);
  v6 = *(char **)(a1 + 1840);
  v7 = v5;
  if (v5 != v6)
  {
    while (*(_QWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        v7 = *(char **)(a1 + 1840);
        break;
      }
    }
  }
  v8 = v6 - (v7 + 8);
  if (v6 != v7 + 8)
  {
    memmove(v7, v7 + 8, v6 - (v7 + 8));
    v5 = *(char **)(a1 + 1832);
  }
  *(_QWORD *)(a1 + 1840) = &v7[v8];
  *(_BYTE *)(a1 + 2232) = v5 != &v7[v8];
  std::mutex::unlock(v4);
}

void sub_10021D820(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  int64_t v7;

  v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  v5 = *(char **)(a1 + 1920);
  v6 = *(char **)(a1 + 1928);
  if (v5 != v6)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        v5 = *(char **)(a1 + 1928);
        break;
      }
    }
  }
  v7 = v6 - (v5 + 8);
  if (v6 != v5 + 8)
    memmove(v5, v5 + 8, v6 - (v5 + 8));
  *(_QWORD *)(a1 + 1928) = &v5[v7];
  std::mutex::unlock(v4);
}

void sub_10021D8A4(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10021D8D0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = v3[4];
      if (v4)
      {
        v5 = v3[5];
        v6 = (void *)v3[4];
        if (v5 != v4)
        {
          do
          {
            v8 = *(_DWORD *)(v5 - 176);
            if (v8 == v8 >> 31)
            {
              if (*(_BYTE *)(v5 - 128))
                *(_BYTE *)(v5 - 128) = 0;
            }
            else
            {
              v7 = *(_QWORD *)(v5 - 168);
              if (v8 < 0)
              {
                if (v7)
                  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
              }
              else
              {
                (*(void (**)(uint64_t))v7)(v5 - 168);
              }
            }
            v5 -= 208;
          }
          while (v5 != v4);
          v6 = (void *)v3[4];
        }
        v3[5] = v4;
        operator delete(v6);
      }
      v9 = (std::__shared_weak_count *)v3[3];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

_QWORD *sub_10021D9C8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x563B48C20563B5)
      sub_1000D02C0();
    result = operator new(760 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[95 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = (_QWORD *)sub_1000768A0(&v8[v9 / 8], a2 + v9);
        v9 += 760;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_10021DA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_10021DAD4(&a9);
  _Unwind_Resume(a1);
}

void sub_10021DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 760)
    (**(void (***)(uint64_t))(v10 - 760 + v11))(v10 - 760 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_10021DAD4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_10021DAD4(void ***result)
{
  void ***v1;
  void **v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  BOOL v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void (***)(_QWORD))**result;
    if (v3)
    {
      v4 = (void (***)(_QWORD))v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 95;
        do
        {
          (**v6)(v6);
          v7 = v6 == v3;
          v6 -= 95;
        }
        while (!v7);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

double *sub_10021DB68(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

uint64_t sub_10021DF10(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 8))
  {
    if (a2 - *(_QWORD *)(result + 24) >= 8000000000)
      *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

uint64_t sub_10021DF3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

char *sub_10021DF44@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[103] < 0)
    return (char *)sub_10006CED8((_BYTE *)a2, *((void **)result + 10), *((_QWORD *)result + 11));
  *(_OWORD *)a2 = *((_OWORD *)result + 5);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 12);
  return result;
}

void sub_10021DF70(_QWORD *a1)
{
  *a1 = off_1003FE220;
  sub_10000CF0C((uint64_t)(a1 + 2));
  operator delete();
}

void sub_10021DFB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021DFC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021DFF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E000(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E030(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E040(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E080(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E0B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E0C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E0F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E100(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E130(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021E140(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021E170(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *(v4 - 6);
        if (v7)
        {
          *(v4 - 5) = v7;
          operator delete(v7);
        }
        v8 = v4 - 9;
        v9 = (char *)*(v4 - 9);
        if (v9)
        {
          v10 = (char *)*(v4 - 8);
          v6 = *(v4 - 9);
          if (v10 != v9)
          {
            do
            {
              v12 = *((_DWORD *)v10 - 44);
              if (v12 == v12 >> 31)
              {
                if (*(v10 - 128))
                  *(v10 - 128) = 0;
              }
              else
              {
                v11 = *((_QWORD *)v10 - 21);
                if (v12 < 0)
                {
                  if (v11)
                    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
                }
                else
                {
                  (*(void (**)(char *))v11)(v10 - 168);
                }
              }
              v10 -= 208;
            }
            while (v10 != v9);
            v6 = *v8;
          }
          *(v4 - 8) = v9;
          operator delete(v6);
        }
        v4 -= 9;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10021E288()
{
  operator delete();
}

__n128 sub_10021E29C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1003FE4B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10021E2D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FE4B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10021E2F0(uint64_t a1@<X0>, _QWORD **a2@<X8>)
{
  sub_1000ACD60(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_10021E2FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioI"
                                "Ll1ELl1000000000EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10021E368()
{
}

char *sub_10021E374(void **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0x2E8BA2E8BA2E8BA3 * ((v3 - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_1000D02C0();
  if (0x5D1745D1745D1746 * (((_BYTE *)a1[2] - v4) >> 3) > v6)
    v6 = 0x5D1745D1745D1746 * (((_BYTE *)a1[2] - v4) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((_BYTE *)a1[2] - v4) >> 3)) >= 0x1745D1745D1745DLL)
    v8 = 0x2E8BA2E8BA2E8BALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x2E8BA2E8BA2E8BALL)
      sub_1000CDEB8();
    v9 = (char *)operator new(88 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[88 * v5];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v10[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    v11 = &v9[88 * v5];
    v12 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v11 + 3) = v12;
    *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
    *((_QWORD *)v11 + 10) = *(_QWORD *)(a2 + 80);
    v10[24] = 1;
  }
  v13 = &v9[88 * v8];
  v14 = v10 + 88;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v15 = *(_OWORD *)(v3 - 88);
      *((_QWORD *)v10 - 9) = *((_QWORD *)v3 - 9);
      *(_OWORD *)(v10 - 88) = v15;
      *(v10 - 64) = 0;
      if (*(v3 - 64))
      {
        v16 = *(_OWORD *)(v3 - 56);
        v17 = *(_OWORD *)(v3 - 40);
        v18 = *(_OWORD *)(v3 - 24);
        *((_QWORD *)v10 - 1) = *((_QWORD *)v3 - 1);
        *(_OWORD *)(v10 - 24) = v18;
        *(_OWORD *)(v10 - 40) = v17;
        *(_OWORD *)(v10 - 56) = v16;
        *(v10 - 64) = 1;
      }
      v10 -= 88;
      v3 -= 88;
    }
    while (v3 != v4);
    v3 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
    while (v19 != v3)
    {
      if (*(v19 - 64))
        *(v19 - 64) = 0;
      v19 -= 88;
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

uint64_t sub_10021E540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  int v15;
  int *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;

  v4 = a4;
  v24 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v10 = (_QWORD *)(v4 + 8);
      v12 = (_QWORD *)(v6 + 8);
      v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *v10 = *v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)v10 = v14;
        v13 = *(_DWORD *)v6;
        v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)v4 = v13 ^ v11;
      v15 = *(_DWORD *)(v6 + 32);
      v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        v17 = (_QWORD *)(v4 + 48);
        v18 = *(_DWORD *)(v6 + 40);
        v19 = (_QWORD *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *v17 = *v19;
          v20 = v18;
        }
        else
        {
          v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)v17 = v22;
          v20 = *v16;
          v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 40) = v20 ^ v18;
        *(_QWORD *)(v4 + 72) = *(_QWORD *)(v6 + 72);
        *(_BYTE *)(v4 + 80) = 0;
        if (*(_BYTE *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(_BYTE *)(v4 + 80) = 1;
        }
        v7 = *(_OWORD *)(v6 + 88);
        v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 120) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        v9 = v4;
      }
      else
      {
        if (v15 >= 0)
          v21 = v6 + 40;
        else
          v21 = *(_QWORD *)v16;
        sub_1001A4778(v4 + 40, v21);
        v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      v4 = v9 + 208;
      v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_10021E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002195B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_10021E6C8(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  int64x2_t *v26;

  v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    sub_1000D02C0();
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      sub_1000CDEB8();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[72 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[72 * v6];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v8 + 5) = v10;
  *((_QWORD *)v8 + 6) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  v8[64] = *(_BYTE *)(a2 + 64);
  *((_QWORD *)v8 + 7) = v12;
  v13 = v8 + 72;
  v24.i64[1] = (uint64_t)(v8 + 72);
  v25 = v9;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v20 = vdupq_n_s64(v14);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16];
      v18 = v14 + v16;
      *((_QWORD *)v17 - 9) = 0;
      *((_QWORD *)v17 - 8) = 0;
      *((_QWORD *)v17 - 7) = 0;
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *((_QWORD *)v17 - 7) = *(_QWORD *)(v14 + v16 - 56);
      *(_QWORD *)(v18 - 72) = 0;
      *(_QWORD *)(v18 - 64) = 0;
      *(_QWORD *)(v18 - 56) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v14 + v16 - 48);
      *((_QWORD *)v17 - 4) = *(_QWORD *)(v14 + v16 - 32);
      *(_QWORD *)(v18 - 48) = 0;
      *(_QWORD *)(v18 - 40) = 0;
      *(_QWORD *)(v18 - 32) = 0;
      *((_QWORD *)v17 - 3) = *(_QWORD *)(v14 + v16 - 24);
      v19 = *(_QWORD *)(v14 + v16 - 16);
      *(v17 - 8) = *(_BYTE *)(v14 + v16 - 8);
      *((_QWORD *)v17 - 2) = v19;
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    v20 = *a1;
    v8 += v16;
    v13 = (char *)v24.i64[1];
    v9 = v25;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v13;
  v24 = v20;
  v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  v25 = v21;
  v23 = v20.i64[0];
  sub_10021E8A4((uint64_t)&v23);
  return v13;
}

uint64_t sub_10021E8A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 72);
    *(_QWORD *)(a1 + 16) = i - 72;
    v6 = *(void **)(i - 48);
    if (v6)
    {
      *(_QWORD *)(i - 40) = v6;
      operator delete(v6);
    }
    v7 = (char *)*v5;
    if (*v5)
    {
      v8 = *(char **)(i - 64);
      v4 = *v5;
      if (v8 != v7)
      {
        do
        {
          v10 = *((_DWORD *)v8 - 44);
          if (v10 == v10 >> 31)
          {
            if (*(v8 - 128))
              *(v8 - 128) = 0;
          }
          else
          {
            v9 = *((_QWORD *)v8 - 21);
            if (v10 < 0)
            {
              if (v9)
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            }
            else
            {
              (*(void (**)(char *))v9)(v8 - 168);
            }
          }
          v8 -= 208;
        }
        while (v8 != v7);
        v4 = *v5;
      }
      *(_QWORD *)(i - 64) = v7;
      operator delete(v4);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10021E988(double **a1)
{
  double *v2;
  double *v3;
  double *i;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_1000FC5A4((uint64_t)v7);
  sub_1000F0508(&v8, (uint64_t)"[", 1);
  v3 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    std::ostream::operator<<(*v3);
    for (i = v3 + 1; i != v2; ++i)
    {
      sub_1000F0508(&v8, (uint64_t)", ", 2);
      std::ostream::operator<<(*i);
    }
  }
  sub_1000F0508(&v8, (uint64_t)"]", 1);
  std::stringbuf::str(v9);
  *(_QWORD *)((char *)v7
  v8 = v5;
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_10021EABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021EAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021EAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021EAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10021EB10()
{
  operator delete();
}

__n128 sub_10021EB24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1003FE558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10021EB5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FE558;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10021EB7C(uint64_t a1@<X0>, _QWORD **a2@<X8>)
{
  sub_1000ACD60(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_10021EB88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10021EBF4()
{
}

BOOL sub_10021EC00(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  unsigned int v5;
  _BOOL8 result;
  unsigned int v7;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  if (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    return 0;
  if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
    return 0;
  if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
    return 0;
  v4 = *(_WORD *)(a1 + 136);
  v5 = *(unsigned __int16 *)(a2 + 136);
  if (((v5 >> 4) & 1) != (v4 & 0x10) >> 4)
    return 0;
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if (((v5 >> 5) & 1) == (v4 & 0x20) >> 5
      && ((v4 & 0x20) == 0 || *(double *)(a1 + 88) == *(double *)(a2 + 88))
      && ((v5 >> 6) & 1) == (v4 & 0x40) >> 6
      && ((v4 & 0x40) == 0 || *(double *)(a1 + 96) == *(double *)(a2 + 96))
      && ((v5 >> 7) & 1) == (v4 & 0x80) >> 7
      && ((v4 & 0x80) == 0 || *(double *)(a1 + 104) == *(double *)(a2 + 104))
      && ((v5 >> 8) & 1) == (unsigned __int16)(v4 & 0x100) >> 8
      && ((v4 & 0x100) == 0 || *(double *)(a1 + 112) == *(double *)(a2 + 112))
      && ((v5 >> 9) & 1) == (unsigned __int16)(v4 & 0x200) >> 9
      && ((v4 & 0x200) == 0 || *(double *)(a1 + 120) == *(double *)(a2 + 120)))
    {
      v7 = v4 & 0x400;
      if (((v5 >> 10) & 1) == v7 >> 10 && (!v7 || *(double *)(a1 + 128) == *(double *)(a2 + 128)))
        return 1;
    }
    return 0;
  }
  result = sub_100219654((unsigned __int8 *)(a1 + 64), (unsigned __int8 *)(a2 + 64));
  if (result)
  {
    v4 = *(_WORD *)(a1 + 136);
    v5 = *(unsigned __int16 *)(a2 + 136);
    goto LABEL_10;
  }
  return result;
}

char *sub_10021EDA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v16;
  __int128 v17;

  v3 = 0x4E25B9EFD4E25B9FLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x563B48C20563B4)
    sub_1000D02C0();
  if (0x9C4B73DFA9C4B73ELL * ((uint64_t)(a1[2] - *a1) >> 3) > v4)
    v4 = 0x9C4B73DFA9C4B73ELL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4E25B9EFD4E25B9FLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x2B1DA46102B1DALL)
    v6 = 0x563B48C20563B4;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x563B48C20563B4)
      sub_1000CDEB8();
    v7 = (char *)operator new(760 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = &v7[760 * v3];
  *((_QWORD *)&v17 + 1) = &v7[760 * v6];
  sub_1000768A0(v16, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_1000768A0(&v16[v8], v8 + i))
    v8 -= 760;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = &v16[v8];
  *(_QWORD *)&v17 = v16 + 760;
  *(_OWORD *)(a1 + 1) = v17;
  if (v11 != v12)
  {
    v13 = v11 - 760;
    do
    {
      (**(void (***)(char *))v13)(v13);
      v14 = v13 == v12;
      v13 -= 760;
    }
    while (!v14);
  }
  if (v12)
    operator delete(v12);
  return v16 + 760;
}

void sub_10021EF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10019F024((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10021EF74(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x563B48C20563B5)
      sub_1000D02C0();
    result = operator new(760 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[95 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = (_QWORD *)sub_1000768A0(&v8[v9 / 8], a2 + v9);
        v9 += 760;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_10021F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_10021DAD4(&a9);
  _Unwind_Resume(a1);
}

void sub_10021F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 760)
    (**(void (***)(uint64_t))(v10 - 760 + v11))(v10 - 760 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_10021DAD4(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10021F080(double *a1, double *a2)
{
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v17 = *(a2 - 1);
      v18 = *a1;
      if (v17 <= *a1)
        return 1;
      *a1 = v17;
      *(a2 - 1) = v18;
      return 1;
    case 3:
      v19 = a1[1];
      v20 = *(a2 - 1);
      if (v19 <= v20)
        v21 = *((_QWORD *)a2 - 1);
      else
        v21 = *((_QWORD *)a1 + 1);
      if (v19 > v20)
        v19 = *(a2 - 1);
      *(a2 - 1) = v19;
      *((_QWORD *)a1 + 1) = v21;
      v22 = *(a2 - 1);
      if (v22 <= *a1)
        v23 = *a1;
      else
        v23 = *(a2 - 1);
      if (v22 > *a1)
        v22 = *a1;
      *(a2 - 1) = v22;
      v25 = *a1;
      v24 = a1[1];
      if (v23 <= v24)
      {
        v25 = a1[1];
        v24 = v23;
      }
      *a1 = v25;
      a1[1] = v24;
      return 1;
    case 4:
      v47 = a1[1];
      v46 = a1[2];
      if (*a1 <= v46)
        v48 = a1[2];
      else
        v48 = *a1;
      if (*a1 <= v46)
        v46 = *a1;
      a1[2] = v46;
      *a1 = v48;
      v49 = *(a2 - 1);
      if (v47 <= v49)
        v50 = *(a2 - 1);
      else
        v50 = v47;
      if (v47 <= v49)
        v49 = v47;
      *(a2 - 1) = v49;
      v51 = *a1;
      if (*a1 <= v50)
        v52 = v50;
      else
        v52 = *a1;
      if (*a1 > v50)
        v51 = v50;
      *a1 = v52;
      a1[1] = v51;
      v53 = a1[2];
      v54 = *(a2 - 1);
      if (v53 <= v54)
        v55 = *(a2 - 1);
      else
        v55 = a1[2];
      if (v53 > v54)
        v53 = *(a2 - 1);
      *(a2 - 1) = v53;
      v56 = a1[1];
      if (v56 <= v55)
        v57 = v55;
      else
        v57 = a1[1];
      if (v56 > v55)
        v56 = v55;
      a1[1] = v57;
      a1[2] = v56;
      return 1;
    case 5:
      v26 = *a1;
      v27 = a1[1];
      if (*a1 <= v27)
        v28 = a1[1];
      else
        v28 = *a1;
      if (*a1 > v27)
        v26 = a1[1];
      *a1 = v28;
      a1[1] = v26;
      v29 = a1[3];
      v30 = *(a2 - 1);
      if (v29 <= v30)
        v31 = *((_QWORD *)a2 - 1);
      else
        v31 = *((_QWORD *)a1 + 3);
      if (v29 > v30)
        v29 = *(a2 - 1);
      *(a2 - 1) = v29;
      *((_QWORD *)a1 + 3) = v31;
      v32 = *(a2 - 1);
      v33 = a1[2];
      if (v32 <= v33)
        v34 = a1[2];
      else
        v34 = *(a2 - 1);
      if (v32 > v33)
        v32 = a1[2];
      *(a2 - 1) = v32;
      v36 = *((_QWORD *)a1 + 2);
      v35 = a1[3];
      v37 = a1[1];
      if (v34 <= v35)
      {
        v36 = *((_QWORD *)a1 + 3);
        v35 = v34;
      }
      *((_QWORD *)a1 + 2) = v36;
      a1[3] = v35;
      v38 = *(a2 - 1);
      if (v37 <= v38)
        v39 = *(a2 - 1);
      else
        v39 = v37;
      if (v37 <= v38)
        v38 = v37;
      *(a2 - 1) = v38;
      v40 = *a1;
      v42 = a1[2];
      v41 = a1[3];
      if (v41 <= *a1)
        v43 = *a1;
      else
        v43 = a1[3];
      if (v41 > *a1)
        v41 = *a1;
      if (v43 <= v42)
      {
        v40 = a1[2];
        v42 = v43;
      }
      if (v41 <= v39)
        v44 = v39;
      else
        v44 = v41;
      if (v41 > v39)
        v41 = v39;
      if (v44 <= v42)
        v39 = v42;
      *a1 = v40;
      a1[1] = v39;
      if (v44 <= v42)
        v45 = v44;
      else
        v45 = v42;
      a1[2] = v45;
      a1[3] = v41;
      return 1;
    default:
      v3 = a1 + 2;
      v4 = a1[2];
      v6 = *a1;
      v5 = a1[1];
      if (v5 <= v4)
        v7 = a1[2];
      else
        v7 = a1[1];
      if (v5 <= v4)
        v4 = a1[1];
      if (v4 <= v6)
        v8 = *a1;
      else
        v8 = v4;
      if (v4 > v6)
        v4 = *a1;
      *v3 = v4;
      if (v8 <= v7)
        v9 = v7;
      else
        v9 = v6;
      if (v8 > v7)
        v8 = v7;
      *a1 = v9;
      a1[1] = v8;
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 24;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v3;
    if (*v10 > *v3)
      break;
LABEL_27:
    v3 = v10;
    v12 += 8;
    if (++v10 == a2)
      return 1;
  }
  v15 = v12;
  do
  {
    *(double *)((char *)a1 + v15) = v14;
    v16 = v15 - 8;
    if (v15 == 8)
    {
      *a1 = v13;
      if (++v11 != 8)
        goto LABEL_27;
      return v10 + 1 == a2;
    }
    v14 = *(double *)((char *)a1 + v15 - 16);
    v15 -= 8;
  }
  while (v13 > v14);
  *(double *)((char *)a1 + v16) = v13;
  if (++v11 != 8)
    goto LABEL_27;
  return v10 + 1 == a2;
}

double *sub_10021F33C(double *a1, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  uint64_t v14;
  double v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  double v22;
  double *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  double v30;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 == a2)
    return a3;
  v3 = (char *)a2 - (char *)a1;
  v4 = a2 - a1;
  if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    v32 = (unint64_t)(v4 - 2) >> 1;
    v33 = v32;
    do
    {
      if (v32 >= v33)
      {
        v34 = (2 * v33) | 1;
        v35 = &a1[v34];
        if (2 * v33 + 2 < v4 && *v35 > v35[1])
        {
          ++v35;
          v34 = 2 * v33 + 2;
        }
        v36 = &a1[v33];
        v37 = *v35;
        v38 = *v36;
        if (*v35 <= *v36)
        {
          do
          {
            *v36 = v37;
            v36 = v35;
            if (v32 < v34)
              break;
            v39 = 2 * v34;
            v34 = (2 * v34) | 1;
            v35 = &a1[v34];
            v40 = v39 + 2;
            if (v40 < v4 && *v35 > v35[1])
            {
              ++v35;
              v34 = v40;
            }
            v37 = *v35;
          }
          while (*v35 <= v38);
          *v36 = v38;
        }
      }
      v20 = v33-- <= 0;
    }
    while (!v20);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      v6 = *a1;
      v7 = a2;
      do
      {
        v8 = *v7;
        if (*v7 > v6)
        {
          *v7 = v6;
          *a1 = v8;
          v6 = v8;
        }
        ++v7;
      }
      while (v7 != a3);
LABEL_25:
      v5 = a3;
      goto LABEL_26;
    }
    v9 = a1 + 1;
    v10 = a1 + 2;
    v11 = a2;
    while (1)
    {
      v12 = *v11;
      if (*v11 > *a1)
      {
        *v11 = *a1;
        *a1 = v12;
        if (v3 == 16 || *v9 <= *v10)
        {
          v13 = a1 + 1;
          v14 = 1;
          v15 = *v9;
          if (*v9 <= v12)
          {
LABEL_19:
            v16 = a1;
            do
            {
              *v16 = v15;
              v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14)
                break;
              v17 = 2 * v14;
              v14 = (2 * v14) | 1;
              v13 = &a1[v14];
              v18 = v17 + 2;
              if (v18 < v4 && *v13 > v13[1])
              {
                ++v13;
                v14 = v18;
              }
              v15 = *v13;
            }
            while (*v13 <= v12);
            *v16 = v12;
          }
        }
        else
        {
          v13 = a1 + 2;
          v14 = 2;
          v15 = *v10;
          if (*v10 <= v12)
            goto LABEL_19;
        }
      }
      if (++v11 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v3 >= 9)
  {
    v19 = (unint64_t)v3 >> 3;
    do
    {
      v21 = 0;
      v22 = *a1;
      v23 = a1;
      do
      {
        v24 = v23;
        v23 += v21 + 1;
        v25 = 2 * v21;
        v21 = (2 * v21) | 1;
        v26 = v25 + 2;
        if (v26 < v19 && *v23 > v23[1])
        {
          ++v23;
          v21 = v26;
        }
        *v24 = *v23;
      }
      while (v21 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      if (v23 != --a2)
      {
        *v23 = *a2;
        *a2 = v22;
        v27 = (char *)v23 - (char *)a1 + 8;
        if (v27 < 9)
          goto LABEL_29;
        v28 = (((unint64_t)v27 >> 3) - 2) >> 1;
        v29 = &a1[v28];
        v30 = *v29;
        v22 = *v23;
        if (*v29 <= *v23)
          goto LABEL_29;
        do
        {
          *v23 = v30;
          v23 = v29;
          if (!v28)
            break;
          v28 = (v28 - 1) >> 1;
          v29 = &a1[v28];
          v30 = *v29;
        }
        while (*v29 > v22);
      }
      *v23 = v22;
LABEL_29:
      v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

void sub_10021F678(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021F688(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10021F6B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10021F6C8(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_1000D02C0();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void sub_10021FA0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10021FA1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10021FA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  uint64_t v11;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_1000B1B04(a2, __p, a4);
  v4 = (char *)__p[0];
  if (__p[0])
  {
    v5 = (char *)__p[1];
    v6 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = __p[0];
    }
    __p[1] = v4;
    operator delete(v6);
  }
}

void sub_10021FB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000F7D3C(&a9);
  _Unwind_Resume(a1);
}

void sub_10021FB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  uint64_t v20;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v20 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v5 = (std::__shared_weak_count *)a5[1];
  v17 = *a5;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_100272D94(a2, __p, a4, &v17);
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (char *)__p[0];
  if (__p[0])
  {
    v12 = (char *)__p[1];
    v13 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = __p[0];
    }
    __p[1] = v11;
    operator delete(v13);
  }
}

void sub_10021FC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000F7D3C(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_10021FC68()
{
  return os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT);
}

uint64_t sub_10021FC7C(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_10021FC94()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3808), OS_LOG_TYPE_INFO);
}

BOOL sub_10021FCA4()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_INFO);
}

BOOL sub_10021FCB0()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_FAULT);
}

BOOL sub_10021FCBC()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3808));
}

uint64_t sub_10021FCC8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10021FD24()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10021FD80(__n128 **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  __n128 *v10;
  __n128 *v11;
  int64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  __int128 v16;
  double v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  long double *v25;
  long double v26;
  char *v27;
  char *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const void *v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const void *v43;
  int64_t v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  float64x2_t *v61;
  unint64_t v62;
  __int128 *v63;
  __int128 v64;
  float64x2_t v65;
  float64x2_t *v66;
  uint64_t *v67;
  unint64_t v68;
  long double v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73[2];
  void *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83[2];
  void *__p;
  void *v85;
  char *v86;
  __n128 *v87;
  __n128 *v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  _OWORD v92[2];
  uint64_t v93;
  float64x2_t *v94;
  float64x2_t *v95;
  float64x2_t *v96;

  v94 = 0;
  v95 = 0;
  v96 = 0;
  v11 = a1[3];
  v10 = a1[4];
  v12 = (char *)v10 - (char *)v11;
  if (v10 == v11)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    if (v12 < 0)
      sub_1000D02C0();
    v13 = (float64x2_t *)operator new((char *)v10 - (char *)v11);
    v14 = (float64x2_t *)((char *)v13 + 8 * (v12 >> 3));
    v94 = v13;
    v96 = v14;
    memcpy(v13, v11, v12);
    v95 = v14;
  }
  v15 = (*a1)[3].n128_i64[1];
  v16 = *(_OWORD *)(a3 + 16);
  v92[0] = *(_OWORD *)a3;
  v92[1] = v16;
  v93 = *(_QWORD *)(a3 + 32);
  v17 = sub_100224080(v15, (uint64_t)v92);
  sub_10026DE1C(&v90, a2, a1, a1[8]);
  if (*(_BYTE *)a4)
  {
    v18 = (char *)v14 - (char *)v13;
    v67 = a5;
    v68 = ((char *)v14 - (char *)v13) >> 3;
    if (v14 == v13)
      goto LABEL_16;
    v19 = *(_QWORD *)(a4 + 8);
    if (v68 <= 1)
      v20 = 1;
    else
      v20 = ((char *)v14 - (char *)v13) >> 3;
    if (v20 >= 2 && ((unint64_t)v13 >= v19 + 8 * v20 || v19 >= (unint64_t)&v13->f64[v20]))
    {
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v61 = v13;
      v62 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v66 = v61;
      v63 = *(__int128 **)(a4 + 8);
      do
      {
        v64 = *v63++;
        v69 = exp(*((long double *)&v64 + 1));
        v65.f64[0] = exp(*(long double *)&v64);
        v65.f64[1] = v69;
        *v61 = vmulq_f64(*v61, v65);
        ++v61;
        v62 -= 2;
      }
      while (v62);
      v13 = v66;
      if (v20 == v21)
      {
LABEL_16:
        v87 = 0;
        v88 = 0;
        v89 = 0;
        sub_1001E3558(&v87, *a1, a1[1], 0xCCCCCCCCCCCCCCCDLL * (a1[1] - *a1));
        __p = 0;
        v85 = 0;
        v86 = 0;
        if (v14 != v13)
        {
          if ((v18 & 0x8000000000000000) != 0)
            sub_1000D02C0();
          v27 = (char *)operator new(v18);
          v28 = &v27[8 * v68];
          __p = v27;
          v86 = v28;
          memcpy(v27, v13, v18);
          v85 = v28;
        }
        v29 = *a2;
        v30 = (std::__shared_weak_count *)a2[1];
        v83[0] = v29;
        v83[1] = (uint64_t)v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(p_shared_owners);
          while (__stxr(v32 + 1, p_shared_owners));
        }
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v33 = v90;
        v34 = v91 - v90;
        if (v91 == v90)
        {
          v35 = 0;
        }
        else
        {
          if (v34 < 0)
            sub_1000D02C0();
          v35 = (char *)operator new(v91 - v90);
          v80 = v35;
          v82 = &v35[8 * (v34 >> 3)];
          memcpy(v35, v33, v34);
          v81 = v82;
        }
        sub_100220AA8(v67, (uint64_t)&v87, (uint64_t)&__p, v83, (uint64_t)&v80, v17);
        if (v35)
        {
          v81 = v35;
          operator delete(v35);
        }
        if (v30)
        {
          v46 = (unint64_t *)&v30->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        if (__p)
        {
          v85 = __p;
          operator delete(__p);
        }
        v48 = v87;
        if (v87)
        {
          v49 = v88;
          v50 = v87;
          if (v88 != v87)
          {
            do
            {
              v51 = (std::__shared_weak_count *)v49[-1].n128_u64[0];
              if (v51)
              {
                v52 = (unint64_t *)&v51->__shared_owners_;
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              v49 -= 5;
            }
            while (v49 != v48);
            v50 = v87;
          }
          v88 = v48;
LABEL_76:
          operator delete(v50);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
    }
    else
    {
      v21 = 0;
    }
    v22 = v20 - v21;
    v23 = v21;
    v24 = (double *)(v19 + 8 * v21);
    v25 = (long double *)&v13->f64[v23];
    do
    {
      v26 = *v24++;
      *v25 = *v25 * exp(v26);
      ++v25;
      --v22;
    }
    while (v22);
    goto LABEL_16;
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  sub_1001E3558((__n128 **)&v77, *a1, a1[1], 0xCCCCCCCCCCCCCCCDLL * (a1[1] - *a1));
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v36 = (char *)v14 - (char *)v13;
  if (v14 != v13)
  {
    if (v36 < 0)
      sub_1000D02C0();
    v37 = (char *)operator new((char *)v14 - (char *)v13);
    v38 = &v37[8 * (v36 >> 3)];
    v74 = v37;
    v76 = v38;
    memcpy(v37, v13, (char *)v14 - (char *)v13);
    v75 = v38;
  }
  v39 = *a2;
  v40 = (std::__shared_weak_count *)a2[1];
  v73[0] = v39;
  v73[1] = (uint64_t)v40;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v43 = v90;
  v44 = v91 - v90;
  if (v91 == v90)
  {
    v45 = 0;
  }
  else
  {
    if (v44 < 0)
      sub_1000D02C0();
    v45 = (char *)operator new(v91 - v90);
    v70 = v45;
    v72 = &v45[8 * (v44 >> 3)];
    memcpy(v45, v43, v44);
    v71 = v72;
  }
  sub_100220AA8(a5, (uint64_t)&v77, (uint64_t)&v74, v73, (uint64_t)&v70, v17);
  if (v45)
  {
    v71 = v45;
    operator delete(v45);
  }
  if (v40)
  {
    v54 = (unint64_t *)&v40->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  v56 = (char *)v77;
  if (v77)
  {
    v57 = v78;
    v50 = (__n128 *)v77;
    if (v78 != v77)
    {
      do
      {
        v58 = (std::__shared_weak_count *)*((_QWORD *)v57 - 2);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v57 -= 80;
      }
      while (v57 != v56);
      v50 = (__n128 *)v77;
    }
    v78 = v56;
    goto LABEL_76;
  }
LABEL_77:
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v94)
    operator delete(v94);
}

void sub_1002202FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  if (v37)
    operator delete(v37);
  sub_1002203E4((uint64_t)&a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10022044C(&a26);
  v41 = *(void **)(v39 - 200);
  if (v41)
  {
    *(_QWORD *)(v39 - 192) = v41;
    operator delete(v41);
  }
  if (v38)
    operator delete(v38);
  _Unwind_Resume(a1);
}

void sub_1002203D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 136);
  if (v1)
  {
    *(_QWORD *)(v0 - 128) = v1;
    JUMPOUT(0x1002203C4);
  }
  JUMPOUT(0x1002203C8);
}

uint64_t sub_1002203E4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_10022044C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002204E4(uint64_t a1)
{
  return a1 + 72;
}

float64_t sub_1002204EC(uint64_t a1, double a2)
{
  float64x2_t v3;
  _OWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  float64x2_t *v18;
  __int128 *v19;
  __int128 v20;
  float64x2_t v21;
  float64x2_t v22;
  unint64_t v23;
  double *v24;
  _QWORD *v25;
  long double v26;
  long double v27;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v32;
  float64x2_t __x;
  long double v34;
  long double v35;
  double v36;

  v36 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
  v32 = (1.0 - a2) * *(double *)(a1 + 64);
  v3.f64[0] = log(v32);
  v4 = *(_OWORD **)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 >> 3;
    v31 = v3.f64[0];
    if (v36 != INFINITY)
    {
      v9 = *(__int128 **)(a1 + 120);
      if (v6 <= 1)
        v6 = 1;
      if (v6 >= 2 && (unint64_t)((char *)v4 - (char *)v9) >= 0x10)
      {
        v11 = v6 & 0xFFFFFFFFFFFFFFFELL;
        v29 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0);
        v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
        v17 = v6 & 0xFFFFFFFFFFFFFFFELL;
        v18 = (float64x2_t *)v4;
        v19 = v9;
        do
        {
          v20 = *v19++;
          v34 = exp(*((long double *)&v20 + 1));
          v21.f64[0] = exp(*(long double *)&v20);
          v21.f64[1] = v34;
          __x = vaddq_f64(v30, vmulq_n_f64(vmulq_n_f64(v21, v36), a2));
          v35 = log(__x.f64[1]);
          v22.f64[0] = log(__x.f64[0]);
          v22.f64[1] = v35;
          v3 = vsubq_f64(v29, v22);
          *v18++ = v3;
          v17 -= 2;
        }
        while (v17);
        if (v6 == v11)
          return v3.f64[0];
      }
      else
      {
        v11 = 0;
      }
      v23 = v6 - v11;
      v24 = (double *)v9 + v11;
      v25 = (_QWORD *)v4 + v11;
      do
      {
        v26 = *v24++;
        v27 = exp(v26);
        v3.f64[0] = v31 - log(v32 + v36 * v27 * a2);
        *v25++ = *(_QWORD *)&v3.f64[0];
        --v23;
      }
      while (v23);
      return v3.f64[0];
    }
    v3.f64[0] = v3.f64[0] - log(v32 + a2 * 0.0);
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    if (v7 < 4)
    {
      v8 = 0;
LABEL_18:
      v15 = v7 - v8;
      v16 = (_QWORD *)v4 + v8;
      do
      {
        *v16++ = *(_QWORD *)&v3.f64[0];
        --v15;
      }
      while (v15);
      return v3.f64[0];
    }
    v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0);
    v13 = (int64x2_t *)(v4 + 1);
    v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v7 != v8)
      goto LABEL_18;
  }
  return v3.f64[0];
}

uint64_t sub_100220704(uint64_t a1)
{
  return a1 + 96;
}

BOOL sub_10022070C(uint64_t a1)
{
  double *v1;
  double *v2;
  double *v3;
  double v5;
  double *v6;
  double v7;
  double v8;

  v1 = *(double **)(a1 + 24);
  v2 = *(double **)(a1 + 32);
  v3 = v1 + 1;
  if (v1 != v2 && v3 != v2)
  {
    v5 = *v1;
    v6 = v1 + 1;
    do
    {
      v7 = *v6++;
      v8 = v7;
      if (v5 < v7)
      {
        v5 = v8;
        v1 = v3;
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return *v1 <= 0.0;
}

double sub_100220754(_QWORD *a1, double a2)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  _BYTE *v16;
  uint64_t v17;
  double *v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;

  sub_100220984((uint64_t)a1, a2);
  v4 = (_BYTE *)a1[9];
  v3 = (_BYTE *)a1[10];
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0;
    v9 = (_BYTE *)a1[3];
    v16 = (_BYTE *)a1[4];
    v10 = v16 - v9;
    if (v16 != v9)
      goto LABEL_4;
  }
  else
  {
    if (v5 < 0)
      sub_1000D02C0();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[8 * (v5 >> 3)];
    memcpy(v6, v4, v5);
    v9 = (_BYTE *)a1[3];
    v8 = (_BYTE *)a1[4];
    v10 = v8 - v9;
    if (v8 != v9)
    {
LABEL_4:
      if ((v10 & 0x8000000000000000) != 0)
        sub_1000D02C0();
      v11 = (char *)operator new(v10);
      memcpy(v11, v9, v10);
      if (v7 == v6)
      {
        v14 = 0.0;
        v15 = 0.0;
        goto LABEL_21;
      }
      v12 = (v7 - v6) >> 3;
      if (v12 <= 1)
        v12 = 1;
      if (v12 < 2)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  if (v7 == v6)
  {
    v14 = 0.0;
    v15 = 0.0;
    if (!v6)
      return v14 / (v15 + v14);
    goto LABEL_22;
  }
  v11 = 0;
  v12 = (v7 - v6) >> 3;
  if (v12 <= 1)
    v12 = 1;
  if (v12 < 2)
  {
LABEL_9:
    v13 = 0;
    v14 = 0.0;
    v15 = 0.0;
    do
    {
LABEL_18:
      v22 = *(double *)&v6[8 * v13];
      v23 = *(double *)&v11[8 * v13];
      v14 = v14 + (1.0 - v22) * v23;
      v15 = v15 + v22 * v23;
      ++v13;
    }
    while (v12 != v13);
    goto LABEL_21;
  }
LABEL_15:
  v17 = 0;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v14 = 0.0;
  v15 = 0.0;
  do
  {
    v18 = (double *)&v6[8 * v17];
    v19 = v18[1];
    v20 = (double *)&v11[8 * v17];
    v21 = v20[1];
    v14 = v14 + (1.0 - *v18) * *v20 + (1.0 - v19) * v21;
    v15 = v15 + *v18 * *v20 + v19 * v21;
    v17 += 2;
  }
  while (v13 != v17);
  if (v12 != v13)
    goto LABEL_18;
LABEL_21:
  operator delete(v11);
  if (v6)
LABEL_22:
    operator delete(v6);
  return v14 / (v15 + v14);
}

void sub_100220948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100220984(uint64_t a1, double a2)
{
  uint64_t result;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long double v13;
  double v14;
  double v15;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if (v6)
  {
    v7 = v5;
    v8 = (1.0 - a2) * *(double *)(a1 + 64);
    v9 = v6 >> 3;
    v10 = 0;
    if (v5 == INFINITY)
    {
      if (v9 <= 1)
        v11 = 1;
      else
        v11 = v9;
      do
      {
        result = sub_100220D24(a1, v10, v8 / (v8 + a2 * 0.0), a2, 0.0, a2 * 0.0, v8);
        *(double *)(*(_QWORD *)(a1 + 72) + 8 * v10++) = v8 / (v8 + a2 * 0.0);
      }
      while (v11 != v10);
    }
    else
    {
      if (v9 <= 1)
        v12 = 1;
      else
        v12 = v9;
      do
      {
        v13 = exp(*(long double *)(*(_QWORD *)(a1 + 120) + 8 * v10));
        v14 = v7 * v13 * a2;
        v15 = v8 / (v8 + v14);
        result = sub_100220D24(a1, v10, v15, a2, v7 * v13, v14, v8);
        *(double *)(*(_QWORD *)(a1 + 72) + 8 * v10++) = v15;
      }
      while (v12 != v10);
    }
  }
  return result;
}

uint64_t *sub_100220AA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, double a6)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a3;
  a1[5] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = a4[1];
  a1[6] = *a4;
  a1[7] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[9] = 0;
  *((double *)a1 + 8) = a6;
  v12 = *(double *)a1;
  v11 = a1[1];
  a1[10] = 0;
  a1[11] = 0;
  v13 = v11 - *(_QWORD *)&v12;
  if (!v13)
  {
    a1[12] = 0;
    a1[13] = 0;
    a1[14] = 0;
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
    v17 = *(const void **)a5;
    v18 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
    if (!v18)
      return a1;
    goto LABEL_9;
  }
  v14 = 0xCCCCCCCCCCCCCCCDLL * (v13 >> 4);
  if (v14 >> 61)
    sub_1000D02C0();
  v15 = (char *)operator new(0x6666666666666668 * (v13 >> 4));
  a1[9] = (uint64_t)v15;
  a1[11] = (uint64_t)&v15[8 * v14];
  bzero(v15, 8 * v14);
  a1[12] = 0;
  a1[10] = (uint64_t)&v15[8 * v14];
  a1[13] = 0;
  a1[14] = 0;
  v16 = (char *)operator new(8 * v14);
  a1[12] = (uint64_t)v16;
  a1[14] = (uint64_t)&v16[8 * v14];
  bzero(v16, 8 * v14);
  a1[13] = (uint64_t)&v16[8 * v14];
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  v17 = *(const void **)a5;
  v18 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v18)
  {
LABEL_9:
    if (v18 < 0)
      sub_1000D02C0();
    v19 = (char *)operator new(v18);
    a1[15] = (uint64_t)v19;
    a1[16] = (uint64_t)v19;
    v20 = &v19[8 * (v18 >> 3)];
    a1[17] = (uint64_t)v20;
    memcpy(v19, v17, v18);
    a1[16] = (uint64_t)v20;
  }
  return a1;
}

void sub_100220C78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v6);
    sub_1002203E4(v2);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_10022044C((void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1002203E4(v2);
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v7;
  operator delete(v7);
  sub_10022044C((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100220D24(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *__p;
  void *v18;
  char v19;
  std::bad_cast v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  std::string v23;
  std::string v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;

  v15 = a4;
  v16 = a3;
  v13 = a6;
  v14 = a5;
  v12 = a7;
  if (a3 < 0.0)
  {
    v8 = result;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 4) <= a2)
      sub_1001E2FA0();
    v11 = *(_QWORD *)result + 80 * a2;
    v10 = (*(double (**)(_QWORD))(**(_QWORD **)(result + 48) + 32))(*(_QWORD *)(result + 48));
    v9 = *(_QWORD *)(v8 + 120);
    v19 = 0;
    LOBYTE(v18) = 0;
    memset(&v23, 0, sizeof(v23));
    std::string::assign(&v23, "Invalid outlierprobability (NaN?). Why?");
    memset(&v24, 0, sizeof(v24));
    std::string::assign(&v24, "\nisNaN = ");
    v27 = 0x100000000000000;
    memset(&v28, 0, sizeof(v28));
    v26 = 0;
    v25 = (void *)48;
    std::string::assign(&v28, "\nParticle = ");
    memset(&v29, 0, sizeof(v29));
    if ((sub_1002216C8(&v11, &v29) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      v21 = &off_1003FE690;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v30, 0, sizeof(v30));
    std::string::assign(&v30, "\nGaussian partition = ");
    memset(&v31, 0, sizeof(v31));
    if ((sub_10016EED0(&v10, &v31) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v32, 0, sizeof(v32));
    std::string::assign(&v32, "\nGaussian lognormpdfrelative = ");
    memset(&v33, 0, sizeof(v33));
    if ((sub_10016EED0((double *)(v9 + 8 * a2), &v33) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v34, 0, sizeof(v34));
    std::string::assign(&v34, "\nGaussian likelihood = ");
    memset(&v35, 0, sizeof(v35));
    if ((sub_10016EED0(&v14, &v35) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v36, 0, sizeof(v36));
    std::string::assign(&v36, "\npriorUniform = ");
    memset(&v37, 0, sizeof(v37));
    if ((sub_10016EED0((double *)(v8 + 64), &v37) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v38, 0, sizeof(v38));
    std::string::assign(&v38, "\nobservationProbabilityFromGaussian = ");
    memset(&v39, 0, sizeof(v39));
    if ((sub_10016EED0(&v13, &v39) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v40, 0, sizeof(v40));
    std::string::assign(&v40, "\nobservationProbabilityFromUniform = ");
    memset(&v41, 0, sizeof(v41));
    if ((sub_10016EED0(&v12, &v41) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v42, 0, sizeof(v42));
    std::string::assign(&v42, "\nInlier Confidence (init) = ");
    memset(&v43, 0, sizeof(v43));
    if ((sub_10016EED0(&v15, &v43) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    memset(&v44, 0, sizeof(v44));
    std::string::assign(&v44, "\nresult = ");
    memset(&v45, 0, sizeof(v45));
    if ((sub_10016EED0(&v16, &v45) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
      sub_1000F9804((uint64_t)&v20);
    }
    sub_100174738((uint64_t)&v18, (uint64_t)&v23, 21);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_39;
    }
LABEL_38:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_40;
    }
LABEL_39:
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_44;
    }
LABEL_43:
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_53;
    }
LABEL_52:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_54;
    }
LABEL_53:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_55;
    }
LABEL_54:
    operator delete(v25);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_56;
    }
LABEL_55:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_34;
LABEL_57:
      operator delete(v18);
LABEL_34:
      sub_1000F2AE4((uint64_t)&__p);
    }
LABEL_56:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_57;
  }
  return result;
}

void sub_10022149C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002216C8(_QWORD *a1, std::string *a2)
{
  std::ios_base *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  char *v18;
  __int128 *v19;
  std::string::size_type *v20;
  unint64_t v21;
  __int128 v22;
  std::string::value_type v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  __int128 v30;
  uint64_t v31;
  void (__cdecl **v32)(std::ostream *__hidden);
  std::ios_base v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;

  v31 = 0;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  std::streambuf::basic_streambuf(&v25);
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  LODWORD(v31) = 24;
  *(_QWORD *)&v27 = 0;
  v26 = 0uLL;
  *(_QWORD *)&v25 = off_1003EFE30;
  std::ios_base::init(&v33, &v25);
  v34 = 0;
  v35 = -1;
  v37 = &v36;
  v38 = (char *)&v36 + 2;
  v4 = (std::ios_base *)((char *)&v32 + (_QWORD)*(v32 - 3));
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  v5 = (_QWORD *)std::ostream::operator<<(&v32, *a1);
  v6 = *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32);
  v7 = *(_QWORD *)((char *)&v33.__rdstate_ + (_QWORD)*(v32 - 3));
  v8 = *(_QWORD *)(v7 + 40);
  v37 = (uint64_t *)v8;
  v9 = *(char **)(v7 + 48);
  v38 = v9;
  if ((v6 & 5) == 0)
  {
    v11 = (unint64_t)&v9[-v8];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = a2->__r_.__value_.__r.__words[2];
      v14 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v14 >= v11)
      {
        v16 = HIBYTE(v15);
LABEL_10:
        if ((v16 & 0x80u) == 0)
          v12 = a2;
        else
          v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_13:
        if ((char *)v8 == v9)
        {
          v17 = v12;
          goto LABEL_23;
        }
        if (v11 < 0x20 || (unint64_t)v12 - v8 < 0x20)
        {
          v17 = v12;
          v18 = (char *)v8;
        }
        else
        {
          v17 = (std::string *)((char *)v12 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v18 = (char *)(v8 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v19 = (__int128 *)(v8 + 16);
          v20 = &v12->__r_.__value_.__r.__words[2];
          v21 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v22 = *v19;
            *((_OWORD *)v20 - 1) = *(v19 - 1);
            *(_OWORD *)v20 = v22;
            v19 += 2;
            v20 += 4;
            v21 -= 32;
          }
          while (v21);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v17->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
              a2->__r_.__value_.__l.__size_ = v11;
            else
              *((_BYTE *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
            v10 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          v23 = *v18++;
          v17->__r_.__value_.__s.__data_[0] = v23;
          v17 = (std::string *)((char *)v17 + 1);
        }
        while (v18 != v9);
        goto LABEL_23;
      }
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v12 = a2;
      if (v11 <= 0x16)
        goto LABEL_13;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = 22;
    }
    std::string::__grow_by(a2, v14, v11 - v14, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v16) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  v10 = 0;
LABEL_27:
  std::ostream::~ostream(&v32);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(&v25);
  return v10;
}

void sub_100221934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100221968(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

uint64_t sub_100221980()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002219DC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_100221A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;

  v6 = (int **)sub_1002C6184(a2);
  v7 = sub_10005D4C0(*v6);
  v11 = sub_10005F0F0() - v7;
  v8 = operator new(0x28uLL);
  *v8 = off_1003FE700;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = &v11;
  v8[4] = a1;
  v13 = v8;
  sub_10003B90C(a1, (uint64_t)v12);
  result = v13;
  if (v13 == v12)
  {
    v10 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v10))(result);
}

void sub_100221B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100221B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint8_t *v30;
  uint8_t buf[8];
  uint8_t *v32;
  uint64_t v33;
  __n128 (*v34)(uint64_t, uint64_t);
  uint64_t (*v35)();
  uint64_t v36;
  int ***v37;
  int **v38;
  __int128 v39;
  _BYTE v40[16];
  _BYTE v41[16];

  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_BYTE *)(a1 + 17) = 1;
  std::mutex::unlock(v6);
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE6D0);
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Apply event queue in batch", buf, 2u);
  }
LABEL_4:
  v41[0] = 0;
  v40[0] = 0;
  while (*(_QWORD *)(a2 + 464) != *(_QWORD *)(a3 + 464) || sub_10003B4F4(a2 + 440, a3 + 440))
  {
    v8 = (_QWORD *)sub_1002C6184(a2);
    v9 = v8[1];
    *(_QWORD *)&v25 = *v8;
    *((_QWORD *)&v25 + 1) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = *(_QWORD *)a1;
    v37 = &v38;
    v38 = 0;
    *(_QWORD *)buf = 0;
    v32 = buf;
    v33 = 0x3802000000;
    v34 = sub_100222868;
    v35 = nullsub_159;
    v36 = v12;
    v26 = _NSConcreteStackBlock;
    v27 = 0x40000000;
    v28 = sub_100222878;
    v29 = &unk_1003FE7A0;
    v30 = buf;
    sub_10005C5D4((dispatch_queue_t *)(v12 + 32), &v26);
    _Block_object_dispose(buf, 8);
    if (v38 && (v13 = sub_10005D4C0(*v38), sub_10005D4C0((int *)v25) >= v13))
    {
      v17 = *(_QWORD *)a1;
      LOBYTE(v38) = 0;
      *(_QWORD *)buf = 0;
      v32 = buf;
      v33 = 0x3802000000;
      v34 = sub_100222898;
      v35 = nullsub_160;
      v36 = v17;
      v37 = &v38;
      v26 = _NSConcreteStackBlock;
      v27 = 0x40000000;
      v28 = sub_1002228A8;
      v29 = &unk_1003FE7C8;
      v30 = buf;
      sub_10005C5D4((dispatch_queue_t *)(v17 + 32), &v26);
      _Block_object_dispose(buf, 8);
      v18 = v39;
      v39 = 0uLL;
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      v25 = v18;
      if (!v19)
        goto LABEL_22;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (!(_BYTE)v38)
          goto LABEL_13;
      }
      else
      {
LABEL_22:
        if (!(_BYTE)v38)
          goto LABEL_13;
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    else
    {
      sub_1002C5D5C(a2);
    }
LABEL_13:
    sub_1002178AC(*(_QWORD *)(a1 + 8), (uint64_t)v41, (uint64_t)v40, (int **)&v25);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  sub_100016DF8(a1);
}

void sub_100221EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1000CDD68(exception_object);
}

void sub_100221F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000FEAD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100221F48(uint64_t a1, int a2, uint64_t *a3)
{
  NSObject *v4;
  _QWORD *v5;
  uint8_t buf[8];
  uint64_t v7;

  *(_DWORD *)(a1 + 8) = a2;
  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE6D0);
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(_QWORD *)buf = sub_1000CA158;
      v7 = 0;
      v5 = operator new(0x3C8uLL);
      v5[1] = 0;
      v5[2] = 0;
      *v5 = off_1003FE7F8;
      sub_100222150((uint64_t)(v5 + 3), a3);
      sub_100222150((uint64_t)(v5 + 62), a3 + 59);
      sub_100222C88();
    }
  }
  *(_WORD *)buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting localizer thread", buf, 2u);
  goto LABEL_4;
}

void sub_10022213C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100222150(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __n128 result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 72) = v11;
  v12 = a2[10];
  a2[10] = 0;
  *(_QWORD *)(a1 + 80) = v12;
  v13 = a2[11];
  a2[11] = 0;
  *(_QWORD *)(a1 + 88) = v13;
  v14 = a2[12];
  a2[12] = 0;
  *(_QWORD *)(a1 + 96) = v14;
  v15 = a2[13];
  a2[13] = 0;
  *(_QWORD *)(a1 + 104) = v15;
  v16 = a2[14];
  a2[14] = 0;
  *(_QWORD *)(a1 + 112) = v16;
  v17 = a2[15];
  a2[15] = 0;
  *(_QWORD *)(a1 + 120) = v17;
  v18 = a2[16];
  a2[16] = 0;
  *(_QWORD *)(a1 + 128) = v18;
  v19 = *(_OWORD *)(a2 + 17);
  a2[17] = 0;
  *(_OWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[18] = 0;
  a2[19] = 0;
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  a2[20] = 0;
  a2[21] = 0;
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  a2[22] = 0;
  a2[23] = 0;
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
  a2[24] = 0;
  a2[25] = 0;
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  a2[26] = 0;
  a2[27] = 0;
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  a2[28] = 0;
  a2[29] = 0;
  *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
  a2[30] = 0;
  a2[31] = 0;
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  a2[32] = 0;
  a2[33] = 0;
  *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
  a2[34] = 0;
  a2[35] = 0;
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  a2[36] = 0;
  a2[37] = 0;
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
  a2[38] = 0;
  a2[39] = 0;
  *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
  a2[40] = 0;
  a2[41] = 0;
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  a2[42] = 0;
  a2[43] = 0;
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  a2[44] = 0;
  a2[45] = 0;
  *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
  a2[46] = 0;
  a2[47] = 0;
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  a2[48] = 0;
  a2[49] = 0;
  *(_OWORD *)(a1 + 400) = *((_OWORD *)a2 + 25);
  a2[50] = 0;
  a2[51] = 0;
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  a2[52] = 0;
  a2[53] = 0;
  *(_QWORD *)(a1 + 432) = a2[54];
  result = *(__n128 *)(a2 + 55);
  *(_QWORD *)(a1 + 456) = a2[57];
  *(__n128 *)(a1 + 440) = result;
  a2[56] = 0;
  a2[57] = 0;
  a2[55] = 0;
  *(_QWORD *)(a1 + 464) = a2[58];
  return result;
}

void sub_100222334(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100222364()
{
  operator delete();
}

__n128 sub_100222378(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1003FE700;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1002223B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FE700;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002223E0(uint64_t a1, uint64_t *a2)
{
  return sub_100222464((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_1002223EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8duration"
                     "IxNS3_5ratioILl1ELl1000000000EEEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chro"
                                "no8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100222458()
{
}

uint64_t sub_100222464(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int **v10;
  int **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *__p;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD v30[5];
  _QWORD v31[8];

  v4 = (uint64_t *)a1[3];
  v5 = a1[1];
  if (*(_QWORD *)(*a1 + 464) == *(_QWORD *)(v5 + 464) && !sub_10003B4F4(*a1 + 440, v5 + 440))
    return 1;
  __p = 0;
  v26 = 0;
  v27 = 0;
  while (1)
  {
    v7 = *a1;
    v8 = a1[1];
    if (*(_QWORD *)(*a1 + 464) == *(_QWORD *)(v8 + 464))
    {
      if (!sub_10003B4F4(v7 + 440, v8 + 440))
        break;
      v7 = *a1;
    }
    v9 = (_QWORD *)a1[2];
    v10 = (int **)sub_1002C6184(v7);
    if (*v9 + sub_10005D4C0(*v10) > a2)
      break;
    v11 = (int **)sub_1002C6184(*a1);
    v31[0] = *(_QWORD *)a1[2];
    sub_1002226D4(*v11);
    v12 = (_QWORD *)sub_1002C6184(*a1);
    v13 = v26;
    if ((unint64_t)v26 >= v27)
    {
      v6 = sub_1001E3C34((uint64_t)&__p, v12);
    }
    else
    {
      *v26 = *v12;
      v14 = v12[1];
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 = v13 + 2;
    }
    v26 = v6;
    sub_1002C5D5C(*a1);
  }
  v17 = *v4;
  v28 = v26;
  v29 = __p;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x4002000000;
  v31[3] = sub_1000BCCE0;
  v31[4] = nullsub_38;
  v31[5] = &v29;
  v31[6] = &v28;
  v31[7] = v17;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 0x40000000;
  v30[2] = sub_1002227AC;
  v30[3] = &unk_1003FE768;
  v30[4] = v31;
  sub_10005C5D4((dispatch_queue_t *)(v17 + 32), v30);
  _Block_object_dispose(v31, 8);
  v18 = __p;
  if (__p)
  {
    v19 = v26;
    v20 = __p;
    if (v26 != __p)
    {
      do
      {
        v21 = (std::__shared_weak_count *)*(v19 - 1);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v19 -= 2;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v26 = v18;
    operator delete(v20);
  }
  return 0;
}

void sub_1002226AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000F7D3C(&a9);
  _Unwind_Resume(a1);
}

void sub_1002226C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1000F7D3C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002226D4(int *a1)
{
  return ((uint64_t (*)(int *))((char *)sub_1002226F4 + 4 * byte_1003946CF[*a1 ^ (*a1 >> 31)]))(a1 + 2);
}

_QWORD *sub_1002226F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, int a3@<W8>)
{
  if (a3 < 0)
    result = (_QWORD *)*result;
  result[1] += *a2;
  return result;
}

double sub_100222754@<D0>(double *a1@<X0>, uint64_t *a2@<X1>, int a3@<W8>)
{
  uint64_t v3;
  double result;

  if (a3 < 0)
    a1 = *(double **)a1;
  v3 = *a2;
  *((_QWORD *)a1 + 4) += *a2;
  result = (double)v3 / 1000000000.0 + a1[10];
  a1[10] = result;
  return result;
}

_QWORD *sub_100222790@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, int a3@<W8>)
{
  if (a3 < 0)
    result = (_QWORD *)*result;
  result[2] += *a2;
  return result;
}

void sub_1002227AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = **(_QWORD ***)(v1 + 40);
  if (**(_QWORD ***)(v1 + 48) != v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    do
    {
      v5 = (_QWORD *)v3[1];
      if ((unint64_t)v5 >= v3[2])
      {
        v4 = sub_1001E3C34((uint64_t)v3, v2);
      }
      else
      {
        v6 = v2[1];
        *v5 = *v2;
        v5[1] = v6;
        if (v6)
        {
          v7 = (unint64_t *)(v6 + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        v4 = v5 + 2;
      }
      v3[1] = (uint64_t)v4;
      sub_1000FF340(*v3, (uint64_t)v4, (uint64_t)&v9, ((uint64_t)v4 - *v3) >> 4);
      v2 += 2;
    }
    while (v2 != **(_QWORD ***)(v1 + 48));
  }
}

__n128 sub_100222868(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100222878(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *(uint64_t **)(v1 + 40);
  v2 = *(_QWORD **)(v1 + 48);
  if (*v3 == v3[1])
    v4 = 0;
  else
    v4 = *v3;
  *v2 = v4;
  return result;
}

__n128 sub_100222898(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void sub_1002228A8(uint64_t a1)
{
  sub_1002228B8((uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void sub_1002228B8(uint64_t **a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;

  v1 = *a1;
  v2 = (_QWORD *)**a1;
  if (v2 != (_QWORD *)(*a1)[1])
  {
    v3 = a1[1];
    v4 = (_QWORD *)*v2;
    if (*(_BYTE *)v3)
    {
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        v6 = v5 + 1;
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = (std::__shared_weak_count *)v3[2];
      v3[1] = (uint64_t)v4;
      v3[2] = (uint64_t)v5;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      v11 = (_QWORD *)v2[1];
      v3[1] = (uint64_t)v4;
      v3[2] = (uint64_t)v11;
      if (v11)
      {
        v12 = v11 + 1;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      *(_BYTE *)v3 = 1;
    }
    sub_1002186B0(*v1, v1[1], (uint64_t)&v18, (v1[1] - *v1) >> 4);
    v14 = v1[1];
    v15 = *(std::__shared_weak_count **)(v14 - 8);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v1[1] = v14 - 16;
  }
}

uint64_t sub_1002229DC(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  std::__thread_struct *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__thread_struct *v10;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = std::__thread_local_data();
  v3 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(void (**)(_QWORD *, uint64_t *))(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v6 + v5);
  v13 = 0;
  v14 = 0;
  v5(v6, &v13);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (a1)
  {
    v10 = *(std::__thread_struct **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
    {
      std::__thread_struct::~__thread_struct(v10);
      operator delete();
    }
    operator delete();
  }
  return 0;
}

void sub_100222ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__thread_struct **a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      sub_100222B1C(&a10);
      _Unwind_Resume(a1);
    }
  }
  sub_100222B1C(&a10);
  _Unwind_Resume(a1);
}

std::__thread_struct ***sub_100222B1C(std::__thread_struct ***result)
{
  std::__thread_struct **v1;
  std::__thread_struct *v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      std::__thread_struct::~__thread_struct(v2);
      operator delete();
    }
    operator delete();
  }
  return result;
}

std::__thread_struct **sub_100222B84(std::__thread_struct **a1)
{
  std::__thread_struct *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__thread_struct::~__thread_struct(v2);
    operator delete();
  }
  return a1;
}

void sub_100222BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100222BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FE7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t *sub_100222C08(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 496);
  if (*(char *)(a1 + 959) < 0)
  {
    operator delete(*(void **)(a1 + 936));
    sub_1000FE64C((_QWORD *)(a1 + 640));
    sub_1000FEB40(v2);
    if ((*(char *)(a1 + 487) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    operator delete(*(void **)(a1 + 464));
    goto LABEL_3;
  }
  sub_1000FE64C((_QWORD *)(a1 + 640));
  sub_1000FEB40(v2);
  if (*(char *)(a1 + 487) < 0)
    goto LABEL_5;
LABEL_3:
  sub_1000FE64C((_QWORD *)(a1 + 168));
  return sub_1000FEB40((uint64_t *)(a1 + 24));
}

void sub_100222C88()
{
  operator new();
}

void sub_100222D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100222B84((std::__thread_struct **)va);
  _Unwind_Resume(a1);
}

void sub_100222D6C()
{
  operator delete();
}

void sub_100222D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__thread_struct *a10)
{
  sub_100222F34(&a9);
  sub_100222B84(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100222DAC(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  std::__thread_struct *v3;
  __int128 *v4;
  uint64_t v5;
  void (*v6)(_QWORD *, __int128 *);
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__thread_struct *v14;
  __int128 v17;

  v2 = std::__thread_local_data();
  v3 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = (__int128 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(void (**)(_QWORD *, __int128 *))(a1 + 8);
  v7 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v5 >> 1));
  if ((v5 & 1) != 0)
    v6 = *(void (**)(_QWORD *, __int128 *))(*v7 + v6);
  v17 = *v4;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v6(v7, &v17);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (a1)
  {
    v11 = *(std::__shared_weak_count **)(a1 + 40);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(std::__thread_struct **)a1;
    *(_QWORD *)a1 = 0;
    if (v14)
    {
      std::__thread_struct::~__thread_struct(v14);
      operator delete();
    }
    operator delete();
  }
  return 0;
}

void sub_100222ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      sub_100222F34(&a10);
      _Unwind_Resume(a1);
    }
  }
  sub_100222F34(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100222F34(uint64_t *result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__thread_struct *v5;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__thread_struct **)v1;
    *(_QWORD *)v1 = 0;
    if (v5)
    {
      std::__thread_struct::~__thread_struct(v5);
      operator delete();
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100222FDC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100223038()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100223094@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  long double v5;
  long double *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  void *v12;
  void *__p[2];
  char v14;

  v4 = sub_100270038(a1);
  if (v4 <= 1)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v14 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v12);
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = off_1003F97F8;
  *(_QWORD *)(a2 + 8) = off_1003F9A68;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) &= 0xFCu;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = off_1003F9A88;
  *(_BYTE *)(a2 + 64) &= 0xFCu;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_DWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_QWORD *)(a2 + 304) = off_1003F97B8;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_DWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 440) = 0;
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  *(_BYTE *)(a2 + 456) &= 0xC0u;
  *(_WORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 528) = off_1003F9A88;
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a2 + 536) = 0;
  *(_BYTE *)(a2 + 552) &= 0xFCu;
  *(_QWORD *)(a2 + 560) = 0;
  *(_QWORD *)(a2 + 568) = off_1003F97D8;
  *(_QWORD *)(a2 + 584) = 0;
  *(_QWORD *)(a2 + 576) = 0;
  *(_BYTE *)(a2 + 592) &= 0xF8u;
  *(_QWORD *)(a2 + 600) = 0;
  *(_DWORD *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_DWORD *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 700) = 0u;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 720) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(_QWORD *)(a2 + 752) = *(_QWORD *)(a2 + 752) & 0xF000000000000000 | 0x10000000;
  *(_QWORD *)(a2 + 296) = 4;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)sub_100270048(a1, 0);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)sub_100270048(a1, 1);
  if (v4 >= 3)
  {
    *(_QWORD *)(a2 + 144) = *(_QWORD *)sub_100270048(a1, 2);
    if (v4 >= 5)
    {
      v5 = *(double *)sub_100270048(a1, 3);
      v6 = (long double *)sub_100270048(a1, 4);
      *(long double *)(a2 + 72) = atan2(*v6, v5);
    }
  }
  v7 = (uint64_t)(a1 + 3);
  *(double *)(a2 + 152) = sqrt(sub_1002BF5C0(v7, 2uLL));
  if (sub_1002BF56C(v7) && (sub_1002BF560(v7, __p), __p[0] >= (void *)2))
  {
    v8 = (double *)sub_1002BEF4C(v7, 0, 0);
    sub_10019D93C(a2, *v8);
    v9 = (double *)sub_1002BEF4C(v7, 0, 1uLL);
    sub_10019D950(a2, *v9);
    v10 = *(double *)sub_1002BEF4C(v7, 1uLL, 1uLL);
  }
  else
  {
    sub_10019D93C(a2, INFINITY);
    v10 = INFINITY;
    sub_10019D950(a2, INFINITY);
  }
  return sub_10019D964(a2, v10);
}

void sub_1002233E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002233FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_100223410(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_100223424(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_100223438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

void sub_10022344C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_100223460(double *a1, double *a2)
{
  int64x2_t *v2;
  int64x2_t result;

  v2 = (int64x2_t *)sub_100241AF0(a1, *a2, a2[1]);
  result = vdupq_n_s64(0x7FF4000000000000uLL);
  v2[1] = result;
  v2[2] = result;
  v2[3].i16[0] = 0;
  v2[4].i64[0] = 0;
  v2[4].i64[1] = 0;
  v2[3].i64[1] = 0;
  return result;
}

double *sub_100223490(double *a1, uint64_t a2, double *a3)
{
  double *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = sub_100241AF0(a1, *a3, a3[1]);
  *((_OWORD *)result + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
  *((_BYTE *)result + 48) = *(_BYTE *)(a2 + 48);
  *((_BYTE *)result + 49) = 0;
  v5 = *(_QWORD *)(a2 + 64);
  result[7] = *(double *)(a2 + 56);
  *((_QWORD *)result + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result[9] = *(double *)(a2 + 72);
  return result;
}

void sub_1002234F8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  void **v45;
  void *v48[2];
  void *v49[2];
  char v50;
  __n128 __p;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  __int128 v55;
  uint64_t v56;

  v7 = a7;
  v8 = a6;
  if (!a3)
  {
    sub_1000D5048(v49, "");
    sub_1002240C8("You must have made a mistake", (std::string *)&__p);
    sub_100174738((uint64_t)v49, (uint64_t)&__p, 1);
    if (SBYTE7(v52) < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    sub_10015C2DC((uint64_t)v48);
  }
  if (a7 - a6 != a3)
  {
    sub_1000D5048(v49, "");
    sub_100224114("For now this is not allowed. Siblings is strictly the number of samples that are permitted", (std::string *)&__p);
    sub_100174738((uint64_t)v49, (uint64_t)&__p, 1);
    if (SBYTE7(v52) < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    sub_10015C2DC((uint64_t)v48);
  }
  if (a7 <= a6)
  {
    sub_1000D5048(v49, "");
    sub_1001DFA48("Bug in indexing", (std::string *)&__p);
    sub_100174738((uint64_t)v49, (uint64_t)&__p, 1);
    if (SBYTE7(v52) < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    sub_10015C2DC((uint64_t)v48);
  }
  v45 = (void **)(a4 + 8);
  do
  {
    if (v8 >= *(_QWORD *)a4)
    {
      sub_100241AF0(__p.n128_f64, *a2, a2[1]);
      v28 = *(_OWORD *)(a1 + 32);
      v52 = *(_OWORD *)(a1 + 16);
      v53 = v28;
      v54 = *(unsigned __int8 *)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v55 = *(_QWORD *)(a1 + 56);
      *((_QWORD *)&v55 + 1) = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v56 = *(_QWORD *)(a1 + 72);
      v32 = v8 - *(_QWORD *)a4;
      v33 = *a5;
      sub_10003FADC((__n128 *)(*a5 + 80 * v32), &__p);
      v34 = v33 + 80 * v32;
      v35 = v52;
      v36 = v53;
      *(_WORD *)(v34 + 48) = v54;
      *(_OWORD *)(v34 + 16) = v35;
      *(_OWORD *)(v34 + 32) = v36;
      v37 = v55;
      v55 = 0uLL;
      v38 = *(std::__shared_weak_count **)(v34 + 64);
      *(_OWORD *)(v34 + 56) = v37;
      if (!v38)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
        *(_QWORD *)(v33 + 80 * v32 + 72) = v56;
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        v7 = a7;
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_6;
      }
      else
      {
LABEL_27:
        *(_QWORD *)(v33 + 80 * v32 + 72) = v56;
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        v7 = a7;
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_6;
      }
      v41 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v41);
      while (__stlxr(v27 - 1, v41));
LABEL_30:
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      goto LABEL_6;
    }
    v12 = *(_QWORD *)(a4 + 16);
    if (v8 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *(_QWORD *)(a4 + 8)) >> 4))
    {
      sub_100241AF0(__p.n128_f64, *a2, a2[1]);
      v13 = *(_OWORD *)(a1 + 32);
      v52 = *(_OWORD *)(a1 + 16);
      v53 = v13;
      v54 = *(unsigned __int8 *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v55 = *(_QWORD *)(a1 + 56);
      *((_QWORD *)&v55 + 1) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v56 = *(_QWORD *)(a1 + 72);
      v17 = *v45;
      sub_10003FADC((__n128 *)*v45 + 5 * v8, &__p);
      v18 = (char *)&v17[10 * v8];
      v19 = v52;
      v20 = v53;
      *((_WORD *)v18 + 24) = v54;
      *((_OWORD *)v18 + 1) = v19;
      *((_OWORD *)v18 + 2) = v20;
      v21 = v55;
      v55 = 0uLL;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v18 + 8);
      *(_OWORD *)(v18 + 56) = v21;
      if (!v22)
        goto LABEL_16;
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        v17[10 * v8 + 9] = v56;
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        v7 = a7;
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_6;
      }
      else
      {
LABEL_16:
        v17[10 * v8 + 9] = v56;
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
        v7 = a7;
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_6;
      }
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      goto LABEL_30;
    }
    if (v12 >= *(_QWORD *)(a4 + 24))
    {
      *(_QWORD *)(a4 + 16) = sub_100224160(v45, (uint64_t)&__p, a1, a2);
    }
    else
    {
      sub_100241AF0(*(double **)(a4 + 16), *a2, a2[1]);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(a1 + 32);
      *(_BYTE *)(v12 + 48) = *(_BYTE *)(a1 + 48);
      *(_BYTE *)(v12 + 49) = 0;
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(a1 + 56);
      v42 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(v12 + 64) = v42;
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      *(_QWORD *)(v12 + 72) = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a4 + 16) = v12 + 80;
      *(_QWORD *)(a4 + 16) = v12 + 80;
    }
LABEL_6:
    ++v8;
  }
  while (v8 != v7);
}

void sub_1002239F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100223A74(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_100223ADC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_10026FF40(a3, 0);
  sub_100223B40(a1, a2, (uint64_t)a3);
}

void sub_100223B24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100223B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t v11;
  double v12;
  __double2 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  size_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double sinval;

  if (a2 == 5)
  {
    v32 = *(_OWORD *)(a1 + 16);
    v12 = *(double *)(a1 + 32);
    *(_QWORD *)&v33 = *(_QWORD *)(a1 + 40);
    v13 = __sincos_stret(v12);
    *((_QWORD *)&v33 + 1) = *(_QWORD *)&v13.__cosval;
    sinval = v13.__sinval;
    v14 = *(_QWORD *)(a3 + 16);
    v5 = *(char **)a3;
    if ((unint64_t)(v14 - *(_QWORD *)a3) >= 0x28)
    {
      v28 = *(char **)(a3 + 8);
      v10 = (char **)(a3 + 8);
      v27 = v28;
      v24 = v28 - v5;
      if ((unint64_t)(v28 - v5) <= 0x27)
      {
        v25 = (char *)&v32 + v24;
        if (v27 != v5)
        {
          memcpy(v5, &v32, v24);
          v5 = *v10;
        }
        v26 = 40;
        goto LABEL_43;
      }
      v31 = v33;
      *(_OWORD *)v5 = v32;
      *((_OWORD *)v5 + 1) = v31;
      *((double *)v5 + 4) = sinval;
    }
    else
    {
      if (v5)
      {
        *(_QWORD *)(a3 + 8) = v5;
        operator delete(v5);
        v14 = 0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
      }
      v15 = v14 >> 2;
      if ((unint64_t)(v14 >> 2) <= 5)
        v15 = 5;
      v7 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
      v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v7)
        v16 = v15;
      if (v16 >> 61)
        goto LABEL_51;
      v17 = 8 * v16;
      v5 = (char *)operator new(8 * v16);
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 16) = &v5[v17];
      v10 = (char **)(a3 + 8);
      v18 = v33;
      *(_OWORD *)v5 = v32;
      *((_OWORD *)v5 + 1) = v18;
      *((double *)v5 + 4) = sinval;
    }
    v11 = 5;
    goto LABEL_49;
  }
  if (a2 == 3)
  {
    v32 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)&v33 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a3 + 16);
    v5 = *(char **)a3;
    if ((unint64_t)(v19 - *(_QWORD *)a3) < 0x18)
    {
      if (v5)
      {
        *(_QWORD *)(a3 + 8) = v5;
        operator delete(v5);
        v19 = 0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
      }
      v20 = v19 >> 2;
      if ((unint64_t)(v19 >> 2) <= 3)
        v20 = 3;
      v7 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
      v21 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v7)
        v21 = v20;
      if (!(v21 >> 61))
      {
        v22 = 8 * v21;
        v5 = (char *)operator new(8 * v21);
        *(_QWORD *)a3 = v5;
        *(_QWORD *)(a3 + 16) = &v5[v22];
        v10 = (char **)(a3 + 8);
        *(_OWORD *)v5 = v32;
        *((_QWORD *)v5 + 2) = v33;
LABEL_48:
        v11 = 3;
        goto LABEL_49;
      }
LABEL_51:
      sub_1000D02C0();
    }
    v10 = (char **)(a3 + 8);
    v29 = *(char **)(a3 + 8);
    v24 = v29 - v5;
    if ((unint64_t)(v29 - v5) > 0x17)
    {
      *(_OWORD *)v5 = v32;
      *((_QWORD *)v5 + 2) = v33;
      goto LABEL_48;
    }
    v25 = (char *)&v32 + v24;
    if (v29 != v5)
    {
      memcpy(v5, &v32, v24);
      v5 = *v10;
    }
    v26 = 24;
LABEL_43:
    v30 = v26 - v24;
    memcpy(v5, v25, v30);
    v11 = v30 >> 3;
    goto LABEL_49;
  }
  if (a2 != 2)
    return;
  v32 = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(char **)a3;
  if ((unint64_t)(v4 - *(_QWORD *)a3) >= 0x10)
  {
    v10 = (char **)(a3 + 8);
    v23 = *(char **)(a3 + 8);
    v24 = v23 - v5;
    if ((unint64_t)(v23 - v5) > 0xF)
    {
      *(_OWORD *)v5 = v32;
      v11 = 2;
      goto LABEL_49;
    }
    v25 = (char *)&v32 + v24;
    if (v23 != v5)
    {
      memcpy(v5, &v32, v24);
      v5 = *v10;
    }
    v26 = 16;
    goto LABEL_43;
  }
  if (v5)
  {
    *(_QWORD *)(a3 + 8) = v5;
    operator delete(v5);
    v4 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  v6 = v4 >> 2;
  if ((unint64_t)(v4 >> 2) <= 2)
    v6 = 2;
  v7 = (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8;
  v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v6;
  if (v8 >> 61)
    goto LABEL_51;
  v9 = 8 * v8;
  v5 = (char *)operator new(8 * v8);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 16) = &v5[v9];
  v10 = (char **)(a3 + 8);
  *(_OWORD *)v5 = v32;
  v11 = 2;
LABEL_49:
  *v10 = &v5[8 * v11];
}

void sub_100223E98(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t sub_100223EFC(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t ***a8)
{
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD v24[3];
  char v25;
  _BYTE v26[16];
  std::__shared_weak_count *v27;
  uint64_t v28;

  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(*(_QWORD *)v15 + 56))(v15, a1, a6, a7, *(double *)(a1 + 16), *(double *)(a1 + 24), a2, a3);
  v17 = v16;
  v18 = HIBYTE(v16);
  if ((v16 & 1) == 0)
  {
    v19 = *a8;
    if (*a8)
    {
      v24[0] = off_1003F9A68;
      v25 = 0;
      *(double *)&v24[1] = a2;
      *(double *)&v24[2] = a3;
      sub_100267484(v19, (uint64_t)v24, a1, (uint64_t)v26);
      if (v26[0])
      {
        nullsub_23(&v28);
        v20 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v17 = 1;
        v18 = 1;
      }
      nullsub_23(v24);
    }
  }
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  else if (a5 >= 1)
  {
    *(_QWORD *)(a1 + 72) += a5;
  }
  return v17 | (v18 << 8);
}

void sub_10022406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_23(&a9);
  _Unwind_Resume(a1);
}

double sub_100224080(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return 1.0 / ((v4 - v3) * (v5 - v6) * (*(double *)(a2 + 16) - *(double *)(a2 + 8)));
}

std::string *sub_1002240C8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002240F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100224114@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100224144(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_100224160(void **a1, uint64_t a2, uint64_t a3, double *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v9;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  char *v21;
  __n128 v22;
  __n128 v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  double *v32;
  __n128 *v33;
  char *v34;

  v5 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    sub_1000D02C0();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v6)
    v6 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 > 0x333333333333333)
      sub_1000CDEB8();
    v10 = operator new(80 * v9);
  }
  else
  {
    v10 = 0;
  }
  v32 = (double *)&v10[10 * v5];
  v34 = (char *)&v10[10 * v9];
  sub_100241AF0(v32, *a4, a4[1]);
  v11 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v32 + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v32 + 2) = v11;
  *((_BYTE *)v32 + 48) = *(_BYTE *)(a3 + 48);
  *((_BYTE *)v32 + 49) = 0;
  v12 = *(_QWORD *)(a3 + 64);
  v32[7] = *(double *)(a3 + 56);
  *((_QWORD *)v32 + 8) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v10[10 * v5 + 9] = *(_QWORD *)(a3 + 72);
  v15 = (char *)&v10[10 * v5];
  v16 = (char *)(v32 + 10);
  v18 = (__n128 *)*a1;
  v17 = (__n128 *)a1[1];
  if (v17 == *a1)
  {
    v27 = (__n128 *)a1[1];
  }
  else
  {
    v19 = (__n128 *)v32;
    do
    {
      v20 = v17 - 5;
      sub_10003FADC(v19 - 5, v17 - 5);
      v22 = v17[-4];
      v23 = v17[-3];
      v19[-2].n128_u16[0] = v17[-2].n128_u16[0];
      v19[-4] = v22;
      v19[-3] = v23;
      v19[-2].n128_u64[1] = v17[-2].n128_u64[1];
      v24 = v17[-1].n128_u64[0];
      v19[-1].n128_u64[0] = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v19[-1].n128_u64[1] = v17[-1].n128_u64[1];
      v19 = (__n128 *)v21;
      v17 -= 5;
    }
    while (v20 != v18);
    v27 = (__n128 *)*a1;
    v17 = (__n128 *)a1[1];
    v15 = v21;
    v16 = (char *)(v32 + 10);
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v34;
  if (v17 == v27)
  {
    if (v17)
LABEL_25:
      operator delete(v17);
  }
  else
  {
    do
    {
      v33 = v17 - 5;
      v29 = (std::__shared_weak_count *)v17[-1].n128_u64[0];
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v17 -= 5;
    }
    while (v33 != v27);
    v17 = v27;
    if (v27)
      goto LABEL_25;
  }
  return v16;
}

void sub_1002243BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002243F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002243F8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100224484()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002244E0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100224544(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;

  result = sub_1002245E4(a1, a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16) - v4;
  if (v5)
  {
    v6 = v5 / 80;
    if (v6 <= 1)
      v6 = 1;
    if (v6 < 2)
    {
      v7 = 0;
LABEL_9:
      v10 = v6 - v7;
      v11 = (_BYTE *)(v4 + 80 * v7 + 49);
      do
      {
        *v11 = 1;
        v11 += 80;
        --v10;
      }
      while (v10);
      return result;
    }
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (_BYTE *)(v4 + 129);
    v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v8 - 80) = 1;
      *v8 = 1;
      v8 += 160;
      v9 -= 2;
    }
    while (v9);
    if (v6 != v7)
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1002245E4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (a1 != a2)
    sub_100226034((char **)(a1 + 8), *(__n128 **)(a2 + 8), *(__n128 **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
  sub_10003FADC((__n128 *)(a1 + 32), (__n128 *)(a2 + 32));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v4 = *(unsigned __int8 *)(a2 + 64);
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)(a1 + 48) = 0;
      v4 = *(unsigned __int8 *)(a2 + 64);
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_14;
    }
LABEL_10:
    if (v4)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      v6 = *(_QWORD *)(a2 + 96);
      v5 = *(_QWORD *)(a2 + 104);
      if (!v5)
        goto LABEL_19;
    }
    else
    {
      *(_BYTE *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      v6 = *(_QWORD *)(a2 + 96);
      v5 = *(_QWORD *)(a2 + 104);
      if (!v5)
        goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 48) = 1;
  }
  v4 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_10;
LABEL_14:
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 64) = 1;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5)
  {
LABEL_17:
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
LABEL_19:
  v9 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

void sub_100224750(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i -= 80)
  {
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 120) = 0;
}

_QWORD *sub_1002247CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_10022484C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double v13;
  NSObject *v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  char v19;
  uint64_t v20;
  double v21;
  long double v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  float v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t **i;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  double v68;
  std::__shared_weak_count *size;
  unint64_t *v70;
  unint64_t v71;
  __double2 v72;
  double **v73;
  double **j;
  double v75;
  double v76;
  double v77;
  _QWORD *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  _BYTE v90[32];
  _BYTE v91[1920];
  _BYTE v92[24];
  uint64_t v93[4];
  __int128 __p;
  __int128 v95;
  int v96;
  void *v97[2];
  void *v98[2];
  char v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::string buf;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;

  v2 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    return;
  v4 = a1;
  v5 = sub_1000C7EA4(a2);
  v6 = sub_100258E6C(v2);
  if (v5)
  {
    if (!v6)
      return;
  }
  v7 = *(_QWORD *)(v4 + 96);
  if (!v7)
  {
    sub_1000D5048(v98, "");
    sub_100227118("Params not populated", &buf);
    sub_100174738((uint64_t)v98, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v99 < 0)
      operator delete(v98[0]);
    sub_10015AD4C((uint64_t)v97);
  }
  if (!sub_10026A82C(v7))
    return;
  sub_10015F0E4(v2, a2, &v102);
  v87 = a2;
  v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
  v10 = *v8;
  v9 = (std::__shared_weak_count *)v8[1];
  v100 = *v8;
  v101 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  if (v13 > 100.0)
  {
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
      v14 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      goto LABEL_12;
    }
    v14 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_12:
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "WARNING: GPS fusion accuracy threshold seems too high - low quality GPS measurements could get fused! Threshold value = %f", (uint8_t *)&buf, 0xCu);
    }
  }
LABEL_13:
  v15 = sqrt(*(double *)(v87 + 136) * *(double *)(v87 + 136) + *(double *)(v87 + 128) * *(double *)(v87 + 128))
      * 0.408163265;
  if ((~(*(unsigned __int16 *)(v87 + 192) | (*(unsigned __int8 *)(v87 + 194) << 16)) & 0x1800) != 0)
    v15 = 0.0;
  v16 = v15 <= 0.0;
  if (v15 > 0.0)
  {
    v17 = *(double *)(v87 + 128);
  }
  else
  {
    v15 = *(double *)(v87 + 96);
    v17 = v15 * 1.73241161;
  }
  if (v16)
    v18 = *(double *)(v87 + 96) * 1.73241161;
  else
    v18 = *(double *)(v87 + 136);
  if (v15 >= v13)
    v19 = v5;
  else
    v19 = 0;
  if ((v19 & 1) == 0)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
    sub_10006F668(v98, v20);
    v21 = sub_10015EC98((uint64_t)v98, v17);
    v22 = sub_10015EC98((uint64_t)v98, v18);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
    sub_10006F668(v97, v23);
    v89 = sub_10015EC98((uint64_t)v97, *(double *)(v87 + 144));
    v24 = *(_QWORD *)(v4 + 96);
    if (v5)
      v25 = sub_10026A7D4(v24);
    else
      v25 = sub_10026A884(v24);
    v26 = v25;
    if (v21 <= v26)
      v27 = v26;
    else
      v27 = v21;
    if (v22 <= v26)
      v22 = v26;
    v28 = log(v27);
    v29 = log(v22);
    v30 = sub_10026A800(*(_QWORD *)(v4 + 96));
    v31 = -1.83787707 - v28 - v29;
    v32 = (v31 - v30 * v30) * 0.5;
    __p = 0u;
    v95 = 0u;
    v96 = 1065353216;
    v33 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)(v4 + 16) != v33)
    {
      v34 = 0;
      v35 = v22 * v22;
      v88 = v4;
      while (1)
      {
        v93[0] = *(_QWORD *)(v33 + 80 * v34 + 56);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
        v37 = sub_100227164((uint64_t)&__p, v93, (uint64_t)&unk_100395958, &buf);
        v38 = v37;
        v39 = *v2 + 80 * v34;
        v41 = (uint64_t *)v37[4];
        v40 = v37[5];
        if ((unint64_t)v41 >= v40)
          break;
        *v41 = v39;
        v36 = (uint64_t)(v41 + 1);
LABEL_36:
        v38[4] = v36;
        ++v34;
        v33 = *(_QWORD *)(v4 + 8);
        if (v34 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v4 + 16) - v33) >> 4))
        {
          for (i = (uint64_t **)v95; i; i = (uint64_t **)*i)
          {
            v61 = (*(uint64_t (**)(uint64_t *))(*i[2] + 56))(i[2]);
            sub_1000B53CC(v91, v61);
            sub_100159F88((uint64_t)v91, &buf);
            sub_1001A23D4((uint64_t)v90, v87 + 32);
            sub_100159CBC((uint64_t)&buf, (uint64_t)v90, (uint64_t)v92);
            sub_100159E28((uint64_t)v92, (uint64_t)v93);
            nullsub_22(v90);
            v62 = v106;
            if (v106)
            {
              v63 = (unint64_t *)&v106->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            v65 = v105;
            if (v105)
            {
              v66 = (unint64_t *)&v105->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            nullsub_22(&buf);
            sub_100073738(v91);
            (*(void (**)(std::string *__return_ptr))(*i[2] + 48))(&buf);
            v68 = sub_10015C2A4((uint64_t)&buf, v89);
            size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_)
            {
              v70 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
              do
                v71 = __ldaxr(v70);
              while (__stlxr(v71 - 1, v70));
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v72 = __sincos_stret(v68);
            v73 = (double **)i[3];
            for (j = (double **)i[4]; v73 != j; ++v73)
            {
              v75 = (*v73)[2] - *(double *)&v93[1];
              v76 = (*v73)[3] - *(double *)&v93[2];
              v77 = (v31
                   - ((v72.__sinval * v76 + v72.__cosval * v75)
                    * (v72.__sinval * v76 + v72.__cosval * v75)
                    / (v27
                     * v27)
                    + (v72.__cosval * v76 + -v72.__sinval * v75) * (v72.__cosval * v76 + -v72.__sinval * v75) / v35))
                  * 0.5;
              if (v32 >= v77)
                v77 = v32;
              sub_100047C28(*v73, v77);
            }
            nullsub_23(v93);
          }
          goto LABEL_83;
        }
      }
      v42 = (uint64_t **)(v37 + 3);
      v43 = (char *)v37[3];
      v44 = ((char *)v41 - v43) >> 3;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61)
        sub_1000D02C0();
      v46 = v40 - (_QWORD)v43;
      if (v46 >> 2 > v45)
        v45 = v46 >> 2;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        if (v47 >> 61)
          sub_1000CDEB8();
        v48 = v47;
        v49 = (char *)operator new(8 * v47);
        v47 = v48;
        v50 = (uint64_t *)&v49[8 * v44];
        *v50 = v39;
        v36 = (uint64_t)(v50 + 1);
        if (v41 == (uint64_t *)v43)
          goto LABEL_57;
      }
      else
      {
        v49 = 0;
        v50 = (uint64_t *)(8 * v44);
        *(_QWORD *)(8 * v44) = v39;
        v36 = 8 * v44 + 8;
        if (v41 == (uint64_t *)v43)
        {
LABEL_57:
          v38[3] = v50;
          v38[4] = v36;
          v38[5] = &v49[8 * v47];
          if (v41)
            operator delete(v41);
          v4 = v88;
          goto LABEL_36;
        }
      }
      v51 = (char *)(v41 - 1) - v43;
      if (v51 < 0x58)
        goto LABEL_112;
      if ((unint64_t)(v43 - v49) < 0x20)
        goto LABEL_112;
      v52 = (v51 >> 3) + 1;
      v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
      v54 = &v41[v53 / 0xFFFFFFFFFFFFFFF8];
      v50 = (uint64_t *)((char *)v50 - v53);
      v55 = &v49[8 * v44 - 16];
      v56 = v41 - 2;
      v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v58 = *(_OWORD *)v56;
        *((_OWORD *)v55 - 1) = *((_OWORD *)v56 - 1);
        *(_OWORD *)v55 = v58;
        v55 -= 32;
        v56 -= 4;
        v57 -= 4;
      }
      while (v57);
      v41 = v54;
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_112:
        do
        {
          v59 = *--v41;
          *--v50 = v59;
        }
        while (v41 != (uint64_t *)v43);
      }
      v41 = *v42;
      goto LABEL_57;
    }
LABEL_83:
    sub_100047C28((double *)(v4 + 32), v32);
    v78 = (_QWORD *)v95;
    if ((_QWORD)v95)
    {
      do
      {
        v85 = (_QWORD *)*v78;
        v86 = (void *)v78[3];
        if (v86)
        {
          v78[4] = v86;
          operator delete(v86);
        }
        operator delete(v78);
        v78 = v85;
      }
      while (v85);
    }
    v79 = (void *)__p;
    *(_QWORD *)&__p = 0;
    if (v79)
      operator delete(v79);
    sub_10004AA70((uint64_t)v97);
    sub_10004AA70((uint64_t)v98);
    v9 = v101;
  }
  if (v9)
  {
    v80 = (unint64_t *)&v9->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v82 = v103;
  if (v103)
  {
    v83 = (unint64_t *)&v103->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_10022508C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x837]) < 0)
  {
    operator delete((void *)STACK[0x820]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10022513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_100073738(va);
  sub_1002251C8(&STACK[0x7F0]);
  sub_10004AA70((uint64_t)&STACK[0x820]);
  sub_10004AA70((uint64_t)&STACK[0x858]);
  sub_1000E095C((uint64_t)&STACK[0x890]);
  sub_1000E095C(v8 - 256);
  _Unwind_Resume(a1);
}

void sub_100225144()
{
  uint64_t v0;

  sub_10015A328(v0 - 240);
  JUMPOUT(0x100225180);
}

void sub_100225150()
{
  uint64_t v0;

  sub_1000E095C(v0 - 240);
  JUMPOUT(0x100225190);
}

void sub_100225164(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002251C8((uint64_t)&STACK[0x7F0]);
  sub_10004AA70((uint64_t)&STACK[0x820]);
  sub_10004AA70((uint64_t)&STACK[0x858]);
  sub_1000E095C((uint64_t)&STACK[0x890]);
  sub_1000E095C(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_10022516C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nullsub_22(va);
  JUMPOUT(0x100225178);
}

void sub_10022518C()
{
  nullsub_23(&STACK[0x7D0]);
  JUMPOUT(0x100225198);
}

uint64_t sub_1002251C8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

BOOL sub_100225230(uint64_t a1, uint64_t a2)
{
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;

  v4 = *(double **)(a1 + 8);
  v5 = *(double **)(a1 + 16);
  if (v4 == v5)
  {
    v7 = -INFINITY;
    v6 = INFINITY;
    v9 = *(double *)(a2 + 24);
  }
  else
  {
    v6 = INFINITY;
    v7 = -INFINITY;
    do
    {
      v8 = sub_1002BD100((uint64_t)v4, a2);
      sub_100047C28(v4, v8);
      if (v7 < v8)
        v7 = v8;
      if (v8 < v6)
        v6 = v8;
      v4 += 10;
    }
    while (v4 != v5);
    v9 = *(double *)(a2 + 24);
  }
  v10 = (double *)(a1 + 32);
  sub_100047C28(v10, v9);
  sub_100047C20((uint64_t)v10);
  return v6 < v7;
}

void sub_1002253B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1002253D4(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  double v8;
  double v9;
  double *v10;
  double v11;
  NSObject *v12;
  _DWORD __p[3];
  __int16 v15;
  double v16;

  if (a3 != 0.0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    if (v5 == v6)
    {
      v8 = 0.0;
    }
    else
    {
      v8 = 0.0;
      do
      {
        v9 = sub_100047C20(v5);
        v8 = v8 + exp(v9 - a2);
        v5 += 80;
      }
      while (v5 != v6);
      if (v8 != 0.0 && v8 + a3 != 0.0)
      {
        v10 = (double *)(a1 + 32);
        v11 = log(v8 / (v8 + a3));
        sub_100047C28(v10, v11);
        sub_100047C20((uint64_t)v10);
        return a3 != 0.0;
      }
    }
    if (qword_100417ED8 == -1)
    {
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return a3 != 0.0;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return a3 != 0.0;
    }
    __p[0] = 134218240;
    *(double *)&__p[1] = a3;
    v15 = 2048;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WARNING: Cannot modify off map weight after deweighting particles due to walls/bounds.  removedOnMapLikelihood: %f, onMapLikelihoodAfterRemoval: %f", (uint8_t *)__p, 0x16u);
  }
  return a3 != 0.0;
}

void sub_1002255D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100225618(uint64_t a1, _QWORD *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double i;
  uint64_t ***v8;
  double v9;

  v4 = sub_10023F73C((double **)(a1 + 8), 0);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  for (i = 0.0; v5 != v6; v5 += 80)
  {
    v8 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 56) + 64))(*(_QWORD *)(v5 + 56));
    if (!sub_1000A9C6C(a2, v8))
    {
      v9 = sub_100047C20(v5);
      i = i + exp(v9 - v4);
      sub_100047C28((double *)v5, -INFINITY);
    }
  }
  return sub_1002253D4(a1, v4, i);
}

void sub_1002256D4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, double **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  double *v25;
  __int128 *p_buf;
  double *v27;
  float v28;
  NSObject *v29;
  void *v30;
  int64_t v31;
  char *v32;
  char *v33;
  double *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 buf;
  void *v40;
  uint8_t v41[4];
  __int128 *v42;

  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
  v36 = a6;
  v11 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "resampleTo, numParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
  v37 = a2;
  v34 = *(double **)(a1 + 16);
  v35 = *(double **)(a1 + 8);
  sub_100225B84(v35, v34);
  v12 = *(__n128 **)(a1 + 16);
  if (v12 == *(__n128 **)(a1 + 8))
  {
    v18 = *(__n128 **)(a1 + 16);
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) / 80;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) / 80;
    do
    {
      v17 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 88))(a3, v15);
      sub_100227564(*(_QWORD *)(a1 + 8) + v13, *(_QWORD *)(a1 + 8) + 80 * (v17 + v14++));
      v13 += 80;
      --v15;
    }
    while (v16 != v14);
    v18 = *(__n128 **)(a1 + 8);
    v12 = *(__n128 **)(a1 + 16);
  }
  if ((char *)v12 - (char *)v18 < 1)
  {
LABEL_16:
    v22 = 0;
    v19 = 0;
  }
  else
  {
    v19 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v18);
    while (1)
    {
      v20 = operator new(80 * v19, &std::nothrow);
      if (v20)
        break;
      v21 = v19 > 1;
      v19 >>= 1;
      if (!v21)
        goto LABEL_16;
    }
    v22 = v20;
  }
  sub_100227704(v18, v12, (uint64_t)&buf, 0xCCCCCCCCCCCCCCCDLL * (v12 - v18), (uint64_t)v22, v19);
  if (v22)
    operator delete(v22);
  if (*a4)
  {
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
    v23 = qword_100417EE0;
    v24 = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG);
    v25 = *a4;
    if (v24)
    {
      sub_100225CC4(a1, v25, (double *)(a1 + 32), (uint64_t)&buf);
      if (SHIBYTE(v40) >= 0)
        p_buf = &buf;
      else
        p_buf = (__int128 *)buf;
      *(_DWORD *)v41 = 136315138;
      v42 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Best particle is %s the reference injection weight, offmap weight", v41, 0xCu);
      if (SHIBYTE(v40) < 0)
        operator delete((void *)buf);
      v25 = *a4;
    }
  }
  else
  {
    v25 = 0;
  }
  sub_10023F9F0((uint64_t *)(a1 + 8), (uint64_t)v25, a1 + 32);
  v27 = *a4;
  v28 = (*(float (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  sub_100240824(a1 + 8, v27, v37, a5, &buf, v28);
  if ((_BYTE)buf)
  {
    sub_100225B84(*(double **)(a1 + 8), *(double **)(a1 + 16));
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (char *)v35) >> 4) < 0xCCCCCCCCCCCCCCCDLL
                                                                   * ((uint64_t)(*(_QWORD *)(a1 + 16)
                                                                              - *(_QWORD *)(a1 + 8)) >> 4))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
      v29 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "New particles were injected. If you were not isFeasible before, you certainly are now.", v41, 2u);
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)v36 = 0;
    if ((_BYTE)buf)
    {
      *(_QWORD *)(v36 + 8) = 0;
      *(_QWORD *)(v36 + 16) = 0;
      *(_QWORD *)(v36 + 24) = 0;
      v30 = (void *)*((_QWORD *)&buf + 1);
      v31 = (int64_t)v40 - *((_QWORD *)&buf + 1);
      if (v40 != *((void **)&buf + 1))
      {
        if (v31 < 0)
          sub_1000D02C0();
        v32 = (char *)operator new((size_t)v40 - *((_QWORD *)&buf + 1));
        *(_QWORD *)(v36 + 8) = v32;
        v33 = &v32[16 * (v31 >> 4)];
        *(_QWORD *)(v36 + 24) = v33;
        memcpy(v32, v30, v31);
        *(_QWORD *)(v36 + 16) = v33;
      }
      *(_BYTE *)v36 = 1;
      if (v30)
      {
        v40 = v30;
        operator delete(v30);
      }
    }
  }
  else
  {
    *(_BYTE *)v36 = 0;
  }
}

void sub_100225B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17)
{
  void **v17;
  void *v19;

  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(a12 + 16) = v19;
    operator delete(v19);
  }
  if (a15)
  {
    if (__p)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100225B84(double *a1, double *a2)
{
  double *v3;

  if (a1 != a2)
  {
    v3 = a1;
    do
    {
      sub_100241AF8(v3);
      v3 += 10;
    }
    while (v3 != a2);
  }
}

void sub_100225C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100225CC4(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double *v5;
  double *v6;
  double *i;
  double v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  void *__p[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  long double v29;
  void **v30;
  uint64_t (*v31)();
  uint64_t (*v32)(uint64_t, double *);
  _BYTE v33[200];

  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  if (v5 == v6)
  {
    *(_BYTE *)(a4 + 23) = 3;
    *(_DWORD *)a4 = 4271950;
    return;
  }
  for (i = v5 + 10; i != v6; i += 10)
  {
    v10 = sub_100241AF8(v5);
    if (v10 < sub_100241AF8(i))
      v5 = i;
  }
  v11 = sub_100241AF8(v5);
  v12 = sub_100241AF8(a2);
  v13 = exp(v11 - v12);
  v14 = sub_100241AF8(a3);
  __p[0] = *(void **)&v13;
  sub_10006232C((uint64_t)v33, "%1%");
  v30 = __p;
  v31 = nullsub_162;
  v32 = sub_1002264C8;
  v15 = (std::string *)sub_100061298((uint64_t)v33, (uint64_t)&v30);
  sub_100060FD8(v15, (uint64_t)&v26);
  sub_100062218((uint64_t)v33);
  v16 = std::string::append(&v26, "x, ");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v29 = exp(v11 - v14);
  sub_10006232C((uint64_t)v33, "%1%");
  v30 = (void **)&v29;
  v31 = nullsub_162;
  v32 = sub_1002264C8;
  v18 = (std::string *)sub_100061298((uint64_t)v33, (uint64_t)&v30);
  sub_100060FD8(v18, (uint64_t)__p);
  sub_100062218((uint64_t)v33);
  if ((v25 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v20 = v25;
  else
    v20 = (std::string::size_type)__p[1];
  v21 = std::string::append(&v27, (const std::string::value_type *)v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v28, "x");
  *(std::string *)a4 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_21:
    operator delete(v26.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_100225F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if (a26 < 0)
      {
LABEL_8:
        operator delete(a21);
        if ((a20 & 0x80000000) == 0)
          goto LABEL_12;
LABEL_11:
        operator delete(a15);
LABEL_12:
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a26 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_100226020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100062218((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_100226034(char **a1, __n128 *a2, __n128 *a3, size_t __sz)
{
  __n128 *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 *v40;
  __n128 *v41;
  __n128 v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __n128 v46;
  __n128 v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) >= __sz)
  {
    v15 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 4) >= __sz)
    {
      if (a2 != a3)
      {
        do
        {
          sub_10003FADC((__n128 *)v9, v6);
          v27 = v6[1];
          v28 = v6[2];
          *((_WORD *)v9 + 24) = v6[3].n128_u16[0];
          *((__n128 *)v9 + 1) = v27;
          *((__n128 *)v9 + 2) = v28;
          v30 = v6[3].n128_i64[1];
          v29 = v6[4].n128_i64[0];
          if (v29)
          {
            v31 = (unint64_t *)(v29 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v33 = (std::__shared_weak_count *)*((_QWORD *)v9 + 8);
          *((_QWORD *)v9 + 7) = v30;
          *((_QWORD *)v9 + 8) = v29;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          *((_QWORD *)v9 + 9) = v6[4].n128_u64[1];
          v6 += 5;
          v9 += 80;
        }
        while (v6 != a3);
        v15 = a1[1];
      }
      while (v15 != v9)
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)v15 - 2);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v15 -= 80;
      }
      goto LABEL_52;
    }
    v16 = &a2[(v15 - v9) >> 4];
    if (v15 == v9)
    {
      v17 = (__n128 *)*a1;
      if (v16 == a3)
      {
LABEL_60:
        a1[1] = (char *)v17;
        return;
      }
    }
    else
    {
      do
      {
        sub_10003FADC((__n128 *)v9, v6);
        v18 = v6[1];
        v19 = v6[2];
        *((_WORD *)v9 + 24) = v6[3].n128_u16[0];
        *((__n128 *)v9 + 1) = v18;
        *((__n128 *)v9 + 2) = v19;
        v21 = v6[3].n128_i64[1];
        v20 = v6[4].n128_i64[0];
        if (v20)
        {
          v22 = (unint64_t *)(v20 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)v9 + 8);
        *((_QWORD *)v9 + 7) = v21;
        *((_QWORD *)v9 + 8) = v20;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *((_QWORD *)v9 + 9) = v6[4].n128_u64[1];
        v6 += 5;
        v9 += 80;
      }
      while (v6 != v16);
      v9 = a1[1];
      v17 = (__n128 *)v9;
      if (v16 == a3)
        goto LABEL_60;
    }
    v17 = (__n128 *)v9;
    do
    {
      sub_10003FADC(v17, v16);
      v46 = v16[1];
      v47 = v16[2];
      v17[3].n128_u16[0] = v16[3].n128_u16[0];
      v17[1] = v46;
      v17[2] = v47;
      v48 = v16[4].n128_u64[0];
      v17[3].n128_u64[1] = v16[3].n128_u64[1];
      v17[4].n128_u64[0] = v48;
      if (v48)
      {
        v49 = (unint64_t *)(v48 + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v17[4].n128_u64[1] = v16[4].n128_u64[1];
      v16 += 5;
      v17 += 5;
    }
    while (v16 != a3);
    goto LABEL_60;
  }
  if (v9)
  {
    v10 = a1[1];
    v11 = *a1;
    if (v10 != v9)
    {
      do
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 80;
      }
      while (v10 != v9);
      v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (__sz > 0x333333333333333)
    goto LABEL_69;
  v36 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
  v37 = 2 * v36;
  if (2 * v36 <= __sz)
    v37 = __sz;
  v38 = v36 >= 0x199999999999999 ? 0x333333333333333 : v37;
  if (v38 > 0x333333333333333)
LABEL_69:
    sub_1000D02C0();
  v39 = 5 * v38;
  v40 = (__n128 *)operator new(80 * v38);
  v9 = (char *)v40;
  *a1 = (char *)v40;
  a1[1] = (char *)v40;
  a1[2] = (char *)&v40[v39];
  if (v6 == a3)
  {
LABEL_52:
    a1[1] = v9;
    return;
  }
  v41 = v40;
  do
  {
    sub_10003FADC(v41, v6);
    v42 = v6[2];
    v41[1] = v6[1];
    v41[2] = v42;
    v41[3].n128_u16[0] = v6[3].n128_u16[0];
    v43 = v6[4].n128_u64[0];
    v41[3].n128_u64[1] = v6[3].n128_u64[1];
    v41[4].n128_u64[0] = v43;
    if (v43)
    {
      v44 = (unint64_t *)(v43 + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v41[4].n128_u64[1] = v6[4].n128_u64[1];
    v6 += 5;
    v41 += 5;
  }
  while (v6 != a3);
  a1[1] = (char *)v41;
}

void sub_100226498(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002264C8(uint64_t a1, double *a2)
{
  return std::ostream::operator<<(*a2);
}

std::string *sub_1002264D0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100226500(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100226520()
{
  operator delete();
}

__n128 sub_100226534(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1003FE8D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100226574(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FE8D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100226598(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikel"
                     "ihoodMeasurementEventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK"
                                "30WifiLikelihoodMeasurementEventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100226604()
{
}

void sub_100226614()
{
  operator delete();
}

__n128 sub_100226628(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1003FE960;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100226668(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FE960;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10022668C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikel"
                     "ihoodMeasurementEventE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK"
                                "30WifiLikelihoodMeasurementEventE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_1002266F8()
{
}

void sub_100226708()
{
  operator new();
}

void sub_100226750()
{
  operator delete();
}

void sub_100226764(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;

  sub_1000F020C((const char *)((unint64_t)"PN10purpleslam20tag_unexpected_valueE" & 0x7FFFFFFFFFFFFFFFLL), &v12);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v12;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v12.__r_.__value_.__r.__words[0];
  std::string::insert(&v12, v4, 91);
  v13 = v12;
  memset(&v12, 0, sizeof(v12));
  v5 = std::string::append(&v13, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1002269A4((double *)(a1 + 8), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v15, 10);
  *a2 = v15;
  memset(&v15, 0, sizeof(v15));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1002268E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1002269A4(double *a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;

  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 1;
  LOWORD(v16.__r_.__value_.__l.__data_) = 40;
  sub_100226C2C(a1);
  if ((v15 & 0x80u) == 0)
    v4 = v14;
  else
    v4 = (void **)v14[0];
  if ((v15 & 0x80u) == 0)
    v5 = v15;
  else
    v5 = (std::string::size_type)v14[1];
  v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 44);
  v18 = v17;
  memset(&v17, 0, sizeof(v17));
  sub_100226C2C(a1 + 1);
  if ((v13 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v9 = v13;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v18, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v19, 41);
  *a2 = v19;
  memset(&v19, 0, sizeof(v19));
  if ((char)v13 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if (((char)v15 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v17.__r_.__value_.__l.__data_);
  if (((char)v15 & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v16.__r_.__value_.__l.__data_);
    return;
  }
LABEL_22:
  operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
}

void sub_100226B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v33 - 73) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v33 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v33 - 96));
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100226C2C(double *a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  _QWORD v7[8];
  void *__p[2];
  __int128 v9;
  int v10;
  void (__cdecl **v11)(std::ostringstream *__hidden);

  v6 = v2;
  *(_QWORD *)((char *)&v7[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v7[-1] + (_QWORD)*(v6 - 3));
  std::ios_base::init(v4, v7);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v7);
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 16;
  std::ostream::operator<<(*a1);
  std::stringbuf::str(v7);
  if (SBYTE7(v9) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v11);
}

void sub_100226D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_100226D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_100226D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100226DAC()
{
  operator new();
}

void sub_100226FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100227008((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100226FD8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100226FF4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100227008(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_100227088()
{
  operator delete();
}

uint64_t sub_10022709C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1002270B4()
{
  return 0;
}

uint64_t sub_1002270BC()
{
  return 0;
}

uint64_t sub_1002270C4()
{
  return 0;
}

std::string *sub_1002270CC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002270FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100227118@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100227148(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100227164(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1002274B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002274CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002274CC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

std::string *sub_100227518@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100227548(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100227564(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  __int128 v23;
  uint64_t v24;

  sub_10003FADC(&v19, (__n128 *)a1);
  v4 = *(_OWORD *)(a1 + 32);
  v20 = *(_OWORD *)(a1 + 16);
  v21 = v4;
  v22 = *(_WORD *)(a1 + 48);
  v23 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v24 = *(_QWORD *)(a1 + 72);
  sub_10003FADC((__n128 *)a1, (__n128 *)a2);
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  v7 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_10003FADC((__n128 *)a2, &v19);
  v11 = v21;
  *(_OWORD *)(a2 + 16) = v20;
  *(_OWORD *)(a2 + 32) = v11;
  *(_WORD *)(a2 + 48) = v22;
  v12 = v23;
  v23 = 0uLL;
  v13 = *(std::__shared_weak_count **)(a2 + 64);
  *(_OWORD *)(a2 + 56) = v12;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  *(_QWORD *)(a2 + 72) = v24;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1002276F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100223A74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100227704(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  double v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v8 = sub_100047C20((uint64_t)&a2[-5]);
      if (v8 < sub_100047C20((uint64_t)a1))
        sub_100227564((uint64_t)a1, (uint64_t)&a2[-5]);
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_10022795C(a1, a2);
    }
    else
    {
      v12 = a5;
      v13 = a4 >> 1;
      v14 = (uint64_t)&a1[5 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_100227BC0((uint64_t)a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5);
        v16 = a4 - v13;
        v17 = v12 + 80 * v13;
        sub_100227BC0((uint64_t)&a1[5 * (a4 >> 1)], a2, a3, v16, v17);
        sub_100227E30(v12, v17, v17, v12 + 80 * a4, (uint64_t)a1);
        if (v12)
        {
          v18 = 0;
          do
          {
            v19 = *(std::__shared_weak_count **)(v12 + 64);
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v19);
              }
            }
            ++v18;
            v12 += 80;
          }
          while (v18 < a4);
        }
      }
      else
      {
        sub_100227704(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v15 = a4 - v13;
        sub_100227704(v14, a2, a3, v15, v12, a6);
        sub_100228134((uint64_t)a1, v14, (uint64_t)a2, a3, v13, v15, v12, a6);
      }
    }
  }
}

void sub_100227948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10022795C(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  double v7;
  __int128 v8;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  double v17;
  __n128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  __int128 v32;
  unint64_t v33;

  if (a1 != a2)
  {
    v4 = (uint64_t)&a1[5];
    if (&a1[5] != a2)
    {
      v5 = (uint64_t)a1;
      do
      {
        v6 = (__n128 *)v4;
        v7 = sub_100047C20(v4);
        if (v7 < sub_100047C20(v5))
        {
          sub_10003FADC(&v28, v6);
          v8 = *(_OWORD *)(v5 + 112);
          v29 = *(_OWORD *)(v5 + 96);
          v30 = v8;
          v31 = *(_WORD *)(v5 + 128);
          v32 = *(_OWORD *)(v5 + 136);
          *(_QWORD *)(v5 + 136) = 0;
          *(_QWORD *)(v5 + 144) = 0;
          v9 = v6;
          v33 = *(_QWORD *)(v5 + 152);
          while (1)
          {
            v10 = v5;
            sub_10003FADC(v9, (__n128 *)v5);
            v11 = *(__n128 *)(v5 + 16);
            v12 = *(__n128 *)(v5 + 32);
            v9[3].n128_u16[0] = *(_WORD *)(v5 + 48);
            v9[1] = v11;
            v9[2] = v12;
            v13 = *(__n128 *)(v5 + 56);
            *(_QWORD *)(v5 + 56) = 0;
            *(_QWORD *)(v5 + 64) = 0;
            v14 = (std::__shared_weak_count *)v9[4].n128_u64[0];
            *(__n128 *)((char *)v9 + 56) = v13;
            if (v14)
            {
              p_shared_owners = (unint64_t *)&v14->__shared_owners_;
              do
                v16 = __ldaxr(p_shared_owners);
              while (__stlxr(v16 - 1, p_shared_owners));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
            v9[4].n128_u64[1] = *(_QWORD *)(v10 + 72);
            if ((__n128 *)v10 == a1)
              break;
            v17 = sub_100047C20((uint64_t)&v28);
            v5 = v10 - 80;
            v9 = (__n128 *)v10;
            if (v17 >= sub_100047C20(v10 - 80))
            {
              v18 = (__n128 *)v10;
              goto LABEL_16;
            }
          }
          v18 = a1;
LABEL_16:
          sub_10003FADC(v18, &v28);
          v19 = v29;
          v20 = v30;
          *(_WORD *)(v10 + 48) = v31;
          *(_OWORD *)(v10 + 16) = v19;
          *(_OWORD *)(v10 + 32) = v20;
          v21 = v32;
          v32 = 0uLL;
          *(_QWORD *)(v10 + 56) = v21;
          v22 = (std::__shared_weak_count *)v18[4].n128_u64[0];
          v18[4].n128_u64[0] = *((_QWORD *)&v21 + 1);
          if (!v22)
            goto LABEL_20;
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
            v18[4].n128_u64[1] = v33;
            if (v25)
            {
LABEL_21:
              v26 = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
          }
          else
          {
LABEL_20:
            v25 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
            v18[4].n128_u64[1] = v33;
            if (v25)
              goto LABEL_21;
          }
        }
        v4 = (uint64_t)&v6[5];
        v5 = (uint64_t)v6;
      }
      while (&v6[5] != a2);
    }
  }
}

void sub_100227B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100223A74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100227BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100223A74((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100227BC0(uint64_t a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  double v11;
  __n128 v12;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __n128 v23;

  if (a4)
  {
    if (a4 == 2)
    {
      v11 = sub_100047C20((uint64_t)&a2[-5]);
      if (v11 >= sub_100047C20(a1))
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)a1);
        v20 = *(_OWORD *)(a1 + 16);
        v21 = *(_OWORD *)(a1 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a1 + 48);
        *(_OWORD *)(a5 + 16) = v20;
        *(_OWORD *)(a5 + 32) = v21;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(a1 + 72);
        sub_10003FADC((__n128 *)(a5 + 80), a2 - 5);
        v22 = a2[-4];
        v23 = a2[-3];
        *(_WORD *)(a5 + 128) = a2[-2].n128_u16[0];
        *(__n128 *)(a5 + 96) = v22;
        *(__n128 *)(a5 + 112) = v23;
        *(__n128 *)(a5 + 136) = *(__n128 *)((char *)a2 - 24);
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v16 = &a2[-1].n128_u64[1];
      }
      else
      {
        sub_10003FADC((__n128 *)a5, a2 - 5);
        v12 = a2[-4];
        v13 = a2[-3];
        *(_WORD *)(a5 + 48) = a2[-2].n128_u16[0];
        *(__n128 *)(a5 + 16) = v12;
        *(__n128 *)(a5 + 32) = v13;
        *(__n128 *)(a5 + 56) = *(__n128 *)((char *)a2 - 24);
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        *(_QWORD *)(a5 + 72) = a2[-1].n128_u64[1];
        sub_10003FADC((__n128 *)(a5 + 80), (__n128 *)a1);
        v14 = *(_OWORD *)(a1 + 16);
        v15 = *(_OWORD *)(a1 + 32);
        *(_WORD *)(a5 + 128) = *(_WORD *)(a1 + 48);
        *(_OWORD *)(a5 + 96) = v14;
        *(_OWORD *)(a5 + 112) = v15;
        *(_OWORD *)(a5 + 136) = *(_OWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        v16 = (unint64_t *)(a1 + 72);
      }
      *(_QWORD *)(a5 + 152) = *v16;
    }
    else if (a4 == 1)
    {
      sub_10003FADC((__n128 *)a5, (__n128 *)a1);
      v9 = *(_OWORD *)(a1 + 16);
      v10 = *(_OWORD *)(a1 + 32);
      *(_WORD *)(a5 + 48) = *(_WORD *)(a1 + 48);
      *(_OWORD *)(a5 + 16) = v9;
      *(_OWORD *)(a5 + 32) = v10;
      *(_OWORD *)(a5 + 56) = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a5 + 72) = *(_QWORD *)(a1 + 72);
    }
    else if ((uint64_t)a4 > 8)
    {
      v18 = a4 >> 1;
      v19 = 80 * (a4 >> 1);
      sub_100227704(a1, a1 + v19, a3, a4 >> 1, a5, a4 >> 1);
      sub_100227704(a1 + v19, a2, a3, a4 - v18, a5 + v19, a4 - v18);
      sub_100228810(a1, a1 + v19, a1 + v19, (uint64_t)a2, a5);
    }
    else
    {
      sub_100228544((__n128 *)a1, a2, a5);
    }
  }
}

void sub_100227E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100227E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  double v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;

  if (a1 == a2)
  {
LABEL_19:
    while (a3 != a4)
    {
      sub_10003FADC((__n128 *)a5, (__n128 *)a3);
      v24 = *(_OWORD *)(a3 + 16);
      v25 = *(_OWORD *)(a3 + 32);
      *(_WORD *)(a5 + 48) = *(_WORD *)(a3 + 48);
      *(_OWORD *)(a5 + 16) = v24;
      *(_OWORD *)(a5 + 32) = v25;
      v26 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      v27 = *(std::__shared_weak_count **)(a5 + 64);
      *(_OWORD *)(a5 + 56) = v26;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      *(_QWORD *)(a5 + 72) = *(_QWORD *)(a3 + 72);
      a3 += 80;
      a5 += 80;
    }
  }
  else
  {
    v9 = a1;
    while (a3 != a4)
    {
      v10 = sub_100047C20(a3);
      v11 = (_OWORD *)(a5 + 16);
      if (v10 >= sub_100047C20(v9))
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)v9);
        v18 = *(_OWORD *)(v9 + 16);
        v19 = *(_OWORD *)(v9 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
        *v11 = v18;
        *(_OWORD *)(a5 + 32) = v19;
        v20 = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        v21 = *(std::__shared_weak_count **)(a5 + 64);
        *(_OWORD *)(a5 + 56) = v20;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(v9 + 72);
        v9 += 80;
        a5 += 80;
        if (v9 == a2)
          goto LABEL_19;
      }
      else
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)a3);
        v12 = *(_OWORD *)(a3 + 16);
        v13 = *(_OWORD *)(a3 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a3 + 48);
        *v11 = v12;
        *(_OWORD *)(a5 + 32) = v13;
        v14 = *(_OWORD *)(a3 + 56);
        *(_QWORD *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        v15 = *(std::__shared_weak_count **)(a5 + 64);
        *(_OWORD *)(a5 + 56) = v14;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(a3 + 72);
        a3 += 80;
        a5 += 80;
        if (v9 == a2)
          goto LABEL_19;
      }
    }
    while (v9 != a2)
    {
      sub_10003FADC((__n128 *)a5, (__n128 *)v9);
      v30 = *(_OWORD *)(v9 + 16);
      v31 = *(_OWORD *)(v9 + 32);
      *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
      *(_OWORD *)(a5 + 16) = v30;
      *(_OWORD *)(a5 + 32) = v31;
      v32 = *(_OWORD *)(v9 + 56);
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v33 = *(std::__shared_weak_count **)(a5 + 64);
      *(_OWORD *)(a5 + 56) = v32;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      *(_QWORD *)(a5 + 72) = *(_QWORD *)(v9 + 72);
      v9 += 80;
      a5 += 80;
    }
  }
}

uint64_t *sub_100228094(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      v4 = 0;
      do
      {
        v5 = *(std::__shared_weak_count **)(v2 + 64);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        ++v4;
        v2 += 80;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void sub_100228134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;

  v51 = a6;
  if (a6)
  {
    while (1)
    {
      if (v51 <= a8 || a5 <= a8)
      {
        sub_100228A28(a1, a2, a3, a4, a5, v51, a7);
        return;
      }
      if (!a5)
        return;
      v13 = 0;
      v14 = -a5;
      while (1)
      {
        v15 = a1 + v13;
        v16 = sub_100047C20(a2);
        if (v16 < sub_100047C20(a1 + v13))
          break;
        v13 += 80;
        if (__CFADD__(v14++, 1))
          return;
      }
      v18 = -v14;
      v19 = v51;
      v47 = a8;
      v48 = a3;
      if (-v14 >= v51)
      {
        if (v14 == -1)
        {
          sub_100227564(a1 + v13, a2);
          return;
        }
        if (v14 > 0)
          v18 = 1 - v14;
        v26 = v18 >> 1;
        v23 = a1 + 80 * (v18 >> 1) + v13;
        v33 = a3;
        v22 = a2;
        if (a2 != v33)
        {
          v44 = v26;
          v34 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - a2) >> 4);
          v22 = a2;
          do
          {
            v35 = v22 + 80 * (v34 >> 1);
            v36 = sub_100047C20(v35);
            v37 = sub_100047C20(v23);
            if (v36 >= v37)
              v34 >>= 1;
            else
              v34 += ~(v34 >> 1);
            if (v36 < v37)
              v22 = v35 + 80;
          }
          while (v34);
          v19 = v51;
          v26 = v44;
        }
        v21 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - a2) >> 4);
        if (v23 != a2)
        {
LABEL_22:
          if (v22 == a2)
          {
            v27 = v23;
          }
          else
          {
            v43 = v26;
            v46 = v21;
            sub_100227564(v23, a2);
            v27 = v23 + 80;
            for (i = a2 + 80; i != v22; i += 80)
            {
              if (v27 == a2)
                a2 = i;
              sub_100227564(v27, i);
              v27 += 80;
            }
            if (v27 != a2)
            {
              v29 = v27;
              v30 = a2;
              while (1)
              {
                sub_100227564(v29, v30);
                v30 += 80;
                v31 = v29 + 80 == a2;
                if (v30 == v22)
                {
                  if (v29 + 80 == a2)
                    break;
                  v30 = a2 + 80;
                  v29 += 160;
                  while (1)
                  {
                    sub_100227564(v29 - 80, a2);
                    v31 = v29 == a2;
                    if (v30 != v22)
                      break;
                    v32 = v29 == a2;
                    v29 += 80;
                    if (v32)
                      goto LABEL_39;
                  }
                }
                else
                {
                  v29 += 80;
                }
                if (v31)
                  a2 = v30;
              }
            }
LABEL_39:
            v19 = v51;
            v26 = v43;
            v21 = v46;
          }
          goto LABEL_55;
        }
      }
      else
      {
        if (v51 >= 0)
          v20 = v51;
        else
          v20 = v51 + 1;
        v21 = v20 >> 1;
        v22 = a2 + 80 * (v20 >> 1);
        v23 = a2;
        if (a2 - a1 != v13)
        {
          v45 = v20 >> 1;
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1 - v13) >> 4);
          v23 = a1 + v13;
          do
          {
            v25 = sub_100047C20(v22);
            if (v25 < sub_100047C20(v23 + 80 * (v24 >> 1)))
            {
              v24 >>= 1;
            }
            else
            {
              v23 += 80 * (v24 >> 1) + 80;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v19 = v51;
          v21 = v45;
        }
        v26 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - a1 - v13) >> 4);
        if (v23 != a2)
          goto LABEL_22;
      }
      v27 = v22;
LABEL_55:
      a5 = -v26 - v14;
      v38 = v19 - v21;
      if (v26 + v21 >= v19 - (v26 + v21) - v14)
      {
        v40 = v26;
        v41 = -v26 - v14;
        v42 = v21;
        sub_100228134(v27, v22, v48, a4, v41, v19 - v21, a7, v47);
        a2 = v23;
        a8 = v47;
        a5 = v40;
        a3 = v27;
        v51 = v42;
        a1 = v15;
        if (!v42)
          return;
      }
      else
      {
        v39 = v23;
        a8 = v47;
        sub_100228134(a1 + v13, v39, v27, a4, v26, v21, a7, v47);
        a2 = v22;
        a3 = v48;
        v51 = v38;
        a1 = v27;
        if (!v38)
          return;
      }
    }
  }
}

void sub_100228544(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  double v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v5 = a1;
    sub_10003FADC((__n128 *)a3, a1);
    v6 = v5[1];
    v7 = v5[2];
    *(_WORD *)(a3 + 48) = v5[3].n128_u16[0];
    *(__n128 *)(a3 + 16) = v6;
    *(__n128 *)(a3 + 32) = v7;
    *(__n128 *)(a3 + 56) = *(__n128 *)((char *)v5 + 56);
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
    *(_QWORD *)(a3 + 72) = v5[4].n128_u64[1];
    v29 = 1;
    v8 = (uint64_t)&v5[5];
    if (&v5[5] != a2)
    {
      v9 = a3;
      do
      {
        while (1)
        {
          v10 = (__n128 *)v8;
          v11 = sub_100047C20(v8);
          v12 = v9 + 80;
          if (v11 < sub_100047C20(v9))
            break;
          sub_10003FADC((__n128 *)(v9 + 80), v10);
          v21 = v5[6];
          v22 = v5[7];
          *(_WORD *)(v9 + 128) = v5[8].n128_u16[0];
          *(__n128 *)(v9 + 96) = v21;
          *(__n128 *)(v9 + 112) = v22;
          *(__n128 *)(v9 + 136) = *(__n128 *)((char *)v5 + 136);
          v5[8].n128_u64[1] = 0;
          v5[9].n128_u64[0] = 0;
          *(_QWORD *)(v9 + 152) = v5[9].n128_u64[1];
          ++v29;
          v8 = (uint64_t)&v10[5];
          v9 += 80;
          v5 = v10;
          if (&v10[5] == a2)
            return;
        }
        sub_10003FADC((__n128 *)(v9 + 80), (__n128 *)v9);
        v13 = *(_OWORD *)(v9 + 32);
        *(_OWORD *)(v9 + 96) = *(_OWORD *)(v9 + 16);
        *(_OWORD *)(v9 + 112) = v13;
        *(_WORD *)(v9 + 128) = *(_WORD *)(v9 + 48);
        *(_OWORD *)(v9 + 136) = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v9 + 152) = *(_QWORD *)(v9 + 72);
        ++v29;
        v14 = a3;
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        if (v9 != a3)
        {
          while (1)
          {
            v14 = v9;
            v15 = sub_100047C20((uint64_t)v10);
            v9 -= 80;
            if (v15 >= sub_100047C20(v14 - 80))
              break;
            sub_10003FADC((__n128 *)v14, (__n128 *)(v14 - 80));
            v16 = *(_OWORD *)(v14 - 48);
            *(_OWORD *)(v14 + 16) = *(_OWORD *)(v14 - 64);
            *(_OWORD *)(v14 + 32) = v16;
            *(_WORD *)(v14 + 48) = *(_WORD *)(v14 - 32);
            v17 = *(_OWORD *)(v14 - 24);
            *(_QWORD *)(v14 - 24) = 0;
            *(_QWORD *)(v14 - 16) = 0;
            v18 = *(std::__shared_weak_count **)(v14 + 64);
            *(_OWORD *)(v14 + 56) = v17;
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            *(_QWORD *)(v14 + 72) = *(_QWORD *)(v14 - 8);
            if (v9 == a3)
            {
              v14 = a3;
              break;
            }
          }
        }
        sub_10003FADC((__n128 *)v14, v10);
        v23 = v5[6];
        v24 = v5[7];
        *(_WORD *)(v14 + 48) = v5[8].n128_u16[0];
        *(__n128 *)(v14 + 16) = v23;
        *(__n128 *)(v14 + 32) = v24;
        v25 = *(__int128 *)((char *)&v5[8] + 8);
        v5[8].n128_u64[1] = 0;
        v5[9].n128_u64[0] = 0;
        v26 = *(std::__shared_weak_count **)(v14 + 64);
        *(_OWORD *)(v14 + 56) = v25;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_QWORD *)(v14 + 72) = v5[9].n128_u64[1];
        v8 = (uint64_t)&v10[5];
        v9 = v12;
        v5 = v10;
      }
      while (&v10[5] != a2);
    }
  }
}

void sub_1002287D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002287E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002287FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = 0;
  if (a1 == a2)
  {
LABEL_7:
    if (a3 != a4)
    {
      v15 = 0;
      do
      {
        v16 = a3 + v15;
        sub_10003FADC((__n128 *)(a5 + v15), (__n128 *)(a3 + v15));
        v17 = *(_OWORD *)(a3 + v15 + 16);
        v18 = *(_OWORD *)(a3 + v15 + 32);
        *(_WORD *)(v19 + 48) = *(_WORD *)(a3 + v15 + 48);
        *(_OWORD *)(v19 + 16) = v17;
        *(_OWORD *)(v19 + 32) = v18;
        *(_OWORD *)(v19 + 56) = *(_OWORD *)(a3 + v15 + 56);
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 64) = 0;
        *(_QWORD *)(v19 + 72) = *(_QWORD *)(a3 + v15 + 72);
        ++v25;
        v15 += 80;
      }
      while (a3 + v15 != a4);
    }
  }
  else
  {
    v9 = a1;
    while (a3 != a4)
    {
      v12 = sub_100047C20(a3);
      if (v12 >= sub_100047C20(v9))
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)v9);
        v10 = *(_OWORD *)(v9 + 16);
        v11 = *(_OWORD *)(v9 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
        *(_OWORD *)(a5 + 16) = v10;
        *(_OWORD *)(a5 + 32) = v11;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(v9 + 72);
        ++v25;
        v9 += 80;
        a5 += 80;
        if (v9 == a2)
          goto LABEL_7;
      }
      else
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)a3);
        v13 = *(_OWORD *)(a3 + 16);
        v14 = *(_OWORD *)(a3 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a3 + 48);
        *(_OWORD *)(a5 + 16) = v13;
        *(_OWORD *)(a5 + 32) = v14;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(a3 + 56);
        *(_QWORD *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(a3 + 72);
        ++v25;
        a3 += 80;
        a5 += 80;
        if (v9 == a2)
          goto LABEL_7;
      }
    }
    if (v9 != a2)
    {
      v20 = 0;
      do
      {
        v21 = v9 + v20;
        sub_10003FADC((__n128 *)(a5 + v20), (__n128 *)(v9 + v20));
        v22 = *(_OWORD *)(v9 + v20 + 16);
        v23 = *(_OWORD *)(v9 + v20 + 32);
        *(_WORD *)(v24 + 48) = *(_WORD *)(v9 + v20 + 48);
        *(_OWORD *)(v24 + 16) = v22;
        *(_OWORD *)(v24 + 32) = v23;
        *(_OWORD *)(v24 + 56) = *(_OWORD *)(v9 + v20 + 56);
        *(_QWORD *)(v21 + 56) = 0;
        *(_QWORD *)(v21 + 64) = 0;
        *(_QWORD *)(v24 + 72) = *(_QWORD *)(v9 + v20 + 72);
        ++v25;
        v20 += 80;
      }
      while (v9 + v20 != a2);
    }
  }
}

void sub_1002289EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t i;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v28;

  v7 = a7;
  v28 = 0;
  if (a5 > a6)
  {
    v11 = a7;
    if (a2 != a3)
    {
      v12 = 0;
      do
      {
        v13 = a2 + v12;
        sub_10003FADC((__n128 *)(v7 + v12), (__n128 *)(a2 + v12));
        v14 = *(_OWORD *)(a2 + v12 + 16);
        v15 = *(_OWORD *)(a2 + v12 + 32);
        *(_WORD *)(v16 + 48) = *(_WORD *)(a2 + v12 + 48);
        *(_OWORD *)(v16 + 16) = v14;
        *(_OWORD *)(v16 + 32) = v15;
        *(_OWORD *)(v16 + 56) = *(_OWORD *)(a2 + v12 + 56);
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = 0;
        *(_QWORD *)(v16 + 72) = *(_QWORD *)(a2 + v12 + 72);
        ++v28;
        v12 += 80;
      }
      while (a2 + v12 != a3);
      v11 = v7 + v12;
    }
    sub_100228E4C(v11, v11, v7, v7, a2, a2, a1, a1, a3, a3);
    if (!v7)
      return;
LABEL_13:
    if (v28)
    {
      for (i = 0; i < v28; ++i)
      {
        v24 = *(std::__shared_weak_count **)(v7 + 64);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v7 += 80;
      }
    }
    return;
  }
  v17 = a7;
  if (a1 != a2)
  {
    v18 = 0;
    do
    {
      v19 = a1 + v18;
      sub_10003FADC((__n128 *)(v7 + v18), (__n128 *)(a1 + v18));
      v20 = *(_OWORD *)(a1 + v18 + 16);
      v21 = *(_OWORD *)(a1 + v18 + 32);
      *(_WORD *)(v22 + 48) = *(_WORD *)(a1 + v18 + 48);
      *(_OWORD *)(v22 + 16) = v20;
      *(_OWORD *)(v22 + 32) = v21;
      *(_OWORD *)(v22 + 56) = *(_OWORD *)(a1 + v18 + 56);
      *(_QWORD *)(v19 + 56) = 0;
      *(_QWORD *)(v19 + 64) = 0;
      *(_QWORD *)(v22 + 72) = *(_QWORD *)(a1 + v18 + 72);
      ++v28;
      v18 += 80;
    }
    while (a1 + v18 != a2);
    v17 = v7 + v18;
  }
  sub_100228C64(v7, v17, a2, a3, a1);
  v7 = a7;
  if (a7)
    goto LABEL_13;
}

void sub_100228C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100228094((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100228C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  double v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v9 = a1;
    while (a3 != a4)
    {
      v10 = sub_100047C20(a3);
      v11 = (_OWORD *)(a5 + 16);
      if (v10 >= sub_100047C20(v9))
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)v9);
        v18 = *(_OWORD *)(v9 + 16);
        v19 = *(_OWORD *)(v9 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
        *v11 = v18;
        *(_OWORD *)(a5 + 32) = v19;
        v20 = *(_OWORD *)(v9 + 56);
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        v21 = *(std::__shared_weak_count **)(a5 + 64);
        *(_OWORD *)(a5 + 56) = v20;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(v9 + 72);
        v9 += 80;
        a5 += 80;
        if (v9 == a2)
          return;
      }
      else
      {
        sub_10003FADC((__n128 *)a5, (__n128 *)a3);
        v12 = *(_OWORD *)(a3 + 16);
        v13 = *(_OWORD *)(a3 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a3 + 48);
        *v11 = v12;
        *(_OWORD *)(a5 + 32) = v13;
        v14 = *(_OWORD *)(a3 + 56);
        *(_QWORD *)(a3 + 56) = 0;
        *(_QWORD *)(a3 + 64) = 0;
        v15 = *(std::__shared_weak_count **)(a5 + 64);
        *(_OWORD *)(a5 + 56) = v14;
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        *(_QWORD *)(a5 + 72) = *(_QWORD *)(a3 + 72);
        a3 += 80;
        a5 += 80;
        if (v9 == a2)
          return;
      }
    }
    do
    {
      sub_10003FADC((__n128 *)a5, (__n128 *)v9);
      v24 = *(_OWORD *)(v9 + 16);
      v25 = *(_OWORD *)(v9 + 32);
      *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
      *(_OWORD *)(a5 + 16) = v24;
      *(_OWORD *)(a5 + 32) = v25;
      v26 = *(_OWORD *)(v9 + 56);
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v27 = *(std::__shared_weak_count **)(a5 + 64);
      *(_OWORD *)(a5 + 56) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      *(_QWORD *)(a5 + 72) = *(_QWORD *)(v9 + 72);
      v9 += 80;
      a5 += 80;
    }
    while (v9 != a2);
  }
}

void sub_100228E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  _OWORD *v21;
  __n128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  if (a2 == a4)
    return;
  v13 = a2;
  while (1)
  {
    v17 = a10;
    if (a6 == a8)
      break;
    v16 = a6 - 80;
    v18 = v13 - 80;
    v19 = sub_100047C20(v13 - 80);
    v20 = sub_100047C20(a6 - 80);
    a10 -= 80;
    v21 = (_OWORD *)(v17 - 64);
    v22 = (__n128 *)(v17 - 80);
    if (v19 < v20)
    {
      sub_10003FADC(v22, (__n128 *)(a6 - 80));
      v23 = *(_OWORD *)(a6 - 64);
      v24 = *(_OWORD *)(a6 - 48);
      *(_WORD *)(v17 - 32) = *(_WORD *)(a6 - 32);
      *v21 = v23;
      *(_OWORD *)(v17 - 48) = v24;
      v25 = *(_OWORD *)(a6 - 24);
      *(_QWORD *)(a6 - 24) = 0;
      *(_QWORD *)(a6 - 16) = 0;
      v26 = *(std::__shared_weak_count **)(v17 - 16);
      *(_OWORD *)(v17 - 24) = v25;
      if (!v26)
      {
        v15 = a6;
        goto LABEL_5;
      }
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      v15 = a6;
      v18 = v13;
      if (v28)
        goto LABEL_5;
      goto LABEL_17;
    }
    sub_10003FADC(v22, (__n128 *)(v13 - 80));
    v29 = *(_OWORD *)(v13 - 64);
    v30 = *(_OWORD *)(v13 - 48);
    *(_WORD *)(v17 - 32) = *(_WORD *)(v13 - 32);
    *v21 = v29;
    *(_OWORD *)(v17 - 48) = v30;
    v31 = *(_OWORD *)(v13 - 24);
    *(_QWORD *)(v13 - 24) = 0;
    *(_QWORD *)(v13 - 16) = 0;
    v26 = *(std::__shared_weak_count **)(v17 - 16);
    *(_OWORD *)(v17 - 24) = v31;
    if (v26)
    {
      v32 = (unint64_t *)&v26->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      v15 = v13;
      v16 = a6;
      v13 -= 80;
      if (v33)
        goto LABEL_5;
LABEL_17:
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      goto LABEL_4;
    }
    v15 = v13;
    v16 = a6;
LABEL_4:
    v13 = v18;
LABEL_5:
    *(_QWORD *)(v17 - 8) = *(_QWORD *)(v15 - 8);
    a6 = v16;
    if (v13 == a4)
      return;
  }
  do
  {
    v34 = v13 - 80;
    sub_10003FADC((__n128 *)(v17 - 80), (__n128 *)(v13 - 80));
    v35 = *(_OWORD *)(v13 - 64);
    v36 = *(_OWORD *)(v13 - 48);
    *(_WORD *)(v17 - 32) = *(_WORD *)(v13 - 32);
    *(_OWORD *)(v17 - 64) = v35;
    *(_OWORD *)(v17 - 48) = v36;
    v37 = *(_OWORD *)(v13 - 24);
    *(_QWORD *)(v13 - 24) = 0;
    *(_QWORD *)(v13 - 16) = 0;
    v38 = *(std::__shared_weak_count **)(v17 - 16);
    *(_OWORD *)(v17 - 24) = v37;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    *(_QWORD *)(v17 - 8) = *(_QWORD *)(v13 - 8);
    v13 -= 80;
    v17 -= 80;
  }
  while (v34 != a4);
}

uint64_t sub_100229050()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002290AC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100229108(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v4[3];
  _QWORD __src[3];

  memset(v4, 0, sizeof(v4));
  __src[2] = 1;
  __src[0] = 10;
  std::__sort<std::__less<char,char> &,char *>(__src, (char *)__src + 1, &__p);
  sub_100229448((uint64_t)v4, a2 + 32, __src, 0);
}

void sub_1002293B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  if (a21 >= 0x11)
  {
    if (a19)
      operator delete[]();
  }
  sub_1000FE50C(&a16);
  _Unwind_Resume(a1);
}

void sub_100229448(uint64_t a1, uint64_t a2, _QWORD *__src, int a4)
{
  size_t v7;
  void *__srca[2];
  size_t __n;
  _QWORD __dst[3];
  int v11;
  void *v12[2];
  size_t v13;

  v7 = __src[2];
  __n = v7;
  __srca[0] = 0;
  if (v7 < 0x11)
  {
    memcpy(__srca, __src, v7);
    v13 = __n;
    v12[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v12, __srca, __n);
      __dst[2] = v13;
      __dst[0] = 0;
      if (v13 <= 0x10)
      {
        memcpy(__dst, v12, v13);
        v11 = a4;
        sub_100229FE0(a1, a2, (uint64_t)__dst);
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_100229620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v17;

  if (a17)
    operator delete[]();
  if (v17 >= 0x11)
  {
    if (a10)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100229690(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  float v6;
  size_t prime;
  void *v8;
  BOOL v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33[2];
  __int128 v34;
  float v35;
  void *v36[2];
  __int128 v37;
  float v38;
  void *__p[2];
  uint64_t v40;
  _BYTE v41[1928];
  uint64_t **v42;
  std::__shared_weak_count *v43;
  _BYTE v44[1920];
  _BYTE v45[8];
  __int128 __src;
  uint64_t v47;

  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v38 = 1.0;
  v6 = (float)(unint64_t)(((char *)a3[1] - (char *)*a3) >> 4);
  prime = (unint64_t)v6;
  if ((unint64_t)v6 == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8((uint64_t)v36, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v6 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v6);
    v8 = v36[1];
    v9 = (void *)prime >= v36[1];
    if ((void *)prime > v36[1])
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v9)
  {
    v10 = vcvtps_u32_f32((float)*((unint64_t *)&v37 + 1) / v38);
    if ((unint64_t)v8 < 3
      || (v11 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      v10 = std::__next_prime(v10);
    }
    else
    {
      v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2)
        v10 = v12;
    }
    if (prime <= v10)
      prime = v10;
    if (prime < (unint64_t)v8)
      goto LABEL_17;
  }
LABEL_18:
  v13 = *a3;
  v14 = a3[1];
  if (*a3 != v14)
  {
    do
    {
      while (1)
      {
        sub_10007024C(v13, (uint64_t)v45);
        if (SHIBYTE(v47) < 0)
        {
          sub_10006CED8(__p, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          *(_OWORD *)__p = __src;
          v40 = v47;
        }
        sub_1000B53CC(v41, v45);
        sub_100073738(v45);
        sub_10008930C(&v42, (uint64_t)__p);
        sub_1000B53CC(v44, v41);
        sub_100229C38((uint64_t)v36, &v42, &v42);
        sub_100073738(v44);
        v15 = v43;
        if (v43)
        {
          p_shared_owners = (unint64_t *)&v43->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        sub_100073738(v41);
        if (SHIBYTE(v40) < 0)
          break;
        v13 += 2;
        if (v13 == v14)
          goto LABEL_31;
      }
      operator delete(__p[0]);
      v13 += 2;
    }
    while (v13 != v14);
  }
LABEL_31:
  v18 = v36[0];
  v19 = (unint64_t)v36[1];
  v36[0] = 0;
  v36[1] = 0;
  v33[0] = v18;
  v33[1] = (void *)v19;
  v34 = v37;
  v35 = v38;
  if (*((_QWORD *)&v37 + 1))
  {
    v20 = *(_QWORD *)(v37 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v20 >= v19)
        v20 %= v19;
    }
    else
    {
      v20 &= v19 - 1;
    }
    *((_QWORD *)v18 + v20) = &v34;
    v37 = 0uLL;
  }
  sub_10002CE44(a1, a2, (uint64_t *)v33);
  v21 = (_QWORD *)v34;
  while (v21)
  {
    v25 = v21;
    v21 = (_QWORD *)*v21;
    sub_100073738(v25 + 4);
    v26 = (std::__shared_weak_count *)v25[3];
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    operator delete(v25);
  }
  v22 = v33[0];
  v33[0] = 0;
  if (v22)
    operator delete(v22);
  v23 = (_QWORD *)v37;
  while (v23)
  {
    v29 = v23;
    v23 = (_QWORD *)*v23;
    sub_100073738(v29 + 4);
    v30 = (std::__shared_weak_count *)v29[3];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    operator delete(v29);
  }
  v24 = v36[0];
  v36[0] = 0;
  if (v24)
    operator delete(v24);
}

void sub_100229A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1001E45B8((uint64_t)va);
  sub_1001E45B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100229A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1001E45B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100229A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100073738(&STACK[0xF90]);
  sub_1001E45B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100229B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1001E45B8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100229B14(uint64_t a1, uint64_t a2)
{
  uint64_t ***v2;
  _QWORD *v3;
  const void ***v4;
  _BOOL8 result;

  if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a1 + 40))
    return 0;
  v2 = *(uint64_t ****)(a1 + 32);
  if (!v2)
    return 1;
  v3 = (_QWORD *)(a2 + 16);
  while (1)
  {
    v4 = sub_1000A9C6C(v3, v2 + 2);
    result = v4 != 0;
    if (!v4)
      break;
    v2 = (uint64_t ***)*v2;
    if (!v2)
      return 1;
  }
  return result;
}

uint64_t sub_100229B80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_100073738(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_100229BF0(uint64_t a1)
{
  sub_100073738(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

const void ***sub_100229C38(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  const void ****v11;
  const void ***v12;
  unint64_t v13;
  const void **v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;

  v7 = sub_1000B40D8((uint64_t)v34, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(const void *****)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == (const void **)v8)
            {
              if ((sub_1000790EC(v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (const void ***)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if ((sub_1000790EC(v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (const void ***)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x7A0uLL);
  v34[0] = v15;
  v34[1] = a1 + 16;
  v35 = 0;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_1000B53CC(v15 + 4, a3 + 2);
  v35 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        v22 = (_QWORD *)v34[0];
        if (v21)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        v22 = (_QWORD *)v34[0];
        if (v21)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v31 & v8;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v8));
      v22 = (_QWORD *)v34[0];
      if (v21)
        goto LABEL_29;
    }
LABEL_53:
    *v22 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v34[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v34[0])
    {
      v32 = *(_QWORD *)(*(_QWORD *)v34[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v32 >= v9)
          v32 %= v9;
      }
      else
      {
        v32 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v34[0];
    }
    goto LABEL_64;
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v22 = (_QWORD *)v34[0];
  if (!v21)
    goto LABEL_53;
LABEL_29:
  *v22 = *v21;
  *v21 = v34[0];
LABEL_64:
  v12 = (const void ***)v34[0];
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_100229FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100229FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
    sub_100342CC0(v4);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100229FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD v10[3];
  _QWORD v11[3];
  int v12;

  v4 = *(char *)(a2 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if (v5)
    v7 = *(_QWORD *)(a2 + 8);
  v8 = v6 + v7;
  v9 = *(_QWORD *)(a3 + 16);
  v11[2] = v9;
  v11[0] = 0;
  if (v9 < 0x11)
  {
    memcpy(v11, (const void *)a3, v9);
    v12 = *(_DWORD *)(a3 + 24);
    sub_10022A4F0(v10, v6, v8, (uint64_t)v11);
  }
  operator new[]();
}

void sub_10022A3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    sub_1000CDD68(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10022A450(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_10022A4A0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_10022A4F0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6;
  _QWORD v7[3];
  int v8;

  v6 = *(_QWORD *)(a4 + 16);
  v7[2] = v6;
  v7[0] = 0;
  if (v6 < 0x11)
  {
    memcpy(v7, (const void *)a4, v6);
    v8 = *(_DWORD *)(a4 + 24);
    sub_10022A6B4(a1, (uint64_t)v7);
  }
  operator new[]();
}

void sub_10022A664(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_10022A864(v1);
  _Unwind_Resume(a1);
}

void sub_10022A678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
  {
    if (a10)
      operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10022A6B4(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  int v5;
  void *__src[2];
  size_t __n;
  int v8;
  _QWORD v9[3];
  int v10;

  v4 = *(_QWORD *)(a2 + 16);
  __n = v4;
  __src[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(__src, (const void *)a2, v4);
    v5 = *(_DWORD *)(a2 + 24);
    v8 = v5;
    *a1 = 0;
    v9[2] = __n;
    v9[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v9, __src, __n);
      v10 = v5;
      sub_10022A8B4((uint64_t)a1, (uint64_t)v9);
    }
    operator new[]();
  }
  operator new[]();
}

void sub_10022A80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10022A864(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_10022A8B4(uint64_t a1, uint64_t a2)
{
  size_t v3;
  int v4;
  void *__src[2];
  size_t __n;
  int v7;
  _QWORD v8[3];
  int v9;

  v3 = *(_QWORD *)(a2 + 16);
  __n = v3;
  __src[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(__src, (const void *)a2, v3);
    v4 = *(_DWORD *)(a2 + 24);
    v7 = v4;
    v8[2] = __n;
    v8[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v8, __src, __n);
      v9 = v4;
      sub_10022AF3C((uint64_t)off_1003FEA88, (uint64_t)v8);
    }
    operator new[]();
  }
  operator new[]();
}

void sub_10022AA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022AA7C(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return sub_10022AAA4(result, a2, a3);
  a2[4] = 0;
  return result;
}

char *sub_10022AA9C(_QWORD **a1, char *a2, char *a3)
{
  return sub_10022AC74(*a1, a2, a3);
}

uint64_t sub_10022AAA4(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v5 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5)
            operator delete[]();
        }
        operator delete();
      }
      *(_QWORD *)a2 = 0;
      break;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_10022AC50()
{
  operator delete();
}

char *sub_10022AC74(_QWORD *__src, char *a2, char *a3)
{
  size_t v6;
  int v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v31;
  int v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  _QWORD v39[2];
  unint64_t v40;

  v6 = __src[2];
  v40 = v6;
  v39[0] = 0;
  if (v6 >= 0x11)
    operator new[]();
  memcpy(v39, __src, v6);
  if (a2 == a3)
  {
LABEL_28:
    a2 = a3;
    if (v40 < 0x11)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (v40 > 0x10)
  {
    while (1)
    {
      v14 = *a2;
      v15 = (char *)v39[0];
      v16 = v40;
      do
      {
        v17 = v16 >> 1;
        v18 = &v15[v16 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v20 < v14)
          v15 = v19;
        else
          v16 = v17;
      }
      while (v16);
      if (v15 != (char *)(v39[0] + v40) && *v15 <= v14)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  else
  {
    if (!v40)
      return a3;
    while (1)
    {
      v7 = *a2;
      v8 = v39;
      v9 = v40;
      do
      {
        v10 = v9 >> 1;
        v11 = (char *)v8 + (v9 >> 1);
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v7)
          v8 = v12;
        else
          v9 = v10;
      }
      while (v9);
      if (v8 != (_QWORD *)((char *)v39 + v40) && *(char *)v8 <= v7)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  if (v40 >= 0x11)
  {
LABEL_29:
    if (v39[0])
      operator delete[]();
  }
LABEL_31:
  if (a2 == a3)
    return a3;
  if (!*((_DWORD *)__src + 6))
  {
    v21 = __src[2];
    if (v21 > 0x10)
    {
      v31 = a2;
      do
      {
        v32 = *v31;
        v33 = (char *)*__src;
        v34 = __src[2];
        do
        {
          v35 = v34 >> 1;
          v36 = &v33[v34 >> 1];
          v38 = *v36;
          v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (v38 < v32)
            v33 = v37;
          else
            v34 = v35;
        }
        while (v34);
        if (v33 == (char *)(*__src + v21))
          break;
        if (*v33 > v32)
          break;
        ++v31;
      }
      while (v31 != a3);
    }
    else if (v21)
    {
      v22 = a2;
      do
      {
        v23 = *v22;
        v24 = (char *)__src;
        v25 = __src[2];
        do
        {
          v26 = v25 >> 1;
          v27 = &v24[v25 >> 1];
          v29 = *v27;
          v28 = v27 + 1;
          v25 += ~(v25 >> 1);
          if (v29 < v23)
            v24 = v28;
          else
            v25 = v26;
        }
        while (v25);
        if (v24 == (char *)__src + v21)
          break;
        if (*v24 > v23)
          break;
        ++v22;
      }
      while (v22 != a3);
    }
  }
  return a2;
}

void sub_10022AF3C(uint64_t a1, uint64_t a2)
{
  size_t v3;
  _QWORD __src[3];
  int v5;

  v3 = *(_QWORD *)(a2 + 16);
  __src[2] = v3;
  __src[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(__src, (const void *)a2, v3);
    v5 = *(_DWORD *)(a2 + 24);
    operator new();
  }
  operator new[]();
}

void sub_10022B084()
{
  operator delete();
}

_QWORD *sub_10022B0D8(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  void (*v10)(__int128 *, __int128 *, uint64_t);
  void (*v11)(__int128 *, __int128 *, uint64_t);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v19 = 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v19 = *(_QWORD *)a2;
    if ((v6 & 1) != 0)
    {
      v20 = *(_OWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v20, 0);
    }
  }
  v7 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 32);
  v23 = v7;
  v24 = *(_BYTE *)(a2 + 64);
  v13 = 0;
  v8 = *a3;
  if (*a3)
  {
    v13 = *a3;
    if ((v8 & 1) != 0)
    {
      v14 = *(_OWORD *)(a3 + 1);
      v15 = a3[3];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(a3 + 1, &v14, 0);
    }
  }
  v9 = *((_OWORD *)a3 + 3);
  v16 = *((_OWORD *)a3 + 2);
  v17 = v9;
  v18 = *((_BYTE *)a3 + 64);
  sub_10022B264((uint64_t)a1, &v19, (uint64_t)&v13);
  if (v13)
  {
    if ((v13 & 1) == 0)
    {
      v10 = *(void (**)(__int128 *, __int128 *, uint64_t))(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v10)
        v10(&v14, &v14, 2);
    }
    v13 = 0;
  }
  if (v19)
  {
    if ((v19 & 1) == 0)
    {
      v11 = *(void (**)(__int128 *, __int128 *, uint64_t))(v19 & 0xFFFFFFFFFFFFFFFELL);
      if (v11)
        v11(&v20, &v20, 2);
    }
  }
  return a1;
}

void sub_10022B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_10022A4A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10022B248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_10022A4A0(&a9);
  sub_10022A4A0(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10022B264(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  BOOL v7;
  int v8;
  const void *v9;
  const void *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _BYTE *v16;
  char *v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  void *__p[2];
  unint64_t v33;
  uint64_t v34;
  char v35;

  v5 = result;
  v34 = result;
  v35 = 0;
  v6 = a2 + 1;
  while (1)
  {
    v7 = *a2 && *((_BYTE *)a2 + 64) == 0;
    v8 = !v7;
    if (*(_QWORD *)a3)
      break;
    if ((v8 & 1) != 0)
      return result;
LABEL_19:
    v13 = a2[4];
    v12 = (char *)a2[5];
    v14 = (unint64_t)&v12[-v13];
    if ((unint64_t)&v12[-v13] >= 0x7FFFFFFFFFFFFFF8)
      sub_1000CDE30();
    if (v14 > 0x16)
    {
      v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v22 = v14 | 7;
      v23 = v22 + 1;
      v15 = operator new(v22 + 1);
      __p[1] = &v12[-v13];
      v33 = v23 | 0x8000000000000000;
      __p[0] = v15;
      if ((char *)v13 == v12)
      {
LABEL_31:
        v16 = v15;
        goto LABEL_34;
      }
    }
    else
    {
      HIBYTE(v33) = (_BYTE)v12 - v13;
      v15 = __p;
      if ((char *)v13 == v12)
        goto LABEL_31;
    }
    if (v14 < 0x20 || (unint64_t)v15 - v13 < 0x20)
    {
      v16 = v15;
      v17 = (char *)v13;
      do
      {
LABEL_33:
        v24 = *v17++;
        *v16++ = v24;
      }
      while (v17 != v12);
      goto LABEL_34;
    }
    v16 = (char *)v15 + (v14 & 0xFFFFFFFFFFFFFFE0);
    v17 = (char *)(v13 + (v14 & 0xFFFFFFFFFFFFFFE0));
    v18 = (__int128 *)(v13 + 16);
    v19 = v15 + 1;
    v20 = v14 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v21 = *v18;
      *(v19 - 1) = *(v18 - 1);
      *v19 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_33;
LABEL_34:
    *v16 = 0;
    v25 = *(_QWORD *)(v5 + 8);
    if (v25 >= *(_QWORD *)(v5 + 16))
    {
      v29 = sub_1001697DC((void **)v5, (uint64_t)__p);
      v30 = SHIBYTE(v33);
      *(_QWORD *)(v5 + 8) = v29;
      if (v30 < 0)
      {
        operator delete(__p[0]);
        v27 = a2[7];
        v28 = *a2;
        if (*a2)
        {
LABEL_39:
          result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))((v28 & 0xFFFFFFFFFFFFFFFELL) + 8))(v6, a2[6], v27);
          v27 = a2[7];
          if (result != v27)
            goto LABEL_2;
          goto LABEL_43;
        }
      }
      else
      {
        v27 = a2[7];
        v28 = *a2;
        if (*a2)
          goto LABEL_39;
      }
    }
    else
    {
      v26 = *(_OWORD *)__p;
      *(_QWORD *)(v25 + 16) = v33;
      *(_OWORD *)v25 = v26;
      *(_QWORD *)(v5 + 8) = v25 + 24;
      v27 = a2[7];
      v28 = *a2;
      if (*a2)
        goto LABEL_39;
    }
    v31 = v27;
    result = v27;
LABEL_43:
    if (v31 == v27 && a2[5] == v27)
      *((_BYTE *)a2 + 64) = 1;
LABEL_2:
    a2[4] = a2[6];
    a2[5] = result;
    a2[6] = v31;
  }
  if (((*(_BYTE *)(a3 + 64) == 0) & ~v8) == 0)
  {
    if (((v8 ^ (*(_BYTE *)(a3 + 64) != 0)) & 1) == 0)
      return result;
    goto LABEL_19;
  }
  v9 = (const void *)a2[4];
  v10 = *(const void **)(a3 + 32);
  v11 = a2[5] - (_QWORD)v9;
  if (v11 != *(_QWORD *)(a3 + 40) - (_QWORD)v10)
    goto LABEL_19;
  result = memcmp(v9, v10, v11);
  if ((_DWORD)result || a2[6] != *(_QWORD *)(a3 + 48) || a2[7] != *(_QWORD *)(a3 + 56))
    goto LABEL_19;
  return result;
}

void sub_10022B4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  sub_1000FCFAC(&a16);
  _Unwind_Resume(a1);
}

char *sub_10022B530(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_1000D02C0();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_1000CDEB8();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v13)
      return v10;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 1);
    v13 -= 16;
    *((_OWORD *)v9 - 1) = v14;
    v9 -= 16;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v13 != v15)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 16;
    }
    while (v13 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v10;
}

std::string *sub_10022B678@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10022B6A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10022B6C4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10022B6F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10022B710(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v16;
  __int128 v17;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 7);
  v4 = v3 + 1;
  if (v3 + 1 > 0x22222222222222)
    sub_1000D02C0();
  if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7);
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 7) >= 0x11111111111111)
    v6 = 0x22222222222222;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x22222222222222)
      sub_1000CDEB8();
    v7 = (char *)operator new(1920 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = &v7[1920 * v3];
  *((_QWORD *)&v17 + 1) = &v7[1920 * v6];
  sub_1000B53CC(v16, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_1000B53CC(&v16[v8], v8 + i))
    v8 -= 1920;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = &v16[v8];
  *(_QWORD *)&v17 = v16 + 1920;
  *(_OWORD *)(a1 + 1) = v17;
  if (v11 != v12)
  {
    v13 = v11 - 1920;
    do
    {
      (**(void (***)(char *))v13)(v13);
      v14 = v13 == v12;
      v13 -= 1920;
    }
    while (!v14);
  }
  if (v12)
    operator delete(v12);
  return v16 + 1920;
}

void sub_10022B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10019C528((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022B8CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10022B8DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

_QWORD *sub_10022B910(_QWORD *a1, uint64_t *a2, unsigned int *a3)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1003FEB08;
  v4 = a1 + 3;
  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1000C6938(v4, &v12, *a3);
  v8 = v13;
  if (!v13)
    return a1;
  v9 = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_10022B9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (a10)
    sub_100342CC0(a10);
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void sub_10022B9E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10022B9F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEB08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10022BA20()
{
  operator delete[]();
}

uint64_t sub_10022BA34()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10022BA90()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t **sub_10022BAEC(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10003CF10(v2);
    operator delete();
  }
  return a1;
}

void **sub_10022BB30(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  v2 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_10003CF10(v3 - 9);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10022BB8C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  sub_100078A24(a1 + 40);
  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_10022BC24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 244);
}

uint64_t sub_10022BC2C(uint64_t a1, double a2)
{
  double v2;
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  char *v9;

  if (a2 >= 0.5)
    return 0;
  v2 = 1.0 - *(double *)(a1 + 264);
  if (v2 <= 0.5)
    v3 = 2;
  else
    v3 = 3;
  if (v2 <= a2)
    v4 = 1;
  else
    v4 = v3;
  if (*(_BYTE *)(a1 + 288))
  {
    if (qword_100417ED8 == -1)
    {
      v5 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return 0;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
      v5 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return 0;
    }
    v6 = off_1003FECC8[v4 - 1];
    *(_DWORD *)buf = 136315138;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Yield status from probability/confidence is %s but forcing yield to OK", buf, 0xCu);
    return 0;
  }
  return v4;
}

BOOL sub_10022BD54(int a1)
{
  return (a1 & 0xFFFFFFFE) != 2;
}

void sub_10022BD64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  char v43;

  v2 = (uint64_t)(a1 + 47);
  v3 = a1 + 50;
  v4 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEC38;
  sub_10022EF34((uint64_t)&v43, (uint64_t)&v4[1], v2, v3);
  v41 = &v4[1].__vftable;
  v42 = v4;
  v6 = a1[1];
  if (a1[2] != v6)
  {
    v7 = a1[45];
    v38 = &v4[1].__vftable;
    v39 = v4;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    sub_10003E190((uint64_t)(a1 + 52), v7, (uint64_t)&v38);
    sub_10025B51C(v6, &v40);
    v9 = v40;
    v40 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v39;
    if (v39)
    {
      v11 = (unint64_t *)&v39->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[45] + 56))(a1[45]);
  if (!v13)
    goto LABEL_22;
  v14 = a1[1];
  if (0x8E38E38E38E38E39 * ((a1[2] - v14) >> 3) < 2)
    goto LABEL_22;
  v35 = v41;
  v36 = v42;
  if (v42)
  {
    v15 = (unint64_t *)&v42->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_10003E190((uint64_t)(a1 + 52), v13, (uint64_t)&v35);
  sub_10025B51C(v14 + 72, &v37);
  v17 = v37;
  v37 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v36;
  if (!v36)
    goto LABEL_22;
  v19 = (unint64_t *)&v36->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = a1[4];
    if (!v21)
      goto LABEL_33;
  }
  else
  {
LABEL_22:
    v21 = a1[4];
    if (!v21)
      goto LABEL_33;
  }
  v22 = a1[45];
  v32 = v41;
  v33 = v42;
  if (v42)
  {
    v23 = (unint64_t *)&v42->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  sub_10003E190((uint64_t)(a1 + 52), v22, (uint64_t)&v32);
  sub_10025B51C(v21, &v34);
  v25 = v34;
  v34 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
LABEL_33:
  v29 = v42;
  if (v42)
  {
    v30 = (unint64_t *)&v42->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_10022C030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v5 = v9;
  v9 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1000E095C((uint64_t)va);
  sub_1000E095C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10022C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19;

  v19 = a11;
  a11 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10022C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v8 = v12;
  v12 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1000E095C((uint64_t)va);
  sub_1000E095C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10022C0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022C0F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_QWORD **sub_10022C110(_QWORD **a1)
{
  _QWORD *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10003F6BC(v2);
    operator delete();
  }
  return a1;
}

void sub_10022C154()
{
  operator new();
}

void sub_10022C308()
{
  uint64_t v0;

  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  operator delete();
}

void sub_10022C360(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void (***v10)(void);
  void (**v11)(void);
  void (***v12)(void);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[4];
  if (v2 && a1[1] != a1[2])
  {
    v3 = sub_100050DB0(v2);
    v4 = sub_100050DB0(a1[1]);
    sub_100224544(v3, v4);
    v5 = (void **)a1[60];
    v6 = (void **)a1[61];
    if (v6 == v5)
    {
      a1[64] = 0;
      v13 = 0;
    }
    else
    {
      v7 = a1[63];
      v8 = &v5[v7 >> 7];
      v9 = *(uint64_t *)((char *)v5 + (((a1[64] + v7) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[64] + v7) & 0x7F);
      if ((char *)*v8 + 32 * (v7 & 0x7F) != (void *)v9)
      {
        v10 = (void (***)(void))((char *)*v8 + 32 * (v7 & 0x7F));
        do
        {
          v11 = *v10;
          v10 += 4;
          (*v11)();
          if ((char *)v10 - (_BYTE *)*v8 == 4096)
          {
            v12 = (void (***)(void))v8[1];
            ++v8;
            v10 = v12;
          }
        }
        while (v10 != (void (***)(void))v9);
        v5 = (void **)a1[60];
        v6 = (void **)a1[61];
      }
      a1[64] = 0;
      v13 = (char *)v6 - (char *)v5;
      if (v13 >= 0x11)
      {
        do
        {
          operator delete(*v5);
          v14 = a1[61];
          v5 = (void **)(a1[60] + 8);
          a1[60] = (uint64_t)v5;
          v13 = v14 - (_QWORD)v5;
        }
        while (v13 > 0x10);
      }
    }
    if (v13 >> 3 == 1)
    {
      v15 = 64;
    }
    else
    {
      if (v13 >> 3 != 2)
        return;
      v15 = 128;
    }
    a1[63] = v15;
  }
}

void sub_10022C4B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = sub_100050DB0(v1);
    sub_100224750(v2);
  }
}

void **sub_10022C4D4(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_1000BA0F0(v3 - 392);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_10022C52C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = *(unsigned __int8 *)(a1 + 72);
  v5 = a1 + 80;
  if (v4)
  {
    sub_1000CBA38(v5, a2);
    v7 = *(uint64_t **)(a1 + 8);
    v6 = *(uint64_t **)(a1 + 16);
    if (v7 == v6)
      return;
  }
  else
  {
    sub_1001A3BF0(v5, a2);
    *(_BYTE *)(a1 + 72) = 1;
    v7 = *(uint64_t **)(a1 + 8);
    v6 = *(uint64_t **)(a1 + 16);
    if (v7 == v6)
      return;
  }
  do
  {
    sub_10025B514(v7, a2);
    v7 += 9;
  }
  while (v7 != v6);
}

uint64_t sub_10022C5A4(uint64_t a1)
{
  _DWORD *v1;

  v1 = *(_DWORD **)(a1 + 360);
  if (v1[2])
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 40))(v1);
  else
    return 0;
}

uint64_t sub_10022C5C4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  double v14;
  double v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 16) != v4)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = 0;
    v9 = result + 376;
    do
    {
      v15 = sub_100078D94(v6[35]);
      v10 = sub_100078D84(v6[35]);
      v11 = v4 + v7;
      v14 = v10;
      v13 = v8 != 0;
      v12 = a3[1];
      if (v12 >= a3[2])
      {
        result = sub_10022FF5C(a3, v11, a2, (uint64_t)&v15, (uint64_t)&v14, (int *)&v13, v9);
      }
      else
      {
        sub_100078DA4(a3[1], v11, a2, v8 != 0, v9);
        result = v12 + 296;
        a3[1] = v12 + 296;
      }
      a3[1] = result;
      ++v8;
      v4 = v6[1];
      v7 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v6[2] - v4) >> 3));
  }
  return result;
}

void sub_10022C6D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  sub_10021CD54((void **)v1);
  _Unwind_Resume(a1);
}

void sub_10022C6EC(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

void sub_10022C700(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

void sub_10022C714(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022C728@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  double v10;
  double v11;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    v5 = result;
    v11 = sub_100078D94(*(_QWORD *)(result + 280));
    v10 = sub_100078D84(*(_QWORD *)(v5 + 280));
    v9 = 2;
    v7 = v5 + 376;
    v8 = a3[1];
    if (v8 >= a3[2])
    {
      result = sub_10023019C(a3, v3, a2, (uint64_t)&v11, (uint64_t)&v10, &v9, v7);
    }
    else
    {
      sub_100078DA4(a3[1], v3, a2, 2, v7);
      result = v8 + 296;
      a3[1] = v8 + 296;
    }
    a3[1] = result;
  }
  return result;
}

void sub_10022C7F4(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

void sub_10022C808(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  sub_10021CD54((void **)v1);
  _Unwind_Resume(a1);
}

void sub_10022C820(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

void sub_10022C834(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021CD54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022C848(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); v1 != i; v1 += 72)
  {
    v3 = sub_100050DB0(v1);
    result = nullsub_10(v3);
  }
  return result;
}

uint64_t sub_10022C894(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v10;
  void *__p[2];
  char v12;

  v4 = (_DWORD *)a1[45];
  if (!v4[2] || ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 40))(v4) & 1) == 0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v12 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v10);
  }
  v6 = a1[1];
  v5 = a1[2];
  if (v6 == v5)
    return 0;
  v7 = 0;
  do
  {
    v8 = sub_100050DB0(v6);
    v7 |= sub_100225230(v8, a2);
    v6 += 72;
  }
  while (v6 != v5);
  return v7 & 1;
}

void sub_10022C980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10022C99C(_QWORD *a1, int a2)
{
  if (sub_1001E3814((uint64_t)(a1 + 52), a2))
    sub_10022BD64(a1);
}

void sub_10022C9D4(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_10022CA00(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(_QWORD *)(a1 + 40) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(void **)(a1 + 8);
      if (v4 != v3)
      {
        do
        {
          v7 = *(_DWORD *)(v4 - 176);
          if (v7 == v7 >> 31)
          {
            if (*(_BYTE *)(v4 - 128))
              *(_BYTE *)(v4 - 128) = 0;
          }
          else
          {
            v6 = *(_QWORD *)(v4 - 168);
            if (v7 < 0)
            {
              if (v6)
                (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
            }
            else
            {
              (*(void (**)(uint64_t))v6)(v4 - 168);
            }
          }
          v4 -= 208;
        }
        while (v4 != v3);
        v5 = *(void **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = v3;
      operator delete(v5);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t sub_10022CAC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_10022CB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    sub_1001A3BF0(a1 + 88, a2 + 88);
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    sub_100043C90((_QWORD *)(a1 + 296), (uint64_t *)(a2 + 296));
    *(_BYTE *)(a1 + 288) = 1;
  }
  sub_1000BB28C(a1 + 352, a2 + 352);
  return a1;
}

void sub_10022CC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v1 + 80))
  {
    sub_10000CF0C(v1 + 88);
    *(_BYTE *)(v1 + 80) = 0;
  }
  sub_1000E095C(v3);
  sub_1000E095C(v2);
  sub_1000E095C(v1 + 24);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_10022CC84(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[8]) ^ ((0xC6A4A7935BD1E995 * a2[8]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[7]) ^ ((0xC6A4A7935BD1E995 * a2[7]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[6]) ^ ((0xC6A4A7935BD1E995 * a2[6]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[5]) ^ ((0xC6A4A7935BD1E995 * a2[5]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[4]) ^ ((0xC6A4A7935BD1E995 * a2[4]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[3]) ^ ((0xC6A4A7935BD1E995 * a2[3]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[2]) ^ ((0xC6A4A7935BD1E995 * a2[2]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[1]) ^ ((0xC6A4A7935BD1E995 * a2[1]) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *a2) ^ ((0xC6A4A7935BD1E995 * *a2) >> 47)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u))
     + 3864292196u;
  v3 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[17]) ^ ((0xC6A4A7935BD1E995 * a2[17]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[16]) ^ ((0xC6A4A7935BD1E995 * a2[16]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[15]) ^ ((0xC6A4A7935BD1E995 * a2[15]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[14]) ^ ((0xC6A4A7935BD1E995 * a2[14]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[13]) ^ ((0xC6A4A7935BD1E995 * a2[13]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[12]) ^ ((0xC6A4A7935BD1E995 * a2[12]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[11]) ^ ((0xC6A4A7935BD1E995 * a2[11]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[10]) ^ ((0xC6A4A7935BD1E995 * a2[10]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[9]) ^ ((0xC6A4A7935BD1E995 * a2[9]) >> 47))) ^ v2) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u))
     + 3864292196u;
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[19]) ^ ((0xC6A4A7935BD1E995 * a2[19]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[18]) ^ ((0xC6A4A7935BD1E995 * a2[18]) >> 47))) ^ v3) + 3864292196u))
       + 3864292196u;
}

void *sub_10022CE88@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  char *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  _DWORD *v17;
  int64_t v18;
  int v19;
  _QWORD *v20;
  char v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  v20 = a2;
  if (v3 == v4)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    do
    {
      v5 = *(_DWORD *)(v3 + 32);
      if (v5 == v5 >> 31)
      {
        v6 = *(_DWORD *)(v3 + 120);
      }
      else
      {
        if (v5 >= 0)
          v7 = v3 + 40;
        else
          v7 = *(_QWORD *)(v3 + 40);
        v6 = *(_DWORD *)(v7 + 96) + 2402;
      }
      v19 = v6;
      sub_10022CFEC((uint64_t *)&v20, &v19);
      v3 += 208;
    }
    while (v3 != v4);
    v8 = *a2;
    v9 = a2[1];
  }
  result = (void *)std::__sort<std::__less<int,int> &,int *>(v8, v9, &v21);
  v11 = (char *)a2[1];
  if ((char *)*a2 != v11)
  {
    v12 = (char *)(*a2 + 4);
    while (v12 != v11)
    {
      v13 = *((_DWORD *)v12 - 1);
      v14 = *(_DWORD *)v12;
      v12 += 4;
      if (v13 == v14)
      {
        v15 = v12 - 8;
        while (v12 != v11)
        {
          v16 = v13;
          v13 = *(_DWORD *)v12;
          if (v16 != *(_DWORD *)v12)
          {
            *((_DWORD *)v15 + 1) = v13;
            v15 += 4;
          }
          v12 += 4;
        }
        v17 = v15 + 4;
        v18 = v11 - (v15 + 4);
        if (v11 != v15 + 4)
        {
          if (v11 != (char *)v17 + v18)
            result = memmove(v15 + 4, (char *)v17 + v18, 0);
          a2[1] = v17;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_10022CFCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10022CFEC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_1000D02C0();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_1000CDEB8();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

_QWORD *sub_10022D15C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t ***v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  char v33;

  v7 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  v8 = sub_1000B40D8((uint64_t)v32, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      result = (_QWORD *)*v12;
      if (*v12)
      {
        v14 = *a2;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = result[1];
            if (v16 == v9)
            {
              if (result[2] == v14)
                return result;
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = result[1];
          if (v15 == v9)
          {
            if (result[2] == v14)
              return result;
          }
          else
          {
            if (v15 >= v10)
              v15 %= v10;
            if (v15 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x48uLL);
  v32[0] = v17;
  v32[1] = a1 + 16;
  v33 = 0;
  *v17 = 0;
  v17[1] = v9;
  sub_10022D4F8((uint64_t)(v17 + 2), a3);
  v33 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v21 = (_QWORD *)v32[0];
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v21 = (_QWORD *)v32[0];
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v30 & v9;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v9));
      v21 = (_QWORD *)v32[0];
      if (v20)
        goto LABEL_26;
    }
LABEL_50:
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v32[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v32[0])
    {
      v31 = *(_QWORD *)(*(_QWORD *)v32[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10)
          v31 %= v10;
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v32[0];
    }
    goto LABEL_61;
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v21 = (_QWORD *)v32[0];
  if (!v20)
    goto LABEL_50;
LABEL_26:
  *v21 = *v20;
  *v20 = v32[0];
LABEL_61:
  result = (_QWORD *)v32[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10022D4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022D5CC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10022D4E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022D5CC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10022D4F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)a2[1];
  v5 = (_BYTE *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_1000D02C0();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1001E3558((__n128 **)(a1 + 32), (__n128 *)a2[4], (__n128 *)a2[5], 0xCCCCCCCCCCCCCCCDLL * ((a2[5] - a2[4]) >> 4));
  return a1;
}

void sub_10022D5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10022D5CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[6];
      if (v3)
      {
        v4 = v2[7];
        v5 = (void *)v2[6];
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 16);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 80;
          }
          while (v4 != v3);
          v5 = (void *)v2[6];
        }
        v2[7] = v3;
        operator delete(v5);
      }
      v9 = (void *)v2[3];
      if (v9)
      {
        v2[4] = v9;
        operator delete(v9);
      }
    }
    operator delete(v2);
  }
}

uint64_t sub_10022D694(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[6];
      if (v6)
      {
        v7 = v2[7];
        v8 = (void *)v2[6];
        if (v7 != v6)
        {
          do
          {
            v9 = *(std::__shared_weak_count **)(v7 - 16);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(p_shared_owners);
              while (__stlxr(v11 - 1, p_shared_owners));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v8 = (void *)v2[6];
        }
        v2[7] = v6;
        operator delete(v8);
      }
      v12 = (void *)v2[3];
      if (v12)
      {
        v2[4] = v12;
        operator delete(v12);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_10022D774(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)*v6;
          operator delete(v6);
          v6 = v7;
        }
        while (v7);
      }
      v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8)
        operator delete(v8);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_10022D7F4(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = operator new(0x40uLL);
  *v27 = 0;
  v27[1] = v6;
  *((_DWORD *)v27 + 4) = *a3;
  sub_10022DBD4((uint64_t)(v27 + 3), (uint64_t)(a3 + 2));
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v25 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v25 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v25 & v6));
      v16 = v27;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v27;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v27;
LABEL_61:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10022DB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022DB68((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022DB54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022DB68((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022DB68(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10022DBD4(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10022DD14(a1, i + 2, i + 2);
  return a1;
}

void sub_10022DCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022CAC0(v1);
  _Unwind_Resume(a1);
}

void sub_10022DD00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022CAC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10022DD14(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_10022E058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const void **sub_10022E06C(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  const void ***v11;
  const void **v12;
  unint64_t v13;
  unint64_t v14;
  const void ***v15;
  const void **v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  const void ***v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v35[2];
  char v36;

  v7 = sub_1000B40D8((uint64_t)v35, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(const void ****)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = (unint64_t)v12[1];
            if (v14 == v8)
            {
              if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (const void **)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (const void **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (const void ***)(a1 + 16);
  v16 = (const void **)operator new(0x30uLL);
  v12 = v16;
  v35[0] = v16;
  v35[1] = a1 + 16;
  *v16 = 0;
  v16[1] = (const void *)v8;
  v17 = *(unint64_t **)(a3 + 8);
  v16[2] = *(const void **)a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = v17 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  v36 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(const void ****)(*(_QWORD *)a1 + 8 * v3);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(const void ****)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(const void ****)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(const void ****)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v3) = v15;
  if (*v12)
  {
    v33 = *((_QWORD *)*v12 + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (const void ***)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_10022E3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10022E3C8(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  int8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = operator new(0x38uLL);
  *v27 = 0;
  v27[1] = v6;
  *((_DWORD *)v27 + 4) = *(_DWORD *)a3;
  v27[3] = *(_QWORD *)(a3 + 8);
  sub_10022E800(v27 + 4, a3 + 16);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v21)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v21)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v21 < 3uLL || (v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < *(_QWORD *)&v21)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v25 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v16 = v27;
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v25 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v25 & v6));
      v16 = v27;
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v16 = v27;
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *v16 = *v15;
  *v15 = v27;
LABEL_61:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10022E71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022E744((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022E730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022E744((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022E744(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[4];
      if (v3)
      {
        v4 = v2[5];
        v5 = (void *)v2[4];
        if (v4 != v3)
        {
          do
          {
            v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = (void *)v2[4];
        }
        v2[5] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_10022E800(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_1000D02C0();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_10022E8A0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_100343ED0((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10022E8C0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10022E8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

const void **sub_10022E90C(uint64_t a1, uint64_t ***a2, const void **a3, const void **a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void ***v13;
  const void **v14;
  unint64_t v15;
  unint64_t v16;
  const void ***v17;
  const void **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  const void ***v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v9 = sub_1000B40D8((uint64_t)v40, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (const void **)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (const void ***)(a1 + 16);
  v18 = (const void **)operator new(0x30uLL);
  v14 = v18;
  v40[0] = v18;
  v40[1] = a1 + 16;
  *v18 = 0;
  v18[1] = (const void *)v10;
  v19 = (unint64_t *)a3[1];
  v18[2] = *a3;
  v18[3] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (unint64_t *)a4[1];
  v18[4] = *a4;
  v18[5] = v22;
  if (v22)
  {
    v23 = v22 + 1;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v41 = 1;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (v11 && (float)(v26 * (float)v11) >= v25)
  {
    v27 = *(_QWORD *)a1;
    v28 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v28)
    {
LABEL_32:
      *v14 = *v28;
LABEL_67:
      *v28 = v14;
      goto LABEL_68;
    }
  }
  else
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v25 / v26);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_43:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v37 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v27 = *(_QWORD *)a1;
        v28 = *(const void ****)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v28)
          goto LABEL_32;
      }
      else
      {
        v4 = v10;
        v27 = *(_QWORD *)a1;
        v28 = *(const void ****)(*(_QWORD *)a1 + 8 * v10);
        if (v28)
          goto LABEL_32;
      }
    }
    else
    {
      v4 = v37 & v10;
      v27 = *(_QWORD *)a1;
      v28 = *(const void ****)(*(_QWORD *)a1 + 8 * (v37 & v10));
      if (v28)
        goto LABEL_32;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v27 + 8 * v4) = v17;
  if (*v14)
  {
    v38 = *((_QWORD *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11)
        v38 %= v11;
    }
    else
    {
      v38 &= v11 - 1;
    }
    v28 = (const void ***)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_67;
  }
LABEL_68:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_10022EC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022EC8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022EC8C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_10022ED40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEBE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10022ED50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEBE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10022ED88(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void (***v7)(void);
  void (**v8)(void);
  void (***v9)(void);
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v10 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 >> 7];
    v6 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v4) & 0x7F);
    if ((char *)*v5 + 32 * (v4 & 0x7F) != (void *)v6)
    {
      v7 = (void (***)(void))((char *)*v5 + 32 * (v4 & 0x7F));
      do
      {
        v8 = *v7;
        v7 += 4;
        (*v8)();
        if ((char *)v7 - (_BYTE *)*v5 == 4096)
        {
          v9 = (void (***)(void))v5[1];
          ++v5;
          v7 = v9;
        }
      }
      while (v7 != (void (***)(void))v6);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = *(void ***)(a1 + 16);
        v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v2;
        v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 64;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    v12 = 128;
LABEL_15:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10022EEF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10022EF04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEC38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10022EF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p;
  char *v22;

  sub_1000BDD98(&__p, a3);
  v6 = (std::__shared_weak_count *)a4[1];
  v19 = *a4;
  v20 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9.n128_f64[0] = sub_1000C43D0(a2, (uint64_t)&__p, (uint64_t)&v19);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)__p;
  if (__p)
  {
    v14 = v22;
    v15 = __p;
    if (v22 != __p)
    {
      do
      {
        v16 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v9);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = __p;
    }
    v22 = v13;
    operator delete(v15);
  }
}

void sub_10022F048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_1000E095C((uint64_t)va);
  sub_1000F7D3C((void **)va1);
  _Unwind_Resume(a1);
}

void sub_10022F064(uint64_t a1, char **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;

  sub_1000C91C4((uint64_t)(a2 + 5));
  v3 = (std::__shared_weak_count *)a2[4];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *a2;
    if (!*a2)
      return;
  }
  else
  {
LABEL_5:
    v6 = *a2;
    if (!*a2)
      return;
  }
  v7 = a2[1];
  if (v7 == v6)
  {
    a2[1] = v6;
    operator delete(v6);
  }
  else
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v7 - 1);
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v7 -= 16;
    }
    while (v7 != v6);
    v11 = *a2;
    a2[1] = v6;
    operator delete(v11);
  }
}

uint64_t sub_10022F15C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v30;
  char *v31;

  v9 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v10 = v9 + 1;
  if (v9 + 1 > 0x38E38E38E38E38ELL)
    sub_1000D02C0();
  v17 = a2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v10)
    v10 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v18 = 0x38E38E38E38E38ELL;
  else
    v18 = v10;
  if (v18)
  {
    if (v18 > 0x38E38E38E38E38ELL)
      sub_1000CDEB8();
    v19 = (char *)operator new(72 * v18);
    v17 = a2;
  }
  else
  {
    v19 = 0;
  }
  v30 = (uint64_t)&v19[72 * v9];
  v31 = &v19[72 * v18];
  sub_10022F364((uint64_t)(a1 + 2), v30, v17, a3, a4, a5, a6, a7, a8);
  v20 = v30;
  v21 = v30 + 72;
  v23 = (uint64_t *)*a1;
  v22 = (uint64_t *)a1[1];
  if (v22 == (uint64_t *)*a1)
  {
    *a1 = v30;
    a1[1] = v21;
    a1[2] = (uint64_t)v31;
  }
  else
  {
    do
    {
      v24 = *(v22 - 9);
      v22 -= 9;
      *v22 = 0;
      *(_QWORD *)(v20 - 72) = v24;
      v20 -= 72;
      v25 = v22[1];
      v22[1] = 0;
      *(_QWORD *)(v20 + 8) = v25;
      v26 = *((_OWORD *)v22 + 1);
      v22[2] = 0;
      *(_OWORD *)(v20 + 16) = v26;
      *(_QWORD *)(v20 + 32) = v22[4];
      v22[3] = 0;
      v22[4] = 0;
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v22 + 5);
      v22[5] = 0;
      v22[6] = 0;
      *(_OWORD *)(v20 + 56) = *(_OWORD *)(v22 + 7);
    }
    while (v22 != v23);
    v27 = (uint64_t *)*a1;
    v22 = (uint64_t *)a1[1];
    *a1 = v20;
    a1[1] = v21;
    a1[2] = (uint64_t)v31;
    if (v22 != v27)
    {
      do
        v22 = sub_10003CF10(v22 - 9);
      while (v22 != v27);
      v22 = v27;
    }
  }
  if (v22)
    operator delete(v22);
  return v30 + 72;
}

void sub_10022F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10022F5C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022F364(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;

  v9 = *a3;
  *a3 = 0;
  v24 = v9;
  v22 = *a6;
  if (v22)
    operator new();
  v23 = 0;
  *a6 = 0;
  v10 = (std::__shared_weak_count *)a7[1];
  v20 = *a7;
  v21 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10003E3DC(a2, &v24, a4, a5, &v22, &v20, *a8, *a9);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  result = v24;
  v24 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10022F4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

void sub_10022F534(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10022F558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI17ParticleGeneratorEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteI17ParticleGeneratorEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI17ParticleGeneratorEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI17ParticleGeneratorEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_10022F5C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    sub_10003CF10((uint64_t *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10022F614(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 392;
    sub_1000BA0F0(i - 392);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10022F664(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  __int128 v15;

  v3 = 0x7D6343EB1A1F58D1 * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xA72F05397829CBLL)
    sub_1000D02C0();
  if (0xFAC687D6343EB1A2 * ((uint64_t)(a1[2] - *a1) >> 3) > v4)
    v4 = 0xFAC687D6343EB1A2 * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x7D6343EB1A1F58D1 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x5397829CBC14E5)
    v6 = 0xA72F05397829CBLL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xA72F05397829CBLL)
      sub_1000CDEB8();
    v7 = (char *)operator new(392 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = (uint64_t)&v7[392 * v3];
  *((_QWORD *)&v15 + 1) = &v7[392 * v6];
  sub_1000BAE08(v14, a2);
  v8 = 0;
  v10 = (void *)*a1;
  for (i = a1[1]; (void *)(i + v8) != v10; sub_10022CB08(v8 + v14, v8 + i))
    v8 -= 392;
  v12 = (void *)*a1;
  v11 = a1[1];
  *a1 = v14 + v8;
  *(_QWORD *)&v15 = v14 + 392;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; v11 = sub_1000BA0F0(v11 - 392))
    ;
  if (v12)
    operator delete(v12);
  return v14 + 392;
}

void sub_10022F7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10022F614((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022F81C(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *i;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  _QWORD v9[10];
  char v10;
  uint64_t v11;

  sub_1000FC5A4((uint64_t)v7);
  sub_1000F0508(&v8, (uint64_t)"[", 1);
  v3 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    std::ostream::operator<<(&v8, *v3);
    for (i = v3 + 1; i != v2; ++i)
    {
      sub_1000F0508(&v8, (uint64_t)", ", 2);
      std::ostream::operator<<(&v8, *i);
    }
  }
  sub_1000F0508(&v8, (uint64_t)"]", 1);
  std::stringbuf::str(v9);
  *(_QWORD *)((char *)v7
  v8 = v5;
  if (v10 < 0)
    operator delete((void *)v9[8]);
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_10022F950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022F964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022F978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022F98C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022F9A0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_10022FEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_10022FF18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10022FF2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10022FF44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022FF5C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  __int128 v23;

  v8 = 0x14C1BACF914C1BADLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0xDD67C8A60DD67CLL)
    sub_1000D02C0();
  if (0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v9)
    v9 = 0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL)
    v14 = 0xDD67C8A60DD67CLL;
  else
    v14 = v9;
  if (v14)
  {
    if (v14 > 0xDD67C8A60DD67CLL)
      sub_1000CDEB8();
    v15 = (char *)operator new(296 * v14);
  }
  else
  {
    v15 = 0;
  }
  v22 = (uint64_t)&v15[296 * v8];
  *((_QWORD *)&v23 + 1) = &v15[296 * v14];
  sub_100078DA4(v22, a2, a3, *a6, a7);
  v16 = 0;
  v18 = (_QWORD *)*a1;
  for (i = a1[1]; (_QWORD *)(i + v16) != v18; sub_10007A188(v16 + v22, v16 + i))
    v16 -= 296;
  v20 = (_QWORD *)*a1;
  v19 = (_QWORD *)a1[1];
  *a1 = v22 + v16;
  *(_QWORD *)&v23 = v22 + 296;
  for (*(_OWORD *)(a1 + 1) = v23; v19 != v20; v19 = sub_1000788EC(v19 - 37))
    ;
  if (v20)
    operator delete(v20);
  return v22 + 296;
}

void sub_100230108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10023014C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023014C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    sub_1000788EC((_QWORD *)(i - 296));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10023019C(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  __int128 v23;

  v8 = 0x14C1BACF914C1BADLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0xDD67C8A60DD67CLL)
    sub_1000D02C0();
  if (0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v9)
    v9 = 0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL)
    v14 = 0xDD67C8A60DD67CLL;
  else
    v14 = v9;
  if (v14)
  {
    if (v14 > 0xDD67C8A60DD67CLL)
      sub_1000CDEB8();
    v15 = (char *)operator new(296 * v14);
  }
  else
  {
    v15 = 0;
  }
  v22 = (uint64_t)&v15[296 * v8];
  *((_QWORD *)&v23 + 1) = &v15[296 * v14];
  sub_100078DA4(v22, a2, a3, *a6, a7);
  v16 = 0;
  v18 = (_QWORD *)*a1;
  for (i = a1[1]; (_QWORD *)(i + v16) != v18; sub_10007A188(v16 + v22, v16 + i))
    v16 -= 296;
  v20 = (_QWORD *)*a1;
  v19 = (_QWORD *)a1[1];
  *a1 = v22 + v16;
  *(_QWORD *)&v23 = v22 + 296;
  for (*(_OWORD *)(a1 + 1) = v23; v19 != v20; v19 = sub_1000788EC(v19 - 37))
    ;
  if (v20)
    operator delete(v20);
  return v22 + 296;
}

void sub_100230348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10023014C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10023038C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002303BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1002303D8(void *__p)
{
  operator delete(__p);
}

uint64_t sub_1002303E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100230400()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

uint64_t sub_100230410()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023046C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002304C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_100230570(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_100230578@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  char v48[8];
  float64x2_t v49;
  uint64_t v50;
  void *v51;
  void *__p;
  char v53;
  _BYTE v54[32];
  __int128 v55;
  __int16 v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  _BYTE v60[32];
  int v61;
  char v62;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v7 = (int8x8_t)a1[6];
  if (v7)
  {
    v8 = *(int *)(result + 1616);
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *(int *)(result + 1616);
      if (*(_QWORD *)&v7 <= v8)
        v10 = v8 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v8;
    }
    v11 = a1[5];
    v12 = *(uint64_t ***)(v11 + 8 * v10);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = *(_QWORD *)&v7 - 1;
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v8)
                goto LABEL_23;
            }
            else if ((v15 & v14) != v10)
            {
              goto LABEL_21;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_21;
          }
        }
        while (1)
        {
          v16 = v13[1];
          if (v16 == v8)
            break;
          if (v16 >= *(_QWORD *)&v7)
            v16 %= *(_QWORD *)&v7;
          if (v16 != v10)
            goto LABEL_21;
LABEL_16:
          v13 = (uint64_t *)*v13;
          if (!v13)
            goto LABEL_21;
        }
        if (*((_DWORD *)v13 + 4) != (_DWORD)v8)
          goto LABEL_16;
LABEL_23:
        if (v9.u32[0] > 1uLL)
        {
          v17 = *(int *)(result + 1616);
          if (*(_QWORD *)&v7 <= v8)
            v17 = v8 % *(_QWORD *)&v7;
        }
        else
        {
          v17 = v14 & v8;
        }
        v18 = *(uint64_t ***)(v11 + 8 * v17);
        if (!v18 || (v19 = *v18) == 0)
LABEL_77:
          sub_10018CB98("unordered_map::at: key not found");
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = v19[1];
            if (v20 == v8)
            {
              if (*((_DWORD *)v19 + 4) == (_DWORD)v8)
                goto LABEL_35;
            }
            else if ((v20 & v14) != v17)
            {
              goto LABEL_77;
            }
            v19 = (uint64_t *)*v19;
            if (!v19)
              goto LABEL_77;
          }
        }
        while (2)
        {
          v46 = v19[1];
          if (v46 == v8)
          {
            if (*((_DWORD *)v19 + 4) == (_DWORD)v8)
            {
LABEL_35:
              *(_OWORD *)(a3 + 16) = 0u;
              *(_OWORD *)(a3 + 32) = 0u;
              *(_OWORD *)a3 = 0u;
              memset(v60, 0, sizeof(v60));
              v61 = 1065353216;
              v62 = 0;
              v21 = (_QWORD *)v19[5];
              if (!v21)
                return sub_1000C91C4((uint64_t)v60);
              while (1)
              {
                v50 = v21[2];
                v22 = sub_10023179C(a1, &v50);
                if (!v22)
                  sub_10018CB98("unordered_map::at: key not found");
                sub_1001D550C((uint64_t)v60, v50, *a2, (uint64_t)v48);
                v24 = v22[6];
                v23 = v22[7];
                while (v24 != v23)
                {
                  if (v50 != *(_QWORD *)(v24 + 56))
                  {
                    v53 = 0;
                    LOBYTE(__p) = 0;
                    memset(v54, 0, 24);
                    std::string::assign((std::string *)v54, "The floors should be the same.");
                    sub_100174738((uint64_t)&__p, (uint64_t)v54, 1);
                    if ((v54[23] & 0x80000000) != 0)
                      operator delete(*(void **)v54);
                    if (v53 < 0)
                      operator delete(__p);
                    sub_1000F2AE4((uint64_t)&v51);
                  }
                  sub_10003FADC((__n128 *)v54, (__n128 *)v24);
                  v25 = *(_OWORD *)(v24 + 16);
                  v26 = *(_OWORD *)(v24 + 32);
                  v56 = *(_WORD *)(v24 + 48);
                  *(_OWORD *)&v54[16] = v25;
                  v55 = v26;
                  v27 = *(std::__shared_weak_count **)(v24 + 64);
                  v57 = *(_QWORD *)(v24 + 56);
                  v58 = v27;
                  if (v27)
                  {
                    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
                    do
                      v29 = __ldxr(p_shared_owners);
                    while (__stxr(v29 + 1, p_shared_owners));
                  }
                  v59 = *(_QWORD *)(v24 + 72);
                  *(float64x2_t *)&v54[16] = vaddq_f64(v49, *(float64x2_t *)&v54[16]);
                  v30 = a2[1];
                  *(_QWORD *)&v47 = *a2;
                  *((_QWORD *)&v47 + 1) = v30;
                  if (v30)
                  {
                    v31 = (unint64_t *)(v30 + 8);
                    do
                      v32 = __ldxr(v31);
                    while (__stxr(v32 + 1, v31));
                  }
                  sub_100223E98((uint64_t)v54, &v47);
                  v33 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
                  if (!*((_QWORD *)&v47 + 1))
                    goto LABEL_51;
                  v34 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 - 1, v34));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                    v36 = *(_QWORD *)(a3 + 32);
                    if (v36 >= *(_QWORD *)(a3 + 40))
                    {
LABEL_57:
                      v42 = sub_1002318E4((void **)(a3 + 24), (__n128 *)v54);
                      goto LABEL_58;
                    }
                  }
                  else
                  {
LABEL_51:
                    v36 = *(_QWORD *)(a3 + 32);
                    if (v36 >= *(_QWORD *)(a3 + 40))
                      goto LABEL_57;
                  }
                  sub_10003FADC((__n128 *)v36, (__n128 *)v54);
                  v37 = *(_OWORD *)&v54[16];
                  v38 = v55;
                  *(_WORD *)(v36 + 48) = v56;
                  *(_OWORD *)(v36 + 16) = v37;
                  *(_OWORD *)(v36 + 32) = v38;
                  *(_QWORD *)(v36 + 56) = v57;
                  v39 = v58;
                  *(_QWORD *)(v36 + 64) = v58;
                  if (v39)
                  {
                    v40 = (unint64_t *)&v39->__shared_owners_;
                    do
                      v41 = __ldxr(v40);
                    while (__stxr(v41 + 1, v40));
                  }
                  *(_QWORD *)(v36 + 72) = v59;
                  v42 = (char *)(v36 + 80);
                  *(_QWORD *)(a3 + 32) = v36 + 80;
LABEL_58:
                  *(_QWORD *)(a3 + 32) = v42;
                  v43 = v58;
                  if (v58)
                  {
                    v44 = (unint64_t *)&v58->__shared_owners_;
                    do
                      v45 = __ldaxr(v44);
                    while (__stlxr(v45 - 1, v44));
                    if (!v45)
                    {
                      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                      std::__shared_weak_count::__release_weak(v43);
                    }
                  }
                  v24 += 80;
                }
                sub_100231B74((unint64_t *)a3, *(void **)(a3 + 8), (char *)v22[3], (char *)v22[4], (uint64_t)(v22[4] - v22[3]) >> 3);
                nullsub_23(v48);
                v21 = (_QWORD *)*v21;
                if (!v21)
                  return sub_1000C91C4((uint64_t)v60);
              }
            }
          }
          else
          {
            if (v46 >= *(_QWORD *)&v7)
              v46 %= *(_QWORD *)&v7;
            if (v46 != v17)
              goto LABEL_77;
          }
          v19 = (uint64_t *)*v19;
          if (!v19)
            goto LABEL_77;
          continue;
        }
      }
    }
  }
LABEL_21:
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

void sub_100230A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (a22 < 0)
    operator delete(__p);
  nullsub_23(&a12);
  sub_1000C91C4((uint64_t)&a42);
  sub_1002304C8(v42);
  _Unwind_Resume(a1);
}

char *sub_100230B10(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t ***v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v33[2];
  char v34;

  v8 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  v9 = sub_1000B40D8((uint64_t)v33, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        v15 = *a2;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v14 + 1);
            if (v17 == v9)
            {
              if (*((_QWORD *)v14 + 2) == v15)
                return v14;
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = *((_QWORD *)v14 + 1);
          if (v16 == v9)
          {
            if (*((_QWORD *)v14 + 2) == v15)
              return v14;
          }
          else
          {
            if (v16 >= v11)
              v16 %= v11;
            if (v16 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x48uLL);
  v33[0] = v14;
  v33[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  v34 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *(_QWORD *)v14 = *v22;
LABEL_61:
      *v22 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v18;
  *v18 = v14;
  *(_QWORD *)(v21 + 8 * v4) = v18;
  if (*(_QWORD *)v14)
  {
    v31 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100230E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022D5CC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_100230E74(void **a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  __n128 v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  char *v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 *v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __n128 *v29;
  __n128 *v30;
  char *v31;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_1000D02C0();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_1000CDEB8();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v29 = (__n128 *)&v7[10 * v3];
  v31 = (char *)&v7[10 * v6];
  sub_10003FADC(v29, a2);
  v8 = a2[2];
  v29[1] = a2[1];
  v29[2] = v8;
  v29[3].n128_u16[0] = a2[3].n128_u16[0];
  v9 = a2[4].n128_u64[0];
  v29[3].n128_u64[1] = a2[3].n128_u64[1];
  v29[4].n128_u64[0] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  v12 = (char *)&v7[10 * v3];
  v13 = (char *)&v29[5];
  v15 = (__n128 *)*a1;
  v14 = (__n128 *)a1[1];
  if (v14 == *a1)
  {
    v24 = (__n128 *)a1[1];
  }
  else
  {
    v16 = v29;
    do
    {
      v17 = v14 - 5;
      sub_10003FADC(v16 - 5, v14 - 5);
      v19 = v14[-4];
      v20 = v14[-3];
      v16[-2].n128_u16[0] = v14[-2].n128_u16[0];
      v16[-4] = v19;
      v16[-3] = v20;
      v16[-2].n128_u64[1] = v14[-2].n128_u64[1];
      v21 = v14[-1].n128_u64[0];
      v16[-1].n128_u64[0] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v16[-1].n128_u64[1] = v14[-1].n128_u64[1];
      v16 = (__n128 *)v18;
      v14 -= 5;
    }
    while (v17 != v15);
    v24 = (__n128 *)*a1;
    v14 = (__n128 *)a1[1];
    v12 = v18;
    v13 = (char *)&v29[5];
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v31;
  if (v14 == v24)
  {
    if (v14)
LABEL_25:
      operator delete(v14);
  }
  else
  {
    do
    {
      v30 = v14 - 5;
      v26 = (std::__shared_weak_count *)v14[-1].n128_u64[0];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v14 -= 5;
    }
    while (v30 != v24);
    v14 = v24;
    if (v24)
      goto LABEL_25;
  }
  return v13;
}

void sub_1002310C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002243F8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100231104(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*(_QWORD *)v11)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100231430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10022DB68((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100231444(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_100231788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10023179C(_QWORD *a1, _QWORD *a2)
{
  uint64_t ***v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;

  v4 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  v5 = sub_1000B40D8((uint64_t)&v15, v4);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return v9;
  v9 = (_QWORD *)*v9;
  if (!v9)
    return v9;
  v11 = *a2;
  if (v7.u32[0] >= 2uLL)
  {
    do
    {
      v13 = v9[1];
      if (v5 == v13)
      {
        if (v9[2] == v11)
          return v9;
      }
      else
      {
        if (v13 >= *(_QWORD *)&v6)
          v13 %= *(_QWORD *)&v6;
        if (v13 != v8)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    return v9;
  }
  v12 = *(_QWORD *)&v6 - 1;
  while (1)
  {
    v14 = v9[1];
    if (v5 == v14)
    {
      if (v9[2] == v11)
        return v9;
      goto LABEL_20;
    }
    if ((v14 & v12) != v8)
      return 0;
LABEL_20:
    v9 = (_QWORD *)*v9;
    if (!v9)
      return v9;
  }
}

char *sub_1002318E4(void **a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  __n128 v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  char *v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 *v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __n128 *v29;
  __n128 *v30;
  char *v31;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_1000D02C0();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_1000CDEB8();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v29 = (__n128 *)&v7[10 * v3];
  v31 = (char *)&v7[10 * v6];
  sub_10003FADC(v29, a2);
  v8 = a2[2];
  v29[1] = a2[1];
  v29[2] = v8;
  v29[3].n128_u16[0] = a2[3].n128_u16[0];
  v9 = a2[4].n128_u64[0];
  v29[3].n128_u64[1] = a2[3].n128_u64[1];
  v29[4].n128_u64[0] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  v12 = (char *)&v7[10 * v3];
  v13 = (char *)&v29[5];
  v15 = (__n128 *)*a1;
  v14 = (__n128 *)a1[1];
  if (v14 == *a1)
  {
    v24 = (__n128 *)a1[1];
  }
  else
  {
    v16 = v29;
    do
    {
      v17 = v14 - 5;
      sub_10003FADC(v16 - 5, v14 - 5);
      v19 = v14[-4];
      v20 = v14[-3];
      v16[-2].n128_u16[0] = v14[-2].n128_u16[0];
      v16[-4] = v19;
      v16[-3] = v20;
      v16[-2].n128_u64[1] = v14[-2].n128_u64[1];
      v21 = v14[-1].n128_u64[0];
      v16[-1].n128_u64[0] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v16[-1].n128_u64[1] = v14[-1].n128_u64[1];
      v16 = (__n128 *)v18;
      v14 -= 5;
    }
    while (v17 != v15);
    v24 = (__n128 *)*a1;
    v14 = (__n128 *)a1[1];
    v12 = v18;
    v13 = (char *)&v29[5];
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v31;
  if (v14 == v24)
  {
    if (v14)
LABEL_25:
      operator delete(v14);
  }
  else
  {
    do
    {
      v30 = v14 - 5;
      v26 = (std::__shared_weak_count *)v14[-1].n128_u64[0];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v14 -= 5;
    }
    while (v30 != v24);
    v14 = v24;
    if (v24)
      goto LABEL_25;
  }
  return v13;
}

void sub_100231B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002243F8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100231B74(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      sub_1000D02C0();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_1000CDEB8();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[8 * v13];
    v44 = &v43[8 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[8 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[8 * v13 + 16];
    v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v53 = *(_QWORD *)v46;
        v46 += 8;
        *(_QWORD *)v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 8 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          v63 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[8 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[8 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 8;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      v31 = (_QWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_QWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 3) + 1;
        v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = (uint64_t *)((char *)v30 + v38);
        v31 = (_QWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
        v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

uint64_t sub_100231F1C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100231F78()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100231FD4()
{
  xmmword_10041A078 = 0u;
  unk_10041A088 = 0u;
  xmmword_10041A068 = 0u;
  return __cxa_atexit((void (*)(void *))sub_1002304C8, &xmmword_10041A068, (void *)&_mh_execute_header);
}

double sub_100231FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  int v7;
  int v8;
  double result;

  if (*(_BYTE *)(a4 + 24))
    v5 = *(_BYTE *)(a4 + 56) == 0;
  else
    v5 = 1;
  if (!v5)
  {
    result = *(double *)(a2 + 32) + *(double *)(a4 + 64) * 0.25;
    *(double *)(a2 + 32) = result;
    return result;
  }
  v7 = *(_DWORD *)(a4 + 4);
  v8 = sub_1002CC464(a3);
  if (v8 != 1)
  {
    if (v8)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32)
           + *(double *)(a3 + 16) * ((double)(uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) * 0.000000001);
    *(double *)(a2 + 32) = result;
    return result;
  }
  if (v7 == 3)
    goto LABEL_10;
  return result;
}

uint64_t sub_1002320B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;

  sub_100271FB4(a1 + 72, *(_QWORD *)(a1 + 56));
  *(_QWORD *)(a2 + 40) = v8;
  result = sub_100232128(a1, (double *)a2, a3, a4);
  if (*(_DWORD *)(a3 + 4) != 2)
    *(_BYTE *)(a2 + 48) = (result & 1) == 0;
  return result;
}

uint64_t sub_100232128(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  __n128 v17;
  __n128 v18;
  double v19;
  int v20;
  double v21;
  double v22;
  __double2 v23;
  double v25;
  void *__p;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;

  v8 = a2[2];
  v9 = a2[3];
  v10 = a1 + 56;
  v11 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a3 + 24))
    v12 = *(_BYTE *)(a3 + 72) == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = sqrt(*(double *)(a3 + 80) * 0.25 * 0.25 * 12.0);
LABEL_9:
    v14 = (*(double (**)(_QWORD, double, double))(*(_QWORD *)v11 + 24))(*(_QWORD *)(a1 + 56), v13 * -0.5, v13 * 0.5)+ a2[4];
LABEL_10:
    a2[4] = v14;
    goto LABEL_11;
  }
  if (*(_DWORD *)a3 != 1)
  {
    if (*(_DWORD *)a3)
      goto LABEL_11;
    v13 = *(double *)(a1 + 216);
    goto LABEL_9;
  }
  if (!sub_1002CE994(a1 + 120, v11))
  {
    v22 = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v14 = (v22 + v22) * 3.14159265;
    goto LABEL_10;
  }
LABEL_11:
  v15 = (double *)(a1 + 184);
  if (*(_BYTE *)(a3 + 24))
  {
    v16 = sub_10026C1F8(v15, *(double *)(a3 + 32));
    v17.n128_f64[0] = sub_1002CE9CC(a1 + 120);
    if (*(_BYTE *)(a3 + 40))
    {
      v17.n128_f64[0] = sqrt(*(double *)(a3 + 48) * 0.25 * 0.25 * 12.0);
      v19 = a2[4];
      if (v17.n128_f64[0] <= 0.0)
        goto LABEL_29;
    }
    else
    {
      v17.n128_f64[0] = sqrt(v16 * (v16 * v17.n128_f64[0]) * 12.0);
      v19 = a2[4];
      if (v17.n128_f64[0] <= 0.0)
        goto LABEL_29;
    }
    goto LABEL_27;
  }
  v16 = sub_10026C1F8(v15, *(double *)(a3 + 8));
  v17.n128_f64[0] = sqrt(v16 * (v16 * sub_1002CE9CC(a1 + 120)) * 12.0);
  v20 = *(_DWORD *)(a3 + 4);
  if (!*(_DWORD *)a3)
  {
    if (v20 == 3)
    {
      v19 = a2[4];
      v17.n128_f64[0] = -v16;
      v18.n128_f64[0] = v16;
      v21 = (*(double (**)(uint64_t, __n128, __n128))(*(_QWORD *)v11 + 24))(v11, v17, v18);
      goto LABEL_28;
    }
    if (v20 == 2)
    {
      v19 = (*(double (**)(uint64_t, double))(*(_QWORD *)v11 + 48))(v11, v17.n128_f64[0]);
      v25 = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) * 0.5;
      v16 = v25 * sub_1002CE980(a1 + 120);
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  if (v20 == 3)
  {
    v19 = (*(double (**)(uint64_t, double))(*(_QWORD *)v11 + 48))(v11, v17.n128_f64[0]);
    v21 = sub_10026C14C((double *)(a1 + 200), v11, *(double *)(a3 + 8));
    goto LABEL_28;
  }
  if (v20 != 2)
  {
LABEL_25:
    if (v20 == 1)
    {
      v19 = a2[4];
LABEL_27:
      v18.n128_f64[0] = v17.n128_f64[0] * 0.5;
      v17.n128_f64[0] = v16 - v17.n128_f64[0] * 0.5;
      v18.n128_f64[0] = v16 + v18.n128_f64[0];
      v21 = (*(double (**)(uint64_t, __n128, __n128))(*(_QWORD *)v11 + 24))(v11, v17, v18);
      goto LABEL_28;
    }
    sub_1000D5048(v27, "");
    sub_100232628("Unimplemented pedometryLikelihood or bodyFixed", &v29);
    sub_100232674((unsigned int *)(a3 + 4), &v30);
    sub_100174738((uint64_t)v27, (uint64_t)&v29, 2);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((v28 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_37:
        operator delete(v27[0]);
LABEL_33:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_37;
  }
  v19 = (*(double (**)(uint64_t, double))(*(_QWORD *)v11 + 48))(v11, v17.n128_f64[0]);
  v21 = sub_1002CE978(a1 + 120);
LABEL_28:
  v16 = v21;
LABEL_29:
  v23 = __sincos_stret(v19);
  return sub_100223EFC((uint64_t)a2, v8 + v23.__cosval * v16, v9 + v23.__sinval * v16, *(_QWORD *)(a3 + 16), a4, v10, a1 + 8, (uint64_t ***)(a1 + 224));
}

void sub_1002324EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100232548(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = off_1003FECF0;
  v2 = (std::__shared_weak_count *)a1[29];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *a1 = off_1003F4C00;
      v5 = (std::__shared_weak_count *)a1[8];
      if (v5)
        goto LABEL_6;
LABEL_9:
      sub_100048DC0((uint64_t)(a1 + 1));
      return a1;
    }
  }
  *a1 = off_1003F4C00;
  v5 = (std::__shared_weak_count *)a1[8];
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  sub_100048DC0((uint64_t)(a1 + 1));
  return a1;
}

std::string *sub_100232628@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100232658(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100232674@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result;
  std::bad_cast v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  result = sub_10019ED6C(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v3);
  }
  return result;
}

void sub_1002326E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  uint64_t v10;

  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100232710()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023276C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1002327C8(uint64_t a1)
{
  sub_10001F1BC(a1);
  operator delete();
}

void sub_1002327EC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  int v11;
  int64x2_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v2 / 0x49));
  v4 = v2 % 0x49;
  v5 = (void **)(v3 + 56 * v4);
  v6 = v5[3];
  if (v6)
  {
    *(_QWORD *)(v3 + 56 * v4 + 32) = v6;
    operator delete(v6);
  }
  v7 = (char *)*v5;
  if (*v5)
  {
    v8 = (char *)v5[1];
    v9 = *v5;
    if (v8 != v7)
    {
      do
      {
        v11 = *((_DWORD *)v8 - 44);
        if (v11 == v11 >> 31)
        {
          if (*(v8 - 128))
            *(v8 - 128) = 0;
        }
        else
        {
          v10 = *((_QWORD *)v8 - 21);
          if (v11 < 0)
          {
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
          else
          {
            (*(void (**)(char *))v10)(v8 - 168);
          }
        }
        v8 -= 208;
      }
      while (v8 != v7);
      v9 = *v5;
    }
    v5[1] = v7;
    operator delete(v9);
  }
  v12 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_10038D7C0);
  *(int64x2_t *)(a1 + 32) = v12;
  if (v12.i64[0] >= 0x92uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 73;
  }
}

_QWORD *sub_10023291C(uint64_t a1, unint64_t a2)
{
  __int128 v3;

  v3 = a2;
  return sub_10004822C((_QWORD *)(a1 + 16), &v3);
}

void sub_100232944(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100232970(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          v14 = *(_DWORD *)(v11 - 176);
          if (v14 == v14 >> 31)
          {
            if (*(_BYTE *)(v11 - 128))
              *(_BYTE *)(v11 - 128) = 0;
          }
          else
          {
            v13 = *(_QWORD *)(v11 - 168);
            if (v14 < 0)
            {
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            }
            else
            {
              (*(void (**)(uint64_t))v13)(v11 - 168);
            }
          }
          v11 -= 208;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x13B13B13B13B13BLL)
      goto LABEL_58;
    v37 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 4);
    v38 = 2 * v37;
    if (2 * v37 <= a4)
      v38 = a4;
    v39 = v37 >= 0x9D89D89D89D89DLL ? 0x13B13B13B13B13BLL : v38;
    if (v39 > 0x13B13B13B13B13BLL)
LABEL_58:
      sub_1000D02C0();
    v40 = 208 * v39;
    v41 = operator new(208 * v39);
    *a1 = (uint64_t)v41;
    a1[1] = (uint64_t)v41;
    a1[2] = (uint64_t)v41 + v40;
    v42 = sub_10021942C(v9, a2, a3, (uint64_t)v41);
LABEL_46:
    a1[1] = v42;
    return;
  }
  v15 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v15 - v10) >> 4) < a4)
  {
    v16 = a2 + 16 * ((v15 - v10) >> 4);
    if (v15 != v10)
    {
      v17 = (uint64_t *)(v10 + 32);
      v18 = a2 + 8;
      do
      {
        v21 = v18 - 8;
        v20 = *(_DWORD *)(v18 - 8);
        v22 = *((_DWORD *)v17 - 8);
        if (v22 == v20)
        {
          v23 = v17 - 3;
          if (v22 == v22 >> 31)
          {
            *v23 = *(_QWORD *)v18;
          }
          else
          {
            v19 = *(_OWORD *)v18;
            *((_DWORD *)v17 - 2) = *(_DWORD *)(v18 + 16);
            *(_OWORD *)v23 = v19;
          }
        }
        else
        {
          v24 = v20 ^ (v20 >> 31);
          if (v24)
          {
            v25 = v17 - 3;
            v26 = *(_OWORD *)v18;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v18 + 16);
            *(_OWORD *)v25 = v26;
            *((_DWORD *)v17 - 8) = v24;
          }
          else
          {
            *(v17 - 3) = *(_QWORD *)v18;
            *((_DWORD *)v17 - 8) = 0;
          }
        }
        sub_100232D1C(v17, (unsigned int *)(v18 + 24));
        v17 += 26;
        v18 += 208;
      }
      while (v21 + 208 != v16);
      v10 = a1[1];
    }
    v42 = sub_10021942C(v9, v16, a3, v10);
    goto LABEL_46;
  }
  if (a2 != a3)
  {
    v27 = (uint64_t *)(v10 + 32);
    v28 = a2 + 8;
    do
    {
      v31 = v28 - 8;
      v30 = *(_DWORD *)(v28 - 8);
      v32 = *((_DWORD *)v27 - 8);
      if (v32 == v30)
      {
        v33 = v27 - 3;
        if (v32 == v32 >> 31)
        {
          *v33 = *(_QWORD *)v28;
        }
        else
        {
          v29 = *(_OWORD *)v28;
          *((_DWORD *)v27 - 2) = *(_DWORD *)(v28 + 16);
          *(_OWORD *)v33 = v29;
        }
      }
      else
      {
        v34 = v30 ^ (v30 >> 31);
        if (v34)
        {
          v35 = v27 - 3;
          v36 = *(_OWORD *)v28;
          *((_DWORD *)v35 + 4) = *(_DWORD *)(v28 + 16);
          *(_OWORD *)v35 = v36;
          *((_DWORD *)v27 - 8) = v34;
        }
        else
        {
          *(v27 - 3) = *(_QWORD *)v28;
          *((_DWORD *)v27 - 8) = 0;
        }
      }
      sub_100232D1C(v27, (unsigned int *)(v28 + 24));
      v27 += 26;
      v10 += 208;
      v28 += 208;
    }
    while (v31 + 208 != a3);
    v15 = a1[1];
  }
  while (v15 != v10)
  {
    v43 = *(_DWORD *)(v15 - 176);
    if (v43 == v43 >> 31)
    {
      if (!*(_BYTE *)(v15 - 128))
        goto LABEL_48;
      *(_BYTE *)(v15 - 128) = 0;
      v15 -= 208;
    }
    else
    {
      v44 = *(_QWORD *)(v15 - 168);
      if (v43 < 0)
      {
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
LABEL_48:
        v15 -= 208;
      }
      else
      {
        (*(void (**)(uint64_t))v44)(v15 - 168);
        v15 -= 208;
      }
    }
  }
  a1[1] = v10;
}

void sub_100232D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100232D14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100232D1C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;

  v3 = *(unsigned int *)a1;
  v4 = *a2;
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v7 = (uint64_t *)(a2 + 2);
    v5 = (__n128 *)(a1 + 1);
    if ((_DWORD)v3 == (int)v3 >> 31)
      sub_100232DC8(v3, (int **)&v7, v5);
    else
      sub_100232EEC(v3, &v7, (uint64_t *)v5);
  }
  else
  {
    v7 = a1;
    v8 = v4 ^ ((int)v4 >> 31);
    v6 = (uint64_t)(a2 + 2);
    if (v8)
      sub_100233088(v4, (uint64_t)&v7, v6);
    else
      sub_100232F08(v4, (uint64_t)&v7, v6);
  }
}

__n128 sub_100232DC8(uint64_t a1, int **a2, __n128 *a3)
{
  __n128 *v3;
  int v4;
  unint64_t *v5;
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t *v9;
  __n128 v10;
  __int128 v11;
  __n128 result;
  __n128 v13;
  __n128 v14;
  __n128 v15;

  v3 = (__n128 *)*a2;
  v4 = **a2;
  if (a3->n128_u32[0] == v4)
  {
    v5 = &v3->n128_u64[1];
    v6 = &a3->n128_u64[1];
    if (a3->n128_u32[0] == a3->n128_i32[0] >> 31)
    {
      *v6 = *v5;
      a3[2].n128_u64[0] = v3[2].n128_u64[0];
      v7 = v3[2].n128_u8[8];
      if (!a3[2].n128_u8[8])
        goto LABEL_14;
    }
    else
    {
      v11 = *(_OWORD *)v5;
      a3[1].n128_u32[2] = v3[1].n128_u32[2];
      *(_OWORD *)v6 = v11;
      a3[2].n128_u64[0] = v3[2].n128_u64[0];
      v7 = v3[2].n128_u8[8];
      if (!a3[2].n128_u8[8])
        goto LABEL_14;
    }
LABEL_9:
    if (!v7)
    {
      a3[2].n128_u8[8] = 0;
      result = v3[3];
      v14 = v3[4];
      a3[5].n128_u32[0] = v3[5].n128_u32[0];
      a3[3] = result;
      a3[4] = v14;
      return result;
    }
    a3[2].n128_u32[3] = v3[2].n128_u32[3];
LABEL_11:
    result = v3[3];
    v13 = v3[4];
    a3[5].n128_u32[0] = v3[5].n128_u32[0];
    a3[3] = result;
    a3[4] = v13;
    return result;
  }
  v8 = v4 ^ (v4 >> 31);
  v9 = &v3->n128_u64[1];
  if (!v8)
  {
    a3->n128_u64[1] = *v9;
    a3->n128_u32[0] = 0;
    a3[2].n128_u64[0] = v3[2].n128_u64[0];
    v7 = v3[2].n128_u8[8];
    if (!a3[2].n128_u8[8])
      goto LABEL_14;
    goto LABEL_9;
  }
  v10 = *(__n128 *)v9;
  a3[1].n128_u32[2] = v3[1].n128_u32[2];
  *(__n128 *)((char *)a3 + 8) = v10;
  a3->n128_u32[0] = v8;
  a3[2].n128_u64[0] = v3[2].n128_u64[0];
  v7 = v3[2].n128_u8[8];
  if (a3[2].n128_u8[8])
    goto LABEL_9;
LABEL_14:
  if (!v7)
    goto LABEL_11;
  a3[2].n128_u32[3] = v3[2].n128_u32[3];
  a3[2].n128_u8[8] = 1;
  result = v3[3];
  v15 = v3[4];
  a3[5].n128_u32[0] = v3[5].n128_u32[0];
  a3[3] = result;
  a3[4] = v15;
  return result;
}

uint64_t sub_100232EEC(int a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v3;

  v3 = *a2;
  if (a1 < 0)
    return sub_1001A477C(*a3, *v3);
  else
    return sub_1001A477C((uint64_t)a3, (uint64_t)v3);
}

_QWORD *sub_100232F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  _QWORD *result;
  int v13;
  uint64_t v14;
  int *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  int v20;

  v4 = *(_DWORD *)a3;
  v5 = *(_DWORD *)a3;
  if (*(int *)a3 >> 31 != *(_DWORD *)a3)
  {
    v19 = *(_QWORD *)(a3 + 16);
    v20 = *(_DWORD *)(a3 + 24);
    v5 = v4 >> 31;
  }
  v6 = *(_QWORD *)(a3 + 8);
  v7 = v5 ^ v4;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(unsigned __int8 *)(a3 + 40);
  v10 = *(_DWORD *)(a3 + 44);
  v16 = *(_OWORD *)(a3 + 48);
  v17 = *(_OWORD *)(a3 + 64);
  v18 = *(_DWORD *)(a3 + 80);
  v11 = *(_DWORD **)a2;
  result = (_QWORD *)(*(_QWORD *)a2 + 8);
  v13 = **(_DWORD **)a2;
  if (v13 == v13 >> 31)
  {
    if (*((_BYTE *)v11 + 48))
      *((_BYTE *)v11 + 48) = 0;
  }
  else
  {
    v14 = *result;
    if (v13 < 0)
    {
      if (v14)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v14 + 8))(*result);
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(void))v14)();
    }
  }
  v15 = *(int **)a2;
  if (v7 >> 31 == v7)
  {
    *((_QWORD *)v15 + 2) = v6;
    v15[2] = 0;
    *((_QWORD *)v15 + 5) = v8;
    *((_BYTE *)v15 + 48) = 0;
    if (!v9)
      goto LABEL_15;
    goto LABEL_14;
  }
  *((_QWORD *)v15 + 2) = v6;
  *((_QWORD *)v15 + 3) = v19;
  v15[8] = v20;
  v15[2] = (v7 >> 31) ^ v7;
  *((_QWORD *)v15 + 5) = v8;
  *((_BYTE *)v15 + 48) = 0;
  if (v9)
  {
LABEL_14:
    v15[13] = v10;
    *((_BYTE *)v15 + 48) = 1;
  }
LABEL_15:
  *(_OWORD *)(v15 + 14) = v16;
  *(_OWORD *)(v15 + 18) = v17;
  v15[22] = v18;
  **(_DWORD **)a2 = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_100233088(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *(*v10)(_QWORD *);

  if ((a1 & 0x80000000) == 0)
    return sub_100233130(a2, a3);
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v7 = v4;
  v8 = v5;
  v9 = a3;
  v10 = sub_100233474;
  v6 = *(_DWORD *)v4;
  if (v6 == v6 >> 31)
    return sub_100233214((uint64_t)&v7, v4 + 8);
  if ((v6 & 0x80000000) == 0)
    sub_10023339C();
  result = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)v4 = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100233130(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD **)a1;
  v9 = v3;
  v10 = a2;
  v11 = sub_100233210;
  v4 = (uint64_t *)(v8 + 2);
  v5 = *v8;
  if (v5 == v5 >> 31)
    return sub_100233214((uint64_t)&v8, (uint64_t)v4);
  if ((v5 & 0x80000000) == 0)
    sub_10023339C();
  v7 = *v4;
  *v4 = 0;
  result = sub_1001A4778((uint64_t)v4, a2);
  *v8 = v9;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_1002331E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  __cxa_begin_catch(a1);
  *(_QWORD *)(a9 + 8) = v9;
  __cxa_rethrow();
}

void sub_1002331FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100233214(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 40))
    *(_BYTE *)(a2 + 40) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 24))(*(_QWORD *)a1 + 8, *(_QWORD *)(a1 + 16));
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_100233300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, int a11, uint64_t a12, int a13)
{
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v19 = *v13;
    v20 = v15 >> 31;
    *(_QWORD *)(*v13 + 16) = v17;
    if (v15 >> 31 == v15)
    {
      v20 = v15;
    }
    else
    {
      *(_QWORD *)(v19 + 24) = a12;
      *(_DWORD *)(v19 + 32) = a13;
    }
    *(_DWORD *)(v19 + 8) = v20 ^ v15;
    *(_QWORD *)(v19 + 40) = v18;
    *(_BYTE *)(v19 + 48) = 0;
    if (v14)
    {
      *(_DWORD *)(v19 + 52) = v16;
      *(_BYTE *)(v19 + 48) = 1;
    }
    *(_OWORD *)(v19 + 56) = a9;
    *(_OWORD *)(v19 + 72) = a10;
    *(_DWORD *)(v19 + 88) = a11;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10023339C()
{
  operator new();
}

void sub_100233420(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *v2;
  *(_QWORD *)(v3 + 8) = v1;
  *(_DWORD *)v3 ^= ~(*(int *)v3 >> 31);
  __cxa_rethrow();
}

void sub_100233440(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100233474(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10023347C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  int v38;
  __int128 v39;
  int *v40;
  uint64_t v41;
  int v42;
  int *v43;
  _QWORD *v44;
  int v45;
  _QWORD *v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;

  v5 = *a1;
  v6 = (a2 - *a1) / 208;
  v7 = *a1 + 208 * v6;
  if (a5 <= 0)
    return v7;
  v12 = (uint64_t)(a1 + 2);
  v11 = a1[2];
  v13 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - v13) >> 4) >= a5)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v7) >> 4) >= a5)
    {
      v18 = a3 + 208 * a5;
    }
    else
    {
      v18 = a3 + 16 * ((uint64_t)(v13 - v7) >> 4);
      a1[1] = sub_10021E540((uint64_t)(a1 + 2), v18, a4, v13);
      if ((uint64_t)(v13 - v7) < 1)
        return v7;
    }
    sub_100233914((uint64_t)a1, v7, v13, v7 + 208 * a5);
    if (v18 != a3)
    {
      v19 = (uint64_t *)(v5 + 208 * v6 + 32);
      v20 = (__int128 *)(a3 + 8);
      do
      {
        v23 = (uint64_t)v20 - 8;
        v22 = *((_DWORD *)v20 - 2);
        v24 = *((_DWORD *)v19 - 8);
        if (v24 == v22)
        {
          v25 = v19 - 3;
          if (v24 == v24 >> 31)
          {
            *v25 = *(_QWORD *)v20;
          }
          else
          {
            v21 = *v20;
            *((_DWORD *)v19 - 2) = *((_DWORD *)v20 + 4);
            *(_OWORD *)v25 = v21;
          }
        }
        else
        {
          v26 = v22 ^ (v22 >> 31);
          if (v26)
          {
            v27 = v19 - 3;
            v28 = *v20;
            *((_DWORD *)v27 + 4) = *((_DWORD *)v20 + 4);
            *(_OWORD *)v27 = v28;
            *((_DWORD *)v19 - 8) = v26;
          }
          else
          {
            *(v19 - 3) = *(_QWORD *)v20;
            *((_DWORD *)v19 - 8) = 0;
          }
        }
        sub_100232D1C(v19, (unsigned int *)v20 + 6);
        v19 += 26;
        v20 += 13;
      }
      while (v23 + 208 != v18);
    }
    return v7;
  }
  v14 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v5) >> 4);
  if (v14 > 0x13B13B13B13B13BLL)
    sub_1000D02C0();
  v15 = 0x4EC4EC4EC4EC4EC5 * ((v11 - v5) >> 4);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x9D89D89D89D89DLL)
    v16 = 0x13B13B13B13B13BLL;
  else
    v16 = v14;
  if (v16)
  {
    if (v16 > 0x13B13B13B13B13BLL)
      sub_1000CDEB8();
    v17 = (char *)operator new(208 * v16);
  }
  else
  {
    v17 = 0;
  }
  v30 = 0;
  v31 = (uint64_t)&v17[208 * v6];
  v61 = &v17[208 * v16];
  v32 = 208 * a5;
  v33 = v31 + 208 * a5;
  do
  {
    v35 = (_QWORD *)(v31 + v30 + 8);
    v37 = (_QWORD *)(a3 + v30 + 8);
    v36 = *(_DWORD *)(a3 + v30);
    if (v36 == v36 >> 31)
    {
      *v35 = *v37;
      v38 = v36;
    }
    else
    {
      v39 = *(_OWORD *)v37;
      *(_DWORD *)(v31 + v30 + 24) = *(_DWORD *)(a3 + v30 + 24);
      *(_OWORD *)v35 = v39;
      v38 = *(_DWORD *)(a3 + v30);
      v36 = v38 >> 31;
    }
    *(_DWORD *)(v31 + v30) = v38 ^ v36;
    v40 = (int *)(v31 + v30 + 40);
    v41 = a3 + v30;
    v42 = *(_DWORD *)(a3 + v30 + 32);
    v43 = (int *)(a3 + v30 + 40);
    if (v42 == v42 >> 31)
    {
      v44 = (_QWORD *)(v31 + v30 + 48);
      v45 = *v43;
      v46 = (_QWORD *)(v41 + 48);
      if (v45 == v45 >> 31)
      {
        *v44 = *v46;
        v47 = v45;
      }
      else
      {
        v48 = *(_OWORD *)v46;
        *(_DWORD *)(v31 + v30 + 64) = *(_DWORD *)(v41 + 64);
        *(_OWORD *)v44 = v48;
        v47 = *v43;
        v45 = v47 >> 31;
      }
      *v40 = v47 ^ v45;
      v49 = v31 + v30;
      v50 = a3 + v30;
      *(_QWORD *)(v49 + 72) = *(_QWORD *)(a3 + v30 + 72);
      *(_BYTE *)(v49 + 80) = 0;
      if (*(_BYTE *)(a3 + v30 + 80))
      {
        *(_DWORD *)(v49 + 84) = *(_DWORD *)(v50 + 84);
        *(_BYTE *)(v49 + 80) = 1;
      }
      v51 = *(_OWORD *)(v50 + 88);
      v52 = *(_OWORD *)(v50 + 104);
      *(_DWORD *)(v49 + 120) = *(_DWORD *)(v50 + 120);
      *(_OWORD *)(v49 + 104) = v52;
      *(_OWORD *)(v49 + 88) = v51;
    }
    else
    {
      if (v42 >= 0)
        v34 = a3 + v30 + 40;
      else
        v34 = *(_QWORD *)v43;
      sub_1001A4778((uint64_t)v40, v34);
    }
    *(_DWORD *)(v31 + v30 + 32) = *(_DWORD *)(v41 + 32) ^ (*(int *)(v41 + 32) >> 31);
    v30 += 208;
  }
  while (v32 != v30);
  v29 = v31;
  sub_100219A90(v12, v7, v7, *a1, *a1, v31, v31);
  v60 = v53;
  v54 = sub_100233D1C(v12, v7, a1[1], v33);
  v55 = (char *)*a1;
  v56 = (char *)a1[1];
  *a1 = v60;
  a1[1] = v54;
  a1[2] = (uint64_t)v61;
  while (v56 != v55)
  {
    v57 = *((_DWORD *)v56 - 44);
    if (v57 == v57 >> 31)
    {
      if (!*(v56 - 128))
        goto LABEL_45;
      *(v56 - 128) = 0;
      v56 -= 208;
    }
    else
    {
      v58 = *((_QWORD *)v56 - 21);
      if (v57 < 0)
      {
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
LABEL_45:
        v56 -= 208;
      }
      else
      {
        (*(void (**)(char *))v58)(v56 - 168);
        v56 -= 208;
      }
    }
  }
  if (v55)
    operator delete(v55);
  return v29;
}

void sub_1002338DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002338E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002199F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002338F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  a12 = v13 + v12;
  sub_1002199F8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_100233914(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  int v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  int v20;
  int *v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  __int128 *v40;
  _OWORD *v41;
  __int128 v42;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - a4;
  v8 = a2 + v6 - a4;
  v9 = v6;
  if (v8 < a3)
  {
    v11 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + v11 + 8);
      v15 = (_QWORD *)(v8 + v11 + 8);
      v14 = *(_DWORD *)(v8 + v11);
      if (v14 == v14 >> 31)
      {
        *v13 = *v15;
        v16 = v14;
      }
      else
      {
        v17 = *(_OWORD *)v15;
        *(_DWORD *)(v6 + v11 + 24) = *(_DWORD *)(v8 + v11 + 24);
        *(_OWORD *)v13 = v17;
        v16 = *(_DWORD *)(v8 + v11);
        v14 = v16 >> 31;
      }
      *(_DWORD *)(v6 + v11) = v16 ^ v14;
      v18 = (int *)(v6 + v11 + 40);
      v19 = v8 + v11;
      v20 = *(_DWORD *)(v8 + v11 + 32);
      v21 = (int *)(v8 + v11 + 40);
      if (v20 == v20 >> 31)
      {
        v22 = (_QWORD *)(v6 + v11 + 48);
        v23 = *v21;
        v24 = (_QWORD *)(v19 + 48);
        if (v23 == v23 >> 31)
        {
          *v22 = *v24;
          v25 = v23;
        }
        else
        {
          v26 = *(_OWORD *)v24;
          *(_DWORD *)(v6 + v11 + 64) = *(_DWORD *)(v19 + 64);
          *(_OWORD *)v22 = v26;
          v25 = *v21;
          v23 = v25 >> 31;
        }
        *v18 = v25 ^ v23;
        v27 = v6 + v11;
        v28 = v8 + v11;
        *(_QWORD *)(v27 + 72) = *(_QWORD *)(v8 + v11 + 72);
        *(_BYTE *)(v27 + 80) = 0;
        if (*(_BYTE *)(v8 + v11 + 80))
        {
          *(_DWORD *)(v27 + 84) = *(_DWORD *)(v28 + 84);
          *(_BYTE *)(v27 + 80) = 1;
        }
        v29 = *(_OWORD *)(v28 + 88);
        v30 = *(_OWORD *)(v28 + 104);
        *(_DWORD *)(v27 + 120) = *(_DWORD *)(v28 + 120);
        *(_OWORD *)(v27 + 104) = v30;
        *(_OWORD *)(v27 + 88) = v29;
      }
      else
      {
        if (v20 >= 0)
          v12 = v8 + v11 + 40;
        else
          v12 = *(_QWORD *)v21;
        sub_1001A4778((uint64_t)v18, v12);
      }
      *(_DWORD *)(v6 + v11 + 32) = *(_DWORD *)(v19 + 32) ^ (*(int *)(v19 + 32) >> 31);
      v11 += 208;
    }
    while (v8 + v11 < a3);
    v9 = v6 + v11;
  }
  *(_QWORD *)(a1 + 8) = v9;
  if (v6 != a4)
  {
    v31 = 0;
    do
    {
      v33 = v8 + v31;
      v34 = v6 + v31;
      v35 = *(_DWORD *)(v6 + v31 - 208);
      v36 = *(_DWORD *)(v8 + v31 - 208);
      if (v35 == v36)
      {
        v37 = (_QWORD *)(v33 - 200);
        v38 = v34 - 200;
        if (v35 == v35 >> 31)
        {
          *(_QWORD *)v38 = *v37;
        }
        else
        {
          v32 = *(_OWORD *)v37;
          *(_DWORD *)(v38 + 16) = *(_DWORD *)(v33 - 184);
          *(_OWORD *)v38 = v32;
        }
      }
      else
      {
        v39 = v36 ^ (v36 >> 31);
        v40 = (__int128 *)(v33 - 200);
        v41 = (_OWORD *)(v34 - 200);
        if (v39)
        {
          v42 = *v40;
          *(_DWORD *)(v34 - 184) = *((_DWORD *)v40 + 4);
          *v41 = v42;
          *(_DWORD *)(v34 - 208) = v39;
        }
        else
        {
          *(_QWORD *)v41 = *(_QWORD *)v40;
          *(_DWORD *)(v34 - 208) = 0;
        }
      }
      sub_100233B78((uint64_t *)(v6 + v31 - 176), (unsigned int *)(v8 + v31 - 176));
      v31 -= 208;
    }
    while (-16 * (v7 >> 4) != v31);
  }
}

void sub_100233B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(a1);
}

double sub_100233B78(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  double result;
  uint64_t v7;
  uint64_t *v8;
  int v9;

  v3 = *(unsigned int *)a1;
  v4 = *a2;
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v8 = (uint64_t *)(a2 + 2);
    v5 = (__n128 *)(a1 + 1);
    if ((_DWORD)v3 == (int)v3 >> 31)
      *(_QWORD *)&result = sub_100232DC8(v3, (int **)&v8, v5).n128_u64[0];
    else
      sub_100232EEC(v3, &v8, (uint64_t *)v5);
  }
  else
  {
    v8 = a1;
    v9 = v4 ^ ((int)v4 >> 31);
    v7 = (uint64_t)(a2 + 2);
    if (v9)
      sub_100233088(v4, (uint64_t)&v8, v7);
    else
      *(_QWORD *)&result = sub_100233C24(v4, (uint64_t)&v8, v7).n128_u64[0];
  }
  return result;
}

__n128 sub_100233C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  __n128 result;
  __int128 v16;

  v5 = *(_DWORD **)a2;
  v6 = (_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = **(_DWORD **)a2;
  if (v7 == v7 >> 31)
  {
    if (*((_BYTE *)v5 + 48))
      *((_BYTE *)v5 + 48) = 0;
  }
  else
  {
    v8 = *v6;
    if (v7 < 0)
    {
      if (v8)
        (*(void (**)(_QWORD))(*(_QWORD *)v8 + 8))(*v6);
    }
    else
    {
      (*(void (**)(void))v8)();
    }
  }
  v9 = *(int **)a2;
  v10 = (_QWORD *)(*(_QWORD *)a2 + 16);
  v12 = (_QWORD *)(a3 + 8);
  v11 = *(_DWORD *)a3;
  if (v11 == v11 >> 31)
  {
    *v10 = *v12;
    v13 = v11;
  }
  else
  {
    v14 = *(_OWORD *)v12;
    *(_DWORD *)(*(_QWORD *)a2 + 32) = *(_DWORD *)(a3 + 24);
    *(_OWORD *)v10 = v14;
    v13 = *(_DWORD *)a3;
    v11 = *(int *)a3 >> 31;
  }
  v9[2] = v13 ^ v11;
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a3 + 32);
  *((_BYTE *)v9 + 48) = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    v9[13] = *(_DWORD *)(a3 + 44);
    *((_BYTE *)v9 + 48) = 1;
  }
  result = *(__n128 *)(a3 + 48);
  v16 = *(_OWORD *)(a3 + 64);
  v9[22] = *(_DWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 18) = v16;
  *(__n128 *)(v9 + 14) = result;
  **(_DWORD **)a2 = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_100233D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  int v15;
  int *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;

  v4 = a4;
  v24 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v10 = (_QWORD *)(v4 + 8);
      v12 = (_QWORD *)(v6 + 8);
      v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *v10 = *v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)v10 = v14;
        v13 = *(_DWORD *)v6;
        v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)v4 = v13 ^ v11;
      v15 = *(_DWORD *)(v6 + 32);
      v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        v17 = (_QWORD *)(v4 + 48);
        v18 = *(_DWORD *)(v6 + 40);
        v19 = (_QWORD *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *v17 = *v19;
          v20 = v18;
        }
        else
        {
          v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)v17 = v22;
          v20 = *v16;
          v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 40) = v20 ^ v18;
        *(_QWORD *)(v4 + 72) = *(_QWORD *)(v6 + 72);
        *(_BYTE *)(v4 + 80) = 0;
        if (*(_BYTE *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(_BYTE *)(v4 + 80) = 1;
        }
        v7 = *(_OWORD *)(v6 + 88);
        v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 120) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        v9 = v4;
      }
      else
      {
        if (v15 >= 0)
          v21 = v6 + 40;
        else
          v21 = *(_QWORD *)v16;
        sub_1001A4778(v4 + 40, v21);
        v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      v4 = v9 + 208;
      v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_100233E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002195B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100233EA4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *__p;
  char v12;

  v2 = *a2;
  sub_10002BB38(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
  {
    if (v12)
    {
      v4 = (void *)v3[6];
      if (v4)
      {
        v3[7] = v4;
        operator delete(v4);
      }
      v5 = v3[3];
      if (v5)
      {
        v6 = v3[4];
        v7 = (void *)v3[3];
        if (v6 != v5)
        {
          do
          {
            v9 = *(_DWORD *)(v6 - 176);
            if (v9 == v9 >> 31)
            {
              if (*(_BYTE *)(v6 - 128))
                *(_BYTE *)(v6 - 128) = 0;
            }
            else
            {
              v8 = *(_QWORD *)(v6 - 168);
              if (v9 < 0)
              {
                if (v8)
                  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
              }
              else
              {
                (*(void (**)(uint64_t))v8)(v6 - 168);
              }
            }
            v6 -= 208;
          }
          while (v6 != v5);
          v7 = (void *)v3[3];
        }
        v3[4] = v5;
        operator delete(v7);
      }
    }
    operator delete(v3);
  }
  return v2;
}

uint64_t sub_100233F84()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100233FE0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023403C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10030B038();
  sub_1001A4778(v4 + 40, a2);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

uint64_t sub_100234078(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v34;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL)
    sub_1000D02C0();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL)
    v8 = 0x13B13B13B13B13BLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL)
      sub_1000CDEB8();
    v9 = operator new(208 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[52 * v5];
  v34 = v10;
  v11 = v10 + 2;
  v13 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2;
  v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *v11 = *v13;
    v14 = v12;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *v10 = v14 ^ v12;
  v15 = &v9[52 * v5 + 10];
  v16 = *(_DWORD *)(a2 + 32);
  v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    v18 = &v9[52 * v5 + 12];
    v19 = *(_DWORD *)(a2 + 40);
    v20 = v19 >> 31;
    v21 = (_QWORD *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *v18 = *v21;
      v20 = v19;
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *v15 = v20 ^ v19;
    v24 = (char *)&v9[52 * v5];
    v25 = *(_QWORD *)(a2 + 72);
    v24[80] = 0;
    v26 = v24 + 80;
    *((_QWORD *)v26 - 1) = v25;
    if (*(_BYTE *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *v26 = 1;
    }
    v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 30) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0)
      v22 = a2 + 40;
    else
      v22 = *(_QWORD *)(a2 + 40);
    sub_1001A4778((uint64_t)v15, v22);
    v16 = *(_DWORD *)(a2 + 32);
    v3 = *a1;
    v4 = a1[1];
    v10 = v34;
    v23 = (char *)&v9[52 * v5];
    v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  v27 = (uint64_t)(v23 + 208);
  sub_100219A90((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  v28 = (char *)*a1;
  v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  while (v29 != v28)
  {
    v31 = *((_DWORD *)v29 - 44);
    if (v31 == v31 >> 31)
    {
      if (!*(v29 - 128))
        goto LABEL_26;
      *(v29 - 128) = 0;
      v29 -= 208;
    }
    else
    {
      v32 = *((_QWORD *)v29 - 21);
      if (v31 < 0)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_26:
        v29 -= 208;
      }
      else
      {
        (*(void (**)(char *))v32)(v29 - 168);
        v29 -= 208;
      }
    }
  }
  if (v28)
    operator delete(v28);
  return v27;
}

void sub_100234350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002199F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100234364()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002343C0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023441C(uint64_t a1, unint64_t a2)
{
  char *v4;
  void *__p[3];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  sub_10026FF40(__p, 0);
  sub_100236BE8((_QWORD *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v4 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 136) = v4;
    *(_QWORD *)(a1 + 152) = &v4[8 * a2];
    bzero(v4, 8 * a2);
    *(_QWORD *)(a1 + 144) = &v4[8 * a2];
  }
  return a1;
}

void sub_1002344E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    if (!*(_BYTE *)(v11 + 80))
    {
LABEL_3:
      sub_1002345E8(v11);
      _Unwind_Resume(a1);
    }
  }
  else if (!*(_BYTE *)(v11 + 80))
  {
    goto LABEL_3;
  }
  v13 = *(void **)(v11 + 88);
  if (v13)
  {
    *(_QWORD *)(v11 + 96) = v13;
    operator delete(v13);
  }
  *(_BYTE *)(v11 + 80) = 0;
  sub_1002345E8(v11);
  _Unwind_Resume(a1);
}

void **sub_100234574(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002345E8(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)a1)
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(_QWORD *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

uint64_t sub_100234638(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  char *v10;
  void *__p[3];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = v5 - *(_QWORD *)a3;
  if (v5 != *(_QWORD *)a3)
  {
    if (v7 < 0)
      sub_1000D02C0();
    v8 = (char *)operator new(v5 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 104) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 96) = v9;
  }
  *(_BYTE *)(a1 + 80) = 1;
  sub_10026FF40(__p, 0);
  sub_100236BE8((_QWORD *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v10 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 136) = v10;
    *(_QWORD *)(a1 + 152) = &v10[8 * a2];
    bzero(v10, 8 * a2);
    *(_QWORD *)(a1 + 144) = &v10[8 * a2];
  }
  return a1;
}

void sub_100234760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  if (__p)
    operator delete(__p);
  if (*(_BYTE *)(v11 + 80))
  {
    v14 = *v12;
    if (*v12)
    {
      *(_QWORD *)(v11 + 96) = v14;
      operator delete(v14);
    }
    *(_BYTE *)(v11 + 80) = 0;
    sub_1002345E8(v11);
    _Unwind_Resume(a1);
  }
  sub_1002345E8(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1002347F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  void *__p[3];

  *(_BYTE *)a1 = 0;
  if (*(_BYTE *)a3)
  {
    sub_100236870(a1 + 8, a3 + 8);
    *(_BYTE *)a1 = 1;
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  sub_10026FF40(__p, 0);
  sub_100236BE8((_QWORD *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v6 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 136) = v6;
    *(_QWORD *)(a1 + 152) = &v6[8 * a2];
    bzero(v6, 8 * a2);
    *(_QWORD *)(a1 + 144) = &v6[8 * a2];
  }
  return a1;
}

void sub_1002348DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    if (!*(_BYTE *)(v11 + 80))
    {
LABEL_3:
      sub_1002345E8(v11);
      _Unwind_Resume(a1);
    }
  }
  else if (!*(_BYTE *)(v11 + 80))
  {
    goto LABEL_3;
  }
  v13 = *(void **)(v11 + 88);
  if (v13)
  {
    *(_QWORD *)(v11 + 96) = v13;
    operator delete(v13);
  }
  *(_BYTE *)(v11 + 80) = 0;
  sub_1002345E8(v11);
  _Unwind_Resume(a1);
}

void sub_100234970(uint64_t a1)
{
  if (*(_BYTE *)a1)
    sub_1002D1C94((_QWORD *)(a1 + 8));
}

uint64_t sub_100234984(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v4 = *a1;
  v3 = (uint64_t)(a1 + 8);
  if (v4)
    return sub_1002D0DF0(v3, a2);
  result = sub_100236870(v3, a2);
  *a1 = 1;
  return result;
}

void sub_1002349C0(uint64_t a1, double a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  double v7;
  double *v8;
  float64x2_t *v9;
  unint64_t v10;
  double *v11;
  uint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;
  NSObject *v16;
  uint8_t buf[8];
  std::__shared_weak_count *v19;

  if (!*(_BYTE *)a1)
    goto LABEL_15;
  sub_1002D187C(a1, 0, buf);
  v4 = *(_QWORD *)buf;
  v3 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v7 = a2;
      if (v4)
        goto LABEL_7;
LABEL_15:
      if (*(_BYTE *)(a1 + 80))
        return;
      if (qword_100417ED8 == -1)
      {
        v16 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          return;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEE10);
        v16 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          return;
      }
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "WARNING: MultivariateGaussian#scale ignored; covariance is already infinite",
        buf,
        2u);
      return;
    }
  }
  v7 = a2;
  if (!v4)
    goto LABEL_15;
LABEL_7:
  v9 = *(float64x2_t **)(a1 + 48);
  v8 = *(double **)(a1 + 56);
  if (v9 != (float64x2_t *)v8)
  {
    v10 = (char *)v8 - (char *)v9 - 8;
    v11 = *(double **)(a1 + 48);
    if (v10 < 0x18)
      goto LABEL_23;
    v12 = (v10 >> 3) + 1;
    v11 = &v9->f64[v12 & 0x3FFFFFFFFFFFFFFCLL];
    v13 = v9 + 1;
    v14 = v12 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15 = vmulq_n_f64(*v13, v7);
      v13[-1] = vmulq_n_f64(v13[-1], v7);
      *v13 = v15;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      do
      {
        *v11 = *v11 * v7;
        ++v11;
      }
      while (v11 != v8);
    }
  }
}

BOOL sub_100234B5C(uint64_t a1)
{
  return *(double *)(a1 + 72) == 0.0;
}

double sub_100234B6C(uint64_t a1)
{
  double v1;
  double v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v1 = *(double *)(a1 + 72);
  v2 = 0.0;
  if (v1 == 0.0)
    return v2;
  sub_1002D187C(a1, 0, &v7);
  if (v7)
    v2 = v1 * (*(double (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v4 = v8;
  if (!v8)
    return v2;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return v2;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v2;
}

void sub_100234C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100234C30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  void *v29[2];
  char v30;
  std::string buf;
  std::string v32;
  std::string v33;

  v8 = (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3;
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4);
  v25 = v9;
  v26 = v8;
  if (v8 < v9)
  {
    sub_1000D5048(v29, "");
    sub_1001E11D8("We have {} particle weights but {} onFloorParticles", &buf);
    sub_1001E2B30(&v26, &v32);
    sub_1001E2B30(&v25, &v33);
    sub_100174738((uint64_t)v29, (uint64_t)&buf, 3);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v33.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_35;
      }
    }
    else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v30 & 0x80000000) == 0)
        goto LABEL_27;
LABEL_36:
      operator delete(v29[0]);
LABEL_27:
      sub_1000F2AE4((uint64_t)&v27);
    }
LABEL_35:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_36;
  }
  v10 = (_QWORD *)(a1 + 112);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 3) < v9)
  {
    sub_1000D5048(&buf, "");
    sub_100174738((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)v29);
  }
  sub_1002D1BE4(a1, *(_BYTE *)(a1 + 80) == 0, &v27);
  if (sub_1002350FC((_QWORD *)a1, a2, (uint64_t)v27, a3) == -INFINITY)
  {
    if (qword_100417ED8 == -1)
    {
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FEE10);
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_7:
        v12 = sub_100270038((_QWORD *)*v10);
        sub_10026FF40(v29, v12);
        LODWORD(v26) = 1;
        sub_1002BF114((uint64_t)&buf, v12, &v26);
        sub_1002D0DEC(a4, (uint64_t)v29, (uint64_t)&buf);
        if (buf.__r_.__value_.__r.__words[2])
        {
          v32.__r_.__value_.__r.__words[0] = buf.__r_.__value_.__r.__words[2];
          operator delete((void *)buf.__r_.__value_.__r.__words[2]);
        }
        v13 = v29[0];
        if (v29[0])
        {
          v29[1] = v29[0];
LABEL_16:
          operator delete(v13);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "supposedly the java code checked for -inf.  seems unlikely", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v15 = *(_BYTE **)(a1 + 136);
  v14 = *(_BYTE **)(a1 + 144);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0)
      sub_1000D02C0();
    v17 = (char *)operator new(v14 - v15);
    v18 = &v17[8 * (v16 >> 3)];
    v22 = v17;
    v24 = v18;
    memcpy(v17, v15, v16);
    v23 = v18;
  }
  sub_1002D0E4C(v10, &v22, 1, 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4), a4);
  v13 = v22;
  if (v22)
  {
    v23 = v22;
    goto LABEL_16;
  }
LABEL_17:
  v19 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_100235008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002350FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  void *v26;
  void *__p[2];
  char v28;
  std::string v29;

  v9 = *a4;
  v8 = a4[1];
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a4) >> 4);
  if (v10 > (uint64_t)(a1[18] - a1[17]) >> 3)
  {
    sub_1000D5048(__p, "");
    sub_100237160("you passed in more particles than the max number you set this up with", &v29);
    sub_100174738((uint64_t)__p, (uint64_t)&v29, 1);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v26);
  }
  sub_10026FF40(&v29, 3uLL);
  if (v8 == v9)
  {
    v15 = -INFINITY;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    if (v10 <= 1)
      v14 = 1;
    else
      v14 = v10;
    v15 = -INFINITY;
    do
    {
      v16 = *a4 + v12;
      sub_100223B40(v16, a2, a1[14] + v11);
      v17 = sub_100047C20(v16);
      sub_10026FFD4((void **)&v29.__r_.__value_.__l.__data_, a1[14] + v11);
      v18 = v17 + (*(double (**)(uint64_t, std::string *))(*(_QWORD *)a3 + 24))(a3, &v29);
      *(double *)(a1[17] + 8 * v13) = v18;
      if (v15 < v18)
        v15 = v18;
      ++v13;
      v12 += 80;
      v11 += 24;
    }
    while (v14 != v13);
  }
  v19 = a1[14];
  v20 = a1[15];
  if (v10 != 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3))
  {
    sub_10026FF40(__p, 0);
    v21 = (void **)(v19 + 24 * v10);
    if (v20 - (uint64_t)v21 >= 1)
    {
      v22 = (v20 - (uint64_t)v21) / 0x18uLL + 1;
      do
      {
        sub_10026FFD4(v21, (uint64_t)__p);
        v21 += 3;
        --v22;
      }
      while (v22 > 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v23 = (void *)(a1[17] + 8 * v10);
    v24 = a1[18] - (_QWORD)v23;
    if (v24 >= 1)
      memset_pattern16(v23, &unk_100394FA0, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
  }
  if (v29.__r_.__value_.__r.__words[0])
  {
    v29.__r_.__value_.__l.__size_ = v29.__r_.__value_.__r.__words[0];
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_100235394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100235418(uint64_t a1@<X0>, __n128 **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::__shared_weak_count *v25;
  char v26[8];
  void *v27;
  void *v28;

  sub_1002D187C(a1, *(_BYTE *)(a1 + 80) == 0, &v22);
  v24 = v22;
  v25 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = v23;
    if (v23)
    {
      v11 = (unint64_t *)&v23->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  (*(void (**)(void *))(*(_QWORD *)v24 + 40))(v24);
  v26[0] = 0;
  sub_10021FD80(a2, (uint64_t *)&v24, a3, (uint64_t)v26, (uint64_t *)&v22);
  if (v26[0] && v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  sub_1002204EC((uint64_t)&v22, *(double *)(a1 + 72));
  v13 = sub_100220704((uint64_t)&v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v15 = *(const void **)v13;
  v14 = *(_QWORD *)(v13 + 8);
  v16 = v14 - *(_QWORD *)v13;
  if (v14 != *(_QWORD *)v13)
  {
    if (v16 < 0)
      sub_1000D02C0();
    v17 = (char *)operator new(v14 - *(_QWORD *)v13);
    *a4 = v17;
    v18 = &v17[8 * (v16 >> 3)];
    a4[2] = v18;
    memcpy(v17, v15, v16);
    a4[1] = v18;
  }
  sub_100236754(&v22);
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1002355D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 88))
    sub_100343F84(v1 - 88);
  sub_1002203E4(v1 - 104);
  _Unwind_Resume(a1);
}

double sub_100235638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  uint64_t v18;
  double v19;
  double v20;
  __n128 *v21;
  std::ios_base *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  double *v26;
  double *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  double v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  double v36;
  _QWORD *v37;
  double *v38;
  double *i;
  _QWORD *v40;
  _QWORD *v41;
  double *v42;
  double *v43;
  double *v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  uint64_t v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  uint64_t v54;
  NSObject *v55;
  __int128 *p_dst;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  double **v64;
  _BYTE *v65;
  void *v66[2];
  uint64_t v67;
  void *__p[3];
  void *v69[18];
  __int128 v70;
  void *v71;
  uint8_t v72[72];
  __int128 v73;
  __int128 v74;
  int v75;
  void (__cdecl **v76)(std::ostringstream *__hidden);
  _BYTE buf[12];
  char v78;
  __int128 __dst;
  uint64_t v80;

  v65 = (_BYTE *)(a1 + 80);
  sub_1002D187C(a1, *(unsigned __int8 *)(a1 + 80) == 0, v72);
  v70 = *(_OWORD *)v72;
  if (*(_QWORD *)&v72[8])
  {
    v6 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *(std::__shared_weak_count **)&v72[8];
    if (*(_QWORD *)&v72[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&v72[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        v11 = v70;
        if ((_QWORD)v70)
          goto LABEL_9;
LABEL_63:
        v13 = 0.0;
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (!*((_QWORD *)&v70 + 1))
          return v13;
        goto LABEL_64;
      }
    }
  }
  v11 = v70;
  if (!(_QWORD)v70)
    goto LABEL_63;
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  sub_10021FD80((__n128 **)a2, (uint64_t *)&v70, a3, (uint64_t)v65, (uint64_t *)v69);
  if (sub_10022070C((uint64_t)v69))
  {
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_1003FEE10);
    v12 = qword_100417EE0;
    v13 = 0.0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_60;
    *(_WORD *)v72 = 0;
    v14 = "Not enough precision contained in mode estimate, defining as 0.0 inlierConfidence.";
    v15 = v12;
    v16 = OS_LOG_TYPE_INFO;
    v17 = 2;
LABEL_59:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, v72, v17);
    goto LABEL_60;
  }
  v18 = 0;
  v64 = (double **)(a1 + 8);
  v19 = 0.5;
  do
  {
    v13 = sub_100220754(v69, v19);
    if (v13 < 0.0)
    {
      v21 = *(__n128 **)a2;
      if (*(_BYTE *)a1 && !sub_1002D0E2C((uint64_t)v64))
        sub_1002BFD64(a1 + 32);
      *(_QWORD *)v72 = v63;
      *(_QWORD *)&v72[*(_QWORD *)(v63 - 24)] = v62;
      v22 = (std::ios_base *)&v72[*(_QWORD *)(*(_QWORD *)v72 - 24)];
      std::ios_base::init(v22, &v72[8]);
      v22[1].__vftable = 0;
      v22[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf(&v72[8]);
      v73 = 0u;
      v74 = 0u;
      v75 = 16;
      sub_1000F0508(v72, (uint64_t)"Not possible. What happened here? prevGuess = ", 46);
      v23 = (_QWORD *)std::ostream::operator<<(v19);
      sub_1000F0508(v23, (uint64_t)" bestGuess = ", 13);
      v24 = (_QWORD *)std::ostream::operator<<(v13);
      sub_1000F0508(v24, (uint64_t)" | ", 3);
      sub_1000F0508(v72, (uint64_t)"getOutlierProbabilities = [", 27);
      v25 = sub_1002204E4((uint64_t)v69);
      v26 = *(double **)v25;
      v27 = *(double **)(v25 + 8);
      if (*(double **)v25 != v27)
      {
        do
        {
          v28 = (_QWORD *)std::ostream::operator<<(*v26);
          sub_1000F0508(v28, (uint64_t)" ", 1);
          ++v26;
        }
        while (v26 != v27);
      }
      sub_1000F0508(v72, (uint64_t)"]  |  mode = ", 13);
      if (*(_BYTE *)a1)
      {
        v29 = sub_1002D2168(v72, v64);
        sub_1000F0508(v29, (uint64_t)"  det(cov) = ", 13);
        v30 = (_QWORD *)std::ostream::operator<<(INFINITY);
      }
      else
      {
        v30 = sub_1000F0508(v72, (uint64_t)"not set   det(cov) = infinity", 29);
      }
      sub_1000F0508(v30, (uint64_t)" | ", 3);
      sub_1000F0508(v72, (uint64_t)"partition = ", 12);
      v31 = (*(double (**)(_QWORD))(*(_QWORD *)v70 + 32))(v70);
      v32 = (_QWORD *)std::ostream::operator<<(v31);
      sub_1000F0508(v32, (uint64_t)" | ", 3);
      v33 = sub_1000F0508(v72, (uint64_t)"first particle = ", 17);
      sub_100223ADC((uint64_t)v21, *(_QWORD *)(a2 + 64), &__dst);
      v34 = sub_1002704DC(v33, (double **)&__dst);
      sub_1000F0508(v34, (uint64_t)" | ", 3);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      sub_1000F0508(v72, (uint64_t)"gaussian = ", 11);
      v35 = v70;
      sub_100223ADC((uint64_t)v21, *(_QWORD *)(a2 + 64), __p);
      v36 = (*(double (**)(uint64_t, void **))(*(_QWORD *)v35 + 16))(v35, __p);
      v37 = (_QWORD *)std::ostream::operator<<(v36);
      sub_1000F0508(v37, (uint64_t)" | ", 3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*v65)
      {
        sub_1000F0508(v72, (uint64_t)"logPdf = [", 10);
        v38 = *(double **)(a1 + 88);
        for (i = *(double **)(a1 + 96); v38 != i; ++v38)
        {
          v40 = (_QWORD *)std::ostream::operator<<(*v38);
          sub_1000F0508(v40, (uint64_t)" ", 1);
        }
        v41 = sub_1000F0508(v72, (uint64_t)"]", 1);
        sub_1000F0508(v41, (uint64_t)" | ", 3);
        sub_1000F0508(v72, (uint64_t)"max(logPdf) = ", 14);
        v42 = *(double **)(a1 + 88);
        v43 = *(double **)(a1 + 96);
        if (v42 != v43)
        {
          v44 = v42 + 1;
          if (v42 + 1 != v43)
          {
            v45 = *v42;
            v46 = v42 + 1;
            do
            {
              v47 = *v46++;
              v48 = v47;
              if (v45 < v47)
              {
                v45 = v48;
                v42 = v44;
              }
              v44 = v46;
            }
            while (v46 != v43);
          }
        }
        v49 = (_QWORD *)std::ostream::operator<<(*v42);
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(*v49 - 24)));
        v50 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
        v51 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put(v49, v51);
        std::ostream::flush(v49);
      }
      else
      {
        v52 = sub_1000F0508(v72, (uint64_t)"logPdf = not set | max(logPdf) = not set", 40);
        std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
        v53 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
        v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put(v52, v54);
        std::ostream::flush(v52);
      }
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003FEE10);
      v55 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
        std::stringbuf::str(&v72[8]);
        p_dst = &__dst;
        if (v80 < 0)
          p_dst = (__int128 *)__dst;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = p_dst;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        if (SHIBYTE(v80) < 0)
          operator delete((void *)__dst);
      }
      std::stringbuf::str(&v72[8]);
      v78 = 0;
      buf[0] = 0;
      if (SHIBYTE(v67) < 0)
      {
        sub_10006CED8(&__dst, v66[0], (unint64_t)v66[1]);
      }
      else
      {
        __dst = *(_OWORD *)v66;
        v80 = v67;
      }
      sub_100174738((uint64_t)buf, (uint64_t)&__dst, 1);
      if (SHIBYTE(v80) < 0)
      {
        operator delete((void *)__dst);
        if ((v78 & 0x80000000) == 0)
          goto LABEL_53;
      }
      else if ((v78 & 0x80000000) == 0)
      {
        goto LABEL_53;
      }
      operator delete(*(void **)buf);
LABEL_53:
      sub_1000F2AE4((uint64_t)&v71);
    }
    ++v18;
    v20 = vabdd_f64(v19, v13);
    v19 = v13;
  }
  while (v20 > 0.01);
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FEE10);
    v57 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_60;
LABEL_58:
    *(_DWORD *)v72 = 134217984;
    *(_QWORD *)&v72[4] = v18;
    v14 = "computeInlierConfidence EM required %zu iterations";
    v15 = v57;
    v16 = OS_LOG_TYPE_DEBUG;
    v17 = 12;
    goto LABEL_59;
  }
  v57 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    goto LABEL_58;
LABEL_60:
  sub_100236754(v69);
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
LABEL_64:
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return v13;
}

void sub_100235F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57)
{
  sub_100236754(&a31);
  sub_1002203E4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_1002360BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
    JUMPOUT(0x1002360CCLL);
  JUMPOUT(0x1002360E0);
}

void sub_1002360DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_1000F0484((uint64_t)&a51);
  sub_100236754(&a28);
  sub_1002203E4((uint64_t)&a46);
  _Unwind_Resume(a1);
}

double sub_100236100@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  void *v5;
  void *__p[2];
  char v7;

  sub_1002361B4(a1);
  if (!*(_BYTE *)a1)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v7 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v5);
  }
  sub_100223094((_QWORD *)(a1 + 8), a2);
  result = *(double *)(a1 + 72);
  *(double *)(a2 + 184) = result;
  return result;
}

void sub_100236198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002361B4(uint64_t a1)
{
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;
  _BYTE v8[24];
  double *v9[8];
  std::string v10;
  std::string buf;

  if (*(double *)(a1 + 72) == 0.0)
  {
    sub_1002D187C(a1, 0, &buf);
    v2 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v3 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v2 + 1) + 16))(*((_QWORD *)&v2 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
      }
    }
    if ((_QWORD)v2)
    {
      sub_100236870((uint64_t)v9, a1 + 8);
      sub_100236E0C(v9, &v10);
      v6 = std::string::insert(&v10, 0, "What is your mode anyway? ");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      sub_1002363FC((uint64_t)v9);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&v10, &buf);
      sub_10018D04C((uint64_t)v8);
      sub_10023643C((std::runtime_error *)&v10, (uint64_t)"void ParticleMode::assertValidPoseEstimate() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_mode.cpp", 273, (uint64_t)v8);
    }
    if (qword_100417ED8 == -1)
    {
      v5 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return;
      goto LABEL_10;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FEE10);
    v5 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WARNING: Your primary mode has reached 0.0 confidence! Should we clearPoseEstimate?", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_100236370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_1002363C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_1002363FC((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_1002363FC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1002363FC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10023643C(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003F6850;
  v13 = off_1003F6878;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003F68D8;
  v18[0] = off_1003F6910;
  v21 = &off_1003F6948;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_10023697C();
}

void sub_100236684(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_100236698(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21)
{
  std::runtime_error::~runtime_error(&a21);
  sub_1000CDD68(a1);
}

void sub_1002366B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::runtime_error a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  a22 = v23 + 16;
  if (a23)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a23 + 32))(a23))
    {
      a23 = 0;
      std::runtime_error::~runtime_error(&a21);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a21);
  sub_1000CDD68(a1);
}

void sub_1002366FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

uint64_t sub_100236720(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

void sub_100236728(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void **sub_100236754(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[7];
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_11:
    v8 = a1[3];
    if (!v8)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v8 = a1[3];
  if (v8)
  {
LABEL_12:
    a1[4] = v8;
    operator delete(v8);
  }
LABEL_13:
  v9 = (char *)*a1;
  if (*a1)
  {
    v10 = (char *)a1[1];
    v11 = *a1;
    if (v10 != v9)
    {
      do
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 2);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 80;
      }
      while (v10 != v9);
      v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t sub_100236870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_1000D02C0();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  v9 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v11 = *(_BYTE **)(a2 + 40);
  v10 = *(_BYTE **)(a2 + 48);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_1000D02C0();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_100236948(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_10023697C()
{
  operator new();
}

void sub_100236B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100236BB8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100236BD4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100236BE8(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_1000D02C0();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[8 * (v10 >> 3)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_100236D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_100236D74(&a9);
  _Unwind_Resume(a1);
}

void sub_100236D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100236D74(&a9);
  _Unwind_Resume(a1);
}

void sub_100236D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100236D74(&a9);
  _Unwind_Resume(a1);
}

void ***sub_100236D74(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_100236E0C@<X0>(double **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result;
  std::bad_cast v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  result = sub_100236EA8(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v3);
  }
  return result;
}

void sub_100236E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  uint64_t v10;

  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100236EA8(double **a1, std::string *a2)
{
  std::ios_base *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  char *v18;
  __int128 *v19;
  std::string::size_type *v20;
  unint64_t v21;
  __int128 v22;
  std::string::value_type v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  __int128 v30;
  uint64_t v31;
  void (__cdecl **v32)(std::ostream *__hidden);
  std::ios_base v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;

  v31 = 0;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  std::streambuf::basic_streambuf(&v25);
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  LODWORD(v31) = 24;
  *(_QWORD *)&v27 = 0;
  v26 = 0uLL;
  *(_QWORD *)&v25 = off_1003EFE30;
  std::ios_base::init(&v33, &v25);
  v34 = 0;
  v35 = -1;
  v37 = &v36;
  v38 = (char *)&v36 + 2;
  v4 = (std::ios_base *)((char *)&v32 + (_QWORD)*(v32 - 3));
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  v5 = sub_1002D2168(&v32, a1);
  v6 = *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32);
  v7 = *(_QWORD *)((char *)&v33.__rdstate_ + (_QWORD)*(v32 - 3));
  v8 = *(_QWORD *)(v7 + 40);
  v37 = (uint64_t *)v8;
  v9 = *(char **)(v7 + 48);
  v38 = v9;
  if ((v6 & 5) == 0)
  {
    v11 = (unint64_t)&v9[-v8];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = a2->__r_.__value_.__r.__words[2];
      v14 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v14 >= v11)
      {
        v16 = HIBYTE(v15);
LABEL_10:
        if ((v16 & 0x80u) == 0)
          v12 = a2;
        else
          v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_13:
        if ((char *)v8 == v9)
        {
          v17 = v12;
          goto LABEL_23;
        }
        if (v11 < 0x20 || (unint64_t)v12 - v8 < 0x20)
        {
          v17 = v12;
          v18 = (char *)v8;
        }
        else
        {
          v17 = (std::string *)((char *)v12 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v18 = (char *)(v8 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v19 = (__int128 *)(v8 + 16);
          v20 = &v12->__r_.__value_.__r.__words[2];
          v21 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v22 = *v19;
            *((_OWORD *)v20 - 1) = *(v19 - 1);
            *(_OWORD *)v20 = v22;
            v19 += 2;
            v20 += 4;
            v21 -= 32;
          }
          while (v21);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v17->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
              a2->__r_.__value_.__l.__size_ = v11;
            else
              *((_BYTE *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
            v10 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          v23 = *v18++;
          v17->__r_.__value_.__s.__data_[0] = v23;
          v17 = (std::string *)((char *)v17 + 1);
        }
        while (v18 != v9);
        goto LABEL_23;
      }
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v12 = a2;
      if (v11 <= 0x16)
        goto LABEL_13;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = 22;
    }
    std::string::__grow_by(a2, v14, v11 - v14, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v16) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  v10 = 0;
LABEL_27:
  std::ostream::~ostream(&v32);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(&v25);
  return v10;
}

void sub_100237114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100237148(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

std::string *sub_100237160@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100237190(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002371AC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100237208()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100237264(uint64_t *a1, uint64_t *a2, _QWORD *a3, int a4, _DWORD *a5)
{
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  int v36;
  _DWORD *v37;
  uint64_t *v38;
  int v39;
  uint64_t **v40;
  uint64_t **v41;
  int v42;
  _DWORD *v43;
  uint64_t *v44;
  NSObject *v45;
  void *v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t **v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  void **v65;
  const void ***v66;
  _OWORD *v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t **v75;
  void **v76;
  const void ***v77;
  _OWORD *v78;
  uint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD **v85;
  _QWORD **v86;
  const void ***v87;
  _BOOL4 v88;
  _QWORD *v89;
  const void ***v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  NSObject *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  NSObject *v107;
  unint64_t v108;
  int v110;
  int v111;
  NSObject *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  NSObject *v136;
  char *v137;
  char *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t **v145;
  int v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  _BYTE *v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t **v163;
  uint64_t **v164;
  const void ***v165;
  _BOOL4 v166;
  uint64_t *v167;
  const void ***v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  NSObject *v172;
  char *v173;
  NSObject *v174;
  char *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t **v178;
  uint64_t **v179;
  uint64_t *v180;
  int v181;
  int *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t **v185;
  uint64_t **v186;
  uint64_t *v187;
  int v188;
  int *v189;
  uint64_t *v190;
  NSObject *v191;
  int v192;
  uint64_t *v193;
  uint64_t **v194;
  uint64_t **v195;
  int v196;
  _DWORD *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t **v200;
  uint64_t **v201;
  const void ***v202;
  _BOOL4 v203;
  uint64_t *v204;
  const void ***v205;
  uint64_t v206;
  char *v207;
  NSObject *v208;
  const char *v209;
  uint32_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t **i;
  uint64_t **v225;
  int v226;
  _DWORD *v227;
  uint64_t *v228;
  int v229;
  NSObject *v230;
  uint64_t v231;
  uint64_t **j;
  uint64_t **v233;
  int v234;
  _DWORD *v235;
  uint64_t *v236;
  int v237;
  NSObject *v238;
  char *v239;
  unint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  char *v247;
  uint64_t *v248;
  uint64_t **v249;
  uint64_t **v250;
  const void ***v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  _BYTE *v261;
  int v262;
  uint64_t v263;
  int v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  int v269;
  NSObject *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *p_shared_owners;
  unint64_t v276;
  NSObject *v277;
  _DWORD *v278;
  NSObject *v279;
  NSObject *v280;
  NSObject *v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t **v284;
  NSObject *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t **v289;
  uint64_t *v290;
  int v291;
  _DWORD *v292;
  uint64_t *v293;
  int v294;
  char *v295;
  char *k;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  _QWORD *v300;
  int v301;
  NSObject *v302;
  NSObject *v303;
  uint64_t v304;
  unint64_t v305;
  int v306;
  char *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t *v310;
  uint64_t *v311;
  unint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  _BYTE *v320;
  _QWORD *v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  _OWORD *v327;
  char *v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  NSObject *v332;
  uint64_t v333;
  char *v334;
  char *v335;
  void *v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  char *v340;
  char *v341;
  void *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  char *v346;
  char *v347;
  void *v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  int v358;
  int v359;
  int v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v364;
  unint64_t v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  unint64_t v373;
  int v374;
  int v375;
  uint64_t v376;
  __int128 v377;
  uint64_t **v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t v383;
  void *__p;
  char *v385;
  unint64_t v386;
  void *v387;
  char *v388;
  unint64_t v389;
  void *v390;
  char *v391;
  unint64_t v392;
  uint64_t *v393;
  _QWORD *v394[2];
  uint64_t **v395;
  uint64_t *v396;
  uint64_t v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  unint64_t v403;
  _BYTE buf[42];
  uint64_t v405;
  unint64_t v406;

  v5 = (unint64_t)(a1[1] - *a1) >> 4;
  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
  v372 = 954437177 * v5;
  v6 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (a2[1] - *a2) >> 5;
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = 954437177 * v5;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, incoming, request, %{public}lu, db, %{public}d, maxcount, %{public}d", buf, 0x18u);
  }
  v401 = 0;
  v402 = 0;
  v403 = 0;
  v398 = 0;
  v399 = 0;
  v400 = 0;
  v396 = 0;
  v397 = 0;
  v395 = &v396;
  v394[0] = 0;
  v394[1] = 0;
  v392 = 0;
  v393 = (uint64_t *)v394;
  v390 = 0;
  v391 = 0;
  v387 = 0;
  v388 = 0;
  v389 = 0;
  __p = 0;
  v385 = 0;
  v386 = 0;
  v382 = 0;
  v383 = 0;
  v380 = 0;
  v381 = (uint64_t *)&v382;
  v378 = &v379;
  v379 = 0;
  v8 = *a2;
  if (*a2 == a2[1])
    goto LABEL_78;
  do
  {
    v10 = v402;
    if ((unint64_t)v402 >= v403)
    {
      v402 = sub_1002076F0(&v401, v8);
      v13 = v399;
      v12 = v400;
      if (v399 < v400)
        goto LABEL_23;
    }
    else if (*(char *)(v8 + 23) < 0)
    {
      sub_10006CED8(v402, *(void **)v8, *(_QWORD *)(v8 + 8));
      v402 = v10 + 24;
      v13 = v399;
      v12 = v400;
      if (v399 < v400)
      {
LABEL_23:
        *(_DWORD *)v13 = *(_DWORD *)(v8 + 24);
        v21 = (uint64_t)(v13 + 4);
        goto LABEL_35;
      }
    }
    else
    {
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v402 + 2) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v10 = v11;
      v402 = v10 + 24;
      v13 = v399;
      v12 = v400;
      if (v399 < v400)
        goto LABEL_23;
    }
    v14 = v398;
    v15 = (v13 - v398) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      sub_1000D02C0();
    v17 = v12 - v398;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_1000CDEB8();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = *(_DWORD *)(v8 + 24);
      v21 = (uint64_t)(v20 + 4);
      if (v13 == v14)
        goto LABEL_33;
LABEL_27:
      v22 = v13 - 4 - v14;
      if (v22 < 0x2C)
        goto LABEL_613;
      if ((unint64_t)(v14 - v19) < 0x20)
        goto LABEL_613;
      v23 = (v22 >> 2) + 1;
      v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
      v25 = &v13[-v24];
      v20 -= v24;
      v26 = &v19[4 * v15 - 16];
      v27 = (__int128 *)(v13 - 16);
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 8;
      }
      while (v28);
      v13 = v25;
      if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_613:
        do
        {
          v30 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v20 - 1) = v30;
          v20 -= 4;
        }
        while (v13 != v14);
      }
      goto LABEL_33;
    }
    v19 = 0;
    v20 = (char *)(4 * v15);
    *(_DWORD *)(4 * v15) = *(_DWORD *)(v8 + 24);
    v21 = 4 * v15 + 4;
    if (v13 != v14)
      goto LABEL_27;
LABEL_33:
    v398 = v20;
    v400 = &v19[4 * v18];
    if (v14)
      operator delete(v14);
LABEL_35:
    v399 = (char *)v21;
    sub_10023A120(&v393, v8);
    v31 = v382;
    v32 = *(_DWORD *)(v8 + 24);
    v33 = &v382;
    v34 = &v382;
    if (v382)
    {
      v35 = v382;
      while (1)
      {
        while (1)
        {
          v33 = (uint64_t **)v35;
          v36 = *((_DWORD *)v35 + 7);
          if (v32 >= v36)
            break;
          v35 = *v33;
          v34 = v33;
          if (!*v33)
            goto LABEL_42;
        }
        if (v36 >= v32)
          break;
        v35 = v33[1];
        if (!v35)
        {
          v34 = v33 + 1;
          goto LABEL_42;
        }
      }
      v37 = v33;
    }
    else
    {
LABEL_42:
      v37 = operator new(0x28uLL);
      v37[7] = v32;
      v37[8] = 0;
      *(_QWORD *)v37 = 0;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = v33;
      *v34 = (uint64_t *)v37;
      v38 = (uint64_t *)v37;
      if (*v381)
      {
        v381 = (uint64_t *)*v381;
        v38 = *v34;
      }
      sub_1000E05F4(v382, v38);
      v31 = v382;
      ++v383;
      v32 = *(_DWORD *)(v8 + 24);
    }
    v39 = v37[8];
    v40 = &v382;
LABEL_48:
    v41 = v40;
    if (v31)
    {
      while (1)
      {
        v40 = (uint64_t **)v31;
        v42 = *((_DWORD *)v31 + 7);
        if (v32 < v42)
        {
          v31 = *v40;
          goto LABEL_48;
        }
        if (v42 >= v32)
          break;
        v31 = v40[1];
        if (!v31)
        {
          v41 = v40 + 1;
          goto LABEL_53;
        }
      }
      *((_DWORD *)v40 + 8) = v39 + 1;
      if (qword_100417EF8 != -1)
      {
LABEL_60:
        dispatch_once(&qword_100417EF8, &stru_1003FEE60);
        v45 = qword_100417F00;
        if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
          goto LABEL_8;
        goto LABEL_57;
      }
    }
    else
    {
LABEL_53:
      v43 = operator new(0x28uLL);
      v43[7] = v32;
      v43[8] = 0;
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = v40;
      *v41 = (uint64_t *)v43;
      v44 = (uint64_t *)v43;
      if (*v381)
      {
        v381 = (uint64_t *)*v381;
        v44 = *v41;
      }
      sub_1000E05F4(v382, v44);
      ++v383;
      v43[8] = v39 + 1;
      if (qword_100417EF8 != -1)
        goto LABEL_60;
    }
    v45 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      goto LABEL_8;
LABEL_57:
    v46 = (void *)v8;
    if (*(char *)(v8 + 23) < 0)
      v46 = *(void **)v8;
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)buf = 136381187;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v9;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = v383;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "TileMaxPri, fetch, %{private}s, %{public}d, onlist, %{public}ld", buf, 0x1Cu);
LABEL_8:
    v8 += 32;
  }
  while (v8 != a2[1]);
  v47 = v381;
  if (v381 != (uint64_t *)&v382)
  {
    v370 = 0;
    v48 = 0;
    v49 = qword_100417EF8;
    while (1)
    {
      v48 += *((_DWORD *)v47 + 8);
      v50 = v370;
      if (v48 <= a4)
        v50 = *((_DWORD *)v47 + 7);
      v370 = v50;
      if (v49 == -1)
      {
        v51 = qword_100417F00;
        if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
          goto LABEL_69;
      }
      else
      {
        dispatch_once(&qword_100417EF8, &stru_1003FEE60);
        v51 = qword_100417F00;
        if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        {
LABEL_69:
          v52 = *((_DWORD *)v47 + 7);
          v53 = *((_DWORD *)v47 + 8);
          *(_DWORD *)buf = 67240960;
          *(_DWORD *)&buf[4] = v52;
          *(_WORD *)&buf[8] = 1026;
          *(_DWORD *)&buf[10] = v53;
          *(_WORD *)&buf[14] = 1026;
          *(_DWORD *)&buf[16] = v48;
          *(_WORD *)&buf[20] = 1026;
          *(_DWORD *)&buf[22] = v370;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "TileMaxPri, bins, priority, %{public}d, %{public}d, sum, %{public}d, priorityAtMax, %{public}d", buf, 0x1Au);
          v49 = qword_100417EF8;
          v54 = (uint64_t *)v47[1];
          if (v54)
            goto LABEL_73;
          goto LABEL_75;
        }
      }
      v49 = -1;
      v54 = (uint64_t *)v47[1];
      if (v54)
      {
        do
        {
LABEL_73:
          v55 = (uint64_t **)v54;
          v54 = (uint64_t *)*v54;
        }
        while (v54);
        goto LABEL_64;
      }
      do
      {
LABEL_75:
        v55 = (uint64_t **)v47[2];
        v56 = *v55 == v47;
        v47 = (uint64_t *)v55;
      }
      while (!v56);
LABEL_64:
      v47 = (uint64_t *)v55;
      if (v55 == &v382)
        goto LABEL_79;
    }
  }
LABEL_78:
  v370 = 0;
LABEL_79:
  v57 = *a1;
  v58 = a1[1];
  if (*a1 != v58)
  {
    v368 = 0;
    while (1)
    {
      v59 = sub_10008D00C(v57);
      v60 = v368;
      if (v59 == 1)
        v60 = v368 + 1;
      v368 = v60;
      v61 = sub_10008E9D0(v57);
      v62 = nullsub_10(v57);
      sub_10008930C(buf, v62);
      v63 = v396;
      v64 = &v396;
      v65 = (void **)&v396;
      if (!v396)
        goto LABEL_92;
      v65 = (void **)&v396;
      while (1)
      {
        while (1)
        {
          v64 = (uint64_t **)v63;
          v66 = (const void ***)(v63 + 4);
          if (!sub_10006A214((const void ***)buf, (const void ***)v63 + 4))
            break;
          v63 = *v64;
          v65 = (void **)v64;
          if (!*v64)
            goto LABEL_92;
        }
        if (!sub_10006A214(v66, (const void ***)buf))
          break;
        v65 = (void **)(v64 + 1);
        v63 = v64[1];
        if (!v63)
          goto LABEL_92;
      }
      v67 = *v65;
      if (!*v65)
      {
LABEL_92:
        v67 = operator new(0x38uLL);
        v67[2] = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *((_QWORD *)v67 + 6) = 0;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
        *((_QWORD *)v67 + 2) = v64;
        *v65 = v67;
        v68 = (uint64_t *)v67;
        if (*v395)
        {
          v395 = (uint64_t **)*v395;
          v68 = (uint64_t *)*v65;
        }
        sub_1000E05F4(v396, v68);
        ++v397;
      }
      *((_QWORD *)v67 + 6) = v61;
      v69 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      sub_10008E4F4(v57, (uint64_t)buf);
      v72 = buf[0];
      v73 = nullsub_10(v57);
      sub_10008930C(&v377, v73);
      v74 = v379;
      v75 = &v379;
      v76 = (void **)&v379;
      if (!v379)
        goto LABEL_108;
      v76 = (void **)&v379;
      while (1)
      {
        while (1)
        {
          v75 = (uint64_t **)v74;
          v77 = (const void ***)(v74 + 4);
          if (!sub_10006A214((const void ***)&v377, (const void ***)v74 + 4))
            break;
          v74 = *v75;
          v76 = (void **)v75;
          if (!*v75)
            goto LABEL_108;
        }
        if (!sub_10006A214(v77, (const void ***)&v377))
          break;
        v76 = (void **)(v75 + 1);
        v74 = v75[1];
        if (!v74)
          goto LABEL_108;
      }
      v78 = *v76;
      if (!*v76)
      {
LABEL_108:
        v78 = operator new(0x38uLL);
        v78[2] = v377;
        v377 = 0uLL;
        *((_BYTE *)v78 + 48) = 0;
        *(_QWORD *)v78 = 0;
        *((_QWORD *)v78 + 1) = 0;
        *((_QWORD *)v78 + 2) = v75;
        *v76 = v78;
        v79 = (uint64_t *)v78;
        if (*v378)
        {
          v378 = (uint64_t **)*v378;
          v79 = (uint64_t *)*v76;
        }
        sub_1000E05F4(v379, v79);
        ++v380;
      }
      *((_BYTE *)v78 + 48) = v72 ^ 1;
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
      if (*((_QWORD *)&v377 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = nullsub_10(v57);
      sub_10008930C(buf, v83);
      v84 = v394[0];
      if (!v394[0])
        goto LABEL_126;
      v85 = v394;
      do
      {
        v86 = v85;
        v87 = (const void ***)(v84 + 4);
        v88 = sub_10006A214((const void ***)v84 + 4, (const void ***)buf);
        v89 = v84 + 1;
        if (!v88)
        {
          v89 = v84;
          v85 = (_QWORD **)v84;
        }
        v84 = (_QWORD *)*v89;
      }
      while (*v89);
      if (v85 == v394
        || (!v88 ? (v90 = v87) : (v90 = (const void ***)(v86 + 4)), sub_10006A214((const void ***)buf, v90)))
      {
LABEL_126:
        v85 = v394;
      }
      v91 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_131;
      v92 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
        if (v85 != v394)
          goto LABEL_138;
      }
      else
      {
LABEL_131:
        if (v85 != v394)
          goto LABEL_138;
      }
      v94 = nullsub_10(v57);
      v95 = v391;
      if ((unint64_t)v391 >= v392)
      {
        v96 = sub_10023A33C((char **)&v390, v94);
      }
      else
      {
        sub_10008930C(v391, v94);
        v96 = v95 + 16;
      }
      v391 = v96;
LABEL_138:
      if (qword_100417EF8 == -1)
      {
        v97 = qword_100417F00;
        if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
          goto LABEL_140;
      }
      else
      {
        dispatch_once(&qword_100417EF8, &stru_1003FEE60);
        v97 = qword_100417F00;
        if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        {
LABEL_140:
          v98 = nullsub_10(v57);
          v99 = *(char *)(v98 + 23);
          v100 = *(_QWORD *)v98;
          v101 = sub_10008E9D0(v57);
          if (v99 >= 0)
            v102 = v98;
          else
            v102 = v100;
          *(_DWORD *)buf = 136381443;
          *(_QWORD *)&buf[4] = v102;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v101;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v85 == v394;
          *(_WORD *)&buf[28] = 2050;
          *(_QWORD *)&buf[30] = (v391 - (_BYTE *)v390) >> 4;
          _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "TileMaxPri, inDB, %{private}s, localId, %{private}llu, offlist, %{public}d, %{public}lu", buf, 0x26u);
        }
      }
      v57 += 144;
      if (v57 == v58)
        goto LABEL_147;
    }
  }
  v368 = 0;
LABEL_147:
  v359 = 0;
  v375 = 0;
  v371 = 0;
  v364 = 0;
  v360 = 0;
  v103 = 0;
  v374 = 0;
  v104 = 0xAAAAAAAAAAAAAAABLL * ((v402 - v401) >> 3) - 1;
  v105 = a4 - v372;
  if (a4 <= v372)
    v105 = 0;
  v369 = v105;
  v106 = (unint64_t)(v391 - (_BYTE *)v390) >> 4;
  while (2)
  {
    if (v103 > v104 || !v104)
    {
      v278 = a5;
      goto LABEL_483;
    }
    if (qword_100417EF8 == -1)
    {
      v107 = qword_100417F00;
      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        goto LABEL_156;
    }
    else
    {
      dispatch_once(&qword_100417EF8, &stru_1003FEE60);
      v107 = qword_100417F00;
      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      {
LABEL_156:
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = v103;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v104;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&buf[24] = v370;
        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "TileMaxPri, headtail, %{public}lu, %{public}lu, priorityAtMax, %{public}d", buf, 0x1Cu);
      }
    }
    v108 = 0xAAAAAAAAAAAAAAABLL * ((v402 - v401) >> 3);
    if (v103 < v108 && v104 < v108)
    {
      v367 = v106;
      v110 = *(_DWORD *)&v398[4 * v103];
      v373 = v104;
      v111 = *(_DWORD *)&v398[4 * v104];
      if (v374)
      {
LABEL_162:
        if (qword_100417EF8 == -1)
        {
          v112 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
            goto LABEL_164;
        }
        else
        {
          dispatch_once(&qword_100417EF8, &stru_1003FEE60);
          v112 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
          {
LABEL_164:
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v110;
            *(_WORD *)&buf[8] = 1026;
            *(_DWORD *)&buf[10] = v374;
            *(_WORD *)&buf[14] = 1026;
            *(_DWORD *)&buf[16] = v369;
            *(_WORD *)&buf[20] = 1026;
            *(_DWORD *)&buf[22] = v367;
            _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "TileMaxPri, spaceneed, priority, %{public}d, need, %{public}d, empty, %{public}d, avail, %{public}d", buf, 0x1Au);
          }
        }
        if (!v374)
        {
          v177 = v382;
          v178 = &v382;
          v179 = &v382;
          if (!v382)
            goto LABEL_288;
          v180 = v382;
          while (1)
          {
            while (1)
            {
              v178 = (uint64_t **)v180;
              v181 = *((_DWORD *)v180 + 7);
              if (v110 >= v181)
                break;
              v180 = *v178;
              v179 = v178;
              if (!*v178)
                goto LABEL_288;
            }
            if (v181 >= v110)
              break;
            v180 = v178[1];
            if (!v180)
            {
              v179 = v178 + 1;
LABEL_288:
              v182 = (int *)operator new(0x28uLL);
              v182[7] = v110;
              v182[8] = 0;
              *(_QWORD *)v182 = 0;
              *((_QWORD *)v182 + 1) = 0;
              *((_QWORD *)v182 + 2) = v178;
              *v179 = (uint64_t *)v182;
              v183 = (uint64_t *)v182;
              if (*v381)
              {
                v381 = (uint64_t *)*v381;
                v183 = *v179;
              }
              sub_1000E05F4(v382, v183);
              v177 = v382;
              ++v383;
LABEL_362:
              v223 = v182[8];
              for (i = &v382; ; v177 = *i)
              {
                v225 = i;
                if (!v177)
                  goto LABEL_369;
                while (1)
                {
                  i = (uint64_t **)v177;
                  v226 = *((_DWORD *)v177 + 7);
                  if (v110 < v226)
                    break;
                  if (v226 >= v110)
                  {
                    v229 = *((_DWORD *)i + 8);
                    if (qword_100417EF8 == -1)
                      goto LABEL_372;
                    goto LABEL_375;
                  }
                  v177 = i[1];
                  if (!v177)
                  {
                    v225 = i + 1;
LABEL_369:
                    v227 = operator new(0x28uLL);
                    v227[7] = v110;
                    v227[8] = 0;
                    *(_QWORD *)v227 = 0;
                    *((_QWORD *)v227 + 1) = 0;
                    *((_QWORD *)v227 + 2) = i;
                    *v225 = (uint64_t *)v227;
                    v228 = (uint64_t *)v227;
                    if (*v381)
                    {
                      v381 = (uint64_t *)*v381;
                      v228 = *v225;
                    }
                    sub_1000E05F4(v382, v228);
                    ++v383;
                    v229 = v227[8];
                    if (qword_100417EF8 == -1)
                    {
LABEL_372:
                      v103 += v223;
                      LODWORD(v364) = v229 + v364;
                      v230 = qword_100417F00;
                      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 67240192;
                        *(_DWORD *)&buf[4] = v110;
                        _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, allindb", buf, 8u);
                      }
                      goto LABEL_457;
                    }
LABEL_375:
                    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
                    goto LABEL_372;
                  }
                }
              }
            }
          }
          v182 = (int *)v178;
          goto LABEL_362;
        }
        v113 = v374 - v369;
        if (v374 <= v369)
        {
          v184 = v382;
          v185 = &v382;
          v186 = &v382;
          if (!v382)
            goto LABEL_298;
          v187 = v382;
          do
          {
            while (1)
            {
              v185 = (uint64_t **)v187;
              v188 = *((_DWORD *)v187 + 7);
              if (v110 >= v188)
                break;
              v187 = *v185;
              v186 = v185;
              if (!*v185)
                goto LABEL_298;
            }
            if (v188 >= v110)
            {
              v189 = (int *)v185;
              goto LABEL_377;
            }
            v187 = v185[1];
          }
          while (v187);
          v186 = v185 + 1;
LABEL_298:
          v189 = (int *)operator new(0x28uLL);
          v189[7] = v110;
          v189[8] = 0;
          *(_QWORD *)v189 = 0;
          *((_QWORD *)v189 + 1) = 0;
          *((_QWORD *)v189 + 2) = v185;
          *v186 = (uint64_t *)v189;
          v190 = (uint64_t *)v189;
          if (*v381)
          {
            v381 = (uint64_t *)*v381;
            v190 = *v186;
          }
          sub_1000E05F4(v382, v190);
          v184 = v382;
          ++v383;
LABEL_377:
          v231 = v189[8];
          for (j = &v382; ; v184 = *j)
          {
            v233 = j;
            if (!v184)
              goto LABEL_384;
            while (1)
            {
              j = (uint64_t **)v184;
              v234 = *((_DWORD *)v184 + 7);
              if (v110 < v234)
                break;
              if (v234 >= v110)
              {
                v237 = *((_DWORD *)j + 8);
                if (qword_100417EF8 == -1)
                  goto LABEL_387;
                goto LABEL_462;
              }
              v184 = j[1];
              if (!v184)
              {
                v233 = j + 1;
LABEL_384:
                v235 = operator new(0x28uLL);
                v235[7] = v110;
                v235[8] = 0;
                *(_QWORD *)v235 = 0;
                *((_QWORD *)v235 + 1) = 0;
                *((_QWORD *)v235 + 2) = j;
                *v233 = (uint64_t *)v235;
                v236 = (uint64_t *)v235;
                if (*v381)
                {
                  v381 = (uint64_t *)*v381;
                  v236 = *v233;
                }
                sub_1000E05F4(v382, v236);
                ++v383;
                v237 = v235[8];
                if (qword_100417EF8 == -1)
                {
LABEL_387:
                  v362 = v103;
                  v238 = qword_100417F00;
                  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 67240448;
                    *(_DWORD *)&buf[4] = v110;
                    *(_WORD *)&buf[8] = 2050;
                    *(_QWORD *)&buf[10] = (v385 - (_BYTE *)__p) >> 4;
                    _os_log_impl((void *)&_mh_execute_header, v238, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, haveempty, transfer, %{public}ld", buf, 0x12u);
                  }
                  v239 = v385;
                  if (v385 == __p)
                  {
LABEL_456:
                    v103 += v231;
                    LODWORD(v364) = v364 - v374 + v237;
                    v360 += v374;
                    v369 -= v374;
                    v385 = v239;
LABEL_457:
                    v374 = 0;
                    goto LABEL_458;
                  }
                  v358 = v237;
                  v240 = 0;
                  v239 = (char *)__p;
LABEL_392:
                  v242 = &v239[16 * v240];
                  v243 = v388;
                  if ((unint64_t)v388 >= v389)
                  {
                    v388 = (char *)sub_1001E3C34((uint64_t)&v387, v242);
                    v247 = (char *)__p + 16 * v240;
                    v248 = v379;
                    v249 = &v379;
                    v250 = &v379;
                    if (!v379)
                      goto LABEL_406;
                  }
                  else
                  {
                    *(_QWORD *)v388 = *(_QWORD *)v242;
                    v244 = *((_QWORD *)v242 + 1);
                    *((_QWORD *)v243 + 1) = v244;
                    if (v244)
                    {
                      v245 = (unint64_t *)(v244 + 8);
                      do
                        v246 = __ldxr(v245);
                      while (__stxr(v246 + 1, v245));
                    }
                    v388 = v243 + 16;
                    v247 = &v239[16 * v240];
                    v248 = v379;
                    v249 = &v379;
                    v250 = &v379;
                    if (!v379)
                    {
LABEL_406:
                      v252 = operator new(0x38uLL);
                      v252[4] = *(_QWORD *)v247;
                      v253 = *((_QWORD *)v247 + 1);
                      v252[5] = v253;
                      if (v253)
                      {
                        v254 = (unint64_t *)(v253 + 8);
                        do
                          v255 = __ldxr(v254);
                        while (__stxr(v255 + 1, v254));
                      }
                      *((_BYTE *)v252 + 48) = 0;
                      *v252 = 0;
                      v252[1] = 0;
                      v252[2] = v249;
                      *v250 = v252;
                      v256 = v252;
                      if (*v378)
                      {
                        v378 = (uint64_t **)*v378;
                        v256 = *v250;
                      }
                      v257 = v379;
                      v56 = v256 == v379;
                      *((_BYTE *)v256 + 24) = v256 == v379;
                      if (v56)
                        goto LABEL_433;
                      while (1)
                      {
                        v258 = v256[2];
                        if (*(_BYTE *)(v258 + 24))
                          goto LABEL_433;
                        v259 = *(uint64_t **)(v258 + 16);
                        v260 = *v259;
                        if (*v259 == v258)
                        {
                          v263 = v259[1];
                          if (!v263 || (v264 = *(unsigned __int8 *)(v263 + 24), v261 = (_BYTE *)(v263 + 24), v264))
                          {
                            if (*(uint64_t **)v258 == v256)
                            {
                              *(_BYTE *)(v258 + 24) = 1;
                              *((_BYTE *)v259 + 24) = 0;
                              v267 = *(_QWORD *)(v258 + 8);
                              *v259 = v267;
                              if (v267)
                                goto LABEL_426;
                            }
                            else
                            {
                              v265 = *(uint64_t **)(v258 + 8);
                              v266 = *v265;
                              *(_QWORD *)(v258 + 8) = *v265;
                              if (v266)
                              {
                                *(_QWORD *)(v266 + 16) = v258;
                                v259 = *(uint64_t **)(v258 + 16);
                              }
                              v265[2] = (uint64_t)v259;
                              *(_QWORD *)(*(_QWORD *)(v258 + 16) + 8 * (**(_QWORD **)(v258 + 16) != v258)) = v265;
                              *v265 = v258;
                              *(_QWORD *)(v258 + 16) = v265;
                              v259 = (uint64_t *)v265[2];
                              v258 = *v259;
                              *((_BYTE *)v265 + 24) = 1;
                              *((_BYTE *)v259 + 24) = 0;
                              v267 = *(_QWORD *)(v258 + 8);
                              *v259 = v267;
                              if (v267)
LABEL_426:
                                *(_QWORD *)(v267 + 16) = v259;
                            }
                            *(_QWORD *)(v258 + 16) = v259[2];
                            *(_QWORD *)(v259[2] + 8 * (*(_QWORD *)v259[2] != (_QWORD)v259)) = v258;
                            *(_QWORD *)(v258 + 8) = v259;
LABEL_432:
                            v259[2] = v258;
LABEL_433:
                            ++v380;
LABEL_434:
                            v269 = *((unsigned __int8 *)v252 + 48);
                            if (qword_100417EF8 == -1)
                            {
                              v270 = qword_100417F00;
                              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_436;
                            }
                            else
                            {
                              dispatch_once(&qword_100417EF8, &stru_1003FEE60);
                              v270 = qword_100417F00;
                              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
                              {
LABEL_436:
                                v271 = sub_10004BE10((char **)__p + 2 * v240);
                                v272 = sub_10004BE10((char **)__p + 2 * v240);
                                *(_DWORD *)buf = 136381187;
                                *(_QWORD *)&buf[4] = v271;
                                *(_WORD *)&buf[12] = 2081;
                                *(_QWORD *)&buf[14] = v272;
                                *(_WORD *)&buf[22] = 1026;
                                *(_DWORD *)&buf[24] = v269;
                                _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, exec, 1, %{private}s, R%{private}s, R, untouched, %{public}d", buf, 0x1Cu);
                              }
                            }
                            v375 += v269;
                            ++v240;
                            v239 = (char *)__p;
                            v241 = v385;
                            if (v240 >= (v385 - (_BYTE *)__p) >> 4)
                            {
                              if (v385 == __p)
                              {
                                v103 = v362;
                              }
                              else
                              {
                                v103 = v362;
                                do
                                {
                                  v274 = (std::__shared_weak_count *)*((_QWORD *)v241 - 1);
                                  if (v274)
                                  {
                                    p_shared_owners = (unint64_t *)&v274->__shared_owners_;
                                    do
                                      v276 = __ldaxr(p_shared_owners);
                                    while (__stlxr(v276 - 1, p_shared_owners));
                                    if (!v276)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
                                      std::__shared_weak_count::__release_weak(v274);
                                    }
                                  }
                                  v241 -= 16;
                                }
                                while (v241 != v239);
                              }
                              v237 = v358;
                              goto LABEL_456;
                            }
                            goto LABEL_392;
                          }
                        }
                        else if (!v260 || (v262 = *(unsigned __int8 *)(v260 + 24), v261 = (_BYTE *)(v260 + 24), v262))
                        {
                          if (*(uint64_t **)v258 == v256)
                          {
                            v273 = v256[1];
                            *(_QWORD *)v258 = v273;
                            if (v273)
                            {
                              *(_QWORD *)(v273 + 16) = v258;
                              v259 = *(uint64_t **)(v258 + 16);
                            }
                            v256[2] = (uint64_t)v259;
                            *(_QWORD *)(*(_QWORD *)(v258 + 16) + 8 * (**(_QWORD **)(v258 + 16) != v258)) = v256;
                            v256[1] = v258;
                            *(_QWORD *)(v258 + 16) = v256;
                            v259 = (uint64_t *)v256[2];
                            *((_BYTE *)v256 + 24) = 1;
                            *((_BYTE *)v259 + 24) = 0;
                            v258 = v259[1];
                            v268 = *(uint64_t **)v258;
                            v259[1] = *(_QWORD *)v258;
                            if (v268)
LABEL_430:
                              v268[2] = (uint64_t)v259;
                          }
                          else
                          {
                            *(_BYTE *)(v258 + 24) = 1;
                            *((_BYTE *)v259 + 24) = 0;
                            v258 = v259[1];
                            v268 = *(uint64_t **)v258;
                            v259[1] = *(_QWORD *)v258;
                            if (v268)
                              goto LABEL_430;
                          }
                          *(_QWORD *)(v258 + 16) = v259[2];
                          *(_QWORD *)(v259[2] + 8 * (*(_QWORD *)v259[2] != (_QWORD)v259)) = v258;
                          *(_QWORD *)v258 = v259;
                          goto LABEL_432;
                        }
                        *(_BYTE *)(v258 + 24) = 1;
                        v256 = v259;
                        *((_BYTE *)v259 + 24) = v259 == v257;
                        *v261 = 1;
                        if (v259 == v257)
                          goto LABEL_433;
                      }
                    }
                  }
                  v250 = &v379;
                  while (1)
                  {
                    while (1)
                    {
                      v249 = (uint64_t **)v248;
                      v251 = (const void ***)(v248 + 4);
                      if (!sub_10006A214((const void ***)v247, (const void ***)v248 + 4))
                        break;
                      v248 = *v249;
                      v250 = v249;
                      if (!*v249)
                        goto LABEL_406;
                    }
                    if (!sub_10006A214(v251, (const void ***)v247))
                      break;
                    v250 = v249 + 1;
                    v248 = v249[1];
                    if (!v248)
                      goto LABEL_406;
                  }
                  v252 = *v250;
                  if (*v250)
                    goto LABEL_434;
                  goto LABEL_406;
                }
LABEL_462:
                dispatch_once(&qword_100417EF8, &stru_1003FEE60);
                goto LABEL_387;
              }
            }
          }
        }
        if ((_DWORD)v367)
        {
          v361 = v103;
          if (v113 >= (int)v367)
            v113 = v367;
          v114 = v113;
          if (!v113)
          {
LABEL_301:
            if (qword_100417EF8 != -1)
              dispatch_once(&qword_100417EF8, &stru_1003FEE60);
            v359 += v114;
            v369 += v114;
            v367 = (v367 - v114);
            v191 = qword_100417F00;
            if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67240960;
              *(_DWORD *)&buf[4] = v110;
              *(_WORD *)&buf[8] = 2050;
              *(_QWORD *)&buf[10] = v114;
              *(_WORD *)&buf[18] = 2050;
              *(_QWORD *)&buf[20] = (v388 - (_BYTE *)v387) >> 4;
              *(_WORD *)&buf[28] = 2050;
              *(_QWORD *)&buf[30] = (v391 - (_BYTE *)v390) >> 4;
              _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, freeavail, %{public}ld, evict, %{public}lu, offlist, %{public}lu", buf, 0x26u);
            }
            v103 = v361;
            goto LABEL_458;
          }
          v115 = 0;
          while (2)
          {
            v116 = (char *)v390;
            v117 = *(_QWORD *)v390;
            v118 = *((_QWORD *)v390 + 1);
            *(_QWORD *)&v377 = *(_QWORD *)v390;
            *((_QWORD *)&v377 + 1) = v118;
            if (v118)
            {
              v119 = (unint64_t *)(v118 + 8);
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
            }
            v121 = v388;
            if ((unint64_t)v388 >= v389)
            {
              v127 = (char *)sub_1001E3C34((uint64_t)&v387, &v377);
              v116 = (char *)v390;
              v126 = v391;
              v388 = v127;
              v125 = (char *)v390 + 16;
              if ((char *)v390 + 16 == v391)
                goto LABEL_192;
            }
            else
            {
              *(_QWORD *)v388 = v117;
              v122 = *((_QWORD *)&v377 + 1);
              *((_QWORD *)v121 + 1) = *((_QWORD *)&v377 + 1);
              if (v122)
              {
                v123 = (unint64_t *)(v122 + 8);
                do
                  v124 = __ldxr(v123);
                while (__stxr(v124 + 1, v123));
              }
              v388 = v121 + 16;
              v125 = v116 + 16;
              v126 = v391;
              if (v116 + 16 == v391)
              {
LABEL_192:
                while (v125 != v116)
                {
                  v132 = (std::__shared_weak_count *)*((_QWORD *)v125 - 1);
                  if (v132)
                  {
                    v133 = (unint64_t *)&v132->__shared_owners_;
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                      std::__shared_weak_count::__release_weak(v132);
                    }
                  }
                  v125 -= 16;
                }
                v391 = v116;
                *(_QWORD *)buf = &v377;
                v135 = *((unsigned __int8 *)sub_10023A550((uint64_t **)&v378, (const void ***)&v377, (uint64_t)&unk_100395958, (_QWORD **)buf)+ 48);
                if (qword_100417EF8 == -1)
                {
                  v136 = qword_100417F00;
                  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_200;
                }
                else
                {
                  dispatch_once(&qword_100417EF8, &stru_1003FEE60);
                  v136 = qword_100417F00;
                  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_200:
                    v137 = sub_10004BE10((char **)&v377);
                    v138 = sub_10004BE10((char **)&v377);
                    *(_DWORD *)buf = 136381187;
                    *(_QWORD *)&buf[4] = v137;
                    *(_WORD *)&buf[12] = 2081;
                    *(_QWORD *)&buf[14] = v138;
                    *(_WORD *)&buf[22] = 1026;
                    *(_DWORD *)&buf[24] = v135;
                    _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, exec, 1, %{private}s, R%{private}s, R, untouched, %{public}d", buf, 0x1Cu);
                  }
                }
                v139 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
                if (*((_QWORD *)&v377 + 1))
                {
                  v140 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                v375 += v135;
                if (++v115 == v114)
                  goto LABEL_301;
                continue;
              }
            }
            break;
          }
          do
          {
            v128 = *(_OWORD *)v125;
            *(_QWORD *)v125 = 0;
            *((_QWORD *)v125 + 1) = 0;
            v129 = (std::__shared_weak_count *)*((_QWORD *)v116 + 1);
            *(_OWORD *)v116 = v128;
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v125 += 16;
            v116 += 16;
          }
          while (v125 != v126);
          v125 = v391;
          goto LABEL_192;
        }
        v192 = 0;
LABEL_308:
        v193 = v382;
        v194 = &v382;
LABEL_310:
        v195 = v194;
        if (v193)
        {
          while (1)
          {
            v194 = (uint64_t **)v193;
            v196 = *((_DWORD *)v193 + 7);
            if (v111 < v196)
            {
              v193 = *v194;
              goto LABEL_310;
            }
            if (v196 >= v111)
              break;
            v193 = v194[1];
            if (!v193)
            {
              v195 = v194 + 1;
              goto LABEL_315;
            }
          }
          if (v192 >= *((_DWORD *)v194 + 8))
          {
LABEL_356:
            if (qword_100417EF8 == -1)
            {
              v222 = qword_100417F00;
              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
                goto LABEL_358;
            }
            else
            {
              dispatch_once(&qword_100417EF8, &stru_1003FEE60);
              v222 = qword_100417F00;
              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
              {
LABEL_358:
                *(_DWORD *)buf = 67240448;
                *(_DWORD *)&buf[4] = v110;
                *(_WORD *)&buf[8] = 2050;
                *(_QWORD *)&buf[10] = (v388 - (_BYTE *)v387) >> 4;
                _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, tailpri, evict, %{public}lu", buf, 0x12u);
              }
            }
            v367 = 0;
LABEL_458:
            if (qword_100417EF8 == -1)
            {
              v277 = qword_100417F00;
              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
              {
LABEL_150:
                *(_DWORD *)buf = 134350080;
                *(_QWORD *)&buf[4] = v103;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v373;
                *(_WORD *)&buf[22] = 1026;
                *(_DWORD *)&buf[24] = v110;
                *(_WORD *)&buf[28] = 1026;
                *(_DWORD *)&buf[30] = v111;
                *(_WORD *)&buf[34] = 1026;
                *(_DWORD *)&buf[36] = v369;
                _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_INFO, "TileMaxPri, htindex, %{public}lu, %{public}lu, htpriority, %{public}d, %{public}d, empty, %{public}d", buf, 0x28u);
              }
            }
            else
            {
              dispatch_once(&qword_100417EF8, &stru_1003FEE60);
              v277 = qword_100417F00;
              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
                goto LABEL_150;
            }
            v104 = v373;
            v106 = v367;
            if (v110 > v370)
            {
              if (qword_100417EF8 != -1)
                dispatch_once(&qword_100417EF8, &stru_1003FEE60);
              v278 = a5;
              v280 = qword_100417F00;
              if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 134349568;
                *(_QWORD *)&buf[4] = v103;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v373;
                *(_WORD *)&buf[22] = 1026;
                *(_DWORD *)&buf[24] = v370;
                _os_log_impl((void *)&_mh_execute_header, v280, OS_LOG_TYPE_INFO, "TileMaxPri, primax, %{public}lu, %{public}lu, priorityAtMax, %{public}d", buf, 0x1Cu);
              }
              if (v103)
                v104 = v103 - 1;
              goto LABEL_483;
            }
            continue;
          }
        }
        else
        {
LABEL_315:
          v197 = operator new(0x28uLL);
          v197[7] = v111;
          v197[8] = 0;
          *(_QWORD *)v197 = 0;
          *((_QWORD *)v197 + 1) = 0;
          *((_QWORD *)v197 + 2) = v194;
          *v195 = (uint64_t *)v197;
          v198 = (uint64_t *)v197;
          if (*v381)
          {
            v381 = (uint64_t *)*v381;
            v198 = *v195;
          }
          sub_1000E05F4(v382, v198);
          ++v383;
          if (v192 >= v197[8])
            goto LABEL_356;
        }
        sub_10008930C(&v377, (uint64_t)&v401[24 * v373]);
        v199 = v396;
        if (!v396)
          goto LABEL_334;
        v200 = &v396;
        do
        {
          v201 = v200;
          v202 = (const void ***)(v199 + 4);
          v203 = sub_10006A214((const void ***)v199 + 4, (const void ***)&v377);
          if (v203)
            v204 = v199 + 1;
          else
            v204 = v199;
          if (v203)
            v200 = v201;
          else
            v200 = (uint64_t **)v199;
          v199 = (uint64_t *)*v204;
        }
        while (*v204);
        if (v200 == &v396
          || (!v203 ? (v205 = v202) : (v205 = (const void ***)(v201 + 4)), sub_10006A214((const void ***)&v377, v205)))
        {
LABEL_334:
          if (qword_100417EF8 != -1)
            dispatch_once(&qword_100417EF8, &stru_1003FEE60);
          ++v371;
          v206 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
          {
            v207 = sub_10004BE10((char **)&v377);
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v207;
            v208 = v206;
            v209 = "@TileMaxPri, nofetch, %{private}s, lowpri";
            v210 = 12;
            goto LABEL_338;
          }
        }
        else
        {
          v215 = v385;
          if ((unint64_t)v385 >= v386)
          {
            v219 = (char *)sub_1001E3C34((uint64_t)&__p, &v377);
          }
          else
          {
            *(_QWORD *)v385 = v377;
            v216 = *((_QWORD *)&v377 + 1);
            *((_QWORD *)v215 + 1) = *((_QWORD *)&v377 + 1);
            if (v216)
            {
              v217 = (unint64_t *)(v216 + 8);
              do
                v218 = __ldxr(v217);
              while (__stxr(v218 + 1, v217));
            }
            v219 = v215 + 16;
          }
          v385 = v219;
          if (qword_100417EF8 != -1)
            dispatch_once(&qword_100417EF8, &stru_1003FEE60);
          ++v369;
          ++HIDWORD(v364);
          v220 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
          {
            v221 = sub_10004BE10((char **)&v377);
            *(_DWORD *)buf = 136380931;
            *(_QWORD *)&buf[4] = v221;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = (v385 - (_BYTE *)__p) >> 4;
            v208 = v220;
            v209 = "@TileMaxPri, nofetch, %{private}s, evictlow, %{public}ld";
            v210 = 22;
LABEL_338:
            _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, v209, buf, v210);
          }
        }
        v211 = v373 - 1;
        if (!v373)
          v211 = 0;
        v373 = v211;
        v212 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
        if (*((_QWORD *)&v377 + 1))
        {
          v213 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          if (!v214)
          {
            ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
            std::__shared_weak_count::__release_weak(v212);
          }
        }
        ++v192;
        goto LABEL_308;
      }
      v142 = 0;
      v374 = 0;
      while (1)
      {
        v143 = v382;
        v144 = &v382;
LABEL_212:
        v145 = v144;
        if (v143)
        {
          while (1)
          {
            v144 = (uint64_t **)v143;
            v146 = *((_DWORD *)v143 + 7);
            if (v110 < v146)
            {
              v143 = *v144;
              goto LABEL_212;
            }
            if (v146 >= v110)
              break;
            v143 = v144[1];
            if (!v143)
            {
              v145 = v144 + 1;
              goto LABEL_217;
            }
          }
          if (v142 >= *((int *)v144 + 8))
            goto LABEL_162;
        }
        else
        {
LABEL_217:
          v147 = (uint64_t *)operator new(0x28uLL);
          *((_DWORD *)v147 + 7) = v110;
          *((_DWORD *)v147 + 8) = 0;
          *v147 = 0;
          v147[1] = 0;
          v147[2] = (uint64_t)v144;
          *v145 = v147;
          if (*v381)
          {
            v381 = (uint64_t *)*v381;
            v147 = *v145;
          }
          v148 = v382;
          v56 = v147 == v382;
          *((_BYTE *)v147 + 24) = v147 == v382;
          if (!v56)
          {
            do
            {
              v149 = v147[2];
              if (*(_BYTE *)(v149 + 24))
                break;
              v150 = *(uint64_t **)(v149 + 16);
              v151 = *v150;
              if (*v150 == v149)
              {
                v154 = v150[1];
                if (!v154 || (v155 = *(unsigned __int8 *)(v154 + 24), v152 = (_BYTE *)(v154 + 24), v155))
                {
                  if (*(uint64_t **)v149 == v147)
                  {
                    *(_BYTE *)(v149 + 24) = 1;
                    *((_BYTE *)v150 + 24) = 0;
                    v158 = *(_QWORD *)(v149 + 8);
                    *v150 = v158;
                    if (v158)
                      goto LABEL_234;
                  }
                  else
                  {
                    v156 = *(uint64_t **)(v149 + 8);
                    v157 = *v156;
                    *(_QWORD *)(v149 + 8) = *v156;
                    if (v157)
                    {
                      *(_QWORD *)(v157 + 16) = v149;
                      v150 = *(uint64_t **)(v149 + 16);
                    }
                    v156[2] = (uint64_t)v150;
                    *(_QWORD *)(*(_QWORD *)(v149 + 16) + 8 * (**(_QWORD **)(v149 + 16) != v149)) = v156;
                    *v156 = v149;
                    *(_QWORD *)(v149 + 16) = v156;
                    v150 = (uint64_t *)v156[2];
                    v149 = *v150;
                    *((_BYTE *)v156 + 24) = 1;
                    *((_BYTE *)v150 + 24) = 0;
                    v158 = *(_QWORD *)(v149 + 8);
                    *v150 = v158;
                    if (v158)
LABEL_234:
                      *(_QWORD *)(v158 + 16) = v150;
                  }
                  *(_QWORD *)(v149 + 16) = v150[2];
                  *(_QWORD *)(v150[2] + 8 * (*(_QWORD *)v150[2] != (_QWORD)v150)) = v149;
                  *(_QWORD *)(v149 + 8) = v150;
LABEL_242:
                  v150[2] = v149;
                  break;
                }
              }
              else if (!v151 || (v153 = *(unsigned __int8 *)(v151 + 24), v152 = (_BYTE *)(v151 + 24), v153))
              {
                if (*(uint64_t **)v149 == v147)
                {
                  v176 = v147[1];
                  *(_QWORD *)v149 = v176;
                  if (v176)
                  {
                    *(_QWORD *)(v176 + 16) = v149;
                    v150 = *(uint64_t **)(v149 + 16);
                  }
                  v147[2] = (uint64_t)v150;
                  *(_QWORD *)(*(_QWORD *)(v149 + 16) + 8 * (**(_QWORD **)(v149 + 16) != v149)) = v147;
                  v147[1] = v149;
                  *(_QWORD *)(v149 + 16) = v147;
                  v150 = (uint64_t *)v147[2];
                  *((_BYTE *)v147 + 24) = 1;
                  *((_BYTE *)v150 + 24) = 0;
                  v149 = v150[1];
                  v159 = *(uint64_t **)v149;
                  v150[1] = *(_QWORD *)v149;
                  if (v159)
LABEL_240:
                    v159[2] = (uint64_t)v150;
                }
                else
                {
                  *(_BYTE *)(v149 + 24) = 1;
                  *((_BYTE *)v150 + 24) = 0;
                  v149 = v150[1];
                  v159 = *(uint64_t **)v149;
                  v150[1] = *(_QWORD *)v149;
                  if (v159)
                    goto LABEL_240;
                }
                *(_QWORD *)(v149 + 16) = v150[2];
                *(_QWORD *)(v150[2] + 8 * (*(_QWORD *)v150[2] != (_QWORD)v150)) = v149;
                *(_QWORD *)v149 = v150;
                goto LABEL_242;
              }
              *(_BYTE *)(v149 + 24) = 1;
              v147 = v150;
              *((_BYTE *)v150 + 24) = v150 == v148;
              *v152 = 1;
            }
            while (v150 != v148);
          }
          ++v383;
          if (v142 >= 0)
            goto LABEL_162;
        }
        v160 = v103;
        v161 = v103 + v142;
        sub_10008930C(buf, (uint64_t)&v401[24 * v161]);
        v162 = v396;
        if (!v396)
          goto LABEL_254;
        v163 = &v396;
        do
        {
          v164 = v163;
          v165 = (const void ***)(v162 + 4);
          v166 = sub_10006A214((const void ***)v162 + 4, (const void ***)buf);
          v167 = v162 + 1;
          if (!v166)
          {
            v167 = v162;
            v163 = (uint64_t **)v162;
          }
          v162 = (uint64_t *)*v167;
        }
        while (*v167);
        if (v163 == &v396
          || (!v166 ? (v168 = v165) : (v168 = (const void ***)(v164 + 4)), sub_10006A214((const void ***)buf, v168)))
        {
LABEL_254:
          v163 = &v396;
        }
        v169 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_259;
        v170 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
          if (v163 == &v396)
          {
LABEL_266:
            if (qword_100417EF8 != -1)
              dispatch_once(&qword_100417EF8, &stru_1003FEE60);
            ++v374;
            v174 = qword_100417F00;
            if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
            {
              v175 = &v401[24 * v161];
              if (v175[23] < 0)
                v175 = *(char **)v175;
              *(_DWORD *)buf = 134349571;
              *(_QWORD *)&buf[4] = v161;
              *(_WORD *)&buf[12] = 2081;
              *(_QWORD *)&buf[14] = v175;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&buf[24] = v374;
              _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_INFO, "TileMaxPri, notindb, %{public}zu, %{private}s, need, %{public}d", buf, 0x1Cu);
              v103 = v160;
              ++v142;
            }
            else
            {
              v103 = v160;
              ++v142;
            }
            continue;
          }
        }
        else
        {
LABEL_259:
          if (v163 == &v396)
            goto LABEL_266;
        }
        if (qword_100417EF8 == -1)
        {
          v172 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
            goto LABEL_262;
        }
        else
        {
          dispatch_once(&qword_100417EF8, &stru_1003FEE60);
          v172 = qword_100417F00;
          if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
          {
LABEL_262:
            v173 = &v401[24 * v161];
            if (v173[23] < 0)
              v173 = *(char **)v173;
            v103 = v160;
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v173;
            _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, nofetch, %{private}s, indb", buf, 0xCu);
            ++v142;
            continue;
          }
        }
        v103 = v160;
        ++v142;
      }
    }
    break;
  }
  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
  v278 = a5;
  v279 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v103;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v104;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = 0xAAAAAAAAAAAAAAABLL * ((v402 - v401) >> 3);
    *(_WORD *)&buf[32] = 2050;
    *(_QWORD *)&buf[34] = (v399 - v398) >> 2;
    _os_log_impl((void *)&_mh_execute_header, v279, OS_LOG_TYPE_ERROR, "TileMaxPri, error, out of range, iterindex, %{public}lu, %{public}lu, sizes, %{public}lu, %{public}lu", buf, 0x2Au);
  }
  v103 = 0;
  v104 = 0;
LABEL_483:
  if (qword_100417EF8 == -1)
  {
    v281 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
      goto LABEL_485;
  }
  else
  {
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
    v281 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_485:
      v282 = (a2[1] - *a2) >> 5;
      v283 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
      *(_DWORD *)buf = 134350848;
      *(_QWORD *)&buf[4] = v282;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v360;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v364;
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = HIDWORD(v364);
      *(_WORD *)&buf[30] = 1026;
      *(_DWORD *)&buf[32] = v371;
      *(_WORD *)&buf[36] = 1026;
      *(_DWORD *)&buf[38] = v359;
      LOWORD(v405) = 1026;
      *(_DWORD *)((char *)&v405 + 2) = v375;
      HIWORD(v405) = 2050;
      v406 = v283;
      _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, results, in, %{public}lu, queued, %{public}d, indb, %{public}d, evictlow, %{public}d, lowpri, %{public}d, evictoff, %{public}d, untouched, %{public}d, numtiles, %{public}ld", buf, 0x3Au);
    }
  }
  *v278 = (unint64_t)(a2[1] - *a2) >> 5;
  v278[1] = v360;
  v278[2] = v364;
  v278[3] = v371;
  v278[4] = HIDWORD(v364);
  v278[5] = v359;
  v278[6] = v368;
  v278[7] = a4;
  v278[8] = v375;
  if (v104 | v103)
  {
    v300 = a3;
    if (v104 < 0xAAAAAAAAAAAAAAABLL * ((v402 - v401) >> 3) && v399 != v398)
    {
      v301 = *(_DWORD *)&v398[4 * v104];
      goto LABEL_517;
    }
    if (qword_100417EF8 == -1)
    {
      v302 = qword_100417F00;
      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
      {
LABEL_515:
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v104;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = (v399 - v398) >> 2;
        _os_log_impl((void *)&_mh_execute_header, v302, OS_LOG_TYPE_ERROR, "TileMaxPri, error, out of range, retindex, %{public}lu, size, %{public}lu", buf, 0x16u);
        v301 = 0;
        goto LABEL_516;
      }
    }
    else
    {
      dispatch_once(&qword_100417EF8, &stru_1003FEE60);
      v302 = qword_100417F00;
      if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
        goto LABEL_515;
    }
    v301 = 0;
    v300 = a3;
    goto LABEL_518;
  }
  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
  v284 = &v382;
  v285 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
  {
    v286 = v104;
    v288 = *a2;
    v287 = a2[1];
    v289 = &v382;
    v290 = v382;
    if (v382)
    {
      while (1)
      {
        while (1)
        {
          v289 = (uint64_t **)v290;
          v291 = *((_DWORD *)v290 + 7);
          if (v291 < 1)
            break;
          v290 = *v289;
          v284 = v289;
          if (!*v289)
            goto LABEL_497;
        }
        if ((v291 & 0x80000000) == 0)
          break;
        v290 = v289[1];
        if (!v290)
        {
          v284 = v289 + 1;
          goto LABEL_497;
        }
      }
      v292 = v289;
    }
    else
    {
LABEL_497:
      v292 = operator new(0x28uLL);
      v292[7] = 0;
      v292[8] = 0;
      *(_QWORD *)v292 = 0;
      *((_QWORD *)v292 + 1) = 0;
      *((_QWORD *)v292 + 2) = v289;
      *v284 = (uint64_t *)v292;
      v293 = (uint64_t *)v292;
      if (*v381)
      {
        v381 = (uint64_t *)*v381;
        v293 = *v284;
      }
      sub_1000E05F4(v382, v293);
      ++v383;
    }
    v294 = v292[8];
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = (v287 - v288) >> 5;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v294;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v285, OS_LOG_TYPE_ERROR, "TileMaxPri, error, group exceeds max, total, %{public}lu, numinpriority, %{public}d, max, %{public}d", buf, 0x18u);
    v104 = v286;
  }
  v295 = (char *)v387;
  for (k = v388; k != v295; k -= 16)
  {
    v297 = (std::__shared_weak_count *)*((_QWORD *)k - 1);
    if (v297)
    {
      v298 = (unint64_t *)&v297->__shared_owners_;
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
  }
  v301 = 0;
  v388 = v295;
LABEL_516:
  v300 = a3;
LABEL_517:
  if (qword_100417EF8 == -1)
  {
LABEL_518:
    v303 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
      goto LABEL_519;
  }
  else
  {
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
    v303 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_519:
      v304 = v399 - v398;
      if (v399 == v398)
      {
        v306 = 0;
      }
      else
      {
        v305 = v304 >> 2;
        if (v103 >= v305)
          v304 = v305 - 1;
        else
          v304 = v103;
        LODWORD(v304) = *(_DWORD *)&v398[4 * v304];
        v306 = *(_DWORD *)&v398[4 * v104];
      }
      *(_DWORD *)buf = 67241472;
      *(_DWORD *)&buf[4] = v301;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v304;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v306;
      *(_WORD *)&buf[20] = 2050;
      *(_QWORD *)&buf[22] = v103;
      *(_WORD *)&buf[30] = 2050;
      *(_QWORD *)&buf[32] = v104;
      *(_WORD *)&buf[40] = 2050;
      v405 = (v388 - (_BYTE *)v387) >> 4;
      _os_log_impl((void *)&_mh_execute_header, v303, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, converged, %{public}d, htpriorities, %{public}d, %{public}d, htindex, %{public}lu, %{public}lu, evict, %{public}lu", buf, 0x32u);
    }
  }
  LODWORD(v376) = v301;
  v300[1] = *v300;
  v307 = (char *)v387;
  if (v388 != v387)
  {
    v308 = 0;
    while (1)
    {
      *(_QWORD *)buf = &v307[16 * v308];
      v310 = sub_10023A674((uint64_t **)&v395, *(const void ****)buf, (uint64_t)&unk_100395958, (uint64_t **)buf);
      v311 = v310;
      v300 = a3;
      v313 = (char *)a3[1];
      v312 = a3[2];
      if ((unint64_t)v313 >= v312)
        break;
      *(_QWORD *)v313 = v310[6];
      v309 = (uint64_t)(v313 + 8);
LABEL_529:
      v300[1] = v309;
      ++v308;
      v307 = (char *)v387;
      if (v308 >= (v388 - (_BYTE *)v387) >> 4)
        goto LABEL_551;
    }
    v314 = (char *)*a3;
    v315 = (uint64_t)&v313[-*a3];
    v316 = v315 >> 3;
    v317 = (v315 >> 3) + 1;
    if (v317 >> 61)
      sub_1000D02C0();
    v318 = v312 - (_QWORD)v314;
    if (v318 >> 2 > v317)
      v317 = v318 >> 2;
    if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFF8)
      v319 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v319 = v317;
    if (v319)
    {
      if (v319 >> 61)
        sub_1000CDEB8();
      v320 = operator new(8 * v319);
      v321 = &v320[8 * v316];
      *v321 = v311[6];
      v309 = (uint64_t)(v321 + 1);
      if (v313 != v314)
      {
LABEL_540:
        v322 = v313 - 8 - v314;
        if (v322 < 0x58)
        {
          v300 = a3;
          goto LABEL_548;
        }
        v323 = v313 - &v320[v315];
        v300 = a3;
        if (v323 < 0x20)
          goto LABEL_614;
        v324 = (v322 >> 3) + 1;
        v325 = 8 * (v324 & 0x3FFFFFFFFFFFFFFCLL);
        v326 = &v313[-v325];
        v321 = (_QWORD *)((char *)v321 - v325);
        v327 = &v320[8 * v316 - 16];
        v328 = v313 - 16;
        v329 = v324 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v330 = *(_OWORD *)v328;
          *(v327 - 1) = *((_OWORD *)v328 - 1);
          *v327 = v330;
          v327 -= 2;
          v328 -= 32;
          v329 -= 4;
        }
        while (v329);
        v313 = v326;
        if (v324 != (v324 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_614:
          do
          {
LABEL_548:
            v331 = *((_QWORD *)v313 - 1);
            v313 -= 8;
            *--v321 = v331;
          }
          while (v313 != v314);
        }
LABEL_549:
        *v300 = v321;
        v300[1] = v309;
        v300[2] = &v320[8 * v319];
        if (v314)
          operator delete(v314);
        goto LABEL_529;
      }
    }
    else
    {
      v320 = 0;
      v321 = (_QWORD *)(8 * v316);
      *(_QWORD *)(8 * v316) = v311[6];
      v309 = 8 * v316 + 8;
      if (v313 != v314)
        goto LABEL_540;
    }
    v300 = a3;
    goto LABEL_549;
  }
LABEL_551:
  if (qword_100417EF8 == -1)
  {
    v332 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
      goto LABEL_553;
  }
  else
  {
    dispatch_once(&qword_100417EF8, &stru_1003FEE60);
    v332 = qword_100417F00;
    if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_553:
      v333 = (uint64_t)(v300[1] - *v300) >> 3;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v333;
      _os_log_impl((void *)&_mh_execute_header, v332, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, result, indoor, -1, -1, regional, %{public}ld, -1", buf, 0xCu);
    }
  }
  sub_10015F280((uint64_t)&v378, v379);
  sub_10004AAA0((uint64_t)&v381, v382);
  v334 = (char *)__p;
  if (__p)
  {
    v335 = v385;
    v336 = __p;
    if (v385 != __p)
    {
      do
      {
        v337 = (std::__shared_weak_count *)*((_QWORD *)v335 - 1);
        if (v337)
        {
          v338 = (unint64_t *)&v337->__shared_owners_;
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 - 1, v338));
          if (!v339)
          {
            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
            std::__shared_weak_count::__release_weak(v337);
          }
        }
        v335 -= 16;
      }
      while (v335 != v334);
      v336 = __p;
    }
    v385 = v334;
    operator delete(v336);
  }
  v340 = (char *)v387;
  if (v387)
  {
    v341 = v388;
    v342 = v387;
    if (v388 != v387)
    {
      do
      {
        v343 = (std::__shared_weak_count *)*((_QWORD *)v341 - 1);
        if (v343)
        {
          v344 = (unint64_t *)&v343->__shared_owners_;
          do
            v345 = __ldaxr(v344);
          while (__stlxr(v345 - 1, v344));
          if (!v345)
          {
            ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
            std::__shared_weak_count::__release_weak(v343);
          }
        }
        v341 -= 16;
      }
      while (v341 != v340);
      v342 = v387;
    }
    v388 = v340;
    operator delete(v342);
  }
  v346 = (char *)v390;
  if (v390)
  {
    v347 = v391;
    v348 = v390;
    if (v391 != v390)
    {
      do
      {
        v349 = (std::__shared_weak_count *)*((_QWORD *)v347 - 1);
        if (v349)
        {
          v350 = (unint64_t *)&v349->__shared_owners_;
          do
            v351 = __ldaxr(v350);
          while (__stlxr(v351 - 1, v350));
          if (!v351)
          {
            ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
            std::__shared_weak_count::__release_weak(v349);
          }
        }
        v347 -= 16;
      }
      while (v347 != v346);
      v348 = v390;
    }
    v391 = v346;
    operator delete(v348);
  }
  sub_10015F280((uint64_t)&v393, v394[0]);
  sub_10015F280((uint64_t)&v395, v396);
  if (v398)
    operator delete(v398);
  v352 = v401;
  if (v401)
  {
    v353 = v402;
    v354 = v401;
    if (v402 != v401)
    {
      do
      {
        if (*(v353 - 1) < 0)
          operator delete(*((void **)v353 - 3));
        v353 -= 24;
      }
      while (v353 != v352);
      v354 = v401;
    }
    v402 = v352;
    operator delete(v354);
  }
  return v376;
}

void sub_100239F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,_QWORD *a54,uint64_t a55,char a56,_QWORD *a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  char a68;
  _QWORD *a69;
  uint64_t v69;
  void *v71;

  sub_10015F280((uint64_t)&a53, a54);
  sub_10004AAA0((uint64_t)&a56, a57);
  sub_1000F7D3C(&a59);
  sub_1000F7D3C(&a62);
  sub_1000F7D3C(&a65);
  sub_10015F280((uint64_t)&a68, a69);
  sub_10015F280(v69 - 256, *(_QWORD **)(v69 - 248));
  v71 = *(void **)(v69 - 232);
  if (v71)
  {
    *(_QWORD *)(v69 - 224) = v71;
    operator delete(v71);
  }
  sub_1000FE50C((void **)(v69 - 208));
  _Unwind_Resume(a1);
}

void sub_10023A0F4(id a1)
{
  qword_100417F00 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Daemon");
}

uint64_t *sub_10023A120(uint64_t **a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  const void ***v7;
  uint64_t **v8;
  const void ***v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *__p;

  v4 = a1 + 1;
  __p = operator new(0x30uLL);
  sub_10008930C(__p + 4, a2);
  v5 = __p;
  v6 = *v4;
  if (!*v4)
  {
    v8 = v4;
LABEL_19:
    *v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t)v8;
    *v4 = v5;
    v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      v5 = *v4;
    }
    sub_1000E05F4(a1[1], v5);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  v7 = (const void ***)(__p + 4);
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v6;
      v9 = (const void ***)(v6 + 4);
      if (!sub_10006A214(v7, (const void ***)v6 + 4))
        break;
      v6 = *v8;
      v4 = v8;
      if (!*v8)
      {
        v4 = v8;
        v5 = __p;
        goto LABEL_19;
      }
    }
    if (!sub_10006A214(v9, v7))
      break;
    v4 = v8 + 1;
    v6 = v8[1];
    if (!v6)
    {
      v5 = __p;
      goto LABEL_19;
    }
  }
  v10 = *v4;
  v5 = __p;
  if (!*v4)
    goto LABEL_19;
  if (__p)
  {
    v11 = (std::__shared_weak_count *)__p[5];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    operator delete(__p);
  }
  return v10;
}

void sub_10023A298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10023A2C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10023A2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10023A2C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023A2C0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_10023A33C(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_1000D02C0();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_1000CDEB8();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v18 = &v8[16 * v3];
  v20 = &v8[16 * v7];
  sub_10008930C(v18, a2);
  v9 = v18;
  v11 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    v13 = a1[1];
  }
  else
  {
    do
    {
      v12 = *((_OWORD *)v10 - 1);
      v10 -= 16;
      *((_OWORD *)v9 - 1) = v12;
      v9 -= 16;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
    }
    while (v10 != v11);
    v13 = *a1;
    v10 = a1[1];
  }
  *a1 = v9;
  a1[1] = v18 + 16;
  a1[2] = v20;
  if (v10 == v13)
  {
    if (v10)
LABEL_17:
      operator delete(v10);
  }
  else
  {
    do
    {
      v19 = v10 - 16;
      v15 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v10 = v19;
    }
    while (v19 != v13);
    v10 = v13;
    if (v13)
      goto LABEL_17;
  }
  return v18 + 16;
}

void sub_10023A4B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10023A4C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023A4C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_10023A550(uint64_t **a1, const void ***a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  const void ***v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = (const void ***)(v6 + 4);
        if (!sub_10006A214(a2, (const void ***)v6 + 4))
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (!sub_10006A214(v10, a2))
        break;
      v7 = v9 + 1;
      v6 = v9[1];
      if (!v6)
        goto LABEL_9;
    }
    if (*v7)
      return *v7;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_9:
  v11 = operator new(0x38uLL);
  v12 = v11;
  v13 = (*a4)[1];
  v11[4] = **a4;
  v11[5] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *((_BYTE *)v11 + 48) = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = v9;
  *v7 = v11;
  v16 = (uint64_t *)**a1;
  v17 = v11;
  if (v16)
  {
    *a1 = v16;
    v17 = *v7;
  }
  sub_1000E05F4(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v12;
}

uint64_t *sub_10023A674(uint64_t **a1, const void ***a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  const void ***v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = (const void ***)(v6 + 4);
        if (!sub_10006A214(a2, (const void ***)v6 + 4))
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (!sub_10006A214(v10, a2))
        break;
      v7 = v9 + 1;
      v6 = v9[1];
      if (!v6)
        goto LABEL_9;
    }
    if (*v7)
      return *v7;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_9:
  v11 = (uint64_t *)operator new(0x38uLL);
  v12 = v11;
  v13 = (*a4)[1];
  v11[4] = **a4;
  v11[5] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v11[6] = 0;
  *v11 = 0;
  v11[1] = 0;
  v11[2] = (uint64_t)v9;
  *v7 = v11;
  v16 = (uint64_t *)**a1;
  v17 = v11;
  if (v16)
  {
    *a1 = v16;
    v17 = *v7;
  }
  sub_1000E05F4(a1[1], v17);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v12;
}

uint64_t sub_10023A798()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023A7F4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10023A850(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v5;
  double v6;
  _BYTE v7[16];
  double v8[2];
  double v9[2];
  void *v10;
  void *__p[2];
  char v12;
  std::string v13;

  if (*a2 == a2[1])
  {
    sub_1001E32EC(a1 + 48, a3, 0.0);
  }
  else
  {
    sub_100241924(a2, (uint64_t)v9);
    sub_10023FC48((uint64_t *)(a1 + 8), (uint64_t)v8);
    sub_100241A5C(v8, v9, (uint64_t)v7);
    v5 = sub_100047C20((uint64_t)v8);
    v6 = v5 - sub_100047C20((uint64_t)v7);
    if (v6 > 0.0)
    {
      sub_1000D5048(__p, "");
      sub_10023B010("b / (a + b)   cannot be greater than 1.0 if a>0 and b>0", &v13);
      sub_100174738((uint64_t)__p, (uint64_t)&v13, 1);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (v12 < 0)
        operator delete(__p[0]);
      sub_1000F2AE4((uint64_t)&v10);
    }
    sub_1001E32EC(a1 + 48, a3, v6);
    sub_100047C20(a1 + 32);
  }
}

void sub_10023AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_10023AA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  double v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  if (a3 >= a2)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
      return *(double *)(a1 + 136);
    else
      return 1.0 - exp((double)(a3 - a2) / -250000000.0 * *(double *)(a1 + 128));
  }
  else
  {
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_1003FEEF0);
    v5 = qword_100417EE0;
    v6 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Out-of-order suggestTransition. Expected: %lld <= %lld.", (uint8_t *)&v8, 0x16u);
    }
  }
  return v6;
}

void sub_10023ABE4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  double *v8;
  _QWORD *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15[2];
  char v16;
  std::string __p;
  std::string v18;

  v13 = a5;
  v8 = (double *)(a1 + 32);
  sub_100047C20(a1 + 32);
  v9 = operator new(0x1C0uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = off_1003FEF20;
  v10 = (double *)(v9 + 3);
  sub_10023B0A8((uint64_t)&__p, (uint64_t)(v9 + 3), a2, a3, (uint64_t)v8);
  *a4 = v9 + 3;
  a4[1] = v9;
  if (v13 > 1.0 || v13 < 0.0)
  {
    sub_1000D5048(v15, "");
    sub_10023B1A0("Transition percent must be between 0 and 1; it is actually ", &__p);
    sub_10016EE34(&v13, &v18);
    sub_100174738((uint64_t)v15, (uint64_t)&__p, 2);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_7;
LABEL_10:
        operator delete(v15[0]);
LABEL_7:
        sub_10015C2DC((uint64_t)&v14);
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  v11 = log(v13);
  sub_100047C28(v10, v11);
  v12 = log(1.0 - v13);
  sub_100047C28(v8, v12);
  sub_100047C20((uint64_t)v8);
  sub_100047C20((uint64_t)v10);
}

void sub_10023AEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_1000E095C(v27);
    _Unwind_Resume(a1);
  }
  sub_1000E095C(v27);
  _Unwind_Resume(a1);
}

void sub_10023AFE4(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_10023B010@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023B040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10023B05C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023B06C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10023B09C(uint64_t a1)
{
  return sub_1002BDEF0(a1 + 24);
}

void sub_10023B0A8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _BYTE v11[392];

  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_10022CB08((uint64_t)v11, a4);
  sub_1002BDEEC(a2, &v10, v11, a5);
  sub_1000BA0F0((uint64_t)v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10023B170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000BA0F0((uint64_t)&a11);
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10023B18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_10023B1A0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023B1D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023B1EC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023B248()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10023B2A4(double *a1@<X0>, _QWORD *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE v21[24];
  std::runtime_error v22;
  std::string v23;
  char v24;
  uint64_t v25;

  if (!*a2)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, "As of <rdar://problem/16461123> this is no longer possible");
    std::runtime_error::runtime_error(&v22, &v23);
    v22.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v21);
    sub_1000F2F7C(&v22, (uint64_t)"std::vector<double> WifiMapLikelihood::measurementLogLikelihood(const shared_ptr<JointWifiSignalSnapshot> &, const HybridCellIndex &, const std::vector<double> &, const WifiMapLikelihood::PriorProbabilities &, const WifiLikelihoodMeasurementEvent &, const std::vector<std::shared_ptr<SingleApRadioMap>> &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/wifi_map_likelihood.cpp", 109, (uint64_t)v21);
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2))
  {
    v17 = *a4;
    v16 = a4[1];
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)a8 = 0;
    v18 = v16 - v17;
    if (v16 != v17)
    {
      if (v18 < 0)
        sub_1000D02C0();
      v19 = (char *)operator new(v16 - v17);
      *(_QWORD *)a8 = v19;
      v20 = &v19[8 * (v18 >> 3)];
      *(_QWORD *)(a8 + 16) = v20;
      bzero(v19, v18 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(a8 + 8) = v20;
    }
  }
  else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) == 2)
  {
    sub_1002D0998((uint64_t)&v23, a7, a3);
    sub_10023B6CC(a1, a6, &v23, a5, a4, (float64x2_t **)a8);
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1004029C0;
    sub_1001D3A8C(&v23.__r_.__value_.__r.__words[2]);
  }
  else
  {
    sub_1002D08AC((uint64_t)&v23, a7, (uint64_t)a3);
    sub_10023B6CC(a1, a6, &v23, a5, a4, (float64x2_t **)a8);
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)off_100402998;
    if (v24)
      nullsub_110(&v25);
  }
}

void sub_10023B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a13);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

double sub_10023B600(double *a1, _QWORD *a2, double *a3, _QWORD *a4, double *a5, uint64_t a6, double a7)
{
  double *v14;
  double v15;
  uint64_t v17[3];
  void *__p[3];

  v14 = (double *)operator new(8uLL);
  *v14 = a7;
  v17[1] = (uint64_t)(v14 + 1);
  v17[2] = (uint64_t)(v14 + 1);
  v17[0] = (uint64_t)v14;
  sub_10023B2A4(a1, a2, a3, v17, a4, a5, a6, (uint64_t)__p);
  v15 = *(double *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  operator delete(v14);
  return v15;
}

void sub_10023B6B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023B6CC@<X0>(double *a1@<X0>, double *a2@<X1>, _QWORD **a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, float64x2_t **a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  float64x2_t *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  int v20;
  int *v21;
  int v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  double *v38;
  int v39;
  double v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t *v49;
  unint64_t v50;
  float64x2_t v51;
  uint64_t v52;
  unint64_t v53;
  float64x2_t *v54;
  double *v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD v60[2];
  double v61;
  char v62;
  void *v63[2];
  std::runtime_error v64;
  char v65;
  std::string __p;
  std::string v67;
  std::string v68;
  std::string v69;

  v60[1] = 0;
  v61 = 0.0;
  v60[0] = off_1003F9C58;
  v62 = 0;
  v13 = *a5;
  v12 = a5[1];
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  v14 = v12 - v13;
  if (v12 == v13)
  {
    v15 = 0;
  }
  else
  {
    if (v14 < 0)
      sub_1000D02C0();
    v15 = (float64x2_t *)operator new(v12 - v13);
    *a6 = v15;
    a6[2] = (float64x2_t *)((char *)v15 + 8 * (v14 >> 3));
    bzero(v15, v14);
    a6[1] = (float64x2_t *)((char *)v15 + v14);
  }
  v59 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4);
  v16 = sub_1002D0870((uint64_t)a3);
  v58 = v16;
  if (v59 != v16)
  {
    sub_1000D5048(&v64, "");
    sub_10016A234("Mismatch between number of scans ", &__p);
    sub_1001E2B30(&v59, &v67);
    sub_10023DB80(" and number of map cells ", &v68);
    sub_1001E2B30(&v58, &v69);
    sub_100174738((uint64_t)&v64, (uint64_t)&__p, 4);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v69.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_66;
      }
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_67;
    }
LABEL_66:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((v65 & 0x80000000) == 0)
        goto LABEL_57;
LABEL_68:
      operator delete(v64.__vftable);
LABEL_57:
      sub_1000F2AE4((uint64_t)v63);
    }
LABEL_67:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v65 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_68;
  }
  if (v16)
  {
    v17 = 0;
    v56 = a1;
    do
    {
      if (a2[7] * *(double *)(*((_QWORD *)a2 + 3) + 8 * v17) != 0.0)
      {
        v18 = *a2;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4) <= v17)
          sub_1001E2FA0();
        v57 = a2[7] * *(double *)(*((_QWORD *)a2 + 3) + 8 * v17);
        v19 = *(_QWORD *)&v18 + 208 * v17;
        v22 = *(_DWORD *)(v19 + 32);
        v21 = (int *)(v19 + 32);
        v20 = v22;
        if (v22 == v22 >> 31)
        {
          v23 = *(double *)(*(_QWORD *)&v18 + 208 * v17 + 72);
        }
        else
        {
          v24 = *(_QWORD *)&v18 + 208 * v17;
          v27 = *(_QWORD *)(v24 + 40);
          v25 = v24 + 40;
          v26 = v27;
          if (v20 >= 0)
            v28 = v25;
          else
            v28 = v26;
          v23 = (double)*(int *)(v28 + 92);
        }
        if (sub_10021930C(v23))
        {
          sub_1000D5048(&v64, "");
          sub_100218440("Bad scans must have been deweighted already!!!!", &__p);
          sub_100174738((uint64_t)&v64, (uint64_t)&__p, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v65 < 0)
            operator delete(v64.__vftable);
          sub_10015C2DC((uint64_t)v63);
        }
        v29 = *(double *)(*a4 + 8 * v17);
        v30 = *a1;
        sub_1000504A8((uint64_t)v60, NAN);
        sub_1000504A0((uint64_t)v60, NAN);
        v31 = v29 * v30;
        if ((sub_1002D0884(a3, v17) & 1) != 0)
        {
          if (v61 <= 0.0)
          {
            sub_1000D5048(&__p, "");
            sub_100174738((uint64_t)&__p, 0, 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            sub_1000F2AE4((uint64_t)&v64);
          }
          if (v61 > 1.0 && v61 < 1.00000001)
            v61 = 1.0;
          v32 = *a5;
          if (a5[1] != *a5)
          {
            v33 = a3;
            v34 = a4;
            v35 = 0;
            v36 = *(_QWORD *)&v18 + 208 * v17;
            v37 = (_QWORD *)(v36 + 40);
            v38 = (double *)(v36 + 72);
            do
            {
              v39 = *v21;
              if (v39 == v39 >> 31)
              {
                v40 = *v38;
              }
              else
              {
                if (v39 >= 0)
                  v41 = v37;
                else
                  v41 = (_QWORD *)*v37;
                v40 = (double)*((int *)v41 + 23);
              }
              v15->f64[v35] = v15->f64[v35] + v57 * sub_10023BE38((uint64_t)v60, v40 + *(double *)(v32 + 8 * v35), v31);
              ++v35;
              v32 = *a5;
            }
            while (v35 < (a5[1] - *a5) >> 3);
            a4 = v34;
            a3 = v33;
            a1 = v56;
          }
          goto LABEL_8;
        }
        v42 = a5[1] - *a5;
        if (v42)
        {
          v43 = v42 >> 3;
          v44 = log(v31);
          if (v43 <= 1)
            v45 = 1;
          else
            v45 = v43;
          if (v45 >= 4)
          {
            v46 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
            v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44, 0);
            v49 = v15 + 1;
            v50 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v51 = vmlaq_f64(*v49, v48, v47);
              v49[-1] = vmlaq_f64(v49[-1], v48, v47);
              *v49 = v51;
              v49 += 2;
              v50 -= 4;
            }
            while (v50);
            if (v45 == v46)
              goto LABEL_8;
          }
          else
          {
            v46 = 0;
          }
          do
          {
            v15->f64[v46] = v15->f64[v46] + v57 * v44;
            ++v46;
          }
          while (v45 != v46);
        }
      }
LABEL_8:
      ++v17;
    }
    while (v17 < v59);
  }
  v52 = a5[1] - *a5;
  if (v52)
  {
    v53 = v52 >> 3;
    if (v53 <= 1)
      v53 = 1;
    v54 = v15;
    do
    {
      v54 = (float64x2_t *)((char *)v54 + 8);
      --v53;
    }
    while (v53);
  }
  return nullsub_110(v60);
}

void sub_10023BD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  if (a28 < 0)
    operator delete(__p);
  if (v39)
  {
    *(_QWORD *)(a9 + 8) = v39;
    operator delete(v39);
  }
  nullsub_110(&a19);
  _Unwind_Resume(a1);
}

double sub_10023BE38(uint64_t a1, double a2, double a3)
{
  double v3;
  long double v5;
  void *v8[2];
  void *__p[2];
  char v10;

  v3 = *(double *)(a1 + 16);
  if (v3 < 0.0 || v3 > 1.0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v10 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)v8);
  }
  v5 = (1.0 - v3) * a3 + v3 * sub_100242114(*(double *)(a1 + 8), a2);
  if (v5 < 0.0 || v5 > 1.0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v10 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v8);
  }
  return log(v5);
}

void sub_10023C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023C0CC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, double **a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  long double v44;
  long double v45;
  double v46;
  double v47;
  unint64_t v49;
  double *v50;
  uint64_t v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  double *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  _OWORD *v66;
  double *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  _BYTE v78[64];
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  void *__p[2];
  void *v86[2];
  char v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;

  v4 = a1;
  v7 = *a2;
  v6 = a2[1];
  sub_100043AC8(a1, (uint64_t)&v88);
  sub_100304414((uint64_t)v78, (uint64_t)&v88);
  v8 = (v6 - v7) / 208;
  nullsub_26(&v88);
  if (v6 == v7)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    if (v8 <= 1)
      v12 = 1;
    else
      v12 = (v6 - v7) / 208;
    do
    {
      if (*(double *)(a2[3] + 8 * v11) > 0.0)
      {
        v13 = *a2 + v9;
        v14 = *(_DWORD *)(v13 + 32);
        if (v14 == v14 >> 31)
        {
          v15 = *(double *)(v13 + 72);
        }
        else
        {
          v18 = *(_QWORD *)(v13 + 40);
          v16 = v13 + 40;
          v17 = v18;
          if (v14 < 0)
            v16 = v17;
          v15 = (double)*(int *)(v16 + 92);
        }
        sub_100047E1C((uint64_t)v78, v15 + -0.5, v15 + 0.5, 1.0);
        v10 = 1;
      }
      ++v11;
      v9 += 208;
    }
    while (v12 != v11);
  }
  sub_100043AC8((uint64_t)v78, (uint64_t)&v88);
  v19 = *(double *)&v89.__r_.__value_.__r.__words[2];
  nullsub_26(&v88);
  v77 = v19;
  if ((v10 & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v6 != v7)
    {
      if (v8 >> 61)
        sub_1000D02C0();
      v22 = (double *)operator new(8 * v8);
      *a3 = v22;
      v23 = &v22[v8];
      a3[2] = v23;
      bzero(v22, 8 * v8);
      a3[1] = v23;
    }
    return nullsub_26(v78);
  }
  v76 = 0.0;
  if (sub_100304418(v4) <= 1.44269504)
  {
    if (sub_100304418(v4) <= 0.693147181)
      v24 = sub_100304420((uint64_t)v78);
    else
      v24 = sub_100304420(v4);
    v21 = v77 + (v24 - v77) / -0.442695041;
  }
  else
  {
    v20 = sub_100304420(v4);
    v21 = v77 - (v20 - v77) / (sub_100304418(v4) + -1.0);
  }
  v76 = v21;
  if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sub_1000D5048(v86, "");
    sub_10017B9FC("allDbmMin must be a well-behaved number.", &v88);
    sub_100174738((uint64_t)v86, (uint64_t)&v88, 1);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (v87 < 0)
      operator delete(v86[0]);
    sub_1000F2AE4((uint64_t)__p);
  }
  v74 = 0.0;
  v75 = 0.0;
  if (sub_100304418(v4) <= 0.693147181)
  {
    v74 = 0.693147181;
    v26 = sub_100304420((uint64_t)v78) * 0.693147181;
  }
  else
  {
    v74 = sub_100304418(v4);
    v25 = sub_100304420(v4);
    v26 = v25 * sub_100304418(v4);
  }
  v75 = v26;
  v73 = v26 - v74 * v76;
  if (v73 < 0.0)
  {
    sub_1000D5048(v86, "");
    sub_10016A234("lambda_floored is always positive", &v88);
    sub_10016EE34(&v73, &v89);
    sub_10023D198(" ", &v90);
    sub_10016EE34(&v75, &v91);
    sub_10023D198(" ", &v92);
    sub_10016EE34(&v74, &v93);
    sub_10023D198(" ", &v94);
    sub_10016EE34(&v76, &v95);
    sub_100174738((uint64_t)v86, (uint64_t)&v88, 8);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v95.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_141:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_142;
        goto LABEL_151;
      }
    }
    else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_141;
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_143;
      goto LABEL_152;
    }
LABEL_151:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_144;
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_145;
      goto LABEL_154;
    }
LABEL_153:
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_145:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_146;
      goto LABEL_155;
    }
LABEL_154:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_146:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_147;
      goto LABEL_156;
    }
LABEL_155:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_147:
      if ((v87 & 0x80000000) == 0)
        goto LABEL_148;
LABEL_157:
      operator delete(v86[0]);
LABEL_148:
      sub_1000F2AE4((uint64_t)__p);
    }
LABEL_156:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((v87 & 0x80000000) == 0)
      goto LABEL_148;
    goto LABEL_157;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((unint64_t)(v6 - v7 + 207) >= 0x19F)
  {
    if (v8 >> 61)
      sub_1000D02C0();
    v27 = (double *)operator new(8 * v8);
    *a3 = v27;
    a3[1] = v27;
    a3[2] = &v27[v8];
  }
  if (v6 != v7)
  {
    v28 = 0;
    if (v8 <= 1)
      v29 = 1;
    else
      v29 = (v6 - v7) / 208;
    v72 = v4;
    do
    {
      while (1)
      {
        v30 = *a2;
        v31 = *(_DWORD *)(*a2 + 208 * v28 + 32);
        v32 = v31 >> 31;
        v33 = 0.0;
        if (*(double *)(a2[3] + 8 * v28) > 0.0)
        {
          v34 = v30 + 208 * v28;
          if (v32 == v31)
          {
            v35 = *(double *)(v34 + 72);
          }
          else
          {
            v38 = *(_QWORD *)(v34 + 40);
            v36 = v34 + 40;
            v37 = v38;
            if (v31 < 0)
              v36 = v37;
            v35 = (double)*(int *)(v36 + 92);
          }
          v33 = v35 - v76;
        }
        v39 = v30 + 208 * v28;
        if (v32 == v31)
        {
          v40 = *(double *)(v39 + 72);
        }
        else
        {
          v43 = *(_QWORD *)(v39 + 40);
          v41 = v39 + 40;
          v42 = v43;
          if (v31 < 0)
            v41 = v42;
          v40 = (double)*(int *)(v41 + 92);
        }
        v83 = v40;
        v82 = sub_100304418(v4);
        v81 = sub_100304420(v4);
        v80 = sub_100304420((uint64_t)v78);
        if (v33 < 0.0)
        {
          sub_1000D5048(v86, "");
          sub_10016A234("There is a bug in your allDbmMin.", &v88);
          sub_10016EE34(&v83, &v89);
          sub_10023D198(" ", &v90);
          sub_10016EE34(&v76, &v91);
          sub_10023DC64(" N=", &v92);
          sub_10016EE34(&v82, &v93);
          sub_10023DC64(" a=", &v94);
          sub_10016EE34(&v77, &v95);
          sub_10023D1E4(" Rmu=", &v96);
          sub_10016EE34(&v81, &v97);
          sub_10016F1F8(" Rmu_=", &v98);
          sub_10016EE34(&v80, &v99);
          sub_100174738((uint64_t)v86, (uint64_t)&v88, 12);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_108;
LABEL_81:
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_82;
LABEL_109:
            operator delete(v97.__r_.__value_.__l.__data_);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_110;
LABEL_83:
            if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_84;
LABEL_111:
            operator delete(v95.__r_.__value_.__l.__data_);
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_112;
LABEL_85:
            if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_86;
LABEL_113:
            operator delete(v93.__r_.__value_.__l.__data_);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_114;
LABEL_87:
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_88;
LABEL_115:
            operator delete(v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_116;
LABEL_89:
            if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_90;
LABEL_117:
            operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_118;
LABEL_91:
            if (v87 < 0)
LABEL_119:
              operator delete(v86[0]);
          }
          else
          {
            if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_81;
LABEL_108:
            operator delete(v98.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_109;
LABEL_82:
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_83;
LABEL_110:
            operator delete(v96.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_111;
LABEL_84:
            if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_85;
LABEL_112:
            operator delete(v94.__r_.__value_.__l.__data_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_113;
LABEL_86:
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_87;
LABEL_114:
            operator delete(v92.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_115;
LABEL_88:
            if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_89;
LABEL_116:
            operator delete(v90.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_117;
LABEL_90:
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_91;
LABEL_118:
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v87 < 0)
              goto LABEL_119;
          }
          sub_1000F2AE4((uint64_t)__p);
        }
        v83 = v74;
        v84 = v73;
        v82 = v33;
        v44 = (v33 + 0.5) / v73 + 1.0;
        v45 = 1.0 / (v73 + v33 + -0.5) + 1.0;
        v80 = v45;
        v81 = v44;
        v46 = pow(v44, -v74);
        v47 = v46 * (pow(v45, v74) + -1.0);
        v79 = v47;
        if (v47 < 0.0 || v47 > 1.0)
        {
          sub_1000D5048(v86, "");
          sub_10023D100("Prb must be between 0.0 and 1.0, but was ", &v88);
          sub_10016EE34(&v79, &v89);
          sub_10023D14C(" (", &v90);
          sub_10016EE34(&v83, &v91);
          sub_10023D198(" ", &v92);
          sub_10016EE34(&v84, &v93);
          sub_10023D198(" ", &v94);
          sub_10016EE34(&v82, &v95);
          sub_10023D1E4(") == ", &v96);
          sub_10016EE34(&v81, &v97);
          sub_10023D198(" ", &v98);
          sub_10016EE34(&v80, &v99);
          sub_100174738((uint64_t)v86, (uint64_t)&v88, 12);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_121;
LABEL_95:
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_96;
LABEL_122:
            operator delete(v97.__r_.__value_.__l.__data_);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_123;
LABEL_97:
            if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_98;
LABEL_124:
            operator delete(v95.__r_.__value_.__l.__data_);
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_125;
LABEL_99:
            if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_100;
LABEL_126:
            operator delete(v93.__r_.__value_.__l.__data_);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_127;
LABEL_101:
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_102;
LABEL_128:
            operator delete(v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_129;
LABEL_103:
            if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_104;
LABEL_130:
            operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_131;
LABEL_105:
            if (v87 < 0)
LABEL_132:
              operator delete(v86[0]);
          }
          else
          {
            if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_95;
LABEL_121:
            operator delete(v98.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_122;
LABEL_96:
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_97;
LABEL_123:
            operator delete(v96.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_124;
LABEL_98:
            if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_99;
LABEL_125:
            operator delete(v94.__r_.__value_.__l.__data_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_126;
LABEL_100:
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_101;
LABEL_127:
            operator delete(v92.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_128;
LABEL_102:
            if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_103;
LABEL_129:
            operator delete(v90.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_130;
LABEL_104:
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_105;
LABEL_131:
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v87 < 0)
              goto LABEL_132;
          }
          sub_1000F2AE4((uint64_t)__p);
        }
        v50 = a3[1];
        v49 = (unint64_t)a3[2];
        if ((unint64_t)v50 >= v49)
          break;
        *v50 = v47;
        a3[1] = v50 + 1;
        if (++v28 == v29)
          return nullsub_26(v78);
      }
      v51 = v29;
      v52 = *a3;
      v53 = (char *)v50 - (char *)*a3;
      v54 = v53 >> 3;
      v55 = (v53 >> 3) + 1;
      if (v55 >> 61)
        sub_1000D02C0();
      v56 = v49 - (_QWORD)v52;
      if (v56 >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        if (v57 >> 61)
          sub_1000CDEB8();
        v58 = operator new(8 * v57);
        v59 = (double *)&v58[8 * v54];
        *v59 = v47;
        v60 = (uint64_t)(v59 + 1);
        if (v50 == v52)
        {
LABEL_69:
          v29 = v51;
          v4 = v72;
          goto LABEL_75;
        }
      }
      else
      {
        v58 = 0;
        v59 = (double *)(8 * v54);
        *(double *)(8 * v54) = v47;
        v60 = 8 * v54 + 8;
        if (v50 == v52)
          goto LABEL_69;
      }
      v61 = (char *)(v50 - 1) - (char *)v52;
      if (v61 >= 0x58)
      {
        v62 = (char *)v50 - &v58[v53];
        v29 = v51;
        v4 = v72;
        if (v62 >= 0x20)
        {
          v63 = (v61 >> 3) + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v65 = &v50[v64 / 0xFFFFFFFFFFFFFFF8];
          v59 = (double *)((char *)v59 - v64);
          v66 = &v58[8 * v54 - 16];
          v67 = v50 - 2;
          v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 4;
            v68 -= 4;
          }
          while (v68);
          v50 = v65;
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_75;
        }
      }
      else
      {
        v29 = v51;
        v4 = v72;
      }
      do
      {
        v70 = *((_QWORD *)v50-- - 1);
        *((_QWORD *)v59-- - 1) = v70;
      }
      while (v50 != v52);
LABEL_75:
      *a3 = v59;
      a3[1] = (double *)v60;
      a3[2] = (double *)&v58[8 * v57];
      if (v52)
        operator delete(v52);
      a3[1] = (double *)v60;
      ++v28;
    }
    while (v28 != v29);
  }
  return nullsub_26(v78);
}

void sub_10023CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0)
  {
    operator delete(__p);
    nullsub_26(&a27);
    _Unwind_Resume(a1);
  }
  nullsub_26(&a27);
  _Unwind_Resume(a1);
}

std::string *sub_10023D0B4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023D0E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023D100@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023D130(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023D14C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023D17C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023D198@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023D1C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023D1E4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023D214(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10023D230(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_10023D584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002274CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023D598(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (void *)v5[9];
    if (v6)
    {
      v5[10] = v6;
      operator delete(v6);
    }
    v7 = (std::__shared_weak_count *)v5[6];
    if (!v7)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = (std::__shared_weak_count *)v5[3];
      if (v10)
      {
LABEL_13:
        v11 = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
LABEL_12:
      v10 = (std::__shared_weak_count *)v5[3];
      if (v10)
        goto LABEL_13;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *sub_10023D67C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  char **v12;
  char *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v7 = *(unsigned int *)(a2 + 16);
  v8 = *(int *)(a2 + 20);
  v9 = v8 ^ (v7 << 32);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8 ^ (v7 << 32);
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 8) == (_DWORD)v7 && *((_DWORD *)v13 + 9) == (_DWORD)v8)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = *(char **)v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 8) == (_DWORD)v7 && *((_DWORD *)v13 + 9) == (_DWORD)v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v18 = (_QWORD *)(a1 + 16);
  v19 = (char *)operator new(0x60uLL);
  v13 = v19;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = v9;
  v20 = *a4;
  *((_QWORD *)v19 + 2) = **a4;
  v21 = v20[1];
  *((_QWORD *)v19 + 3) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *((_QWORD *)v19 + 4) = v20[2];
  *((_QWORD *)v19 + 5) = v20[3];
  v24 = v20[4];
  *((_QWORD *)v19 + 6) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 5);
  *((_QWORD *)v19 + 10) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 9) = 0;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (v10 && (float)(v28 * (float)v10) >= v27)
  {
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v30)
    {
LABEL_40:
      *(_QWORD *)v13 = *v30;
LABEL_75:
      *v30 = v13;
      goto LABEL_76;
    }
  }
  else
  {
    v31 = 1;
    if (v10 >= 3)
      v31 = (v10 & (v10 - 1)) != 0;
    v32 = v31 | (2 * v10);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_51;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_51:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v39 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v29 = *(_QWORD *)a1;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v30)
          goto LABEL_40;
      }
      else
      {
        v4 = v9;
        v29 = *(_QWORD *)a1;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v30)
          goto LABEL_40;
      }
    }
    else
    {
      v4 = v39 & v9;
      v29 = *(_QWORD *)a1;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v9));
      if (v30)
        goto LABEL_40;
    }
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v29 + 8 * v4) = v18;
  if (*(_QWORD *)v13)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v40 >= v10)
        v40 %= v10;
    }
    else
    {
      v40 &= v10 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_75;
  }
LABEL_76:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_10023DA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10023DA1C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_10023DA1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_14;
    v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    v4 = (std::__shared_weak_count *)v2[6];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)v2[3];
    if (!v7)
      goto LABEL_14;
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      operator delete(v2);
    }
    else
    {
LABEL_14:
      operator delete(v2);
    }
  }
}

std::string *sub_10023DAE8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DB18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023DB34@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DB64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023DB80@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DBB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023DBCC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DBFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023DC18@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DC48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10023DC64@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023DC94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10023DCB0()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023DD0C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10023DD68(uint64_t a1, _QWORD *__p)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (!*(_BYTE *)(a1 + 8))
  {
    if (!__p)
      return;
    goto LABEL_14;
  }
  v3 = __p[4];
  if (v3)
  {
    v4 = __p[5];
    v5 = (void *)__p[4];
    if (v4 != v3)
    {
      do
      {
        v7 = *(_DWORD *)(v4 - 176);
        if (v7 == v7 >> 31)
        {
          if (*(_BYTE *)(v4 - 128))
            *(_BYTE *)(v4 - 128) = 0;
        }
        else
        {
          v6 = *(_QWORD *)(v4 - 168);
          if (v7 < 0)
          {
            if (v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          }
          else
          {
            (*(void (**)(uint64_t))v6)(v4 - 168);
          }
        }
        v4 -= 208;
      }
      while (v4 != v3);
      v5 = (void *)__p[4];
    }
    __p[5] = v3;
    operator delete(v5);
  }
  v8 = (std::__shared_weak_count *)__p[3];
  if (!v8)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_14:
    operator delete(__p);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

uint64_t sub_10023DE74()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023DED0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_10023DF2C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 160))(&v5);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v3;
  return result;
}

void sub_10023DF78(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

double sub_10023DF8C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 168))(&v5);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v3;
  return result;
}

void sub_10023DFD8(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023DFEC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023E048()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_10023E0A4(uint64_t a1, uint64_t a2)
{
  double v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double *v13;
  std::__shared_weak_count *v14;
  _QWORD v15[6];
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  _BYTE v22[16];
  double v23;
  double v24;
  double v25;

  sub_1000700F8((uint64_t)v22, a1);
  v3 = v25;
  v4 = sub_1001D201C(a2);
  v23 = v23 + v3 * (double)v4;
  v5 = sub_1002D41AC(a2);
  v24 = v24 + v3 * (double)v5;
  v15[0] = off_1003F9AC8;
  v15[1] = 0;
  v15[2] = off_1003F9AA8;
  v15[3] = off_1003F9A68;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v15[4] = 0;
  v15[5] = 0;
  v16 = 0;
  v20 = 4;
  v21 = 0;
  v6 = sub_1002D41C4(a2);
  sub_10006FF6C((uint64_t)v15, v6);
  v7 = sub_1002D41B8(a2);
  sub_10006FF64((uint64_t)v15, v7);
  sub_10006FF30((uint64_t)v15, (uint64_t)v22);
  sub_1000700CC((uint64_t)v15, &v13);
  v8 = sub_10006F854(v13);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  nullsub_25(v15);
  nullsub_21(v22);
  return v8;
}

void sub_10023E214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  sub_1000E095C((uint64_t)va);
  nullsub_25((uint64_t *)va1);
  nullsub_21(va2);
  _Unwind_Resume(a1);
}

void sub_10023E238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  nullsub_25((uint64_t *)va);
  nullsub_21(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023E26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  *(_QWORD *)a1 = off_1003FEF80;
  v6 = a1 + 8;
  v20 = sub_1001D201C(a2);
  v19 = sub_1002D41AC(a2);
  v17 = sub_1002D41B8(a2);
  v16 = sub_1002D41C4(a2);
  sub_100072950(&v18, &v17, &v16);
  sub_10026C888(v6, &v20, &v19, &v18);
  *(double *)(a1 + 24) = sub_10023E0A4(a3, a2);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = sub_1002D41D0(a2);
  sub_1001E0DA4(a1 + 56, v10);
  v11 = sub_1002D41F4(a2);
  sub_1001E0DA4(a1 + 88, v11);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 72);
  v12 = sub_1000F7018(a2);
  if (*(char *)(v12 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 128), *(void **)v12, *(_QWORD *)(v12 + 8));
    LODWORD(v14) = *(char *)(a1 + 151);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    v14 = *(_QWORD *)(a1 + 136);
    goto LABEL_6;
  }
  v13 = *(_OWORD *)v12;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v12 + 16);
  *(_OWORD *)(a1 + 128) = v13;
  LODWORD(v14) = *(char *)(a1 + 151);
  if ((v14 & 0x80000000) != 0)
    goto LABEL_5;
LABEL_3:
  v14 = v14;
LABEL_6:
  *(_QWORD *)(a1 + 152) = v14;
  return a1;
}

uint64_t sub_10023E3B0(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1003FEF80;
  if (*(char *)(result + 151) < 0)
  {
    operator delete(*(void **)(result + 128));
    return v1;
  }
  return result;
}

void sub_10023E3FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FEF80;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  operator delete();
}

BOOL sub_10023E448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  unsigned int v7;
  float v8;
  float v9;
  _BOOL8 result;

  v5 = sub_10026C88C((_DWORD *)(a1 + 8), a2);
  if (v5 == -1)
    return 0;
  v6 = (_QWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v6 = (_QWORD *)*v6;
  v7 = sub_10023E8DC((uint64_t)v6, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 120) * v5, *(_DWORD *)(a1 + 120) * v5 + *(_DWORD *)(a1 + 120));
  v8 = sub_1001E0DD0(a1 + 88, v7 & ~(-1 << *(_DWORD *)(a1 + 104)));
  if (!a3)
    return v8 > 0.0;
  *(double *)(a3 + 16) = v8;
  if (v8 <= 0.0)
  {
    result = 0;
    *(_QWORD *)(a3 + 8) = 0x7FF4000000000000;
  }
  else
  {
    v9 = sub_1001E0DD0(a1 + 56, (v7 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
    *(double *)(a3 + 8) = v9;
    return 1;
  }
  return result;
}

BOOL sub_10023E554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  __int128 v34;
  int v35;
  double v36;
  int v37;
  double v38;
  int v39;
  double v40;

  sub_1001D3E20(a2, (_DWORD *)(a1 + 8), &v34);
  v5 = (uint64_t *)(a1 + 128);
  v6 = *((double *)&v34 + 1);
  v7 = 0.0;
  if (*((double *)&v34 + 1) == 0.0 || (_DWORD)v34 == -1)
  {
    v8 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v14 = a1 + 128;
    if (*(char *)(a1 + 151) < 0)
      v14 = *v5;
    v15 = sub_10023E8DC(v14, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 120) * (int)v34, *(_DWORD *)(a1 + 120) * (int)v34 + *(_DWORD *)(a1 + 120));
    v16 = sub_1001E0DD0(a1 + 88, v15 & ~(-1 << *(_DWORD *)(a1 + 104)));
    v8 = 0.0;
    v9 = 0.0;
    if (v16 != 0.0)
    {
      v17 = sub_1001E0DD0(a1 + 56, (v15 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      v8 = v6 * v17 + 0.0;
      v18 = sub_1001E0DD0(a1 + 88, v15 & ~(-1 << *(_DWORD *)(a1 + 104)));
      v9 = v6 * v18 + 0.0;
      v7 = v6 + 0.0;
    }
  }
  v10 = v36;
  if (v36 != 0.0 && v35 != -1)
  {
    v19 = a1 + 128;
    if (*(char *)(a1 + 151) < 0)
      v19 = *v5;
    v20 = sub_10023E8DC(v19, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 120) * v35, *(_DWORD *)(a1 + 120) * v35 + *(_DWORD *)(a1 + 120));
    v21 = sub_1001E0DD0(a1 + 88, v20 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v21 != 0.0)
    {
      v22 = sub_1001E0DD0(a1 + 56, (v20 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      v8 = v8 + v10 * v22;
      v23 = sub_1001E0DD0(a1 + 88, v20 & ~(-1 << *(_DWORD *)(a1 + 104)));
      v9 = v9 + v10 * v23;
      v7 = v7 + v10;
    }
  }
  v11 = v38;
  if (v38 != 0.0 && v37 != -1)
  {
    v24 = a1 + 128;
    if (*(char *)(a1 + 151) < 0)
      v24 = *v5;
    v25 = sub_10023E8DC(v24, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 120) * v37, *(_DWORD *)(a1 + 120) * v37 + *(_DWORD *)(a1 + 120));
    v26 = sub_1001E0DD0(a1 + 88, v25 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v26 != 0.0)
    {
      v27 = sub_1001E0DD0(a1 + 56, (v25 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      v8 = v8 + v11 * v27;
      v28 = sub_1001E0DD0(a1 + 88, v25 & ~(-1 << *(_DWORD *)(a1 + 104)));
      v9 = v9 + v11 * v28;
      v7 = v7 + v11;
    }
  }
  v12 = v40;
  if (v40 != 0.0 && v39 != -1)
  {
    if (*(char *)(a1 + 151) < 0)
      v5 = (uint64_t *)*v5;
    v29 = sub_10023E8DC((uint64_t)v5, *(_QWORD *)(a1 + 152), *(_DWORD *)(a1 + 120) * v39, *(_DWORD *)(a1 + 120) * v39 + *(_DWORD *)(a1 + 120));
    v30 = sub_1001E0DD0(a1 + 88, v29 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v30 != 0.0)
    {
      v31 = sub_1001E0DD0(a1 + 56, (v29 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      v8 = v8 + v12 * v31;
      v32 = sub_1001E0DD0(a1 + 88, v29 & ~(-1 << *(_DWORD *)(a1 + 104)));
      v9 = v9 + v12 * v32;
      v7 = v7 + v12;
    }
  }
  if (a3)
  {
    if (v7 <= 0.0)
    {
      *(_QWORD *)(a3 + 8) = 0x7FF4000000000000;
      v13 = 0.0;
    }
    else
    {
      *(double *)(a3 + 8) = v8 / v7;
      v13 = v9 / v7;
    }
    *(double *)(a3 + 16) = v13;
  }
  return v7 > 0.0;
}

uint64_t sub_10023E8DC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v4;
  char v5;
  uint64_t v6;
  size_t v7;
  void *v9[2];
  void *__p[2];
  char v11;
  std::string __dst;

  v4 = a4;
  v5 = a3;
  if (a4 <= a3)
  {
    sub_1000D5048(__p, "");
    sub_10022B678("End bit must be after start bit", &__dst);
    sub_100174738((uint64_t)__p, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v9);
  }
  if (a4 - a3 >= 17)
  {
    sub_1000D5048(__p, "");
    sub_1001E11D8("We only output 16 bits of data, cannot support more", &__dst);
    sub_100174738((uint64_t)__p, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v9);
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  v6 = (uint64_t)a3 >> 3;
  if ((unint64_t)(a2 - v6) >= 4)
    v7 = 4;
  else
    v7 = a2 - v6;
  memcpy(&__dst, (const void *)(a1 + v6), v7);
  return (bswap32(__dst.__r_.__value_.__l.__data_) >> ((v5 & 0xF8) - v4)) & (unsigned __int16)~(-1 << (v4 - (v5 & 0xF8) - (v5 & 7)));
}

void sub_10023EA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float sub_10023EAD8(uint64_t a1, int a2)
{
  int v3;
  _QWORD *v4;
  unsigned int v5;

  v3 = *(_DWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v4 = (_QWORD *)*v4;
  v5 = sub_10023E8DC((uint64_t)v4, *(_QWORD *)(a1 + 152), v3 * a2, v3 * a2 + v3);
  return sub_1001E0DD0(a1 + 56, (v5 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
}

float sub_10023EB40(uint64_t a1, int a2)
{
  int v3;
  _QWORD *v4;
  int v5;

  v3 = *(_DWORD *)(a1 + 120);
  v4 = (_QWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v4 = (_QWORD *)*v4;
  v5 = sub_10023E8DC((uint64_t)v4, *(_QWORD *)(a1 + 152), v3 * a2, v3 * a2 + v3);
  return sub_1001E0DD0(a1 + 88, v5 & ~(-1 << *(_DWORD *)(a1 + 104)));
}

uint64_t sub_10023EBA0(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_10023EBA8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023EC04()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023EC60(uint64_t a1, const void ****a2)
{
  unsigned __int8 *v4;
  const void ***v5;
  const void ***v6;
  unsigned __int8 ***v7;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  void *v23;
  char *v24;
  void *__p;
  void *v26;

  v4 = (unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = *(unsigned __int8 ****)(a1 + 16);
    if ((char *)v6 - (char *)*a2 == *(_QWORD *)(a1 + 24) - (_QWORD)v7)
    {
      if (v5 == v6)
        return 0;
      while (sub_1000790EC(v5, v7))
      {
        v5 += 2;
        v7 += 2;
        if (v5 == v6)
          return 0;
      }
    }
  }
  sub_1001E38E4((uint64_t)a2, (uint64_t)&v23);
  sub_1001D61DC((unint64_t *)&v23, (uint64_t *)&v22);
  v9 = v22;
  v22 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_10023F57C(v4, (uint64_t)a2);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v16 = (char *)v23;
  if (v23)
  {
    v17 = v24;
    v18 = v23;
    if (v24 != v23)
    {
      do
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = v23;
    }
    v24 = v16;
    operator delete(v18);
  }
  return 1;
}

void sub_10023EE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001E3B8C((void **)va);
  _Unwind_Resume(a1);
}

void sub_10023EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001E3B8C((void **)va);
  _Unwind_Resume(a1);
}

void sub_10023EE4C()
{
  operator new();
}

void sub_10023EFA4(uint64_t a1, ...)
{
  void *v1;
  va_list va;
  uint64_t v3;
  uint64_t v4;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v1 = va_arg(va1, void *);
  v3 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  sub_10021908C((void **)va);
  sub_1000E095C((uint64_t)va1);
  operator delete();
}

uint64_t *sub_10023EFE0(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_7:
    sub_10018CB98("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_7;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_7;
  }
}

uint64_t sub_10023F034(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int *v34;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL)
    sub_1000D02C0();
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL)
    v8 = 0x13B13B13B13B13BLL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL)
      sub_1000CDEB8();
    v9 = operator new(208 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[52 * v5];
  v34 = v10;
  v11 = v10 + 2;
  v13 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2;
  v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *v11 = *v13;
    v14 = v12;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *v10 = v14 ^ v12;
  v15 = &v9[52 * v5 + 10];
  v16 = *(_DWORD *)(a2 + 32);
  v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    v18 = &v9[52 * v5 + 12];
    v19 = *(_DWORD *)(a2 + 40);
    v20 = v19 >> 31;
    v21 = (_QWORD *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *v18 = *v21;
      v20 = v19;
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *v15 = v20 ^ v19;
    v24 = (char *)&v9[52 * v5];
    v25 = *(_QWORD *)(a2 + 72);
    v24[80] = 0;
    v26 = v24 + 80;
    *((_QWORD *)v26 - 1) = v25;
    if (*(_BYTE *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *v26 = 1;
    }
    v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 30) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0)
      v22 = a2 + 40;
    else
      v22 = *(_QWORD *)(a2 + 40);
    sub_1001A4778((uint64_t)v15, v22);
    v16 = *(_DWORD *)(a2 + 32);
    v3 = *a1;
    v4 = a1[1];
    v10 = v34;
    v23 = (char *)&v9[52 * v5];
    v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  v27 = (uint64_t)(v23 + 208);
  sub_100219A90((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  v28 = (char *)*a1;
  v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  while (v29 != v28)
  {
    v31 = *((_DWORD *)v29 - 44);
    if (v31 == v31 >> 31)
    {
      if (!*(v29 - 128))
        goto LABEL_26;
      *(v29 - 128) = 0;
      v29 -= 208;
    }
    else
    {
      v32 = *((_QWORD *)v29 - 21);
      if (v31 < 0)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_26:
        v29 -= 208;
      }
      else
      {
        (*(void (**)(char *))v32)(v29 - 168);
        v29 -= 208;
      }
    }
  }
  if (v28)
    operator delete(v28);
  return v27;
}

void sub_10023F30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002199F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10023F320(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10023F330(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FEFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10023F360()
{
  operator delete();
}

double sub_10023F374(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v8;
  uint64_t v9;
  int v10;
  void *__p;
  void *v13[2];
  char v14;
  std::string v15;

  v3 = a3[1];
  if (*a3 == v3)
  {
LABEL_18:
    sub_1000D5048(v13, "");
    sub_10023F530("This will always be true because historyIncludingCurrentScan always includes the current scan, after all", &v15);
    sub_100174738((uint64_t)v13, (uint64_t)&v15, 1);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_20;
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v13[0]);
LABEL_20:
    sub_1000F2AE4((uint64_t)&__p);
  }
  v4 = *a3 + 8;
  v5 = 0.0;
  do
  {
    v10 = *(_DWORD *)(v4 - 8);
    if ((*(_DWORD *)a2 ^ (*(int *)a2 >> 31)) != ((v10 >> 31) ^ v10))
    {
LABEL_10:
      v8 = *(double *)(a1 + 8);
      goto LABEL_11;
    }
    if (v10 >> 31 == v10)
    {
      v8 = 1.0;
      if (*(_QWORD *)(a2 + 8) != *(_QWORD *)v4)
        goto LABEL_10;
    }
    else
    {
      if (*(_QWORD *)(a2 + 8) != *(_QWORD *)v4
        || *(_QWORD *)(a2 + 16) != *(_QWORD *)(v4 + 8)
        || *(_DWORD *)(a2 + 24) != (unint64_t)*(unsigned int *)(v4 + 16))
      {
        goto LABEL_10;
      }
      v8 = 1.0;
    }
LABEL_11:
    v5 = v5 + v8;
    v9 = v4 + 200;
    v4 += 208;
  }
  while (v9 != v3);
  if (v5 <= 0.0)
    goto LABEL_18;
  return 1.0 / v5;
}

void sub_10023F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10023F530@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023F560(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10023F57C(unsigned __int8 *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _BYTE __p[24];

  v4 = *a1;
  v3 = a1 + 8;
  if (v4)
  {
    sub_10022E800(__p, a2);
    v6 = *(_QWORD *)&__p[16];
    v7 = *((_OWORD *)a1 + 1);
    v8 = *(_OWORD *)__p;
    *(_QWORD *)__p = *((_QWORD *)a1 + 1);
    v5 = *(char **)__p;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)&__p[8] = v7;
    *((_QWORD *)a1 + 3) = v6;
    if (v5)
    {
      v9 = (char *)v7;
      v10 = v5;
      if ((char *)v7 != v5)
      {
        do
        {
          v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(p_shared_owners);
            while (__stlxr(v13 - 1, p_shared_owners));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 16;
        }
        while (v9 != v5);
        v10 = *(char **)__p;
      }
      *(_QWORD *)&__p[8] = v5;
      operator delete(v10);
    }
  }
  else
  {
    sub_10022E800(v3, a2);
    *a1 = 1;
  }
}

void sub_10023F668()
{
  operator delete();
}

double sub_10023F67C()
{
  return 1.0;
}

uint64_t sub_10023F684()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10023F6E0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_10023F73C(double **a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double result;
  double v5;
  double v6;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 == v3)
  {
    result = -INFINITY;
    if (!a2)
      return result;
    goto LABEL_7;
  }
  result = -INFINITY;
  do
  {
    v5 = *v2;
    v2 += 10;
    v6 = v5;
    if (result < v5)
      result = v6;
  }
  while (v2 != v3);
  if (a2)
  {
LABEL_7:
    if (result < *(double *)a2)
      return *(double *)a2;
  }
  return result;
}

void sub_10023F788(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t i;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v3 = *(double *)(v1 + 8);
    for (i = v1 + 80; i != v2; i += 80)
      sub_10023F8B4(v3, *(double *)(i + 8));
  }
}

void sub_10023F860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  if (__p)
    operator delete(__p);
  std::invalid_argument::~invalid_argument(&a13);
  _Unwind_Resume(a1);
}

void sub_10023F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  void *v13;

  std::invalid_argument::~invalid_argument(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_10023F8A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10023F8B4(double a1, double a2)
{
  _BYTE v2[24];
  std::logic_error v3;

  if (a1 != a2)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v3, "Your particle state has become inconsistent");
    sub_10018D04C((uint64_t)v2);
    sub_1000F7E48(&v3, (uint64_t)"static void HypothesisWeight::assertValidRenormalization(double, double)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/hypothesis_weight.cpp", 541, (uint64_t)v2);
  }
}

void sub_10023F990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::invalid_argument a17, std::invalid_argument a18)
{
  void *v18;
  int v19;

  sub_1000F8144(&a18);
  if (__p)
  {
    operator delete(__p);
    std::invalid_argument::~invalid_argument(&a17);
    if ((v19 & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    std::invalid_argument::~invalid_argument(&a17);
    if (!v19)
LABEL_6:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_10023F9F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;

  if (*a1 == a1[1])
  {
    if (a2 && a3)
    {
      v8 = *(double *)(a2 + 8);
      v7 = *(double *)(a3 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    sub_10023F788(a1);
    v6 = *(double *)(*a1 + 8);
    if (a2)
      sub_10023F8B4(*(double *)(*a1 + 8), *(double *)(a2 + 8));
    if (a3)
    {
      v7 = *(double *)(a3 + 8);
      v8 = v6;
LABEL_6:
      sub_10023F8B4(v8, v7);
    }
  }
}

void sub_10023FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long double sub_10023FC48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  long double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  long double v17;
  double v18;
  double v19;
  long double result;

  sub_10023F788(a1);
  v5 = *a1;
  v4 = (double *)a1[1];
  v6 = *(_QWORD *)(v5 + 8);
  v7 = 0.0;
  if ((double *)v5 == v4)
  {
    v12 = -INFINITY;
  }
  else
  {
    v8 = -INFINITY;
    v9 = (double *)v5;
    do
    {
      v10 = *v9;
      v9 += 10;
      v11 = v10;
      if (v8 < v10)
        v8 = v11;
    }
    while (v9 != v4);
    v12 = -INFINITY;
    if (v8 != -INFINITY)
    {
      v13 = (unint64_t)v4 - v5 - 80;
      v7 = 0.0;
      if (v13 >= 0x50)
      {
        v15 = v13 / 0x50 + 1;
        v14 = (double *)(v5 + 80 * (v15 & 0x7FFFFFFFFFFFFFELL));
        v16 = v15 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v17 = *(double *)(v5 + 80) - v8;
          v18 = exp(*(double *)v5 - v8);
          v7 = v7 + v18 + exp(v17);
          v5 += 160;
          v16 -= 2;
        }
        while (v16);
        if (v15 == (v15 & 0x7FFFFFFFFFFFFFELL))
          goto LABEL_14;
      }
      else
      {
        v14 = (double *)v5;
      }
      do
      {
        v19 = *v14;
        v14 += 10;
        v7 = v7 + exp(v19 - v8);
      }
      while (v14 != v4);
LABEL_14:
      v12 = v8;
    }
  }
  result = v12 + log(v7);
  *(long double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

void sub_10023FD90(double **a1@<X0>, double *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  double v5;
  double *v8;
  double *v9;
  unint64_t v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double *v15;
  int v16;
  long double v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  double *v32;
  uint64_t v33;
  __int128 v34;
  double *v35;
  unint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  double *v44;
  int64_t v45;
  int v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  double *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  double v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  NSObject *v80;
  double v81;
  int64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int v88;
  unint64_t *v89;
  char *v90;
  double *v91;
  uint64_t v92;
  double *v93;
  void *v94;
  void *v95[2];
  char v96;
  std::string __p;
  __int128 v98;

  v9 = *a1;
  v8 = a1[1];
  if (a2)
    v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)*a1) >> 4) + 1;
  else
    v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)*a1) >> 4);
  v11 = -INFINITY;
  if (v8 != v9)
  {
    v12 = *a1;
    do
    {
      v13 = *v12;
      v12 += 10;
      v14 = v13;
      if (v11 < v13)
        v11 = v14;
    }
    while (v12 != v8);
  }
  if (a2 && v11 < *a2)
    v11 = *a2;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  if (v10)
  {
    if (v10 >> 61)
      sub_1000D02C0();
    v15 = (double *)operator new(8 * v10);
    v91 = v15;
    v92 = (uint64_t)v15;
    v93 = &v15[v10];
    if (v9 != v8)
      goto LABEL_15;
LABEL_56:
    v35 = a2;
    if (a2)
    {
      v5 = a2[1];
      v17 = 0.0;
      goto LABEL_58;
    }
    v17 = 0.0;
    v46 = 1;
    goto LABEL_84;
  }
  v15 = 0;
  if (v9 == v8)
    goto LABEL_56;
LABEL_15:
  v85 = a3;
  v16 = 0;
  v17 = 0.0;
  do
  {
    while (1)
    {
      if (v16)
      {
        if (v5 != v9[1])
        {
          sub_1000D5048(&__p, "");
          sub_100174738((uint64_t)&__p, 0, 0);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_10015C2DC((uint64_t)v95);
        }
      }
      else
      {
        v16 = 1;
        v5 = v9[1];
      }
      v17 = v17 + exp(*v9 - v11);
      if (v15 >= v93)
        break;
      *v15++ = v17;
      v92 = (uint64_t)v15;
      v9 += 10;
      if (v9 == v8)
        goto LABEL_52;
    }
    v18 = v91;
    v19 = v15 - v91;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      sub_1000D02C0();
    v21 = (char *)v93 - (char *)v91;
    if (((char *)v93 - (char *)v91) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        sub_1000CDEB8();
      v23 = operator new(8 * v22);
      v24 = (double *)&v23[8 * v19];
      *v24 = v17;
      v25 = (uint64_t)(v24 + 1);
      if (v15 == v91)
        goto LABEL_38;
    }
    else
    {
      v23 = 0;
      v24 = (double *)(8 * v19);
      *(long double *)(8 * v19) = v17;
      v25 = 8 * v19 + 8;
      if (v15 == v91)
        goto LABEL_38;
    }
    v26 = (char *)(v15 - 1) - (char *)v91;
    if (v26 < 0x168)
    {
      v27 = v15;
      goto LABEL_37;
    }
    if (&v23[(char *)v15 - (char *)v91 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v23[(char *)v15 - (char *)v91 - 8])
    {
      v27 = v15;
      do
      {
LABEL_37:
        v28 = *((_QWORD *)v27-- - 1);
        *((_QWORD *)v24-- - 1) = v28;
      }
      while (v27 != v91);
      goto LABEL_38;
    }
    if ((double *)((char *)v15 - (v26 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
    {
      v27 = v15;
      goto LABEL_37;
    }
    if ((unint64_t)((char *)v91 - v23) < 0x20)
    {
      v27 = v15;
      goto LABEL_37;
    }
    v29 = (v26 >> 3) + 1;
    v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v15[v30 / 0xFFFFFFFFFFFFFFF8];
    v24 = (double *)((char *)v24 - v30);
    v31 = &v23[8 * v19 - 16];
    v32 = v15 - 2;
    v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_37;
LABEL_38:
    v91 = v24;
    v93 = (double *)&v23[8 * v22];
    if (v18)
      operator delete(v18);
    v15 = (double *)v25;
    v92 = v25;
    v9 += 10;
  }
  while (v9 != v8);
LABEL_52:
  if (a2)
  {
    a3 = v85;
    if (v5 != a2[1])
    {
      sub_1000D5048(&__p, "");
      sub_100174738((uint64_t)&__p, 0, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_10015C2DC((uint64_t)v95);
    }
    v35 = a2;
LABEL_58:
    v17 = v17 + exp(*v35 - v11);
    if (v15 < v93)
    {
      v36 = v10;
      *v15 = v17;
      v37 = (uint64_t)(v15 + 1);
      goto LABEL_83;
    }
    v38 = v91;
    v39 = v15 - v91;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
      sub_1000D02C0();
    v36 = v10;
    v41 = (char *)v93 - (char *)v91;
    if (((char *)v93 - (char *)v91) >> 2 > v40)
      v40 = v41 >> 2;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      if (v42 >> 61)
        sub_1000CDEB8();
      v43 = operator new(8 * v42);
      v44 = (double *)&v43[8 * v39];
      *v44 = v17;
      v37 = (uint64_t)(v44 + 1);
      v45 = (char *)v15 - (char *)v91;
      if (v15 == v91)
        goto LABEL_81;
LABEL_73:
      v47 = v45 - 8;
      if (v47 < 0x58)
      {
        v48 = v15;
        goto LABEL_80;
      }
      if ((unint64_t)((char *)v91 - v43) < 0x20)
      {
        v48 = v15;
        goto LABEL_80;
      }
      v49 = (v47 >> 3) + 1;
      v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      v48 = &v15[v50 / 0xFFFFFFFFFFFFFFF8];
      v44 = (double *)((char *)v44 - v50);
      v51 = &v43[8 * v39 - 16];
      v52 = v15 - 2;
      v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *(_OWORD *)v52;
        *(v51 - 1) = *((_OWORD *)v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 4;
        v53 -= 4;
      }
      while (v53);
      if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_80:
          v55 = *((_QWORD *)v48-- - 1);
          *((_QWORD *)v44-- - 1) = v55;
        }
        while (v48 != v91);
      }
    }
    else
    {
      v43 = 0;
      v44 = (double *)(8 * v39);
      *(long double *)(8 * v39) = v17;
      v37 = 8 * v39 + 8;
      v45 = (char *)v15 - (char *)v91;
      if (v15 != v91)
        goto LABEL_73;
    }
LABEL_81:
    v91 = v44;
    if (v38)
      operator delete(v38);
LABEL_83:
    v46 = 0;
    v92 = v37;
    v15 = (double *)v37;
    v10 = v36;
  }
  else
  {
    v46 = 0;
    a3 = v85;
  }
LABEL_84:
  if (v10 != v15 - v91)
  {
    sub_1000D5048(&__p, "");
    sub_100174738((uint64_t)&__p, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)v95);
  }
  v56 = v17 / (double)a3;
  if (v56 <= nextafter(v17, INFINITY) - v17)
  {
    if (qword_100417ED8 == -1)
    {
      v80 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_126:
        *(_BYTE *)a4 = 0;
        goto LABEL_145;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF0E0);
      v80 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_126;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
    *(long double *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v17 / (double)a3;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "Resetting - Horrible things have happened because c is %f and du is %f", (uint8_t *)&__p, 0x16u);
    goto LABEL_126;
  }
  v89 = 0;
  v88 = v46;
  if (a3)
  {
    if (a3 >> 61)
      sub_1000D02C0();
    v57 = (unint64_t *)operator new(8 * a3);
    v58 = 0;
    v59 = 0;
    v60 = v56 * a5;
    v89 = v57;
    v90 = (char *)&v57[a3];
    while (1)
    {
      do
        v62 = v91[v59++];
      while (v60 + (double)v58 * v56 >= v62 && v59 < (v92 - (uint64_t)v91) >> 3);
      --v59;
      if (v57 >= (unint64_t *)v90)
        break;
      *v57 = v59;
      v61 = (uint64_t)(v57 + 1);
LABEL_90:
      ++v58;
      v57 = (unint64_t *)v61;
      if (v58 == a3)
        goto LABEL_128;
    }
    v64 = v89;
    v65 = v57 - v89;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61)
      sub_1000D02C0();
    v67 = v90 - (char *)v89;
    if ((v90 - (char *)v89) >> 2 > v66)
      v66 = v67 >> 2;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
    {
      if (v68 >> 61)
        sub_1000CDEB8();
      v69 = operator new(8 * v68);
      v70 = (unint64_t *)&v69[8 * v65];
      *v70 = v59;
      v61 = (uint64_t)(v70 + 1);
      if (v57 == v89)
        goto LABEL_111;
LABEL_108:
      v71 = (char *)(v57 - 1) - (char *)v89;
      if (v71 < 0x168)
      {
        v72 = v57;
        goto LABEL_110;
      }
      if (&v69[(char *)v57 - (char *)v89 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v69[(char *)v57 - (char *)v89 - 8])
      {
        v72 = v57;
        goto LABEL_110;
      }
      if ((unint64_t *)((char *)v57 - (v71 & 0xFFFFFFFFFFFFFFF8) - 8) > v57 - 1)
      {
        v72 = v57;
        goto LABEL_110;
      }
      if ((unint64_t)((char *)v89 - v69) < 0x20)
      {
        v72 = v57;
        goto LABEL_110;
      }
      v74 = (v71 >> 3) + 1;
      v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
      v72 = &v57[v75 / 0xFFFFFFFFFFFFFFF8];
      v70 = (unint64_t *)((char *)v70 - v75);
      v76 = &v69[8 * v65 - 16];
      v77 = (__int128 *)(v57 - 2);
      v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v79 = *v77;
        *(v76 - 1) = *(v77 - 1);
        *v76 = v79;
        v76 -= 2;
        v77 -= 2;
        v78 -= 4;
      }
      while (v78);
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_110:
          v73 = *--v72;
          *--v70 = v73;
        }
        while (v72 != v89);
      }
    }
    else
    {
      v69 = 0;
      v70 = (unint64_t *)(8 * v65);
      *(_QWORD *)(8 * v65) = v59;
      v61 = 8 * v65 + 8;
      if (v57 != v89)
        goto LABEL_108;
    }
LABEL_111:
    v89 = v70;
    v90 = &v69[8 * v68];
    if (v64)
      operator delete(v64);
    goto LABEL_90;
  }
  v61 = 0;
LABEL_128:
  v81 = log(v17);
  if (v88)
  {
    sub_1000D5048(v95, "");
    sub_10022B678("This value should have been set", &__p);
    sub_100174738((uint64_t)v95, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v96 < 0)
      operator delete(v95[0]);
    sub_1000F2AE4((uint64_t)&v94);
  }
  memset(&__p, 0, sizeof(__p));
  v82 = v61 - (_QWORD)v89;
  if ((unint64_t *)v61 == v89)
  {
    v84 = 0;
    v83 = 0;
  }
  else
  {
    if (v82 < 0)
      sub_1000D02C0();
    v83 = (char *)operator new(v82);
    v84 = &v83[8 * (v82 >> 3)];
    memcpy(v83, v89, v82);
  }
  *(double *)&v98 = v11 + v81;
  *((double *)&v98 + 1) = v5;
  *(_QWORD *)(a4 + 8) = v83;
  *(_QWORD *)(a4 + 16) = v84;
  *(_QWORD *)(a4 + 24) = v84;
  *(_OWORD *)(a4 + 32) = v98;
  *(_BYTE *)a4 = 1;
  if (v89)
    operator delete(v89);
LABEL_145:
  if (v91)
    operator delete(v91);
}

void sub_100240774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a30 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100240824(uint64_t a1@<X0>, double *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>, float a6@<S0>)
{
  uint64_t *v7;
  double *v9;
  double v10;
  double *v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *size;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t i;
  __int128 v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _OWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t *v72;
  char *v73;
  char *v74;
  void *v75[2];
  char *v76;
  _QWORD *v77;
  __int128 v78;
  void *v79[2];
  void *__p[2];
  char v81;
  std::string v82;
  uint64_t v83;
  std::string v84;
  __int128 v85;
  std::string v86;

  v7 = (uint64_t *)a1;
  v9 = *(double **)(a1 + 8);
  if (*(double **)a1 == v9)
  {
    v9 = *(double **)a1;
  }
  else
  {
    v10 = -INFINITY;
    v11 = *(double **)a1;
    do
    {
      v12 = v10;
      v10 = *v11;
      if (v12 > *v11)
      {
        sub_1000D5048(&v82, "");
        sub_100241B30("Particles now need to be in ascending order of weight in order to resample", &v84);
        sub_100174738((uint64_t)&v82, (uint64_t)&v84, 1);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        sub_1000F2AE4((uint64_t)&v86);
      }
      v11 += 10;
    }
    while (v11 != v9);
  }
  v13 = ((uint64_t)v9 - *(_QWORD *)a1) / 80;
  if (a2)
    v14 = v13 + 1;
  else
    v14 = ((uint64_t)v9 - *(_QWORD *)a1) / 80;
  v15 = a3 - v13;
  if (a3 < v13)
    v15 = 0;
  v68 = v15;
  sub_10023FD90((double **)a1, a2, a3, (uint64_t)&v84, a6);
  if (!v84.__r_.__value_.__s.__data_[0])
  {
    *a5 = 0;
    return;
  }
  v78 = v85;
  *(double *)&v78 = *(double *)&v78 - log((double)a3);
  v77 = 0;
  v72 = v7;
  if (v14)
  {
    if (v14 >> 61)
      sub_1000D02C0();
    v16 = operator new(8 * v14);
    v77 = v16;
    bzero(v16, 8 * v14);
    v18 = (uint64_t *)v84.__r_.__value_.__r.__words[2];
    size = (uint64_t *)v84.__r_.__value_.__l.__size_;
    if (v84.__r_.__value_.__l.__size_ == v84.__r_.__value_.__r.__words[2])
      goto LABEL_17;
    goto LABEL_16;
  }
  v16 = 0;
  v18 = (uint64_t *)v84.__r_.__value_.__r.__words[2];
  for (size = (uint64_t *)v84.__r_.__value_.__l.__size_; size != v18; ++v16[v19])
LABEL_16:
    v19 = *size++;
LABEL_17:
  v67 = a5;
  *(_OWORD *)v75 = 0uLL;
  v76 = 0;
  if (!v14)
  {
    v37 = 0;
    v73 = 0;
    goto LABEL_83;
  }
  v20 = 0;
  for (i = 0; i != v14; ++i)
  {
    if (!v77[i])
    {
      if (i == v13)
      {
        if (v20 >= v76)
        {
          v24 = (v20 - (char *)v75[0]) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            goto LABEL_161;
          v26 = v76 - (char *)v75[0];
          if ((v76 - (char *)v75[0]) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 60)
              goto LABEL_162;
            v28 = (char *)operator new(16 * v27);
          }
          else
          {
            v28 = 0;
          }
          v33 = &v28[16 * v24];
          *(_OWORD *)v33 = *(_OWORD *)a2;
          v34 = (uint64_t)v33;
          if (v20 == v75[0])
            goto LABEL_55;
          do
          {
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v20 - 1);
            v34 -= 16;
            v20 -= 16;
          }
          while (v20 != v75[0]);
          goto LABEL_54;
        }
        v22 = *(_OWORD *)a2;
      }
      else
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((v7[1] - *v7) >> 4) <= i)
          sub_1001E2FA0();
        v29 = (_OWORD *)(*v7 + 80 * i);
        if (v20 >= v76)
        {
          v30 = (v20 - (char *)v75[0]) >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
LABEL_161:
            sub_1000D02C0();
          v32 = v76 - (char *)v75[0];
          if ((v76 - (char *)v75[0]) >> 3 > v31)
            v31 = v32 >> 3;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v31;
          if (v27)
          {
            if (v27 >> 60)
LABEL_162:
              sub_1000CDEB8();
            v28 = (char *)operator new(16 * v27);
            v33 = &v28[16 * v30];
            *(_OWORD *)v33 = *v29;
            v34 = (uint64_t)v33;
            if (v20 == v75[0])
              goto LABEL_55;
          }
          else
          {
            v28 = 0;
            v33 = (char *)(16 * v30);
            *(_OWORD *)(16 * v30) = *v29;
            v34 = 16 * v30;
            if (v20 == v75[0])
              goto LABEL_55;
          }
          do
          {
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v20 - 1);
            v34 -= 16;
            v20 -= 16;
          }
          while (v20 != v75[0]);
LABEL_54:
          v20 = (char *)v75[0];
LABEL_55:
          v23 = v33 + 16;
          v75[0] = (void *)v34;
          v76 = &v28[16 * v27];
          if (v20)
            operator delete(v20);
          goto LABEL_21;
        }
        v22 = *v29;
      }
      *(_OWORD *)v20 = v22;
      v23 = v20 + 16;
LABEL_21:
      v75[1] = v23;
      v20 = (char *)v23;
      v7 = v72;
      continue;
    }
  }
  if (v14 >> 60)
    sub_1000D02C0();
  v35 = (char *)operator new(16 * v14);
  v36 = 0;
  v37 = 0;
  v73 = v35;
  v74 = &v35[16 * v14];
  while (2)
  {
    while (1)
    {
      v38 = v77[v36] + v37;
      if (v35 >= v74)
        break;
      *(_QWORD *)v35 = v37;
      *((_QWORD *)v35 + 1) = v38;
      v35 += 16;
      v37 += v77[v36++];
      if (v36 == v14)
        goto LABEL_77;
    }
    v39 = v73;
    v40 = (v35 - v73) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      sub_1000D02C0();
    v42 = v74 - v73;
    if ((v74 - v73) >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43 >> 60)
      sub_1000CDEB8();
    v44 = (char *)operator new(16 * v43);
    v45 = &v44[16 * v40];
    *(_QWORD *)v45 = v37;
    *((_QWORD *)v45 + 1) = v38;
    if (v35 == v73)
    {
      v35 = v45 + 16;
      v73 = &v44[16 * v40];
      v74 = &v44[16 * v43];
      if (v39)
        goto LABEL_72;
    }
    else
    {
      v46 = &v44[16 * v40];
      do
      {
        v47 = v46 - 16;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v35 - 1);
        v35 -= 16;
        v46 -= 16;
      }
      while (v35 != v73);
      v35 = v45 + 16;
      v73 = v47;
      v74 = &v44[16 * v43];
      if (v39)
LABEL_72:
        operator delete(v39);
    }
    v7 = v72;
    v37 += v77[v36++];
    if (v36 != v14)
      continue;
    break;
  }
LABEL_77:
  if (v14 != (v35 - v73) >> 4)
  {
    sub_1000D5048(&v86, "");
    sub_1001E0780("All old particles must be accounted for", &v82);
    sub_100174738((uint64_t)&v86, (uint64_t)&v82, 1);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)__p);
  }
LABEL_83:
  if (v37 != a3)
  {
    sub_1000D5048(&v86, "");
    sub_100241B7C("Bug in lowVarianceSelection. It should produce exactly newNumParticles total siblings.", &v82);
    sub_100174738((uint64_t)&v86, (uint64_t)&v82, 1);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)__p);
  }
  v83 = 0;
  v82.__r_.__value_.__r.__words[0] = v68;
  *(_OWORD *)&v82.__r_.__value_.__r.__words[1] = 0uLL;
  sub_1002414C8((char **)&v82.__r_.__value_.__l.__size_, v68);
  if (v14)
  {
    v48 = 0;
    v49 = 0;
    for (j = 0; j != v14; ++j)
    {
      if (v13 == j)
      {
        v51 = v77[v13];
        v52 = (uint64_t *)&v73[16 * v13];
        v53 = *v52;
        v54 = v52[1];
        v55 = v54 - *v52;
        if (v55)
        {
          if (v55 != v51)
          {
            sub_1000D5048(__p, "");
            sub_10015C704("For now, the only supported behaviour is num(sublings) == num(destination particles).", &v86);
            sub_100174738((uint64_t)__p, (uint64_t)&v86, 1);
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            if (v81 < 0)
              operator delete(__p[0]);
            sub_10015C2DC((uint64_t)v79);
          }
          sub_1002BDF60((uint64_t)a2, (double *)&v78, v51, (uint64_t)&v82, v7, v53, v54, a4);
        }
        else if (v51)
        {
          sub_1000D5048(__p, "");
          sub_1001709CC("If siblings is zero, you better not have any destinations", &v86);
          sub_100174738((uint64_t)__p, (uint64_t)&v86, 1);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          if (v81 < 0)
            operator delete(__p[0]);
          sub_10015C2DC((uint64_t)v79);
        }
      }
      else
      {
        v56 = v77[j];
        v58 = *(_QWORD *)&v73[v48];
        v57 = *(_QWORD *)&v73[v48 + 8];
        if (v57 == v58)
        {
          if (v56)
          {
            sub_1000D5048(__p, "");
            sub_1001709CC("If siblings is zero, you better not have any destinations", &v86);
            sub_100174738((uint64_t)__p, (uint64_t)&v86, 1);
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            if (v81 < 0)
              operator delete(__p[0]);
            sub_10015C2DC((uint64_t)v79);
          }
        }
        else
        {
          if (v57 - v58 != v56)
          {
            sub_1000D5048(__p, "");
            sub_10015C704("For now, the only supported behaviour is num(sublings) == num(destination particles).", &v86);
            sub_100174738((uint64_t)__p, (uint64_t)&v86, 1);
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            if (v81 < 0)
              operator delete(__p[0]);
            sub_10015C2DC((uint64_t)v79);
          }
          sub_1002234F8(*v7 + v49, (double *)&v78, v56, (uint64_t)&v82, v7, v58, v57);
        }
      }
      v49 += 80;
      v48 += 16;
    }
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82.__r_.__value_.__r.__words[2] - v82.__r_.__value_.__l.__size_) >> 4) != v82.__r_.__value_.__r.__words[0])
  {
    sub_1000D5048(__p, "");
    sub_1001E0FE4("Didn't fully resample", &v86);
    sub_100174738((uint64_t)__p, (uint64_t)&v86, 1);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (v81 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v79);
  }
  v59 = (char *)*v7;
  v60 = v7[1];
  if (v68 - 0x3333333333333333 * ((v60 - *v7) >> 4) > a3)
  {
    sub_10024163C((uint64_t)v7, (uint64_t)&v59[80 * (a3 - v68)], v60);
    v59 = (char *)*v7;
  }
  sub_100241BC8((char **)v7, v59, v82.__r_.__value_.__l.__size_, v82.__r_.__value_.__r.__words[2], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v82.__r_.__value_.__r.__words[2] - v82.__r_.__value_.__l.__size_) >> 4));
  *(_OWORD *)(v67 + 8) = *(_OWORD *)v75;
  *((_QWORD *)v67 + 3) = v76;
  *v67 = 1;
  v61 = v82.__r_.__value_.__l.__size_;
  if (v82.__r_.__value_.__l.__size_)
  {
    v62 = v82.__r_.__value_.__r.__words[2];
    v63 = (void *)v82.__r_.__value_.__l.__size_;
    if (v82.__r_.__value_.__r.__words[2] != v82.__r_.__value_.__l.__size_)
    {
      do
      {
        v64 = *(std::__shared_weak_count **)(v62 - 16);
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v62 -= 80;
      }
      while (v62 != v61);
      v63 = (void *)v82.__r_.__value_.__l.__size_;
    }
    v82.__r_.__value_.__r.__words[2] = v61;
    operator delete(v63);
  }
  if (v73)
    operator delete(v73);
  if (v77)
    operator delete(v77);
  if (v84.__r_.__value_.__s.__data_[0] && v84.__r_.__value_.__l.__size_)
    operator delete((void *)v84.__r_.__value_.__l.__size_);
}

void sub_100241340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  void *v47;
  _Unwind_Exception *v48;
  void *v49;

  if (a33 < 0)
    operator delete(__p);
  sub_100241760((uint64_t)&a40);
  if (a16)
  {
    operator delete(a16);
    v47 = a19;
    if (!a19)
    {
LABEL_5:
      v48 = exception_object;
      if (!exception_object)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v47 = a19;
    if (!a19)
      goto LABEL_5;
  }
  operator delete(v47);
  v48 = exception_object;
  if (!exception_object)
  {
LABEL_7:
    if (*(_BYTE *)(v45 - 184))
    {
      v49 = *(void **)(v45 - 176);
      if (v49)
      {
        operator delete(v49);
        _Unwind_Resume(a1);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v48);
  goto LABEL_7;
}

void sub_1002414C8(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_20:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        *((_OWORD *)v9 - 5) = *((_OWORD *)v4 - 5);
        v11 = *((_OWORD *)v4 - 4);
        v12 = *((_OWORD *)v4 - 3);
        *((_WORD *)v9 - 16) = *((_WORD *)v4 - 16);
        *((_OWORD *)v9 - 4) = v11;
        *((_OWORD *)v9 - 3) = v12;
        v13 = *((_QWORD *)v4 - 2);
        *((_QWORD *)v9 - 3) = *((_QWORD *)v4 - 3);
        *((_QWORD *)v9 - 2) = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v10 = v9 - 80;
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        v9 -= 80;
        v4 -= 80;
      }
      while (v4 != v2);
      v16 = *a1;
      v2 = a1[1];
      *a1 = v10;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v16)
      {
        do
        {
          v17 = (std::__shared_weak_count *)*((_QWORD *)v2 - 2);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v2 -= 80;
        }
        while (v2 != v16);
        v2 = v16;
      }
      if (v2)
        goto LABEL_20;
    }
  }
}

uint64_t sub_10024163C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = a2;
    if (a3 != v6)
    {
      do
      {
        *(_OWORD *)v7 = *(_OWORD *)v5;
        v8 = *(_OWORD *)(v5 + 16);
        v9 = *(_OWORD *)(v5 + 32);
        *(_WORD *)(v7 + 48) = *(_WORD *)(v5 + 48);
        *(_OWORD *)(v7 + 16) = v8;
        *(_OWORD *)(v7 + 32) = v9;
        v10 = *(_OWORD *)(v5 + 56);
        *(_QWORD *)(v5 + 56) = 0;
        *(_QWORD *)(v5 + 64) = 0;
        v11 = *(std::__shared_weak_count **)(v7 + 64);
        *(_OWORD *)(v7 + 56) = v10;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        *(_QWORD *)(v7 + 72) = *(_QWORD *)(v5 + 72);
        v5 += 80;
        v7 += 80;
      }
      while (v5 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v7)
    {
      v14 = *(std::__shared_weak_count **)(v5 - 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v5 -= 80;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a2;
}

uint64_t sub_100241760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1002417F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t i;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v3 = *(double *)(v1 + 8);
    for (i = v1 + 16; i != v2; i += 16)
      sub_10023F8B4(v3, *(double *)(i + 8));
  }
}

void sub_1002418D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  if (__p)
    operator delete(__p);
  std::invalid_argument::~invalid_argument(&a13);
  _Unwind_Resume(a1);
}

void sub_1002418F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  void *v13;

  std::invalid_argument::~invalid_argument(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_100241910(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

long double sub_100241924@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  long double v7;
  double *v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double result;

  sub_1002417F8(a1);
  v4 = *a1;
  v5 = (double *)a1[1];
  v6 = *(_QWORD *)(v4 + 8);
  v7 = 0.0;
  if ((double *)v4 == v5)
  {
    v13 = -INFINITY;
  }
  else
  {
    v8 = (double *)v4;
    v9 = -INFINITY;
    v10 = (double *)v4;
    do
    {
      v11 = *v10;
      v10 += 2;
      v12 = v11;
      if (v11 > v9)
        v9 = v12;
    }
    while (v10 != v5);
    v13 = -INFINITY;
    if (v9 != -INFINITY)
    {
      v14 = (unint64_t)v5 - v4 - 16;
      v7 = 0.0;
      if (v14 < 0x10)
        goto LABEL_17;
      v15 = (v14 >> 4) + 1;
      v8 = (double *)(v4 + 16 * (v15 & 0x1FFFFFFFFFFFFFFELL));
      v16 = (double *)(v4 + 16);
      v17 = v15 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v18 = *(v16 - 2);
        v19 = *v16;
        v16 += 4;
        v20 = exp(v18 - v9);
        v7 = v7 + v20 + exp(v19 - v9);
        v17 -= 2;
      }
      while (v17);
      if (v15 != (v15 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        do
        {
          v21 = *v8;
          v8 += 2;
          v7 = v7 + exp(v21 - v9);
        }
        while (v8 != v5);
      }
      v13 = v9;
    }
  }
  result = v13 + log(v7);
  *(long double *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  return result;
}

long double sub_100241A5C@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double result;

  sub_10023F8B4(a1[1], a2[1]);
  v6 = *((_QWORD *)a1 + 1);
  v7 = *a2;
  if (*a1 >= *a2)
    v8 = *a1;
  else
    v8 = *a2;
  if (v8 == -INFINITY)
  {
    v10 = 0.0;
  }
  else
  {
    v9 = exp(*a1 - v8);
    v10 = v9 + exp(v7 - v8);
  }
  result = v8 + log(v10);
  *(long double *)a3 = result;
  *(_QWORD *)(a3 + 8) = v6;
  return result;
}

double *sub_100241AF0(double *result, double a2, double a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

double sub_100241AF8(double *a1)
{
  return *a1 + a1[1];
}

void sub_100241B04(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_100241B30@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100241B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100241B7C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100241BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_100241BC8(char **a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  v5 = a2;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v9 = (unint64_t)a1[1];
  v10 = a1[2];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-v9] >> 4)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)a2) >> 4)) >= a5)
    {
      v16 = a3 + 80 * a5;
      v17 = a1[1];
    }
    else
    {
      v16 = a3 + 16 * ((uint64_t)(v9 - (_QWORD)a2) >> 4);
      v17 = a1[1];
      if (v16 != a4)
      {
        v18 = a3 + 16 * ((uint64_t)(v9 - (_QWORD)a2) >> 4);
        v19 = a1[1];
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)v18;
          v20 = *(_OWORD *)(v18 + 16);
          v21 = *(_OWORD *)(v18 + 32);
          *((_WORD *)v19 + 24) = *(_WORD *)(v18 + 48);
          *((_OWORD *)v19 + 1) = v20;
          *((_OWORD *)v19 + 2) = v21;
          *(_OWORD *)(v19 + 56) = *(_OWORD *)(v18 + 56);
          *(_QWORD *)(v18 + 56) = 0;
          *(_QWORD *)(v18 + 64) = 0;
          *((_QWORD *)v19 + 9) = *(_QWORD *)(v18 + 72);
          v17 += 80;
          v18 += 80;
          v19 += 80;
        }
        while (v18 != a4);
      }
      a1[1] = v17;
      if ((uint64_t)(v9 - (_QWORD)a2) < 1)
        return v5;
    }
    v22 = &v17[-80 * a5];
    v23 = v17;
    if ((unint64_t)v22 < v9)
    {
      v24 = (unint64_t)&v17[-80 * a5];
      v23 = v17;
      do
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
        v25 = *(_OWORD *)(v24 + 16);
        v26 = *(_OWORD *)(v24 + 32);
        *((_WORD *)v23 + 24) = *(_WORD *)(v24 + 48);
        *((_OWORD *)v23 + 1) = v25;
        *((_OWORD *)v23 + 2) = v26;
        *(_OWORD *)(v23 + 56) = *(_OWORD *)(v24 + 56);
        *(_QWORD *)(v24 + 56) = 0;
        *(_QWORD *)(v24 + 64) = 0;
        *((_QWORD *)v23 + 9) = *(_QWORD *)(v24 + 72);
        v23 += 80;
        v24 += 80;
      }
      while (v24 < v9);
    }
    a1[1] = v23;
    if (v17 != &a2[80 * a5])
    {
      do
      {
        *((_OWORD *)v17 - 5) = *((_OWORD *)v22 - 5);
        v28 = *((_OWORD *)v22 - 4);
        v29 = *((_OWORD *)v22 - 3);
        *((_WORD *)v17 - 16) = *((_WORD *)v22 - 16);
        *((_OWORD *)v17 - 4) = v28;
        *((_OWORD *)v17 - 3) = v29;
        v30 = *(_OWORD *)(v22 - 24);
        *((_QWORD *)v22 - 3) = 0;
        *((_QWORD *)v22 - 2) = 0;
        v31 = (std::__shared_weak_count *)*((_QWORD *)v17 - 2);
        *(_OWORD *)(v17 - 24) = v30;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        *((_QWORD *)v17 - 1) = *((_QWORD *)v22 - 1);
        v17 -= 80;
        v22 -= 80;
      }
      while (v22 != v5);
    }
    if (v16 != v7)
    {
      v27 = v5;
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v7;
        v34 = *(_OWORD *)(v7 + 16);
        v35 = *(_OWORD *)(v7 + 32);
        *((_WORD *)v27 + 24) = *(_WORD *)(v7 + 48);
        *((_OWORD *)v27 + 1) = v34;
        *((_OWORD *)v27 + 2) = v35;
        v36 = *(_OWORD *)(v7 + 56);
        *(_QWORD *)(v7 + 56) = 0;
        *(_QWORD *)(v7 + 64) = 0;
        v37 = (std::__shared_weak_count *)*((_QWORD *)v27 + 8);
        *(_OWORD *)(v27 + 56) = v36;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *((_QWORD *)v27 + 9) = *(_QWORD *)(v7 + 72);
        v7 += 80;
        v27 += 80;
      }
      while (v7 != v16);
    }
    return v5;
  }
  v11 = *a1;
  v12 = a5 - 0x3333333333333333 * ((uint64_t)(v9 - (_QWORD)*a1) >> 4);
  if (v12 > 0x333333333333333)
    sub_1000D02C0();
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0x199999999999999)
    v14 = 0x333333333333333;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 > 0x333333333333333)
      sub_1000CDEB8();
    v15 = (char *)operator new(80 * v14);
  }
  else
  {
    v15 = 0;
  }
  v40 = &v15[16 * ((v5 - v11) >> 4)];
  v41 = &v40[80 * a5];
  v42 = v40;
  do
  {
    *(_OWORD *)v42 = *(_OWORD *)v7;
    v43 = *(_OWORD *)(v7 + 16);
    v44 = *(_OWORD *)(v7 + 32);
    *((_WORD *)v42 + 24) = *(_WORD *)(v7 + 48);
    *((_OWORD *)v42 + 1) = v43;
    *((_OWORD *)v42 + 2) = v44;
    *(_OWORD *)(v42 + 56) = *(_OWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *((_QWORD *)v42 + 9) = *(_QWORD *)(v7 + 72);
    v42 += 80;
    v7 += 80;
  }
  while (v42 != v41);
  v45 = *a1;
  v46 = &v15[16 * ((v5 - v11) >> 4)];
  if (*a1 != v5)
  {
    v47 = &v15[16 * ((v5 - v11) >> 4)];
    v48 = v5;
    do
    {
      *((_OWORD *)v47 - 5) = *((_OWORD *)v48 - 5);
      v49 = *((_OWORD *)v48 - 4);
      v50 = *((_OWORD *)v48 - 3);
      *((_WORD *)v47 - 16) = *((_WORD *)v48 - 16);
      *((_OWORD *)v47 - 4) = v49;
      *((_OWORD *)v47 - 3) = v50;
      v51 = *((_QWORD *)v48 - 2);
      *((_QWORD *)v47 - 3) = *((_QWORD *)v48 - 3);
      *((_QWORD *)v47 - 2) = v51;
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v46 = v47 - 80;
      *((_QWORD *)v47 - 1) = *((_QWORD *)v48 - 1);
      v47 -= 80;
      v48 -= 80;
    }
    while (v48 != v45);
  }
  v54 = a1[1];
  if (v54 != v5)
  {
    do
    {
      *(_OWORD *)v41 = *(_OWORD *)v5;
      v55 = *((_OWORD *)v5 + 1);
      v56 = *((_OWORD *)v5 + 2);
      *((_WORD *)v41 + 24) = *((_WORD *)v5 + 24);
      *((_OWORD *)v41 + 1) = v55;
      *((_OWORD *)v41 + 2) = v56;
      v57 = *((_QWORD *)v5 + 8);
      *((_QWORD *)v41 + 7) = *((_QWORD *)v5 + 7);
      *((_QWORD *)v41 + 8) = v57;
      if (v57)
      {
        v58 = (unint64_t *)(v57 + 8);
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      *((_QWORD *)v41 + 9) = *((_QWORD *)v5 + 9);
      v5 += 80;
      v41 += 80;
    }
    while (v5 != v54);
    v5 = a1[1];
  }
  v60 = *a1;
  *a1 = v46;
  a1[1] = v41;
  a1[2] = &v15[80 * v14];
  while (v5 != v60)
  {
    v61 = (std::__shared_weak_count *)*((_QWORD *)v5 - 2);
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v5 -= 80;
  }
  if (v60)
    operator delete(v60);
  return v40;
}

uint64_t sub_10024205C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002420B8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

long double sub_100242114(double a1, double a2)
{
  double v2;
  double v4;
  long double v5;
  double v6;

  v2 = a2 - a1;
  if (vabdd_f64(a2, a1) < 50.0)
    return dbl_10041B128[(unint64_t)((v2 + 50.0) * 100.0)];
  v4 = __exp10(v2 / 10.0) * -0.5;
  v5 = v4 * *(double *)&qword_10041A0A0;
  v6 = exp(v4 * *(double *)&qword_10041A0A8);
  return v6 - exp(v5);
}

uint64_t sub_1002421B0()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024220C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100242268()
{
  double v0;
  double v1;
  double v2;
  double v3;
  long double v4;
  double v5;

  v0 = __exp10(0.05);
  qword_10041A0A0 = *(_QWORD *)&v0;
  v1 = __exp10(-0.05);
  qword_10041A0A8 = *(_QWORD *)&v1;
  v2 = -50.0;
  do
  {
    v3 = __exp10(v2 / 10.0) * -0.5;
    v4 = v0 * v3;
    v5 = exp(v1 * v3);
    dbl_10041B128[(unint64_t)((v2 + 50.0) * 100.0)] = v5 - exp(v4);
    v2 = v2 + 0.01;
  }
  while (v2 < 50.0);
}

_QWORD *sub_10024234C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_1001A06D0((uint64_t)(a1 + 1), a3);
  return a1;
}

_QWORD *sub_100242378(_QWORD *result)
{
  _BYTE v1[24];
  std::string v2;
  std::runtime_error v3;

  if (*result == -1)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v2, "Attempt to utilize an improperly initialized TimestampedMagneticNorthLocal");
    std::runtime_error::runtime_error(&v3, &v2);
    v3.__vftable = (std::runtime_error_vtbl *)&off_1003F4B40;
    sub_10018D04C((uint64_t)v1);
    sub_10015B1E4(&v3, (uint64_t)"void TimestampedMagneticNorthLocal::validateInitialized() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/timestamped_magnetic_north_local.cpp", 36, (uint64_t)v1);
  }
  return result;
}

void sub_100242428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

long double sub_1002424A0(uint64_t a1, uint64_t a2)
{
  sub_100242378((_QWORD *)a1);
  return 3.14159265 - atan2(*(long double *)(a1 + 24), *(long double *)(a1 + 16)) + *(double *)(a2 + 80);
}

uint64_t sub_1002424E0(_QWORD *a1)
{
  sub_100242378(a1);
  return *a1;
}

_QWORD *sub_100242504(_QWORD *a1)
{
  sub_100242378(a1);
  return a1 + 1;
}

uint64_t sub_100242528()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100242584()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_1002425E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1003FF110;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_DWORD *)(v3 - 176);
        if (v6 == v6 >> 31)
        {
          if (*(_BYTE *)(v3 - 128))
            *(_BYTE *)(v3 - 128) = 0;
        }
        else
        {
          v5 = *(_QWORD *)(v3 - 168);
          if (v6 < 0)
          {
            if (v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          }
          else
          {
            (*(void (**)(uint64_t))v5)(v3 - 168);
          }
        }
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7)
    return a1;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_1002426DC(uint64_t a1, int *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v9;
  __int128 v10;
  int v11;

  v3 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  v4 = a2 + 2;
  v5 = v6;
  v7 = v6 >> 31;
  if (v6 >> 31 == v6)
  {
    *(_QWORD *)&v10 = *(_QWORD *)v4;
    v7 = v5;
  }
  else
  {
    v10 = *(_OWORD *)v4;
    v11 = v4[4];
  }
  v9 = v7 ^ v5;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v9, a1 + 24);
}

uint64_t sub_10024277C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002427D8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100242834(int *a1@<X0>, int **a2@<X8>)
{
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _OWORD *v28;
  int *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  int *v47;
  uint64_t v48;
  __int128 v49;
  int v50;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = a1[4] + 3;
  while (sub_100258D18(a1) >= v4)
  {
    v5 = sub_100258C40((uint64_t)a1, a1[4]);
    if (sub_100258CE8(a1))
    {
      v6 = sub_100258C40((uint64_t)a1, 1);
      v7 = sub_100258D18(a1);
      if (v6)
      {
        if (v7 >= 6)
        {
          v8 = 5;
          v9 = 6;
LABEL_10:
          v10 = sub_100258C40((uint64_t)a1, v9) + v8;
          if (v10 >= 1)
          {
            v11 = *a2;
            v12 = a2[1];
            v13 = (char *)v12 - (char *)*a2;
            v14 = v13 >> 2;
            if ((unint64_t)v13 >= 5 && (v15 = (char *)&v11[v14], *((_DWORD *)v15 - 2) == v5))
            {
              *((_DWORD *)v15 - 1) += v10;
            }
            else
            {
              v16 = a2[2];
              if (v12 >= v16)
              {
                v18 = v14 + 1;
                if ((unint64_t)(v14 + 1) >> 62)
                  goto LABEL_59;
                v19 = (char *)v16 - (char *)v11;
                if (v19 >> 1 > v18)
                  v18 = v19 >> 1;
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                  v20 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v20 = v18;
                if (v20)
                {
                  if (v20 >> 62)
                    goto LABEL_60;
                  v21 = v20;
                  v22 = operator new(4 * v20);
                  v20 = v21;
                  v23 = (int *)&v22[4 * v14];
                  *v23 = v5;
                  v17 = v23 + 1;
                  if (v12 == v11)
                    goto LABEL_33;
LABEL_27:
                  v24 = (char *)(v12 - 1) - (char *)v11;
                  if (v24 < 0x2C)
                    goto LABEL_63;
                  if ((char *)v12 - v22 - (v13 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                    goto LABEL_63;
                  v25 = (v24 >> 2) + 1;
                  v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                  v27 = &v12[v26 / 0xFFFFFFFFFFFFFFFCLL];
                  v23 = (int *)((char *)v23 - v26);
                  v28 = &v22[4 * v14 - 16];
                  v29 = v12 - 4;
                  v30 = v25 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v31 = *(_OWORD *)v29;
                    *(v28 - 1) = *((_OWORD *)v29 - 1);
                    *v28 = v31;
                    v28 -= 2;
                    v29 -= 8;
                    v30 -= 8;
                  }
                  while (v30);
                  v12 = v27;
                  if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_63:
                    do
                    {
                      v32 = *--v12;
                      *--v23 = v32;
                    }
                    while (v12 != v11);
                  }
                }
                else
                {
                  v22 = 0;
                  v23 = (int *)(4 * v14);
                  *(_DWORD *)(4 * v14) = v5;
                  v17 = (int *)(4 * v14 + 4);
                  if (v12 != v11)
                    goto LABEL_27;
                }
LABEL_33:
                v16 = (int *)&v22[4 * v20];
                *a2 = v23;
                a2[1] = v17;
                a2[2] = v16;
                if (v11)
                {
                  operator delete(v11);
                  v16 = a2[2];
                }
                goto LABEL_35;
              }
              *v12 = v5;
              v17 = v12 + 1;
LABEL_35:
              a2[1] = v17;
              if (v17 < v16)
              {
                *v17 = v10;
                a2[1] = v17 + 1;
              }
              else
              {
                v33 = *a2;
                v34 = (char *)v17 - (char *)*a2;
                v35 = v34 >> 2;
                v36 = (v34 >> 2) + 1;
                if (v36 >> 62)
LABEL_59:
                  sub_1000D02C0();
                v37 = (char *)v16 - (char *)v33;
                if (v37 >> 1 > v36)
                  v36 = v37 >> 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v38 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  if (v38 >> 62)
LABEL_60:
                    sub_1000CDEB8();
                  v39 = operator new(4 * v38);
                  v40 = (int *)&v39[4 * v35];
                  *v40 = v10;
                  v41 = (uint64_t)(v40 + 1);
                  if (v17 == v33)
                    goto LABEL_55;
                }
                else
                {
                  v39 = 0;
                  v40 = (int *)(4 * v35);
                  *(_DWORD *)(4 * v35) = v10;
                  v41 = 4 * v35 + 4;
                  if (v17 == v33)
                    goto LABEL_55;
                }
                v42 = (char *)(v17 - 1) - (char *)v33;
                if (v42 >= 0x2C)
                {
                  if ((unint64_t)((char *)v17 - v39 - v34) >= 0x20)
                  {
                    v44 = (v42 >> 2) + 1;
                    v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
                    v43 = &v17[v45 / 0xFFFFFFFFFFFFFFFCLL];
                    v40 = (int *)((char *)v40 - v45);
                    v46 = &v39[4 * v35 - 16];
                    v47 = v17 - 4;
                    v48 = v44 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v49 = *(_OWORD *)v47;
                      *(v46 - 1) = *((_OWORD *)v47 - 1);
                      *v46 = v49;
                      v46 -= 2;
                      v47 -= 8;
                      v48 -= 8;
                    }
                    while (v48);
                    if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
                      goto LABEL_55;
                  }
                  else
                  {
                    v43 = v17;
                  }
                }
                else
                {
                  v43 = v17;
                }
                do
                {
                  v50 = *--v43;
                  *--v40 = v50;
                }
                while (v43 != v33);
LABEL_55:
                *a2 = v40;
                a2[1] = (int *)v41;
                a2[2] = (int *)&v39[4 * v38];
                if (v33)
                  operator delete(v33);
                a2[1] = (int *)v41;
              }
            }
          }
        }
      }
      else if (v7 >= 2)
      {
        v8 = 1;
        v9 = 2;
        goto LABEL_10;
      }
    }
  }
  sub_1001E0C7C((uint64_t)a2);
}

void sub_100242BC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100242BF0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = -1;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 16) = result;
  return result;
}

double sub_100242C04(uint64_t a1)
{
  float v1;
  void *v3;
  void *v4[2];
  char v5;
  std::string __p;

  v1 = *(float *)(a1 + 20);
  if (v1 == -1.0)
  {
    sub_1000D5048(v4, "");
    sub_100242D80("numOfDaysBeforeRegionalTileRedownload is uninitilized", &__p);
    sub_100174738((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 < 0)
      operator delete(v4[0]);
    sub_1000F2AE4((uint64_t)&v3);
  }
  return v1;
}

void sub_100242CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100242D34@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100242D64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100242D80@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100242DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100242DCC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100242E28()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

BOOL sub_100242E84(unsigned int **a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned int *v15;

  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_1000A991C((uint64_t)&v13, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v5 = (uint64_t)*a1 + 10 * (_QWORD)v4;
    if (!v4)
      goto LABEL_10;
    v6 = v13 | ((unint64_t)v14 << 32);
    do
    {
      v7 = (unsigned int *)((unint64_t)v4 >> 1);
      v8 = (char *)v3 + 10 * ((unint64_t)v4 >> 1);
      v9 = *((unsigned __int16 *)v8 + 2);
      v11 = *(_DWORD *)v8;
      v10 = (unsigned int *)(v8 + 10);
      v4 = (unsigned int *)((char *)v4 + ~((unint64_t)v4 >> 1));
      if (v6 <= (v11 | (unint64_t)(v9 << 32)))
        v4 = v7;
      else
        v3 = v10;
    }
    while (v4);
    if (v3 == (unsigned int *)v5 || (*v3 | ((unint64_t)*((unsigned __int16 *)v3 + 2) << 32)) > v6)
LABEL_10:
      v3 = (unsigned int *)v5;
    return v3 != (unsigned int *)v5;
  }
  else
  {
    sub_100249EA0((int **)a1 + 3, (_DWORD *)a2, (int **)&v15);
    return v15 != &a1[3][10 * (_QWORD)a1[4]];
  }
}

uint64_t sub_100242F68(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  void *__p;
  void *v24[2];
  char v25;
  std::string v26;

  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_1000A991C((uint64_t)&v26, *(_QWORD *)(a2 + 8));
    v4 = a1[1];
    if (!v4)
      goto LABEL_10;
    v5 = *a1;
    v6 = (uint64_t)*a1 + 10 * (_QWORD)v4;
    v7 = LODWORD(v26.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v26.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      v8 = (unsigned int *)((unint64_t)v4 >> 1);
      v9 = (char *)v5 + 10 * ((unint64_t)v4 >> 1);
      v10 = *((unsigned __int16 *)v9 + 2);
      v12 = *(_DWORD *)v9;
      v11 = (unsigned int *)(v9 + 10);
      v4 = (unsigned int *)((char *)v4 + ~((unint64_t)v4 >> 1));
      if (v7 <= (v12 | (unint64_t)(v10 << 32)))
        v4 = v8;
      else
        v5 = v11;
    }
    while (v4);
    if (v5 == (unsigned int *)v6 || (*v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32)) > v7)
    {
LABEL_10:
      sub_1000D5048(v24, "");
      sub_1001709CC("Attemping to retrieve offset for non-existent mac address", &v26);
      sub_100174738((uint64_t)v24, (uint64_t)&v26, 1);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v26.__r_.__value_.__l.__data_);
        if ((v25 & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((v25 & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v24[0]);
LABEL_12:
      sub_1000F2AE4((uint64_t)&__p);
    }
  }
  else
  {
    sub_100249EA0((int **)a1 + 3, (_DWORD *)a2, (int **)&v26);
    if ((unsigned int *)v26.__r_.__value_.__l.__data_ == &a1[3][10 * (_QWORD)a1[4]])
      goto LABEL_10;
  }
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_1000A991C((uint64_t)&v26, *(_QWORD *)(a2 + 8));
    v13 = a1[1];
    if (!v13)
      goto LABEL_29;
    v14 = *a1;
    v15 = (uint64_t)*a1 + 10 * (_QWORD)v13;
    v16 = LODWORD(v26.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v26.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      v17 = (unsigned int *)((unint64_t)v13 >> 1);
      v18 = (char *)v14 + 10 * ((unint64_t)v13 >> 1);
      v19 = *((unsigned __int16 *)v18 + 2);
      v21 = *(_DWORD *)v18;
      v20 = (unsigned int *)(v18 + 10);
      v13 = (unsigned int *)((char *)v13 + ~((unint64_t)v13 >> 1));
      if (v16 <= (v21 | (unint64_t)(v19 << 32)))
        v13 = v17;
      else
        v14 = v20;
    }
    while (v13);
    if (v14 == (unsigned int *)v15 || (*v14 | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 32)) > v16)
LABEL_29:
      sub_100245110((uint64_t)"flat_map::at key not found");
    return *(unsigned int *)((char *)v14 + 6);
  }
  else
  {
    sub_100249EA0((int **)a1 + 3, (_DWORD *)a2, (int **)&v26);
    if ((unsigned int *)v26.__r_.__value_.__l.__data_ == &a1[3][10 * (_QWORD)a1[4]])
      sub_100245110((uint64_t)"flat_map::at key not found");
    return *(unsigned int *)(v26.__r_.__value_.__r.__words[0] + 32);
  }
}

void sub_1002431D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100243218(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  unint64_t v8;
  __int128 v9;
  int v10;
  int v11;
  __int16 v12;

  v10 = a3;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= *(_QWORD *)(a1 + 16))
    {
      result = (uint64_t)sub_10024A0AC((char **)a1, (_DWORD *)a2, &v10);
      *(_QWORD *)(a1 + 8) = result;
    }
    else
    {
      result = sub_1000A991C((uint64_t)&v11, *(_QWORD *)(a2 + 8));
      v6 = v10;
      v7 = v11;
      *(_WORD *)(v4 + 4) = v12;
      *(_DWORD *)v4 = v7;
      *(_DWORD *)(v4 + 6) = v6;
      *(_QWORD *)(a1 + 8) = v4 + 10;
      *(_QWORD *)(a1 + 8) = v4 + 10;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v8 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_10024A234((void **)(a1 + 24), (int *)a2, &v10);
      *(_QWORD *)(a1 + 32) = result;
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)(v8 + 8) = v9;
      *(_DWORD *)v8 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
      *(_DWORD *)(v8 + 32) = v10;
      result = v8 + 40;
      *(_QWORD *)(a1 + 32) = v8 + 40;
    }
  }
  return result;
}

void sub_10024330C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100243314(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100243354(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int *v12;
  __int128 *v13;
  __int128 v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  __int128 v28;
  int *v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t i;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  int *v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  __int128 v77;
  std::string::size_type v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _DWORD *v86;
  unint64_t v87;
  _DWORD *v88;
  int v89;
  _QWORD *v90;
  int v91;
  __int128 v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  int *v112;
  unint64_t v113;
  void *v114;
  void *__p[2];
  char v116;
  _BYTE buf[24];
  int v118;
  std::string v119;

  if (qword_100417ED8 == -1)
  {
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FF160);
  v8 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v9 = (uint64_t)(a1[1] - *a1) >> 5;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "searching ApRssiMap stream for macs, count, %zu", buf, 0xCu);
  }
LABEL_4:
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v10 = (_DWORD *)*a1;
  v11 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v11)
  {
    while (1)
    {
      v13 = (__int128 *)(v10 + 2);
      if (*v10 == (int)*v10 >> 31)
        break;
      v14 = *v13;
      v118 = v10[6];
      *(_OWORD *)&buf[8] = v14;
      *(_DWORD *)buf = *v10 ^ ((int)*v10 >> 31);
      if (*(_DWORD *)buf == *(int *)buf >> 31)
        goto LABEL_14;
      sub_100249EA0((int **)(a2 + 24), buf, (int **)&v119);
      if (v119.__r_.__value_.__r.__words[0] != *(_QWORD *)(a2 + 24) + 40 * *(_QWORD *)(a2 + 32))
        goto LABEL_22;
LABEL_8:
      v10 += 8;
      if (v10 == v11)
      {
        v29 = (int *)v111;
        v30 = v112;
        goto LABEL_29;
      }
    }
    *(_QWORD *)&buf[8] = *(_QWORD *)v13;
    *(_DWORD *)buf = 0;
LABEL_14:
    sub_1000A991C((uint64_t)&v119, *(unint64_t *)&buf[8]);
    v15 = *(_QWORD *)(a2 + 8);
    if (!v15)
      goto LABEL_8;
    v16 = *(unsigned int **)a2;
    v17 = *(_QWORD *)a2 + 10 * v15;
    v18 = LODWORD(v119.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v119.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      v19 = v15 >> 1;
      v20 = (char *)v16 + 10 * (v15 >> 1);
      v21 = *((unsigned __int16 *)v20 + 2);
      v23 = *(_DWORD *)v20;
      v22 = (unsigned int *)(v20 + 10);
      v15 += ~(v15 >> 1);
      if (v18 <= (v23 | (unint64_t)(v21 << 32)))
        v15 = v19;
      else
        v16 = v22;
    }
    while (v15);
    if (v16 == (unsigned int *)v17 || (*v16 | ((unint64_t)*((unsigned __int16 *)v16 + 2) << 32)) > v18)
      goto LABEL_8;
LABEL_22:
    v24 = v112;
    if ((unint64_t)v112 >= v113)
    {
      v12 = sub_1001D7E30(&v111, (int *)buf);
    }
    else
    {
      v25 = v112 + 2;
      v26 = *(_DWORD *)buf;
      v27 = *(int *)buf >> 31;
      if (*(int *)buf >> 31 == *(_DWORD *)buf)
      {
        *(_QWORD *)v25 = *(_QWORD *)&buf[8];
        v27 = v26;
      }
      else
      {
        v28 = *(_OWORD *)&buf[8];
        v112[6] = v118;
        *(_OWORD *)v25 = v28;
      }
      *v24 = v27 ^ v26;
      v12 = v24 + 8;
    }
    v112 = v12;
    goto LABEL_8;
  }
  v30 = 0;
  v29 = 0;
LABEL_29:
  v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 5);
  *(_QWORD *)buf = a2;
  if (v30 == v29)
    v32 = 0;
  else
    v32 = v31;
  sub_10024A3EC((uint64_t)v29, v30, (unsigned int ***)buf, v32, 1);
  v33 = (int *)sub_10024CFC0((int *)v111, v112);
  v35 = (int *)v111;
  v34 = v112;
  if (v112 != v33)
  {
    v36 = (char *)((char *)v112 - (char *)v33);
    if ((char *)v111 + (((char *)v33 - (_BYTE *)v111) & 0xFFFFFFFFFFFFFFE0) + (char *)v112 - (char *)v33 == (char *)v112)
    {
      v33 = (int *)((char *)v111 + (((char *)v33 - (_BYTE *)v111) & 0xFFFFFFFFFFFFFFE0));
    }
    else
    {
      v37 = (char *)v111 + 32 * (((char *)v33 - (_BYTE *)v111) >> 5) + 8;
      do
      {
        v39 = &v36[(_QWORD)v37];
        v40 = *((_DWORD *)v37 - 2);
        v41 = *(_DWORD *)&v36[(_QWORD)v37 - 8];
        if (v40 == v41)
        {
          if (v40 == v40 >> 31)
          {
            *(_QWORD *)v37 = *(_QWORD *)v39;
          }
          else
          {
            v38 = *(_OWORD *)v39;
            *((_DWORD *)v37 + 4) = *((_DWORD *)v39 + 4);
            *(_OWORD *)v37 = v38;
          }
        }
        else
        {
          v42 = v41 ^ (v41 >> 31);
          if (v42)
          {
            v43 = *(_OWORD *)v39;
            *((_DWORD *)v37 + 4) = *((_DWORD *)v39 + 4);
            *(_OWORD *)v37 = v43;
            *((_DWORD *)v37 - 2) = v42;
          }
          else
          {
            *(_QWORD *)v37 = *(_QWORD *)v39;
            *((_DWORD *)v37 - 2) = 0;
          }
        }
        v37 += 32;
      }
      while ((int *)&v36[(_QWORD)v37 - 8] != v34);
      v33 = (int *)(v37 - 8);
    }
    v112 = v33;
  }
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v44 = (char *)v33 - (char *)v35;
  if (v33 == v35)
  {
    v106 = 0;
    v107 = 0;
    v105 = &v106;
  }
  else
  {
    if ((v44 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v108 = operator new(v44 >> 3);
    v110 = (char *)v108 + 4 * ((uint64_t)v44 >> 5);
    bzero(v108, v44 >> 3);
    v45 = 0;
    v46 = 0;
    v109 = (char *)v108 + (v44 >> 3);
    do
    {
      v47 = (char *)v108;
      *((_DWORD *)v108 + v46++) = sub_100242F68((unsigned int **)a2, (uint64_t)&v35[v45]);
      v35 = (int *)v111;
      v45 += 8;
    }
    while (v46 < ((char *)v112 - (_BYTE *)v111) >> 5);
    v48 = v109;
    v106 = 0;
    v107 = 0;
    v105 = &v106;
    if (v109 != v47)
    {
      for (i = 0; i < (v48 - v47) >> 2; ++i)
      {
        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, (*(_DWORD *)&v47[4 * i] - v50)) & 1) != 0)
        {
          sub_1000958F4(a3, &v103);
          v51 = sub_100095C10((uint64_t)&v103);
          sub_10009558C((uint64_t)buf, v51);
          v52 = (char *)v111;
          v53 = (char *)v111 + 32 * i;
          v54 = *(int *)v53 >> 31;
          if ((*(_DWORD *)buf ^ (*(int *)buf >> 31)) != (v54 ^ *(_DWORD *)v53))
            goto LABEL_92;
          if (v54 == *(_DWORD *)v53)
          {
            if (*(_QWORD *)&buf[8] != *((_QWORD *)v53 + 1))
              goto LABEL_92;
          }
          else
          {
            v56 = *((_QWORD *)v53 + 1);
            v57 = *((_QWORD *)v53 + 2);
            v58 = *((unsigned int *)v53 + 6);
            if (*(_QWORD *)&buf[8] != v56 || *(_QWORD *)&buf[16] != v57 || v118 != v58)
            {
LABEL_92:
              sub_1000D5048(__p, "");
              sub_10024D1FC("ApRssiMap read from stream does not have the expected mac address", &v119);
              sub_100174738((uint64_t)__p, (uint64_t)&v119, 1);
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v119.__r_.__value_.__l.__data_);
              if (v116 < 0)
                operator delete(__p[0]);
              sub_1000F2AE4((uint64_t)&v114);
            }
          }
          v61 = operator new(0x28uLL);
          v61[1] = 0;
          v61[2] = 0;
          *v61 = off_1003FF1E8;
          v62 = v104;
          v61[3] = v103;
          v61[4] = v62;
          if (v62)
          {
            p_shared_owners = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldxr(p_shared_owners);
            while (__stxr(v64 + 1, p_shared_owners));
          }
          v65 = (int *)&v52[32 * i];
          *(_QWORD *)buf = v61 + 3;
          *(_QWORD *)&buf[8] = v61;
          v66 = sub_10024D2E4((uint64_t)&v105, &v119, v65);
          if (*v66)
          {
            v67 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
          }
          else
          {
            v70 = (uint64_t *)operator new(0x50uLL);
            v71 = v70;
            v72 = v70 + 5;
            v75 = *v65;
            v74 = v65 + 2;
            v73 = v75;
            v76 = v75 >> 31;
            if (v75 >> 31 == v75)
            {
              *v72 = *(_QWORD *)v74;
              v76 = v73;
            }
            else
            {
              v77 = *(_OWORD *)v74;
              *((_DWORD *)v70 + 14) = v74[4];
              *(_OWORD *)v72 = v77;
            }
            *((_DWORD *)v70 + 8) = v76 ^ v73;
            *((_OWORD *)v70 + 4) = *(_OWORD *)buf;
            v78 = v119.__r_.__value_.__r.__words[0];
            *v70 = 0;
            v70[1] = 0;
            v70[2] = v78;
            *v66 = (uint64_t)v70;
            if (*v105)
            {
              v105 = (uint64_t **)*v105;
              v71 = (uint64_t *)*v66;
            }
            sub_1000E05F4(v106, v71);
            ++v107;
          }
          v79 = v104;
          if (v104)
          {
            v80 = (unint64_t *)&v104->__shared_owners_;
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v47 = (char *)v108;
          v48 = v109;
        }
        else
        {
          if (qword_100417ED8 != -1)
          {
            dispatch_once(&qword_100417ED8, &stru_1003FF160);
            v55 = qword_100417EE0;
            if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
              continue;
LABEL_61:
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v50;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "Error Skipping Bytes in protobuf stream, byte count, %lld", buf, 0xCu);
            continue;
          }
          v55 = qword_100417EE0;
          if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
            goto LABEL_61;
        }
      }
    }
  }
  v82 = (uint64_t)(a1[1] - *a1) >> 5;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_100243D40(a4, v82, (unint64_t *)buf);
  v83 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_102;
  v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v85 = __ldaxr(v84);
  while (__stlxr(v85 - 1, v84));
  if (!v85)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
    v86 = (_DWORD *)*a1;
    if (a1[1] == *a1)
      goto LABEL_118;
  }
  else
  {
LABEL_102:
    v86 = (_DWORD *)*a1;
    if (a1[1] == *a1)
      goto LABEL_118;
  }
  v87 = 0;
  do
  {
    v88 = &v86[8 * v87];
    v90 = v88 + 2;
    v89 = *v88;
    if (v89 == v89 >> 31)
    {
      *(_QWORD *)&buf[8] = *v90;
      v91 = v89;
    }
    else
    {
      v92 = *(_OWORD *)v90;
      v118 = v88[6];
      *(_OWORD *)&buf[8] = v92;
      v91 = *v88;
      v89 = v91 >> 31;
    }
    *(_DWORD *)buf = v91 ^ v89;
    v93 = sub_10024D4B0((uint64_t)&v105, (int *)buf);
    if (&v106 != (uint64_t **)v93)
    {
      v94 = *a4;
      v96 = v93[8];
      v95 = v93[9];
      if (v95)
      {
        v97 = (unint64_t *)(v95 + 8);
        do
          v98 = __ldxr(v97);
        while (__stxr(v98 + 1, v97));
      }
      v99 = (uint64_t *)(v94 + 16 * v87);
      v100 = (std::__shared_weak_count *)v99[1];
      *v99 = v96;
      v99[1] = v95;
      if (v100)
      {
        v101 = (unint64_t *)&v100->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
    }
    ++v87;
    v86 = (_DWORD *)*a1;
  }
  while (v87 < (uint64_t)(a1[1] - *a1) >> 5);
LABEL_118:
  sub_10024D174((uint64_t)&v105, v106);
  if (v108)
    operator delete(v108);
  if (v111)
  {
    v112 = (int *)v111;
    operator delete(v111);
  }
}

void sub_100243C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a28 < 0)
    operator delete(__p);
  sub_1000E095C((uint64_t)&a12);
  sub_10024D174((uint64_t)&a14, a15);
  if (a17)
    operator delete(a17);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_100243D40(_QWORD *a1, unint64_t a2, unint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_1000D02C0();
    v6 = operator new(16 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[2 * a2];
    a1[2] = v7;
    v8 = a3[1];
    if (v8)
    {
      *v6 = *a3;
      v6[1] = v8;
LABEL_5:
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      while (1)
      {
        v6 += 2;
        if (v6 == v7)
          break;
        v8 = a3[1];
        *v6 = *a3;
        v6[1] = v8;
        if (v8)
          goto LABEL_5;
      }
    }
    else
    {
      v11 = *a3;
      v12 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_20;
      v13 = v12 + 1;
      v14 = *a3;
      v15 = v6 + 4;
      v16 = v13 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v15 - 2) = v14;
        *(v15 - 1) = v14;
        *v15 = v14;
        v15[1] = v14;
        v15 += 4;
        v16 -= 4;
      }
      while (v16);
      v6 += 2 * (v13 & 0x1FFFFFFFFFFFFFFCLL);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_20:
        do
        {
          *v6 = v11;
          v6[1] = 0;
          v6 += 2;
        }
        while (v6 != v7);
      }
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_100243E44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_100342B7C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100243E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  int v9;
  uint64_t *v10;
  unsigned __int8 v11;
  BOOL v12;
  unsigned __int8 v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  char v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  char v25;
  _QWORD v26[3];
  int v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _BYTE v30[32];

  v6 = sub_1000966BC();
  v7 = v6;
  v8 = atomic_load((unsigned __int8 *)v6 + 20);
  if ((v8 & 1) != 0 || *((_BYTE *)v6 + 16))
  {
    v9 = *((unsigned __int8 *)v6 + 17);
    v10 = sub_100096748();
    v11 = atomic_load((unsigned __int8 *)v10 + 20);
    if ((v11 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v12 = sub_1000AC110((uint64_t)v6, (_BYTE *)v6 + 9);
    *((_BYTE *)v7 + 17) = v12;
    *((_BYTE *)v7 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v7 + 20);
    v9 = v12;
    v10 = sub_100096748();
    v13 = atomic_load((unsigned __int8 *)v10 + 20);
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  if (!*((_BYTE *)v10 + 16))
  {
    *((_BYTE *)v10 + 17) = sub_1000AC110((uint64_t)v10, (_BYTE *)v10 + 9);
    *((_BYTE *)v10 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v10 + 20);
  }
LABEL_7:
  v14 = *((unsigned __int8 *)v10 + 17);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (result != a2)
  {
    do
    {
      sub_1000958F4(a1, &v28);
      v16 = sub_100095C10((uint64_t)&v28);
      sub_100095D5C((uint64_t)v26, v16);
      if (v14)
        v17 = 0;
      else
        v17 = v27 == 2;
      v18 = v17;
      v19 = v27 == 1 && v9 == 0;
      v20 = 1;
      if (!v19 && (v18 & 1) == 0)
      {
        sub_10009558C((uint64_t)v30, (uint64_t)v26);
        v21 = *(_QWORD *)(a3 + 24);
        if (!v21)
          sub_10016CA74();
        v20 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, v30, &v28);
      }
      sub_100095CE8(v26);
      v22 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if (result == a2)
        v25 = 0;
      else
        v25 = v20;
    }
    while ((v25 & 1) != 0);
  }
  return result;
}

void sub_10024406C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100243F18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002440F8(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100244124(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;

  v3 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  v4 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  if (v3 <= v4 && (v4 > v3 || *(int *)((char *)a2 + 6) >= *(int *)((char *)a1 + 6)))
  {
    v10 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v4 > v10)
      goto LABEL_7;
    if (v10 > v4)
      return 0;
    if (*(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
LABEL_7:
      v11 = *((_WORD *)a2 + 4);
      v12 = *(_QWORD *)a2;
      v13 = *((_WORD *)a3 + 4);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_WORD *)a2 + 4) = v13;
      *(_QWORD *)a3 = v12;
      *((_WORD *)a3 + 4) = v11;
      v14 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v15 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v14 > v15)
        goto LABEL_8;
      if (v15 > v14)
        return 1;
      if (*(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
      {
LABEL_8:
        v16 = *((_WORD *)a1 + 4);
        v17 = *(_QWORD *)a1;
        v18 = *((_WORD *)a2 + 4);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_WORD *)a1 + 4) = v18;
        *(_QWORD *)a2 = v17;
        *((_WORD *)a2 + 4) = v16;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v4 > v5 || v5 <= v4 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
      v6 = *((_WORD *)a1 + 4);
      v7 = *(_QWORD *)a1;
      v8 = *((_WORD *)a3 + 4);
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *((_WORD *)a1 + 4) = v8;
      *(_QWORD *)a3 = v7;
      *((_WORD *)a3 + 4) = v6;
      return 1;
    }
    v19 = *((_WORD *)a1 + 4);
    v20 = *(_QWORD *)a1;
    v21 = *((_WORD *)a2 + 4);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_WORD *)a1 + 4) = v21;
    *(_QWORD *)a2 = v20;
    *((_WORD *)a2 + 4) = v19;
    v22 = v20 | ((unint64_t)WORD2(v20) << 32);
    v23 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v22 > v23)
      goto LABEL_12;
    if (v23 <= v22)
    {
      if (*(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
      {
LABEL_12:
        v24 = *((_WORD *)a2 + 4);
        v25 = *(_QWORD *)a2;
        v26 = *((_WORD *)a3 + 4);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *((_WORD *)a2 + 4) = v26;
        *(_QWORD *)a3 = v25;
        *((_WORD *)a3 + 4) = v24;
        return 2;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unsigned int *sub_100244334(unsigned int *a1, unsigned int *j)
{
  unint64_t v2;
  signed int v3;
  unint64_t v4;
  unsigned int *i;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  __int16 v17;

  v2 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  v3 = *(unsigned int *)((char *)a1 + 6);
  v4 = *(unsigned int *)((char *)j - 10) | ((unint64_t)*((unsigned __int16 *)j - 3) << 32);
  if (v4 <= v2 && (v2 > v4 || v3 >= (int)*(j - 1)))
  {
    for (i = (unsigned int *)((char *)a1 + 10); i < j; i = (unsigned int *)((char *)i + 10))
    {
      v8 = *i | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
      if (v8 > v2 || v2 <= v8 && v3 < *(int *)((char *)i + 6))
        break;
    }
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(unsigned int *)((char *)i + 10);
      i = (unsigned int *)((char *)i + 10);
      v7 = v6 | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
    }
    while (v7 <= v2 && (v2 > v7 || v3 >= *(int *)((char *)i + 6)));
  }
  if (i < j)
  {
    for (j = (unsigned int *)((char *)j - 10);
          v4 > v2 || v2 <= v4 && v3 < *(int *)((char *)j + 6);
          v4 = v9 | ((unint64_t)*((unsigned __int16 *)j + 2) << 32))
    {
      v9 = *(unsigned int *)((char *)j - 10);
      j = (unsigned int *)((char *)j - 10);
    }
  }
  while (i < j)
  {
    v17 = *((_WORD *)i + 4);
    v16 = *(_QWORD *)i;
    v10 = *(_QWORD *)j;
    *((_WORD *)i + 4) = *((_WORD *)j + 4);
    *(_QWORD *)i = v10;
    *((_WORD *)j + 4) = v17;
    *(_QWORD *)j = v16;
    do
    {
      v11 = *(unsigned int *)((char *)i + 10);
      i = (unsigned int *)((char *)i + 10);
      v12 = v11 | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
    }
    while (v12 <= v2 && (v2 > v12 || v3 >= *(int *)((char *)i + 6)));
    do
    {
      do
      {
        j = (unsigned int *)((char *)j - 10);
        v13 = *j | ((unint64_t)*((unsigned __int16 *)j + 2) << 32);
      }
      while (v13 > v2);
    }
    while (v2 <= v13 && v3 < *(int *)((char *)j + 6));
  }
  if ((unsigned int *)((char *)i - 10) != a1)
  {
    v14 = *(_QWORD *)((char *)i - 10);
    *((_WORD *)a1 + 4) = *((_WORD *)i - 1);
    *(_QWORD *)a1 = v14;
  }
  *(unsigned int *)((char *)i - 10) = v2;
  *((_WORD *)i - 3) = WORD2(v2);
  *(i - 1) = v3;
  return i;
}

char *sub_1002444DC(unsigned int *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  signed int v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int16 v21;

  v2 = 0;
  v3 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  v4 = *(unsigned int *)((char *)a1 + 6);
  while (1)
  {
    v5 = *(unsigned int *)((char *)a1 + v2 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v2 + 14) << 32);
    if (v3 <= v5 && (v5 > v3 || *(int *)((char *)a1 + v2 + 16) >= v4))
      break;
    v2 += 10;
  }
  v6 = (unint64_t)a1 + v2 + 10;
  if (v2)
  {
    do
    {
      v7 = *(_DWORD *)(a2 - 10);
      a2 -= 10;
      v8 = v7 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
    }
    while (v3 <= v8 && (v8 > v3 || *(_DWORD *)(a2 + 6) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(_DWORD *)(a2 - 10);
        a2 -= 10;
        v10 = v9 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
        if (v3 > v10)
          break;
        if (v10 > v3)
          goto LABEL_19;
      }
      while (*(_DWORD *)(a2 + 6) >= v4 && v6 < a2);
    }
  }
  v12 = (unsigned int *)v6;
  if (v6 < a2)
  {
    v13 = a2;
    do
    {
      v21 = *((_WORD *)v12 + 4);
      v20 = *(_QWORD *)v12;
      v14 = *(_QWORD *)v13;
      *((_WORD *)v12 + 4) = *(_WORD *)(v13 + 8);
      *(_QWORD *)v12 = v14;
      *(_WORD *)(v13 + 8) = v21;
      *(_QWORD *)v13 = v20;
      do
      {
        do
        {
          v12 = (unsigned int *)((char *)v12 + 10);
          v15 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
        }
        while (v3 > v15);
      }
      while (v15 <= v3 && *(int *)((char *)v12 + 6) < v4);
      do
      {
        v16 = *(_DWORD *)(v13 - 10);
        v13 -= 10;
        v17 = v16 | ((unint64_t)*(unsigned __int16 *)(v13 + 4) << 32);
      }
      while (v3 <= v17 && (v17 > v3 || *(_DWORD *)(v13 + 6) >= v4));
    }
    while ((unint64_t)v12 < v13);
  }
  if ((unsigned int *)((char *)v12 - 10) != a1)
  {
    v18 = *(_QWORD *)((char *)v12 - 10);
    *((_WORD *)a1 + 4) = *((_WORD *)v12 - 1);
    *(_QWORD *)a1 = v18;
  }
  *(unsigned int *)((char *)v12 - 10) = v3;
  *((_WORD *)v12 - 3) = WORD2(v3);
  *(v12 - 1) = v4;
  return (char *)v12 - 10;
}

BOOL sub_100244680(unsigned int *a1, unsigned int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  signed int v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v16 = (_QWORD *)((char *)a2 - 10);
      v17 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v18 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v17 > v18 || v18 <= v17 && (int)*(a2 - 1) < *(int *)((char *)a1 + 6))
      {
        v19 = *((_WORD *)a1 + 4);
        v20 = *(_QWORD *)a1;
        v21 = *((_WORD *)a2 - 1);
        *(_QWORD *)a1 = *v16;
        *((_WORD *)a1 + 4) = v21;
        *v16 = v20;
        *((_WORD *)a2 - 1) = v19;
      }
      return result;
    case 3uLL:
      sub_100244124(a1, (unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a2 - 10));
      return 1;
    case 4uLL:
      v22 = (uint64_t *)((char *)a1 + 10);
      v23 = (uint64_t *)(a1 + 5);
      sub_100244124(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      v24 = (uint64_t *)((char *)a2 - 10);
      v25 = a1[5] | ((unint64_t)*((unsigned __int16 *)a1 + 12) << 32);
      v26 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v25 <= v26 && (v26 > v25 || (int)*(a2 - 1) >= *(int *)((char *)a1 + 26)))
        return 1;
      v27 = *((_WORD *)a1 + 14);
      v28 = *v23;
      v29 = *((_WORD *)a2 - 1);
      *v23 = *v24;
      *((_WORD *)a1 + 14) = v29;
      *v24 = v28;
      *((_WORD *)a2 - 1) = v27;
      v30 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
      v31 = a1[5] | ((unint64_t)*((unsigned __int16 *)a1 + 12) << 32);
      if (v30 <= v31 && (v31 > v30 || *(int *)((char *)a1 + 26) >= (int)a1[4]))
        return 1;
      v32 = *((_WORD *)a1 + 9);
      v33 = *v22;
      *v22 = *v23;
      *((_WORD *)a1 + 9) = *((_WORD *)a1 + 14);
      *v23 = v33;
      *((_WORD *)a1 + 14) = v32;
      v34 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v35 = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
      if (v34 <= v35 && (v35 > v34 || (int)a1[4] >= *(int *)((char *)a1 + 6)))
        return 1;
      v36 = *((_WORD *)a1 + 4);
      v37 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v22;
      *((_WORD *)a1 + 4) = *((_WORD *)a1 + 9);
      *v22 = v37;
      *((_WORD *)a1 + 9) = v36;
      return 1;
    case 5uLL:
      sub_100244A54(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a1 + 30), (unsigned int *)((char *)a2 - 10));
      return 1;
    default:
      v6 = a1 + 5;
      sub_100244124(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      v7 = (unsigned int *)((char *)a1 + 30);
      if ((unsigned int *)((char *)a1 + 30) == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    v12 = *v7 | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 32);
    if (v11 <= v12)
    {
      if (v12 > v11)
        goto LABEL_7;
      v13 = *(unsigned int *)((char *)v7 + 6);
      if (v13 >= *(int *)((char *)v6 + 6))
        goto LABEL_7;
    }
    else
    {
      v13 = *(unsigned int *)((char *)v7 + 6);
    }
    *(_QWORD *)v7 = *(_QWORD *)v6;
    *((_WORD *)v7 + 4) = *((_WORD *)v6 + 4);
    v10 = (uint64_t)a1;
    if (v6 == a1)
      goto LABEL_6;
    v14 = v8;
    while (1)
    {
      v15 = *(unsigned int *)((char *)a1 + v14 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v14 + 14) << 32);
      if (v15 > v12)
        goto LABEL_12;
      if (v12 > v15)
        break;
      if (v13 >= *(int *)((char *)a1 + v14 + 16))
      {
        v10 = (uint64_t)a1 + v14 + 20;
        goto LABEL_6;
      }
LABEL_12:
      v6 = (unsigned int *)((char *)v6 - 10);
      *(_QWORD *)((char *)a1 + v14 + 20) = *(_QWORD *)((char *)a1 + v14 + 10);
      *(_WORD *)((char *)a1 + v14 + 28) = *(_WORD *)((char *)a1 + v14 + 18);
      v14 -= 10;
      if (v14 == -20)
      {
        v10 = (uint64_t)a1;
        goto LABEL_6;
      }
    }
    v10 = (uint64_t)v6;
LABEL_6:
    *(_DWORD *)v10 = v12;
    *(_WORD *)(v10 + 4) = WORD2(v12);
    *(_DWORD *)(v10 + 6) = v13;
    if (++v9 == 8)
      return (unsigned int *)((char *)v7 + 10) == a2;
LABEL_7:
    v6 = v7;
    v8 += 10;
    v7 = (unsigned int *)((char *)v7 + 10);
    if (v7 != a2)
      continue;
    return 1;
  }
}

uint64_t sub_100244A54(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;

  result = sub_100244124(a1, a2, a3);
  v11 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
  v12 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  if (v11 > v12 || v12 <= v11 && *(int *)((char *)a4 + 6) < *(int *)((char *)a3 + 6))
  {
    v13 = *((_WORD *)a3 + 4);
    v14 = *(_QWORD *)a3;
    v15 = *((_WORD *)a4 + 4);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_WORD *)a3 + 4) = v15;
    *(_QWORD *)a4 = v14;
    *((_WORD *)a4 + 4) = v13;
    v16 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
    v17 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v16 > v17 || v17 <= v16 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
    {
      v18 = *((_WORD *)a2 + 4);
      v19 = *(_QWORD *)a2;
      v20 = *((_WORD *)a3 + 4);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_WORD *)a2 + 4) = v20;
      *(_QWORD *)a3 = v19;
      *((_WORD *)a3 + 4) = v18;
      v21 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v22 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v21 > v22 || v22 <= v21 && *(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
      {
        v23 = *((_WORD *)a1 + 4);
        v24 = *(_QWORD *)a1;
        v25 = *((_WORD *)a2 + 4);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_WORD *)a1 + 4) = v25;
        *(_QWORD *)a2 = v24;
        *((_WORD *)a2 + 4) = v23;
      }
    }
  }
  v26 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  v27 = *a5 | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 32);
  if (v26 > v27 || v27 <= v26 && *(int *)((char *)a5 + 6) < *(int *)((char *)a4 + 6))
  {
    v28 = *((_WORD *)a4 + 4);
    v29 = *(_QWORD *)a4;
    v30 = *((_WORD *)a5 + 4);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_WORD *)a4 + 4) = v30;
    *(_QWORD *)a5 = v29;
    *((_WORD *)a5 + 4) = v28;
    v31 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    v32 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
    if (v31 > v32 || v32 <= v31 && *(int *)((char *)a4 + 6) < *(int *)((char *)a3 + 6))
    {
      v33 = *((_WORD *)a3 + 4);
      v34 = *(_QWORD *)a3;
      v35 = *((_WORD *)a4 + 4);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *((_WORD *)a3 + 4) = v35;
      *(_QWORD *)a4 = v34;
      *((_WORD *)a4 + 4) = v33;
      v36 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      v37 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v36 > v37 || v37 <= v36 && *(int *)((char *)a3 + 6) < *(int *)((char *)a2 + 6))
      {
        v38 = *((_WORD *)a2 + 4);
        v39 = *(_QWORD *)a2;
        v40 = *((_WORD *)a3 + 4);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *((_WORD *)a2 + 4) = v40;
        *(_QWORD *)a3 = v39;
        *((_WORD *)a3 + 4) = v38;
        v41 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
        v42 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
        if (v41 > v42 || v42 <= v41 && *(int *)((char *)a2 + 6) < *(int *)((char *)a1 + 6))
        {
          v43 = *((_WORD *)a1 + 4);
          v44 = *(_QWORD *)a1;
          v45 = *((_WORD *)a2 + 4);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_WORD *)a1 + 4) = v45;
          *(_QWORD *)a2 = v44;
          *((_WORD *)a2 + 4) = v43;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100244D38(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int64_t v4;
  int64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  signed int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 1)))
    {
      v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 1)) | 1;
      v6 = (unsigned int *)(result + 10 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2) < a3)
      {
        v7 = *(unsigned int *)((char *)v6 + 10) | ((unint64_t)*((unsigned __int16 *)v6 + 7) << 32);
        v8 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
        if (v7 > v8 || v8 <= v7 && *(_DWORD *)(result + 10 * v5 + 6) < (signed int)v6[4])
        {
          v6 = (unsigned int *)((char *)v6 + 10);
          v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2;
        }
      }
      v9 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
      v10 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
      if (v9 <= v10)
      {
        if (v10 <= v9)
        {
          v11 = *(unsigned int *)((char *)a4 + 6);
          if (*(int *)((char *)v6 + 6) < v11)
            return result;
        }
        else
        {
          v11 = *(unsigned int *)((char *)a4 + 6);
        }
        v12 = *(_QWORD *)v6;
        *((_WORD *)a4 + 4) = *((_WORD *)v6 + 4);
        *(_QWORD *)a4 = v12;
        if (v4 >= v5)
        {
          while (1)
          {
            v15 = 2 * v5;
            v5 = (2 * v5) | 1;
            v13 = (unsigned int *)(result + 10 * v5);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = *(unsigned int *)((char *)v13 + 10) | ((unint64_t)*((unsigned __int16 *)v13 + 7) << 32);
              v18 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
              if (v17 > v18 || v18 <= v17 && *(_DWORD *)(result + 10 * v5 + 6) < (signed int)v13[4])
              {
                v13 = (unsigned int *)((char *)v13 + 10);
                v5 = v16;
              }
            }
            v19 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
            if (v9 > v19 || v19 <= v9 && *(int *)((char *)v13 + 6) < v11)
              break;
            v14 = *(_QWORD *)v13;
            *((_WORD *)v6 + 4) = *((_WORD *)v13 + 4);
            *(_QWORD *)v6 = v14;
            v6 = v13;
            if (v4 < v5)
              goto LABEL_14;
          }
        }
        v13 = v6;
LABEL_14:
        *v13 = v9;
        *((_WORD *)v13 + 2) = WORD2(v9);
        *(unsigned int *)((char *)v13 + 6) = v11;
      }
    }
  }
  return result;
}

char *sub_100244EF4(char *result, char *a2)
{
  int64_t v2;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  signed int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;

  if (a2 - result >= 11)
  {
    v2 = (a2 - result) / 0xAuLL;
    do
    {
      v4 = 0;
      v26 = *(_QWORD *)result;
      v27 = *((_WORD *)result + 4);
      v5 = (unsigned int *)result;
      do
      {
        v7 = v5;
        v8 = v4 + 1;
        v5 = (unsigned int *)((char *)v5 + 10 * v4 + 10);
        v9 = 2 * v4;
        v4 = (2 * v4) | 1;
        v10 = v9 + 2;
        if (v10 < v2)
        {
          v11 = *(unsigned int *)((char *)v5 + 10) | ((unint64_t)*((unsigned __int16 *)v5 + 7) << 32);
          v12 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
          if (v11 > v12 || v12 <= v11 && *(int *)((char *)v7 + 10 * v8 + 6) < (int)v5[4])
          {
            v5 = (unsigned int *)((char *)v5 + 10);
            v4 = v10;
          }
        }
        v6 = *(_QWORD *)v5;
        *((_WORD *)v7 + 4) = *((_WORD *)v5 + 4);
        *(_QWORD *)v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 10;
      if (v5 == (unsigned int *)a2)
      {
        *((_WORD *)v5 + 4) = v27;
        *(_QWORD *)v5 = v26;
      }
      else
      {
        v13 = *(_QWORD *)a2;
        *((_WORD *)v5 + 4) = *((_WORD *)a2 + 4);
        *(_QWORD *)v5 = v13;
        *(_QWORD *)a2 = v26;
        *((_WORD *)a2 + 4) = v27;
        v14 = (char *)v5 - result + 10;
        if (v14 >= 11)
        {
          v15 = v14 / 0xAuLL - 2;
          v16 = v15 >> 1;
          v17 = &result[10 * (v15 >> 1)];
          v18 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
          v19 = *(unsigned int *)v17 | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 32);
          if (v18 > v19)
          {
            v20 = *(unsigned int *)((char *)v5 + 6);
LABEL_17:
            v21 = *(_QWORD *)v17;
            *((_WORD *)v5 + 4) = *((_WORD *)v17 + 4);
            *(_QWORD *)v5 = v21;
            if (v15 >= 2)
            {
              while (1)
              {
                v24 = v16 - 1;
                v16 = (v16 - 1) >> 1;
                v22 = &result[10 * v16];
                v25 = *(unsigned int *)v22 | ((unint64_t)*((unsigned __int16 *)v22 + 2) << 32);
                if (v18 <= v25 && (v25 > v18 || *(_DWORD *)&result[10 * v16 + 6] >= v20))
                  break;
                v23 = *(_QWORD *)v22;
                *((_WORD *)v17 + 4) = *((_WORD *)v22 + 4);
                *(_QWORD *)v17 = v23;
                v17 = &result[10 * v16];
                if (v24 <= 1)
                  goto LABEL_19;
              }
            }
            v22 = v17;
LABEL_19:
            *(_DWORD *)v22 = v18;
            *((_WORD *)v22 + 2) = WORD2(v18);
            *(_DWORD *)(v22 + 6) = v20;
            continue;
          }
          if (v19 <= v18)
          {
            v20 = *(unsigned int *)((char *)v5 + 6);
            if (*(_DWORD *)&result[10 * v16 + 6] < v20)
              goto LABEL_17;
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

void sub_100245110(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_1003FF1C0;
  exception[1] = a1;
}

void sub_100245150(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

const char *sub_100245174(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "unknown boost::container exception";
}

uint64_t sub_10024518C(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int *v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  unint64_t v41;
  __int128 v43;
  int v44;
  int *v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t v50;
  int v51;

  v7 = result;
LABEL_2:
  v8 = a2 - 10;
  v9 = (int *)v7;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v7 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_10024581C(a3, (uint64_t)(a2 - 10), (_DWORD *)v7);
        if (!(_DWORD)result)
          return result;
        v32 = *(_DWORD *)v7;
        v33 = *(int *)v7 >> 31;
        v35 = (_QWORD *)(v7 + 8);
        v34 = *(_QWORD *)(v7 + 8);
        if (v33 == *(_DWORD *)v7)
        {
          v36 = *v8;
          if (v32 == *v8)
          {
            v37 = 0;
            *v35 = *((_QWORD *)a2 - 4);
            goto LABEL_59;
          }
          v37 = 0;
        }
        else
        {
          v50 = *(_QWORD *)(v7 + 16);
          v51 = *(_DWORD *)(v7 + 24);
          v37 = v33 ^ v32;
          v36 = *v8;
          if (v32 == *v8)
          {
            v43 = *((_OWORD *)a2 - 2);
            *(_DWORD *)(v7 + 24) = *(a2 - 4);
            *(_OWORD *)v35 = v43;
            goto LABEL_59;
          }
        }
        v44 = v36 ^ (v36 >> 31);
        v45 = a2 - 8;
        if (v44)
        {
          v46 = *(_OWORD *)v45;
          *(_DWORD *)(v7 + 24) = *(a2 - 4);
          *(_OWORD *)v35 = v46;
          *(_DWORD *)v7 = v44;
        }
        else
        {
          *(_QWORD *)(v7 + 8) = *(_QWORD *)v45;
          *(_DWORD *)v7 = 0;
        }
LABEL_59:
        v47 = v37 >> 31;
        if (*v8 == v37)
        {
          *((_QWORD *)a2 - 4) = v34;
          if (v47 != v37)
          {
            *((_QWORD *)a2 - 3) = v50;
            *(a2 - 4) = v51;
          }
        }
        else
        {
          *((_QWORD *)a2 - 4) = v34;
          if (v47 != v37)
          {
            *((_QWORD *)a2 - 3) = v50;
            *(a2 - 4) = v51;
            *(a2 - 10) = v47 ^ v37;
          }
          else
          {
            *v8 = 0;
          }
        }
        v48 = *(_DWORD *)(v7 + 32);
        *(_DWORD *)(v7 + 32) = *(a2 - 2);
        *(a2 - 2) = v48;
        return result;
      case 3uLL:
        return sub_100246464((int *)v7, v7 + 40, (uint64_t)(a2 - 10), a3);
      case 4uLL:
        return sub_10024890C(v7, v7 + 40, v7 + 80, (uint64_t)(a2 - 10), a3);
      case 5uLL:
        return sub_100248D48(v7, v7 + 40, v7 + 80, v7 + 120, (uint64_t)(a2 - 10), a3);
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1002459F0((int *)v7, a2, a3);
          else
            return (uint64_t)sub_100245D98((unsigned __int8 *)v7, (unsigned __int8 *)a2, a3);
        }
        if (v10 != 1)
        {
          v14 = v13 >> 1;
          v15 = v7 + 40 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            sub_100246464((int *)v15, v7, (uint64_t)(a2 - 10), a3);
            if ((a5 & 1) != 0)
              goto LABEL_28;
            goto LABEL_27;
          }
          sub_100246464((int *)v7, v15, (uint64_t)(a2 - 10), a3);
          sub_100246464((int *)(v7 + 40), 40 * v14 + v7 - 40, (uint64_t)(a2 - 20), a3);
          sub_100246464((int *)(v7 + 80), v7 + 40 + 40 * v14, (uint64_t)(a2 - 30), a3);
          sub_100246464((int *)(40 * v14 + v7 - 40), v15, v7 + 40 + 40 * v14, a3);
          v16 = *(_DWORD *)v7;
          v17 = *(int *)v7 >> 31;
          v19 = (_QWORD *)(v7 + 8);
          v18 = *(_QWORD *)(v7 + 8);
          if (v17 == *(_DWORD *)v7)
          {
            v20 = *(_DWORD *)v15;
            if (v16 == *(_DWORD *)v15)
            {
              v21 = 0;
              *v19 = *(_QWORD *)(v15 + 8);
              goto LABEL_15;
            }
            v21 = 0;
          }
          else
          {
            v50 = *(_QWORD *)(v7 + 16);
            v51 = *(_DWORD *)(v7 + 24);
            v21 = v17 ^ v16;
            v20 = *(_DWORD *)v15;
            if (v16 == *(_DWORD *)v15)
            {
              v22 = *(_OWORD *)(v15 + 8);
              *(_DWORD *)(v7 + 24) = *(_DWORD *)(v15 + 24);
              *(_OWORD *)v19 = v22;
LABEL_15:
              v23 = v21 >> 31;
              if (*(_DWORD *)v15 != v21)
                goto LABEL_21;
              goto LABEL_16;
            }
          }
          v24 = v20 ^ (v20 >> 31);
          v25 = (__int128 *)(v15 + 8);
          if (v24)
          {
            v26 = *v25;
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v15 + 24);
            *(_OWORD *)v19 = v26;
            *(_DWORD *)v7 = v24;
            v23 = v21 >> 31;
            if (*(_DWORD *)v15 != v21)
              goto LABEL_21;
          }
          else
          {
            *(_QWORD *)(v7 + 8) = *(_QWORD *)v25;
            *(_DWORD *)v7 = 0;
            v23 = v21 >> 31;
            if (*(_DWORD *)v15 != v21)
            {
LABEL_21:
              *(_QWORD *)(v15 + 8) = v18;
              if (v23 != v21)
              {
                *(_DWORD *)(v15 + 24) = v51;
                *(_QWORD *)(v15 + 16) = v50;
                *(_DWORD *)v15 = v23 ^ v21;
              }
              else
              {
                *(_DWORD *)v15 = 0;
              }
              goto LABEL_26;
            }
          }
LABEL_16:
          *(_QWORD *)(v15 + 8) = v18;
          if (v23 != v21)
          {
            *(_DWORD *)(v15 + 24) = v51;
            *(_QWORD *)(v15 + 16) = v50;
          }
LABEL_26:
          v27 = v7 + 40 * v14;
          v28 = *(_DWORD *)(v7 + 32);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v27 + 32);
          *(_DWORD *)(v27 + 32) = v28;
          if ((a5 & 1) != 0)
            goto LABEL_28;
LABEL_27:
          if (!sub_10024581C(a3, v7 - 40, (_DWORD *)v7))
          {
            result = (uint64_t)sub_100246B28(v7, (unint64_t)a2, a3);
            v9 = (int *)result;
            goto LABEL_33;
          }
LABEL_28:
          v29 = sub_1002474E0(v7, (unint64_t)a2, a3);
          if ((v30 & 1) == 0)
            goto LABEL_31;
          v31 = sub_10024848C(v7, v29, a3);
          v9 = v29 + 10;
          result = sub_10024848C((uint64_t)(v29 + 10), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v31)
              continue;
LABEL_31:
            result = sub_10024518C(v7, v29, a3, -v11, a5 & 1);
            v9 = v29 + 10;
LABEL_33:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v29;
          if (v31)
            return result;
          goto LABEL_2;
        }
        if ((int *)v7 != a2)
        {
          v38 = (v13 - 2) >> 1;
          v39 = v38 + 1;
          v40 = (int *)(v7 + 40 * v38);
          do
          {
            sub_1002492A4(v7, a3, v13, v40);
            v40 -= 10;
            --v39;
          }
          while (v39);
          v41 = v12 / 0x28uLL;
          do
          {
            result = sub_100249584(v7, (uint64_t)a2, a3, v41);
            a2 -= 10;
          }
          while (v41-- > 2);
        }
        return result;
    }
  }
}

BOOL sub_10024581C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  __int128 *v10;
  int v11;
  int v12;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;

  v6 = (unsigned __int8 *)(a3 + 2);
  v5 = *a3;
  v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(_QWORD *)&v19 = *(_QWORD *)v6;
    v7 = v5;
  }
  else
  {
    v19 = *(_OWORD *)v6;
    v20 = a3[6];
  }
  v8 = v7 ^ v5;
  v18 = v8;
  v10 = (__int128 *)(a2 + 8);
  v9 = *(_DWORD *)a2;
  v11 = *(int *)a2 >> 31;
  v12 = v8 >> 31;
  if (v11 != *(_DWORD *)a2)
  {
    if (v12 != v8)
    {
      if (sub_1001D7688((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19))
        return 1;
      v9 = *(_DWORD *)a2;
      v11 = *(int *)a2 >> 31;
    }
    if (v11 != v9)
    {
      v16 = *v10;
      v17 = *(_DWORD *)(a2 + 24);
      v14 = v11 ^ v9;
      v15 = v14 >> 31;
      if (*a3 == (int)*a3 >> 31)
        goto LABEL_15;
      goto LABEL_19;
    }
LABEL_14:
    *(_QWORD *)&v16 = *(_QWORD *)v10;
    v14 = v11 ^ v9;
    v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31)
    {
LABEL_15:
      if (v15 != v14 || *(_QWORD *)v6 < (unint64_t)v16)
        return 0;
      return *(_DWORD *)(a2 + 32) < a3[8];
    }
LABEL_19:
    if (v15 != v14 && sub_1001D7688(v6, (unsigned __int8 *)&v16))
      return 0;
    return *(_DWORD *)(a2 + 32) < a3[8];
  }
  if (v12 == v8 && *(_QWORD *)v10 >= (unint64_t)v19)
  {
    v11 = *(_DWORD *)a2;
    goto LABEL_14;
  }
  return 1;
}

int *sub_1002459F0(int *result, int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t i;
  int *v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  int v18;
  _OWORD *v19;
  _OWORD *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _QWORD *v33;
  int v34;
  int v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;

  if (result == a2)
    return result;
  v3 = result;
  v4 = (uint64_t)(result + 10);
  if (result + 10 == a2)
    return result;
  v5 = 0;
  v6 = result;
  while (2)
  {
    v7 = (int *)v4;
    result = (int *)sub_10024581C(a3, v4, v6);
    if (!(_DWORD)result)
      goto LABEL_6;
    v8 = *v7;
    v9 = *v7 >> 31;
    v10 = v6 + 12;
    if (v8 >> 31 == v8)
    {
      *(_QWORD *)&v38 = *v10;
      v9 = v8;
    }
    else
    {
      v38 = *(_OWORD *)v10;
      v39 = v6[16];
    }
    v37 = v9 ^ v8;
    v40 = v6[18];
    for (i = v5; ; i -= 40)
    {
      v13 = (int *)((char *)v3 + i);
      v14 = *(int *)((char *)v3 + i);
      if (v8 == v14)
      {
        v15 = v13 + 2;
        v16 = v13 + 12;
        if (v8 == v8 >> 31)
        {
          *v16 = *v15;
          v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i)
            goto LABEL_47;
        }
        else
        {
          *(_OWORD *)v16 = *(_OWORD *)v15;
          v13[16] = v13[6];
          v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i)
            goto LABEL_47;
        }
      }
      else
      {
        v18 = v14 ^ (v14 >> 31);
        v19 = v13 + 2;
        v20 = v13 + 12;
        if (v18)
        {
          *v20 = *v19;
          v13[16] = v13[6];
          v13[10] = v18;
          v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i)
            goto LABEL_47;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)v19;
          v13[10] = 0;
          v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i)
          {
LABEL_47:
            v12 = v3;
            v31 = *v3;
            v32 = v37;
            if (*v3 == v37)
              goto LABEL_45;
LABEL_48:
            v34 = v32 ^ (v32 >> 31);
            if (v34)
            {
              *(_OWORD *)(v12 + 2) = v38;
              v12[6] = v39;
              *v12 = v34;
            }
            else
            {
              *((_QWORD *)v12 + 1) = v38;
              *v12 = 0;
            }
            goto LABEL_5;
          }
        }
      }
      v21 = *((_DWORD *)v17 - 10);
      v22 = v21 >> 31;
      v23 = v17 - 32;
      if (v21 >> 31 == v21)
      {
        *(_QWORD *)&v45 = *(_QWORD *)v23;
        v22 = v21;
      }
      else
      {
        v45 = *(_OWORD *)v23;
        v46 = *((_DWORD *)v17 - 4);
      }
      v24 = v22 ^ v21;
      v44 = v24;
      v25 = v37;
      v26 = v37 >> 31;
      v27 = v24 >> 31;
      if (v37 >> 31 == v37)
      {
        if (v27 != v24)
          goto LABEL_13;
        v28 = v38;
        if ((unint64_t)v38 < (unint64_t)v45)
          goto LABEL_13;
LABEL_36:
        *(_QWORD *)&v42 = v28;
        v29 = 0;
        v41 = 0;
        v30 = 0;
        if (*((_DWORD *)v17 - 10) == *((int *)v17 - 10) >> 31)
          goto LABEL_37;
        goto LABEL_41;
      }
      if (v27 != v24)
      {
        result = (int *)sub_1001D7688((unsigned __int8 *)&v38, (unsigned __int8 *)&v45);
        if ((result & 1) != 0)
          goto LABEL_13;
        v25 = v37;
        v26 = v37 >> 31;
      }
      if (v26 == v25)
      {
        v28 = v38;
        goto LABEL_36;
      }
      v42 = v38;
      v43 = v39;
      v29 = v26 ^ v25;
      v41 = v29;
      v30 = v29 >> 31;
      if (*((_DWORD *)v17 - 10) == *((int *)v17 - 10) >> 31)
      {
LABEL_37:
        if (v30 != v29 || *(_QWORD *)v23 < (unint64_t)v42)
          break;
        goto LABEL_12;
      }
LABEL_41:
      if (v30 != v29)
      {
        result = (int *)sub_1001D7688((unsigned __int8 *)v17 - 32, (unsigned __int8 *)&v42);
        if ((result & 1) != 0)
          break;
      }
LABEL_12:
      v12 = (int *)((char *)v3 + i);
      if (v40 >= *(int *)((char *)v3 + i - 8))
        goto LABEL_44;
LABEL_13:
      v8 = *v13;
    }
    v12 = (int *)((char *)v3 + i);
LABEL_44:
    v31 = *v12;
    v32 = v37;
    if (*v12 != v37)
      goto LABEL_48;
LABEL_45:
    v33 = v12 + 2;
    if (v31 == v31 >> 31)
    {
      *v33 = v38;
    }
    else
    {
      *(_OWORD *)v33 = v38;
      v12[6] = v39;
    }
LABEL_5:
    v12[8] = v40;
LABEL_6:
    v4 = (uint64_t)(v7 + 10);
    v5 += 40;
    v6 = v7;
    if (v7 + 10 != a2)
      continue;
    return result;
  }
}

unsigned __int8 *sub_100245D98(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int *v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *i;
  int v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  if (result == a2)
    return result;
  v3 = result;
  v4 = (uint64_t)(result + 40);
  if (result + 40 == a2)
    return result;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v5 = 0;
  v6 = 0;
  v7 = result + 16;
  while (2)
  {
    v8 = (int *)v4;
    result = (unsigned __int8 *)sub_10024581C(a3, v4, v3);
    if (!(_DWORD)result)
      goto LABEL_6;
    v9 = *v8;
    v10 = *v8;
    if (*v8 >> 31 != *v8)
    {
      LODWORD(v37) = v3[57];
      HIDWORD(v37) = v3[56];
      LODWORD(v36) = v3[59];
      HIDWORD(v36) = v3[58];
      LODWORD(v35) = v3[61];
      HIDWORD(v35) = v3[60];
      LODWORD(v34) = v3[63];
      HIDWORD(v34) = v3[62];
      LODWORD(v33) = v3[65];
      HIDWORD(v33) = v3[64];
      v10 = v9 >> 31;
      LODWORD(v32) = v3[67];
      HIDWORD(v32) = v3[66];
    }
    v11 = *((_QWORD *)v3 + 6);
    v29 = HIBYTE(v11);
    v12 = v10 ^ v9;
    v13 = *((_DWORD *)v3 + 18);
    v14 = (v10 ^ v9) >> 31;
    for (i = v7; ; i -= 40)
    {
      v16 = *((_DWORD *)i - 4);
      if (v9 == v16)
      {
        v17 = i - 8;
        v18 = i + 32;
        if (v9 == v9 >> 31)
        {
          *v18 = *(_QWORD *)v17;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v17;
          *((_DWORD *)i + 12) = *((_DWORD *)i + 2);
        }
      }
      else
      {
        v19 = v16 ^ (v16 >> 31);
        if (v19)
        {
          *((_OWORD *)i + 2) = *(_OWORD *)(i - 8);
          *((_DWORD *)i + 12) = *((_DWORD *)i + 2);
          *((_DWORD *)i + 6) = v19;
        }
        else
        {
          *((_QWORD *)i + 4) = *((_QWORD *)i - 1);
          *((_DWORD *)i + 6) = 0;
        }
      }
      *((_DWORD *)i + 14) = *((_DWORD *)i + 4);
      v20 = *((_DWORD *)i - 14);
      v21 = v20 >> 31;
      v22 = v20;
      if (v20 >> 31 != v20)
      {
        LODWORD(v43) = *(i - 39);
        HIDWORD(v43) = *(i - 40);
        LODWORD(v42) = *(i - 37);
        HIDWORD(v42) = *(i - 38);
        v41 = *(i - 36);
        HIDWORD(v39) = *(i - 34);
        v40 = *(i - 35);
        HIDWORD(v38) = *(i - 32);
        LODWORD(v39) = *(i - 33);
        LODWORD(v38) = *(i - 31);
        v5 = *(i - 30);
        v22 = v20 >> 31;
        v6 = *(i - 29);
      }
      result = i - 48;
      v23 = *((_QWORD *)i - 6);
      v24 = v22 ^ v20;
      v25 = v24 >> 31;
      if (v14 == v12)
      {
        if (v25 != v24 || v11 < v23)
          goto LABEL_12;
        v44 = v11;
        v26 = 0;
        v27 = 0;
        if (v21 != v20)
          goto LABEL_26;
      }
      else
      {
        if (v25 != v24)
        {
          if (v11 < *((_QWORD *)i - 6))
            goto LABEL_12;
          if (*((_QWORD *)i - 6) >= v11)
          {
            if (BYTE1(v11) < BYTE1(v23))
              goto LABEL_12;
            if (BYTE1(v23) >= BYTE1(v11))
            {
              if (BYTE2(v11) < BYTE2(v23))
                goto LABEL_12;
              if (BYTE2(v23) >= BYTE2(v11))
              {
                if (BYTE3(v11) < BYTE3(v23))
                  goto LABEL_12;
                if (BYTE3(v23) >= BYTE3(v11))
                {
                  if (BYTE4(v11) < BYTE4(v23))
                    goto LABEL_12;
                  if (BYTE4(v23) >= BYTE4(v11))
                  {
                    if (BYTE5(v11) < BYTE5(v23))
                      goto LABEL_12;
                    if (BYTE5(v23) >= BYTE5(v11))
                    {
                      if (BYTE6(v11) < BYTE6(v23))
                        goto LABEL_12;
                      if (BYTE6(v23) >= BYTE6(v11))
                      {
                        v28 = HIBYTE(v23);
                        if (v29 < v28
                          || v28 >= v29
                          && (HIDWORD(v37) < HIDWORD(v43)
                           || HIDWORD(v43) >= HIDWORD(v37)
                           && (v37 < v43
                            || v43 >= v37
                            && (HIDWORD(v36) < HIDWORD(v42)
                             || HIDWORD(v42) >= HIDWORD(v36)
                             && (v36 < v42
                              || v42 >= v36
                              && (HIDWORD(v35) < v41
                               || v41 >= HIDWORD(v35)
                               && (v35 < v40
                                || v40 >= v35
                                && (HIDWORD(v34) < HIDWORD(v39)
                                 || HIDWORD(v39) >= HIDWORD(v34)
                                 && (v34 < v39
                                  || v39 >= v34
                                  && (HIDWORD(v33) < HIDWORD(v38)
                                   || HIDWORD(v38) >= HIDWORD(v33)
                                   && (v33 < v38
                                    || v38 >= v33 && v32 < __PAIR64__(v5, v6))))))))))))
                        {
                          goto LABEL_12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v44 = v11;
        v45 = BYTE4(v37);
        v46 = v37;
        v47 = BYTE4(v36);
        v48 = v36;
        v49 = BYTE4(v35);
        v50 = v35;
        v51 = BYTE4(v34);
        v52 = v34;
        v53 = BYTE4(v33);
        v54 = v33;
        v55 = BYTE4(v32);
        v56 = v32;
        v26 = v14 ^ v12;
        v27 = (v14 ^ v12) >> 31;
        if (v21 != v20)
        {
LABEL_26:
          if (v27 != v26)
          {
            result = (unsigned __int8 *)sub_1001D7688(result, (unsigned __int8 *)&v44);
            if ((result & 1) != 0)
              break;
          }
          goto LABEL_11;
        }
      }
      if (v27 != v26 || *(_QWORD *)result < v11)
        break;
LABEL_11:
      if (v13 >= *((_DWORD *)i - 6))
        break;
LABEL_12:
      v9 = *((_DWORD *)i - 4);
    }
    if (*((_DWORD *)i - 4) == v12)
    {
      *((_QWORD *)i - 1) = v11;
      if (v14 != v12)
      {
        *i = BYTE4(v37);
        i[1] = v37;
        i[2] = BYTE4(v36);
        i[3] = v36;
        i[4] = BYTE4(v35);
        i[5] = v35;
        i[6] = BYTE4(v34);
        i[7] = v34;
        i[8] = BYTE4(v33);
        i[9] = v33;
        i[10] = BYTE4(v32);
        i[11] = v32;
      }
    }
    else
    {
      *((_QWORD *)i - 1) = v11;
      if (v14 != v12)
      {
        *i = BYTE4(v37);
        i[1] = v37;
        i[2] = BYTE4(v36);
        i[3] = v36;
        i[4] = BYTE4(v35);
        i[5] = v35;
        i[6] = BYTE4(v34);
        i[7] = v34;
        i[8] = BYTE4(v33);
        i[9] = v33;
        i[10] = BYTE4(v32);
        i[11] = v32;
        *((_DWORD *)i - 4) = v14 ^ v12;
      }
      else
      {
        *((_DWORD *)i - 4) = 0;
      }
    }
    *((_DWORD *)i + 4) = v13;
LABEL_6:
    v4 = (uint64_t)(v8 + 10);
    v7 += 40;
    v3 = (unsigned __int8 *)v8;
    if (v8 + 10 != (int *)a2)
      continue;
    return result;
  }
}

uint64_t sub_100246464(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  __int128 *v36;
  __int128 v37;
  int v38;
  __int128 *v39;
  __int128 v40;
  int v41;
  __int128 *v42;
  __int128 v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 *v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  int v71;

  v8 = sub_10024581C(a4, a2, a1);
  result = sub_10024581C(a4, a3, (_DWORD *)a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v17 = *(_DWORD *)a2;
    v18 = *(int *)a2 >> 31;
    v20 = (_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 8);
    if (v18 == *(_DWORD *)a2)
    {
      v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        v22 = 0;
        *v20 = *(_QWORD *)(a3 + 8);
        v23 = 0;
        if (*(_DWORD *)a3)
          goto LABEL_22;
        goto LABEL_36;
      }
      v22 = 0;
    }
    else
    {
      v70 = *(_QWORD *)(a2 + 16);
      v71 = *(_DWORD *)(a2 + 24);
      v22 = v18 ^ v17;
      v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        v32 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v20 = v32;
        v23 = v22 >> 31;
        if (*(_DWORD *)a3 != v22)
          goto LABEL_22;
        goto LABEL_36;
      }
    }
    v38 = v21 ^ (v21 >> 31);
    v39 = (__int128 *)(a3 + 8);
    if (v38)
    {
      v40 = *v39;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v20 = v40;
      *(_DWORD *)a2 = v38;
      v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
        goto LABEL_22;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *(_QWORD *)v39;
      *(_DWORD *)a2 = 0;
      v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
      {
LABEL_22:
        *(_QWORD *)(a3 + 8) = v19;
        if (v23 != v22)
        {
          *(_QWORD *)(a3 + 16) = v70;
          *(_DWORD *)(a3 + 24) = v71;
          *(_DWORD *)a3 = v23 ^ v22;
        }
        else
        {
          *(_DWORD *)a3 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_36:
    *(_QWORD *)(a3 + 8) = v19;
    if (v23 != v22)
    {
      *(_QWORD *)(a3 + 16) = v70;
      *(_DWORD *)(a3 + 24) = v71;
    }
LABEL_46:
    v45 = (int *)(a2 + 32);
    v46 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = v46;
    if (!sub_10024581C(a4, a2, a1))
      return 1;
    v47 = *a1;
    v48 = *a1 >> 31;
    v50 = a1 + 2;
    v49 = *((_QWORD *)a1 + 1);
    if (v48 == *a1)
    {
      v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        v52 = 0;
        *v50 = *v20;
        v53 = 0;
        if (*(_DWORD *)a2)
          goto LABEL_53;
LABEL_75:
        *v20 = v49;
        if (v53 != v52)
        {
          *(_QWORD *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          v44 = a1 + 8;
          goto LABEL_86;
        }
LABEL_76:
        v44 = a1 + 8;
LABEL_86:
        result = 2;
        goto LABEL_87;
      }
      v52 = 0;
    }
    else
    {
      v70 = *((_QWORD *)a1 + 2);
      v71 = a1[6];
      v52 = v48 ^ v47;
      v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        v54 = *(_OWORD *)v20;
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)v50 = v54;
        v53 = v52 >> 31;
        if (*(_DWORD *)a2 == v52)
          goto LABEL_75;
        goto LABEL_53;
      }
    }
    v64 = v51 ^ (v51 >> 31);
    if (!v64)
    {
      *((_QWORD *)a1 + 1) = *v20;
      *a1 = 0;
      v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52)
        goto LABEL_53;
      goto LABEL_75;
    }
    v65 = *(_OWORD *)v20;
    a1[6] = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v50 = v65;
    *a1 = v64;
    v53 = v52 >> 31;
    if (*(_DWORD *)a2 == v52)
      goto LABEL_75;
LABEL_53:
    *v20 = v49;
    if (v53 == v52)
    {
      *(_DWORD *)a2 = 0;
      v44 = a1 + 8;
      goto LABEL_86;
    }
    *(_QWORD *)(a2 + 16) = v70;
    *(_DWORD *)(a2 + 24) = v71;
    *(_DWORD *)a2 = v53 ^ v52;
    goto LABEL_76;
  }
  v10 = a1 + 2;
  if (!(_DWORD)result)
  {
    v24 = *a1;
    v25 = *a1 >> 31;
    v26 = *((_QWORD *)a1 + 1);
    if (v25 == *a1)
    {
      v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        v28 = 0;
        *v10 = *(_QWORD *)(a2 + 8);
        v29 = 0;
        if (*(_DWORD *)a2)
          goto LABEL_26;
        goto LABEL_41;
      }
      v28 = 0;
    }
    else
    {
      v70 = *((_QWORD *)a1 + 2);
      v71 = a1[6];
      v28 = v25 ^ v24;
      v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        v33 = *(_OWORD *)(a2 + 8);
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)v10 = v33;
        v29 = v28 >> 31;
        if (*(_DWORD *)a2 != v28)
          goto LABEL_26;
        goto LABEL_41;
      }
    }
    v41 = v27 ^ (v27 >> 31);
    v42 = (__int128 *)(a2 + 8);
    if (v41)
    {
      v43 = *v42;
      a1[6] = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v10 = v43;
      *a1 = v41;
      v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
        goto LABEL_26;
    }
    else
    {
      *((_QWORD *)a1 + 1) = *(_QWORD *)v42;
      *a1 = 0;
      v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
      {
LABEL_26:
        *(_QWORD *)(a2 + 8) = v26;
        v34 = v29 ^ v28;
        if (v34)
        {
          *(_QWORD *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          *(_DWORD *)a2 = v34;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_56;
      }
    }
LABEL_41:
    *(_QWORD *)(a2 + 8) = v26;
    if (v29 != v28)
    {
      *(_QWORD *)(a2 + 16) = v70;
      *(_DWORD *)(a2 + 24) = v71;
    }
LABEL_56:
    v44 = (int *)(a2 + 32);
    v55 = a1[8];
    a1[8] = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v55;
    if (sub_10024581C(a4, a3, (_DWORD *)a2))
    {
      v56 = *(_DWORD *)a2;
      v57 = *(int *)a2 >> 31;
      v59 = (_QWORD *)(a2 + 8);
      v58 = *(_QWORD *)(a2 + 8);
      if (v57 == *(_DWORD *)a2)
      {
        v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          v61 = 0;
          *v59 = *(_QWORD *)(a3 + 8);
          v62 = 0;
          if (*(_DWORD *)a3)
            goto LABEL_64;
          goto LABEL_80;
        }
        v61 = 0;
      }
      else
      {
        v70 = *(_QWORD *)(a2 + 16);
        v71 = *(_DWORD *)(a2 + 24);
        v61 = v57 ^ v56;
        v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          v63 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)v59 = v63;
          v62 = v61 >> 31;
          if (*(_DWORD *)a3 != v61)
            goto LABEL_64;
          goto LABEL_80;
        }
      }
      v66 = v60 ^ (v60 >> 31);
      v67 = (__int128 *)(a3 + 8);
      if (v66)
      {
        v68 = *v67;
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v59 = v68;
        *(_DWORD *)a2 = v66;
        v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
          goto LABEL_64;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = *(_QWORD *)v67;
        *(_DWORD *)a2 = 0;
        v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
        {
LABEL_64:
          *(_QWORD *)(a3 + 8) = v58;
          if (v62 != v61)
          {
            *(_QWORD *)(a3 + 16) = v70;
            *(_DWORD *)(a3 + 24) = v71;
            *(_DWORD *)a3 = v62 ^ v61;
          }
          else
          {
            *(_DWORD *)a3 = 0;
          }
LABEL_85:
          v45 = (int *)(a3 + 32);
          goto LABEL_86;
        }
      }
LABEL_80:
      *(_QWORD *)(a3 + 8) = v58;
      if (v62 != v61)
      {
        *(_QWORD *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_85;
    }
    return 1;
  }
  v11 = *a1;
  v12 = *a1 >> 31;
  v13 = *((_QWORD *)a1 + 1);
  if (v12 == *a1)
  {
    v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      v15 = 0;
      *v10 = *(_QWORD *)(a3 + 8);
      v16 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_18;
LABEL_31:
      *(_QWORD *)(a3 + 8) = v13;
      if (v16 != v15)
      {
        *(_QWORD *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_44;
    }
    v15 = 0;
  }
  else
  {
    v70 = *((_QWORD *)a1 + 2);
    v71 = a1[6];
    v15 = v12 ^ v11;
    v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      v30 = *(_OWORD *)(a3 + 8);
      a1[6] = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v10 = v30;
      v16 = v15 >> 31;
      if (*(_DWORD *)a3 != v15)
        goto LABEL_18;
      goto LABEL_31;
    }
  }
  v35 = v14 ^ (v14 >> 31);
  v36 = (__int128 *)(a3 + 8);
  if (v35)
  {
    v37 = *v36;
    a1[6] = *(_DWORD *)(a3 + 24);
    *(_OWORD *)v10 = v37;
    *a1 = v35;
    v16 = v15 >> 31;
    if (*(_DWORD *)a3 != v15)
      goto LABEL_18;
    goto LABEL_31;
  }
  *((_QWORD *)a1 + 1) = *(_QWORD *)v36;
  *a1 = 0;
  v16 = v15 >> 31;
  if (*(_DWORD *)a3 == v15)
    goto LABEL_31;
LABEL_18:
  *(_QWORD *)(a3 + 8) = v13;
  v31 = v16 ^ v15;
  if (v31)
  {
    *(_QWORD *)(a3 + 16) = v70;
    *(_DWORD *)(a3 + 24) = v71;
    *(_DWORD *)a3 = v31;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
LABEL_44:
  v44 = a1 + 8;
  v45 = (int *)(a3 + 32);
  result = 1;
LABEL_87:
  v69 = *v44;
  *v44 = *v45;
  *v45 = v69;
  return result;
}

int *sub_100246B28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  unint64_t v5;
  __int128 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int *v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 *v29;
  __int128 v30;
  int v31;
  int *i;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v51;
  int v52;
  unint64_t v53;
  int *v54;
  int v55;
  int *v56;
  int v57;
  int *v58;
  __int128 v59;
  __int128 v60;
  int *v61;
  int v62;
  int *v63;
  __int128 v64;
  __int128 v65;
  __int128 *v67;
  unsigned __int8 v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  int v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  int v85;

  v5 = a2;
  v8 = *(_DWORD *)a1;
  v6 = (__int128 *)(a1 + 8);
  v7 = v8;
  v9 = v8 >> 31;
  v67 = v6;
  if (v8 >> 31 == v8)
  {
    *(_QWORD *)&v80 = *(_QWORD *)v6;
    v9 = v7;
  }
  else
  {
    v80 = *v6;
    v81 = *((_DWORD *)v6 + 4);
  }
  v10 = v9 ^ v7;
  v11 = *(_DWORD *)(a1 + 32);
  v79 = v10;
  v82 = v11;
  if (sub_10024581C(a3, (uint64_t)&v79, (_DWORD *)(a2 - 40)))
  {
    v12 = (int *)a1;
    do
      v12 += 10;
    while (!sub_10024581C(a3, (uint64_t)&v79, v12));
  }
  else
  {
    v13 = (int *)(a1 + 40);
    do
    {
      v12 = v13;
      if ((unint64_t)v13 >= v5)
        break;
      v14 = sub_10024581C(a3, (uint64_t)&v79, v13);
      v13 = v12 + 10;
    }
    while (!v14);
  }
  if ((unint64_t)v12 < v5)
  {
    do
      v5 -= 40;
    while (sub_10024581C(a3, (uint64_t)&v79, (_DWORD *)v5));
  }
  if ((unint64_t)v12 < v5)
  {
    v74 = 0;
    v75 = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    v70 = 0;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *v12;
      v21 = *v12 >> 31;
      v23 = v12 + 2;
      v22 = *((_QWORD *)v12 + 1);
      if (v21 == *v12)
      {
        v24 = *(_DWORD *)v5;
        if (v20 == *(_DWORD *)v5)
        {
          v25 = 0;
          *v23 = *(_QWORD *)(v5 + 8);
          v26 = 0;
          if (!*(_DWORD *)v5)
            goto LABEL_26;
          goto LABEL_29;
        }
        v25 = 0;
      }
      else
      {
        v83 = *((_QWORD *)v12 + 2);
        LODWORD(v84) = v12[6];
        v25 = v21 ^ v20;
        v24 = *(_DWORD *)v5;
        if (v20 == *(_DWORD *)v5)
        {
          v27 = *(_OWORD *)(v5 + 8);
          v12[6] = *(_DWORD *)(v5 + 24);
          *(_OWORD *)v23 = v27;
          v26 = v25 >> 31;
          if (*(_DWORD *)v5 == v25)
            goto LABEL_26;
          goto LABEL_29;
        }
      }
      v28 = v24 ^ (v24 >> 31);
      v29 = (__int128 *)(v5 + 8);
      if (v28)
      {
        v30 = *v29;
        v12[6] = *(_DWORD *)(v5 + 24);
        *(_OWORD *)v23 = v30;
        *v12 = v28;
        v26 = v25 >> 31;
        if (*(_DWORD *)v5 == v25)
          goto LABEL_26;
      }
      else
      {
        *((_QWORD *)v12 + 1) = *(_QWORD *)v29;
        *v12 = 0;
        v26 = v25 >> 31;
        if (*(_DWORD *)v5 == v25)
        {
LABEL_26:
          *(_QWORD *)(v5 + 8) = v22;
          if (v26 != v25)
          {
            *(_QWORD *)(v5 + 16) = v83;
            *(_DWORD *)(v5 + 24) = v84;
          }
          goto LABEL_32;
        }
      }
LABEL_29:
      *(_QWORD *)(v5 + 8) = v22;
      if (v26 != v25)
      {
        *(_QWORD *)(v5 + 16) = v83;
        *(_DWORD *)(v5 + 24) = v84;
        *(_DWORD *)v5 = v26 ^ v25;
      }
      else
      {
        *(_DWORD *)v5 = 0;
      }
LABEL_32:
      v31 = v12[8];
      v12[8] = *(_DWORD *)(v5 + 32);
      *(_DWORD *)(v5 + 32) = v31;
      for (i = v12 + 18; ; i += 10)
      {
        v33 = *(i - 8);
        v34 = v33 >> 31;
        v35 = v33;
        if (v33 >> 31 != v33)
        {
          LODWORD(v75) = *((unsigned __int8 *)i - 15);
          HIDWORD(v75) = *((unsigned __int8 *)i - 16);
          LODWORD(v74) = *((unsigned __int8 *)i - 13);
          HIDWORD(v74) = *((unsigned __int8 *)i - 14);
          LODWORD(v73) = *((unsigned __int8 *)i - 11);
          HIDWORD(v73) = *((unsigned __int8 *)i - 12);
          LODWORD(v72) = *((unsigned __int8 *)i - 9);
          HIDWORD(v72) = *((unsigned __int8 *)i - 10);
          LODWORD(v71) = *((unsigned __int8 *)i - 7);
          HIDWORD(v71) = *((unsigned __int8 *)i - 8);
          v70 = *((unsigned __int8 *)i - 6);
          v35 = v33 >> 31;
          v69 = *((_BYTE *)i - 5);
        }
        v36 = *((_QWORD *)i - 3);
        v37 = v35 ^ v33;
        v38 = v79 >> 31;
        v39 = (v35 ^ v33) >> 31;
        if (v79 >> 31 == v79)
          break;
        if (v39 != v37
          && (v80 < *((_QWORD *)i - 3)
           || v80 <= *((_QWORD *)i - 3)
           && (BYTE1(v80) < BYTE1(v36)
            || BYTE1(v80) <= BYTE1(v36)
            && (BYTE2(v80) < BYTE2(v36)
             || BYTE2(v80) <= BYTE2(v36)
             && (BYTE3(v80) < BYTE3(v36)
              || BYTE3(v80) <= BYTE3(v36)
              && (BYTE4(v80) < BYTE4(v36)
               || BYTE4(v80) <= BYTE4(v36)
               && (BYTE5(v80) < BYTE5(v36)
                || BYTE5(v80) <= BYTE5(v36)
                && (BYTE6(v80) < BYTE6(v36)
                 || BYTE6(v80) <= BYTE6(v36)
                 && (BYTE7(v80) < HIBYTE(v36)
                  || BYTE7(v80) <= HIBYTE(v36)
                  && (BYTE8(v80) < HIDWORD(v75)
                   || HIDWORD(v75) >= BYTE8(v80)
                   && (BYTE9(v80) < v75
                    || v75 >= BYTE9(v80)
                    && (BYTE10(v80) < HIDWORD(v74)
                     || HIDWORD(v74) >= BYTE10(v80)
                     && (BYTE11(v80) < v74
                      || v74 >= BYTE11(v80)
                      && (BYTE12(v80) < HIDWORD(v73)
                       || HIDWORD(v73) >= BYTE12(v80)
                       && (BYTE13(v80) < v73
                        || v73 >= BYTE13(v80)
                        && (BYTE14(v80) < HIDWORD(v72)
                         || HIDWORD(v72) >= BYTE14(v80)
                         && (HIBYTE(v80) < v72
                          || v72 >= HIBYTE(v80)
                          && (v81 < HIDWORD(v71)
                           || HIDWORD(v71) >= v81
                           && (BYTE1(v81) < v71
                            || v71 >= BYTE1(v81)
                            && (BYTE2(v81) < v70 || v70 >= BYTE2(v81) && HIBYTE(v81) < v69))))))))))))))))))))
        {
          goto LABEL_91;
        }
        v84 = v80;
        v85 = v81;
        v41 = v38 ^ v79;
        LODWORD(v83) = v38 ^ v79;
        v42 = (v38 ^ v79) >> 31;
        if (v34 == v33)
        {
LABEL_88:
          if (v42 != v41 || v36 < (unint64_t)v84)
            continue;
          goto LABEL_33;
        }
LABEL_44:
        if (v42 != v41 && sub_1001D7688((unsigned __int8 *)i - 24, (unsigned __int8 *)&v84))
          continue;
LABEL_33:
        if (v82 < *i)
          goto LABEL_91;
      }
      if (v39 == v37 && (unint64_t)v80 >= v36)
      {
        *(_QWORD *)&v84 = v80;
        v41 = 0;
        LODWORD(v83) = 0;
        v42 = 0;
        if (v34 == v33)
          goto LABEL_88;
        goto LABEL_44;
      }
LABEL_91:
      v12 = i - 8;
      while (1)
      {
        while (1)
        {
          v5 -= 40;
          v43 = (unsigned __int8 *)(v5 + 8);
          v44 = *(_DWORD *)v5;
          v45 = *(_DWORD *)v5;
          if (*(int *)v5 >> 31 != *(_DWORD *)v5)
          {
            LODWORD(v78) = *(unsigned __int8 *)(v5 + 17);
            HIDWORD(v78) = *(unsigned __int8 *)(v5 + 16);
            LODWORD(v77) = *(unsigned __int8 *)(v5 + 19);
            HIDWORD(v77) = *(unsigned __int8 *)(v5 + 18);
            LODWORD(v76) = *(unsigned __int8 *)(v5 + 21);
            HIDWORD(v76) = *(unsigned __int8 *)(v5 + 20);
            v15 = *(unsigned __int8 *)(v5 + 22);
            v16 = *(unsigned __int8 *)(v5 + 23);
            v17 = *(unsigned __int8 *)(v5 + 24);
            v18 = *(unsigned __int8 *)(v5 + 25);
            v19 = *(unsigned __int8 *)(v5 + 26);
            v45 = v44 >> 31;
            v3 = *(_BYTE *)(v5 + 27);
          }
          v46 = *(_QWORD *)v43;
          v47 = v45 ^ v44;
          v48 = v79 >> 31;
          v49 = v47 >> 31;
          if (v79 >> 31 != v79)
            break;
          if (v49 == v47 && (unint64_t)v80 >= v46)
          {
            *(_QWORD *)&v84 = v80;
            v51 = 0;
            LODWORD(v83) = 0;
            v52 = 0;
            if (*(_DWORD *)v5 == *(int *)v5 >> 31)
              goto LABEL_109;
LABEL_102:
            if (v52 != v51 && sub_1001D7688(v43, (unsigned __int8 *)&v84))
              goto LABEL_15;
LABEL_92:
            if (v82 >= *(_DWORD *)(v5 + 32))
              goto LABEL_15;
          }
        }
        if (v49 == v47)
          break;
        if (v80 >= *(_QWORD *)v43)
        {
          if (v80 > *(_QWORD *)v43)
            break;
          if (BYTE1(v80) >= BYTE1(v46))
          {
            if (BYTE1(v80) > BYTE1(v46))
              break;
            if (BYTE2(v80) >= BYTE2(v46))
            {
              if (BYTE2(v80) > BYTE2(v46))
                break;
              if (BYTE3(v80) >= BYTE3(v46))
              {
                if (BYTE3(v80) > BYTE3(v46))
                  break;
                if (BYTE4(v80) >= BYTE4(v46))
                {
                  if (BYTE4(v80) > BYTE4(v46))
                    break;
                  if (BYTE5(v80) >= BYTE5(v46))
                  {
                    if (BYTE5(v80) > BYTE5(v46))
                      break;
                    if (BYTE6(v80) >= BYTE6(v46))
                    {
                      if (BYTE6(v80) > BYTE6(v46))
                        break;
                      v53 = HIBYTE(v46);
                      if (BYTE7(v80) >= v53
                        && (BYTE7(v80) > v53
                         || BYTE8(v80) >= HIDWORD(v78)
                         && (HIDWORD(v78) < BYTE8(v80)
                          || BYTE9(v80) >= v78
                          && (v78 < BYTE9(v80)
                           || BYTE10(v80) >= HIDWORD(v77)
                           && (HIDWORD(v77) < BYTE10(v80)
                            || BYTE11(v80) >= v77
                            && (v77 < BYTE11(v80)
                             || BYTE12(v80) >= HIDWORD(v76)
                             && (HIDWORD(v76) < BYTE12(v80)
                              || BYTE13(v80) >= v76
                              && (v76 < BYTE13(v80)
                               || BYTE14(v80) >= v15
                               && (v15 < BYTE14(v80)
                                || HIBYTE(v80) >= v16
                                && (v16 < HIBYTE(v80)
                                 || v81 >= v17
                                 && (v17 < v81
                                  || BYTE1(v81) >= v18
                                  && (v18 < BYTE1(v81)
                                   || BYTE2(v81) >= v19 && (v19 < BYTE2(v81) || HIBYTE(v81) >= v3)))))))))))))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v84 = v80;
      v85 = v81;
      v51 = v48 ^ v79;
      LODWORD(v83) = v48 ^ v79;
      v52 = (v48 ^ v79) >> 31;
      if (*(_DWORD *)v5 != *(int *)v5 >> 31)
        goto LABEL_102;
LABEL_109:
      if (v52 == v51 && *(_QWORD *)v43 >= (unint64_t)v84)
        goto LABEL_92;
LABEL_15:
      ;
    }
    while ((unint64_t)v12 < v5);
  }
  v54 = v12 - 10;
  v55 = *(v12 - 10);
  if (v12 - 10 != (int *)a1)
  {
    if (*(_DWORD *)a1 == v55)
    {
      v56 = v12 - 8;
      if (v55 == v55 >> 31)
      {
        *(_QWORD *)v67 = *(_QWORD *)v56;
      }
      else
      {
        v60 = *(_OWORD *)v56;
        *((_DWORD *)v67 + 4) = *(v12 - 4);
        *v67 = v60;
      }
    }
    else
    {
      v57 = v55 ^ (v55 >> 31);
      v58 = v12 - 8;
      if (v57)
      {
        v59 = *(_OWORD *)v58;
        *((_DWORD *)v67 + 4) = *(v12 - 4);
        *v67 = v59;
        *(_DWORD *)a1 = v57;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v58;
        *(_DWORD *)a1 = 0;
      }
    }
    *(_DWORD *)(a1 + 32) = *(v12 - 2);
    v55 = *(v12 - 10);
  }
  if (v55 == v79)
  {
    v61 = v12 - 8;
    if (v55 == v55 >> 31)
    {
      *(_QWORD *)v61 = v80;
    }
    else
    {
      v65 = v80;
      *(v12 - 4) = v81;
      *(_OWORD *)v61 = v65;
    }
  }
  else
  {
    v62 = v79 ^ (v79 >> 31);
    v63 = v12 - 8;
    if (v62)
    {
      v64 = v80;
      *(v12 - 4) = v81;
      *(_OWORD *)v63 = v64;
      *v54 = v62;
    }
    else
    {
      *(_QWORD *)v63 = v80;
      *v54 = 0;
    }
  }
  *(v12 - 2) = v82;
  return v12;
}

int *sub_1002474E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  int *v22;
  int v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _DWORD *i;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int *result;
  int v100;
  __int128 *v101;
  int v102;
  int *v103;
  int v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  int v109;
  int *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  int *v114;
  int v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  unsigned __int8 v128;
  unsigned __int8 v129;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  __int128 v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;

  v9 = (_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)a1;
  v10 = *(int *)a1 >> 31;
  v112 = a1 + 8;
  if (v8 >> 31 == v8)
  {
    *(_QWORD *)&v154 = *v9;
    v10 = v8;
  }
  else
  {
    v154 = *(_OWORD *)v9;
    v155 = *(_DWORD *)(a1 + 24);
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 32);
  v153 = v10 ^ v8;
  v156 = v12;
  do
  {
    v13 = sub_10024581C(a3, a1 + v11 + 40, &v153);
    v11 += 40;
  }
  while (v13);
  v22 = (int *)(a1 + v11);
  if (v11 == 40)
  {
    do
    {
      if ((unint64_t)v22 >= a2)
        break;
      a2 -= 40;
    }
    while (!sub_10024581C(a3, a2, &v153));
  }
  else
  {
    do
      a2 -= 40;
    while (!sub_10024581C(a3, a2, &v153));
  }
  if ((unint64_t)v22 >= a2)
  {
    v25 = (int *)(a1 + v11);
    result = v22 - 10;
    v100 = *(v22 - 10);
    if (v22 - 10 == (int *)a1)
      goto LABEL_249;
    goto LABEL_244;
  }
  v23 = *v22;
  v24 = a2;
  v25 = (int *)(a1 + v11);
  while (2)
  {
    v27 = v25 + 2;
    v26 = *((_QWORD *)v25 + 1);
    v28 = v152;
    if (v23 >> 31 == v23)
    {
      v29 = *(_DWORD *)v24;
      if (v23 == *(_DWORD *)v24)
      {
        v30 = 0;
        *v27 = *(_QWORD *)(v24 + 8);
        v31 = 0;
        v115 = v4;
        if (*(_DWORD *)v24)
          goto LABEL_20;
        goto LABEL_25;
      }
      v30 = 0;
    }
    else
    {
      v157 = *((_QWORD *)v25 + 2);
      v158 = v25[6];
      v30 = (v23 >> 31) ^ v23;
      v29 = *(_DWORD *)v24;
      if (v23 == *(_DWORD *)v24)
      {
        v32 = *(_OWORD *)(v24 + 8);
        v25[6] = *(_DWORD *)(v24 + 24);
        *(_OWORD *)v27 = v32;
        v31 = v30 >> 31;
        v115 = v4;
        if (*(_DWORD *)v24 != v30)
          goto LABEL_20;
        goto LABEL_25;
      }
    }
    v33 = v29 ^ (v29 >> 31);
    v34 = (__int128 *)(v24 + 8);
    if (v33)
    {
      v35 = *v34;
      v25[6] = *(_DWORD *)(v24 + 24);
      *(_OWORD *)v27 = v35;
      *v25 = v33;
      v31 = v30 >> 31;
      v115 = v4;
      if (*(_DWORD *)v24 != v30)
        goto LABEL_20;
    }
    else
    {
      *((_QWORD *)v25 + 1) = *(_QWORD *)v34;
      *v25 = 0;
      v31 = v30 >> 31;
      v115 = v4;
      if (*(_DWORD *)v24 != v30)
      {
LABEL_20:
        *(_QWORD *)(v24 + 8) = v26;
        if (v31 != v30)
        {
          *(_QWORD *)(v24 + 16) = v157;
          *(_DWORD *)(v24 + 24) = v158;
          *(_DWORD *)v24 = v31 ^ v30;
        }
        else
        {
          *(_DWORD *)v24 = 0;
        }
        goto LABEL_28;
      }
    }
LABEL_25:
    *(_QWORD *)(v24 + 8) = v26;
    if (v31 != v30)
    {
      *(_QWORD *)(v24 + 16) = v157;
      *(_DWORD *)(v24 + 24) = v158;
    }
LABEL_28:
    v36 = v25[8];
    v25[8] = *(_DWORD *)(v24 + 32);
    *(_DWORD *)(v24 + 32) = v36;
    v37 = v153 >> 31;
    v38 = BYTE13(v154);
    v113 = BYTE7(v154);
    v39 = (v153 >> 31) ^ v153;
    v151 = v39 >> 31;
    for (i = v25 + 18; ; i += 10)
    {
      if (v37 != v153)
      {
        v16 = HIBYTE(v155);
        LOBYTE(v11) = BYTE2(v155);
        v15 = BYTE1(v155);
        v14 = v155;
        v21 = HIBYTE(v154);
        v20 = BYTE14(v154);
        v19 = v38;
        v18 = BYTE12(v154);
        v17 = BYTE11(v154);
        v28 = BYTE10(v154);
        LOBYTE(v22) = BYTE9(v154);
        v3 = BYTE8(v154);
      }
      v23 = *(i - 8);
      v152 = v28;
      if (v23 >> 31 == v23)
        break;
      if (v151 == v39)
        goto LABEL_41;
      v45 = *((unsigned __int8 *)i - 24);
      if (v45 < v154)
        goto LABEL_29;
      v38 = BYTE13(v154);
      if (v45 > v154)
        goto LABEL_41;
      v46 = *((unsigned __int8 *)i - 23);
      if (v46 < BYTE1(v154))
      {
LABEL_29:
        v38 = BYTE13(v154);
        goto LABEL_30;
      }
      v38 = BYTE13(v154);
      if (v46 > BYTE1(v154))
        goto LABEL_41;
      v47 = *((unsigned __int8 *)i - 22);
      if (v47 < BYTE2(v154))
        goto LABEL_30;
      if (v47 > BYTE2(v154))
        goto LABEL_41;
      v48 = *((unsigned __int8 *)i - 21);
      if (v48 < BYTE3(v154))
        goto LABEL_30;
      if (v48 > BYTE3(v154))
        goto LABEL_41;
      v49 = *((unsigned __int8 *)i - 20);
      if (v49 < BYTE4(v154))
        goto LABEL_30;
      if (v49 > BYTE4(v154))
        goto LABEL_41;
      v50 = *((unsigned __int8 *)i - 19);
      if (v50 < BYTE5(v154))
        goto LABEL_30;
      if (v50 > BYTE5(v154))
        goto LABEL_41;
      v51 = *((unsigned __int8 *)i - 18);
      if (v51 < BYTE6(v154))
        goto LABEL_30;
      if (v51 > BYTE6(v154))
        goto LABEL_41;
      v52 = *((unsigned __int8 *)i - 17);
      if (v52 < v113)
        goto LABEL_30;
      if (v52 > v113)
        goto LABEL_41;
      v53 = *((unsigned __int8 *)i - 16);
      if (v53 < v3)
        goto LABEL_30;
      if (v53 > v3)
        goto LABEL_41;
      v54 = *((unsigned __int8 *)i - 15);
      if (v54 < v22)
        goto LABEL_30;
      if (v54 > v22)
        goto LABEL_41;
      v55 = *((unsigned __int8 *)i - 14);
      if (v55 < v28)
        goto LABEL_30;
      if (v55 > v28)
        goto LABEL_41;
      v56 = *((unsigned __int8 *)i - 13);
      if (v56 < v17)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v56 > v17)
        goto LABEL_41;
      v57 = *((unsigned __int8 *)i - 12);
      if (v57 < v18)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v57 > v18)
        goto LABEL_41;
      v58 = *((unsigned __int8 *)i - 11);
      if (v58 < v19)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v58 > v19)
        goto LABEL_41;
      v59 = *((unsigned __int8 *)i - 10);
      if (v59 < v20)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v59 > v20)
        goto LABEL_41;
      v60 = *((unsigned __int8 *)i - 9);
      if (v60 < v21)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v60 > v21)
        goto LABEL_41;
      v61 = *((unsigned __int8 *)i - 8);
      if (v61 < v14)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v61 > v14)
        goto LABEL_41;
      v62 = *((unsigned __int8 *)i - 7);
      if (v62 < v15)
        goto LABEL_119;
      v38 = BYTE13(v154);
      if (v62 > v15)
        goto LABEL_41;
      v63 = *((unsigned __int8 *)i - 6);
      if (v63 < v11)
      {
LABEL_119:
        v38 = BYTE13(v154);
        goto LABEL_30;
      }
      v38 = BYTE13(v154);
      if (v63 > v11 || *((unsigned __int8 *)i - 5) >= v16)
      {
LABEL_41:
        v41 = *((_QWORD *)i - 3);
        v138 = *((_BYTE *)i - 16);
        v137 = *((_BYTE *)i - 15);
        v136 = *((_BYTE *)i - 14);
        v135 = *((_BYTE *)i - 13);
        v134 = *((_BYTE *)i - 12);
        v133 = *((_BYTE *)i - 11);
        v132 = *((_BYTE *)i - 10);
        v131 = *((_BYTE *)i - 9);
        v130 = *((_BYTE *)i - 8);
        v129 = *((_BYTE *)i - 7);
        v128 = *((_BYTE *)i - 6);
        v127 = *((_BYTE *)i - 5);
        v42 = v3;
        v43 = (v23 >> 31) ^ v23;
        v44 = v43 >> 31;
        if (v37 != v153)
          goto LABEL_42;
LABEL_37:
        if (v44 != v43 || (unint64_t)v154 < v41)
          goto LABEL_125;
LABEL_82:
        if (*i >= v156)
          goto LABEL_125;
        v3 = v42;
      }
LABEL_30:
      v28 = v152;
    }
    if (v151 != v39)
      goto LABEL_30;
    v41 = *((_QWORD *)i - 3);
    if (v41 < (unint64_t)v154)
      goto LABEL_30;
    v42 = v3;
    v43 = 0;
    v44 = 0;
    if (v37 == v153)
      goto LABEL_37;
LABEL_42:
    if (v44 == v43)
      goto LABEL_82;
    if (v41 <= v154)
    {
      if (v41 < v154)
        goto LABEL_82;
      v38 = BYTE13(v154);
      if (BYTE1(v41) <= BYTE1(v154)
        && (BYTE1(v41) < BYTE1(v154)
         || BYTE2(v41) <= BYTE2(v154)
         && (BYTE2(v41) < BYTE2(v154)
          || BYTE3(v41) <= BYTE3(v154)
          && (BYTE3(v41) < BYTE3(v154)
           || BYTE4(v41) <= BYTE4(v154)
           && (BYTE4(v41) < BYTE4(v154)
            || BYTE5(v41) <= BYTE5(v154)
            && (BYTE5(v41) < BYTE5(v154)
             || BYTE6(v41) <= BYTE6(v154)
             && (BYTE6(v41) < BYTE6(v154)
              || HIBYTE(v41) <= v113
              && (HIBYTE(v41) < v113
               || BYTE8(v154) >= v138
               && (BYTE8(v154) > v138
                || BYTE9(v154) >= v137
                && (BYTE9(v154) > v137
                 || BYTE10(v154) >= v136
                 && (BYTE10(v154) > v136
                  || BYTE11(v154) >= v135
                  && (BYTE11(v154) > v135
                   || BYTE12(v154) >= v134
                   && (BYTE12(v154) > v134
                    || BYTE13(v154) >= v133
                    && (BYTE13(v154) > v133
                     || BYTE14(v154) >= v132
                     && (BYTE14(v154) > v132
                      || HIBYTE(v154) >= v131
                      && (HIBYTE(v154) > v131
                       || v155 >= v130
                       && (v155 > v130
                        || BYTE1(v155) >= v129
                        && (BYTE1(v155) > v129
                         || BYTE2(v155) >= v128
                         && (BYTE2(v155) > v128 || HIBYTE(v155) >= v127)))))))))))))))))))
      {
        goto LABEL_82;
      }
    }
LABEL_125:
    v114 = i - 8;
    v24 -= 40;
    v4 = v115;
    v3 = v42;
    while (1)
    {
      v64 = v139;
      if (v37 != v153)
        v64 = HIBYTE(v155);
      v139 = v64;
      v65 = v140;
      if (v37 != v153)
        v65 = BYTE2(v155);
      v140 = v65;
      v66 = v141;
      if (v37 != v153)
        v66 = BYTE1(v155);
      v141 = v66;
      v67 = v142;
      if (v37 != v153)
        v67 = v155;
      v142 = v67;
      v68 = v143;
      if (v37 != v153)
        v68 = HIBYTE(v154);
      v143 = v68;
      v69 = v144;
      if (v37 != v153)
        v69 = BYTE14(v154);
      v144 = v69;
      v70 = v145;
      if (v37 != v153)
        v70 = v38;
      v145 = v70;
      v71 = v146;
      if (v37 != v153)
        v71 = BYTE12(v154);
      v146 = v71;
      v72 = v147;
      if (v37 != v153)
        v72 = BYTE11(v154);
      v147 = v72;
      v73 = v148;
      if (v37 != v153)
        v73 = BYTE10(v154);
      v148 = v73;
      v74 = v149;
      v75 = v150;
      if (v37 != v153)
        v74 = BYTE9(v154);
      v149 = v74;
      if (v37 != v153)
        v75 = BYTE8(v154);
      v76 = *(int *)v24 >> 31;
      v150 = v75;
      if (v76 != *(_DWORD *)v24)
        break;
      if (v151 != v39)
        goto LABEL_13;
      v77 = *(_QWORD *)(v24 + 8);
      if (v77 < (unint64_t)v154)
        goto LABEL_13;
      v78 = 0;
      v79 = 0;
      if (v37 == v153)
      {
LABEL_238:
        v3 = v42;
        if (v79 != v78 || (unint64_t)v154 < v77)
          goto LABEL_127;
        goto LABEL_126;
      }
LABEL_156:
      v3 = v42;
      if (v79 != v78)
      {
        v38 = BYTE13(v154);
        if (v77 > v154)
          goto LABEL_127;
        if (v77 >= v154)
        {
          v38 = BYTE13(v154);
          if (BYTE1(v77) > BYTE1(v154)
            || BYTE1(v77) >= BYTE1(v154)
            && (BYTE2(v77) > BYTE2(v154)
             || BYTE2(v77) >= BYTE2(v154)
             && (BYTE3(v77) > BYTE3(v154)
              || BYTE3(v77) >= BYTE3(v154)
              && (BYTE4(v77) > BYTE4(v154)
               || BYTE4(v77) >= BYTE4(v154)
               && (BYTE5(v77) > BYTE5(v154)
                || BYTE5(v77) >= BYTE5(v154)
                && (BYTE6(v77) > BYTE6(v154)
                 || BYTE6(v77) >= BYTE6(v154)
                 && (HIBYTE(v77) > v113
                  || HIBYTE(v77) >= v113
                  && (BYTE8(v154) < v4
                   || BYTE8(v154) <= v4
                   && (BYTE9(v154) < v126
                    || BYTE9(v154) <= v126
                    && (BYTE10(v154) < v125
                     || BYTE10(v154) <= v125
                     && (BYTE11(v154) < v124
                      || BYTE11(v154) <= v124
                      && (BYTE12(v154) < v123
                       || BYTE12(v154) <= v123
                       && (BYTE13(v154) < v122
                        || BYTE13(v154) <= v122
                        && (BYTE14(v154) < v121
                         || BYTE14(v154) <= v121
                         && (HIBYTE(v154) < v120
                          || HIBYTE(v154) <= v120
                          && (v155 < v119
                           || v155 <= v119
                           && (BYTE1(v155) < v118
                            || BYTE1(v155) <= v118
                            && (BYTE2(v155) < v117
                             || BYTE2(v155) <= v117 && HIBYTE(v155) < v116))))))))))))))))))
          {
            goto LABEL_127;
          }
        }
      }
LABEL_126:
      if (*(_DWORD *)(v24 + 32) < v156)
        goto LABEL_13;
LABEL_127:
      v24 -= 40;
    }
    if (v151 == v39)
      goto LABEL_237;
    v80 = *(unsigned __int8 *)(v24 + 8);
    if (v80 >= v154)
    {
      v38 = BYTE13(v154);
      if (v80 > v154)
        goto LABEL_237;
      v81 = *(unsigned __int8 *)(v24 + 9);
      if (v81 >= BYTE1(v154))
      {
        v38 = BYTE13(v154);
        if (v81 > BYTE1(v154))
          goto LABEL_237;
        v82 = *(unsigned __int8 *)(v24 + 10);
        if (v82 >= BYTE2(v154))
        {
          if (v82 > BYTE2(v154))
            goto LABEL_237;
          v83 = *(unsigned __int8 *)(v24 + 11);
          if (v83 >= BYTE3(v154))
          {
            if (v83 > BYTE3(v154))
              goto LABEL_237;
            v84 = *(unsigned __int8 *)(v24 + 12);
            if (v84 >= BYTE4(v154))
            {
              if (v84 > BYTE4(v154))
                goto LABEL_237;
              v85 = *(unsigned __int8 *)(v24 + 13);
              if (v85 >= BYTE5(v154))
              {
                if (v85 > BYTE5(v154))
                  goto LABEL_237;
                v86 = *(unsigned __int8 *)(v24 + 14);
                if (v86 >= BYTE6(v154))
                {
                  if (v86 > BYTE6(v154))
                    goto LABEL_237;
                  v87 = *(unsigned __int8 *)(v24 + 15);
                  if (v87 >= v113)
                  {
                    if (v87 > v113)
                      goto LABEL_237;
                    v88 = *(unsigned __int8 *)(v24 + 16);
                    if (v88 >= v150)
                    {
                      v38 = BYTE13(v154);
                      if (v88 > v150)
                        goto LABEL_237;
                      v89 = *(unsigned __int8 *)(v24 + 17);
                      if (v89 >= v149)
                      {
                        v38 = BYTE13(v154);
                        if (v89 > v149)
                          goto LABEL_237;
                        v90 = *(unsigned __int8 *)(v24 + 18);
                        if (v90 >= v148)
                        {
                          v38 = BYTE13(v154);
                          if (v90 > v148)
                            goto LABEL_237;
                          v91 = *(unsigned __int8 *)(v24 + 19);
                          if (v91 >= v147)
                          {
                            v38 = BYTE13(v154);
                            if (v91 > v147)
                              goto LABEL_237;
                            v92 = *(unsigned __int8 *)(v24 + 20);
                            if (v92 >= v146)
                            {
                              v38 = BYTE13(v154);
                              if (v92 > v146)
                                goto LABEL_237;
                              v93 = *(unsigned __int8 *)(v24 + 21);
                              if (v93 >= v145)
                              {
                                v38 = BYTE13(v154);
                                if (v93 > v145)
                                  goto LABEL_237;
                                v94 = *(unsigned __int8 *)(v24 + 22);
                                if (v94 >= v144)
                                {
                                  v38 = BYTE13(v154);
                                  if (v94 > v144)
                                    goto LABEL_237;
                                  v95 = *(unsigned __int8 *)(v24 + 23);
                                  if (v95 >= v143)
                                  {
                                    v38 = BYTE13(v154);
                                    if (v95 > v143
                                      || (v96 = *(unsigned __int8 *)(v24 + 24), v96 >= v142)
                                      && ((v38 = BYTE13(v154), v96 > v142)
                                       || (v97 = *(unsigned __int8 *)(v24 + 25), v97 >= v141)
                                       && ((v38 = BYTE13(v154), v97 > v141)
                                        || (v98 = *(unsigned __int8 *)(v24 + 26), v98 >= v140)
                                        && ((v38 = BYTE13(v154), v98 > v140)
                                         || (v38 = BYTE13(v154),
                                             *(unsigned __int8 *)(v24 + 27) >= v139)))))
                                    {
LABEL_237:
                                      v77 = *(_QWORD *)(v24 + 8);
                                      v4 = *(unsigned __int8 *)(v24 + 16);
                                      v126 = *(_BYTE *)(v24 + 17);
                                      v125 = *(_BYTE *)(v24 + 18);
                                      v124 = *(_BYTE *)(v24 + 19);
                                      v123 = *(_BYTE *)(v24 + 20);
                                      v122 = *(_BYTE *)(v24 + 21);
                                      v121 = *(_BYTE *)(v24 + 22);
                                      v120 = *(_BYTE *)(v24 + 23);
                                      v119 = *(_BYTE *)(v24 + 24);
                                      v118 = *(_BYTE *)(v24 + 25);
                                      v117 = *(_BYTE *)(v24 + 26);
                                      v116 = *(_BYTE *)(v24 + 27);
                                      v78 = v76 ^ *(_DWORD *)v24;
                                      v79 = v78 >> 31;
                                      if (v37 == v153)
                                        goto LABEL_238;
                                      goto LABEL_156;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_13:
    v25 = v114;
    if ((unint64_t)v114 < v24)
      continue;
    break;
  }
  result = v114 - 10;
  v100 = *(v114 - 10);
  if (v114 - 10 == (int *)a1)
  {
LABEL_249:
    v102 = v153;
    if (v100 == v153)
      goto LABEL_250;
LABEL_259:
    v109 = v102 ^ (v102 >> 31);
    v110 = v25 - 8;
    if (v109)
    {
      v111 = v154;
      *(v25 - 4) = v155;
      *(_OWORD *)v110 = v111;
      *result = v109;
    }
    else
    {
      *(_QWORD *)v110 = v154;
      *result = 0;
    }
    goto LABEL_262;
  }
LABEL_244:
  if (*(_DWORD *)a1 != v100)
  {
    v104 = v100 ^ (v100 >> 31);
    v105 = (__int128 *)(v25 - 8);
    if (v104)
    {
      v106 = *v105;
      *(_DWORD *)(v112 + 16) = *(v25 - 4);
      *(_OWORD *)v112 = v106;
      *(_DWORD *)a1 = v104;
      *(_DWORD *)(a1 + 32) = *(v25 - 2);
      v100 = *(v25 - 10);
      v102 = v153;
      if (v100 == v153)
        goto LABEL_250;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v105;
      *(_DWORD *)a1 = 0;
      *(_DWORD *)(a1 + 32) = *(v25 - 2);
      v100 = *(v25 - 10);
      v102 = v153;
      if (v100 == v153)
        goto LABEL_250;
    }
    goto LABEL_259;
  }
  v101 = (__int128 *)(v25 - 8);
  if (v100 != v100 >> 31)
  {
    v108 = *v101;
    *(_DWORD *)(v112 + 16) = *(v25 - 4);
    *(_OWORD *)v112 = v108;
    *(_DWORD *)(a1 + 32) = *(v25 - 2);
    v100 = *(v25 - 10);
    v102 = v153;
    if (v100 == v153)
      goto LABEL_250;
    goto LABEL_259;
  }
  *(_QWORD *)v112 = *(_QWORD *)v101;
  *(_DWORD *)(a1 + 32) = *(v25 - 2);
  v100 = *(v25 - 10);
  v102 = v153;
  if (v100 != v153)
    goto LABEL_259;
LABEL_250:
  v103 = v25 - 8;
  if (v100 == v100 >> 31)
  {
    *(_QWORD *)v103 = v154;
  }
  else
  {
    v107 = v154;
    *(v25 - 4) = v155;
    *(_OWORD *)v103 = v107;
  }
LABEL_262:
  *(v25 - 2) = v156;
  return result;
}

BOOL sub_10024848C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  __int128 v40;
  int v41;
  __int128 *v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 10;
      if (!sub_10024581C(a3, (uint64_t)(a2 - 10), (_DWORD *)a1))
        return 1;
      v9 = *(_DWORD *)a1;
      v10 = *(int *)a1 >> 31;
      v12 = (_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 8);
      if (v10 == *(_DWORD *)a1)
      {
        v13 = *v8;
        if (v9 == *v8)
        {
          v14 = 0;
          *v12 = *((_QWORD *)a2 - 4);
          v15 = 0;
          if (*v8)
            goto LABEL_48;
          goto LABEL_45;
        }
        v14 = 0;
      }
      else
      {
        v45 = *(_QWORD *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        v14 = v10 ^ v9;
        v13 = *v8;
        if (v9 == *v8)
        {
          v40 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(a1 + 24) = *(a2 - 4);
          *(_OWORD *)v12 = v40;
          v15 = v14 >> 31;
          if (*v8 != v14)
          {
LABEL_48:
            *((_QWORD *)a2 - 4) = v11;
            if (v15 != v14)
            {
              *((_QWORD *)a2 - 3) = v45;
              *(a2 - 4) = v46;
              *(a2 - 10) = v15 ^ v14;
            }
            else
            {
              *v8 = 0;
            }
LABEL_51:
            v44 = *(_DWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = *(a2 - 2);
            *(a2 - 2) = v44;
            return 1;
          }
LABEL_45:
          *((_QWORD *)a2 - 4) = v11;
          if (v15 != v14)
          {
            *((_QWORD *)a2 - 3) = v45;
            *(a2 - 4) = v46;
          }
          goto LABEL_51;
        }
      }
      v41 = v13 ^ (v13 >> 31);
      v42 = (__int128 *)(a2 - 8);
      if (v41)
      {
        v43 = *v42;
        *(_DWORD *)(a1 + 24) = *(a2 - 4);
        *(_OWORD *)v12 = v43;
        *(_DWORD *)a1 = v41;
        v15 = v14 >> 31;
        if (*v8 != v14)
          goto LABEL_48;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v42;
        *(_DWORD *)a1 = 0;
        v15 = v14 >> 31;
        if (*v8 != v14)
          goto LABEL_48;
      }
      goto LABEL_45;
    case 3uLL:
      sub_100246464((int *)a1, a1 + 40, (uint64_t)(a2 - 10), a3);
      return 1;
    case 4uLL:
      sub_10024890C(a1, a1 + 40, a1 + 80, (uint64_t)(a2 - 10), a3);
      return 1;
    case 5uLL:
      sub_100248D48(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)(a2 - 10), a3);
      return 1;
    default:
      v16 = (_DWORD *)(a1 + 80);
      sub_100246464((int *)a1, a1 + 40, a1 + 80, a3);
      v17 = (_DWORD *)(a1 + 120);
      if ((_DWORD *)(a1 + 120) == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      while (2)
      {
        if (!sub_10024581C(a3, (uint64_t)v17, v16))
          goto LABEL_11;
        v21 = v17 + 2;
        v20 = *v17;
        v22 = (int)*v17 >> 31;
        if (v20 >> 31 == v20)
        {
          *(_QWORD *)&v46 = *v21;
          v22 = v20;
        }
        else
        {
          v46 = *(_OWORD *)v21;
          v47 = v17[6];
        }
        v23 = v22 ^ v20;
        v24 = v17[8];
        LODWORD(v45) = v23;
        v48 = v24;
        v25 = v18;
        while (2)
        {
          v26 = (_DWORD *)(a1 + v25);
          v27 = *(_DWORD *)(a1 + v25 + 120);
          v28 = *(_DWORD *)(a1 + v25 + 80);
          if (v27 == v28)
          {
            v29 = v26 + 22;
            v30 = v26 + 32;
            if (v27 == v27 >> 31)
            {
              *(_QWORD *)v30 = *(_QWORD *)v29;
              v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80)
                goto LABEL_31;
            }
            else
            {
              *(_OWORD *)v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80)
                goto LABEL_31;
            }
LABEL_27:
            v25 -= 40;
            if (!sub_10024581C(a3, (uint64_t)&v45, (_DWORD *)(v31 + 40)))
            {
              v35 = a1 + v25 + 120;
              v36 = *(_DWORD *)v35;
              v37 = v45;
              if (*(_DWORD *)v35 != (_DWORD)v45)
                goto LABEL_29;
LABEL_32:
              v39 = (_QWORD *)(v35 + 8);
              if (v36 == v36 >> 31)
              {
                *v39 = v46;
              }
              else
              {
                *(_OWORD *)v39 = v46;
                *(_DWORD *)(v35 + 24) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        v32 = v28 ^ (v28 >> 31);
        v33 = v26 + 22;
        v34 = v26 + 32;
        if (v32)
        {
          *v34 = *v33;
          v26[36] = v26[26];
          v26[30] = v32;
          v31 = a1 + v25;
          *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
          if (v25 == -80)
            goto LABEL_31;
          goto LABEL_27;
        }
        *(_QWORD *)v34 = *(_QWORD *)v33;
        v26[30] = 0;
        v31 = a1 + v25;
        *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
        if (v25 != -80)
          goto LABEL_27;
LABEL_31:
        v35 = a1;
        v36 = *(_DWORD *)a1;
        v37 = v45;
        if (*(_DWORD *)a1 == (_DWORD)v45)
          goto LABEL_32;
LABEL_29:
        v38 = v37 ^ (v37 >> 31);
        if (v38)
        {
          *(_OWORD *)(v35 + 8) = v46;
          *(_DWORD *)(v35 + 24) = v47;
          *(_DWORD *)v35 = v38;
        }
        else
        {
          *(_QWORD *)(v35 + 8) = v46;
          *(_DWORD *)v35 = 0;
        }
LABEL_10:
        *(_DWORD *)(v35 + 32) = v48;
        if (++v19 == 8)
          return v17 + 10 == a2;
LABEL_11:
        v16 = v17;
        v18 += 40;
        v17 += 10;
        if (v17 != a2)
          continue;
        return 1;
      }
  }
}

BOOL sub_10024890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;

  sub_100246464((int *)a1, a2, a3, a5);
  result = sub_10024581C(a5, a4, (_DWORD *)a3);
  if (result)
  {
    v11 = *(_DWORD *)a3;
    v12 = *(int *)a3 >> 31;
    v14 = (_QWORD *)(a3 + 8);
    v13 = *(_QWORD *)(a3 + 8);
    if (v12 == *(_DWORD *)a3)
    {
      v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        v16 = 0;
        *v14 = *(_QWORD *)(a4 + 8);
        v17 = 0;
        if (*(_DWORD *)a4)
          goto LABEL_15;
        goto LABEL_12;
      }
      v16 = 0;
    }
    else
    {
      v45 = *(_QWORD *)(a3 + 16);
      v46 = *(_DWORD *)(a3 + 24);
      v16 = v12 ^ v11;
      v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        v18 = *(_OWORD *)(a4 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
        *(_OWORD *)v14 = v18;
        v17 = v16 >> 31;
        if (*(_DWORD *)a4 != v16)
        {
LABEL_15:
          *(_QWORD *)(a4 + 8) = v13;
          if (v17 != v16)
          {
            *(_QWORD *)(a4 + 16) = v45;
            *(_DWORD *)(a4 + 24) = v46;
            *(_DWORD *)a4 = v17 ^ v16;
          }
          else
          {
            *(_DWORD *)a4 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(_QWORD *)(a4 + 8) = v13;
        if (v17 != v16)
        {
          *(_QWORD *)(a4 + 16) = v45;
          *(_DWORD *)(a4 + 24) = v46;
        }
LABEL_18:
        v22 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
        *(_DWORD *)(a4 + 32) = v22;
        result = sub_10024581C(a5, a3, (_DWORD *)a2);
        if (!result)
          return result;
        v23 = *(_DWORD *)a2;
        v24 = *(int *)a2 >> 31;
        v26 = (_QWORD *)(a2 + 8);
        v25 = *(_QWORD *)(a2 + 8);
        if (v24 == *(_DWORD *)a2)
        {
          v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            v28 = 0;
            *v26 = *v14;
            v29 = 0;
            if (*(_DWORD *)a3)
              goto LABEL_32;
            goto LABEL_29;
          }
          v28 = 0;
        }
        else
        {
          v45 = *(_QWORD *)(a2 + 16);
          v46 = *(_DWORD *)(a2 + 24);
          v28 = v24 ^ v23;
          v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            v30 = *(_OWORD *)v14;
            *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
            *(_OWORD *)v26 = v30;
            v29 = v28 >> 31;
            if (*(_DWORD *)a3 != v28)
            {
LABEL_32:
              *v14 = v25;
              if (v29 != v28)
              {
                *(_QWORD *)(a3 + 16) = v45;
                *(_DWORD *)(a3 + 24) = v46;
                *(_DWORD *)a3 = v29 ^ v28;
              }
              else
              {
                *(_DWORD *)a3 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *v14 = v25;
            if (v29 != v28)
            {
              *(_QWORD *)(a3 + 16) = v45;
              *(_DWORD *)(a3 + 24) = v46;
            }
LABEL_35:
            v33 = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
            *(_DWORD *)(a3 + 32) = v33;
            result = sub_10024581C(a5, a2, (_DWORD *)a1);
            if (!result)
              return result;
            v34 = *(_DWORD *)a1;
            v35 = *(int *)a1 >> 31;
            v37 = (_QWORD *)(a1 + 8);
            v36 = *(_QWORD *)(a1 + 8);
            if (v35 == *(_DWORD *)a1)
            {
              v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                v39 = 0;
                *v37 = *v26;
                v40 = 0;
                if (*(_DWORD *)a2)
                  goto LABEL_49;
                goto LABEL_46;
              }
              v39 = 0;
            }
            else
            {
              v45 = *(_QWORD *)(a1 + 16);
              v46 = *(_DWORD *)(a1 + 24);
              v39 = v35 ^ v34;
              v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                v41 = *(_OWORD *)v26;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                *(_OWORD *)v37 = v41;
                v40 = v39 >> 31;
                if (*(_DWORD *)a2 != v39)
                {
LABEL_49:
                  *v26 = v36;
                  if (v40 != v39)
                  {
                    *(_QWORD *)(a2 + 16) = v45;
                    *(_DWORD *)(a2 + 24) = v46;
                    *(_DWORD *)a2 = v40 ^ v39;
                  }
                  else
                  {
                    *(_DWORD *)a2 = 0;
                  }
LABEL_52:
                  v44 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                  *(_DWORD *)(a2 + 32) = v44;
                  return result;
                }
LABEL_46:
                *v26 = v36;
                if (v40 != v39)
                {
                  *(_QWORD *)(a2 + 16) = v45;
                  *(_DWORD *)(a2 + 24) = v46;
                }
                goto LABEL_52;
              }
            }
            v42 = v38 ^ (v38 >> 31);
            if (v42)
            {
              v43 = *(_OWORD *)v26;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_OWORD *)v37 = v43;
              *(_DWORD *)a1 = v42;
              v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39)
                goto LABEL_49;
            }
            else
            {
              *(_QWORD *)(a1 + 8) = *v26;
              *(_DWORD *)a1 = 0;
              v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39)
                goto LABEL_49;
            }
            goto LABEL_46;
          }
        }
        v31 = v27 ^ (v27 >> 31);
        if (v31)
        {
          v32 = *(_OWORD *)v14;
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)v26 = v32;
          *(_DWORD *)a2 = v31;
          v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28)
            goto LABEL_32;
        }
        else
        {
          *(_QWORD *)(a2 + 8) = *v14;
          *(_DWORD *)a2 = 0;
          v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28)
            goto LABEL_32;
        }
        goto LABEL_29;
      }
    }
    v19 = v15 ^ (v15 >> 31);
    v20 = (__int128 *)(a4 + 8);
    if (v19)
    {
      v21 = *v20;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)v14 = v21;
      *(_DWORD *)a3 = v19;
      v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = *(_QWORD *)v20;
      *(_DWORD *)a3 = 0;
      v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  return result;
}

BOOL sub_100248D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 *v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;

  sub_10024890C(a1, a2, a3, a4, a6);
  result = sub_10024581C(a6, a5, (_DWORD *)a4);
  if (!result)
    return result;
  v13 = *(_DWORD *)a4;
  v14 = *(int *)a4 >> 31;
  v16 = (_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(a4 + 8);
  if (v14 == *(_DWORD *)a4)
  {
    v17 = *(_DWORD *)a5;
    if (v13 == *(_DWORD *)a5)
    {
      v18 = 0;
      *v16 = *(_QWORD *)(a5 + 8);
      v19 = 0;
      if (*(_DWORD *)a5)
        goto LABEL_15;
      goto LABEL_12;
    }
    v18 = 0;
LABEL_10:
    v21 = v17 ^ (v17 >> 31);
    v22 = (__int128 *)(a5 + 8);
    if (v21)
    {
      v23 = *v22;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)v16 = v23;
      *(_DWORD *)a4 = v21;
      v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)v22;
      *(_DWORD *)a4 = 0;
      v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  v58 = *(_QWORD *)(a4 + 16);
  v59 = *(_DWORD *)(a4 + 24);
  v18 = v14 ^ v13;
  v17 = *(_DWORD *)a5;
  if (v13 != *(_DWORD *)a5)
    goto LABEL_10;
  v20 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)v16 = v20;
  v19 = v18 >> 31;
  if (*(_DWORD *)a5 != v18)
  {
LABEL_15:
    *(_QWORD *)(a5 + 8) = v15;
    if (v19 != v18)
    {
      *(_QWORD *)(a5 + 16) = v58;
      *(_DWORD *)(a5 + 24) = v59;
      *(_DWORD *)a5 = v19 ^ v18;
    }
    else
    {
      *(_DWORD *)a5 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(_QWORD *)(a5 + 8) = v15;
  if (v19 != v18)
  {
    *(_QWORD *)(a5 + 16) = v58;
    *(_DWORD *)(a5 + 24) = v59;
  }
LABEL_18:
  v24 = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v24;
  result = sub_10024581C(a6, a4, (_DWORD *)a3);
  if (!result)
    return result;
  v25 = *(_DWORD *)a3;
  v26 = *(int *)a3 >> 31;
  v28 = (_QWORD *)(a3 + 8);
  v27 = *(_QWORD *)(a3 + 8);
  if (v26 == *(_DWORD *)a3)
  {
    v29 = *(_DWORD *)a4;
    if (v25 == *(_DWORD *)a4)
    {
      v30 = 0;
      *v28 = *v16;
      v31 = 0;
      if (*(_DWORD *)a4)
        goto LABEL_32;
      goto LABEL_29;
    }
    v30 = 0;
LABEL_27:
    v33 = v29 ^ (v29 >> 31);
    if (v33)
    {
      v34 = *(_OWORD *)v16;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)v28 = v34;
      *(_DWORD *)a3 = v33;
      v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = *v16;
      *(_DWORD *)a3 = 0;
      v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30)
        goto LABEL_32;
    }
    goto LABEL_29;
  }
  v58 = *(_QWORD *)(a3 + 16);
  v59 = *(_DWORD *)(a3 + 24);
  v30 = v26 ^ v25;
  v29 = *(_DWORD *)a4;
  if (v25 != *(_DWORD *)a4)
    goto LABEL_27;
  v32 = *(_OWORD *)v16;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)v28 = v32;
  v31 = v30 >> 31;
  if (*(_DWORD *)a4 != v30)
  {
LABEL_32:
    *v16 = v27;
    if (v31 != v30)
    {
      *(_QWORD *)(a4 + 16) = v58;
      *(_DWORD *)(a4 + 24) = v59;
      *(_DWORD *)a4 = v31 ^ v30;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *v16 = v27;
  if (v31 != v30)
  {
    *(_QWORD *)(a4 + 16) = v58;
    *(_DWORD *)(a4 + 24) = v59;
  }
LABEL_35:
  v35 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = v35;
  result = sub_10024581C(a6, a3, (_DWORD *)a2);
  if (!result)
    return result;
  v36 = *(_DWORD *)a2;
  v37 = *(int *)a2 >> 31;
  v39 = (_QWORD *)(a2 + 8);
  v38 = *(_QWORD *)(a2 + 8);
  if (v37 == *(_DWORD *)a2)
  {
    v40 = *(_DWORD *)a3;
    if (v36 == *(_DWORD *)a3)
    {
      v41 = 0;
      *v39 = *v28;
      v42 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_49;
      goto LABEL_46;
    }
    v41 = 0;
LABEL_44:
    v44 = v40 ^ (v40 >> 31);
    if (v44)
    {
      v45 = *(_OWORD *)v28;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v39 = v45;
      *(_DWORD *)a2 = v44;
      v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41)
        goto LABEL_49;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *v28;
      *(_DWORD *)a2 = 0;
      v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41)
        goto LABEL_49;
    }
    goto LABEL_46;
  }
  v58 = *(_QWORD *)(a2 + 16);
  v59 = *(_DWORD *)(a2 + 24);
  v41 = v37 ^ v36;
  v40 = *(_DWORD *)a3;
  if (v36 != *(_DWORD *)a3)
    goto LABEL_44;
  v43 = *(_OWORD *)v28;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)v39 = v43;
  v42 = v41 >> 31;
  if (*(_DWORD *)a3 != v41)
  {
LABEL_49:
    *v28 = v38;
    if (v42 != v41)
    {
      *(_QWORD *)(a3 + 16) = v58;
      *(_DWORD *)(a3 + 24) = v59;
      *(_DWORD *)a3 = v42 ^ v41;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_52;
  }
LABEL_46:
  *v28 = v38;
  if (v42 != v41)
  {
    *(_QWORD *)(a3 + 16) = v58;
    *(_DWORD *)(a3 + 24) = v59;
  }
LABEL_52:
  v46 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = v46;
  result = sub_10024581C(a6, a2, (_DWORD *)a1);
  if (!result)
    return result;
  v47 = *(_DWORD *)a1;
  v48 = *(int *)a1 >> 31;
  v50 = (_QWORD *)(a1 + 8);
  v49 = *(_QWORD *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v52 = 0;
      *v50 = *v39;
      goto LABEL_62;
    }
    v52 = 0;
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 16);
    v59 = *(_DWORD *)(a1 + 24);
    v52 = v48 ^ v47;
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v53 = *(_OWORD *)v39;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v50 = v53;
      goto LABEL_62;
    }
  }
  v54 = v51 ^ (v51 >> 31);
  if (v54)
  {
    v55 = *(_OWORD *)v39;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v50 = v55;
    *(_DWORD *)a1 = v54;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *v39;
    *(_DWORD *)a1 = 0;
  }
LABEL_62:
  v56 = v52 >> 31;
  if (*(_DWORD *)a2 == v52)
  {
    *v39 = v49;
    if (v56 != v52)
    {
      *(_QWORD *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
    }
  }
  else
  {
    *v39 = v49;
    if (v56 != v52)
    {
      *(_QWORD *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
      *(_DWORD *)a2 = v56 ^ v52;
    }
    else
    {
      *(_DWORD *)a2 = 0;
    }
  }
  v57 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v57;
  return result;
}

BOOL sub_1002492A4(_BOOL8 result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  _BOOL8 v6;
  int64_t v7;
  int64_t v10;
  _DWORD *v11;
  int64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
      v11 = (_DWORD *)(result + 40 * v10);
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v12 < a3 && sub_10024581C(a2, result + 40 * v10, v11 + 10))
      {
        v11 += 10;
        v10 = v12;
      }
      result = sub_10024581C(a2, (uint64_t)v11, v5);
      if (!result)
      {
        v14 = v5 + 2;
        v13 = *v5;
        v15 = *v5 >> 31;
        if (v13 >> 31 == v13)
        {
          *(_QWORD *)&v31 = *v14;
          v15 = v13;
        }
        else
        {
          v31 = *(_OWORD *)v14;
          v32 = v5[6];
        }
        v16 = v15 ^ v13;
        v17 = v5[8];
        v30 = v16;
        v33 = v17;
        do
        {
          v18 = v11;
          if (*v5 == *v11)
          {
            v19 = v11 + 2;
            v20 = v5 + 2;
            if (*v5 == *v5 >> 31)
            {
              *v20 = *v19;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
            else
            {
              v24 = *(_OWORD *)v19;
              v5[6] = v11[6];
              *(_OWORD *)v20 = v24;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
          }
          else
          {
            v21 = *v11 ^ ((int)*v11 >> 31);
            v22 = (__int128 *)(v11 + 2);
            if (v21)
            {
              v23 = *v22;
              v5[6] = v11[6];
              *(_OWORD *)(v5 + 2) = v23;
              *v5 = v21;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
            else
            {
              *((_QWORD *)v5 + 1) = *(_QWORD *)v22;
              *v5 = 0;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
          }
          v25 = (2 * v10) | 1;
          v11 = (_DWORD *)(v6 + 40 * v25);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v25;
          }
          else if (sub_10024581C(a2, v6 + 40 * v25, v11 + 10))
          {
            v11 += 10;
          }
          else
          {
            v10 = v25;
          }
          result = sub_10024581C(a2, (uint64_t)v11, &v30);
          v5 = v18;
        }
        while (!result);
        if (*v18 == v30)
        {
          v26 = v18 + 2;
          if (*v18 == *v18 >> 31)
          {
            *v26 = v31;
          }
          else
          {
            v29 = v31;
            v18[6] = v32;
            *(_OWORD *)v26 = v29;
          }
        }
        else
        {
          v27 = v30 ^ (v30 >> 31);
          if (v27)
          {
            v28 = v31;
            v18[6] = v32;
            *(_OWORD *)(v18 + 2) = v28;
            *v18 = v27;
          }
          else
          {
            *((_QWORD *)v18 + 1) = v31;
            *v18 = 0;
          }
        }
        v18[8] = v33;
      }
    }
  }
  return result;
}

uint64_t sub_100249584(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  __int128 *v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  _BOOL8 v32;
  int v33;
  _BOOL8 v34;
  int v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  int v40;

  if (a4 >= 2)
  {
    v6 = *(_DWORD *)result;
    v7 = *(_DWORD *)result;
    if (*(int *)result >> 31 != *(_DWORD *)result)
    {
      v39 = *(_QWORD *)(result + 16);
      v40 = *(_DWORD *)(result + 24);
      v7 = v6 >> 31;
    }
    v35 = v7;
    v8 = 0;
    v36 = *(_QWORD *)(result + 8);
    v38 = *(_DWORD *)(result + 32);
    v9 = (unint64_t)(a4 - 2) >> 1;
    v34 = result;
    v10 = result;
    do
    {
      v12 = v10;
      v10 += 40 * v8 + 40;
      v13 = 2 * v8;
      v8 = (2 * v8) | 1;
      v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        result = sub_10024581C(a3, v10, (_DWORD *)(v10 + 40));
        if ((_DWORD)result)
        {
          v10 += 40;
          v8 = v14;
        }
      }
      if (*(_DWORD *)v12 == *(_DWORD *)v10)
      {
        v15 = (_QWORD *)(v10 + 8);
        v16 = (_QWORD *)(v12 + 8);
        if (*(_DWORD *)v12 == *(int *)v12 >> 31)
        {
          *v16 = *v15;
        }
        else
        {
          v11 = *(_OWORD *)v15;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)v16 = v11;
        }
      }
      else
      {
        v17 = *(_DWORD *)v10 ^ (*(int *)v10 >> 31);
        v18 = (__int128 *)(v10 + 8);
        if (v17)
        {
          v19 = *v18;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)(v12 + 8) = v19;
          *(_DWORD *)v12 = v17;
        }
        else
        {
          *(_QWORD *)(v12 + 8) = *(_QWORD *)v18;
          *(_DWORD *)v12 = 0;
        }
      }
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v10 + 32);
    }
    while (v8 <= v9);
    v20 = v35 ^ v6;
    v21 = *(_DWORD *)v10;
    if (v10 == a2 - 40)
    {
      v25 = v20 >> 31;
      if (v21 == v20)
      {
        *(_QWORD *)(v10 + 8) = v36;
        if (v25 != v20)
        {
          *(_QWORD *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
        }
      }
      else
      {
        v29 = v25 ^ v20;
        *(_QWORD *)(v10 + 8) = v36;
        if (v29)
        {
          *(_QWORD *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
          *(_DWORD *)v10 = v29;
        }
        else
        {
          *(_DWORD *)v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = v38;
    }
    else
    {
      v22 = *(_DWORD *)(a2 - 40);
      if (v21 == v22)
      {
        v23 = (_QWORD *)(a2 - 32);
        v24 = (_QWORD *)(v10 + 8);
        if (v21 == v21 >> 31)
        {
          *v24 = *v23;
        }
        else
        {
          v30 = *(_OWORD *)v23;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)v24 = v30;
        }
      }
      else
      {
        v26 = v22 ^ (v22 >> 31);
        v27 = (__int128 *)(a2 - 32);
        if (v26)
        {
          v28 = *v27;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)(v10 + 8) = v28;
          *(_DWORD *)v10 = v26;
        }
        else
        {
          *(_QWORD *)(v10 + 8) = *(_QWORD *)v27;
          *(_DWORD *)v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a2 - 8);
      v31 = v20 >> 31;
      if (*(_DWORD *)(a2 - 40) == v20)
      {
        v32 = v34;
        *(_QWORD *)(a2 - 32) = v36;
        if (v31 != v20)
        {
          *(_QWORD *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
        }
      }
      else
      {
        v33 = v31 ^ v20;
        v32 = v34;
        *(_QWORD *)(a2 - 32) = v36;
        if (v33)
        {
          *(_QWORD *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
          *(_DWORD *)(a2 - 40) = v33;
        }
        else
        {
          *(_DWORD *)(a2 - 40) = 0;
        }
      }
      *(_DWORD *)(a2 - 8) = v38;
      return sub_1002498DC(v32, v10 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - v32) >> 3));
    }
  }
  return result;
}

BOOL sub_1002498DC(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  unint64_t v7;
  _DWORD *v8;
  int *v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;

  if (a4 >= 2)
  {
    v6 = result;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (_DWORD *)(result + 40 * v7);
    v9 = (int *)(a2 - 40);
    result = sub_10024581C(a3, (uint64_t)v8, (_DWORD *)(a2 - 40));
    if (result)
    {
      v10 = *(_DWORD *)(a2 - 40);
      v11 = v10 >> 31;
      v12 = (_QWORD *)(a2 - 32);
      if (v10 >> 31 == v10)
      {
        *(_QWORD *)&v25 = *v12;
        v11 = v10;
      }
      else
      {
        v25 = *(_OWORD *)v12;
        v26 = *(_DWORD *)(a2 - 16);
      }
      v13 = v11 ^ v10;
      v14 = *(_DWORD *)(a2 - 8);
      v24 = v13;
      v27 = v14;
      do
      {
        v15 = v8;
        if (*v9 == *v8)
        {
          v16 = v8 + 2;
          v17 = v9 + 2;
          if (*v9 == *v9 >> 31)
          {
            *v17 = *v16;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
          else
          {
            v21 = *(_OWORD *)v16;
            v9[6] = v8[6];
            *(_OWORD *)v17 = v21;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
        }
        else
        {
          v18 = *v8 ^ ((int)*v8 >> 31);
          v19 = (__int128 *)(v8 + 2);
          if (v18)
          {
            v20 = *v19;
            v9[6] = v8[6];
            *(_OWORD *)(v9 + 2) = v20;
            *v9 = v18;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
          else
          {
            *((_QWORD *)v9 + 1) = *(_QWORD *)v19;
            *v9 = 0;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
        }
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 40 * v7);
        result = sub_10024581C(a3, (uint64_t)v8, &v24);
        v9 = v15;
      }
      while (result);
      if (*v15 == v24)
      {
        v22 = v15 + 2;
        if (*v15 == *v15 >> 31)
        {
          *v22 = v25;
        }
        else
        {
          *(_OWORD *)v22 = v25;
          v15[6] = v26;
        }
      }
      else
      {
        v23 = v24 ^ (v24 >> 31);
        if (v23)
        {
          *(_OWORD *)(v15 + 2) = v25;
          v15[6] = v26;
          *v15 = v23;
        }
        else
        {
          *((_QWORD *)v15 + 1) = v25;
          *v15 = 0;
        }
      }
      v15[8] = v27;
    }
  }
  return result;
}

void sub_100249B0C(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v18;
  int *v19;

  v6 = a1[1];
  v7 = a1[2];
  if (0x333333333333333 - v7 < a3 - v7 + v6)
    goto LABEL_14;
  v9 = v7 >> 61;
  v10 = 8 * v7;
  if (v9 > 4)
    v11 = -1;
  else
    v11 = v10;
  v12 = v10 / 5;
  if (v9)
    v12 = v11;
  v13 = v6 + a3;
  if (v12 >= 0x333333333333333)
    v12 = 0x333333333333333;
  v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0x333333333333333)
LABEL_14:
    sub_100245110((uint64_t)"get_next_capacity, allocator's max size reached");
  v18 = (char *)a2 - *a1;
  v19 = (int *)operator new(40 * v14);
  sub_100249BFC((uint64_t)a1, v19, v14, a2, a3, a4);
  *a5 = &v18[*a1];
}

void sub_100249BFC(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  __int128 v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;

  v10 = *(_DWORD **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a2;
  if (*(_DWORD **)a1 != a4)
  {
    v13 = *(_DWORD **)a1;
    v12 = a2;
    do
    {
      v17 = v12 + 2;
      v18 = v13 + 2;
      v16 = *v13;
      if (v16 == v16 >> 31)
      {
        *v17 = *v18;
        v15 = v16;
      }
      else
      {
        v14 = *(_OWORD *)v18;
        v12[6] = v13[6];
        *(_OWORD *)v17 = v14;
        v15 = *v13;
        v16 = (int)*v13 >> 31;
      }
      *v12 = v15 ^ v16;
      v12[8] = v13[8];
      v13 += 10;
      v12 += 10;
    }
    while (v13 != a4);
  }
  v19 = &v10[10 * v11];
  if (a5)
  {
    v20 = v12 + 2;
    v21 = a5;
    do
    {
      v25 = a6 + 2;
      v24 = *a6;
      if (v24 == v24 >> 31)
      {
        *(_QWORD *)v20 = *v25;
        v23 = v24;
      }
      else
      {
        v22 = *(_OWORD *)v25;
        v20[4] = a6[6];
        *(_OWORD *)v20 = v22;
        v23 = *a6;
        v24 = (int)*a6 >> 31;
      }
      *(v20 - 2) = v23 ^ v24;
      v20[6] = a6[8];
      a6 += 10;
      v20 += 10;
      --v21;
    }
    while (v21);
  }
  if (v19 != a4)
  {
    v26 = (uint64_t)&v12[10 * a5 + 2];
    do
    {
      v30 = a4 + 2;
      v29 = *a4;
      if (v29 == v29 >> 31)
      {
        *(_QWORD *)v26 = *v30;
        v28 = v29;
      }
      else
      {
        v27 = *(_OWORD *)v30;
        *(_DWORD *)(v26 + 16) = a4[6];
        *(_OWORD *)v26 = v27;
        v28 = *a4;
        v29 = (int)*a4 >> 31;
      }
      *(_DWORD *)(v26 - 8) = v28 ^ v29;
      *(_DWORD *)(v26 + 24) = a4[8];
      a4 += 10;
      v26 += 40;
    }
    while (a4 != v19);
  }
  if (v10)
    operator delete(*(void **)a1);
  v31 = *(_QWORD *)(a1 + 8) + a5;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = a3;
}

void sub_100249DA0(char **a1)
{
  unint64_t v1;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  int v12;
  int v13;

  v1 = (unint64_t)a1[2];
  if (v1)
  {
    v3 = (unint64_t)a1[1];
    if (v3)
    {
      if (v3 >= v1)
        return;
      if (v3 >= 0x333333333333334)
        sub_100245110((uint64_t)"get_next_capacity, allocator's max size reached");
      v4 = (char *)operator new(40 * v3);
      v5 = *a1;
      v6 = a1[1];
      if (v6)
      {
        v7 = &v5[40 * (_QWORD)v6];
        v8 = v5 + 8;
        v9 = v4 + 8;
        do
        {
          v11 = v8 - 8;
          v12 = *((_DWORD *)v8 - 2);
          v13 = v12 >> 31;
          if (v12 >> 31 == v12)
          {
            *(_QWORD *)v9 = *(_QWORD *)v8;
            v13 = v12;
          }
          else
          {
            v10 = *(_OWORD *)v8;
            *((_DWORD *)v9 + 4) = *((_DWORD *)v8 + 4);
            *(_OWORD *)v9 = v10;
          }
          *((_DWORD *)v9 - 2) = v13 ^ v12;
          *((_DWORD *)v9 + 6) = *((_DWORD *)v8 + 6);
          v8 += 40;
          v9 += 40;
        }
        while (v11 + 40 != v7);
      }
      if (!v5)
        goto LABEL_13;
    }
    else
    {
      v4 = 0;
      v5 = *a1;
      if (!*a1)
      {
LABEL_13:
        *a1 = v4;
        a1[2] = (char *)v3;
        return;
      }
    }
    operator delete(v5);
    goto LABEL_13;
  }
}

int **sub_100249EA0@<X0>(int **result@<X0>, _DWORD *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5;
  int **v6;
  _QWORD *v7;
  int *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;

  v5 = (unint64_t)result[1];
  if (!v5)
  {
    *a3 = *result;
    return result;
  }
  v6 = result;
  v7 = a2 + 2;
  v8 = *result;
  do
  {
    v10 = *a2;
    v11 = (int)*a2 >> 31;
    if (v10 >> 31 == v10)
    {
      *(_QWORD *)&v29 = *v7;
      v11 = v10;
    }
    else
    {
      v29 = *(_OWORD *)v7;
      v30 = a2[6];
    }
    v9 = v5 >> 1;
    v12 = v11 ^ v10;
    v13 = &v8[10 * (v5 >> 1)];
    v14 = *v13;
    result = (int **)(v13 + 2);
    v15 = v12 >> 31;
    if (v14 == v14 >> 31)
    {
      if (v15 != v12 || (unint64_t)*result < (unint64_t)v29)
        goto LABEL_3;
    }
    else if (v15 != v12)
    {
      result = (int **)sub_1001D7688((unsigned __int8 *)result, (unsigned __int8 *)&v29);
      if ((_DWORD)result)
      {
LABEL_3:
        v8 += 10 * (v5 >> 1) + 10;
        v9 = v5 + ~v9;
      }
    }
    v5 = v9;
  }
  while (v9);
  v16 = *v6;
  v17 = v6[1];
  *a3 = v8;
  v18 = &v16[10 * (_QWORD)v17];
  if (v8 == v18)
    return result;
  v21 = *v8;
  v20 = v8 + 2;
  v19 = v21;
  v22 = v21 >> 31;
  if (v21 >> 31 == v21)
  {
    *(_QWORD *)&v29 = *(_QWORD *)v20;
    v23 = 0;
    v25 = *a2;
    v24 = (unsigned __int8 *)(a2 + 2);
    v26 = 0;
    if (v25 != v25 >> 31)
    {
LABEL_20:
      if (v26 == v23)
        return result;
      result = (int **)sub_1001D7688(v24, (unsigned __int8 *)&v29);
      if (!(_DWORD)result)
        return result;
LABEL_26:
      *a3 = v18;
      return result;
    }
  }
  else
  {
    v27 = *(_OWORD *)v20;
    v30 = v20[4];
    v29 = v27;
    v23 = v22 ^ v19;
    v28 = *a2;
    v24 = (unsigned __int8 *)(a2 + 2);
    v26 = v23 >> 31;
    if (v28 != v28 >> 31)
      goto LABEL_20;
  }
  if (v26 != v23 || *(_QWORD *)v24 < (unint64_t)v29)
    goto LABEL_26;
  return result;
}

char *sub_10024A0AC(char **a1, _DWORD *a2, int *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  int v21;
  __int16 v22;
  char v23;
  char *v24;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 1);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1999999999999999)
    sub_1000D02C0();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 1) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - *a1) >> 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 1) >= 0xCCCCCCCCCCCCCCCLL)
    v8 = 0x1999999999999999;
  else
    v8 = v5;
  if (!v8)
  {
    v9 = 0;
    v24 = &v23;
    v10 = (unint64_t *)(a2 + 2);
    if (*a2 == (int)*a2 >> 31)
      goto LABEL_10;
LABEL_12:
    sub_1001D79E4();
  }
  if (v8 > 0x1999999999999999)
    sub_1000CDEB8();
  v9 = (char *)operator new(10 * v8);
  v24 = &v23;
  v11 = *a2;
  v10 = (unint64_t *)(a2 + 2);
  if (v11 != v11 >> 31)
    goto LABEL_12;
LABEL_10:
  sub_1000A991C((uint64_t)&v21, *v10);
  v12 = &v9[10 * v4];
  v13 = *a3;
  v14 = v21;
  *((_WORD *)v12 + 2) = v22;
  *(_DWORD *)v12 = v14;
  *(_DWORD *)(v12 + 6) = v13;
  v15 = v12 + 10;
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *(_QWORD *)(v16 - 10);
      v16 -= 10;
      v19 = *((_WORD *)v16 + 4);
      *(_QWORD *)(v12 - 10) = v18;
      v12 -= 10;
      *((_WORD *)v12 + 4) = v19;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = &v9[10 * v8];
  if (v16)
    operator delete(v16);
  return v15;
}

void sub_10024A21C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10024A234(void **a1, int *a2, _DWORD *a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  _DWORD *v11;
  int *v12;
  _QWORD *v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  _DWORD *v18;
  unint64_t v19;
  __int128 v20;
  int v21;
  int v22;
  int *v23;
  char *v24;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    sub_1000D02C0();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3) > v7)
    v7 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v5) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v5) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0x666666666666666)
      sub_1000CDEB8();
    v11 = operator new(40 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[10 * v6];
  v13 = v12 + 2;
  v16 = *a2;
  v15 = a2 + 2;
  v14 = v16;
  v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    *v13 = *(_QWORD *)v15;
    v17 = v14;
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)v15;
    v12[6] = v15[4];
  }
  *v12 = v17 ^ v14;
  v18 = v12 + 10;
  v11[10 * v6 + 8] = *a3;
  if (v4 != v5)
  {
    v19 = 0;
    do
    {
      v23 = &v12[v19 / 4 - 8];
      v22 = *(_DWORD *)&v4[v19 - 40];
      v24 = &v4[v19 - 32];
      if (v22 == v22 >> 31)
      {
        *(_QWORD *)v23 = *(_QWORD *)v24;
        v21 = v22;
      }
      else
      {
        v20 = *(_OWORD *)v24;
        v12[v19 / 4 - 4] = *(_DWORD *)&v4[v19 - 16];
        *(_OWORD *)v23 = v20;
        v21 = *(_DWORD *)&v4[v19 - 40];
        v22 = v21 >> 31;
      }
      v12[v19 / 4 - 10] = v21 ^ v22;
      v12[v19 / 4 - 2] = *(_DWORD *)&v4[v19 - 8];
      v19 -= 40;
    }
    while (&v4[v19] != v5);
    v4 = (char *)*a1;
    v12 = (int *)((char *)v12 + v19);
  }
  *a1 = v12;
  a1[1] = v18;
  a1[2] = &v11[10 * v10];
  if (v4)
    operator delete(v4);
  return v18;
}

uint64_t sub_10024A3EC(uint64_t result, int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 *v48;
  __int128 v49;
  int v50;
  int v51;
  int *v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  __int128 v61;
  int v62;
  _OWORD *v63;
  __int128 v64;
  BOOL v65;
  int v66;
  _QWORD *v67;
  int v68;
  __int128 v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  int v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 *v85;
  __int128 v86;
  int v87;
  int v88;
  int *v89;
  _QWORD *v90;
  int v91;
  __int128 *v92;
  __int128 v93;
  __int128 v94;
  int v95;
  _QWORD *v96;
  int v97;
  _OWORD *v98;
  __int128 v99;
  __int128 v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  int *v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  __int128 v113;
  int64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  int v123;
  __int128 v124;
  _DWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  int v128;
  __int128 *v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v134;
  _QWORD *v135;
  int v136;
  __int128 v137;
  int *v138;
  int v139;
  int *v140;
  int v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  _DWORD *v145;
  int v146;
  int v147;
  _DWORD *v148;
  _DWORD *v149;
  int v150;
  _OWORD *v151;
  _OWORD *v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _QWORD *v170;
  _QWORD *v171;
  int v172;
  __int128 *v173;
  __int128 v174;
  int v175;
  int *v176;
  int v177;
  int v178;
  int *v179;
  _QWORD *v180;
  int v181;
  __int128 *v182;
  __int128 v183;
  int v184;
  __int128 v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  _DWORD *v189;
  int v190;
  int v191;
  _QWORD *v192;
  int v193;
  __int128 v194;
  _DWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  int v198;
  __int128 *v199;
  __int128 v200;
  __int128 v201;
  int v202;
  _QWORD *v203;
  int v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  int v210;
  int v211;
  int v212;
  _QWORD *v213;
  uint64_t v214;
  int v215;
  int v216;
  _QWORD *v217;
  _QWORD *v218;
  int v219;
  int v220;
  int v221;
  __int128 v222;
  int v223;
  __int128 v224;
  __int128 v225;
  int v226;
  __int128 *v227;
  __int128 v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int64_t v235;
  int v236;
  int *v237;
  int64_t v238;
  int *v239;
  int v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  __int128 v245;
  int v246;

  v7 = result;
LABEL_2:
  v237 = a2 - 8;
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v101 = sub_100242F68(*a3, (uint64_t)v237);
        result = sub_100242F68(*a3, v7);
        if (v101 >= (int)result)
          return result;
        v102 = *(_DWORD *)v7;
        v103 = *(int *)v7 >> 31;
        v105 = (_QWORD *)(v7 + 8);
        v104 = *(_QWORD *)(v7 + 8);
        if (v103 == *(_DWORD *)v7)
        {
          v106 = a2;
          v107 = *v237;
          v108 = 0;
          if (v102 == *v237)
          {
            *v105 = *((_QWORD *)a2 - 3);
            goto LABEL_303;
          }
        }
        else
        {
          v244 = *(_QWORD *)(v7 + 16);
          LODWORD(v245) = *(_DWORD *)(v7 + 24);
          v108 = v103 ^ v102;
          v106 = a2;
          v107 = *v237;
          if (v102 == *v237)
          {
            v225 = *(_OWORD *)(a2 - 6);
            *(_DWORD *)(v7 + 24) = *(a2 - 2);
            *(_OWORD *)v105 = v225;
            goto LABEL_303;
          }
        }
        v226 = v107 ^ (v107 >> 31);
        v227 = (__int128 *)(v106 - 6);
        if (v226)
        {
          v228 = *v227;
          *(_DWORD *)(v7 + 24) = *(v106 - 2);
          *(_OWORD *)v105 = v228;
          *(_DWORD *)v7 = v226;
        }
        else
        {
          *(_QWORD *)(v7 + 8) = *(_QWORD *)v227;
          *(_DWORD *)v7 = 0;
        }
LABEL_303:
        v229 = v108 >> 31;
        if (*v237 == v108)
        {
          *((_QWORD *)v106 - 3) = v104;
          if (v229 != v108)
          {
            v230 = v244;
            *(v106 - 2) = v245;
            *((_QWORD *)v106 - 2) = v230;
          }
        }
        else
        {
          *((_QWORD *)v106 - 3) = v104;
          v231 = v229 ^ v108;
          if (v229 != v108)
          {
            v232 = v244;
            *(v106 - 2) = v245;
            *((_QWORD *)v106 - 2) = v232;
            *(v106 - 8) = v231;
          }
          else
          {
            *v237 = 0;
          }
        }
        return result;
      case 3uLL:
        return sub_10024C020(v7, v7 + 32, (uint64_t)v237, a3);
      case 4uLL:
        return sub_10024CB84(v7, v7 + 32, v7 + 64, (uint64_t)v237, a3);
      case 5uLL:
        return sub_10024BAC4(v7, v7 + 32, v7 + 64, v7 + 96, (uint64_t)v237, a3);
      default:
        if (v9 > 767)
        {
          if (!a4)
          {
            if ((int *)v7 == a2)
              return result;
            v238 = (v10 - 2) >> 1;
            v112 = v238;
            do
            {
              v114 = v112;
              if (v238 >= v112)
              {
                v235 = v112;
                v115 = (2 * v112) | 1;
                v116 = (_DWORD *)(v7 + 32 * v115);
                v117 = 2 * v112 + 2;
                if (v117 < (uint64_t)v10)
                {
                  v118 = sub_100242F68(*a3, v7 + 32 * v115);
                  if (v118 < (int)sub_100242F68(*a3, (uint64_t)(v116 + 8)))
                  {
                    v116 += 8;
                    v115 = v117;
                  }
                }
                v119 = sub_100242F68(*a3, (uint64_t)v116);
                v120 = v7 + 32 * v235;
                result = sub_100242F68(*a3, v120);
                v114 = v235;
                if (v119 >= (int)result)
                {
                  v122 = (_QWORD *)(v120 + 8);
                  v121 = *(_DWORD *)v120;
                  v123 = *(int *)v120 >> 31;
                  if (v121 >> 31 == v121)
                  {
                    *(_QWORD *)&v245 = *v122;
                    v123 = v121;
                  }
                  else
                  {
                    v124 = *(_OWORD *)v122;
                    v246 = *(_DWORD *)(v120 + 24);
                    v245 = v124;
                  }
                  LODWORD(v244) = v123 ^ v121;
                  do
                  {
                    v125 = v116;
                    if (*(_DWORD *)v120 == *v116)
                    {
                      v126 = v116 + 2;
                      v127 = (_QWORD *)(v120 + 8);
                      if (*(_DWORD *)v120 == *(int *)v120 >> 31)
                      {
                        *v127 = *v126;
                        if (v238 < v115)
                          break;
                      }
                      else
                      {
                        v131 = *(_OWORD *)v126;
                        *(_DWORD *)(v120 + 24) = v116[6];
                        *(_OWORD *)v127 = v131;
                        if (v238 < v115)
                          break;
                      }
                    }
                    else
                    {
                      v128 = *v116 ^ ((int)*v116 >> 31);
                      v129 = (__int128 *)(v116 + 2);
                      if (v128)
                      {
                        v130 = *v129;
                        *(_DWORD *)(v120 + 24) = v116[6];
                        *(_OWORD *)(v120 + 8) = v130;
                        *(_DWORD *)v120 = v128;
                        if (v238 < v115)
                          break;
                      }
                      else
                      {
                        *(_QWORD *)(v120 + 8) = *(_QWORD *)v129;
                        *(_DWORD *)v120 = 0;
                        if (v238 < v115)
                          break;
                      }
                    }
                    v132 = (2 * v115) | 1;
                    v116 = (_DWORD *)(v7 + 32 * v132);
                    v115 = 2 * v115 + 2;
                    if (v115 >= (uint64_t)v10)
                    {
                      v115 = v132;
                    }
                    else
                    {
                      v133 = sub_100242F68(*a3, v7 + 32 * v132);
                      if (v133 >= (int)sub_100242F68(*a3, (uint64_t)(v116 + 8)))
                        v115 = v132;
                      else
                        v116 += 8;
                    }
                    v134 = sub_100242F68(*a3, (uint64_t)v116);
                    result = sub_100242F68(*a3, (uint64_t)&v244);
                    v120 = (uint64_t)v125;
                  }
                  while (v134 >= (int)result);
                  if (*v125 == (_DWORD)v244)
                  {
                    v135 = v125 + 2;
                    if (*v125 == (int)*v125 >> 31)
                    {
                      *v135 = v245;
                    }
                    else
                    {
                      v113 = v245;
                      v125[6] = v246;
                      *(_OWORD *)v135 = v113;
                    }
                  }
                  else
                  {
                    v136 = v244 ^ ((int)v244 >> 31);
                    if (v136)
                    {
                      v137 = v245;
                      v125[6] = v246;
                      *(_OWORD *)(v125 + 2) = v137;
                      *v125 = v136;
                    }
                    else
                    {
                      *((_QWORD *)v125 + 1) = v245;
                      *v125 = 0;
                    }
                  }
                  v114 = v235;
                }
              }
              v112 = v114 - 1;
            }
            while (v114);
            v161 = (unint64_t)v9 >> 5;
            while (1)
            {
              v233 = *(_QWORD *)(v7 + 8);
              v239 = a2;
              v241 = *(_DWORD *)v7;
              if (*(int *)v7 >> 31 == *(_DWORD *)v7)
              {
                v236 = *(_DWORD *)v7;
              }
              else
              {
                v236 = *(int *)v7 >> 31;
                v242 = *(_QWORD *)(v7 + 16);
                v243 = *(_DWORD *)(v7 + 24);
              }
              v163 = 0;
              v164 = v7;
              do
              {
                v166 = v164;
                v164 += 32 * v163 + 32;
                v167 = 2 * v163;
                v163 = (2 * v163) | 1;
                v168 = v167 + 2;
                if (v167 + 2 < v161)
                {
                  v169 = sub_100242F68(*a3, v164);
                  result = sub_100242F68(*a3, v164 + 32);
                  if (v169 < (int)result)
                  {
                    v164 += 32;
                    v163 = v168;
                  }
                }
                if (*(_DWORD *)v166 == *(_DWORD *)v164)
                {
                  v170 = (_QWORD *)(v164 + 8);
                  v171 = (_QWORD *)(v166 + 8);
                  if (*(_DWORD *)v166 == *(int *)v166 >> 31)
                  {
                    *v171 = *v170;
                  }
                  else
                  {
                    v165 = *(_OWORD *)v170;
                    *(_DWORD *)(v166 + 24) = *(_DWORD *)(v164 + 24);
                    *(_OWORD *)v171 = v165;
                  }
                }
                else
                {
                  v172 = *(_DWORD *)v164 ^ (*(int *)v164 >> 31);
                  v173 = (__int128 *)(v164 + 8);
                  if (v172)
                  {
                    v174 = *v173;
                    *(_DWORD *)(v166 + 24) = *(_DWORD *)(v164 + 24);
                    *(_OWORD *)(v166 + 8) = v174;
                    *(_DWORD *)v166 = v172;
                  }
                  else
                  {
                    *(_QWORD *)(v166 + 8) = *(_QWORD *)v173;
                    *(_DWORD *)v166 = 0;
                  }
                }
              }
              while (v163 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
              v175 = v236 ^ v241;
              v176 = v239 - 8;
              v177 = *(_DWORD *)v164;
              v178 = (v236 ^ v241) >> 31;
              a2 = v239 - 8;
              if ((int *)v164 == v239 - 8)
              {
                if (v177 == v175)
                {
                  *(_QWORD *)(v164 + 8) = v233;
                  if (v178 != v175)
                  {
                    *(_QWORD *)(v164 + 16) = v242;
                    *(_DWORD *)(v164 + 24) = v243;
                  }
                }
                else
                {
                  v184 = v178 ^ v175;
                  *(_QWORD *)(v164 + 8) = v233;
                  if (v184)
                  {
                    *(_QWORD *)(v164 + 16) = v242;
                    *(_DWORD *)(v164 + 24) = v243;
                    *(_DWORD *)v164 = v184;
                  }
                  else
                  {
                    *(_DWORD *)v164 = 0;
                  }
                }
                goto LABEL_210;
              }
              if (v177 == *v176)
              {
                v179 = v239 - 6;
                v180 = (_QWORD *)(v164 + 8);
                if (v177 == v177 >> 31)
                {
                  *v180 = *(_QWORD *)v179;
                  if (*v176 == v175)
                    goto LABEL_240;
                }
                else
                {
                  v185 = *(_OWORD *)v179;
                  *(_DWORD *)(v164 + 24) = *(v239 - 2);
                  *(_OWORD *)v180 = v185;
                  if (*v176 == v175)
                    goto LABEL_240;
                }
              }
              else
              {
                v181 = *v176 ^ (*v176 >> 31);
                v182 = (__int128 *)(v239 - 6);
                if (v181)
                {
                  v183 = *v182;
                  *(_DWORD *)(v164 + 24) = *(v239 - 2);
                  *(_OWORD *)(v164 + 8) = v183;
                  *(_DWORD *)v164 = v181;
                  if (*v176 == v175)
                    goto LABEL_240;
                }
                else
                {
                  *(_QWORD *)(v164 + 8) = *(_QWORD *)v182;
                  *(_DWORD *)v164 = 0;
                  if (*v176 == v175)
                  {
LABEL_240:
                    if (v178 == v175)
                    {
                      *((_QWORD *)v239 - 3) = v233;
                      v186 = v164 + 32 - v7;
                      if (v186 >= 33)
                        goto LABEL_250;
                    }
                    else
                    {
                      *((_QWORD *)v239 - 3) = v233;
                      *(v239 - 2) = v243;
                      *((_QWORD *)v239 - 2) = v242;
                      v186 = v164 + 32 - v7;
                      if (v186 >= 33)
                        goto LABEL_250;
                    }
                    goto LABEL_210;
                  }
                }
              }
              v187 = v178 ^ v175;
              if (v187)
              {
                *((_QWORD *)v239 - 3) = v233;
                *(v239 - 2) = v243;
                *((_QWORD *)v239 - 2) = v242;
                *(v239 - 8) = v187;
                v186 = v164 + 32 - v7;
                if (v186 >= 33)
                  goto LABEL_250;
              }
              else
              {
                *((_QWORD *)v239 - 3) = v233;
                *(v239 - 8) = 0;
                v186 = v164 + 32 - v7;
                if (v186 >= 33)
                {
LABEL_250:
                  v188 = (((unint64_t)v186 >> 5) - 2) >> 1;
                  v189 = (_DWORD *)(v7 + 32 * v188);
                  v190 = sub_100242F68(*a3, (uint64_t)v189);
                  result = sub_100242F68(*a3, v164);
                  if (v190 < (int)result)
                  {
                    v192 = (_QWORD *)(v164 + 8);
                    v191 = *(_DWORD *)v164;
                    v193 = *(int *)v164 >> 31;
                    if (v191 >> 31 == v191)
                    {
                      *(_QWORD *)&v245 = *v192;
                      v193 = v191;
                    }
                    else
                    {
                      v194 = *(_OWORD *)v192;
                      v246 = *(_DWORD *)(v164 + 24);
                      v245 = v194;
                    }
                    LODWORD(v244) = v193 ^ v191;
                    do
                    {
                      v195 = v189;
                      if (*(_DWORD *)v164 == *v189)
                      {
                        v196 = v189 + 2;
                        v197 = (_QWORD *)(v164 + 8);
                        if (*(_DWORD *)v164 == *(int *)v164 >> 31)
                        {
                          *v197 = *v196;
                          if (!v188)
                            break;
                        }
                        else
                        {
                          v201 = *(_OWORD *)v196;
                          *(_DWORD *)(v164 + 24) = v189[6];
                          *(_OWORD *)v197 = v201;
                          if (!v188)
                            break;
                        }
                      }
                      else
                      {
                        v198 = *v189 ^ ((int)*v189 >> 31);
                        v199 = (__int128 *)(v189 + 2);
                        if (v198)
                        {
                          v200 = *v199;
                          *(_DWORD *)(v164 + 24) = v189[6];
                          *(_OWORD *)(v164 + 8) = v200;
                          *(_DWORD *)v164 = v198;
                          if (!v188)
                            break;
                        }
                        else
                        {
                          *(_QWORD *)(v164 + 8) = *(_QWORD *)v199;
                          *(_DWORD *)v164 = 0;
                          if (!v188)
                            break;
                        }
                      }
                      v188 = (v188 - 1) >> 1;
                      v189 = (_DWORD *)(v7 + 32 * v188);
                      v202 = sub_100242F68(*a3, (uint64_t)v189);
                      result = sub_100242F68(*a3, (uint64_t)&v244);
                      v164 = (uint64_t)v195;
                    }
                    while (v202 < (int)result);
                    if (*v195 == (_DWORD)v244)
                    {
                      v203 = v195 + 2;
                      if (*v195 == (int)*v195 >> 31)
                      {
                        *v203 = v245;
                      }
                      else
                      {
                        v206 = v245;
                        v195[6] = v246;
                        *(_OWORD *)v203 = v206;
                      }
                    }
                    else
                    {
                      v204 = v244 ^ ((int)v244 >> 31);
                      if (v204)
                      {
                        v205 = v245;
                        v195[6] = v246;
                        *(_OWORD *)(v195 + 2) = v205;
                        *v195 = v204;
                      }
                      else
                      {
                        *((_QWORD *)v195 + 1) = v245;
                        *v195 = 0;
                      }
                    }
                  }
                }
              }
LABEL_210:
              if (v161-- <= 2)
                return result;
            }
          }
          v11 = v7 + 32 * (v10 >> 1);
          if ((unint64_t)v9 <= 0x1000)
          {
            sub_10024C020(v7 + 32 * (v10 >> 1), v7, (uint64_t)v237, a3);
            goto LABEL_24;
          }
          sub_10024C020(v7, v7 + 32 * (v10 >> 1), (uint64_t)v237, a3);
          v12 = v7 + 32 * (v10 >> 1);
          sub_10024C020(v7 + 32, v12 - 32, (uint64_t)(a2 - 16), a3);
          sub_10024C020(v7 + 64, v12 + 32, (uint64_t)(a2 - 24), a3);
          sub_10024C020(v12 - 32, v12, v12 + 32, a3);
          v13 = *(_DWORD *)v7;
          v14 = *(int *)v7 >> 31;
          v16 = (_QWORD *)(v7 + 8);
          v15 = *(_QWORD *)(v7 + 8);
          if (v14 == *(_DWORD *)v7)
          {
            v17 = *(_DWORD *)v11;
            if (v13 == *(_DWORD *)v11)
            {
              v18 = 0;
              *v16 = *(_QWORD *)(v11 + 8);
              v19 = 0;
              if (!*(_DWORD *)v11)
                goto LABEL_18;
              goto LABEL_22;
            }
            v18 = 0;
          }
          else
          {
            v244 = *(_QWORD *)(v7 + 16);
            LODWORD(v245) = *(_DWORD *)(v7 + 24);
            v18 = v14 ^ v13;
            v17 = *(_DWORD *)v11;
            if (v13 == *(_DWORD *)v11)
            {
              v20 = *(_OWORD *)(v11 + 8);
              *(_DWORD *)(v7 + 24) = *(_DWORD *)(v11 + 24);
              *(_OWORD *)v16 = v20;
              v19 = v18 >> 31;
              if (*(_DWORD *)v11 == v18)
                goto LABEL_18;
              goto LABEL_22;
            }
          }
          v21 = v17 ^ (v17 >> 31);
          v22 = (__int128 *)(v11 + 8);
          if (v21)
          {
            v23 = *v22;
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v11 + 24);
            *(_OWORD *)v16 = v23;
            *(_DWORD *)v7 = v21;
            v19 = v18 >> 31;
            if (*(_DWORD *)v11 == v18)
              goto LABEL_18;
          }
          else
          {
            *(_QWORD *)(v7 + 8) = *(_QWORD *)v22;
            *(_DWORD *)v7 = 0;
            v19 = v18 >> 31;
            if (*(_DWORD *)v11 == v18)
            {
LABEL_18:
              *(_QWORD *)(v11 + 8) = v15;
              if (v19 == v18)
                goto LABEL_24;
              v24 = v244;
              *(_DWORD *)(v11 + 24) = v245;
              *(_QWORD *)(v11 + 16) = v24;
              --a4;
              if ((a5 & 1) != 0)
                goto LABEL_26;
              goto LABEL_25;
            }
          }
LABEL_22:
          *(_QWORD *)(v11 + 8) = v15;
          v25 = v19 ^ v18;
          if (v19 != v18)
          {
            v26 = v244;
            *(_DWORD *)(v11 + 24) = v245;
            *(_QWORD *)(v11 + 16) = v26;
            *(_DWORD *)v11 = v25;
LABEL_24:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_26;
            goto LABEL_25;
          }
          *(_DWORD *)v11 = 0;
          --a4;
          if ((a5 & 1) == 0)
          {
LABEL_25:
            v27 = sub_100242F68(*a3, v7 - 32);
            if (v27 < (int)sub_100242F68(*a3, v7))
              goto LABEL_26;
            v67 = (_QWORD *)(v7 + 8);
            v66 = *(_DWORD *)v7;
            v68 = *(int *)v7 >> 31;
            if (v66 >> 31 == v66)
            {
              *(_QWORD *)&v245 = *v67;
              v68 = v66;
            }
            else
            {
              v69 = *(_OWORD *)v67;
              v246 = *(_DWORD *)(v7 + 24);
              v245 = v69;
            }
            LODWORD(v244) = v68 ^ v66;
            v70 = sub_100242F68(*a3, (uint64_t)&v244);
            result = sub_100242F68(*a3, (uint64_t)v237);
            if (v70 >= (int)result)
            {
              v72 = v7 + 32;
              do
              {
                v8 = v72;
                if (v72 >= (unint64_t)a2)
                  break;
                v73 = sub_100242F68(*a3, (uint64_t)&v244);
                result = sub_100242F68(*a3, v8);
                v72 = v8 + 32;
              }
              while (v73 >= (int)result);
            }
            else
            {
              v8 = v7;
              do
              {
                v71 = sub_100242F68(*a3, (uint64_t)&v244);
                v8 += 32;
                result = sub_100242F68(*a3, v8);
              }
              while (v71 >= (int)result);
            }
            v74 = (unint64_t)a2;
            if (v8 < (unint64_t)a2)
            {
              v74 = (unint64_t)a2;
              do
              {
                v75 = sub_100242F68(*a3, (uint64_t)&v244);
                v74 -= 32;
                result = sub_100242F68(*a3, v74);
              }
              while (v75 < (int)result);
            }
            while (v8 < v74)
            {
              v76 = *(_DWORD *)v8;
              v77 = *(int *)v8 >> 31;
              v79 = (_QWORD *)(v8 + 8);
              v78 = *(_QWORD *)(v8 + 8);
              if (v77 == *(_DWORD *)v8)
              {
                v80 = *(_DWORD *)v74;
                if (v76 == *(_DWORD *)v74)
                {
                  v81 = 0;
                  *v79 = *(_QWORD *)(v74 + 8);
                  v82 = 0;
                  if (*(_DWORD *)v74)
                    goto LABEL_110;
                  goto LABEL_107;
                }
                v81 = 0;
              }
              else
              {
                v242 = *(_QWORD *)(v8 + 16);
                v243 = *(_DWORD *)(v8 + 24);
                v81 = v77 ^ v76;
                v80 = *(_DWORD *)v74;
                if (v76 == *(_DWORD *)v74)
                {
                  v83 = *(_OWORD *)(v74 + 8);
                  *(_DWORD *)(v8 + 24) = *(_DWORD *)(v74 + 24);
                  *(_OWORD *)v79 = v83;
                  v82 = v81 >> 31;
                  if (*(_DWORD *)v74 != v81)
                    goto LABEL_110;
                  goto LABEL_107;
                }
              }
              v84 = v80 ^ (v80 >> 31);
              v85 = (__int128 *)(v74 + 8);
              if (v84)
              {
                v86 = *v85;
                *(_DWORD *)(v8 + 24) = *(_DWORD *)(v74 + 24);
                *(_OWORD *)v79 = v86;
                *(_DWORD *)v8 = v84;
                v82 = v81 >> 31;
                if (*(_DWORD *)v74 != v81)
                  goto LABEL_110;
              }
              else
              {
                *(_QWORD *)(v8 + 8) = *(_QWORD *)v85;
                *(_DWORD *)v8 = 0;
                v82 = v81 >> 31;
                if (*(_DWORD *)v74 != v81)
                {
LABEL_110:
                  *(_QWORD *)(v74 + 8) = v78;
                  if (v82 != v81)
                  {
                    *(_QWORD *)(v74 + 16) = v242;
                    *(_DWORD *)(v74 + 24) = v243;
                    *(_DWORD *)v74 = v82 ^ v81;
                  }
                  else
                  {
                    *(_DWORD *)v74 = 0;
                  }
                  goto LABEL_113;
                }
              }
LABEL_107:
              *(_QWORD *)(v74 + 8) = v78;
              if (v82 != v81)
              {
                *(_QWORD *)(v74 + 16) = v242;
                *(_DWORD *)(v74 + 24) = v243;
              }
              do
              {
LABEL_113:
                v87 = sub_100242F68(*a3, (uint64_t)&v244);
                v8 += 32;
              }
              while (v87 >= (int)sub_100242F68(*a3, v8));
              do
              {
                v88 = sub_100242F68(*a3, (uint64_t)&v244);
                v74 -= 32;
                result = sub_100242F68(*a3, v74);
              }
              while (v88 < (int)result);
            }
            v89 = (int *)(v8 - 32);
            if (v8 - 32 != v7)
            {
              if (*(_DWORD *)v7 == *v89)
              {
                v90 = (_QWORD *)(v8 - 24);
                if (*(_DWORD *)v7 == *(int *)v7 >> 31)
                {
                  *v67 = *v90;
                }
                else
                {
                  v94 = *(_OWORD *)v90;
                  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 - 8);
                  *(_OWORD *)v67 = v94;
                }
              }
              else
              {
                v91 = *v89 ^ (*v89 >> 31);
                v92 = (__int128 *)(v8 - 24);
                if (v91)
                {
                  v93 = *v92;
                  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 - 8);
                  *(_OWORD *)v67 = v93;
                  *(_DWORD *)v7 = v91;
                }
                else
                {
                  *(_QWORD *)(v7 + 8) = *(_QWORD *)v92;
                  *(_DWORD *)v7 = 0;
                }
              }
            }
            v95 = *v89;
            if (*v89 == (_DWORD)v244)
            {
              v96 = (_QWORD *)(v8 - 24);
              if (v95 == v95 >> 31)
              {
                *v96 = v245;
              }
              else
              {
                v100 = v245;
                *(_DWORD *)(v8 - 8) = v246;
                *(_OWORD *)v96 = v100;
              }
              a5 = 0;
            }
            else
            {
              v97 = v244 ^ ((int)v244 >> 31);
              v98 = (_OWORD *)(v8 - 24);
              if (v97)
              {
                v99 = v245;
                *(_DWORD *)(v8 - 8) = v246;
                *v98 = v99;
                *v89 = v97;
              }
              else
              {
                *(_QWORD *)v98 = v245;
                *v89 = 0;
              }
              a5 = 0;
            }
            continue;
          }
LABEL_26:
          v29 = (_QWORD *)(v7 + 8);
          v28 = *(_DWORD *)v7;
          v30 = *(int *)v7 >> 31;
          if (v28 >> 31 == v28)
          {
            *(_QWORD *)&v245 = *v29;
            v30 = v28;
          }
          else
          {
            v31 = *(_OWORD *)v29;
            v246 = *(_DWORD *)(v7 + 24);
            v245 = v31;
          }
          v32 = 0;
          LODWORD(v244) = v30 ^ v28;
          do
          {
            v33 = sub_100242F68(*a3, v7 + v32 + 32);
            v32 += 32;
          }
          while (v33 < (int)sub_100242F68(*a3, (uint64_t)&v244));
          v34 = v7 + v32;
          v35 = (unint64_t)a2;
          if (v32 == 32)
          {
            v35 = (unint64_t)a2;
            do
            {
              if (v34 >= v35)
                break;
              v35 -= 32;
              v37 = sub_100242F68(*a3, v35);
            }
            while (v37 >= (int)sub_100242F68(*a3, (uint64_t)&v244));
          }
          else
          {
            do
            {
              v35 -= 32;
              v36 = sub_100242F68(*a3, v35);
            }
            while (v36 >= (int)sub_100242F68(*a3, (uint64_t)&v244));
          }
          v8 = v7 + v32;
          if (v34 < v35)
          {
            v38 = v35;
            do
            {
              v39 = *(_DWORD *)v8;
              v40 = *(int *)v8 >> 31;
              v42 = (_QWORD *)(v8 + 8);
              v41 = *(_QWORD *)(v8 + 8);
              if (v40 == *(_DWORD *)v8)
              {
                v43 = *(_DWORD *)v38;
                if (v39 == *(_DWORD *)v38)
                {
                  v44 = 0;
                  *v42 = *(_QWORD *)(v38 + 8);
                  v45 = 0;
                  if (!*(_DWORD *)v38)
                    goto LABEL_49;
                  goto LABEL_52;
                }
                v44 = 0;
              }
              else
              {
                v242 = *(_QWORD *)(v8 + 16);
                v243 = *(_DWORD *)(v8 + 24);
                v44 = v40 ^ v39;
                v43 = *(_DWORD *)v38;
                if (v39 == *(_DWORD *)v38)
                {
                  v46 = *(_OWORD *)(v38 + 8);
                  *(_DWORD *)(v8 + 24) = *(_DWORD *)(v38 + 24);
                  *(_OWORD *)v42 = v46;
                  v45 = v44 >> 31;
                  if (*(_DWORD *)v38 == v44)
                    goto LABEL_49;
                  goto LABEL_52;
                }
              }
              v47 = v43 ^ (v43 >> 31);
              v48 = (__int128 *)(v38 + 8);
              if (v47)
              {
                v49 = *v48;
                *(_DWORD *)(v8 + 24) = *(_DWORD *)(v38 + 24);
                *(_OWORD *)v42 = v49;
                *(_DWORD *)v8 = v47;
                v45 = v44 >> 31;
                if (*(_DWORD *)v38 == v44)
                  goto LABEL_49;
              }
              else
              {
                *(_QWORD *)(v8 + 8) = *(_QWORD *)v48;
                *(_DWORD *)v8 = 0;
                v45 = v44 >> 31;
                if (*(_DWORD *)v38 == v44)
                {
LABEL_49:
                  *(_QWORD *)(v38 + 8) = v41;
                  if (v45 != v44)
                  {
                    *(_QWORD *)(v38 + 16) = v242;
                    *(_DWORD *)(v38 + 24) = v243;
                  }
                  goto LABEL_55;
                }
              }
LABEL_52:
              *(_QWORD *)(v38 + 8) = v41;
              if (v45 != v44)
              {
                *(_QWORD *)(v38 + 16) = v242;
                *(_DWORD *)(v38 + 24) = v243;
                *(_DWORD *)v38 = v45 ^ v44;
              }
              else
              {
                *(_DWORD *)v38 = 0;
              }
              do
              {
LABEL_55:
                v8 += 32;
                v50 = sub_100242F68(*a3, v8);
              }
              while (v50 < (int)sub_100242F68(*a3, (uint64_t)&v244));
              do
              {
                v38 -= 32;
                v51 = sub_100242F68(*a3, v38);
              }
              while (v51 >= (int)sub_100242F68(*a3, (uint64_t)&v244));
            }
            while (v8 < v38);
          }
          v52 = (int *)(v8 - 32);
          if (v8 - 32 == v7)
            goto LABEL_67;
          if (*(_DWORD *)v7 != *v52)
          {
            v56 = *v52 ^ (*v52 >> 31);
            v57 = (__int128 *)(v8 - 24);
            if (v56)
            {
              v58 = *v57;
              *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 - 8);
              *(_OWORD *)v29 = v58;
              *(_DWORD *)v7 = v56;
              v54 = *v52;
              v55 = v244;
              if (*v52 != (_DWORD)v244)
                goto LABEL_74;
              goto LABEL_68;
            }
            *(_QWORD *)(v7 + 8) = *(_QWORD *)v57;
            *(_DWORD *)v7 = 0;
            v54 = *v52;
            v55 = v244;
            if (*v52 == (_DWORD)v244)
              goto LABEL_68;
            goto LABEL_74;
          }
          v53 = (__int128 *)(v8 - 24);
          if (*(_DWORD *)v7 != *(int *)v7 >> 31)
          {
            v59 = *v53;
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 - 8);
            *(_OWORD *)v29 = v59;
LABEL_67:
            v54 = *v52;
            v55 = v244;
            if (*v52 == (_DWORD)v244)
              goto LABEL_68;
LABEL_74:
            v62 = v55 ^ (v55 >> 31);
            v63 = (_OWORD *)(v8 - 24);
            if (v62)
            {
              v64 = v245;
              *(_DWORD *)(v8 - 8) = v246;
              *v63 = v64;
              *v52 = v62;
              if (v34 < v35)
                goto LABEL_80;
            }
            else
            {
              *(_QWORD *)v63 = v245;
              *v52 = 0;
              if (v34 < v35)
                goto LABEL_80;
            }
            goto LABEL_78;
          }
          *v29 = *(_QWORD *)v53;
          v54 = *v52;
          v55 = v244;
          if (*v52 != (_DWORD)v244)
            goto LABEL_74;
LABEL_68:
          v60 = (_QWORD *)(v8 - 24);
          if (v54 == v54 >> 31)
          {
            *v60 = v245;
            if (v34 < v35)
              goto LABEL_80;
          }
          else
          {
            v61 = v245;
            *(_DWORD *)(v8 - 8) = v246;
            *(_OWORD *)v60 = v61;
            if (v34 < v35)
              goto LABEL_80;
          }
LABEL_78:
          v65 = sub_10024C710(v7, (_DWORD *)(v8 - 32), a3);
          result = sub_10024C710(v8, a2, a3);
          if (!(_DWORD)result)
          {
            if (v65)
              continue;
LABEL_80:
            result = sub_10024A3EC(v7, v8 - 32, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (int *)(v8 - 32);
          if (v65)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if ((int *)v7 != a2)
          {
            v207 = v7 + 32;
            if ((int *)(v7 + 32) != a2)
            {
              v208 = v7 - 32;
              do
              {
                v209 = (int *)v207;
                v210 = sub_100242F68(*a3, v207);
                result = sub_100242F68(*a3, v7);
                if (v210 < (int)result)
                {
                  v211 = *v209;
                  v212 = *v209 >> 31;
                  v213 = (_QWORD *)(v7 + 40);
                  if (v211 >> 31 == v211)
                  {
                    *(_QWORD *)&v245 = *v213;
                    v212 = v211;
                  }
                  else
                  {
                    v245 = *(_OWORD *)v213;
                    v246 = *(_DWORD *)(v7 + 56);
                  }
                  LODWORD(v244) = v212 ^ v211;
                  v214 = v208;
                  do
                  {
                    v215 = *(_DWORD *)(v214 + 64);
                    v216 = *(_DWORD *)(v214 + 32);
                    if (v215 == v216)
                    {
                      v217 = (_QWORD *)(v214 + 40);
                      v218 = (_QWORD *)(v214 + 72);
                      if (v215 == v215 >> 31)
                      {
                        *v218 = *v217;
                      }
                      else
                      {
                        *(_OWORD *)v218 = *(_OWORD *)v217;
                        *(_DWORD *)(v214 + 88) = *(_DWORD *)(v214 + 56);
                      }
                    }
                    else
                    {
                      v219 = v216 ^ (v216 >> 31);
                      if (v219)
                      {
                        *(_OWORD *)(v214 + 72) = *(_OWORD *)(v214 + 40);
                        *(_DWORD *)(v214 + 88) = *(_DWORD *)(v214 + 56);
                        *(_DWORD *)(v214 + 64) = v219;
                      }
                      else
                      {
                        *(_QWORD *)(v214 + 72) = *(_QWORD *)(v214 + 40);
                        *(_DWORD *)(v214 + 64) = 0;
                      }
                    }
                    v220 = sub_100242F68(*a3, (uint64_t)&v244);
                    result = sub_100242F68(*a3, v214);
                    v214 -= 32;
                  }
                  while (v220 < (int)result);
                  v221 = *(_DWORD *)(v214 + 64);
                  if (v221 == (_DWORD)v244)
                  {
                    if (v221 == v221 >> 31)
                    {
                      *(_QWORD *)(v214 + 72) = v245;
                    }
                    else
                    {
                      v222 = v245;
                      *(_DWORD *)(v214 + 88) = v246;
                      *(_OWORD *)(v214 + 72) = v222;
                    }
                  }
                  else
                  {
                    v223 = v244 ^ ((int)v244 >> 31);
                    if (v223)
                    {
                      v224 = v245;
                      *(_DWORD *)(v214 + 88) = v246;
                      *(_OWORD *)(v214 + 72) = v224;
                      *(_DWORD *)(v214 + 64) = v223;
                    }
                    else
                    {
                      *(_QWORD *)(v214 + 72) = v245;
                      *(_DWORD *)(v214 + 64) = 0;
                    }
                  }
                }
                v207 = (uint64_t)(v209 + 8);
                v208 += 32;
                v7 = (uint64_t)v209;
              }
              while (v209 + 8 != a2);
            }
          }
          return result;
        }
        if ((int *)v7 == a2)
          return result;
        v109 = v7 + 32;
        if ((int *)(v7 + 32) == a2)
          return result;
        v110 = 0;
        v111 = v7;
        while (2)
        {
          v138 = (int *)v109;
          v139 = sub_100242F68(*a3, v109);
          result = sub_100242F68(*a3, v111);
          v140 = a2;
          if (v139 >= (int)result)
            goto LABEL_184;
          v141 = *v138;
          v142 = *v138 >> 31;
          v143 = (_QWORD *)(v111 + 40);
          if (v141 >> 31 == v141)
          {
            *(_QWORD *)&v245 = *v143;
            v142 = v141;
          }
          else
          {
            v245 = *(_OWORD *)v143;
            v246 = *(_DWORD *)(v111 + 56);
          }
          LODWORD(v244) = v142 ^ v141;
          v144 = v110;
          do
          {
            v145 = (_DWORD *)(v7 + v144);
            v146 = *(_DWORD *)(v7 + v144 + 32);
            v147 = *(_DWORD *)(v7 + v144);
            if (v146 == v147)
            {
              v148 = v145 + 2;
              v149 = v145 + 10;
              if (v146 == v146 >> 31)
              {
                *(_QWORD *)v149 = *(_QWORD *)v148;
                if (!v144)
                  goto LABEL_204;
              }
              else
              {
                *(_OWORD *)v149 = *(_OWORD *)v148;
                v149[4] = v148[4];
                if (!v144)
                  goto LABEL_204;
              }
            }
            else
            {
              v150 = v147 ^ (v147 >> 31);
              v151 = v145 + 2;
              v152 = v145 + 10;
              if (v150)
              {
                *v152 = *v151;
                v145[14] = v145[6];
                v145[8] = v150;
                if (!v144)
                  goto LABEL_204;
              }
              else
              {
                *(_QWORD *)v152 = *(_QWORD *)v151;
                v145[8] = 0;
                if (!v144)
                {
LABEL_204:
                  v154 = v7;
                  v155 = *(_DWORD *)v7;
                  v156 = v244;
                  v140 = a2;
                  if (*(_DWORD *)v7 != (_DWORD)v244)
                    goto LABEL_202;
LABEL_205:
                  v159 = v154 + 8;
                  if (v155 == v155 >> 31)
                  {
                    *(_QWORD *)v159 = v245;
                  }
                  else
                  {
                    v160 = v245;
                    *(_DWORD *)(v159 + 16) = v246;
                    *(_OWORD *)v159 = v160;
                  }
                  goto LABEL_184;
                }
              }
            }
            v153 = sub_100242F68(*a3, (uint64_t)&v244);
            result = sub_100242F68(*a3, v7 + v144 - 32);
            v144 -= 32;
          }
          while (v153 < (int)result);
          v154 = v7 + v144 + 32;
          v155 = *(_DWORD *)v154;
          v156 = v244;
          v140 = a2;
          if (*(_DWORD *)v154 == (_DWORD)v244)
            goto LABEL_205;
LABEL_202:
          v157 = v156 ^ (v156 >> 31);
          if (v157)
          {
            v158 = v245;
            *(_DWORD *)(v154 + 24) = v246;
            *(_OWORD *)(v154 + 8) = v158;
            *(_DWORD *)v154 = v157;
          }
          else
          {
            *(_QWORD *)(v154 + 8) = v245;
            *(_DWORD *)v154 = 0;
          }
LABEL_184:
          v109 = (uint64_t)(v138 + 8);
          v110 += 32;
          v111 = (uint64_t)v138;
          if (v138 + 8 != v140)
            continue;
          return result;
        }
    }
  }
}

uint64_t sub_10024BAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int ***a6)
{
  int v12;
  uint64_t result;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 *v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  int v59;

  sub_10024CB84(a1, a2, a3, a4, a6);
  v12 = sub_100242F68(*a6, a5);
  result = sub_100242F68(*a6, a4);
  if (v12 < (int)result)
  {
    v14 = *(_DWORD *)a4;
    v15 = *(int *)a4 >> 31;
    v17 = (_QWORD *)(a4 + 8);
    v16 = *(_QWORD *)(a4 + 8);
    if (v15 == *(_DWORD *)a4)
    {
      v18 = *(_DWORD *)a5;
      if (v14 == *(_DWORD *)a5)
      {
        v19 = 0;
        *v17 = *(_QWORD *)(a5 + 8);
        v20 = 0;
        if (*(_DWORD *)a5)
          goto LABEL_15;
        goto LABEL_12;
      }
      v19 = 0;
    }
    else
    {
      v58 = *(_QWORD *)(a4 + 16);
      v59 = *(_DWORD *)(a4 + 24);
      v19 = v15 ^ v14;
      v18 = *(_DWORD *)a5;
      if (v14 == *(_DWORD *)a5)
      {
        v21 = *(_OWORD *)(a5 + 8);
        *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
        *(_OWORD *)v17 = v21;
        v20 = v19 >> 31;
        if (*(_DWORD *)a5 != v19)
        {
LABEL_15:
          *(_QWORD *)(a5 + 8) = v16;
          if (v20 != v19)
          {
            *(_QWORD *)(a5 + 16) = v58;
            *(_DWORD *)(a5 + 24) = v59;
            *(_DWORD *)a5 = v20 ^ v19;
          }
          else
          {
            *(_DWORD *)a5 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(_QWORD *)(a5 + 8) = v16;
        if (v20 != v19)
        {
          *(_QWORD *)(a5 + 16) = v58;
          *(_DWORD *)(a5 + 24) = v59;
        }
LABEL_18:
        v25 = sub_100242F68(*a6, a4);
        result = sub_100242F68(*a6, a3);
        if (v25 >= (int)result)
          return result;
        v26 = *(_DWORD *)a3;
        v27 = *(int *)a3 >> 31;
        v29 = (_QWORD *)(a3 + 8);
        v28 = *(_QWORD *)(a3 + 8);
        if (v27 == *(_DWORD *)a3)
        {
          v30 = *(_DWORD *)a4;
          if (v26 == *(_DWORD *)a4)
          {
            v31 = 0;
            *v29 = *v17;
            v32 = 0;
            if (*(_DWORD *)a4)
              goto LABEL_32;
            goto LABEL_29;
          }
          v31 = 0;
        }
        else
        {
          v58 = *(_QWORD *)(a3 + 16);
          v59 = *(_DWORD *)(a3 + 24);
          v31 = v27 ^ v26;
          v30 = *(_DWORD *)a4;
          if (v26 == *(_DWORD *)a4)
          {
            v33 = *(_OWORD *)v17;
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
            *(_OWORD *)v29 = v33;
            v32 = v31 >> 31;
            if (*(_DWORD *)a4 != v31)
            {
LABEL_32:
              *v17 = v28;
              if (v32 != v31)
              {
                *(_QWORD *)(a4 + 16) = v58;
                *(_DWORD *)(a4 + 24) = v59;
                *(_DWORD *)a4 = v32 ^ v31;
              }
              else
              {
                *(_DWORD *)a4 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *v17 = v28;
            if (v32 != v31)
            {
              *(_QWORD *)(a4 + 16) = v58;
              *(_DWORD *)(a4 + 24) = v59;
            }
LABEL_35:
            v36 = sub_100242F68(*a6, a3);
            result = sub_100242F68(*a6, a2);
            if (v36 >= (int)result)
              return result;
            v37 = *(_DWORD *)a2;
            v38 = *(int *)a2 >> 31;
            v40 = (_QWORD *)(a2 + 8);
            v39 = *(_QWORD *)(a2 + 8);
            if (v38 == *(_DWORD *)a2)
            {
              v41 = *(_DWORD *)a3;
              if (v37 == *(_DWORD *)a3)
              {
                v42 = 0;
                *v40 = *v29;
                v43 = 0;
                if (*(_DWORD *)a3)
                  goto LABEL_49;
                goto LABEL_46;
              }
              v42 = 0;
            }
            else
            {
              v58 = *(_QWORD *)(a2 + 16);
              v59 = *(_DWORD *)(a2 + 24);
              v42 = v38 ^ v37;
              v41 = *(_DWORD *)a3;
              if (v37 == *(_DWORD *)a3)
              {
                v44 = *(_OWORD *)v29;
                *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
                *(_OWORD *)v40 = v44;
                v43 = v42 >> 31;
                if (*(_DWORD *)a3 != v42)
                {
LABEL_49:
                  *v29 = v39;
                  if (v43 != v42)
                  {
                    *(_QWORD *)(a3 + 16) = v58;
                    *(_DWORD *)(a3 + 24) = v59;
                    *(_DWORD *)a3 = v43 ^ v42;
                  }
                  else
                  {
                    *(_DWORD *)a3 = 0;
                  }
                  goto LABEL_52;
                }
LABEL_46:
                *v29 = v39;
                if (v43 != v42)
                {
                  *(_QWORD *)(a3 + 16) = v58;
                  *(_DWORD *)(a3 + 24) = v59;
                }
LABEL_52:
                v47 = sub_100242F68(*a6, a2);
                result = sub_100242F68(*a6, a1);
                if (v47 >= (int)result)
                  return result;
                v48 = *(_DWORD *)a1;
                v49 = *(int *)a1 >> 31;
                v51 = (_QWORD *)(a1 + 8);
                v50 = *(_QWORD *)(a1 + 8);
                if (v49 == *(_DWORD *)a1)
                {
                  v52 = *(_DWORD *)a2;
                  if (v48 == *(_DWORD *)a2)
                  {
                    v53 = 0;
                    *v51 = *v40;
                    goto LABEL_62;
                  }
                  v53 = 0;
                }
                else
                {
                  v58 = *(_QWORD *)(a1 + 16);
                  v59 = *(_DWORD *)(a1 + 24);
                  v53 = v49 ^ v48;
                  v52 = *(_DWORD *)a2;
                  if (v48 == *(_DWORD *)a2)
                  {
                    v54 = *(_OWORD *)v40;
                    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                    *(_OWORD *)v51 = v54;
LABEL_62:
                    v57 = v53 >> 31;
                    if (*(_DWORD *)a2 == v53)
                    {
                      *v40 = v50;
                      if (v57 != v53)
                      {
                        *(_QWORD *)(a2 + 16) = v58;
                        *(_DWORD *)(a2 + 24) = v59;
                      }
                    }
                    else
                    {
                      *v40 = v50;
                      if (v57 != v53)
                      {
                        *(_QWORD *)(a2 + 16) = v58;
                        *(_DWORD *)(a2 + 24) = v59;
                        *(_DWORD *)a2 = v57 ^ v53;
                      }
                      else
                      {
                        *(_DWORD *)a2 = 0;
                      }
                    }
                    return result;
                  }
                }
                v55 = v52 ^ (v52 >> 31);
                if (v55)
                {
                  v56 = *(_OWORD *)v40;
                  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                  *(_OWORD *)v51 = v56;
                  *(_DWORD *)a1 = v55;
                }
                else
                {
                  *(_QWORD *)(a1 + 8) = *v40;
                  *(_DWORD *)a1 = 0;
                }
                goto LABEL_62;
              }
            }
            v45 = v41 ^ (v41 >> 31);
            if (v45)
            {
              v46 = *(_OWORD *)v29;
              *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
              *(_OWORD *)v40 = v46;
              *(_DWORD *)a2 = v45;
              v43 = v42 >> 31;
              if (*(_DWORD *)a3 != v42)
                goto LABEL_49;
            }
            else
            {
              *(_QWORD *)(a2 + 8) = *v29;
              *(_DWORD *)a2 = 0;
              v43 = v42 >> 31;
              if (*(_DWORD *)a3 != v42)
                goto LABEL_49;
            }
            goto LABEL_46;
          }
        }
        v34 = v30 ^ (v30 >> 31);
        if (v34)
        {
          v35 = *(_OWORD *)v17;
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
          *(_OWORD *)v29 = v35;
          *(_DWORD *)a3 = v34;
          v32 = v31 >> 31;
          if (*(_DWORD *)a4 != v31)
            goto LABEL_32;
        }
        else
        {
          *(_QWORD *)(a3 + 8) = *v17;
          *(_DWORD *)a3 = 0;
          v32 = v31 >> 31;
          if (*(_DWORD *)a4 != v31)
            goto LABEL_32;
        }
        goto LABEL_29;
      }
    }
    v22 = v18 ^ (v18 >> 31);
    v23 = (__int128 *)(a5 + 8);
    if (v22)
    {
      v24 = *v23;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)v17 = v24;
      *(_DWORD *)a4 = v22;
      v20 = v19 >> 31;
      if (*(_DWORD *)a5 != v19)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)v23;
      *(_DWORD *)a4 = 0;
      v20 = v19 >> 31;
      if (*(_DWORD *)a5 != v19)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10024C020(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int ***a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  __int128 v35;
  int v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  int v40;
  __int128 *v41;
  __int128 v42;
  int v43;
  __int128 *v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 *v67;
  __int128 v68;
  uint64_t v69;
  int v70;

  v8 = sub_100242F68(*a4, a2);
  v9 = sub_100242F68(*a4, a1);
  v10 = sub_100242F68(*a4, a3);
  result = sub_100242F68(*a4, a2);
  if (v8 < v9)
  {
    v12 = (_QWORD *)(a1 + 8);
    if (v10 < (int)result)
    {
      v13 = *(_DWORD *)a1;
      v14 = *(int *)a1 >> 31;
      v15 = *(_QWORD *)(a1 + 8);
      if (v14 == *(_DWORD *)a1)
      {
        v16 = *(_DWORD *)a3;
        if (v13 == *(_DWORD *)a3)
        {
          v17 = 0;
          *v12 = *(_QWORD *)(a3 + 8);
          v18 = 0;
          if (*(_DWORD *)a3)
            goto LABEL_18;
          goto LABEL_31;
        }
        v17 = 0;
      }
      else
      {
        v69 = *(_QWORD *)(a1 + 16);
        v70 = *(_DWORD *)(a1 + 24);
        v17 = v14 ^ v13;
        v16 = *(_DWORD *)a3;
        if (v13 == *(_DWORD *)a3)
        {
          v32 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)v12 = v32;
          v18 = v17 >> 31;
          if (*(_DWORD *)a3 != v17)
            goto LABEL_18;
          goto LABEL_31;
        }
      }
      v37 = v16 ^ (v16 >> 31);
      v38 = (__int128 *)(a3 + 8);
      if (v37)
      {
        v39 = *v38;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v12 = v39;
        *(_DWORD *)a1 = v37;
        v18 = v17 >> 31;
        if (*(_DWORD *)a3 != v17)
          goto LABEL_18;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v38;
        *(_DWORD *)a1 = 0;
        v18 = v17 >> 31;
        if (*(_DWORD *)a3 != v17)
        {
LABEL_18:
          *(_QWORD *)(a3 + 8) = v15;
          v33 = v18 ^ v17;
          if (v33)
          {
LABEL_19:
            *(_QWORD *)(a3 + 16) = v69;
            *(_DWORD *)(a3 + 24) = v70;
            *(_DWORD *)a3 = v33;
            return result;
          }
          goto LABEL_62;
        }
      }
LABEL_31:
      *(_QWORD *)(a3 + 8) = v15;
      if (v18 == v17)
        return result;
LABEL_78:
      *(_QWORD *)(a3 + 16) = v69;
      *(_DWORD *)(a3 + 24) = v70;
      return result;
    }
    v26 = *(_DWORD *)a1;
    v27 = *(int *)a1 >> 31;
    v28 = *(_QWORD *)(a1 + 8);
    if (v27 == *(_DWORD *)a1)
    {
      v29 = *(_DWORD *)a2;
      if (v26 == *(_DWORD *)a2)
      {
        v30 = 0;
        *v12 = *(_QWORD *)(a2 + 8);
        v31 = 0;
        if (*(_DWORD *)a2)
          goto LABEL_26;
        goto LABEL_41;
      }
      v30 = 0;
    }
    else
    {
      v69 = *(_QWORD *)(a1 + 16);
      v70 = *(_DWORD *)(a1 + 24);
      v30 = v27 ^ v26;
      v29 = *(_DWORD *)a2;
      if (v26 == *(_DWORD *)a2)
      {
        v35 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_OWORD *)v12 = v35;
        v31 = v30 >> 31;
        if (*(_DWORD *)a2 != v30)
          goto LABEL_26;
        goto LABEL_41;
      }
    }
    v43 = v29 ^ (v29 >> 31);
    v44 = (__int128 *)(a2 + 8);
    if (v43)
    {
      v45 = *v44;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v12 = v45;
      *(_DWORD *)a1 = v43;
      v31 = v30 >> 31;
      if (*(_DWORD *)a2 != v30)
        goto LABEL_26;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v44;
      *(_DWORD *)a1 = 0;
      v31 = v30 >> 31;
      if (*(_DWORD *)a2 != v30)
      {
LABEL_26:
        *(_QWORD *)(a2 + 8) = v28;
        v36 = v31 ^ v30;
        if (v36)
        {
          *(_QWORD *)(a2 + 16) = v69;
          *(_DWORD *)(a2 + 24) = v70;
          *(_DWORD *)a2 = v36;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_54;
      }
    }
LABEL_41:
    *(_QWORD *)(a2 + 8) = v28;
    if (v31 != v30)
    {
      *(_QWORD *)(a2 + 16) = v69;
      *(_DWORD *)(a2 + 24) = v70;
    }
LABEL_54:
    v55 = sub_100242F68(*a4, a3);
    result = sub_100242F68(*a4, a2);
    if (v55 >= (int)result)
      return result;
    v56 = *(_DWORD *)a2;
    v57 = *(int *)a2 >> 31;
    v59 = (_QWORD *)(a2 + 8);
    v58 = *(_QWORD *)(a2 + 8);
    if (v57 == *(_DWORD *)a2)
    {
      v60 = *(_DWORD *)a3;
      if (v56 == *(_DWORD *)a3)
      {
        v61 = 0;
        *v59 = *(_QWORD *)(a3 + 8);
        v62 = 0;
        if (*(_DWORD *)a3)
          goto LABEL_61;
        goto LABEL_77;
      }
      v61 = 0;
    }
    else
    {
      v69 = *(_QWORD *)(a2 + 16);
      v70 = *(_DWORD *)(a2 + 24);
      v61 = v57 ^ v56;
      v60 = *(_DWORD *)a3;
      if (v56 == *(_DWORD *)a3)
      {
        v63 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v59 = v63;
        v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
          goto LABEL_61;
        goto LABEL_77;
      }
    }
    v66 = v60 ^ (v60 >> 31);
    v67 = (__int128 *)(a3 + 8);
    if (v66)
    {
      v68 = *v67;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v59 = v68;
      *(_DWORD *)a2 = v66;
      v62 = v61 >> 31;
      if (*(_DWORD *)a3 != v61)
        goto LABEL_61;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *(_QWORD *)v67;
      *(_DWORD *)a2 = 0;
      v62 = v61 >> 31;
      if (*(_DWORD *)a3 != v61)
      {
LABEL_61:
        *(_QWORD *)(a3 + 8) = v58;
        v33 = v62 ^ v61;
        if (v62 != v61)
          goto LABEL_19;
LABEL_62:
        *(_DWORD *)a3 = 0;
        return result;
      }
    }
LABEL_77:
    *(_QWORD *)(a3 + 8) = v58;
    if (v62 == v61)
      return result;
    goto LABEL_78;
  }
  if (v10 >= (int)result)
    return result;
  v19 = *(_DWORD *)a2;
  v20 = *(int *)a2 >> 31;
  v22 = (_QWORD *)(a2 + 8);
  v21 = *(_QWORD *)(a2 + 8);
  if (v20 == *(_DWORD *)a2)
  {
    v23 = *(_DWORD *)a3;
    if (v19 == *(_DWORD *)a3)
    {
      v24 = 0;
      *v22 = *(_QWORD *)(a3 + 8);
      v25 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_22;
      goto LABEL_36;
    }
    v24 = 0;
  }
  else
  {
    v69 = *(_QWORD *)(a2 + 16);
    v70 = *(_DWORD *)(a2 + 24);
    v24 = v20 ^ v19;
    v23 = *(_DWORD *)a3;
    if (v19 == *(_DWORD *)a3)
    {
      v34 = *(_OWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v22 = v34;
      v25 = v24 >> 31;
      if (*(_DWORD *)a3 != v24)
        goto LABEL_22;
      goto LABEL_36;
    }
  }
  v40 = v23 ^ (v23 >> 31);
  v41 = (__int128 *)(a3 + 8);
  if (v40)
  {
    v42 = *v41;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    *(_OWORD *)v22 = v42;
    *(_DWORD *)a2 = v40;
    v25 = v24 >> 31;
    if (*(_DWORD *)a3 != v24)
      goto LABEL_22;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)v41;
    *(_DWORD *)a2 = 0;
    v25 = v24 >> 31;
    if (*(_DWORD *)a3 != v24)
    {
LABEL_22:
      *(_QWORD *)(a3 + 8) = v21;
      if (v25 != v24)
      {
        *(_QWORD *)(a3 + 16) = v69;
        *(_DWORD *)(a3 + 24) = v70;
        *(_DWORD *)a3 = v25 ^ v24;
      }
      else
      {
        *(_DWORD *)a3 = 0;
      }
      goto LABEL_44;
    }
  }
LABEL_36:
  *(_QWORD *)(a3 + 8) = v21;
  if (v25 != v24)
  {
    *(_QWORD *)(a3 + 16) = v69;
    *(_DWORD *)(a3 + 24) = v70;
  }
LABEL_44:
  v46 = sub_100242F68(*a4, a2);
  result = sub_100242F68(*a4, a1);
  if (v46 >= (int)result)
    return result;
  v47 = *(_DWORD *)a1;
  v48 = *(int *)a1 >> 31;
  v50 = (_QWORD *)(a1 + 8);
  v49 = *(_QWORD *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v52 = 0;
      *v50 = *v22;
      v53 = 0;
      if (*(_DWORD *)a2)
        goto LABEL_51;
      goto LABEL_72;
    }
    v52 = 0;
  }
  else
  {
    v69 = *(_QWORD *)(a1 + 16);
    v70 = *(_DWORD *)(a1 + 24);
    v52 = v48 ^ v47;
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v54 = *(_OWORD *)v22;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v50 = v54;
      v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52)
        goto LABEL_51;
      goto LABEL_72;
    }
  }
  v64 = v51 ^ (v51 >> 31);
  if (v64)
  {
    v65 = *(_OWORD *)v22;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v50 = v65;
    *(_DWORD *)a1 = v64;
    v53 = v52 >> 31;
    if (*(_DWORD *)a2 != v52)
      goto LABEL_51;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *v22;
    *(_DWORD *)a1 = 0;
    v53 = v52 >> 31;
    if (*(_DWORD *)a2 != v52)
    {
LABEL_51:
      *v22 = v49;
      if (v53 != v52)
      {
        *(_QWORD *)(a2 + 16) = v69;
        *(_DWORD *)(a2 + 24) = v70;
        *(_DWORD *)a2 = v53 ^ v52;
      }
      else
      {
        *(_DWORD *)a2 = 0;
      }
      return result;
    }
  }
LABEL_72:
  *v22 = v49;
  if (v53 != v52)
  {
    *(_QWORD *)(a2 + 16) = v69;
    *(_DWORD *)(a2 + 24) = v70;
  }
  return result;
}

BOOL sub_10024C710(uint64_t a1, _DWORD *a2, unsigned int ***a3)
{
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  __int128 *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;

  v6 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 8;
      v9 = sub_100242F68(*a3, (uint64_t)(a2 - 8));
      if (v9 >= (int)sub_100242F68(*a3, a1))
        return 1;
      v10 = *(_DWORD *)a1;
      v11 = *(int *)a1 >> 31;
      v13 = (_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 8);
      if (v11 == *(_DWORD *)a1)
      {
        v14 = *v8;
        if (v10 == *v8)
        {
          v15 = 0;
          *v13 = *((_QWORD *)a2 - 3);
          v16 = 0;
          if (*v8)
            goto LABEL_49;
LABEL_46:
          *((_QWORD *)a2 - 3) = v12;
          if (v16 != v15)
          {
            *((_QWORD *)a2 - 2) = v45;
            *(a2 - 2) = v46;
          }
          return 1;
        }
        v15 = 0;
      }
      else
      {
        v45 = *(_QWORD *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        v15 = v11 ^ v10;
        v14 = *v8;
        if (v10 == *v8)
        {
          v41 = *(_OWORD *)(a2 - 6);
          *(_DWORD *)(a1 + 24) = *(a2 - 2);
          *(_OWORD *)v13 = v41;
          v16 = v15 >> 31;
          if (*v8 != v15)
          {
LABEL_49:
            *((_QWORD *)a2 - 3) = v12;
            if (v16 != v15)
            {
              *((_QWORD *)a2 - 2) = v45;
              *(a2 - 2) = v46;
              *(a2 - 8) = v16 ^ v15;
            }
            else
            {
              *v8 = 0;
            }
            return 1;
          }
          goto LABEL_46;
        }
      }
      v42 = v14 ^ (v14 >> 31);
      v43 = (__int128 *)(a2 - 6);
      if (v42)
      {
        v44 = *v43;
        *(_DWORD *)(a1 + 24) = *(a2 - 2);
        *(_OWORD *)v13 = v44;
        *(_DWORD *)a1 = v42;
        v16 = v15 >> 31;
        if (*v8 != v15)
          goto LABEL_49;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v43;
        *(_DWORD *)a1 = 0;
        v16 = v15 >> 31;
        if (*v8 != v15)
          goto LABEL_49;
      }
      goto LABEL_46;
    case 3:
      sub_10024C020(a1, a1 + 32, (uint64_t)(a2 - 8), a3);
      return 1;
    case 4:
      sub_10024CB84(a1, a1 + 32, a1 + 64, (uint64_t)(a2 - 8), a3);
      return 1;
    case 5:
      sub_10024BAC4(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)(a2 - 8), a3);
      return 1;
    default:
      v17 = a1 + 64;
      sub_10024C020(a1, a1 + 32, a1 + 64, a3);
      v18 = (_DWORD *)(a1 + 96);
      if ((_DWORD *)(a1 + 96) == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      while (2)
      {
        v21 = sub_100242F68(*a3, (uint64_t)v18);
        if (v21 >= (int)sub_100242F68(*a3, v17))
          goto LABEL_11;
        v23 = v18 + 2;
        v22 = *v18;
        v24 = (int)*v18 >> 31;
        if (v22 >> 31 == v22)
        {
          *(_QWORD *)&v46 = *v23;
          v24 = v22;
        }
        else
        {
          v46 = *(_OWORD *)v23;
          v47 = v18[6];
        }
        LODWORD(v45) = v24 ^ v22;
        v25 = v19;
        while (2)
        {
          v26 = (_DWORD *)(a1 + v25);
          v27 = *(_DWORD *)(a1 + v25 + 96);
          v28 = *(_DWORD *)(a1 + v25 + 64);
          if (v27 == v28)
          {
            v29 = v26 + 18;
            v30 = v26 + 26;
            if (v27 == v27 >> 31)
            {
              *(_QWORD *)v30 = *(_QWORD *)v29;
              if (v25 == -64)
                goto LABEL_31;
            }
            else
            {
              *(_OWORD *)v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              if (v25 == -64)
                goto LABEL_31;
            }
LABEL_27:
            v34 = sub_100242F68(*a3, (uint64_t)&v45);
            v35 = sub_100242F68(*a3, a1 + v25 + 32);
            v25 -= 32;
            if (v34 >= v35)
            {
              v36 = a1 + v25 + 96;
              v37 = *(_DWORD *)v36;
              v38 = v45;
              if (*(_DWORD *)v36 != (_DWORD)v45)
                goto LABEL_29;
LABEL_32:
              v40 = v36 + 8;
              if (v37 == v37 >> 31)
              {
                *(_QWORD *)v40 = v46;
              }
              else
              {
                *(_OWORD *)v40 = v46;
                *(_DWORD *)(v40 + 16) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        v31 = v28 ^ (v28 >> 31);
        v32 = v26 + 18;
        v33 = v26 + 26;
        if (v31)
        {
          *v33 = *v32;
          v26[30] = v26[22];
          v26[24] = v31;
          if (v25 == -64)
            goto LABEL_31;
          goto LABEL_27;
        }
        *(_QWORD *)v33 = *(_QWORD *)v32;
        v26[24] = 0;
        if (v25 != -64)
          goto LABEL_27;
LABEL_31:
        v36 = a1;
        v37 = *(_DWORD *)a1;
        v38 = v45;
        if (*(_DWORD *)a1 == (_DWORD)v45)
          goto LABEL_32;
LABEL_29:
        v39 = v38 ^ (v38 >> 31);
        if (v39)
        {
          *(_OWORD *)(v36 + 8) = v46;
          *(_DWORD *)(v36 + 24) = v47;
          *(_DWORD *)v36 = v39;
        }
        else
        {
          *(_QWORD *)(v36 + 8) = v46;
          *(_DWORD *)v36 = 0;
        }
LABEL_10:
        if (++v20 != 8)
        {
LABEL_11:
          v17 = (uint64_t)v18;
          v19 += 32;
          v18 += 8;
          if (v18 != a2)
            continue;
          return 1;
        }
        return v18 + 8 == a2;
      }
  }
}

uint64_t sub_10024CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int ***a5)
{
  int v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 *v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  sub_10024C020(a1, a2, a3, a5);
  v10 = sub_100242F68(*a5, a4);
  result = sub_100242F68(*a5, a3);
  if (v10 >= (int)result)
    return result;
  v12 = *(_DWORD *)a3;
  v13 = *(int *)a3 >> 31;
  v15 = (_QWORD *)(a3 + 8);
  v14 = *(_QWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)a3)
  {
    v16 = *(_DWORD *)a4;
    if (v12 == *(_DWORD *)a4)
    {
      v17 = 0;
      *v15 = *(_QWORD *)(a4 + 8);
      v18 = 0;
      if (*(_DWORD *)a4)
        goto LABEL_15;
      goto LABEL_12;
    }
    v17 = 0;
LABEL_10:
    v20 = v16 ^ (v16 >> 31);
    v21 = (__int128 *)(a4 + 8);
    if (v20)
    {
      v22 = *v21;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)v15 = v22;
      *(_DWORD *)a3 = v20;
      v18 = v17 >> 31;
      if (*(_DWORD *)a4 != v17)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = *(_QWORD *)v21;
      *(_DWORD *)a3 = 0;
      v18 = v17 >> 31;
      if (*(_DWORD *)a4 != v17)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  v45 = *(_QWORD *)(a3 + 16);
  v46 = *(_DWORD *)(a3 + 24);
  v17 = v13 ^ v12;
  v16 = *(_DWORD *)a4;
  if (v12 != *(_DWORD *)a4)
    goto LABEL_10;
  v19 = *(_OWORD *)(a4 + 8);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)v15 = v19;
  v18 = v17 >> 31;
  if (*(_DWORD *)a4 != v17)
  {
LABEL_15:
    *(_QWORD *)(a4 + 8) = v14;
    if (v18 != v17)
    {
      *(_QWORD *)(a4 + 16) = v45;
      *(_DWORD *)(a4 + 24) = v46;
      *(_DWORD *)a4 = v18 ^ v17;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(_QWORD *)(a4 + 8) = v14;
  if (v18 != v17)
  {
    *(_QWORD *)(a4 + 16) = v45;
    *(_DWORD *)(a4 + 24) = v46;
  }
LABEL_18:
  v23 = sub_100242F68(*a5, a3);
  result = sub_100242F68(*a5, a2);
  if (v23 >= (int)result)
    return result;
  v24 = *(_DWORD *)a2;
  v25 = *(int *)a2 >> 31;
  v27 = (_QWORD *)(a2 + 8);
  v26 = *(_QWORD *)(a2 + 8);
  if (v25 == *(_DWORD *)a2)
  {
    v28 = *(_DWORD *)a3;
    if (v24 == *(_DWORD *)a3)
    {
      v29 = 0;
      *v27 = *v15;
      v30 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_32;
      goto LABEL_29;
    }
    v29 = 0;
LABEL_27:
    v32 = v28 ^ (v28 >> 31);
    if (v32)
    {
      v33 = *(_OWORD *)v15;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v27 = v33;
      *(_DWORD *)a2 = v32;
      v30 = v29 >> 31;
      if (*(_DWORD *)a3 != v29)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *v15;
      *(_DWORD *)a2 = 0;
      v30 = v29 >> 31;
      if (*(_DWORD *)a3 != v29)
        goto LABEL_32;
    }
    goto LABEL_29;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_DWORD *)(a2 + 24);
  v29 = v25 ^ v24;
  v28 = *(_DWORD *)a3;
  if (v24 != *(_DWORD *)a3)
    goto LABEL_27;
  v31 = *(_OWORD *)v15;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)v27 = v31;
  v30 = v29 >> 31;
  if (*(_DWORD *)a3 != v29)
  {
LABEL_32:
    *v15 = v26;
    if (v30 != v29)
    {
      *(_QWORD *)(a3 + 16) = v45;
      *(_DWORD *)(a3 + 24) = v46;
      *(_DWORD *)a3 = v30 ^ v29;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *v15 = v26;
  if (v30 != v29)
  {
    *(_QWORD *)(a3 + 16) = v45;
    *(_DWORD *)(a3 + 24) = v46;
  }
LABEL_35:
  v34 = sub_100242F68(*a5, a2);
  result = sub_100242F68(*a5, a1);
  if (v34 >= (int)result)
    return result;
  v35 = *(_DWORD *)a1;
  v36 = *(int *)a1 >> 31;
  v38 = (_QWORD *)(a1 + 8);
  v37 = *(_QWORD *)(a1 + 8);
  if (v36 == *(_DWORD *)a1)
  {
    v39 = *(_DWORD *)a2;
    if (v35 == *(_DWORD *)a2)
    {
      v40 = 0;
      *v38 = *v27;
      v41 = 0;
      if (*(_DWORD *)a2)
        goto LABEL_49;
      goto LABEL_46;
    }
    v40 = 0;
  }
  else
  {
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(_DWORD *)(a1 + 24);
    v40 = v36 ^ v35;
    v39 = *(_DWORD *)a2;
    if (v35 == *(_DWORD *)a2)
    {
      v42 = *(_OWORD *)v27;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v38 = v42;
      v41 = v40 >> 31;
      if (*(_DWORD *)a2 != v40)
      {
LABEL_49:
        *v27 = v37;
        if (v41 != v40)
        {
          *(_QWORD *)(a2 + 16) = v45;
          *(_DWORD *)(a2 + 24) = v46;
          *(_DWORD *)a2 = v41 ^ v40;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        return result;
      }
      goto LABEL_46;
    }
  }
  v43 = v39 ^ (v39 >> 31);
  if (v43)
  {
    v44 = *(_OWORD *)v27;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v38 = v44;
    *(_DWORD *)a1 = v43;
    v41 = v40 >> 31;
    if (*(_DWORD *)a2 != v40)
      goto LABEL_49;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *v27;
    *(_DWORD *)a1 = 0;
    v41 = v40 >> 31;
    if (*(_DWORD *)a2 != v40)
      goto LABEL_49;
  }
LABEL_46:
  *v27 = v37;
  if (v41 != v40)
  {
    *(_QWORD *)(a2 + 16) = v45;
    *(_DWORD *)(a2 + 24) = v46;
  }
  return result;
}

unsigned int *sub_10024CFC0(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int *result;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  _QWORD *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;

  if (a1 == a2 || a1 + 8 == a2)
    return (unsigned int *)a2;
  v2 = 0;
  v3 = *a1;
  while (1)
  {
    v4 = &a1[v2];
    v5 = v3 ^ (v3 >> 31);
    v3 = a1[v2 + 8];
    if (v5 == ((v3 >> 31) ^ v3))
    {
      if (v3 >> 31 == v3)
      {
        if (*((_QWORD *)v4 + 1) == *((_QWORD *)v4 + 5))
          break;
        goto LABEL_5;
      }
      v6 = *((_QWORD *)v4 + 1);
      v7 = *((_QWORD *)v4 + 2);
      v8 = *((_QWORD *)v4 + 5);
      v9 = *((_QWORD *)v4 + 6);
      v10 = v4[6];
      v11 = v4[14];
      v12 = v6 == v8 && v7 == v9;
      if (v12 && v10 == v11)
        break;
    }
LABEL_5:
    v2 += 8;
    if (&a1[v2 + 8] == a2)
      return (unsigned int *)a2;
  }
  result = (unsigned int *)&a1[v2];
  if (result != (unsigned int *)a2)
  {
    if (result + 16 != (unsigned int *)a2)
    {
      v15 = result + 18;
      v16 = *result;
      while (1)
      {
        v17 = *(v15 - 2);
        v20 = (int)v17 >> 31;
        v21 = ((int)v17 >> 31) ^ v17;
        if ((v16 ^ ((int)v16 >> 31)) != v21)
          break;
        if (v20 == (_DWORD)v17)
        {
          if (*((_QWORD *)result + 1) != *(_QWORD *)v15)
            break;
        }
        else if (*((_QWORD *)result + 1) != *(_QWORD *)v15
               || *((_QWORD *)result + 2) != *((_QWORD *)v15 + 1)
               || result[6] != (unint64_t)v15[4])
        {
          break;
        }
        v17 = v16;
        v18 = result;
LABEL_21:
        v19 = v15 + 6;
        v15 += 8;
        v16 = v17;
        result = v18;
        if (v19 == (unsigned int *)a2)
          return v18 + 8;
      }
      v18 = result + 8;
      if (result[8] == (_DWORD)v17)
      {
        v24 = result + 10;
        if (v20 == (_DWORD)v17)
        {
          *v24 = *(_QWORD *)v15;
        }
        else
        {
          v27 = *(_OWORD *)v15;
          result[14] = v15[4];
          *(_OWORD *)v24 = v27;
        }
      }
      else
      {
        v25 = result + 10;
        if (v21)
        {
          v26 = *(_OWORD *)v15;
          result[14] = v15[4];
          *v25 = v26;
          *v18 = v21;
          v17 = v20 ^ v17;
        }
        else
        {
          v17 = 0;
          *(_QWORD *)v25 = *(_QWORD *)v15;
          *v18 = 0;
        }
      }
      goto LABEL_21;
    }
    result += 8;
  }
  return result;
}

void sub_10024D174(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_10024D174(a1, *a2);
    sub_10024D174(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[9];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

std::string *sub_10024D1FC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024D22C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10024D248(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024D258(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10024D288(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t *sub_10024D2E4(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 *v7;
  uint64_t *v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v19;
  int v20;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = (unsigned __int8 *)(a3 + 2);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        v10 = v9 >> 31;
        v11 = v8 + 5;
        if (v9 >> 31 == v9)
        {
          *(_QWORD *)&v19 = *v11;
          v10 = v9;
        }
        else
        {
          v19 = *(_OWORD *)v11;
          v20 = *((_DWORD *)v8 + 14);
        }
        v12 = v10 ^ v9;
        v13 = *a3;
        v14 = *a3 >> 31;
        v15 = v12 >> 31;
        if (v14 == *a3)
          break;
        if (v15 == v12)
          goto LABEL_14;
        if (!sub_1001D7688(v7, (unsigned __int8 *)&v19))
        {
          v13 = *a3;
          v14 = *a3 >> 31;
          goto LABEL_14;
        }
LABEL_3:
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_25;
      }
      if (v15 != v12 || *(_QWORD *)v7 < (unint64_t)v19)
        goto LABEL_3;
LABEL_14:
      if (v14 == v13)
      {
        *(_QWORD *)&v19 = *(_QWORD *)v7;
        v16 = 0;
        v17 = 0;
        if (*((_DWORD *)v8 + 8) != *((int *)v8 + 8) >> 31)
          goto LABEL_16;
      }
      else
      {
        v19 = *(_OWORD *)v7;
        v20 = *((_DWORD *)v7 + 4);
        v16 = v14 ^ v13;
        v17 = v16 >> 31;
        if (*((_DWORD *)v8 + 8) != *((int *)v8 + 8) >> 31)
        {
LABEL_16:
          if (v17 == v16 || !sub_1001D7688((unsigned __int8 *)v8 + 40, (unsigned __int8 *)&v19))
            goto LABEL_25;
          goto LABEL_22;
        }
      }
      if (v17 == v16 && *v11 >= (unint64_t)v19)
        goto LABEL_25;
LABEL_22:
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_25;
    }
  }
  v8 = (uint64_t *)(a1 + 8);
LABEL_25:
  *a2 = v8;
  return v5;
}

uint64_t *sub_10024D4B0(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  __int128 v17;
  int v18;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (unsigned __int8 *)(a2 + 2);
  v6 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v7 = *a2;
      v8 = *a2 >> 31;
      if (v7 >> 31 == v7)
      {
        *(_QWORD *)&v17 = *(_QWORD *)v5;
        v8 = v7;
      }
      else
      {
        v17 = *(_OWORD *)v5;
        v18 = *((_DWORD *)v5 + 4);
      }
      v9 = v8 ^ v7;
      v10 = (unsigned __int8 *)(v3 + 5);
      v11 = v9 >> 31;
      if (*((_DWORD *)v3 + 8) != *((int *)v3 + 8) >> 31)
        break;
      if (v11 == v9 && *(_QWORD *)v10 >= (unint64_t)v17)
        goto LABEL_13;
LABEL_3:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_14;
    }
    if (v11 != v9 && sub_1001D7688(v10, (unsigned __int8 *)&v17))
      goto LABEL_3;
LABEL_13:
    v6 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_14:
  if (v6 == v2)
    return v2;
  v12 = *((_DWORD *)v6 + 8);
  v13 = v6 + 5;
  if (v12 >> 31 == v12)
  {
    *(_QWORD *)&v17 = *v13;
    v14 = 0;
    v15 = 0;
    if (*a2 != *a2 >> 31)
    {
LABEL_17:
      if (v15 == v14 || !sub_1001D7688(v5, (unsigned __int8 *)&v17))
        return v6;
      return v2;
    }
  }
  else
  {
    v17 = *(_OWORD *)v13;
    v18 = *((_DWORD *)v6 + 14);
    v14 = (v12 >> 31) ^ v12;
    v15 = v14 >> 31;
    if (*a2 != *a2 >> 31)
      goto LABEL_17;
  }
  if (v15 != v14 || *(_QWORD *)v5 < (unint64_t)v17)
    return v2;
  return v6;
}

uint64_t sub_10024D670()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024D6CC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024D72C(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  sub_10004F6B4(&v5, a2);
  sub_100050B4C(a1, &v5);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 104))(*(_QWORD *)(a1 + 48), a2);
}

void sub_10024D77C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;

  sub_10004F6B4(&v9, a2);
  sub_100050B4C(a1, &v9);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 96))(*(_QWORD *)(a1 + 48), a2);
  sub_100341698(*(_QWORD *)(a1 + 48), &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t sub_10024D820(uint64_t a1, int a2)
{
  return sub_100341018(*(_QWORD *)(a1 + 64), a2);
}

double sub_10024D828(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 32);
  if (result == 0.0)
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    result = result * -1.83787707;
    *(double *)(a2 + 24) = result
                         * (double)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  }
  return result;
}

void sub_10024D874(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_100341714(*(_QWORD *)(a1 + 48), a2);
}

double sub_10024D87C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  sub_100050B4C(a1, a2);
  if (!*(_BYTE *)(a1 + 40) || !*(_QWORD *)(a1 + 80))
    return 0.0;
  v3 = sub_100341690(*(_QWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 64);
  v5 = sub_1000B74C8(v4);
  sub_1000B72A0(v4);
  return sub_1002BD318(v3, v5, *(_QWORD *)(a1 + 80));
}

BOOL sub_10024D8F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) != 0;
}

long double sub_10024D908(uint64_t a1, uint64_t a2)
{
  return sub_1002424A0(*(_QWORD *)(a1 + 120), a2);
}

void sub_10024D910(uint64_t a1, uint64_t a2)
{
  int v4;

  sub_100341008(*(_QWORD *)(a1 + 64), a2);
  if ((*(_BYTE *)(a2 + 80) & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    if (v4 >= 10)
      sub_100341010(*(_QWORD *)(a1 + 64), *(double *)(a2 + 32) / (double)v4);
  }
}

void sub_10024DA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024DA68(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10024DA94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024DAA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10024DAD4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;
  void *v13;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 120))
      *(_BYTE *)(a2 + 120) = 0;
    v3 = *(std::__shared_weak_count **)(a2 + 104);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = *(void (****)(_QWORD))(a2 + 64);
    if (v6)
    {
      v7 = *(void (****)(_QWORD))(a2 + 72);
      v8 = *(void **)(a2 + 64);
      if (v7 != v6)
      {
        v9 = v7 - 12;
        v10 = v7 - 12;
        do
        {
          v11 = *v10;
          v10 -= 12;
          (*v11)(v9);
          v12 = v9 == v6;
          v9 = v10;
        }
        while (!v12);
        v8 = *(void **)(a2 + 64);
      }
      *(_QWORD *)(a2 + 72) = v6;
      operator delete(v8);
    }
    v13 = *(void **)(a2 + 24);
    if (v13)
    {
      *(_QWORD *)(a2 + 32) = v13;
      operator delete(v13);
    }
    operator delete();
  }
}

uint64_t sub_10024DBB0(uint64_t *a1, _QWORD *a2, _QWORD *a3, double *a4, int *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = (a1[1] - *a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    sub_1000D02C0();
  v12 = a1[2] - *a1;
  if (v12 >> 4 > v7)
    v7 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  if (v13)
  {
    if (v13 >> 59)
      sub_1000CDEB8();
    v14 = (char *)operator new(32 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = sub_100051D94((uint64_t)&v14[32 * v6], a2, a3, *a5, *a4);
  v16 = v15 + 32;
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_OWORD *)v17 - 2);
      *(_OWORD *)(v15 - 20) = *(_OWORD *)(v17 - 20);
      *(_OWORD *)(v15 - 32) = v19;
      v15 -= 32;
      v17 -= 32;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = (uint64_t)&v14[32 * v13];
  if (v17)
    operator delete(v17);
  return v16;
}

void sub_10024DCC8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_10024DCE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF3E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024DCF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003FF3E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10024DD20()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024DD7C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024DDD8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024DE34()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024DE90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_10024DEFC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  _BYTE v21[16];
  std::__shared_weak_count *v22;
  void *__p;
  void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v6 = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  v20.n128_u64[0] = *(_QWORD *)(a1 + 32);
  v20.n128_u64[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = sub_10026D214((uint64_t)v21, v6, &v20);
  v11 = (std::__shared_weak_count *)v20.n128_u64[1];
  if (v20.n128_u64[1])
  {
    v12 = (unint64_t *)(v20.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _BYTE *, __n128))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a1 + 8, a2, v21, v10);
  v14 = (uint64_t)(a3[1] - *a3) >> 4;
  v18 = (uint64_t)(a2[1] - *a2) >> 5;
  v19 = v14;
  if (v14 != v18)
  {
    sub_1000D5048(v24, "");
    sub_10024E3EC("unexpected number of radio map entries returned, ", &v26);
    sub_1001E2B30(&v19, &v27);
    sub_10024E438(" expecting, ", &v28);
    sub_1001E2B30(&v18, &v29);
    sub_100174738((uint64_t)v24, (uint64_t)&v26, 4);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v29.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_18:
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_24;
      }
    }
    else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_21;
LABEL_26:
      operator delete(v24[0]);
LABEL_21:
      sub_1000F2AE4((uint64_t)&__p);
    }
LABEL_25:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_26;
  }
  v15 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_10024E148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void **v27;

  if (a21 < 0)
    operator delete(__p);
  sub_1000F7D3C(v27);
  sub_10024DE90((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_10024E194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void **v22;

  while (1)
  {
    if (*((char *)v22 - 1) < 0)
      operator delete(*(v22 - 3));
    v22 -= 3;
    if (v22 == (void **)&a22)
      JUMPOUT(0x10024E164);
  }
}

void sub_10024E1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10024DE90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E1E8(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __n128 v19;
  _BYTE v20[16];
  std::__shared_weak_count *v21;
  _BYTE v22[24];
  _BYTE *v23;

  v4 = *(_DWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v19.n128_u64[0] = *(_QWORD *)(a1 + 32);
  v19.n128_u64[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_10026D214((uint64_t)v20, v4, &v19);
  v9 = (std::__shared_weak_count *)v19.n128_u64[1];
  if (!v19.n128_u64[1])
    goto LABEL_8;
  v10 = (unint64_t *)(v19.n128_u64[1] + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = a2[3];
    if (!v13)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v12 = *(_QWORD *)(a1 + 48);
    v13 = a2[3];
    if (!v13)
    {
LABEL_11:
      v23 = (_BYTE *)v13;
      goto LABEL_15;
    }
  }
  if ((_QWORD *)v13 != a2)
  {
    v13 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v13 + 16))(v13, v8);
    goto LABEL_11;
  }
  v23 = v22;
  (*(void (**)(_QWORD *, _BYTE *, __n128))(*a2 + 24))(a2, v22, v8);
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _BYTE *, __n128))(*(_QWORD *)v12 + 24))(v12, a1 + 8, v20, v22, v8);
  v14 = v23;
  if (v23 == v22)
  {
    v15 = 4;
    v14 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_20:
  v16 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_10024E384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10024DE90((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_10024DE90((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_10024E3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_10024E3EC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024E41C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10024E438@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024E468(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024E484()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10024E4E0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10024E53C(uint64_t a1@<X0>, uint64_t ***a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v27[8];
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  int v32;

  v8 = a1 + 64;
  if (sub_1000A9A88(a1 + 64, a2))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_10024E91C(a4, (uint64_t)(a3[1] - *a3) >> 5);
    v9 = sub_100258778(v8, a2);
    v10 = (_DWORD *)*a3;
    v11 = (_DWORD *)a3[1];
    if ((_DWORD *)*a3 != v11)
    {
      v12 = v9;
      v13 = a1 + 8;
      do
      {
        v15 = v10 + 2;
        v14 = *v10;
        v16 = (int)*v10 >> 31;
        if (v14 >> 31 == v14)
        {
          *(_QWORD *)&v30 = *v15;
          v16 = v14;
        }
        else
        {
          v17 = *(_OWORD *)v15;
          v31 = v10[6];
          v30 = v17;
        }
        v29 = v16 ^ v14;
        v32 = v12;
        sub_10024EA80(v13, &v29, (uint64_t)v27);
        v18 = *(_QWORD *)(a4 + 8);
        if (v18 >= *(_QWORD *)(a4 + 16))
        {
          v19 = sub_1002500A0(a4, (uint64_t)v27);
        }
        else
        {
          *(_BYTE *)v18 = 0;
          if (v27[0])
          {
            *(_OWORD *)(v18 + 8) = v28;
            v28 = 0uLL;
            *(_BYTE *)v18 = 1;
          }
          v19 = v18 + 24;
        }
        *(_QWORD *)(a4 + 8) = v19;
        if (v27[0])
        {
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
          if (*((_QWORD *)&v28 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
  }
  else
  {
    v23 = (uint64_t)(a3[1] - *a3) >> 5;
    LOBYTE(v29) = 0;
    sub_10024E7C4((char **)a4, v23, (unsigned __int8 *)&v29);
    if ((_BYTE)v29)
    {
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
}

void sub_10024E758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E93AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E76C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001E2850(v1);
  _Unwind_Resume(a1);
}

void sub_10024E780(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001E2850(v1);
  _Unwind_Resume(a1);
}

void sub_10024E794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_1001E93AC((uint64_t)va);
  sub_1001E2850(v2);
  _Unwind_Resume(a1);
}

void sub_10024E7B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001E2850(v1);
  _Unwind_Resume(a1);
}

char **sub_10024E7C4(char **a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v6 = 24 * a2;
    v7 = (char *)operator new(24 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[24 * a2];
    a1[2] = v8;
    if (*a3)
    {
      *v7 = 0;
LABEL_5:
      v9 = *((_QWORD *)a3 + 2);
      *((_QWORD *)v7 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)v7 + 2) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      *v7 = 1;
      while (1)
      {
        v7 += 24;
        if (v7 == v8)
          goto LABEL_18;
        v12 = *a3;
        *v7 = 0;
        if (v12)
          goto LABEL_5;
      }
    }
    if ((unint64_t)(v6 - 24) >= 0x18)
    {
      v14 = (v6 - 24) / 0x18uLL + 1;
      v13 = &v7[24 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
      v15 = v14 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *v7 = 0;
        v7[24] = 0;
        v7 += 48;
        v15 -= 2;
      }
      while (v15);
      if (v14 == (v14 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_18;
    }
    else
    {
      v13 = v7;
    }
    do
    {
      *v13 = 0;
      v13 += 24;
    }
    while (v13 != v8);
LABEL_18:
    a1[1] = v8;
  }
  return a1;
}

void sub_10024E8FC(_Unwind_Exception *exception_object)
{
  void **v1;

  if (*v1)
    sub_10034412C(v1 + 1, *v1, v1);
  _Unwind_Resume(exception_object);
}

void sub_10024E91C(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_20:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      v10 = v9;
      v11 = v4;
      do
      {
        *(v10 - 24) = 0;
        v10 -= 24;
        v12 = *(v11 - 24);
        v11 -= 24;
        if (v12)
        {
          *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
          *((_QWORD *)v4 - 2) = 0;
          *((_QWORD *)v4 - 1) = 0;
          *(v9 - 24) = 1;
        }
        v9 = v10;
        v4 = v11;
      }
      while (v11 != v2);
      v13 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v13)
      {
        v14 = v2;
        do
        {
          v15 = *(v14 - 24);
          v14 -= 24;
          if (v15)
          {
            v16 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            *v14 = 0;
          }
          v2 = v14;
        }
        while (v14 != v13);
        v2 = v13;
      }
      if (v2)
        goto LABEL_20;
    }
  }
}

void sub_10024EA80(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  _QWORD *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  int *v34;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
    goto LABEL_8;
  v8 = a1 + 16;
  v9 = (_QWORD *)(a1 + 8);
  do
  {
    v10 = sub_10024FD7C(v8, (uint64_t)(v5 + 4), a2);
    v11 = v5 + 1;
    if (!v10)
    {
      v11 = v5;
      v9 = v5;
    }
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v9 == v4 || sub_10024FD7C(v8, (uint64_t)a2, (_DWORD *)v9 + 8))
  {
LABEL_8:
    v12 = 0;
  }
  else
  {
    v13 = (uint64_t *)v9[11];
    if (*(uint64_t **)(a1 + 32) != v13)
    {
      v14 = *v13;
      *(_QWORD *)(v14 + 8) = v13[1];
      *(_QWORD *)v13[1] = v14;
      --*(_QWORD *)(a1 + 40);
      operator delete(v13);
      v15 = (char *)operator new(0x38uLL);
      v16 = v15 + 24;
      v18 = a2 + 2;
      v17 = *a2;
      v19 = (int)*a2 >> 31;
      if (v17 >> 31 == v17)
      {
        *v16 = *v18;
        v19 = v17;
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v18;
        *((_DWORD *)v15 + 10) = a2[6];
      }
      *((_DWORD *)v15 + 4) = v19 ^ v17;
      *((_DWORD *)v15 + 12) = a2[8];
      v20 = *(_QWORD **)(a1 + 32);
      *(_QWORD *)v15 = a1 + 24;
      *((_QWORD *)v15 + 1) = v20;
      *v20 = v15;
      v21 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v21;
      v22 = v9[9];
      v23 = v9[10];
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v33 = v15;
      v34 = a2;
      v26 = sub_10024FF4C((uint64_t **)a1, a2, (uint64_t)&unk_100395958, &v34);
      v27 = (std::__shared_weak_count *)v26[10];
      v26[9] = v22;
      v26[10] = v23;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v26[11] = (uint64_t)v33;
    }
    *(_BYTE *)a3 = 0;
    v30 = v9[10];
    *(_QWORD *)(a3 + 8) = v9[9];
    *(_QWORD *)(a3 + 16) = v30;
    if (v30)
    {
      v31 = (unint64_t *)(v30 + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v12 = 1;
  }
  *(_BYTE *)a3 = v12;
}

void sub_10024ECB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024ECC4(uint64_t a1, uint64_t ***a2, uint64_t *a3, _QWORD *a4)
{
  unsigned __int8 v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  __int128 v22;
  uint64_t *v23;
  _QWORD *v24;
  int v25;
  int data;
  std::string::size_type size_high;
  int v28;
  int v29;
  int v30;
  std::string::size_type v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  unint64_t v59;
  _QWORD *v60;
  unsigned __int8 v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *__p;
  uint8_t buf[8];
  char v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;

  v6 = (a3[1] - *a3) >> 5;
  v71 = (uint64_t)(a4[1] - *a4) >> 4;
  v72 = v6;
  if (v6 != v71)
  {
    sub_1000D5048(buf, "");
    sub_10015D524("macs and radioMaps do not match 1-to-1, macs,", &v76);
    sub_1001E2B30(&v72, &v77);
    sub_10024E438(",radiomaps, ", &v78);
    sub_1001E2B30(&v71, &v79);
    sub_100174738((uint64_t)buf, (uint64_t)&v76, 4);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_120;
        goto LABEL_125;
      }
    }
    else if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_119;
    }
    operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_120:
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_121;
      goto LABEL_126;
    }
LABEL_125:
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_121:
      if ((v75 & 0x80000000) == 0)
        goto LABEL_122;
LABEL_127:
      operator delete(*(void **)buf);
LABEL_122:
      sub_10015C2DC((uint64_t)&__p);
    }
LABEL_126:
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((v75 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_127;
  }
  v57 = sub_10025888C(a1 + 64, a2);
  v7 = *a3;
  if (a3[1] != *a3)
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v8 = 0;
    v9 = 0;
    v69 = 0;
    v70 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v55 = a1 + 8;
    v60 = (_QWORD *)(a1 + 16);
    v54 = a1 + 24;
    do
    {
      v68 = v8;
      v17 = (int *)(v7 + 32 * v9);
      v20 = *v17;
      v19 = v17 + 2;
      v18 = v20;
      v21 = v20 >> 31;
      if (v20 >> 31 == v20)
      {
        v76.__r_.__value_.__l.__size_ = *(_QWORD *)v19;
        v21 = v18;
      }
      else
      {
        v22 = *(_OWORD *)v19;
        LODWORD(v77.__r_.__value_.__l.__data_) = v19[4];
        *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = v22;
      }
      LODWORD(v76.__r_.__value_.__l.__data_) = v21 ^ v18;
      LODWORD(v77.__r_.__value_.__r.__words[1]) = v57;
      v23 = (uint64_t *)*v60;
      if (!*v60)
      {
LABEL_110:
        if (v9 >= (uint64_t)(a4[1] - *a4) >> 4)
          sub_1001E2FA0();
        sub_10024F558(v55, &v76, (uint64_t *)(*a4 + 16 * v9));
        goto LABEL_4;
      }
      v59 = v9;
      v24 = v60;
      do
      {
        v25 = SLODWORD(v76.__r_.__value_.__l.__data_) >> 31;
        data = (int)v76.__r_.__value_.__l.__data_;
        if (SLODWORD(v76.__r_.__value_.__l.__data_) >> 31 != LODWORD(v76.__r_.__value_.__l.__data_))
        {
          LODWORD(v70) = v76.__r_.__value_.__s.__data_[17];
          HIDWORD(v70) = v76.__r_.__value_.__s.__data_[16];
          LODWORD(v69) = v76.__r_.__value_.__s.__data_[19];
          HIDWORD(v69) = v76.__r_.__value_.__s.__data_[18];
          v10 = v76.__r_.__value_.__s.__data_[20];
          v11 = v76.__r_.__value_.__s.__data_[21];
          v12 = v76.__r_.__value_.__s.__data_[22];
          v13 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
          v14 = v77.__r_.__value_.__s.__data_[0];
          v15 = v77.__r_.__value_.__s.__data_[1];
          v16 = v77.__r_.__value_.__s.__data_[2];
          data = SLODWORD(v76.__r_.__value_.__l.__data_) >> 31;
          v4 = v77.__r_.__value_.__s.__data_[3];
        }
        size_high = HIBYTE(v76.__r_.__value_.__l.__size_);
        v28 = data ^ LODWORD(v76.__r_.__value_.__l.__data_);
        v29 = *((_DWORD *)v23 + 8);
        v30 = v28 >> 31;
        if (v29 >> 31 == v29)
        {
          if (v30 != v28)
            goto LABEL_10;
          v31 = v23[5];
          if (v31 < v76.__r_.__value_.__l.__size_)
            goto LABEL_10;
          v32 = 0;
          v33 = 0;
          if (v25 != LODWORD(v76.__r_.__value_.__l.__data_))
            goto LABEL_18;
        }
        else
        {
          if (v30 != v28)
          {
            v34 = *((unsigned __int8 *)v23 + 40);
            if (v34 < v76.__r_.__value_.__s.__data_[8])
              goto LABEL_10;
            if (v34 <= v76.__r_.__value_.__s.__data_[8])
            {
              v35 = *((unsigned __int8 *)v23 + 41);
              if (v35 < v76.__r_.__value_.__s.__data_[9])
                goto LABEL_10;
              if (v35 <= v76.__r_.__value_.__s.__data_[9])
              {
                v36 = *((unsigned __int8 *)v23 + 42);
                if (v36 < v76.__r_.__value_.__s.__data_[10])
                  goto LABEL_10;
                if (v36 <= v76.__r_.__value_.__s.__data_[10])
                {
                  v37 = *((unsigned __int8 *)v23 + 43);
                  if (v37 < v76.__r_.__value_.__s.__data_[11])
                    goto LABEL_10;
                  if (v37 <= v76.__r_.__value_.__s.__data_[11])
                  {
                    v38 = *((unsigned __int8 *)v23 + 44);
                    if (v38 < v76.__r_.__value_.__s.__data_[12])
                      goto LABEL_10;
                    if (v38 <= v76.__r_.__value_.__s.__data_[12])
                    {
                      v39 = *((unsigned __int8 *)v23 + 45);
                      if (v39 < v76.__r_.__value_.__s.__data_[13])
                        goto LABEL_10;
                      if (v39 <= v76.__r_.__value_.__s.__data_[13])
                      {
                        v40 = *((unsigned __int8 *)v23 + 46);
                        if (v40 < v76.__r_.__value_.__s.__data_[14])
                          goto LABEL_10;
                        if (v40 <= v76.__r_.__value_.__s.__data_[14])
                        {
                          v41 = *((unsigned __int8 *)v23 + 47);
                          if (v41 < size_high)
                            goto LABEL_10;
                          if (v41 <= size_high)
                          {
                            v42 = *((unsigned __int8 *)v23 + 48);
                            if (v42 < HIDWORD(v70))
                              goto LABEL_10;
                            if (HIDWORD(v70) >= v42)
                            {
                              v43 = *((unsigned __int8 *)v23 + 49);
                              if (v43 < v70)
                                goto LABEL_10;
                              if (v70 >= v43)
                              {
                                v44 = *((unsigned __int8 *)v23 + 50);
                                if (v44 < HIDWORD(v69))
                                  goto LABEL_10;
                                if (HIDWORD(v69) >= v44)
                                {
                                  v45 = *((unsigned __int8 *)v23 + 51);
                                  if (v45 < v69
                                    || v69 >= v45
                                    && ((v46 = *((unsigned __int8 *)v23 + 52), v46 < v10)
                                     || v10 >= v46
                                     && ((v47 = *((unsigned __int8 *)v23 + 53), v47 < v11)
                                      || v11 >= v47
                                      && ((v48 = *((unsigned __int8 *)v23 + 54), v48 < v12)
                                       || v12 >= v48
                                       && ((v49 = *((unsigned __int8 *)v23 + 55), v49 < v13)
                                        || v13 >= v49
                                        && ((v50 = *((unsigned __int8 *)v23 + 56), v50 < v14)
                                         || v14 >= v50
                                         && ((v51 = *((unsigned __int8 *)v23 + 57), v51 < v15)
                                          || v15 >= v51
                                          && ((v52 = *((unsigned __int8 *)v23 + 58), v52 < v16)
                                           || v16 >= v52 && *((unsigned __int8 *)v23 + 59) < v4))))))))
                                  {
LABEL_10:
                                    ++v23;
                                    goto LABEL_11;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v31 = v23[5];
          v67 = *((unsigned __int8 *)v23 + 49);
          v68 = *((unsigned __int8 *)v23 + 48);
          LODWORD(v66) = *((unsigned __int8 *)v23 + 51);
          HIDWORD(v66) = *((unsigned __int8 *)v23 + 50);
          LODWORD(v65) = *((unsigned __int8 *)v23 + 53);
          HIDWORD(v65) = *((unsigned __int8 *)v23 + 52);
          LODWORD(v64) = *((unsigned __int8 *)v23 + 55);
          HIDWORD(v64) = *((unsigned __int8 *)v23 + 54);
          LODWORD(v63) = *((unsigned __int8 *)v23 + 57);
          HIDWORD(v63) = *((unsigned __int8 *)v23 + 56);
          v61 = *((_BYTE *)v23 + 59);
          v62 = *((unsigned __int8 *)v23 + 58);
          v32 = (v29 >> 31) ^ v29;
          v33 = v32 >> 31;
          if (v25 != LODWORD(v76.__r_.__value_.__l.__data_))
          {
LABEL_18:
            if (v33 != v32
              && (v31 > v76.__r_.__value_.__s.__data_[8]
               || v31 >= v76.__r_.__value_.__s.__data_[8]
               && (BYTE1(v31) > v76.__r_.__value_.__s.__data_[9]
                || BYTE1(v31) >= v76.__r_.__value_.__s.__data_[9]
                && (BYTE2(v31) > v76.__r_.__value_.__s.__data_[10]
                 || BYTE2(v31) >= v76.__r_.__value_.__s.__data_[10]
                 && (BYTE3(v31) > v76.__r_.__value_.__s.__data_[11]
                  || BYTE3(v31) >= v76.__r_.__value_.__s.__data_[11]
                  && (BYTE4(v31) > v76.__r_.__value_.__s.__data_[12]
                   || BYTE4(v31) >= v76.__r_.__value_.__s.__data_[12]
                   && (BYTE5(v31) > v76.__r_.__value_.__s.__data_[13]
                    || BYTE5(v31) >= v76.__r_.__value_.__s.__data_[13]
                    && (BYTE6(v31) > v76.__r_.__value_.__s.__data_[14]
                     || BYTE6(v31) >= v76.__r_.__value_.__s.__data_[14]
                     && (HIBYTE(v31) > size_high
                      || HIBYTE(v31) >= size_high
                      && (v76.__r_.__value_.__s.__data_[16] < v68
                       || v68 >= v76.__r_.__value_.__s.__data_[16]
                       && (v76.__r_.__value_.__s.__data_[17] < v67
                        || v67 >= v76.__r_.__value_.__s.__data_[17]
                        && (v76.__r_.__value_.__s.__data_[18] < HIDWORD(v66)
                         || HIDWORD(v66) >= v76.__r_.__value_.__s.__data_[18]
                         && (v76.__r_.__value_.__s.__data_[19] < v66
                          || v66 >= v76.__r_.__value_.__s.__data_[19]
                          && (v76.__r_.__value_.__s.__data_[20] < HIDWORD(v65)
                           || HIDWORD(v65) >= v76.__r_.__value_.__s.__data_[20]
                           && (v76.__r_.__value_.__s.__data_[21] < v65
                            || v65 >= v76.__r_.__value_.__s.__data_[21]
                            && (v76.__r_.__value_.__s.__data_[22] < HIDWORD(v64)
                             || HIDWORD(v64) >= v76.__r_.__value_.__s.__data_[22]
                             && (HIBYTE(v76.__r_.__value_.__r.__words[2]) < v64
                              || v64 >= HIBYTE(v76.__r_.__value_.__r.__words[2])
                              && (v77.__r_.__value_.__s.__data_[0] < HIDWORD(v63)
                               || HIDWORD(v63) >= v77.__r_.__value_.__s.__data_[0]
                               && (v77.__r_.__value_.__s.__data_[1] < v63
                                || v63 >= v77.__r_.__value_.__s.__data_[1]
                                && (v77.__r_.__value_.__s.__data_[2] < v62
                                 || v62 >= v77.__r_.__value_.__s.__data_[2]
                                 && v77.__r_.__value_.__s.__data_[3] < v61))))))))))))))))))))
            {
              goto LABEL_106;
            }
            goto LABEL_63;
          }
        }
        if (v33 != v32 || v76.__r_.__value_.__l.__size_ < v31)
        {
LABEL_106:
          v24 = v23;
          goto LABEL_11;
        }
LABEL_63:
        if (sub_1000BC3F8((_DWORD *)v23 + 16, &v77.__r_.__value_.__r.__words[1]))
          ++v23;
        else
          v24 = v23;
LABEL_11:
        v23 = (uint64_t *)*v23;
      }
      while (v23);
      if (v24 == v60 || sub_10024FD7C(v54, (uint64_t)&v76, (_DWORD *)v24 + 8))
      {
        v9 = v59;
        goto LABEL_110;
      }
      if (qword_100417F08 != -1)
        dispatch_once(&qword_100417F08, &stru_1003FF510);
      v53 = qword_100417F10;
      v9 = v59;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "attempting to insert a mac,locationId pair that already exists in the cache", buf, 2u);
      }
LABEL_4:
      v8 = v68;
      ++v9;
      v7 = *a3;
    }
    while (v9 < (a3[1] - *a3) >> 5);
  }
}

void sub_10024F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024F558(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _BOOL4 v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  char *v28;
  int *v29;

  v6 = (_QWORD *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
    goto LABEL_8;
  v8 = (_QWORD *)(a1 + 8);
  do
  {
    v9 = sub_10024FD7C(a1 + 16, (uint64_t)(v7 + 4), a2);
    v10 = v7 + 1;
    if (!v9)
    {
      v10 = v7;
      v8 = v7;
    }
    v7 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v8 == v6 || sub_10024FD7C(a1 + 16, (uint64_t)a2, (_DWORD *)v8 + 8))
  {
LABEL_8:
    if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a1 + 48))
    {
      v11 = *(_DWORD **)(a1 + 24);
      sub_100250278((uint64_t **)a1, v11 + 4);
      v12 = *(_QWORD *)v11;
      *(_QWORD *)(v12 + 8) = *((_QWORD *)v11 + 1);
      **((_QWORD **)v11 + 1) = v12;
      --*(_QWORD *)(a1 + 40);
      operator delete(v11);
    }
    v13 = (char *)operator new(0x38uLL);
    v14 = v13 + 24;
    v16 = a2 + 2;
    v15 = *a2;
    v17 = (int)*a2 >> 31;
    if (v15 >> 31 == v15)
    {
      *v14 = *v16;
      v17 = v15;
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)v16;
      *((_DWORD *)v13 + 10) = a2[6];
    }
    *((_DWORD *)v13 + 4) = v17 ^ v15;
    *((_DWORD *)v13 + 12) = a2[8];
    v18 = *(_QWORD **)(a1 + 32);
    *(_QWORD *)v13 = a1 + 24;
    *((_QWORD *)v13 + 1) = v18;
    *v18 = v13;
    v19 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v19;
    v21 = *a3;
    v20 = a3[1];
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v28 = v13;
    v29 = a2;
    v24 = sub_10024FF4C((uint64_t **)a1, a2, (uint64_t)&unk_100395958, &v29);
    v25 = (std::__shared_weak_count *)v24[10];
    v24[9] = v21;
    v24[10] = v20;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v24[11] = (uint64_t)v28;
  }
}

void sub_10024F768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024F77C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  char *v16;
  __int128 *v17;
  std::string::size_type size;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  int *v23;
  int *v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  int v28;
  __int128 v29;
  std::string::size_type v30;
  std::string::size_type v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *__p;
  char *v40;
  char *v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;

  v8 = (uint64_t)(a3[1] - *a3) >> 5;
  v9 = (a4[1] - *a4) >> 4;
  v36 = v9;
  v37 = v8;
  if (v8 != v9)
  {
    sub_1000D5048(&__p, "");
    sub_10015D524("macs and radioMaps do not match 1-to-1, macs,", &v42);
    sub_1001E2B30(&v37, &v43);
    sub_10024E438(",radiomaps, ", &v44);
    sub_1001E2B30(&v36, &v45);
    sub_100174738((uint64_t)&__p, (uint64_t)&v42, 4);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_39:
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_40;
        goto LABEL_45;
      }
    }
    else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_40:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        goto LABEL_42;
LABEL_47:
      operator delete(__p);
LABEL_42:
      sub_10015C2DC((uint64_t)&v38);
    }
LABEL_46:
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_47;
  }
  memset(&v42, 0, sizeof(v42));
  __p = 0;
  v40 = 0;
  v41 = 0;
  sub_100047D14((uint64_t)&v42, v9);
  v10 = *a4;
  v11 = a4[1];
  v12 = v11 - *a4;
  v13 = v12 >> 4;
  if (v12 >> 4)
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF1)
      sub_1000D02C0();
    v14 = operator new(2 * v12);
    __p = &v40[(_QWORD)v14];
    v40 = &v40[(_QWORD)v14];
    v41 = (char *)v14 + 32 * v13;
  }
  if (v11 != v10)
  {
    v15 = 0;
    do
    {
      v17 = (__int128 *)(v10 + 16 * v15);
      if (*(_QWORD *)v17)
      {
        size = v42.__r_.__value_.__l.__size_;
        if (v42.__r_.__value_.__l.__size_ >= v42.__r_.__value_.__r.__words[2])
        {
          v22 = sub_1001E3DB8((uint64_t)&v42, v17);
        }
        else
        {
          *(_QWORD *)v42.__r_.__value_.__l.__size_ = *(_QWORD *)v17;
          v19 = *(_QWORD *)(v10 + 16 * v15 + 8);
          *(_QWORD *)(size + 8) = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = (_OWORD *)(size + 16);
        }
        v42.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
        if (v15 >= (uint64_t)(a3[1] - *a3) >> 5)
          sub_1001E2FA0();
        v23 = (int *)(*a3 + 32 * v15);
        v24 = (int *)v40;
        if (v40 >= v41)
        {
          v16 = (char *)sub_1001D7E30(&__p, v23);
        }
        else
        {
          v25 = v40 + 8;
          v27 = v23 + 2;
          v26 = *v23;
          if (v26 == v26 >> 31)
          {
            *v25 = *v27;
            v28 = v26;
          }
          else
          {
            v29 = *(_OWORD *)v27;
            *((_DWORD *)v40 + 6) = v23[6];
            *(_OWORD *)v25 = v29;
            v28 = *v23;
            v26 = *v23 >> 31;
          }
          *v24 = v28 ^ v26;
          v16 = (char *)(v24 + 8);
        }
        v40 = v16;
        v10 = *a4;
        v11 = a4[1];
      }
      ++v15;
    }
    while (v15 < (v11 - v10) >> 4);
  }
  (*(void (**)(uint64_t, uint64_t, void **, std::string *))(*(_QWORD *)a1 + 32))(a1, a2, &__p, &v42);
  if (__p)
  {
    v40 = (char *)__p;
    operator delete(__p);
  }
  v30 = v42.__r_.__value_.__r.__words[0];
  if (v42.__r_.__value_.__r.__words[0])
  {
    v31 = v42.__r_.__value_.__l.__size_;
    v32 = (void *)v42.__r_.__value_.__r.__words[0];
    if (v42.__r_.__value_.__l.__size_ != v42.__r_.__value_.__r.__words[0])
    {
      do
      {
        v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(p_shared_owners);
          while (__stlxr(v35 - 1, p_shared_owners));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v31 -= 16;
      }
      while (v31 != v30);
      v32 = (void *)v42.__r_.__value_.__r.__words[0];
    }
    v42.__r_.__value_.__l.__size_ = v30;
    operator delete(v32);
  }
}

void sub_10024FBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024FBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void **v18;

  while (1)
  {
    if (*((char *)v18 - 1) < 0)
      operator delete(*(v18 - 3));
    v18 -= 3;
    if (v18 == (void **)&a18)
      JUMPOUT(0x10024FBD4);
  }
}

void sub_10024FC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  sub_1000F7D3C(&a18);
  _Unwind_Resume(a1);
}

void sub_10024FC50(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = a1 + 2;
  sub_1000BE358((uint64_t)(a1 + 1), (_QWORD *)a1[2]);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  if (v2[4])
  {
    v3 = v2 + 2;
    v5 = a1[4];
    v4 = (uint64_t *)a1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    a1[6] = 0;
    if (v4 != v3)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
}

uint64_t sub_10024FCC8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)a1 = off_1003FF498;
  sub_10002F3EC((_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v2 = *(uint64_t **)(a1 + 40);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 48) = 0;
    if (v2 != (uint64_t *)(a1 + 32))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 32));
    }
  }
  sub_1000BE358(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_10024FD50(id a1)
{
  qword_100417F10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

BOOL sub_10024FD7C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;

  v6 = (unsigned __int8 *)(a3 + 2);
  v5 = *a3;
  v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(_QWORD *)&v19 = *(_QWORD *)v6;
    v7 = v5;
  }
  else
  {
    v19 = *(_OWORD *)v6;
    v20 = a3[6];
  }
  v8 = v7 ^ v5;
  v18 = v8;
  v10 = (_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)a2;
  v11 = *(int *)a2 >> 31;
  v12 = v8 >> 31;
  if (v11 == *(_DWORD *)a2)
  {
    if (v12 == v8 && *v10 >= (unint64_t)v19)
    {
      v11 = *(_DWORD *)a2;
      goto LABEL_13;
    }
    return 1;
  }
  if (v12 != v8)
  {
    if (sub_1001D7688((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19))
      return 1;
    v9 = *(_DWORD *)a2;
    v11 = *(int *)a2 >> 31;
  }
  if (v11 != v9)
  {
    v16 = *(_OWORD *)v10;
    v17 = *(_DWORD *)(a2 + 24);
    v14 = v11 ^ v9;
    v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31)
      goto LABEL_14;
LABEL_18:
    if (v15 != v14 && sub_1001D7688(v6, (unsigned __int8 *)&v16))
      return 0;
    return sub_1000BC3F8((_DWORD *)(a2 + 32), a3 + 8);
  }
LABEL_13:
  *(_QWORD *)&v16 = *v10;
  v14 = v11 ^ v9;
  v15 = v14 >> 31;
  if (*a3 != (int)*a3 >> 31)
    goto LABEL_18;
LABEL_14:
  if (v15 != v14 || *(_QWORD *)v6 < (unint64_t)v16)
    return 0;
  return sub_1000BC3F8((_DWORD *)(a2 + 32), a3 + 8);
}

uint64_t *sub_10024FF4C(uint64_t **a1, _DWORD *a2, uint64_t a3, int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  int v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)operator new(0x60uLL);
    v12 = v11;
    v13 = *a4;
    v14 = v11 + 5;
    v16 = *a4 + 2;
    v15 = **a4;
    if (v15 == v15 >> 31)
    {
      *v14 = *v16;
      v17 = v15;
    }
    else
    {
      v18 = *(_OWORD *)v16;
      *((_DWORD *)v11 + 14) = (*a4)[6];
      *(_OWORD *)v14 = v18;
      v17 = *v13;
      v15 = *v13 >> 31;
    }
    *((_DWORD *)v11 + 8) = v17 ^ v15;
    *((_DWORD *)v11 + 16) = v13[8];
    v11[10] = 0;
    v11[11] = 0;
    v11[9] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v7 = v11;
    v19 = (uint64_t *)**a1;
    v20 = v11;
    if (v19)
    {
      *a1 = v19;
      v20 = *v7;
    }
    sub_1000E05F4(a1[1], v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v12;
  }
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v6;
      v10 = (uint64_t)(v6 + 4);
      if (!sub_10024FD7C((uint64_t)(a1 + 2), (uint64_t)a2, (_DWORD *)v6 + 8))
        break;
      v6 = *v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_9;
    }
    if (!sub_10024FD7C((uint64_t)(a1 + 2), v10, a2))
      break;
    v7 = v9 + 1;
    v6 = v9[1];
    if (!v6)
      goto LABEL_9;
  }
  v12 = *v7;
  if (!*v7)
    goto LABEL_9;
  return v12;
}

uint64_t sub_1002500A0(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*(_QWORD *)a1] >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v9 = (char *)operator new(24 * v8);
    v10 = (uint64_t)&v9[24 * v5];
    *(_BYTE *)v10 = 0;
    if (*(_BYTE *)a2)
      goto LABEL_10;
  }
  else
  {
    v9 = 0;
    v10 = 24 * v5;
    *(_BYTE *)(24 * v5) = 0;
    if (*(_BYTE *)a2)
    {
LABEL_10:
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)v10 = 1;
      v3 = *(char **)a1;
      v4 = *(char **)(a1 + 8);
    }
  }
  v11 = &v9[24 * v8];
  v12 = v10 + 24;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v11;
    if (!v3)
      return v12;
    goto LABEL_28;
  }
  v13 = v10;
  v14 = v4;
  do
  {
    *(_BYTE *)(v13 - 24) = 0;
    v13 -= 24;
    v15 = *(v14 - 24);
    v14 -= 24;
    if (v15)
    {
      *(_OWORD *)(v10 - 16) = *((_OWORD *)v4 - 1);
      *((_QWORD *)v4 - 2) = 0;
      *((_QWORD *)v4 - 1) = 0;
      *(_BYTE *)(v10 - 24) = 1;
    }
    v10 = v13;
    v4 = v14;
  }
  while (v14 != v3);
  v16 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v11;
  if (v3 != v16)
  {
    v17 = v3;
    do
    {
      v18 = *(v17 - 24);
      v17 -= 24;
      if (v18)
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        *v17 = 0;
      }
      v3 = v17;
    }
    while (v17 != v16);
    v3 = v16;
  }
  if (v3)
LABEL_28:
    operator delete(v3);
  return v12;
}

uint64_t sub_100250278(uint64_t **a1, _DWORD *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  _QWORD *v6;
  uint64_t **v7;
  _BOOL4 v8;
  uint64_t **v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  BOOL v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v2 = a1 + 1;
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = a1 + 2;
  v7 = a1 + 1;
  do
  {
    v8 = sub_10024FD7C((uint64_t)v6, (uint64_t)(v3 + 4), a2);
    v9 = (uint64_t **)(v3 + 1);
    if (!v8)
    {
      v9 = (uint64_t **)v3;
      v7 = (uint64_t **)v3;
    }
    v3 = *v9;
  }
  while (*v9);
  if (v7 == v2 || sub_10024FD7C((uint64_t)v6, (uint64_t)a2, (_DWORD *)v7 + 8))
    return 0;
  v11 = v7[1];
  if (v11)
  {
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v13 = v7;
    do
    {
      v12 = v13[2];
      v14 = *v12 == (_QWORD)v13;
      v13 = (uint64_t **)v12;
    }
    while (!v14);
  }
  if (*a1 == (uint64_t *)v7)
    *a1 = v12;
  --*v6;
  sub_1002503B4(*v2, (uint64_t *)v7);
  v15 = (std::__shared_weak_count *)v7[10];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v7);
  return 1;
}

