void sub_10009953C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100099550(uint64_t result, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  uint64_t *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v9;
  char *v10;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v37;
  int v38;
  BOOL v39;
  int v40;
  _BYTE *v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v65;
  int v66;
  int v67;
  _BYTE *v68;
  int v69;
  signed int v70;
  unsigned int v71;

  v5 = result;
  v6 = (uint64_t *)(result + 80);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 16);
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(result + 40);
  v9 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(result + 8);
LABEL_2:
  while (2)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      v11 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)result;
      *((_DWORD *)this + 8) = result;
      if (!(_DWORD)result)
        return 1;
    }
    else
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v10;
      *((_DWORD *)this + 8) = (_DWORD)v11;
      *((_QWORD *)this + 1) = v10 + 1;
      if (!(_DWORD)v11)
        return 1;
    }
    switch(v11 >> 3)
    {
      case 1u:
        v12 = v11 & 7;
        if (v12 != 2)
          goto LABEL_34;
        v13 = *(_DWORD *)(v5 + 28);
        v14 = *(int *)(v5 + 24);
        if ((int)v14 < v13)
          goto LABEL_10;
        while (2)
        {
          if (v13 == *(_DWORD *)(v5 + 32))
          {
            result = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v13 + 1);
            v13 = *(_DWORD *)(v5 + 28);
          }
          *(_DWORD *)(v5 + 28) = v13 + 1;
          v16 = wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New((wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *)result);
          v17 = *(_QWORD *)(v5 + 16);
          v18 = *(int *)(v5 + 24);
          *(_DWORD *)(v5 + 24) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18) = v16;
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v16);
          if (!(_DWORD)result)
            return result;
LABEL_15:
          v19 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if ((unint64_t)v19 < *((_QWORD *)this + 2))
          {
            v20 = *v19;
            if (v20 == 10)
            {
              *((_QWORD *)this + 1) = v19 + 1;
              v13 = *(_DWORD *)(v5 + 28);
              v14 = *(int *)(v5 + 24);
              if ((int)v14 >= v13)
                continue;
LABEL_10:
              v15 = *(_QWORD *)(v5 + 16);
              *(_DWORD *)(v5 + 24) = v14 + 1;
              result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, *(_QWORD *)(v15 + 8 * v14));
              if (!(_DWORD)result)
                return result;
              goto LABEL_15;
            }
            if (v20 == 18)
            {
              *((_QWORD *)this + 1) = v19 + 1;
              *(_DWORD *)(v5 + 104) |= 0x10u;
              v21 = *(_QWORD *)(v5 + 72);
              if (!v21)
LABEL_22:
                operator new();
LABEL_42:
              v71 = 0;
              v32 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71))return 0;
              }
              else
              {
                v71 = *v32;
                *((_QWORD *)this + 1) = v32 + 1;
              }
              v33 = *((_DWORD *)this + 14);
              v34 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v33 + 1;
              if (v33 >= v34)
                return 0;
              v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v71);
              if (!sub_100099D94(v21, this, v36, v37) || !*((_BYTE *)this + 36))
                return 0;
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
              v38 = *((_DWORD *)this + 14);
              v39 = __OFSUB__(v38, 1);
              v40 = v38 - 1;
              if (v40 < 0 == v39)
                *((_DWORD *)this + 14) = v40;
              v41 = (_BYTE *)*((_QWORD *)this + 1);
              if ((unint64_t)v41 < *((_QWORD *)this + 2) && *v41 == 26)
              {
                while (1)
                {
                  *((_QWORD *)this + 1) = v41 + 1;
                  v22 = *(_DWORD *)(v5 + 52);
                  v23 = *(int *)(v5 + 48);
                  if ((int)v23 >= v22)
                  {
LABEL_57:
                    if (v22 == *(_DWORD *)(v5 + 56))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v22 + 1);
                      v22 = *(_DWORD *)(v5 + 52);
                    }
                    *(_DWORD *)(v5 + 52) = v22 + 1;
                    operator new();
                  }
LABEL_25:
                  v24 = *(_QWORD *)(v5 + 40);
                  *(_DWORD *)(v5 + 48) = v23 + 1;
                  v25 = *(_QWORD *)(v24 + 8 * v23);
                  v71 = 0;
                  v42 = (char *)*((_QWORD *)this + 1);
                  if ((unint64_t)v42 >= *((_QWORD *)this + 2) || *v42 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71))return 0;
                  }
                  else
                  {
                    v71 = *v42;
                    *((_QWORD *)this + 1) = v42 + 1;
                  }
                  v43 = *((_DWORD *)this + 14);
                  v44 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v43 + 1;
                  if (v43 >= v44)
                    return 0;
                  v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v71);
                  if (!sub_100099D94(v25, this, v46, v47) || !*((_BYTE *)this + 36))
                    return 0;
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
                  v48 = *((_DWORD *)this + 14);
                  v39 = __OFSUB__(v48, 1);
                  v49 = v48 - 1;
                  if (v49 < 0 == v39)
                    *((_DWORD *)this + 14) = v49;
                  v41 = (_BYTE *)*((_QWORD *)this + 1);
                  v26 = *((_QWORD *)this + 2);
                  if ((unint64_t)v41 >= v26)
                    break;
                  v50 = *v41;
                  if (v50 != 26)
                    goto LABEL_71;
                }
              }
            }
          }
          goto LABEL_2;
        }
      case 2u:
        v12 = v11 & 7;
        if (v12 != 2)
          goto LABEL_34;
        *(_DWORD *)(v5 + 104) |= 0x10u;
        v21 = *(_QWORD *)(v5 + 72);
        if (!v21)
          goto LABEL_22;
        goto LABEL_42;
      case 3u:
        v12 = v11 & 7;
        if (v12 != 2)
          goto LABEL_34;
        v22 = *(_DWORD *)(v5 + 52);
        v23 = *(int *)(v5 + 48);
        if ((int)v23 < v22)
          goto LABEL_25;
        goto LABEL_57;
      case 4u:
        v12 = v11 & 7;
        if (v12 == 2)
        {
          result = sub_10031C94C(this, v6);
          if (!(_DWORD)result)
            return result;
          while (1)
          {
LABEL_94:
            v41 = (_BYTE *)*((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            if ((unint64_t)v41 >= v26)
              goto LABEL_2;
            v50 = *v41;
            if (v50 == 42)
              break;
LABEL_71:
            if (v50 != 32)
              goto LABEL_2;
            v27 = v41 + 1;
            *((_QWORD *)this + 1) = v27;
LABEL_73:
            v71 = 0;
            if ((unint64_t)v27 >= v26 || *v27 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71);
              if (!(_DWORD)result)
                return 0;
            }
            else
            {
              v71 = *v27;
              *((_QWORD *)this + 1) = v27 + 1;
            }
            v51 = *(_DWORD *)(v5 + 88);
            v52 = *(_QWORD *)(v5 + 80);
            if (v51 == *(_DWORD *)(v5 + 92))
            {
              if (2 * v51 <= v51 + 1)
                v53 = v51 + 1;
              else
                v53 = 2 * v51;
              if (v53 <= 4)
                v53 = 4;
              *(_DWORD *)(v5 + 92) = v53;
              operator new[]();
            }
            v54 = v71;
            *(_DWORD *)(v5 + 88) = v51 + 1;
            *(_DWORD *)(v52 + 4 * v51) = v54;
            v55 = *(_DWORD *)(v5 + 92) - *(_DWORD *)(v5 + 88);
            if (v55 >= 1)
            {
              v56 = v55 + 1;
              while (1)
              {
                v59 = (_BYTE *)*((_QWORD *)this + 1);
                v60 = *((_QWORD *)this + 2);
                if ((unint64_t)v59 >= v60 || *v59 != 32)
                  break;
                *((_QWORD *)this + 1) = v59 + 1;
                if ((unint64_t)(v59 + 1) >= v60 || (char)v59[1] < 0)
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71);
                  if (!(_DWORD)result)
                    return 0;
                  v57 = v71;
                  v52 = *v6;
                }
                else
                {
                  v57 = v59[1];
                  v71 = v57;
                  *((_QWORD *)this + 1) = v59 + 2;
                }
                v58 = *(int *)(v5 + 88);
                *(_DWORD *)(v5 + 88) = v58 + 1;
                *(_DWORD *)(v52 + 4 * v58) = v57;
                if (--v56 <= 1)
                  goto LABEL_94;
              }
            }
          }
          *((_QWORD *)this + 1) = v41 + 1;
          *(_DWORD *)(v5 + 104) |= 4u;
          v28 = *(_QWORD *)(v5 + 64);
          if (!v28)
LABEL_97:
            operator new();
LABEL_31:
          v71 = 0;
          v29 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v29 >= *((_QWORD *)this + 2) || *v29 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71))return 0;
          }
          else
          {
            v71 = *v29;
            *((_QWORD *)this + 1) = v29 + 1;
          }
          v61 = *((_DWORD *)this + 14);
          v62 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v61 + 1;
          if (v61 >= v62)
            return 0;
          v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v71);
          if (!sub_10009A1F0(v28, this, v64, v65) || !*((_BYTE *)this + 36))
            return 0;
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
          v66 = *((_DWORD *)this + 14);
          v39 = __OFSUB__(v66, 1);
          v67 = v66 - 1;
          if (v67 < 0 == v39)
            *((_DWORD *)this + 14) = v67;
          v68 = (_BYTE *)*((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          if ((unint64_t)v68 >= v30 || *v68 != 48)
            continue;
          v31 = v68 + 1;
          *((_QWORD *)this + 1) = v31;
LABEL_108:
          v71 = 0;
          if ((unint64_t)v31 >= v30 || (v69 = *v31, v69 < 0))
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v71);
            if (!(_DWORD)result)
              return result;
            v70 = v71;
            result = sub_10009A1E0(v71);
            if ((_DWORD)result)
            {
LABEL_111:
              *(_DWORD *)(v5 + 104) |= 8u;
              *(_DWORD *)(v5 + 96) = v70;
              if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2))
                continue;
LABEL_116:
              if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
          else
          {
            v70 = *v31;
            *((_QWORD *)this + 1) = v31 + 1;
            result = sub_10009A1E0(v69);
            if ((_DWORD)result)
              goto LABEL_111;
          }
          result = wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v9, 6, v70);
          if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2))
            continue;
          goto LABEL_116;
        }
        if ((v11 & 7) == 0)
        {
          v27 = (char *)*((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          goto LABEL_73;
        }
LABEL_34:
        if (v12 != 4)
        {
          result = wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, v11, v9, a4);
          if ((result & 1) == 0)
            return 0;
          continue;
        }
        return 1;
      case 5u:
        v12 = v11 & 7;
        if (v12 != 2)
          goto LABEL_34;
        *(_DWORD *)(v5 + 104) |= 4u;
        v28 = *(_QWORD *)(v5 + 64);
        if (v28)
          goto LABEL_31;
        goto LABEL_97;
      case 6u:
        v12 = v11 & 7;
        if ((v11 & 7) != 0)
          goto LABEL_34;
        v31 = (char *)*((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        goto LABEL_108;
      default:
        v12 = v11 & 7;
        goto LABEL_34;
    }
  }
}

void sub_100099D40()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100099D94(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v11;
  int v12;
  char *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t result;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  unint64_t v33;

  v6 = (uint64_t *)(a1 + 40);
  v7 = (uint64_t *)(a1 + 16);
  v8 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v9 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v11 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v12 = TagFallback & 7;
        if (v12 == 1)
        {
          result = sub_100141980(1, 0xAu, this, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v19)
          {
LABEL_45:
            if (*v18 == 18)
            {
              v15 = v18 + 1;
              *((_QWORD *)this + 1) = v15;
              v32 = 0;
              if ((unint64_t)v15 >= v19)
                goto LABEL_49;
              goto LABEL_47;
            }
          }
        }
        else
        {
          if (v12 != 2)
            goto LABEL_23;
          v32 = 0;
          v13 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
            v14 = v32;
          }
          else
          {
            v14 = *v13;
            v32 = v14;
            *((_QWORD *)this + 1) = v13 + 1;
          }
          v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v14);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            v33 = 0;
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0;
            v22 = v33;
            v23 = *(_DWORD *)(a1 + 24);
            if (v23 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v23 <= v23 + 1)
                v24 = v23 + 1;
              else
                v24 = 2 * v23;
              if (v24 <= 4)
                v24 = 4;
              *(_DWORD *)(a1 + 28) = v24;
              operator new[]();
            }
            v21 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v23 + 1;
            *(_QWORD *)(v21 + 8 * v23) = v22;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v19)
            goto LABEL_45;
        }
      }
      if (v11 != 2)
        break;
      v12 = TagFallback & 7;
      if (v12 == 1)
      {
        result = sub_100141980(1, 0x12u, this, v6);
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
      }
      if (v12 != 2)
        goto LABEL_23;
      v15 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v16 = *((_QWORD *)this + 2);
      v32 = 0;
      if ((unint64_t)v15 >= v16)
      {
LABEL_49:
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        v25 = v32;
        goto LABEL_51;
      }
LABEL_47:
      if ((char)*v15 < 0)
        goto LABEL_49;
      v25 = *v15;
      v32 = v25;
      *((_QWORD *)this + 1) = v15 + 1;
LABEL_51:
      v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
      while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
      {
        v33 = 0;
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0;
        v28 = v33;
        v29 = *(_DWORD *)(a1 + 48);
        if (v29 == *(_DWORD *)(a1 + 52))
        {
          if (2 * v29 <= v29 + 1)
            v30 = v29 + 1;
          else
            v30 = 2 * v29;
          if (v30 <= 4)
            v30 = 4;
          *(_DWORD *)(a1 + 52) = v30;
          operator new[]();
        }
        v27 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v29 + 1;
        *(_QWORD *)(v27 + 8 * v29) = v28;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
LABEL_63:
      v31 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v31 < *((_QWORD *)this + 2) && *v31 == 25)
      {
        *((_QWORD *)this + 1) = v31 + 1;
        v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0)
          return 0;
LABEL_66:
        *(_QWORD *)(a1 + 64) = v33;
        *(_DWORD *)(a1 + 76) |= 4u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v11 == 3)
    {
      v12 = TagFallback & 7;
      if (v12 == 1)
      {
        v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0)
          return 0;
        goto LABEL_66;
      }
    }
    else
    {
      v12 = TagFallback & 7;
    }
LABEL_23:
    if (v12 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v8, a4) & 1) == 0)
      return 0;
  }
}

BOOL sub_10009A1E0(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t sub_10009A1F0(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int i;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unsigned int v26;

  v6 = (uint64_t *)(a1 + 16);
  v7 = a1 + 8;
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v10 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if ((TagFallback & 7) == 0)
      {
        v12 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        v26 = 0;
        if ((unint64_t)v12 < v11)
        {
          while ((*v12 & 0x80000000) == 0)
          {
            v26 = *v12;
            *((_QWORD *)this + 1) = v12 + 1;
LABEL_20:
            v14 = *(_DWORD *)(a1 + 24);
            v15 = *(_QWORD *)(a1 + 16);
            if (v14 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v14 <= v14 + 1)
                v16 = v14 + 1;
              else
                v16 = 2 * v14;
              if (v16 <= 4)
                v16 = 4;
              *(_DWORD *)(a1 + 28) = v16;
              operator new[]();
            }
            v17 = v26;
            *(_DWORD *)(a1 + 24) = v14 + 1;
            *(_DWORD *)(v15 + 4 * v14) = v17;
            v18 = *(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24);
            if (v18 >= 1)
            {
              for (i = v18 + 1; i > 1; --i)
              {
                v22 = (_BYTE *)*((_QWORD *)this + 1);
                v23 = *((_QWORD *)this + 2);
                if ((unint64_t)v22 >= v23 || *v22 != 8)
                  break;
                *((_QWORD *)this + 1) = v22 + 1;
                if ((unint64_t)(v22 + 1) >= v23 || (char)v22[1] < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0;
                  v20 = v26;
                  v15 = *v6;
                }
                else
                {
                  v20 = v22[1];
                  v26 = v20;
                  *((_QWORD *)this + 1) = v22 + 2;
                }
                v21 = *(int *)(a1 + 24);
                *(_DWORD *)(a1 + 24) = v21 + 1;
                *(_DWORD *)(v15 + 4 * v21) = v20;
              }
            }
LABEL_37:
            v25 = (char *)*((_QWORD *)this + 1);
            v24 = (char *)*((_QWORD *)this + 2);
            if (v25 >= v24 || *v25 != 8)
            {
              if (v25 == v24 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              goto LABEL_2;
            }
            v12 = v25 + 1;
            *((_QWORD *)this + 1) = v12;
            v26 = 0;
            if (v12 >= v24)
              break;
          }
        }
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))goto LABEL_20;
        return 0;
      }
      if (v10 == 2)
        break;
    }
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
  result = sub_10031C94C(this, v6);
  if ((_DWORD)result)
    goto LABEL_37;
  return result;
}

void sub_10009A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_10009A668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_10009A80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009AD28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009AE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10009AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10009AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10009AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10009AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

char *sub_10009AF3C@<X0>(char *result@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t **v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  std::string::size_type v9;
  unint64_t **v10;
  unint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  std::string::size_type v21;

  v5 = *(unint64_t ***)result;
  v6 = *((int *)result + 2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if ((_DWORD)v6)
  {
    v7 = *((char *)*v5 + 23);
    if (v7 >= 0)
      v8 = (unint64_t)*v5;
    else
      v8 = **v5;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)*v5 + 23);
    else
      v9 = (*v5)[1];
    result = sub_10009B080((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
    v10 = v5 + 1;
    v11 = &v5[v6];
    if (v5 + 1 == v11)
      return result;
  }
  else
  {
    v10 = v5;
    v11 = &v5[v6];
    if (v5 == v11)
      return result;
  }
  do
  {
    v12 = *(unsigned __int8 *)(a3 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = a3;
    else
      v13 = *(_QWORD *)a3;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a3 + 8);
    v14 = v13 + v12;
    v15 = strlen(a2);
    sub_10009B520((std::string *)a3, v14, (unint64_t)a2, (std::string::value_type *)&a2[v15], v15);
    v16 = *(unsigned __int8 *)(a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = *(_QWORD *)a3;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(a3 + 8);
    v18 = v17 + v16;
    v19 = *((char *)*v10 + 23);
    if (v19 >= 0)
      v20 = (unint64_t)*v10;
    else
      v20 = **v10;
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)*v10 + 23);
    else
      v21 = (*v10)[1];
    result = sub_10009B080((std::string *)a3, v18, v20, (std::string::value_type *)(v20 + v21), v21);
    ++v10;
  }
  while (v10 != v11);
  return result;
}

void sub_10009B05C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10009B080(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  unint64_t v16;
  unsigned int v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  unint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  size_t v25;
  std::string::size_type v26;
  _BYTE *v27;
  std::string::value_type *v28;
  unint64_t v29;
  std::string::value_type *v30;
  std::string *v31;
  unint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  std::string::value_type *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  std::string::value_type v51;
  std::string v53;

  v7 = (std::string::value_type *)a3;
  v8 = this;
  v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            v16 = a4 - v7;
            if (a4 == v7)
              goto LABEL_71;
            goto LABEL_40;
          }
LABEL_16:
          *((_BYTE *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          v16 = a4 - v7;
          if (a4 == v7)
            goto LABEL_71;
LABEL_40:
          v27 = (char *)v13 + v10;
          if (v16 < 8)
          {
            v28 = v7;
            goto LABEL_70;
          }
          v28 = v7;
          if ((unint64_t)((char *)v13 + v10 - v7) >= 0x20)
          {
            if (v16 < 0x20)
            {
              v29 = 0;
              goto LABEL_57;
            }
            v29 = v16 & 0xFFFFFFFFFFFFFFE0;
            v33 = (__int128 *)(v7 + 16);
            v34 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            v35 = v16 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v33;
              *(v34 - 1) = *(v33 - 1);
              *v34 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v16 == v29)
              goto LABEL_71;
            if ((v16 & 0x18) != 0)
            {
LABEL_57:
              v27 += v16 & 0xFFFFFFFFFFFFFFF8;
              v28 = &v7[v16 & 0xFFFFFFFFFFFFFFF8];
              v37 = &v7[v29];
              v38 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v29);
              v39 = v29 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v40 = *(_QWORD *)v37;
                v37 += 8;
                *v38++ = v40;
                v39 += 8;
              }
              while (v39);
              if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_70;
LABEL_71:
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
              return (char *)v8 + v10;
            }
            v28 = &v7[v29];
            v27 += v29;
          }
          do
          {
LABEL_70:
            v49 = *v28++;
            *v27++ = v49;
          }
          while (v28 != a4);
          goto LABEL_71;
        }
LABEL_14:
        if (size == v10)
        {
          v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        v19 = 0;
        v18 = 0;
        v17 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        v17 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        v19 = v53.__r_.__value_.__l.__size_;
        v18 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((_BYTE *)&v8->__r_.__value_.__s + 23);
      }
      if ((v17 & 0x80u) == 0)
        v20 = &v53;
      else
        v20 = (std::string *)v18;
      if ((v17 & 0x80u) == 0)
        v21 = v17;
      else
        v21 = v19;
      if ((v9 & 0x80) != 0)
      {
        v22 = v8->__r_.__value_.__l.__size_;
        v23 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v23 - v22 >= __n_add)
        {
          v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v25 = v22 - v10;
          if (v22 == v10)
          {
LABEL_32:
            v26 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_47:
              v8->__r_.__value_.__l.__size_ = v26;
              v24->__r_.__value_.__s.__data_[v26] = 0;
              if (!v21)
                goto LABEL_76;
              goto LABEL_48;
            }
LABEL_36:
            *((_BYTE *)&v8->__r_.__value_.__s + 23) = v26 & 0x7F;
            v24->__r_.__value_.__s.__data_[v26] = 0;
            if (!v21)
              goto LABEL_76;
LABEL_48:
            v30 = (char *)v24 + v10;
            if (v21 < 8)
            {
              v31 = v20;
              goto LABEL_75;
            }
            v31 = v20;
            if ((unint64_t)((char *)v24 + v10 - (char *)v20) >= 0x20)
            {
              if (v21 < 0x20)
              {
                v32 = 0;
                goto LABEL_65;
              }
              v32 = v21 & 0xFFFFFFFFFFFFFFE0;
              v41 = &v20->__r_.__value_.__r.__words[2];
              v42 = (_OWORD *)((char *)&v24->__r_.__value_.__r.__words[2] + v10);
              v43 = v21 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v21 == v32)
                goto LABEL_76;
              if ((v21 & 0x18) != 0)
              {
LABEL_65:
                v30 += v21 & 0xFFFFFFFFFFFFFFF8;
                v31 = (std::string *)((char *)v20 + (v21 & 0xFFFFFFFFFFFFFFF8));
                v45 = (uint64_t *)((char *)v20 + v32);
                v46 = (std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + v32 + v10);
                v47 = v32 - (v21 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_75;
LABEL_76:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                else
                {
                  v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              v31 = (std::string *)((char *)v20 + v32);
              v30 += v32;
            }
            do
            {
LABEL_75:
              v51 = v31->__r_.__value_.__s.__data_[0];
              v31 = (std::string *)((char *)v31 + 1);
              *v30++ = v51;
            }
            while (v31 != (std::string *)((char *)v20 + v21));
            goto LABEL_76;
          }
LABEL_46:
          memmove((char *)v24 + v10 + __n_add, (char *)v24 + v10, v25);
          v26 = v22 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_47;
          goto LABEL_36;
        }
      }
      else
      {
        v22 = v9;
        v23 = 22;
        v24 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          v25 = v9 - v10;
          if (v9 == v10)
            goto LABEL_32;
          goto LABEL_46;
        }
      }
      std::string::__grow_by(v8, v23, v22 + __n_add - v23, v22, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v22 + __n_add;
      v24 = (std::string *)v8->__r_.__value_.__r.__words[0];
      v26 = v22 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_47;
      goto LABEL_36;
    }
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v10 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (a3 < (unint64_t)this || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = 22;
        v13 = this;
        if (22 - size < __n_add)
          goto LABEL_6;
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_10009B4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10009B520(std::string *this, uint64_t a2, unint64_t a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  std::string::value_type *v7;
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  unsigned int v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  size_t v24;
  std::string::size_type v25;
  _BYTE *v26;
  unint64_t v27;
  std::string::value_type *v28;
  std::string::value_type *v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  __int128 v36;
  _QWORD *v37;
  std::string::value_type *v38;
  unint64_t v39;
  uint64_t v40;
  std::string::size_type *v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  std::string::value_type v51;
  std::string v53;

  v7 = (std::string::value_type *)a3;
  v8 = this;
  v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v9 < 0)
  {
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      size = this->__r_.__value_.__l.__size_;
      if ((unint64_t)v13 > a3 || (unint64_t)v13->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v12 - size < __n_add)
        {
LABEL_6:
          std::string::__grow_by(this, v12, size + __n_add - v12, size, v10, 0, __n_add);
          v8->__r_.__value_.__l.__size_ = size + __n_add;
          v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_39:
            v8->__r_.__value_.__l.__size_ = v14;
            v13->__r_.__value_.__s.__data_[v14] = 0;
            if (v7 == a4)
              goto LABEL_72;
            goto LABEL_40;
          }
LABEL_16:
          *((_BYTE *)&v8->__r_.__value_.__s + 23) = v14 & 0x7F;
          v13->__r_.__value_.__s.__data_[v14] = 0;
          if (v7 == a4)
            goto LABEL_72;
LABEL_40:
          v26 = (char *)v13 + v10;
          v27 = a4 - v7;
          if ((unint64_t)(a4 - v7) < 8)
          {
            v28 = v7;
            goto LABEL_71;
          }
          if ((unint64_t)((char *)v13 + v10 - v7) < 0x20)
          {
            v28 = v7;
            goto LABEL_71;
          }
          if (v27 >= 0x20)
          {
            v32 = v27 & 0xFFFFFFFFFFFFFFE0;
            v33 = (_OWORD *)((char *)&v13->__r_.__value_.__r.__words[2] + v10);
            v34 = (__int128 *)(v7 + 16);
            v35 = v27 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v34;
              *(v33 - 1) = *(v34 - 1);
              *v33 = v36;
              v33 += 2;
              v34 += 2;
              v35 -= 32;
            }
            while (v35);
            if (v27 == v32)
              goto LABEL_72;
            if ((v27 & 0x18) == 0)
            {
              v26 += v32;
              v28 = &v7[v32];
              do
              {
LABEL_71:
                v49 = *v28++;
                *v26++ = v49;
              }
              while (v28 != a4);
              goto LABEL_72;
            }
          }
          else
          {
            v32 = 0;
          }
          v28 = &v7[v27 & 0xFFFFFFFFFFFFFFF8];
          v26 += v27 & 0xFFFFFFFFFFFFFFF8;
          v37 = (std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + v10 + v32);
          v38 = &v7[v32];
          v39 = v32 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v40 = *(_QWORD *)v38;
            v38 += 8;
            *v37++ = v40;
            v39 += 8;
          }
          while (v39);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_71;
LABEL_72:
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
          return (char *)v8 + v10;
        }
LABEL_14:
        if (size == v10)
        {
          v14 = v10 + __n_add;
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        else
        {
          memmove((char *)v13 + v10 + __n_add, (char *)v13 + v10, size - v10);
          v14 = size + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_39;
        }
        goto LABEL_16;
      }
LABEL_18:
      memset(&v53, 0, sizeof(v53));
      if ((std::string::value_type *)a3 == a4)
      {
        v18 = 0;
        v17 = 0;
        v16 = 0;
      }
      else
      {
        do
          std::string::push_back(&v53, *v7++);
        while (v7 != a4);
        v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        v18 = v53.__r_.__value_.__l.__size_;
        v17 = v53.__r_.__value_.__r.__words[0];
        LOBYTE(v9) = *((_BYTE *)&v8->__r_.__value_.__s + 23);
      }
      if ((v16 & 0x80u) == 0)
        v19 = &v53;
      else
        v19 = (std::string *)v17;
      if ((v16 & 0x80u) == 0)
        v20 = v16;
      else
        v20 = v18;
      if ((v9 & 0x80) != 0)
      {
        v21 = v8->__r_.__value_.__l.__size_;
        v22 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v22 - v21 >= __n_add)
        {
          v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
          v24 = v21 - v10;
          if (v21 == v10)
          {
LABEL_32:
            v25 = v10 + __n_add;
            if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_46:
              v8->__r_.__value_.__l.__size_ = v25;
              v23->__r_.__value_.__s.__data_[v25] = 0;
              if (!v20)
                goto LABEL_77;
              goto LABEL_47;
            }
LABEL_36:
            *((_BYTE *)&v8->__r_.__value_.__s + 23) = v25 & 0x7F;
            v23->__r_.__value_.__s.__data_[v25] = 0;
            if (!v20)
              goto LABEL_77;
LABEL_47:
            v29 = (char *)v23 + v10;
            if (v20 < 8)
            {
              v30 = v19;
              goto LABEL_76;
            }
            v30 = v19;
            if ((unint64_t)((char *)v23 + v10 - (char *)v19) >= 0x20)
            {
              if (v20 < 0x20)
              {
                v31 = 0;
                goto LABEL_66;
              }
              v31 = v20 & 0xFFFFFFFFFFFFFFE0;
              v41 = &v19->__r_.__value_.__r.__words[2];
              v42 = (_OWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + v10);
              v43 = v20 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v44 = *(_OWORD *)v41;
                *(v42 - 1) = *((_OWORD *)v41 - 1);
                *v42 = v44;
                v41 += 4;
                v42 += 2;
                v43 -= 32;
              }
              while (v43);
              if (v20 == v31)
                goto LABEL_77;
              if ((v20 & 0x18) != 0)
              {
LABEL_66:
                v29 += v20 & 0xFFFFFFFFFFFFFFF8;
                v30 = (std::string *)((char *)v19 + (v20 & 0xFFFFFFFFFFFFFFF8));
                v45 = (uint64_t *)((char *)v19 + v31);
                v46 = (std::string::size_type *)((char *)v23->__r_.__value_.__r.__words + v31 + v10);
                v47 = v31 - (v20 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v48 = *v45++;
                  *v46++ = v48;
                  v47 += 8;
                }
                while (v47);
                if (v20 != (v20 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_76;
LABEL_77:
                if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
                {
                  v50 = (char *)(v8->__r_.__value_.__r.__words[0] + v10);
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                else
                {
                  v50 = (char *)v8 + v10;
                  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    return v50;
                }
                operator delete(v53.__r_.__value_.__l.__data_);
                return v50;
              }
              v30 = (std::string *)((char *)v19 + v31);
              v29 += v31;
            }
            do
            {
LABEL_76:
              v51 = v30->__r_.__value_.__s.__data_[0];
              v30 = (std::string *)((char *)v30 + 1);
              *v29++ = v51;
            }
            while (v30 != (std::string *)((char *)v19 + v20));
            goto LABEL_77;
          }
LABEL_45:
          memmove((char *)v23 + v10 + __n_add, (char *)v23 + v10, v24);
          v25 = v21 + __n_add;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_46;
          goto LABEL_36;
        }
      }
      else
      {
        v21 = v9;
        v22 = 22;
        v23 = v8;
        if (22 - (unint64_t)v9 >= __n_add)
        {
          v24 = v9 - v10;
          if (v9 == v10)
            goto LABEL_32;
          goto LABEL_45;
        }
      }
      std::string::__grow_by(v8, v22, v21 + __n_add - v22, v21, v10, 0, __n_add);
      v8->__r_.__value_.__l.__size_ = v21 + __n_add;
      v23 = (std::string *)v8->__r_.__value_.__r.__words[0];
      v25 = v21 + __n_add;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_46;
      goto LABEL_36;
    }
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v10 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((unint64_t)this > a3 || (unint64_t)this->__r_.__value_.__r.__words + size + 1 <= a3)
      {
        v12 = 22;
        v13 = this;
        if (22 - size < __n_add)
          goto LABEL_6;
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  return (char *)v8 + v10;
}

void sub_10009B97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10009B9C8(_QWORD *a1)
{
  *a1 = off_100406868;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

int *sub_10009BA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int *result;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v14;
  uint64_t v15;
  int **v16;
  int *v17;
  int v18[2];

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    if (qword_100417EE8 == -1)
    {
      v5 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
        goto LABEL_5;
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBE40);
      v5 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        sub_10009E51C(a1 + 32, v18);
        operator new();
      }
    }
    LOWORD(v18[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@IndoorAvl, read, requested to getNextVenueBoundsIncrementally but have no file handle, opening now", (uint8_t *)v18, 2u);
    goto LABEL_5;
  }
  v6 = sub_10009D99C(a1, v4);
  v7 = v6;
  if ((_DWORD)v6 != 1)
  {
    if (qword_100417EE8 == -1)
    {
      v9 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
        goto LABEL_16;
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBE40);
      v9 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
        goto LABEL_16;
    }
    v18[0] = 67240192;
    v18[1] = v7;
    v10 = "@IndoorAvl, read, getNextVenueBoundsIncrementally, encountered field with number %{public}d, so there are no m"
          "ore venue bounds left, releasing file handle";
    v11 = v9;
    v12 = OS_LOG_TYPE_INFO;
    v13 = 8;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)v18, v13);
    goto LABEL_16;
  }
  if ((sub_10009D744(v6, v4, a2) & 1) != 0)
    return (int *)1;
  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
    v14 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
  {
LABEL_14:
    LOWORD(v18[0]) = 0;
    v10 = "@IndoorAvl, read, getNextVenueBoundsIncrementally, expected that we should have another VenueBounds object, but we don't";
    v11 = v14;
    v12 = OS_LOG_TYPE_ERROR;
    v13 = 2;
    goto LABEL_15;
  }
LABEL_16:
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v17 = *(int **)(a1 + 80);
  v16 = (int **)(a1 + 80);
  sub_10009E2C8(v17);
  result = *v16;
  *v16 = 0;
  if (result)
  {
    sub_10009E290(result);
    operator delete();
  }
  return result;
}

void sub_10009BD28()
{
  operator delete();
}

void sub_10009BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_10009E290(&a9);
  _Unwind_Resume(a1);
}

void sub_10009BE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009BE70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10009BE80(_QWORD *a1, uint64_t a2)
{
  *a1 = off_100406868;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_10009BF28((uint64_t)a1, a2);
  return a1;
}

void sub_10009BEDC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;
  _QWORD *v3;

  if (*v3)
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10009BF14(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009BF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/indoor_availability.pb.cc", 856);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    v8 = v6 + v5;
    if (v7 < v8)
    {
      v9 = 2 * v7;
      if (2 * v7 <= v8)
        v9 = v8;
      if (v9 <= 4)
        v9 = 4;
      *(_DWORD *)(a1 + 28) = v9;
      operator new[]();
    }
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * v6), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10009C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10009C074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10009C0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009C108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009C118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009C2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10009C2FC(double **a1)
{
  unint64_t v2;
  double *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  double v8;
  double *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  const double *v13;
  uint64_t v14;
  const double *v15;
  const double *v16;
  const double *v17;
  double v18;
  double *v19;
  __int128 v20;
  BOOL v21;
  double **v22;
  double **v23;
  _QWORD *v24;
  unint64_t v25;
  double *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  const double *v36;
  uint64_t v37;
  const double *v38;
  const double *v39;
  const double *v40;
  double v41;
  double *v42;
  __int128 v43;
  float64x2x2_t v44;
  float64x2x2_t v45;
  float64x2x2_t v46;
  float64x2x2_t v47;
  float64x2x2_t v48;
  float64x2x2_t v49;
  float64x2x2_t v50;
  float64x2x2_t v51;

  sub_10009C5C0((uint64_t)a1);
  v2 = (unint64_t)*a1;
  v3 = a1[1];
  v4 = (char *)v3 - (char *)*a1;
  v5 = (unint64_t)(*a1 + 2);
  if (v4 < 0x40 || v5 == (_QWORD)v3)
    goto LABEL_16;
  v7 = v4 - 32;
  if (v7 < 0x30)
  {
    v8 = 0.0;
    v9 = *a1 + 2;
    v10 = *a1;
    do
    {
LABEL_10:
      v18 = *v9;
      v9 += 2;
      v8 = v8 + (*v10 + v18) * (v10[1] - v10[3]);
      v10 += 2;
    }
    while (v9 != v3);
    goto LABEL_11;
  }
  v11 = (v7 >> 4) + 1;
  v12 = 16 * (v11 & 0x1FFFFFFFFFFFFFFCLL);
  v9 = (double *)(v5 + v12);
  v10 = (double *)(v2 + v12);
  v13 = (const double *)(v2 + 32);
  v8 = 0.0;
  v14 = v11 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v15 = v13 - 4;
    v44 = vld2q_f64(v15);
    v46 = vld2q_f64(v13);
    v16 = v13 - 2;
    v17 = v13 + 2;
    v48 = vld2q_f64(v16);
    v50 = vld2q_f64(v17);
    v44.val[0] = vmulq_f64(vaddq_f64(v44.val[0], v48.val[0]), vsubq_f64(v44.val[1], v48.val[1]));
    v44.val[1] = vmulq_f64(vaddq_f64(v46.val[0], v50.val[0]), vsubq_f64(v46.val[1], v50.val[1]));
    v8 = v8 + v44.val[0].f64[0] + v44.val[0].f64[1] + v44.val[1].f64[0] + v44.val[1].f64[1];
    v13 += 8;
    v14 -= 4;
  }
  while (v14);
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFCLL))
    goto LABEL_10;
LABEL_11:
  if (v8 * 0.5 < 0.0 && (double *)v2 != v3)
  {
    v19 = v3 - 2;
    if ((unint64_t)v19 > v2)
    {
      do
      {
        v20 = *(_OWORD *)(v5 - 16);
        *(_OWORD *)(v5 - 16) = *(_OWORD *)v19;
        *(_OWORD *)v19 = v20;
        v19 -= 2;
        v21 = v5 >= (unint64_t)v19;
        v5 += 16;
      }
      while (!v21);
    }
  }
LABEL_16:
  v24 = a1 + 3;
  v22 = (double **)a1[3];
  v23 = (double **)v24[1];
  if (v22 != v23)
  {
    while (1)
    {
      sub_10009C5C0((uint64_t)v22);
      v25 = (unint64_t)*v22;
      v26 = v22[1];
      v27 = (char *)v26 - (char *)*v22;
      v28 = (unint64_t)(*v22 + 2);
      if (v27 < 0x40 || v28 == (_QWORD)v26)
        goto LABEL_18;
      v30 = v27 - 32;
      if (v30 < 0x30)
        break;
      v34 = (v30 >> 4) + 1;
      v35 = 16 * (v34 & 0x1FFFFFFFFFFFFFFCLL);
      v32 = (double *)(v28 + v35);
      v33 = (double *)(v25 + v35);
      v36 = (const double *)(v25 + 32);
      v31 = 0.0;
      v37 = v34 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = v36 - 4;
        v45 = vld2q_f64(v38);
        v47 = vld2q_f64(v36);
        v39 = v36 - 2;
        v40 = v36 + 2;
        v49 = vld2q_f64(v39);
        v51 = vld2q_f64(v40);
        v45.val[0] = vmulq_f64(vaddq_f64(v45.val[0], v49.val[0]), vsubq_f64(v45.val[1], v49.val[1]));
        v45.val[1] = vmulq_f64(vaddq_f64(v47.val[0], v51.val[0]), vsubq_f64(v47.val[1], v51.val[1]));
        v31 = v31 + v45.val[0].f64[0] + v45.val[0].f64[1] + v45.val[1].f64[0] + v45.val[1].f64[1];
        v36 += 8;
        v37 -= 4;
      }
      while (v37);
      if (v34 != (v34 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
LABEL_29:
      if (v31 * 0.5 > 0.0 && (double *)v25 != v26)
      {
        v42 = v26 - 2;
        if ((unint64_t)v42 > v25)
        {
          do
          {
            v43 = *(_OWORD *)(v28 - 16);
            *(_OWORD *)(v28 - 16) = *(_OWORD *)v42;
            *(_OWORD *)v42 = v43;
            v42 -= 2;
            v21 = v28 >= (unint64_t)v42;
            v28 += 16;
          }
          while (!v21);
        }
      }
LABEL_18:
      v22 += 3;
      if (v22 == v23)
        return;
    }
    v31 = 0.0;
    v32 = *v22 + 2;
    v33 = *v22;
    do
    {
LABEL_28:
      v41 = *v32;
      v32 += 2;
      v31 = v31 + (*v33 + v41) * (v33[1] - v33[3]);
      v33 += 2;
    }
    while (v32 != v26);
    goto LABEL_29;
  }
}

void sub_10009C5C0(uint64_t a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v1 = *(double **)a1;
  v2 = *(double **)(a1 + 8);
  v3 = (uint64_t)v2 - *(_QWORD *)a1;
  if ((unint64_t)v3 >= 0x30)
  {
    v5 = *v1;
    v6 = *(v2 - 2);
    if (*v1 != v6)
    {
      if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      v10 = vabdd_f64(v5, v6);
      v11 = fabs(v5);
      v12 = fabs(v6);
      if (v11 >= v12)
        v12 = v11;
      v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
      if (v10 > v13)
        goto LABEL_21;
    }
    v7 = v1[1];
    v8 = *(v2 - 1);
    if (v7 != v8)
    {
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      v25 = vabdd_f64(v7, v8);
      v26 = fabs(v7);
      v27 = fabs(v8);
      if (v26 < v27)
        v26 = v27;
      v28 = v26 >= 1.0 ? v26 * 2.22044605e-16 : 2.22044605e-16;
      if (v25 > v28)
      {
LABEL_21:
        v15 = *((_QWORD *)v1 + 1);
        v16 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v2 < v16)
        {
          *v2 = v5;
          *((_QWORD *)v2 + 1) = v15;
          v17 = (uint64_t)(v2 + 2);
LABEL_39:
          *(_QWORD *)(a1 + 8) = v17;
          return;
        }
        v18 = v3 >> 4;
        v19 = (v3 >> 4) + 1;
        if (v19 >> 60)
          sub_1000D02C0();
        v20 = v16 - (_QWORD)v1;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 60)
            sub_1000CDEB8();
          v22 = (char *)operator new(16 * v21);
          v23 = &v22[16 * v18];
          v24 = &v22[16 * v21];
          *(double *)v23 = v5;
          *((_QWORD *)v23 + 1) = v15;
          v17 = (uint64_t)(v23 + 16);
          if (v2 == v1)
            goto LABEL_37;
        }
        else
        {
          v23 = (char *)(16 * v18);
          v24 = 0;
          *(double *)v23 = v5;
          *((_QWORD *)v23 + 1) = v15;
          v17 = 16 * v18 + 16;
          if (v2 == v1)
          {
LABEL_37:
            *(_QWORD *)a1 = v23;
            *(_QWORD *)(a1 + 8) = v17;
            *(_QWORD *)(a1 + 16) = v24;
LABEL_38:
            operator delete(v1);
            goto LABEL_39;
          }
        }
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v2 - 1);
          v23 -= 16;
          v2 -= 2;
        }
        while (v2 != v1);
        v1 = *(double **)a1;
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v24;
        if (!v1)
          goto LABEL_39;
        goto LABEL_38;
      }
    }
  }
}

void sub_10009CA4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10009CA94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009CCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void **v9;
  void *v10;

  sub_1000FE50C(v9);
  _Unwind_Resume(a1);
}

void sub_10009CD18(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v4 - 2) = 0;
        *((_QWORD *)v4 - 1) = 0;
        *((_QWORD *)v4 - 3) = 0;
        v4 -= 24;
      }
      while (v4 != v2);
      v11 = *a1;
      v2 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v11)
      {
        do
        {
          if (*(v2 - 1) < 0)
            operator delete(*((void **)v2 - 3));
          v2 -= 24;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

void sub_10009CE4C(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v24 = 0;
LABEL_47:
      sub_10004AAA0((uint64_t)a1, v24);
      goto LABEL_48;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v35 = (uint64_t *)v10[1];
          if (!v35)
            break;
          do
          {
            v10 = v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      while (1)
      {
        v9 = v10;
        v14 = v13[4];
        v12[4] = v14;
        v15 = *v8;
        v16 = (uint64_t **)(v5 + 8);
        v17 = (uint64_t **)(v5 + 8);
        if (*v8)
          break;
LABEL_14:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        *v17 = v12;
        v18 = **(_QWORD **)v5;
        if (v18)
          goto LABEL_15;
LABEL_16:
        sub_1000E05F4(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (uint64_t *)v10[2];
          if (v10)
          {
            v21 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v22 = (uint64_t *)v10[1];
                if (!v22)
                  break;
                do
                {
                  v10 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
              {
                do
                {
                  v10 = v21;
                  v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v19 = (_QWORD *)v13[1];
        if (v19)
        {
          do
          {
            v4 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v20 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          v12 = v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          v16 = (uint64_t **)v15;
          if (v14 >= v15[4])
            break;
          v15 = (uint64_t *)*v15;
          v17 = v16;
          if (!*v16)
            goto LABEL_14;
        }
        v15 = (uint64_t *)v15[1];
      }
      while (v15);
      v17 = v16 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v16;
      v16[1] = v12;
      v18 = **(_QWORD **)v5;
      if (!v18)
        goto LABEL_16;
LABEL_15:
      *(_QWORD *)v5 = v18;
      v12 = *v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_10004AAA0(v5, v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = (uint64_t **)v5;
      v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    v25 = (uint64_t **)(v5 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = v4[4];
      v26[4] = v28;
      v29 = *v25;
      v30 = (uint64_t **)(v5 + 8);
      v31 = (uint64_t **)(v5 + 8);
      if (*v25)
        break;
LABEL_52:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)v5;
      if (v32)
        goto LABEL_53;
LABEL_54:
      sub_1000E05F4(*(uint64_t **)(v5 + 8), v27);
      ++*(_QWORD *)(v5 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v20 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v20);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = (uint64_t **)v29;
        if (v28 >= v29[4])
          break;
        v29 = (uint64_t *)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_52;
      }
      v29 = (uint64_t *)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)v5;
    if (!v32)
      goto LABEL_54;
LABEL_53:
    *(_QWORD *)v5 = v32;
    v27 = *v31;
    goto LABEL_54;
  }
}

void sub_10009D1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009D20C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009D220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009D29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int *sub_10009D2C0@<X0>(const std::string *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  off_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  int *result;
  NSObject *v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t v21[48];
  int v22;
  uint8_t buf[12];
  int v24;
  uint8_t v25[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v6 = operator new(0x90uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_1003FBE70;
  *(_QWORD *)a3 = sub_10009DCEC((uint64_t)(v6 + 3));
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  v7 = sub_10006CE40((uint64_t)a1, 0);
  std::string::operator=((std::string *)(a3 + 32), a1);
  *(_QWORD *)(a3 + 72) = v7;
  sub_10009E51C((uint64_t)a1, &v24);
  wireless_diagnostics::google::protobuf::io::FileInputStream::FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v25, v24, -1);
  if (qword_100417EE8 == -1)
  {
    v8 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417EE8, &stru_1003FBE40);
  v8 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, starting incremental deserialization", v21, 2u);
  }
LABEL_4:
  while (1)
  {
    sub_10009DA68((uint64_t)v21);
    v9 = sub_10009D99C(a3, (uint64_t)v25);
    v10 = v9;
    if ((_DWORD)v9 != 1)
      break;
    if ((sub_10009D744(v9, (uint64_t)v25, (uint64_t)v21) & 1) == 0)
    {
      if (qword_100417EE8 == -1)
      {
        v12 = qword_100417EF0;
        if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      else
      {
        dispatch_once(&qword_100417EE8, &stru_1003FBE40);
        v12 = qword_100417EF0;
        if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
        {
LABEL_9:
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, failed to read a VenueBounds object even though we expected we'd have one", buf, 2u);
        }
      }
      *a2 = 0;
      break;
    }
    v11 = *(_DWORD *)(a3 + 60) + v22;
    ++*(_DWORD *)(a3 + 56);
    *(_DWORD *)(a3 + 60) = v11;
    sub_10009DC84(v21);
  }
  sub_10009DC84(v21);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v25);
  result = sub_10009E290(&v24);
  if (v10 != 1)
  {
    sub_10009DCEC((uint64_t)v21);
    if (sub_10009DE44(a3, (wireless_diagnostics::google::protobuf::MessageLite *)v21, v7))
    {
      sub_10009E540(a3, (uint64_t)v21);
      if (qword_100417EE8 == -1)
      {
        v14 = qword_100417EF0;
        v15 = 1;
        if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
        {
LABEL_16:
          *(_BYTE *)(a3 + 16) = 1;
LABEL_21:
          *a2 = v15;
          return (int *)sub_10009DE40(v21);
        }
      }
      else
      {
        dispatch_once(&qword_100417EE8, &stru_1003FBE40);
        v14 = qword_100417EF0;
        v15 = 1;
        if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
          goto LABEL_16;
      }
      v16 = *(_DWORD *)(a3 + 56);
      v17 = *(_DWORD *)(a3 + 60);
      v18 = *(_QWORD *)(a3 + 64);
      v19 = *(_QWORD *)(a3 + 72);
      *(_DWORD *)v25 = 67240960;
      v26 = v16;
      v27 = 1026;
      v28 = v17;
      v29 = 2048;
      v30 = v18;
      v31 = 2050;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, we expect that this availability tile will have %{public}d venues and %{public}d total exteriors; %lld bytes in the venuebounds section and %{public}lld bytes overall",
        v25,
        0x22u);
      goto LABEL_16;
    }
    if (qword_100417EE8 == -1)
    {
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBE40);
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
    }
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, openAndReadAllExceptVenueBounds, failed to read a availability tile metadata even though we expected we'd have some", v25, 2u);
    goto LABEL_20;
  }
  return result;
}

void sub_10009D684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E09C4(v1);
  _Unwind_Resume(a1);
}

void sub_10009D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10009DE40(&a9);
  sub_1000E09C4(v9);
  _Unwind_Resume(a1);
}

void sub_10009D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  uint64_t v27;

  sub_10009E290(&a27);
  sub_1000E09C4(v27);
  _Unwind_Resume(a1);
}

void sub_10009D6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E09C4(v1);
  _Unwind_Resume(a1);
}

void sub_10009D6E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_10009D6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E09C4(v1);
  _Unwind_Resume(a1);
}

void sub_10009D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28)
{
  uint64_t v28;

  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)&a28);
  sub_10009E290(&a27);
  sub_1000E09C4(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_10009D744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  int v26;

  if (!a3)
  {
    sub_1003424D0();
    __break(1u);
  }
  v14 = a2;
  v15 = 0;
  v16 = 0;
  memset(v17, 0, 14);
  v18 = xmmword_100382F50;
  v19 = 0;
  v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v21 = 0;
  v22 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  *(_DWORD *)buf = 0;
  if ((unint64_t)v15 >= v16 || (char)*v15 < 0)
  {
    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, (unsigned int *)buf))
    {
      v10 = 1;
      if (qword_100417EE8 == -1)
        goto LABEL_17;
      goto LABEL_22;
    }
  }
  else
  {
    *(_DWORD *)buf = *v15++;
  }
  v5 = v19++;
  if (v5 >= v20)
  {
    v10 = 2;
    if (qword_100417EE8 == -1)
      goto LABEL_17;
LABEL_22:
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
    goto LABEL_17;
  }
  v6 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, *(int *)buf);
  if (!sub_100099550(a3, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v7, v8))
  {
    v10 = 3;
    if (qword_100417EE8 == -1)
      goto LABEL_17;
    goto LABEL_22;
  }
  if (BYTE4(v17[1]))
  {
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v6);
    if (v19 >= 1)
      --v19;
    v9 = 1;
    goto LABEL_20;
  }
  v10 = 4;
  if (qword_100417EE8 != -1)
    goto LABEL_22;
LABEL_17:
  v11 = (id)qword_100417EF0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    *(_DWORD *)buf = 134349312;
    v24 = v12;
    v25 = 1026;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "@IndoorAvl, _readVenueBoundProtobufObjectFromZCIS, failed to read a venue bounds from the input stream, have read %{public}lld bytes, error %{public}d", buf, 0x12u);
  }

  v9 = 0;
LABEL_20:
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  return v9;
}

void sub_10009D978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10009D99C(uint64_t a1, uint64_t a2)
{
  unsigned int TagFallback;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = a2;
  v8 = 0;
  v9 = 0;
  memset(v10, 0, 14);
  v11 = xmmword_100382F50;
  v12 = 0;
  v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v14 = 0;
  v15 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
  if ((unint64_t)v8 >= v9 || *v8 < 0)
  {
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
    LODWORD(v10[1]) = TagFallback;
  }
  else
  {
    TagFallback = *v8;
    LODWORD(v10[1]) = TagFallback;
    ++v8;
  }
  v5 = TagFallback >> 3;
  *(_DWORD *)(a1 + 88) = v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v7);
  return v5;
}

void sub_10009DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10009DA68(uint64_t a1)
{
  *(_QWORD *)a1 = off_100406918;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_10009DAC0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10009DAD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_100406918;
  if (qword_10042EAC8 != a1)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 72);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  if (*(_QWORD *)(a1 + 80))
    operator delete[]();
  v4 = *(_DWORD *)(a1 + 52);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v4 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (*(_QWORD *)(a1 + 40))
    operator delete[]();
  if (*(int *)(a1 + 28) >= 1)
  {
    v7 = 0;
    do
      wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete(*(_QWORD *)(*(_QWORD *)(a1 + 16)
                                                                                                + 8 * v7++));
    while (v7 < *(int *)(a1 + 28));
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10009DC04(_QWORD *a1)
{
  *a1 = off_1004067B8;
  if (a1[5])
    operator delete[]();
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_10009DC88(_QWORD *a1)
{
  *a1 = off_100406868;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_10009DCEC(uint64_t a1)
{
  __int128 v2;

  *(_QWORD *)a1 = off_1004069C8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FFF5C28F5C28F5CLL;
  *(_QWORD *)&v2 = 0xC8000000C8;
  *((_QWORD *)&v2 + 1) = 0xC8000000C8;
  *(_OWORD *)(a1 + 56) = v2;
  *(_OWORD *)(a1 + 72) = xmmword_10039ACD0;
  *(_QWORD *)(a1 + 88) = 0x40E0000000000001;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 1088421888;
  return a1;
}

void sub_10009DD64(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10009DD78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;

  *(_QWORD *)a1 = off_1004069C8;
  if (qword_10042EAD0 != a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *(_DWORD *)(a1 + 28);
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v4 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_10009DE44(uint64_t a1, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v19[5];
  __int128 v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE v26[12];
  uint8_t buf[8];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (qword_100417EE8 == -1)
  {
    v6 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417EE8, &stru_1003FBE40);
  v6 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    v7 = *(_DWORD *)(a1 + 88);
    v8 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v7;
    v28 = 2050;
    v29 = v8;
    v30 = 2050;
    v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@IndoorAvl, load, _readMetadataProtobufObjectsFromFile, got %d as field_number, so no more venue bounds; read %{pu"
      "blic}lld bytes of %{public}lld from zcis",
      buf,
      0x1Cu);
  }
LABEL_4:
  sub_10009E51C(a1 + 32, &v25);
  sub_10009E534(&v25, *(_QWORD *)(a1 + 96));
  wireless_diagnostics::google::protobuf::io::FileInputStream::FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)buf, v25, -1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 96);
  v19[0] = buf;
  memset(&v19[1], 0, 30);
  v20 = xmmword_100382F50;
  v21 = 0;
  v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v23 = 0;
  v24 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  if (a2)
  {
    LODWORD(a1) = *(_DWORD *)(a1 + 96);
    if (qword_100417EE8 == -1)
    {
      v9 = a3 - a1;
      v10 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_10034261C((NSObject **)v26);

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/daemon/Framework/AvailabilityTile.mm", 184, "_readMetadataProtobufObjectsFromFile");
    __break(1u);
  }
  dispatch_once(&qword_100417EE8, &stru_1003FBE40);
  v9 = a3 - a1;
  v10 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    *(_DWORD *)v26 = 67240192;
    *(_DWORD *)&v26[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@IndoorAvl, load, need to read %{public}d more", v26, 8u);
  }
LABEL_8:
  v11 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v9);
  v12 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromCodedStream(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  if ((v12 & 1) == 0)
  {
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v11);
LABEL_12:
    if (qword_100417EE8 == -1)
    {
      v15 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBE40);
      v15 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
    }
    *(_DWORD *)v26 = 67240192;
    *(_DWORD *)&v26[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "@IndoorAvl, load, Expected that we parsed and consumed the entire message, but we didn't, parsed = %{public}d", v26, 8u);
    if (qword_100417EE8 != -1)
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBE40);
      v16 = (id)qword_100417EF0;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_15:
    v16 = (id)qword_100417EF0;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
LABEL_17:

      v14 = 0;
      goto LABEL_18;
    }
LABEL_16:
    v17 = (*(uint64_t (**)(uint8_t *))(*(_QWORD *)buf + 40))(buf);
    *(_DWORD *)v26 = 134349056;
    *(_QWORD *)&v26[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "@IndoorAvl, _readMetadataProtobufObjectsFromFile, failed to read localizer params from the input stream, have read %{public}lld bytes from local stream", v26, 0xCu);
    goto LABEL_17;
  }
  v13 = BYTE4(v19[4]);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19, v11);
  if (!v13)
    goto LABEL_12;
  v14 = 1;
LABEL_18:
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)v19);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)buf);
  sub_10009E290(&v25);
  return v14;
}

void sub_10009E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a12);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)&a26);
  sub_10009E290(&a23);
  _Unwind_Resume(a1);
}

int *sub_10009E290(int *a1)
{
  if (*a1 != -1)
    sub_10009E2C8(a1);
  return a1;
}

uint64_t sub_10009E2C8(int *a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  if (v2 == -1)
    sub_100342764();
  result = close(v2);
  *a1 = -1;
  if ((_DWORD)result == -1)
  {
    v4 = sub_1003428D0();
    return sub_10009E30C(v4);
  }
  return result;
}

int *sub_10009E30C(int *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  const char *v9;
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  int v18;
  NSObject *v20;
  std::runtime_error *exception;
  void *__dst[2];
  int64_t v23;

  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_11;
  }
  HIBYTE(v23) = v10;
  v12 = __dst;
  if (v10)
LABEL_11:
    memmove(v12, v9, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v15 = a3 | 0x10;
  if (a4 != 1)
    v15 = a3;
  if (a4 == 2)
    v16 = a3 | 0x20;
  else
    v16 = v15;
  if (v23 >= 0)
    v17 = (const char *)__dst;
  else
    v17 = (const char *)__dst[0];
  v18 = open(v17, v16, a5);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  *a1 = v18;
  if (v18 == -1)
  {
    if (qword_100417EE8 == -1)
    {
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003FBED0);
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "error while opening availability file");
      }
    }
    LOWORD(__dst[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "@IndoorAvl, error while opening file", (uint8_t *)__dst, 2u);
    goto LABEL_28;
  }
  return a1;
}

void sub_10009E4EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10009E500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *sub_10009E51C@<X0>(uint64_t a1@<X0>, int *a2@<X8>)
{
  return sub_10009E30C(a2, a1, 0, 0, 0);
}

off_t sub_10009E534(int *a1, off_t a2)
{
  return lseek(*a1, a2, 0);
}

uint64_t sub_10009E540(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 2) != 0)
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (v5)
    {
      v6 = *(_QWORD *)result;
      *(_DWORD *)(v6 + 112) = *(_DWORD *)(*(_QWORD *)result + 112) | 2;
      v7 = *(_QWORD *)(v6 + 40);
      if (!v7)
LABEL_6:
        operator new();
    }
    else
    {
      v5 = *(_QWORD *)(qword_10042EAD0 + 40);
      v8 = *(_QWORD *)result;
      *(_DWORD *)(v8 + 112) = *(_DWORD *)(*(_QWORD *)result + 112) | 2;
      v7 = *(_QWORD *)(v8 + 40);
      if (!v7)
        goto LABEL_6;
    }
    result = sub_10009E880(v7, v5);
    v4 = *(_DWORD *)(a2 + 112);
  }
  if ((v4 & 4) != 0)
  {
    v9 = *(_QWORD *)v3;
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(v9 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 4;
    *(_QWORD *)(v9 + 48) = v10;
    v4 = *(_DWORD *)(a2 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_10;
  }
  v11 = *(_QWORD *)v3;
  v12 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v11 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 8;
  *(_DWORD *)(v11 + 56) = v12;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_QWORD *)v3;
  v14 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v13 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x10;
  *(_DWORD *)(v13 + 60) = v14;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v15 = *(_QWORD *)v3;
  v16 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v15 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x20;
  *(_DWORD *)(v15 + 64) = v16;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v17 = *(_QWORD *)v3;
  v18 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v17 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x40;
  *(_DWORD *)(v17 + 68) = v18;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v19 = *(_QWORD *)v3;
  v20 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v19 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x80;
  *(_DWORD *)(v19 + 72) = v20;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v21 = *(_QWORD *)v3;
  v22 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v21 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x100;
  *(_DWORD *)(v21 + 76) = v22;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v23 = *(_QWORD *)v3;
  v24 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v23 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x200;
  *(_DWORD *)(v23 + 80) = v24;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v25 = *(_QWORD *)v3;
  v26 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v25 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x400;
  *(_DWORD *)(v25 + 84) = v26;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_31:
  v27 = *(_QWORD *)v3;
  v28 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v27 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x800;
  *(_DWORD *)(v27 + 88) = v28;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v29 = *(_QWORD *)v3;
  v30 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(v29 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x1000;
  *(_DWORD *)(v29 + 92) = v30;
  v4 = *(_DWORD *)(a2 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      return result;
LABEL_34:
    v33 = *(_QWORD *)(a2 + 96);
    if (v33)
    {
      v34 = *(_QWORD *)v3;
      *(_DWORD *)(v34 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x4000;
      v35 = *(_QWORD *)(v34 + 96);
      if (!v35)
LABEL_38:
        operator new();
    }
    else
    {
      v33 = *(_QWORD *)(qword_10042EAD0 + 96);
      v36 = *(_QWORD *)v3;
      *(_DWORD *)(v36 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x4000;
      v35 = *(_QWORD *)(v36 + 96);
      if (!v35)
        goto LABEL_38;
    }
    return sub_1001AE374(v35, v33);
  }
LABEL_33:
  v31 = *(_QWORD *)v3;
  v32 = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(v31 + 112) = *(_DWORD *)(*(_QWORD *)v3 + 112) | 0x2000;
  *(_DWORD *)(v31 + 104) = v32;
  if ((*(_DWORD *)(a2 + 112) & 0x4000) != 0)
    goto LABEL_34;
  return result;
}

void sub_10009E838()
{
  operator delete();
}

void sub_10009E85C()
{
  operator delete();
}

uint64_t sub_10009E880(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return sub_1000A74E0(v3, a2);
  }
  return result;
}

uint64_t sub_10009E8C0(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  char v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v43;
  uint64_t v44;

  v1 = this;
  v2 = (unsigned int *)(this + 300);
  v3 = *(_BYTE *)(this + 300);
  if (v3)
  {
    *(_OWORD *)(this + 16) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    if (v3 < 0)
    {
      this = *(_QWORD *)(this + 48);
      if (this)
      {
        if (*(_BYTE *)(this + 32))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_DWORD *)(this + 24) = 0;
        }
        v4 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 24) = 0;
        if (v4)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
  }
  v5 = *v2;
  if ((*v2 & 0xFF00) != 0)
  {
    if ((v5 & 0x100) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 32) = 0;
        }
        v6 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v6)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*((_BYTE *)v2 + 1) & 2) != 0)
    {
      v7 = *(_QWORD *)(v1 + 64);
      if (v7)
      {
        v8 = *(_BYTE *)(v7 + 44);
        if (v8)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)(v7 + 24) = 0;
          if ((v8 & 0x10) != 0)
          {
            this = *(_QWORD *)(v7 + 32);
            if (this)
            {
              if (*(_BYTE *)(this + 28))
                *(_QWORD *)(this + 16) = 0;
              v9 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 20) = 0;
              if (v9)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
        }
        v11 = *(_QWORD *)(v7 + 8);
        v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v7 + 8);
        *((_DWORD *)v10 + 9) = 0;
        if (v11)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v10);
      }
    }
    if ((*((_BYTE *)v2 + 1) & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 72);
      if (this)
      {
        if (*(_BYTE *)(this + 48))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 40) = 0;
          *(_QWORD *)(this + 32) = 0;
        }
        v12 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        if (v12)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_DWORD *)(v1 + 96) = 0;
    if ((*(_BYTE *)(v1 + 301) & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 80);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 29) = 0;
        }
        v13 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v13)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*((_BYTE *)v2 + 1) & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 88);
      if (this)
      {
        v14 = *(_DWORD *)(this + 76);
        if ((_BYTE)v14)
        {
          *(_DWORD *)(this + 56) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 32) = 0;
          *(_QWORD *)(this + 16) = 0;
        }
        if ((v14 & 0xFF00) != 0)
        {
          *(_QWORD *)(this + 64) = 0;
          *(_DWORD *)(this + 60) = 0;
        }
        v15 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        *(_DWORD *)(this + 68) = 0;
        if (v15)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*((_BYTE *)v2 + 1) & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 104);
      if (this)
      {
        if (*(_BYTE *)(this + 40))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        v16 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v16)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_QWORD *)(v1 + 112) = 0;
    v5 = *(_DWORD *)(v1 + 300);
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *(_DWORD *)(v1 + 100) = 0;
    *(_QWORD *)(v1 + 120) = 0;
    *(_QWORD *)(v1 + 128) = 0;
    *(_DWORD *)(v1 + 136) = 0;
    if ((v5 & 0x400000) != 0)
    {
      this = *(_QWORD *)(v1 + 144);
      if (this)
      {
        if (*(_BYTE *)(this + 24))
          *(_DWORD *)(this + 16) = 0;
        v17 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 16) = 0;
        if (v17)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_DWORD *)(v1 + 140) = 0;
    v5 = *(_DWORD *)(v1 + 300);
  }
  if (HIBYTE(v5))
  {
    *(_QWORD *)(v1 + 152) = 0;
    if ((v5 & 0x2000000) != 0)
    {
      this = *(_QWORD *)(v1 + 160);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 29) = 0;
        }
        v18 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v18)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*((_BYTE *)v2 + 3) & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 168);
      if (this)
      {
        if (*(_BYTE *)(this + 56))
        {
          *(_BYTE *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        v19 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 48) = 0;
        if (v19)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*((_BYTE *)v2 + 3) & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 176);
      if (this)
      {
        if (*(_BYTE *)(this + 76))
        {
          *(_QWORD *)(this + 64) = 0;
          *(_OWORD *)(this + 32) = 0u;
          *(_OWORD *)(this + 48) = 0u;
          *(_OWORD *)(this + 16) = 0u;
        }
        v20 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 68) = 0;
        if (v20)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_WORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 184) = 0;
    *(_DWORD *)(v1 + 196) = 0;
  }
  if (*(_BYTE *)(v1 + 304))
  {
    if ((*(_BYTE *)(v1 + 304) & 1) != 0)
    {
      this = *(_QWORD *)(v1 + 200);
      if (this)
      {
        v21 = *(_DWORD *)(this + 44);
        if ((_BYTE)v21)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        if ((v21 & 0xFF00) != 0)
          *(_DWORD *)(this + 36) = 0;
        v22 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v22)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_BYTE *)(v1 + 194) = 0;
    if ((*(_BYTE *)(v1 + 304) & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 208);
      if (this)
      {
        v23 = *(_DWORD *)(this + 60);
        if ((_BYTE)v23)
        {
          *(_QWORD *)(this + 40) = 0;
          *(_DWORD *)(this + 36) = 0;
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_WORD *)(this + 32) = 0;
        }
        if ((v23 & 0xFF00) != 0)
          *(_QWORD *)(this + 48) = 0;
        v24 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 52) = 0;
        if (v24)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 304) & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 216);
      if (this)
      {
        if (*(_BYTE *)(this + 36))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
        }
        v25 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 28) = 0;
        if (v25)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_DWORD *)(v1 + 224) = 0;
    if ((*(_BYTE *)(v1 + 304) & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 232);
      if (this)
      {
        v26 = *(_DWORD *)(this + 44);
        if ((_BYTE)v26)
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        if ((v26 & 0xFF00) != 0)
          *(_DWORD *)(this + 36) = 0;
        v27 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v27)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_DWORD *)(v1 + 228) = 0;
    if ((*(_BYTE *)(v1 + 304) & 0x80) != 0)
    {
      v28 = *(_QWORD *)(v1 + 240);
      if (v28)
      {
        v29 = *(_BYTE *)(v28 + 44);
        if (v29)
        {
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)(v28 + 24) = 0;
          if ((v29 & 0x10) != 0)
          {
            this = *(_QWORD *)(v28 + 32);
            if (this)
            {
              if (*(_BYTE *)(this + 28))
                *(_QWORD *)(this + 16) = 0;
              v30 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 20) = 0;
              if (v30)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
        }
        v32 = *(_QWORD *)(v28 + 8);
        v31 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v28 + 8);
        *((_DWORD *)v31 + 9) = 0;
        if (v32)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v31);
      }
    }
  }
  v33 = *(_DWORD *)(v1 + 304);
  if ((v33 & 0xFF00) != 0)
  {
    *(_QWORD *)(v1 + 248) = 0;
    if ((v33 & 0x400) != 0)
    {
      this = *(_QWORD *)(v1 + 256);
      if (this)
      {
        if (*(_BYTE *)(this + 36))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
        }
        v34 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 28) = 0;
        if (v34)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 305) & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 264);
      if (this)
      {
        if (*(_BYTE *)(this + 60))
        {
          *(_QWORD *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        v35 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 52) = 0;
        if (v35)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 305) & 0x10) != 0)
    {
      v36 = *(_QWORD *)(v1 + 272);
      if (v36)
      {
        v37 = *(_DWORD *)(v36 + 44);
        if ((_BYTE)v37)
        {
          *(_WORD *)(v36 + 24) = 0;
          if ((v37 & 4) != 0)
          {
            this = *(_QWORD *)(v36 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 36))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
              }
              v38 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 28) = 0;
              if (v38)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_QWORD *)(v36 + 26) = 0;
          v37 = *(_DWORD *)(v36 + 44);
        }
        if ((v37 & 0xFF00) != 0)
        {
          *(_DWORD *)(v36 + 36) = 0;
          *(_BYTE *)(v36 + 34) = 0;
        }
        v40 = *(_QWORD *)(v36 + 8);
        v39 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v36 + 8);
        *((_DWORD *)v39 + 9) = 0;
        if (v40)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v39);
      }
    }
    if ((*(_BYTE *)(v1 + 305) & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 280);
      if (this)
      {
        if (*(_BYTE *)(this + 48))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_BYTE *)(this + 40) = 0;
          *(_QWORD *)(this + 32) = 0;
        }
        v41 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 40) = 0;
        if (v41)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 305) & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 288);
      if (this)
      {
        if (*(_BYTE *)(this + 56))
        {
          *(_WORD *)(this + 48) = 0;
          *(_OWORD *)(this + 16) = 0u;
          *(_OWORD *)(this + 32) = 0u;
        }
        v42 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 48) = 0;
        if (v42)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
  }
  *(_QWORD *)v2 = 0;
  v44 = *(_QWORD *)(v1 + 8);
  v43 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  if (v44)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v43);
  return this;
}

void sub_10009EE58(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*a3)
    sub_10009EEB4();
  sub_10009EEB4();
}

void sub_10009EEB4()
{
  operator new();
}

void sub_1000A29E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,char a23,char a24,int a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t *v29;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  v31 = *v29;
  *v29 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A318C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA2E0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A31C4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A31D8(_QWORD *a1)
{
  *a1 = off_1003FA390;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void sub_1000A320C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3220()
{
  return 1;
}

uint64_t sub_1000A3228()
{
  return 1;
}

uint64_t sub_1000A3230()
{
  return 550;
}

uint64_t sub_1000A3238()
{
  return 8;
}

const char *sub_1000A3240()
{
  return "STROBE_GPS_AUX_DEEP_INDOOR_INTERVAL_NS";
}

const char *sub_1000A3250()
{
  return "STROBE_GPS_AUX_NEAR_EDGE_INTERVAL_NS";
}

const char *sub_1000A3260()
{
  return "STROBE_GPS_DEEP_INDOOR_INTERVAL_NS";
}

const char *sub_1000A3270()
{
  return "SCAN_STRATEGY_DEFAULT_CHANNEL_SET";
}

const char *sub_1000A3280()
{
  return "STROBE_GPS_NEAR_EDGE_INTERVAL_NS";
}

const char *sub_1000A3290()
{
  return "STROBE_GPS_NO_YIELD_INTERVAL_NS";
}

const char *sub_1000A32A0()
{
  return "CHANNELS_PER_SCAN_REQUEST";
}

const char *sub_1000A32B0()
{
  return "SUPPRESS_PIPELINED_IN_AR";
}

const char *sub_1000A32C0()
{
  return "OCCUPANCY_FOR_DR_ENABLED";
}

const char *sub_1000A32D0()
{
  return "SUPPRESS_INDOOR_IN_AR";
}

const char *sub_1000A32E0()
{
  return "ENABLE_VIO_FUSION";
}

const char *sub_1000A32F0()
{
  return "UNIFY_GPS_INDOOR";
}

const char *sub_1000A3300()
{
  return "SCAN_PRIORITY";
}

uint64_t sub_1000A3310(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB6D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 48) = 0;
  return a1;
}

void sub_1000A3350(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A3364(_QWORD *a1)
{
  *a1 = off_1003FA910;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_1000A339C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A33B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB620;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void sub_1000A33F0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3404(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9F70;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1000A3440(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3454(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA020;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A348C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A34A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB4C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

void sub_1000A34E0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A34F4(_QWORD *a1)
{
  *a1 = off_1003FB570;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_1000A352C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3540(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA230;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A3578(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A358C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA860;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  return a1;
}

void sub_1000A35D4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A35E8(_QWORD *a1)
{
  *a1 = off_1003FA700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_QWORD *)((char *)a1 + 29) = 0;
  return a1;
}

void sub_1000A3624(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3638(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA180;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1000A3670(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3684(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA0D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A36C0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A36D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB780;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_1000A3710(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3724(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A3760(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3774(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB8E0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  return a1;
}

void sub_1000A37B4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A37C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA5A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1000A3800(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3814(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA4F0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000A3850(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A3864(_QWORD *a1)
{
  *a1 = off_1003FB830;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_1000A389C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000A38B0(_QWORD *a1)
{
  *a1 = off_1003FA440;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_QWORD *)((char *)a1 + 29) = 0;
  return a1;
}

void sub_1000A38EC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A3900(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 *v45;
  unsigned int *v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v59;
  int v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t result;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79[2];

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  v7 = (unsigned int *)(a1 + 56);
  v77 = (unsigned int *)(a1 + 80);
  v78 = (unsigned int *)(a1 + 64);
  v75 = (unsigned int *)(a1 + 60);
  v76 = (unsigned int *)(a1 + 88);
  v73 = (unsigned int *)(a1 + 84);
  v74 = (unsigned int *)(a1 + 68);
  v8 = (unsigned int *)(a1 + 72);
  v9 = (unsigned int *)(a1 + 76);
  v10 = a1 + 8;
  while (1)
  {
    while (1)
    {
      do
      {
        while (1)
        {
          while (1)
          {
            do
            {
              while (1)
              {
                while (1)
                {
                  do
                  {
                    while (1)
                    {
                      while (1)
                      {
                        do
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
LABEL_2:
                                v11 = (char *)*((_QWORD *)this + 1);
                                if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
                                {
                                  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
                                  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
                                  if (!(_DWORD)TagFallback)
                                    return 1;
                                }
                                else
                                {
                                  TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
                                  *((_DWORD *)this + 8) = (_DWORD)TagFallback;
                                  *((_QWORD *)this + 1) = v11 + 1;
                                  if (!(_DWORD)TagFallback)
                                    return 1;
                                }
                                switch(TagFallback >> 3)
                                {
                                  case 1u:
                                    v13 = TagFallback & 7;
                                    if (v13 != 2)
                                      goto LABEL_89;
                                    v14 = *(_DWORD *)(a1 + 28);
                                    v15 = *(int *)(a1 + 24);
                                    if ((int)v15 >= v14)
                                      goto LABEL_11;
                                    break;
                                  case 0x10u:
                                    v13 = TagFallback & 7;
                                    if (v13 != 2)
                                      goto LABEL_89;
                                    *(_DWORD *)(a1 + 112) |= 2u;
                                    v29 = *(_QWORD *)(a1 + 40);
                                    if (!v29)
                                      goto LABEL_30;
                                    goto LABEL_31;
                                  case 0x11u:
                                    v13 = TagFallback & 7;
                                    if (v13 != 1)
                                      goto LABEL_89;
                                    *(_QWORD *)v79 = 0;
                                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v79) & 1) != 0)goto LABEL_36;
                                    return 0;
                                  case 0x12u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v33 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    goto LABEL_42;
                                  case 0x13u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v35 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v35 >= v31)
                                      goto LABEL_121;
                                    goto LABEL_118;
                                  case 0x14u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v36 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v36 >= v31)
                                      goto LABEL_129;
                                    goto LABEL_126;
                                  case 0x15u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v37 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v37 >= v31)
                                      goto LABEL_137;
                                    goto LABEL_134;
                                  case 0x16u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v38 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v38 >= v31)
                                      goto LABEL_145;
                                    goto LABEL_142;
                                  case 0x17u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v39 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v39 >= v31)
                                      goto LABEL_153;
                                    goto LABEL_150;
                                  case 0x18u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v40 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v40 >= v31)
                                      goto LABEL_161;
                                    goto LABEL_158;
                                  case 0x19u:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v41 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v41 >= v31)
                                      goto LABEL_169;
                                    goto LABEL_166;
                                  case 0x1Au:
                                    v13 = TagFallback & 7;
                                    if ((TagFallback & 7) != 0)
                                      goto LABEL_89;
                                    v42 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((unint64_t)v42 >= v31)
                                      goto LABEL_177;
                                    goto LABEL_174;
                                  case 0x1Bu:
                                    v13 = TagFallback & 7;
                                    if (v13 != 5)
                                      goto LABEL_89;
                                    v79[0] = 0;
                                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79) & 1) != 0)goto LABEL_72;
                                    return 0;
                                  case 0x1Cu:
                                    v13 = TagFallback & 7;
                                    if (v13 == 5)
                                      goto LABEL_77;
                                    goto LABEL_89;
                                  case 0x1Du:
                                    v13 = TagFallback & 7;
                                    if (v13 != 2)
                                      goto LABEL_89;
                                    *(_DWORD *)(a1 + 112) |= 0x4000u;
                                    v46 = *(unsigned int **)(a1 + 96);
                                    if (!v46)
                                      goto LABEL_85;
                                    goto LABEL_86;
                                  default:
                                    v13 = TagFallback & 7;
LABEL_89:
                                    if (v13 == 4)
                                      return 1;
                                    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v10, a4) & 1) == 0)return 0;
                                    continue;
                                }
                                while (1)
                                {
                                  v16 = *(_QWORD *)(a1 + 16);
                                  *(_DWORD *)(a1 + 24) = v15 + 1;
                                  v17 = *(_QWORD *)(v16 + 8 * v15);
                                  v79[0] = 0;
                                  v18 = (char *)*((_QWORD *)this + 1);
                                  if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0;
                                  }
                                  else
                                  {
                                    v79[0] = *v18;
                                    *((_QWORD *)this + 1) = v18 + 1;
                                  }
                                  v19 = *((_DWORD *)this + 14);
                                  v20 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v19 + 1;
                                  if (v19 >= v20)
                                    return 0;
                                  v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
                                  if (!sub_100099550(v17, this, v22, v23) || !*((_BYTE *)this + 36))
                                    return 0;
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
                                  v24 = *((_DWORD *)this + 14);
                                  v25 = __OFSUB__(v24, 1);
                                  v26 = v24 - 1;
                                  if (v26 < 0 == v25)
                                    *((_DWORD *)this + 14) = v26;
                                  v27 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                  v28 = *((_QWORD *)this + 2);
                                  if ((unint64_t)v27 >= v28 || *v27 != 10)
                                    break;
                                  *((_QWORD *)this + 1) = v27 + 1;
                                  v14 = *(_DWORD *)(a1 + 28);
                                  v15 = *(int *)(a1 + 24);
                                  if ((int)v15 >= v14)
                                  {
LABEL_11:
                                    if (v14 == *(_DWORD *)(a1 + 32))
                                    {
                                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
                                      v14 = *(_DWORD *)(a1 + 28);
                                    }
                                    *(_DWORD *)(a1 + 28) = v14 + 1;
                                    operator new();
                                  }
                                }
                                if ((int)v28 - (int)v27 >= 2 && *v27 == 130 && v27[1] == 1)
                                {
                                  *((_QWORD *)this + 1) = v27 + 2;
                                  *(_DWORD *)(a1 + 112) |= 2u;
                                  v29 = *(_QWORD *)(a1 + 40);
                                  if (!v29)
LABEL_30:
                                    operator new();
LABEL_31:
                                  v79[0] = 0;
                                  v30 = (char *)*((_QWORD *)this + 1);
                                  if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0;
                                  }
                                  else
                                  {
                                    v79[0] = *v30;
                                    *((_QWORD *)this + 1) = v30 + 1;
                                  }
                                  v55 = *((_DWORD *)this + 14);
                                  v56 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v55 + 1;
                                  if (v55 >= v56)
                                    return 0;
                                  v57 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
                                  if (!sub_1000A4620(v29, this, v58, v59) || !*((_BYTE *)this + 36))
                                    return 0;
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v57);
                                  v60 = *((_DWORD *)this + 14);
                                  v25 = __OFSUB__(v60, 1);
                                  v61 = v60 - 1;
                                  if (v61 < 0 == v25)
                                    *((_DWORD *)this + 14) = v61;
                                  v62 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                  if (*((_DWORD *)this + 4) - (int)v62 > 1 && *v62 == 137 && v62[1] == 1)
                                  {
                                    *((_QWORD *)this + 1) = v62 + 2;
                                    *(_QWORD *)v79 = 0;
                                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v79) & 1) == 0)return 0;
LABEL_36:
                                    *(_QWORD *)(a1 + 48) = *(_QWORD *)v79;
                                    *(_DWORD *)(a1 + 112) |= 4u;
                                    v32 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                    v31 = *((_QWORD *)this + 2);
                                    if ((int)v31 - (int)v32 >= 2 && *v32 == 144 && v32[1] == 1)
                                      break;
                                  }
                                }
                              }
                              v33 = v32 + 2;
                              *((_QWORD *)this + 1) = v33;
LABEL_42:
                              if ((unint64_t)v33 < v31 && ((char)*v33 & 0x80000000) == 0)
                                break;
                              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
                              if (!(_DWORD)result)
                                return result;
                              v34 = (unsigned __int8 *)*((_QWORD *)this + 1);
                              v31 = *((_QWORD *)this + 2);
                              *(_DWORD *)(a1 + 112) |= 8u;
                              if ((int)v31 - (int)v34 >= 2)
                                goto LABEL_115;
                            }
                            *v7 = *v33;
                            v34 = v33 + 1;
                            *((_QWORD *)this + 1) = v34;
                            *(_DWORD *)(a1 + 112) |= 8u;
                            if ((int)v31 - (int)v34 < 2)
                              goto LABEL_2;
LABEL_115:
                            if (*v34 == 152 && v34[1] == 1)
                            {
                              v35 = v34 + 2;
                              *((_QWORD *)this + 1) = v35;
                              if ((unint64_t)v35 < v31)
                              {
LABEL_118:
                                if (((char)*v35 & 0x80000000) == 0)
                                {
                                  *v78 = *v35;
                                  v64 = v35 + 1;
                                  *((_QWORD *)this + 1) = v64;
                                  *(_DWORD *)(a1 + 112) |= 0x20u;
                                  if ((int)v31 - (int)v64 < 2)
                                    goto LABEL_2;
                                  break;
                                }
                              }
LABEL_121:
                              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v78);
                              if (!(_DWORD)result)
                                return result;
                              v64 = (unsigned __int8 *)*((_QWORD *)this + 1);
                              v31 = *((_QWORD *)this + 2);
                              *(_DWORD *)(a1 + 112) |= 0x20u;
                              if ((int)v31 - (int)v64 >= 2)
                                break;
                            }
                          }
                        }
                        while (*v64 != 160 || v64[1] != 1);
                        v36 = v64 + 2;
                        *((_QWORD *)this + 1) = v36;
                        if ((unint64_t)v36 < v31)
                          break;
LABEL_129:
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v77);
                        if (!(_DWORD)result)
                          return result;
                        v65 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        v31 = *((_QWORD *)this + 2);
                        *(_DWORD *)(a1 + 112) |= 0x200u;
                        if ((int)v31 - (int)v65 >= 2)
                          goto LABEL_131;
                      }
LABEL_126:
                      if ((char)*v36 < 0)
                        goto LABEL_129;
                      *v77 = *v36;
                      v65 = v36 + 1;
                      *((_QWORD *)this + 1) = v65;
                      *(_DWORD *)(a1 + 112) |= 0x200u;
                      if ((int)v31 - (int)v65 < 2)
                        goto LABEL_2;
LABEL_131:
                      if (*v65 == 168 && v65[1] == 1)
                      {
                        v37 = v65 + 2;
                        *((_QWORD *)this + 1) = v37;
                        if ((unint64_t)v37 < v31)
                        {
LABEL_134:
                          if (((char)*v37 & 0x80000000) == 0)
                          {
                            *v76 = *v37;
                            v66 = v37 + 1;
                            *((_QWORD *)this + 1) = v66;
                            *(_DWORD *)(a1 + 112) |= 0x800u;
                            if ((int)v31 - (int)v66 < 2)
                              goto LABEL_2;
                            break;
                          }
                        }
LABEL_137:
                        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v76);
                        if (!(_DWORD)result)
                          return result;
                        v66 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        v31 = *((_QWORD *)this + 2);
                        *(_DWORD *)(a1 + 112) |= 0x800u;
                        if ((int)v31 - (int)v66 >= 2)
                          break;
                      }
                    }
                  }
                  while (*v66 != 176 || v66[1] != 1);
                  v38 = v66 + 2;
                  *((_QWORD *)this + 1) = v38;
                  if ((unint64_t)v38 < v31)
                    break;
LABEL_145:
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v75);
                  if (!(_DWORD)result)
                    return result;
                  v67 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v31 = *((_QWORD *)this + 2);
                  *(_DWORD *)(a1 + 112) |= 0x10u;
                  if ((int)v31 - (int)v67 >= 2)
                    goto LABEL_147;
                }
LABEL_142:
                if ((char)*v38 < 0)
                  goto LABEL_145;
                *v75 = *v38;
                v67 = v38 + 1;
                *((_QWORD *)this + 1) = v67;
                *(_DWORD *)(a1 + 112) |= 0x10u;
                if ((int)v31 - (int)v67 < 2)
                  goto LABEL_2;
LABEL_147:
                if (*v67 == 184 && v67[1] == 1)
                {
                  v39 = v67 + 2;
                  *((_QWORD *)this + 1) = v39;
                  if ((unint64_t)v39 < v31)
                  {
LABEL_150:
                    if (((char)*v39 & 0x80000000) == 0)
                    {
                      *v74 = *v39;
                      v68 = v39 + 1;
                      *((_QWORD *)this + 1) = v68;
                      *(_DWORD *)(a1 + 112) |= 0x40u;
                      if ((int)v31 - (int)v68 < 2)
                        goto LABEL_2;
                      break;
                    }
                  }
LABEL_153:
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v74);
                  if (!(_DWORD)result)
                    return result;
                  v68 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  v31 = *((_QWORD *)this + 2);
                  *(_DWORD *)(a1 + 112) |= 0x40u;
                  if ((int)v31 - (int)v68 >= 2)
                    break;
                }
              }
            }
            while (*v68 != 192 || v68[1] != 1);
            v40 = v68 + 2;
            *((_QWORD *)this + 1) = v40;
            if ((unint64_t)v40 < v31)
              break;
LABEL_161:
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v73);
            if (!(_DWORD)result)
              return result;
            v69 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            *(_DWORD *)(a1 + 112) |= 0x400u;
            if ((int)v31 - (int)v69 >= 2)
              goto LABEL_163;
          }
LABEL_158:
          if ((char)*v40 < 0)
            goto LABEL_161;
          *v73 = *v40;
          v69 = v40 + 1;
          *((_QWORD *)this + 1) = v69;
          *(_DWORD *)(a1 + 112) |= 0x400u;
          if ((int)v31 - (int)v69 < 2)
            goto LABEL_2;
LABEL_163:
          if (*v69 == 200 && v69[1] == 1)
          {
            v41 = v69 + 2;
            *((_QWORD *)this + 1) = v41;
            if ((unint64_t)v41 < v31)
            {
LABEL_166:
              if (((char)*v41 & 0x80000000) == 0)
              {
                *v8 = *v41;
                v70 = v41 + 1;
                *((_QWORD *)this + 1) = v70;
                *(_DWORD *)(a1 + 112) |= 0x80u;
                if ((int)v31 - (int)v70 < 2)
                  goto LABEL_2;
                break;
              }
            }
LABEL_169:
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
            if (!(_DWORD)result)
              return result;
            v70 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            *(_DWORD *)(a1 + 112) |= 0x80u;
            if ((int)v31 - (int)v70 >= 2)
              break;
          }
        }
      }
      while (*v70 != 208 || v70[1] != 1);
      v42 = v70 + 2;
      *((_QWORD *)this + 1) = v42;
      if ((unint64_t)v42 < v31)
        break;
LABEL_177:
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
      if (!(_DWORD)result)
        return result;
      v71 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v72 = *((_QWORD *)this + 2);
      *(_DWORD *)(a1 + 112) |= 0x100u;
      if ((int)v72 - (int)v71 >= 2)
        goto LABEL_179;
    }
LABEL_174:
    if ((char)*v42 < 0)
      goto LABEL_177;
    *v9 = *v42;
    v71 = v42 + 1;
    *((_QWORD *)this + 1) = v71;
    *(_DWORD *)(a1 + 112) |= 0x100u;
    if ((int)v31 - (int)v71 < 2)
      goto LABEL_2;
LABEL_179:
    if (*v71 == 221 && v71[1] == 1)
    {
      *((_QWORD *)this + 1) = v71 + 2;
      v79[0] = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79) & 1) == 0)
        return 0;
LABEL_72:
      *(_DWORD *)(a1 + 92) = v79[0];
      *(_DWORD *)(a1 + 112) |= 0x1000u;
      v43 = (unsigned __int8 *)*((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) - (int)v43 >= 2 && *v43 == 229 && v43[1] == 1)
      {
        *((_QWORD *)this + 1) = v43 + 2;
LABEL_77:
        v79[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v79) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 104) = v79[0];
        v44 = *(_DWORD *)(a1 + 112) | 0x2000;
        *(_DWORD *)(a1 + 112) = v44;
        v45 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v45 >= 2 && *v45 == 234 && v45[1] == 1)
        {
          *((_QWORD *)this + 1) = v45 + 2;
          *(_DWORD *)(a1 + 112) = v44 | 0x4000;
          v46 = *(unsigned int **)(a1 + 96);
          if (!v46)
LABEL_85:
            operator new();
LABEL_86:
          v79[0] = 0;
          v47 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v47 >= *((_QWORD *)this + 2) || *v47 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v79))return 0;
          }
          else
          {
            v79[0] = *v47;
            *((_QWORD *)this + 1) = v47 + 1;
          }
          v48 = *((_DWORD *)this + 14);
          v49 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v48 + 1;
          if (v48 >= v49)
            return 0;
          v50 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v79[0]);
          if (!sub_1001ADBAC(v46, this, v51, v52) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v50);
          v53 = *((_DWORD *)this + 14);
          v25 = __OFSUB__(v53, 1);
          v54 = v53 - 1;
          if (v54 < 0 == v25)
            *((_DWORD *)this + 14) = v54;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            break;
          }
        }
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

void sub_1000A4530()
{
  operator delete();
}

void sub_1000A4554()
{
  operator delete();
}

void sub_1000A4578()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_1000A45A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA7B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 191) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  return a1;
}

void sub_1000A460C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4620(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unint64_t *v6;
  unsigned int *v7;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unsigned __int8 *v50;
  char *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  char *v56;
  int v57;
  unsigned __int8 *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  unsigned __int8 *v75;
  char *v76;
  char *v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v88;
  int v89;
  BOOL v90;
  int v91;
  unint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v107;
  int v108;
  int v109;
  unsigned __int8 *v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  char *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v124;
  int v125;
  int v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unsigned __int8 *v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v134;
  int v135;
  int v136;
  unsigned __int8 *v137;
  char *v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v143;
  int v144;
  int v145;
  unsigned __int8 *v146;
  char *v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v152;
  int v153;
  int v154;
  unsigned __int8 *v155;
  char *v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v161;
  int v162;
  int v163;
  unsigned __int8 *v164;
  char *v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v170;
  int v171;
  int v172;
  unsigned __int8 *v173;
  unsigned int v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v180;
  int v181;
  int v182;
  unsigned __int8 *v183;
  char *v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v189;
  int v190;
  int v191;
  uint64_t result;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  int v195;
  char *v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v201;
  int v202;
  int v203;
  unsigned __int8 *v204;
  char *v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v210;
  int v211;
  int v212;
  unsigned __int8 *v213;
  _BYTE *v214;
  unsigned int v215;
  _BYTE *v216;
  unsigned int v217;
  _BYTE *v218;
  unsigned int v219;
  _BYTE *v220;
  _BYTE *v221;
  int v222;
  _BYTE *v223;
  char *v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v229;
  int v230;
  int v231;
  _BYTE *v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v237;
  int v238;
  int v239;
  _BYTE *v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v245;
  int v246;
  int v247;
  _BYTE *v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v253;
  int v254;
  int v255;
  _BYTE *v256;
  int v257;
  _BYTE *v258;
  char *v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v264;
  int v265;
  int v266;
  _BYTE *v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v272;
  int v273;
  int v274;
  unsigned __int8 *v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v280;
  int v281;
  int v282;
  unsigned __int8 *v283;
  unsigned int v284[2];

  v6 = (unint64_t *)(a1 + 16);
  v7 = (unsigned int *)(a1 + 24);
  v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 < *((_QWORD *)this + 2) && (*v9 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 300) |= 1u;
        if ((unint64_t)v14 >= v12 || *v14 != 16)
          continue;
        v35 = v14 + 1;
        *((_QWORD *)this + 1) = v35;
        if ((unint64_t)v35 >= v12)
          goto LABEL_443;
LABEL_440:
        if (*v35 < 0)
        {
LABEL_443:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v214 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 300) |= 2u;
          if ((unint64_t)v214 >= v12)
            continue;
        }
        else
        {
          *v7 = *v35;
          v214 = v35 + 1;
          *((_QWORD *)this + 1) = v214;
          *(_DWORD *)(a1 + 300) |= 2u;
          if ((unint64_t)v214 >= v12)
            continue;
        }
        if (*v214 != 24)
          continue;
        v36 = v214 + 1;
        *((_QWORD *)this + 1) = v36;
LABEL_447:
        v284[0] = 0;
        if ((unint64_t)v36 >= v12 || *v36 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v215 = v284[0];
          if (v284[0] <= 0xF)
          {
LABEL_450:
            *(_DWORD *)(a1 + 300) |= 4u;
            *(_DWORD *)(a1 + 28) = v215;
            goto LABEL_454;
          }
        }
        else
        {
          v215 = *v36;
          *((_QWORD *)this + 1) = v36 + 1;
          if (v215 <= 0xF)
            goto LABEL_450;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 3, (int)v215);
LABEL_454:
        v216 = (_BYTE *)*((_QWORD *)this + 1);
        v37 = *((_QWORD *)this + 2);
        if ((unint64_t)v216 >= v37 || *v216 != 32)
          continue;
        v38 = v216 + 1;
        *((_QWORD *)this + 1) = v38;
LABEL_457:
        v284[0] = 0;
        if ((unint64_t)v38 >= v37 || *v38 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v217 = v284[0];
          if (v284[0] <= 3)
          {
LABEL_460:
            *(_DWORD *)(a1 + 300) |= 8u;
            *(_DWORD *)(a1 + 32) = v217;
            goto LABEL_464;
          }
        }
        else
        {
          v217 = *v38;
          *((_QWORD *)this + 1) = v38 + 1;
          if (v217 <= 3)
            goto LABEL_460;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 4, (int)v217);
LABEL_464:
        v218 = (_BYTE *)*((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        if ((unint64_t)v218 >= v39 || *v218 != 40)
          continue;
        v40 = v218 + 1;
        *((_QWORD *)this + 1) = v40;
LABEL_467:
        v284[0] = 0;
        if ((unint64_t)v40 >= v39 || *v40 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v219 = v284[0];
          if (v284[0] <= 2)
          {
LABEL_470:
            *(_DWORD *)(a1 + 300) |= 0x10u;
            *(_DWORD *)(a1 + 36) = v219;
            goto LABEL_474;
          }
        }
        else
        {
          v219 = *v40;
          *((_QWORD *)this + 1) = v40 + 1;
          if (v219 <= 2)
            goto LABEL_470;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 5, (int)v219);
LABEL_474:
        v220 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v220 >= *((_QWORD *)this + 2) || *v220 != 61)
          continue;
        *((_QWORD *)this + 1) = v220 + 1;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_477:
        *(_DWORD *)(a1 + 40) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x20u;
        v221 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v221 >= *((_QWORD *)this + 2) || *v221 != 69)
          continue;
        *((_QWORD *)this + 1) = v221 + 1;
LABEL_480:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 44) = v284[0];
        v222 = *(_DWORD *)(a1 + 300) | 0x40;
        *(_DWORD *)(a1 + 300) = v222;
        v223 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v223 >= *((_QWORD *)this + 2) || *v223 != 74)
          continue;
        *((_QWORD *)this + 1) = v223 + 1;
        *(_DWORD *)(a1 + 300) = v222 | 0x80;
        v41 = *(_DWORD **)(a1 + 48);
        if (!v41)
LABEL_484:
          operator new();
LABEL_485:
        v284[0] = 0;
        v224 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v224 >= *((_QWORD *)this + 2) || *v224 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v224;
          *((_QWORD *)this + 1) = v224 + 1;
        }
        v225 = *((_DWORD *)this + 14);
        v226 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v225 + 1;
        if (v225 >= v226)
          return 0;
        v227 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B3EBC(v41, this, v228, v229) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v227);
        v230 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v230, 1);
        v231 = v230 - 1;
        if (v231 < 0 == v90)
          *((_DWORD *)this + 14) = v231;
        v232 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v232 >= *((_QWORD *)this + 2) || *v232 != 82)
          continue;
        *((_QWORD *)this + 1) = v232 + 1;
        *(_DWORD *)(a1 + 300) |= 0x100u;
        v42 = *(_DWORD **)(a1 + 56);
        if (!v42)
LABEL_497:
          operator new();
LABEL_83:
        v284[0] = 0;
        v43 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v43 >= *((_QWORD *)this + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v43;
          *((_QWORD *)this + 1) = v43 + 1;
        }
        v233 = *((_DWORD *)this + 14);
        v234 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v233 + 1;
        if (v233 >= v234)
          return 0;
        v235 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B4694(v42, this, v236, v237) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v235);
        v238 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v238, 1);
        v239 = v238 - 1;
        if (v239 < 0 == v90)
          *((_DWORD *)this + 14) = v239;
        v240 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v240 >= *((_QWORD *)this + 2) || *v240 != 90)
          continue;
        *((_QWORD *)this + 1) = v240 + 1;
        *(_DWORD *)(a1 + 300) |= 0x200u;
        v44 = *(_QWORD *)(a1 + 64);
        if (!v44)
LABEL_509:
          operator new();
LABEL_87:
        v284[0] = 0;
        v45 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v45 >= *((_QWORD *)this + 2) || *v45 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v45;
          *((_QWORD *)this + 1) = v45 + 1;
        }
        v241 = *((_DWORD *)this + 14);
        v242 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v241 + 1;
        if (v241 >= v242)
          return 0;
        v243 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B531C(v44, this, v244, v245) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v243);
        v246 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v246, 1);
        v247 = v246 - 1;
        if (v247 < 0 == v90)
          *((_DWORD *)this + 14) = v247;
        v248 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v248 >= *((_QWORD *)this + 2) || *v248 != 98)
          continue;
        *((_QWORD *)this + 1) = v248 + 1;
        *(_DWORD *)(a1 + 300) |= 0x400u;
        v15 = *(unsigned int **)(a1 + 72);
        if (!v15)
LABEL_521:
          operator new();
LABEL_14:
        v284[0] = 0;
        v16 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v16;
          *((_QWORD *)this + 1) = v16 + 1;
        }
        v249 = *((_DWORD *)this + 14);
        v250 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v249 + 1;
        if (v249 >= v250)
          return 0;
        v251 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B32FC(v15, this, v252, v253) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v251);
        v254 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v254, 1);
        v255 = v254 - 1;
        if (v255 < 0 == v90)
          *((_DWORD *)this + 14) = v255;
        v256 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v256 >= *((_QWORD *)this + 2) || *v256 != 109)
          continue;
        *((_QWORD *)this + 1) = v256 + 1;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_533:
        *(_DWORD *)(a1 + 96) = v284[0];
        v257 = *(_DWORD *)(a1 + 300) | 0x800;
        *(_DWORD *)(a1 + 300) = v257;
        v258 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v258 >= *((_QWORD *)this + 2) || *v258 != 114)
          continue;
        *((_QWORD *)this + 1) = v258 + 1;
        *(_DWORD *)(a1 + 300) = v257 | 0x1000;
        v46 = *(_QWORD *)(a1 + 80);
        if (!v46)
LABEL_536:
          operator new();
LABEL_537:
        v284[0] = 0;
        v259 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v259 >= *((_QWORD *)this + 2) || *v259 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v259;
          *((_QWORD *)this + 1) = v259 + 1;
        }
        v260 = *((_DWORD *)this + 14);
        v261 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v260 + 1;
        if (v260 >= v261)
          return 0;
        v262 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1000A707C(v46, this, v263, v264) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v262);
        v265 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v265, 1);
        v266 = v265 - 1;
        if (v266 < 0 == v90)
          *((_DWORD *)this + 14) = v266;
        v267 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v267 >= *((_QWORD *)this + 2) || *v267 != 122)
          continue;
        *((_QWORD *)this + 1) = v267 + 1;
        *(_DWORD *)(a1 + 300) |= 0x2000u;
        v17 = *(_QWORD *)(a1 + 88);
        if (!v17)
LABEL_549:
          operator new();
LABEL_18:
        v284[0] = 0;
        v18 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v18 >= *((_QWORD *)this + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v18;
          *((_QWORD *)this + 1) = v18 + 1;
        }
        v268 = *((_DWORD *)this + 14);
        v269 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v268 + 1;
        if (v268 >= v269)
          return 0;
        v270 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B69A0(v17, this, v271, v272) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v270);
        v273 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v273, 1);
        v274 = v273 - 1;
        if (v274 < 0 == v90)
          *((_DWORD *)this + 14) = v274;
        v275 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v275 <= 1 || *v275 != 130 || v275[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v275 + 2;
        *(_DWORD *)(a1 + 300) |= 0x4000u;
        v47 = *(_QWORD *)(a1 + 104);
        if (!v47)
LABEL_562:
          operator new();
LABEL_97:
        v284[0] = 0;
        v48 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v48 >= *((_QWORD *)this + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v48;
          *((_QWORD *)this + 1) = v48 + 1;
        }
        v276 = *((_DWORD *)this + 14);
        v277 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v276 + 1;
        if (v276 >= v277)
          return 0;
        v278 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B1EA8(v47, this, v279, v280) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v278);
        v281 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v281, 1);
        v282 = v281 - 1;
        if (v282 < 0 == v90)
          *((_DWORD *)this + 14) = v282;
        v283 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v283 <= 1 || *v283 != 137 || v283[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v283 + 2;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0;
LABEL_101:
        *(_QWORD *)(a1 + 112) = *(_QWORD *)v284;
        *(_DWORD *)(a1 + 300) |= 0x8000u;
        v50 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v49 = *((_QWORD *)this + 2);
        if ((int)v49 - (int)v50 < 2 || *v50 != 144 || v50[1] != 1)
          continue;
        v51 = (char *)(v50 + 2);
        *((_QWORD *)this + 1) = v51;
LABEL_107:
        v284[0] = 0;
        if ((unint64_t)v51 >= v49 || *v51 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v52 = v284[0];
          if (v284[0] <= 1)
          {
LABEL_110:
            *(_DWORD *)(a1 + 300) |= 0x10000u;
            *(_DWORD *)(a1 + 100) = v52;
            goto LABEL_374;
          }
        }
        else
        {
          v52 = *v51;
          *((_QWORD *)this + 1) = v51 + 1;
          if (v52 <= 1)
            goto LABEL_110;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 18, (int)v52);
LABEL_374:
        v193 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v193 < 2 || *v193 != 157 || v193[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v193 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_113:
        *(_DWORD *)(a1 + 120) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x20000u;
        v53 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v53 < 2 || *v53 != 165 || v53[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v53 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_22:
        *(_DWORD *)(a1 + 124) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x40000u;
        v19 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v19 < 2 || *v19 != 173 || v19[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v19 + 2;
LABEL_119:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 128) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x80000u;
        v54 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v54 < 2 || *v54 != 181 || v54[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v54 + 2;
LABEL_125:
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 248) = v284[0];
        *(_DWORD *)(a1 + 304) |= 0x100u;
        v55 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v55 < 2 || *v55 != 189 || v55[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v55 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_28:
        *(_DWORD *)(a1 + 136) = v284[0];
        v20 = *(_DWORD *)(a1 + 300) | 0x200000;
        *(_DWORD *)(a1 + 300) = v20;
        v21 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v21 < 2 || *v21 != 194 || v21[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v21 + 2;
        *(_DWORD *)(a1 + 300) = v20 | 0x400000;
        v22 = *(_QWORD *)(a1 + 144);
        if (!v22)
LABEL_133:
          operator new();
LABEL_134:
        v284[0] = 0;
        v56 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v56 >= *((_QWORD *)this + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v56;
          *((_QWORD *)this + 1) = v56 + 1;
        }
        v84 = *((_DWORD *)this + 14);
        v85 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v84 + 1;
        if (v84 >= v85)
          return 0;
        v86 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B7B3C(v22, this, v87, v88) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v86);
        v89 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v89, 1);
        v91 = v89 - 1;
        if (v91 < 0 == v90)
          *((_DWORD *)this + 14) = v91;
        v93 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v92 = *((_QWORD *)this + 2);
        if ((int)v92 - (int)v93 <= 1 || *v93 != 200 || v93[1] != 1)
          continue;
        v24 = (char *)(v93 + 2);
        *((_QWORD *)this + 1) = v24;
        v284[0] = 0;
        if ((unint64_t)v24 >= v92)
          goto LABEL_386;
LABEL_234:
        if (*v24 < 0)
        {
LABEL_386:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v94 = v284[0];
          if (v284[0] <= 1)
          {
LABEL_236:
            *(_DWORD *)(a1 + 300) |= 0x800000u;
            *(_DWORD *)(a1 + 140) = v94;
            goto LABEL_389;
          }
        }
        else
        {
          v94 = *v24;
          *((_QWORD *)this + 1) = v24 + 1;
          if (v94 <= 1)
            goto LABEL_236;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v8, 25, (int)v94);
LABEL_389:
        v194 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v194 < 2 || *v194 != 209 || v194[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v194 + 2;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0;
LABEL_139:
        *(_QWORD *)(a1 + 152) = *(_QWORD *)v284;
        v57 = *(_DWORD *)(a1 + 300) | 0x1000000;
        *(_DWORD *)(a1 + 300) = v57;
        v58 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v58 < 2 || *v58 != 218 || v58[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v58 + 2;
        *(_DWORD *)(a1 + 300) = v57 | 0x2000000;
        v25 = *(_QWORD *)(a1 + 160);
        if (!v25)
LABEL_143:
          operator new();
LABEL_144:
        v284[0] = 0;
        v59 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v59 >= *((_QWORD *)this + 2) || *v59 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v59;
          *((_QWORD *)this + 1) = v59 + 1;
        }
        v130 = *((_DWORD *)this + 14);
        v131 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v130 + 1;
        if (v130 >= v131)
          return 0;
        v132 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B89F0(v25, this, v133, v134) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v132);
        v135 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v135, 1);
        v136 = v135 - 1;
        if (v136 < 0 == v90)
          *((_DWORD *)this + 14) = v136;
        v137 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v137 <= 1 || *v137 != 226 || v137[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v137 + 2;
        *(_DWORD *)(a1 + 300) |= 0x4000000u;
        v60 = *(_QWORD *)(a1 + 168);
        if (!v60)
LABEL_149:
          operator new();
LABEL_294:
        v284[0] = 0;
        v138 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v138 >= *((_QWORD *)this + 2) || *v138 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v138;
          *((_QWORD *)this + 1) = v138 + 1;
        }
        v148 = *((_DWORD *)this + 14);
        v149 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v148 + 1;
        if (v148 >= v149)
          return 0;
        v150 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001CC118(v60, this, v151, v152) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v150);
        v153 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v153, 1);
        v154 = v153 - 1;
        if (v154 < 0 == v90)
          *((_DWORD *)this + 14) = v154;
        v155 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v155 <= 1 || *v155 != 234 || v155[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v155 + 2;
        *(_DWORD *)(a1 + 300) |= 0x8000000u;
        v61 = *(_QWORD *)(a1 + 176);
        if (!v61)
LABEL_152:
          operator new();
LABEL_320:
        v284[0] = 0;
        v156 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v156 >= *((_QWORD *)this + 2) || *v156 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v156;
          *((_QWORD *)this + 1) = v156 + 1;
        }
        v166 = *((_DWORD *)this + 14);
        v167 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v166 + 1;
        if (v166 >= v167)
          return 0;
        v168 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B7FC8(v61, this, v169, v170) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v168);
        v171 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v171, 1);
        v172 = v171 - 1;
        if (v172 < 0 == v90)
          *((_DWORD *)this + 14) = v172;
        v173 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v62 = *((_QWORD *)this + 2);
        if ((int)v62 - (int)v173 <= 1 || *v173 != 240 || v173[1] != 1)
          continue;
        v63 = v173 + 2;
        *((_QWORD *)this + 1) = v63;
        v284[0] = 0;
        if ((unint64_t)v63 >= v62)
          goto LABEL_428;
LABEL_346:
        if ((char)*v63 < 0)
        {
LABEL_428:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v174 = v284[0];
          v175 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
        }
        else
        {
          v174 = *v63;
          v175 = v63 + 1;
          *((_QWORD *)this + 1) = v175;
        }
        *(_BYTE *)(a1 + 192) = v174 != 0;
        *(_DWORD *)(a1 + 300) |= 0x10000000u;
        if ((int)v62 - (int)v175 < 2 || *v175 != 249 || v175[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v175 + 2;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) == 0)return 0;
LABEL_158:
        *(_QWORD *)(a1 + 184) = *(_QWORD *)v284;
        *(_DWORD *)(a1 + 300) |= 0x20000000u;
        v65 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v64 = *((_QWORD *)this + 2);
        if ((int)v64 - (int)v65 < 2 || *v65 != 128 || v65[1] != 2)
          continue;
        v66 = v65 + 2;
        *((_QWORD *)this + 1) = v66;
LABEL_164:
        v284[0] = 0;
        if ((unint64_t)v66 >= v64 || (char)*v66 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v67 = v284[0];
          v68 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
        }
        else
        {
          v67 = *v66;
          v68 = v66 + 1;
          *((_QWORD *)this + 1) = v68;
        }
        *(_BYTE *)(a1 + 193) = v67 != 0;
        *(_DWORD *)(a1 + 300) |= 0x40000000u;
        if ((int)v64 - (int)v68 < 2 || *v68 != 141 || v68[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v68 + 2;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
LABEL_169:
        *(_DWORD *)(a1 + 196) = v284[0];
        *(_DWORD *)(a1 + 300) |= 0x80000000;
        v69 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v69 < 2 || *v69 != 146 || v69[1] != 2)
          continue;
        *((_QWORD *)this + 1) = v69 + 2;
LABEL_174:
        *(_DWORD *)(a1 + 304) |= 1u;
        v70 = *(_QWORD *)(a1 + 200);
        if (!v70)
          operator new();
        v284[0] = 0;
        v71 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v71 >= *((_QWORD *)this + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
        }
        else
        {
          v284[0] = *v71;
          *((_QWORD *)this + 1) = v71 + 1;
        }
        v120 = *((_DWORD *)this + 14);
        v121 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v120 + 1;
        if (v120 >= v121)
          return 0;
        v122 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
        if (!sub_1001B27A0(v70, this, v123, v124) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v122);
        v125 = *((_DWORD *)this + 14);
        v90 = __OFSUB__(v125, 1);
        v126 = v125 - 1;
        if (v126 < 0 == v90)
          *((_DWORD *)this + 14) = v126;
        v127 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        if ((int)v26 - (int)v127 <= 1 || *v127 != 152 || v127[1] != 2)
          continue;
        v27 = v127 + 2;
        *((_QWORD *)this + 1) = v27;
        v284[0] = 0;
        if ((unint64_t)v27 >= v26)
          goto LABEL_394;
LABEL_282:
        if ((char)*v27 < 0)
        {
LABEL_394:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284);
          if (!(_DWORD)result)
            return result;
          v128 = v284[0];
          v129 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
        }
        else
        {
          v128 = *v27;
          v129 = v27 + 1;
          *((_QWORD *)this + 1) = v129;
        }
        *(_BYTE *)(a1 + 194) = v128 != 0;
        v195 = *(_DWORD *)(a1 + 304) | 2;
        *(_DWORD *)(a1 + 304) = v195;
        if ((int)v26 - (int)v129 >= 2 && *v129 == 162 && v129[1] == 2)
        {
          *((_QWORD *)this + 1) = v129 + 2;
          *(_DWORD *)(a1 + 304) = v195 | 4;
          v72 = *(_QWORD *)(a1 + 208);
          if (!v72)
LABEL_400:
            operator new();
LABEL_401:
          v284[0] = 0;
          v196 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v196 >= *((_QWORD *)this + 2) || *v196 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
          }
          else
          {
            v284[0] = *v196;
            *((_QWORD *)this + 1) = v196 + 1;
          }
          v197 = *((_DWORD *)this + 14);
          v198 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v197 + 1;
          if (v197 >= v198)
            return 0;
          v199 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
          if (!sub_1001BCDA4(v72, this, v200, v201) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v199);
          v202 = *((_DWORD *)this + 14);
          v90 = __OFSUB__(v202, 1);
          v203 = v202 - 1;
          if (v203 < 0 == v90)
            *((_DWORD *)this + 14) = v203;
          v204 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if (*((_DWORD *)this + 4) - (int)v204 > 1 && *v204 == 170 && v204[1] == 2)
          {
            *((_QWORD *)this + 1) = v204 + 2;
            *(_DWORD *)(a1 + 304) |= 8u;
            v73 = *(_DWORD **)(a1 + 216);
            if (!v73)
LABEL_184:
              operator new();
LABEL_414:
            v284[0] = 0;
            v205 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v205 >= *((_QWORD *)this + 2) || *v205 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
            }
            else
            {
              v284[0] = *v205;
              *((_QWORD *)this + 1) = v205 + 1;
            }
            v206 = *((_DWORD *)this + 14);
            v207 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v206 + 1;
            if (v206 >= v207)
              return 0;
            v208 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
            if (!sub_1001BD9D0(v73, this, v209, v210) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v208);
            v211 = *((_DWORD *)this + 14);
            v90 = __OFSUB__(v211, 1);
            v212 = v211 - 1;
            if (v212 < 0 == v90)
              *((_DWORD *)this + 14) = v212;
            v213 = (unsigned __int8 *)*((_QWORD *)this + 1);
            if (*((_DWORD *)this + 4) - (int)v213 > 1 && *v213 == 181 && v213[1] == 2)
            {
              *((_QWORD *)this + 1) = v213 + 2;
              v284[0] = 0;
              if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
                return 0;
LABEL_44:
              *(_DWORD *)(a1 + 132) = v284[0];
              *(_DWORD *)(a1 + 300) |= 0x100000u;
              v28 = (unsigned __int8 *)*((_QWORD *)this + 1);
              if (*((_DWORD *)this + 4) - (int)v28 >= 2 && *v28 == 189 && v28[1] == 2)
              {
                *((_QWORD *)this + 1) = v28 + 2;
LABEL_186:
                v284[0] = 0;
                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0;
                *(_DWORD *)(a1 + 224) = v284[0];
                v74 = *(_DWORD *)(a1 + 304) | 0x10;
                *(_DWORD *)(a1 + 304) = v74;
                v75 = (unsigned __int8 *)*((_QWORD *)this + 1);
                if (*((_DWORD *)this + 4) - (int)v75 >= 2 && *v75 == 194 && v75[1] == 2)
                {
                  *((_QWORD *)this + 1) = v75 + 2;
                  *(_DWORD *)(a1 + 304) = v74 | 0x20;
                  v29 = *(_QWORD *)(a1 + 232);
                  if (!v29)
LABEL_191:
                    operator new();
LABEL_192:
                  v284[0] = 0;
                  v76 = (char *)*((_QWORD *)this + 1);
                  if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                  }
                  else
                  {
                    v284[0] = *v76;
                    *((_QWORD *)this + 1) = v76 + 1;
                  }
                  v95 = *((_DWORD *)this + 14);
                  v96 = *((_DWORD *)this + 15);
                  *((_DWORD *)this + 14) = v95 + 1;
                  if (v95 >= v96)
                    return 0;
                  v97 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                  if (!sub_1001B27A0(v29, this, v98, v99) || !*((_BYTE *)this + 36))
                    return 0;
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v97);
                  v100 = *((_DWORD *)this + 14);
                  v90 = __OFSUB__(v100, 1);
                  v101 = v100 - 1;
                  if (v101 < 0 == v90)
                    *((_DWORD *)this + 14) = v101;
                  v102 = (unsigned __int8 *)*((_QWORD *)this + 1);
                  if (*((_DWORD *)this + 4) - (int)v102 > 1 && *v102 == 205 && v102[1] == 2)
                  {
                    *((_QWORD *)this + 1) = v102 + 2;
                    v284[0] = 0;
                    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0;
LABEL_53:
                    *(_DWORD *)(a1 + 228) = v284[0];
                    v30 = *(_DWORD *)(a1 + 304) | 0x40;
                    *(_DWORD *)(a1 + 304) = v30;
                    v31 = (unsigned __int8 *)*((_QWORD *)this + 1);
                    if (*((_DWORD *)this + 4) - (int)v31 >= 2 && *v31 == 210 && v31[1] == 2)
                    {
                      *((_QWORD *)this + 1) = v31 + 2;
                      *(_DWORD *)(a1 + 304) = v30 | 0x80;
                      v32 = *(_QWORD *)(a1 + 240);
                      if (!v32)
LABEL_197:
                        operator new();
LABEL_198:
                      v284[0] = 0;
                      v77 = (char *)*((_QWORD *)this + 1);
                      if ((unint64_t)v77 >= *((_QWORD *)this + 2) || *v77 < 0)
                      {
                        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                      }
                      else
                      {
                        v284[0] = *v77;
                        *((_QWORD *)this + 1) = v77 + 1;
                      }
                      v103 = *((_DWORD *)this + 14);
                      v104 = *((_DWORD *)this + 15);
                      *((_DWORD *)this + 14) = v103 + 1;
                      if (v103 >= v104)
                        return 0;
                      v105 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                      if (!sub_1001B531C(v32, this, v106, v107) || !*((_BYTE *)this + 36))
                        return 0;
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v105);
                      v108 = *((_DWORD *)this + 14);
                      v90 = __OFSUB__(v108, 1);
                      v109 = v108 - 1;
                      if (v109 < 0 == v90)
                        *((_DWORD *)this + 14) = v109;
                      v110 = (unsigned __int8 *)*((_QWORD *)this + 1);
                      if (*((_DWORD *)this + 4) - (int)v110 > 1 && *v110 == 221 && v110[1] == 2)
                      {
                        *((_QWORD *)this + 1) = v110 + 2;
                        v284[0] = 0;
                        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)return 0;
LABEL_203:
                        *(_DWORD *)(a1 + 252) = v284[0];
                        v78 = *(_DWORD *)(a1 + 304) | 0x200;
                        *(_DWORD *)(a1 + 304) = v78;
                        v79 = (unsigned __int8 *)*((_QWORD *)this + 1);
                        if (*((_DWORD *)this + 4) - (int)v79 >= 2 && *v79 == 226 && v79[1] == 2)
                        {
                          *((_QWORD *)this + 1) = v79 + 2;
                          *(_DWORD *)(a1 + 304) = v78 | 0x400;
                          v80 = *(_QWORD *)(a1 + 256);
                          if (!v80)
LABEL_210:
                            operator new();
LABEL_211:
                          v284[0] = 0;
                          v81 = (char *)*((_QWORD *)this + 1);
                          if ((unint64_t)v81 >= *((_QWORD *)this + 2) || *v81 < 0)
                          {
                            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                          }
                          else
                          {
                            v284[0] = *v81;
                            *((_QWORD *)this + 1) = v81 + 1;
                          }
                          v111 = *((_DWORD *)this + 14);
                          v112 = *((_DWORD *)this + 15);
                          *((_DWORD *)this + 14) = v111 + 1;
                          if (v111 >= v112)
                            return 0;
                          v113 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                          if (!sub_1001CC994(v80, this, v114, v115) || !*((_BYTE *)this + 36))
                            return 0;
                          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v113);
                          v116 = *((_DWORD *)this + 14);
                          v90 = __OFSUB__(v116, 1);
                          v117 = v116 - 1;
                          if (v117 < 0 == v90)
                            *((_DWORD *)this + 14) = v117;
                          v118 = (unsigned __int8 *)*((_QWORD *)this + 1);
                          if (*((_DWORD *)this + 4) - (int)v118 > 1 && *v118 == 234 && v118[1] == 2)
                          {
                            *((_QWORD *)this + 1) = v118 + 2;
                            *(_DWORD *)(a1 + 304) |= 0x800u;
                            v33 = *(_QWORD *)(a1 + 264);
                            if (!v33)
LABEL_60:
                              operator new();
LABEL_269:
                            v284[0] = 0;
                            v119 = (char *)*((_QWORD *)this + 1);
                            if ((unint64_t)v119 >= *((_QWORD *)this + 2) || *v119 < 0)
                            {
                              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                            }
                            else
                            {
                              v284[0] = *v119;
                              *((_QWORD *)this + 1) = v119 + 1;
                            }
                            v139 = *((_DWORD *)this + 14);
                            v140 = *((_DWORD *)this + 15);
                            *((_DWORD *)this + 14) = v139 + 1;
                            if (v139 >= v140)
                              return 0;
                            v141 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                            if (!sub_1001CE008(v33, this, v142, v143) || !*((_BYTE *)this + 36))
                              return 0;
                            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v141);
                            v144 = *((_DWORD *)this + 14);
                            v90 = __OFSUB__(v144, 1);
                            v145 = v144 - 1;
                            if (v145 < 0 == v90)
                              *((_DWORD *)this + 14) = v145;
                            v146 = (unsigned __int8 *)*((_QWORD *)this + 1);
                            if (*((_DWORD *)this + 4) - (int)v146 > 1 && *v146 == 242 && v146[1] == 2)
                            {
                              *((_QWORD *)this + 1) = v146 + 2;
                              *(_DWORD *)(a1 + 304) |= 0x1000u;
                              v34 = *(_QWORD *)(a1 + 272);
                              if (!v34)
LABEL_63:
                                operator new();
LABEL_307:
                              v284[0] = 0;
                              v147 = (char *)*((_QWORD *)this + 1);
                              if ((unint64_t)v147 >= *((_QWORD *)this + 2) || *v147 < 0)
                              {
                                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                              }
                              else
                              {
                                v284[0] = *v147;
                                *((_QWORD *)this + 1) = v147 + 1;
                              }
                              v157 = *((_DWORD *)this + 14);
                              v158 = *((_DWORD *)this + 15);
                              *((_DWORD *)this + 14) = v157 + 1;
                              if (v157 >= v158)
                                return 0;
                              v159 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                              if (!sub_1001CF3B4(v34, this, v160, v161) || !*((_BYTE *)this + 36))
                                return 0;
                              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v159);
                              v162 = *((_DWORD *)this + 14);
                              v90 = __OFSUB__(v162, 1);
                              v163 = v162 - 1;
                              if (v163 < 0 == v90)
                                *((_DWORD *)this + 14) = v163;
                              v164 = (unsigned __int8 *)*((_QWORD *)this + 1);
                              if (*((_DWORD *)this + 4) - (int)v164 > 1 && *v164 == 250 && v164[1] == 2)
                              {
                                *((_QWORD *)this + 1) = v164 + 2;
                                *(_DWORD *)(a1 + 304) |= 0x2000u;
                                v82 = *(_QWORD *)(a1 + 280);
                                if (!v82)
LABEL_216:
                                  operator new();
LABEL_333:
                                v284[0] = 0;
                                v165 = (char *)*((_QWORD *)this + 1);
                                if ((unint64_t)v165 >= *((_QWORD *)this + 2) || *v165 < 0)
                                {
                                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                                }
                                else
                                {
                                  v284[0] = *v165;
                                  *((_QWORD *)this + 1) = v165 + 1;
                                }
                                v176 = *((_DWORD *)this + 14);
                                v177 = *((_DWORD *)this + 15);
                                *((_DWORD *)this + 14) = v176 + 1;
                                if (v176 >= v177)
                                  return 0;
                                v178 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                                if (!sub_1001CCF3C(v82, this, v179, v180) || !*((_BYTE *)this + 36))
                                  return 0;
                                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v178);
                                v181 = *((_DWORD *)this + 14);
                                v90 = __OFSUB__(v181, 1);
                                v182 = v181 - 1;
                                if (v182 < 0 == v90)
                                  *((_DWORD *)this + 14) = v182;
                                v183 = (unsigned __int8 *)*((_QWORD *)this + 1);
                                if (*((_DWORD *)this + 4) - (int)v183 > 1 && *v183 == 130 && v183[1] == 3)
                                {
                                  *((_QWORD *)this + 1) = v183 + 2;
                                  *(_DWORD *)(a1 + 304) |= 0x4000u;
                                  v83 = *(_QWORD *)(a1 + 288);
                                  if (!v83)
LABEL_219:
                                    operator new();
LABEL_358:
                                  v284[0] = 0;
                                  v184 = (char *)*((_QWORD *)this + 1);
                                  if ((unint64_t)v184 >= *((_QWORD *)this + 2) || *v184 < 0)
                                  {
                                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v284))return 0;
                                  }
                                  else
                                  {
                                    v284[0] = *v184;
                                    *((_QWORD *)this + 1) = v184 + 1;
                                  }
                                  v185 = *((_DWORD *)this + 14);
                                  v186 = *((_DWORD *)this + 15);
                                  *((_DWORD *)this + 14) = v185 + 1;
                                  if (v185 >= v186)
                                    return 0;
                                  v187 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v284[0]);
                                  if (!sub_1001CD694(v83, this, v188, v189) || !*((_BYTE *)this + 36))
                                    return 0;
                                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v187);
                                  v190 = *((_DWORD *)this + 14);
                                  v90 = __OFSUB__(v190, 1);
                                  v191 = v190 - 1;
                                  if (v191 < 0 == v90)
                                    *((_DWORD *)this + 14) = v191;
                                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                                  {
                                    *((_DWORD *)this + 8) = 0;
                                    result = 1;
                                    *((_BYTE *)this + 36) = 1;
                                    return result;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v35 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v35 >= v12)
          goto LABEL_443;
        goto LABEL_440;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v36 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        goto LABEL_447;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v38 = (char *)*((_QWORD *)this + 1);
        v37 = *((_QWORD *)this + 2);
        goto LABEL_457;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v40 = (char *)*((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        goto LABEL_467;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
        goto LABEL_477;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_480;
        goto LABEL_221;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x80u;
        v41 = *(_DWORD **)(a1 + 48);
        if (!v41)
          goto LABEL_484;
        goto LABEL_485;
      case 0xAu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x100u;
        v42 = *(_DWORD **)(a1 + 56);
        if (v42)
          goto LABEL_83;
        goto LABEL_497;
      case 0xBu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x200u;
        v44 = *(_QWORD *)(a1 + 64);
        if (v44)
          goto LABEL_87;
        goto LABEL_509;
      case 0xCu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x400u;
        v15 = *(unsigned int **)(a1 + 72);
        if (v15)
          goto LABEL_14;
        goto LABEL_521;
      case 0xDu:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) == 0)
          return 0;
        goto LABEL_533;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x1000u;
        v46 = *(_QWORD *)(a1 + 80);
        if (!v46)
          goto LABEL_536;
        goto LABEL_537;
      case 0xFu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x2000u;
        v17 = *(_QWORD *)(a1 + 88);
        if (v17)
          goto LABEL_18;
        goto LABEL_549;
      case 0x10u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x4000u;
        v47 = *(_QWORD *)(a1 + 104);
        if (v47)
          goto LABEL_97;
        goto LABEL_562;
      case 0x11u:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_221;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) != 0)goto LABEL_101;
        return 0;
      case 0x12u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v51 = (char *)*((_QWORD *)this + 1);
        v49 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0x13u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_113;
        return 0;
      case 0x14u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_22;
        return 0;
      case 0x15u:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_119;
        goto LABEL_221;
      case 0x16u:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_125;
        goto LABEL_221;
      case 0x17u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_28;
        return 0;
      case 0x18u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x400000u;
        v22 = *(_QWORD *)(a1 + 144);
        if (!v22)
          goto LABEL_133;
        goto LABEL_134;
      case 0x19u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v24 = (char *)*((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v24 >= v23)
          goto LABEL_386;
        goto LABEL_234;
      case 0x1Au:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_221;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) != 0)goto LABEL_139;
        return 0;
      case 0x1Bu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x2000000u;
        v25 = *(_QWORD *)(a1 + 160);
        if (!v25)
          goto LABEL_143;
        goto LABEL_144;
      case 0x1Cu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x4000000u;
        v60 = *(_QWORD *)(a1 + 168);
        if (!v60)
          goto LABEL_149;
        goto LABEL_294;
      case 0x1Du:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 300) |= 0x8000000u;
        v61 = *(_QWORD *)(a1 + 176);
        if (!v61)
          goto LABEL_152;
        goto LABEL_320;
      case 0x1Eu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v63 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v62 = *((_QWORD *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v63 >= v62)
          goto LABEL_428;
        goto LABEL_346;
      case 0x1Fu:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_221;
        *(_QWORD *)v284 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v284) & 1) != 0)goto LABEL_158;
        return 0;
      case 0x20u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v66 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v64 = *((_QWORD *)this + 2);
        goto LABEL_164;
      case 0x21u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_169;
        return 0;
      case 0x22u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_174;
        goto LABEL_221;
      case 0x23u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_221;
        v27 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        v284[0] = 0;
        if ((unint64_t)v27 >= v26)
          goto LABEL_394;
        goto LABEL_282;
      case 0x24u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 4u;
        v72 = *(_QWORD *)(a1 + 208);
        if (!v72)
          goto LABEL_400;
        goto LABEL_401;
      case 0x25u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 8u;
        v73 = *(_DWORD **)(a1 + 216);
        if (!v73)
          goto LABEL_184;
        goto LABEL_414;
      case 0x26u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_44;
        return 0;
      case 0x27u:
        v11 = TagFallback & 7;
        if (v11 == 5)
          goto LABEL_186;
        goto LABEL_221;
      case 0x28u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x20u;
        v29 = *(_QWORD *)(a1 + 232);
        if (!v29)
          goto LABEL_191;
        goto LABEL_192;
      case 0x29u:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_53;
        return 0;
      case 0x2Au:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x80u;
        v32 = *(_QWORD *)(a1 + 240);
        if (!v32)
          goto LABEL_197;
        goto LABEL_198;
      case 0x2Bu:
        v11 = TagFallback & 7;
        if (v11 != 5)
          goto LABEL_221;
        v284[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v284) & 1) != 0)
          goto LABEL_203;
        return 0;
      case 0x2Cu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x400u;
        v80 = *(_QWORD *)(a1 + 256);
        if (!v80)
          goto LABEL_210;
        goto LABEL_211;
      case 0x2Du:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x800u;
        v33 = *(_QWORD *)(a1 + 264);
        if (!v33)
          goto LABEL_60;
        goto LABEL_269;
      case 0x2Eu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x1000u;
        v34 = *(_QWORD *)(a1 + 272);
        if (!v34)
          goto LABEL_63;
        goto LABEL_307;
      case 0x2Fu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x2000u;
        v82 = *(_QWORD *)(a1 + 280);
        if (!v82)
          goto LABEL_216;
        goto LABEL_333;
      case 0x30u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_221;
        *(_DWORD *)(a1 + 304) |= 0x4000u;
        v83 = *(_QWORD *)(a1 + 288);
        if (!v83)
          goto LABEL_219;
        goto LABEL_358;
      default:
        v11 = TagFallback & 7;
LABEL_221:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v8, a4) & 1) == 0)return 0;
        continue;
    }
  }
}

void sub_1000A6DE8()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6E10()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6E38()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6E60()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6E98()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6EC0()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6EE8()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A6FDC()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A702C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A7054()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_1000A707C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t result;
  unsigned int v20;

  v6 = a1 + 8;
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 5)
          goto LABEL_36;
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 16) = v20;
        *(_DWORD *)(a1 + 44) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 21)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 5)
          goto LABEL_36;
LABEL_15:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 20) = v20;
        *(_DWORD *)(a1 + 44) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 29)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
LABEL_20:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 44) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 37)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_25:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 28) = v20;
        *(_DWORD *)(a1 + 44) |= 8u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 45)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_DWORD *)(a1 + 32) = v20;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != 48)
          continue;
        v16 = v15 + 1;
        *((_QWORD *)this + 1) = v16;
        v20 = 0;
        if ((unint64_t)v16 >= v14)
          goto LABEL_42;
LABEL_40:
        if (*v16 < 0)
        {
LABEL_42:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v17 = v20;
          v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
        }
        else
        {
          v17 = *v16;
          v18 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)this + 1) = v18;
        }
        *(_BYTE *)(a1 + 36) = v17 != 0;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        if (v18 != (unsigned __int8 *)v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_20;
        goto LABEL_36;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_25;
        goto LABEL_36;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 5)
          goto LABEL_30;
        goto LABEL_36;
      case 6u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_36;
        v16 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        v20 = 0;
        if ((unint64_t)v16 < v14)
          goto LABEL_40;
        goto LABEL_42;
      default:
        v9 = TagFallback & 7;
LABEL_36:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
          return 0;
        continue;
    }
  }
}

uint64_t sub_1000A73BC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  if ((*(_BYTE *)(*(_QWORD *)result + 112) & 2) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)result + 40);
    if (!v3)
      v3 = *(_QWORD *)(qword_10042EAD0 + 40);
    *a2 = 0;
    result = sub_1000A7424((uint64_t)(a2 + 8), v3);
    *a2 = 1;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1000A7424(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FA7B0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 191) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  sub_1000A74E0(a1, a2);
  return a1;
}

void sub_1000A74B0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000A74CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A74E0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  _BYTE v77[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v77, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 8280);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v77, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v76, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v77);
    v4 = *(_DWORD *)(a2 + 300);
    if (!(_BYTE)v4)
      goto LABEL_13;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 300);
    if (!(_BYTE)v4)
    {
LABEL_13:
      if ((v4 & 0xFF00) == 0)
        goto LABEL_62;
      goto LABEL_28;
    }
  }
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 300) |= 1u;
    *(_QWORD *)(a1 + 16) = v6;
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 4) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_7;
  }
  v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 300) |= 2u;
  *(_DWORD *)(a1 + 24) = v7;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 300) |= 4u;
  *(_DWORD *)(a1 + 28) = v8;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 300) |= 8u;
  *(_DWORD *)(a1 + 32) = v9;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 300) |= 0x10u;
  *(_DWORD *)(a1 + 36) = v10;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 300) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v11;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v12 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 300) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v12;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x80) == 0)
    goto LABEL_13;
LABEL_22:
  *(_DWORD *)(a1 + 300) |= 0x80u;
  v13 = *(_DWORD **)(a1 + 48);
  if (!v13)
    operator new();
  v14 = *(_QWORD *)(a2 + 48);
  if (v14)
  {
    sub_1001B3CE4(v13, v14);
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0xFF00) == 0)
      goto LABEL_62;
  }
  else
  {
    sub_1001B3CE4(v13, *(_QWORD *)(qword_10041B018 + 48));
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0xFF00) == 0)
      goto LABEL_62;
  }
LABEL_28:
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x100u;
    v15 = *(_DWORD **)(a1 + 56);
    if (!v15)
      operator new();
    v16 = *(_QWORD *)(a2 + 56);
    if (!v16)
      v16 = *(_QWORD *)(qword_10041B018 + 56);
    sub_1001B445C(v15, v16);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x200) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x200u;
    v17 = *(_QWORD *)(a1 + 64);
    if (!v17)
      operator new();
    v18 = *(_QWORD *)(a2 + 64);
    if (!v18)
      v18 = *(_QWORD *)(qword_10041B018 + 64);
    sub_1001B4FDC(v17, v18);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x400) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x400u;
    v19 = *(_DWORD **)(a1 + 72);
    if (!v19)
      operator new();
    v20 = *(_QWORD *)(a2 + 72);
    if (!v20)
      v20 = *(_QWORD *)(qword_10041B018 + 72);
    sub_10003F538(v19, v20);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x800) != 0)
  {
    v21 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 300) |= 0x800u;
    *(_DWORD *)(a1 + 96) = v21;
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x1000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x1000u;
    v22 = *(_QWORD *)(a1 + 80);
    if (!v22)
      operator new();
    v23 = *(_QWORD *)(a2 + 80);
    if (!v23)
      v23 = *(_QWORD *)(qword_10041B018 + 80);
    sub_1000A8690(v22, v23);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x2000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x2000u;
    v24 = *(_QWORD *)(a1 + 88);
    if (!v24)
      operator new();
    v25 = *(_QWORD *)(a2 + 88);
    if (!v25)
      v25 = *(_QWORD *)(qword_10041B018 + 88);
    sub_100006F44(v24, v25);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x4000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x4000u;
    v26 = *(_QWORD *)(a1 + 104);
    if (!v26)
      operator new();
    v27 = *(_QWORD *)(a2 + 104);
    if (!v27)
      v27 = *(_QWORD *)(qword_10041B018 + 104);
    sub_1001B1CCC(v26, v27);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x8000) != 0)
  {
    v28 = *(_QWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 300) |= 0x8000u;
    *(_QWORD *)(a1 + 112) = v28;
    v4 = *(_DWORD *)(a2 + 300);
  }
LABEL_62:
  if ((v4 & 0xFF0000) == 0)
    goto LABEL_72;
  if ((v4 & 0x10000) != 0)
  {
    v51 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 300) |= 0x10000u;
    *(_DWORD *)(a1 + 100) = v51;
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x20000) == 0)
    {
LABEL_65:
      if ((v4 & 0x40000) == 0)
        goto LABEL_66;
      goto LABEL_137;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_65;
  }
  v52 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 300) |= 0x20000u;
  *(_DWORD *)(a1 + 120) = v52;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40000) == 0)
  {
LABEL_66:
    if ((v4 & 0x80000) == 0)
      goto LABEL_67;
    goto LABEL_138;
  }
LABEL_137:
  v53 = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 300) |= 0x40000u;
  *(_DWORD *)(a1 + 124) = v53;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x80000) == 0)
  {
LABEL_67:
    if ((v4 & 0x100000) == 0)
      goto LABEL_68;
    goto LABEL_139;
  }
LABEL_138:
  v54 = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 300) |= 0x80000u;
  *(_DWORD *)(a1 + 128) = v54;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x100000) == 0)
  {
LABEL_68:
    if ((v4 & 0x200000) == 0)
      goto LABEL_69;
    goto LABEL_140;
  }
LABEL_139:
  v55 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 300) |= 0x100000u;
  *(_DWORD *)(a1 + 132) = v55;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x200000) == 0)
  {
LABEL_69:
    if ((v4 & 0x400000) == 0)
      goto LABEL_70;
    goto LABEL_141;
  }
LABEL_140:
  v56 = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 300) |= 0x200000u;
  *(_DWORD *)(a1 + 136) = v56;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x400000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_141:
  *(_DWORD *)(a1 + 300) |= 0x400000u;
  v57 = *(_DWORD **)(a1 + 144);
  if (!v57)
    operator new();
  v58 = *(_QWORD *)(a2 + 144);
  if (v58)
  {
    sub_1001B79A4(v57, v58);
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x800000) == 0)
      goto LABEL_72;
LABEL_71:
    v29 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 300) |= 0x800000u;
    *(_DWORD *)(a1 + 140) = v29;
    v4 = *(_DWORD *)(a2 + 300);
    goto LABEL_72;
  }
  sub_1001B79A4(v57, *(_QWORD *)(qword_10041B018 + 144));
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x800000) != 0)
    goto LABEL_71;
LABEL_72:
  if (!HIBYTE(v4))
    goto LABEL_94;
  if ((v4 & 0x1000000) != 0)
  {
    v30 = *(_QWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 300) |= 0x1000000u;
    *(_QWORD *)(a1 + 152) = v30;
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x2000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x2000000u;
    v31 = *(_QWORD *)(a1 + 160);
    if (!v31)
      operator new();
    v32 = *(_QWORD *)(a2 + 160);
    if (!v32)
      v32 = *(_QWORD *)(qword_10041B018 + 160);
    sub_100048C5C(v31, v32);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x4000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x4000000u;
    v33 = *(_QWORD *)(a1 + 168);
    if (!v33)
      operator new();
    v34 = *(_QWORD *)(a2 + 168);
    if (!v34)
      v34 = *(_QWORD *)(qword_10041B018 + 168);
    sub_1000C49B8(v33, v34);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x8000000) != 0)
  {
    *(_DWORD *)(a1 + 300) |= 0x8000000u;
    v35 = *(_QWORD *)(a1 + 176);
    if (!v35)
      operator new();
    v36 = *(_QWORD *)(a2 + 176);
    if (!v36)
      v36 = *(_QWORD *)(qword_10041B018 + 176);
    sub_1000C4BB8(v35, v36);
    v4 = *(_DWORD *)(a2 + 300);
  }
  if ((v4 & 0x10000000) != 0)
  {
    v63 = *(_BYTE *)(a2 + 192);
    *(_DWORD *)(a1 + 300) |= 0x10000000u;
    *(_BYTE *)(a1 + 192) = v63;
    v4 = *(_DWORD *)(a2 + 300);
    if ((v4 & 0x20000000) == 0)
    {
LABEL_92:
      if ((v4 & 0x40000000) == 0)
        goto LABEL_93;
      goto LABEL_153;
    }
  }
  else if ((v4 & 0x20000000) == 0)
  {
    goto LABEL_92;
  }
  v64 = *(_QWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 300) |= 0x20000000u;
  *(_QWORD *)(a1 + 184) = v64;
  v4 = *(_DWORD *)(a2 + 300);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_94;
LABEL_154:
    v66 = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(a1 + 300) |= 0x80000000;
    *(_DWORD *)(a1 + 196) = v66;
    v37 = *(_DWORD *)(a2 + 304);
    if (!(_BYTE)v37)
      goto LABEL_126;
    goto LABEL_95;
  }
LABEL_153:
  v65 = *(_BYTE *)(a2 + 193);
  *(_DWORD *)(a1 + 300) |= 0x40000000u;
  *(_BYTE *)(a1 + 193) = v65;
  if ((*(_DWORD *)(a2 + 300) & 0x80000000) != 0)
    goto LABEL_154;
LABEL_94:
  v37 = *(_DWORD *)(a2 + 304);
  if (!(_BYTE)v37)
    goto LABEL_126;
LABEL_95:
  if ((v37 & 1) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 1u;
    v38 = *(_QWORD *)(a1 + 200);
    if (!v38)
      operator new();
    v39 = *(_QWORD *)(a2 + 200);
    if (!v39)
      v39 = *(_QWORD *)(qword_10041B018 + 200);
    sub_1001B24F8(v38, v39);
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 2) != 0)
  {
    v40 = *(_BYTE *)(a2 + 194);
    *(_DWORD *)(a1 + 304) |= 2u;
    *(_BYTE *)(a1 + 194) = v40;
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 4) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 4u;
    v41 = *(_QWORD *)(a1 + 208);
    if (!v41)
      operator new();
    v42 = *(_QWORD *)(a2 + 208);
    if (!v42)
      v42 = *(_QWORD *)(qword_10041B018 + 208);
    sub_1001BC448(v41, v42);
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 8) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 8u;
    v43 = *(_DWORD **)(a1 + 216);
    if (!v43)
      operator new();
    v44 = *(_QWORD *)(a2 + 216);
    if (!v44)
      v44 = *(_QWORD *)(qword_10041B018 + 216);
    sub_1001BC630(v43, v44);
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 0x10) != 0)
  {
    v45 = *(_DWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 304) |= 0x10u;
    *(_DWORD *)(a1 + 224) = v45;
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 0x20u;
    v46 = *(_QWORD *)(a1 + 232);
    if (!v46)
      operator new();
    v47 = *(_QWORD *)(a2 + 232);
    if (!v47)
      v47 = *(_QWORD *)(qword_10041B018 + 232);
    sub_1001B24F8(v46, v47);
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 0x40) != 0)
  {
    v48 = *(_DWORD *)(a2 + 228);
    *(_DWORD *)(a1 + 304) |= 0x40u;
    *(_DWORD *)(a1 + 228) = v48;
    v37 = *(_DWORD *)(a2 + 304);
  }
  if ((v37 & 0x80) != 0)
  {
    *(_DWORD *)(a1 + 304) |= 0x80u;
    v49 = *(_QWORD *)(a1 + 240);
    if (!v49)
      operator new();
    v50 = *(_QWORD *)(a2 + 240);
    if (!v50)
      v50 = *(_QWORD *)(qword_10041B018 + 240);
    sub_1001B4FDC(v49, v50);
    v37 = *(_DWORD *)(a2 + 304);
  }
LABEL_126:
  if ((v37 & 0xFF00) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((v37 & 0x100) != 0)
  {
    v59 = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 304) |= 0x100u;
    *(_DWORD *)(a1 + 248) = v59;
    v37 = *(_DWORD *)(a2 + 304);
    if ((v37 & 0x200) == 0)
    {
LABEL_129:
      if ((v37 & 0x400) == 0)
        goto LABEL_130;
      goto LABEL_147;
    }
  }
  else if ((v37 & 0x200) == 0)
  {
    goto LABEL_129;
  }
  v60 = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 304) |= 0x200u;
  *(_DWORD *)(a1 + 252) = v60;
  v37 = *(_DWORD *)(a2 + 304);
  if ((v37 & 0x400) == 0)
  {
LABEL_130:
    if ((v37 & 0x800) == 0)
      goto LABEL_131;
LABEL_171:
    *(_DWORD *)(a1 + 304) |= 0x800u;
    v67 = *(_QWORD *)(a1 + 264);
    if (!v67)
      operator new();
    v68 = *(_QWORD *)(a2 + 264);
    if (v68)
    {
      sub_1001BC830(v67, v68);
      v37 = *(_DWORD *)(a2 + 304);
      if ((v37 & 0x1000) != 0)
        goto LABEL_178;
    }
    else
    {
      sub_1001BC830(v67, *(_QWORD *)(qword_10041B018 + 264));
      v37 = *(_DWORD *)(a2 + 304);
      if ((v37 & 0x1000) != 0)
        goto LABEL_178;
    }
LABEL_132:
    if ((v37 & 0x2000) == 0)
      goto LABEL_133;
LABEL_184:
    *(_DWORD *)(a1 + 304) |= 0x2000u;
    v71 = *(_QWORD *)(a1 + 280);
    if (!v71)
      operator new();
    v72 = *(_QWORD *)(a2 + 280);
    if (v72)
    {
      sub_1000C47D4(v71, v72);
      if ((*(_DWORD *)(a2 + 304) & 0x4000) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    else
    {
      sub_1000C47D4(v71, *(_QWORD *)(qword_10041B018 + 280));
      if ((*(_DWORD *)(a2 + 304) & 0x4000) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    }
    goto LABEL_190;
  }
LABEL_147:
  *(_DWORD *)(a1 + 304) |= 0x400u;
  v61 = *(_QWORD *)(a1 + 256);
  if (!v61)
    operator new();
  v62 = *(_QWORD *)(a2 + 256);
  if (v62)
  {
    sub_1001BC754(v61, v62);
    v37 = *(_DWORD *)(a2 + 304);
    if ((v37 & 0x800) != 0)
      goto LABEL_171;
  }
  else
  {
    sub_1001BC754(v61, *(_QWORD *)(qword_10041B018 + 256));
    v37 = *(_DWORD *)(a2 + 304);
    if ((v37 & 0x800) != 0)
      goto LABEL_171;
  }
LABEL_131:
  if ((v37 & 0x1000) == 0)
    goto LABEL_132;
LABEL_178:
  *(_DWORD *)(a1 + 304) |= 0x1000u;
  v69 = *(_QWORD *)(a1 + 272);
  if (!v69)
    operator new();
  v70 = *(_QWORD *)(a2 + 272);
  if (v70)
  {
    sub_1001BC974(v69, v70);
    v37 = *(_DWORD *)(a2 + 304);
    if ((v37 & 0x2000) != 0)
      goto LABEL_184;
  }
  else
  {
    sub_1001BC974(v69, *(_QWORD *)(qword_10041B018 + 272));
    v37 = *(_DWORD *)(a2 + 304);
    if ((v37 & 0x2000) != 0)
      goto LABEL_184;
  }
LABEL_133:
  if ((v37 & 0x4000) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
LABEL_190:
  *(_DWORD *)(a1 + 304) |= 0x4000u;
  v73 = *(_QWORD *)(a1 + 288);
  if (!v73)
    operator new();
  v74 = *(_QWORD *)(a2 + 288);
  if (!v74)
    v74 = *(_QWORD *)(qword_10041B018 + 288);
  sub_1000C45B0(v73, v74);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000A83D4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A83FC()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A8424()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A85C8()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A8640()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000A8668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000A867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A8690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 4587);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 2u;
  *(_DWORD *)(a1 + 20) = v9;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_16:
    v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v12;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_10;
  }
LABEL_15:
  v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 28) = v11;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_16;
LABEL_9:
  if ((v5 & 0x20) != 0)
  {
LABEL_10:
    v6 = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_BYTE *)(a1 + 36) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000A87CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000A87E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000A87F4(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003FA7B0;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1000A8880(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1000A8830(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003FA7B0;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1000A8880(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

_QWORD *sub_1000A8880(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((_QWORD *)qword_10041B018 != result)
  {
    v1 = result;
    v2 = result[6];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[7];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[8];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[9];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[10];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[11];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[13];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[18];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[20];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[21];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[22];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[25];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[26];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[27];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[29];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[30];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[32];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[33];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[34];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[35];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = (_QWORD *)v1[36];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1000A8A58(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA440;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8A9C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FA2E0;
  if ((_QWORD *)qword_10041AFE0 != a1)
  {
    v2 = a1[4];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8B08(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA390;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8B4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB6D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8B90(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA910;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8BD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB620;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8C18(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9F70;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8C5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA020;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8CA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB4C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8CE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB570;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8D28(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA230;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8D6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8DB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA180;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8DF4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA0D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8E38(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB780;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8E7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8EC0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FB8E0;
  if ((_QWORD *)qword_10041B0E0 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8F2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA5A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8F70(_QWORD *a1)
{
  *a1 = off_1003FA4F0;
  if (a1[5])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000A8FD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB830;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1000A9018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ***v3;
  uint64_t ***v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t ***v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int16 v27;
  int *v28;
  int *v29;
  __int128 v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  int *v35;
  _DWORD *v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t **v45;
  uint64_t ***v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  NSObject *v60;
  uint64_t v61;
  uint8_t *v64;
  uint64_t ***v66;
  uint64_t v67;
  int *__p;
  int *v69;
  int *v70;
  int *v71;
  int *v72;
  char *v73;
  uint64_t v74;
  uint8_t buf[24];

  v64 = (uint8_t *)(a1 + 24);
  *(_DWORD *)(a1 + 48) = 0;
  v2 = a1 + 48;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v3 = (uint64_t ***)(a2 + 8);
  v4 = *(uint64_t ****)a2;
  v67 = a1 + 48;
  if (*(_QWORD *)a2 == a2 + 8)
  {
    __p = 0;
    v69 = 0;
    goto LABEL_68;
  }
  v5 = 0;
  v6 = *(uint64_t ****)a2;
  do
  {
    v7 = v6[1];
    v8 = (uint64_t **)v6;
    if (v7)
    {
      do
      {
        v9 = (uint64_t ***)v7;
        v7 = (uint64_t **)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v9 = (uint64_t ***)v8[2];
        v10 = *v9 == v8;
        v8 = (uint64_t **)v9;
      }
      while (!v10);
    }
    v5 += ((char *)v6[7] - (char *)v6[6]) >> 5;
    v6 = v9;
  }
  while (v9 != v3);
  __p = 0;
  v69 = 0;
  v70 = 0;
  if (v5)
  {
    if (v5 > 0x1999999999999999)
      sub_1000D02C0();
    __p = (int *)operator new(10 * v5);
    v69 = __p;
    v70 = (int *)((char *)__p + 10 * v5);
  }
  if (v4 != v3)
  {
    v66 = v3;
LABEL_16:
    if (sub_1000A9A88(v2, v4 + 4))
      v11 = sub_100258778(v2, v4 + 4);
    else
      v11 = sub_1000A9AA8(v2, (uint64_t)(v4 + 4));
    v12 = v11;
    v14 = v4[6];
    v13 = v4[7];
    while (1)
    {
      while (1)
      {
        if (v14 == v13)
        {
          v45 = v4[1];
          v2 = v67;
          if (v45)
          {
            do
            {
              v46 = (uint64_t ***)v45;
              v45 = (uint64_t **)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (uint64_t ***)v4[2];
              v10 = *v46 == (uint64_t **)v4;
              v4 = v46;
            }
            while (!v10);
          }
          v4 = v46;
          v3 = v66;
          if (v46 != v66)
            goto LABEL_16;
          goto LABEL_68;
        }
        v16 = *(_DWORD *)v14;
        v17 = *(int *)v14 >> 31;
        if (v16 >> 31 != v16)
          break;
        sub_1000A991C((uint64_t)buf, (unint64_t)v14[1]);
        v18 = v69;
        if (v69 < v70)
        {
          v15 = *(_DWORD *)buf;
          *((_WORD *)v69 + 2) = *(_WORD *)&buf[4];
          *v69 = v15;
          *(int *)((char *)v69 + 6) = v12;
          v69 = (int *)((char *)v69 + 10);
          v14 += 4;
        }
        else
        {
          v19 = __p;
          v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1) + 1;
          if (v20 > 0x1999999999999999)
            sub_1000D02C0();
          if (0x999999999999999ALL * (((char *)v70 - (char *)__p) >> 1) > v20)
            v20 = 0x999999999999999ALL * (((char *)v70 - (char *)__p) >> 1);
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v70 - (char *)__p) >> 1) >= 0xCCCCCCCCCCCCCCCLL)
            v21 = 0x1999999999999999;
          else
            v21 = v20;
          if (v21 > 0x1999999999999999)
            sub_1000CDEB8();
          v22 = (char *)operator new(10 * v21);
          v23 = *(_DWORD *)buf;
          v24 = &v22[2 * (((char *)v69 - (char *)__p) >> 1)];
          *((_WORD *)v24 + 2) = *(_WORD *)&buf[4];
          *(_DWORD *)v24 = v23;
          *(_DWORD *)(v24 + 6) = v12;
          v25 = v24;
          while (v18 != __p)
          {
            v26 = *(_QWORD *)((char *)v18 - 10);
            v18 = (int *)((char *)v18 - 10);
            v27 = *((_WORD *)v18 + 4);
            *(_QWORD *)(v25 - 10) = v26;
            v25 -= 10;
            *((_WORD *)v25 + 4) = v27;
          }
          v28 = (int *)(v24 + 10);
          __p = (int *)v25;
          v70 = (int *)&v22[10 * v21];
          if (v19)
            operator delete(v19);
          v69 = v28;
          v14 += 4;
        }
      }
      v29 = v72;
      if (v72 < (int *)v73)
      {
        v30 = *(_OWORD *)(v14 + 1);
        v72[6] = *((_DWORD *)v14 + 6);
        *(_OWORD *)(v72 + 2) = v30;
        *v72 = *(_DWORD *)v14 ^ (*(int *)v14 >> 31);
        v72[8] = v12;
        v31 = v72 + 10;
        goto LABEL_60;
      }
      v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v72 - (char *)v71) >> 3) + 1;
      if (v32 > 0x666666666666666)
        sub_1000D02C0();
      if (0x999999999999999ALL * ((v73 - (char *)v71) >> 3) > v32)
        v32 = 0x999999999999999ALL * ((v73 - (char *)v71) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((v73 - (char *)v71) >> 3) >= 0x333333333333333)
        v33 = 0x666666666666666;
      else
        v33 = v32;
      if (v33)
      {
        if (v33 > 0x666666666666666)
          sub_1000CDEB8();
        v34 = operator new(40 * v33);
        v16 = *(_DWORD *)v14;
        v17 = *(int *)v14 >> 31;
        v35 = &v34[2 * (((char *)v72 - (char *)v71) >> 3)];
        v36 = v35 + 2;
        v37 = (__int128 *)(v14 + 1);
        if (v16 >> 31 != v16)
        {
LABEL_50:
          v38 = *v37;
          v36[4] = *((_DWORD *)v37 + 4);
          *(_OWORD *)v36 = v38;
          goto LABEL_51;
        }
      }
      else
      {
        v34 = 0;
        v35 = (int *)(8 * (((char *)v72 - (char *)v71) >> 3));
        v36 = v35 + 2;
        v37 = (__int128 *)(v14 + 1);
        if (v17 != v16)
          goto LABEL_50;
      }
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v17 = v16;
LABEL_51:
      *v35 = v17 ^ v16;
      v31 = v35 + 10;
      v34[2 * (((char *)v72 - (char *)v71) >> 3) + 8] = v12;
      if (v72 != v71)
      {
        v39 = 0;
        do
        {
          v43 = &v35[v39 - 8];
          v42 = v72[v39 - 10];
          v44 = &v72[v39 - 8];
          if (v42 == v42 >> 31)
          {
            *(_QWORD *)v43 = *(_QWORD *)v44;
            v41 = v42;
          }
          else
          {
            v40 = *(_OWORD *)v44;
            v35[v39 - 4] = v72[v39 - 4];
            *(_OWORD *)v43 = v40;
            v41 = v72[v39 - 10];
            v42 = v41 >> 31;
          }
          v35[v39 - 10] = v41 ^ v42;
          v35[v39 - 2] = v72[v39 - 2];
          v39 -= 10;
        }
        while (&v72[v39] != v71);
        v29 = v71;
        v35 = (int *)((char *)v35 + v39 * 4);
      }
      v71 = v35;
      v73 = (char *)&v34[10 * v33];
      if (v29)
        operator delete(v29);
LABEL_60:
      v72 = v31;
      v14 += 4;
    }
  }
LABEL_68:
  sub_10001FFE0(a2, *(_QWORD **)(a2 + 8));
  v47 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1));
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  if (v69 == __p)
    v48 = 0;
  else
    v48 = v47;
  sub_1000BBDFC((uint64_t)__p, (unsigned int *)v69, (uint64_t)buf, v48, 1);
  memset(buf, 0, sizeof(buf));
  if (v69 == __p)
  {
    *(_QWORD *)&buf[8] = 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1);
    v49 = a1;
  }
  else
  {
    v49 = a1;
    sub_10009734C((char **)buf, 0, 0xCCCCCCCCCCCCCCCDLL * (((char *)v69 - (char *)__p) >> 1), __p, &v74);
  }
  if (buf == (uint8_t *)v49)
  {
    if (*(_QWORD *)&buf[16])
      operator delete(*(void **)buf);
  }
  else
  {
    *(_QWORD *)(v49 + 8) = 0;
    if (*(_QWORD *)v49)
      operator delete(*(void **)v49);
    *(_QWORD *)v49 = *(_QWORD *)buf;
    *(_OWORD *)(v49 + 8) = *(_OWORD *)&buf[8];
  }
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    v51 = *(_QWORD *)(v49 + 8);
    if (v51)
    {
      if (v51 >= v50)
        goto LABEL_87;
      if (v51 > 0xCCCCCCCCCCCCCCCLL)
        sub_100245110((uint64_t)"get_next_capacity, allocator's max size reached");
      v52 = operator new(10 * v51);
      v53 = v52;
      v49 = a1;
      v54 = *(void **)a1;
      if (*(_QWORD *)a1 && (v55 = *(_QWORD *)(a1 + 8)) != 0)
      {
        memmove(v52, *(const void **)a1, 10 * v55);
      }
      else if (!v54)
      {
        goto LABEL_86;
      }
    }
    else
    {
      v53 = 0;
      v54 = *(void **)v49;
      if (!*(_QWORD *)v49)
      {
LABEL_86:
        *(_QWORD *)v49 = v53;
        *(_QWORD *)(v49 + 16) = v51;
        goto LABEL_87;
      }
    }
    operator delete(v54);
    goto LABEL_86;
  }
LABEL_87:
  if (qword_100417ED8 == -1)
  {
    v56 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_90;
    goto LABEL_89;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FF5F0);
  v56 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_89:
    v57 = *(_QWORD *)(v49 + 8);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "mac to location_id lookup, bulk inserted wifi macs, total, %zu", buf, 0xCu);
  }
LABEL_90:
  if (v71 == v72)
    goto LABEL_98;
  v58 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v72 - (char *)v71) >> 3);
  sub_100252894((uint64_t)v71, v72, (uint64_t)buf, 126 - 2 * __clz(v58), 1);
  memset(buf, 0, sizeof(buf));
  sub_100249B0C(buf, 0, v58, v71, &v74);
  if (buf == v64)
  {
    if (*(_QWORD *)&buf[16])
      operator delete(*(void **)buf);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    v59 = *(void **)(a1 + 24);
    if (v59)
      operator delete(v59);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)buf;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&buf[8];
  }
  sub_100249DA0((char **)v64);
  if (qword_100417ED8 == -1)
  {
    v60 = qword_100417EE0;
    v49 = a1;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_98;
    goto LABEL_97;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FF5F0);
  v60 = qword_100417EE0;
  v49 = a1;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_97:
    v61 = *(_QWORD *)(v49 + 32);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "mac to location_id lookup, bulk inserted beacon macs, total, %zu", buf, 0xCu);
  }
LABEL_98:
  if (__p)
    operator delete(__p);
  if (v71)
    operator delete(v71);
  return v49;
}

void sub_1000A985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, _QWORD *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23)
{
  void *v24;

  if (a23)
    operator delete(__p);
  if (a14)
  {
    operator delete(a14);
    v24 = a17;
    if (!a17)
    {
LABEL_5:
      sub_10002F3EC(a13);
      if (!*(_QWORD *)(a11 + 40))
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v24 = a17;
    if (!a17)
      goto LABEL_5;
  }
  operator delete(v24);
  sub_10002F3EC(a13);
  if (!*(_QWORD *)(a11 + 40))
  {
LABEL_6:
    if (!*(_QWORD *)(a11 + 16))
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*a10);
  if (!*(_QWORD *)(a11 + 16))
LABEL_7:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(*(void **)a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A991C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  void *__p;
  void *v4[2];
  char v5;
  std::string v6;
  std::string v7;

  v2 = a2;
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 4) = WORD2(a2);
  if (HIWORD(a2))
  {
    sub_1000D5048(v4, "");
    sub_10023B010("upper bits of mac are expected to be zero, integer mac=", &v6);
    sub_1001E1030(&v2, &v7);
    sub_100174738((uint64_t)v4, (uint64_t)&v6, 2);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v7.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_4:
        if ((v5 & 0x80000000) == 0)
          goto LABEL_5;
LABEL_8:
        operator delete(v4[0]);
LABEL_5:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return result;
}

void sub_1000A9A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000A9A88(uint64_t a1, uint64_t ***a2)
{
  return sub_1000A9C6C((_QWORD *)(a1 + 8), a2) != 0;
}

uint64_t sub_1000A9AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v14;
  void *v15;
  void *v16[2];
  char v17;
  std::string __p;

  v4 = a1 + 8;
  if (sub_1000A9C6C((_QWORD *)(a1 + 8), (uint64_t ***)a2))
  {
    sub_1000D5048(v16, "");
    sub_10015D524("Attempting to re-create a private location id", &__p);
    sub_100174738((uint64_t)v16, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(v16[0]);
    sub_1000F2AE4((uint64_t)&v15);
  }
  v14 = *(_DWORD *)a1;
  *(_DWORD *)a1 = v14 + 1;
  sub_1000AA104(v4, (uint64_t ***)a2, (const void **)a2, &v14);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  v5 = sub_1000A9D8C(a1 + 48, &v14, (uint64_t)&unk_100395958, &__p);
  v7 = *(uint64_t ***)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)v5[4];
  v5[3] = v7;
  v5[4] = v6;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v14;
}

void sub_1000A9C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void ***sub_1000A9C6C(_QWORD *a1, uint64_t ***a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  const void ****v9;
  const void ***v10;
  uint64_t v11;
  unint64_t v12;
  const void **v13;
  char v15;

  v4 = sub_1000B40D8((uint64_t)&v15, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(const void *****)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if ((const void **)v6 == v13)
        {
          if ((sub_1000790EC(v10 + 2, (unsigned __int8 ***)a2) & 1) != 0)
            return v10;
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (const void ***)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = (unint64_t)v10[1];
      if (v6 == v12)
      {
        if ((sub_1000790EC(v10 + 2, (unsigned __int8 ***)a2) & 1) != 0)
          return v10;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (const void ***)*v10;
    }
    while (v10);
  }
  return v10;
}

_QWORD *sub_1000A9D8C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = result[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = operator new(0x28uLL);
  *v27 = 0;
  v27[1] = v7;
  *((_DWORD *)v27 + 4) = **a4;
  sub_1000892C8(v27 + 3);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      v17 = v27;
      if (v16)
        goto LABEL_26;
    }
LABEL_50:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v27)
    {
      v26 = *(_QWORD *)(*v27 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8)
          v26 %= v8;
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v27;
  if (!v16)
    goto LABEL_50;
LABEL_26:
  *v17 = *v16;
  *v16 = v27;
LABEL_61:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1000AA0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100258AB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000AA0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100258AB4((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1000AA104(uint64_t a1, uint64_t ***a2, const void **a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void ***v13;
  const void **v14;
  unint64_t v15;
  unint64_t v16;
  const void ***v17;
  const void **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  const void ***v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v9 = sub_1000B40D8((uint64_t)v37, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (const void **)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (const void ***)(a1 + 16);
  v18 = (const void **)operator new(0x28uLL);
  v14 = v18;
  v37[0] = v18;
  v37[1] = a1 + 16;
  *v18 = 0;
  v18[1] = (const void *)v10;
  v19 = (unint64_t *)a3[1];
  v18[2] = *a3;
  v18[3] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_DWORD *)v18 + 8) = *a4;
  v38 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v11 && (float)(v23 * (float)v11) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v25)
    {
LABEL_29:
      *v14 = *v25;
LABEL_64:
      *v25 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v34 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v10);
        if (v25)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v34 & v10;
      v24 = *(_QWORD *)a1;
      v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v34 & v10));
      if (v25)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v24 + 8 * v4) = v17;
  if (*v14)
  {
    v35 = *((_QWORD *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v25 = (const void ***)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1000AA458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000AACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25,char a26,char a27,__int16 a28,uint64_t a29,uint64_t a30,id a31,char a32,char a33,int a34)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1000AA7B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000AAF28(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2;
  }
  else
  {
    sub_10016A43C((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003F5CE8);
      v6 = (id)qword_100417EE0;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }

      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_1000AB094(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  id v5;
  NSObject *v6;
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t buf;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (a2)
  {

    __cxa_begin_catch(a1);
    v5 = sub_100166708();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

float sub_1000AB1D0(uint64_t a1, float *a2)
{
  float v4;
  float v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2;
  }
  else
  {
    sub_1002EEE24((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1004046A8);
      v6 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_1000AB33C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t buf;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1004046A8);
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }
  }
  __cxa_rethrow();
}

const char *sub_1000AB4A0()
{
  return "SCAN_STRATEGY_DYNAMIC";
}

void sub_1000AB4B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[5];
  _QWORD v16[7];

  sub_1000AB668(a1, &v13);
  v3 = v13;
  v2 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v2;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_10041A328);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_10041A328))
  {
    sub_10000CD1C(&qword_10041A320, "com.apple.indoor.WifiSettingsSingleton.changeListeners");
    __cxa_atexit((void (*)(void *))sub_100005D30, &qword_10041A320, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10041A328);
  }
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3802000000;
  v16[3] = sub_1000BCCF4;
  v16[4] = nullsub_39;
  v16[5] = a1;
  v16[6] = &v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 0x40000000;
  v15[2] = sub_1000BC95C;
  v15[3] = &unk_100404668;
  v15[4] = v16;
  sub_10005C5D4(&qword_10041A320, v15);
  _Block_object_dispose(v16, 8);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

uint64_t sub_1000AB65C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000AB668(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  _BYTE *v3;
  float v6;
  __int128 v7;
  _QWORD *v8;
  float v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  float v38;
  __int128 v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  float v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59[3];
  void *v60[3];
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  __int16 v67;
  void *__p[3];
  void *v69[3];
  __int128 v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  void *v74[4];
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  int v79;
  void *v80;
  void *v81;
  char *v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  _BYTE v86[19];

  *a2 = 0;
  a2[1] = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v6 = *(float *)(a1 + 16);
      sub_1000AC3E0((uint64_t **)(a1 + 152), (uint64_t)__p);
      sub_1002EE1D8(110, (uint64_t)__p, 1, 0, 0, *(_BYTE *)(a1 + 20), &v70, v6);
      v7 = v70;
      v70 = 0uLL;
      *(_OWORD *)a2 = v7;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      return;
    case 1:
      v38 = *(float *)(a1 + 16);
      sub_1000AC3E0((uint64_t **)(a1 + 152), (uint64_t)v69);
      sub_1002EE1D8(110, (uint64_t)v69, 0, 0, 0, *(_BYTE *)(a1 + 20), &v70, v38);
      v39 = v70;
      v70 = 0uLL;
      *(_OWORD *)a2 = v39;
      if (v69[0])
      {
        v69[1] = v69[0];
        operator delete(v69[0]);
      }
      return;
    case 2:
      *(_QWORD *)&v70 = sub_1000AC900();
      *((_QWORD *)&v70 + 1) = v12;
      v13 = sub_1000AC110((uint64_t)&v70, (_BYTE *)&v70 + 9);
      if (v13)
      {
        *(_QWORD *)&v70 = 110;
        DWORD2(v70) = *(_DWORD *)(a1 + 16);
        sub_1000AC3E0((uint64_t **)(a1 + 152), (uint64_t)&v71);
        *(_QWORD *)&v65 = sub_1000AC930();
        *((_QWORD *)&v65 + 1) = v14;
        LODWORD(v74[0]) = sub_1000AAF28((uint64_t)&v65, (unsigned int *)&v65 + 3);
        v63 = sub_1000AC920();
        v64 = v15;
        WORD2(v74[0]) = sub_1000AC110((uint64_t)&v63, (_BYTE *)&v64 + 1);
        *(_QWORD *)&v86[7] = v70;
        *(_DWORD *)&v86[15] = DWORD2(v70);
        v2 = v71;
        v3 = v72;
        v72 = 0;
        v73 = 0;
        v71 = 0;
        v66 = (int)v74[0];
        v67 = WORD2(v74[0]);
      }
      *(_QWORD *)&v70 = 110;
      DWORD2(v70) = *(_DWORD *)(a1 + 16);
      *(_QWORD *)&v65 = sub_1000AC8E0();
      *((_QWORD *)&v65 + 1) = v16;
      BYTE12(v70) = sub_1000AC110((uint64_t)&v65, (_BYTE *)&v65 + 9);
      v63 = sub_1000AC8F0();
      v64 = v17;
      BYTE13(v70) = sub_1000AC110((uint64_t)&v63, (_BYTE *)&v64 + 1);
      v72 = 0;
      v73 = 0;
      v71 = 0;
      sub_1000AC3E0((uint64_t **)(a1 + 152), (uint64_t)v74);
      v74[3] = *(void **)(a1 + 8);
      v75 = *(_BYTE *)(a1 + 20);
      v61 = sub_1000AC910();
      v62 = v18;
      v76 = (int)(float)(sub_1000AB1D0((uint64_t)&v61, (float *)&v62 + 1) * (float)*(uint64_t *)(a1 + 8));
      v77 = 0;
      if (v13)
      {
        v78 = *(_QWORD *)&v86[7];
        v79 = *(_DWORD *)&v86[15];
        v81 = 0;
        v82 = 0;
        v80 = 0;
        v19 = v3 - v2;
        if (v3 != v2)
        {
          if (v19 < 0)
            sub_1000D02C0();
          v80 = operator new(v3 - v2);
          v81 = v80;
          v20 = (char *)v80 + 4 * (v19 >> 2);
          v82 = v20;
          memcpy(v80, v2, v3 - v2);
          v81 = v20;
        }
        v83 = v66;
        v84 = v67;
        v77 = 1;
      }
      v85 = *(unsigned int *)(a1 + 108);
      sub_1000B75C0((uint64_t *)&v70, &v65);
      v21 = v65;
      v65 = 0uLL;
      v22 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v21;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (v77)
      {
        if (v80)
        {
          v81 = v80;
          operator delete(v80);
        }
        v77 = 0;
      }
      if (v74[0])
      {
        v74[1] = v74[0];
        operator delete(v74[0]);
      }
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      if (v2)
        v28 = v13;
      else
        v28 = 0;
      if (v28)
        operator delete(v2);
      return;
    case 3:
      *(_QWORD *)&v70 = 110;
      DWORD2(v70) = *(_DWORD *)(a1 + 16);
      sub_1000AC3E0((uint64_t **)(a1 + 152), (uint64_t)&v71);
      *(_QWORD *)v86 = sub_1000AC930();
      *(_QWORD *)&v86[8] = v29;
      LODWORD(v74[0]) = sub_1000AAF28((uint64_t)v86, (unsigned int *)&v86[12]);
      *(_QWORD *)&v65 = sub_1000AC920();
      *((_QWORD *)&v65 + 1) = v30;
      WORD2(v74[0]) = sub_1000AC110((uint64_t)&v65, (_BYTE *)&v65 + 9);
      sub_1000B7DA0((uint64_t)&v70, v86);
      v31 = *(_OWORD *)v86;
      *(_OWORD *)v86 = 0uLL;
      v32 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v31;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = *(std::__shared_weak_count **)&v86[8];
      if (*(_QWORD *)&v86[8])
      {
        v36 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      return;
    case 4:
      v8 = (_QWORD *)&v70 + 1;
      *((_QWORD *)&v70 + 1) = 0;
      v71 = 0;
      *(_QWORD *)&v70 = (char *)&v70 + 8;
      v9 = *(float *)(a1 + 16);
      sub_1000AC494((uint64_t **)(a1 + 152), 0, v60);
      sub_1002EE1D8(110, (uint64_t)v60, 0, 0, 0, *(_BYTE *)(a1 + 20), v86, v9);
      v10 = (char *)&v70 + 8;
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_54;
      if (*(_BYTE *)(*((_QWORD *)&v70 + 1) + 32))
      {
        v10 = (char *)*((_QWORD *)&v70 + 1);
        while (1)
        {
          v11 = *(char **)v10;
          if (!*(_QWORD *)v10)
            break;
          v10 = *(char **)v10;
          if (!v11[32])
            goto LABEL_57;
        }
LABEL_54:
        v40 = (char *)operator new(0x38uLL);
        v40[32] = 0;
        *(_OWORD *)(v40 + 40) = *(_OWORD *)v86;
        *(_OWORD *)v86 = 0uLL;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        *((_QWORD *)v40 + 2) = v10;
        *(_QWORD *)v10 = v40;
        if (*(_QWORD *)v70)
        {
          *(_QWORD *)&v70 = *(_QWORD *)v70;
          v40 = *(char **)v10;
        }
        sub_1000E05F4(*((uint64_t **)&v70 + 1), (uint64_t *)v40);
        v71 = (char *)v71 + 1;
      }
LABEL_57:
      v41 = *(std::__shared_weak_count **)&v86[8];
      if (*(_QWORD *)&v86[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v60[0])
      {
        v60[1] = v60[0];
        operator delete(v60[0]);
      }
      v44 = *(float *)(a1 + 16);
      sub_1000AC494((uint64_t **)(a1 + 152), 1, v59);
      sub_1002EE1D8(110, (uint64_t)v59, 0, 0, 0, *(_BYTE *)(a1 + 20), v86, v44);
      v45 = (char *)*((_QWORD *)&v70 + 1);
      v46 = (char *)&v70 + 8;
      if (!*((_QWORD *)&v70 + 1))
        goto LABEL_70;
      if (!*(_BYTE *)(*((_QWORD *)&v70 + 1) + 32))
      {
        while (1)
        {
          v47 = *((_QWORD *)v45 + 1);
          if (!v47)
            break;
          v45 = (char *)*((_QWORD *)v45 + 1);
          if (*(_BYTE *)(v47 + 32))
            goto LABEL_73;
        }
        v8 = v45 + 8;
        v46 = v45;
LABEL_70:
        v48 = (char *)operator new(0x38uLL);
        v48[32] = 1;
        *(_OWORD *)(v48 + 40) = *(_OWORD *)v86;
        *(_OWORD *)v86 = 0uLL;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
        *((_QWORD *)v48 + 2) = v46;
        *v8 = v48;
        if (*(_QWORD *)v70)
          *(_QWORD *)&v70 = *(_QWORD *)v70;
        sub_1000E05F4(*((uint64_t **)&v70 + 1), (uint64_t *)v48);
        v71 = (char *)v71 + 1;
      }
LABEL_73:
      v49 = *(std::__shared_weak_count **)&v86[8];
      if (*(_QWORD *)&v86[8])
      {
        v50 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v59[0])
      {
        v59[1] = v59[0];
        operator delete(v59[0]);
      }
      sub_1002EA7B8(&v70, v86);
      v52 = *(_OWORD *)v86;
      *(_OWORD *)v86 = 0uLL;
      v53 = (std::__shared_weak_count *)a2[1];
      *(_OWORD *)a2 = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = *(std::__shared_weak_count **)&v86[8];
      if (*(_QWORD *)&v86[8])
      {
        v57 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      sub_1002EB080((uint64_t)&v70, *((_QWORD **)&v70 + 1));
      return;
    default:
      return;
  }
}

void sub_1000ABE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, char a19, char a20,uint64_t a21,char a22,char a23,int a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  uint64_t v48;
  uint64_t v49;

  sub_1000E095C(v49 - 128);
  if (__p)
    operator delete(__p);
  sub_1002EB080((uint64_t)&a33, a34);
  sub_1000E095C(v48);
  _Unwind_Resume(a1);
}

void sub_1000AC108()
{
  JUMPOUT(0x1000AC0F8);
}

BOOL sub_1000AC110(uint64_t a1, _BYTE *a2)
{
  _BOOL8 v4;
  _BOOL8 v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2 != 0;
  }
  else
  {
    sub_100216924((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003FDD70);
      v6 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_1000AC27C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t buf;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDD70);
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }
  }
  __cxa_rethrow();
}

void sub_1000AC3E0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  void *__p;
  char *v5;

  sub_1000AC494(a1, 0, (_QWORD *)a2);
  sub_1000AC494(a1, 1, &__p);
  sub_1002F1238((unint64_t *)a2, *(void **)(a2 + 8), (char *)__p, v5, (v5 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v5 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1000AC448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
  {
    operator delete(__p);
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_1000AC494(uint64_t **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int64_t v18;
  uint64_t **v19;
  int v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  int v25;
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  int *v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  int *v36;
  uint64_t **v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  _QWORD *v46;
  _QWORD *v47[2];
  int *v48;

  v6 = (char *)a1[3];
  v7 = (char *)a1[4];
  if (v6 != v7)
  {
    if (v7 - v6 == 4)
    {
      v8 = *(_DWORD *)v6;
      if (((((*(_DWORD *)v6 - 3) < 7) ^ a2) & 1) == 0)
      {
        v10 = a1 + 1;
        v9 = a1[1];
        if (v9)
        {
          while (1)
          {
            while (1)
            {
              v11 = (uint64_t **)v9;
              v12 = *((_DWORD *)v9 + 8);
              if (v8 >= v12)
                break;
              v9 = *v11;
              v10 = v11;
              if (!*v11)
                goto LABEL_11;
            }
            if (v12 >= v8)
              break;
            v9 = v11[1];
            if (!v9)
            {
              v10 = v11 + 1;
              goto LABEL_11;
            }
          }
        }
        else
        {
          v11 = a1 + 1;
LABEL_11:
          v13 = (uint64_t *)v11;
          v11 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v11 + 8) = v8;
          v11[6] = 0;
          v11[7] = 0;
          v11[5] = 0;
          *v11 = 0;
          v11[1] = 0;
          v11[2] = v13;
          *v10 = (uint64_t *)v11;
          v14 = (uint64_t *)**a1;
          v15 = (uint64_t *)v11;
          if (v14)
          {
            *a1 = v14;
            v15 = *v10;
          }
          sub_1000E05F4(a1[1], v15);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        v17 = v11[5];
        v16 = v11[6];
        v18 = (char *)v16 - (char *)v17;
        if (v16 != v17)
        {
          if (v18 < 0)
            sub_1000D02C0();
LABEL_58:
          v43 = (char *)operator new((char *)v16 - (char *)v17);
          *a3 = v43;
          a3[1] = v43;
          v44 = &v43[4 * (v18 >> 2)];
          a3[2] = v44;
          memcpy(v43, v17, v18);
          a3[1] = v44;
          return;
        }
        return;
      }
LABEL_18:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    v47[0] = 0;
    v47[1] = 0;
    v46 = v47;
    v19 = a1 + 1;
    while (1)
    {
      v20 = *(_DWORD *)v6;
      if (((((*(_DWORD *)v6 - 3) < 7) ^ a2) & 1) != 0)
        goto LABEL_22;
      v21 = *v19;
      v22 = a1 + 1;
      v23 = a1 + 1;
      if (*v19)
      {
        v24 = *v19;
        while (1)
        {
          while (1)
          {
            v23 = (uint64_t **)v24;
            v25 = *((_DWORD *)v24 + 8);
            if (v20 >= v25)
              break;
            v24 = *v23;
            v22 = v23;
            if (!*v23)
              goto LABEL_31;
          }
          if (v25 >= v20)
            break;
          v24 = v23[1];
          if (!v24)
          {
            v22 = v23 + 1;
            goto LABEL_31;
          }
        }
        v29 = (int *)v23[5];
        v30 = a1 + 1;
        v31 = a1 + 1;
        if (v21)
          goto LABEL_38;
      }
      else
      {
LABEL_31:
        v26 = operator new(0x40uLL);
        *((_DWORD *)v26 + 8) = v20;
        *((_QWORD *)v26 + 6) = 0;
        *((_QWORD *)v26 + 7) = 0;
        *((_QWORD *)v26 + 5) = 0;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = v23;
        *v22 = (uint64_t *)v26;
        v27 = (uint64_t *)**a1;
        v28 = (uint64_t *)v26;
        if (v27)
        {
          *a1 = v27;
          v28 = *v22;
        }
        sub_1000E05F4(a1[1], v28);
        v21 = a1[1];
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v29 = (int *)*((_QWORD *)v26 + 5);
        v30 = a1 + 1;
        v31 = a1 + 1;
        if (v21)
        {
          while (1)
          {
LABEL_38:
            while (1)
            {
              v31 = (uint64_t **)v21;
              v32 = *((_DWORD *)v21 + 8);
              if (v20 >= v32)
                break;
              v21 = *v31;
              v30 = v31;
              if (!*v31)
                goto LABEL_42;
            }
            if (v32 >= v20)
              break;
            v21 = v31[1];
            if (!v21)
            {
              v30 = v31 + 1;
              goto LABEL_42;
            }
          }
          v33 = v31;
          goto LABEL_21;
        }
      }
LABEL_42:
      v33 = operator new(0x40uLL);
      *((_DWORD *)v33 + 8) = v20;
      *((_QWORD *)v33 + 6) = 0;
      *((_QWORD *)v33 + 7) = 0;
      *((_QWORD *)v33 + 5) = 0;
      *(_QWORD *)v33 = 0;
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = v31;
      *v30 = (uint64_t *)v33;
      v34 = (uint64_t *)**a1;
      v35 = (uint64_t *)v33;
      if (v34)
      {
        *a1 = v34;
        v35 = *v30;
      }
      sub_1000E05F4(a1[1], v35);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_21:
      sub_1002F15E0(v29, *((int **)v33 + 6), (int *)&v46, (uint64_t *)v47, &v48);
LABEL_22:
      v6 += 4;
      if (v6 == v7)
      {
        sub_1002F18A4(a3, v46, v47);
        sub_10004AAA0((uint64_t)&v46, v47[0]);
        return;
      }
    }
  }
  if ((a2 & 1) != 0)
    goto LABEL_18;
  v37 = a1 + 1;
  v36 = (int *)a1[1];
  if (v36)
  {
    while (1)
    {
      while (1)
      {
        v38 = v36;
        v39 = v36[8];
        if (v39 < 1)
          break;
        v36 = (int *)*v38;
        v37 = (uint64_t **)v38;
        if (!*v38)
          goto LABEL_53;
      }
      if ((v39 & 0x80000000) == 0)
        break;
      v36 = (int *)v38[1];
      if (!v36)
      {
        v37 = (uint64_t **)(v38 + 1);
        goto LABEL_53;
      }
    }
  }
  else
  {
    v38 = a1 + 1;
LABEL_53:
    v40 = v38;
    v38 = operator new(0x40uLL);
    *((_DWORD *)v38 + 8) = 0;
    v38[6] = 0;
    v38[7] = 0;
    v38[5] = 0;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = v40;
    *v37 = v38;
    v41 = (uint64_t *)**a1;
    v42 = v38;
    if (v41)
    {
      *a1 = v41;
      v42 = *v37;
    }
    sub_1000E05F4(a1[1], v42);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v17 = (uint64_t *)v38[5];
  v16 = (uint64_t *)v38[6];
  v18 = (char *)v16 - (char *)v17;
  if (v16 != v17)
  {
    if (v18 < 0)
      sub_1000D02C0();
    goto LABEL_58;
  }
}

void sub_1000AC890(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AC8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10004AAA0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_1000AC8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10004AAA0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

const char *sub_1000AC8E0()
{
  return "DYNAMIC_SCAN_STRATEGY_BIAS_TOWARDS_RECENT_DENSE_CHANNELS";
}

const char *sub_1000AC8F0()
{
  return "DYNAMIC_SCAN_STRATEGY_BIAS_TOWARDS_STRONG_CHANNELS";
}

const char *sub_1000AC900()
{
  return "DYNAMIC_SCAN_STRATEGY_INITIALIZE_OPTIMIZED_TTFF";
}

const char *sub_1000AC910()
{
  return "DYNAMIC_SCAN_STRATEGY_CHANNEL_HISTORY";
}

const char *sub_1000AC920()
{
  return "SCAN_STRATEGY_OPTIMIZED_ALL_CHANNELS";
}

const char *sub_1000AC930()
{
  return "SCAN_STRATEGY_OPTIMIZED";
}

void sub_1000AC940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _QWORD v36[4];
  __int128 *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v39 = a2;
  sub_1000B71EC(*(_QWORD *)(a1 + 296), a2, &v37);
  sub_1000B6E04(*(_QWORD *)(a1 + 296), a2, (uint64_t)v36);
  v4 = *(_QWORD *)(a1 + 2528);
  if (v4)
  {
    sub_1000B88E4(v4);
    sub_1000B84F8(*(_QWORD *)(a1 + 2528), (uint64_t)&v42);
    v5 = (uint64_t)v37;
    if (*((_BYTE *)v37 + 24))
    {
      if ((_BYTE)v42)
      {
        v6 = v46;
        v7 = v45;
        v8 = v44;
        v37[2] = v43;
        *(_OWORD *)(v5 + 48) = v8;
        *(_OWORD *)(v5 + 64) = v7;
        *(_QWORD *)(v5 + 80) = v6;
        if (!*(_BYTE *)(a1 + 688))
          goto LABEL_12;
LABEL_11:
        *(double *)(a1 + 792) = sub_1000B75B8(*(double *)(v5 + 8), 0.25) + *(double *)(a1 + 792);
        v5 = (uint64_t)v37;
        goto LABEL_12;
      }
      *((_BYTE *)v37 + 24) = 0;
      if (*(_BYTE *)(a1 + 688))
        goto LABEL_11;
    }
    else
    {
      if ((_BYTE)v42)
      {
        v9 = v46;
        v10 = v45;
        v11 = v44;
        v37[2] = v43;
        *(_OWORD *)(v5 + 48) = v11;
        *(_OWORD *)(v5 + 64) = v10;
        *(_QWORD *)(v5 + 80) = v9;
        *(_BYTE *)(v5 + 24) = 1;
      }
      if (*(_BYTE *)(a1 + 688))
        goto LABEL_11;
    }
  }
  else
  {
    v5 = (uint64_t)v37;
    if (*(_BYTE *)(a1 + 688))
      goto LABEL_11;
  }
LABEL_12:
  sub_1000B7518(a1 + 896, v5);
  sub_1000B2914(*(_QWORD **)(a1 + 120), v39);
  sub_1000B53D4(*(_QWORD *)(a1 + 1520), &v39);
  if (*(_BYTE *)(a1 + 1536))
  {
    v12 = *(void **)(a1 + 1568);
    if (v12)
    {
      *(_QWORD *)(a1 + 1576) = v12;
      operator delete(v12);
    }
    v13 = *(void **)(a1 + 1544);
    if (v13)
    {
      *(_QWORD *)(a1 + 1552) = v13;
      operator delete(v13);
    }
    *(_BYTE *)(a1 + 1536) = 0;
  }
  v42 = 0;
  *(_QWORD *)&v43 = 0;
  v40[0] = off_1003FE4B8;
  v40[1] = a1;
  v40[2] = v39;
  v41 = v40;
  sub_1000B841C((_BYTE *)(a1 + 304), v39, (uint64_t)&v42, (uint64_t)v40, *(void (****)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 176), a1 + 2184);
  v14 = v41;
  if (v41 == v40)
  {
    v15 = 4;
    v14 = v40;
    goto LABEL_22;
  }
  if (v41)
  {
    v15 = 5;
LABEL_22:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  v16 = (std::__shared_weak_count *)v43;
  if ((_QWORD)v43)
  {
    v17 = (unint64_t *)(v43 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (!sub_1000B5690(v36))
    sub_1000B5584(*(_QWORD **)(a1 + 176), v36, (uint64_t)v37);
  v19 = *(_QWORD *)(a1 + 176);
  v20 = v39;
  sub_1000ACD60(a1, v39, &v42);
  v21 = v42;
  v22 = sub_10008E4E4(*(_QWORD *)(a1 + 152));
  sub_1000B5CAC(v19, v20, (uint64_t)v21, v22, a1 + 2032);
  v23 = (std::__shared_weak_count *)v43;
  if ((_QWORD)v43)
  {
    v24 = (unint64_t *)(v43 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (sub_1000B56A0(*(_QWORD **)(a1 + 176), (uint64_t)v37))
    *(_BYTE *)(a1 + 304) = 1;
  v26 = (uint64_t)v37;
  v27 = *(_QWORD *)(a1 + 272);
  if (v27 >= *(_QWORD *)(a1 + 280))
  {
    v32 = sub_10021E374((void **)(a1 + 264), (uint64_t)v37);
  }
  else
  {
    v28 = *v37;
    *(_QWORD *)(v27 + 16) = *((_QWORD *)v37 + 2);
    *(_OWORD *)v27 = v28;
    *(_BYTE *)(v27 + 24) = 0;
    if (*(_BYTE *)(v26 + 24))
    {
      v29 = *(_OWORD *)(v26 + 32);
      v30 = *(_OWORD *)(v26 + 48);
      v31 = *(_OWORD *)(v26 + 64);
      *(_QWORD *)(v27 + 80) = *(_QWORD *)(v26 + 80);
      *(_OWORD *)(v27 + 48) = v30;
      *(_OWORD *)(v27 + 64) = v31;
      *(_OWORD *)(v27 + 32) = v29;
      *(_BYTE *)(v27 + 24) = 1;
    }
    v32 = (char *)(v27 + 88);
  }
  *(_QWORD *)(a1 + 272) = v32;
  sub_1000B65D0(a1, v39);
  v33 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1000ACCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ACCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ACCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list v5;
  va_list v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list v17;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, va_list);
  v7 = v17;
  if (v17 == v5)
  {
    v8 = 4;
    va_copy(v7, va1);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_6:
  sub_1000E095C((uint64_t)va2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ACD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_1000E095C((uint64_t)va1);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ACD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000ACD60(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  char *v83;
  char *v84;
  void *v85;
  uint64_t v86;
  int v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  void *v113;
  char *v114;
  void *v115;
  void *v116;
  void *v117;
  char *v118;
  void *__p;
  void *v120;
  void *v121;
  void *v122;
  char *v123;
  void *v124;
  void *v125;
  char *v126;
  char *v127;
  char *v128;
  void *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char v133[9];

  if (*(_BYTE *)(a1 + 2160))
    v5 = *(_QWORD *)(a1 + 2168) == a2;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = a2;
    sub_1000AD878(a1);
    v7 = *(_QWORD *)(a1 + 24);
    v112 = (uint64_t *)(a1 + 1544);
    v8 = nullsub_10(a1 + 1544);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(&v131, v7, v8);
    v9 = *(_DWORD *)(a1 + 48);
    if (v9 == 1)
    {
      v14 = v131;
      v13 = v132;
      if (v131 != v132)
      {
        v15 = (_QWORD **)(a1 + 1944);
        v16 = *(_QWORD **)(a1 + 1952);
        do
        {
          while (1)
          {
            v17 = *(_QWORD *)v14;
            v18 = v16;
            if (*v15 != v16)
            {
              v18 = *v15;
              while (*v18 != v17)
              {
                v18 += 2;
                if (v18 == v16)
                {
                  v18 = v16;
                  break;
                }
              }
            }
            if (v18 == v16)
              break;
            v14 += 16;
            if (v14 == v13)
              goto LABEL_29;
          }
          if ((unint64_t)v16 >= *(_QWORD *)(a1 + 1960))
          {
            v16 = sub_1001E3DB8(a1 + 1944, (__int128 *)v14);
          }
          else
          {
            *v16 = v17;
            v19 = *((_QWORD *)v14 + 1);
            v16[1] = v19;
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v16 += 2;
          }
          *(_QWORD *)(a1 + 1952) = v16;
          v14 += 16;
        }
        while (v14 != v13);
      }
    }
    else if (!v9 && (char **)(a1 + 1944) != &v131)
    {
      sub_10021F6C8(a1 + 1944, v131, v132, (v132 - v131) >> 4);
    }
LABEL_29:
    *a3 = 0;
    a3[1] = 0;
    if ((sub_1000AD9B0(*(_QWORD *)(a1 + 248)) & 1) != 0)
    {
      v110 = v6;
      v111 = a3;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 120) + 16))(&v129);
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v22 = (uint64_t)v129;
      v23 = v130;
      if (v129 == (void *)v130)
        goto LABEL_107;
      v24 = 0;
      while (1)
      {
        v25 = *(_DWORD *)(v22 + 32);
        if (v25 == v25 >> 31)
        {
          v26 = *(double *)(v22 + 72);
        }
        else
        {
          v27 = v25 >= 0 ? v22 + 40 : *(_QWORD *)(v22 + 40);
          v26 = (double)*(int *)(v27 + 92);
        }
        v28 = v127;
        if (!sub_10021930C(v26))
          break;
        if (v127 >= v128)
        {
          v29 = v126;
          v30 = (v127 - v126) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
            sub_1000D02C0();
          v32 = v128 - v126;
          if ((v128 - v126) >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 61)
              sub_1000CDEB8();
            v34 = operator new(8 * v33);
            v35 = &v34[8 * v30];
            *(_QWORD *)v35 = 0;
            v36 = (uint64_t)(v35 + 8);
            if (v28 == v29)
              goto LABEL_71;
LABEL_65:
            v45 = v28 - 8 - v29;
            if (v45 < 0x58)
              goto LABEL_194;
            if ((unint64_t)(v29 - v34) < 0x20)
              goto LABEL_194;
            v46 = (v45 >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v28[-v47];
            v35 -= v47;
            v49 = &v34[8 * v30 - 16];
            v50 = v28 - 16;
            v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 4;
            }
            while (v51);
            v28 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_194:
              do
              {
                v53 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v35 - 1) = v53;
                v35 -= 8;
              }
              while (v28 != v29);
            }
          }
          else
          {
            v34 = 0;
            v35 = (char *)(8 * v30);
            *(_QWORD *)(8 * v30) = 0;
            v36 = 8 * v30 + 8;
            if (v28 != v29)
              goto LABEL_65;
          }
LABEL_71:
          v126 = v35;
          v127 = (char *)v36;
          v128 = &v34[8 * v33];
          if (v29)
            operator delete(v29);
          v127 = (char *)v36;
          goto LABEL_32;
        }
        *(_QWORD *)v127 = 0;
        v127 = v28 + 8;
LABEL_32:
        v22 += 208;
        if (v22 == v23)
        {
          if (v24)
          {
            v6 = v110;
            sub_10004525C(&v122, (uint64_t)&v126, (uint64_t *)&v129, v110);
            a3 = (_QWORD **)v111;
            sub_100043C90(&v113, (uint64_t *)&v122);
            sub_100045E90((uint64_t)&v117, (uint64_t)&v113, 0, 1.0);
            v70 = operator new(0x108uLL);
            v70[1] = 0;
            v70[2] = 0;
            *v70 = off_1003FE628;
            sub_10021FB20((uint64_t)v133, (uint64_t)(v70 + 3), (uint64_t)&v131, (uint64_t)&v117, (uint64_t *)(a1 + 2216));
            *v111 = v70 + 3;
            v111[1] = v70;
            if (v120)
            {
              v121 = v120;
              operator delete(v120);
            }
            v71 = (char *)v117;
            if (v117)
            {
              v72 = v118;
              v73 = v117;
              if (v118 != v117)
              {
                do
                {
                  v75 = *((_DWORD *)v72 - 44);
                  if (v75 == v75 >> 31)
                  {
                    if (*(v72 - 128))
                      *(v72 - 128) = 0;
                  }
                  else
                  {
                    v74 = *((_QWORD *)v72 - 21);
                    if (v75 < 0)
                    {
                      if (v74)
                        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
                    }
                    else
                    {
                      (*(void (**)(char *))v74)(v72 - 168);
                    }
                  }
                  v72 -= 208;
                }
                while (v72 != v71);
                v73 = v117;
              }
              v118 = v71;
              operator delete(v73);
            }
            if (v115)
            {
              v116 = v115;
              operator delete(v115);
            }
            v83 = (char *)v113;
            if (v113)
            {
              v84 = v114;
              v85 = v113;
              if (v114 != v113)
              {
                do
                {
                  v87 = *((_DWORD *)v84 - 44);
                  if (v87 == v87 >> 31)
                  {
                    if (*(v84 - 128))
                      *(v84 - 128) = 0;
                  }
                  else
                  {
                    v86 = *((_QWORD *)v84 - 21);
                    if (v87 < 0)
                    {
                      if (v86)
                        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
                    }
                    else
                    {
                      (*(void (**)(char *))v86)(v84 - 168);
                    }
                  }
                  v84 -= 208;
                }
                while (v84 != v83);
                v85 = v113;
              }
              v114 = v83;
              operator delete(v85);
            }
            if (v124)
            {
              v125 = v124;
              operator delete(v124);
            }
            v88 = (char *)v122;
            if (v122)
            {
              v89 = v123;
              v78 = v122;
              if (v123 != v122)
              {
                do
                {
                  v91 = *((_DWORD *)v89 - 44);
                  if (v91 == v91 >> 31)
                  {
                    if (*(v89 - 128))
                      *(v89 - 128) = 0;
                  }
                  else
                  {
                    v90 = *((_QWORD *)v89 - 21);
                    if (v91 < 0)
                    {
                      if (v90)
                        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
                    }
                    else
                    {
                      (*(void (**)(char *))v90)(v89 - 168);
                    }
                  }
                  v89 -= 208;
                }
                while (v89 != v88);
                v78 = v122;
              }
              v123 = v88;
              goto LABEL_148;
            }
            goto LABEL_149;
          }
LABEL_107:
          sub_1000AFC34(v112, (uint64_t)&v117);
          a3 = (_QWORD **)v111;
          v76 = operator new(0x108uLL);
          v76[1] = 0;
          v76[2] = 0;
          *v76 = off_1003FE628;
          sub_10021FA4C((uint64_t)&v122, (uint64_t)(v76 + 3), (uint64_t)&v131, (uint64_t)&v117);
          *v111 = v76 + 3;
          v111[1] = v76;
          v77 = __p;
          v6 = v110;
          if (__p)
          {
            do
            {
              v79 = v77;
              v77 = (_QWORD *)*v77;
              v80 = (std::__shared_weak_count *)v79[3];
              if (v80)
              {
                p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(p_shared_owners);
                while (__stlxr(v82 - 1, p_shared_owners));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              operator delete(v79);
            }
            while (v77);
          }
          v78 = v117;
          v117 = 0;
          if (v78)
LABEL_148:
            operator delete(v78);
LABEL_149:
          if (v126)
          {
            v127 = v126;
            operator delete(v126);
          }
          v92 = (uint64_t)v129;
          if (v129)
          {
            v93 = v130;
            v65 = v129;
            if ((void *)v130 != v129)
            {
              do
              {
                v95 = *(_DWORD *)(v93 - 176);
                if (v95 == v95 >> 31)
                {
                  if (*(_BYTE *)(v93 - 128))
                    *(_BYTE *)(v93 - 128) = 0;
                }
                else
                {
                  v94 = *(_QWORD *)(v93 - 168);
                  if (v95 < 0)
                  {
                    if (v94)
                      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
                  }
                  else
                  {
                    (*(void (**)(uint64_t))v94)(v93 - 168);
                  }
                }
                v93 -= 208;
              }
              while (v93 != v92);
              v65 = v129;
            }
            v130 = v92;
            goto LABEL_164;
          }
          goto LABEL_165;
        }
      }
      if (v127 < v128)
      {
        *(_QWORD *)v127 = 0x3FF0000000000000;
        v37 = (uint64_t)(v28 + 8);
LABEL_83:
        v127 = (char *)v37;
        ++v24;
        goto LABEL_32;
      }
      v38 = v126;
      v39 = (v127 - v126) >> 3;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 61)
        sub_1000D02C0();
      v41 = v128 - v126;
      if ((v128 - v126) >> 2 > v40)
        v40 = v41 >> 2;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 61)
          sub_1000CDEB8();
        v43 = operator new(8 * v42);
        v44 = &v43[8 * v39];
        *(_QWORD *)v44 = 0x3FF0000000000000;
        v37 = (uint64_t)(v44 + 8);
        if (v28 == v38)
          goto LABEL_81;
      }
      else
      {
        v43 = 0;
        v44 = (char *)(8 * v39);
        *(_QWORD *)(8 * v39) = 0x3FF0000000000000;
        v37 = 8 * v39 + 8;
        if (v28 == v38)
        {
LABEL_81:
          v126 = v44;
          v127 = (char *)v37;
          v128 = &v43[8 * v42];
          if (v38)
            operator delete(v38);
          goto LABEL_83;
        }
      }
      v54 = v28 - 8 - v38;
      if (v54 < 0x58)
        goto LABEL_195;
      if ((unint64_t)(v38 - v43) < 0x20)
        goto LABEL_195;
      v55 = (v54 >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v57 = &v28[-v56];
      v44 -= v56;
      v58 = &v43[8 * v39 - 16];
      v59 = v28 - 16;
      v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      v28 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_195:
        do
        {
          v62 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v44 - 1) = v62;
          v44 -= 8;
        }
        while (v28 != v38);
      }
      goto LABEL_81;
    }
    sub_1000AFC34(v112, (uint64_t)&v117);
    v63 = operator new(0x108uLL);
    v63[1] = 0;
    v63[2] = 0;
    *v63 = off_1003FE628;
    sub_10021FA4C((uint64_t)&v122, (uint64_t)(v63 + 3), (uint64_t)&v131, (uint64_t)&v117);
    *a3 = v63 + 3;
    a3[1] = v63;
    v64 = __p;
    if (__p)
    {
      do
      {
        v66 = v64;
        v64 = (_QWORD *)*v64;
        v67 = (std::__shared_weak_count *)v66[3];
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        operator delete(v66);
      }
      while (v64);
    }
    v65 = v117;
    v117 = 0;
    if (v65)
LABEL_164:
      operator delete(v65);
LABEL_165:
    v96 = (uint64_t)*a3;
    v97 = sub_1000AF91C(*a3);
    sub_1000B0094((_QWORD **)(a1 + 168), v97);
    v98 = a3[1];
    if (v98)
    {
      v99 = v98 + 1;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    *(_QWORD *)(a1 + 2144) = v96;
    v101 = *(std::__shared_weak_count **)(a1 + 2152);
    *(_QWORD *)(a1 + 2152) = v98;
    if (!v101)
      goto LABEL_196;
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
      if (*(_BYTE *)(a1 + 2160))
      {
LABEL_174:
        *(_QWORD *)(a1 + 2168) = v6;
        v104 = v131;
        if (v131)
        {
          v105 = v132;
          v106 = v131;
          if (v132 != v131)
          {
            do
            {
              v107 = (std::__shared_weak_count *)*((_QWORD *)v105 - 1);
              if (v107)
              {
                v108 = (unint64_t *)&v107->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              v105 -= 16;
            }
            while (v105 != v104);
            v106 = v131;
          }
          v132 = v104;
          operator delete(v106);
        }
        return;
      }
    }
    else
    {
LABEL_196:
      if (*(_BYTE *)(a1 + 2160))
        goto LABEL_174;
    }
    *(_BYTE *)(a1 + 2160) = 1;
    goto LABEL_174;
  }
  v10 = *(_QWORD **)(a1 + 2152);
  *a3 = *(_QWORD **)(a1 + 2144);
  a3[1] = v10;
  if (v10)
  {
    v11 = v10 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
}

void sub_1000AD734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  void *v32;
  void *v33;

  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v32);
  sub_1002191E8(&a20);
  sub_1002191E8(&a13);
  sub_1002191E8(&a29);
  v33 = *(void **)(v30 - 168);
  if (v33)
  {
    *(_QWORD *)(v30 - 160) = v33;
    operator delete(v33);
  }
  sub_10021908C((void **)(v30 - 144));
  sub_1000E095C(a11);
  sub_1000F7D3C((void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void sub_1000AD878(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *__p[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 1536))
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(__p);
    v2 = (void **)(a1 + 1544);
    if (*(_BYTE *)(a1 + 1536))
    {
      v3 = *v2;
      if (*v2)
      {
        *(_QWORD *)(a1 + 1552) = v3;
        operator delete(v3);
      }
      *(_OWORD *)v2 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 1560) = v7;
      __p[1] = 0;
      v7 = 0;
      __p[0] = 0;
      v4 = *(void **)(a1 + 1568);
      if (v4)
      {
        *(_QWORD *)(a1 + 1576) = v4;
        operator delete(v4);
      }
      *(_OWORD *)(a1 + 1568) = v8;
      *(_QWORD *)(a1 + 1584) = v9;
      v9 = 0;
      v8 = 0uLL;
      v5 = __p[0];
      if (!__p[0])
        goto LABEL_9;
    }
    else
    {
      *(_OWORD *)v2 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 1560) = v7;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)(a1 + 1568) = v8;
      *(_QWORD *)(a1 + 1584) = v9;
      v7 = 0;
      v8 = 0uLL;
      v9 = 0;
      *(_BYTE *)(a1 + 1536) = 1;
      v5 = __p[0];
      if (!__p[0])
        goto LABEL_9;
    }
    __p[1] = v5;
    operator delete(v5);
LABEL_9:
    sub_1000B23A0(a1, a1 + 1544);
  }
}

uint64_t sub_1000AD9B0(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 192);
}

void sub_1000AD9BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, int *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  uint64_t *v55;
  uint64_t **v56;
  void *v57;
  uint64_t **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  __int128 v77;
  int v78;
  char *v79;
  double v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  _OWORD *v91;
  char *v92;
  unint64_t v93;
  __int128 v94;
  __int16 v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  _QWORD *v100;
  int v101;
  int v102;
  int v103;
  char *v104;
  std::string::value_type v105;
  __int16 v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  _OWORD *v123;
  char *v124;
  unint64_t v125;
  __int128 v126;
  __int16 v127;
  char *v128;
  char *v129;
  void *v130;
  uint64_t v131;
  int v132;
  char *v133;
  char *v134;
  void *v135;
  uint64_t v136;
  int v137;
  _BOOL4 v138;
  NSObject *v139;
  _QWORD *v140;
  int v141;
  int v142;
  int v143;
  NSObject *v144;
  _QWORD *v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  int64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  _OWORD *v161;
  __int128 *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  char *v174;
  char *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  __int128 v180;
  char *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  char *v194;
  char *v195;
  void *v196;
  uint64_t v197;
  int v198;
  char *v199;
  char *v200;
  uint64_t v201;
  int v202;
  NSObject *v203;
  _QWORD *v204;
  _QWORD *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  void *v209;
  void *v210;
  _QWORD *v211;
  std::__shared_weak_count *v212;
  unint64_t *p_shared_owners;
  unint64_t v214;
  uint64_t v215;
  uint64_t *v218;
  _QWORD *v224;
  uint64_t *v225;
  _QWORD *v226;
  uint64_t v227;
  void **v228;
  char *v229;
  void *v230;
  char *v231;
  void *v232;
  char *v233;
  void *v234;
  char *v235;
  void *v236;
  char *v237;
  void *v238[2];
  void *v239[2];
  int v240;
  void *v241;
  char *v242;
  char *v243;
  void *v244;
  char *v245;
  char *v246;
  void *v247;
  uint64_t *v248;
  char *v249;
  void *v250;
  char *v251;
  void *v252;
  unint64_t v253;
  void *v254;
  char *v255;
  void *v256;
  void *v257[5];
  uint8_t buf[4];
  _QWORD *v259;
  __int16 v260;
  _BYTE v261[10];
  uint64_t v262;
  _QWORD v263[3];
  _QWORD *v264;
  _BYTE __p[144];
  __int128 v266;
  char v267;

  if (a10)
  {
    *(_QWORD *)&__p[24] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)__p = off_1003F9858;
    *(_QWORD *)&__p[8] = &__p[16];
    memset(&__p[64], 0, 80);
    v266 = 0u;
    v267 = 0;
    *(_QWORD *)&__p[32] = off_1003F9A88;
    memset(&__p[40], 0, 17);
    sub_10019EA14(a10, (uint64_t)__p);
    sub_1000CACE8(__p);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a2 + 16))(&v254);
  sub_1000AF214(*(int8x8_t **)(a1 + 104), (uint64_t *)&v254, (uint64_t)__p);
  sub_1000AF574(v257, __p);
  v215 = a9;
  sub_10021D8D0((int)__p, *(_QWORD **)&__p[16]);
  v12 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v12)
    operator delete(v12);
  v13 = (char *)v254;
  if (v254)
  {
    v14 = v255;
    v15 = v254;
    if (v255 != v254)
    {
      do
      {
        v17 = *((_DWORD *)v14 - 44);
        if (v17 == v17 >> 31)
        {
          if (*(v14 - 128))
            *(v14 - 128) = 0;
        }
        else
        {
          v16 = *((_QWORD *)v14 - 21);
          if (v17 < 0)
          {
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          else
          {
            (*(void (**)(char *))v16)(v14 - 168);
          }
        }
        v14 -= 208;
      }
      while (v14 != v13);
      v15 = v254;
    }
    v255 = v13;
    operator delete(v15);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a3 + 16))(&v250);
  sub_1000AF214(*(int8x8_t **)(a1 + 104), (uint64_t *)&v250, (uint64_t)__p);
  sub_1000AF574(&v254, __p);
  sub_10021D8D0((int)__p, *(_QWORD **)&__p[16]);
  v18 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v18)
    operator delete(v18);
  v19 = (char *)v250;
  if (v250)
  {
    v20 = v251;
    v21 = v250;
    if (v251 != v250)
    {
      do
      {
        v23 = *((_DWORD *)v20 - 44);
        if (v23 == v23 >> 31)
        {
          if (*(v20 - 128))
            *(v20 - 128) = 0;
        }
        else
        {
          v22 = *((_QWORD *)v20 - 21);
          if (v23 < 0)
          {
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          else
          {
            (*(void (**)(char *))v22)(v20 - 168);
          }
        }
        v20 -= 208;
      }
      while (v20 != v19);
      v21 = v250;
    }
    v251 = v19;
    operator delete(v21);
  }
  v24 = *(_QWORD *)(a1 + 104);
  v263[0] = off_1003FFCC0;
  v263[1] = v257;
  v263[2] = &v254;
  v264 = v263;
  sub_1000AFA30(v24, (uint64_t)v263, (uint64_t)&v250);
  v25 = v264;
  if (v264 == v263)
  {
    v26 = 4;
    v25 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_38;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_38:
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v27 = v253;
  if (v253)
  {
    if (v253 >> 61)
      sub_1000D02C0();
    v28 = (char *)operator new(8 * v253);
    v29 = &v28[8 * v27];
    v247 = v28;
    v248 = (uint64_t *)v28;
    v249 = v29;
    v30 = v252;
    if (v252)
      goto LABEL_41;
  }
  else
  {
    v29 = 0;
    v28 = 0;
    v30 = v252;
    if (v252)
    {
LABEL_41:
      v31 = v28;
      while (1)
      {
        while (v28 < v29)
        {
          *(_QWORD *)v28 = v30[4];
          v28 += 8;
          v30 = (_QWORD *)*v30;
          if (!v30)
            goto LABEL_73;
        }
        v32 = (v28 - v31) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
        {
          v248 = (uint64_t *)v28;
          v249 = v29;
          v247 = v31;
          sub_1000D02C0();
        }
        if ((v29 - v31) >> 2 > v33)
          v33 = (v29 - v31) >> 2;
        if ((unint64_t)(v29 - v31) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        if (v34)
        {
          if (v34 >> 61)
          {
            v249 = v29;
            v247 = v31;
            sub_1000CDEB8();
          }
          v35 = operator new(8 * v34);
          v36 = &v35[8 * v32];
          *(_QWORD *)v36 = v30[4];
          v37 = (uint64_t)(v36 + 8);
          if (v28 != v31)
          {
LABEL_53:
            v38 = v28 - 8 - v31;
            if (v38 < 0x168)
            {
              v39 = v28;
              goto LABEL_55;
            }
            if (&v35[v28 - v31 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v35[v28 - v31 - 8])
            {
              v39 = v28;
              goto LABEL_55;
            }
            if (&v28[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8)
            {
              v39 = v28;
              goto LABEL_55;
            }
            if ((unint64_t)(v31 - v35) < 0x20)
            {
              v39 = v28;
              goto LABEL_55;
            }
            v41 = (v38 >> 3) + 1;
            v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v28[-v42];
            v36 -= v42;
            v43 = &v35[8 * v32 - 16];
            v44 = (__int128 *)(v28 - 16);
            v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v46 = *v44;
              *(v43 - 1) = *(v44 - 1);
              *v43 = v46;
              v43 -= 2;
              v44 -= 2;
              v45 -= 4;
            }
            while (v45);
            if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_55:
                v40 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v36 - 1) = v40;
                v36 -= 8;
              }
              while (v39 != v31);
            }
            v28 = v31;
            v31 = v36;
            v29 = &v35[8 * v34];
            if (!v28)
              goto LABEL_61;
LABEL_60:
            operator delete(v28);
            goto LABEL_61;
          }
        }
        else
        {
          v35 = 0;
          v36 = (char *)(8 * v32);
          *(_QWORD *)(8 * v32) = v30[4];
          v37 = 8 * v32 + 8;
          if (v28 != v31)
            goto LABEL_53;
        }
        v31 = v36;
        v29 = &v35[8 * v34];
        if (v28)
          goto LABEL_60;
LABEL_61:
        v28 = (char *)v37;
        v30 = (_QWORD *)*v30;
        if (!v30)
        {
LABEL_73:
          v248 = (uint64_t *)v28;
          v249 = v29;
          v247 = v31;
          goto LABEL_76;
        }
      }
    }
  }
  v31 = v28;
LABEL_76:
  v244 = 0;
  v245 = 0;
  v246 = 0;
  v241 = 0;
  v242 = 0;
  v243 = 0;
  v47 = v28 - v31;
  v48 = a10;
  if (v28 != v31)
  {
    if (v47 < 0)
      sub_1000D02C0();
    v49 = v47 >> 3;
    v244 = operator new(v28 - v31);
    v245 = (char *)v244;
    v246 = (char *)v244 + 8 * (v47 >> 3);
    if ((unint64_t)v47 >= 0xCCCCCCCCCCCCCC9)
      sub_1000D02C0();
    v241 = operator new(160 * v49);
    v242 = (char *)v241;
    v243 = (char *)v241 + 160 * v49;
  }
  if (v28 == v31)
  {
    *(_OWORD *)v238 = 0u;
    *(_OWORD *)v239 = 0u;
    v240 = 1065353216;
  }
  else
  {
    v50 = 0.0;
    v51 = INFINITY;
    v52 = INFINITY;
    v53 = 0.0;
    do
    {
      v54 = *(double **)v31;
      if (!sub_10007C4C8(*(_QWORD *)v31))
      {
        if (v54[209] < v52)
          v52 = v54[209];
        if (v50 < v54[208])
          v50 = v54[208];
        if (v54[218] < v51)
          v51 = v54[218];
        if (v53 < v54[217])
          v53 = v54[217];
      }
      v31 += 8;
    }
    while (v31 != v28);
    v55 = (uint64_t *)v247;
    *(_OWORD *)v238 = 0u;
    *(_OWORD *)v239 = 0u;
    v240 = 1065353216;
    v218 = v248;
    if (v247 != v248)
    {
      v56 = (uint64_t **)(a10 + 8);
      v226 = (_QWORD *)(a10 + 88);
      do
      {
        v225 = v55;
        v227 = *v55;
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a2 + 16))(&v236);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a3 + 16))(&v234);
        if (v48)
        {
          *(_QWORD *)__p = off_1003F9838;
          memset(&__p[8], 0, 136);
          LOWORD(v266) = v266 & 0xF800;
          sub_100265A1C(v56, (const void **)(v227 + 8), v227 + 8, (uint64_t)__p);
          sub_10019E7F4((uint64_t)__p);
          *(_QWORD *)__p = v227 + 8;
          v58 = sub_10019FAFC(v56, (const void **)(v227 + 8), (uint64_t)&unk_100395958, (__int128 **)__p);
          v224 = v58 + 7;
          sub_1000719AC((uint64_t)(v58 + 7), (const std::string *)(v227 + 8));
          v59 = (char *)v236;
          v229 = v237;
          if (v236 == v237)
            goto LABEL_189;
          v228 = (void **)(v58 + 11);
          while (1)
          {
            v61 = a1;
            v62 = sub_1000411C0(v238, (uint64_t)v59);
            if (v62)
            {
              v63 = *((_DWORD *)v62 + 12);
              v65 = (char *)v58[12];
              v64 = v58[13];
              if (v65 >= (char *)v64)
              {
                v66 = (char *)*v228;
                v67 = v65 - (_BYTE *)*v228;
                if (v67 <= -3)
                  goto LABEL_334;
                v68 = v67 >> 1;
                v69 = (char *)v64 - v66;
                if (v69 <= (v67 >> 1) + 1)
                  v70 = v68 + 1;
                else
                  v70 = v69;
                if (v69 >= 0x7FFFFFFFFFFFFFFELL)
                  v71 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v71 = v70;
                if (v71)
                {
                  if (v71 < 0)
                    goto LABEL_335;
                  v72 = operator new(2 * v71);
                  v73 = (uint64_t *)&v72[2 * v68];
                  *(_WORD *)v73 = v63;
                  v60 = (uint64_t)v73 + 2;
                  if (v65 != v66)
                  {
LABEL_115:
                    v74 = v65 - 2 - v66;
                    if (v74 < 0x1E)
                    {
                      a1 = v61;
                      goto LABEL_138;
                    }
                    v87 = v65 - v72 - (v67 & 0xFFFFFFFFFFFFFFFELL);
                    a1 = v61;
                    if (v87 < 0x20)
                      goto LABEL_348;
                    v88 = (v74 >> 1) + 1;
                    v89 = 2 * (v88 & 0xFFFFFFFFFFFFFFF0);
                    v90 = &v65[-v89];
                    v73 = (uint64_t *)((char *)v73 - v89);
                    v91 = &v72[2 * v68 - 16];
                    v92 = v65 - 16;
                    v93 = v88 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v94 = *(_OWORD *)v92;
                      *(v91 - 1) = *((_OWORD *)v92 - 1);
                      *v91 = v94;
                      v91 -= 2;
                      v92 -= 32;
                      v93 -= 16;
                    }
                    while (v93);
                    v65 = v90;
                    if (v88 != (v88 & 0xFFFFFFFFFFFFFFF0))
                    {
LABEL_348:
                      do
                      {
LABEL_138:
                        v95 = *((_WORD *)v65 - 1);
                        v65 -= 2;
                        *((_WORD *)v73 - 1) = v95;
                        v73 = (uint64_t *)((char *)v73 - 2);
                      }
                      while (v65 != v66);
                    }
LABEL_139:
                    v58[11] = v73;
                    v58[12] = (uint64_t *)v60;
                    v58[13] = (uint64_t *)&v72[2 * v71];
                    if (v66)
                      operator delete(v66);
LABEL_102:
                    v56 = (uint64_t **)(a10 + 8);
                    v58[12] = (uint64_t *)v60;
                    v59 += 208;
                    if (v59 == v229)
                      goto LABEL_187;
                    continue;
                  }
                }
                else
                {
                  v72 = 0;
                  v73 = (uint64_t *)(2 * v68);
                  *(_WORD *)(2 * v68) = v63;
                  v60 = 2 * v68 + 2;
                  if (v65 != v66)
                    goto LABEL_115;
                }
                a1 = v61;
                goto LABEL_139;
              }
              *(_WORD *)v65 = v63;
              v60 = (uint64_t)(v65 + 2);
              goto LABEL_102;
            }
            *(_DWORD *)buf = -1431655765 * ((*(_QWORD *)(a10 + 96) - *(_QWORD *)(a10 + 88)) >> 3);
            sub_1002654C4((uint64_t)v238, (uint64_t)v59, (int *)v59, buf);
            sub_100060EDC((uint64_t)v59, (uint64_t)__p);
            v76 = *(_QWORD **)(a10 + 96);
            v75 = *(_QWORD *)(a10 + 104);
            if ((unint64_t)v76 >= v75)
            {
              v81 = (_QWORD *)*v226;
              v82 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v76 - *v226) >> 3);
              v83 = v82 + 1;
              if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_1000D02C0();
              v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v81) >> 3);
              if (2 * v84 > v83)
                v83 = 2 * v84;
              if (v84 >= 0x555555555555555)
                v85 = 0xAAAAAAAAAAAAAAALL;
              else
                v85 = v83;
              if (v85)
              {
                if (v85 > 0xAAAAAAAAAAAAAAALL)
                  sub_1000CDEB8();
                v86 = (char *)operator new(24 * v85);
              }
              else
              {
                v86 = 0;
              }
              v96 = &v86[24 * v82];
              *(_OWORD *)v96 = *(_OWORD *)__p;
              *((_QWORD *)v96 + 2) = *(_QWORD *)&__p[16];
              v97 = &v86[24 * v85];
              memset(__p, 0, 24);
              v98 = v96 + 24;
              if (v76 == v81)
              {
                *(_QWORD *)(a10 + 88) = v96;
                *(_QWORD *)(a10 + 96) = v98;
                *(_QWORD *)(a10 + 104) = v97;
              }
              else
              {
                do
                {
                  v99 = *(_OWORD *)(v76 - 3);
                  *((_QWORD *)v96 - 1) = *(v76 - 1);
                  *(_OWORD *)(v96 - 24) = v99;
                  v96 -= 24;
                  *(v76 - 2) = 0;
                  *(v76 - 1) = 0;
                  *(v76 - 3) = 0;
                  v76 -= 3;
                }
                while (v76 != v81);
                v76 = *(_QWORD **)(a10 + 88);
                v100 = *(_QWORD **)(a10 + 96);
                *(_QWORD *)(a10 + 88) = v96;
                *(_QWORD *)(a10 + 96) = v98;
                *(_QWORD *)(a10 + 104) = v97;
                while (v100 != v76)
                {
                  if (*((char *)v100 - 1) < 0)
                    operator delete((void *)*(v100 - 3));
                  v100 -= 3;
                }
              }
              if (v76)
                operator delete(v76);
              v101 = __p[23];
              *(_QWORD *)(a10 + 96) = v98;
              if (v101 < 0)
              {
                operator delete(*(void **)__p);
                v78 = *((_DWORD *)v59 + 8);
                if (v78 != v78 >> 31)
                {
LABEL_119:
                  if (v78 >= 0)
                    v79 = v59 + 40;
                  else
                    v79 = (char *)*((_QWORD *)v59 + 5);
                  v80 = (double)*((int *)v79 + 23);
                  goto LABEL_155;
                }
              }
              else
              {
                v78 = *((_DWORD *)v59 + 8);
                if (v78 != v78 >> 31)
                  goto LABEL_119;
              }
            }
            else
            {
              v77 = *(_OWORD *)__p;
              v76[2] = *(_QWORD *)&__p[16];
              *(_OWORD *)v76 = v77;
              *(_QWORD *)(a10 + 96) = v76 + 3;
              v78 = *((_DWORD *)v59 + 8);
              if (v78 != v78 >> 31)
                goto LABEL_119;
            }
            v80 = *((double *)v59 + 9);
LABEL_155:
            std::string::push_back((std::string *)(a10 + 112), llround(v80));
            v102 = *((_DWORD *)v59 + 8);
            if (v102 == v102 >> 31)
            {
              v103 = *((_DWORD *)v59 + 30);
            }
            else
            {
              if (v102 >= 0)
                v104 = v59 + 40;
              else
                v104 = (char *)*((_QWORD *)v59 + 5);
              v103 = *((_DWORD *)v104 + 24) + 2402;
            }
            v105 = sub_100170BB4(v103);
            std::string::push_back((std::string *)(a10 + 136), v105);
            v106 = *(_WORD *)buf;
            v108 = (char *)v58[12];
            v107 = v58[13];
            if (v108 >= (char *)v107)
            {
              v110 = (char *)*v228;
              v111 = v108 - (_BYTE *)*v228;
              if (v111 < -2)
LABEL_334:
                sub_1000D02C0();
              v112 = v111 >> 1;
              v113 = (char *)v107 - v110;
              if (v113 <= (v111 >> 1) + 1)
                v114 = v112 + 1;
              else
                v114 = v113;
              if (v113 >= 0x7FFFFFFFFFFFFFFELL)
                v115 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v115 = v114;
              if (v115)
              {
                if (v115 < 0)
LABEL_335:
                  sub_1000CDEB8();
                v116 = operator new(2 * v115);
                v117 = (uint64_t *)&v116[2 * v112];
                *(_WORD *)v117 = v106;
                v109 = (uint64_t)v117 + 2;
                if (v108 != v110)
                {
LABEL_173:
                  v118 = v108 - 2 - v110;
                  if (v118 < 0x1E)
                  {
                    a1 = v61;
                    goto LABEL_183;
                  }
                  v119 = v108 - &v116[v111 & 0xFFFFFFFFFFFFFFFELL];
                  a1 = v61;
                  if (v119 < 0x20)
                    goto LABEL_349;
                  v120 = (v118 >> 1) + 1;
                  v121 = 2 * (v120 & 0xFFFFFFFFFFFFFFF0);
                  v122 = &v108[-v121];
                  v117 = (uint64_t *)((char *)v117 - v121);
                  v123 = &v116[2 * v112 - 16];
                  v124 = v108 - 16;
                  v125 = v120 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v126 = *(_OWORD *)v124;
                    *(v123 - 1) = *((_OWORD *)v124 - 1);
                    *v123 = v126;
                    v123 -= 2;
                    v124 -= 32;
                    v125 -= 16;
                  }
                  while (v125);
                  v108 = v122;
                  if (v120 != (v120 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_349:
                    do
                    {
LABEL_183:
                      v127 = *((_WORD *)v108 - 1);
                      v108 -= 2;
                      *((_WORD *)v117 - 1) = v127;
                      v117 = (uint64_t *)((char *)v117 - 2);
                    }
                    while (v108 != v110);
                  }
LABEL_184:
                  v58[11] = v117;
                  v58[12] = (uint64_t *)v109;
                  v58[13] = (uint64_t *)&v116[2 * v115];
                  if (v110)
                    operator delete(v110);
                  goto LABEL_186;
                }
              }
              else
              {
                v116 = 0;
                v117 = (uint64_t *)(2 * v112);
                *(_WORD *)(2 * v112) = *(_WORD *)buf;
                v109 = 2 * v112 + 2;
                if (v108 != v110)
                  goto LABEL_173;
              }
              a1 = v61;
              goto LABEL_184;
            }
            *(_WORD *)v108 = *(_WORD *)buf;
            v109 = (uint64_t)(v108 + 2);
LABEL_186:
            v58[12] = (uint64_t *)v109;
            v56 = (uint64_t **)(a10 + 8);
            v59 += 208;
            if (v59 == v229)
            {
LABEL_187:
              v48 = a10;
              goto LABEL_189;
            }
          }
        }
        v224 = 0;
LABEL_189:
        if (sub_10007C4C8(v227))
        {
          sub_1002684F0(*(_QWORD *)(a1 + 104), v227, (uint64_t)buf);
          sub_100274D70(v227, a7, (uint64_t)v224, (uint64_t)__p);
        }
        else
        {
          sub_100043D44(&v232, (uint64_t *)&v236);
          sub_100043D44(&v230, (uint64_t *)&v234);
          sub_100265280(a1, (double *)v227, (uint64_t *)&v232, (uint64_t *)&v230, a4, a5, a6, v224, (uint64_t)__p, v52, v50, v51, v53);
          v128 = (char *)v230;
          if (v230)
          {
            v129 = v231;
            v130 = v230;
            if (v231 != v230)
            {
              do
              {
                v132 = *((_DWORD *)v129 - 44);
                if (v132 == v132 >> 31)
                {
                  if (*(v129 - 128))
                    *(v129 - 128) = 0;
                }
                else
                {
                  v131 = *((_QWORD *)v129 - 21);
                  if (v132 < 0)
                  {
                    if (v131)
                      (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
                  }
                  else
                  {
                    (*(void (**)(char *))v131)(v129 - 168);
                  }
                }
                v129 -= 208;
              }
              while (v129 != v128);
              v130 = v230;
            }
            v231 = v128;
            operator delete(v130);
          }
          v133 = (char *)v232;
          if (v232)
          {
            v134 = v233;
            v135 = v232;
            if (v233 != v232)
            {
              do
              {
                v137 = *((_DWORD *)v134 - 44);
                if (v137 == v137 >> 31)
                {
                  if (*(v134 - 128))
                    *(v134 - 128) = 0;
                }
                else
                {
                  v136 = *((_QWORD *)v134 - 21);
                  if (v137 < 0)
                  {
                    if (v136)
                      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
                  }
                  else
                  {
                    (*(void (**)(char *))v136)(v134 - 168);
                  }
                }
                v134 -= 208;
              }
              while (v134 != v133);
              v135 = v232;
            }
            v233 = v133;
            operator delete(v135);
          }
        }
        if (*(_BYTE *)(a1 + 176))
        {
          v138 = 1;
          if (*a8 == 1)
            goto LABEL_222;
        }
        else if (*(_BYTE *)(a1 + 128))
        {
          v138 = sub_100258E34(v227);
          if (*a8 == 1)
          {
LABEL_222:
            if (!v138)
              goto LABEL_229;
            if (qword_100417ED8 == -1)
            {
              v139 = qword_100417EE0;
              if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
                goto LABEL_225;
            }
            else
            {
              dispatch_once(&qword_100417ED8, &stru_1003FFC90);
              v139 = qword_100417EE0;
              if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
              {
LABEL_225:
                v140 = (_QWORD *)(v227 + 8);
                if (*(char *)(v227 + 31) < 0)
                  v140 = (_QWORD *)*v140;
                v141 = *a8;
                v142 = *(unsigned __int8 *)(a1 + 176);
                v143 = *(unsigned __int8 *)(a1 + 128);
                *(_DWORD *)buf = 136381443;
                v259 = v140;
                v260 = 1026;
                *(_DWORD *)v261 = v141;
                *(_WORD *)&v261[4] = 1026;
                *(_DWORD *)&v261[6] = v142;
                LOWORD(v262) = 1026;
                *(_DWORD *)((char *)&v262 + 2) = v143;
                _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "Location %{private}s indoor probability set to 0 due to AR session state: %{public}d, suppressPipelined: %{public}d, suppressIndoor: %{public}d", buf, 0x1Eu);
              }
            }
            *(_OWORD *)__p = xmmword_100394050;
          }
        }
LABEL_229:
        if (*(double *)&__p[8] >= *(double *)(a1 + 192))
        {
          v147 = v245;
          if (v245 < v246)
          {
            *(_QWORD *)v245 = v227;
            v148 = (uint64_t)(v147 + 8);
LABEL_258:
            v245 = (char *)v148;
            v166 = v242;
            if (v242 >= v243)
            {
              v175 = (char *)v241;
              v176 = 0xCCCCCCCCCCCCCCCDLL * ((v242 - (_BYTE *)v241) >> 5);
              v177 = v176 + 1;
              if (v176 + 1 > 0x199999999999999)
                sub_1000D02C0();
              if (0x999999999999999ALL * ((v243 - (_BYTE *)v241) >> 5) > v177)
                v177 = 0x999999999999999ALL * ((v243 - (_BYTE *)v241) >> 5);
              if (0xCCCCCCCCCCCCCCCDLL * ((v243 - (_BYTE *)v241) >> 5) >= 0xCCCCCCCCCCCCCCLL)
                v178 = 0x199999999999999;
              else
                v178 = v177;
              if (v178)
              {
                if (v178 > 0x199999999999999)
LABEL_340:
                  sub_1000CDEB8();
                v179 = (char *)operator new(160 * v178);
              }
              else
              {
                v179 = 0;
              }
              v180 = *(_OWORD *)&__p[112];
              v181 = &v179[160 * v176];
              *((_OWORD *)v181 + 6) = *(_OWORD *)&__p[96];
              *((_OWORD *)v181 + 7) = v180;
              v182 = v266;
              *((_OWORD *)v181 + 8) = *(_OWORD *)&__p[128];
              *((_OWORD *)v181 + 9) = v182;
              v183 = *(_OWORD *)&__p[48];
              *((_OWORD *)v181 + 2) = *(_OWORD *)&__p[32];
              *((_OWORD *)v181 + 3) = v183;
              v184 = *(_OWORD *)&__p[80];
              *((_OWORD *)v181 + 4) = *(_OWORD *)&__p[64];
              *((_OWORD *)v181 + 5) = v184;
              v185 = *(_OWORD *)&__p[16];
              *(_OWORD *)v181 = *(_OWORD *)__p;
              *((_OWORD *)v181 + 1) = v185;
              v186 = v181;
              if (v166 != v175)
              {
                do
                {
                  v187 = *((_OWORD *)v166 - 9);
                  *((_OWORD *)v186 - 10) = *((_OWORD *)v166 - 10);
                  *((_OWORD *)v186 - 9) = v187;
                  v188 = *((_OWORD *)v166 - 8);
                  v189 = *((_OWORD *)v166 - 7);
                  v190 = *((_OWORD *)v166 - 5);
                  *((_OWORD *)v186 - 6) = *((_OWORD *)v166 - 6);
                  *((_OWORD *)v186 - 5) = v190;
                  *((_OWORD *)v186 - 8) = v188;
                  *((_OWORD *)v186 - 7) = v189;
                  v191 = *((_OWORD *)v166 - 4);
                  v192 = *((_OWORD *)v166 - 3);
                  v193 = *((_OWORD *)v166 - 1);
                  *((_OWORD *)v186 - 2) = *((_OWORD *)v166 - 2);
                  *((_OWORD *)v186 - 1) = v193;
                  *((_OWORD *)v186 - 4) = v191;
                  *((_OWORD *)v186 - 3) = v192;
                  v186 -= 160;
                  v166 -= 160;
                }
                while (v166 != v175);
                v166 = v175;
              }
              v174 = v181 + 160;
              v241 = v186;
              v242 = v181 + 160;
              v243 = &v179[160 * v178];
              if (v166)
                operator delete(v166);
            }
            else
            {
              v167 = *(_OWORD *)&__p[16];
              *(_OWORD *)v242 = *(_OWORD *)__p;
              *((_OWORD *)v166 + 1) = v167;
              v168 = *(_OWORD *)&__p[32];
              v169 = *(_OWORD *)&__p[48];
              v170 = *(_OWORD *)&__p[80];
              *((_OWORD *)v166 + 4) = *(_OWORD *)&__p[64];
              *((_OWORD *)v166 + 5) = v170;
              *((_OWORD *)v166 + 2) = v168;
              *((_OWORD *)v166 + 3) = v169;
              v171 = *(_OWORD *)&__p[96];
              v172 = *(_OWORD *)&__p[112];
              v173 = v266;
              *((_OWORD *)v166 + 8) = *(_OWORD *)&__p[128];
              *((_OWORD *)v166 + 9) = v173;
              *((_OWORD *)v166 + 6) = v171;
              *((_OWORD *)v166 + 7) = v172;
              v174 = v166 + 160;
            }
            v242 = v174;
            goto LABEL_276;
          }
          v149 = v244;
          v150 = v245 - (_BYTE *)v244;
          v151 = (v245 - (_BYTE *)v244) >> 3;
          v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 61)
            sub_1000D02C0();
          v153 = v246 - (_BYTE *)v244;
          if ((v246 - (_BYTE *)v244) >> 2 > v152)
            v152 = v153 >> 2;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
            v154 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v154 = v152;
          if (v154)
          {
            if (v154 >> 61)
              goto LABEL_340;
            v155 = operator new(8 * v154);
            v156 = (uint64_t *)&v155[8 * v151];
            *v156 = v227;
            v148 = (uint64_t)(v156 + 1);
            if (v147 != v149)
              goto LABEL_246;
LABEL_249:
            v244 = v156;
            v245 = (char *)v148;
            v246 = &v155[8 * v154];
            if (!v147)
              goto LABEL_258;
          }
          else
          {
            v155 = 0;
            v156 = (uint64_t *)(8 * v151);
            *(_QWORD *)(8 * v151) = v227;
            v148 = 8 * v151 + 8;
            if (v147 == v149)
              goto LABEL_249;
LABEL_246:
            v157 = v147 - 8 - v149;
            if (v157 < 0x58)
              goto LABEL_350;
            if ((unint64_t)(v147 - &v155[v150]) < 0x20)
              goto LABEL_350;
            v158 = (v157 >> 3) + 1;
            v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
            v160 = &v147[-v159];
            v156 = (uint64_t *)((char *)v156 - v159);
            v161 = &v155[8 * v151 - 16];
            v162 = (__int128 *)(v147 - 16);
            v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v164 = *v162;
              *(v161 - 1) = *(v162 - 1);
              *v161 = v164;
              v161 -= 2;
              v162 -= 2;
              v163 -= 4;
            }
            while (v163);
            v147 = v160;
            if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_350:
              do
              {
                v165 = *((_QWORD *)v147 - 1);
                v147 -= 8;
                *--v156 = v165;
              }
              while (v147 != v149);
            }
            v147 = v244;
            v244 = v156;
            v245 = (char *)v148;
            v246 = &v155[8 * v154];
            if (!v147)
              goto LABEL_258;
          }
          operator delete(v147);
          goto LABEL_258;
        }
        if (qword_100417ED8 == -1)
        {
          v144 = qword_100417EE0;
          if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            goto LABEL_232;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FFC90);
          v144 = qword_100417EE0;
          if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          {
LABEL_232:
            v145 = (_QWORD *)(v227 + 8);
            if (*(char *)(v227 + 31) < 0)
              v145 = (_QWORD *)*v145;
            v146 = *(_QWORD *)(a1 + 192);
            *(_DWORD *)buf = 136381187;
            v259 = v145;
            v260 = 2048;
            *(_QWORD *)v261 = *(_QWORD *)&__p[8];
            *(_WORD *)&v261[8] = 2048;
            v262 = v146;
            _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEBUG, "Location %{private}s filtered out due to fPrbIndoor %f < %f", buf, 0x20u);
          }
        }
LABEL_276:
        v194 = (char *)v234;
        if (v234)
        {
          v195 = v235;
          v196 = v234;
          if (v235 != v234)
          {
            do
            {
              v198 = *((_DWORD *)v195 - 44);
              if (v198 == v198 >> 31)
              {
                if (*(v195 - 128))
                  *(v195 - 128) = 0;
              }
              else
              {
                v197 = *((_QWORD *)v195 - 21);
                if (v198 < 0)
                {
                  if (v197)
                    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
                }
                else
                {
                  (*(void (**)(char *))v197)(v195 - 168);
                }
              }
              v195 -= 208;
            }
            while (v195 != v194);
            v196 = v234;
          }
          v235 = v194;
          operator delete(v196);
        }
        v199 = (char *)v236;
        if (v236)
        {
          v200 = v237;
          v57 = v236;
          if (v237 != v236)
          {
            do
            {
              v202 = *((_DWORD *)v200 - 44);
              if (v202 == v202 >> 31)
              {
                if (*(v200 - 128))
                  *(v200 - 128) = 0;
              }
              else
              {
                v201 = *((_QWORD *)v200 - 21);
                if (v202 < 0)
                {
                  if (v201)
                    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
                }
                else
                {
                  (*(void (**)(char *))v201)(v200 - 168);
                }
              }
              v200 -= 208;
            }
            while (v200 != v199);
            v57 = v236;
          }
          v237 = v199;
          operator delete(v57);
        }
        v55 = v225 + 1;
      }
      while (v225 + 1 != v218);
    }
  }
  if (qword_100417ED8 == -1)
  {
    v203 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_308;
    goto LABEL_307;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FFC90);
  v203 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_307:
    *(_DWORD *)__p = 134218240;
    *(_QWORD *)&__p[4] = ((char *)v248 - (_BYTE *)v247) >> 3;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = (v245 - (_BYTE *)v244) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEBUG, "Candidate locations: %zu; recommended locations: %zu",
      __p,
      0x16u);
  }
LABEL_308:
  sub_1000B27C8(v215, &v244, &v241);
  v204 = v239[0];
  if (v239[0])
  {
    do
    {
      v205 = (_QWORD *)*v204;
      operator delete(v204);
      v204 = v205;
    }
    while (v205);
  }
  v206 = v238[0];
  v238[0] = 0;
  if (v206)
    operator delete(v206);
  if (v241)
  {
    v242 = (char *)v241;
    operator delete(v241);
  }
  if (v244)
  {
    v245 = (char *)v244;
    operator delete(v244);
  }
  if (v247)
  {
    v248 = (uint64_t *)v247;
    operator delete(v247);
  }
  v207 = v252;
  if (v252)
  {
    do
    {
      v211 = v207;
      v207 = (_QWORD *)*v207;
      v212 = (std::__shared_weak_count *)v211[3];
      if (v212)
      {
        p_shared_owners = (unint64_t *)&v212->__shared_owners_;
        do
          v214 = __ldaxr(p_shared_owners);
        while (__stlxr(v214 - 1, p_shared_owners));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
      }
      operator delete(v211);
    }
    while (v207);
  }
  v208 = v250;
  v250 = 0;
  if (v208)
    operator delete(v208);
  sub_10021D8D0((int)&v254, v256);
  v209 = v254;
  v254 = 0;
  if (v209)
    operator delete(v209);
  sub_10021D8D0((int)v257, (_QWORD *)v257[2]);
  v210 = v257[0];
  v257[0] = 0;
  if (v210)
    operator delete(v210);
}

void sub_1000AEF90(_Unwind_Exception *a1)
{
  sub_1000CACE8(&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_1000AEFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a64;
  char a69;
  void *v70;
  void *v71;

  sub_10022CAC0((uint64_t)&a49);
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
    v70 = a58;
    if (!a58)
    {
LABEL_3:
      v71 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v70 = a58;
    if (!a58)
      goto LABEL_3;
  }
  a59 = (uint64_t)v70;
  operator delete(v70);
  v71 = __p;
  if (!__p)
  {
LABEL_5:
    sub_1000F7AE8((uint64_t)&a64);
    sub_10021AFE4((uint64_t)&a69);
    sub_10021AFE4((uint64_t)&STACK[0x208]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  a62 = (uint64_t)v71;
  operator delete(v71);
  goto LABEL_5;
}

void sub_1000AF1A8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  void *__p[5];

  sub_1000AF214(*(int8x8_t **)(a1 + 104), a2, (uint64_t)__p);
  sub_1000AF574(a3, __p);
  sub_10021D8D0((int)__p, (_QWORD *)__p[2]);
  v4 = __p[0];
  __p[0] = 0;
  if (v4)
    operator delete(v4);
}

void sub_1000AF200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021AFE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000AF214(int8x8_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const void ***v5;
  char *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int8x8_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t ***v28;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *a2;
  v25 = a2[1];
  if (*a2 == v25)
    return;
  v24 = a1 + 10;
  sub_1000AF904(a1 + 10, (_DWORD *)v4, &v26);
  while (2)
  {
    v5 = (const void ***)v26;
    v6 = v27;
    if (v26 == v27)
      goto LABEL_24;
    v7 = (_QWORD *)(v4 + 8);
    v8 = (uint64_t *)(v4 + 40);
    v9 = (_QWORD *)(v4 + 48);
    do
    {
      while (1)
      {
        v28 = (uint64_t ***)*v5;
        v10 = (uint64_t *)sub_100269100(a3, v28, (uint64_t)&unk_100395958, (const void ***)&v28);
        v11 = v10;
        v12 = v10[5];
        if (v12 < v10[6])
          break;
        v10[5] = sub_10021970C(v10 + 4, v4);
        if (++v5 == (const void ***)v6)
          goto LABEL_23;
      }
      v13 = (_QWORD *)(v12 + 8);
      if (*(_DWORD *)v4 == *(int *)v4 >> 31)
      {
        *v13 = *v7;
        *(_DWORD *)v12 = 0;
        v14 = v12 + 40;
        v15 = *(_DWORD *)(v4 + 32);
        if (v15 != v15 >> 31)
          goto LABEL_11;
      }
      else
      {
        v17 = *(_OWORD *)v7;
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v4 + 24);
        *(_OWORD *)v13 = v17;
        *(_DWORD *)v12 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
        v14 = v12 + 40;
        v15 = *(_DWORD *)(v4 + 32);
        if (v15 != v15 >> 31)
        {
LABEL_11:
          if (v15 >= 0)
            v16 = v4 + 40;
          else
            v16 = *v8;
          sub_1001A4778(v14, v16);
          goto LABEL_22;
        }
      }
      v18 = (_QWORD *)(v12 + 48);
      v19 = *(_DWORD *)v8;
      if (v19 == v19 >> 31)
      {
        *v18 = *v9;
        v20 = v19;
      }
      else
      {
        v21 = *(_OWORD *)v9;
        *(_DWORD *)(v12 + 64) = *(_DWORD *)(v4 + 64);
        *(_OWORD *)v18 = v21;
        v20 = *(_DWORD *)v8;
        v19 = *(int *)v8 >> 31;
      }
      *(_DWORD *)(v12 + 40) = v20 ^ v19;
      *(_QWORD *)(v12 + 72) = *(_QWORD *)(v4 + 72);
      *(_BYTE *)(v12 + 80) = 0;
      if (*(_BYTE *)(v4 + 80))
      {
        *(_DWORD *)(v12 + 84) = *(_DWORD *)(v4 + 84);
        *(_BYTE *)(v12 + 80) = 1;
      }
      v22 = *(_OWORD *)(v4 + 88);
      v23 = *(_OWORD *)(v4 + 104);
      *(_DWORD *)(v12 + 120) = *(_DWORD *)(v4 + 120);
      *(_OWORD *)(v12 + 104) = v23;
      *(_OWORD *)(v12 + 88) = v22;
LABEL_22:
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v4 + 32) ^ (*(int *)(v4 + 32) >> 31);
      v11[5] = v12 + 208;
      v11[5] = v12 + 208;
      ++v5;
    }
    while (v5 != (const void ***)v6);
LABEL_23:
    v5 = (const void ***)v26;
LABEL_24:
    if (v5)
    {
      v27 = (char *)v5;
      operator delete(v5);
    }
    v4 += 208;
    if (v4 != v25)
    {
      sub_1000AF904(v24, (_DWORD *)v4, &v26);
      continue;
    }
    break;
  }
}

void sub_1000AF43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10021AFE4(v1);
  _Unwind_Resume(a1);
}

void sub_1000AF450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 + 40) = v14;
  if (__p)
    operator delete(__p);
  sub_10021AFE4(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF480(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *__p;
  uint64_t v14;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = a2[1];
  a2[1] = 0;
  v5 = a2 + 2;
  v4 = (_QWORD *)a2[2];
  *(_QWORD *)(a1 + 16) = v4;
  v6 = (_QWORD **)(a1 + 16);
  v7 = v5[1];
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v5 + 4);
  if (v7)
  {
    v8 = v4[1];
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(_QWORD *)(v3 + 8 * v8) = v6;
    *v5 = 0;
    v5[1] = 0;
    v4 = *v6;
  }
  if (v4)
  {
    do
    {
      while (v4[4] != v4[5])
      {
        v4 = (_QWORD *)*v4;
        if (!v4)
          return a1;
      }
      v10 = (_QWORD *)*v4;
      sub_10002BB38((_QWORD *)a1, v4, (uint64_t)&__p);
      v11 = __p;
      __p = 0;
      if (v11)
        sub_10023DD68((uint64_t)&v14, v11);
      v4 = v10;
    }
    while (v10);
  }
  return a1;
}

void sub_1000AF578(int8x8_t *a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  unint64_t *v5;
  int v6;
  int8x8_t v7;
  unsigned int *v8;
  unint64_t v9;
  int8x8_t v10;
  unsigned int *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t **v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int8x8_t *v51;
  char v52;
  _BYTE v53[10];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)v53 = &v52;
  v6 = *a2;
  v5 = (unint64_t *)(a2 + 2);
  if (v6 != v6 >> 31)
    sub_1001D79E4();
  sub_1000A991C((uint64_t)v53, *v5);
  v7 = a1[1];
  if (!*(_QWORD *)&v7)
    return;
  v8 = (unsigned int *)*a1;
  v9 = *(unsigned int *)v53 | ((unint64_t)*(unsigned __int16 *)&v53[4] << 32);
  while (1)
  {
    v10 = (int8x8_t)(*(_QWORD *)&v7 >> 1);
    v11 = (unsigned int *)((char *)v8 + 10 * (*(_QWORD *)&v7 >> 1));
    v12 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
    if (v9 <= v12)
      break;
    v8 = (unsigned int *)((char *)v11 + 10);
    v10 = (int8x8_t)(*(_QWORD *)&v7 + ~*(_QWORD *)&v10);
LABEL_7:
    v7 = v10;
    if (!*(_QWORD *)&v10)
      return;
  }
  if (v12 > v9)
    goto LABEL_7;
  v13 = (char *)v8 + 10 * *(_QWORD *)&v7;
  if (v11 != v8)
  {
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((10 * (*(_QWORD *)&v7 >> 1)) >> 1);
    do
    {
      v15 = v14 >> 1;
      v16 = (char *)v8 + 10 * (v14 >> 1);
      v17 = *((unsigned __int16 *)v16 + 2);
      v19 = *(_DWORD *)v16;
      v18 = (unsigned int *)(v16 + 10);
      v14 += ~(v14 >> 1);
      if (v9 <= (v19 | (unint64_t)(v17 << 32)))
        v14 = v15;
      else
        v8 = v18;
    }
    while (v14);
  }
  v20 = (char *)v11 + 10;
  v21 = v13 - ((char *)v11 + 10);
  if (v21)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v21 >> 1);
    v13 = v20;
    do
    {
      v23 = v22 >> 1;
      v24 = &v13[10 * (v22 >> 1)];
      v25 = *((unsigned __int16 *)v24 + 2);
      v27 = *(_DWORD *)v24;
      v26 = v24 + 10;
      v22 += ~(v22 >> 1);
      if ((v27 | (unint64_t)(v25 << 32)) > v9)
        v22 = v23;
      else
        v13 = v26;
    }
    while (v22);
  }
  if (v8 != (unsigned int *)v13)
  {
    v28 = 0;
    v51 = a1 + 6;
    while (1)
    {
      v30 = *v8;
      *(_WORD *)&v53[4] = *((_WORD *)v8 + 2);
      *(_DWORD *)v53 = v30;
      *(_DWORD *)&v53[6] = *(unsigned int *)((char *)v8 + 6);
      v31 = sub_1002588D4(v51, (unsigned int *)&v53[6]);
      v32 = v31;
      v33 = (unint64_t)a3[2];
      if ((unint64_t)v28 < v33)
      {
        *(_QWORD *)v28 = v31;
        v29 = (uint64_t)(v28 + 8);
        goto LABEL_25;
      }
      v34 = *a3;
      v35 = v28 - *a3;
      v36 = v35 >> 3;
      v37 = (v35 >> 3) + 1;
      if (v37 >> 61)
        sub_1000D02C0();
      v38 = v33 - (_QWORD)v34;
      if (v38 >> 2 > v37)
        v37 = v38 >> 2;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 61)
          sub_1000CDEB8();
        v40 = operator new(8 * v39);
        v41 = (uint64_t **)&v40[8 * v36];
        *v41 = v32;
        v29 = (uint64_t)(v41 + 1);
        if (v28 == v34)
        {
LABEL_36:
          *a3 = (char *)v41;
          a3[1] = (char *)v29;
          a3[2] = &v40[8 * v39];
          if (!v28)
            goto LABEL_25;
LABEL_43:
          operator delete(v28);
          goto LABEL_25;
        }
      }
      else
      {
        v40 = 0;
        v41 = (uint64_t **)(8 * v36);
        *(_QWORD *)(8 * v36) = v32;
        v29 = 8 * v36 + 8;
        if (v28 == v34)
          goto LABEL_36;
      }
      v42 = v28 - 8 - v34;
      if (v42 < 0x168)
      {
        v43 = v28;
        goto LABEL_41;
      }
      if (&v40[v35 - 8 - (v42 & 0xFFFFFFFFFFFFFFF8)] > &v40[v35 - 8])
        break;
      if (&v28[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8)
      {
        v43 = v28;
        goto LABEL_41;
      }
      if ((unint64_t)(v28 - v40 - v35) < 0x20)
      {
        v43 = v28;
        goto LABEL_41;
      }
      v45 = (v42 >> 3) + 1;
      v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      v43 = &v28[-v46];
      v41 = (uint64_t **)((char *)v41 - v46);
      v47 = &v40[8 * v36 - 16];
      v48 = (__int128 *)(v28 - 16);
      v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *v48;
        *(v47 - 1) = *(v48 - 1);
        *v47 = v50;
        v47 -= 2;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_41;
LABEL_42:
      v28 = *a3;
      *a3 = (char *)v41;
      a3[1] = (char *)v29;
      a3[2] = &v40[8 * v39];
      if (v28)
        goto LABEL_43;
LABEL_25:
      a3[1] = (char *)v29;
      v8 = (unsigned int *)((char *)v8 + 10);
      v28 = (char *)v29;
      if (v8 == (unsigned int *)v13)
        return;
    }
    v43 = v28;
    do
    {
LABEL_41:
      v44 = (uint64_t *)*((_QWORD *)v43 - 1);
      v43 -= 8;
      *--v41 = v44;
    }
    while (v43 != v34);
    goto LABEL_42;
  }
}

void sub_1000AF8E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000AF904(int8x8_t *a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  if (*a2 == (int)*a2 >> 31)
    sub_1000AF578(a1, a2, a3);
  else
    sub_10025140C((uint64_t)a1, a2, a3);
}

uint64_t sub_1000AF91C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  double v9;
  double v10;
  uint64_t v11;

  v2 = (uint64_t *)sub_1000AFA28((uint64_t)(a1 + 15));
  v3 = *v2;
  v4 = v2[1];
  v5 = 0.0;
  v6 = 0.0;
  while (v3 != v4)
  {
    if (*(_QWORD *)v3 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 4))
      sub_1001E2FA0();
    v7 = *(double *)(v3 + 8);
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16 * *(_QWORD *)v3) + 40))(*(_QWORD *)(*a1 + 16 * *(_QWORD *)v3));
    if (*v8)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8) & 1) == 0)
      {
        v6 = v6 + (*(double (**)(_QWORD))(*(_QWORD *)*v8 + 120))(*v8) * v7;
        v5 = v5 + v7;
      }
    }
    v3 += 16;
  }
  v9 = v6 / v5 * 0.5;
  if (v5 <= 0.0)
    v9 = 0.0;
  v10 = sub_1000B238C(v9) * 1000000000.0;
  v11 = (uint64_t)v10;
  if (v10 > (double)(uint64_t)v10)
    ++v11;
  if (v11 <= 1)
    return 1;
  else
    return v11;
}

uint64_t sub_1000AFA28(uint64_t a1)
{
  return a1 + 48;
}

void sub_1000AFA30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6;
  size_t prime;
  int8x8_t v8;
  BOOL v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint64_t ***i;
  uint64_t v14;
  const void *v15;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = (float)*(unint64_t *)(a1 + 24);
  prime = (unint64_t)v6;
  if ((unint64_t)v6 == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a3, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v6 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v6);
    v8 = *(int8x8_t *)(a3 + 8);
    v9 = prime >= *(_QWORD *)&v8;
    if (prime > *(_QWORD *)&v8)
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    v9 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v9)
  {
    v10 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
    if (*(_QWORD *)&v8 < 3uLL || (v11 = (uint8x8_t)vcnt_s8(v8), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      v10 = std::__next_prime(v10);
    }
    else
    {
      v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2)
        v10 = v12;
    }
    if (prime <= v10)
      prime = v10;
    if (prime < *(_QWORD *)&v8)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t ****)(a1 + 16); i; i = (uint64_t ***)*i)
  {
    v15 = i + 4;
    v14 = *(_QWORD *)(a2 + 24);
    if (!v14)
      sub_10016CA74();
    if ((*(unsigned int (**)(uint64_t, uint64_t *, const void **))(*(_QWORD *)v14 + 48))(v14, (uint64_t *)i + 2, &v15))
    {
      v15 = i + 4;
      sub_100269480(a3, i + 2, (const void **)i + 2, &v15);
    }
  }
}

void sub_1000AFBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000AFBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000AFBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000AFBDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000AFBF0(uint64_t a1, uint64_t ***a2)
{
  return sub_1000B40BC(*(_QWORD **)(a1 + 8), a2) || sub_1000B40BC(*(_QWORD **)(a1 + 16), a2);
}

void sub_1000AFC34(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = (float)(unint64_t)((a1[1] - *a1) >> 3);
  prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a2, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)v4);
    v6 = *(int8x8_t *)(a2 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *a1;
  if (a1[1] != *a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      sub_100219FC0((_QWORD *)a2, *(_QWORD *)(v11 + 8 * v13++) + 8, (_OWORD *)(a1[3] + v12));
      v11 = *a1;
      v12 += 160;
    }
    while (v13 < (a1[1] - *a1) >> 3);
  }
}

void sub_1000AFD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000AFD90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1000AFDA4@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  uint64_t *i;
  _BYTE v8[32];
  int v9;
  __int128 v10;
  int v11;
  int v12;
  _QWORD *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t **v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = result[15];
  for (i = a2; v2; v2 = (uint64_t *)*v2)
  {
    sub_1002CE74C((uint64_t)v8, (uint64_t)(v2 + 2));
    if (v9 >> 31 == v9)
    {
      *(_QWORD *)&v23 = v10;
      v22 = 0;
      v3 = v12;
      if (v12 == v12 >> 31)
        goto LABEL_12;
    }
    else
    {
      v23 = v10;
      v24 = v11;
      v22 = (v9 >> 31) ^ v9;
      v3 = v12;
      if (v12 == v12 >> 31)
      {
LABEL_12:
        v6 = (int)v13 >> 31;
        if ((int)v13 >> 31 == (_DWORD)v13)
        {
          *(_QWORD *)&v27 = v14;
          v6 = (int)v13;
        }
        else
        {
          v27 = v14;
          v28 = v15;
        }
        LODWORD(v26) = v6 ^ v13;
        v29 = v16;
        v30 = 0;
        if (v17)
        {
          v31 = v18;
          v30 = 1;
        }
        v32 = v19;
        v33 = v20;
        v34 = v21;
        v5 = v3;
        goto LABEL_18;
      }
    }
    if (v3 >= 0)
      v4 = &v13;
    else
      v4 = v13;
    sub_1001A4778((uint64_t)&v26, (uint64_t)v4);
    v5 = v12;
    v3 = v12 >> 31;
LABEL_18:
    v25 = v5 ^ v3;
    result = sub_1002CE560(&i, (uint64_t)&v22);
    if (v25 == v25 >> 31)
    {
      if (v30)
        v30 = 0;
    }
    else
    {
      result = v26;
      if (v25 < 0)
      {
        if (v26)
          result = (uint64_t **)((uint64_t (*)(void))(*v26)[1])();
      }
      else
      {
        result = (uint64_t **)((uint64_t (*)(uint64_t ***))*v26)(&v26);
      }
    }
    if (v12 != v12 >> 31)
    {
      result = (uint64_t **)v13;
      if (v12 < 0)
      {
        if (v13)
          result = (uint64_t **)(*(uint64_t (**)(void))(*v13 + 8))();
      }
      else
      {
        result = (uint64_t **)((uint64_t (*)(_QWORD **))*v13)(&v13);
      }
    }
  }
  return result;
}

void sub_1000AFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  sub_1002CE6CC((uint64_t)va);
  sub_10021908C(v3);
  _Unwind_Resume(a1);
}

void sub_1000B0004(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021908C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0018@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *i;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (i = (_QWORD *)(result + 160);
        ;
        result = sub_10023347C(a2, a2[1], i[3], i[4], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(i[4] - i[3]) >> 4)))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  return result;
}

void sub_1000B0080(_Unwind_Exception *a1)
{
  void **v1;

  sub_10021908C(v1);
  _Unwind_Resume(a1);
}

_QWORD **sub_1000B0094(_QWORD **result, uint64_t a2)
{
  if (**result != a2)
    operator new();
  return result;
}

void sub_1000B01DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021A718((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B01F0(uint64_t a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *__p;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a2[1];
  v7 = 126 - 2 * __clz(((char *)v6 - (char *)*a2) >> 4);
  v13 = *a2;
  v5 = v13;
  v14 = v6;
  v8 = a2[2];
  v15 = v8;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v6 == v5)
    v9 = 0;
  else
    v9 = v7;
  sub_1000B0B7C(v5, v6, v9, 1);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v8;
  sub_1000B08F0((double **)&__p, (uint64_t **)a1, a3, 0);
  sub_1000B08EC(a1 + 24, &__p);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  sub_1000B08F0((double **)&__p, (uint64_t **)a1, a3, 1);
  sub_1000B08EC(a1 + 120, &__p);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  sub_1000B27CC((uint64_t *)(a1 + 216), (uint64_t *)a1);
  return a1;
}

void sub_1000B02EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = v12;
  sub_1002722D4(v13);
  sub_1002722D4(v11);
  sub_1000F7D3C(v10);
  _Unwind_Resume(a1);
}

void sub_1000B0334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  void **v12;

  if (__p)
  {
    operator delete(__p);
    sub_1000F7D3C(v12);
    _Unwind_Resume(a1);
  }
  sub_1000F7D3C(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B0384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  double **v9;
  const void *v10;
  int64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double *v19;
  double **v20;
  double **v21;
  double v22;
  double *v23;
  _QWORD *v24;
  unint64_t v25;
  double *v26;
  _QWORD *v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  double *v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  double *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  _OWORD *v52;
  double *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  void **v59;
  void **v60;
  _QWORD **v61;
  double *v62;
  double *v63;
  double *v64;
  double *v65;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_1000D02C0();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (double **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  v60 = (void **)(a1 + 48);
  v61 = (_QWORD **)(a1 + 24);
  v59 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v10 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v11)
  {
    if (v11 < 0)
      sub_1000D02C0();
    v12 = (double *)operator new(v11);
    v13 = &v12[v11 >> 3];
    v63 = v12;
    v65 = v13;
    memcpy(v12, v10, v11);
    v64 = v13;
  }
  sub_1000B0848(&v63);
  v14 = v63;
  v62 = v64;
  if (v63 != v64)
  {
    v15 = 0;
    v16 = 0.0;
    while (1)
    {
      v18 = *v14;
      v16 = v16 + *v14;
      v19 = *v9;
      v20 = (double **)(a1 + 32);
      v21 = (double **)(a1 + 32);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v21 = (double **)v19;
            v22 = v19[4];
            if (v16 >= v22)
              break;
            v19 = *(double **)v19;
            v20 = v21;
            if (!*v21)
              goto LABEL_18;
          }
          if (v22 >= v16)
            break;
          v19 = (double *)*((_QWORD *)v19 + 1);
          if (!v19)
          {
            v20 = v21 + 1;
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        v23 = (double *)operator new(0x30uLL);
        v23[4] = v16;
        *((_QWORD *)v23 + 5) = v15;
        *v23 = 0.0;
        v23[1] = 0.0;
        *((_QWORD *)v23 + 2) = v21;
        *v20 = v23;
        v24 = (_QWORD *)**v61;
        if (v24)
        {
          *v61 = v24;
          v23 = *v20;
        }
        sub_1000E05F4(*(uint64_t **)(a1 + 32), (uint64_t *)v23);
        ++*(_QWORD *)(a1 + 40);
      }
      v26 = *(double **)(a1 + 56);
      v25 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v26 < v25)
      {
        *(_QWORD *)v26 = v15;
        v26[1] = v18;
        v27 = v26 + 2;
        goto LABEL_35;
      }
      v28 = (double *)*v60;
      v29 = ((char *)v26 - (_BYTE *)*v60) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        sub_1000D02C0();
      v31 = v25 - (_QWORD)v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32 >> 60)
LABEL_61:
        sub_1000CDEB8();
      v33 = (char *)operator new(16 * v32);
      v34 = (double *)&v33[16 * v29];
      *(_QWORD *)v34 = v15;
      v34[1] = v18;
      if (v26 == v28)
      {
        v57 = &v33[16 * v32];
        v27 = v34 + 2;
        *(_QWORD *)(a1 + 48) = v34;
        *(_QWORD *)(a1 + 56) = v34 + 2;
        *(_QWORD *)(a1 + 64) = v57;
        if (v28)
          goto LABEL_34;
      }
      else
      {
        v35 = &v33[16 * v29];
        do
        {
          v36 = v35 - 16;
          *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
          v26 -= 2;
          v35 -= 16;
        }
        while (v26 != v28);
        v37 = &v33[16 * v32];
        v27 = v34 + 2;
        *(_QWORD *)(a1 + 48) = v36;
        *(_QWORD *)(a1 + 56) = v34 + 2;
        *(_QWORD *)(a1 + 64) = v37;
        if (v28)
LABEL_34:
          operator delete(v28);
      }
LABEL_35:
      *(_QWORD *)(a1 + 56) = v27;
      v39 = *(double **)(a1 + 80);
      v38 = *(_QWORD *)(a1 + 88);
      if ((unint64_t)v39 >= v38)
      {
        v40 = (double *)*v59;
        v41 = (char *)v39 - (_BYTE *)*v59;
        v42 = v41 >> 3;
        v43 = (v41 >> 3) + 1;
        if (v43 >> 61)
          sub_1000D02C0();
        v44 = v38 - (_QWORD)v40;
        if (v44 >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 61)
            goto LABEL_61;
          v46 = operator new(8 * v45);
          v47 = (double *)&v46[8 * v42];
          *v47 = v16;
          v17 = (uint64_t)(v47 + 1);
          if (v39 == v40)
            goto LABEL_53;
LABEL_47:
          v48 = (char *)(v39 - 1) - (char *)v40;
          if (v48 < 0x58)
            goto LABEL_68;
          if ((unint64_t)((char *)v39 - &v46[v41]) < 0x20)
            goto LABEL_68;
          v49 = (v48 >> 3) + 1;
          v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v51 = &v39[v50 / 0xFFFFFFFFFFFFFFF8];
          v47 = (double *)((char *)v47 - v50);
          v52 = &v46[8 * v42 - 16];
          v53 = v39 - 2;
          v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *v52 = v55;
            v52 -= 2;
            v53 -= 4;
            v54 -= 4;
          }
          while (v54);
          v39 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_68:
            do
            {
              v56 = *((_QWORD *)v39-- - 1);
              *((_QWORD *)v47-- - 1) = v56;
            }
            while (v39 != v40);
          }
        }
        else
        {
          v46 = 0;
          v47 = (double *)(8 * v42);
          *(double *)(8 * v42) = v16;
          v17 = 8 * v42 + 8;
          if (v39 != v40)
            goto LABEL_47;
        }
LABEL_53:
        *(_QWORD *)(a1 + 72) = v47;
        *(_QWORD *)(a1 + 80) = v17;
        *(_QWORD *)(a1 + 88) = &v46[8 * v45];
        if (v40)
          operator delete(v40);
        goto LABEL_10;
      }
      *v39 = v16;
      v17 = (uint64_t)(v39 + 1);
LABEL_10:
      *(_QWORD *)(a1 + 80) = v17;
      ++v15;
      if (++v14 == v62)
      {
        v14 = v63;
        break;
      }
    }
  }
  if (v14)
  {
    v64 = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_1000B07B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v17 = *a10;
    if (!*a10)
    {
LABEL_3:
      v18 = *a11;
      if (!*a11)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v17 = *a10;
    if (!*a10)
      goto LABEL_3;
  }
  *(_QWORD *)(v15 + 80) = v17;
  operator delete(v17);
  v18 = *a11;
  if (!*a11)
  {
LABEL_5:
    sub_10004AAA0(a12, *(_QWORD **)(v15 + 32));
    v19 = *(void **)v15;
    if (*(_QWORD *)v15)
    {
      *(_QWORD *)(v15 + 8) = v19;
      operator delete(v19);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v15 + 56) = v18;
  operator delete(v18);
  goto LABEL_5;
}

double **sub_1000B0848(double **result)
{
  double *v1;
  float64x2_t *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;

  v2 = (float64x2_t *)*result;
  v1 = result[1];
  if (*result != v1)
  {
    v3 = *result;
    v4 = 0.0;
    v5 = 0.0;
    v6 = *result;
    do
    {
      v7 = *v6++;
      v8 = v4;
      v9 = v7 - v5;
      v4 = v4 + v9;
      v5 = v4 - v8 - v9;
    }
    while (v6 != v1);
    v10 = (char *)v1 - (char *)v2 - 8;
    if (v10 < 0x18)
      goto LABEL_11;
    v11 = (v10 >> 3) + 1;
    v3 = &v2->f64[v11 & 0x3FFFFFFFFFFFFFFCLL];
    v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4, 0);
    v13 = v2 + 1;
    v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v15 = vdivq_f64(*v13, v12);
      v13[-1] = vdivq_f64(v13[-1], v12);
      *v13 = v15;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_11:
      do
      {
        *v3 = *v3 / v4;
        ++v3;
      }
      while (v3 != v1);
    }
  }
  return result;
}

void sub_1000B08F0(double **a1, uint64_t **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t ***v13;
  const void ***v14;
  double v15;
  unint64_t v16;
  double *v17;
  _QWORD *v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  _OWORD *v33;
  double *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a2;
  v4 = a2[1];
  v6 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v6 < 0)
      sub_1000D02C0();
    v10 = (double *)operator new((unint64_t)v6 >> 1);
    *a1 = v10;
    a1[1] = v10;
    a1[2] = &v10[v6 >> 4];
    v38 = v4;
    while (1)
    {
      while (1)
      {
        v11 = *v5;
        v12 = 1.0;
        if ((_DWORD)a4)
        {
          v12 = (*(double (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
          v11 = *v5;
        }
        v13 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
        v14 = sub_1000A9C6C(a3, v13);
        if (!v14)
          sub_10018CB98("unordered_map::at: key not found");
        v15 = v12 * *((double *)v14 + 5);
        v17 = a1[1];
        v16 = (unint64_t)a1[2];
        if ((unint64_t)v17 >= v16)
          break;
        *v17 = v15;
        a1[1] = v17 + 1;
        v5 += 2;
        if (v5 == v4)
          return;
      }
      v18 = a3;
      v19 = a4;
      v20 = *a1;
      v21 = (char *)v17 - (char *)*a1;
      v22 = v21 >> 3;
      v23 = (v21 >> 3) + 1;
      if (v23 >> 61)
        sub_1000D02C0();
      v24 = v16 - (_QWORD)v20;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
      if (v25)
        break;
      v26 = 0;
      v27 = (double *)(8 * v22);
      *(double *)(8 * v22) = v15;
      v28 = 8 * v22 + 8;
      if (v17 != v20)
        goto LABEL_20;
LABEL_26:
      *a1 = v27;
      a1[1] = (double *)v28;
      a1[2] = (double *)&v26[8 * v25];
      if (v20)
        operator delete(v20);
      a4 = v19;
      a3 = v18;
      v4 = v38;
      a1[1] = (double *)v28;
      v5 += 2;
      if (v5 == v38)
        return;
    }
    if (v25 >> 61)
      sub_1000CDEB8();
    v26 = operator new(8 * v25);
    v27 = (double *)&v26[8 * v22];
    *v27 = v15;
    v28 = (uint64_t)(v27 + 1);
    if (v17 == v20)
      goto LABEL_26;
LABEL_20:
    v29 = (char *)(v17 - 1) - (char *)v20;
    if (v29 < 0x58)
      goto LABEL_36;
    if ((unint64_t)((char *)v17 - &v26[v21]) < 0x20)
      goto LABEL_36;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v17[v31 / 0xFFFFFFFFFFFFFFF8];
    v27 = (double *)((char *)v27 - v31);
    v33 = &v26[8 * v22 - 16];
    v34 = v17 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v17 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v37 = *((_QWORD *)v17-- - 1);
        *((_QWORD *)v27-- - 1) = v37;
      }
      while (v17 != v20);
    }
    goto LABEL_26;
  }
}

void sub_1000B0B4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B0B7C(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  BOOL v69;
  uint64_t *v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  uint64_t *v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  __int128 v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  int v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  int64_t v159;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  uint64_t v165;

LABEL_1:
  v7 = a1;
  v156 = a1 + 4;
  v158 = a1 + 2;
  v8 = a2;
  while (2)
  {
    v9 = (char *)v8 - (char *)v7;
    v10 = ((char *)v8 - (char *)v7) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v64 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v8 - 2) + 56))(*(v8 - 2)) + 1616);
        if (v64 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v7 + 56))(*v7) + 1616))
        {
          v65 = *v7;
          *v7 = *(v8 - 2);
          *(v8 - 2) = v65;
          v66 = v7[1];
          v7[1] = *(v8 - 1);
          *(v8 - 1) = v66;
        }
        return;
      case 3:
        sub_10027571C(v7, v7 + 2, v8 - 2);
        return;
      case 4:
        sub_100275B9C(v7, v7 + 2, v7 + 4, v8 - 2);
        return;
      case 5:
        sub_10027559C(v7, v7 + 2, v7 + 4, v7 + 6, v8 - 2);
        return;
      default:
        if (v9 > 383)
        {
          if (!a3)
          {
            if (v7 == v8)
              return;
            v157 = v8;
            v85 = (unint64_t)(v10 - 2) >> 1;
            v164 = v85;
            do
            {
              v86 = v85;
              if (v164 >= v85)
              {
                v87 = (2 * v85) | 1;
                v88 = &v7[2 * v87];
                if (2 * v85 + 2 < v10)
                {
                  v89 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 56))(*v88) + 1616);
                  if (v89 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v88[2] + 56))(v88[2]) + 1616))
                  {
                    v88 += 2;
                    v87 = 2 * v86 + 2;
                  }
                }
                v90 = &v7[2 * v86];
                v91 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 56))(*v88) + 1616);
                if (v91 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v90 + 56))(*v90) + 1616))
                {
                  v159 = v86;
                  v92 = *(_OWORD *)v90;
                  *v90 = 0;
                  v90[1] = 0;
                  v161 = v92;
                  v93 = v92;
                  do
                  {
                    v94 = v88;
                    v95 = *(_OWORD *)v88;
                    *v88 = 0;
                    v88[1] = 0;
                    v96 = (std::__shared_weak_count *)v90[1];
                    *(_OWORD *)v90 = v95;
                    if (v96)
                    {
                      p_shared_owners = (unint64_t *)&v96->__shared_owners_;
                      do
                        v98 = __ldaxr(p_shared_owners);
                      while (__stlxr(v98 - 1, p_shared_owners));
                      if (!v98)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }
                    if (v164 < v87)
                      break;
                    v99 = (2 * v87) | 1;
                    v88 = &v7[2 * v99];
                    v87 = 2 * v87 + 2;
                    if (v87 >= v10)
                    {
                      v87 = v99;
                    }
                    else
                    {
                      v100 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 56))(*v88) + 1616);
                      if (v100 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v88[2] + 56))(v88[2])
                                             + 1616))
                        v87 = v99;
                      else
                        v88 += 2;
                    }
                    v101 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v88 + 56))(*v88) + 1616);
                    v90 = v94;
                  }
                  while (v101 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 56))(v93) + 1616));
                  v102 = (std::__shared_weak_count *)v94[1];
                  *(_OWORD *)v94 = v161;
                  v86 = v159;
                  if (v102)
                  {
                    v103 = (unint64_t *)&v102->__shared_owners_;
                    do
                      v104 = __ldaxr(v103);
                    while (__stlxr(v104 - 1, v103));
                    if (!v104)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                }
              }
              v85 = v86 - 1;
            }
            while (v86);
            v105 = (unint64_t)v9 >> 4;
            v106 = v157;
            while (1)
            {
              v108 = 0;
              v109 = v106;
              v162 = *v7;
              v165 = v7[1];
              *v7 = 0;
              v7[1] = 0;
              v110 = (char *)v7;
              do
              {
                v111 = v110;
                v110 += 16 * v108 + 16;
                v112 = 2 * v108;
                v108 = (2 * v108) | 1;
                v113 = v112 + 2;
                if (v112 + 2 < v105)
                {
                  v114 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v110 + 56))(*(_QWORD *)v110)
                                   + 1616);
                  if (v114 < *(_DWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)v110 + 2) + 56))(*((_QWORD *)v110 + 2))
                                        + 1616))
                  {
                    v110 += 16;
                    v108 = v113;
                  }
                }
                v115 = *(_OWORD *)v110;
                *(_QWORD *)v110 = 0;
                *((_QWORD *)v110 + 1) = 0;
                v116 = (std::__shared_weak_count *)*((_QWORD *)v111 + 1);
                *(_OWORD *)v111 = v115;
                if (v116)
                {
                  v117 = (unint64_t *)&v116->__shared_owners_;
                  do
                    v118 = __ldaxr(v117);
                  while (__stlxr(v118 - 1, v117));
                  if (!v118)
                  {
                    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                    std::__shared_weak_count::__release_weak(v116);
                  }
                }
              }
              while (v108 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
              v106 -= 2;
              if (v110 == (char *)(v109 - 2))
              {
                v138 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
                *(_QWORD *)v110 = v162;
                *((_QWORD *)v110 + 1) = v165;
                if (v138)
                {
                  v141 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v141);
                  while (__stlxr(v140 - 1, v141));
LABEL_164:
                  if (!v140)
                  {
                    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                    std::__shared_weak_count::__release_weak(v138);
                  }
                }
              }
              else
              {
                v119 = *((_OWORD *)v109 - 1);
                *v106 = 0;
                *(v109 - 1) = 0;
                v120 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
                *(_OWORD *)v110 = v119;
                if (!v120)
                  goto LABEL_143;
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                  v123 = (std::__shared_weak_count *)*(v109 - 1);
                  *(v109 - 2) = v162;
                  *(v109 - 1) = v165;
                  if (!v123)
                    goto LABEL_147;
                }
                else
                {
LABEL_143:
                  v123 = (std::__shared_weak_count *)*(v109 - 1);
                  *(v109 - 2) = v162;
                  *(v109 - 1) = v165;
                  if (!v123)
                    goto LABEL_147;
                }
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldaxr(v124);
                while (__stlxr(v125 - 1, v124));
                if (v125)
                {
LABEL_147:
                  v126 = v110 + 16 - (char *)v7;
                  if (v126 >= 17)
                    goto LABEL_148;
                  goto LABEL_127;
                }
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
                v126 = v110 + 16 - (char *)v7;
                if (v126 >= 17)
                {
LABEL_148:
                  v127 = (((unint64_t)v126 >> 4) - 2) >> 1;
                  v128 = &v7[2 * v127];
                  v129 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v128 + 56))(*v128) + 1616);
                  if (v129 >= *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v110 + 56))(*(_QWORD *)v110)
                                         + 1616))
                    goto LABEL_127;
                  v130 = *(_QWORD *)v110;
                  v131 = *((_QWORD *)v110 + 1);
                  *(_QWORD *)v110 = 0;
                  *((_QWORD *)v110 + 1) = 0;
                  do
                  {
                    v132 = v128;
                    v133 = *(_OWORD *)v128;
                    *v128 = 0;
                    v128[1] = 0;
                    v134 = (std::__shared_weak_count *)*((_QWORD *)v110 + 1);
                    *(_OWORD *)v110 = v133;
                    if (v134)
                    {
                      v135 = (unint64_t *)&v134->__shared_owners_;
                      do
                        v136 = __ldaxr(v135);
                      while (__stlxr(v136 - 1, v135));
                      if (!v136)
                      {
                        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                        std::__shared_weak_count::__release_weak(v134);
                      }
                    }
                    if (!v127)
                      break;
                    v127 = (v127 - 1) >> 1;
                    v128 = &v7[2 * v127];
                    v137 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v128 + 56))(*v128) + 1616);
                    v110 = (char *)v132;
                  }
                  while (v137 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 56))(v130) + 1616));
                  v138 = (std::__shared_weak_count *)v132[1];
                  *v132 = v130;
                  v132[1] = v131;
                  if (!v138)
                    goto LABEL_127;
                  v139 = (unint64_t *)&v138->__shared_owners_;
                  do
                    v140 = __ldaxr(v139);
                  while (__stlxr(v140 - 1, v139));
                  goto LABEL_164;
                }
              }
LABEL_127:
              if (v105-- <= 2)
                return;
            }
          }
          v11 = &v7[2 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x801)
          {
            sub_10027571C(v11, v7, v8 - 2);
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          else
          {
            sub_10027571C(v7, v11, v8 - 2);
            sub_10027571C(v158, v11 - 2, v8 - 4);
            sub_10027571C(v156, v11 + 2, v8 - 6);
            sub_10027571C(v11 - 2, v11, v11 + 2);
            v12 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v11;
            *(_OWORD *)v11 = v12;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_10;
          }
          v13 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v7 - 2) + 56))(*(v7 - 2)) + 1616);
          if (v13 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v7 + 56))(*v7) + 1616))
          {
LABEL_10:
            v14 = 0;
            v16 = *v7;
            v15 = v7[1];
            *v7 = 0;
            v7[1] = 0;
            do
            {
              v17 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[v14 + 2] + 56))(v7[v14 + 2]) + 1616);
              v14 += 2;
            }
            while (v17 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 1616));
            v163 = v15;
            v18 = &v7[v14];
            v19 = v8;
            if (v14 == 2)
            {
              v19 = v8;
              do
              {
                if (v18 >= v19)
                  break;
                v22 = *(v19 - 2);
                v19 -= 2;
                v23 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 56))(v22) + 1616);
              }
              while (v23 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 1616));
            }
            else
            {
              do
              {
                v20 = *(v19 - 2);
                v19 -= 2;
                v21 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20) + 1616);
              }
              while (v21 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 1616));
            }
            a1 = &v7[v14];
            if (v18 < v19)
            {
              v24 = v19;
              do
              {
                v25 = *a1;
                *a1 = *v24;
                *v24 = v25;
                v26 = a1[1];
                a1[1] = v24[1];
                v24[1] = v26;
                do
                {
                  v27 = a1[2];
                  a1 += 2;
                  v28 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 56))(v27) + 1616);
                }
                while (v28 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 1616));
                do
                {
                  v29 = *(v24 - 2);
                  v24 -= 2;
                  v30 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29) + 1616);
                }
                while (v30 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16) + 1616));
              }
              while (a1 < v24);
            }
            a2 = v8;
            v8 = a1 - 2;
            if (a1 - 2 != v7)
            {
              v31 = *(_OWORD *)v8;
              *v8 = 0;
              *(a1 - 1) = 0;
              v32 = (std::__shared_weak_count *)v7[1];
              *(_OWORD *)v7 = v31;
              if (v32)
              {
                v33 = (unint64_t *)&v32->__shared_owners_;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 - 1, v33));
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
            v35 = (std::__shared_weak_count *)*(a1 - 1);
            *(a1 - 2) = v16;
            *(a1 - 1) = v163;
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            if (v18 >= v19)
            {
              v38 = sub_1002758B4(v7, a1 - 2);
              if (sub_1002758B4(a1, a2))
              {
                if (!v38)
                  continue;
                return;
              }
              if (v38)
                goto LABEL_1;
            }
            sub_1000B0B7C(v7, a1 - 2, a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v39 = *v7;
          v40 = v7[1];
          *v7 = 0;
          v7[1] = 0;
          v41 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
          if (v41 >= *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v8 - 2) + 56))(*(v8 - 2)) + 1616))
          {
            v44 = v7 + 2;
            do
            {
              a1 = v44;
              if (v44 >= v8)
                break;
              v45 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
              v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
              v44 = a1 + 2;
            }
            while (v45 >= *(_DWORD *)(v46 + 1616));
          }
          else
          {
            a1 = v7;
            do
            {
              v42 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
              v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[2] + 56))(a1[2]);
              a1 += 2;
            }
            while (v42 >= *(_DWORD *)(v43 + 1616));
          }
          v47 = v8;
          if (a1 < v8)
          {
            v47 = v8;
            do
            {
              v48 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
              v49 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v47 - 2) + 56))(*(v47 - 2));
              v47 -= 2;
            }
            while (v48 < *(_DWORD *)(v49 + 1616));
          }
          a2 = v8;
          while (a1 < v47)
          {
            v50 = *a1;
            *a1 = *v47;
            *v47 = v50;
            v51 = a1[1];
            a1[1] = v47[1];
            v47[1] = v51;
            do
            {
              v52 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
              v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[2] + 56))(a1[2]);
              a1 += 2;
            }
            while (v52 >= *(_DWORD *)(v53 + 1616));
            do
            {
              v54 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 56))(v39) + 1616);
              v55 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v47 - 2) + 56))(*(v47 - 2));
              v47 -= 2;
            }
            while (v54 < *(_DWORD *)(v55 + 1616));
          }
          v56 = a1 - 2;
          if (a1 - 2 != v7)
          {
            v57 = *(_OWORD *)v56;
            *v56 = 0;
            *(a1 - 1) = 0;
            v58 = (std::__shared_weak_count *)v7[1];
            *(_OWORD *)v7 = v57;
            if (v58)
            {
              v59 = (unint64_t *)&v58->__shared_owners_;
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
          }
          a4 = 0;
          v61 = (std::__shared_weak_count *)*(a1 - 1);
          *(a1 - 2) = v39;
          *(a1 - 1) = v40;
          if (v61)
          {
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            a4 = 0;
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
              a4 = 0;
            }
          }
          goto LABEL_1;
        }
        v67 = v7 + 2;
        v69 = v7 == v8 || v67 == v8;
        if ((a4 & 1) != 0)
        {
          if (!v69)
          {
            v70 = v7;
            do
            {
              v71 = v70;
              v70 = v67;
              v72 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71[2] + 56))(v71[2]) + 1616);
              if (v72 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v71 + 56))(*v71) + 1616))
              {
                v73 = *v70;
                v74 = v71[3];
                v75 = v70;
                *v70 = 0;
                v70[1] = 0;
                while (1)
                {
                  v76 = v75;
                  v75 = v71;
                  v77 = *(_OWORD *)v71;
                  *v71 = 0;
                  v71[1] = 0;
                  v78 = (std::__shared_weak_count *)v76[1];
                  *(_OWORD *)v76 = v77;
                  if (v78)
                  {
                    v79 = (unint64_t *)&v78->__shared_owners_;
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    if (!v80)
                    {
                      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                      std::__shared_weak_count::__release_weak(v78);
                    }
                  }
                  if (v75 == v7)
                    break;
                  v71 = v75 - 2;
                  v81 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 56))(v73) + 1616);
                  if (v81 >= *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v75 - 2) + 56))(*(v75 - 2))
                                        + 1616))
                  {
                    v82 = (std::__shared_weak_count *)v75[1];
                    *v75 = v73;
                    v75[1] = v74;
                    if (!v82)
                      goto LABEL_83;
                    goto LABEL_96;
                  }
                }
                v82 = (std::__shared_weak_count *)v7[1];
                *v7 = v73;
                v7[1] = v74;
                if (!v82)
                  goto LABEL_83;
LABEL_96:
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                }
              }
LABEL_83:
              v67 = v70 + 2;
            }
            while (v70 + 2 != v8);
          }
        }
        else if (!v69)
        {
          do
          {
            v142 = v7;
            v7 = v67;
            v143 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v142[2] + 56))(v142[2]) + 1616);
            if (v143 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v142 + 56))(*v142) + 1616))
            {
              v144 = *v7;
              v145 = v142[3];
              v146 = v7;
              *v7 = 0;
              v7[1] = 0;
              do
              {
                v147 = v146;
                v146 = v142;
                v148 = *(_OWORD *)v142;
                *v142 = 0;
                v142[1] = 0;
                v149 = (std::__shared_weak_count *)v147[1];
                *(_OWORD *)v147 = v148;
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                v142 = v146 - 2;
                v152 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 56))(v144) + 1616);
              }
              while (v152 < *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v146 - 2) + 56))(*(v146 - 2))
                                       + 1616));
              v153 = (std::__shared_weak_count *)v146[1];
              *v146 = v144;
              v146[1] = v145;
              if (v153)
              {
                v154 = (unint64_t *)&v153->__shared_owners_;
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
            }
            v67 = v7 + 2;
          }
          while (v7 + 2 != v8);
        }
        return;
    }
  }
}

  v8 = a2 - 40;
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((sub_10003B4F4(a1, v8) & 0x80000000) != 0)
        {
          v25 = *(_QWORD *)a1;
          *(_QWORD *)v37 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v37[7] = *(_QWORD *)(a1 + 15);
          v26 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v27 = *(_OWORD *)(a1 + 24);
          v28 = *(_QWORD *)(v8 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = v28;
          *(_BYTE *)(a2 - 17) = 0;
          *(_BYTE *)(a2 - 40) = 0;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 8);
          if (*(char *)(a2 - 17) < 0)
          {
            v35 = v27;
            operator delete(*(void **)v8);
            v27 = v35;
          }
          *(_QWORD *)(a2 - 40) = v25;
          *(_QWORD *)(a2 - 32) = *(_QWORD *)v37;
          *(_QWORD *)(a2 - 25) = *(_QWORD *)&v37[7];
          *(_BYTE *)(a2 - 17) = v26;
          *(_OWORD *)(a2 - 16) = v27;
        }
        return;
      case 3uLL:
        sub_10032DF5C(a1, a1 + 40, v8);
        return;
      case 4uLL:
        sub_10032E9E8(a1, a1 + 40, a1 + 80, v8);
        return;
      case 5uLL:
        sub_10032EC1C(a1, a1 + 40, a1 + 80, a1 + 120, v8);
        return;
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            sub_10032DCF0(a1, a2);
          else
            sub_10032DE30(a1, a2);
          return;
        }
        if (v10 != 1)
        {
          v14 = v13 >> 1;
          v15 = a1 + 40 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            sub_10032DF5C(v15, a1, v8);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10032DF5C(a1, v15, v8);
            v16 = v8;
            v17 = a1 + 40 * v14;
            sub_10032DF5C(a1 + 40, v17 - 40, a2 - 80);
            sub_10032DF5C(a1 + 80, a1 + 40 + 40 * v14, a2 - 120);
            sub_10032DF5C(v17 - 40, v15, a1 + 40 + 40 * v14);
            v18 = *(_QWORD *)a1;
            *(_QWORD *)&v36 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)((char *)&v36 + 7) = *(_QWORD *)(a1 + 15);
            v19 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v20 = *(_OWORD *)v15;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)a1 = v20;
            *(_BYTE *)(v15 + 23) = 0;
            *(_QWORD *)v15 = v18;
            *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)&v36 + 7);
            *(_QWORD *)(v15 + 8) = v36;
            *(_BYTE *)(v15 + 23) = v19;
            v21 = *(_OWORD *)(a1 + 24);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v17 + 24);
            *(_OWORD *)(v17 + 24) = v21;
            v8 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_10003B4F4(a1, a1 - 40) & 0x80000000) == 0)
          {
            v9 = sub_10032E2A4(a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_10032E4D4(a1, a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_10032E70C(a1, v22);
          v9 = v22 + 40;
          if (!sub_10032E70C(v22 + 40, a2))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_1000BECA4(a1, v22, a3, -v11, a5 & 1);
            v9 = v22 + 40;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (a1 != a2)
        {
          v29 = (v13 - 2) >> 1;
          v30 = v29 + 1;
          v31 = a1 + 40 * v29;
          do
          {
            sub_10032EEEC(a1, a3, v13, v31);
            v31 -= 40;
            --v30;
          }
          while (v30);
          v32 = v12 / 0x28uLL;
          do
          {
            sub_10032F09C(a1, a2, a3, v32);
            a2 -= 40;
          }
          while (v32-- > 2);
        }
        return;
    }
  }
}

  v11 = (__n128 *)((char *)a2 - 24);
  v133 = (__n128 *)((char *)a2 - 72);
  v134 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 16))
        {
          v184 = *(_QWORD *)(v12 + 16);
          v156 = *(__n128 *)v12;
          v102 = *(__int128 *)((char *)a2 - 24);
          *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v12 = v102;
          result = v156;
          *((_QWORD *)a2 - 1) = v184;
          *(__int128 *)((char *)a2 - 24) = (__int128)v156;
        }
        return result;
      case 3uLL:
        v103 = (__n128 *)(v12 + 24);
        v104 = *(_QWORD *)(v12 + 40);
        v105 = *((_QWORD *)a2 - 1);
        if (v104 <= *(_QWORD *)(v12 + 16))
        {
          if (v105 > v104)
          {
            result = *v103;
            v121 = *(_QWORD *)(v12 + 40);
            v122 = *((_QWORD *)a2 - 1);
            *v103 = *v11;
            *(_QWORD *)(v12 + 40) = v122;
            *((_QWORD *)a2 - 1) = v121;
            *v11 = result;
            goto LABEL_144;
          }
        }
        else if (v105 <= v104)
        {
          v188 = *(_QWORD *)(v12 + 16);
          v162 = *(__n128 *)v12;
          *(__n128 *)v12 = *v103;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
          result = v162;
          *v103 = v162;
          *(_QWORD *)(v12 + 40) = v188;
          if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 40))
          {
            result = *v103;
            v128 = *(_QWORD *)(v12 + 40);
            v129 = *((_QWORD *)a2 - 1);
            *v103 = *v11;
            *(_QWORD *)(v12 + 40) = v129;
            *((_QWORD *)a2 - 1) = v128;
            *v11 = result;
          }
        }
        else
        {
          v185 = *(_QWORD *)(v12 + 16);
          v157 = *(__n128 *)v12;
          v106 = *v11;
          *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
          *(__n128 *)v12 = v106;
          result = v157;
          *((_QWORD *)a2 - 1) = v185;
          *v11 = v157;
        }
        return result;
      case 4uLL:
        v103 = (__n128 *)(v12 + 24);
        v107 = (__n128 *)(v12 + 48);
        v108 = *(_QWORD *)(v12 + 40);
        v109 = *(_QWORD *)(v12 + 64);
        if (v108 <= *(_QWORD *)(v12 + 16))
        {
          if (v109 > v108)
          {
            v123 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
            *(_QWORD *)(v12 + 64) = v123;
            if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
            {
              v187 = *(_QWORD *)(v12 + 16);
              v160 = *(__n128 *)v12;
              *(__n128 *)v12 = *v103;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              result = v160;
              *v103 = v160;
              *(_QWORD *)(v12 + 40) = v187;
            }
          }
        }
        else
        {
          if (v109 <= v108)
          {
            v189 = *(_QWORD *)(v12 + 16);
            v163 = *(__n128 *)v12;
            *(__n128 *)v12 = *v103;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            result = v163;
            *v103 = v163;
            *(_QWORD *)(v12 + 40) = v189;
            if (v109 <= *(_QWORD *)(v12 + 40))
              goto LABEL_141;
            v110 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
          }
          else
          {
            v186 = *(_QWORD *)(v12 + 16);
            v158 = *(__n128 *)v12;
            *(__n128 *)v12 = *v107;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 64);
            result = v158;
            *v107 = v158;
            v110 = v186;
          }
          *(_QWORD *)(v12 + 64) = v110;
        }
LABEL_141:
        if (*((_QWORD *)a2 - 1) > *(_QWORD *)(v12 + 64))
        {
          result = *v107;
          v130 = *(_QWORD *)(v12 + 64);
          v131 = *((_QWORD *)a2 - 1);
          *v107 = *v11;
          *(_QWORD *)(v12 + 64) = v131;
          *((_QWORD *)a2 - 1) = v130;
          *v11 = result;
          if (*(_QWORD *)(v12 + 64) > *(_QWORD *)(v12 + 40))
          {
            v132 = *(_QWORD *)(v12 + 40);
            result = *v103;
            *v103 = *v107;
            *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
            *v107 = result;
            *(_QWORD *)(v12 + 64) = v132;
LABEL_144:
            if (*(_QWORD *)(v12 + 40) > *(_QWORD *)(v12 + 16))
            {
              v190 = *(_QWORD *)(v12 + 16);
              v164 = *(__n128 *)v12;
              *(__n128 *)v12 = *v103;
              *(_QWORD *)(v12 + 16) = v103[1].n128_u64[0];
              result = v164;
              *v103 = v164;
              v103[1].n128_u64[0] = v190;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = sub_10029C450((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), (__n128 *)((char *)a2 - 24), result).n128_u64[0];
        return result;
      default:
        if (v13 > 575)
        {
          if (!a4)
          {
            if ((__int128 *)v12 != a2)
              sub_10029C698(v12, a2, a2);
            return result;
          }
          v15 = v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * (v14 >> 1));
          v17 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v13 < 0xC01)
          {
            v21 = *(_QWORD *)(v12 + 16);
            v22 = v12 + 24 * v15;
            v24 = *(_QWORD *)(v22 + 16);
            v23 = (_QWORD *)(v22 + 16);
            if (v21 <= v24)
            {
              if (v17 > v21)
              {
                v169 = *(_QWORD *)(v12 + 16);
                v141 = *(__n128 *)v12;
                v28 = *v11;
                *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
                *(__n128 *)v12 = v28;
                *((_QWORD *)a2 - 1) = v169;
                *v11 = v141;
                if (*(_QWORD *)(v12 + 16) > *v23)
                {
                  v170 = v16[1].n128_u64[0];
                  v142 = *v16;
                  v29 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = v29;
                  *(_QWORD *)(v12 + 16) = v170;
                  *(__n128 *)v12 = v142;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_53;
                }
              }
            }
            else
            {
              if (v17 <= v21)
              {
                v173 = v16[1].n128_u64[0];
                v145 = *v16;
                v46 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = v46;
                *(_QWORD *)(v12 + 16) = v173;
                *(__n128 *)v12 = v145;
                if (*((_QWORD *)a2 - 1) <= *(_QWORD *)(v12 + 16))
                  goto LABEL_31;
                v166 = *(_QWORD *)(v12 + 16);
                v138 = *(__n128 *)v12;
                v47 = *v11;
                *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
                *(__n128 *)v12 = v47;
              }
              else
              {
                v166 = v16[1].n128_u64[0];
                v138 = *v16;
                v25 = *v11;
                v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
                *v16 = v25;
              }
              *((_QWORD *)a2 - 1) = v166;
              *v11 = v138;
            }
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_32;
LABEL_53:
            v48 = *(_QWORD *)(v12 + 16);
            if (*(_QWORD *)(v12 - 8) > v48)
              goto LABEL_54;
            v136 = *(__n128 *)v12;
            if (v48 <= *((_QWORD *)a2 - 1))
            {
              v92 = v12 + 24;
              do
              {
                v12 = v92;
                if (v92 >= (unint64_t)a2)
                  break;
                v93 = *(_QWORD *)(v92 + 16);
                v92 += 24;
              }
              while (v48 <= v93);
            }
            else
            {
              v90 = v12;
              do
              {
                v12 = v90 + 24;
                v91 = *(_QWORD *)(v90 + 40);
                v90 += 24;
              }
              while (v48 <= v91);
            }
            v94 = a2;
            if (v12 < (unint64_t)a2)
            {
              v95 = a2;
              do
              {
                v94 = (__int128 *)((char *)v95 - 24);
                v96 = *((_QWORD *)v95 - 1);
                v95 = (__int128 *)((char *)v95 - 24);
              }
              while (v48 > v96);
            }
            while (v12 < (unint64_t)v94)
            {
              v183 = *(_QWORD *)(v12 + 16);
              v155 = *(__n128 *)v12;
              v97 = (__n128)*v94;
              *(_QWORD *)(v12 + 16) = *((_QWORD *)v94 + 2);
              *(__n128 *)v12 = v97;
              *((_QWORD *)v94 + 2) = v183;
              *v94 = (__int128)v155;
              do
              {
                v98 = *(_QWORD *)(v12 + 40);
                v12 += 24;
              }
              while (v48 <= v98);
              do
              {
                v99 = *((_QWORD *)v94 - 1);
                v94 = (__int128 *)((char *)v94 - 24);
              }
              while (v48 > v99);
            }
            v100 = (__n128 *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v101 = *v100;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(__n128 *)a1 = v101;
            }
            a5 = 0;
            result = v136;
            *v100 = v136;
            *(_QWORD *)(v12 - 8) = v48;
            continue;
          }
          v18 = (uint64_t *)(v12 + 16 + 24 * v15);
          v19 = *v18;
          if (*v18 <= *(_QWORD *)(v12 + 16))
          {
            if (v17 > v19)
            {
              v167 = v16[1].n128_u64[0];
              v139 = *v16;
              v26 = *v11;
              v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v16 = v26;
              *((_QWORD *)a2 - 1) = v167;
              *v11 = v139;
              if (*v18 > *(_QWORD *)(v12 + 16))
              {
                v168 = *(_QWORD *)(v12 + 16);
                v140 = *(__n128 *)v12;
                v27 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v27;
                v16[1].n128_u64[0] = v168;
                *v16 = v140;
              }
            }
          }
          else
          {
            if (v17 <= v19)
            {
              v171 = *(_QWORD *)(v12 + 16);
              v143 = *(__n128 *)v12;
              v30 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v30;
              v16[1].n128_u64[0] = v171;
              *v16 = v143;
              if (*((_QWORD *)a2 - 1) <= *v18)
                goto LABEL_22;
              v165 = v16[1].n128_u64[0];
              v137 = *v16;
              v31 = *v11;
              v16[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v16 = v31;
            }
            else
            {
              v165 = *(_QWORD *)(v12 + 16);
              v137 = *(__n128 *)v12;
              v20 = *v11;
              *(_QWORD *)(v12 + 16) = *((_QWORD *)a2 - 1);
              *(__n128 *)v12 = v20;
            }
            *((_QWORD *)a2 - 1) = v165;
            *v11 = v137;
          }
LABEL_22:
          v32 = (__int128 *)(v12 + 24);
          v33 = v12 + 24 * v15;
          v36 = *(_QWORD *)(v33 - 8);
          v34 = (unint64_t *)(v33 - 8);
          v35 = v36;
          v37 = (__n128 *)(v34 - 2);
          v38 = *((_QWORD *)a2 - 4);
          if (v36 <= *(_QWORD *)(v12 + 40))
          {
            if (v38 > v35)
            {
              v172 = *v34;
              v144 = (__int128)*v37;
              v42 = *v134;
              *v34 = *((_QWORD *)a2 - 4);
              *v37 = (__n128)v42;
              *((_QWORD *)a2 - 4) = v172;
              *v134 = v144;
              if ((int64_t)*v34 > *(_QWORD *)(v12 + 40))
              {
                v43 = *v32;
                v44 = *(_QWORD *)(v12 + 40);
                v45 = *v34;
                *v32 = (__int128)*v37;
                *(_QWORD *)(v12 + 40) = v45;
                *v34 = v44;
                *v37 = (__n128)v43;
              }
            }
          }
          else if (v38 <= v35)
          {
            v49 = *v32;
            v50 = *(_QWORD *)(v12 + 40);
            v51 = *v34;
            *v32 = (__int128)*v37;
            *(_QWORD *)(v12 + 40) = v51;
            *v34 = v50;
            *v37 = (__n128)v49;
            if (*((_QWORD *)a2 - 4) > (int64_t)*v34)
            {
              v174 = *v34;
              v146 = (__int128)*v37;
              v52 = *v134;
              *v34 = *((_QWORD *)a2 - 4);
              *v37 = (__n128)v52;
              *((_QWORD *)a2 - 4) = v174;
              *v134 = v146;
            }
          }
          else
          {
            v39 = *v32;
            v40 = *(_QWORD *)(v12 + 40);
            v41 = *((_QWORD *)a2 - 4);
            *v32 = *v134;
            *(_QWORD *)(v12 + 40) = v41;
            *((_QWORD *)a2 - 4) = v40;
            *v134 = v39;
          }
          v53 = (__n128 *)(v12 + 48);
          v54 = v12 + 24 * v15;
          v57 = *(_QWORD *)(v54 + 40);
          v55 = (unint64_t *)(v54 + 40);
          v56 = v57;
          v58 = (__n128 *)(v55 - 2);
          v59 = *((_QWORD *)a2 - 7);
          if (v57 <= *(_QWORD *)(v12 + 64))
          {
            if (v59 > v56)
            {
              v175 = *v55;
              v147 = *v58;
              v63 = *v133;
              *v55 = *((_QWORD *)a2 - 7);
              *v58 = v63;
              *((_QWORD *)a2 - 7) = v175;
              *v133 = v147;
              if ((int64_t)*v55 > *(_QWORD *)(v12 + 64))
              {
                v64 = *v53;
                v65 = *(_QWORD *)(v12 + 64);
                v66 = *v55;
                *v53 = *v58;
                *(_QWORD *)(v12 + 64) = v66;
                *v55 = v65;
                *v58 = v64;
              }
            }
          }
          else if (v59 <= v56)
          {
            v67 = *v53;
            v68 = *(_QWORD *)(v12 + 64);
            v69 = *v55;
            *v53 = *v58;
            *(_QWORD *)(v12 + 64) = v69;
            *v55 = v68;
            *v58 = v67;
            if (*((_QWORD *)a2 - 7) > (int64_t)*v55)
            {
              v176 = *v55;
              v148 = *v58;
              v70 = *v133;
              *v55 = *((_QWORD *)a2 - 7);
              *v58 = v70;
              *((_QWORD *)a2 - 7) = v176;
              *v133 = v148;
            }
          }
          else
          {
            v60 = *v53;
            v61 = *(_QWORD *)(v12 + 64);
            v62 = *((_QWORD *)a2 - 7);
            *v53 = *v133;
            *(_QWORD *)(v12 + 64) = v62;
            *((_QWORD *)a2 - 7) = v61;
            *v133 = v60;
          }
          v71 = *v18;
          v72 = *v55;
          if (*v18 <= (uint64_t)*v34)
          {
            if (v72 > v71)
            {
              v178 = v16[1].n128_u64[0];
              v150 = *v16;
              *v16 = *v58;
              v16[1].n128_u64[0] = *v55;
              *v55 = v178;
              *v58 = v150;
              if (*v18 > (uint64_t)*v34)
              {
                v179 = *v34;
                v151 = *v37;
                *v37 = *v16;
                *v34 = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v179;
                *v16 = v151;
              }
            }
          }
          else
          {
            if (v72 <= v71)
            {
              v180 = *v34;
              v152 = *v37;
              *v37 = *v16;
              *v34 = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v180;
              *v16 = v152;
              if ((uint64_t)*v55 <= *v18)
                goto LABEL_52;
              v177 = v16[1].n128_u64[0];
              v149 = *v16;
              *v16 = *v58;
              v16[1].n128_u64[0] = *v55;
            }
            else
            {
              v177 = *v34;
              v149 = *v37;
              *v37 = *v58;
              *v34 = *v55;
            }
            *v55 = v177;
            *v58 = v149;
          }
LABEL_52:
          v181 = *(_QWORD *)(v12 + 16);
          v153 = *(__n128 *)v12;
          v73 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = v73;
          v16[1].n128_u64[0] = v181;
          *v16 = v153;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_53;
LABEL_32:
          v48 = *(_QWORD *)(v12 + 16);
LABEL_54:
          v74 = 0;
          v135 = *(__n128 *)v12;
          do
          {
            v75 = *(_QWORD *)(v12 + v74 + 40);
            v74 += 24;
          }
          while (v75 > v48);
          v76 = v12 + v74;
          v77 = a2;
          if (v74 == 24)
          {
            v80 = a2;
            while (v76 < (unint64_t)v80)
            {
              v78 = (__int128 *)((char *)v80 - 24);
              v81 = *((_QWORD *)v80 - 1);
              v80 = (__int128 *)((char *)v80 - 24);
              if (v81 > v48)
                goto LABEL_62;
            }
            v78 = v80;
            v12 = v76;
          }
          else
          {
            do
            {
              v78 = (__int128 *)((char *)v77 - 24);
              v79 = *((_QWORD *)v77 - 1);
              v77 = (__int128 *)((char *)v77 - 24);
            }
            while (v79 <= v48);
LABEL_62:
            v12 = v76;
            if (v76 < (unint64_t)v78)
            {
              v82 = (unint64_t)v78;
              do
              {
                v182 = *(_QWORD *)(v12 + 16);
                v154 = *(__n128 *)v12;
                v83 = *(__n128 *)v82;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v82 + 16);
                *(__n128 *)v12 = v83;
                *(_QWORD *)(v82 + 16) = v182;
                *(__n128 *)v82 = v154;
                do
                {
                  v84 = *(_QWORD *)(v12 + 40);
                  v12 += 24;
                }
                while (v84 > v48);
                do
                {
                  v85 = *(_QWORD *)(v82 - 8);
                  v82 -= 24;
                }
                while (v85 <= v48);
              }
              while (v12 < v82);
            }
          }
          v86 = (__n128 *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v87 = *v86;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(__n128 *)a1 = v87;
          }
          *v86 = v135;
          *(_QWORD *)(v12 - 8) = v48;
          if (v76 < (unint64_t)v78)
            goto LABEL_73;
          v88 = sub_10029BF74(a1, (__n128 *)(v12 - 24), v135);
          if (!sub_10029BF74(v12, (__n128 *)a2, v89))
          {
            if (v88)
              continue;
LABEL_73:
            sub_10029B120(a1, v12 - 24, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 24);
          if (v88)
            return result;
          goto LABEL_1;
        }
        v111 = (__int128 *)(v12 + 24);
        v113 = (__int128 *)v12 == a2 || v111 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v113)
          {
            v114 = 0;
            v115 = (__int128 *)v12;
            do
            {
              v117 = *((_QWORD *)v115 + 5);
              v118 = *((_QWORD *)v115 + 2);
              v115 = v111;
              if (v117 > v118)
              {
                v159 = (__n128)*v111;
                v119 = v114;
                do
                {
                  v120 = v12 + v119;
                  *(_OWORD *)(v120 + 24) = *(_OWORD *)(v12 + v119);
                  *(_QWORD *)(v120 + 40) = *(_QWORD *)(v12 + v119 + 16);
                  if (!v119)
                  {
                    v116 = v12;
                    goto LABEL_115;
                  }
                  v119 -= 24;
                }
                while (v117 > *(_QWORD *)(v120 - 8));
                v116 = v12 + v119 + 24;
LABEL_115:
                result = v159;
                *(__n128 *)v116 = v159;
                *(_QWORD *)(v116 + 16) = v117;
              }
              v111 = (__int128 *)((char *)v115 + 24);
              v114 += 24;
            }
            while ((__int128 *)((char *)v115 + 24) != a2);
          }
        }
        else if (!v113)
        {
          do
          {
            v124 = *(_QWORD *)(a1 + 40);
            v125 = *(_QWORD *)(a1 + 16);
            a1 = (uint64_t)v111;
            if (v124 > v125)
            {
              v161 = (__n128)*v111;
              v126 = v111;
              do
              {
                *v126 = *(__int128 *)((char *)v126 - 24);
                *((_QWORD *)v126 + 2) = *((_QWORD *)v126 - 1);
                v127 = *((_QWORD *)v126 - 4);
                v126 = (__int128 *)((char *)v126 - 24);
              }
              while (v124 > v127);
              result = v161;
              *v126 = (__int128)v161;
              *((_QWORD *)v126 + 2) = v124;
            }
            v111 = (__int128 *)(a1 + 24);
          }
          while ((__int128 *)(a1 + 24) != a2);
        }
        return result;
    }
  }
}

  v9 = (char *)a2 - 40;
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_10029D980(a3, (_QWORD *)a2 - 5, v10))
        {
          v30 = *v10;
          v31 = v10[1];
          v74 = *((_QWORD *)v10 + 4);
          v72 = v30;
          v73 = v31;
          v32 = *(_OWORD *)v9;
          v33 = *(__int128 *)((char *)a2 - 24);
          *((_QWORD *)v10 + 4) = *((_QWORD *)a2 - 1);
          *v10 = v32;
          v10[1] = v33;
          *(_OWORD *)v9 = v72;
          *(__int128 *)((char *)a2 - 24) = v73;
          *((_QWORD *)a2 - 1) = v74;
        }
        return;
      case 3uLL:
        sub_10029DC50(v10, (__int128 *)((char *)v10 + 40), (__int128 *)((char *)a2 - 40), a3);
        return;
      case 4uLL:
        v34 = (__int128 *)((char *)v10 + 40);
        v35 = v10 + 5;
        sub_10029DC50(v10, (__int128 *)((char *)v10 + 40), v10 + 5, a3);
        if (sub_10029D980(a3, v9, (_QWORD *)v10 + 10))
        {
          v36 = *v35;
          v37 = v10[6];
          v38 = *((_QWORD *)v10 + 14);
          v39 = *((_QWORD *)v9 + 4);
          v40 = *((_OWORD *)v9 + 1);
          *v35 = *(_OWORD *)v9;
          v10[6] = v40;
          *((_QWORD *)v10 + 14) = v39;
          *((_QWORD *)v9 + 4) = v38;
          *(_OWORD *)v9 = v36;
          *((_OWORD *)v9 + 1) = v37;
          if (sub_10029D980(a3, (_QWORD *)v10 + 10, (_QWORD *)v10 + 5))
          {
            v41 = *((_QWORD *)v10 + 9);
            v43 = *v34;
            v42 = *(__int128 *)((char *)v10 + 56);
            v44 = v10[6];
            *v34 = *v35;
            *(__int128 *)((char *)v10 + 56) = v44;
            *((_QWORD *)v10 + 9) = *((_QWORD *)v10 + 14);
            *v35 = v43;
            v10[6] = v42;
            *((_QWORD *)v10 + 14) = v41;
            if (sub_10029D980(a3, (_QWORD *)v10 + 5, v10))
            {
              v45 = *v10;
              v46 = v10[1];
              v74 = *((_QWORD *)v10 + 4);
              v72 = v45;
              v73 = v46;
              v47 = *(__int128 *)((char *)v10 + 56);
              *v10 = *v34;
              v10[1] = v47;
              *((_QWORD *)v10 + 4) = *((_QWORD *)v10 + 9);
              v48 = v73;
              *v34 = v72;
              *(__int128 *)((char *)v10 + 56) = v48;
              *((_QWORD *)v10 + 9) = v74;
            }
          }
        }
        return;
      case 5uLL:
        sub_10029EB08((uint64_t)v10, (uint64_t)v10 + 40, (uint64_t)(v10 + 5), (__int128 *)((char *)v10 + 120), (__int128 *)((char *)a2 - 40), a3);
        return;
      default:
        if (v13 > 959)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              sub_10029ECCC((uint64_t)v10, a2, a2, a3);
            return;
          }
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)v10 + 40 * (v14 >> 1));
          if ((unint64_t)v13 < 0x1401)
          {
            sub_10029DC50(v16, v10, (__int128 *)((char *)a2 - 40), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10029DC50(v10, v16, (__int128 *)((char *)a2 - 40), a3);
            v17 = 40 * v15;
            v18 = (__int128 *)((char *)v10 + 40 * v15 - 40);
            sub_10029DC50((__int128 *)((char *)v10 + 40), v18, a2 - 5, a3);
            v19 = v10 + 5;
            v20 = (__int128 *)((char *)v10 + v17 + 40);
            sub_10029DC50(v19, v20, (__int128 *)((char *)a2 - 120), a3);
            sub_10029DC50(v18, v16, v20, a3);
            v21 = *(_OWORD *)a1;
            v22 = *(_OWORD *)(a1 + 16);
            v74 = *(_QWORD *)(a1 + 32);
            v72 = v21;
            v73 = v22;
            v23 = *v16;
            v24 = v16[1];
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v16 + 4);
            *(_OWORD *)a1 = v23;
            *(_OWORD *)(a1 + 16) = v24;
            v25 = v72;
            v26 = v73;
            *((_QWORD *)v16 + 4) = v74;
            *v16 = v25;
            v16[1] = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_10029D980(a3, (_QWORD *)(a1 - 40), (_QWORD *)a1) & 1) == 0)
          {
            v10 = (__int128 *)sub_10029DDC4((__int128 *)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v27 = sub_10029DF20((__int128 *)a1, a2, a3);
          if ((v28 & 1) == 0)
            goto LABEL_14;
          v29 = sub_10029E07C(a1, v27, a3);
          v10 = (__int128 *)(v27 + 40);
          if (!sub_10029E07C(v27 + 40, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v29)
              continue;
LABEL_14:
            sub_10029D448(a1, v27, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v27 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        v49 = (__int128 *)((char *)v10 + 40);
        v51 = v10 == a2 || v49 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v51)
          {
            v52 = 0;
            v53 = v10;
            do
            {
              v57 = v53;
              v53 = v49;
              if (sub_10029D980(a3, v49, v57))
              {
                v58 = *v53;
                v59 = v53[1];
                v74 = *((_QWORD *)v53 + 4);
                v72 = v58;
                v73 = v59;
                v60 = v52;
                do
                {
                  v61 = (char *)v10 + v60;
                  v62 = *(__int128 *)((char *)v10 + v60 + 16);
                  *(_OWORD *)(v61 + 40) = *(__int128 *)((char *)v10 + v60);
                  *(_OWORD *)(v61 + 56) = v62;
                  *((_QWORD *)v61 + 9) = *(_QWORD *)((char *)v10 + v60 + 32);
                  if (!v60)
                  {
                    v54 = (uint64_t)v10;
                    goto LABEL_38;
                  }
                  v60 -= 40;
                }
                while ((sub_10029D980(a3, &v72, (__int128 *)((char *)v10 + v60)) & 1) != 0);
                v54 = (uint64_t)v10 + v60 + 40;
LABEL_38:
                v55 = v72;
                v56 = v73;
                *(_QWORD *)(v54 + 32) = v74;
                *(_OWORD *)v54 = v55;
                *(_OWORD *)(v54 + 16) = v56;
              }
              v49 = (__int128 *)((char *)v53 + 40);
              v52 += 40;
            }
            while ((__int128 *)((char *)v53 + 40) != a2);
          }
        }
        else if (!v51)
        {
          v63 = (_QWORD *)v10 - 5;
          do
          {
            v64 = (_QWORD *)a1;
            a1 = (uint64_t)v49;
            if (sub_10029D980(a3, v49, v64))
            {
              v65 = *(_OWORD *)a1;
              v66 = *(_OWORD *)(a1 + 16);
              v74 = *(_QWORD *)(a1 + 32);
              v72 = v65;
              v73 = v66;
              v67 = v63;
              do
              {
                v68 = *(_OWORD *)(v67 + 7);
                *((_OWORD *)v67 + 5) = *(_OWORD *)(v67 + 5);
                *((_OWORD *)v67 + 6) = v68;
                v67[14] = v67[9];
                v69 = sub_10029D980(a3, &v72, v67);
                v67 -= 5;
              }
              while ((v69 & 1) != 0);
              v70 = v72;
              v71 = v73;
              v67[14] = v74;
              *((_OWORD *)v67 + 5) = v70;
              *((_OWORD *)v67 + 6) = v71;
            }
            v49 = (__int128 *)(a1 + 40);
            v63 += 5;
          }
          while ((__int128 *)(a1 + 40) != a2);
        }
        return;
    }
  }
}

  v9 = a2 - 7;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v10) >> 4);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1002A06DC(a3, (uint64_t)&a2[-7], (uint64_t)v10))
        {
          v39 = *v10;
          v40 = v10[2];
          v124 = v10[1];
          v125 = v40;
          v123 = v39;
          v41 = v10[3];
          v42 = v10[4];
          v43 = v10[6];
          v128 = v10[5];
          v129 = v43;
          v126 = (__n128)v41;
          v127 = v42;
          v44 = (__int128)a2[-1];
          v46 = (__int128)a2[-4];
          v45 = (__int128)a2[-3];
          v10[5] = (__int128)a2[-2];
          v10[6] = v44;
          v10[3] = v46;
          v10[4] = v45;
          v47 = (__int128)*v9;
          v48 = (__int128)a2[-5];
          v10[1] = (__int128)a2[-6];
          v10[2] = v48;
          *v10 = v47;
          a2[-5] = (__n128)v125;
          a2[-6] = (__n128)v124;
          *v9 = (__n128)v123;
          a2[-1] = (__n128)v129;
          a2[-2] = (__n128)v128;
          a2[-3] = (__n128)v127;
          a2[-4] = v126;
        }
        return;
      case 3uLL:
        sub_1002A0CBC(v10, v10 + 7, (__int128 *)&a2[-7], a3);
        return;
      case 4uLL:
        v49 = v10 + 7;
        v50 = v10 + 14;
        sub_1002A0CBC(v10, v10 + 7, v10 + 14, a3);
        if (sub_1002A06DC(a3, (uint64_t)v9, (uint64_t)(v10 + 14)))
        {
          v51 = v10[19];
          v127 = v10[18];
          v128 = v51;
          v129 = v10[20];
          v52 = v10[15];
          v123 = *v50;
          v124 = v52;
          v53 = v10[17];
          v125 = v10[16];
          v126 = (__n128)v53;
          v55 = (__int128)v9[1];
          v54 = (__int128)v9[2];
          *v50 = (__int128)*v9;
          v10[15] = v55;
          v10[16] = v54;
          v56 = (__int128)v9[6];
          v58 = (__int128)v9[3];
          v57 = (__int128)v9[4];
          v10[19] = (__int128)v9[5];
          v10[20] = v56;
          v10[17] = v58;
          v10[18] = v57;
          v9[2] = (__n128)v125;
          v9[1] = (__n128)v124;
          *v9 = (__n128)v123;
          v9[6] = (__n128)v129;
          v9[5] = (__n128)v128;
          v9[4] = (__n128)v127;
          v9[3] = v126;
          if (sub_1002A06DC(a3, (uint64_t)(v10 + 14), (uint64_t)(v10 + 7)))
          {
            v59 = v10[12];
            v127 = v10[11];
            v128 = v59;
            v129 = v10[13];
            v60 = v10[8];
            v123 = *v49;
            v124 = v60;
            v61 = v10[10];
            v125 = v10[9];
            v126 = (__n128)v61;
            v62 = v10[15];
            *v49 = *v50;
            v10[8] = v62;
            v63 = v10[20];
            v64 = v10[18];
            v10[12] = v10[19];
            v10[13] = v63;
            v65 = v10[17];
            v10[9] = v10[16];
            v10[10] = v65;
            v10[11] = v64;
            v66 = v124;
            *v50 = v123;
            v10[15] = v66;
            v67 = v125;
            v68 = (__int128)v126;
            v69 = v129;
            v10[19] = v128;
            v10[20] = v69;
            v70 = v127;
            v10[17] = v68;
            v10[18] = v70;
            v10[16] = v67;
            if (sub_1002A06DC(a3, (uint64_t)(v10 + 7), (uint64_t)v10))
            {
              v71 = *v10;
              v72 = v10[2];
              v124 = v10[1];
              v125 = v72;
              v123 = v71;
              v73 = v10[3];
              v74 = v10[4];
              v75 = v10[6];
              v128 = v10[5];
              v129 = v75;
              v126 = (__n128)v73;
              v127 = v74;
              v76 = v10[12];
              v10[4] = v10[11];
              v10[5] = v76;
              v10[6] = v10[13];
              v77 = v10[8];
              *v10 = *v49;
              v10[1] = v77;
              v78 = v10[10];
              v10[2] = v10[9];
              v10[3] = v78;
              v79 = v124;
              *v49 = v123;
              v10[8] = v79;
              v80 = v125;
              v81 = (__int128)v126;
              v82 = v129;
              v10[12] = v128;
              v10[13] = v82;
              v83 = v127;
              v10[10] = v81;
              v10[11] = v83;
              v10[9] = v80;
            }
          }
        }
        return;
      case 5uLL:
        sub_1002A16CC(v10, v10 + 7, v10 + 14, v10 + 21, (__int128 *)&a2[-7], a3);
        return;
      default:
        if (v13 > 2687)
        {
          if (v12 == 1)
          {
            if (v10 != (__int128 *)a2)
              sub_1002A1A48((uint64_t)v10, a2, a2, a3);
            return;
          }
          v15 = v14 >> 1;
          v16 = &v10[7 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x3801)
          {
            sub_1002A0CBC(v16, v10, (__int128 *)&a2[-7], a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1002A0CBC(v10, v16, (__int128 *)&a2[-7], a3);
            v17 = 7 * v15;
            v18 = &v10[7 * v15 - 7];
            sub_1002A0CBC(v10 + 7, v18, (__int128 *)&a2[-14], a3);
            v19 = v10 + 14;
            v20 = &v10[v17 + 7];
            sub_1002A0CBC(v19, v20, (__int128 *)&a2[-21], a3);
            sub_1002A0CBC(v18, v16, v20, a3);
            v21 = *a1;
            v22 = a1[2];
            v124 = a1[1];
            v125 = v22;
            v123 = v21;
            v23 = a1[3];
            v24 = a1[4];
            v25 = a1[6];
            v128 = a1[5];
            v129 = v25;
            v126 = (__n128)v23;
            v127 = v24;
            v26 = v16[6];
            v28 = v16[3];
            v27 = v16[4];
            a1[5] = v16[5];
            a1[6] = v26;
            a1[3] = v28;
            a1[4] = v27;
            v29 = *v16;
            v30 = v16[2];
            a1[1] = v16[1];
            a1[2] = v30;
            *a1 = v29;
            v31 = v123;
            v32 = v125;
            v16[1] = v124;
            v16[2] = v32;
            *v16 = v31;
            v33 = (__int128)v126;
            v34 = v127;
            v35 = v129;
            v16[5] = v128;
            v16[6] = v35;
            v16[3] = v33;
            v16[4] = v34;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_1002A06DC(a3, (uint64_t)(a1 - 7), (uint64_t)a1) & 1) == 0)
          {
            v10 = sub_1002A0F70(a1, (__int128 *)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v36 = sub_1002A1134(a1, (unint64_t)a2, a3);
          if ((v37 & 1) == 0)
            goto LABEL_14;
          v38 = sub_1002A1300(a1, v36, a3);
          v10 = v36 + 7;
          if (!sub_1002A1300(v36 + 7, (__int128 *)a2, a3))
          {
            v11 = v12 + 1;
            if (v38)
              continue;
LABEL_14:
            sub_1002A0004(a1, v36, a3, -v12, a5 & 1);
            v10 = v36 + 7;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v36;
          if (v38)
            return;
          goto LABEL_1;
        }
        v84 = (uint64_t)(v10 + 7);
        v86 = v10 == (__int128 *)a2 || v84 == (_QWORD)a2;
        if ((a5 & 1) != 0)
        {
          if (!v86)
          {
            v87 = 0;
            v88 = v10;
            do
            {
              v95 = (uint64_t)v88;
              v88 = (__int128 *)v84;
              if (sub_1002A06DC(a3, v84, v95))
              {
                v96 = *v88;
                v97 = v88[2];
                v124 = v88[1];
                v125 = v97;
                v123 = v96;
                v98 = (__n128)v88[3];
                v99 = v88[4];
                v100 = v88[6];
                v128 = v88[5];
                v129 = v100;
                v126 = v98;
                v127 = v99;
                v101 = v87;
                do
                {
                  v102 = (__int128 *)((char *)v10 + v101);
                  v103 = *(__int128 *)((char *)v10 + v101 + 80);
                  v102[11] = *(__int128 *)((char *)v10 + v101 + 64);
                  v102[12] = v103;
                  v102[13] = *(__int128 *)((char *)v10 + v101 + 96);
                  v104 = *(__int128 *)((char *)v10 + v101 + 16);
                  v102[7] = *(__int128 *)((char *)v10 + v101);
                  v102[8] = v104;
                  v105 = *(__int128 *)((char *)v10 + v101 + 48);
                  v102[9] = *(__int128 *)((char *)v10 + v101 + 32);
                  v102[10] = v105;
                  if (!v101)
                  {
                    v89 = v10;
                    goto LABEL_38;
                  }
                  v101 -= 112;
                }
                while ((sub_1002A06DC(a3, (uint64_t)&v123, (uint64_t)v10 + v101) & 1) != 0);
                v89 = (__int128 *)((char *)v10 + v101 + 112);
LABEL_38:
                v90 = v123;
                v91 = v125;
                v89[1] = v124;
                v89[2] = v91;
                *v89 = v90;
                v92 = v126;
                v93 = v127;
                v94 = v129;
                v89[5] = v128;
                v89[6] = v94;
                v89[3] = (__int128)v92;
                v89[4] = v93;
              }
              v84 = (uint64_t)(v88 + 7);
              v87 += 112;
            }
            while (v88 + 7 != (__int128 *)a2);
          }
        }
        else if (!v86)
        {
          v106 = v10 - 7;
          do
          {
            v107 = (uint64_t)a1;
            a1 = (__int128 *)v84;
            if (sub_1002A06DC(a3, v84, v107))
            {
              v108 = *a1;
              v109 = a1[2];
              v124 = a1[1];
              v125 = v109;
              v123 = v108;
              v110 = a1[3];
              v111 = a1[4];
              v112 = a1[6];
              v128 = a1[5];
              v129 = v112;
              v126 = (__n128)v110;
              v127 = v111;
              v113 = v106;
              do
              {
                v114 = v113[12];
                v113[18] = v113[11];
                v113[19] = v114;
                v113[20] = v113[13];
                v115 = v113[8];
                v113[14] = v113[7];
                v113[15] = v115;
                v116 = v113[10];
                v113[16] = v113[9];
                v113[17] = v116;
                v117 = sub_1002A06DC(a3, (uint64_t)&v123, (uint64_t)v113);
                v113 -= 7;
              }
              while ((v117 & 1) != 0);
              v118 = v123;
              v119 = v125;
              v113[15] = v124;
              v113[16] = v119;
              v113[14] = v118;
              v120 = v126;
              v121 = v127;
              v122 = v129;
              v113[19] = v128;
              v113[20] = v122;
              v113[17] = (__int128)v120;
              v113[18] = v121;
            }
            v84 = (uint64_t)(a1 + 7);
            v106 += 7;
          }
          while (a1 + 7 != (__int128 *)a2);
        }
        return;
    }
  }
}

  v9 = a2 - 7;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v10) >> 4);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1002A7D0C(a3, (uint64_t)&a2[-7], (uint64_t)v10))
        {
          v39 = *v10;
          v40 = v10[2];
          v124 = v10[1];
          v125 = v40;
          v123 = v39;
          v41 = v10[3];
          v42 = v10[4];
          v43 = v10[6];
          v128 = v10[5];
          v129 = v43;
          v126 = (__n128)v41;
          v127 = v42;
          v44 = (__int128)a2[-1];
          v46 = (__int128)a2[-4];
          v45 = (__int128)a2[-3];
          v10[5] = (__int128)a2[-2];
          v10[6] = v44;
          v10[3] = v46;
          v10[4] = v45;
          v47 = (__int128)*v9;
          v48 = (__int128)a2[-5];
          v10[1] = (__int128)a2[-6];
          v10[2] = v48;
          *v10 = v47;
          a2[-5] = (__n128)v125;
          a2[-6] = (__n128)v124;
          *v9 = (__n128)v123;
          a2[-1] = (__n128)v129;
          a2[-2] = (__n128)v128;
          a2[-3] = (__n128)v127;
          a2[-4] = v126;
        }
        return;
      case 3uLL:
        sub_1002A82E8(v10, v10 + 7, (__int128 *)&a2[-7], a3);
        return;
      case 4uLL:
        v49 = v10 + 7;
        v50 = v10 + 14;
        sub_1002A82E8(v10, v10 + 7, v10 + 14, a3);
        if (sub_1002A7D0C(a3, (uint64_t)v9, (uint64_t)(v10 + 14)))
        {
          v51 = v10[19];
          v127 = v10[18];
          v128 = v51;
          v129 = v10[20];
          v52 = v10[15];
          v123 = *v50;
          v124 = v52;
          v53 = v10[17];
          v125 = v10[16];
          v126 = (__n128)v53;
          v55 = (__int128)v9[1];
          v54 = (__int128)v9[2];
          *v50 = (__int128)*v9;
          v10[15] = v55;
          v10[16] = v54;
          v56 = (__int128)v9[6];
          v58 = (__int128)v9[3];
          v57 = (__int128)v9[4];
          v10[19] = (__int128)v9[5];
          v10[20] = v56;
          v10[17] = v58;
          v10[18] = v57;
          v9[2] = (__n128)v125;
          v9[1] = (__n128)v124;
          *v9 = (__n128)v123;
          v9[6] = (__n128)v129;
          v9[5] = (__n128)v128;
          v9[4] = (__n128)v127;
          v9[3] = v126;
          if (sub_1002A7D0C(a3, (uint64_t)(v10 + 14), (uint64_t)(v10 + 7)))
          {
            v59 = v10[12];
            v127 = v10[11];
            v128 = v59;
            v129 = v10[13];
            v60 = v10[8];
            v123 = *v49;
            v124 = v60;
            v61 = v10[10];
            v125 = v10[9];
            v126 = (__n128)v61;
            v62 = v10[15];
            *v49 = *v50;
            v10[8] = v62;
            v63 = v10[20];
            v64 = v10[18];
            v10[12] = v10[19];
            v10[13] = v63;
            v65 = v10[17];
            v10[9] = v10[16];
            v10[10] = v65;
            v10[11] = v64;
            v66 = v124;
            *v50 = v123;
            v10[15] = v66;
            v67 = v125;
            v68 = (__int128)v126;
            v69 = v129;
            v10[19] = v128;
            v10[20] = v69;
            v70 = v127;
            v10[17] = v68;
            v10[18] = v70;
            v10[16] = v67;
            if (sub_1002A7D0C(a3, (uint64_t)(v10 + 7), (uint64_t)v10))
            {
              v71 = *v10;
              v72 = v10[2];
              v124 = v10[1];
              v125 = v72;
              v123 = v71;
              v73 = v10[3];
              v74 = v10[4];
              v75 = v10[6];
              v128 = v10[5];
              v129 = v75;
              v126 = (__n128)v73;
              v127 = v74;
              v76 = v10[12];
              v10[4] = v10[11];
              v10[5] = v76;
              v10[6] = v10[13];
              v77 = v10[8];
              *v10 = *v49;
              v10[1] = v77;
              v78 = v10[10];
              v10[2] = v10[9];
              v10[3] = v78;
              v79 = v124;
              *v49 = v123;
              v10[8] = v79;
              v80 = v125;
              v81 = (__int128)v126;
              v82 = v129;
              v10[12] = v128;
              v10[13] = v82;
              v83 = v127;
              v10[10] = v81;
              v10[11] = v83;
              v10[9] = v80;
            }
          }
        }
        return;
      case 5uLL:
        sub_1002A8CF8(v10, v10 + 7, v10 + 14, v10 + 21, (__int128 *)&a2[-7], a3);
        return;
      default:
        if (v13 > 2687)
        {
          if (v12 == 1)
          {
            if (v10 != (__int128 *)a2)
              sub_1002A9074((uint64_t)v10, a2, a2, a3);
            return;
          }
          v15 = v14 >> 1;
          v16 = &v10[7 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x3801)
          {
            sub_1002A82E8(v16, v10, (__int128 *)&a2[-7], a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1002A82E8(v10, v16, (__int128 *)&a2[-7], a3);
            v17 = 7 * v15;
            v18 = &v10[7 * v15 - 7];
            sub_1002A82E8(v10 + 7, v18, (__int128 *)&a2[-14], a3);
            v19 = v10 + 14;
            v20 = &v10[v17 + 7];
            sub_1002A82E8(v19, v20, (__int128 *)&a2[-21], a3);
            sub_1002A82E8(v18, v16, v20, a3);
            v21 = *a1;
            v22 = a1[2];
            v124 = a1[1];
            v125 = v22;
            v123 = v21;
            v23 = a1[3];
            v24 = a1[4];
            v25 = a1[6];
            v128 = a1[5];
            v129 = v25;
            v126 = (__n128)v23;
            v127 = v24;
            v26 = v16[6];
            v28 = v16[3];
            v27 = v16[4];
            a1[5] = v16[5];
            a1[6] = v26;
            a1[3] = v28;
            a1[4] = v27;
            v29 = *v16;
            v30 = v16[2];
            a1[1] = v16[1];
            a1[2] = v30;
            *a1 = v29;
            v31 = v123;
            v32 = v125;
            v16[1] = v124;
            v16[2] = v32;
            *v16 = v31;
            v33 = (__int128)v126;
            v34 = v127;
            v35 = v129;
            v16[5] = v128;
            v16[6] = v35;
            v16[3] = v33;
            v16[4] = v34;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((sub_1002A7D0C(a3, (uint64_t)(a1 - 7), (uint64_t)a1) & 1) == 0)
          {
            v10 = sub_1002A859C(a1, (__int128 *)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v36 = sub_1002A8760(a1, (unint64_t)a2, a3);
          if ((v37 & 1) == 0)
            goto LABEL_14;
          v38 = sub_1002A892C(a1, v36, a3);
          v10 = v36 + 7;
          if (!sub_1002A892C(v36 + 7, (__int128 *)a2, a3))
          {
            v11 = v12 + 1;
            if (v38)
              continue;
LABEL_14:
            sub_1002A7634(a1, v36, a3, -v12, a5 & 1);
            v10 = v36 + 7;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v36;
          if (v38)
            return;
          goto LABEL_1;
        }
        v84 = (uint64_t)(v10 + 7);
        v86 = v10 == (__int128 *)a2 || v84 == (_QWORD)a2;
        if ((a5 & 1) != 0)
        {
          if (!v86)
          {
            v87 = 0;
            v88 = v10;
            do
            {
              v95 = (uint64_t)v88;
              v88 = (__int128 *)v84;
              if (sub_1002A7D0C(a3, v84, v95))
              {
                v96 = *v88;
                v97 = v88[2];
                v124 = v88[1];
                v125 = v97;
                v123 = v96;
                v98 = (__n128)v88[3];
                v99 = v88[4];
                v100 = v88[6];
                v128 = v88[5];
                v129 = v100;
                v126 = v98;
                v127 = v99;
                v101 = v87;
                do
                {
                  v102 = (__int128 *)((char *)v10 + v101);
                  v103 = *(__int128 *)((char *)v10 + v101 + 80);
                  v102[11] = *(__int128 *)((char *)v10 + v101 + 64);
                  v102[12] = v103;
                  v102[13] = *(__int128 *)((char *)v10 + v101 + 96);
                  v104 = *(__int128 *)((char *)v10 + v101 + 16);
                  v102[7] = *(__int128 *)((char *)v10 + v101);
                  v102[8] = v104;
                  v105 = *(__int128 *)((char *)v10 + v101 + 48);
                  v102[9] = *(__int128 *)((char *)v10 + v101 + 32);
                  v102[10] = v105;
                  if (!v101)
                  {
                    v89 = v10;
                    goto LABEL_38;
                  }
                  v101 -= 112;
                }
                while ((sub_1002A7D0C(a3, (uint64_t)&v123, (uint64_t)v10 + v101) & 1) != 0);
                v89 = (__int128 *)((char *)v10 + v101 + 112);
LABEL_38:
                v90 = v123;
                v91 = v125;
                v89[1] = v124;
                v89[2] = v91;
                *v89 = v90;
                v92 = v126;
                v93 = v127;
                v94 = v129;
                v89[5] = v128;
                v89[6] = v94;
                v89[3] = (__int128)v92;
                v89[4] = v93;
              }
              v84 = (uint64_t)(v88 + 7);
              v87 += 112;
            }
            while (v88 + 7 != (__int128 *)a2);
          }
        }
        else if (!v86)
        {
          v106 = v10 - 7;
          do
          {
            v107 = (uint64_t)a1;
            a1 = (__int128 *)v84;
            if (sub_1002A7D0C(a3, v84, v107))
            {
              v108 = *a1;
              v109 = a1[2];
              v124 = a1[1];
              v125 = v109;
              v123 = v108;
              v110 = a1[3];
              v111 = a1[4];
              v112 = a1[6];
              v128 = a1[5];
              v129 = v112;
              v126 = (__n128)v110;
              v127 = v111;
              v113 = v106;
              do
              {
                v114 = v113[12];
                v113[18] = v113[11];
                v113[19] = v114;
                v113[20] = v113[13];
                v115 = v113[8];
                v113[14] = v113[7];
                v113[15] = v115;
                v116 = v113[10];
                v113[16] = v113[9];
                v113[17] = v116;
                v117 = sub_1002A7D0C(a3, (uint64_t)&v123, (uint64_t)v113);
                v113 -= 7;
              }
              while ((v117 & 1) != 0);
              v118 = v123;
              v119 = v125;
              v113[15] = v124;
              v113[16] = v119;
              v113[14] = v118;
              v120 = v126;
              v121 = v127;
              v122 = v129;
              v113[19] = v128;
              v113[20] = v122;
              v113[17] = (__int128)v120;
              v113[18] = v121;
            }
            v84 = (uint64_t)(a1 + 7);
            v106 += 7;
          }
          while (a1 + 7 != (__int128 *)a2);
        }
        return;
    }
  }
}

void sub_1000B19A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B1B08(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _OWORD *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  _BYTE buf[24];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_100047D14(a3, (a2[1] - *a2) >> 3);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (qword_100417ED8 == -1)
      {
        v8 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_10;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_100406268);
        v8 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_10;
      }
      v9 = (_QWORD *)(*(_QWORD *)v6 + 8);
      if (*(char *)(*(_QWORD *)v6 + 31) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Requesting load for floor %{private}s", buf, 0xCu);
LABEL_10:
      sub_10008930C(&v27, *(_QWORD *)v6 + 8);
      sub_1000B1E3C(a1, &v27, (uint64_t)buf);
      v10 = v28;
      if (!v28)
        goto LABEL_14;
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        v13 = *(_OWORD **)(a3 + 8);
        if ((unint64_t)v13 >= *(_QWORD *)(a3 + 16))
        {
LABEL_15:
          v14 = sub_100314168((char **)a3, (uint64_t)&buf[8]);
          v15 = *(std::__shared_weak_count **)&buf[16];
          *(_QWORD *)(a3 + 8) = v14;
          if (v15)
          {
            v16 = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          goto LABEL_4;
        }
      }
      else
      {
LABEL_14:
        v13 = *(_OWORD **)(a3 + 8);
        if ((unint64_t)v13 >= *(_QWORD *)(a3 + 16))
          goto LABEL_15;
      }
      *v13 = *(_OWORD *)&buf[8];
      *(_QWORD *)(a3 + 8) = v13 + 1;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v7);
  }
  v18 = *(_QWORD **)(a1 + 56);
  if (v18)
  {
    v19 = (_QWORD *)(a1 + 40);
    do
    {
      while (1)
      {
        v20 = v18[5];
        if (!v20 || *(_QWORD *)(v20 + 8) == -1)
          break;
        v18 = (_QWORD *)*v18;
        if (!v18)
          return;
      }
      v21 = (_QWORD *)*v18;
      sub_10002BB38(v19, v18, (uint64_t)buf);
      v22 = *(_QWORD **)buf;
      *(_QWORD *)buf = 0;
      if (v22)
      {
        if (buf[16])
        {
          v23 = (std::__shared_weak_count *)v22[5];
          if (v23)
            std::__shared_weak_count::__release_weak(v23);
          v24 = (std::__shared_weak_count *)v22[3];
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        operator delete(v22);
      }
      v18 = v21;
    }
    while (v21);
  }
}

void sub_1000B1DDC(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

void sub_1000B1DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  va_list va;

  va_start(va, a5);
  sub_10024DE90((uint64_t)va);
  sub_1000F7D3C(v5);
  _Unwind_Resume(a1);
}

void sub_1000B1E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v3;
  va_list va;

  va_start(va, a3);
  sub_100195804((uint64_t)va);
  sub_1000F7D3C(v3);
  _Unwind_Resume(a1);
}

void sub_1000B1E28(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_1000B1E3C@<X0>(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X8>)
{
  const void ***v6;
  const void ***v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *result;
  const void **v10;
  uint64_t v11;
  const void **v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v6 = sub_10002BCA4((_QWORD *)(a1 + 40), a2);
  v7 = v6;
  if (!v6)
    sub_10006E4F8(a1, (char **)a2, &v11);
  v8 = (std::__shared_weak_count *)v6[5];
  if (!v8 || (result = std::__shared_weak_count::lock(v8)) == 0)
  {
    v12 = 0;
    v13 = 0;
LABEL_7:
    sub_10006E4F8(a1, (char **)a2, &v11);
  }
  v10 = v7[4];
  v12 = v10;
  v13 = result;
  if (!v10)
    goto LABEL_7;
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

void sub_1000B1FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000B2000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000B2014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1000B2028(uint64_t a1, uint64_t ***a2, uint64_t a3, const void ***a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  const void ***v12;
  const void **v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  const void ***v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v8 = sub_1000B40D8((uint64_t)v37, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = (unint64_t)v13[1];
            if (v15 == v9)
            {
              if ((sub_1000790EC((const void ***)v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v13 = (const void **)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if ((sub_1000790EC((const void ***)v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (const void **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (const void ***)(a1 + 16);
  v17 = (const void **)operator new(0x30uLL);
  v13 = v17;
  v37[0] = v17;
  v37[1] = a1 + 16;
  *v17 = 0;
  v17[1] = (const void *)v9;
  v18 = *a4;
  v17[2] = **a4;
  v19 = (unint64_t *)v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v17[4] = 0;
  v17[5] = 0;
  v38 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v10 && (float)(v23 * (float)v10) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v25)
    {
LABEL_29:
      *v13 = *v25;
LABEL_64:
      *v25 = v13;
      goto LABEL_65;
    }
  }
  else
  {
    v26 = 1;
    if (v10 >= 3)
      v26 = (v10 & (v10 - 1)) != 0;
    v27 = v26 | (2 * v10);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v34 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v4 = v9;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v9);
        if (v25)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v34 & v9;
      v24 = *(_QWORD *)a1;
      v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v34 & v9));
      if (v25)
        goto LABEL_29;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*v13)
  {
    v35 = *((_QWORD *)*v13 + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v25 = (const void ***)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1000B2378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003140E0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1000B238C(double a1)
{
  return a1 / 1.4;
}

void sub_1000B23A0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  v5 = (_QWORD *)nullsub_10(a2);
  if (*v5 != v5[1])
  {
    v6 = sub_1000B24A4(a2);
    sub_10022C99C(*(_QWORD **)(a1 + 176), v6);
    sub_10024D820(*(_QWORD *)(a1 + 296), v6);
  }
  v7 = *(uint64_t **)(a1 + 1920);
  for (i = *(uint64_t **)(a1 + 1928); v7 != i; ++v7)
  {
    v9 = *v7;
    v10 = (uint64_t *)nullsub_10(a2);
    v11 = *v10;
    v12 = v10[1];
    v13 = sub_1000B24A4(a2);
    (*(void (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11 != v12, v13);
  }
  std::mutex::unlock(v4);
}

void sub_1000B2470(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000B2484(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B2498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_1000B24A4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  _BOOL8 v12;

  v2 = (_QWORD *)nullsub_10(a1);
  if (*v2 == v2[1])
    return 0;
  v3 = nullsub_10(a1);
  v5 = *(const void **)v3;
  v4 = *(_QWORD *)(v3 + 8);
  v6 = v4 - *(_QWORD *)v3;
  if (v4 == *(_QWORD *)v3)
    return 1;
  if (v6 < 0)
    sub_1000D02C0();
  v7 = (char *)operator new(v4 - *(_QWORD *)v3);
  memcpy(v7, v5, v6);
  v8 = 0;
  v9 = 8 * (v6 >> 3) - 8;
  do
  {
    v10 = sub_100086528(*(_QWORD *)&v7[v8]);
    if (v10)
      v11 = v9 == v8;
    else
      v11 = 1;
    v8 += 8;
  }
  while (!v11);
  v12 = v10 != 0;
  operator delete(v7);
  return v12;
}

void sub_1000B2598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000B25C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  const void *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v16;
  void *__p[2];
  char v18;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 == *(_QWORD *)a2)
  {
    v8 = 0;
    v9 = 0;
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    v10 = *(const void **)a3;
    v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v11)
      goto LABEL_4;
LABEL_8:
    if ((v9 - v8) >> 3)
      goto LABEL_10;
    return a1;
  }
  if (v7 < 0)
    sub_1000D02C0();
  v8 = (char *)operator new(v5 - *(_QWORD *)a2);
  *a1 = v8;
  a1[1] = v8;
  v9 = &v8[8 * (v7 >> 3)];
  a1[2] = v9;
  memcpy(v8, v6, v7);
  a1[1] = v9;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (!v11)
    goto LABEL_8;
LABEL_4:
  v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 5);
  if (v12 >= 0x19999999999999ALL)
    sub_1000D02C0();
  v13 = (char *)operator new(v11);
  a1[3] = v13;
  a1[4] = v13;
  v14 = &v13[32 * (v11 >> 5)];
  a1[5] = v14;
  memcpy(v13, v10, v11);
  a1[4] = v14;
  if (v12 < (v9 - v8) >> 3)
  {
LABEL_10:
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v16);
  }
  return a1;
}

void sub_1000B2754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void *v17;
  void *v18;

  if (a14 < 0)
  {
    operator delete(__p);
    v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      v18 = *(void **)v14;
      if (!*(_QWORD *)v14)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v17 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v14 + 32) = v17;
  operator delete(v17);
  v18 = *(void **)v14;
  if (!*(_QWORD *)v14)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v14 + 8) = v18;
  operator delete(v18);
  goto LABEL_5;
}

void sub_1000B27B8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x1000B2778);
  JUMPOUT(0x1000B2770);
}

uint64_t *sub_1000B27CC(uint64_t *result, uint64_t *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;

  result[1] = 0;
  v3 = result + 1;
  result[2] = 0;
  *result = (uint64_t)(result + 1);
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 16 * v7) + 56))(*(_QWORD *)(v4 + 16 * v7));
      v9 = *((_DWORD *)result + 404);
      if (!v8 || v9 != v2)
      {
        v10 = *v3;
        v11 = v3;
        v12 = v3;
        if (*v3)
        {
          while (1)
          {
            while (1)
            {
              v12 = (_QWORD *)v10;
              v13 = *(_DWORD *)(v10 + 32);
              if (v9 >= v13)
                break;
              v10 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v13 >= v9)
              break;
            v10 = v12[1];
            if (!v10)
            {
              v11 = v12 + 1;
              goto LABEL_15;
            }
          }
        }
        else
        {
LABEL_15:
          v14 = operator new(0x30uLL);
          v14[8] = v9;
          *((_QWORD *)v14 + 5) = v7;
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v14 + 1) = 0;
          *((_QWORD *)v14 + 2) = v12;
          *v11 = v14;
          v15 = *(_QWORD *)*v6;
          if (v15)
          {
            *v6 = v15;
            v14 = (_DWORD *)*v11;
          }
          result = sub_1000E05F4((uint64_t *)v6[1], (uint64_t *)v14);
          ++v6[2];
        }
        v8 = 1;
        v2 = v9;
      }
      ++v7;
      v4 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void sub_1000B28FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10004AAA0(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1000B2914(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  std::string::size_type *v12;
  int v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::value_type *v30;
  __int128 *v31;
  std::string::size_type *v32;
  unint64_t v33;
  __int128 v34;
  std::string::value_type v35;
  std::bad_cast *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[3];
  void *v41;
  void *v42;
  char v43;
  _QWORD v44[2];
  char v45;
  int v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::bad_cast v51;
  _UNKNOWN **v52;
  _UNKNOWN **v53;
  _BYTE v54[6];
  char *v55;
  _BYTE *v56;

  sub_1000B3324(a1 + 2, a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1000B2F20(a1, a2);
  if (a1[12])
  {
    v4 = a1 + 13;
    do
    {
      v5 = a1[11];
      v6 = *(_QWORD *)(a1[8] + 8 * (v5 / 0x49));
      v7 = v5 % 0x49;
      if (a1[1] + *(_QWORD *)(v6 + 56 * v7 + 48) >= a2)
        return;
      v8 = v6 + 56 * v7;
      v10 = *(_DWORD **)v8;
      v9 = *(_DWORD **)(v8 + 8);
      while (v10 != v9)
      {
        v12 = (std::string::size_type *)(v10 + 2);
        v11 = *v10;
        if (v11 == v11 >> 31)
        {
          v47.__r_.__value_.__l.__size_ = *v12;
          v13 = v11;
        }
        else
        {
          v14 = *(_OWORD *)v12;
          LODWORD(v48.__r_.__value_.__l.__data_) = v10[6];
          *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = v14;
          v13 = *v10;
          v11 = (int)*v10 >> 31;
        }
        LODWORD(v47.__r_.__value_.__l.__data_) = v13 ^ v11;
        v15 = sub_1000411C0(a1 + 13, (uint64_t)&v47);
        if (!v15)
        {
          v38 = a1[16];
          v43 = 0;
          LOBYTE(v42) = 0;
          memset(&v47, 0, sizeof(v47));
          std::string::assign(&v47, "Can't find mac ");
          memset(&v48, 0, sizeof(v48));
          if ((sub_1001DFB30((uint64_t)v10, &v48) & 1) == 0)
          {
            v36 = std::bad_cast::bad_cast(&v51);
            v51.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
            sub_1000F9804((uint64_t)v36);
          }
          memset(&v49, 0, sizeof(v49));
          std::string::assign(&v49, " among size=");
          memset(&v50, 0, sizeof(v50));
          v55 = (char *)&v51.__vftable + 2;
          v56 = v54;
          v44[0] = v38;
          v44[1] = v54;
          v45 = 48;
          v46 = 48;
          v26 = sub_1001E2CD8((uint64_t)v44);
          v55 = (char *)v26;
          v56 = v54;
          v27 = (std::string::size_type)&v54[-v26];
          v28 = &v50;
          if ((unint64_t)&v54[-v26] >= 0x17)
          {
            v37 = &v54[-v26];
            v39 = v26;
            std::string::__grow_by(&v50, 0x16uLL, v27 - 22, 0, 0, 0, 0);
            v26 = v39;
            v50.__r_.__value_.__l.__size_ = 0;
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v28 = &v50;
            else
              v28 = (std::string *)v50.__r_.__value_.__r.__words[0];
            v27 = (std::string::size_type)v37;
          }
          if ((_BYTE *)v26 == v54)
          {
            v29 = v28;
          }
          else
          {
            if (v27 < 0x20 || (unint64_t)v28 - v26 < 0x20)
            {
              v29 = v28;
              v30 = (std::string::value_type *)v26;
            }
            else
            {
              v29 = (std::string *)((char *)v28 + (v27 & 0xFFFFFFFFFFFFFFE0));
              v30 = (std::string::value_type *)(v26 + (v27 & 0xFFFFFFFFFFFFFFE0));
              v31 = (__int128 *)(v26 + 16);
              v32 = &v28->__r_.__value_.__r.__words[2];
              v33 = v27 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v34 = *v31;
                *((_OWORD *)v32 - 1) = *(v31 - 1);
                *(_OWORD *)v32 = v34;
                v31 += 2;
                v32 += 4;
                v33 -= 32;
              }
              while (v33);
              if (v27 == (v27 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_57;
            }
            do
            {
              v35 = *v30++;
              v29->__r_.__value_.__s.__data_[0] = v35;
              v29 = (std::string *)((char *)v29 + 1);
            }
            while (v30 != v54);
          }
LABEL_57:
          v29->__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            v50.__r_.__value_.__l.__size_ = v27;
          else
            *((_BYTE *)&v50.__r_.__value_.__s + 23) = v27 & 0x7F;
          sub_100174738((uint64_t)&v42, (uint64_t)&v47, 4);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v50.__r_.__value_.__l.__data_);
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_67;
LABEL_62:
            if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_63;
LABEL_68:
            operator delete(v48.__r_.__value_.__l.__data_);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_69;
LABEL_64:
            if (v43 < 0)
LABEL_70:
              operator delete(v42);
          }
          else
          {
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_62;
LABEL_67:
            operator delete(v49.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_68;
LABEL_63:
            if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_64;
LABEL_69:
            operator delete(v47.__r_.__value_.__l.__data_);
            if (v43 < 0)
              goto LABEL_70;
          }
          sub_1000F2AE4((uint64_t)&v41);
        }
        v16 = v15[6] - 1;
        v15[6] = v16;
        if (!v16)
        {
          v17 = (int8x8_t)a1[14];
          v18 = v15[1];
          v19 = (uint8x8_t)vcnt_s8(v17);
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v17)
              v18 %= *(_QWORD *)&v17;
          }
          else
          {
            v18 &= *(_QWORD *)&v17 - 1;
          }
          v20 = *v15;
          v21 = *(uint64_t **)(*v4 + 8 * v18);
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21 != v15);
          if (v22 == a1 + 15)
            goto LABEL_32;
          v23 = v22[1];
          if (v19.u32[0] > 1uLL)
          {
            if (v23 >= *(_QWORD *)&v17)
              v23 %= *(_QWORD *)&v17;
          }
          else
          {
            v23 &= *(_QWORD *)&v17 - 1;
          }
          if (v23 == v18)
          {
LABEL_34:
            if (v20)
              goto LABEL_35;
          }
          else
          {
LABEL_32:
            if (!v20)
              goto LABEL_33;
            v24 = *(_QWORD *)(v20 + 8);
            if (v19.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&v17)
                v24 %= *(_QWORD *)&v17;
            }
            else
            {
              v24 &= *(_QWORD *)&v17 - 1;
            }
            if (v24 != v18)
            {
LABEL_33:
              *(_QWORD *)(*v4 + 8 * v18) = 0;
              v20 = *v15;
              goto LABEL_34;
            }
LABEL_35:
            v25 = *(_QWORD *)(v20 + 8);
            if (v19.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&v17)
                v25 %= *(_QWORD *)&v17;
            }
            else
            {
              v25 &= *(_QWORD *)&v17 - 1;
            }
            if (v25 != v18)
            {
              *(_QWORD *)(*v4 + 8 * v25) = v22;
              v20 = *v15;
            }
          }
          *v22 = v20;
          *v15 = 0;
          --a1[16];
          operator delete(v15);
        }
        v10 += 52;
      }
      sub_1002327EC((uint64_t)(a1 + 7));
    }
    while (a1[12]);
  }
}

void sub_1000B2E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B2F20(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint8_t buf[8];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  v2 = a1[20];
  if (v2)
  {
    v30 = a1 + 18;
    v5 = a1 + 23;
    v6 = a1 + 25;
    while (1)
    {
      while (a1[1] + *(_QWORD *)(v2 + 72) < a2)
      {
        v8 = *(_QWORD *)(v2 + 24);
        v7 = *(_QWORD *)(v2 + 32);
        if (v8 != v7)
        {
          while (1)
          {
            *(_QWORD *)buf = v8;
            v14 = sub_10004142C((uint64_t)v5, v8, (uint64_t)&unk_100395958, (int **)buf);
            if (v14[6] != 1)
              break;
            v15 = sub_1000411C0(v5, v8);
            if (v15)
            {
              v16 = (int8x8_t)a1[24];
              v17 = v15[1];
              v18 = (uint8x8_t)vcnt_s8(v16);
              v18.i16[0] = vaddlv_u8(v18);
              if (v18.u32[0] > 1uLL)
              {
                if (v17 >= *(_QWORD *)&v16)
                  v17 %= *(_QWORD *)&v16;
              }
              else
              {
                v17 &= *(_QWORD *)&v16 - 1;
              }
              v19 = *(uint64_t **)(*v5 + 8 * v17);
              do
              {
                v20 = v19;
                v19 = (uint64_t *)*v19;
              }
              while (v19 != v15);
              if (v20 == v6)
                goto LABEL_34;
              v21 = v20[1];
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= *(_QWORD *)&v16)
                  v21 %= *(_QWORD *)&v16;
              }
              else
              {
                v21 &= *(_QWORD *)&v16 - 1;
              }
              if (v21 != v17)
              {
LABEL_34:
                if (!*v15)
                  goto LABEL_35;
                v22 = *(_QWORD *)(*v15 + 8);
                if (v18.u32[0] > 1uLL)
                {
                  if (v22 >= *(_QWORD *)&v16)
                    v22 %= *(_QWORD *)&v16;
                }
                else
                {
                  v22 &= *(_QWORD *)&v16 - 1;
                }
                if (v22 != v17)
LABEL_35:
                  *(_QWORD *)(*v5 + 8 * v17) = 0;
              }
              v23 = *v15;
              if (*v15)
              {
                v24 = *(_QWORD *)(v23 + 8);
                if (v18.u32[0] > 1uLL)
                {
                  if (v24 >= *(_QWORD *)&v16)
                    v24 %= *(_QWORD *)&v16;
                }
                else
                {
                  v24 &= *(_QWORD *)&v16 - 1;
                }
                if (v24 != v17)
                {
                  *(_QWORD *)(*v5 + 8 * v24) = v20;
                  v23 = *v15;
                }
              }
              *v20 = v23;
              *v15 = 0;
              --a1[26];
              operator delete(v15);
              v8 += 208;
              if (v8 == v7)
                goto LABEL_6;
            }
            else
            {
LABEL_17:
              v8 += 208;
              if (v8 == v7)
                goto LABEL_6;
            }
          }
          --v14[6];
          goto LABEL_17;
        }
LABEL_6:
        if (qword_100417ED8 != -1)
        {
          dispatch_once(&qword_100417ED8, &stru_1003FEDD0);
          v9 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            goto LABEL_9;
          goto LABEL_8;
        }
        v9 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_8:
          v10 = *(_DWORD *)(v2 + 16);
          v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 4);
          v12 = a1[1];
          v13 = a2 - *(_QWORD *)(v2 + 72);
          *(_DWORD *)buf = 67175425;
          *(_DWORD *)&buf[4] = v10;
          v32 = 2048;
          v33 = v11;
          v34 = 2048;
          v35 = v12;
          v36 = 2048;
          v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Age out freq=%{private}d, size=%zu, fWindowLength=%lld, age = %lld", buf, 0x26u);
        }
LABEL_9:
        v2 = sub_100233EA4(v30, (uint64_t *)v2);
        if (!v2)
          return;
      }
      if (qword_100417ED8 != -1)
        break;
      v25 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_45;
LABEL_3:
      v2 = *(_QWORD *)v2;
      if (!v2)
        return;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FEDD0);
    v25 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_3;
LABEL_45:
    v26 = *(_DWORD *)(v2 + 16);
    v27 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 4);
    v28 = a1[1];
    v29 = a2 - *(_QWORD *)(v2 + 72);
    *(_DWORD *)buf = 67175425;
    *(_DWORD *)&buf[4] = v26;
    v32 = 2048;
    v33 = v27;
    v34 = 2048;
    v35 = v28;
    v36 = 2048;
    v37 = v29;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Keeping freq= %{private}d, size=%zu, fWindowLength=%lld, age = %lld", buf, 0x26u);
    goto LABEL_3;
  }
}

_QWORD *sub_1000B3324@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;

  v4 = (char *)result[1];
  v5 = (char *)result[2];
  if (v4 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = result;
    v7 = 0;
    v8 = (v5 - v4) >> 4;
    v9 = *result;
    v10 = (uint64_t *)result[1];
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (v9 >= a2 - v11)
        break;
      ++v7;
      *((_DWORD *)result + 8) = 2;
      if (v8 == v7)
        goto LABEL_9;
    }
    if (v8 != v7)
      goto LABEL_10;
LABEL_9:
    *((_DWORD *)result + 8) = 1;
    v7 = (v5 - v4) >> 4;
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v7)
    {
      if (v7 < 0)
        sub_1000D02C0();
      v12 = 16 * v7;
      v13 = (char *)operator new(16 * v7);
      v14 = &v4[16 * v7];
      *a3 = v13;
      v15 = &v13[16 * v7];
      a3[2] = v15;
      result = memmove(v13, v4, v12);
      a3[1] = v15;
      if (v5 != v14)
        result = memmove(v4, &v4[v12], v5 - v14);
      v6[2] = &v4[v5 - v14];
    }
  }
  return result;
}

void sub_1000B3440(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_1000B3460(uint64_t a1)
{
  return sub_1000B5468((char **)(a1 + 24));
}

uint64_t sub_1000B346C(uint64_t result)
{
  if (*(_BYTE *)(result + 48))
    *(_BYTE *)(result + 48) = 0;
  return result;
}

uint64_t sub_1000B347C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t ****)(a2 + 16); i; i = (uint64_t ***)*i)
    sub_1000B35BC(a1, i + 2, i + 2);
  return a1;
}

void sub_1000B3594(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E45B8(v1);
  _Unwind_Resume(a1);
}

void sub_1000B35A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E45B8(v1);
  _Unwind_Resume(a1);
}

const void ***sub_1000B35BC(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  const void ****v11;
  const void ***v12;
  unint64_t v13;
  const void **v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  char v35;

  v7 = sub_1000B40D8((uint64_t)v34, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(const void *****)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == (const void **)v8)
            {
              if ((sub_1000790EC(v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (const void ***)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if ((sub_1000790EC(v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (const void ***)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x7A0uLL);
  v34[0] = v15;
  v34[1] = a1 + 16;
  v35 = 0;
  *v15 = 0;
  v15[1] = v8;
  v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_1000B53CC(v15 + 4, a3 + 2);
  v35 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        v22 = (_QWORD *)v34[0];
        if (v21)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        v22 = (_QWORD *)v34[0];
        if (v21)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v31 & v8;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v8));
      v22 = (_QWORD *)v34[0];
      if (v21)
        goto LABEL_29;
    }
LABEL_53:
    *v22 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v34[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v34[0])
    {
      v32 = *(_QWORD *)(*(_QWORD *)v34[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v32 >= v9)
          v32 %= v9;
      }
      else
      {
        v32 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v34[0];
    }
    goto LABEL_64;
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v22 = (_QWORD *)v34[0];
  if (!v21)
    goto LABEL_53;
LABEL_29:
  *v22 = *v21;
  *v21 = v34[0];
LABEL_64:
  v12 = (const void ***)v34[0];
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1000B3930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000B3944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
    sub_100342CC0(v4);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B3964(uint64_t a1)
{
  uint64_t v2;
  std::logic_error *exception;

  v2 = sub_1000B4684();
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Runtime configuration is null");
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1);
}

void sub_1000B3A20(_Unwind_Exception *a1, int a2)
{
  _DWORD *v2;
  void *v3;

  if (!a2)
    _Unwind_Resume(a1);
  __cxa_free_exception(v3);
  __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003F6468);
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
LABEL_4:
      sub_10016A398();
  }
  *v2 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1000B39ACLL);
}

void sub_1000B3B40(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t *v13;
  std::locale v14;
  std::string __p;
  char *__dst;
  size_t v17;
  int64_t v18;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v17 = v7;
    v18 = v10 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v18) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  std::locale::locale(&v14);
  if (v18 >= 0)
    v11 = (char *)&__dst;
  else
    v11 = __dst;
  v12 = HIBYTE(v18);
  if (v18 < 0)
    v12 = v17;
  sub_1000CDD78(&__p, v11, &v14, &v11[v12]);
  std::locale::~locale(&v14);
  if (SHIBYTE(v18) < 0)
    operator delete(__dst);
  v13 = sub_1000B3E90((_QWORD *)(a2 + 8), (uint64_t)&__p);
  if (v13)
  {
    sub_1000D0028(a3, (uint64_t)(v13 + 5));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  sub_1000B4380(__s, (uint64_t)&__dst);
  if ((_DWORD)__dst == (int)__dst >> 31)
    sub_1000B4118(__s, (_QWORD *)(a2 + 72), a3);
  else
    sub_1000CFEC8(a3, (uint64_t)&__dst);
  sub_1000B3D5C((uint64_t)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
}

void sub_1000B3D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1000B3D5C((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000B3D5C(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_1000B3D9C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  else
    sub_1000B3D8C();
}

void sub_1000B3DB8(uint64_t a1)
{
  void **v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = *(void ***)(a1 + 8);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v3 = (uint64_t)v1[1];
      v4 = *v1;
      if ((void *)v3 != v2)
      {
        do
        {
          v3 -= 32;
          sub_1000B3D5C(v3);
        }
        while ((void *)v3 != v2);
        v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    operator delete();
  }
  sub_1000B3D8C();
}

void sub_1000B3E1C(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void **v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(void ***)(v1 + 16);
    if (v2)
    {
      do
      {
        v4 = (void **)*v2;
        sub_1000B3D5C((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v4;
      }
      while (v4);
    }
    v3 = *(void **)v1;
    *(_QWORD *)v1 = 0;
    if (v3)
      operator delete(v3);
    operator delete();
  }
  sub_1000B3D8C();
}

uint64_t *sub_1000B3E90(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1000CFA7C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

BOOL sub_1000B40BC(_QWORD *a1, uint64_t ***a2)
{
  return sub_1000A9C6C(a1, a2) != 0;
}

unint64_t sub_1000B40D8(uint64_t a1, uint64_t ***a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  char v7;

  v2 = *((unsigned __int8 *)*a2 + 23);
  v3 = (*a2)[1];
  if ((v2 & 0x80u) == 0)
    v4 = (uint64_t *)*a2;
  else
    v4 = **a2;
  if ((v2 & 0x80u) == 0)
    v5 = v2;
  else
    v5 = (unint64_t)v3;
  return sub_1000CFA7C((uint64_t)&v7, v4, v5);
}

void sub_1000B4118(char *__s@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  std::locale v13;
  char *__dst;
  size_t v15;
  int64_t v16;
  std::string __p;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v15 = v7;
    v16 = v10 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  std::locale::locale(&v13);
  if (v16 >= 0)
    v11 = (char *)&__dst;
  else
    v11 = __dst;
  v12 = HIBYTE(v16);
  if (v16 < 0)
    v12 = v15;
  sub_1000CDD78(&__p, v11, &v13, &v11[v12]);
  std::locale::~locale(&v13);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  sub_1000B4290(a2, (uint64_t *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000B4258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000B4290(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t *v7;
  const __CFString *v8;
  __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  void *v12;
  const void *v13;

  v6 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  v8 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%s"), a1[3], v7));
  v9 = (__CFString *)v8;
  v10 = (const __CFString *)a1[1];
  v11 = (const __CFString *)a1[2];
  if (v11 == kCFPreferencesCurrentUser)
    v12 = (void *)CFPreferencesCopyAppValue(v8, v10);
  else
    v12 = (void *)CFPreferencesCopyValue(v8, v10, v11, kCFPreferencesCurrentHost);
  v13 = v12;
  sub_1000B4690(a3, v12);
  if (v13)
    CFRelease(v13);

  objc_autoreleasePoolPop(v6);
}

void sub_1000B4368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  sub_10030BE4C((const void **)va);

  _Unwind_Resume(a1);
}

void sub_1000B4380(char *__s@<X1>, uint64_t a2@<X8>)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  std::locale v11;
  char *__dst;
  size_t v13;
  int64_t v14;
  std::string __p;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v13 = v5;
    v14 = v8 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  std::locale::locale(&v11);
  if (v14 >= 0)
    v9 = (char *)&__dst;
  else
    v9 = __dst;
  v10 = HIBYTE(v14);
  if (v14 < 0)
    v10 = v13;
  sub_1000CDD78(&__p, v9, &v11, &v9[v10]);
  std::locale::~locale(&v11);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
  sub_1000B44F8((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000B44C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000B44F8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  char v8;
  std::string *p_p;
  char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  std::string __p;

  std::locale::locale((std::locale *)&v17);
  v4 = *(char *)(a1 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5)
    v7 = *(_QWORD *)(a1 + 8);
  sub_1000CDEE0(&__p, v6, (std::locale *)&v17, &v6[v7]);
  std::locale::~locale((std::locale *)&v17);
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v10 = getenv((const char *)p_p);
  if (!v10)
  {
    *(_DWORD *)a2 = 0;
    if ((v8 & 0x80) == 0)
      return;
LABEL_22:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v11 = v10;
  v12 = strlen(v10);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v17 + 1) = v13;
    v18 = v16 | 0x8000000000000000;
    *(_QWORD *)&v17 = v14;
    goto LABEL_19;
  }
  HIBYTE(v18) = v12;
  v14 = &v17;
  if (v12)
LABEL_19:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  *(_OWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)a2 = 3;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_22;
}

void sub_1000B4654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000B4670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B4684()
{
  return qword_100419BE8;
}

void sub_1000B4690(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  id v17;
  unint64_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char isKindOfClass;
  objc_class *v29;
  NSString *v30;
  void *v31;
  void *v32;
  void *v33;
  objc_class *v34;
  NSString *v35;
  NSString *v36;
  void *v37;
  _BYTE v38[56];
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  std::runtime_error v45;
  __int128 v46;
  float v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  void *v53[2];
  uint64_t v54;
  _BYTE v55[128];
  _BYTE v56[128];
  std::string v57;
  __int128 v58;
  uint64_t v59;

  v3 = a2;
  if (v3)
  {
    v4 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    {
      objc_msgSend(v3, "ps_STLString");
      *(std::string *)(a1 + 8) = v57;
      *(_DWORD *)a1 = 3;
    }
    else
    {
      v5 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v3, v5) & 1) == 0)
      {
        v10 = objc_opt_class(NSArray);
        if ((objc_opt_isKindOfClass(v3, v10) & 1) != 0)
        {
          v11 = v3;
          v45.__vftable = 0;
          v45.__imp_.__imp_ = 0;
          *(_QWORD *)&v46 = 0;
          sub_10030C0F0((char **)&v45, (unint64_t)objc_msgSend(v11, "count"));
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v12 = v11;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
          if (v13)
          {
            v14 = *(_QWORD *)v49;
            do
            {
              for (i = 0; i != v13; i = (char *)i + 1)
              {
                if (*(_QWORD *)v49 != v14)
                  objc_enumerationMutation(v12);
                sub_1000B4690(&v57, *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i));
                if (v45.__imp_.__imp_ < (const char *)v46)
                  __asm { BR              X9 }
                v45.__imp_.__imp_ = (const char *)sub_10030C2B4(&v45, (uint64_t)&v57);
                sub_1000B3D5C((uint64_t)&v57);
              }
              v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
            }
            while (v13);
          }

          operator new();
        }
        v16 = objc_opt_class(NSDictionary);
        if ((objc_opt_isKindOfClass(v3, v16) & 1) == 0)
        {
          v34 = (objc_class *)objc_opt_class(v3);
          v35 = NSStringFromClass(v34);
          v36 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unsupported type %@ with value %@"), objc_claimAutoreleasedReturnValue(v35), v3);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          __cxa_allocate_exception(0x40uLL);
          if (v37)
            objc_msgSend(v37, "ps_STLString");
          else
            memset(&v57, 0, sizeof(v57));
          std::runtime_error::runtime_error(&v45, &v57);
          v45.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
          sub_10018D04C((uint64_t)v38);
          sub_1000F2F7C(&v45, (uint64_t)"RuntimeConfiguration::Value decode(NSObject *__strong)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/darwin_preferences_runtime_configuration.mm", 107, (uint64_t)v38);
        }
        v17 = v3;
        v45 = (std::runtime_error)0;
        v46 = 0u;
        v47 = 1.0;
        prime = vcvtps_u32_f32((float)(unint64_t)objc_msgSend(v17, "count") / 1.0);
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        if ((const char *)prime > v45.__imp_.__imp_)
          goto LABEL_29;
        if ((const char *)prime < v45.__imp_.__imp_)
        {
          v19 = vcvtps_u32_f32((float)*((unint64_t *)&v46 + 1) / v47);
          if (v45.__imp_.__imp_ < (const char *)3
            || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v45.__imp_.__imp_), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
          {
            v19 = std::__next_prime(v19);
          }
          else
          {
            v21 = 1 << -(char)__clz(v19 - 1);
            if (v19 >= 2)
              v19 = v21;
          }
          if (prime <= v19)
            prime = v19;
          if ((const char *)prime < v45.__imp_.__imp_)
LABEL_29:
            sub_100005DD8((uint64_t)&v45, prime);
        }
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v22 = v17;
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v41, v55, 16);
        if (!v23)
        {
LABEL_71:

          operator new();
        }
        v24 = *(_QWORD *)v42;
LABEL_42:
        v25 = 0;
        while (1)
        {
          if (*(_QWORD *)v42 != v24)
            objc_enumerationMutation(v22);
          v26 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * v25);
          if (v26)
          {
            v27 = objc_opt_class(NSString);
            isKindOfClass = objc_opt_isKindOfClass(v26, v27);
          }
          else
          {
            isKindOfClass = 0;
          }
          v29 = (objc_class *)objc_opt_class(v26);
          v30 = NSStringFromClass(v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          v32 = v31;
          if (v31)
          {
            objc_msgSend(v31, "ps_STLStringOnNil:", CFSTR("nil"));
            if ((isKindOfClass & 1) == 0)
              goto LABEL_60;
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            v40 = 0;
            if ((isKindOfClass & 1) == 0)
            {
LABEL_60:
              sub_1000D5048(v53, "");
              sub_1001E0FE4("Unsupported key type ", &v57);
              if (SHIBYTE(v40) < 0)
              {
                sub_10006CED8(&v58, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                v58 = *(_OWORD *)__p;
                v59 = v40;
              }
              sub_100174738((uint64_t)v53, (uint64_t)&v57, 2);
              if (SHIBYTE(v59) < 0)
              {
                operator delete((void *)v58);
                if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_68;
LABEL_65:
                if (SHIBYTE(v54) < 0)
LABEL_69:
                  operator delete(v53[0]);
              }
              else
              {
                if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_65;
LABEL_68:
                operator delete(v57.__r_.__value_.__l.__data_);
                if (SHIBYTE(v54) < 0)
                  goto LABEL_69;
              }
              sub_1000F2AE4((uint64_t)&v52);
            }
          }
          if (SHIBYTE(v40) < 0)
            operator delete(__p[0]);

          if (v26)
          {
            objc_msgSend(v26, "ps_STLString");
          }
          else
          {
            v53[0] = 0;
            v53[1] = 0;
            v54 = 0;
          }
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKeyedSubscript:", v26));
          sub_1000B4690(&v57, v33);
          sub_10030C434((uint64_t)&v45, (uint64_t)v53, (uint64_t)v53, (uint64_t)&v57);
          sub_1000B3D5C((uint64_t)&v57);

          if (SHIBYTE(v54) < 0)
            operator delete(v53[0]);
          if (v23 == (id)++v25)
          {
            v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v41, v55, 16);
            if (!v23)
              goto LABEL_71;
            goto LABEL_42;
          }
        }
      }
      v6 = objc_retainAutorelease(v3);
      v7 = *(unsigned __int8 *)objc_msgSend(v6, "objCType");
      if ((v7 & 0xFFFFFFFD) == 0x64)
      {
        objc_msgSend(v6, "doubleValue");
        *(_QWORD *)(a1 + 8) = v8;
        v9 = 4;
      }
      else if ((v7 & 0xFFFFFFDF) == 0x51)
      {
        *(_QWORD *)(a1 + 8) = objc_msgSend(v6, "longLongValue");
        v9 = 2;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = objc_msgSend(v6, "intValue");
        v9 = 1;
      }
      *(_DWORD *)a1 = v9;

    }
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }

}

void sub_1000B4F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__pa, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,std::runtime_error a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::string *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __break(1u);
}

void sub_1000B52BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v61 - 192));
  if (a55 < 0)
    operator delete(a50);
  __cxa_end_catch();
  JUMPOUT(0x1000B53A0);
}

void sub_1000B5370(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_1000B5398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  sub_1000CF960(&a33);
  JUMPOUT(0x1000B53C4);
}

void sub_1000B53D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 64))
    return;
  v3 = *(_QWORD *)(a1 + 88);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(qword_10041A998 + 16) + 16);
  if (!v4)
LABEL_4:
    v4 = *(_QWORD *)(qword_10041A9A8 + 16);
LABEL_5:
  if (sub_10004F1AC(*(double *)(v4 + 24) + *(double *)(a1 + 40)) < *a2)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      sub_100052B6C((_QWORD *)(a1 + 72));
      *(_BYTE *)(a1 + 64) = 0;
    }
  }
}

char **sub_1000B5468(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  sub_10004AAA0((uint64_t)(a1 + 27), a1[28]);
  v2 = a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  sub_10004AAA0((uint64_t)(a1 + 18), a1[19]);
  v4 = a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  v5 = a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  v6 = a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  sub_10004AAA0((uint64_t)(a1 + 6), a1[7]);
  v7 = a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  v8 = *a1;
  if (*a1)
  {
    v9 = a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

uint64_t *sub_1000B5584(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *i;
  uint64_t *result;

  v6 = (uint64_t *)a1[1];
  for (i = (uint64_t *)a1[2]; v6 != i; v6 += 9)
    sub_1000B5604(v6, a2, a3);
  result = (uint64_t *)a1[4];
  if (result)
    return (uint64_t *)sub_1000B5604(result, a2, a3);
  return result;
}

uint64_t sub_1000B5604(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return sub_1000B5614(*a1, a2, a1[1], a3);
}

uint64_t sub_1000B5614(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t i;

  result = sub_1000B5690(a2);
  if ((result & 1) == 0)
  {
    v9 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); v9 != i; v9 += 80)
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v9, a2, a4);
  }
  return result;
}

BOOL sub_1000B5690(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t sub_1000B56A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = a1[1];
  for (i = a1[2]; v4 != i; v4 += 72)
  {
    v6 = (__n128 *)sub_100050DB0(v4);
    sub_1000B5A88(v6, *(_QWORD *)(a2 + 16) - 250000000, *(_QWORD *)(a2 + 16));
  }
  v7 = a1[4];
  if (v7)
    sub_1000B5760(v7, a2);
  v9 = a1[1];
  v8 = a1[2];
  if (v9 == v8)
    return 0;
  v10 = 0;
  do
  {
    v10 |= sub_1000B5760(v9, a2);
    v9 += 72;
  }
  while (v9 != v8);
  return v10 & 1;
}

BOOL sub_1000B5760(uint64_t a1, uint64_t a2)
{
  return sub_1000B576C(*(_QWORD *)a1, a2, *(float **)(a1 + 8));
}

BOOL sub_1000B576C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  __int16 v12;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  void *__p;
  void *v24[2];
  char v25;
  std::string v26;
  std::string v27;

  if (!*(_BYTE *)(a1 + 120))
    return 0;
  *(_DWORD *)(a1 + 124) = 0;
  v6 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a1 + 112);
  v22 = (float)(a3[7] * (float)v6) / 1000000000.0;
  if (v22 > 0.0)
  {
    sub_1000D5048(v24, "");
    sub_100227518("Deweight amount is not negative or zero:  ", &v26);
    sub_10016EE34(&v22, &v27);
    sub_100174738((uint64_t)v24, (uint64_t)&v26, 2);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v27.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((v25 & 0x80000000) == 0)
          goto LABEL_25;
LABEL_28:
        operator delete(v24[0]);
LABEL_25:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  v7 = sub_10023F73C((double **)(a1 + 8), 0);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v8 != v9)
  {
    v10 = v6 & ~(v6 >> 63);
    v11 = 0.0;
    while (1)
    {
      v12 = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v8, a2, v10);
      v13 = sub_100047C20(v8);
      if (v13 >= 0.0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
      else if (fabs(v13) == INFINITY || (v12 & 1) != 0)
      {
        goto LABEL_6;
      }
      if ((v12 & 0x100) != 0)
      {
        ++*(_DWORD *)(a1 + 124);
        if ((double)*(uint64_t *)(v8 + 72) / 1000000000.0 <= a3[6])
          goto LABEL_6;
        v18 = sub_100047C20(v8);
        v19 = exp(v18 - v7);
        v20 = sub_100047C20(v8);
        v17 = v22;
        v16 = v19 - exp(v20 + v22 - v7);
      }
      else
      {
        v15 = sub_100047C20(v8);
        v16 = exp(v15 - v7);
        v17 = -INFINITY;
      }
      sub_100047C28((double *)v8, v17);
      v11 = v11 + v16;
LABEL_6:
      v8 += 80;
      if (v8 == v9)
        goto LABEL_21;
    }
  }
  v11 = 0.0;
LABEL_21:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 16);
  return sub_1002253D4(a1, v7, v11);
}

void sub_1000B5A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B5A88(__n128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  double v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  __n128 *v11;
  double v12[2];
  void *v13;
  __n128 __p;
  char v15;

  if (a1[7].n128_u8[8])
  {
    v4 = &a1->n128_i64[1];
    if (a1->n128_u64[1] == a1[1].n128_u64[0])
    {
      sub_1000D5048(&__p, "");
      sub_100174738((uint64_t)&__p, 0, 0);
      if (v15 < 0)
        operator delete((void *)__p.n128_u64[0]);
      sub_1000F2AE4((uint64_t)&v13);
    }
    v5 = (*(double (**)(__n128 *, uint64_t, uint64_t))(a1->n128_u64[0] + 16))(a1, a2, a3);
    sub_10023FC48(v4, (uint64_t)v12);
    v6 = log(1.0 - v5);
    v7 = (double *)a1->n128_u64[1];
    v8 = (double *)a1[1].n128_u64[0];
    if (v7 != v8)
    {
      v9 = v6;
      do
      {
        sub_100047C28(v7, v9);
        v7 += 10;
      }
      while (v7 != v8);
    }
    v10 = log(v5);
    sub_100047C28(v12, v10);
    v11 = a1 + 2;
    sub_100241A5C(v12, v11->n128_f64, (uint64_t)&__p);
    sub_10003FADC(v11, &__p);
    sub_100047C20((uint64_t)v11);
  }
}

void sub_1000B5C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B5CAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t *v12;
  _QWORD v13[4];
  _QWORD v14[4];

  v9 = result;
  v10 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16); v10 != i; v10 += 9)
  {
    v14[0] = a2;
    v14[1] = a3;
    v14[2] = a5;
    v14[3] = a4;
    result = sub_1000B5D94(v10, (uint64_t)v14);
  }
  if (*(_QWORD *)(v9 + 32))
  {
    if (sub_1000B5E00(*(_QWORD *)(v9 + 280)))
      sub_1000B5E2C(v9, a2, a3, a4, (uint64_t)v14);
    else
      sub_1000B659C((uint64_t)v14, a4);
    v12 = *(uint64_t **)(v9 + 32);
    v13[0] = a2;
    v13[1] = a3;
    v13[2] = a5;
    v13[3] = v14;
    sub_1000B5D94(v12, (uint64_t)v13);
    return nullsub_30(v14);
  }
  return result;
}

void sub_1000B5D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B5D94(uint64_t *a1, uint64_t a2)
{
  return sub_1000B5DA8(*a1, a1[2], a2);
}

uint64_t sub_1000B5DA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;

  v3 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); v3 != i; v3 += 80)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v3, a3);
  return result;
}

uint64_t sub_1000B5E00(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(unsigned __int8 *)(v1 + 33);
}

void sub_1000B5E2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  double v11;
  void **v12;
  void **v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  void (***v19)(void);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  _BOOL4 v34;
  int64x2_t *v35;
  NSObject *v36;
  const char *v37;
  void (***v38)(_QWORD);
  int64x2_t v39;
  int v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  _DWORD v48[19];

  if (!*(_QWORD *)(a1 + 512))
    goto LABEL_21;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + ((*(_QWORD *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                  + 32 * (*(_QWORD *)(a1 + 504) & 0x7FLL)
                  + 16);
  sub_1000C02E8(*(_QWORD *)(a1 + 280), (uint64_t)buf);
  v11 = *(double *)&v48[1];
  sub_1000C4AFC((uint64_t)buf);
  if ((double)(a2 - v10) * 0.000000001 <= v11)
    goto LABEL_21;
  v12 = *(void ***)(a1 + 480);
  v13 = *(void ***)(a1 + 488);
  if (v13 == v12)
  {
    *(_QWORD *)(a1 + 512) = 0;
    v20 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 504);
    v15 = &v12[v14 >> 7];
    v16 = *(uint64_t *)((char *)v12 + (((*(_QWORD *)(a1 + 512) + v14) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(_QWORD *)(a1 + 512) + v14) & 0x7F);
    if ((char *)*v15 + 32 * (v14 & 0x7F) != (void *)v16)
    {
      v17 = (void (***)(void))((char *)*v15 + 32 * (v14 & 0x7F));
      do
      {
        v18 = *v17;
        v17 += 4;
        (*v18)();
        if ((char *)v17 - (_BYTE *)*v15 == 4096)
        {
          v19 = (void (***)(void))v15[1];
          ++v15;
          v17 = v19;
        }
      }
      while (v17 != (void (***)(void))v16);
      v12 = *(void ***)(a1 + 480);
      v13 = *(void ***)(a1 + 488);
    }
    *(_QWORD *)(a1 + 512) = 0;
    v20 = (char *)v13 - (char *)v12;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v12);
        v21 = *(_QWORD *)(a1 + 488);
        v12 = (void **)(*(_QWORD *)(a1 + 480) + 8);
        *(_QWORD *)(a1 + 480) = v12;
        v20 = v21 - (_QWORD)v12;
      }
      while (v20 > 0x10);
    }
  }
  if (v20 >> 3 == 1)
  {
    v22 = 64;
    goto LABEL_17;
  }
  if (v20 >> 3 == 2)
  {
    v22 = 128;
LABEL_17:
    *(_QWORD *)(a1 + 504) = v22;
  }
  if (qword_100417ED8 == -1)
  {
    v23 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_21;
    goto LABEL_20;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
  v23 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_20:
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + ((*(_QWORD *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                    + 32 * (*(_QWORD *)(a1 + 504) & 0x7FLL)
                    + 16);
    *(_DWORD *)buf = 134218240;
    v47 = v24;
    LOWORD(v48[0]) = 2048;
    *(_QWORD *)((char *)v48 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Clearing DR floor transition signal buffer because the oldest FloorTransitionState was stashed at %lld and it's %lld now!", buf, 0x16u);
  }
LABEL_21:
  v25 = *(_DWORD *)(a4 + 12);
  if (v25 <= 1)
  {
    sub_1000B659C((uint64_t)buf, a4);
    v26 = *(_QWORD *)(a1 + 480);
    v27 = *(_QWORD *)(a1 + 488);
    v28 = 16 * (v27 - v26) - 1;
    *(_QWORD *)&v48[1] = a2;
    if (v27 == v26)
      v28 = 0;
    if (v28 == *(_QWORD *)(a1 + 512) + *(_QWORD *)(a1 + 504))
    {
      sub_10022F9A0(a1 + 472);
      v26 = *(_QWORD *)(a1 + 480);
      v27 = *(_QWORD *)(a1 + 488);
    }
    if (v27 == v26)
    {
      v30 = 0;
    }
    else
    {
      v29 = *(_QWORD *)(a1 + 512) + *(_QWORD *)(a1 + 504);
      v30 = *(_QWORD *)(v26 + ((v29 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v29 & 0x7F);
    }
    sub_1000B659C(v30, (uint64_t)buf);
    ++*(_QWORD *)(a1 + 512);
    if (qword_100417ED8 == -1)
    {
      v31 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_31:
        v32 = "DOWN";
        v33 = *(_QWORD *)(a4 + 16);
        if (!*(_DWORD *)(a4 + 12))
          v32 = "UP";
        v40 = 136315650;
        v41 = v32;
        v42 = 2048;
        v43 = v33;
        v44 = 2048;
        v45 = a2;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Stashing floor transition signal: %s where the sensor event timestamp is %lld at %lld", (uint8_t *)&v40, 0x20u);
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
      v31 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_31;
    }
    nullsub_30(buf);
    v25 = *(_DWORD *)(a4 + 12);
  }
  v34 = sub_1000B63A8(a3, *(_DWORD *)(a4 + 8), v25);
  sub_1000B659C(a5, a4);
  if (v34 && *(_QWORD *)(a1 + 512))
  {
    sub_1000B659C((uint64_t)buf, *(_QWORD *)(*(_QWORD *)(a1 + 480) + ((*(_QWORD *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*(_QWORD *)(a1 + 504) & 0x7FLL));
    *(_DWORD *)(a5 + 12) = v48[0];
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
    v35 = (int64x2_t *)(a1 + 504);
    v36 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
      v37 = "DOWN";
      if (!v48[0])
        v37 = "UP";
      v40 = 136315650;
      v41 = v37;
      v42 = 2048;
      v43 = *(_QWORD *)&v48[1];
      v44 = 2048;
      v45 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Popping floor transition signal: %s stashed at %lld and popped at %lld", (uint8_t *)&v40, 0x20u);
    }
    v38 = (void (***)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 480)
                                                    + ((*(_QWORD *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                                        + 32 * (*(_QWORD *)(a1 + 504) & 0x7FLL));
    (**v38)(v38);
    v39 = vaddq_s64(*v35, (int64x2_t)xmmword_10038D7C0);
    *v35 = v39;
    if (v39.i64[0] >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 480));
      *(_QWORD *)(a1 + 480) += 8;
      *(_QWORD *)(a1 + 504) -= 128;
    }
    nullsub_30(buf);
  }
}

void sub_1000B637C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_30(v1);
  _Unwind_Resume(a1);
}

void sub_1000B6390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nullsub_30(va);
  _Unwind_Resume(a1);
}

BOOL sub_1000B63A8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;

  if (a3 == 1)
  {
    v11 = *(_QWORD *)(a1 + 224);
    v3 = a1 + 224;
    v10 = v11;
    if (v11)
    {
      v6 = v3;
      do
      {
        v12 = *(_DWORD *)(v10 + 32);
        v13 = v12 < a2;
        if (v12 >= a2)
          v14 = (uint64_t *)v10;
        else
          v14 = (uint64_t *)(v10 + 8);
        if (!v13)
          v6 = v10;
        v10 = *v14;
      }
      while (*v14);
      return v6 != v3;
    }
  }
  else
  {
    if (a3)
      return 0;
    v5 = *(_QWORD *)(a1 + 224);
    v3 = a1 + 224;
    v4 = v5;
    if (v5)
    {
      v6 = v3;
      do
      {
        v7 = *(_DWORD *)(v4 + 32);
        v8 = v7 <= a2;
        if (v7 <= a2)
          v9 = (uint64_t *)(v4 + 8);
        else
          v9 = (uint64_t *)v4;
        if (!v8)
          v6 = v4;
        v4 = *v9;
      }
      while (*v9);
      return v6 != v3;
    }
  }
  return 0;
}

void sub_1000B6428(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  void *__p;
  char *v17;
  uint64_t v18;
  __int128 v19;

  v3 = *(_QWORD *)(a1 + 4304);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if (v4 == v5)
  {
    __p = 0;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    v8 = (unsigned __int128)((v5 - v4) * (__int128)0x6D3A06D3A06D3A07) >> 64;
    v9 = (v8 >> 9) + ((unint64_t)v8 >> 63);
    v10 = 16;
    while (1)
    {
      v11 = *(_QWORD *)(v3 + 8);
      v19 = *(_OWORD *)(v11 + v10);
      if (*(_QWORD *)v3 >= v7 - sub_1000E3F80((_QWORD *)(v11 + v10 - 16), (uint64_t)&v19))
        break;
      ++v6;
      *(_DWORD *)(v3 + 32) = 2;
      v10 += 1200;
      if (v9 == v6)
        goto LABEL_8;
    }
    if (v9 != v6)
      goto LABEL_9;
LABEL_8:
    *(_DWORD *)(v3 + 32) = 1;
    v6 = v9;
LABEL_9:
    sub_1000F2554(v3, v6, &__p);
    v12 = (char *)__p;
    if (__p)
    {
      v13 = v17;
      v14 = __p;
      if (v17 != __p)
      {
        do
        {
          v15 = v13 - 1200;
          sub_1000ED500((cnframework::TimestampedEvent *)(v13 - 1192));
          v13 = v15;
        }
        while (v15 != v12);
        v14 = __p;
      }
      v17 = v12;
      operator delete(v14);
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 4320))
    {
      sub_1000ED500((cnframework::TimestampedEvent *)(a1 + 4336));
      *(_BYTE *)(a1 + 4320) = 0;
    }
  }
}

BOOL sub_1000B6584(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 4304) + 32) == 2;
}

double sub_1000B659C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003F97D8;
  *(_BYTE *)(a1 + 24) &= 0xF8u;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

void sub_1000B65D0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned __int8 v22;
  double v23;
  int v24;
  int v25;
  unsigned int v26;
  std::string *v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned __int8 v31;
  _BYTE *v32;
  uint64_t v33;
  __n128 v34;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  void **v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned __int8 v50;
  uint64_t v51;
  _BYTE __p[240];
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  std::string v57;

  if (!*(_BYTE *)(a1 + 648) || a2 - *(_QWORD *)(a1 + 656) >= *(_QWORD *)(a1 + 16))
  {
    v4 = 0;
    if (!*(_BYTE *)(a1 + 1984))
      goto LABEL_5;
LABEL_9:
    v6 = *(_QWORD *)(a1 + 1992);
    *(_BYTE *)(a1 + 2176) = v6 < a2;
    if (*(_BYTE *)(a1 + 2000))
    {
      v5 = *(_QWORD *)(a1 + 2008);
      *(_BYTE *)(a1 + 2177) = v5 < a2;
      if (v6 >= a2)
      {
        if (v5 >= a2)
          goto LABEL_52;
LABEL_24:
        v20 = sub_10007B778();
        v21 = v20;
        v22 = atomic_load((unsigned __int8 *)v20 + 26);
        if ((v22 & 1) == 0 && !*((_BYTE *)v20 + 16))
        {
          *((_DWORD *)v20 + 5) = sub_1000AAF28((uint64_t)v20, (unsigned int *)v20 + 3);
          *((_BYTE *)v21 + 16) = 1;
          atomic_store(1u, (unsigned __int8 *)v21 + 26);
        }
        v23 = (double)(a2 - v5 + 1000000000 * *((int *)v21 + 5)) / 1000000000.0;
        if (0xEEEEEEEEEEEEEEEFLL * (uint64_t)v23 + 0x888888888888888 <= 0x1111111111111110)
        {
          if (v23 >= 30.0)
            v24 = 1;
          else
            v24 = 3;
          if (v23 < 60.0)
            v25 = v24;
          else
            v25 = 2;
          if (v23 < 90.0)
            v26 = v25;
          else
            v26 = 0;
          std::to_string(&v57, (uint64_t)v23);
          v27 = std::string::append(&v57, "s since we had wifi data last");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(_QWORD *)&__p[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          v29 = sub_10031598C();
          v30 = v29;
          v31 = atomic_load((unsigned __int8 *)v29 + 20);
          if ((v31 & 1) == 0 && !*((_BYTE *)v29 + 16))
          {
            *((_BYTE *)v29 + 17) = sub_1000AC110((uint64_t)v29, (_BYTE *)v29 + 9);
            *((_BYTE *)v30 + 16) = 1;
            atomic_store(1u, (unsigned __int8 *)v30 + 20);
          }
          if (__p[23] >= 0)
            v32 = __p;
          else
            v32 = *(_BYTE **)__p;
          sub_10021689C(*((unsigned __int8 *)v30 + 17), v26, (uint64_t)"No WiFi data!", (uint64_t)v32, 5000000000);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (qword_100417ED8 == -1)
        {
          v33 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            goto LABEL_52;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
          v33 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            goto LABEL_52;
        }
        *(_DWORD *)__p = 134217984;
        *(double *)&__p[4] = v23;
        v17 = "WARNING: no Wi-Fi data in %f";
        v18 = v33;
        v19 = 12;
LABEL_50:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v17, __p, v19);
        goto LABEL_52;
      }
      v6 = *(_QWORD *)(a1 + 1992);
    }
    else
    {
      *(_BYTE *)(a1 + 2177) = 0;
      if (v6 >= a2)
        goto LABEL_52;
    }
    v7 = sub_10007B778();
    v8 = v7;
    v9 = atomic_load((unsigned __int8 *)v7 + 26);
    if ((v9 & 1) == 0 && !*((_BYTE *)v7 + 16))
    {
      *((_DWORD *)v7 + 5) = sub_1000AAF28((uint64_t)v7, (unsigned int *)v7 + 3);
      *((_BYTE *)v8 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v8 + 26);
    }
    v10 = *((_DWORD *)v8 + 5);
    if (*(_BYTE *)(a1 + 2000))
    {
      v11 = *(_QWORD *)(a1 + 2008);
      v12 = sub_10007B778();
      v13 = v12;
      v14 = atomic_load((unsigned __int8 *)v12 + 26);
      if ((v14 & 1) == 0 && !*((_BYTE *)v12 + 16))
      {
        *((_DWORD *)v12 + 5) = sub_1000AAF28((uint64_t)v12, (unsigned int *)v12 + 3);
        *((_BYTE *)v13 + 16) = 1;
        atomic_store(1u, (unsigned __int8 *)v13 + 26);
      }
      v15 = a2 - v11 + 1000000000 * *((int *)v13 + 5);
      if (qword_100417ED8 == -1)
      {
LABEL_21:
        v16 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_52;
LABEL_22:
        *(_DWORD *)__p = 134218240;
        *(double *)&__p[4] = (double)(a2 - v6 + 1000000000 * v10) / 1000000000.0;
        *(_WORD *)&__p[12] = 2048;
        *(double *)&__p[14] = (double)v15 / 1000000000.0;
        v17 = "WARNING: no Wi-Fi scans in %f, no Wi-Fi data in %f";
        v18 = v16;
        v19 = 22;
        goto LABEL_50;
      }
    }
    else
    {
      v15 = -1000000000;
      if (qword_100417ED8 == -1)
        goto LABEL_21;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v16 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_52;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 2179))
    return;
  v4 = 1;
  if (*(_BYTE *)(a1 + 1984))
    goto LABEL_9;
LABEL_5:
  *(_BYTE *)(a1 + 2176) = 0;
  if (!*(_BYTE *)(a1 + 2000))
  {
    *(_BYTE *)(a1 + 2177) = 0;
    goto LABEL_52;
  }
  v5 = *(_QWORD *)(a1 + 2008);
  *(_BYTE *)(a1 + 2177) = v5 < a2;
  if (v5 < a2)
    goto LABEL_24;
LABEL_52:
  sub_100073860(a1, a2, v4, __p);
  if (!__p[0])
    return;
  v34.n128_f64[0] = sub_1000C8690((_OWORD *)(a1 + 2184));
  v35 = *(void ***)(a1 + 224);
  v36 = *(void ***)(a1 + 232);
  if (v36 != v35)
  {
    do
    {
      v40 = *(v36 - 6);
      if (v40)
      {
        *(v36 - 5) = v40;
        operator delete(v40);
      }
      v41 = v36 - 9;
      v42 = (char *)*(v36 - 9);
      if (v42)
      {
        v43 = (char *)*(v36 - 8);
        v39 = *(v36 - 9);
        if (v43 != v42)
        {
          do
          {
            v45 = *((_DWORD *)v43 - 44);
            if (v45 == v45 >> 31)
            {
              if (*(v43 - 128))
                *(v43 - 128) = 0;
            }
            else
            {
              v44 = *((_QWORD *)v43 - 21);
              if (v45 < 0)
              {
                if (v44)
                  (*(void (**)(uint64_t, __n128))(*(_QWORD *)v44 + 8))(v44, v34);
              }
              else
              {
                (*(void (**)(char *))v44)(v43 - 168);
              }
            }
            v43 -= 208;
          }
          while (v43 != v42);
          v39 = *v41;
        }
        *(v36 - 8) = v42;
        operator delete(v39);
      }
      v36 -= 9;
    }
    while (v41 != v35);
  }
  *(_QWORD *)(a1 + 232) = v35;
  v37 = *(_QWORD *)(a1 + 264);
  for (i = *(_QWORD *)(a1 + 272); i != v37; i -= 88)
  {
    if (*(_BYTE *)(i - 64))
      *(_BYTE *)(i - 64) = 0;
  }
  *(_QWORD *)(a1 + 272) = v37;
  if (!v54)
  {
    *(_BYTE *)(a1 + 2179) = 1;
LABEL_86:
    v47 = v53;
    v48 = sub_1000C3164();
    v49 = v48;
    v50 = atomic_load((unsigned __int8 *)v48 + 26);
    if ((v50 & 1) == 0 && !*((_BYTE *)v48 + 16))
    {
      *((_DWORD *)v48 + 5) = sub_1000AAF28((uint64_t)v48, (unsigned int *)v48 + 3);
      *((_BYTE *)v49 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v49 + 26);
    }
    v51 = v47 + 1000000000 * *((int *)v49 + 5);
    if (!*(_BYTE *)(a1 + 1968))
      *(_BYTE *)(a1 + 1968) = 1;
    *(_QWORD *)(a1 + 1976) = v51;
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a1 + 1968))
    goto LABEL_86;
  if (*(_QWORD *)(a1 + 1976) < a2 && (v56 & 0x20) != 0 && !v55)
  {
    if (qword_100417ED8 == -1)
    {
      v46 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_83;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v46 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_83:
        if (*(_BYTE *)(a1 + 1968))
          *(_BYTE *)(a1 + 1968) = 0;
        goto LABEL_92;
      }
    }
    LODWORD(v57.__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Reset the force give-up timestamp at t=%{public}lld", (uint8_t *)&v57, 0xCu);
    goto LABEL_83;
  }
LABEL_92:
  if (!*(_BYTE *)(a1 + 648))
    *(_BYTE *)(a1 + 648) = 1;
  *(_QWORD *)(a1 + 656) = a2;
  if (__p[0])
    sub_100076820((uint64_t)&__p[8]);
}

void sub_1000B6D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1000B6938);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B6E04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = a2;
  sub_100050B4C(a1, &v5);
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
    sub_1002CC444(a3);
  }
  else
  {
    sub_1000B6E70((uint64_t *)(a1 + 136), a3);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136);
  }
}

uint64_t *sub_1000B6E70@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  uint64_t v7;
  int v8;
  double v9;
  _BYTE v10[24];
  void *v11;
  std::runtime_error __p;
  char v13;
  std::string buf;

  v2 = *result;
  v3 = result[1];
  v4 = qword_100419098;
  if (*result == v3)
  {
    v5 = 2;
    v9 = 0.0;
    v7 = qword_100419098;
  }
  else
  {
    v5 = 0;
    v6 = 0.0;
    v7 = qword_100419098;
    do
    {
      if ((v7 & 0x8000000000000000) == 0 && v7 != *(_QWORD *)v2)
      {
        sub_1000D5048(&__p, "");
        sub_100163210("LocalInPlaneHeadingRateOfChange entries must be back-to-back!", &buf);
        sub_100174738((uint64_t)&__p, (uint64_t)&buf, 1);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v13 < 0)
          operator delete(__p.__vftable);
        sub_1000F2AE4((uint64_t)&v11);
      }
      v7 = *(_QWORD *)(v2 + 8);
      if (v4 < 0)
        v4 = *(_QWORD *)v2;
      v8 = *(_DWORD *)(v2 + 24);
      if (v8 == 1)
      {
        v5 = 1;
      }
      else if (v8 == 2)
      {
        __cxa_allocate_exception(0x40uLL);
        sub_1000D5048(&buf, "We shouldn't be running this code if we aren't converged.");
        std::runtime_error::runtime_error(&__p, &buf);
        __p.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
        sub_10018D04C((uint64_t)v10);
        sub_1000F2F7C(&__p, (uint64_t)"static LocalInPlaneHeadingRateOfChange LocalInPlaneHeadingRateOfChange::aggregate(const std::vector<LocalInPlaneHeadingRateOfChange> &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/local_in_plane_heading_rate_of_change.cpp", 93, (uint64_t)v10);
      }
      v6 = v6 + *(double *)(v2 + 16) * ((double)(v7 - *(_QWORD *)v2) * 0.000000001);
      v2 += 32;
    }
    while (v2 != v3);
    v9 = v6 / ((double)(v7 - v4) * 0.000000001);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

void sub_1000B7128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000B71B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a24 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v24);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B71EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  int v7;
  double v8;
  _QWORD *v9;
  int v10;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 64);
  v7 = sub_1000B74C8(v6);
  v8 = sub_1000B72A0(v6);
  v9 = operator new(0x70uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = off_1003FF3E8;
  v9[5] = a2;
  *((_BYTE *)v9 + 48) = 0;
  v10 = *(_DWORD *)(a1 + 112);
  a3[1] = v9;
  *((double *)v9 + 4) = v8;
  *((_DWORD *)v9 + 7) = v7;
  *((_DWORD *)v9 + 6) = v10;
  *a3 = v9 + 3;
  result = sub_100051384(*(_QWORD ***)(a1 + 72), a2);
  *(_DWORD *)(a1 + 112) = result;
  return result;
}

void sub_1000B728C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

double sub_1000B72A0(uint64_t a1)
{
  int v3;
  double v4;
  _BYTE v5[24];
  std::string v6;
  std::runtime_error v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 112) && sub_10026C204(*(double **)(a1 + 96)) && *(_DWORD *)(a1 + 180) == 3)
    return sub_10026C2D8(*(_QWORD *)(a1 + 96));
  v3 = *(_DWORD *)(a1 + 180);
  if (v3 == 3)
    return 1.4;
  if (v3 == 2)
    return 0.0;
  if (v3 != 1)
  {
    __cxa_allocate_exception(0x40uLL);
    v8 = *(_DWORD *)(a1 + 180);
    sub_100232674(&v8, &v6);
    std::runtime_error::runtime_error(&v7, &v6);
    v7.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
    sub_10018D04C((uint64_t)v5);
    sub_1000EF6D4(&v7, (uint64_t)"double StepDetector::getSpeed() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/step_detector.cpp", 188, (uint64_t)v5);
  }
  if (*(_BYTE *)(a1 + 176))
    return *(double *)(a1 + 168) * *(double *)(a1 + 160);
  v4 = *(double *)(a1 + 192);
  return v4 * pow(*(long double *)(a1 + 160), *(long double *)(a1 + 184));
}

void sub_1000B7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B74C8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 112) && sub_10026C204(*(double **)(a1 + 96)) && *(_DWORD *)(a1 + 180) == 3)
    return 1;
  else
    return *(unsigned int *)(a1 + 180);
}

double sub_1000B7518(uint64_t a1, uint64_t a2)
{
  double result;

  if (*(_BYTE *)(a1 + 152))
  {
    result = sub_1000B75B8(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 256);
    *(double *)(a1 + 256) = result;
  }
  if (*(_BYTE *)a1)
  {
    result = sub_1000B75B8(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 104);
    *(double *)(a1 + 104) = result;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    result = sub_1000B75B8(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 408);
    *(double *)(a1 + 408) = result;
  }
  if (*(_BYTE *)(a1 + 456))
  {
    result = sub_1000B75B8(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 560);
    *(double *)(a1 + 560) = result;
  }
  return result;
}

double sub_1000B75B8(double a1, double a2)
{
  return a1 * a2;
}

void sub_1000B75C0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  _OWORD *v35;
  int *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  int *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  _OWORD *v57;
  int *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  BOOL v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  void **v66;
  __int128 v67;

  v4 = (char *)operator new(0xB8uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_1004044E0;
  *((_QWORD *)v4 + 3) = off_100404530;
  *((_DWORD *)v4 + 8) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  v6 = (uint64_t)(v4 + 40);
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  v7 = *a1;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = v7;
  *((_DWORD *)v4 + 24) = *((_DWORD *)a1 + 2);
  *((_QWORD *)v4 + 13) = 0;
  v65 = v4 + 40;
  v66 = (void **)(v4 + 104);
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = 0;
  v4[128] = *((_BYTE *)a1 + 72);
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *((_QWORD *)v4 + 19) = a1[18];
  *((_QWORD *)v4 + 20) = v7;
  *((_QWORD *)v4 + 21) = a1[8];
  *((_WORD *)v4 + 88) = *((_WORD *)a1 + 6);
  v63 = v4 + 24;
  v64 = a2;
  if (*((_BYTE *)a1 + 88))
  {
    sub_1000B7DA0((uint64_t)(a1 + 12), &v67);
    v8 = v67;
    v67 = 0uLL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)v5 + 18);
    *(_OWORD *)(v5 + 136) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *((_DWORD *)v4 + 8) = 1;
  }
  v16 = a1[5];
  v15 = a1[6];
  while (v15 != v16)
  {
    v18 = *(_DWORD *)(v15 - 4);
    v15 -= 4;
    v17 = v18;
    v20 = (int *)*((_QWORD *)v5 + 14);
    v19 = *((_QWORD *)v5 + 15);
    if ((unint64_t)v20 < v19)
    {
      *v20 = v17;
      v21 = (uint64_t)(v20 + 1);
      goto LABEL_37;
    }
    v22 = (int *)*v66;
    v23 = (char *)v20 - (_BYTE *)*v66;
    v24 = v23 >> 2;
    v25 = (v23 >> 2) + 1;
    if (v25 >> 62)
      sub_1000D02C0();
    v26 = v19 - (_QWORD)v22;
    if (v26 >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 62)
        sub_1000CDEB8();
      v28 = operator new(4 * v27);
      v29 = (int *)&v28[4 * v24];
      *v29 = v17;
      v21 = (uint64_t)(v29 + 1);
      if (v20 == v22)
      {
LABEL_29:
        v6 = (uint64_t)v65;
        goto LABEL_35;
      }
    }
    else
    {
      v28 = 0;
      v29 = (int *)(4 * v24);
      *(_DWORD *)(4 * v24) = v17;
      v21 = 4 * v24 + 4;
      if (v20 == v22)
        goto LABEL_29;
    }
    v30 = (char *)(v20 - 1) - (char *)v22;
    if (v30 >= 0x2C)
    {
      v31 = (char *)v20 - &v28[v23];
      v6 = (uint64_t)v65;
      if (v31 >= 0x20)
      {
        v32 = (v30 >> 2) + 1;
        v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
        v34 = &v20[v33 / 0xFFFFFFFFFFFFFFFCLL];
        v29 = (int *)((char *)v29 - v33);
        v35 = &v28[4 * v24 - 16];
        v36 = v20 - 4;
        v37 = v32 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 8;
          v37 -= 8;
        }
        while (v37);
        v20 = v34;
        if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_35;
      }
    }
    else
    {
      v6 = (uint64_t)v65;
    }
    do
    {
      v39 = *--v20;
      *--v29 = v39;
    }
    while (v20 != v22);
LABEL_35:
    *((_QWORD *)v5 + 13) = v29;
    *((_QWORD *)v5 + 14) = v21;
    *((_QWORD *)v5 + 15) = &v28[4 * v27];
    if (v22)
      operator delete(v22);
LABEL_37:
    *((_QWORD *)v5 + 14) = v21;
    LODWORD(v67) = sub_1000B7B10(v17);
    sub_1000B7B2C(v6, (int *)&v67);
  }
  if (*((_QWORD *)v5 + 13) == *((_QWORD *)v5 + 14))
  {
    v40 = 11;
    while (1)
    {
      v42 = (int *)*((_QWORD *)v5 + 14);
      v41 = *((_QWORD *)v5 + 15);
      if ((unint64_t)v42 >= v41)
        break;
      *v42 = v40;
      v43 = (uint64_t)(v42 + 1);
LABEL_62:
      *((_QWORD *)v5 + 14) = v43;
      LODWORD(v67) = sub_1000B7B10(v40);
      sub_1000B7B2C(v6, (int *)&v67);
      v62 = v40-- != 0;
      if (v40 == 0 || !v62)
        goto LABEL_63;
    }
    v44 = (int *)*v66;
    v45 = (char *)v42 - (_BYTE *)*v66;
    v46 = v45 >> 2;
    v47 = (v45 >> 2) + 1;
    if (v47 >> 62)
      sub_1000D02C0();
    v48 = v41 - (_QWORD)v44;
    if (v48 >> 1 > v47)
      v47 = v48 >> 1;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
      v49 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 62)
        sub_1000CDEB8();
      v50 = operator new(4 * v49);
      v51 = (int *)&v50[4 * v46];
      *v51 = v40;
      v43 = (uint64_t)(v51 + 1);
      if (v42 != v44)
      {
LABEL_51:
        v52 = (char *)(v42 - 1) - (char *)v44;
        if (v52 >= 0x2C)
        {
          v53 = (char *)v42 - &v50[v45];
          v6 = (uint64_t)v65;
          if (v53 >= 0x20)
          {
            v54 = (v52 >> 2) + 1;
            v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
            v56 = &v42[v55 / 0xFFFFFFFFFFFFFFFCLL];
            v51 = (int *)((char *)v51 - v55);
            v57 = &v50[4 * v46 - 16];
            v58 = v42 - 4;
            v59 = v54 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 8;
              v59 -= 8;
            }
            while (v59);
            v42 = v56;
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_60:
              *((_QWORD *)v5 + 13) = v51;
              *((_QWORD *)v5 + 14) = v43;
              *((_QWORD *)v5 + 15) = &v50[4 * v49];
              if (v44)
                operator delete(v44);
              goto LABEL_62;
            }
          }
        }
        else
        {
          v6 = (uint64_t)v65;
        }
        do
        {
          v61 = *--v42;
          *--v51 = v61;
        }
        while (v42 != v44);
        goto LABEL_60;
      }
    }
    else
    {
      v50 = 0;
      v51 = (int *)(4 * v46);
      *(_DWORD *)(4 * v46) = v40;
      v43 = 4 * v46 + 4;
      if (v42 != v44)
        goto LABEL_51;
    }
    v6 = (uint64_t)v65;
    goto LABEL_60;
  }
LABEL_63:
  *v64 = v63;
  v64[1] = v5;
}

void sub_1000B7A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  void *v22;

  v14 = *(std::__shared_weak_count **)(v12 + 144);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 112) = v17;
    operator delete(v17);
  }

  v18 = *(_QWORD **)(v12 + 56);
  if (v18)
  {
    do
    {
      v21 = (_QWORD *)*v18;
      v22 = (void *)v18[4];
      if (v22)
      {
        v18[5] = v22;
        operator delete(v22);
      }
      operator delete(v18);
      v18 = v21;
    }
    while (v21);
  }
  v19 = *a11;
  *a11 = 0;
  if (v19)
    operator delete(v19);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v12);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B7B10(int a1)
{
  int v1;

  if (a1 >= 15)
    v1 = 5000;
  else
    v1 = 2407;
  return (v1 + 5 * a1);
}

void sub_1000B7B2C(uint64_t a1, int *a2)
{
  unint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v4 = *a2;
  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v2 = v4;
      if (v6 <= v4)
        v2 = v4 % v6;
    }
    else
    {
      v2 = (v6 - 1) & v4;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
    if (v8)
    {
      v9 = *v8;
      if (v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = v9[1];
            if (v11 == v4)
            {
              if (*((_DWORD *)v9 + 4) == v4)
                return;
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            v9 = (uint64_t *)*v9;
            if (!v9)
              goto LABEL_22;
          }
        }
        do
        {
          v10 = v9[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v9 + 4) == v4)
              return;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v2)
              break;
          }
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  v12 = operator new(0x48uLL);
  *v12 = 0;
  v12[1] = v4;
  *((_DWORD *)v12 + 4) = v4;
  v12[7] = 0;
  v12[8] = 0;
  v12[3] = 10000000000;
  v12[4] = 0;
  v12[5] = 0;
  v12[6] = 0;
  *((_DWORD *)v12 + 14) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13)
    goto LABEL_34;
  v15 = 1;
  if (v6 >= 3)
    v15 = (v6 & (v6 - 1)) != 0;
  v16 = v15 | (2 * v6);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    v18 = v17;
  else
    v18 = v16;
  sub_1002ED5FC(a1, v18);
  v6 = *(_QWORD *)(a1 + 8);
  v19 = v6 - 1;
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5)
    {
      v2 = v5 % v6;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
      if (!v21)
        goto LABEL_37;
LABEL_35:
      *v12 = *v21;
LABEL_43:
      *v21 = v12;
      goto LABEL_44;
    }
    v2 = v5;
LABEL_34:
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (!v21)
      goto LABEL_37;
    goto LABEL_35;
  }
  v2 = v19 & v5;
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v19 & v5));
  if (v21)
    goto LABEL_35;
LABEL_37:
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v2) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v22 >= v6)
        v22 %= v6;
    }
    else
    {
      v22 &= v6 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1000B7D7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000B7DA0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  int v6;
  _DWORD **v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD **v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  void **v74;
  void *v75;
  void *__p;
  char v77;
  std::string v78;

  v4 = (char *)operator new(0x70uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_100404098;
  *((_QWORD *)v4 + 3) = off_1004040E8;
  v70 = v4 + 24;
  v71 = a2;
  *((_QWORD *)v4 + 4) = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  *((_QWORD *)v4 + 6) = 0;
  v7 = (_DWORD **)(v4 + 48);
  *((_DWORD *)v4 + 10) = v6;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  v9 = *(_BYTE **)(a1 + 16);
  v8 = *(_BYTE **)(a1 + 24);
  v10 = v8 - v9;
  if (v8 == v9)
  {
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    v4[104] = *(_BYTE *)(a1 + 45);
    v77 = 0;
    LOBYTE(__p) = 0;
    memset(&v78, 0, sizeof(v78));
    std::string::assign(&v78, "No channels available");
    sub_100174738((uint64_t)&__p, (uint64_t)&v78, 1);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v78.__r_.__value_.__l.__data_);
      if ((v77 & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((v77 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(__p);
LABEL_7:
    sub_10015C2DC((uint64_t)&v75);
  }
  if (v10 < 0)
    sub_1000D02C0();
  v11 = (char *)operator new(v8 - v9);
  *((_QWORD *)v5 + 6) = v11;
  v12 = &v11[4 * (v10 >> 2)];
  *((_QWORD *)v5 + 8) = v12;
  memcpy(v11, v9, v10);
  *(_OWORD *)(v5 + 72) = 0u;
  *((_QWORD *)v5 + 7) = v12;
  *(_OWORD *)(v5 + 88) = 0u;
  v74 = (void **)(v5 + 72);
  v5[104] = *(_BYTE *)(a1 + 45);
  if (!*(_BYTE *)(a1 + 44))
  {
    v67 = (_DWORD *)*((_QWORD *)v5 + 6);
    v66 = (_DWORD *)*((_QWORD *)v5 + 7);
    for (v78.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 72); v67 != v66; ++v67)
    {
      if (*v67 > 0xBu || ((1 << *v67) & 0x842) == 0)
        sub_10022CFEC((uint64_t *)&v78, v67);
    }
  }
  v69 = v7;
  if (*(int *)(a1 + 40) >= 1)
  {
    v13 = 0;
    v72 = a1;
    while (1)
    {
      v73 = v13;
      v14 = *(unsigned __int8 *)(a1 + 44);
      v16 = (int *)*((_QWORD *)v5 + 6);
      v15 = (int *)*((_QWORD *)v5 + 7);
      if (!v14)
        goto LABEL_47;
      if (v15 != v16)
        break;
LABEL_10:
      v13 = v73 + 1;
      a1 = v72;
      if (v73 + 1 >= *(_DWORD *)(v72 + 40))
        goto LABEL_73;
    }
    while (1)
    {
      v19 = *--v15;
      v18 = v19;
      v20 = (1 << v19) & 0x842;
      if (v19 <= 0xB && v20 != 0)
        goto LABEL_16;
      v23 = (char *)*((_QWORD *)v5 + 10);
      v22 = *((_QWORD *)v5 + 11);
      if ((unint64_t)v23 >= v22)
        break;
      *(_DWORD *)v23 = v18;
      v17 = (uint64_t)(v23 + 4);
LABEL_15:
      *((_QWORD *)v5 + 10) = v17;
LABEL_16:
      if (v15 == v16)
      {
        v16 = (int *)*((_QWORD *)v5 + 6);
        v15 = (int *)*((_QWORD *)v5 + 7);
        while (1)
        {
LABEL_47:
          if (v16 == v15)
            goto LABEL_10;
          v42 = *v16;
          if (*v16 <= 0xB && ((1 << *v16) & 0x842) != 0)
            break;
LABEL_46:
          ++v16;
        }
        v45 = (char *)*((_QWORD *)v5 + 10);
        v44 = *((_QWORD *)v5 + 11);
        if ((unint64_t)v45 >= v44)
        {
          v46 = (char *)*v74;
          v47 = v45 - (_BYTE *)*v74;
          v48 = v47 >> 2;
          v49 = (v47 >> 2) + 1;
          if (v49 >> 62)
            goto LABEL_94;
          v50 = v44 - (_QWORD)v46;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            if (v51 >> 62)
              goto LABEL_95;
            v52 = operator new(4 * v51);
            v53 = (int *)&v52[4 * v48];
            *v53 = *v16;
            v41 = (uint64_t)(v53 + 1);
            if (v45 == v46)
            {
LABEL_70:
              *((_QWORD *)v5 + 9) = v53;
              *((_QWORD *)v5 + 10) = v41;
              *((_QWORD *)v5 + 11) = &v52[4 * v51];
              if (v46)
                operator delete(v46);
              goto LABEL_45;
            }
          }
          else
          {
            v52 = 0;
            v53 = (int *)(4 * v48);
            *(_DWORD *)(4 * v48) = v42;
            v41 = 4 * v48 + 4;
            if (v45 == v46)
              goto LABEL_70;
          }
          v54 = v45 - 4 - v46;
          if (v54 < 0x2C)
            goto LABEL_99;
          if ((unint64_t)(v45 - &v52[v47]) < 0x20)
            goto LABEL_99;
          v55 = (v54 >> 2) + 1;
          v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
          v57 = &v45[-v56];
          v53 = (int *)((char *)v53 - v56);
          v58 = &v52[4 * v48 - 16];
          v59 = v45 - 16;
          v60 = v55 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 8;
          }
          while (v60);
          v45 = v57;
          if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_99:
            do
            {
              v62 = *((_DWORD *)v45 - 1);
              v45 -= 4;
              *--v53 = v62;
            }
            while (v45 != v46);
          }
          goto LABEL_70;
        }
        *(_DWORD *)v45 = v42;
        v41 = (uint64_t)(v45 + 4);
LABEL_45:
        *((_QWORD *)v5 + 10) = v41;
        goto LABEL_46;
      }
    }
    v24 = (char *)*v74;
    v25 = v23 - (_BYTE *)*v74;
    v26 = v25 >> 2;
    v27 = (v25 >> 2) + 1;
    if (v27 >> 62)
LABEL_94:
      sub_1000D02C0();
    v28 = v22 - (_QWORD)v24;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 62)
LABEL_95:
        sub_1000CDEB8();
      v30 = operator new(4 * v29);
      v31 = (int *)&v30[4 * v26];
      *v31 = *v15;
      v17 = (uint64_t)(v31 + 1);
      if (v23 == v24)
        goto LABEL_40;
    }
    else
    {
      v30 = 0;
      v31 = (int *)(4 * v26);
      *(_DWORD *)(4 * v26) = v18;
      v17 = 4 * v26 + 4;
      if (v23 == v24)
      {
LABEL_40:
        *((_QWORD *)v5 + 9) = v31;
        *((_QWORD *)v5 + 10) = v17;
        *((_QWORD *)v5 + 11) = &v30[4 * v29];
        if (v24)
          operator delete(v24);
        goto LABEL_15;
      }
    }
    v32 = v23 - 4 - v24;
    if (v32 < 0x2C)
      goto LABEL_100;
    if ((unint64_t)(v23 - &v30[v25]) < 0x20)
      goto LABEL_100;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v23[-v34];
    v31 = (int *)((char *)v31 - v34);
    v36 = &v30[4 * v26 - 16];
    v37 = v23 - 16;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    v23 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_100:
      do
      {
        v40 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *--v31 = v40;
      }
      while (v23 != v24);
    }
    goto LABEL_40;
  }
LABEL_73:
  v64 = (_DWORD *)*((_QWORD *)v5 + 6);
  v63 = (_DWORD *)*((_QWORD *)v5 + 7);
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 72);
  if (v64 != v63)
  {
    do
    {
      if (*v64 <= 0xBu && ((1 << *v64) & 0x842) != 0)
        sub_10022CFEC((uint64_t *)&v78, v64);
      ++v64;
    }
    while (v64 != v63);
    v64 = *v69;
  }
  *((_QWORD *)v5 + 12) = v64;
  *v71 = v70;
  v71[1] = v5;
}

void sub_1000B835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  void **v33;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (a20 < 0)
    operator delete(__p);
  v35 = *a14;
  if (*a14)
  {
    v32[3].__shared_owners_ = (uint64_t)v35;
    operator delete(v35);
    v36 = *v33;
    if (!*v33)
    {
LABEL_5:
      std::__shared_weak_count::~__shared_weak_count(v32);
      operator delete(v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = *v33;
    if (!*v33)
      goto LABEL_5;
  }
  v32[2].__shared_owners_ = (uint64_t)v36;
  operator delete(v36);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v38);
  _Unwind_Resume(a1);
}

BOOL sub_1000B841C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t), uint64_t a6)
{
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v6 = *a1;
  if (*a1)
  {
    *a1 = 0;
    v7 = *(_QWORD *)(a4 + 24);
    if (!v7)
      sub_10016CA74();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v16);
    (**a5)(a5, a2, &v16, a3, a6);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  return v6 != 0;
}

void sub_1000B84E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1000B84F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_BYTE *)a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 64) + 264))(&v4);
  if ((_BYTE)v4)
  {
    *(_OWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 24) = v6;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 40) = v7;
    *(_QWORD *)(a2 + 56) = v8;
    *(_BYTE *)a2 = 1;
  }
  return result;
}

void sub_1000B8594(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2;
  double v3;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *__p[2];
  char v30;
  char v31[8];
  uint64_t v32;
  uint64_t v33;
  char v34;
  double v35;
  double v36;
  std::string buf;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1))
  {
    *(_BYTE *)a2 = 0;
    return;
  }
  if (!*(_BYTE *)(a1 + 4320))
    sub_1000F2900((unsigned __int8 *)(a1 + 4320), *(_QWORD *)(*(_QWORD *)(a1 + 4304) + 8));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 4304) + 16);
  sub_1000EE26C(a1 + 4336, v6 - 1192, 0, (uint64_t)v31);
  v7 = v31[0];
  if (v31[0])
  {
    v8 = (_BYTE *)(a1 + 5528);
    v9 = v32;
    v10 = v33;
    if (v34)
    {
      v11 = v35;
      v12 = v36;
      v13 = *v8 == 0;
      if (!*v8)
      {
        v24 = *v8;
        *(double *)(a1 + 5536) = v35;
        *(double *)(a1 + 5544) = v12;
        if (v24)
          goto LABEL_23;
        goto LABEL_22;
      }
      v14 = v35 - *(double *)(a1 + 5536);
      if (v14 >= 0.0)
        v15 = v35 - *(double *)(a1 + 5536);
      else
        v15 = v14 + 6.28318531;
      v16 = *(double *)(a1 + 4448) + (double)*(uint64_t *)(a1 + 4440);
      v17 = *(double *)(v6 - 1080) + (double)*(uint64_t *)(v6 - 1088);
      v18 = vabdd_f64(v16, v17);
      if (v18 < 2.22044605e-16)
      {
        sub_1000D5048(__p, "");
        sub_1000F3B4C("VIO-inferred speed is applicable but the interval is zero; something must be wrong!", &buf);
        sub_100174738((uint64_t)__p, (uint64_t)&buf, 1);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v30 < 0)
          operator delete(__p[0]);
        sub_1000F2AE4((uint64_t)&v28);
      }
      v19 = v16 - v17;
      v20 = v36 + *(double *)(a1 + 5544);
      v21 = v19 * v19;
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v3 = v15 / v18;
      v22 = qword_100417EE0;
      v2 = v20 / v21;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v3;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v20 / v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "VIO inferred angular velocity, mean, %{public}f, var, %{public}f", (uint8_t *)&buf, 0x16u);
      }
      v23 = *v8;
      *(double *)(a1 + 5536) = v11;
      *(double *)(a1 + 5544) = v12;
      if (!v23)
LABEL_22:
        *v8 = 1;
    }
    else
    {
      if (*v8)
        *v8 = 0;
      v13 = 1;
    }
LABEL_23:
    sub_1000F2900((unsigned __int8 *)(a1 + 4320), *(_QWORD *)(*(_QWORD *)(a1 + 4304) + 16) - 1200);
    v25 = *(unsigned __int8 *)(a1 + 16);
    if (v13)
    {
      v26 = 0;
    }
    else
    {
      v26 = *(unsigned __int8 *)(a1 + 17);
      if (*(_BYTE *)(a1 + 18))
      {
        v27 = 1;
LABEL_28:
        *(_QWORD *)(a2 + 8) = v9;
        *(_QWORD *)(a2 + 16) = v25;
        *(_QWORD *)(a2 + 24) = v10;
        *(_QWORD *)(a2 + 32) = v26;
        *(double *)(a2 + 40) = v3;
        *(_QWORD *)(a2 + 48) = v27;
        v7 = 1;
        *(double *)(a2 + 56) = v2;
        goto LABEL_29;
      }
    }
    v27 = 0;
    goto LABEL_28;
  }
LABEL_29:
  *(_BYTE *)a2 = v7;
}

void sub_1000B88A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B88E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 248))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1000B88F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  void *v10;

  *(_QWORD *)a1 = off_100404530;
  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(void **)(a1 + 80);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(void **)(a1 + 80);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 88) = v5;
    operator delete(v5);
  }
LABEL_7:

  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
  {
    do
    {
      v9 = (_QWORD *)*v6;
      v10 = (void *)v6[4];
      if (v10)
      {
        v6[5] = v10;
        operator delete(v10);
      }
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t sub_1000B89C8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1000B89D4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1004040E8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1000B8A20(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::string::size_type size;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t *v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  std::string::value_type *v65;
  __int128 *v66;
  std::string::size_type *v67;
  unint64_t v68;
  __int128 v69;
  std::string::value_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  NSObject *v75;
  __int128 *p_p;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  int v90;
  char v91;
  int v92;
  uint64_t v93;
  _BOOL4 v94;
  double v95;
  int v96;
  char *v97;
  char v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t *v107;
  uint64_t v108;
  NSObject *v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  std::string::size_type v125;
  std::string *v126;
  std::string *v127;
  std::string::value_type *v128;
  __int128 *v129;
  std::string::size_type *v130;
  unint64_t v131;
  __int128 v132;
  std::string::value_type v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  __int128 v137;
  NSObject *v138;
  std::string *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  char *v147;
  void *v148;
  uint64_t v151;
  std::string v154;
  std::string v155;
  __int128 v156;
  void *v157;
  char *v158;
  unint64_t v159;
  void *v160;
  char *v161;
  char *v162;
  void *v163;
  uint64_t *v164;
  unint64_t *v165;
  std::string v166;
  std::string v167;
  __int128 __p;
  int64_t v169;
  _BYTE v170[392];
  void *v171;
  void *v172;
  void *v173;
  std::string buf;
  _BYTE v175[7];
  std::string::value_type *v176;
  _BYTE *v177;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == *(_QWORD *)(a1 + 8))
    goto LABEL_35;
  v7 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  do
  {
    if (*(_BYTE *)(sub_100050DB0(v6 + 72 * v7) + 120))
      goto LABEL_4;
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_9;
LABEL_8:
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Resetting particle filter #%zu; it is no longer feasible",
        (uint8_t *)&buf,
        0xCu);
      goto LABEL_9;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
    v9 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_8;
LABEL_9:
    v10 = sub_100050DB0(*(_QWORD *)(a1 + 8) + 72 * v7);
    v11 = *(_QWORD *)(v10 + 8);
    for (i = *(_QWORD *)(v10 + 16); i != v11; i -= 80)
    {
      v13 = *(std::__shared_weak_count **)(i - 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    *(_QWORD *)(v10 + 16) = v11;
LABEL_4:
    ++v7;
    v6 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
  }
  while (v7 < 0x8E38E38E38E38E39 * ((v8 - v6) >> 3));
  if (v6 == v8)
  {
LABEL_35:
    v24 = v6;
    goto LABEL_36;
  }
  v16 = 0;
  do
  {
    v17 = sub_100050DB0(v6);
    if (!sub_1000BAFA0(v17))
      v16 = 1;
    v6 += 72;
  }
  while (v6 != v8);
  if (v16)
  {
    memset(&v166, 0, sizeof(v166));
    v176 = &buf.__r_.__value_.__s.__data_[2];
    v177 = v175;
    if (a2 >= 0)
      v18 = a2;
    else
      v18 = -a2;
    v171 = (void *)v18;
    v172 = v175;
    LOBYTE(v173) = 48;
    HIDWORD(v173) = 48;
    v19 = sub_100173F80((uint64_t)&v171);
    v20 = (_BYTE *)v19;
    if (a2 < 0)
    {
      *(_BYTE *)(v19 - 1) = 45;
      v20 = (_BYTE *)(v19 - 1);
      v176 = (std::string::value_type *)(v19 - 1);
      v177 = v175;
      v21 = (std::string::size_type)&v175[-v19 + 1];
      if (v21 < 0x17)
        goto LABEL_96;
LABEL_30:
      std::string::__grow_by(&v166, 0x16uLL, v21 - 22, 0, 0, 0, 0);
      v166.__r_.__value_.__l.__size_ = 0;
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v166;
      else
        v22 = (std::string *)v166.__r_.__value_.__r.__words[0];
      if (v20 == v175)
        goto LABEL_34;
LABEL_97:
      v64 = (char *)&buf - v20 + 41;
      if (v64 < 0x20 || (unint64_t)((char *)v22 - v20) < 0x20)
      {
        v23 = v22;
        v65 = v20;
      }
      else
      {
        v23 = (std::string *)((char *)v22 + (v64 & 0xFFFFFFFFFFFFFFE0));
        v65 = &v20[v64 & 0xFFFFFFFFFFFFFFE0];
        v66 = (__int128 *)(v20 + 16);
        v67 = &v22->__r_.__value_.__r.__words[2];
        v68 = v64 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v69 = *v66;
          *((_OWORD *)v67 - 1) = *(v66 - 1);
          *(_OWORD *)v67 = v69;
          v66 += 2;
          v67 += 4;
          v68 -= 32;
        }
        while (v68);
        if (v64 == (v64 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_105;
      }
      do
      {
        v70 = *v65++;
        v23->__r_.__value_.__s.__data_[0] = v70;
        v23 = (std::string *)((char *)v23 + 1);
      }
      while (v65 != v175);
    }
    else
    {
      v176 = (std::string::value_type *)v19;
      v177 = v175;
      v21 = (std::string::size_type)&v175[-v19];
      if ((unint64_t)&v175[-v19] >= 0x17)
        goto LABEL_30;
LABEL_96:
      v22 = &v166;
      if (v20 != v175)
        goto LABEL_97;
LABEL_34:
      v23 = v22;
    }
LABEL_105:
    v23->__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      v166.__r_.__value_.__l.__size_ = v21;
    else
      *((_BYTE *)&v166.__r_.__value_.__s + 23) = v21 & 0x7F;
    v71 = std::string::insert(&v166, 0, "Precision has been lost at at timestamp ");
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    v73 = std::string::append(&v167, ". If you get here, your particles probably didn't make it. As long as the OffMapParticle is stable, this will never return false. If it does, inference has failed.");
    v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v169 = v73->__r_.__value_.__r.__words[2];
    __p = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    if (qword_100417ED8 == -1)
    {
      v75 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_110;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
      v75 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_110:
        p_p = &__p;
        if (v169 < 0)
          p_p = (__int128 *)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
    }
    sub_10003D038((_QWORD *)a1, *(_QWORD *)(a1 + 456), (_QWORD *)(a1 + 360), (_QWORD **)(a1 + 376));
  }
  v6 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 16);
LABEL_36:
  v25 = *(_QWORD *)(a1 + 280);
  v26 = (_QWORD *)*a3;
  memset(&v166, 0, sizeof(v166));
  v27 = v24 - v6;
  if (v27)
  {
    v28 = v27 / 72;
    if ((unint64_t)(v27 / 72) >> 61)
      sub_1000D02C0();
    v29 = operator new(8 * v28);
    size = (std::string::size_type)v29 + 8 * v28;
    v166.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    v166.__r_.__value_.__r.__words[2] = size;
    memset_pattern16(v29, &unk_100394DA0, 8 * v28);
    v166.__r_.__value_.__l.__size_ = size;
  }
  else
  {
    size = 0;
    v29 = 0;
  }
  if (sub_1000B5690(v26))
  {
    if ((uint64_t)(size - (_QWORD)v29) >= 1)
      bzero(v29, 8 * (((size - (unint64_t)v29) >> 3) - (size - (unint64_t)v29 > 7)) + 8);
    goto LABEL_55;
  }
  v31 = a2 - sub_1000C01D4(v25);
  if (*(_QWORD *)(a1 + 456) > v31)
    v31 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v31;
  v32 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v32)
  {
    v33 = 0;
    v34 = 0;
    while (1)
    {
      v36 = sub_100050DB0(v32 + v33);
      *((double *)v29 + v34) = (*(double (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 16))(v36, *(_QWORD *)(a1 + 456), a2);
      if (qword_100417ED8 == -1)
      {
        v37 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_48;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
        v37 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_48;
      }
      v35 = *((double *)v29 + v34) * 100.0;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v35;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "pfilter #%zu going to transition %f%% of our particles during our injection", (uint8_t *)&buf, 0x16u);
LABEL_48:
      ++v34;
      v32 = *(_QWORD *)(a1 + 8);
      v33 += 72;
      if (v34 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v32) >> 3))
      {
        size = v166.__r_.__value_.__l.__size_;
        v29 = (void *)v166.__r_.__value_.__r.__words[0];
        break;
      }
    }
  }
LABEL_55:
  v38 = *(_QWORD *)(a1 + 456);
  if (v38 <= a2)
    v38 = a2;
  *(_QWORD *)(a1 + 456) = v38;
  v39 = size - (_QWORD)v29;
  v41 = *(_QWORD *)(a1 + 8);
  v40 = *(_QWORD *)(a1 + 16);
  v42 = 0x8E38E38E38E38E39 * ((v40 - v41) >> 3);
  if (v42 != v39 >> 3)
  {
    sub_1000D5048(&buf, "");
    sub_100174738((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)&v171);
  }
  v163 = 0;
  v164 = 0;
  v165 = 0;
  if (!v42)
  {
    v43 = 0;
    if (v40 != v41)
      goto LABEL_61;
LABEL_118:
    v40 = v41;
    if (v42)
      goto LABEL_240;
    goto LABEL_119;
  }
  if (v42 >> 61)
    sub_1000D02C0();
  v43 = (unint64_t *)operator new(0x71C71C71C71C71C8 * ((v40 - v41) >> 3));
  v163 = v43;
  v164 = (uint64_t *)v43;
  v165 = &v43[0xE38E38E38E38E39 * ((v40 - v41) >> 3)];
  if (v40 == v41)
    goto LABEL_118;
LABEL_61:
  v44 = 0;
  do
  {
    if (v43 < v165)
    {
      *v43++ = v44;
      goto LABEL_63;
    }
    v46 = (unint64_t *)v163;
    v47 = (char *)v43 - (_BYTE *)v163;
    v48 = ((char *)v43 - (_BYTE *)v163) >> 3;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61)
      sub_1000D02C0();
    v50 = (char *)v165 - (_BYTE *)v163;
    if (((char *)v165 - (_BYTE *)v163) >> 2 > v49)
      v49 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 61)
        sub_1000CDEB8();
      v52 = operator new(8 * v51);
      v53 = (unint64_t *)&v52[8 * v48];
      *v53 = v44;
      v54 = (uint64_t)(v53 + 1);
      if (v43 == v46)
        goto LABEL_79;
    }
    else
    {
      v52 = 0;
      v53 = (unint64_t *)(8 * v48);
      *(_QWORD *)(8 * v48) = v44;
      v54 = 8 * v48 + 8;
      if (v43 == v46)
        goto LABEL_79;
    }
    v55 = (char *)(v43 - 1) - (char *)v46;
    if (v55 >= 0x168)
    {
      if (&v52[v47 - 8 - (v55 & 0xFFFFFFFFFFFFFFF8)] > &v52[v47 - 8])
      {
        v56 = v43;
      }
      else if ((unint64_t *)((char *)v43 - (v55 & 0xFFFFFFFFFFFFFFF8) - 8) > v43 - 1)
      {
        v56 = v43;
      }
      else if ((unint64_t)((char *)v43 - v52 - v47) >= 0x20)
      {
        v58 = (v55 >> 3) + 1;
        v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
        v56 = &v43[v59 / 0xFFFFFFFFFFFFFFF8];
        v53 = (unint64_t *)((char *)v53 - v59);
        v60 = &v52[8 * v48 - 16];
        v61 = v43 - 2;
        v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v63 = *(_OWORD *)v61;
          *(v60 - 1) = *((_OWORD *)v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 4;
          v62 -= 4;
        }
        while (v62);
        if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_79;
      }
      else
      {
        v56 = v43;
      }
    }
    else
    {
      v56 = v43;
    }
    do
    {
      v57 = *--v56;
      *--v53 = v57;
    }
    while (v56 != v46);
LABEL_79:
    v163 = v53;
    v164 = (uint64_t *)v54;
    v165 = (unint64_t *)&v52[8 * v51];
    if (v46)
    {
      operator delete(v46);
      v41 = *(_QWORD *)(a1 + 8);
      v40 = *(_QWORD *)(a1 + 16);
    }
    v43 = (unint64_t *)v54;
LABEL_63:
    v164 = (uint64_t *)v43;
    ++v44;
    v45 = 0x8E38E38E38E38E39 * ((v40 - v41) >> 3);
  }
  while (v44 < v45);
  if (v45 != ((char *)v43 - (_BYTE *)v163) >> 3)
  {
LABEL_240:
    sub_1000D5048(&buf, "");
    sub_100174738((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_1000F2AE4((uint64_t)&v171);
  }
LABEL_119:
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v77 = (v40 - v41) / 72;
  if (v40 != v41)
  {
    if (v77 >> 61)
      sub_1000D02C0();
    v78 = (char *)operator new(8 * v77);
    v79 = &v78[8 * v77];
    v160 = v78;
    v162 = v79;
    memset_pattern16(v78, &unk_100394090, 8 * v77);
    v80 = 0;
    v161 = v79;
    v81 = 72;
    do
    {
      v82 = v80 + 1;
      if (v80 + 1 < v77)
      {
        v83 = sub_100050DB0(v41 + v81);
        *((long double *)v160 + v80) = *((double *)v160 + v80) - sub_100079C90(v83);
        v41 = *(_QWORD *)(a1 + 8);
        v40 = *(_QWORD *)(a1 + 16);
      }
      v77 = 0x8E38E38E38E38E39 * ((v40 - v41) >> 3);
      v81 += 72;
      ++v80;
    }
    while (v82 < v77);
  }
  v157 = 0;
  v158 = 0;
  v159 = 0;
  sub_1000BB150(&v157, v77);
  v84 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  if (v84)
  {
    v85 = v84 / 72;
    v86 = 392 * (v84 / 72) - 376;
    v87 = 72 * (v84 / 72);
    do
    {
      if (!*(_BYTE *)(a1 + 72))
      {
        LOBYTE(v171) = 0;
        sub_1000BA2F8(a1, a2, (uint64_t)a3, a4, (uint64_t)&v171, &buf);
        v97 = v158;
        if ((unint64_t)v158 >= v159)
          goto LABEL_149;
        goto LABEL_148;
      }
      v88 = *(_QWORD *)(a1 + 88);
      v89 = sub_10026A76C(*(_QWORD *)(a1 + 280));
      v90 = sub_1000BFBE8(*(_QWORD *)(a1 + 280));
      v91 = sub_1000C7EA4(a1 + 80);
      v92 = sub_10026A858(*(_QWORD *)(a1 + 280));
      v93 = sub_100050DB0(*(_QWORD *)(a1 + 8) + v87 - 72);
      v94 = sub_100258E6C((_QWORD *)(v93 + 8));
      v95 = (double)(a2 - v88) / 1000000000.0;
      if (v95 >= v89 || ((v90 ^ 1) & 1) != 0)
      {
        if (v95 >= v89)
          v98 = 1;
        else
          v98 = v91;
        if ((v98 & 1) != 0)
          goto LABEL_147;
        v96 = 0;
      }
      else
      {
        if (v94)
          v96 = v92;
        else
          v96 = 0;
        if ((v91 & 1) != 0)
        {
          if (v96)
            goto LABEL_145;
          goto LABEL_147;
        }
      }
      if (((sub_10026A8B0(*(_QWORD *)(a1 + 280)) | v96) & 1) != 0)
      {
LABEL_145:
        LOBYTE(v171) = 0;
        sub_1001A3BF0(&v172, a1 + 80);
        LOBYTE(v171) = 1;
        sub_1000BA2F8(a1, a2, (uint64_t)a3, a4, (uint64_t)&v171, &buf);
        v97 = v158;
        if ((unint64_t)v158 >= v159)
          goto LABEL_149;
        goto LABEL_148;
      }
LABEL_147:
      LOBYTE(v171) = 0;
      sub_1000BA2F8(a1, a2, (uint64_t)a3, a4, (uint64_t)&v171, &buf);
      v97 = v158;
      if ((unint64_t)v158 >= v159)
      {
LABEL_149:
        v99 = (char *)sub_10022F664(&v157, (uint64_t)&buf);
        goto LABEL_150;
      }
LABEL_148:
      sub_1000BAE08((uint64_t)v158, (uint64_t)&buf);
      v99 = v97 + 392;
LABEL_150:
      v158 = v99;
      sub_1000BA0F0((uint64_t)&buf);
      if ((_BYTE)v171)
        sub_10000CF0C((uint64_t)&v172);
      v100 = *(_QWORD *)(a1 + 8);
      if (v85 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v100) >> 3))
      {
        v101 = (char *)v157;
        *(_QWORD *)&v101[v86] = sub_100050DB0(v100 + v87) + 8;
      }
      v86 -= 392;
      v87 -= 72;
      --v85;
    }
    while (v85);
  }
  v103 = (uint64_t *)v163;
  v102 = v164;
  if (v163 == v164)
    goto LABEL_228;
  if (a2 >= 0)
    v104 = a2;
  else
    v104 = -a2;
  v151 = v104;
  while (2)
  {
    v105 = *v103;
    v106 = *((double *)v160 + *v103) * *(double *)(v166.__r_.__value_.__r.__words[0] + 8 * *v103);
    v107 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 72 * *v103);
    v156 = 0uLL;
    if (v106 == 0.0)
    {
      v156 = 0uLL;
      goto LABEL_162;
    }
    sub_10022CB08((uint64_t)v170, (uint64_t)v157 + 392 * v105);
    sub_10025B37C(v107, (uint64_t)v170, v106);
    v110 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v111 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
    v156 = v110;
    if (!v111)
      goto LABEL_170;
    v112 = (unint64_t *)&v111->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
      v114 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
LABEL_171:
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
    }
    else
    {
LABEL_170:
      v114 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
        goto LABEL_171;
    }
    sub_1000BA0F0((uint64_t)v170);
    if (!(_QWORD)v156)
    {
LABEL_162:
      v108 = sub_100050DB0((uint64_t)v107);
      if (*(_QWORD *)(v108 + 8) != *(_QWORD *)(v108 + 16))
        goto LABEL_177;
      if (qword_100417ED8 == -1)
      {
        v109 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_214;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
        v109 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_214;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "No need to resample at timestamp %lld because we haven't initialized yet and no injection was requested.", (uint8_t *)&buf, 0xCu);
      goto LABEL_214;
    }
LABEL_177:
    v117 = sub_100050DB0((uint64_t)v107);
    sub_1002256D4(v117, *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 400), (double **)&v156, a5, (uint64_t)&v171);
    v118 = sub_100050DB0((uint64_t)v107);
    sub_10023F788((uint64_t *)(v118 + 8));
    v119 = v171;
    if (!(_BYTE)v171)
    {
      memset(&v154, 0, sizeof(v154));
      v176 = &buf.__r_.__value_.__s.__data_[2];
      v177 = v175;
      *(_QWORD *)&__p = v151;
      *((_QWORD *)&__p + 1) = v175;
      LOBYTE(v169) = 48;
      HIDWORD(v169) = 48;
      v123 = sub_100173F80((uint64_t)&__p);
      v124 = (_BYTE *)v123;
      if (a2 < 0)
      {
        *(_BYTE *)(v123 - 1) = 45;
        v124 = (_BYTE *)(v123 - 1);
        v176 = (std::string::value_type *)(v123 - 1);
        v177 = v175;
        v125 = (std::string::size_type)&v175[-v123 + 1];
        if (v125 >= 0x17)
        {
LABEL_186:
          std::string::__grow_by(&v154, 0x16uLL, v125 - 22, 0, 0, 0, 0);
          v154.__r_.__value_.__l.__size_ = 0;
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v126 = &v154;
          else
            v126 = (std::string *)v154.__r_.__value_.__r.__words[0];
          if (v124 == v175)
            goto LABEL_190;
          goto LABEL_193;
        }
      }
      else
      {
        v176 = (std::string::value_type *)v123;
        v177 = v175;
        v125 = (std::string::size_type)&v175[-v123];
        if ((unint64_t)&v175[-v123] >= 0x17)
          goto LABEL_186;
      }
      v126 = &v154;
      if (v124 == v175)
      {
LABEL_190:
        v127 = v126;
        goto LABEL_201;
      }
LABEL_193:
      if (v125 < 0x20 || (unint64_t)((char *)v126 - v124) < 0x20)
      {
        v127 = v126;
        v128 = v124;
      }
      else
      {
        v127 = (std::string *)((char *)v126 + (v125 & 0xFFFFFFFFFFFFFFE0));
        v128 = &v124[v125 & 0xFFFFFFFFFFFFFFE0];
        v129 = (__int128 *)(v124 + 16);
        v130 = &v126->__r_.__value_.__r.__words[2];
        v131 = v125 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v132 = *v129;
          *((_OWORD *)v130 - 1) = *(v129 - 1);
          *(_OWORD *)v130 = v132;
          v129 += 2;
          v130 += 4;
          v131 -= 32;
        }
        while (v131);
        if (v125 == (v125 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_201;
      }
      do
      {
        v133 = *v128++;
        v127->__r_.__value_.__s.__data_[0] = v133;
        v127 = (std::string *)((char *)v127 + 1);
      }
      while (v128 != v175);
LABEL_201:
      v127->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        v154.__r_.__value_.__l.__size_ = v125;
      else
        *((_BYTE *)&v154.__r_.__value_.__s + 23) = v125 & 0x7F;
      v134 = std::string::insert(&v154, 0, "Inference has failed at timestamp ");
      v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v135;
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      v136 = std::string::append(&v155, ". Our only option is to start a new particle filter from this point forward.");
      v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v137;
      v136->__r_.__value_.__l.__size_ = 0;
      v136->__r_.__value_.__r.__words[2] = 0;
      v136->__r_.__value_.__r.__words[0] = 0;
      if (qword_100417ED8 == -1)
      {
        v138 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
          goto LABEL_209;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
        v138 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
          goto LABEL_209;
      }
      v139 = &v167;
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v139 = (std::string *)v167.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v139;
      _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
LABEL_209:
      sub_10003D038((_QWORD *)a1, *(_QWORD *)(a1 + 456), (_QWORD *)(a1 + 360), (_QWORD **)(a1 + 376));
    }
    v120 = sub_100050DB0((uint64_t)v107);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v120 + 32))(v120, &v172, a2);
    v121 = sub_100050DB0((uint64_t)v107);
    sub_10023F788((uint64_t *)(v121 + 8));
    v122 = sub_100050DB0((uint64_t)v107);
    if (sub_100241AF8(*(double **)(v122 + 8)) == -INFINITY)
    {
      sub_1000D5048(&__p, "");
      sub_1001DFA48("AFTER reabsorb ", &buf);
      sub_100174738((uint64_t)&__p, (uint64_t)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v169) < 0)
        operator delete((void *)__p);
      sub_1000F2AE4((uint64_t)&v167);
    }
    if ((_BYTE)v171 && v172)
    {
      v173 = v172;
      operator delete(v172);
    }
    if (v119)
    {
LABEL_214:
      v140 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
      if (*((_QWORD *)&v156 + 1))
      {
        v141 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      if (++v103 == v102)
        goto LABEL_228;
      continue;
    }
    break;
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
LABEL_228:
  v146 = (char *)v157;
  if (v157)
  {
    v147 = v158;
    v148 = v157;
    if (v158 != v157)
    {
      do
        v147 = (char *)sub_1000BA0F0((uint64_t)(v147 - 392));
      while (v147 != v146);
      v148 = v157;
    }
    v158 = v146;
    operator delete(v148);
  }
  if (v160)
    operator delete(v160);
  if (v163)
  {
    v164 = (uint64_t *)v163;
    operator delete(v163);
  }
  if (v166.__r_.__value_.__r.__words[0])
    operator delete(v166.__r_.__value_.__l.__data_);
}

void sub_1000B9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (a35)
    operator delete(a35);
  if (a38)
  {
    operator delete(a38);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000BA0F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = *(_QWORD **)(a1 + 368);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = 0;
  if (v4)
    operator delete(v4);
  if (*(_BYTE *)(a1 + 288))
  {
    v5 = *(void **)(a1 + 320);
    if (v5)
    {
      *(_QWORD *)(a1 + 328) = v5;
      operator delete(v5);
    }
    v6 = *(_QWORD *)(a1 + 296);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 304);
      v8 = *(void **)(a1 + 296);
      if (v7 != v6)
      {
        do
        {
          v10 = *(_DWORD *)(v7 - 176);
          if (v10 == v10 >> 31)
          {
            if (*(_BYTE *)(v7 - 128))
              *(_BYTE *)(v7 - 128) = 0;
          }
          else
          {
            v9 = *(_QWORD *)(v7 - 168);
            if (v10 < 0)
            {
              if (v9)
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            }
            else
            {
              (*(void (**)(uint64_t))v9)(v7 - 168);
            }
          }
          v7 -= 208;
        }
        while (v7 != v6);
        v8 = *(void **)(a1 + 296);
      }
      *(_QWORD *)(a1 + 304) = v6;
      operator delete(v8);
    }
    *(_BYTE *)(a1 + 288) = 0;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    sub_10000CF0C(a1 + 88);
    *(_BYTE *)(a1 + 80) = 0;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v11)
    goto LABEL_28;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v14)
      goto LABEL_34;
  }
  else
  {
LABEL_28:
    v14 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v14)
      goto LABEL_34;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_34:
  v17 = *(std::__shared_weak_count **)(a1 + 32);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(std::__shared_weak_count **)(a1 + 8);
      if (v20)
        goto LABEL_39;
      return a1;
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v20)
    return a1;
LABEL_39:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_1000BA2F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v26 = 0;
  v27 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_1000BAF9C(a6, a3, a2, &v26, &v24, a5);
  v11 = v25;
  if (v25)
  {
    v12 = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v18 = *a4;
  v17 = a4[1];
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = (std::__shared_weak_count *)a6[1];
  *a6 = v18;
  a6[1] = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1000BA448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BA464(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  __n128 v27;
  char *v28;
  char *v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *j;
  void *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *__p[2];
  _QWORD *v45;
  void *v46[2];
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = *a4;
  v7 = a4[1];
  *(_QWORD *)(a1 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 40) = *a2;
  v10 = a2[1];
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 56) = a3;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*a6)
  {
    sub_1001A3BF0(a1 + 88, a6 + 8);
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  v13 = (_OWORD *)(a1 + 352);
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
  {
    sub_1000BA860(v14, a1 + 352);
  }
  else
  {
    *v13 = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_DWORD *)(a1 + 384) = 1065353216;
  }
  sub_1000BB28C((uint64_t)__p, a1 + 352);
  if (*(_QWORD *)(a1 + 376))
  {
    v15 = *(_QWORD **)(a1 + 368);
    if (v15)
    {
      do
      {
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 368) = 0;
    v17 = *(_QWORD *)(a1 + 360);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*(_QWORD *)v13 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 376) = 0;
  }
  v19 = __p[0];
  __p[0] = 0;
  v20 = *(void **)v13;
  *(_QWORD *)v13 = v19;
  if (v20)
    operator delete(v20);
  v22 = (unint64_t)__p[1];
  v21 = v45;
  __p[1] = 0;
  v23 = v46[0];
  *(_QWORD *)(a1 + 368) = v45;
  *(_QWORD *)(a1 + 376) = v23;
  *(_DWORD *)(a1 + 384) = v46[1];
  *(_QWORD *)(a1 + 360) = v22;
  if (v23)
  {
    v24 = v21[1];
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v24 >= v22)
        v24 %= v22;
    }
    else
    {
      v24 &= v22 - 1;
    }
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v24) = a1 + 368;
    v45 = 0;
    v46[0] = 0;
  }
  else if (v21)
  {
    do
    {
      v25 = (_QWORD *)*v21;
      operator delete(v21);
      v21 = v25;
    }
    while (v25);
  }
  v26 = __p[0];
  __p[0] = 0;
  if (v26)
    operator delete(v26);
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 64))
    return a1;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  sub_100219130(__p, &v41, &v38, *(_QWORD *)(a1 + 56));
  if (*(_BYTE *)(a1 + 288))
  {
    v27 = sub_100276748((__n128 *)(a1 + 288), (uint64_t)__p);
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    v28 = (char *)__p[0];
    if (!__p[0])
    {
LABEL_37:
      v29 = (char *)v38;
      if (!v38)
        goto LABEL_38;
LABEL_54:
      for (j = v39; j != v29; j -= 88)
      {
        if (*(j - 48))
          *(j - 48) = 0;
      }
      v39 = v29;
      operator delete(v29);
      v30 = v41;
      if (v41)
        goto LABEL_39;
      return a1;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 296) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 312) = v45;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(__n128 *)v46;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)v46;
    v45 = 0;
    v46[0] = 0;
    v32 = v47;
    v33 = v48;
    v46[1] = 0;
    v47 = 0;
    *(_QWORD *)(a1 + 336) = v32;
    *(_QWORD *)(a1 + 344) = v33;
    *(_BYTE *)(a1 + 288) = 1;
    v28 = (char *)__p[0];
    if (!__p[0])
      goto LABEL_37;
  }
  v34 = (char *)__p[1];
  if (__p[1] == v28)
  {
    __p[1] = v28;
    operator delete(v28);
    v29 = (char *)v38;
    if (v38)
      goto LABEL_54;
  }
  else
  {
    do
    {
      v36 = *((_DWORD *)v34 - 44);
      if (v36 == v36 >> 31)
      {
        if (*(v34 - 128))
          *(v34 - 128) = 0;
      }
      else
      {
        v35 = *((_QWORD *)v34 - 21);
        if (v36 < 0)
        {
          if (v35)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v35 + 8))(v35, v27);
        }
        else
        {
          (*(void (**)(char *))v35)(v34 - 168);
        }
      }
      v34 -= 208;
    }
    while (v34 != v28);
    __p[1] = v28;
    operator delete(__p[0]);
    v29 = (char *)v38;
    if (v38)
      goto LABEL_54;
  }
LABEL_38:
  v30 = v41;
  if (v41)
  {
LABEL_39:
    v42 = v30;
    operator delete(v30);
  }
  return a1;
}

void sub_1000BA7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1002191E8(&a15);
  sub_100275288((char **)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10022CAC0(v20);
  sub_10022CA00(v19);
  if (*(_BYTE *)(v15 + 80))
  {
    sub_10000CF0C(v15 + 88);
    *(_BYTE *)(v15 + 80) = 0;
  }
  sub_1000E095C(v18);
  sub_1000E095C(v17);
  sub_1000E095C(v16);
  sub_1000E095C(v15);
  _Unwind_Resume(a1);
}

void sub_1000BA860(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float v4;
  size_t prime;
  uint64_t *i;
  int v7;
  _QWORD *v8;
  int v9;
  int v10;
  __int128 v11;
  int v12;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = (float)*(unint64_t *)(a1 + 128);
  prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    prime = 2;
LABEL_6:
    sub_100005DD8(a2, prime);
    goto LABEL_7;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
    prime = std::__next_prime((unint64_t)v4);
  if (prime)
    goto LABEL_6;
LABEL_7:
  for (i = *(uint64_t **)(a1 + 120); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 4);
    v8 = i + 3;
    if (v7 == v7 >> 31)
    {
      *(_QWORD *)&v11 = *v8;
      v9 = v7;
    }
    else
    {
      v11 = *(_OWORD *)v8;
      v12 = *((_DWORD *)i + 10);
      v9 = *((_DWORD *)i + 4);
      v7 = v9 >> 31;
    }
    v10 = v9 ^ v7;
    sub_1000BA9A8(a2, (uint64_t)&v10, &v10);
  }
}

void sub_1000BA970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v3 = *(_QWORD **)(v1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(void **)v1;
  *(_QWORD *)v1 = 0;
  if (v5)
    operator delete(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000BA9A8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v45;
  char *v46;

  v46 = &v45;
  v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  else
  {
    v8 = sub_10022CC84((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v9)
      v3 = v8 % v9;
  }
  else
  {
    v3 = (v9 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v11)
  {
    v12 = (_QWORD *)*v11;
    if (*v11)
    {
      v13 = *(_DWORD *)a2;
      v14 = (v13 >> 31) ^ v13;
      v15 = v13 >> 31 == v13;
      v16 = *(_QWORD *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
                return v12;
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              v20 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
                return v12;
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      if (v15)
      {
        while (1)
        {
          v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
              return v12;
          }
          else
          {
            if (v22 >= v9)
              v22 %= v9;
            if (v22 != v3)
              goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      do
      {
        v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            v24 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
              return v12;
          }
        }
        else
        {
          if (v23 >= v9)
            v23 %= v9;
          if (v23 != v3)
            break;
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  v26 = operator new(0x30uLL);
  v12 = v26;
  *v26 = 0;
  v26[1] = v8;
  v27 = v26 + 3;
  v30 = *a3;
  v29 = a3 + 2;
  v28 = v30;
  v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    *v27 = *(_QWORD *)v29;
    v31 = v28;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 10) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    v8 = v3;
  }
  else
  {
    v34 = 1;
    if (v9 >= 3)
      v34 = (v9 & (v9 - 1)) != 0;
    v35 = v34 | (2 * v9);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_74;
    if (prime < v9)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < v9)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  v41 = *(_QWORD *)a1;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v42)
  {
    *v12 = *v42;
LABEL_97:
    *v42 = v12;
    goto LABEL_98;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    v43 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1000BADF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BAE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    sub_1001A3BF0(a1 + 88, a2 + 88);
    *(_BYTE *)(a1 + 80) = 1;
  }
  *(_BYTE *)(a1 + 288) = 0;
  if (*(_BYTE *)(a2 + 288))
  {
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    v4 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v4;
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    v5 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    *(_QWORD *)(a1 + 344) = v5;
    *(_BYTE *)(a1 + 288) = 1;
  }
  v6 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a1 + 352) = v6;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v7 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 368) = v7;
  v8 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v8;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 8);
    v10 = *(_QWORD *)(a1 + 360);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v9 %= v10;
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(_QWORD *)(v6 + 8 * v9) = a1 + 368;
    *(_QWORD *)(a2 + 368) = 0;
    *(_QWORD *)(a2 + 376) = 0;
  }
  return a1;
}

void sub_1000BAF6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000E095C(v3);
  sub_1000E095C(v2);
  sub_1000E095C(v1 + 24);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000BAFA0(uint64_t a1)
{
  _BOOL8 result;
  BOOL v3;

  result = sub_1000BAFD8((double **)(a1 + 8), (double *)(a1 + 32));
  if (*(_BYTE *)(a1 + 120))
    v3 = result;
  else
    v3 = 0;
  *(_BYTE *)(a1 + 120) = v3;
  return result;
}

BOOL sub_1000BAFD8(double **a1, double *a2)
{
  double *v2;
  double *v3;
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  int v12;
  double v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = -INFINITY;
  if (*a1 != v3)
  {
    v5 = *a1;
    do
    {
      v6 = *v5;
      v5 += 10;
      v7 = v6;
      if (v4 < v6)
        v4 = v7;
    }
    while (v5 != v3);
  }
  if (a2 && v4 < *a2)
    v4 = *a2;
  if (v4 < -3.6e16)
  {
    if (qword_100417ED8 == -1)
    {
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        return v4 >= -3.6e16;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF0E0);
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        return v4 >= -3.6e16;
    }
    v12 = 134217984;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "These days it's unclear if this type of catastrophic failure can still occur given:\n+ globalDbm scan prior\n+ map uncertainty\n+ off-map particle\n+ renormalization\n\nBUT: in case it does, your maxLoglikelihood was %f", (uint8_t *)&v12, 0xCu);
    return v4 >= -3.6e16;
  }
  for (; v2 != v3; v2 += 10)
  {
    v8 = v4 + v2[1];
    *v2 = *v2 - v4;
    v2[1] = v8;
  }
  if (a2)
  {
    v9 = v4 + a2[1];
    *a2 = *a2 - v4;
    a2[1] = v9;
  }
  return v4 >= -3.6e16;
}

void sub_1000BB150(_QWORD *a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;

  v2 = (void *)*a1;
  if (0x7D6343EB1A1F58D1 * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xA72F05397829CCLL)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 392 * a2;
    v6 = (char *)operator new(392 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v11 = v8;
    *((_QWORD *)&v11 + 1) = &v6[v5];
    while ((void *)(v4 + v7) != v2)
    {
      v7 -= 392;
      sub_10022CB08((uint64_t)&v8[v7], v7 + v4);
    }
    v10 = (void *)*a1;
    v9 = a1[1];
    *a1 = &v8[v7];
    for (*(_OWORD *)(a1 + 1) = v11; (void *)v9 != v10; v9 = sub_1000BA0F0(v9 - 392))
      ;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1000BB28C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_1000BB3CC(a1, (uint64_t)(i + 4), i + 4);
  return a1;
}

void sub_1000BB3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022CAC0(v1);
  _Unwind_Resume(a1);
}

void sub_1000BB3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022CAC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000BB3CC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v45;
  char *v46;

  v46 = &v45;
  v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  else
  {
    v8 = sub_10022CC84((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v9)
      v3 = v8 % v9;
  }
  else
  {
    v3 = (v9 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v11)
  {
    v12 = (_QWORD *)*v11;
    if (*v11)
    {
      v13 = *(_DWORD *)a2;
      v14 = (v13 >> 31) ^ v13;
      v15 = v13 >> 31 == v13;
      v16 = *(_QWORD *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
                return v12;
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              v20 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
                return v12;
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      if (v15)
      {
        while (1)
        {
          v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
              return v12;
          }
          else
          {
            if (v22 >= v9)
              v22 %= v9;
            if (v22 != v3)
              goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      do
      {
        v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            v24 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
              return v12;
          }
        }
        else
        {
          if (v23 >= v9)
            v23 %= v9;
          if (v23 != v3)
            break;
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  v26 = operator new(0x30uLL);
  v12 = v26;
  *v26 = 0;
  v26[1] = v8;
  v27 = v26 + 3;
  v30 = *a3;
  v29 = a3 + 2;
  v28 = v30;
  v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    *v27 = *(_QWORD *)v29;
    v31 = v28;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 10) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    v8 = v3;
  }
  else
  {
    v34 = 1;
    if (v9 >= 3)
      v34 = (v9 & (v9 - 1)) != 0;
    v35 = v34 | (2 * v9);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_74;
    if (prime < v9)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < v9)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  v41 = *(_QWORD *)a1;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v42)
  {
    *v12 = *v42;
LABEL_97:
    *v42 = v12;
    goto LABEL_98;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    v43 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1000BB818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000BB82C(uint64_t a1, float a2)
{
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  *(float *)(a1 + 16) = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    sub_1000AB668(a1, &v16);
    v4 = v16;
    v16 = 0uLL;
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = *(_QWORD *)(a1 + 24);
  }
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  (*(void (**)(uint64_t, float))(*(_QWORD *)v3 + 32))(v3, *(float *)(a1 + 16));
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1000BB95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BB970(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(a1 + 80);
  if ((~v1 & 0x9F) != 0)
    return 0;
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3)
      v3 = *(_QWORD *)(qword_10042EA20 + 16);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if (!(_DWORD)result)
      return result;
    v1 = *(_DWORD *)(a1 + 80);
  }
  if ((v1 & 0x20) != 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5)
      v5 = *(_QWORD *)(qword_10042EA20 + 40);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    if (!(_DWORD)result)
      return result;
    v1 = *(_DWORD *)(a1 + 80);
  }
  if ((v1 & 0x40) == 0)
  {
LABEL_17:
    if ((v1 & 0x100) == 0)
      return 1;
    v7 = *(_QWORD *)(a1 + 64);
    if (!v7)
      v7 = *(_QWORD *)(qword_10042EA20 + 64);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (!v6)
    v6 = *(_QWORD *)(qword_10042EA20 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  if ((_DWORD)result)
  {
    v1 = *(_DWORD *)(a1 + 80);
    goto LABEL_17;
  }
  return result;
}

BOOL sub_1000BBA5C(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 40) & 7) == 0;
}

uint64_t sub_1000BBA70(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 92);
  if ((v1 & 8) == 0)
    return 0;
  if (*(int *)(a1 + 24) < 1)
  {
LABEL_9:
    if ((v1 & 4) != 0)
    {
      v6 = *(_QWORD *)(a1 + 64);
      if (v6)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(qword_10042EA28 + 64) + 40))(*(_QWORD *)(qword_10042EA28 + 64));
        if (!(_DWORD)result)
          return result;
      }
    }
    return 1;
  }
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) == 0)
      return 0;
    if (++v4 >= *(int *)(a1 + 24))
    {
      v1 = *(_DWORD *)(a1 + 92);
      goto LABEL_9;
    }
  }
}

BOOL sub_1000BBB30(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 32) & 3) == 0;
}

uint64_t sub_1000BBB44(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 40);
  if ((~v1 & 3) != 0)
    return 0;
  if ((v1 & 1) == 0)
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(qword_10042EA58 + 16) + 40))(*(_QWORD *)(qword_10042EA58 + 16));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_1000BBBB4(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_DWORD *)(a1 + 200);
  if ((~v1 & 0x7D) != 0)
    return 0;
  if ((v1 & 8) != 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!v3)
      v3 = *(_QWORD *)(qword_10042EA50 + 32);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if (!(_DWORD)result)
      return result;
    v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (!v5)
      v5 = *(_QWORD *)(qword_10042EA50 + 40);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    if (!(_DWORD)result)
      return result;
    v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x20) != 0)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (!v6)
      v6 = *(_QWORD *)(qword_10042EA50 + 48);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    if (!(_DWORD)result)
      return result;
    v1 = *(_DWORD *)(a1 + 200);
  }
  if ((v1 & 0x40) == 0)
  {
LABEL_22:
    if ((v1 & 0x80) == 0)
      return 1;
    v8 = *(_QWORD *)(a1 + 72);
    if (!v8)
      v8 = *(_QWORD *)(qword_10042EA50 + 72);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    v7 = *(_QWORD *)(qword_10042EA50 + 64);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if ((_DWORD)result)
  {
    v1 = *(_DWORD *)(a1 + 200);
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_1000BBCCC(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 36);
  if ((~v1 & 7) != 0)
    return 0;
  if ((v1 & 4) == 0)
    return 1;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(qword_10042EA78 + 24) + 40))(*(_QWORD *)(qword_10042EA78 + 24));
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_1000BBD3C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 48);
  if ((~v1 & 0xF) != 0)
    return 0;
  if ((v1 & 1) == 0)
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(qword_10042EA70 + 16) + 40))(*(_QWORD *)(qword_10042EA70 + 16));
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL sub_1000BBDAC(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 36) & 3) == 0;
}

BOOL sub_1000BBDC0(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 44) & 7) == 0;
}

BOOL sub_1000BBDD4(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 68) & 0xF) == 0;
}

BOOL sub_1000BBDE8(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 36) & 3) == 0;
}

uint64_t sub_1000BBDFC(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  char v25;
  BOOL v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  unint64_t v48;
  unsigned int *i;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int16 v61;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 1);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v27 = (uint64_t *)((char *)a2 - 10);
        v28 = *v8 | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 32);
        v29 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
        if (v28 > v29
          || v29 <= v28 && (result = sub_1000BC3F8(a2 - 1, (unsigned int *)((char *)v8 + 6)), (_DWORD)result))
        {
          v30 = *(_QWORD *)v8;
          v61 = *((_WORD *)v8 + 4);
          v60 = v30;
          v31 = *v27;
          *((_WORD *)v8 + 4) = *((_WORD *)a2 - 1);
          *(_QWORD *)v8 = v31;
          *v27 = v60;
          *((_WORD *)a2 - 1) = v61;
        }
        return result;
      case 3uLL:
        return sub_100251724(v8, (unsigned int *)((char *)v8 + 10), (unsigned int *)((char *)a2 - 10));
      case 4uLL:
        return sub_1002520DC(v8, (unsigned int *)((char *)v8 + 10), v8 + 5, (unsigned int *)((char *)a2 - 10));
      case 5uLL:
        return sub_10025223C(v8, (unsigned int *)((char *)v8 + 10), v8 + 5, (unsigned int *)((char *)v8 + 30), (unsigned int *)((char *)a2 - 10));
      default:
        if (v12 > 239)
        {
          if (v10 == 1)
          {
            if (v8 != a2)
            {
              v45 = (v13 - 2) >> 1;
              v46 = v45 + 1;
              v47 = (unsigned int *)((char *)v8 + 10 * v45);
              do
              {
                sub_10025240C((_BOOL8)v8, a3, 0xCCCCCCCCCCCCCCCDLL * (v12 >> 1), v47);
                v47 = (unsigned int *)((char *)v47 - 10);
                --v46;
              }
              while (v46);
              v48 = v12 / 0xAuLL;
              do
              {
                result = (uint64_t)sub_100252630((char *)v8, (uint64_t)a2, a3, v48);
                a2 = (unsigned int *)((char *)a2 - 10);
              }
              while (v48-- > 2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = (unsigned int *)((char *)v8 + 10 * (v13 >> 1));
          if ((unint64_t)v12 < 0x501)
          {
            sub_100251724(v15, v8, (unsigned int *)((char *)a2 - 10));
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_100251724(v8, v15, (unsigned int *)((char *)a2 - 10));
            v16 = 10 * v14;
            v17 = (unsigned int *)((char *)v8 + 10 * v14 - 10);
            sub_100251724((unsigned int *)((char *)v8 + 10), v17, a2 - 5);
            v18 = (unsigned int *)((char *)v8 + v16 + 10);
            sub_100251724(v8 + 5, v18, (unsigned int *)((char *)a2 - 30));
            sub_100251724(v17, v15, v18);
            v19 = *(_QWORD *)v8;
            v61 = *((_WORD *)v8 + 4);
            v60 = v19;
            v20 = *(_QWORD *)v15;
            *((_WORD *)v8 + 4) = *((_WORD *)v15 + 4);
            *(_QWORD *)v8 = v20;
            v21 = v60;
            *((_WORD *)v15 + 4) = v61;
            *(_QWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v22 = *v8 | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 32);
          v23 = *(unsigned int *)((char *)v8 - 10) | ((unint64_t)*((unsigned __int16 *)v8 - 3) << 32);
          if (v22 <= v23 && (v23 > v22 || !sub_1000BC3F8(v8 - 1, (unsigned int *)((char *)v8 + 6))))
          {
            result = (uint64_t)sub_10025196C((uint64_t *)v8, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v24 = (unsigned int *)sub_100251C08((char *)v8, (unint64_t)a2);
          if ((v25 & 1) == 0)
            goto LABEL_17;
          v26 = sub_100251E48(v8, v24);
          v9 = (unsigned int *)((char *)v24 + 10);
          result = sub_100251E48((unsigned int *)((char *)v24 + 10), a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v26)
              continue;
LABEL_17:
            result = sub_1000BBDFC(v8, v24, a3, -v11, a5 & 1);
            v9 = (unsigned int *)((char *)v24 + 10);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v24;
          if (v26)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (v8 != a2)
          {
            for (i = (unsigned int *)((char *)v8 + 10);
                  (unsigned int *)((char *)v8 + 10) != a2;
                  i = (unsigned int *)((char *)v8 + 10))
            {
              v52 = v8;
              v8 = i;
              v53 = *v52 | ((unint64_t)*((unsigned __int16 *)v52 + 2) << 32);
              v54 = *(unsigned int *)((char *)v52 + 10) | ((unint64_t)*((unsigned __int16 *)v52 + 7) << 32);
              if (v53 <= v54)
              {
                if (v54 > v53)
                  continue;
                result = sub_1000BC3F8(v52 + 4, (unsigned int *)((char *)v52 + 6));
                if (!(_DWORD)result)
                  continue;
              }
              v55 = *(_QWORD *)v8;
              v61 = *((_WORD *)v8 + 4);
              v60 = v55;
              do
              {
                do
                {
                  v56 = v52;
                  *(_QWORD *)((char *)v52 + 10) = *(_QWORD *)v52;
                  *((_WORD *)v52 + 9) = *((_WORD *)v52 + 4);
                  v57 = *(unsigned int *)((char *)v52 - 10);
                  v52 = (unsigned int *)((char *)v52 - 10);
                  v58 = v57 | ((unint64_t)*((unsigned __int16 *)v56 - 3) << 32);
                  v59 = v60 | ((unint64_t)WORD2(v60) << 32);
                }
                while (v58 > v59);
                if (v59 > v58)
                  break;
                result = sub_1000BC3F8((uint64_t *)((char *)&v60 + 6), v56 - 1);
              }
              while ((result & 1) != 0);
              v51 = v60;
              *((_WORD *)v56 + 4) = v61;
              *(_QWORD *)v56 = v51;
            }
          }
          return result;
        }
        if (v8 == a2)
          return result;
        v32 = (char *)v8 + 10;
        if ((unsigned int *)((char *)v8 + 10) == a2)
          return result;
        v33 = 0;
        v34 = v8;
        while (2)
        {
          v37 = v34;
          v34 = (unsigned int *)v32;
          v38 = *v37 | ((unint64_t)*((unsigned __int16 *)v37 + 2) << 32);
          v39 = *(unsigned int *)((char *)v37 + 10) | ((unint64_t)*((unsigned __int16 *)v37 + 7) << 32);
          if (v38 <= v39)
          {
            if (v39 > v38)
              goto LABEL_34;
            result = sub_1000BC3F8(v37 + 4, (unsigned int *)((char *)v37 + 6));
            if (!(_DWORD)result)
              goto LABEL_34;
          }
          v40 = *(_QWORD *)v34;
          v61 = *((_WORD *)v34 + 4);
          v60 = v40;
          *(_QWORD *)v34 = *(_QWORD *)v37;
          *((_WORD *)v34 + 4) = *((_WORD *)v37 + 4);
          v35 = v8;
          if (v37 == v8)
            goto LABEL_33;
          v41 = v33;
          while (1)
          {
            v42 = (char *)v8 + v41;
            v43 = *(unsigned int *)((char *)v8 + v41 - 10) | ((unint64_t)*(unsigned __int16 *)((char *)v8 + v41 - 6) << 32);
            v44 = v60 | ((unint64_t)WORD2(v60) << 32);
            if (v43 > v44)
              goto LABEL_38;
            if (v44 > v43)
              break;
            result = sub_1000BC3F8((uint64_t *)((char *)&v60 + 6), (unsigned int *)((char *)v8 + v41 - 4));
            if (!(_DWORD)result)
            {
              v35 = v37;
              goto LABEL_33;
            }
LABEL_38:
            v37 = (unsigned int *)((char *)v37 - 10);
            *(_QWORD *)v42 = *(_QWORD *)((char *)v8 + v41 - 10);
            *((_WORD *)v42 + 4) = *(_WORD *)((char *)v8 + v41 - 2);
            v41 -= 10;
            if (!v41)
            {
              v35 = v8;
              goto LABEL_33;
            }
          }
          v35 = (unsigned int *)((char *)v8 + v41);
LABEL_33:
          v36 = v60;
          *((_WORD *)v35 + 4) = v61;
          *(_QWORD *)v35 = v36;
LABEL_34:
          v32 = (char *)v34 + 10;
          v33 += 10;
          if ((unsigned int *)((char *)v34 + 10) != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_1000BC3F8(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_1000BC40C(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v10;
  uint64_t v11;

  v1 = this;
  if (*(_BYTE *)(this + 80))
  {
    if ((*(_BYTE *)(this + 80) & 1) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        v2 = *(_BYTE *)(this + 32);
        if (v2)
        {
          *(_DWORD *)(this + 24) = 1;
          if ((v2 & 2) != 0)
          {
            v3 = *(_QWORD *)(this + 16);
            if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            {
              if (*(char *)(v3 + 23) < 0)
              {
                **(_BYTE **)v3 = 0;
                *(_QWORD *)(v3 + 8) = 0;
              }
              else
              {
                *(_BYTE *)v3 = 0;
                *(_BYTE *)(v3 + 23) = 0;
              }
            }
          }
        }
        v4 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 24) = 0;
        if (v4)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_QWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    if ((*(_BYTE *)(v1 + 80) & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        if (*(_BYTE *)(this + 40))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        v5 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v5)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 80) & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        if (*(_BYTE *)(this + 40))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_DWORD *)(this + 32) = 0;
        }
        v6 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 32) = 0;
        if (v6)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 80) & 0x80) != 0)
    {
      v7 = *(_QWORD *)(v1 + 56);
      if ((_UNKNOWN *)v7 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          v8 = *(_DWORD *)(v1 + 80);
          if ((v8 & 0xFF00) == 0)
            goto LABEL_36;
          goto LABEL_29;
        }
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
  }
  v8 = *(_DWORD *)(v1 + 80);
  if ((v8 & 0xFF00) == 0)
    goto LABEL_36;
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    this = *(_QWORD *)(v1 + 64);
    if (this)
    {
      if (*(_BYTE *)(this + 36))
      {
        *(_QWORD *)(this + 16) = 0;
        *(_QWORD *)(this + 24) = 0;
      }
      v9 = *(_QWORD *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 28) = 0;
      if (v9)
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
    }
  }
  *(_DWORD *)(v1 + 72) = 1;
LABEL_36:
  v11 = *(_QWORD *)(v1 + 8);
  v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v10 + 18) = 0;
  if (v11)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v10);
  return this;
}

void sub_1000BC598(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    objc_destroyWeak((id *)(a1 + 32));
  }
  else
  {
LABEL_5:
    objc_destroyWeak((id *)(a1 + 32));
  }
}

uint64_t sub_1000BC61C(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v11;
  uint64_t v12;

  v1 = this;
  if (!*(_BYTE *)(this + 200))
    goto LABEL_27;
  if ((*(_BYTE *)(this + 200) & 1) == 0
    || (v2 = *(_QWORD *)(this + 16), (_UNKNOWN *)v2 == &wireless_diagnostics::google::protobuf::internal::kEmptyString))
  {
LABEL_6:
    *(_DWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 24) = 0;
    v3 = *(_DWORD *)(this + 200);
    if ((v3 & 8) != 0)
      goto LABEL_7;
    goto LABEL_9;
  }
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_6;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 24) = 0;
  v3 = *(_DWORD *)(this + 200);
  if ((v3 & 8) != 0)
  {
LABEL_7:
    this = *(_QWORD *)(this + 32);
    if (this)
    {
      this = (uint64_t)sub_1002E9174(this);
      v3 = *(_DWORD *)(v1 + 200);
    }
  }
LABEL_9:
  if ((v3 & 0x10) != 0)
  {
    this = *(_QWORD *)(v1 + 40);
    if (this)
    {
      this = (uint64_t)sub_1002D7F68(this);
      v3 = *(_DWORD *)(v1 + 200);
    }
  }
  if ((v3 & 0x20) != 0)
  {
    this = *(_QWORD *)(v1 + 48);
    if (this)
    {
      this = sub_1002EA1E4(this);
      v3 = *(_DWORD *)(v1 + 200);
    }
  }
  if ((v3 & 0x40) != 0)
  {
    this = *(_QWORD *)(v1 + 64);
    if (this)
    {
      if (*(_BYTE *)(this + 44))
      {
        *(_QWORD *)(this + 16) = 0;
        *(_QWORD *)(this + 24) = 0;
        *(_QWORD *)(this + 32) = 0;
      }
      v4 = *(_QWORD *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 36) = 0;
      if (v4)
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
    }
  }
  if ((*(_BYTE *)(v1 + 200) & 0x80) != 0)
  {
    this = *(_QWORD *)(v1 + 72);
    if (this)
    {
      if (*(_BYTE *)(this + 44))
      {
        *(_QWORD *)(this + 16) = 0;
        *(_QWORD *)(this + 24) = 0;
        *(_QWORD *)(this + 32) = 0;
      }
      v5 = *(_QWORD *)(this + 8);
      this += 8;
      *(_DWORD *)(this + 36) = 0;
      if (v5)
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
    }
  }
LABEL_27:
  v6 = *(_DWORD *)(v1 + 200);
  if ((v6 & 0x1FE00) != 0)
  {
    *(_QWORD *)(v1 + 104) = 0;
    *(_DWORD *)(v1 + 60) = 2;
    *(_QWORD *)(v1 + 136) = 0x100000001;
    *(_QWORD *)(v1 + 144) = 0;
    *(_QWORD *)(v1 + 152) = 0;
  }
  if ((v6 & 0xFF0000) != 0)
  {
    if ((v6 & 0x10000) != 0)
    {
      this = *(_QWORD *)(v1 + 160);
      if (this)
      {
        this = (uint64_t)sub_1002D85F0(this);
        v6 = *(_DWORD *)(v1 + 200);
      }
    }
    if ((v6 & 0x20000) != 0)
    {
      this = *(_QWORD *)(v1 + 168);
      if (this)
        this = (uint64_t)sub_1002D85F0(this);
    }
    *(_QWORD *)(v1 + 176) = 0;
    *(_QWORD *)(v1 + 184) = 0;
    *(_BYTE *)(v1 + 192) = 0;
  }
  if (*(int *)(v1 + 88) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      ++v7;
    }
    while (v7 < *(int *)(v1 + 88));
  }
  *(_DWORD *)(v1 + 88) = 0;
  if (*(int *)(v1 + 120) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + 8 * v9);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      ++v9;
    }
    while (v9 < *(int *)(v1 + 120));
  }
  v12 = *(_QWORD *)(v1 + 8);
  v11 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v11 + 28) = 0;
  *((_DWORD *)v11 + 48) = 0;
  if (v12)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v11);
  return this;
}

uint64_t sub_1000BC810(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v8;
  uint64_t v9;

  v1 = this;
  v2 = *(_DWORD *)(this + 92);
  if ((v2 & 0x3FC) != 0)
  {
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(this + 64);
      if (this)
      {
        this = sub_1002E7F44(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(v1 + 72);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(v1 + 80) = 0;
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  if (*(int *)(v1 + 48) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 48));
  }
  v9 = *(_QWORD *)(v1 + 8);
  v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v8 + 10) = 0;
  *((_DWORD *)v8 + 21) = 0;
  if (v9)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v8);
  return this;
}

id sub_1000BC920(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = *(_QWORD *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "implOnQueueUpdateTimer");
}

void sub_1000BC930(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

uint64_t sub_1000BC948(uint64_t a1)
{
  return sub_100033E28(*(_QWORD *)(a1 + 32) + 3736, a1 + 48);
}

uint64_t sub_1000BC95C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(uint64_t **)(v2 + 128);
  for (i = *(uint64_t **)(v2 + 136);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)(v1 + 48)))
  {
    v5 = *v3++;
  }
  return result;
}

id sub_1000BC9B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "implOnQueueResume");
}

uint64_t sub_1000BC9B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  v5 = v4;
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)(qword_10041B018 + 272);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
LABEL_3:
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
      if (v4)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  v6 = *(_QWORD *)(qword_10041B0E0 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_4:
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(*(_QWORD *)(qword_10041B018 + 272) + 16);
  if (v8)
  {
LABEL_5:
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
    if (v4)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_QWORD *)(qword_10041B0E0 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_6:
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_QWORD *)(*(_QWORD *)(qword_10041B018 + 272) + 16);
  if (v10)
  {
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
    if (v4)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_QWORD *)(qword_10041B0E0 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_8:
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(*(_QWORD *)(qword_10041B018 + 272) + 16);
  if (v12)
  {
LABEL_9:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
    if (v4)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_QWORD *)(qword_10041B0E0 + 16);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (v4)
  {
LABEL_10:
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
      goto LABEL_11;
LABEL_26:
    v14 = *(_QWORD *)(qword_10041B0E0 + 16);
    if (v4)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_25:
  v14 = *(_QWORD *)(*(_QWORD *)(qword_10041B018 + 272) + 16);
  if (!v14)
    goto LABEL_26;
LABEL_11:
  if (v4)
    goto LABEL_12;
LABEL_27:
  v4 = *(_QWORD *)(qword_10041B018 + 272);
LABEL_12:
  v15 = *(_QWORD *)(v4 + 16);
  if (!v15)
    v15 = *(_QWORD *)(qword_10041B0E0 + 16);
  v16 = *(unsigned __int8 *)(v5 + 24);
  v17 = *(unsigned __int8 *)(v5 + 25);
  sub_1000BCC28((uint64_t)&v20, *(_BYTE *)(v8 + 24) != 0, *(_BYTE *)(v10 + 25) != 0, *(_BYTE *)(v12 + 26) != 0, *(_BYTE *)(v14 + 27) != 0, *(double *)(v6 + 16), *(float *)(v15 + 28));
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (!v18)
    v18 = *(_QWORD *)(qword_10041B018 + 272);
  return sub_1000BCBF8(a2, v16 != 0, v17 != 0, &v20, *(_BYTE *)(v18 + 26), *(_BYTE *)(v18 + 27), *(_BYTE *)(v18 + 33), *(_BYTE *)(v18 + 34), *(float *)(v18 + 36));
}

uint64_t sub_1000BCBF8(uint64_t result, char a2, char a3, __int128 *a4, char a5, char a6, char a7, char a8, double a9)
{
  __int128 v9;

  *(_BYTE *)result = a2;
  *(_BYTE *)(result + 1) = a3;
  v9 = *a4;
  *(_QWORD *)(result + 24) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(result + 8) = v9;
  *(_BYTE *)(result + 32) = a5;
  *(_BYTE *)(result + 33) = a6;
  *(_BYTE *)(result + 34) = a7;
  *(double *)(result + 40) = a9;
  *(_BYTE *)(result + 48) = a8;
  return result;
}

uint64_t sub_1000BCC28(uint64_t result, char a2, char a3, char a4, char a5, double a6, double a7)
{
  *(double *)result = a6;
  *(_BYTE *)(result + 8) = a2;
  *(_BYTE *)(result + 9) = a3;
  *(_BYTE *)(result + 10) = a4;
  *(_BYTE *)(result + 11) = a5;
  *(double *)(result + 16) = a7;
  return result;
}

void sub_1000BCC44(uint64_t a1)
{
  sub_1000BCC6C(*(uint64_t **)(a1 + 80));
  sub_100017A84(*(uint64_t **)(a1 + 80));
}

uint64_t sub_1000BCC6C(uint64_t *a1)
{
  return sub_1000BCC74(*a1);
}

uint64_t sub_1000BCC74(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 16));
  return result;
}

uint64_t sub_1000BCC88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t *sub_1000BCC94(uint64_t a1)
{
  return sub_1000D3C40((uint64_t *)(a1 + 48));
}

void sub_1000BCCAC(uint64_t a1)
{

}

void sub_1000BCCB8(uint64_t a1)
{

}

uint64_t sub_1000BCCC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

__n128 sub_1000BCCD0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 sub_1000BCCE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 sub_1000BCCF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1000BCD00(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

__n128 sub_1000BCD18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1000BCD24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id sub_1000BCD34(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = *(_QWORD *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "implOnQueueUpdateTimer");
}

id sub_1000BCD44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "implOnQueuePause");
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000BCD50(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  int v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  unint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = a2;
  v5 = *((_DWORD *)this + 15);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0)
      goto LABEL_3;
LABEL_15:
    v15 = *((_QWORD *)this + 3);
    if (v15)
    {
      *(_BYTE *)v3 = 18;
      v16 = (_DWORD)v3 + 1;
      v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v15 + 40);
      if (v17 <= 0x7F)
        goto LABEL_17;
    }
    else
    {
      v15 = *(_QWORD *)(qword_10041A9A8 + 24);
      *(_BYTE *)v3 = 18;
      v16 = (_DWORD)v3 + 1;
      v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v15 + 40);
      if (v17 <= 0x7F)
      {
LABEL_17:
        *((_BYTE *)v3 + 1) = (_BYTE)v17;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000BD014(v15, (uint64_t)v3 + 2, a3);
        if ((*((_DWORD *)this + 15) & 4) != 0)
          goto LABEL_21;
LABEL_4:
        if ((*((_BYTE *)this + 60) & 8) == 0)
          goto LABEL_5;
LABEL_28:
        v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 9);
        *(_BYTE *)v3 = 32;
        v23 = (unint64_t)v3 + 1;
        if ((v22 & 0x80000000) != 0)
        {
          v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v22, v23, a3);
          v6 = *((_DWORD *)this + 15);
          if ((v6 & 0x10) != 0)
            goto LABEL_35;
        }
        else if (v22 > 0x7F)
        {
          v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, v23, a3);
          v6 = *((_DWORD *)this + 15);
          if ((v6 & 0x10) != 0)
            goto LABEL_35;
        }
        else
        {
          *((_BYTE *)v3 + 1) = (_BYTE)v22;
          v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
          v6 = *((_DWORD *)this + 15);
          if ((v6 & 0x10) != 0)
            goto LABEL_35;
        }
LABEL_6:
        if ((v6 & 0x20) == 0)
          goto LABEL_7;
LABEL_36:
        v25 = *((_QWORD *)this + 6);
        *(_BYTE *)v3 = 49;
        *(_QWORD *)((char *)v3 + 1) = v25;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
        v26 = (_QWORD *)*((_QWORD *)this + 1);
        v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
        v7 = v26;
        if (!v26)
          return v3;
        goto LABEL_37;
      }
    }
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v17, v16, a3);
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000BD014(v15, v18, v19);
    if ((*((_DWORD *)this + 15) & 4) != 0)
      goto LABEL_21;
    goto LABEL_4;
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_BYTE *)a2 = 10;
    v11 = (_DWORD)a2 + 1;
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v10 + 40);
    if (v12 <= 0x7F)
      goto LABEL_11;
LABEL_14:
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v11, a3);
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000BD014(v10, v13, v14);
    v5 = *((_DWORD *)this + 15);
    if ((v5 & 2) != 0)
      goto LABEL_15;
    goto LABEL_3;
  }
  v10 = *(_QWORD *)(qword_10041A9A8 + 16);
  *(_BYTE *)a2 = 10;
  v11 = (_DWORD)a2 + 1;
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v10 + 40);
  if (v12 > 0x7F)
    goto LABEL_14;
LABEL_11:
  *((_BYTE *)v3 + 1) = (_BYTE)v12;
  v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000BD014(v10, (uint64_t)v3 + 2, a3);
  v5 = *((_DWORD *)this + 15);
  if ((v5 & 2) != 0)
    goto LABEL_15;
LABEL_3:
  if ((v5 & 4) == 0)
    goto LABEL_4;
LABEL_21:
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 8);
  *(_BYTE *)v3 = 24;
  v21 = (unint64_t)v3 + 1;
  if ((v20 & 0x80000000) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v20, v21, a3);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_28;
  }
  else if (v20 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v21, a3);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_28;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v20;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_28;
  }
LABEL_5:
  v6 = *((_DWORD *)this + 15);
  if ((v6 & 0x10) == 0)
    goto LABEL_6;
LABEL_35:
  v24 = *((_QWORD *)this + 5);
  *(_BYTE *)v3 = 41;
  *(_QWORD *)((char *)v3 + 1) = v24;
  v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
  if ((*((_DWORD *)this + 15) & 0x20) != 0)
    goto LABEL_36;
LABEL_7:
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v7 = v9;
  if (!v9)
    return v3;
LABEL_37:
  if (*v7 != v7[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v3, a3);
  return v3;
}

uint64_t sub_1000BD014(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 1) = v7;
    a2 += 9;
    v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      v9 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)a2 = 25;
      *(_QWORD *)(a2 + 1) = v9;
      a2 += 9;
      v10 = *(_QWORD **)(a1 + 8);
      v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v5 = v10;
      if (!v10)
        return a2;
      goto LABEL_9;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)a2 = 17;
  *(_QWORD *)(a2 + 1) = v8;
  a2 += 9;
  if ((*(_DWORD *)(a1 + 44) & 4) != 0)
    goto LABEL_8;
LABEL_4:
  v6 = *(_QWORD **)(a1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v5 = v6;
  if (!v6)
    return a2;
LABEL_9:
  if (*v5 != v5[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v4, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
  return a2;
}

uint64_t sub_1000BD144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(int *)(a1 + 24) < 1)
    return 1;
  v2 = 0;
  do
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if ((result & 1) == 0)
      break;
    ++v2;
  }
  while (v2 < *(int *)(a1 + 24));
  return result;
}

uint64_t sub_1000BD1A8(uint64_t this)
{
  uint64_t v1;
  int v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;

  v1 = this;
  v2 = *(_DWORD *)(this + 112);
  if ((v2 & 0x1FE) != 0)
  {
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(this + 40);
      if (this)
      {
        this = sub_10009E8C0(this);
        v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(_QWORD *)(v1 + 48) = 0x3FFF5C28F5C28F5CLL;
    *(_QWORD *)&v3 = 0xC8000000C8;
    *((_QWORD *)&v3 + 1) = 0xC8000000C8;
    *(_OWORD *)(v1 + 56) = v3;
    *(_DWORD *)(v1 + 72) = 200000000;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(_OWORD *)(v1 + 76) = xmmword_10039ACE0;
    *(_DWORD *)(v1 + 92) = 1088421888;
    *(_DWORD *)(v1 + 104) = 1088421888;
    if ((v2 & 0x4000) != 0)
    {
      this = *(_QWORD *)(v1 + 96);
      if (this)
        this = (uint64_t)sub_1001ADB8C(this);
    }
  }
  if (*(int *)(v1 + 24) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 24));
  }
  v7 = *(_QWORD *)(v1 + 8);
  v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v6 + 4) = 0;
  *((_DWORD *)v6 + 26) = 0;
  if (v7)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v6);
  return this;
}

uint64_t sub_1000BD290@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  const std::string::value_type *v11;
  std::logic_error v12;
  std::string v13;

  v4 = *a1;
  if (v4 == 0 || v4 >= 0xFFFFFFFE)
  {
    sub_1000D5048(&v13, "tm unable to handle ");
    v10 = *a1 + 2;
    if (v10 >= 3)
      v11 = "a special date value";
    else
      v11 = off_1003F9580[v10];
    std::string::append(&v13, v11);
    std::logic_error::logic_error(&v12, &v13);
    sub_100194264(&v12);
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v5 = sub_1000BD480(v4);
  *(_DWORD *)(a2 + 16) = WORD1(v5) - 1;
  *(_DWORD *)(a2 + 20) = (unsigned __int16)v5 - 1900;
  *(_DWORD *)(a2 + 12) = WORD2(v5);
  v6 = sub_1000BD480(*a1);
  v7 = (14 - WORD1(v6)) / 12;
  v8 = (int)((unsigned __int16)(v6 - v7)
           + WORD2(v6)
           + ((unsigned __int16)(v6 - v7) >> 2)
           - (unsigned __int16)(v6 - v7) / 0x64u
           + (unsigned __int16)(v6 - v7) / 0x190u
           + ((357913942 * (unint64_t)(31 * (unsigned __int16)(WORD1(v6) + 12 * v7 - 2))) >> 32))
     % 7;
  if ((unsigned __int16)v8 >= 7u)
    sub_100194778();
  *(_DWORD *)(a2 + 24) = (unsigned __int16)v8;
  result = sub_1000C1CF8(a1);
  *(_DWORD *)(a2 + 28) = (unsigned __int16)result - 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void sub_1000BD450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::out_of_range a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::out_of_range::~out_of_range(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_1000BD480(int a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v6;

  v1 = ((4 * (a1 + 32044)) | 3u) / 0x23AB1;
  v2 = a1 + 32044 - ((146097 * v1) >> 2);
  v3 = ((4 * v2) | 3) / 0x5B5;
  v4 = v2 - ((1461 * v3) >> 2);
  v5 = 5 * v4 + 2;
  v6 = v3 + 100 * v1 - 4800 + v5 / 0x5FA;
  if (v6 < 0x578u || (unsigned __int16)(v6 >> 4) >= 0x271u)
    sub_10018EC30();
  if ((unsigned __int16)(v5 / 0x99) - 12 * (unsigned __int16)(v5 / 0x5FA) == 0xFFFD
    || (unsigned __int16)(v5 / 0x99 - 12 * (v5 / 0x5FA) + 3) >= 0xDu)
  {
    sub_10018F228();
  }
  if ((_WORD)v4 - (unsigned __int16)((153 * (v5 / 0x99) + 2) / 5) == 0xFFFF
    || (unsigned __int16)(v4 - (153 * (v5 / 0x99) + 2) / 5 + 1) >= 0x20u)
  {
    sub_10018F820();
  }
  return ((unint64_t)(unsigned __int16)(v5 / 0x99 - 12 * (v5 / 0x5FA) + 3) << 16) | ((unint64_t)(v4 - (153 * (v5 / 0x99) + 2) / 5 + 1) << 32) | (unsigned __int16)(v3 + 100 * v1 - 4800 + v5 / 0x5FA);
}

void sub_1000BD60C(_QWORD *a1)
{
  *a1 = off_100407E88;
  sub_1000C7DB8();
}

void sub_1000BD698(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v4;
  sub_1003412EC(v5);
  if (*(_BYTE *)(v2 + 376))
    *(_BYTE *)(v2 + 376) = 0;
  sub_1003412EC(v3);
  sub_1000C7D78(v1);
  _Unwind_Resume(a1);
}

void sub_1000BD6D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1000C7D78(v1);
  _Unwind_Resume(a1);
}

double sub_1000BD6E8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 892857142;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = off_1003F98E8;
  *(_QWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 128) &= 0xFC00u;
  *(_QWORD *)(a1 + 136) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 144) = off_1003F98E8;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_WORD *)(a1 + 232) &= 0xFC00u;
  *(_QWORD *)(a1 + 240) = 0x7FF8000000000000;
  return result;
}

double *sub_1000BD76C(double *a1)
{
  double *v2;

  v2 = sub_1000BD7D0(a1, 0.0, 0.0, -1.0);
  sub_1000BD7D0(v2 + 3, 0.0, 0.0, -9.81);
  sub_1000BD7D0(a1 + 6, 0.0, 0.0, 0.0);
  return a1;
}

double *sub_1000BD7D0(double *result, double a2, double a3, double a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_1000BD804(uint64_t a1)
{

}

void sub_1000BD80C(uint64_t a1)
{

}

void sub_1000BD814(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1000BD81C(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 32);

  objc_destroyWeak(v1);
}

void sub_1000BD844(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 32);

  objc_destroyWeak(v1);
}

void sub_1000BD86C(uint64_t a1)
{
  id *v1;

  v1 = (id *)(a1 + 32);

  objc_destroyWeak(v1);
}

void sub_1000BD894(uint64_t a1)
{

}

void sub_1000BD89C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 808);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_100076820(a1 + 40);
  objc_destroyWeak((id *)(a1 + 32));
}

id sub_1000BD900(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

id sub_1000BD928(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000BD950(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

id sub_1000BD95C(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000BD984(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = sub_1000768A0(a1 + 40, a2 + 40);
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v5 = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a1 + 808) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void sub_1000BD9F0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000BDA04(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "onQueueNotify:onFloor:", a1 + 40, a1 + 800);

}

void sub_1000BDA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000BDA60(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 48), "copy");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1000BDA9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueueInvalidate");
}

id sub_1000BDAA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueueInvalidate");
}

void sub_1000BDAAC(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "onQueueStartScanning");
  objc_autoreleasePoolPop(v2);
}

id sub_1000BDADC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "sensorPresent");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000BDB10(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "onQueueStopScanning");
  objc_autoreleasePoolPop(v2);
}

void sub_1000BDB40(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  if (v3)
  {
    objc_msgSend(v3, "setDelegate:", 0);
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(void **)(v2 + 8);
  }
  *(_QWORD *)(v2 + 8) = 0;

}

void sub_1000BDB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 - 24);
  v5 = *(std::__shared_weak_count **)(a1 - 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1000CBDE8(v4 + 208, a2);
  sub_1000605B4(a1 - 32, 14, *(_QWORD *)(a2 + 16));
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1000BDC1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_100342060();
  _Unwind_Resume(exception_object);
}

void sub_1000BDC34(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  void *v24;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - v2;
    v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_19:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v11 = (char *)(v9 - v15);
        v16 = &v4[-v15];
        v17 = v4 - 16;
        v18 = &v6[8 * v13 - 16];
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *((_OWORD *)v17 - 1);
          v20 = *(_OWORD *)v17;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)v17 = 0uLL;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)v18 = v20;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          v23 = *(char **)a1;
          v2 = *(char **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 != v23)
          {
            do
            {
              v24 = (void *)*((_QWORD *)v2 - 1);
              v2 -= 8;

            }
            while (v2 != v23);
            v2 = v23;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v22 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_16;
  }
}

_QWORD *sub_1000BDD98(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_1000D02C0();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1000BDE38(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_100343ED0((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_1000BDE58(char **a1, unint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (a2 > (a1[2] - *a1) >> 7)
  {
    if (a2 >> 57)
      sub_1000D02C0();
    v5 = (uint64_t)a1[1];
    v6 = a2 << 7;
    v7 = (char *)operator new(a2 << 7);
    v8 = &v7[v6];
    v9 = &v7[v5 - (_QWORD)v3];
    if ((char *)v5 == v3)
    {
      *a1 = v9;
      a1[1] = v9;
      a1[2] = v8;
      if (v3)
LABEL_17:
        operator delete(v3);
    }
    else
    {
      v10 = (uint64_t)&v7[v5 - (_QWORD)v3];
      do
      {
        v10 -= 128;
        v5 -= 128;
        sub_1002685C0(v2, v10, v5);
      }
      while ((char *)v5 != v3);
      v11 = *a1;
      v3 = a1[1];
      *a1 = (char *)v10;
      a1[1] = v9;
      a1[2] = v8;
      if (v3 != v11)
      {
        do
        {
          v12 = v3 - 96;
          if (*(v3 - 96))
            sub_10006A864((uint64_t)(v3 - 96));
          if (*(v3 - 128))
          {
            v13 = (void *)*((_QWORD *)v3 - 15);
            if (v13)
            {
              *((_QWORD *)v3 - 14) = v13;
              operator delete(v13);
            }
            *(v3 - 128) = 0;
          }
          v3 -= 128;
        }
        while (v12 - 32 != v11);
        v3 = v11;
      }
      if (v3)
        goto LABEL_17;
    }
  }
}

void sub_1000BDF84(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;

  v2 = (uint64_t)(a1 + 2);
  v3 = (char *)*a1;
  v4 = a1[1];
  v5 = a1[2] - *a1;
  v6 = v4 - *a1;
  v7 = v6 >> 7;
  if (v6 >> 7 >= (unint64_t)(v5 >> 7))
    return;
  if ((char *)v4 == v3)
  {
    *a1 = v7 << 7;
    a1[1] = v7 << 7;
    a1[2] = v7 << 7;
    if (!v3)
      return;
    goto LABEL_19;
  }
  if (v6 < 0)
    sub_1000CDEB8();
  v8 = (char *)operator new(v6) + 128 * v7;
  v9 = (uint64_t)v8;
  do
  {
    v9 -= 128;
    v4 -= 128;
    sub_1002685C0(v2, v9, v4);
  }
  while ((char *)v4 != v3);
  v10 = (char *)*a1;
  v3 = (char *)a1[1];
  *a1 = v9;
  a1[1] = (uint64_t)v8;
  a1[2] = (uint64_t)v8;
  if (v3 != v10)
  {
    do
    {
      v11 = v3 - 96;
      if (*(v3 - 96))
        sub_10006A864((uint64_t)(v3 - 96));
      if (*(v3 - 128))
      {
        v12 = (void *)*((_QWORD *)v3 - 15);
        if (v12)
        {
          *((_QWORD *)v3 - 14) = v12;
          operator delete(v12);
        }
        *(v3 - 128) = 0;
      }
      v3 -= 128;
    }
    while (v11 - 32 != v10);
    v3 = v10;
  }
  if (v3)
LABEL_19:
    operator delete(v3);
}

void sub_1000BE0AC(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  __int128 v13;

  v2 = (char *)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 7) < a2)
  {
    if (a2 >= 0x22222222222223)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 1920 * a2;
    v6 = (char *)operator new(1920 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v13 = v8;
    *((_QWORD *)&v13 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 1920;
      sub_1000B53CC(&v8[v7], v7 + v4);
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v13;
    if (v9 != v10)
    {
      v11 = v9 - 1920;
      do
      {
        (**(void (***)(char *))v11)(v11);
        v12 = v11 == v10;
        v11 -= 1920;
      }
      while (!v12);
    }
    if (v10)
      operator delete(v10);
  }
}

void sub_1000BE1F8(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  void **v12;

  v2 = *(void ***)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a2)
    return;
  if (a2 >= 0x492492492492493)
    sub_1000D02C0();
  v4 = *(void ***)(a1 + 8);
  v5 = 56 * a2;
  v6 = (char *)operator new(56 * a2);
  v7 = &v6[v5];
  v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
    if (v2)
      goto LABEL_16;
    return;
  }
  v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    v10 = *(_OWORD *)(v4 - 7);
    *((_QWORD *)v9 - 5) = *(v4 - 5);
    *(_OWORD *)(v9 - 56) = v10;
    *(v4 - 6) = 0;
    *(v4 - 5) = 0;
    *(v4 - 7) = 0;
    v11 = *((_OWORD *)v4 - 2);
    *((_QWORD *)v9 - 2) = *(v4 - 2);
    *((_OWORD *)v9 - 2) = v11;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 4) = 0;
    *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
    v9 -= 56;
    v4 -= 7;
  }
  while (v4 != v2);
  v12 = *(void ***)a1;
  v2 = *(void ***)(a1 + 8);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    while (1)
    {
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*(v2 - 4));
        if (*((char *)v2 - 33) < 0)
LABEL_13:
          operator delete(*(v2 - 7));
      }
      else if (*((char *)v2 - 33) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 7;
      if (v2 == v12)
      {
        v2 = v12;
        break;
      }
    }
  }
  if (v2)
LABEL_16:
    operator delete(v2);
}

void sub_1000BE358(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    sub_1000BE358(a1, *a2);
    sub_1000BE358(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[10];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void sub_1000BE3E0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  if (a2)
  {
    sub_1000BE3E0(a1, *(_QWORD *)a2);
    sub_1000BE3E0(a1, *(_QWORD *)(a2 + 8));
    *(_QWORD *)(a2 + 56) = off_1003F9838;
    v4 = *(void **)(a2 + 112);
    if (v4)
    {
      *(_QWORD *)(a2 + 120) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a2 + 88);
    if (v5)
    {
      *(_QWORD *)(a2 + 96) = v5;
      operator delete(v5);
    }
    if (*(char *)(a2 + 87) < 0)
    {
      operator delete(*(void **)(a2 + 64));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_8;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_8:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t sub_1000BE488(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BE498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 104))
    *(_BYTE *)(a1 + 104) = 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
        v3 = sub_10031B008(v3 - 16);
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  nullsub_10(a1 + 48);
  *(_QWORD *)(a1 + 24) = off_1003F52B0;
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t sub_1000BE554(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE564(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE574(uint64_t a1)
{
  return sub_1000C693C(a1 + 24);
}

uint64_t sub_1000BE584(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1000BE5A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BE5B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    sub_100052B6C((_QWORD *)(a1 + 96));
    *(_BYTE *)(a1 + 88) = 0;
  }
  sub_1000C44F0(a1 + 24);
}

uint64_t sub_1000BE5F0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE600(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE610(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE620(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BE630(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  v2 = *(void (****)(_QWORD))(a1 + 248);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 256);
    v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      v5 = v3 - 20;
      v6 = v3 - 20;
      do
      {
        v7 = *v6;
        v6 -= 20;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *(void **)(a1 + 248);
    }
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    sub_100007738((_QWORD *)(a1 + 88));
    *(_BYTE *)(a1 + 80) = 0;
  }
  sub_1000C4714(a1 + 24);
}

uint64_t sub_1000BE6B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE6C8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE6DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE6F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE704(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE714(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 120))
  {
    result = nullsub_108(result + 128);
    *(_BYTE *)(v1 + 120) = 0;
  }
  if (*(_BYTE *)(v1 + 24))
  {
    result = nullsub_108(v1 + 32);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1000BE758(uint64_t a1)
{
  return sub_100094448(a1 + 24);
}

uint64_t sub_1000BE764(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE774(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE784(uint64_t a1)
{
  return sub_1000CA46C(a1 + 24);
}

uint64_t sub_1000BE790(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE7A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE7B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE7C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000BE7D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 1200;
        sub_1000ED500((cnframework::TimestampedEvent *)(v3 - 1192));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v1;
    operator delete(v4);
  }
}

uint64_t sub_1000BE840(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1000BE84C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t ****)(a2 + 16); i; i = (uint64_t ***)*i)
    sub_100268948(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1000BE964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE978(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_1000BE98C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_1000BEAC0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[3];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

uint64_t sub_1000BEBF4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    if (v5[9])
      operator delete((void *)v5[7]);
    if (v5[6])
      operator delete((void *)v5[4]);
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_1000BECA4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v35;
  __int128 v36;
  _BYTE v37[15];

double *sub_1000BF1C0(double *result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double *v53;
  double v54;
  double v55;
  double *v56;
  BOOL v57;
  double v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  double v91;
  double v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double *v108;
  BOOL v110;
  uint64_t v111;
  double *v112;
  double *v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  double v118;
  double *v119;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v67 = *(a2 - 1);
        v68 = *v10;
        if (v67 > *v10)
        {
          *v10 = v67;
          *(a2 - 1) = v68;
        }
        return result;
      case 3uLL:
        v69 = v10[1];
        v70 = *(a2 - 1);
        if (v69 <= v70)
          v71 = *((_QWORD *)a2 - 1);
        else
          v71 = *((_QWORD *)v10 + 1);
        if (v69 > v70)
          v69 = *(a2 - 1);
        *(a2 - 1) = v69;
        *((_QWORD *)v10 + 1) = v71;
        v72 = *(a2 - 1);
        if (v72 <= *v10)
          v73 = *v10;
        else
          v73 = *(a2 - 1);
        if (v72 > *v10)
          v72 = *v10;
        *(a2 - 1) = v72;
        v75 = *(_QWORD *)v10;
        v74 = v10[1];
        if (v73 <= v74)
        {
          v75 = *((_QWORD *)v10 + 1);
          v74 = v73;
        }
        *(_QWORD *)v10 = v75;
        v10[1] = v74;
        return result;
      case 4uLL:
        v77 = v10[1];
        v76 = v10[2];
        if (*v10 <= v76)
          v78 = *((_QWORD *)v10 + 2);
        else
          v78 = *(_QWORD *)v10;
        if (*v10 <= v76)
          v76 = *v10;
        v10[2] = v76;
        *(_QWORD *)v10 = v78;
        v79 = *(a2 - 1);
        if (v77 <= v79)
          v80 = *(a2 - 1);
        else
          v80 = v77;
        if (v77 <= v79)
          v79 = v77;
        *(a2 - 1) = v79;
        v81 = *v10;
        if (*v10 <= v80)
          v82 = v80;
        else
          v82 = *v10;
        if (*v10 > v80)
          v81 = v80;
        *v10 = v82;
        v10[1] = v81;
        v83 = v10[2];
        v84 = *(a2 - 1);
        if (v83 <= v84)
          v85 = *(a2 - 1);
        else
          v85 = v10[2];
        if (v83 > v84)
          v83 = *(a2 - 1);
        *(a2 - 1) = v83;
        v86 = v10[1];
        if (v86 <= v85)
          v87 = v85;
        else
          v87 = v10[1];
        if (v86 > v85)
          v86 = v85;
        v10[1] = v87;
        v10[2] = v86;
        return result;
      case 5uLL:
        v88 = *(_QWORD *)v10;
        v89 = v10[1];
        if (*v10 <= v89)
          v90 = *((_QWORD *)v10 + 1);
        else
          v90 = *(_QWORD *)v10;
        if (*v10 > v89)
          v88 = *((_QWORD *)v10 + 1);
        *(_QWORD *)v10 = v90;
        *((_QWORD *)v10 + 1) = v88;
        v91 = v10[3];
        v92 = *(a2 - 1);
        if (v91 <= v92)
          v93 = *((_QWORD *)a2 - 1);
        else
          v93 = *((_QWORD *)v10 + 3);
        if (v91 > v92)
          v91 = *(a2 - 1);
        *(a2 - 1) = v91;
        *((_QWORD *)v10 + 3) = v93;
        v94 = *(a2 - 1);
        v95 = v10[2];
        if (v94 <= v95)
          v96 = v10[2];
        else
          v96 = *(a2 - 1);
        if (v94 > v95)
          v94 = v10[2];
        *(a2 - 1) = v94;
        v98 = *((_QWORD *)v10 + 2);
        v97 = v10[3];
        v99 = v10[1];
        if (v96 <= v97)
        {
          v98 = *((_QWORD *)v10 + 3);
          v97 = v96;
        }
        *((_QWORD *)v10 + 2) = v98;
        v10[3] = v97;
        v100 = *(a2 - 1);
        if (v99 <= v100)
          v101 = *(a2 - 1);
        else
          v101 = v99;
        if (v99 <= v100)
          v100 = v99;
        *(a2 - 1) = v100;
        v102 = *(_QWORD *)v10;
        v104 = v10[2];
        v103 = v10[3];
        if (v103 <= *v10)
          v105 = *v10;
        else
          v105 = v10[3];
        if (v103 > *v10)
          v103 = *v10;
        if (v105 <= v104)
        {
          v102 = *((_QWORD *)v10 + 2);
          v104 = v105;
        }
        if (v103 <= v101)
          v106 = v101;
        else
          v106 = v103;
        if (v103 > v101)
          v103 = v101;
        if (v106 <= v104)
          v101 = v104;
        *(_QWORD *)v10 = v102;
        v10[1] = v101;
        if (v106 <= v104)
          v107 = v106;
        else
          v107 = v104;
        v10[2] = v107;
        v10[3] = v103;
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
              return sub_10021F33C(v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *(a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 <= *v14)
            {
              if (v15 > v18)
              {
                *v10 = v15;
                *(a2 - 1) = v18;
                v21 = *v14;
                if (*v10 > *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = *v10;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v15 <= v18)
            {
              *v14 = v18;
              *v10 = v19;
              v31 = *(a2 - 1);
              if (v31 <= v19)
                goto LABEL_32;
              *v10 = v31;
            }
            else
            {
              *v14 = v15;
            }
            *(a2 - 1) = v19;
LABEL_32:
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 <= *v10)
          {
            if (v15 > v16)
            {
              *v14 = v15;
              *(a2 - 1) = v16;
              v20 = *v10;
              if (*v14 > *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 <= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *(a2 - 1);
              if (v23 <= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *(a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v26 = *(v24 - 1);
          v25 = v24 - 1;
          v27 = v26;
          v28 = v10[1];
          v29 = *(a2 - 2);
          if (v26 <= v28)
          {
            if (v29 > v27)
            {
              *v25 = v29;
              *(a2 - 2) = v27;
              v30 = v10[1];
              if (*v25 > v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 <= v27)
            {
              v10[1] = v27;
              *v25 = v28;
              v32 = *(a2 - 2);
              if (v32 <= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *(a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v35 = v33[1];
          v34 = v33 + 1;
          v36 = v35;
          v37 = v10[2];
          v38 = *(a2 - 3);
          if (v35 <= v37)
          {
            if (v38 > v36)
            {
              *v34 = v38;
              *(a2 - 3) = v36;
              v39 = v10[2];
              if (*v34 > v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v36)
            {
              v10[2] = v36;
              *v34 = v37;
              v40 = *(a2 - 3);
              if (v40 <= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *(a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 > *v25)
          {
            if (v43 <= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 <= v42)
              {
                v41 = v42;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v25 = v43;
            *v34 = v42;
            goto LABEL_53;
          }
          if (v43 <= v41)
            goto LABEL_53;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 > v42)
            goto LABEL_52;
          v41 = v43;
LABEL_53:
          v44 = *v10;
          *v10 = v41;
          *v14 = v44;
          --a4;
          v22 = *v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          if (*(v10 - 1) <= v22)
          {
            if (v22 <= *(a2 - 1))
            {
              v59 = v10 + 1;
              do
              {
                v10 = v59;
                if (v59 >= a2)
                  break;
                ++v59;
              }
              while (v22 <= *v10);
            }
            else
            {
              do
              {
                v58 = v10[1];
                ++v10;
              }
              while (v22 <= v58);
            }
            v60 = a2;
            if (v10 < a2)
            {
              v60 = a2;
              do
                v61 = *--v60;
              while (v22 > v61);
            }
            if (v10 < v60)
            {
              v62 = *v10;
              v63 = *v60;
              do
              {
                *v10 = v63;
                *v60 = v62;
                do
                {
                  v64 = v10[1];
                  ++v10;
                  v62 = v64;
                }
                while (v22 <= v64);
                do
                {
                  v65 = *--v60;
                  v63 = v65;
                }
                while (v22 > v65);
              }
              while (v10 < v60);
            }
            v66 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v66;
            a5 = 0;
            *v66 = v22;
            continue;
          }
LABEL_55:
          v45 = 0;
          do
            v46 = v10[++v45];
          while (v46 > v22);
          v47 = &v10[v45];
          v48 = a2;
          if (v45 == 1)
          {
            v48 = a2;
            do
            {
              if (v47 >= v48)
                break;
              v50 = *--v48;
            }
            while (v50 <= v22);
          }
          else
          {
            do
              v49 = *--v48;
            while (v49 <= v22);
          }
          if (v47 < v48)
          {
            v51 = *v48;
            v52 = &v10[v45];
            v53 = v48;
            do
            {
              *v52 = v51;
              *v53 = v46;
              do
              {
                v54 = v52[1];
                ++v52;
                v46 = v54;
              }
              while (v54 > v22);
              do
              {
                v55 = *--v53;
                v51 = v55;
              }
              while (v55 <= v22);
            }
            while (v52 < v53);
            v56 = v52 - 1;
            if (v52 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v56;
            goto LABEL_73;
          }
          v56 = v47 - 1;
          if (v47 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v56 = v22;
          if (v47 < v48)
            goto LABEL_76;
          v57 = sub_10021F080(v10, v56);
          v10 = v56 + 1;
          result = (double *)sub_10021F080(v56 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v57)
              continue;
LABEL_76:
            result = (double *)sub_1000BF1C0(v9, v56, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v56 + 1;
            continue;
          }
          a2 = v56;
          if (v57)
            return result;
          goto LABEL_2;
        }
        v108 = v10 + 1;
        v110 = v10 == a2 || v108 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v110)
          {
            v111 = 0;
            v112 = v10;
            do
            {
              v115 = *v112;
              v114 = v112[1];
              v112 = v108;
              if (v114 > v115)
              {
                v116 = v111;
                do
                {
                  *(double *)((char *)v10 + v116 + 8) = v115;
                  if (!v116)
                  {
                    v113 = v10;
                    goto LABEL_191;
                  }
                  v115 = *(double *)((char *)v10 + v116 - 8);
                  v116 -= 8;
                }
                while (v114 > v115);
                v113 = (double *)((char *)v10 + v116 + 8);
LABEL_191:
                *v113 = v114;
              }
              v108 = v112 + 1;
              v111 += 8;
            }
            while (v112 + 1 != a2);
          }
        }
        else if (!v110)
        {
          do
          {
            v118 = *v9;
            v117 = v9[1];
            v9 = v108;
            if (v117 > v118)
            {
              v119 = v108;
              do
              {
                *v119 = v118;
                v118 = *(v119 - 2);
                --v119;
              }
              while (v117 > v118);
              *v119 = v117;
            }
            ++v108;
          }
          while (v9 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_1000BF954(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v11;
  void *v12[2];
  char v13;
  std::string __p;

  v3 = *a1;
  if (!*(_BYTE *)(*a1 + 8))
    return 0;
  if (*(uint64_t *)(v3 + 16) < 1 || *(_QWORD *)(v3 + 24) < 1)
    return 0;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5 < 1)
    return 0;
  v6 = a3 - a2;
  if (a3 < a2)
  {
    sub_1000D5048(v12, "");
    sub_10015D524("Must travel forward in time. Required: a <= b", &__p);
    sub_100174738((uint64_t)v12, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(v12[0]);
    sub_10015C2DC((uint64_t)&v11);
  }
  if (v6 >= v5)
    return 1;
  v7 = ((a2 - *(_QWORD *)v3) % v5 + v5) % v5;
  if (*(_BYTE *)(v3 + 40))
  {
    v9 = *(_QWORD *)(v3 + 16);
    v8 = (uint64_t *)(v3 + 16);
    if (a2 - v8[4] < v9)
      ++v8;
    if (v7 < *v8)
      return 1;
  }
  else if (v7 < *(_QWORD *)(v3 + 16))
  {
    return 1;
  }
  return v6 >= v5 - v7;
}

void sub_1000BFAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BFB24(uint64_t a1)
{
  double v1;
  double v2;

  if (!*(_BYTE *)(a1 + 280))
    return 2;
  v1 = *(double *)(a1 + 256);
  v2 = *(double *)(a1 + 272) * v1;
  return 1.0 - v1 > v2 && v2 < 0.5;
}

uint64_t sub_1000BFB60(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_1000BFB68(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 32);
}

float sub_1000BFB74(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 80);
  return *(float *)(v1 + 16);
}

float sub_1000BFBA0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float result;

  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 104);
  if (!v2)
    v2 = *(_QWORD *)(qword_10041B018 + 104);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 16);
  result = *(float *)(v2 + 32);
  *(float *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1000BFBE8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(unsigned __int8 *)(v1 + 25);
}

uint64_t sub_1000BFC14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 288);
  if (!result)
    return *(_QWORD *)(qword_10041B018 + 288);
  return result;
}

double sub_1000BFC38(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 152);
}

uint64_t sub_1000BFC44(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_1000BFC70()
{
  return 0;
}

uint64_t sub_1000BFC78(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 140);
}

float sub_1000BFC84(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 96);
}

int32x2_t sub_1000BFC90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int32x2_t *v3;
  int32x2_t *v4;
  __int32 v5;
  int32x2_t result;
  __int32 v7;
  __int32 v8;

  v3 = (int32x2_t *)sub_1000C4498(a2);
  v4 = *(int32x2_t **)(*(_QWORD *)(a1 + 8) + 216);
  if (!v4)
    v4 = *(int32x2_t **)(qword_10041B018 + 216);
  v5 = v3[4].i32[1];
  v3[4].i32[1] = v5 | 3;
  result = vrev64_s32(v4[2]);
  v3[2] = result;
  v7 = v4[3].i32[1];
  v5 |= 7u;
  v3[4].i32[1] = v5;
  v3[3].i32[0] = v7;
  v8 = v4[3].i32[0];
  v3[4].i32[1] = v5 | 8;
  v3[3].i32[1] = v8;
  return result;
}

uint64_t sub_1000BFD08(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 144);
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

uint64_t sub_1000BFD44(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 280);
  if (!result)
    return *(_QWORD *)(qword_10041B018 + 280);
  return result;
}

uint64_t sub_1000BFD68(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 88);
  return *(unsigned int *)(v1 + 24);
}

void sub_1000BFD94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;

  v4 = __exp10(-6.0);
  *(_BYTE *)a2 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 194);
  sub_1000CA5F8(a2, v4);
  *(_QWORD *)(a2 + 24) = 0x401A666660000000;
  *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
}

uint64_t sub_1000BFDE8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return (uint64_t)(*(float *)(v1 + 44) * 1000000000.0);
}

float sub_1000BFE24(uint64_t a1)
{
  float v1;
  void *v3[2];
  void *v4[2];
  char v5;
  std::string __p;

  v1 = *(float *)(*(_QWORD *)(a1 + 8) + 40);
  if (v1 < 0.0)
  {
    sub_1000D5048(v4, "");
    sub_100263C90("confidenceFactor must be non-negative.", &__p);
    sub_100174738((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 < 0)
      operator delete(v4[0]);
    sub_1000F2AE4((uint64_t)v3);
  }
  if (v1 > 1.0)
  {
    sub_1000D5048(v4, "");
    sub_100219DCC("confidenceFactor must be between 0.0f and 1.0f inclusive", &__p);
    sub_100174738((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 < 0)
      operator delete(v4[0]);
    sub_1000F2AE4((uint64_t)v3);
  }
  return 1.0 - v1;
}

void sub_1000BFFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000BFFF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7[2];
  char v8;
  std::string __p;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168);
  v4 = v3;
  if (!v3)
    v4 = *(_QWORD *)(qword_10041B018 + 168);
  if (*(double *)(v4 + 16) * 0.5 + 0.001 < *(double *)(v4 + 24))
  {
    sub_1000D5048(v7, "");
    sub_100263DE0("0.5 * dynamicuniverseparameters().venuegroupdistance() must be >= dynamicuniverseparameters().debouncedistance()", &__p);
    sub_100174738((uint64_t)v7, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8 < 0)
      operator delete(v7[0]);
    sub_1000F2AE4((uint64_t)&v6);
  }
  if (!v3)
    v3 = *(_QWORD *)(qword_10041B018 + 168);
  return sub_1000C4928(a2, v3);
}

void sub_1000C011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C0160(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v6 = sub_1000C2FA0();
  v7 = v4;
  if (sub_1000AC110((uint64_t)&v6, (_BYTE *)&v7 + 1))
    v5 = 8;
  else
    v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 28);
  sub_10000C08C(v5, a2);
}

uint64_t sub_1000C01D4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 88);
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

float sub_1000C0210(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 88);
  return *(float *)(v1 + 28);
}

double sub_1000C023C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 32);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(qword_10041B018 + 64) + 32);
    if (v2)
    {
LABEL_3:
      if (v1)
        goto LABEL_4;
LABEL_8:
      v3 = *(float *)(v2 + 16);
      if (*(_QWORD *)(*(_QWORD *)(qword_10041B018 + 64) + 32))
        return v3;
      return v3;
    }
  }
  v2 = *(_QWORD *)(qword_10041AFE0 + 32);
  if (!v1)
    goto LABEL_8;
LABEL_4:
  v3 = *(float *)(v2 + 16);
  if (*(_QWORD *)(v1 + 32))
    return v3;
  return v3;
}

uint64_t sub_1000C02DC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t sub_1000C02E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 176);
  if (!v2)
    v2 = *(_QWORD *)(qword_10041B018 + 176);
  return sub_1000C4B2C(a2, v2);
}

uint64_t sub_1000C0314(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 36);
}

uint64_t sub_1000C0320(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!result)
    return *(_QWORD *)(qword_10041B018 + 88);
  return result;
}

uint64_t sub_1000C0344(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1000C034C()
{
  return 0;
}

void sub_1000C0354()
{
  sub_10015AABC();
}

void sub_1000C03A0()
{
  operator new();
}

void sub_1000C0474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_100341FCC(a10);
  operator delete();
}

uint64_t sub_1000C04A4()
{
  return 3;
}

uint64_t sub_1000C04AC()
{
  return 2;
}

uint64_t sub_1000C04B4(uint64_t a1)
{
  return a1 + 16;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000C04BC(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  char *v11;
  unsigned int *v12;
  unsigned int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int *v18;
  unsigned int v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v21;
  unsigned __int8 *v22;
  unsigned int *v23;
  unsigned int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  _QWORD *v26;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v27;
  unsigned __int8 *v28;
  _QWORD *v29;

  v4 = a2;
  if ((*((_BYTE *)this + 48) & 1) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 10);
    *(_BYTE *)a2 = 8;
    v11 = (char *)a2 + 1;
    if ((v10 & 0x80000000) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, (unint64_t)v11, a3);
      v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0)
        goto LABEL_14;
    }
    else if (v10 > 0x7F)
    {
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v11, a3);
      v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v10;
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      v6 = *((_DWORD *)this + 12);
      if ((v6 & 2) != 0)
        goto LABEL_14;
    }
LABEL_3:
    if ((v6 & 4) == 0)
      goto LABEL_4;
LABEL_20:
    v18 = (unsigned int *)*((_QWORD *)this + 3);
    if (v18)
    {
      *(_BYTE *)v4 = 26;
      v19 = (_DWORD)v4 + 1;
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18[12];
      if (v20 <= 0x7F)
        goto LABEL_22;
    }
    else
    {
      v18 = *(unsigned int **)(qword_10041AA40 + 24);
      *(_BYTE *)v4 = 26;
      v19 = (_DWORD)v4 + 1;
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v18[12];
      if (v20 <= 0x7F)
      {
LABEL_22:
        *((_BYTE *)v4 + 1) = (_BYTE)v20;
        v4 = sub_1001124AC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v18, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
        if ((*((_DWORD *)this + 12) & 8) != 0)
          goto LABEL_26;
LABEL_5:
        v9 = (_QWORD *)*((_QWORD *)this + 1);
        v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
        v7 = v9;
        if (!v9)
          return v4;
        goto LABEL_32;
      }
    }
    v21 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v19, a3);
    v4 = sub_1001124AC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v18, v21, v22);
    if ((*((_DWORD *)this + 12) & 8) != 0)
      goto LABEL_26;
    goto LABEL_5;
  }
  v6 = *((_DWORD *)this + 12);
  if ((v6 & 2) == 0)
    goto LABEL_3;
LABEL_14:
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  if (v12)
  {
    *(_BYTE *)v4 = 18;
    v13 = (_DWORD)v4 + 1;
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12[23];
    if (v14 <= 0x7F)
      goto LABEL_16;
LABEL_19:
    v15 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, v13, a3);
    v4 = sub_10010C41C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v12, v15, v16, v17);
    v6 = *((_DWORD *)this + 12);
    if ((v6 & 4) != 0)
      goto LABEL_20;
    goto LABEL_4;
  }
  v12 = *(unsigned int **)(qword_10041AA40 + 16);
  *(_BYTE *)v4 = 18;
  v13 = (_DWORD)v4 + 1;
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12[23];
  if (v14 > 0x7F)
    goto LABEL_19;
LABEL_16:
  *((_BYTE *)v4 + 1) = (_BYTE)v14;
  v4 = sub_10010C41C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v12, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  v6 = *((_DWORD *)this + 12);
  if ((v6 & 4) != 0)
    goto LABEL_20;
LABEL_4:
  if ((v6 & 8) == 0)
    goto LABEL_5;
LABEL_26:
  v23 = (unsigned int *)*((_QWORD *)this + 4);
  if (v23)
  {
    *(_BYTE *)v4 = 34;
    v24 = (_DWORD)v4 + 1;
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23[15];
    if (v25 <= 0x7F)
      goto LABEL_28;
LABEL_31:
    v27 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v25, v24, a3);
    v4 = sub_100115CD8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v23, v27, v28);
    v29 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v7 = v29;
    if (!v29)
      return v4;
    goto LABEL_32;
  }
  v23 = *(unsigned int **)(qword_10041AA40 + 32);
  *(_BYTE *)v4 = 34;
  v24 = (_DWORD)v4 + 1;
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v23[15];
  if (v25 > 0x7F)
    goto LABEL_31;
LABEL_28:
  *((_BYTE *)v4 + 1) = (_BYTE)v25;
  v4 = sub_100115CD8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v23, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
  v26 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v7 = v26;
  if (!v26)
    return v4;
LABEL_32:
  if (*v7 != v7[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
  return v4;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000C06F8(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  int v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v12;
  unsigned __int8 *v13;
  unsigned int *v14;
  unsigned int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v17;
  unsigned __int8 *v18;
  unsigned int *v19;
  unsigned int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v22;
  unsigned __int8 *v23;
  unsigned int *v24;
  unsigned int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v27;
  unsigned __int8 *v28;
  unsigned int *v29;
  unsigned int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  const wireless_diagnostics::google::protobuf::UnknownFieldSet *v32;
  unsigned __int8 *v33;
  unsigned int *v34;
  unsigned int v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v37;
  unsigned __int8 *v38;
  unsigned int *v39;
  unsigned int v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  unsigned int v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int *v49;
  unsigned int v50;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _QWORD *v55;

  v3 = a2;
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0)
      goto LABEL_3;
LABEL_18:
    v14 = (unsigned int *)*((_QWORD *)this + 3);
    if (v14)
    {
      *(_BYTE *)v3 = 18;
      v15 = (_DWORD)v3 + 1;
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14[7];
      if (v16 <= 0x7F)
        goto LABEL_20;
    }
    else
    {
      v14 = *(unsigned int **)(qword_10041A998 + 24);
      *(_BYTE *)v3 = 18;
      v15 = (_DWORD)v3 + 1;
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14[7];
      if (v16 <= 0x7F)
      {
LABEL_20:
        *((_BYTE *)v3 + 1) = (_BYTE)v16;
        v3 = sub_10011A35C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v14, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
        v5 = *((_DWORD *)this + 23);
        if ((v5 & 4) != 0)
          goto LABEL_24;
LABEL_4:
        if ((v5 & 8) == 0)
          goto LABEL_5;
LABEL_30:
        v24 = (unsigned int *)*((_QWORD *)this + 5);
        if (v24)
        {
          *(_BYTE *)v3 = 34;
          v25 = (_DWORD)v3 + 1;
          v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24[36];
          if (v26 <= 0x7F)
            goto LABEL_32;
        }
        else
        {
          v24 = *(unsigned int **)(qword_10041A998 + 40);
          *(_BYTE *)v3 = 34;
          v25 = (_DWORD)v3 + 1;
          v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v24[36];
          if (v26 <= 0x7F)
          {
LABEL_32:
            *((_BYTE *)v3 + 1) = (_BYTE)v26;
            v3 = sub_10011C8A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v24, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
            v5 = *((_DWORD *)this + 23);
            if ((v5 & 0x10) != 0)
              goto LABEL_36;
LABEL_6:
            if ((v5 & 0x20) == 0)
              goto LABEL_7;
LABEL_42:
            v34 = (unsigned int *)*((_QWORD *)this + 7);
            if (v34)
            {
              *(_BYTE *)v3 = 50;
              v35 = (_DWORD)v3 + 1;
              v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34[7];
              if (v36 <= 0x7F)
                goto LABEL_44;
            }
            else
            {
              v34 = *(unsigned int **)(qword_10041A998 + 56);
              *(_BYTE *)v3 = 50;
              v35 = (_DWORD)v3 + 1;
              v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34[7];
              if (v36 <= 0x7F)
              {
LABEL_44:
                *((_BYTE *)v3 + 1) = (_BYTE)v36;
                v3 = sub_10011EA3C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v34, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
                v5 = *((_DWORD *)this + 23);
                if ((v5 & 0x40) != 0)
                  goto LABEL_48;
LABEL_8:
                if ((v5 & 0x80) == 0)
                  goto LABEL_9;
LABEL_54:
                v44 = (unsigned int *)*((_QWORD *)this + 9);
                if (v44)
                {
                  *(_BYTE *)v3 = 66;
                  v45 = (_DWORD)v3 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[8];
                  if (v46 <= 0x7F)
                    goto LABEL_56;
                }
                else
                {
                  v44 = *(unsigned int **)(qword_10041A998 + 72);
                  *(_BYTE *)v3 = 66;
                  v45 = (_DWORD)v3 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[8];
                  if (v46 <= 0x7F)
                  {
LABEL_56:
                    *((_BYTE *)v3 + 1) = (_BYTE)v46;
                    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10011FBC8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, (uint64_t)v3 + 2, a3);
                    if ((*((_DWORD *)this + 23) & 0x100) != 0)
                      goto LABEL_60;
LABEL_10:
                    v8 = (_QWORD *)*((_QWORD *)this + 1);
                    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
                    v6 = v8;
                    if (!v8)
                      return v3;
                    goto LABEL_66;
                  }
                }
                v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v46, v45, a3);
                v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10011FBC8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, v47, v48);
                if ((*((_DWORD *)this + 23) & 0x100) != 0)
                  goto LABEL_60;
                goto LABEL_10;
              }
            }
            v37 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v36, v35, a3);
            v3 = sub_10011EA3C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v34, v37, v38);
            v5 = *((_DWORD *)this + 23);
            if ((v5 & 0x40) != 0)
              goto LABEL_48;
            goto LABEL_8;
          }
        }
        v27 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v26, v25, a3);
        v3 = sub_10011C8A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v24, v27, v28);
        v5 = *((_DWORD *)this + 23);
        if ((v5 & 0x10) != 0)
          goto LABEL_36;
        goto LABEL_6;
      }
    }
    v17 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, v15, a3);
    v3 = sub_10011A35C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v14, v17, v18);
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 4) != 0)
      goto LABEL_24;
    goto LABEL_4;
  }
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  if (v9)
  {
    *(_BYTE *)a2 = 10;
    v10 = (_DWORD)a2 + 1;
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9[14];
    if (v11 <= 0x7F)
      goto LABEL_14;
LABEL_17:
    v12 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v11, v10, a3);
    v3 = sub_1000BCD50((wireless_diagnostics::google::protobuf::internal::WireFormat *)v9, v12, v13);
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 2) != 0)
      goto LABEL_18;
    goto LABEL_3;
  }
  v9 = *(unsigned int **)(qword_10041A998 + 16);
  *(_BYTE *)a2 = 10;
  v10 = (_DWORD)a2 + 1;
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9[14];
  if (v11 > 0x7F)
    goto LABEL_17;
LABEL_14:
  *((_BYTE *)v3 + 1) = (_BYTE)v11;
  v3 = sub_1000BCD50((wireless_diagnostics::google::protobuf::internal::WireFormat *)v9, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) != 0)
    goto LABEL_18;
LABEL_3:
  if ((v5 & 4) == 0)
    goto LABEL_4;
LABEL_24:
  v19 = (unsigned int *)*((_QWORD *)this + 4);
  if (v19)
  {
    *(_BYTE *)v3 = 26;
    v20 = (_DWORD)v3 + 1;
    v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19[10];
    if (v21 <= 0x7F)
      goto LABEL_26;
LABEL_29:
    v22 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, v20, a3);
    v3 = sub_10011ADAC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v19, v22, v23);
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 8) != 0)
      goto LABEL_30;
    goto LABEL_5;
  }
  v19 = *(unsigned int **)(qword_10041A998 + 32);
  *(_BYTE *)v3 = 26;
  v20 = (_DWORD)v3 + 1;
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v19[10];
  if (v21 > 0x7F)
    goto LABEL_29;
LABEL_26:
  *((_BYTE *)v3 + 1) = (_BYTE)v21;
  v3 = sub_10011ADAC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v19, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) != 0)
    goto LABEL_30;
LABEL_5:
  if ((v5 & 0x10) == 0)
    goto LABEL_6;
LABEL_36:
  v29 = (unsigned int *)*((_QWORD *)this + 6);
  if (v29)
  {
    *(_BYTE *)v3 = 42;
    v30 = (_DWORD)v3 + 1;
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29[9];
    if (v31 <= 0x7F)
      goto LABEL_38;
LABEL_41:
    v32 = (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v31, v30, a3);
    v3 = sub_10011E034((wireless_diagnostics::google::protobuf::internal::WireFormat *)v29, v32, v33);
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x20) != 0)
      goto LABEL_42;
    goto LABEL_7;
  }
  v29 = *(unsigned int **)(qword_10041A998 + 48);
  *(_BYTE *)v3 = 42;
  v30 = (_DWORD)v3 + 1;
  v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v29[9];
  if (v31 > 0x7F)
    goto LABEL_41;
LABEL_38:
  *((_BYTE *)v3 + 1) = (_BYTE)v31;
  v3 = sub_10011E034((wireless_diagnostics::google::protobuf::internal::WireFormat *)v29, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2), a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) != 0)
    goto LABEL_42;
LABEL_7:
  if ((v5 & 0x40) == 0)
    goto LABEL_8;
LABEL_48:
  v39 = (unsigned int *)*((_QWORD *)this + 8);
  if (v39)
  {
    *(_BYTE *)v3 = 58;
    v40 = (_DWORD)v3 + 1;
    v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v39[8];
    if (v41 <= 0x7F)
      goto LABEL_50;
LABEL_53:
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v41, v40, a3);
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10011F318((wireless_diagnostics::google::protobuf::internal::WireFormat *)v39, v42, v43);
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x80) != 0)
      goto LABEL_54;
    goto LABEL_9;
  }
  v39 = *(unsigned int **)(qword_10041A998 + 64);
  *(_BYTE *)v3 = 58;
  v40 = (_DWORD)v3 + 1;
  v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v39[8];
  if (v41 > 0x7F)
    goto LABEL_53;
LABEL_50:
  *((_BYTE *)v3 + 1) = (_BYTE)v41;
  v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_10011F318((wireless_diagnostics::google::protobuf::internal::WireFormat *)v39, (uint64_t)v3 + 2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) != 0)
    goto LABEL_54;
LABEL_9:
  if ((v5 & 0x100) == 0)
    goto LABEL_10;
LABEL_60:
  v49 = (unsigned int *)*((_QWORD *)this + 10);
  if (v49)
  {
    *(_BYTE *)v3 = 74;
    v50 = (_DWORD)v3 + 1;
    v51 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v49[8];
    if (v51 <= 0x7F)
      goto LABEL_62;
LABEL_65:
    v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v51, v50, a3);
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100120478((wireless_diagnostics::google::protobuf::internal::WireFormat *)v49, v53, v54);
    v55 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v6 = v55;
    if (!v55)
      return v3;
    goto LABEL_66;
  }
  v49 = *(unsigned int **)(qword_10041A998 + 80);
  *(_BYTE *)v3 = 74;
  v50 = (_DWORD)v3 + 1;
  v51 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v49[8];
  if (v51 > 0x7F)
    goto LABEL_65;
LABEL_62:
  *((_BYTE *)v3 + 1) = (_BYTE)v51;
  v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100120478((wireless_diagnostics::google::protobuf::internal::WireFormat *)v49, (uint64_t)v3 + 2, a3);
  v52 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v6 = v52;
  if (!v52)
    return v3;
LABEL_66:
  if (*v6 != v6[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v7, v3, a3);
  return v3;
}

uint64_t sub_1000C0BF0()
{
  return 1;
}

uint64_t sub_1000C0BF8(wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4;
  _QWORD *v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  _QWORD *v11;

  v4 = *((_DWORD *)this + 13);
  if ((v4 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 1) = v7;
    a2 += 9;
    v4 = *((_DWORD *)this + 13);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *((_QWORD *)this + 3);
  *(_BYTE *)a2 = 17;
  *(_QWORD *)(a2 + 1) = v8;
  a2 += 9;
  v4 = *((_DWORD *)this + 13);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_10:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 5);
    *(_BYTE *)a2 = 32;
    a2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, a2 + 1, a3);
    v11 = (_QWORD *)*((_QWORD *)this + 1);
    v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v5 = v11;
    if (!v11)
      return a2;
    goto LABEL_11;
  }
LABEL_9:
  v9 = *((_QWORD *)this + 4);
  *(_BYTE *)a2 = 25;
  *(_QWORD *)(a2 + 1) = v9;
  a2 += 9;
  if ((*((_DWORD *)this + 13) & 8) != 0)
    goto LABEL_10;
LABEL_5:
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v5)
    return a2;
LABEL_11:
  if (*v5 != v5[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
  return a2;
}

uint64_t sub_1000C0D6C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  uint64_t v26;

  LOBYTE(v3) = *(_BYTE *)(a1 + 84);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_26;
    goto LABEL_63;
  }
  if ((*(_BYTE *)(a1 + 84) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 84) & 2) == 0)
      goto LABEL_19;
LABEL_13:
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100151784(v9, a2);
      if (v10 < 0x80)
      {
LABEL_15:
        v11 = 1;
LABEL_18:
        v4 = (v4 + (_DWORD)v10 + v11 + 1);
        v3 = *(_DWORD *)(a1 + 84);
        goto LABEL_19;
      }
    }
    else
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100151784(*(_QWORD *)(qword_10041AA78 + 24), a2);
      if (v10 < 0x80)
        goto LABEL_15;
    }
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C15B8(v7, a2);
    if (v8 < 0x80)
      goto LABEL_9;
LABEL_12:
    v4 = v8
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 2) == 0)
      goto LABEL_19;
    goto LABEL_13;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C15B8(*(_QWORD *)(qword_10041AA78 + 16), a2);
  if (v8 >= 0x80)
    goto LABEL_12;
LABEL_9:
  v4 = ((_DWORD)v8 + 2);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 2) != 0)
    goto LABEL_13;
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_21;
LABEL_33:
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001530E0(v15, a2);
      if (v16 < 0x80)
        goto LABEL_35;
    }
    else
    {
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001530E0(*(_QWORD *)(qword_10041AA78 + 40), a2);
      if (v16 < 0x80)
      {
LABEL_35:
        v4 = (v4 + (_DWORD)v16 + 2);
        v3 = *(_DWORD *)(a1 + 84);
        if ((v3 & 0x10) != 0)
          goto LABEL_39;
LABEL_22:
        if ((v3 & 0x20) == 0)
          goto LABEL_23;
LABEL_45:
        v19 = *(_QWORD *)(a1 + 56);
        if (v19)
        {
          v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100155104(v19, a2);
          if (v20 < 0x80)
            goto LABEL_47;
        }
        else
        {
          v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100155104(*(_QWORD *)(qword_10041AA78 + 56), a2);
          if (v20 < 0x80)
          {
LABEL_47:
            v4 = (v4 + (_DWORD)v20 + 2);
            v3 = *(_DWORD *)(a1 + 84);
            if ((v3 & 0x40) != 0)
              goto LABEL_51;
LABEL_24:
            if ((v3 & 0x80) == 0)
              goto LABEL_25;
LABEL_57:
            v23 = *(_QWORD *)(a1 + 72);
            if (v23)
            {
              v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100159484(v23, a2);
              if (v24 < 0x80)
              {
LABEL_59:
                v25 = 1;
                goto LABEL_62;
              }
            }
            else
            {
              v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100159484(*(_QWORD *)(qword_10041AA78 + 72), a2);
              if (v24 < 0x80)
                goto LABEL_59;
            }
            v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
LABEL_62:
            v4 = (v4 + (_DWORD)v24 + v25 + 1);
            v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
            v6 = *(_QWORD **)(a1 + 8);
            if (!v6)
              goto LABEL_26;
            goto LABEL_63;
          }
        }
        v4 = (_DWORD)v4
           + (_DWORD)v20
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)+ 1;
        v3 = *(_DWORD *)(a1 + 84);
        if ((v3 & 0x40) != 0)
          goto LABEL_51;
        goto LABEL_24;
      }
    }
    v4 = (_DWORD)v4
       + (_DWORD)v16
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 0x10) != 0)
      goto LABEL_39;
    goto LABEL_22;
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100152524(v13, a2);
    if (v14 < 0x80)
      goto LABEL_29;
LABEL_32:
    v4 = (_DWORD)v4
       + (_DWORD)v14
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 8) != 0)
      goto LABEL_33;
    goto LABEL_21;
  }
  v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100152524(*(_QWORD *)(qword_10041AA78 + 32), a2);
  if (v14 >= 0x80)
    goto LABEL_32;
LABEL_29:
  v4 = (v4 + (_DWORD)v14 + 2);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 8) != 0)
    goto LABEL_33;
LABEL_21:
  if ((v3 & 0x10) == 0)
    goto LABEL_22;
LABEL_39:
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
  {
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100153DAC(v17, a2);
    if (v18 < 0x80)
      goto LABEL_41;
LABEL_44:
    v4 = (_DWORD)v4
       + (_DWORD)v18
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 84);
    if ((v3 & 0x20) != 0)
      goto LABEL_45;
    goto LABEL_23;
  }
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100153DAC(*(_QWORD *)(qword_10041AA78 + 48), a2);
  if (v18 >= 0x80)
    goto LABEL_44;
LABEL_41:
  v4 = (v4 + (_DWORD)v18 + 2);
  v3 = *(_DWORD *)(a1 + 84);
  if ((v3 & 0x20) != 0)
    goto LABEL_45;
LABEL_23:
  if ((v3 & 0x40) == 0)
    goto LABEL_24;
LABEL_51:
  v21 = *(_QWORD *)(a1 + 64);
  if (v21)
  {
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100156CC0(v21, a2);
    if (v22 < 0x80)
      goto LABEL_53;
LABEL_56:
    v4 = (_DWORD)v4
       + (_DWORD)v22
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2)+ 1;
    if ((*(_DWORD *)(a1 + 84) & 0x80) != 0)
      goto LABEL_57;
    goto LABEL_25;
  }
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100156CC0(*(_QWORD *)(qword_10041AA78 + 64), a2);
  if (v22 >= 0x80)
    goto LABEL_56;
LABEL_53:
  v4 = (v4 + (_DWORD)v22 + 2);
  if ((*(_DWORD *)(a1 + 84) & 0x80) != 0)
    goto LABEL_57;
LABEL_25:
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
  {
LABEL_26:
    *(_DWORD *)(a1 + 80) = v4;
    return v4;
  }
LABEL_63:
  if (*v6 == v6[1])
    goto LABEL_26;
  v26 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 80) = v26;
  return v26;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000C1144(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int *v16;
  unsigned int v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int *v22;
  unsigned int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  unsigned int *v27;
  unsigned int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  unsigned int *v32;
  unsigned int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int *v38;
  unsigned int v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  unsigned int v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int *v50;
  unsigned int v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  _QWORD *v53;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v54;
  unsigned __int8 *v55;
  _QWORD *v56;

  v4 = a2;
  v6 = *((_DWORD *)this + 21);
  if ((v6 & 1) != 0)
  {
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    if (v10)
    {
      *(_BYTE *)a2 = 10;
      v11 = (_DWORD)a2 + 1;
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[18];
      if (v12 <= 0x7F)
        goto LABEL_13;
    }
    else
    {
      v10 = *(unsigned int **)(qword_10041AA78 + 16);
      *(_BYTE *)a2 = 10;
      v11 = (_DWORD)a2 + 1;
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[18];
      if (v12 <= 0x7F)
      {
LABEL_13:
        *((_BYTE *)v4 + 1) = (_BYTE)v12;
        v4 = sub_10000B4F0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
        v6 = *((_DWORD *)this + 21);
        if ((v6 & 2) != 0)
          goto LABEL_17;
LABEL_3:
        if ((v6 & 4) == 0)
          goto LABEL_4;
LABEL_23:
        v22 = (unsigned int *)*((_QWORD *)this + 4);
        if (v22)
        {
          *(_BYTE *)v4 = 26;
          v23 = (_DWORD)v4 + 1;
          v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22[9];
          if (v24 <= 0x7F)
            goto LABEL_25;
        }
        else
        {
          v22 = *(unsigned int **)(qword_10041AA78 + 32);
          *(_BYTE *)v4 = 26;
          v23 = (_DWORD)v4 + 1;
          v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22[9];
          if (v24 <= 0x7F)
          {
LABEL_25:
            *((_BYTE *)v4 + 1) = (_BYTE)v24;
            v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1001523A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v22, (_BYTE *)v4 + 2, a3);
            v6 = *((_DWORD *)this + 21);
            if ((v6 & 8) != 0)
              goto LABEL_29;
LABEL_5:
            if ((v6 & 0x10) == 0)
              goto LABEL_6;
LABEL_35:
            v32 = (unsigned int *)*((_QWORD *)this + 6);
            if (v32)
            {
              *(_BYTE *)v4 = 42;
              v33 = (_DWORD)v4 + 1;
              v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[12];
              if (v34 <= 0x7F)
                goto LABEL_37;
            }
            else
            {
              v32 = *(unsigned int **)(qword_10041AA78 + 48);
              *(_BYTE *)v4 = 42;
              v33 = (_DWORD)v4 + 1;
              v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[12];
              if (v34 <= 0x7F)
              {
LABEL_37:
                *((_BYTE *)v4 + 1) = (_BYTE)v34;
                v4 = sub_100153C84((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
                v6 = *((_DWORD *)this + 21);
                if ((v6 & 0x20) != 0)
                  goto LABEL_41;
LABEL_7:
                if ((v6 & 0x40) == 0)
                  goto LABEL_8;
LABEL_47:
                v44 = (unsigned int *)*((_QWORD *)this + 8);
                if (v44)
                {
                  *(_BYTE *)v4 = 58;
                  v45 = (_DWORD)v4 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[31];
                  if (v46 <= 0x7F)
                    goto LABEL_49;
                }
                else
                {
                  v44 = *(unsigned int **)(qword_10041AA78 + 64);
                  *(_BYTE *)v4 = 58;
                  v45 = (_DWORD)v4 + 1;
                  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[31];
                  if (v46 <= 0x7F)
                  {
LABEL_49:
                    *((_BYTE *)v4 + 1) = (_BYTE)v46;
                    v4 = sub_1001566F4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
                    if ((*((_DWORD *)this + 21) & 0x80) != 0)
                      goto LABEL_53;
LABEL_9:
                    v9 = (_QWORD *)*((_QWORD *)this + 1);
                    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
                    v7 = v9;
                    if (!v9)
                      return v4;
                    goto LABEL_59;
                  }
                }
                v47 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v46, v45, a3);
                v4 = sub_1001566F4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, v47, v48, v49);
                if ((*((_DWORD *)this + 21) & 0x80) != 0)
                  goto LABEL_53;
                goto LABEL_9;
              }
            }
            v35 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, v33, a3);
            v4 = sub_100153C84((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, v35, v36, v37);
            v6 = *((_DWORD *)this + 21);
            if ((v6 & 0x20) != 0)
              goto LABEL_41;
            goto LABEL_7;
          }
        }
        v25 = (_BYTE *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v24, v23, a3);
        v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1001523A8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v22, v25, v26);
        v6 = *((_DWORD *)this + 21);
        if ((v6 & 8) != 0)
          goto LABEL_29;
        goto LABEL_5;
      }
    }
    v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v11, a3);
    v4 = sub_10000B4F0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, v13, v14, v15);
    v6 = *((_DWORD *)this + 21);
    if ((v6 & 2) != 0)
      goto LABEL_17;
    goto LABEL_3;
  }
  if ((v6 & 2) == 0)
    goto LABEL_3;
LABEL_17:
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  if (v16)
  {
    *(_BYTE *)v4 = 18;
    v17 = (_DWORD)v4 + 1;
    v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16[12];
    if (v18 <= 0x7F)
      goto LABEL_19;
LABEL_22:
    v19 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, v17, a3);
    v4 = sub_100151530((wireless_diagnostics::google::protobuf::internal::WireFormat *)v16, v19, v20, v21);
    v6 = *((_DWORD *)this + 21);
    if ((v6 & 4) != 0)
      goto LABEL_23;
    goto LABEL_4;
  }
  v16 = *(unsigned int **)(qword_10041AA78 + 24);
  *(_BYTE *)v4 = 18;
  v17 = (_DWORD)v4 + 1;
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16[12];
  if (v18 > 0x7F)
    goto LABEL_22;
LABEL_19:
  *((_BYTE *)v4 + 1) = (_BYTE)v18;
  v4 = sub_100151530((wireless_diagnostics::google::protobuf::internal::WireFormat *)v16, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  v6 = *((_DWORD *)this + 21);
  if ((v6 & 4) != 0)
    goto LABEL_23;
LABEL_4:
  if ((v6 & 8) == 0)
    goto LABEL_5;
LABEL_29:
  v27 = (unsigned int *)*((_QWORD *)this + 5);
  if (v27)
  {
    *(_BYTE *)v4 = 34;
    v28 = (_DWORD)v4 + 1;
    v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27[8];
    if (v29 <= 0x7F)
      goto LABEL_31;
LABEL_34:
    v30 = (_BYTE *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v29, v28, a3);
    v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100152F9C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v27, v30, v31);
    v6 = *((_DWORD *)this + 21);
    if ((v6 & 0x10) != 0)
      goto LABEL_35;
    goto LABEL_6;
  }
  v27 = *(unsigned int **)(qword_10041AA78 + 40);
  *(_BYTE *)v4 = 34;
  v28 = (_DWORD)v4 + 1;
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27[8];
  if (v29 > 0x7F)
    goto LABEL_34;
LABEL_31:
  *((_BYTE *)v4 + 1) = (_BYTE)v29;
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_100152F9C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v27, (_BYTE *)v4 + 2, a3);
  v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x10) != 0)
    goto LABEL_35;
LABEL_6:
  if ((v6 & 0x20) == 0)
    goto LABEL_7;
LABEL_41:
  v38 = (unsigned int *)*((_QWORD *)this + 7);
  if (v38)
  {
    *(_BYTE *)v4 = 50;
    v39 = (_DWORD)v4 + 1;
    v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[15];
    if (v40 <= 0x7F)
      goto LABEL_43;
LABEL_46:
    v41 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v40, v39, a3);
    v4 = sub_100154E40((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, v41, v42, v43);
    v6 = *((_DWORD *)this + 21);
    if ((v6 & 0x40) != 0)
      goto LABEL_47;
    goto LABEL_8;
  }
  v38 = *(unsigned int **)(qword_10041AA78 + 56);
  *(_BYTE *)v4 = 50;
  v39 = (_DWORD)v4 + 1;
  v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[15];
  if (v40 > 0x7F)
    goto LABEL_46;
LABEL_43:
  *((_BYTE *)v4 + 1) = (_BYTE)v40;
  v4 = sub_100154E40((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3, a4);
  v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x40) != 0)
    goto LABEL_47;
LABEL_8:
  if ((v6 & 0x80) == 0)
    goto LABEL_9;
LABEL_53:
  v50 = (unsigned int *)*((_QWORD *)this + 9);
  if (v50)
  {
    *(_BYTE *)v4 = 66;
    v51 = (_DWORD)v4 + 1;
    v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50[38];
    if (v52 <= 0x7F)
      goto LABEL_55;
LABEL_58:
    v54 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v52, v51, a3);
    v4 = sub_100158CFC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v50, v54, v55);
    v56 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v7 = v56;
    if (!v56)
      return v4;
    goto LABEL_59;
  }
  v50 = *(unsigned int **)(qword_10041AA78 + 72);
  *(_BYTE *)v4 = 66;
  v51 = (_DWORD)v4 + 1;
  v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v50[38];
  if (v52 > 0x7F)
    goto LABEL_58;
LABEL_55:
  *((_BYTE *)v4 + 1) = (_BYTE)v52;
  v4 = sub_100158CFC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v50, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
  v53 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v7 = v53;
  if (!v53)
    return v4;
LABEL_59:
  if (*v7 != v7[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
  return v4;
}

uint64_t sub_1000C15B8(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v11;
  _QWORD *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v42;
  _QWORD *v43;
  uint64_t v44;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  uint64_t v47;

  LOBYTE(v3) = *(_BYTE *)(a1 + 76);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_39;
    goto LABEL_100;
  }
  if ((*(_BYTE *)(a1 + 76) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 76) & 2) == 0)
      goto LABEL_32;
    goto LABEL_26;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 52);
    if (*(_BYTE *)(v7 + 52))
      goto LABEL_9;
LABEL_19:
    v10 = 0;
    v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v7 + 8);
    v12 = *(_QWORD **)(v7 + 8);
    if (!v12)
      goto LABEL_22;
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(qword_10041AB20 + 16);
  v8 = *(unsigned __int8 *)(v7 + 52);
  if (!*(_BYTE *)(v7 + 52))
    goto LABEL_19;
LABEL_9:
  v9 = (v8 << 31 >> 31) & 9;
  if ((v8 & 2) != 0)
    v9 += 9;
  if ((v8 & 4) != 0)
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v9 + 9);
  else
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9;
  if ((v8 & 8) != 0)
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v10
                                                                          + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v7 + 40), (unint64_t)a2)+ 1);
  v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v7 + 8);
  v12 = *(_QWORD **)(v7 + 8);
  if (v12)
  {
LABEL_20:
    if (*v12 != v12[1])
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v11, a2)+ v10);
  }
LABEL_22:
  *(_DWORD *)(v7 + 48) = (_DWORD)v10;
  if (v10 >= 0x80)
  {
    v4 = v10
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0)
      goto LABEL_32;
  }
  else
  {
    v4 = ((_DWORD)v10 + 2);
    v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0)
      goto LABEL_32;
  }
LABEL_26:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if ((v13 & 0x80000000) != 0)
  {
    v14 = 10;
  }
  else if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    v3 = *(_DWORD *)(a1 + 76);
  }
  else
  {
    v14 = 1;
  }
  v4 = (v4 + v14 + 1);
LABEL_32:
  if ((v3 & 4) != 0)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = v17;
    v19 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(v16 + 23);
    else
      v20 = v19;
    if (v20 >= 0x80)
    {
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20, a2);
      v17 = *(unsigned __int8 *)(v16 + 23);
      v19 = *(_QWORD *)(v16 + 8);
      v3 = *(_DWORD *)(a1 + 76);
      v18 = *(_BYTE *)(v16 + 23);
    }
    else
    {
      v21 = 1;
    }
    if (v18 < 0)
      v17 = v19;
    v4 = (v4 + v21 + v17 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_34:
      if ((v3 & 0x10) == 0)
        goto LABEL_35;
      goto LABEL_58;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_34;
  }
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26, a2);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v3 = *(_DWORD *)(a1 + 76);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v4 = (v4 + v27 + v23 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_35:
    if ((v3 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_58:
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = v29;
  v31 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 23);
  else
    v32 = v31;
  if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32, a2);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v31 = *(_QWORD *)(v28 + 8);
    v3 = *(_DWORD *)(a1 + 76);
    v30 = *(_BYTE *)(v28 + 23);
  }
  else
  {
    v33 = 1;
  }
  if (v30 < 0)
    v29 = v31;
  v4 = (v4 + v33 + v29 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_36:
    if ((v3 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_76;
  }
LABEL_67:
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = v35;
  v37 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v38 = *(unsigned __int8 *)(v34 + 23);
  else
    v38 = v37;
  if (v38 >= 0x80)
  {
    v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38, a2);
    v35 = *(unsigned __int8 *)(v34 + 23);
    v37 = *(_QWORD *)(v34 + 8);
    v3 = *(_DWORD *)(a1 + 76);
    v36 = *(_BYTE *)(v34 + 23);
  }
  else
  {
    v39 = 1;
  }
  if (v36 < 0)
    v35 = v37;
  v4 = (v4 + v39 + v35 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_37:
    if ((v3 & 0x80) == 0)
      goto LABEL_38;
LABEL_93:
    v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v46 & 0x80000000) != 0)
    {
      v4 = (v4 + 11);
      v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v6 = *(_QWORD **)(a1 + 8);
      if (!v6)
        goto LABEL_39;
    }
    else if (v46 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2)+ 1+ v4;
      v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v6 = *(_QWORD **)(a1 + 8);
      if (!v6)
        goto LABEL_39;
    }
    else
    {
      v4 = (v4 + 2);
      v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v6 = *(_QWORD **)(a1 + 8);
      if (!v6)
        goto LABEL_39;
    }
    goto LABEL_100;
  }
LABEL_76:
  v40 = *(_QWORD *)(a1 + 64);
  if (v40)
  {
    if ((*(_BYTE *)(v40 + 28) & 1) == 0)
      goto LABEL_78;
  }
  else
  {
    v40 = *(_QWORD *)(qword_10041AB20 + 64);
    if ((*(_BYTE *)(v40 + 28) & 1) == 0)
    {
LABEL_78:
      v41 = 0;
      v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
      v43 = *(_QWORD **)(v40 + 8);
      if (!v43)
        goto LABEL_89;
      goto LABEL_87;
    }
  }
  v44 = *(_QWORD *)(v40 + 16);
  if (v44)
  {
    v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C1A10(v44, a2);
    if (v45 < 0x80)
      goto LABEL_83;
  }
  else
  {
    v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C1A10(*(_QWORD *)(qword_10041AB18 + 16), a2);
    if (v45 < 0x80)
    {
LABEL_83:
      v41 = ((_DWORD)v45 + 2);
      v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
      v43 = *(_QWORD **)(v40 + 8);
      if (!v43)
        goto LABEL_89;
      goto LABEL_87;
    }
  }
  v41 = v45
      + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45, a2)+ 1;
  v42 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v40 + 8);
  v43 = *(_QWORD **)(v40 + 8);
  if (!v43)
    goto LABEL_89;
LABEL_87:
  if (*v43 != v43[1])
    v41 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v42, a2)
        + v41;
LABEL_89:
  *(_DWORD *)(v40 + 24) = v41;
  if (v41 >= 0x80)
  {
    v4 = (_DWORD)v4
       + (_DWORD)v41
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v41, a2)+ 1;
    if ((*(_DWORD *)(a1 + 76) & 0x80) != 0)
      goto LABEL_93;
  }
  else
  {
    v4 = (v4 + v41 + 2);
    if ((*(_DWORD *)(a1 + 76) & 0x80) != 0)
      goto LABEL_93;
  }
LABEL_38:
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
  {
LABEL_39:
    *(_DWORD *)(a1 + 72) = v4;
    return v4;
  }
LABEL_100:
  if (*v6 == v6[1])
    goto LABEL_39;
  v47 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 72) = v47;
  return v47;
}

uint64_t sub_1000C1A10(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t v13;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
      if ((v8 & 0x80000000) != 0)
      {
        LODWORD(v4) = 11;
        if ((v3 & 2) == 0)
          goto LABEL_20;
      }
      else if (v8 >= 0x80)
      {
        LODWORD(v4) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
        v3 = *(_DWORD *)(a1 + 40);
        if ((v3 & 2) == 0)
          goto LABEL_20;
      }
      else
      {
        LODWORD(v4) = 2;
        if ((v3 & 2) == 0)
          goto LABEL_20;
      }
    }
    else
    {
      LODWORD(v4) = 0;
      if ((*(_BYTE *)(a1 + 40) & 2) == 0)
        goto LABEL_20;
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2)
          + 1;
      v3 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v10 = 2;
    }
    LODWORD(v4) = v10 + v4;
LABEL_20:
    if ((v3 & 4) != 0)
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 11;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2)
            + 1;
        v3 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v12 = 2;
      }
      LODWORD(v4) = v12 + v4;
    }
    if ((v3 & 8) != 0)
      v4 = (v4 + 9);
    else
      v4 = v4;
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_6;
    goto LABEL_31;
  }
  v4 = 0;
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
  {
LABEL_6:
    *(_DWORD *)(a1 + 36) = v4;
    return v4;
  }
LABEL_31:
  if (*v6 == v6[1])
    goto LABEL_6;
  v13 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 36) = v13;
  return v13;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000C1B38(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  _QWORD *v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  unint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = a2;
  if ((*((_BYTE *)this + 40) & 1) == 0)
  {
    if ((*((_BYTE *)this + 40) & 2) == 0)
      goto LABEL_3;
LABEL_14:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 5);
    *(_BYTE *)v3 = 16;
    v11 = (unint64_t)v3 + 1;
    if ((v10 & 0x80000000) != 0)
    {
      v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, v11, a3);
      if ((*((_BYTE *)this + 40) & 4) != 0)
        goto LABEL_21;
    }
    else if (v10 > 0x7F)
    {
      v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v11, a3);
      if ((*((_BYTE *)this + 40) & 4) != 0)
        goto LABEL_21;
    }
    else
    {
      *((_BYTE *)v3 + 1) = (_BYTE)v10;
      v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
      if ((*((_BYTE *)this + 40) & 4) != 0)
        goto LABEL_21;
    }
LABEL_4:
    if ((*((_BYTE *)this + 40) & 8) == 0)
      goto LABEL_5;
LABEL_28:
    v14 = *((_QWORD *)this + 3);
    *(_BYTE *)v3 = 33;
    *(_QWORD *)((char *)v3 + 1) = v14;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 9);
    v15 = (_QWORD *)*((_QWORD *)this + 1);
    v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v5 = v15;
    if (!v15)
      return v3;
    goto LABEL_29;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 4);
  *(_BYTE *)a2 = 8;
  v9 = (char *)a2 + 1;
  if ((v8 & 0x80000000) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v8, (unint64_t)v9, a3);
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_14;
  }
  else if (v8 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v9, a3);
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v8;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_14;
  }
LABEL_3:
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_4;
LABEL_21:
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 8);
  *(_BYTE *)v3 = 24;
  v13 = (unint64_t)v3 + 1;
  if ((v12 & 0x80000000) != 0)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v12, v13, a3);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_28;
  }
  else if (v12 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v13, a3);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_28;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v12;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 40) & 8) != 0)
      goto LABEL_28;
  }
LABEL_5:
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v5 = v7;
  if (!v7)
    return v3;
LABEL_29:
  if (*v5 != v5[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, v3, a3);
  return v3;
}

uint64_t sub_1000C1CF8(int *a1)
{
  unsigned __int16 v2;
  int v3;
  uint64_t v5;
  int v7;
  __int16 v8;
  unsigned __int16 v9;
  int v10;

  v2 = sub_1000BD480(*a1);
  sub_1000C554C(&v10, v2, 1u, 1u);
  v3 = *a1;
  if ((*a1 + 2) < 3)
  {
    if (v3 == -2 || v10 == -2)
LABEL_18:
      sub_100194D70();
LABEL_10:
    if (v3)
    {
      if (v3 == -1)
      {
        if (v10 == -1)
          goto LABEL_18;
LABEL_28:
        sub_100194D70();
      }
      if (v10 != -1)
      {
        if (!v10)
          goto LABEL_28;
        v7 = v3 - v10;
        v8 = v3 == v10 ? 0 : -2;
        v9 = v7 == -1 ? -1 : v8;
        v5 = v9 + 1;
        if ((v5 & 0x10000) != 0)
          goto LABEL_28;
        goto LABEL_15;
      }
    }
    else if (!v10)
    {
      goto LABEL_18;
    }
    return 1;
  }
  if ((v10 + 2) < 3)
  {
    if (v10 == -2)
      goto LABEL_18;
    goto LABEL_10;
  }
  v5 = (unsigned __int16)(v3 - v10) + 1;
  if ((v5 & 0x10000) != 0)
    goto LABEL_28;
LABEL_15:
  if ((unsigned __int16)v5 >= 0x16Fu)
    goto LABEL_18;
  return v5;
}

uint64_t sub_1000C1E44@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = result;
  if (*(char *)(result + 23) < 0)
    v2 = *(_QWORD *)(result + 8);
  else
    v2 = *(unsigned __int8 *)(result + 23);
  a2[4] = v2;
  return result;
}

char *sub_1000C1E68@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  char *result;
  char *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;

  v2 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v4 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v4 = a1[23];
  }
  v26 = 0;
  result = (char *)sub_10006CD4C(a1, v4, &v26);
  if ((unint64_t)result >= v4)
  {
    LOBYTE(v7) = v2[23];
  }
  else
  {
    v6 = (char *)(v4 - 1);
    v7 = (char)v2[23];
    v8 = v2;
    if (v7 < 0)
      v8 = *(_BYTE **)v2;
    if (v6[(_QWORD)v8] == 47)
    {
      v9 = *(_BYTE **)v2;
      if (v6 >= result)
        v6 = result;
      if (v7 >= 0)
        v9 = v2;
      v10 = v9 - 2;
      v11 = v4;
      while (1)
      {
        v12 = (char *)(v11 - 1);
        if (v11 - 1 <= (unint64_t)result)
          break;
        v13 = v10[v11--];
        if (v13 != 47)
          goto LABEL_42;
      }
      v12 = v6;
LABEL_42:
      if (v12 == result)
      {
        v4 = 1;
        goto LABEL_48;
      }
    }
  }
  if (v26 == v4)
  {
    result = 0;
  }
  else
  {
    if (v4 >= v26)
      v14 = v26;
    else
      v14 = v4;
    if ((v7 & 0x80u) == 0)
      v15 = v2;
    else
      v15 = *(_BYTE **)v2;
    v16 = v15 - 1;
    v17 = v4;
    while (v17 > v26)
    {
      v18 = v17 - 1;
      v19 = v16[v17--];
      if (v19 == 47)
      {
        v14 = v18 + 1;
        break;
      }
    }
    v4 -= v14;
    if (!v4)
    {
      if (v14 > v26)
      {
        v20 = (char *)(v14 - 1);
        v21 = (v7 & 0x80u) == 0 ? v2 : *(_BYTE **)v2;
        if (v20[(_QWORD)v21] == 47)
        {
          if (v20 >= result)
            v20 = result;
          v22 = v21 - 2;
          v23 = v14;
          while (1)
          {
            v24 = (char *)(v23 - 1);
            if (v23 - 1 <= (unint64_t)result)
              break;
            v25 = v22[v23--];
            if (v25 != 47)
              goto LABEL_45;
          }
          v24 = v20;
LABEL_45:
          if (v24 != result)
          {
            if (byte_100419467 < 0)
              return (char *)sub_10006CED8((_BYTE *)a2, (void *)xmmword_100419450, *((unint64_t *)&xmmword_100419450 + 1));
            *(_OWORD *)a2 = xmmword_100419450;
            *(_QWORD *)(a2 + 16) = unk_100419460;
            return result;
          }
        }
      }
      v4 = 0;
    }
    result = (char *)v14;
  }
LABEL_48:
  if ((v7 & 0x80) != 0)
    v2 = *(_BYTE **)v2;
  return (char *)sub_1000D64D8((_QWORD *)a2, &result[(_QWORD)v2], &result[(_QWORD)v2 + v4], v4);
}

void sub_1000C2070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  double v7;

  if (*(_BYTE *)(a1 + 64))
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (!v3)
      v3 = *(_QWORD *)(qword_10041A998 + 16);
    v4 = (_QWORD *)sub_1000C51A8((uint64_t)&v6, v3);
    v5 = 1.0 - v7;
    *(double *)a2 = v7;
    *(double *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = 1;
    sub_100019B18(v4);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

uint64_t sub_1000C2134(uint64_t a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  _BYTE v5[24];
  std::string v6;
  std::runtime_error v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1)
  {
    v3 = 28;
  }
  else
  {
    if (v2 != 2)
    {
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v6, "Unsupported ProviderPositionDataFlow");
      std::runtime_error::runtime_error(&v7, &v6);
      v7.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
      sub_10018D04C((uint64_t)v5);
      sub_1000EF6D4(&v7, (uint64_t)"void CLProviderPositionInputEvent::applyTo(Receiver *) const [Receiver = LocalizerInputEventChronology]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_input_event.h", 996, (uint64_t)v5);
    }
    v3 = 29;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 8 * v3))(a2, a1 + 176, a1 + 16);
}

void sub_1000C2210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

unint64_t sub_1000C2288(uint64_t a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 4);
}

uint64_t sub_1000C22A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1000C22B0@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1003F9A88;
  *(_BYTE *)(a1 + 24) &= 0xFCu;
  sub_1000504A8(a1, NAN);
  return sub_1000504A0(a1, NAN);
}

void sub_1000C230C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_22(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2320()
{
  return 0;
}

uint64_t sub_1000C2328()
{
  return 0;
}

uint64_t sub_1000C2330()
{
  return 0;
}

uint64_t sub_1000C2338(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_100086528(v1);
}

double sub_1000C2354(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1)
    return (double)(v1 - *a1) / (double)v1;
  else
    return 1.0;
}

double sub_1000C237C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (double)(v1 - *(_QWORD *)(a1 + 16)) / (double)v1;
  else
    return 1.0;
}

double sub_1000C23A4(uint64_t a1)
{
  return *(double *)(a1 + 16) * *(double *)(a1 + 24);
}

double sub_1000C23B0(uint64_t a1)
{
  return 1.0 - *(double *)(a1 + 16);
}

uint64_t sub_1000C23C0(uint64_t a1)
{
  return *(unsigned int *)(sub_100044208(*(_QWORD *)(a1 + 176)) + 8);
}

_QWORD *sub_1000C23DC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = off_100405940;
  a1[1] = v2;
  v2[3] = off_100405A30;
  result = v2 + 3;
  *a1 = result;
  return result;
}

uint64_t sub_1000C2428(uint64_t a1)
{
  uint64_t result;
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  result = *(unsigned int *)(a1 + 12);
  if ((_DWORD)result == -1)
  {
    sub_1000D5048(v3, "");
    sub_100242D34("maxRegionalByteSize is uninitilized", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_1000F2AE4((uint64_t)&v2);
  }
  return result;
}

void sub_1000C250C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C2550(uint64_t a1)
{
  uint64_t result;
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  result = *(unsigned int *)(a1 + 4);
  if ((_DWORD)result == -1)
  {
    sub_1000D5048(v3, "");
    sub_10016A234("maxIndoorByteSize is uninitilized", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_1000F2AE4((uint64_t)&v2);
  }
  return result;
}

void sub_1000C2634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C2678(uint64_t a1)
{
  uint64_t result;
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  result = *(unsigned int *)(a1 + 8);
  if ((_DWORD)result == -1)
  {
    sub_1000D5048(v3, "");
    sub_1000FF2F4("maxRegionalCount is uninitilized", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_1000F2AE4((uint64_t)&v2);
  }
  return result;
}

void sub_1000C275C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C27A0(unsigned int *a1)
{
  uint64_t result;
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  result = *a1;
  if ((_DWORD)result == -1)
  {
    sub_1000D5048(v3, "");
    sub_10023DC18("maxIndoorCount is uninitilized", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_1000F2AE4((uint64_t)&v2);
  }
  return result;
}

void sub_1000C2884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C28C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  void *v5;
  void *__p;
  void **v7;

  sub_1000186F8(a1, (uint64_t)&__p);
  sub_100023E6C("|", (char *)&__p, a2);
  v3 = (void **)__p;
  if (__p)
  {
    v4 = v7;
    v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_1000C2950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FE50C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2964(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

_QWORD *sub_1000C296C@<X0>(_QWORD *result@<X0>, unsigned int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unsigned int v9;

  v9 = a2;
  if (*result)
  {
    v4 = result[1];
    *a3 = *result;
    a3[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    v7 = result + 7;
    v8 = operator new(0x108uLL);
    result = sub_10022B910(v8, v7, &v9);
    *a3 = v8 + 3;
    a3[1] = v8;
  }
  return result;
}

void sub_1000C2A04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2A18(uint64_t a1)
{
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  if (!*(_QWORD *)(a1 + 24))
  {
    sub_1000D5048(v3, "");
    sub_10023D100("Haven't selected something to localize on", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_10015AD4C((uint64_t)&v2);
  }
  return a1 + 24;
}

void sub_1000C2AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float sub_1000C2B28(uint64_t a1)
{
  return *(float *)(*(_QWORD *)a1 + 104);
}

float sub_1000C2B34(uint64_t a1)
{
  return *(float *)(*(_QWORD *)a1 + 92);
}

uint64_t sub_1000C2B40(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 88);
}

uint64_t sub_1000C2B4C(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 80);
}

uint64_t sub_1000C2B58(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)a1 + 113) >> 6) & 1;
}

double sub_1000C2B68(uint64_t a1)
{
  return *(double *)(*(_QWORD *)a1 + 48);
}

uint64_t sub_1000C2B74(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 16))
    return *(unsigned int *)(a1 + 60);
  v2 = *(int *)(*(_QWORD *)a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(*(_QWORD *)a1 + 16);
  v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v4)
  {
    LODWORD(result) = 0;
    v9 = v3;
LABEL_11:
    v12 = &v3[v2];
    do
    {
      v13 = *v9++;
      result = (*(_DWORD *)(v13 + 48) + result);
    }
    while (v9 != v12);
    return result;
  }
  v5 = 0;
  v6 = 0;
  v7 = v4 + 1;
  v8 = (v4 + 1) & 0x3FFFFFFFFFFFFFFELL;
  v9 = &v3[v8];
  v10 = v3 + 1;
  v11 = v8;
  do
  {
    v5 += *(_DWORD *)(*(v10 - 1) + 48);
    v6 += *(_DWORD *)(*v10 + 48);
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  result = (v6 + v5);
  if (v7 != v8)
    goto LABEL_11;
  return result;
}

uint64_t sub_1000C2C18(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)a1 + 112) >> 6) & 1;
}

uint64_t sub_1000C2C28(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 64);
}

uint64_t sub_1000C2C34(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 56);
}

char *sub_1000C2C40@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0)
    return (char *)sub_10006CED8((_BYTE *)a2, *((void **)result + 1), *((_QWORD *)result + 2));
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 3);
  return result;
}

uint64_t sub_1000C2C6C(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_1000C2C74(uint64_t a1)
{
  return a1 + 16;
}

uint64_t *sub_1000C2C7C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1000C2C90(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  void *v15[2];
  void *v16[2];
  char v17;
  std::string __p;

  v3 = a3[1];
  v4 = a3[2];
  if (*a3 >= 1 && v3 >= 1 && v4 >= 1)
  {
    if (v3 < (unint64_t)*a3)
    {
      sub_1000D5048(v16, "");
      sub_1001E0734("For now, dwellWithSignal allows us to wait additional time for a high quality fix if we think we can get one.", &__p);
      sub_100174738((uint64_t)v16, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v17 < 0)
        operator delete(v16[0]);
      sub_10015C2DC((uint64_t)v15);
    }
    if (v4 < v3)
    {
      sub_1000D5048(v16, "");
      sub_1001E0780("We can't be *more* than 100% duty cycle", &__p);
      sub_100174738((uint64_t)v16, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v17 < 0)
        operator delete(v16[0]);
      sub_10015C2DC((uint64_t)v15);
    }
  }
  v7 = *a1;
  if (*a3 >= 1 && v3 >= 1 && v4 >= 1)
  {
    v12 = (_QWORD *)(v7 + 16);
    if (*(_BYTE *)(*a1 + 8))
    {
      if (*v12 == *a3 && *(_QWORD *)(v7 + 24) == v3 && *(_QWORD *)(v7 + 32) == v4)
        return 0;
      v13 = *(_OWORD *)a3;
      *(_QWORD *)(v7 + 32) = a3[2];
      *(_OWORD *)v12 = v13;
      v10 = *a1;
      *(_QWORD *)v10 = a2;
      if (!*(_BYTE *)(v10 + 40))
        return 1;
    }
    else
    {
      v14 = *(_OWORD *)a3;
      *(_QWORD *)(v7 + 32) = a3[2];
      *(_OWORD *)v12 = v14;
      *(_BYTE *)(v7 + 8) = 1;
      v10 = *a1;
      *(_QWORD *)v10 = a2;
      if (!*(_BYTE *)(v10 + 40))
        return 1;
    }
LABEL_20:
    *(_BYTE *)(v10 + 40) = 0;
    return 1;
  }
  if (!*(_BYTE *)(*a1 + 8))
    return 0;
  *(_BYTE *)(v7 + 8) = 0;
  v10 = *a1;
  *(_QWORD *)v10 = a2;
  if (*(_BYTE *)(v10 + 40))
    goto LABEL_20;
  return 1;
}

void sub_1000C2ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000C2F24(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  BOOL v3;

  if (!*(_BYTE *)a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  if (*(uint64_t *)(a1 + 8) >= 1)
  {
    v3 = __OFSUB__(v1, 1);
    v2 = v1 - 1 < 0;
  }
  else
  {
    v3 = 0;
    v2 = 1;
  }
  return v2 == v3 && *(_QWORD *)(a1 + 24) > 0;
}

uint64_t sub_1000C2F54(uint64_t a1, double a2)
{
  double v2;
  unsigned int v3;

  if (a2 >= 0.5)
    return 0;
  v2 = 1.0 - *(double *)(a1 + 16);
  if (v2 <= 0.5)
    v3 = 2;
  else
    v3 = 3;
  if (v2 <= a2)
    return 1;
  else
    return v3;
}

BOOL sub_1000C2F90(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

const char *sub_1000C2FA0()
{
  return "FORCE_PDR";
}

const char *sub_1000C2FB0()
{
  return "DATA_HOST";
}

uint64_t *sub_1000C2FC0()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A598);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A598))
    return &qword_10041A650;
  qword_10041A650 = (uint64_t)sub_10016E2A8();
  unk_10041A658 = v2;
  byte_10041A660 = 0;
  byte_10041A662 = 0;
  byte_10041A664 = 0;
  __cxa_guard_release(&qword_10041A598);
  return &qword_10041A650;
}

void sub_1000C3034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A598);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C304C()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A5A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A5A8))
    return &qword_10041A720;
  qword_10041A720 = (uint64_t)sub_10016E320();
  unk_10041A728 = v2;
  byte_10041A730 = 0;
  byte_10041A738 = 0;
  byte_10041A73A = 0;
  __cxa_guard_release(&qword_10041A5A8);
  return &qword_10041A720;
}

void sub_1000C30C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A5A8);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C30D8()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A540);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A540))
    return &qword_10041A680;
  qword_10041A680 = (uint64_t)sub_10016E1B4();
  unk_10041A688 = v2;
  byte_10041A690 = 0;
  byte_10041A698 = 0;
  byte_10041A69A = 0;
  __cxa_guard_release(&qword_10041A540);
  return &qword_10041A680;
}

void sub_1000C314C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A540);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000C3164()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A5B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A5B8))
    return &qword_10041A760;
  qword_10041A760 = (uint64_t)sub_10016E350();
  unk_10041A768 = v2;
  byte_10041A770 = 0;
  byte_10041A778 = 0;
  byte_10041A77A = 0;
  __cxa_guard_release(&qword_10041A5B8);
  return &qword_10041A760;
}

void sub_1000C31D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A5B8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C31F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2;
  }
  else
  {
    sub_10026B50C((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_100400188);
      v6 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_1000C3354(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t buf;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400188);
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }
  }
  __cxa_rethrow();
}

uint64_t sub_1000C34B8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2;
  }
  else
  {
    sub_10026AC44((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_100400188);
      v6 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_1000C361C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t buf;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400188);
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }
  }
  __cxa_rethrow();
}

const char *sub_1000C3780()
{
  return "DYNAMIC_SCAN_STRATEGY_TARGET_CHANNEL_REFRESH_PERIOD_MILLIS";
}

const char *sub_1000C3790()
{
  return "FIX_CROSS_CHECK_CA_EVENT_SAMPLING_FACTOR";
}

const char *sub_1000C37A0()
{
  return "DAYS_BEFORE_REGIONAL_TILE_REDOWNLOAD";
}

const char *sub_1000C37B0()
{
  return "PREFETCH_REGIONAL_DB_BYTE_SIZE_CAP";
}

const char *sub_1000C37C4()
{
  return "DAYS_BEFORE_INDOOR_TILE_REDOWNLOAD";
}

void sub_1000C37D4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "MINIMUM_DISK_SPACE_REQUIRED_BYTES";
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 157286400;
}

const char *sub_1000C37F0()
{
  return "PREFETCH_INDOOR_DB_BYTE_SIZE_CAP";
}

const char *sub_1000C3804()
{
  return "DYNAMIC_UNIVERSE_DISABLED_VENUES";
}

const char *sub_1000C3814()
{
  return "DYNAMIC_UNIVERSE_FORCED_VENUES";
}

const char *sub_1000C3824()
{
  return "DYNAMIC_UNIVERSE_FAKE_LAST_FIX";
}

const char *sub_1000C3834()
{
  return "PREFETCH_REGIONAL_DB_SIZE_CAP";
}

const char *sub_1000C3844()
{
  return "LOG_MAX_DIRECTORY_SIZE_BYTES";
}

const char *sub_1000C3854()
{
  return "PREFETCH_INDOOR_DB_SIZE_CAP";
}

const char *sub_1000C3864()
{
  return "LOG_MAX_NUMBER_OF_TRACES";
}

const char *sub_1000C3874()
{
  return "LOG_MAX_TRACE_AGE_DAYS";
}

const char *sub_1000C3884()
{
  return "DATA_HOST_PROTOCOL";
}

const char *sub_1000C3894()
{
  return "USE_STRIDELEN_EST";
}

const char *sub_1000C38A4()
{
  return "DATA_HOST_PORT";
}

const char *sub_1000C38B4()
{
  return "WIFI2_ENABLED";
}

char *sub_1000C38C4@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_QWORD *)a1 = "LOG_DIRECTORY";
  *(_BYTE *)(a1 + 8) = 0;
  result = (char *)operator new(0x28uLL);
  *(_QWORD *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 24) = xmmword_100382FD0;
  strcpy(result, "/var/mobile/Library/Logs/pipelined");
  return result;
}

const char *sub_1000C3924()
{
  return "DATA_PREFIX";
}

const char *sub_1000C3934()
{
  return "LOG_TRACES";
}

double sub_1000C3944()
{
  return 0.0;
}

void sub_1000C3954(const void **a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int *a5@<X8>)
{
  size_t v6;
  const void **v7;
  size_t v8;
  size_t v9;
  char v10[8];
  uint64_t v11;

  v6 = *((unsigned __int8 *)a1 + 23);
  v7 = (const void **)*a1;
  v8 = (size_t)a1[1];
  v10[0] = 0;
  if (*(_BYTE *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v10[0] = 1;
  }
  if ((v6 & 0x80u) == 0)
    v9 = v6;
  else
    v9 = v8;
  if ((v6 & 0x80u) != 0)
    a1 = v7;
  sub_10001C214(a1, v9, a2, (uint64_t)v10, a4, a5);
}

ssize_t sub_1000C39E4(int *a1, const void *a2, size_t a3)
{
  ssize_t result;
  int v4;
  const std::error_category *v5;
  _BYTE v6[24];
  std::system_error v7;

  result = write(*a1, a2, a3);
  if (result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    v4 = *__error();
    v5 = std::system_category();
    std::system_error::system_error(&v7, v4, v5);
    sub_10018D04C((uint64_t)v6);
    sub_100179194(&v7, (uint64_t)"size_t FileUtil::PosixHandle::write(const void *, size_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 174, (uint64_t)v6);
  }
  return result;
}

void sub_1000C3A84(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__pa)
    operator delete(__pa);
  std::system_error::~system_error((std::system_error *)&a13);
  _Unwind_Resume(a1);
}

void sub_1000C3AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  std::system_error::~system_error((std::system_error *)&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_1000C3AC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3AD8(int *a1)
{
  uint64_t result;
  int v2;
  const std::error_category *v3;
  _BYTE v4[24];
  std::system_error v5;

  result = fsync(*a1);
  if ((_DWORD)result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    v2 = *__error();
    v3 = std::system_category();
    std::system_error::system_error(&v5, v2, v3);
    sub_10018D04C((uint64_t)v4);
    sub_100179194(&v5, (uint64_t)"void FileUtil::PosixHandle::flush()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 156, (uint64_t)v4);
  }
  return result;
}

void sub_1000C3B78(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__pa)
    operator delete(__pa);
  std::system_error::~system_error((std::system_error *)&a13);
  _Unwind_Resume(a1);
}

void sub_1000C3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::system_error *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  std::system_error::~system_error((std::system_error *)&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_1000C3BB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3BCC(uint64_t a1)
{

  return a1;
}

uint64_t sub_1000C3BF4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)a1 = MGGetBoolAnswer(CFSTR("InternalBuild"));
  return a1;
}

void sub_1000C3C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    *(_BYTE *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void sub_1000C3C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  double v9;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 32);
    if (qword_100417ED8 == -1)
    {
      v6 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        *(_BYTE *)(a1 + 24) = 0;
        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FFED0);
      v6 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_5;
    }
    v8 = 134217984;
    v9 = (double)(a2 - v4 + 1000000000 * v5) / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Got a scan after %f seconds", (uint8_t *)&v8, 0xCu);
    goto LABEL_5;
  }
LABEL_6:
  v7 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a2 + 1000000000 * v7;
}

uint64_t sub_1000C3D88(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(result + 25) = 1;
  v2 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = a2 + 1000000000 * v2;
  return result;
}

uint64_t sub_1000C3DC8(uint64_t a1, int a2, char a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_10016A0A4(&v17);
  v7 = v17;
  v6 = v18;
  *(_QWORD *)a1 = off_1003F52B0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = v18;
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  *(_QWORD *)a1 = off_1003F5878;
  *(_QWORD *)(a1 + 24) = off_1003F59B8;
  *(_QWORD *)(a1 + 32) = off_1003F5A98;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = a2;
  *(_BYTE *)(a1 + 68) = a3;
  v13 = sub_1000C304C();
  v14 = v13;
  v15 = atomic_load((unsigned __int8 *)v13 + 26);
  if ((v15 & 1) == 0 && !*((_BYTE *)v13 + 16))
  {
    *((_DWORD *)v13 + 5) = sub_1000AAF28((uint64_t)v13, (unsigned int *)v13 + 3);
    *((_BYTE *)v14 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v14 + 26);
  }
  sub_1000C3BF4(a1 + 72, *((int *)v14 + 5));
  return a1;
}

void sub_1000C3EEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1000C3EB4);
}

void sub_1000C3F00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  sub_100164C5C(v2);
  sub_100164CB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3F1C(uint64_t a1, int a2, uint64_t *a3, char a4)
{
  uint64_t v6;
  _QWORD v8[2];

  sub_1000C3DC8(a1, a2, a4);
  v6 = *a3;
  if (*a3)
  {
    v8[0] = a1 + 40;
    v8[1] = v6;
    sub_100164D2C((uint64_t)v8, a1);
  }
  return a1;
}

void sub_1000C3F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10016528C(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10016528C(v1);
  _Unwind_Resume(a1);
}

void sub_1000C3FA0(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  _QWORD v4[10];

  v1 = *(_QWORD *)(a1 + 16);
  v4[8] = *(_QWORD *)(a1 + 8);
  v4[9] = v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  sub_10000CBC4(v4);
}

void sub_1000C4070(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1000C4084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1000C40A0(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  _QWORD v4[10];

  v1 = *(_QWORD *)(a1 + 16);
  v4[8] = *(_QWORD *)(a1 + 8);
  v4[9] = v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  sub_10000A930(v4);
}

void sub_1000C4170(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1000C4184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1000C41A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if ((*(_BYTE *)(v2 + 6840) & 8) != 0)
    sub_1000CBFCC(v2 + 3400, a2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1000C4234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C424C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, char a5, __int128 *a6, uint64_t a7)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v8 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v9;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v10 = *a4;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 48) = v10;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a1 + 72) = a5;
  v11 = *a6;
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a6 + 2);
  *(_OWORD *)(a1 + 80) = v11;
  *((_QWORD *)a6 + 1) = 0;
  *((_QWORD *)a6 + 2) = 0;
  *(_QWORD *)a6 = 0;
  *(_BYTE *)(a1 + 104) = 0;
  sub_100012C4C(a1 + 136, a7);
  return a1;
}

void sub_1000C42E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 104))
  {
    if (*(char *)(v1 + 135) < 0)
      operator delete(*(void **)(v1 + 112));
    *(_BYTE *)(v1 + 104) = 0;
  }
  sub_100344D34(v1, (void **)(v1 + 80), (void **)(v1 + 48), (void **)(v1 + 24));
  _Unwind_Resume(a1);
}

double sub_1000C4320@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  double result;

  v4 = operator new(0xA20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1003F6260;
  v4[3] = off_1003F62B0;
  *((_DWORD *)v4 + 8) = a1;
  v5 = 1;
  for (i = 9; i != 632; ++i)
  {
    v7 = 1812433253 * (a1 ^ (a1 >> 30));
    a1 = v7 + v5;
    *((_DWORD *)v4 + i) = i + v7 - 8;
    ++v5;
  }
  *((_OWORD *)v4 + 158) = 0u;
  v4[318] = 0x3FF0000000000000;
  *((_BYTE *)v4 + 2560) = 0;
  v4[321] = 0;
  v4[322] = 0x3FF0000000000000;
  result = 0.0078125;
  v4[323] = 0x3F80000000000000;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

double sub_1000C43D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_1000C4418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  *(_DWORD *)a1 = a5;
  *(_DWORD *)(a1 + 4) = a6;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  sub_100028F44(a1, a3, a2, a7);
  return a1;
}

void sub_1000C446C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
    sub_100344030(v3);
  sub_1003423E0(v1, (void **)(v1 + 32), (void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4498(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004031A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 16) = _D0;
  *(_OWORD *)(a1 + 24) = xmmword_100398F30;
  return a1;
}

void sub_1000C44DC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C44F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB6D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_1000C4520(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FB6D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 48) = 0;
  sub_1000C45B0(a1, a2);
  return a1;
}

void sub_1000C4580(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C459C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C45B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 16465);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 56);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(a1 + 56) |= 2u;
  *(_BYTE *)(a1 + 48) = v9;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_QWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_16:
    v12 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_QWORD *)(a1 + 40) = v12;
    if ((*(_DWORD *)(a2 + 56) & 0x20) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_10;
  }
LABEL_15:
  v11 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 8u;
  *(_QWORD *)(a1 + 32) = v11;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_16;
LABEL_9:
  if ((v5 & 0x20) != 0)
  {
LABEL_10:
    v6 = *(_BYTE *)(a2 + 49);
    *(_DWORD *)(a1 + 56) |= 0x20u;
    *(_BYTE *)(a1 + 49) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000C46EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C4700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C4714(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB620;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_1000C4744(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FB620;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_1000C47D4(a1, a2);
  return a1;
}

void sub_1000C47A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C47C0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C47D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 16077);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_12:
      v10 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 48) |= 4u;
      *(_QWORD *)(a1 + 24) = v10;
      if ((*(_DWORD *)(a2 + 48) & 8) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(_BYTE *)(a1 + 40) = v9;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v5 & 8) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_QWORD *)(a1 + 32) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000C48D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C48E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C48F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FB4C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_1000C4928(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FB4C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  sub_1000C49B8(a1, a2);
  return a1;
}

void sub_1000C4988(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C49A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C49B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 15509);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 56);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 56) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a2 + 56) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) |= 2u;
  *(_QWORD *)(a1 + 24) = v9;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
LABEL_14:
    v11 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) |= 8u;
    *(_QWORD *)(a1 + 40) = v11;
    if ((*(_DWORD *)(a2 + 56) & 0x10) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_9;
  }
LABEL_13:
  v10 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) |= 4u;
  *(_QWORD *)(a1 + 32) = v10;
  v5 = *(_DWORD *)(a2 + 56);
  if ((v5 & 8) != 0)
    goto LABEL_14;
LABEL_8:
  if ((v5 & 0x10) != 0)
  {
LABEL_9:
    v6 = *(_BYTE *)(a2 + 48);
    *(_DWORD *)(a1 + 56) |= 0x10u;
    *(_BYTE *)(a1 + 48) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000C4AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C4AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C4AFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_1000C4B2C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FA650;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_1000C4BB8(a1, a2);
  return a1;
}

void sub_1000C4B88(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C4BA4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE v15[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 5877);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 76);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 76) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  else if ((*(_BYTE *)(a2 + 76) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) |= 2u;
  *(_QWORD *)(a1 + 24) = v9;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v10 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_QWORD *)(a1 + 32) = v10;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_QWORD *)(a1 + 40) = v11;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_18:
    v13 = *(_QWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x20u;
    *(_QWORD *)(a1 + 56) = v13;
    if ((*(_DWORD *)(a2 + 76) & 0x40) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_11;
  }
LABEL_17:
  v12 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) |= 0x10u;
  *(_QWORD *)(a1 + 48) = v12;
  v5 = *(_DWORD *)(a2 + 76);
  if ((v5 & 0x20) != 0)
    goto LABEL_18;
LABEL_10:
  if ((v5 & 0x40) != 0)
  {
LABEL_11:
    v6 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 76) |= 0x40u;
    *(_QWORD *)(a1 + 64) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000C4D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000C4D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4D3C(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return sub_100006F44(v3, a2);
  }
  return result;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000C4D7C(uint64_t a1)
{
  int v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 76);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 60) = 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 10) = 0;
  *((_DWORD *)result + 17) = 0;
  if (v3)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_1000C4DBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F2AF0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1000C4E00(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4E14(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F1A88;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_1000C4E54(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C4E68(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return sub_100033480(v3, a2);
  }
  return result;
}

uint64_t sub_1000C4EA8(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v31;
  uint64_t v32;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v33;
  uint64_t v34;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 92);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 92) & 1) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = sub_1000C5234(this);
        v2 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(v1 + 24);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 32))
        {
          if ((*(_BYTE *)(v3 + 32) & 1) != 0)
          {
            this = *(_QWORD *)(v3 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v4 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v4)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_DWORD *)(v3 + 24) = 0;
        }
        v6 = *(_QWORD *)(v3 + 8);
        v5 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v3 + 8);
        *((_DWORD *)v5 + 6) = 0;
        if (v6)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v5);
      }
    }
    if ((*(_BYTE *)(v1 + 92) & 4) != 0)
    {
      v7 = *(_QWORD *)(v1 + 32);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 44))
        {
          if ((*(_BYTE *)(v7 + 44) & 1) != 0)
          {
            this = *(_QWORD *)(v7 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v8 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v8)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
        }
        v10 = *(_QWORD *)(v7 + 8);
        v9 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v7 + 8);
        *((_DWORD *)v9 + 9) = 0;
        if (v10)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v9);
      }
    }
    v11 = *(_DWORD *)(v1 + 92);
    if ((v11 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = sub_100118228(this);
        v11 = *(_DWORD *)(v1 + 92);
      }
    }
    if ((v11 & 0x10) != 0)
    {
      v12 = *(_QWORD *)(v1 + 48);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 40);
        if ((_BYTE)v13)
        {
          if ((v13 & 1) != 0)
          {
            this = *(_QWORD *)(v12 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v14 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v14)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_DWORD *)(v12 + 27) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v13 = *(_DWORD *)(v12 + 40);
        }
        if ((v13 & 0xFF00) != 0)
          *(_WORD *)(v12 + 31) = 0;
        v16 = *(_QWORD *)(v12 + 8);
        v15 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v12 + 8);
        *((_DWORD *)v15 + 8) = 0;
        if (v16)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v15);
      }
    }
    if ((*(_BYTE *)(v1 + 92) & 0x20) != 0)
    {
      v17 = *(_QWORD *)(v1 + 56);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 32))
        {
          if ((*(_BYTE *)(v17 + 32) & 1) != 0)
          {
            this = *(_QWORD *)(v17 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v18 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v18)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_DWORD *)(v17 + 24) = 0;
        }
        v20 = *(_QWORD *)(v17 + 8);
        v19 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v17 + 8);
        *((_DWORD *)v19 + 6) = 0;
        if (v20)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v19);
      }
    }
    if ((*(_BYTE *)(v1 + 92) & 0x40) != 0)
    {
      v21 = *(_QWORD *)(v1 + 64);
      if (v21)
      {
        if (*(_BYTE *)(v21 + 36))
        {
          if ((*(_BYTE *)(v21 + 36) & 1) != 0)
          {
            this = *(_QWORD *)(v21 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v22 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v22)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_QWORD *)(v21 + 24) = 0;
        }
        v24 = *(_QWORD *)(v21 + 8);
        v23 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v21 + 8);
        *((_DWORD *)v23 + 7) = 0;
        if (v24)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v23);
      }
    }
    if ((*(_BYTE *)(v1 + 92) & 0x80) != 0)
    {
      v25 = *(_QWORD *)(v1 + 72);
      if (v25)
      {
        if (*(_BYTE *)(v25 + 36))
        {
          if ((*(_BYTE *)(v25 + 36) & 1) != 0)
          {
            this = *(_QWORD *)(v25 + 16);
            if (this)
            {
              if (*(_BYTE *)(this + 44))
              {
                *(_QWORD *)(this + 16) = 0;
                *(_QWORD *)(this + 24) = 0;
                *(_QWORD *)(this + 32) = 0;
              }
              v26 = *(_QWORD *)(this + 8);
              this += 8;
              *(_DWORD *)(this + 36) = 0;
              if (v26)
                this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
            }
          }
          *(_QWORD *)(v25 + 24) = 0;
        }
        v28 = *(_QWORD *)(v25 + 8);
        v27 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v25 + 8);
        *((_DWORD *)v27 + 7) = 0;
        if (v28)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v27);
      }
    }
  }
  if ((*(_BYTE *)(v1 + 93) & 1) != 0)
  {
    v29 = *(_QWORD *)(v1 + 80);
    if (v29)
    {
      if (*(_BYTE *)(v29 + 36))
      {
        if ((*(_BYTE *)(v29 + 36) & 1) != 0)
        {
          this = *(_QWORD *)(v29 + 16);
          if (this)
          {
            if (*(_BYTE *)(this + 44))
            {
              *(_QWORD *)(this + 16) = 0;
              *(_QWORD *)(this + 24) = 0;
              *(_QWORD *)(this + 32) = 0;
            }
            v30 = *(_QWORD *)(this + 8);
            this += 8;
            *(_DWORD *)(this + 36) = 0;
            if (v30)
              this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
          }
        }
        *(_QWORD *)(v29 + 24) = 0;
      }
      v32 = *(_QWORD *)(v29 + 8);
      v31 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v29 + 8);
      *((_DWORD *)v31 + 7) = 0;
      if (v32)
        this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v31);
    }
  }
  v34 = *(_QWORD *)(v1 + 8);
  v33 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v33 + 21) = 0;
  if (v34)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v33);
  return this;
}

uint64_t sub_1000C51A8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003F1BE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100033AC8(a1, a2);
  return a1;
}

void sub_1000C5204(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5220(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5234(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;

  v1 = this;
  if (*(_BYTE *)(this + 60))
  {
    if ((*(_BYTE *)(this + 60) & 1) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 32) = 0;
        }
        v2 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v2)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    if ((*(_BYTE *)(v1 + 60) & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        if (*(_BYTE *)(this + 44))
        {
          *(_QWORD *)(this + 16) = 0;
          *(_QWORD *)(this + 24) = 0;
          *(_QWORD *)(this + 32) = 0;
        }
        v3 = *(_QWORD *)(this + 8);
        this += 8;
        *(_DWORD *)(this + 36) = 0;
        if (v3)
          this = wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback((wireless_diagnostics::google::protobuf::UnknownFieldSet *)this);
      }
    }
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
  }
  v5 = *(_QWORD *)(v1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 13) = 0;
  if (v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  return this;
}

uint64_t sub_1000C52D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3E78;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000C5314(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5328(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3068;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_1000C5368(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C537C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)qword_10041AA78 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[7];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[8];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = (_QWORD *)v1[9];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_1000C5450(_QWORD *a1)
{
  *a1 = off_1003F3FD8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void sub_1000C5484(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000C5498(_QWORD *a1)
{
  *a1 = off_1003F4088;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[4] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[5] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[7] = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  a1[8] = 0;
  a1[6] = 0;
  a1[9] = 0;
  return a1;
}

void sub_1000C54E8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C54FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3F28;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1000C5538(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1000C554C(_DWORD *result, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v4;
  unsigned __int16 v5;
  unsigned int v6;
  unint64_t v7;
  std::string v9;
  std::logic_error v10;

  v4 = (14 - a3) / 12;
  *result = 365 * (unsigned __int16)(a2 - v4 + 4800)
          + a4
          + ((unsigned __int16)(a2 - v4 + 4800) >> 2)
          - (unsigned __int16)(a2 - v4 + 4800) / 0x64u
          + (unsigned __int16)(a2 - v4 + 4800) / 0x190u
          - 32045
          + ((858993460 * (unint64_t)(153 * (unsigned __int16)(a3 + 12 * v4 - 3) + 2)) >> 32);
  if (a3 > 0xBu)
    goto LABEL_14;
  if (((1 << a3) & 0xA50) != 0)
  {
    v5 = 30;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    v5 = 28;
    if ((a2 & 3) == 0)
    {
      HIDWORD(v7) = -1030792151 * a2;
      LODWORD(v7) = HIDWORD(v7);
      v6 = v7 >> 2;
      LODWORD(v7) = HIDWORD(v7);
      if ((v7 >> 4) < 0xA3D70B || v6 > 0x28F5C28)
        v5 = 29;
      else
        v5 = 28;
    }
  }
  else
  {
LABEL_14:
    v5 = 31;
  }
LABEL_4:
  if (v5 < a4)
  {
    sub_1000D5048(&v9, "Day of month is not valid for year");
    std::logic_error::logic_error(&v10, &v9);
    v10.__vftable = (std::logic_error_vtbl *)&off_1003F91E8;
    sub_10018F8DC(&v10);
  }
  return result;
}

void sub_1000C56C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::out_of_range a16)
{
  std::out_of_range::~out_of_range(&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C56F4(uint64_t a1)
{
  char *v2;
  char *v3;
  int v4;
  __int128 v5;
  char *v6;
  int v7;
  __int128 v8;
  char *v9;
  int v10;
  __int128 v11;
  char *v12;
  int v13;
  __int128 v14;
  char *v15;
  int v16;
  __int128 v17;
  char *v18;
  int v19;
  __int128 v20;
  char *v21;
  int v22;
  __int128 v23;
  char *v24;
  int v25;
  void *__p[2];
  uint64_t v28;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = (char *)operator new(0xD8uLL);
  strcpy(v2, "first");
  *(_OWORD *)(v2 + 6) = *(_OWORD *)__p;
  v2[22] = v28;
  v2[23] = 5;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2 + 24;
  *(_QWORD *)(a1 + 16) = v2 + 216;
  HIBYTE(v28) = 6;
  strcpy((char *)__p, "second");
  if ((unint64_t)(v2 + 24) >= *(_QWORD *)(a1 + 16))
  {
    v3 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v4 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v3;
    if (v4 < 0)
    {
      operator delete(__p[0]);
      v3 = *(char **)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)(v2 + 24) = *(_OWORD *)__p;
    *((_QWORD *)v2 + 5) = v28;
    v3 = v2 + 48;
    *(_QWORD *)(a1 + 8) = v3;
  }
  HIBYTE(v28) = 5;
  strcpy((char *)__p, "third");
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    v6 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v7 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v6;
    if (v7 < 0)
    {
      operator delete(__p[0]);
      v6 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *((_QWORD *)v3 + 2) = v28;
    *(_OWORD *)v3 = v5;
    v6 = v3 + 24;
    *(_QWORD *)(a1 + 8) = v6;
  }
  HIBYTE(v28) = 6;
  strcpy((char *)__p, "fourth");
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
  {
    v9 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v10 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v9;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      v9 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v8 = *(_OWORD *)__p;
    *((_QWORD *)v6 + 2) = v28;
    *(_OWORD *)v6 = v8;
    v9 = v6 + 24;
    *(_QWORD *)(a1 + 8) = v9;
  }
  HIBYTE(v28) = 5;
  strcpy((char *)__p, "fifth");
  if ((unint64_t)v9 >= *(_QWORD *)(a1 + 16))
  {
    v12 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v13 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v12;
    if (v13 < 0)
    {
      operator delete(__p[0]);
      v12 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v11 = *(_OWORD *)__p;
    *((_QWORD *)v9 + 2) = v28;
    *(_OWORD *)v9 = v11;
    v12 = v9 + 24;
    *(_QWORD *)(a1 + 8) = v12;
  }
  HIBYTE(v28) = 4;
  strcpy((char *)__p, "last");
  if ((unint64_t)v12 >= *(_QWORD *)(a1 + 16))
  {
    v15 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v16 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v15;
    if (v16 < 0)
    {
      operator delete(__p[0]);
      v15 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v14 = *(_OWORD *)__p;
    *((_QWORD *)v12 + 2) = v28;
    *(_OWORD *)v12 = v14;
    v15 = v12 + 24;
    *(_QWORD *)(a1 + 8) = v15;
  }
  HIBYTE(v28) = 6;
  strcpy((char *)__p, "before");
  if ((unint64_t)v15 >= *(_QWORD *)(a1 + 16))
  {
    v18 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v19 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v18;
    if (v19 < 0)
    {
      operator delete(__p[0]);
      v18 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v17 = *(_OWORD *)__p;
    *((_QWORD *)v15 + 2) = v28;
    *(_OWORD *)v15 = v17;
    v18 = v15 + 24;
    *(_QWORD *)(a1 + 8) = v18;
  }
  HIBYTE(v28) = 5;
  strcpy((char *)__p, "after");
  if ((unint64_t)v18 >= *(_QWORD *)(a1 + 16))
  {
    v21 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v22 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v21;
    if (v22 < 0)
    {
      operator delete(__p[0]);
      v21 = *(char **)(a1 + 8);
    }
  }
  else
  {
    v20 = *(_OWORD *)__p;
    *((_QWORD *)v18 + 2) = v28;
    *(_OWORD *)v18 = v20;
    v21 = v18 + 24;
    *(_QWORD *)(a1 + 8) = v21;
  }
  HIBYTE(v28) = 2;
  strcpy((char *)__p, "of");
  if ((unint64_t)v21 >= *(_QWORD *)(a1 + 16))
  {
    v24 = sub_1001697DC((void **)a1, (uint64_t)__p);
    v25 = SHIBYTE(v28);
    *(_QWORD *)(a1 + 8) = v24;
    if (v25 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v23 = *(_OWORD *)__p;
    *((_QWORD *)v21 + 2) = v28;
    *(_OWORD *)v21 = v23;
    *(_QWORD *)(a1 + 8) = v21 + 24;
  }
  return a1;
}

void sub_1000C5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void **v16;

  if (a16 < 0)
  {
    operator delete(__p);
    sub_1000FE50C(v16);
    _Unwind_Resume(a1);
  }
  sub_1000FE50C(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5B0C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    v5 = a1 + 32;
    if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_10006CED8((_BYTE *)v5, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
LABEL_6:
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v7;
  }
  v8 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10006CED8(v8, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_1000C5C20(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
  {
    operator delete(*v4);
    if ((v1[55] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1000C5C94(std::locale::facet *this)
{
  this->__vftable = (std::locale::facet_vtbl *)off_1003F9210;
  if (SHIBYTE(this[22].__vftable) < 0)
    operator delete(this[21].__vftable);
  sub_10000C7A8(this);
  operator delete();
}

void sub_1000C5CE8()
{
  operator new();
}

void sub_1000C5DCC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1000C5DD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000C5DEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v4 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v7 = sub_1000BD480(v4 / 86400000000);
    v8 = (14 - WORD1(v7)) / 12;
    v6 = WORD2(v7)
       + 365 * (unsigned __int16)(v7 - v8 + 4800)
       + ((unsigned __int16)(v7 - v8 + 4800) >> 2)
       - (unsigned __int16)(v7 - v8 + 4800) / 0x64u
       + (unsigned __int16)(v7 - v8 + 4800) / 0x190u
       - 32045
       + ((858993460 * (unint64_t)(153 * (unsigned __int16)(WORD1(v7) + 12 * v8 - 3) + 2)) >> 32);
  }
  else
  {
    if (v4 == 0x8000000000000000)
      v5 = 0;
    else
      v5 = -2;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      v6 = -1;
    else
      v6 = v5;
  }
  v12 = v6;
  result = sub_1000BD290(&v12, a2);
  v10 = *a1;
  v11 = 0x7FFFFFFFFFFFFFFELL;
  if (*a1 == 0x8000000000000000)
    v11 = 0x8000000000000000;
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
    v10 = v11;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
    v10 = *a1 % 86400000000;
  *(_DWORD *)(a2 + 8) = (int)v10 / -694967296;
  *(_DWORD *)a2 = (int)(v10 / 1000000) % 60;
  *(_DWORD *)(a2 + 4) = (int)(v10 / 60000000) % 60;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

__int128 *sub_1000C6008()
{
  return &xmmword_100419450;
}

void *sub_1000C6014()
{
  return &unk_100419468;
}

void sub_1000C6020(std::string *this)
{
  std::string *v1;
  std::string::pointer data;
  unint64_t v3;
  uint64_t v4;
  std::string::size_type size;
  std::string::pointer v6;
  std::string::size_type *p_size;
  std::string::size_type v8;
  std::string::pointer v9;
  unint64_t v10;
  std::string::pointer v11;
  unint64_t v12;
  std::string::pointer v13;
  std::string::pointer v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  std::string::pointer v18;
  std::string::size_type v19;
  unint64_t v20;
  unint64_t v21;

  v1 = this;
  data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
    v3 = *((_QWORD *)data + 1);
  else
    v3 = data[23];
  v4 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v1->__r_.__value_.__l.__size_)
      goto LABEL_13;
  }
  else if (*((_BYTE *)&v1->__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  size = v1[1].__r_.__value_.__l.__size_;
  if (size + 1 == v3)
  {
    v6 = data;
    if (data[23] < 0)
      v6 = *(std::string::pointer *)data;
    if (v6[size] == 47)
    {
      v1[1].__r_.__value_.__l.__size_ = v3;
      return;
    }
  }
LABEL_13:
  if ((v4 & 0x80) != 0)
  {
    p_size = &v1[1].__r_.__value_.__l.__size_;
    v8 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_61:
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_size = &v1[1].__r_.__value_.__l.__size_;
    v8 = v1[1].__r_.__value_.__l.__size_ + v4;
    v1[1].__r_.__value_.__l.__size_ = v8;
    if (v8 >= v3)
    {
LABEL_15:
      v1->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  v9 = data;
  if (data[23] < 0)
    v9 = *(std::string::pointer *)data;
  if (v9[v8] == 47)
  {
    v21 = 0;
    if (data[23] < 0)
      data = *(std::string::pointer *)data;
    v10 = sub_10006CD4C(data, v3, &v21);
    v8 = *p_size;
    if (*p_size == v10)
    {
      if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v21)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_28;
        }
      }
      else if (v21 == HIBYTE(v1->__r_.__value_.__r.__words[2]))
      {
        *((_BYTE *)&v1->__r_.__value_.__s + 23) = 1;
LABEL_28:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    for (data = v1[1].__r_.__value_.__l.__data_; v3 != v8; *p_size = ++v8)
    {
      v11 = data;
      if (data[23] < 0)
        v11 = *(std::string::pointer *)data;
      if (v11[v8] != 47)
        goto LABEL_46;
    }
    v12 = v3 - 1 >= v10 ? v10 : v3 - 1;
    v13 = data[23] >= 0 ? data : *(std::string::pointer *)data;
    v14 = v13 - 2;
    v15 = v3;
    while (1)
    {
      v16 = v15 - 1;
      if (v15 - 1 <= v10)
        break;
      v17 = v14[v15--];
      if (v17 != 47)
        goto LABEL_45;
    }
    v16 = v12;
LABEL_45:
    v8 = v3;
    if (v16 != v10)
    {
      v1[1].__r_.__value_.__l.__size_ = v3 - 1;
      if ((SHIBYTE(v1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_61;
    }
  }
LABEL_46:
  if (data[23] < 0)
  {
    v18 = *(std::string::pointer *)data;
    v19 = *((_QWORD *)data + 1);
  }
  else
  {
    v18 = data;
    v19 = data[23];
  }
  if (v19 <= v8)
    goto LABEL_53;
  v20 = v8;
  while (v18[v20] != 47)
  {
    if (v19 == ++v20)
      goto LABEL_53;
  }
  if (v19 == v20 || v20 == -1)
LABEL_53:
    v20 = v3;
  if (data[23] < 0)
    data = *(std::string::pointer *)data;
  sub_1000D8F44(v1, &data[v8], &data[v20], v20 - v8);
}

void sub_1000C62B4(std::string *a1)
{
  std::string *v1;
  std::string::pointer data;
  unint64_t v3;
  std::string::pointer v4;
  unint64_t v5;
  std::string::size_type size;
  std::string::pointer v9;
  unint64_t v10;
  std::string::pointer v11;
  unint64_t v12;
  std::string::pointer v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  std::string::size_type v17;
  unint64_t v18;
  std::string::pointer v19;
  std::string::pointer v20;
  int v21;
  std::string::pointer v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  std::string::value_type *v28;
  std::string::size_type v29;
  std::string::value_type *v30;
  unint64_t v31;

  v1 = a1;
  data = a1[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    v4 = data;
    data = *(std::string::pointer *)data;
    v3 = *((_QWORD *)v4 + 1);
  }
  else
  {
    v3 = data[23];
  }
  v31 = 0;
  v5 = sub_10006CD4C(data, v3, &v31);
  size = v1[1].__r_.__value_.__l.__size_;
  if (v5 >= v3 || size != v5)
  {
    if (v3 >= 2 && size == v3)
    {
      v9 = v1[1].__r_.__value_.__l.__data_;
      v10 = v3 - 1;
      v11 = v9;
      if (v9[23] < 0)
        v11 = *(std::string::pointer *)v9;
      if (v11[v10] == 47)
      {
        if (v10 >= v5)
          v12 = v5;
        else
          v12 = v3 - 1;
        if (v9[23] < 0)
          v9 = *(std::string::pointer *)v9;
        v13 = v9 - 2;
        while (1)
        {
          v14 = v3 - 1;
          if (v3 - 1 <= v5)
            break;
          v15 = v13[v3--];
          if (v15 != 47)
            goto LABEL_26;
        }
        v14 = v12;
LABEL_26:
        if (v14 != v5)
        {
          v1[1].__r_.__value_.__l.__size_ = v10;
          if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
          {
            *v1->__r_.__value_.__l.__data_ = 0;
            v1->__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v1->__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v1->__r_.__value_.__s + 23) = 0;
          }
          return;
        }
      }
    }
    v16 = v31;
    v17 = size + 1;
    while (1)
    {
      v18 = v17 - 1;
      if (v17 - 1 <= v31)
        break;
      if (v17 - v5 == 2)
      {
        v1[1].__r_.__value_.__l.__size_ = v5;
        if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v1->__r_.__value_.__s + 23) = 1;
        }
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
      v19 = v1[1].__r_.__value_.__l.__data_;
      v20 = v19;
      if (v19[23] < 0)
        v20 = *(std::string::pointer *)v19;
      v21 = v20[v17-- - 2];
      if (v21 != 47)
      {
        v22 = *(std::string::pointer *)v19;
        if (v19[23] >= 0)
          v22 = v1[1].__r_.__value_.__l.__data_;
        v23 = v18 - 1;
        v24 = v18;
        while (1)
        {
          v25 = v24;
          if (v23 + 1 <= v31)
            break;
          v26 = v22[v23--];
          --v24;
          if (v26 == 47)
          {
            v27 = v23 + 2;
            goto LABEL_46;
          }
        }
        v27 = v31;
LABEL_46:
        v1[1].__r_.__value_.__l.__size_ = v27;
        if (v19[23] < 0)
          v19 = *(std::string::pointer *)v19;
        v28 = &v19[v27];
        v30 = &v19[v18];
        if (v16 <= v25)
          v16 = v25;
        v29 = v18 - v16;
        goto LABEL_42;
      }
    }
  }
  v1[1].__r_.__value_.__l.__size_ = 0;
  v28 = v1[1].__r_.__value_.__l.__data_;
  if (v28[23] < 0)
    v28 = *(std::string::value_type **)v28;
  v29 = v31;
  v30 = &v28[v31];
LABEL_42:
  sub_1000D8F44(v1, v28, v30, v29);
}

void sub_1000C64C8()
{
  operator new();
}

uint64_t sub_1000C6514(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 128);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 136);
    v5 = *(void **)(a1 + 128);
    if (v4 != v3)
    {
      do
      {
        v6 = v4 - 40;
        nullsub_49(v4 - 32);
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v5);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v7 = *(_QWORD *)(a1 + 72);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = *(void **)(a1 + 72);
      if (v8 != v7)
      {
        do
        {
          v10 = v8 - 40;
          nullsub_49(v8 - 32);
          v8 = v10;
        }
        while (v10 != v7);
        v9 = *(void **)(a1 + 72);
      }
      *(_QWORD *)(a1 + 80) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
  v11 = *(void **)(a1 + 40);
  if (v11)
  {
    *(_QWORD *)(a1 + 48) = v11;
    operator delete(v11);
  }
  nullsub_49(a1 + 8);
  return a1;
}

_QWORD *sub_1000C65E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(_QWORD *)(a2 + 40);
  sub_1000333F0((uint64_t)(a1 + 1), a3);
  sub_10001B9B8((uint64_t)(a1 + 13));
  return a1;
}

uint64_t sub_1000C6624(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003EEB48;
  if (*(_BYTE *)(a1 + 400))
    cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(a1 + 40));
  return a1;
}

uint64_t sub_1000C6660(uint64_t a1, double a2)
{
  *(_QWORD *)a1 = off_1003EEB48;
  *(double *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 408), 0, 0.0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void sub_1000C66D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  cnframework::TimestampedEvent *v2;

  if (*(_BYTE *)(v1 + 400))
    cnframework::TimestampedEvent::~TimestampedEvent(v2);
  _Unwind_Resume(exception_object);
}

double sub_1000C66EC(uint64_t a1)
{
  double result;
  __int128 v3;

  if (*(_BYTE *)(a1 + 32))
    *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a1 + 400))
  {
    cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(a1 + 40));
    *(_BYTE *)(a1 + 400) = 0;
  }
  v3 = 0uLL;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v3, 0, 0.0);
  result = *(double *)&v3;
  *(_OWORD *)(a1 + 408) = v3;
  return result;
}

void sub_1000C6750(_QWORD *a1)
{
  *a1 = off_1003FF718;
  sub_10003F88C((uint64_t)(a1 + 1));
  operator delete();
}

_QWORD *sub_1000C6790(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1003FF718;
  sub_10003F4AC((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t sub_1000C67C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1000BFC14(a2);
  result = sub_1000C4520(a1, v3);
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

double sub_1000C67F4(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  double result;

  v2 = *(_DWORD *)(a1 + 48);
  result = ((double)a2 + *(double *)(a1 + 56) * (double)v2) / ((double)v2 + 1.0);
  *(double *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 48) = v2 + 1;
  return result;
}

_QWORD *sub_1000C6828(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *a1 = off_1003FFC20;
  sub_100094C10((uint64_t)(a1 + 25));
  v2 = (std::__shared_weak_count *)a1[14];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[9];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[9];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[7];
  a1[7] = 0;
  if (v7)
    operator delete(v7);
  v8 = (_QWORD *)a1[4];
  while (v8)
  {
    v11 = v8;
    v8 = (_QWORD *)*v8;
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v9 = (void *)a1[2];
  a1[2] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

void sub_1000C6944(sqlite3 **a1, int a2)
{
  int v4;
  int *v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  _BYTE v16[24];
  std::string __dst;
  _QWORD v18[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::runtime_error v24;
  std::string v25;

  v4 = sqlite3_extended_result_codes(*a1, a2);
  sub_10008B9C4(v4, *a1);
  if (v4)
  {
    v5 = __error();
    sub_10025FF8C(*v5, &v25);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v20, a2);
    v6 = std::string::insert(&v20, 0, "Failed to change state of extended error codes, on=");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v18, " w/ ");
    if ((v19 & 0x80u) == 0)
      v8 = (const std::string::value_type *)v18;
    else
      v8 = (const std::string::value_type *)v18[0];
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18[1];
    v10 = std::string::append(&v21, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      __dst = v25;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v22, (const std::string::value_type *)p_dst, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v24, &v23);
    v24.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v16);
    sub_1001F2298(&v24, (uint64_t)"void db::resources::handle::set_extended_error_codes(BOOL)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 283, (uint64_t)v16);
  }
}

void sub_1000C6BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  int v68;
  uint64_t v69;
  void *v71;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    sub_1001F26E8((std::runtime_error *)(v69 - 152));
    v71 = a40;
    if (!a40)
    {
LABEL_12:
      std::runtime_error::~runtime_error((std::runtime_error *)(v69 - 168));
      if (*(char *)(v69 - 169) < 0)
      {
        operator delete(*(void **)(v69 - 192));
        if ((a48 & 0x80000000) == 0)
        {
LABEL_14:
          if ((*(char *)(v69 - 201) & 0x80000000) == 0)
            goto LABEL_15;
          goto LABEL_22;
        }
      }
      else if ((a48 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(a43);
      if ((*(char *)(v69 - 201) & 0x80000000) == 0)
      {
LABEL_15:
        if ((a55 & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(*(void **)(v69 - 224));
      if ((a55 & 0x80000000) == 0)
      {
LABEL_16:
        if ((a67 & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_24;
      }
LABEL_23:
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_25;
      }
LABEL_24:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v68 & 1) == 0)
        {
LABEL_27:
          if (*(char *)(v69 - 65) < 0)
            operator delete(*(void **)(v69 - 88));
          _Unwind_Resume(a1);
        }
LABEL_26:
        __cxa_free_exception(v67);
        goto LABEL_27;
      }
LABEL_25:
      if (!v68)
        goto LABEL_27;
      goto LABEL_26;
    }
LABEL_11:
    operator delete(v71);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a23);
  sub_1001F26E8((std::runtime_error *)(v69 - 152));
  v71 = a40;
  if (!a40)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t sub_1000C6DEC(uint64_t result)
{
  *(_QWORD *)result = -1;
  *(_QWORD *)(result + 8) = off_1003F9908;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) &= 0xFCu;
  return result;
}

void sub_1000C6E14(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  operator delete();
}

uint64_t sub_1000C6E4C(uint64_t result, __int16 a2)
{
  *(_WORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1000C6E58(uint64_t result)
{
  *(_QWORD *)result = 0x7FF8000000000000;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 892857142;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1000C6E80(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "start");

}

void sub_1000C6EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C6EC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "stop");

}

void sub_1000C6EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000C6F10(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  _BYTE v9[72];
  char *v10;
  std::__shared_weak_count *v11;

  sub_1000C7E24(&v8, a2);
  v3 = operator new(0x108uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = off_1003F0840;
  v3[4] = v8;
  sub_1000CAF00((uint64_t)(v3 + 5), (uint64_t)v9);
  *((_DWORD *)v3 + 6) = 0;
  v10 = (char *)(v3 + 3);
  v11 = (std::__shared_weak_count *)v3;
  sub_10005C2A4(a1, (uint64_t)&v10);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return nullsub_54(v9);
}

void sub_1000C6FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000FEAD8(v2 - 48);
  nullsub_54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000C6FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  nullsub_54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000C7018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_54((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7034(uint64_t a1, _DWORD *a2, double a3)
{
  double *v5;

  *(_DWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = (double *)operator new(0x28uLL);
  v5[1] = 0.0;
  v5[2] = 0.0;
  *(_QWORD *)v5 = off_1003FEFF0;
  v5[4] = a3;
  *(_QWORD *)(a1 + 64) = v5;
  *((_QWORD *)v5 + 3) = off_1003FF040;
  *(_QWORD *)(a1 + 56) = v5 + 3;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_1000C70A8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1004047D8;
  v2 = *(void **)(a1 + 32);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 16))
    *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_1000C70EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1004047D8;
  v2 = sub_100014180();
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 0;
  v3 = sub_10005D8AC(v2);
  sub_1000C7148(a1 + 32, *(unsigned int *)(v3 + 60));
  return a1;
}

void sub_1000C7138(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 16))
    *(_BYTE *)(v1 + 16) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7148(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (!a2)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    sub_1000D5048(v7, "");
    sub_1002EFF14("Atempting to initialize with window size of <=0. Most likely the wifi scan parameters weren't set before constructing this class.", &v9);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 1);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v9.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v7[0]);
LABEL_6:
    sub_1000F2AE4((uint64_t)&__p);
  }
  if ((a2 & 0x8000000000000000) != 0)
    sub_1000D02C0();
  v4 = ((a2 - 1) >> 6) + 1;
  *(_QWORD *)a1 = operator new(8 * v4);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v4;
  sub_1002776A8((_QWORD *)a1, a2, 0);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1000C727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;

  if (a14 < 0)
    operator delete(__p);
  if (*v20)
    operator delete(*v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C72C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_1000C72D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 19) = a2;
  return result;
}

uint64_t sub_1000C72D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) = a2;
  return result;
}

uint64_t sub_1000C72E0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 18) = a2;
  return result;
}

__n128 sub_1000C72E8(__n128 *a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  __n128 result;

  result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a3;
  a1[1].n128_u64[1] = a4;
  a1[2].n128_u32[0] = 0;
  return result;
}

uint64_t sub_1000C7304(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

_QWORD *sub_1000C7310(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003FC120;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_1000C7354(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *result = off_1003FC120;
  result[1] = a2;
  v3 = *a3;
  *a3 = 0;
  result[2] = v3;
  return result;
}

uint64_t sub_1000C7370(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1000BFD44(a2);
  result = sub_1000C4744(a1, v3);
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return result;
}

void sub_1000C73AC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)a1 = off_1003FF498;
  sub_10002F3EC((_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v2 = *(uint64_t **)(a1 + 40);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 48) = 0;
    if (v2 != (uint64_t *)(a1 + 32))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 32));
    }
  }
  sub_1000BE358(a1 + 8, *(_QWORD **)(a1 + 16));
  operator delete();
}

double sub_1000C7444(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1003FF498;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_OWORD *)(a1 + 48) = xmmword_100395310;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  return result;
}

uint64_t sub_1000C7494(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 8) = *a3;
  sub_100018EC4(a1 + 16, a2);
  return a1;
}

void sub_1000C74D0(uint64_t a1)
{
  sub_10003CA18(a1);
  operator delete();
}

uint64_t sub_1000C74F4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v28;

  *(_QWORD *)a1 = &off_1003FEB58;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = (_QWORD *)(a1 + 40);
  if (sub_1000BFC70())
  {
    v13 = operator new(0x20uLL);
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = off_1003FEBE8;
    *(_QWORD *)(a1 + 40) = sub_1002D24E4((double *)v13 + 3);
    *(_QWORD *)(a1 + 48) = v13;
    v14 = a4[1];
    *(_QWORD *)(a1 + 56) = *a4;
    *(_QWORD *)(a1 + 64) = v14;
    if (!v14)
      goto LABEL_7;
  }
  else
  {
    *v12 = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v14 = a4[1];
    *(_QWORD *)(a1 + 56) = *a4;
    *(_QWORD *)(a1 + 64) = v14;
    if (!v14)
      goto LABEL_7;
  }
  v15 = (unint64_t *)(v14 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_7:
  *(_BYTE *)(a1 + 72) = 0;
  v17 = a3[1];
  *(_QWORD *)(a1 + 280) = *a3;
  *(_QWORD *)(a1 + 288) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a1 + 296) = a5;
  *(_QWORD *)(a1 + 304) = a6;
  *(_QWORD *)(a1 + 312) = sub_10003E684(*a3);
  sub_10003F348(*a3, a1 + 320);
  sub_1000C0160(*a3, (uint64_t *)(a1 + 360));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v20 = *(_QWORD *)(a1 + 408);
  v28.n128_u64[0] = *(_QWORD *)(a1 + 400);
  v28.n128_u64[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = sub_1000C72E8((__n128 *)(a1 + 416), &v28, *(_QWORD *)(a1 + 280), a1 + 296);
  v24 = (std::__shared_weak_count *)v28.n128_u64[1];
  if (v28.n128_u64[1])
  {
    v25 = (unint64_t *)(v28.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v23);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)(a1 + 456) = -1;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  return a1;
}

void sub_1000C76D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v3;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  sub_10022BAEC((uint64_t **)(v1 + 32));
  sub_10022BB30(v2);
  _Unwind_Resume(a1);
}

void sub_1000C7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C(v16);
  sub_1000F7D3C(v13);
  sub_1000E095C(v15);
  sub_1000E095C(v14);
  if (*(_BYTE *)(v9 + 72))
  {
    sub_10000CF0C(v9 + 80);
    *(_BYTE *)(v9 + 72) = 0;
  }
  sub_1000E095C(v12);
  sub_1000E095C(v11);
  sub_10022BAEC((uint64_t **)(v9 + 32));
  sub_10022BB30(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7790(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  _QWORD *i;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *__p[2];
  int64_t v36;
  uint8_t buf[32];
  int v38;

  if (a1[1] == a1[2] || *(_DWORD *)(*a3 + 8) != *(_DWORD *)(a1[45] + 8))
    sub_10003D038(a1, a2, a3, a4);
  if (qword_100417ED8 == -1)
  {
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_25;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_25;
  }
  v9 = qword_10041AE50;
  if (!qword_10041AE50)
LABEL_11:
    sub_10018CB98("map::at:  key not found");
  v10 = *(_DWORD *)(*a3 + 8);
  while (1)
  {
    while (1)
    {
      v11 = *(_DWORD *)(v9 + 32);
      if (v10 >= v11)
        break;
      v9 = *(_QWORD *)v9;
      if (!v9)
        goto LABEL_11;
    }
    if (v11 >= v10)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_11;
  }
  v12 = *(const char **)(v9 + 40);
  v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    __p[1] = v14;
    v36 = v17 | 0x8000000000000000;
    __p[0] = v15;
  }
  else
  {
    HIBYTE(v36) = v13;
    v15 = __p;
    if (!v13)
      goto LABEL_21;
  }
  memmove(v15, v12, (size_t)v14);
LABEL_21:
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  v18 = __p;
  if (v36 < 0)
    v18 = (void **)__p[0];
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = v18;
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = a2;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating particle filter %s at timestamp %lld", buf, 0x16u);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
LABEL_25:
  a1[57] = a2;
  if (a1 + 47 != a4)
    sub_10021F6C8((uint64_t)(a1 + 47), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  memset(buf, 0, sizeof(buf));
  v38 = 1065353216;
  v19 = (_QWORD *)a1[47];
  for (i = (_QWORD *)a1[48]; v19 != i; v19 += 2)
  {
    v21 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 64))(*v19);
    sub_100213600((uint64_t)buf, v21, v21);
  }
  v22 = a1[1];
  v23 = a1[2];
  if (v22 == v23)
  {
    LOBYTE(v24) = 0;
    v26 = a1[4];
    if (!v26)
      goto LABEL_36;
    goto LABEL_35;
  }
  v24 = 0;
  do
  {
    v25 = sub_100050DB0(v22);
    v24 |= sub_100225618(v25, buf);
    v22 += 72;
  }
  while (v22 != v23);
  v26 = a1[4];
  if (v26)
  {
LABEL_35:
    v27 = sub_100050DB0(v26);
    sub_100225618(v27, buf);
  }
LABEL_36:
  sub_10022BD64(a1);
  v28 = *(_QWORD **)&buf[16];
  if (*(_QWORD *)&buf[16])
  {
    do
    {
      v31 = v28;
      v28 = (_QWORD *)*v28;
      v32 = (std::__shared_weak_count *)v31[3];
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      operator delete(v31);
    }
    while (v28);
  }
  v29 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v29)
    operator delete(v29);
  return v24 & 1;
}

void sub_1000C7B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000F7AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C7BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, std::runtime_error a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a15);
  if (a21 < 0)
    operator delete(a16);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000C7C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000F7AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C7C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000F7AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000C7C64(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
  objc_msgSend(WeakRetained, "start");

}

void sub_1000C7C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C7CAC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
  objc_msgSend(WeakRetained, "stop");

}

void sub_1000C7CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double sub_1000C7CF4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1003F9A08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 56) &= 0xFCu;
  result = INFINITY;
  *(_OWORD *)(a1 + 40) = xmmword_100395670;
  return result;
}

double *sub_1000C7D2C(double *a1, uint64_t a2)
{
  *a1 = sub_1000BFB74(a2);
  a1[1] = sub_1000C0210(a2);
  return a1;
}

void sub_1000C7D70(dispatch_queue_t *a1, void *a2)
{
  dispatch_async(*a1, a2);
}

uint64_t *sub_1000C7D78(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete();
  return a1;
}

void sub_1000C7DB8()
{
  operator new();
}

_QWORD *sub_1000C7E24(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)(a2 + 16);
  sub_1000CAF00((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t *sub_1000C7E54(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t *i;

  v3 = *(_QWORD *)(a1 + 24);
  result = (uint64_t *)(a1 + 24);
  result[1] = v3;
  v4 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  for (i = result; v4 != v5; ++v4)
    result = sub_10022CFEC((uint64_t *)&i, v4);
  return result;
}

uint64_t sub_1000C7EA4(uint64_t a1)
{
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  char v7;
  std::string *v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  int v13;
  std::string *p_p;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 v22;
  std::string __p;
  std::string v24;

  if ((*(_WORD *)(a1 + 192) & 0x10) == 0)
    return 1;
  v3 = (const void **)(a1 + 64);
  std::to_string(&v24, 1u);
  v4 = *(unsigned __int8 *)(a1 + 87);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 87);
  else
    v5 = *(_QWORD *)(a1 + 72);
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (v5 != size)
  {
LABEL_19:
    std::to_string(&__p, 9u);
    v10 = *(unsigned __int8 *)(a1 + 87);
    if ((v10 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(a1 + 87);
    else
      v11 = *(_QWORD *)(a1 + 72);
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = __p.__r_.__value_.__l.__size_;
    if (v11 != v12)
    {
      v22 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_43;
      goto LABEL_38;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v10 & 0x80) != 0)
    {
      v22 = memcmp(*v3, p_p, *(_QWORD *)(a1 + 72)) == 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 87))
      {
        v22 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_43:
          if ((*((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x80) == 0)
            return v22;
LABEL_40:
          operator delete(v24.__r_.__value_.__l.__data_);
          return v22;
        }
LABEL_38:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_43;
      }
      v15 = v10 - 1;
      do
      {
        v17 = *(unsigned __int8 *)v3;
        v3 = (const void **)((char *)v3 + 1);
        v16 = v17;
        v19 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v18 = v19;
        v21 = v15-- != 0;
        v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    if ((v13 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_38;
  }
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v24;
  else
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v3, v8, *(_QWORD *)(a1 + 72)))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    v9 = v3;
    while (*(unsigned __int8 *)v9 == v8->__r_.__value_.__s.__data_[0])
    {
      v9 = (const void **)((char *)v9 + 1);
      v8 = (std::string *)((char *)v8 + 1);
      if (!--v4)
        goto LABEL_39;
    }
    goto LABEL_19;
  }
LABEL_39:
  v22 = 1;
  if (v7 < 0)
    goto LABEL_40;
  return v22;
}

void sub_1000C806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000C8088(_QWORD *a1)
{
  sub_100031964(a1);
  operator delete();
}

void sub_1000C80AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *a1 = off_1004061E8;
  v2 = a2[1];
  a1[1] = *a2;
  a1[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  operator new();
}

void sub_1000C81B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v13;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  sub_1000E095C(v10);
  _Unwind_Resume(a1);
}

void sub_1000C81E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_1000C820C()
{
  operator delete();
}

void sub_1000C8238(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

id sub_1000C8254()
{
  if (qword_10041A340 != -1)
    dispatch_once(&qword_10041A340, &stru_100404AE0);
  return (id)qword_10041A348;
}

void sub_1000C82A0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  sub_1000AB4B0(a1);
}

void sub_1000C82A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    sub_1000AB668(a1, &v15);
    v5 = v15;
    v15 = 0uLL;
    v6 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 = *(_QWORD *)(a1 + 24);
  }
  v12 = *(_QWORD *)(a1 + 32);
  *a2 = v4;
  a2[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
}

void sub_1000C838C(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  sub_1000AB4B0(a1);
}

uint64_t sub_1000C8394(unsigned int a1)
{
  if (a1 < 5)
    return a1 + 1;
  else
    return 0;
}

uint64_t sub_1000C83A4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = off_1003EF180;
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  v6 = *(double *)(a1 + 8) * 1000000000.0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = (uint64_t)v6;
  sub_1000C7300(a1 + 40, (__int128 *)(a1 + 8));
  v7 = operator new(0x40uLL);
  v7[3] = *(_QWORD *)(a1 + 32);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_1003EF668;
  v7[5] = 0;
  v7[6] = 0;
  v7[4] = 0;
  *((_DWORD *)v7 + 14) = 0;
  *(_QWORD *)(a1 + 4304) = v7 + 3;
  *(_QWORD *)(a1 + 4312) = v7;
  *(_BYTE *)(a1 + 4320) = 0;
  *(_BYTE *)(a1 + 5528) = 0;
  *(_BYTE *)(a1 + 5552) = 0;
  *(_BYTE *)(a1 + 6664) = 0;
  *(_QWORD *)(a1 + 7864) = 850045863;
  *(_OWORD *)(a1 + 7872) = 0u;
  *(_OWORD *)(a1 + 7888) = 0u;
  *(_OWORD *)(a1 + 7904) = 0u;
  *(_OWORD *)(a1 + 7920) = 0u;
  *(_OWORD *)(a1 + 7936) = 0u;
  v8 = a3[1];
  *(_QWORD *)(a1 + 7952) = *a3;
  *(_QWORD *)(a1 + 7960) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

void sub_1000C84B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 4168) = off_1003EEB18;
  *(_QWORD *)(v1 + 4104) = off_1003EEB18;
  *(_QWORD *)(v1 + 4040) = off_1003EEB18;
  *(_QWORD *)(v1 + 3920) = off_1003EEB18;
  *(_QWORD *)(v1 + 3808) = off_1003EEB18;
  *(_QWORD *)(v1 + 3696) = off_1003EEB18;
  *(_QWORD *)(v1 + 3632) = off_1003EEB18;
  *(_QWORD *)(v1 + 3480) = off_1003EEB18;
  *(_QWORD *)(v1 + 3368) = off_1003EEB18;
  *(_QWORD *)(v1 + 3256) = off_1003EEB18;
  *(_QWORD *)(v1 + 3192) = off_1003EEB18;
  *(_QWORD *)(v1 + 3040) = off_1003EEB18;
  *(_QWORD *)(v1 + 2928) = off_1003EEB18;
  *(_QWORD *)(v1 + 2816) = off_1003EEB18;
  *(_QWORD *)(v1 + 2752) = off_1003EEB18;
  *(_QWORD *)(v1 + 2600) = off_1003EEB18;
  *(_QWORD *)(v1 + 2488) = off_1003EEB18;
  *(_QWORD *)(v1 + 2376) = off_1003EEB18;
  *(_QWORD *)(v1 + 2312) = off_1003EEB18;
  if (*(_BYTE *)(v1 + 2272))
    sub_100341F90((_QWORD *)v1);
  if (*(_BYTE *)(v1 + 1176))
    sub_1000ED590((cnframework::TimestampedEvent *)(v1 + 72));
  _Unwind_Resume(exception_object);
}

void sub_1000C8538(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  int64_t v7;

  v4 = (std::mutex *)(a1 + 7864);
  std::mutex::lock((std::mutex *)(a1 + 7864));
  v5 = *(char **)(a1 + 7928);
  v6 = *(char **)(a1 + 7936);
  if (v5 != v6)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        v5 = *(char **)(a1 + 7936);
        break;
      }
    }
  }
  if (v5 != v6)
  {
    v7 = v6 - (v5 + 8);
    if (v6 != v5 + 8)
      memmove(v5, v5 + 8, v6 - (v5 + 8));
    *(_QWORD *)(a1 + 7936) = &v5[v7];
  }
  std::mutex::unlock(v4);
}

double sub_1000C85C8(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  return result;
}

uint64_t sub_1000C85E4()
{
  return sub_1000C90B8();
}

void sub_1000C85FC(uint64_t a1)
{
  sub_10000A2A0(a1);
  operator delete();
}

void sub_1000C8620(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = operator new(0x78uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = off_100400078;
  sub_1000C92A8(v3 + 3, a2);
}

void sub_1000C8678(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double sub_1000C8690(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL sub_1000C869C(uint64_t a1)
{
  return *(double *)(a1 + 8) >= 0.5;
}

void sub_1000C86B4(uint64_t a1)
{
  sub_10006DD40(a1);
  operator delete();
}

uint64_t sub_1000C86DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v6[200];

  if (*(_DWORD *)(a3 + 48) == 4)
    sub_100277CB4(*(_QWORD *)(a1 + 1504), a3);
  sub_1000C89E4(a3, (uint64_t)v6);
  sub_100005224(a1, (uint64_t)v6);
  return sub_10000CF0C((uint64_t)v6);
}

void sub_1000C873C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000CF0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C8754(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)a1 = &off_100405758;
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 143) < 0)
      operator delete(*(void **)(a1 + 120));
    *(_BYTE *)(a1 + 112) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if (!*(_BYTE *)(a1 + 56))
    {
LABEL_7:
      if (!*(_BYTE *)(a1 + 24))
        goto LABEL_8;
LABEL_15:
      if (*(char *)(a1 + 55) < 0)
      {
        operator delete(*(void **)(a1 + 32));
        *(_BYTE *)(a1 + 24) = 0;
        v2 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v2)
          return a1;
      }
      else
      {
        *(_BYTE *)(a1 + 24) = 0;
        v2 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v2)
          return a1;
      }
      goto LABEL_19;
    }
  }
  else if (!*(_BYTE *)(a1 + 56))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    *(_BYTE *)(a1 + 56) = 0;
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    if (*(_BYTE *)(a1 + 24))
      goto LABEL_15;
  }
LABEL_8:
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
LABEL_19:
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1000C8868(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10[2];
  char v11;
  std::string __p;

  if (*(_QWORD *)(a1 + 8))
  {
    sub_1000D5048(v10, "");
    sub_1001E0780("Attempt to set event bus more than once", &__p);
    sub_100174738((uint64_t)v10, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    sub_1000F2AE4((uint64_t)&v9);
  }
  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1000C898C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C89D0(uint64_t result, int a2, int a3, int a4, int a5, float a6, float a7)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = a5;
  *(float *)(result + 16) = a6;
  *(float *)(result + 20) = a7;
  return result;
}

uint64_t sub_1000C89E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string v9;
  _QWORD v10[3];
  char v11;

  v10[1] = 0;
  v10[2] = 0;
  v10[0] = off_1003F9A88;
  v11 = 0;
  sub_1000504A8((uint64_t)v10, *(double *)(a1 + 24));
  sub_1000504A0((uint64_t)v10, *(double *)(a1 + 32));
  *(_QWORD *)a2 = off_1003F9B48;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = off_1003F9A88;
  *(_BYTE *)(a2 + 56) &= 0xFCu;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_QWORD *)(a2 + 176) = off_1003F9B28;
  *(_DWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 188) &= ~1u;
  v4 = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 194) = v4 & 0xFC;
  sub_1000CBBC8(a2, *(double *)(a1 + 72));
  sub_1000C9120(a2, (uint64_t)v10);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_10041AB60 + 16);
  sub_100060878(a2, *(_QWORD *)(v5 + 40));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_10041AB60 + 16);
  sub_100060870(a2, (uint64_t)((*(double *)(v6 + 16) + 978307200.0) * 1000000000.0));
  sub_1000CBB04(a2, *(_DWORD *)(a1 + 116));
  std::to_string(&v9, *(_DWORD *)(a1 + 48));
  sub_1000CBB84(a2, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  sub_1000CBB34(a2, *(double *)(a1 + 120));
  sub_1000CBB20(a2, *(double *)(a1 + 128));
  sub_1000CBAF0(a2, *(double *)(a1 + 136));
  sub_1000CBBF0(a2, *(double *)(a1 + 96));
  sub_1000CBB70(a2, *(double *)(a1 + 104));
  sub_1000CBBDC(a2, *(double *)(a1 + 80));
  sub_1000CBB0C(a2, *(double *)(a1 + 88));
  sub_1000CBBB4(a2, *(double *)(a1 + 56));
  sub_1000CBAD4(a2, *(double *)(a1 + 64));
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1003F9B28;
  LODWORD(v9.__r_.__value_.__r.__words[1]) = 0;
  v9.__r_.__value_.__s.__data_[12] = 0;
  v7 = *(_QWORD *)(a1 + 144);
  if (!v7)
    v7 = *(_QWORD *)(qword_10041AB60 + 144);
  sub_1000CACF0((uint64_t)&v9, *(_DWORD *)(v7 + 16));
  sub_1000CBB48(a2, (uint64_t)&v9);
  nullsub_53(&v9);
  return nullsub_22(v10);
}

void sub_1000C8C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_10000CF0C(v16);
    nullsub_22(&a16);
    _Unwind_Resume(a1);
  }
  sub_10000CF0C(v16);
  nullsub_22(&a16);
  _Unwind_Resume(a1);
}

void sub_1000C8CC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;

  *(_QWORD *)a2 = off_1003F9E78;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = off_1003F9A88;
  *(_BYTE *)(a2 + 56) &= 0xFCu;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = 0;
  *(_WORD *)(a2 + 136) &= 0xF800u;
  sub_100060878(a2, *(_QWORD *)(a1 + 8));
  sub_100060870(a2, *(_QWORD *)(a1 + 16));
  sub_100063BA8(a2, *(_QWORD *)(a1 + 24));
  sub_1000C9120(a2, a1 + 32);
  v4 = *(_WORD *)(a1 + 192);
  if ((v4 & 0x10) != 0)
  {
    sub_100005C3C(a2, (const std::string *)(a1 + 64));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x100) != 0)
  {
    sub_1000C9128(a2, *(double *)(a1 + 112));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x20) != 0)
  {
    sub_1000C910C(a2, *(double *)(a1 + 88));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x40) != 0)
  {
    sub_1000C90BC(a2, *(double *)(a1 + 96));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x800) != 0)
  {
    sub_1000C90F8(a2, *(double *)(a1 + 128));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x1000) != 0)
  {
    sub_1000C90E4(a2, *(double *)(a1 + 136));
    v4 = *(_WORD *)(a1 + 192);
  }
  if ((v4 & 0x2000) != 0)
    sub_1000C90D0(a2, *(double *)(a1 + 144));
}

void sub_1000C8E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100051ED0(v1);
  _Unwind_Resume(a1);
}

void sub_1000C8E48(uint64_t a1)
{
  sub_1000156B0(a1);
  operator delete();
}

void sub_1000C8E70(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "start");

}

void sub_1000C8EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C8EB8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "stop");

}

void sub_1000C8EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C8F00(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  char *i;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *j;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;
  void *__p;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v20 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_100054AE4((uint64_t)v21, a2, (uint64_t)&v20, (uint64_t *)&v17);
  sub_1003153B0(v21, &v25);
  sub_10005C2A4(a1, (uint64_t)&v25);
  v4 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (char *)__p;
  if (__p)
  {
    for (i = v24; i != v7; i -= 88)
    {
      if (*(i - 48))
        *(i - 48) = 0;
    }
    v24 = v7;
    operator delete(v7);
  }
  v9 = v22;
  if (v22)
  {
    v10 = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)v17;
  if (v17)
  {
    for (j = v18; j != v12; j -= 88)
    {
      if (*(j - 48))
        *(j - 48) = 0;
    }
    v18 = v12;
    operator delete(v12);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1000C9084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  char *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  sub_1000FEAD8(v2 - 40);
  sub_100315288((uint64_t *)va2);
  sub_100275288((char **)va);
  sub_1000E095C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C90BC(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  *(_WORD *)(result + 136) |= 0x40u;
  return result;
}

uint64_t sub_1000C90D0(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  *(_WORD *)(result + 136) |= 0x400u;
  return result;
}

uint64_t sub_1000C90E4(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(_WORD *)(result + 136) |= 0x200u;
  return result;
}

uint64_t sub_1000C90F8(uint64_t result, double a2)
{
  *(double *)(result + 112) = a2;
  *(_WORD *)(result + 136) |= 0x100u;
  return result;
}

uint64_t sub_1000C910C(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  *(_WORD *)(result + 136) |= 0x20u;
  return result;
}

double sub_1000C9120(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_100077D9C(a1 + 32, a2).n128_u64[0];
  return result;
}

uint64_t sub_1000C9128(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  *(_WORD *)(result + 136) |= 0x80u;
  return result;
}

void sub_1000C913C()
{
  operator new();
}

uint64_t sub_1000C91B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  *(_BYTE *)(result + 104) |= 1u;
  return result;
}

uint64_t sub_1000C91C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 104);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(std::__shared_weak_count **)(a1 + 88);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    nullsub_22(a1 + 48);
    *(_BYTE *)(a1 + 40) = 0;
  }
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      nullsub_23(v8 + 3);
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

void sub_1000C92A8(_QWORD *a1, uint64_t a2)
{
  sub_10000577C(a1, a2);
}

void sub_1000C9318()
{
  operator delete();
}

void sub_1000C9344(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10004D464(v1);
  _Unwind_Resume(a1);
}

double sub_1000C9358(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)a1 = off_1004063D8;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  return result;
}

_BYTE *sub_1000C93A4(_BYTE *result)
{
  *result = 0;
  result[96] = 0;
  return result;
}

uint64_t sub_1000C93B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    sub_10025ADA0(v5);
    operator delete();
  }
  return a1;
}

uint64_t sub_1000C9438(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  sub_10003F348(a2, a1 + 32);
  sub_1000BFD94(a2, a1 + 72);
  *(_DWORD *)(a1 + 104) = sub_1000C0314(a2);
  *(_QWORD *)(a1 + 112) = sub_10003E684(a2);
  return a1;
}

void sub_1000C9494(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 8))
    sub_100344208(v1, (_BYTE *)(v1 + 8));
  sub_1003441CC((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C94BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  void *v16;
  void *__p[2];
  void *v19;
  void *v20;
  char *v21;

  sub_10007BB30(a2, a3, (uint64_t)&v20);
  sub_10006E388(a2, a3, (uint64_t)__p);
  sub_100069540(a1, a2, (uint64_t *)&v20, (uint64_t)__p);
  v6 = v19;
  if (v19)
  {
    do
    {
      v11 = v6;
      v6 = (_QWORD *)*v6;
      v12 = (std::__shared_weak_count *)v11[3];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      operator delete(v11);
    }
    while (v6);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete(v7);
  v8 = (char *)v20;
  if (v20)
  {
    v9 = v21;
    v10 = v20;
    if (v21 != v20)
    {
      do
      {
        v15 = v9 - 96;
        if (*(v9 - 96))
          sub_10006A864((uint64_t)(v9 - 96));
        if (*(v9 - 128))
        {
          v16 = (void *)*((_QWORD *)v9 - 15);
          if (v16)
          {
            *((_QWORD *)v9 - 14) = v16;
            operator delete(v16);
          }
          *(v9 - 128) = 0;
        }
        v9 -= 128;
      }
      while (v15 - 32 != v8);
      v10 = v20;
    }
    v21 = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_1000C95F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  sub_1000F7AE8((uint64_t)&a9);
  sub_1002681B4(&a14);
  _Unwind_Resume(a1);
}

void sub_1000C9614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1002681B4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C962C(uint64_t result, double a2)
{
  *(double *)(result + 136) = a2;
  *(_BYTE *)(result + 152) |= 0x10u;
  return result;
}

uint64_t sub_1000C9640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  *(_BYTE *)(result + 152) |= 1u;
  return result;
}

uint64_t sub_1000C9654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) = a2;
  *(_BYTE *)(result + 152) |= 2u;
  return result;
}

uint64_t sub_1000C9668(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t sub_1000C9670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  *(_BYTE *)(result + 152) |= 4u;
  return result;
}

double sub_1000C9684(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)a1 = off_1003FFD50;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 128) = a2;
  return result;
}

uint64_t sub_1000C96A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, a3, a1 + 48);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, 0);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 1);
  }
  return result;
}

uint64_t sub_1000C970C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1000C971C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

void sub_1000C972C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1000C97A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  uint64_t v24;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31[2];
  void *v32[2];
  char v33;
  std::string __p;

  v8 = (_BYTE *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40))
  {
    sub_1000D5048(v32, "");
    sub_100219DCC("Universe already initialized.  Localization not stopped?", &__p);
    sub_100174738((uint64_t)v32, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    sub_1000F2AE4((uint64_t)v31);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000D5048(v32, "");
    sub_10023DB80("Localization not stopped?", &__p);
    sub_100174738((uint64_t)v32, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v33 < 0)
      operator delete(v32[0]);
    sub_1000F2AE4((uint64_t)v31);
  }
  if (*v8)
  {
    sub_1002661CC((uint64_t)v8, (uint64_t *)a3);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 56) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_1000B347C(a1 + 64, a3 + 16);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 56);
    v12 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a1 + 112) = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 72);
    *(_BYTE *)(a1 + 40) = 1;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(&__p, a1, a2, a3, a4);
  v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v16 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_21;
  v20 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    v22 = *(_QWORD *)(a1 + 8);
    if (!v22)
      return;
  }
  else
  {
LABEL_21:
    v22 = *(_QWORD *)(a1 + 8);
    if (!v22)
      return;
  }
  v24 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 32);
  if (v24)
    v25 = v24 + 8;
  else
    v25 = 0;
  __p.__r_.__value_.__r.__words[0] = v25;
  __p.__r_.__value_.__l.__size_ = v23;
  if (v23)
  {
    v26 = (unint64_t *)(v23 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  sub_10003A5B4(v22, (std::string::size_type *)&__p);
  v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1000C9AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C9B48(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = off_1003EF898;
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(std::__shared_weak_count **)(a1 + 72);
      if (v6)
        goto LABEL_8;
      return a1;
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v6)
    return a1;
LABEL_8:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

uint64_t sub_1000C9C1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 200))(*(_QWORD *)(a1 + 64));
}

id sub_1000C9C2C()
{
  return +[CLPlatformInfoPrivate supportsWifi2](CLPlatformInfoPrivate, "supportsWifi2");
}

uint64_t sub_1000C9C38()
{
  if (qword_10041A0F8 != -1)
    dispatch_once(&qword_10041A0F8, &stru_1004026F0);
  return byte_10041A0EB;
}

void sub_1000C9C84(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "start");

}

void sub_1000C9CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C9CCC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "stop");

}

void sub_1000C9D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000C9D14(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t ***v13;
  _QWORD *v14;
  double v15;
  double *v16;
  double *v17;
  uint64_t v18;
  const void ***v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  double *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  _OWORD *v31;
  double *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t **v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  double *v45;
  double *v46;
  double *v47;
  void *v48;
  void *__p[2];
  char v50;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    if (v8 >> 61)
      sub_1000D02C0();
    v45 = (double *)operator new(8 * v8);
    v46 = v45;
    v47 = &v45[v8];
  }
  sub_100047D14((uint64_t)a2, v8);
  v44 = a3;
  v9 = *(double *)(a1 + 80);
  v10 = v9 * a4 / (1.0 - a4);
  v11 = v9 + v10;
  v12 = (v9 + v10) / v9;
  v13 = *(uint64_t ****)(a1 + 16);
  if (v13)
  {
    while (1)
    {
      if (sub_1000790EC((const void ***)v13 + 2, (unsigned __int8 ***)&qword_10041AD40))
      {
        v15 = v12 * (0.0 * *(double *)(a1 + 80) / v11);
        v17 = v46;
        v16 = v47;
        if (v46 >= v47)
          goto LABEL_12;
      }
      else
      {
        v19 = sub_1000A9C6C((_QWORD *)a1, v13 + 2);
        if (!v19)
          sub_10018CB98("unordered_map::at: key not found");
        v15 = v12 * (*((double *)v19 + 4) / *(double *)(a1 + 80) * *(double *)(a1 + 80) / v11);
        v17 = v46;
        v16 = v47;
        if (v46 >= v47)
        {
LABEL_12:
          v20 = v45;
          v21 = v17 - v45;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_1000D02C0();
          v23 = (char *)v16 - (char *)v45;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              sub_1000CDEB8();
            v25 = operator new(8 * v24);
            v26 = (double *)&v25[8 * v21];
            *v26 = v15;
            v18 = (uint64_t)(v26 + 1);
            if (v17 == v45)
              goto LABEL_29;
LABEL_23:
            v27 = (char *)(v17 - 1) - (char *)v45;
            if (v27 < 0x58)
              goto LABEL_53;
            if ((unint64_t)((char *)v45 - v25) < 0x20)
              goto LABEL_53;
            v28 = (v27 >> 3) + 1;
            v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            v30 = &v17[v29 / 0xFFFFFFFFFFFFFFF8];
            v26 = (double *)((char *)v26 - v29);
            v31 = &v25[8 * v21 - 16];
            v32 = v17 - 2;
            v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v34 = *(_OWORD *)v32;
              *(v31 - 1) = *((_OWORD *)v32 - 1);
              *v31 = v34;
              v31 -= 2;
              v32 -= 4;
              v33 -= 4;
            }
            while (v33);
            v17 = v30;
            if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_53:
              do
              {
                v35 = *((_QWORD *)v17-- - 1);
                *((_QWORD *)v26-- - 1) = v35;
              }
              while (v17 != v45);
            }
          }
          else
          {
            v25 = 0;
            v26 = (double *)(8 * v21);
            *(double *)(8 * v21) = v15;
            v18 = 8 * v21 + 8;
            if (v17 != v45)
              goto LABEL_23;
          }
LABEL_29:
          v45 = v26;
          v47 = (double *)&v25[8 * v24];
          if (v20)
            operator delete(v20);
          goto LABEL_31;
        }
      }
      *v17 = v15;
      v18 = (uint64_t)(v17 + 1);
LABEL_31:
      v46 = (double *)v18;
      v36 = (_QWORD *)a2[1];
      if ((unint64_t)v36 >= a2[2])
      {
        v14 = sub_1001E3C34((uint64_t)a2, v13 + 2);
        a2[1] = v14;
        v13 = (uint64_t ***)*v13;
        if (!v13)
          goto LABEL_36;
      }
      else
      {
        *v36 = v13[2];
        v37 = v13[3];
        v36[1] = v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 1);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v14 = v36 + 2;
        a2[1] = v36 + 2;
        v13 = (uint64_t ***)*v13;
        if (!v13)
          goto LABEL_36;
      }
    }
  }
  v14 = (_QWORD *)a2[1];
LABEL_36:
  v40 = (char *)v46 - (char *)v45;
  v41 = v46 - v45;
  if (v41 != ((uint64_t)v14 - *a2) >> 4)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v50 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v48);
  }
  *(_QWORD *)v44 = 0;
  *(_QWORD *)(v44 + 8) = 0;
  *(_QWORD *)(v44 + 16) = 0;
  if (v46 != v45)
  {
    if ((v40 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v42 = (char *)operator new(v40);
    *(_QWORD *)v44 = v42;
    v43 = &v42[8 * v41];
    *(_QWORD *)(v44 + 16) = v43;
    memcpy(v42, v45, v40);
    *(_QWORD *)(v44 + 8) = v43;
  }
  *(double *)(v44 + 24) = v10 / v11 * v12;
  if (v45)
    operator delete(v45);
}

void sub_1000CA0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000CA14C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[2] = 0;
  return result;
}

void sub_1000CA158(uint64_t a1, uint64_t **a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[18];
  void *v8[39];
  char v9;
  uint64_t v10[18];
  void *v11[39];
  char v12;
  uint64_t v13[18];
  void *v14[39];
  char v15;
  uint64_t v16[18];
  void *v17[39];
  char v18;
  void *v19[2];
  char v20;

  v20 = 15;
  strcpy((char *)v19, "LocalizerThread");
  sub_1000110E4((uint64_t)v19);
  if (v20 < 0)
  {
    operator delete(v19[0]);
    v4 = *(_DWORD *)(a1 + 8);
    if (v4)
    {
LABEL_3:
      if (v4 == 1)
      {
        v5 = *(_QWORD *)a1;
        if (*a2)
        {
          sub_100222150((uint64_t)v10, *a2);
          sub_100222150((uint64_t)v7, *a2 + 59);
          sub_100221B74(v5, (uint64_t)v10, (uint64_t)v7);
          if (v9 < 0)
            operator delete(v8[37]);
          sub_1000FE64C(v8);
          sub_1000FEB40(v7);
          if (v12 < 0)
            operator delete(v11[37]);
          sub_1000FE64C(v11);
          sub_1000FEB40(v10);
        }
        else
        {
          sub_1002174FC(v5);
        }
      }
      return;
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 8);
    if (v4)
      goto LABEL_3;
  }
  v6 = *(_QWORD *)a1;
  if (*a2)
  {
    sub_100222150((uint64_t)v16, *a2);
    sub_100222150((uint64_t)v13, *a2 + 59);
    sub_100221A38(v6, (uint64_t)v16, (uint64_t)v13);
    if (v15 < 0)
      operator delete(v14[37]);
    sub_1000FE64C(v14);
    sub_1000FEB40(v13);
    if (v18 < 0)
      operator delete(v17[37]);
    sub_1000FE64C(v17);
    sub_1000FEB40(v16);
  }
  else
  {
    sub_1000CA87C(v6);
  }
}

void sub_1000CA320(_Unwind_Exception *a1)
{
  sub_1000FD248((uint64_t)&STACK[0x3B8]);
  sub_1000FD248((uint64_t)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_1000CA350(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CA374(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 160) = a2;
  return result;
}

uint64_t sub_1000CA37C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 360) = a2;
  *(_WORD *)(result + 400) |= 0x8000u;
  return result;
}

std::string *sub_1000CA390(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

std::string *sub_1000CA398(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 8, a2);
}

uint64_t sub_1000CA3A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 352) = a2;
  *(_WORD *)(result + 400) |= 0x4000u;
  return result;
}

std::string *sub_1000CA3B4(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

uint64_t sub_1000CA3BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 368) = a2;
  *(_BYTE *)(result + 402) |= 1u;
  return result;
}

std::string *sub_1000CA3D0(uint64_t a1, uint64_t a2)
{
  std::string *result;

  if (a1 + 288 != a2)
    sub_1000772D4((uint64_t *)(a1 + 296), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
  result = std::string::operator=((std::string *)(a1 + 320), (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 348) = *(_BYTE *)(a2 + 60);
  return result;
}

std::string *sub_1000CA428(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 7, a2);
}

std::string *sub_1000CA430(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

std::string *sub_1000CA438(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

double sub_1000CA440(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 272) = result;
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t sub_1000CA464(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_1000CA46C(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  nullsub_30(a1 + 88);
  v2 = *(void (****)(_QWORD))(a1 + 56);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      v5 = v3 - 7;
      v6 = v3 - 7;
      do
      {
        v7 = *v6;
        v6 -= 7;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_1000CA4E4(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = (uint64_t)(*(double *)(a2 + 24) * 1000000000.0);
  a1->n128_u64[0] = v2;
  v3 = (uint64_t)(*(double *)(a2 + 16) * 1000000000.0);
  a1->n128_u64[1] = v3;
  v4 = (uint64_t)(*(double *)(a2 + 32) * 1000000000.0);
  v5 = v3 + v2 + v4;
  a1[1].n128_u64[0] = v4;
  a1[1].n128_u64[1] = v5;
  result = *(__n128 *)(a2 + 40);
  a1[2] = result;
  a1[3].n128_u64[0] = v5;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = 0;
  a1[5].n128_u32[0] = 0;
  a1[6].n128_u64[0] = 0;
  a1[6].n128_u64[1] = 0;
  a1[5].n128_u64[1] = (unint64_t)off_1003F97D8;
  a1[7].n128_u8[0] &= 0xF8u;
  a1[6].n128_u32[1] = 3;
  return result;
}

void sub_1000CA568(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "start");

}

void sub_1000CA59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CA5B0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  objc_msgSend(WeakRetained, "stop");

}

void sub_1000CA5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CA5F8(uint64_t a1, double a2)
{
  void *v2;
  void *v3[2];
  char v4;
  std::string __p;

  if (a2 <= 0.0)
  {
    sub_1000D5048(v3, "");
    sub_10026C048("Convergence dB EPS is usually a small positive number. You can't set it to something non-positive!", &__p);
    sub_100174738((uint64_t)v3, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v4 < 0)
      operator delete(v3[0]);
    sub_10015C2DC((uint64_t)&v2);
  }
  *(double *)(a1 + 16) = __exp10(a2 / -20.0);
}

void sub_1000CA6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CA724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5[2];
  void *__p[2];
  char v7;

  if (!a2)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v7 < 0)
      operator delete(__p[0]);
    sub_10015AD4C((uint64_t)v5);
  }
  *(_QWORD *)a1 = a2;
  if (!a3)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v7 < 0)
      operator delete(__p[0]);
    sub_10015AD4C((uint64_t)v5);
  }
  *(_QWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 1018212795;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  sub_10000CD1C((dispatch_queue_t *)(a1 + 144), "Event generator finalization");
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  return a1;
}

void sub_1000CA858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000CA87C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;

  v3[0] = off_1003FDE80;
  v4 = v3;
  sub_10003B90C(a1, (uint64_t)v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_1000CA910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CA94C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_100407DA0;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

_QWORD *sub_1000CA998(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  *a1 = off_1003FF7C0;
  a1[1] = 0;
  v10 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v11 = (char *)operator new(0x20uLL);
  a1[1] = v11;
  a1[2] = v11;
  a1[3] = v11 + 32;
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v23 = v13;
  v24[0] = v12;
  v14 = *a4;
  *a4 = 0;
  v15 = *a5;
  *a5 = 0;
  v21 = v15;
  v22 = v14;
  sub_1000CAB14(v10, v24, &v23, &v22, &v21);
  v16 = v21;
  v21 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v23;
  v23 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v24[0];
  v24[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return a1;
}

void sub_1000CAAB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  _QWORD *v13;
  _Unwind_Exception *v16;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  sub_100342B0C(&a10, &a11, &a12, a1, a2, (uint64_t)&a13);
  v16 = a13;
  sub_1001D4FB4(v13);
  _Unwind_Resume(v16);
}

void sub_1000CAB00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001D4FB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAB14(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (uint64_t *)a1[1];
  if ((unint64_t)v9 >= a1[2])
  {
    v11 = sub_1001D5028(a1, a2);
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    *v9 = v10;
    v11 = v9 + 1;
  }
  a1[1] = v11;
  v12 = *a3;
  *a3 = 0;
  v13 = *a4;
  *a4 = 0;
  v19 = v13;
  v20 = v12;
  v14 = *a5;
  *a5 = 0;
  v18 = v14;
  sub_10003FD88(a1, &v20, &v19, &v18);
  v15 = v18;
  v18 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v19;
  v19 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1000CABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_100342A4C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAC24(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  *(_QWORD *)a1 = off_1003F9858;
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 112));
    v2 = *(void ***)(a1 + 88);
    if (!v2)
      goto LABEL_14;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    goto LABEL_6;
LABEL_3:
  v2 = *(void ***)(a1 + 88);
  if (!v2)
    goto LABEL_14;
LABEL_7:
  v3 = *(void ***)(a1 + 96);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = *(void ***)(a1 + 88);
  }
  *(_QWORD *)(a1 + 96) = v2;
  operator delete(v4);
LABEL_14:
  nullsub_22(a1 + 32);
  sub_1000BE3E0(a1 + 8, *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_1000CACF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 12) |= 1u;
  return result;
}

_QWORD *sub_1000CAD04(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;

  *a1 = off_100402780;
  v2 = (_QWORD *)a1[15];
  while (v2)
  {
    v12 = v2;
    v2 = (_QWORD *)*v2;
    v13 = *((_DWORD *)v12 + 20);
    if (v13 != v13 >> 31)
    {
      v14 = v12[11];
      if (v13 < 0)
      {
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      else
      {
        (*(void (**)(_QWORD *))v14)(v12 + 11);
      }
    }
    operator delete(v12);
  }
  v3 = (void *)a1[13];
  a1[13] = 0;
  if (v3)
    operator delete(v3);
  *a1 = off_1003FED90;
  v4 = (void **)(a1 + 7);
  sub_100039810(a1 + 7);
  v5 = (void **)a1[8];
  v6 = (void **)a1[9];
  if (v5 != v6)
  {
    do
    {
      v7 = *v5++;
      operator delete(v7);
    }
    while (v5 != v6);
    v9 = a1[8];
    v8 = a1[9];
    if (v8 != v9)
      a1[9] = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v4)
    operator delete(*v4);
  v10 = (void *)a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_1000CAE10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1000BFD08(a2);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)a1 = off_100402780;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  return a1;
}

uint64_t sub_1000CAE70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = a1[8];
  v9 = sub_1000C23C0(v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a3, v9, a4);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 120))(a1, a2);
}

uint64_t sub_1000CAEE0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

void sub_1000CAEEC(uint64_t a1, uint64_t a2)
{
  sub_100009970(*(_QWORD *)(a1 + 64), a2);
}

void sub_1000CAEF4(uint64_t a1, uint64_t a2)
{
  sub_100008D5C(*(_QWORD *)(a1 + 64), a2);
}

__n128 sub_1000CAF00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1003F9948;
  *(_QWORD *)(a1 + 40) = off_1003F9928;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 53) = 0;
  *(_BYTE *)(a1 + 61) &= 0xC0u;
  *(_BYTE *)(a1 + 64) &= 0xE0u;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

uint64_t sub_1000CAF78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(result + 60) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(result + 61) = *(_BYTE *)(a2 + 21);
  return result;
}

uint64_t sub_1000CAF9C(uint64_t result, float a2)
{
  atomic_store(LODWORD(a2), (unsigned int *)(result + 72));
  return result;
}

uint64_t sub_1000CAFAC(uint64_t a1, _OWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  const char *v7;
  uint64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 225000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 750000000;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v4 = operator new(0xD8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_100407E38;
  *(_QWORD *)(a1 + 96) = sub_1000C93A4((_BYTE *)v4 + 24);
  *(_QWORD *)(a1 + 104) = v4;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 152) = 2;
  *(int64x2_t *)(a1 + 160) = vdupq_n_s64(0x7FF8000000000000uLL);
  v7 = sub_1000C3894();
  v8 = v5;
  *(_BYTE *)(a1 + 176) = sub_1000AC110((uint64_t)&v7, (_BYTE *)&v8 + 1);
  *(_DWORD *)(a1 + 180) = 3;
  *(_OWORD *)(a1 + 184) = *a2;
  return a1;
}

void sub_1000CB09C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1000CB06CLL);
}

void sub_1000CB0B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  if (*(_BYTE *)(v1 + 120))
    *(_BYTE *)(v1 + 120) = 0;
  sub_1000E095C(v3);
  sub_100340E54(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1000CB110(uint64_t a1, uint64_t a2)
{
  sub_100019F0C(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1000CB11C(uint64_t a1, __int128 *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[5];
  int v14;

  *(_QWORD *)a1 = off_1003FC460;
  v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 32) = dispatch_queue_create("com.apple.indoor.privacy.sql.localizer", 0);
  *(_QWORD *)(a1 + 40) = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10000AAA4;
  v13[3] = &unk_1003FC490;
  v13[4] = a1;
  v14 = a4;
  _os_activity_initiate((void *)&_mh_execute_header, "opening db & validating consistency", OS_ACTIVITY_FLAG_DEFAULT, v13);
  return a1;
}

uint64_t sub_1000CB228@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t result;
  unint64_t v10;
  _QWORD *v11;

  if (a2 == 1)
    v6 = 2392070;
  else
    v6 = 3440646;
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1003FD2B0;
  result = sub_1000C6940(&v7[1], a1, v6, 1);
  *a3 = result;
  a3[1] = (uint64_t)v7;
  if (a2)
  {
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v11 = operator new(0x20uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = off_1003FD2B0;
    result = sub_1000C6940(v11 + 3, a1, 294918, 0);
    *a3 = result;
    a3[1] = (uint64_t)v11;
  }
  return result;
}

void sub_1000CB30C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1000CB324(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1000CB33C(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  int v9;

  sub_10000E54C(*(sqlite3 ***)(a1 + 40), a2);
  if (qword_100417F08 == -1)
  {
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      return;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      return;
  }
  v5 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v5 = (_QWORD *)*v5;
  v6 = 136315394;
  v7 = v5;
  v8 = 1024;
  v9 = a2;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "user_version in privacy.db @ %s is now %d", (uint8_t *)&v6, 0x12u);
}

uint64_t sub_1000CB448(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  void **v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  result = wireless_diagnostics::google::protobuf::MessageLite::SerializeToZeroCopyStream(a1);
  if ((result & 1) == 0)
  {
    if (qword_100417ED8 == -1)
    {
      v3 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100405E68);
      v3 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_10;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v4;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "serialized";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to serialize-append properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_100405E68);
      v5 = qword_100417EE0;
      if (!os_signpost_enabled((os_log_t)qword_100417EE0))
        goto LABEL_17;
      goto LABEL_11;
    }
LABEL_10:
    v5 = qword_100417EE0;
    if (!os_signpost_enabled((os_log_t)qword_100417EE0))
      goto LABEL_17;
LABEL_11:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v6;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "serialized";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to serialize-append properly", "{\"msg%{public}.0s\":\"Failed to serialize-append properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_100405E68);
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_23;
      goto LABEL_18;
    }
LABEL_17:
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_23;
LABEL_18:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v8;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "serialized";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed to serialize-append properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
LABEL_23:
    abort_report_np("%s:%d: assertion failure in %s", "../../../common/util/protobuf_util.h", 98, "append");
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CB7E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 480) = a2;
  return result;
}

uint64_t sub_1000CB7E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 472) = a2;
  return result;
}

uint64_t sub_1000CB7F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 520) = a2;
  *(_QWORD *)(result + 752) |= 0x4000000000uLL;
  return result;
}

uint64_t sub_1000CB804(uint64_t result, double a2)
{
  *(double *)(result + 248) = a2;
  *(_QWORD *)(result + 752) |= 0x400000uLL;
  return result;
}

uint64_t sub_1000CB818(uint64_t result, char a2)
{
  *(_BYTE *)(result + 465) = a2;
  return result;
}

uint64_t sub_1000CB820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 300) = a2;
  *(_QWORD *)(result + 752) |= 0x20000000uLL;
  return result;
}

uint64_t sub_1000CB834(uint64_t result, char a2)
{
  *(_BYTE *)(result + 464) = a2;
  return result;
}

uint64_t sub_1000CB83C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 664) = a2;
  *(_QWORD *)(result + 752) |= 0x8000000000000uLL;
  return result;
}

uint64_t sub_1000CB850(uint64_t result, double a2)
{
  *(double *)(result + 512) = a2;
  return result;
}

uint64_t sub_1000CB858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  *(_QWORD *)(result + 752) |= 0x10uLL;
  return result;
}

void sub_1000CB86C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = off_100401780;
  v2 = (std::__shared_weak_count *)a1[16];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *a1 = off_1003F4C00;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    *a1 = off_1003F4C00;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  sub_100048DC0((uint64_t)(a1 + 1));
  operator delete();
}

void sub_1000CB948()
{
  operator new();
}

void sub_1000CB998()
{
  operator delete();
}

uint64_t sub_1000CB9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1000C01D4(a2);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)a1 = off_1003FED38;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_BYTE *)(a1 + 224) = 0;
  return a1;
}

uint64_t sub_1000CBA38(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_100077D9C(a1 + 32, a2 + 32);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  v4 = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a1 + 192) = v4;
  return a1;
}

uint64_t sub_1000CBAD4(uint64_t a1, double a2)
{
  uint64_t result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = a1 + 192;
  *(double *)(result - 24) = a2;
  *(_BYTE *)(result + 2) |= 1u;
  *(_WORD *)result = v3;
  return result;
}

double *sub_1000CBAF0(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 6) = a2;
  *(_WORD *)result = v3 | 0x2000;
  return result;
}

uint64_t sub_1000CBB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  return result;
}

double *sub_1000CBB0C(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 4) = a2;
  *(_WORD *)result = v3 | 0x8000;
  return result;
}

double *sub_1000CBB20(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 7) = a2;
  *(_WORD *)result = v3 | 0x1000;
  return result;
}

double *sub_1000CBB34(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 8) = a2;
  *(_WORD *)result = v3 | 0x800;
  return result;
}

uint64_t sub_1000CBB48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = a1 + 192;
  *(_DWORD *)(result - 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(result - 4) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(result + 2) |= 2u;
  *(_WORD *)result = v3;
  return result;
}

double *sub_1000CBB70(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 5) = a2;
  *(_WORD *)result = v3 | 0x4000;
  return result;
}

std::string *sub_1000CBB84(uint64_t a1, const std::string *a2)
{
  std::string *result;

  result = std::string::operator=((std::string *)(a1 + 64), a2);
  *(_WORD *)(a1 + 192) |= 0x10u;
  return result;
}

double *sub_1000CBBB4(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 13) = a2;
  *(_WORD *)result = v3 | 0x20;
  return result;
}

double *sub_1000CBBC8(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 12) = a2;
  *(_WORD *)result = v3 | 0x40;
  return result;
}

double *sub_1000CBBDC(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 11) = a2;
  *(_WORD *)result = v3 | 0x80;
  return result;
}

double *sub_1000CBBF0(uint64_t a1, double a2)
{
  double *result;
  __int16 v3;

  v3 = *(_WORD *)(a1 + 192);
  result = (double *)(a1 + 192);
  *(result - 10) = a2;
  *(_WORD *)result = v3 | 0x100;
  return result;
}

uint64_t sub_1000CBC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  v4 = a1 + 8;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(v7, "");
    sub_10015D524("Unexpected request to record legacy data for ", &v9);
    sub_1000F8A40(v4, &v10);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_10005F09C(a1);
  sub_10002F4E4(a2, (_DWORD *)(a1 + 80));
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_1000CBD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CBDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  v4 = a1 + 8;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(v7, "");
    sub_10015D524("Unexpected request to record legacy data for ", &v9);
    sub_1000F8A40(v4, &v10);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_10005F09C(a1);
  sub_10001AA8C(a2, (_DWORD *)(a1 + 80));
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_1000CBF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CBFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  v4 = a1 + 8;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(v7, "");
    sub_10015D524("Unexpected request to record legacy data for ", &v9);
    sub_1000F8A40(v4, &v10);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_10005F09C(a1);
  sub_10005D8B4(a2, (_DWORD *)(a1 + 80));
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_1000CC0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000CC1B0(_QWORD *a1)
{
  *a1 = objc_alloc_init((Class)NSMutableArray);
  return a1;
}

NSString *sub_1000CC1E4(uint64_t *a1)
{
  uint64_t *v1;

  v1 = a1;
  if (*((char *)a1 + 23) < 0)
    v1 = (uint64_t *)*a1;
  return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1);
}

void sub_1000CC2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WifiSensor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000CC890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CCACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F7AE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000CCAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _QWORD *v26;

  if (a15)
  {
    sub_100073074(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CCC2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1000CCC00);
}

void sub_1000CCEF4()
{
  void *v0;
  _BYTE v1[8];
  uint64_t (**v2)();

  v0 = objc_autoreleasePoolPush();
  v2 = off_1003EDC30;
  sub_10030BE48(v1, CFSTR("com.apple.locationd"), CFSTR("mobile"), CFSTR("pipelined_"), 0);
  sub_1000CCF98();
}

void sub_1000CCF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000CD040((id *)va);
  _Unwind_Resume(a1);
}

void sub_1000CCF98()
{
  operator new();
}

void sub_1000CCFF4()
{
  operator delete();
}

void sub_1000CD02C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

id *sub_1000CD040(id *a1)
{
  sub_10030B788((uint64_t)(a1 + 4));

  return a1;
}

uint64_t start()
{
  id v0;
  id v1;
  CLIndoorMaintenanceDelegate *v2;
  CLIndoorBackgroundTasks *v3;
  NSObject *v4;
  CLIndoorServiceDelegate *v5;
  __int16 v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  int v12;
  id v13;

  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003EDCD0);
  v4 = (id)qword_100417F00;
  v5 = (CLIndoorServiceDelegate *)&OBJC_METACLASS___CLPrefetchFloorRequest;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v0 = (id)objc_claimAutoreleasedReturnValue(+[CLIndoorServiceDelegate versionString](CLIndoorServiceDelegate, "versionString"));
    v12 = 138543362;
    v13 = v0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting pipelined %{public}@", (uint8_t *)&v12, 0xCu);

  }
  sub_10018D110();
  sub_1000304B4();
  if ((v6 & 0xFF00) != 0)
  {
    sub_100341898();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_100417EF8, &stru_1003EDCD0);
    v10 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    goto LABEL_8;
  }
  v4 = objc_msgSend(objc_alloc((Class)NSURLCache), "initWithMemoryCapacity:diskCapacity:diskPath:", 0, 0, 0);
  +[NSURLCache setSharedURLCache:](NSURLCache, "setSharedURLCache:", v4);
  v0 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.pipelined"));
  v1 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.pipelined.maintenance"));
  xpc_set_event_stream_handler(kNSURLSessionLaunchOnDemandNotificationName, (dispatch_queue_t)&_dispatch_main_q, &stru_1003EDC00);
  v7 = objc_autoreleasePoolPush();
  v5 = objc_alloc_init(CLIndoorServiceDelegate);
  objc_msgSend(v0, "setDelegate:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[CLIndoorServiceDelegate q](v5, "q"));
  objc_msgSend(v0, "_setQueue:", v8);

  v2 = -[CLIndoorMaintenanceDelegate initWithService:]([CLIndoorMaintenanceDelegate alloc], "initWithService:", v5);
  objc_msgSend(v1, "setDelegate:", v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(-[CLIndoorMaintenanceDelegate q](v2, "q"));
  objc_msgSend(v1, "_setQueue:", v9);

  v3 = -[CLIndoorBackgroundTasks initWithService:]([CLIndoorBackgroundTasks alloc], "initWithService:", v5);
  objc_msgSend(v0, "resume");
  objc_msgSend(v1, "resume");
  objc_autoreleasePoolPop(v7);
  CFRunLoopRun();
  if (qword_100417EF8 != -1)
    goto LABEL_11;
  v10 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
  {
LABEL_8:
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Shutting down pipelined", (uint8_t *)&v12, 2u);
  }
LABEL_9:

  return 0;
}

void sub_1000CD40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CD41C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id sub_1000CD480()
{
  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_1003EDCD0);
  return (id)qword_100417F00;
}

void sub_1000CD4CC(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  const char *string;
  void *v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  uint64_t v9;
  uint64_t v11;
  int v13;
  const char *v14;

  v2 = a2;
  string = xpc_dictionary_get_string(v2, kNSURLSessionLaunchOnDemandSessionIdentifierKey);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
  if (objc_msgSend(v4, "hasPrefix:", CFSTR("com.apple.pipelined.TilePrefetch")))
  {
    if (qword_100417EF8 == -1)
    {
      v9 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        goto LABEL_11;
    }
    else
    {
      dispatch_once(&qword_100417EF8, &stru_1003EDCD0);
      v9 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        goto LABEL_11;
    }
    LOWORD(v13) = 0;
    v5 = "Resuming tile prefetch downloads";
    v6 = v9;
    v7 = OS_LOG_TYPE_INFO;
    v8 = 2;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v13, v8);
    goto LABEL_11;
  }
  if (qword_100417EF8 == -1)
  {
    v11 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    goto LABEL_9;
  }
  dispatch_once(&qword_100417EF8, &stru_1003EDCD0);
  v11 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_ERROR))
  {
LABEL_9:
    v13 = 136380675;
    v14 = string;
    v5 = "NSURL session launched us, but with a weird identifier: %{private}s";
    v6 = v11;
    v7 = OS_LOG_TYPE_ERROR;
    v8 = 12;
    goto LABEL_10;
  }
LABEL_11:

}

void sub_1000CD66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CD680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CD690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000CD6A4@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t (**v7)();
  uint64_t v8;
  __int128 v9;
  int v10;
  std::bad_alloc v11[2];
  uint64_t (**v12)();
  uint64_t v13;
  __int128 v14;
  int v15;
  std::bad_alloc v16;

  v13 = 0;
  v14 = 0uLL;
  v15 = -1;
  std::bad_alloc::bad_alloc(&v16);
  v12 = off_1003EDD00;
  v16.__vftable = (std::bad_alloc_vtbl *)off_1003EDD20;
  v8 = 0;
  v9 = 0uLL;
  v10 = -1;
  v7 = off_1003EDDB8;
  v11[0].__vftable = (std::bad_alloc_vtbl *)off_1003EDDE8;
  v11[1].__vftable = (std::bad_alloc_vtbl *)&off_1003EDE28;
  sub_1000CE34C((uint64_t)&v7, (uint64_t)&v12);
  *(_QWORD *)&v9 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_de"
                   "tail::bad_alloc_]";
  *((_QWORD *)&v9 + 1) = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/exception/detail/exception_ptr.hpp";
  v10 = 174;
  v2 = atomic_load((unsigned __int8 *)&qword_100417F70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_100417F70))
    operator new();
  v3 = *(_QWORD *)algn_100417F68;
  *a1 = qword_100417F60;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::bad_alloc::~bad_alloc(v11);
  v7 = (uint64_t (**)())&off_1003EDD90;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  std::bad_alloc::~bad_alloc(&v16);
  v12 = (uint64_t (**)())&off_1003EDD90;
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  return result;
}

void sub_1000CD8E4()
{
  operator delete();
}

void sub_1000CD934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1000CE1D4((std::bad_alloc *)va);
  _Unwind_Resume(a1);
}

void sub_1000CD948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::bad_alloc v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::bad_alloc_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1000CE484((std::bad_alloc *)va);
  sub_1000CE1D4((std::bad_alloc *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CD964(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t sub_1000CD9E0@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;
  uint64_t (**v7)();
  uint64_t v8;
  __int128 v9;
  int v10;
  std::bad_exception v11[2];
  uint64_t (**v12)();
  uint64_t v13;
  __int128 v14;
  int v15;
  std::bad_exception v16;

  v14 = 0uLL;
  v15 = -1;
  v12 = off_1003EDF40;
  v13 = 0;
  v16.__vftable = (std::bad_exception_vtbl *)off_1003EDF60;
  v9 = 0uLL;
  v10 = -1;
  v7 = off_1003EDFC8;
  v8 = 0;
  v11[0].__vftable = (std::bad_exception_vtbl *)off_1003EDFF8;
  v11[1].__vftable = (std::bad_exception_vtbl *)&off_1003EE038;
  sub_1000CE34C((uint64_t)&v7, (uint64_t)&v12);
  *(_QWORD *)&v9 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception_de"
                   "tail::bad_exception_]";
  *((_QWORD *)&v9 + 1) = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/exception/detail/exception_ptr.hpp";
  v10 = 174;
  v2 = atomic_load((unsigned __int8 *)&qword_100417F88);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_100417F88))
    operator new();
  v3 = unk_100417F80;
  *a1 = qword_100417F78;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::bad_exception::~bad_exception(v11);
  v7 = (uint64_t (**)())&off_1003EDD90;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  std::bad_exception::~bad_exception(&v16);
  v12 = (uint64_t (**)())&off_1003EDD90;
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  return result;
}

void sub_1000CDBF0()
{
  operator delete();
}

void sub_1000CDC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::bad_exception v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5.__vftable = va_arg(va1, std::bad_exception_vtbl *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1000CEDA4((std::bad_exception *)va);
  sub_1000CEC2C((std::bad_exception *)va1);
  _Unwind_Resume(a1);
}

void sub_1000CDC5C()
{
  operator delete();
}

void sub_1000CDC70()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "cannot override values in this kind of configuration");
}

void sub_1000CDCAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDCC0()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "cannot override values in this kind of configuration");
}

void sub_1000CDCFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDD10()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "cannot override values in this kind of configuration");
}

void sub_1000CDD4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000CDD68(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1000CDD78(std::string *a1, char *a2, std::locale *this, char *a4)
{
  char *v6;
  char v8;
  const std::locale::facet *v9;
  std::string::value_type v10;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    v6 = a2;
    do
    {
      v8 = *v6;
      v9 = std::locale::use_facet(this, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].__on_zero_shared)(v9, v8);
      std::string::push_back(a1, v10);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_1000CDE00(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1000CDE1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000CDE30()
{
  sub_1000CDE44("basic_string");
}

void sub_1000CDE44(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1000CDE94(exception, a1);
}

void sub_1000CDE80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1000CDE94(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1000CDEB8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_1000CDEE0(std::string *a1, char *a2, std::locale *this, char *a4)
{
  char *v6;
  char v8;
  const std::locale::facet *v9;
  std::string::value_type v10;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    v6 = a2;
    do
    {
      v8 = *v6;
      v9 = std::locale::use_facet(this, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v9->__vftable[1].~facet)(v9, v8);
      std::string::push_back(a1, v10);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_1000CDF68(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1000CDF84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000CDF98(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Daemon");
  v2 = (void *)qword_100417F00;
  qword_100417F00 = (uint64_t)v1;

}

uint64_t sub_1000CDFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &off_1003EDEA0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1003EDD90;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = off_1003EDDB8;
  *(_QWORD *)(a1 + 40) = off_1003EDDE8;
  *(_QWORD *)(a1 + 48) = &off_1003EDE28;
  return a1;
}

void sub_1000CE048(_QWORD *a1, _QWORD *a2)
{
  char *v2;

  if (a2)
    v2 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  else
    v2 = 0;
  *a1 = v2;
  a1[1] = 0;
  sub_1000CE970();
}

void sub_1000CE098(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *v1;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000CE100(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

std::bad_alloc *sub_1000CE17C(std::bad_alloc *a1)
{
  std::bad_alloc_vtbl *v2;

  std::bad_alloc::~bad_alloc(a1 + 5);
  a1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

std::bad_alloc *sub_1000CE1D4(std::bad_alloc *a1)
{
  std::bad_alloc_vtbl *v2;

  std::bad_alloc::~bad_alloc(a1 + 5);
  a1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

void sub_1000CE22C(std::bad_alloc *a1)
{
  std::bad_alloc_vtbl *v2;

  std::bad_alloc::~bad_alloc(a1 + 5);
  a1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
      a1[1].__vftable = 0;
  }
  operator delete();
}

uint64_t sub_1000CE294(std::bad_alloc *a1)
{
  uint64_t v2;
  uint64_t result;

  std::bad_alloc::~bad_alloc(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  result = *(_QWORD *)(v2 - 32);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      a1[-4].__vftable = 0;
  }
  return result;
}

void sub_1000CE2E4(std::bad_alloc *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::bad_alloc::~bad_alloc(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  v3 = *(_QWORD *)(v2 - 32);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
      a1[-4].__vftable = 0;
  }
  operator delete();
}

uint64_t sub_1000CE34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1000CE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

std::bad_alloc *sub_1000CE484(std::bad_alloc *a1)
{
  std::bad_alloc_vtbl *v2;

  std::bad_alloc::~bad_alloc(a1 + 5);
  a1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

void sub_1000CE4DC(std::bad_alloc *a1)
{
  std::bad_alloc_vtbl *v2;

  std::bad_alloc::~bad_alloc(a1 + 5);
  a1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
      a1[1].__vftable = 0;
  }
  operator delete();
}

void sub_1000CE544()
{
  operator new();
}

void sub_1000CE5F0()
{
  operator delete();
}

void sub_1000CE624(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_1000CDFC8((uint64_t)exception, a1);
}

void sub_1000CE660(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE674(std::bad_alloc *a1)
{
  uint64_t v2;
  uint64_t result;

  std::bad_alloc::~bad_alloc(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  result = *(_QWORD *)(v2 - 32);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      a1[-4].__vftable = 0;
  }
  return result;
}

void sub_1000CE6C4(std::bad_alloc *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::bad_alloc::~bad_alloc(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  v3 = *(_QWORD *)(v2 - 32);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
      a1[-4].__vftable = 0;
  }
  operator delete();
}

void sub_1000CE72C()
{
  operator new();
}

void sub_1000CE7F0()
{
  operator delete();
}

void sub_1000CE84C(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x38uLL);
  sub_1000CDFC8((uint64_t)exception, v1);
}

void sub_1000CE890(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CE8A4(_QWORD *a1)
{
  std::bad_alloc *v1;
  uint64_t result;

  v1 = (std::bad_alloc *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  std::bad_alloc::~bad_alloc(v1 + 5);
  v1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  result = (uint64_t)v1[1].__vftable;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      v1[1].__vftable = 0;
  }
  return result;
}

void sub_1000CE900(_QWORD *a1)
{
  std::bad_alloc *v1;
  std::bad_alloc_vtbl *v2;

  v1 = (std::bad_alloc *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  std::bad_alloc::~bad_alloc(v1 + 5);
  v1->__vftable = (std::bad_alloc_vtbl *)&off_1003EDD90;
  v2 = v1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_alloc_vtbl *))v2->~bad_alloc + 4))(v2))
      v1[1].__vftable = 0;
  }
  operator delete();
}

void sub_1000CE970()
{
  operator new();
}

void sub_1000CEA20(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_1000CEA40(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000CEA58()
{
  operator delete();
}

uint64_t sub_1000CEA6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1000CEA84()
{
  return 0;
}

uint64_t sub_1000CEA8C()
{
  return 0;
}

uint64_t sub_1000CEA94()
{
  return 0;
}

uint64_t sub_1000CEA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &off_1003EDEA0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &off_1003EDD90;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = off_1003EDFC8;
  *(_QWORD *)(a1 + 40) = off_1003EDFF8;
  *(_QWORD *)(a1 + 48) = &off_1003EE038;
  return a1;
}

void sub_1000CEB1C(_QWORD *a1, _QWORD *a2)
{
  char *v2;

  if (a2)
    v2 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  else
    v2 = 0;
  *a1 = v2;
  a1[1] = 0;
  sub_1000CF290();
}

void sub_1000CEB6C(_Unwind_Exception *exception_object)
{
  unsigned int **v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *v1;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

std::bad_exception *sub_1000CEBD4(std::bad_exception *a1)
{
  std::bad_exception_vtbl *v2;

  std::bad_exception::~bad_exception(a1 + 5);
  a1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

std::bad_exception *sub_1000CEC2C(std::bad_exception *a1)
{
  std::bad_exception_vtbl *v2;

  std::bad_exception::~bad_exception(a1 + 5);
  a1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

void sub_1000CEC84(std::bad_exception *a1)
{
  std::bad_exception_vtbl *v2;

  std::bad_exception::~bad_exception(a1 + 5);
  a1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
      a1[1].__vftable = 0;
  }
  operator delete();
}

uint64_t sub_1000CECEC(std::bad_exception *a1)
{
  uint64_t v2;
  uint64_t result;

  std::bad_exception::~bad_exception(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  result = *(_QWORD *)(v2 - 32);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      a1[-4].__vftable = 0;
  }
  return result;
}

void sub_1000CED3C(std::bad_exception *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::bad_exception::~bad_exception(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  v3 = *(_QWORD *)(v2 - 32);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
      a1[-4].__vftable = 0;
  }
  operator delete();
}

std::bad_exception *sub_1000CEDA4(std::bad_exception *a1)
{
  std::bad_exception_vtbl *v2;

  std::bad_exception::~bad_exception(a1 + 5);
  a1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
    a1[1].__vftable = 0;
  return a1;
}

void sub_1000CEDFC(std::bad_exception *a1)
{
  std::bad_exception_vtbl *v2;

  std::bad_exception::~bad_exception(a1 + 5);
  a1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
      a1[1].__vftable = 0;
  }
  operator delete();
}

void sub_1000CEE64()
{
  operator new();
}

void sub_1000CEF10()
{
  operator delete();
}

void sub_1000CEF44(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_1000CEA9C((uint64_t)exception, a1);
}

void sub_1000CEF80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CEF94(std::bad_exception *a1)
{
  uint64_t v2;
  uint64_t result;

  std::bad_exception::~bad_exception(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  result = *(_QWORD *)(v2 - 32);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      a1[-4].__vftable = 0;
  }
  return result;
}

void sub_1000CEFE4(std::bad_exception *a1)
{
  uint64_t v2;
  uint64_t v3;

  std::bad_exception::~bad_exception(a1);
  *(_QWORD *)(v2 - 40) = &off_1003EDD90;
  v3 = *(_QWORD *)(v2 - 32);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
      a1[-4].__vftable = 0;
  }
  operator delete();
}

void sub_1000CF04C()
{
  operator new();
}

void sub_1000CF110()
{
  operator delete();
}

void sub_1000CF16C(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x38uLL);
  sub_1000CEA9C((uint64_t)exception, v1);
}

void sub_1000CF1B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF1C4(_QWORD *a1)
{
  std::bad_exception *v1;
  uint64_t result;

  v1 = (std::bad_exception *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  std::bad_exception::~bad_exception(v1 + 5);
  v1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  result = (uint64_t)v1[1].__vftable;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      v1[1].__vftable = 0;
  }
  return result;
}

void sub_1000CF220(_QWORD *a1)
{
  std::bad_exception *v1;
  std::bad_exception_vtbl *v2;

  v1 = (std::bad_exception *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  std::bad_exception::~bad_exception(v1 + 5);
  v1->__vftable = (std::bad_exception_vtbl *)&off_1003EDD90;
  v2 = v1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_exception_vtbl *))v2->~bad_exception + 4))(v2))
      v1[1].__vftable = 0;
  }
  operator delete();
}

void sub_1000CF290()
{
  operator new();
}

void sub_1000CF340(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_1000CF360(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000CF378()
{
  operator delete();
}

uint64_t sub_1000CF38C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1000CF3A4()
{
  return 0;
}

uint64_t sub_1000CF3AC()
{
  return 0;
}

uint64_t sub_1000CF3B4()
{
  return 0;
}

uint64_t sub_1000CF3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)a1 = off_1003EE100;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = off_1003EDC30;
  *(_QWORD *)(a1 + 72) = off_100405DB0;
  v4 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a1 + 96) = v5;
  sub_10030B8AC(a1 + 104, a3 + 32);
  return a1;
}

void sub_1000CF43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000CF470((_QWORD *)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000CF470(_QWORD *a1)
{
  void **v2;
  void *v3;
  void **v5;

  *a1 = off_1003EE180;
  v2 = (void **)a1[3];
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_1000B3D5C((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_1000CF4F0(uint64_t a1)
{
  sub_1000CF9D0(a1);
  operator delete();
}

void sub_1000CF514(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  std::locale v13;
  char *__dst;
  size_t v15;
  int64_t v16;
  std::string __p;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v15 = v7;
    v16 = v10 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  p_dst = (void **)&__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  std::locale::locale(&v13);
  if (v16 >= 0)
    v11 = (char *)&__dst;
  else
    v11 = __dst;
  v12 = HIBYTE(v16);
  if (v16 < 0)
    v12 = v15;
  sub_1000CDD78(&__p, v11, &v13, &v11[v12]);
  sub_1000D0938(a1 + 8, (uint64_t)&__p, (uint64_t)&__p, a3);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::locale::~locale(&v13);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(__dst);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  std::locale::~locale(&v13);
  if (SHIBYTE(v16) < 0)
    goto LABEL_18;
}

void sub_1000CF668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a10);
    if ((a16 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::locale::~locale(&a10);
    if ((a16 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_1000CF6CC(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;

  if (a1[4])
  {
    v2 = (void **)a1[3];
    if (v2)
    {
      do
      {
        v5 = (void **)*v2;
        sub_1000B3D5C((uint64_t)(v2 + 5));
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[3] = 0;
    v3 = a1[2];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(a1[1] + 8 * i) = 0;
    }
    a1[4] = 0;
  }
}

void sub_1000CF758(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  _QWORD *v11;
  uint64_t *v12;
  void **v13;
  std::locale v14;
  char *__dst;
  size_t v16;
  int64_t v17;
  std::string v18;
  void *__p;
  char v20;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v16 = v5;
    v17 = v8 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v17) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  std::locale::locale(&v14);
  if (v17 >= 0)
    v9 = (char *)&__dst;
  else
    v9 = __dst;
  v10 = HIBYTE(v17);
  if (v17 < 0)
    v10 = v16;
  sub_1000CDD78(&v18, v9, &v14, &v9[v10]);
  v11 = (_QWORD *)(a1 + 8);
  v12 = sub_1000D0DB8(v11, (uint64_t)&v18);
  if (v12)
  {
    sub_10002BB38(v11, v12, (uint64_t)&__p);
    v13 = (void **)__p;
    __p = 0;
    if (v13)
    {
      if (v20)
      {
        sub_1000B3D5C((uint64_t)(v13 + 5));
        if (*((char *)v13 + 39) < 0)
          operator delete(v13[2]);
      }
      operator delete(v13);
    }
  }
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::locale::~locale(&v14);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(__dst);
    return;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  std::locale::~locale(&v14);
  if (SHIBYTE(v17) < 0)
    goto LABEL_24;
}

void sub_1000CF8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    std::locale::~locale((std::locale *)&a9);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::locale::~locale((std::locale *)&a9);
    if ((a15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1000CF950(uint64_t a1, void *a2, void *a3)
{
  sub_10030BE80(a1 + 72, a2, a3);
}

void sub_1000CF958(uint64_t a1, void *a2)
{
  sub_10030BE88(a1 + 72, a2);
}

uint64_t sub_1000CF960(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_1000B3D5C((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1000CF9D0(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = off_1003EE100;
  sub_10030B788(a1 + 104);

  *(_QWORD *)a1 = off_1003EE180;
  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      sub_1000B3D5C((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

unint64_t sub_1000CFA7C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void sub_1000CFEC8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

int *sub_1000CFF08()
{
  int *v0;
  int *v1;
  _DWORD *v2;
  _DWORD *v3;

  *v2 = *v3;
  *v0 = *v1 ^ (*v1 >> 31);
  return v0;
}

void sub_1000D0028(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

int *sub_1000D006C()
{
  int *v0;
  int *v1;
  _DWORD *v2;
  _DWORD *v3;

  *v2 = *v3;
  *v0 = *v1 ^ (*v1 >> 31);
  return v0;
}

void sub_1000D012C()
{
  operator delete();
}

_QWORD *sub_1000D0150(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      sub_1000D02C0();
    result = operator new(32 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = (_QWORD *)sub_1000D0028(&v8[v9 / 8], a2 + v9);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1000D01F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1000D023C(&a9);
  _Unwind_Resume(a1);
}

void sub_1000D020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 32)
    sub_1000B3D5C(v10 - 32 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_1000D023C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1000D023C(void ***result)
{
  void ***v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 32;
          sub_1000B3D5C(v4);
        }
        while ((void *)v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1000D02C0()
{
  sub_1000CDE44("vector");
}

void sub_1000D02D4()
{
  operator new();
}

void sub_1000D0418()
{
  uint64_t v0;

  sub_1000CF960(v0);
  operator delete();
}

uint64_t *sub_1000D0444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1000CFA7C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x48uLL);
  v26 = v25;
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)v25 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v25 + 1) = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  sub_1000D0028(v26 + 5, a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1000D0894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000D08E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000D08A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000D08E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000D08BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_1000D08E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D08E4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_1000B3D5C(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_1000D0938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  float v28;
  float v29;
  _QWORD *v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = sub_1000CFA7C((uint64_t)v43, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v16[1];
            if (v23 == v12)
            {
              v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v16 + 39);
              else
                v25 = v16[3];
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26)
                      return v16;
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v27 = operator new(0x48uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  v44 = 0;
  *v27 = 0;
  v27[1] = v12;
  *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
  v27[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1000D0028((uint64_t)(v27 + 5), a4);
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (!v13 || (float)(v29 * (float)v13) < v28)
  {
    v32 = 1;
    if (v13 >= 3)
      v32 = (v13 & (v13 - 1)) != 0;
    v33 = v32 | (2 * v13);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_65:
        sub_100005DD8(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v31 = (_QWORD *)v43[0];
        if (v30)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v40 & v12;
      v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v12));
      v31 = (_QWORD *)v43[0];
      if (v30)
        goto LABEL_54;
    }
LABEL_78:
    *v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13)
          v41 %= v13;
      }
      else
      {
        v41 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v31 = (_QWORD *)v43[0];
  if (!v30)
    goto LABEL_78;
LABEL_54:
  *v31 = *v30;
  *v30 = v43[0];
LABEL_89:
  v16 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_1000D0D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000D08E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000D0D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  sub_1000D08E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000D0DB8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1000CFA7C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1000D1010()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000D106C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000D10C8()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_1000D10DC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  void *v9;
  const __CFDictionary *v10;
  __CFUserNotification *v11;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  NSObject *v14;
  NSObject *v15;
  SInt32 error;
  uint8_t buf[4];
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[4];

  error = 0;
  v19[0] = kCFUserNotificationAlertHeaderKey;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v20[0] = v8;
  v19[1] = kCFUserNotificationAlertMessageKey;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
  v20[1] = v9;
  v20[2] = CFSTR("Collect");
  v19[2] = kCFUserNotificationDefaultButtonTitleKey;
  v19[3] = kCFUserNotificationAlternateButtonTitleKey;
  v20[3] = CFSTR("Dismiss");
  v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));

  v11 = CFUserNotificationCreate(kCFAllocatorDefault, (double)a4 / 1000000000.0, a1, &error, v10);
  RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v11, (CFUserNotificationCallBack)sub_1000D13E4, 0);
  if (!RunLoopSource)
  {
    if (qword_100417F18 == -1)
    {
      v15 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&qword_100417F18, &stru_1003EE340);
      v15 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
      {
LABEL_8:
        if (v11)
          CFRelease(v11);
        goto LABEL_10;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unable to create the notifcation run loop source", buf, 2u);
    goto LABEL_8;
  }
  Main = CFRunLoopGetMain();
  CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
  if (qword_100417F18 != -1)
  {
    dispatch_once(&qword_100417F18, &stru_1003EE340);
    v14 = qword_100417F20;
    if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_DEBUG))
      goto LABEL_10;
    goto LABEL_4;
  }
  v14 = qword_100417F20;
  if (os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    *(_DWORD *)buf = 136315138;
    v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "UI prompt %s displayed", buf, 0xCu);
  }
LABEL_10:

}

void sub_1000D1390(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_1000CDD68(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1000D13E4(const void *a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE buf[12];

  if (qword_100417F18 != -1)
    dispatch_once(&qword_100417F18, &stru_1003EE340);
  v4 = (id)qword_100417F20;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Entered UI prompt handler", buf, 2u);
  }

  v5 = a2 & 3;
  if (v5 == 3)
  {
    if (qword_100417F18 == -1)
    {
      v12 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_INFO))
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&qword_100417F18, &stru_1003EE340);
      v12 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_INFO))
        goto LABEL_23;
    }
    *(_WORD *)buf = 0;
    v8 = "Notification timed-out";
    v9 = v12;
    v10 = OS_LOG_TYPE_INFO;
    v11 = 2;
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, buf, v11);
    goto LABEL_23;
  }
  if (v5 == 1)
  {
    if (qword_100417F18 == -1)
    {
      v7 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_DEBUG))
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&qword_100417F18, &stru_1003EE340);
      v7 = qword_100417F20;
      if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_DEBUG))
        goto LABEL_23;
    }
    *(_WORD *)buf = 0;
    v8 = "Notification dismissed";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 2;
    goto LABEL_22;
  }
  if ((a2 & 3) == 0)
  {
    if (qword_100417F18 != -1)
      dispatch_once(&qword_100417F18, &stru_1003EE340);
    v6 = (id)qword_100417F20;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Collecting logs", buf, 2u);
    }

    *(std::chrono::system_clock::time_point *)buf = std::chrono::system_clock::now();
    sub_10002171C((const std::chrono::system_clock::time_point *)buf);
  }
  if (qword_100417F18 == -1)
  {
    v13 = qword_100417F20;
    if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
    goto LABEL_21;
  }
  dispatch_once(&qword_100417F18, &stru_1003EE340);
  v13 = qword_100417F20;
  if (os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
  {
LABEL_21:
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v5;
    v8 = "Notification dismissed with unknown button identifier: %lu";
    v9 = v13;
    v10 = OS_LOG_TYPE_ERROR;
    v11 = 12;
    goto LABEL_22;
  }
LABEL_23:
  if (a1)
    CFRelease(a1);
}

void sub_1000D278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object, uint64_t a12, void *a13, const void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51)
{
  void *v51;

  if (a31 < 0)
    operator delete(__p);

  sub_1000D2ECC(&a33);
  if (a44 < 0)
    operator delete(a39);
  operator delete(a13);
  if (a50 < 0)
    operator delete(a45);
  sub_1000D2A98(&a14);
  _Unwind_Resume(a1);
}

const void **sub_1000D2A98(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1000D2ACC()
{
  _QWORD v0[6];

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x3812000000;
  v0[3] = sub_1000BCCC0;
  v0[4] = sub_1000BCC94;
  v0[5] = &unk_1003C7327;
  operator new();
}

void sub_1000D2DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t *v52;
  uint64_t v53;

  _Block_object_dispose(&a29, 8);
  if (a40 < 0)
  {
    operator delete(a35);
    _Block_object_dispose(&a41, 8);
    if ((a52 & 0x80000000) == 0)
    {
LABEL_4:
      _Block_object_dispose((const void *)(v53 - 136), 8);
      sub_1000D3C40(v52);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    _Block_object_dispose(&a41, 8);
    if ((a52 & 0x80000000) == 0)
      goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

void **sub_1000D2ECC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (unint64_t *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
        {
          v7 = v5 + 1;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
            (*(void (**)(unint64_t *))(*v5 + 16))(v5);
        }
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const char *sub_1000D2F54()
{
  return "system";
}

uint64_t sub_1000D2F60(uint64_t a1, unsigned int a2)
{
  return a2;
}

uint64_t sub_1000D2F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v9;

  if (*(_DWORD *)a3 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 0;
  v5 = *(_QWORD *)(a3 + 8);
  if (!v4)
  {
    if (!v5)
      return 1;
    v9 = *(_QWORD *)(v5 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  if (!v5)
  {
    v9 = *(_QWORD *)(v4 + 8);
    return v9 == 0xB2AB117A257EDFD0;
  }
  v6 = *(_QWORD *)(v5 + 8);
  v7 = v5 == v4;
  if (v6)
    return *(_QWORD *)(v4 + 8) == v6;
  else
    return v7;
}

BOOL sub_1000D3020(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == 1)
  {
    if (*(_QWORD *)(a1 + 8) == 0xB2AB117A257EDFD2)
      return *(_DWORD *)a2 + 1000 * (*(_QWORD *)(a2 + 8) % 0x1FFFF7uLL) == a3;
    return 0;
  }
  if (v3)
  {
    if (*(_DWORD *)a2 == a3)
    {
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = v6 == a1;
      if (v7)
        return *(_QWORD *)(a1 + 8) == v7;
      else
        return v8;
    }
    return 0;
  }
  return !a3 && *(_QWORD *)(a1 + 8) == 0xB2AB117A257EDFD1;
}

unint64_t sub_1000D30F4@<X0>(int __errnum@<W1>, _QWORD *a2@<X8>)
{
  char *v3;
  const char *v4;
  unint64_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = strerror(__errnum);
  if (v3)
    v4 = v3;
  else
    v4 = "Unknown error";
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a2, v4, v6);
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

const char *sub_1000D31B8(int a1, int __errnum, char *a3, uint64_t a4)
{
  char *v5;
  size_t v6;
  char *v7;

  if (!a4)
    return a3;
  v5 = a3;
  v6 = a4 - 1;
  if (a4 == 1)
  {
LABEL_5:
    *v5 = 0;
    return a3;
  }
  v7 = strerror(__errnum);
  if (v7)
  {
    strncpy(a3, v7, v6);
    v5 = &a3[v6];
    goto LABEL_5;
  }
  return "Unknown error";
}

BOOL sub_1000D3228(uint64_t a1, int a2)
{
  return a2 != 0;
}

const char *sub_1000D3234()
{
  return "std:unknown";
}

uint64_t sub_1000D3240(uint64_t a1, unsigned int a2)
{
  return a2;
}

size_t sub_1000D3250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10[48];

  v4 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v10, 48);
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a3[1] = v6;
    a3[2] = v8 | 0x8000000000000000;
    *a3 = v9;
    a3 = v9;
  }
  else
  {
    *((_BYTE *)a3 + 23) = result;
    if (!result)
      goto LABEL_9;
  }
  result = (size_t)memmove(a3, v4, v6);
LABEL_9:
  *((_BYTE *)a3 + v6) = 0;
  return result;
}

char *sub_1000D333C(uint64_t a1, char a2, char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000D3380(a3, a4, "Unknown interop error %d", a4, a5, a6, a7, a8, a2);
  return a3;
}

uint64_t sub_1000D3380(char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

void sub_1000D33A8(id a1, NSFileHandle *a2)
{
  NSFileHandle *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  uint64_t v9;
  uint8_t buf[4];
  void **v11;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSFileHandle readDataToEndOfFile](v2, "readDataToEndOfFile"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString ps_stringWithUTF8Data:](NSString, "ps_stringWithUTF8Data:", v3));
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "ps_STLString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v9 = 0;
  }

  -[NSFileHandle closeFile](v2, "closeFile");
  if (qword_100417F18 == -1)
  {
    v6 = qword_100417F20;
    if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_INFO))
      goto LABEL_9;
  }
  else
  {
    dispatch_once(&qword_100417F18, &stru_1003EE340);
    v6 = qword_100417F20;
    if (!os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_INFO))
      goto LABEL_9;
  }
  v7 = __p;
  if (v9 < 0)
    v7 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v11 = v7;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Output from collecting wifi logs:\n%s", buf, 0xCu);
LABEL_9:
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);

}

void sub_1000D3508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

char *sub_1000D3554(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;

  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  v6 = v5 >> 3;
  v7 = (v5 >> 3) + 1;
  if (v7 >> 61)
    sub_1000D02C0();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v7)
    v7 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 >> 61)
      sub_1000CDEB8();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v6];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  *a2 = 0;
  if (v4 != v3)
  {
    v15 = v4 - v3 - 8;
    if (v15 < 0x78)
      goto LABEL_36;
    if (&v11[v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v4 && &v4[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      goto LABEL_36;
    v17 = (v15 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v12 -= v18;
    v19 = &v4[-v18];
    v20 = v4 - 16;
    v21 = &v11[8 * v6 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
      *(_OWORD *)v21 = v23;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v4 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v24 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *((_QWORD *)v12 - 1) = v24;
        v12 -= 8;
        *(_QWORD *)v4 = 0;
      }
      while (v4 != v3);
    }
  }
  v25 = *a1;
  v26 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v26 != v25)
  {
    v28 = (unint64_t *)*((_QWORD *)v26 - 1);
    v26 -= 8;
    v27 = v28;
    if (v28)
    {
      v29 = v27 + 1;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
        (*(void (**)(unint64_t *))(*v27 + 16))(v27);
    }
  }
  if (v25)
    operator delete(v25);
  return v14;
}

__n128 sub_1000D36FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_1000D3718(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

__n128 sub_1000D372C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void sub_1000D3748(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1000D375C(_QWORD *a1)
{
  NSObject *v2;
  std::string *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  std::string *p_p;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  char v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE buf[12];
  char v22;
  std::string __p;

  v18 = 0;
  v19 = 0;
  v20 = 0;
  if (qword_100417F18 != -1)
    dispatch_once(&qword_100417F18, &stru_1003EE340);
  v2 = (id)qword_100417F20;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    sub_1000C1E68((_BYTE *)(*(_QWORD *)(a1[4] + 8) + 48), (uint64_t)&__p);
    v3 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Collecting %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = (char *)(*(_QWORD *)(a1[4] + 8) + 48);
  sub_1000C1E68(v5, (uint64_t)buf);
  if (*(char *)(v4 + 71) < 0)
    sub_10006CED8(&__p, *(void **)(v4 + 48), *(_QWORD *)(v4 + 56));
  else
    __p = *(std::string *)(v4 + 48);
  sub_1000675EC(&__p, (uint64_t)buf);
  sub_1000D7494(v5, (uint64_t)&__p, 0, &v18);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v22 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(*(void **)buf);
    v6 = v20;
    if ((v20 & 1) == 0)
      goto LABEL_20;
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v22 < 0)
    goto LABEL_17;
LABEL_14:
  v6 = v20;
  if ((v20 & 1) == 0)
    goto LABEL_20;
LABEL_18:
  if (v6 == 1 && !(_DWORD)v18)
  {
LABEL_20:
    if (qword_100417F18 == -1)
    {
      v7 = (id)qword_100417F20;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        goto LABEL_22;
    }
    else
    {
      dispatch_once(&qword_100417F18, &stru_1003EE340);
      v7 = (id)qword_100417F20;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
LABEL_22:
        sub_1000C1E68((_BYTE *)(*(_QWORD *)(a1[4] + 8) + 48), (uint64_t)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Collected %s", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    v9 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 48);
    if (!v9)
      sub_1000D3E20(3u);
    v10 = (std::mutex *)(v9 + 24);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (__p.__r_.__value_.__r.__words[0] = 0,
          v11 = *(_QWORD *)(v9 + 16),
          std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p),
          v11))
    {
      sub_1000D3E20(2u);
    }
    v12 = 1;
    goto LABEL_42;
  }
  if (qword_100417F18 == -1)
  {
    v13 = qword_100417F20;
    if (os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
    {
LABEL_33:
      v14 = *(_QWORD *)(a1[6] + 8);
      v15 = (_QWORD *)(v14 + 48);
      if (*(char *)(v14 + 71) < 0)
        v15 = (_QWORD *)*v15;
      v16 = v18;
      if (v20 == 1)
        v16 = v18 + 1000 * (v19 % 0x1FFFF7);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to copy %s: %d", (uint8_t *)&__p, 0x12u);
    }
  }
  else
  {
    dispatch_once(&qword_100417F18, &stru_1003EE340);
    v13 = qword_100417F20;
    if (os_log_type_enabled((os_log_t)qword_100417F20, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 48);
  if (!v9)
    sub_1000D3E20(3u);
  v10 = (std::mutex *)(v9 + 24);
  std::mutex::lock((std::mutex *)(v9 + 24));
  if ((*(_BYTE *)(v9 + 136) & 1) != 0
    || (__p.__r_.__value_.__r.__words[0] = 0,
        v17 = *(_QWORD *)(v9 + 16),
        std::exception_ptr::~exception_ptr((std::exception_ptr *)&__p),
        v17))
  {
    sub_1000D3E20(2u);
  }
  v12 = 0;
LABEL_42:
  *(_BYTE *)(v9 + 140) = v12;
  *(_DWORD *)(v9 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
  std::mutex::unlock(v10);
}

void sub_1000D3BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;

  v26 = v25;

  _Unwind_Resume(a1);
}

uint64_t *sub_1000D3C40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_1000D3D2C(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x1000D3C88);
}

void sub_1000D3D68(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_1000D3DB4(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

uint64_t sub_1000D3E14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_1000D3E20(unsigned int a1)
{
  std::future_error *exception;
  std::error_code v3;

  exception = (std::future_error *)__cxa_allocate_exception(0x20uLL);
  v3.__cat_ = std::future_category();
  *(_QWORD *)&v3.__val_ = a1;
  std::future_error::future_error(exception, v3);
}

void sub_1000D3E68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000D3E7C(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1000D3F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_1000D3F40(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "CLSensorSurvey");
  v2 = (void *)qword_100417F20;
  qword_100417F20 = (uint64_t)v1;

}

void sub_1000D3F70()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;

  v4 = (_QWORD *)sub_1000D4058(a1, a3, a2);
  *v4 = off_1003EE370;
  v4[5] = 0;
  v5 = v4 + 5;
  v6 = (unsigned int *)operator new(0x50uLL);
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)v6 = 0u;
  v10 = (uint64_t)v6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = v10;
  v10 = *v5;
  *v5 = v8;
  sub_1000D51D8(&v10);
  return a1;
}

void sub_1000D401C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  __cxa_begin_catch(a1);
  a10 = *v10;
  *v10 = 0;
  sub_1000D51D8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D4004);
}

void sub_1000D403C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;

  sub_1000D51D8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4058(uint64_t a1, uint64_t a2, const char *a3)
{
  __int128 v5;
  std::string v7;

  sub_1000D4AD8(a3, a2, &v7);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1003EE3C8;
  v5 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  return a1;
}

void sub_1000D40CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;

  v4 = (_QWORD *)sub_1000D41C0(a1, a3, a2);
  *v4 = off_1003EE370;
  v4[5] = 0;
  v5 = v4 + 5;
  v6 = (unsigned int *)operator new(0x50uLL);
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)v6 = 0u;
  v10 = (uint64_t)v6;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = v10;
  v10 = *v5;
  *v5 = v8;
  sub_1000D51D8(&v10);
  return a1;
}

void sub_1000D4184(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  __cxa_begin_catch(a1);
  a10 = *v10;
  *v10 = 0;
  sub_1000D51D8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D416CLL);
}

void sub_1000D41A4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;

  sub_1000D51D8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D41C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  __int128 v6;
  std::string v8;

  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  sub_1000D4AD8(v5, a2, &v8);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1003EE3C8;
  v6 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_1000D4240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  char *v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = (_QWORD *)sub_1000D4058(a1, a4, a2);
  *v6 = off_1003EE370;
  v6[5] = 0;
  v7 = v6 + 5;
  v8 = (char *)operator new(0x50uLL);
  *(_DWORD *)v8 = 0;
  v9 = v8 + 8;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10006CED8(v9, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a3;
    *((_QWORD *)v8 + 3) = *(_QWORD *)(a3 + 16);
  }
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  v13 = (uint64_t)v8;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v11 = v13;
  v13 = *v7;
  *v7 = v11;
  sub_1000D51D8(&v13);
  return a1;
}

void sub_1000D4320(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  void *v11;

  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  *v10 = 0;
  sub_1000D51D8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D4308);
}

void sub_1000D4358(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;

  sub_1000D51D8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::filesystem::filesystem_error::filesystem_error(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v8 = (_QWORD *)sub_1000D4058(a1, a5, a2);
  *v8 = off_1003EE370;
  v8[5] = 0;
  v9 = v8 + 5;
  v10 = (unsigned int *)operator new(0x50uLL);
  sub_1000D50F8((uint64_t)v10, a3, a4);
  v14 = (uint64_t)v10;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = v14;
  v14 = *v9;
  *v9 = v12;
  sub_1000D51D8(&v14);
  return a1;
}

void sub_1000D441C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  void *v11;

  operator delete(v11);
  __cxa_begin_catch(a1);
  a10 = *v10;
  *v10 = 0;
  sub_1000D51D8(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1000D4400);
}

void sub_1000D4454(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t *v2;

  sub_1000D51D8(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::filesystem::filesystem_error::filesystem_error(std::runtime_error *a1, uint64_t a2)
{
  std::runtime_error *result;
  std::runtime_error v4;
  unsigned int *v5;
  unsigned int v6;

  result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1003EE3C8;
  v4 = *(std::runtime_error *)(a2 + 16);
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  result[1] = v4;
  result->__vftable = (std::runtime_error_vtbl *)off_1003EE370;
  v5 = *(unsigned int **)(a2 + 40);
  result[2].__imp_.__imp_ = (const char *)v5;
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  return result;
}

void boost::filesystem::filesystem_error::~filesystem_error(boost::filesystem::filesystem_error *this)
{
  *(_QWORD *)this = off_1003EE370;
  sub_1000D51D8((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  *(_QWORD *)this = off_1003EE370;
  sub_1000D51D8((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
}

{
  void *v2;

  *(_QWORD *)this = off_1003EE370;
  sub_1000D51D8((uint64_t *)this + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)this);
  operator delete(v2);
}

const char *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  const char *imp;
  char *v3;
  const char *v4;
  const char *v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  const char *v11;
  const char *v12;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  const char *result;

  imp = this[2].__imp_.__imp_;
  if (!imp)
    return std::runtime_error::what(this);
  if (imp[79] < 0)
  {
    if (*((_QWORD *)imp + 8))
      goto LABEL_28;
  }
  else if (imp[79])
  {
    goto LABEL_28;
  }
  v3 = (char *)std::runtime_error::what(this);
  sub_1000D51A4((std::string *)(this[2].__imp_.__imp_ + 56), v3);
  imp = this[2].__imp_.__imp_;
  if (imp[31] < 0)
  {
    if (!*((_QWORD *)imp + 2))
      goto LABEL_17;
  }
  else if (!imp[31])
  {
    goto LABEL_17;
  }
  std::string::append((std::string *)(imp + 56), ": \"", 3uLL);
  v4 = this[2].__imp_.__imp_;
  v7 = (const std::string::value_type *)*((_QWORD *)v4 + 1);
  v5 = v4 + 8;
  v6 = v7;
  v8 = v5[23];
  if (v8 >= 0)
    v9 = v5;
  else
    v9 = v6;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)v5 + 23);
  else
    v10 = *((_QWORD *)v5 + 1);
  std::string::append((std::string *)v5 + 2, v9, v10);
  std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
  imp = this[2].__imp_.__imp_;
LABEL_17:
  if (imp[55] < 0)
  {
    if (!*((_QWORD *)imp + 5))
      goto LABEL_28;
LABEL_21:
    std::string::append((std::string *)(imp + 56), ", \"", 3uLL);
    v11 = this[2].__imp_.__imp_;
    v14 = (const std::string::value_type *)*((_QWORD *)v11 + 4);
    v12 = v11 + 32;
    v13 = v14;
    v15 = v12[23];
    if (v15 >= 0)
      v16 = v12;
    else
      v16 = v13;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v12 + 23);
    else
      v17 = *((_QWORD *)v12 + 1);
    std::string::append((std::string *)v12 + 1, v16, v17);
    std::string::append((std::string *)(this[2].__imp_.__imp_ + 56), "\"", 1uLL);
    imp = this[2].__imp_.__imp_;
    goto LABEL_28;
  }
  if (imp[55])
    goto LABEL_21;
LABEL_28:
  result = imp + 56;
  if (imp[79] < 0)
    return *(const char **)result;
  return result;
}

uint64_t sub_1000D4704(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1000D4734(int a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v6;
  void *exception;
  _BOOL4 v8;
  uint64_t v9;
  _QWORD v11[3];

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v11[0] = 0;
    if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
      v8 = a1 != 0;
    else
      v8 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
    v9 = 2;
    LODWORD(v11[0]) = a1;
    if (v8)
      v9 = 3;
    v11[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v11[2] = v9;
    boost::filesystem::filesystem_error::filesystem_error(exception, a3, v11);
  }
  if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
    result = a1 != 0;
  else
    result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
  v6 = 2;
  if (result)
    v6 = 3;
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1000D4854(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000D4868(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v7;
  void *exception;
  _BOOL4 v9;
  uint64_t v10;
  _QWORD v13[3];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v13[0] = 0;
    if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
      v9 = a1 != 0;
    else
      v9 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
    v10 = 2;
    LODWORD(v13[0]) = a1;
    if (v9)
      v10 = 3;
    v13[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v13[2] = v10;
    boost::filesystem::filesystem_error::filesystem_error(exception, a4, a2, v13);
  }
  if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
    result = a1 != 0;
  else
    result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
  v7 = 2;
  if (result)
    v7 = 3;
  *(_DWORD *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(_QWORD *)(a3 + 16) = v7;
  return result;
}

void sub_1000D4988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1000D499C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v8;
  void *exception;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD v15[3];

  if (!a4)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v15[0] = 0;
    if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
      v10 = a1 != 0;
    else
      v10 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
    v11 = 2;
    LODWORD(v15[0]) = a1;
    if (v10)
      v11 = 3;
    v15[1] = &boost::system::detail::system_cat_holder<void>::instance;
    v15[2] = v11;
    boost::filesystem::filesystem_error::filesystem_error(exception, a5, a2, a3, v15);
  }
  if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
    result = a1 != 0;
  else
    result = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, a1);
  v8 = 2;
  if (result)
    v8 = 3;
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(_QWORD *)(a4 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
  *(_QWORD *)(a4 + 16) = v8;
  return result;
}

void sub_1000D4AC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000D4AD8(const char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1)
  {
    v6 = strlen(a1);
    std::string::append(a3, a1, v6);
    std::string::append(a3, ": ", 2uLL);
  }
  sub_1000D4BD0(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000D4B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void sub_1000D4BBC(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

std::string *sub_1000D4BD0@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  unint64_t v6;
  char **v7;
  std::string *v8;
  std::string::size_type v9;
  std::string __p;

  sub_1000D4D20((unsigned int *)a1, a2);
  std::string::append(a2, " [", 2uLL);
  sub_1000D4D58((int *)a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a1 + 16) >= 4uLL)
  {
    std::string::append(a2, " at ", 4uLL);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6 <= 3)
      v7 = off_1003EE3E0;
    else
      v7 = (char **)(v6 & 0xFFFFFFFFFFFFFFFELL);
    sub_1000D4EF0((uint64_t)v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &__p;
    else
      v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v9 = __p.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, "]", 1uLL);
}

void sub_1000D4CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *sub_1000D4D20@<X0>(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  uint64_t (***v4)();

  v2 = *((_QWORD *)a1 + 2);
  if (v2)
  {
    if (v2 == 1)
      return std::error_code::message(a2, (const std::error_code *)a1);
    v4 = (uint64_t (***)())*((_QWORD *)a1 + 1);
  }
  else
  {
    v4 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  return (std::string *)((uint64_t (*)(uint64_t (***)(), _QWORD))(*v4)[4])(v4, *a1);
}

std::string *sub_1000D4D58@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t (***v14)();
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char __s[32];

  v4 = *((_QWORD *)a1 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      sub_1000D5048(a2, "std:");
      v5 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 16))(*((_QWORD *)a1 + 1));
      v6 = strlen(v5);
      std::string::append(a2, v5, v6);
      sub_1000D3380(__s, 0x20uLL, ":%d", v7, v8, v9, v10, v11, *a1);
      v12 = strlen(__s);
      return std::string::append(a2, __s, v12);
    }
    v14 = (uint64_t (***)())*((_QWORD *)a1 + 1);
  }
  else
  {
    v14 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  v15 = (char *)((uint64_t (*)(uint64_t (***)()))**v14)(v14);
  sub_1000D5048(a2, v15);
  v21 = *a1;
  if (*((_QWORD *)a1 + 2) == 1)
    v21 += 1000 * (*((_QWORD *)a1 + 1) % 0x1FFFF7uLL);
  sub_1000D3380(__s, 0x20uLL, ":%d", v16, v17, v18, v19, v20, v21);
  v22 = strlen(__s);
  return std::string::append(a2, __s, v22);
}

void sub_1000D4ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1000D4EF0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  size_t v5;
  const char *v6;
  size_t v7;
  char __s[16];

  if (*(_DWORD *)(a1 + 16))
  {
    sub_1000D5048(a2, *(char **)a1);
    sprintf(__s, ":%ld", *(unsigned int *)(a1 + 16));
    v4 = strlen(__s);
    std::string::append(a2, __s, v4);
    if (*(_DWORD *)(a1 + 20))
    {
      sprintf(__s, ":%ld", *(unsigned int *)(a1 + 20));
      v5 = strlen(__s);
      std::string::append(a2, __s, v5);
    }
    std::string::append(a2, " in function '", 0xEuLL);
    v6 = *(const char **)(a1 + 8);
    v7 = strlen(v6);
    std::string::append(a2, v6, v7);
    std::string::push_back(a2, 39);
  }
  else
  {
    sub_1000D5048(a2, "(unknown source location)");
  }
}

void sub_1000D502C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000D5048(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_1000D50F8(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_DWORD *)a1 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = (_BYTE *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006CED8(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1000D5188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *sub_1000D51A4(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_10006C928(a1, __s, v4);
}

uint64_t *sub_1000D51D8(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      if (*(char *)(v2 + 79) < 0)
        operator delete(*(void **)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      operator delete((void *)v2);
    }
  }
  return a1;
}

int *sub_1000D524C@<X0>(int *result@<X0>, _QWORD *a2@<X1>, int *a3@<X8>)
{
  int *v3;
  int v5;
  int v6;
  BOOL v7;
  int v8[2];

  v3 = result;
  v5 = result[8];
  v6 = result[9];
  if (v5)
    v7 = v6 == 0xFFFF;
  else
    v7 = 1;
  if (v7)
  {
    result = sub_1000D6EC0((const char *)result, (uint64_t)a2, v8);
    v5 = v8[0];
    v6 = v8[1];
    v3[8] = v8[0];
    v3[9] = v6;
  }
  else if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v5 = result[8];
    v6 = result[9];
  }
  *a3 = v5;
  a3[1] = v6;
  return result;
}

_QWORD *sub_1000D52B4@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  unint64_t v4;

  v3 = a1;
  if (a1[23] < 0)
    v3 = *(char **)a1;
  v4 = sub_10006CAB4(a1);
  return sub_1000D64D8(a2, v3, &v3[v4], v4);
}

unsigned int **sub_1000D52F4(unsigned int **a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  unsigned int *v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  __int128 v37;
  char *v38;
  unsigned int *v39;

  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v35 = 0;
  sub_10006D2F4((dirent **)&v35, a2, a3, a4);
  if (!a4 || (v7 = a4[2], (v7 & 1) == 0) || v7 == 1 && !*(_DWORD *)a4)
  {
    v36 = 0;
    if (v35 && *((_QWORD *)v35 + 6))
    {
      sub_10006D7E4(&v36);
      v34 = 0;
      if (a4)
      {
        v8 = operator new(0x28uLL, &std::nothrow);
        if (v8)
        {
          *(_DWORD *)v8 = 0;
          v8[2] = 0;
          v8[3] = 0;
          v8[1] = 0;
          *((_DWORD *)v8 + 8) = a3;
          v36 = (unsigned int *)v8;
          do
            v9 = __ldaxr((unsigned int *)v8);
          while (__stlxr(v9 + 1, (unsigned int *)v8));
          v10 = v36;
          v11 = v34;
        }
        else
        {
          v11 = 0;
          v10 = 0;
        }
        v36 = v11;
        v34 = v10;
        sub_1000D6644((uint64_t *)&v36);
        v15 = v34;
        if (!v34)
        {
          if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
            || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 12))
          {
            v33 = 3;
          }
          else
          {
            v33 = 2;
          }
          *a4 = 12;
          a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
          a4[2] = v33;
LABEL_38:
          sub_1000D6644((uint64_t *)&v34);
          return sub_10006D7E4(&v35);
        }
      }
      else
      {
        v12 = operator new(0x28uLL);
        *(_DWORD *)v12 = 0;
        v12[2] = 0;
        v12[3] = 0;
        v12[1] = 0;
        *((_DWORD *)v12 + 8) = a3;
        v36 = (unsigned int *)v12;
        do
          v13 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v13 + 1, (unsigned int *)v12));
        v14 = v36;
        v36 = v34;
        v34 = v14;
        sub_1000D6644((uint64_t *)&v36);
        v15 = v34;
      }
      v16 = *((_QWORD *)v15 + 3);
      v17 = (_QWORD *)*((_QWORD *)v15 + 2);
      if ((unint64_t)v17 >= v16)
      {
        v20 = (_QWORD *)*((_QWORD *)v15 + 1);
        v21 = v17 - v20;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_1000D02C0();
        v22 = v16 - (_QWORD)v20;
        v23 = (uint64_t)(v16 - (_QWORD)v20) >> 2;
        if (v23 <= v21 + 1)
          v23 = v21 + 1;
        if (v22 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        v39 = v15 + 6;
        if (v24)
        {
          v25 = (char *)sub_1000D657C((uint64_t)(v15 + 6), v24);
          v20 = (_QWORD *)*((_QWORD *)v15 + 1);
          v17 = (_QWORD *)*((_QWORD *)v15 + 2);
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        v38 = v27;
        *(_QWORD *)v26 = v35;
        v35 = 0;
        *((_QWORD *)&v37 + 1) = v26 + 8;
        if (v17 == v20)
        {
          v18 = v26 + 8;
        }
        else
        {
          do
          {
            v28 = *--v17;
            *((_QWORD *)v26 - 1) = v28;
            v26 -= 8;
            *v17 = 0;
          }
          while (v17 != v20);
          v18 = (_QWORD *)*((_QWORD *)&v37 + 1);
          v27 = v38;
        }
        v29 = *(_OWORD *)(v15 + 2);
        *((_QWORD *)v15 + 1) = v26;
        *((_QWORD *)v15 + 2) = v18;
        v37 = v29;
        v30 = (char *)*((_QWORD *)v15 + 3);
        *((_QWORD *)v15 + 3) = v27;
        v38 = v30;
        v36 = (unsigned int *)v29;
        sub_1000D65B0((uint64_t)&v36);
        v19 = v34;
      }
      else
      {
        *v17 = v35;
        v18 = v17 + 1;
        v35 = 0;
        v19 = v15;
      }
      *((_QWORD *)v15 + 2) = v18;
      v31 = *a1;
      *a1 = v19;
      v34 = v31;
      goto LABEL_38;
    }
    sub_10006D7E4(&v36);
  }
  return sub_10006D7E4(&v35);
}

void sub_1000D55BC()
{
  __break(1u);
}

void sub_1000D564C()
{
  __cxa_end_catch();
  JUMPOUT(0x1000D55C4);
}

unsigned int **sub_1000D5674(uint64_t a1)
{
  uint64_t i;
  unsigned int **result;
  dirent **v4;
  unsigned int *v6;
  _QWORD v7[2];
  uint64_t v8;

  for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(a1 + 16))
  {
    result = sub_10006D7E4((unsigned int **)(i - 8));
    *(_QWORD *)(a1 + 16) = result;
    if (*(unsigned int ***)(a1 + 8) == result)
      break;
    v4 = (dirent **)(i - 16);
    v7[0] = 0;
    v7[1] = 0;
    v8 = 0;
    sub_10006C494(v4, (uint64_t)v7);
    if ((v8 & 1) != 0 && (v8 != 1 || LODWORD(v7[0]) != 0))
      continue;
    v6 = 0;
    if (*v4 && *(_QWORD *)&(*v4)->d_name[27])
      return sub_10006D7E4(&v6);
    sub_10006D7E4(&v6);
  }
  return result;
}

double sub_1000D5710(unsigned int **a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int **v16;
  double result;
  unsigned int **v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  dirent **v31;
  uint64_t v32;
  void *exception;
  __int128 v34;
  uint64_t v35;
  unsigned int *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  unsigned int *v44;

  v4 = *a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v38 = 0uLL;
  v39 = 0;
  v5 = v4[8];
  if ((v5 & 0x10) != 0)
  {
    v13 = 0;
    v4[8] = v5 & 0xFFFFFFEF;
    goto LABEL_28;
  }
  if ((v4[8] & 6) == 2)
  {
    v6 = 0;
  }
  else
  {
    sub_1000D524C((int *)(*(_QWORD *)(*((_QWORD *)v4 + 2) - 8) + 8), &v38, (int *)&v41);
    v6 = v41;
    if ((v39 & 1) != 0)
    {
      v13 = 0;
      if (v39 != 1 || (_DWORD)v38)
        goto LABEL_28;
    }
    if ((v4[8] & 2) == 0 && (_DWORD)v41 == 4)
    {
LABEL_27:
      v13 = 0;
      goto LABEL_28;
    }
  }
  sub_10006D828(*(_QWORD *)(*((_QWORD *)v4 + 2) - 8) + 8, &v38, (double *)v36);
  if ((v39 & 1) != 0 && (v39 != 1 || (_DWORD)v38))
  {
    v41 = 2;
    *(_QWORD *)&v42 = &boost::system::detail::generic_cat_holder<void>::instance;
    if (sub_1000D5CD4((uint64_t *)&v38, (unsigned int *)&v41) && v6 == 4 && (~v4[8] & 6) == 0)
    {
      v13 = 0;
      v38 = 0uLL;
      v39 = 0;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (LODWORD(v36[0]) != 3)
    goto LABEL_27;
  v7 = *((_QWORD *)v4 + 2);
  if ((unint64_t)(((v7 - *((_QWORD *)v4 + 1)) >> 3) - 1) < 0x7FFFFFFF)
  {
    v8 = *(_QWORD *)(v7 - 8) + 8;
    v9 = v4[8];
    v40 = 0;
    sub_10006D2F4((dirent **)&v40, v8, v9, &v38);
    if ((v39 & 1) == 0 || v39 == 1 && !(_DWORD)v38)
    {
      v41 = 0;
      if (v40 && *((_QWORD *)v40 + 6))
      {
        sub_10006D7E4((unsigned int **)&v41);
        v10 = *((_QWORD *)v4 + 3);
        v11 = (_QWORD *)*((_QWORD *)v4 + 2);
        if ((unint64_t)v11 >= v10)
        {
          v20 = (_QWORD *)*((_QWORD *)v4 + 1);
          v21 = v11 - v20;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_1000D02C0();
          v22 = v10 - (_QWORD)v20;
          v23 = (uint64_t)(v10 - (_QWORD)v20) >> 2;
          if (v23 <= v21 + 1)
            v23 = v21 + 1;
          if (v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          v44 = v4 + 6;
          if (v24)
          {
            v25 = (char *)sub_1000D657C((uint64_t)(v4 + 6), v24);
            v20 = (_QWORD *)*((_QWORD *)v4 + 1);
            v11 = (_QWORD *)*((_QWORD *)v4 + 2);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[8 * v21];
          v27 = &v25[8 * v24];
          v43 = v27;
          *(_QWORD *)v26 = v40;
          v40 = 0;
          *((_QWORD *)&v42 + 1) = v26 + 8;
          if (v11 == v20)
          {
            v12 = v26 + 8;
          }
          else
          {
            do
            {
              v28 = *--v11;
              *((_QWORD *)v26 - 1) = v28;
              v26 -= 8;
              *v11 = 0;
            }
            while (v11 != v20);
            v12 = (_QWORD *)*((_QWORD *)&v42 + 1);
            v27 = v43;
          }
          v29 = *(_OWORD *)(v4 + 2);
          *((_QWORD *)v4 + 1) = v26;
          *((_QWORD *)v4 + 2) = v12;
          v42 = v29;
          v30 = (char *)*((_QWORD *)v4 + 3);
          *((_QWORD *)v4 + 3) = v27;
          v43 = v30;
          v41 = v29;
          sub_1000D65B0((uint64_t)&v41);
        }
        else
        {
          *v11 = v40;
          v12 = v11 + 1;
          v40 = 0;
        }
        *((_QWORD *)v4 + 2) = v12;
        v19 = &v40;
LABEL_44:
        sub_10006D7E4(v19);
        return result;
      }
      sub_10006D7E4((unsigned int **)&v41);
    }
    sub_10006D7E4(&v40);
    goto LABEL_27;
  }
  if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
    || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 84))
  {
    v32 = 3;
  }
  else
  {
    v32 = 2;
  }
  *(_QWORD *)&v38 = 84;
  *((_QWORD *)&v38 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
  v39 = v32;
  v13 = 2;
LABEL_28:
  if ((v39 & 1) == 0 || v39 == 1 && !(_DWORD)v38)
  {
    v15 = (unsigned int **)*((_QWORD *)v4 + 1);
    v14 = (unsigned int **)*((_QWORD *)v4 + 2);
    while (1)
    {
      if (v15 == v14)
      {
        v36[0] = *a1;
        *a1 = 0;
        sub_1000D6644((uint64_t *)v36);
        return result;
      }
      v16 = v14 - 1;
      sub_10006C494((dirent **)v14 - 1, (uint64_t)&v38);
      if ((v39 & 1) != 0 && (v39 != 1 || (_DWORD)v38 != 0))
        goto LABEL_61;
      v36[0] = 0;
      if (*v16)
      {
        if (*((_QWORD *)*v16 + 6))
          break;
      }
      sub_10006D7E4(v36);
      v14 = sub_10006D7E4((unsigned int **)(*((_QWORD *)v4 + 2) - 8));
      *((_QWORD *)v4 + 2) = v14;
      v15 = (unsigned int **)*((_QWORD *)v4 + 1);
    }
    v19 = v36;
    goto LABEL_44;
  }
LABEL_61:
  if ((v4[8] & 8) == 0)
    goto LABEL_71;
  if ((v13 & 2) == 0
    || (v36[1] = 0,
        v37 = 0,
        v36[0] = 0,
        v31 = (dirent **)(*((_QWORD *)v4 + 2) - 8),
        sub_10006C494(v31, (uint64_t)v36),
        (v37 & 1) != 0)
    && (v37 != 1 || LODWORD(v36[0])))
  {
LABEL_70:
    sub_1000D5674((uint64_t)v4);
    if (*((_QWORD *)v4 + 1) != *((_QWORD *)v4 + 2))
      goto LABEL_72;
LABEL_71:
    v36[0] = *a1;
    *a1 = 0;
    sub_1000D6644((uint64_t *)v36);
    goto LABEL_72;
  }
  v40 = 0;
  if (!*v31 || !*(_QWORD *)&(*v31)->d_name[27])
  {
    sub_10006D7E4(&v40);
    goto LABEL_70;
  }
  sub_10006D7E4(&v40);
LABEL_72:
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    v34 = v38;
    v35 = v39;
    boost::filesystem::filesystem_error::filesystem_error(exception, "filesystem::recursive_directory_iterator increment error", &v34);
  }
  result = *(double *)&v38;
  *(_OWORD *)a2 = v38;
  a2[2] = v39;
  return result;
}

void sub_1000D5BBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000D5BD0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, uint64_t (***)());
  v14 = va_arg(va1, _QWORD);
  sub_10006D7E4((unsigned int **)va1);
  if (a2 == 2)
  {
    sub_100341A0C(a1, (uint64_t *)va);
    v12 = 12;
    v13 = &boost::system::detail::generic_cat_holder<void>::instance;
    v14 = v8;
    __cxa_end_catch();
    JUMPOUT(0x1000D5898);
  }
  sub_1000CDD68(a1);
}

const char *sub_1000D5C2C()
{
  return "generic";
}

_QWORD *sub_1000D5C38@<X0>(int __errnum@<W1>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;

  v3 = strerror(__errnum);
  if (v3)
    v4 = v3;
  else
    v4 = "Unknown error";
  return sub_1000D5048(a2, v4);
}

const char *sub_1000D5C70(int a1, int __errnum, char *a3, uint64_t a4)
{
  char *v4;
  char *v5;
  size_t v6;
  char *v7;

  v4 = a3;
  if (a4)
  {
    v5 = a3;
    v6 = a4 - 1;
    if (a4 != 1)
    {
      v7 = strerror(__errnum);
      if (!v7)
        return "Unknown error";
      strncpy(v4, v7, v6);
      v5 = &v4[v6];
    }
    *v5 = 0;
  }
  return v4;
}

uint64_t sub_1000D5CD4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (***v10)();
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = a1[2];
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = sub_1000D5DD4(a1);
      v7 = v6;
      v14[0] = v5;
      v14[1] = v6;
      v12 = sub_1000D5EE8(a2);
      v13 = v8;
      if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v7 + 32))(v7, v5, &v12) & 1) == 0)
        return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v13 + 40))(v13, v14, v12);
      return 1;
    }
    v10 = (uint64_t (***)())a1[1];
  }
  else
  {
    v10 = &boost::system::detail::system_cat_holder<void>::instance;
  }
  if ((((uint64_t (*)(uint64_t (***)(), _QWORD, unsigned int *))(*v10)[2])(v10, *(unsigned int *)a1, a2) & 1) != 0)return 1;
  if (*((_QWORD *)a2 + 1))
    v11 = (uint64_t (***)())*((_QWORD *)a2 + 1);
  else
    v11 = &boost::system::detail::generic_cat_holder<void>::instance;
  return ((uint64_t (*)(uint64_t (***)(), uint64_t *, _QWORD))(*v11)[3])(v11, a1, *a2);
}

unint64_t sub_1000D5DD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v8;

  v1 = a1[2];
  if (!v1)
  {
    std::system_category();
    v3 = 0;
    LODWORD(v2) = 0;
    return v3 | v2;
  }
  if (v1 == 1)
  {
    v2 = *a1;
    v3 = *a1 & 0xFFFFFFFF00000000;
    return v3 | v2;
  }
  LODWORD(v2) = *(_DWORD *)a1;
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 == 0xB2AB117A257EDFD1)
  {
    std::system_category();
    goto LABEL_16;
  }
  if (v5 == 0xB2AB117A257EDFD0)
  {
    std::generic_category();
LABEL_16:
    v3 = 0;
    return v3 | v2;
  }
  v6 = (unint64_t *)(v4 + 16);
  if (atomic_load((unint64_t *)(v4 + 16)))
    goto LABEL_16;
  v8 = operator new(0x10uLL);
  *v8 = &off_1003EE468;
  v8[1] = v4;
  while (!__ldaxr(v6))
  {
    if (!__stlxr((unint64_t)v8, v6))
      goto LABEL_16;
  }
  __clrex();
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v3 = 0;
  return v3 | v2;
}

uint64_t sub_1000D5EE8(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v5;
  _QWORD *v7;
  char v9;

  v1 = *((_QWORD *)a1 + 1);
  v2 = *a1;
  if (!v1)
    goto LABEL_4;
  v3 = *(_QWORD *)(v1 + 8);
  if (v3 == 0xB2AB117A257EDFD1)
  {
    std::system_category();
    return v2;
  }
  if (v3 != 0xB2AB117A257EDFD0)
  {
    v5 = (unint64_t *)(v1 + 16);
    if (!atomic_load((unint64_t *)(v1 + 16)))
    {
      v7 = operator new(0x10uLL);
      *v7 = &off_1003EE468;
      v7[1] = v1;
      while (!__ldaxr(v5))
      {
        if (!__stlxr((unint64_t)v7, v5))
        {
          v9 = 1;
          goto LABEL_13;
        }
      }
      v9 = 0;
      __clrex();
LABEL_13:
      if ((v9 & 1) == 0)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  else
  {
LABEL_4:
    std::generic_category();
  }
  return v2;
}

void sub_1000D5FC4(std::error_category *a1)
{
  void *v1;

  std::error_category::~error_category(a1);
  operator delete(v1);
}

uint64_t sub_1000D5FD8(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1000D5FE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  v3[1] = v1;
  return sub_1000D5EE8((unsigned int *)v3);
}

uint64_t sub_1000D6020(std::error_category *a1, uint64_t a2, int *a3)
{
  const std::error_category *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (***v9)();
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t (***v13)();
  int v15;
  uint64_t v16;
  int v18;
  uint64_t (***v19)();

  v6 = (const std::error_category *)*((_QWORD *)a3 + 1);
  if (v6 == a1)
  {
    v9 = (uint64_t (***)())a1[1].__vftable;
    v18 = *a3;
    v19 = v9;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v18);
  }
  if (v6 == std::generic_category())
    goto LABEL_19;
  v7 = (_QWORD *)*((_QWORD *)a3 + 1);
  if (qword_100417FC8 == 0xB2AB117A257EDFD1)
  {
    v8 = std::system_category();
  }
  else if (qword_100417FC8 == 0xB2AB117A257EDFD0)
  {
    v8 = std::generic_category();
  }
  else
  {
    v8 = (_QWORD *)atomic_load(&qword_100417FD0);
    if (!v8)
    {
      v8 = operator new(0x10uLL);
      *v8 = &off_1003EE468;
      v8[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      while (1)
      {
        v10 = __ldaxr(&qword_100417FD0);
        if (v10)
          break;
        if (!__stlxr((unint64_t)v8, &qword_100417FD0))
        {
          v11 = 1;
          goto LABEL_14;
        }
      }
      v11 = 0;
      __clrex();
LABEL_14:
      if ((v11 & 1) == 0)
      {
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        v8 = (_QWORD *)v10;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_19:
    v18 = *a3;
    v19 = &boost::system::detail::generic_cat_holder<void>::instance;
    goto LABEL_20;
  }
  if (v12)
  {
    v13 = (uint64_t (***)())v12[1];
    v18 = *a3;
    v19 = v13;
LABEL_20:
    v9 = (uint64_t (***)())a1[1].__vftable;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t, int *))(*v9)[2])(v9, a2, &v18);
  }
  v15 = ((uint64_t (*)(std::error_category *, uint64_t))a1->default_error_condition)(a1, a2);
  return *((_QWORD *)a3 + 1) == v16 && *a3 == v15;
}

uint64_t sub_1000D61C4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  const std::error_category *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)();
  int v11;
  uint64_t (***v12)();
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (***v19)();
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t (***v24)();
  _BOOL4 v25;
  _BOOL4 v26;
  const std::error_category *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;

  v6 = (const std::error_category *)*((_QWORD *)a2 + 1);
  if (v6 == (const std::error_category *)a1)
  {
    v9 = *a2;
    v10 = *(uint64_t (****)())(a1 + 8);
    v30 = 0;
    if ((unint64_t)v10[1] >> 1 == 0x595588BD12BF6FE8)
    {
      v11 = v9 != 0;
      v12 = v10;
    }
    else
    {
      v11 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v10)[6])(v10, v9);
      v12 = *(uint64_t (****)())(a1 + 8);
    }
    v13 = v11 == 0;
    v14 = 2;
    if (!v13)
      v14 = 3;
    LODWORD(v30) = v9;
    v31 = v10;
    v32 = v14;
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v30, a3);
  }
  if (v6 == std::generic_category())
    goto LABEL_25;
  v7 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (qword_100417FC8 == 0xB2AB117A257EDFD1)
  {
    v8 = std::system_category();
  }
  else if (qword_100417FC8 == 0xB2AB117A257EDFD0)
  {
    v8 = std::generic_category();
  }
  else
  {
    v8 = (_QWORD *)atomic_load(&qword_100417FD0);
    if (!v8)
    {
      v8 = operator new(0x10uLL);
      *v8 = &off_1003EE468;
      v8[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      while (1)
      {
        v15 = __ldaxr(&qword_100417FD0);
        if (v15)
          break;
        if (!__stlxr((unint64_t)v8, &qword_100417FD0))
        {
          v16 = 1;
          goto LABEL_19;
        }
      }
      v16 = 0;
      __clrex();
LABEL_19:
      if ((v16 & 1) == 0)
      {
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
        v8 = (_QWORD *)v15;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_25:
    v21 = *a2;
    v30 = 0;
    if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8)
      v22 = v21 != 0;
    else
      v22 = ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, v21);
    v23 = 2;
    if (v22)
      v23 = 3;
    LODWORD(v30) = v21;
    v31 = &boost::system::detail::generic_cat_holder<void>::instance;
    v32 = v23;
    goto LABEL_39;
  }
  if (v17)
  {
    v18 = *a2;
    v19 = (uint64_t (***)())v17[1];
    v30 = 0;
    if ((unint64_t)v19[1] >> 1 == 0x595588BD12BF6FE8)
      v20 = v18 != 0;
    else
      v20 = ((uint64_t (*)(uint64_t (***)(), uint64_t))(*v19)[6])(v19, v18);
    v29 = 2;
    if (v20)
      v29 = 3;
    LODWORD(v30) = v18;
    v31 = v19;
    v32 = v29;
LABEL_39:
    v12 = *(uint64_t (****)())(a1 + 8);
    return ((uint64_t (*)(uint64_t (***)(), uint64_t *, uint64_t))(*v12)[3])(v12, &v30, a3);
  }
  v24 = *(uint64_t (****)())(a1 + 8);
  v25 = v24 == &boost::system::detail::generic_cat_holder<void>::instance;
  v26 = v24[1] == (uint64_t (**)())qword_100417FC8;
  if (!qword_100417FC8)
    v26 = v25;
  if (!v26)
    return 0;
  v27 = std::generic_category();
  return ((uint64_t (*)(const std::error_category *, unsigned int *, uint64_t))v27->equivalent_0)(v27, a2, a3);
}

uint64_t sub_1000D648C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1000D649C()
{
  uint64_t v0;
  uint64_t v1;

  *__error() = 0;
  v0 = pathconf("/", 5);
  if ((unint64_t)v0 <= 0x400)
    v1 = 1024;
  else
    v1 = v0;
  if (v0 >= 0)
    return v1;
  else
    return 1024;
}

_QWORD *sub_1000D64D8(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void *sub_1000D657C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1000CDEB8();
  return operator new(8 * a2);
}

uint64_t sub_1000D65B0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    sub_10006D7E4((unsigned int **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000D65FC(uint64_t a1)
{
  _QWORD v3[3];

  sub_10006CF64((DIR **)(a1 + 48), (void **)(a1 + 56), v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *sub_1000D6644(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void **v6;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v6 = (void **)(v2 + 8);
      sub_1000D66A0(&v6);
      operator delete((void *)v2);
    }
  }
  return a1;
}

void sub_1000D66A0(void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_10006D7E4(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1000D6710@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  unint64_t v4;

  v3 = a1;
  if (a1[23] < 0)
    v3 = *(char **)a1;
  v4 = sub_1000D909C(a1);
  return sub_1000D64D8(a2, v3, &v3[v4], v4);
}

_QWORD *sub_1000D6750@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;

  v2 = a1;
  v4 = sub_1000681BC(a1);
  if ((char)v2[23] < 0)
    v2 = *(_BYTE **)v2;
  return sub_1000D64D8(a2, &v2[v4], &v2[v4 + v5], v5);
}

_QWORD *sub_1000D6790@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;

  v2 = a1;
  v4 = sub_10003B6C8(a1);
  if ((char)v2[23] < 0)
    v2 = *(_BYTE **)v2;
  return sub_1000D64D8(a2, &v2[v4], &v2[v4 + v5], v5);
}

void sub_1000D67D0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  void *v11;
  int v12;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  void *exception;
  std::string v26;
  std::string __str;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  uint64_t v33;
  uint64_t v34;
  std::string __p;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  std::string __dst;

  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000681BC((_BYTE *)a1);
  if (!v8)
  {
    sub_100067DEC(a1, a2, a3, (uint64_t)&v32);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = v32;
    if (a3)
    {
      v24 = a3[2];
      if ((v24 & 1) != 0 && (v24 != 1 || *(_DWORD *)a3))
      {
LABEL_107:
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_108;
      }
    }
  }
  v39 = 0uLL;
  v40 = 0;
  sub_10006DB18((const char *)&__dst, (uint64_t)&v39, &v38);
  if (v38 == 1)
  {
    if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
      || (v9 = 2,
          ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 2)))
    {
      v9 = 3;
    }
    *(_QWORD *)&v39 = 2;
    *((_QWORD *)&v39 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    v40 = v9;
    goto LABEL_105;
  }
  if ((v40 & 1) != 0 && (v40 != 1 || (_DWORD)v39))
    goto LABEL_105;
  sub_1000D6E80((char *)&__dst, &__p);
  v10 = sub_1000C6008();
  v11 = sub_1000C6014();
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v12 = 40;
  while (2)
  {
    sub_10003B5B0((unint64_t)&__dst, &v32);
    sub_1000C1E44((uint64_t)&__dst, &v28);
    while (1)
    {
      if (v33 == v30 && v34 == v31)
      {
        v21 = 6;
        goto LABEL_77;
      }
      if (!sub_10003AFE0((unint64_t)&v32, (unint64_t)v10))
        goto LABEL_75;
      if (!sub_10003AFE0((unint64_t)&v32, (unint64_t)v11))
      {
        if (sub_10003AFE0(a4, (unint64_t)&__p))
          sub_10006CA5C((std::string *)a4);
        goto LABEL_75;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v32.__r_.__value_.__l.__size_ != 1)
          goto LABEL_32;
        v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_32;
        v14 = &v32;
      }
      if (v14->__r_.__value_.__s.__data_[0] == 47)
      {
        std::string::push_back((std::string *)a4, 47);
        goto LABEL_75;
      }
LABEL_32:
      sub_10006CB94(a4, &v32);
      sub_1000681BC((_BYTE *)a4);
      if (v15)
      {
        sub_1000D6EC0((const char *)a4, (uint64_t)a3, (int *)&__str);
        if (a3)
        {
          v16 = a3[2];
          if ((v16 & 1) != 0 && (v16 != 1 || *(_DWORD *)a3))
          {
            v21 = 2;
            goto LABEL_77;
          }
        }
        if (LODWORD(__str.__r_.__value_.__l.__data_) == 4)
          break;
      }
LABEL_75:
      sub_1000C6020(&v32);
    }
    if (v12)
    {
      sub_1000D70F4(a4, (uint64_t)a3, &__str);
      if (a3)
      {
        v17 = a3[2];
        if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a3))
        {
          v20 = 0;
          v21 = 2;
          goto LABEL_72;
        }
      }
      sub_10006CA5C((std::string *)a4);
      sub_1000681BC(&__str);
      if (v18)
      {
        while (1)
        {
          sub_1000C6020(&v32);
          if (v33 == v30 && v34 == v31)
            break;
          if (sub_10003AFE0((unint64_t)&v32, (unint64_t)v10))
            sub_10006CB94((uint64_t)&__str, &v32);
        }
        std::string::operator=(&__dst, &__str);
        sub_1000D6E80((char *)&__dst, &v26);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v20 = 0;
        __p = v26;
        goto LABEL_71;
      }
      sub_1000D9010(&__str);
      if (sub_10003AFE0((unint64_t)&__str, (unint64_t)v10))
      {
        if (*(char *)(a4 + 23) < 0)
          sub_10006CED8(&v26, *(void **)a4, *(_QWORD *)(a4 + 8));
        else
          v26 = *(std::string *)a4;
        sub_10006CB94((uint64_t)&v26, &__str);
        sub_1000C6020(&v32);
        while (v33 != v30 || v34 != v31)
        {
          if (sub_10003AFE0((unint64_t)&v32, (unint64_t)v10))
            sub_10006CB94((uint64_t)&v26, &v32);
          sub_1000C6020(&v32);
        }
        std::string::operator=(&__dst, &v26);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        v20 = 0;
LABEL_71:
        v21 = 15;
      }
      else
      {
        v21 = 8;
        v20 = 1;
      }
LABEL_72:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      --v12;
      if ((v20 & 1) == 0)
        goto LABEL_77;
      goto LABEL_75;
    }
    if ((qword_100417FC8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 62))
    {
      v23 = 3;
    }
    else
    {
      v23 = 2;
    }
    v12 = 0;
    *(_QWORD *)&v39 = 62;
    *((_QWORD *)&v39 + 1) = &boost::system::detail::generic_cat_holder<void>::instance;
    v21 = 3;
    v40 = v23;
LABEL_77:
    if (v29 < 0)
      operator delete(v28);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v21 == 15)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
      continue;
    }
    break;
  }
  if (v21 == 6)
  {
    v21 = 1;
  }
  else if (*(char *)(a4 + 23) < 0)
  {
    operator delete(*(void **)a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 == 3)
  {
LABEL_105:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v36 = v39;
      v37 = v40;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::canonical", &__dst, &v36);
    }
    *(_OWORD *)a3 = v39;
    a3[2] = v40;
    goto LABEL_107;
  }
  if (v21 == 2)
    goto LABEL_107;
LABEL_108:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1000D6D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000D6E80@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  unint64_t v4;

  v3 = a1;
  if (a1[23] < 0)
    v3 = *(char **)a1;
  v4 = sub_1000D90D8(a1);
  return sub_1000D64D8(a2, v3, &v3[v4], v4);
}

int *sub_1000D6EC0@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  const char *v4;
  int *result;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  void *exception;
  _BOOL4 v14;
  uint64_t v15;
  _QWORD v16[3];
  stat v17;

  v4 = a1;
  if (a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = (int *)lstat(a1, &v17);
  if ((_DWORD)result)
  {
    result = __error();
    v7 = *result;
    if (a2)
    {
      if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
        result = (int *)(v7 != 0);
      else
        result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v7);
      v11 = 2;
      if ((_DWORD)result)
        v11 = 3;
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(_QWORD *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(_QWORD *)(a2 + 16) = v11;
      if (v7 == 20)
        v12 = 0;
      else
        v12 = 0xFFFF;
      v9 = v7 == 2 || v7 == 20;
      if (v7 == 2)
        v8 = 0;
      else
        v8 = v12;
    }
    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0;
        if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
          v14 = v7 != 0;
        else
          v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v7);
        v15 = 2;
        LODWORD(v16[0]) = v7;
        if (v14)
          v15 = 3;
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::symlink_status", v4, v16);
      }
      v8 = 0;
      v9 = 1;
    }
  }
  else
  {
    v8 = 0xFFFF;
    v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 7;
        break;
      case 1u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 6;
        break;
      case 3u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 3;
        break;
      case 5u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 5;
        break;
      case 7u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 2;
        break;
      case 9u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 4;
        break;
      case 0xBu:
        v8 = v17.st_mode & 0xFFF;
        v9 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_1000D70E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000D70F4(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const char *v6;
  std::string::size_type v7;
  size_t v8;
  char *v9;
  std::string::size_type v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  void *exception;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD v21[3];
  std::string::value_type v22[1024];

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) >= 0)
    v6 = (const char *)a1;
  else
    v6 = *(const char **)a1;
  v7 = readlink(v6, v22, 0x400uLL);
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_22:
    v13 = *__error();
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v21[0] = 0;
      if ((qword_100417F98 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0)
        v16 = v13 != 0;
      else
        v16 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v13);
      v17 = 2;
      LODWORD(v21[0]) = v13;
      if (v16)
        v17 = 3;
      v21[1] = &boost::system::detail::system_cat_holder<void>::instance;
      v21[2] = v17;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::read_symlink", a1, v21);
    }
    if ((qword_100417F98 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0)
      v14 = v13 != 0;
    else
      v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v13);
    v12 = 2;
    if (v14)
      v12 = 3;
    *(_DWORD *)a2 = v13;
    *(_DWORD *)(a2 + 4) = 0;
LABEL_29:
    *(_QWORD *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
    *(_QWORD *)(a2 + 16) = v12;
  }
  else if (v7 >= 0x400)
  {
    v8 = 2048;
    while (1)
    {
      v9 = (char *)operator new[](v8);
      v10 = readlink(v6, v9, v8);
      if ((v10 & 0x8000000000000000) != 0)
      {
        operator delete[](v9);
        goto LABEL_22;
      }
      if (v10 < v8)
        break;
      operator delete[](v9);
      v11 = v8 > 0x4000;
      v8 *= 2;
      if (v11)
      {
        if (!a2)
        {
          v18 = __cxa_allocate_exception(0x30uLL);
          v20[0] = 0;
          if ((qword_100417F98 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
            || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, 63))
          {
            v19 = 3;
          }
          else
          {
            v19 = 2;
          }
          LODWORD(v20[0]) = 63;
          v20[1] = &boost::system::detail::system_cat_holder<void>::instance;
          v20[2] = v19;
          boost::filesystem::filesystem_error::filesystem_error(v18, "boost::filesystem::read_symlink", a1, v20);
        }
        if ((qword_100417F98 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
          || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, 63))
        {
          v12 = 3;
        }
        else
        {
          v12 = 2;
        }
        *(_QWORD *)a2 = 63;
        goto LABEL_29;
      }
    }
    sub_1000D8F44(a3, v9, &v9[v10], v10);
    if (a2)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    operator delete[](v9);
  }
  else
  {
    sub_1000D8F44(a3, v22, &v22[v7], v7);
    if (a2)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
}

void sub_1000D7448(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1000D7494(const char *a1, uint64_t a2, int a3, _QWORD *a4)
{
  std::string *v7;
  uint64_t v8;
  int v9;
  std::string::size_type v10;
  uint64_t v11;
  void *exception;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  int v25;
  void *v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string __p;
  std::string __dst;
  std::string v35;

  v7 = (std::string *)a1;
  if ((a3 & 0x1600) != 0)
    sub_1000D6EC0(a1, (uint64_t)a4, (int *)&v35);
  else
    sub_10006DB18(a1, (uint64_t)a4, (int *)&v35);
  if (a4)
  {
    v8 = a4[2];
    if ((v8 & 1) != 0 && (v8 != 1 || *(_DWORD *)a4))
      return;
  }
  if (LODWORD(v35.__r_.__value_.__l.__data_) <= 1)
  {
    v9 = 2;
    goto LABEL_14;
  }
  if (LODWORD(v35.__r_.__value_.__l.__data_) == 2)
  {
    if ((a3 & 0x800) != 0)
      return;
    if ((a3 & 0x1000) != 0)
    {
      memset(&v35, 0, sizeof(v35));
      sub_1000681BC(v7);
      if (v11)
        goto LABEL_31;
      sub_10006821C(a4, &__dst);
      if (a4 && (v20 = a4[2], (v20 & 1) != 0) && (v20 != 1 || *(_DWORD *)a4))
      {
        v25 = 1;
      }
      else
      {
        sub_1000D52B4((char *)v7, &v32);
        sub_100067DEC((uint64_t)&v32, (uint64_t)&__dst, a4, (uint64_t)&__p);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (a4 && (v21 = a4[2], (v21 & 1) != 0) && (v21 != 1 || *(_DWORD *)a4))
        {
          v25 = 1;
        }
        else
        {
          sub_1000D52B4((char *)a2, &v32);
          sub_1000681BC(&v32);
          if (!v22)
          {
            sub_100067DEC((uint64_t)&v32, (uint64_t)&__dst, a4, (uint64_t)&v31);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            v32 = v31;
            if (a4)
            {
              v27 = a4[2];
              if ((v27 & 1) != 0 && (v27 != 1 || *(_DWORD *)a4))
                goto LABEL_117;
            }
          }
          sub_1000D7D88(&__p, &v32, a4, &v31);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          v35 = v31;
          if (a4 && (v23 = a4[2], (v23 & 1) != 0) && (v23 != 1 || *(_DWORD *)a4))
          {
LABEL_117:
            v25 = 1;
          }
          else
          {
            v24 = sub_1000C6008();
            if (sub_10003AFE0((unint64_t)&v35, (unint64_t)v24))
            {
              sub_10003B780(v7, &v31);
              sub_10006CB94((uint64_t)&v35, &v31);
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v31.__r_.__value_.__l.__data_);
              v25 = 0;
            }
            else
            {
              sub_10003B780(v7, &v31);
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v35.__r_.__value_.__l.__data_);
              v25 = 0;
              v35 = v31;
            }
            v7 = &v35;
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v25)
LABEL_31:
        sub_1000D7FBC((uint64_t)v7, a2, a4);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v26 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    else
    {
      if ((a3 & 0x2000) != 0)
      {
        sub_1000D8048((uint64_t)v7, a2, a4);
        return;
      }
      memset(&v35, 0, sizeof(v35));
      if ((a3 & 0x1400) != 0)
        sub_1000D6EC0((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      else
        sub_10006DB18((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      if (LODWORD(__dst.__r_.__value_.__l.__data_) != 3)
      {
        if (LODWORD(__dst.__r_.__value_.__l.__data_))
        {
          sub_1000D80D8((uint64_t)v7, a2, a3, a4);
          return;
        }
        if (a4)
          goto LABEL_69;
        exception = __cxa_allocate_exception(0x30uLL);
        v30 = v35;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v7, a2, &v30);
        goto LABEL_133;
      }
      sub_10003B780(v7, &__p);
      sub_1000D83E8(a2, &__p, (uint64_t)&__dst);
      sub_1000D80D8((uint64_t)v7, (uint64_t)&__dst, a3, a4);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v26 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    operator delete(v26);
    return;
  }
  if (LODWORD(v35.__r_.__value_.__l.__data_) == 3)
  {
    memset(&v35, 0, sizeof(v35));
    if ((a3 & 0x1000) == 0)
    {
      if ((a3 & 0x1400) != 0)
        sub_1000D6EC0((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      else
        sub_10006DB18((const char *)a2, (uint64_t)&v35, (int *)&__dst);
      if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1)
      {
        sub_100011C28(a2, (uint64_t)v7, a4);
        if (a4)
        {
          v13 = a4[2];
          if ((v13 & 1) != 0 && (v13 != 1 || *(_DWORD *)a4))
            return;
        }
      }
      else if (!LODWORD(__dst.__r_.__value_.__l.__data_))
      {
        if (!a4)
        {
          exception = __cxa_allocate_exception(0x30uLL);
          v28 = v35;
          boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v7, a2, &v28);
          goto LABEL_133;
        }
LABEL_69:
        *(std::string *)a4 = v35;
        return;
      }
      if (!a3 || (a3 & 0x100) != 0)
      {
        v32.__r_.__value_.__r.__words[0] = 0;
        sub_10006D2F4((dirent **)&v32, (uint64_t)v7, 0, a4);
        if (!a4 || (v14 = a4[2], (v14 & 1) == 0) || v14 == 1 && !*(_DWORD *)a4)
        {
          v31.__r_.__value_.__r.__words[0] = 0;
          v15 = v32.__r_.__value_.__r.__words[0];
          if (v32.__r_.__value_.__r.__words[0])
          {
            v16 = a3 | 0x4000u;
            do
            {
              if (!v15 || !*(_QWORD *)(v15 + 48))
                break;
              v17 = v15 + 8;
              sub_10003B780((_BYTE *)(v15 + 8), &__p);
              if (*(char *)(a2 + 23) < 0)
                sub_10006CED8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
              else
                __dst = *(std::string *)a2;
              sub_10006CB94((uint64_t)&__dst, &__p);
              sub_1000D7494(v17, &__dst, v16, a4);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (a4)
              {
                v18 = a4[2];
                if ((v18 & 1) != 0 && (v18 != 1 || *(_DWORD *)a4))
                  break;
              }
              sub_10006C494((dirent **)&v32, (uint64_t)a4);
              if (a4)
              {
                v19 = a4[2];
                if ((v19 & 1) != 0 && (v19 != 1 || *(_DWORD *)a4))
                  break;
              }
              v15 = v32.__r_.__value_.__r.__words[0];
            }
            while (v32.__r_.__value_.__r.__words[0] != v31.__r_.__value_.__r.__words[0]);
          }
          sub_10006D7E4((unsigned int **)&v31);
        }
        sub_10006D7E4((unsigned int **)&v32);
      }
      return;
    }
    if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 21))
    {
      v10 = 3;
    }
    else
    {
      v10 = 2;
    }
    v35.__r_.__value_.__r.__words[0] = 21;
    v35.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
    v35.__r_.__value_.__r.__words[2] = v10;
    if (a4)
      goto LABEL_69;
    exception = __cxa_allocate_exception(0x30uLL);
    v29 = v35;
    boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::copy", v7, a2, &v29);
LABEL_133:
  }
  if (LODWORD(v35.__r_.__value_.__l.__data_) != 4)
  {
LABEL_12:
    v9 = 78;
LABEL_14:
    sub_1000D499C(v9, (uint64_t)v7, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::copy");
    return;
  }
  if ((a3 & 0x400) == 0)
  {
    if ((a3 & 0x200) == 0)
      goto LABEL_12;
    sub_1000D7CF8((uint64_t)v7, a2, a4);
  }
}

void sub_1000D7BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  _Unwind_Resume(exception_object);
}

void sub_1000D7CF8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  std::string __p;

  sub_1000D70F4(a1, (uint64_t)a3, &__p);
  if (!a3 || (v5 = a3[2], (v5 & 1) == 0) || v5 == 1 && !*(_DWORD *)a3)
    sub_1000D7FBC((uint64_t)&__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000D7D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D7D88(_BYTE *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *exception;
  std::string v12;
  __int128 v13;
  uint64_t v14;
  std::string v15;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  v17 = 0uLL;
  v18 = 0;
  memset(&__p, 0, sizeof(__p));
  sub_1000681BC(a1);
  if (!v8 || (sub_1000681BC(a2), !v9))
  {
    sub_10006821C(&v17, &v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v15;
    if ((v18 & 1) != 0 && (v18 != 1 || (_DWORD)v17))
      goto LABEL_22;
  }
  sub_1000D8584((uint64_t)a2, (uint64_t)&__p, (uint64_t)&v17, &v15);
  if ((v18 & 1) == 0 || (v10 = 2, v18 == 1) && !(_DWORD)v17)
  {
    sub_1000D8584((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v17, &v12);
    if ((v18 & 1) == 0 || (v10 = 2, v18 == 1) && !(_DWORD)v17)
    {
      sub_1000D92DC((unint64_t)&v12, (unint64_t)&v15, (uint64_t)a4);
      v10 = 1;
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v10 == 2)
  {
LABEL_22:
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v13 = v17;
      v14 = v18;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::relative", a1, a2, &v13);
    }
    *(_OWORD *)a3 = v17;
    a3[2] = v18;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1000D7F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  __cxa_free_exception(v30);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7FBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v7;

  v4 = a2;
  v5 = a1;
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  result = symlink((const char *)a1, (const char *)a2);
  if ((result & 0x80000000) != 0)
  {
    v7 = __error();
    return sub_1000D499C(*v7, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::create_symlink");
  }
  return result;
}

uint64_t sub_1000D8048(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a2;
  v5 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  result = link((const char *)a1, (const char *)a2);
  if ((_DWORD)result)
  {
    result = *__error();
    if ((_DWORD)result)
      return sub_1000D499C(result, v5, v4, (uint64_t)a3, (uint64_t)"boost::filesystem::create_hard_link");
  }
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t sub_1000D80D8(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  const char *v8;
  int v9;
  int v10;
  int st_mode;
  const char *v12;
  int v13;
  int v15;
  const char *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  stat v23;
  stat v24;
  int v25;
  int v26;

  if (a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v25 = -1;
  v26 = -1;
  while (1)
  {
    v8 = *(char *)(a1 + 23) >= 0 ? (const char *)a1 : *(const char **)a1;
    v9 = open(v8, 0x1000000);
    v26 = v9;
    if ((v9 & 0x80000000) == 0)
      break;
    v10 = *__error();
    if (v10 != 4)
      goto LABEL_33;
  }
  if (fstat(v9, &v24))
  {
LABEL_60:
    v10 = *__error();
    goto LABEL_33;
  }
  st_mode = v24.st_mode;
  if ((v24.st_mode & 0xF000) != 0x8000)
  {
LABEL_61:
    v10 = 78;
    goto LABEL_33;
  }
  if ((a3 & 4) != 0)
  {
    while (1)
    {
      v12 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
      v13 = open(v12, 16777217, st_mode | 0x80u);
      v25 = v13;
      if ((v13 & 0x80000000) == 0)
        break;
      v10 = *__error();
      if (v10 != 4)
      {
        if (v10 != 2)
          goto LABEL_33;
        goto LABEL_19;
      }
    }
    v18 = 1;
LABEL_37:
    if (fstat(v13, &v23))
      goto LABEL_60;
    v19 = v23.st_mode;
    if ((v23.st_mode & 0xF000) != 0x8000)
      goto LABEL_61;
    if (v24.st_dev != v23.st_dev || v24.st_ino != v23.st_ino)
    {
      if (v18)
      {
        if (v24.st_mtimespec.tv_sec < v23.st_mtimespec.tv_sec
          || v24.st_mtimespec.tv_sec == v23.st_mtimespec.tv_sec && v24.st_mtimespec.tv_nsec <= v23.st_mtimespec.tv_nsec)
        {
          goto LABEL_34;
        }
        if (ftruncate(v25, 0))
          goto LABEL_60;
      }
      v10 = off_100417FD8(v26, v25, v24.st_size, 0x1000uLL);
      if (v10)
        goto LABEL_33;
      if (v19 == st_mode || !fchmod(v25, st_mode))
      {
        if ((a3 & 0x18) != 0)
        {
          v20 = v25;
          if ((a3 & 0x10) != 0)
          {
            while (fcntl(v20, 51) < 0)
            {
              v10 = *__error();
              if (v10 != 4)
              {
LABEL_56:
                if (v10)
                  goto LABEL_33;
                break;
              }
            }
          }
          else
          {
            while (fcntl(v20, 51) < 0)
            {
              v10 = *__error();
              if (v10 != 4)
                goto LABEL_56;
            }
          }
        }
        v21 = close(v25);
        v25 = -1;
        if ((v21 & 0x80000000) == 0 || (v10 = *__error(), (v10 & 0xFFFFFFDF) == 4))
        {
          v17 = 1;
          goto LABEL_59;
        }
        goto LABEL_33;
      }
      goto LABEL_60;
    }
LABEL_32:
    v10 = 17;
LABEL_33:
    sub_1000D499C(v10, a1, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::copy_file");
    goto LABEL_34;
  }
LABEL_19:
  if ((a3 & 4) != 0 || (a3 & 3) == 2)
    v15 = 16778753;
  else
    v15 = 16780801;
  do
  {
    if (*(char *)(a2 + 23) >= 0)
      v16 = (const char *)a2;
    else
      v16 = *(const char **)a2;
    v13 = open(v16, v15, st_mode | 0x80u);
    v25 = v13;
    if ((v13 & 0x80000000) == 0)
    {
      v18 = 0;
      goto LABEL_37;
    }
    v10 = *__error();
  }
  while (v10 == 4);
  if (v10 != 17)
    goto LABEL_33;
  if ((a3 & 1) == 0)
    goto LABEL_32;
LABEL_34:
  v17 = 0;
LABEL_59:
  sub_1000D8458(&v25);
  sub_1000D8458(&v26);
  return v17;
}

void sub_1000D83B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000D8458((int *)(v1 - 72));
  sub_1000D8458((int *)(v1 - 68));
  _Unwind_Resume(a1);
}

void sub_1000D83E8(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  sub_10006CB94(a3, a2);
}

void sub_1000D843C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

int *sub_1000D8458(int *a1)
{
  int v2;

  v2 = *a1;
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return a1;
}

BOOL sub_1000D8488(_QWORD *a1)
{
  int v2;
  int v3;

  v2 = *__error();
  if (v2 == 34)
    v3 = 0;
  else
    v3 = v2;
  if (v3)
  {
    sub_1000D4734(v3, (uint64_t)a1, (uint64_t)"boost::filesystem::current_path");
  }
  else if (a1)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return v3 != 0;
}

uint64_t sub_1000D84E4(uint64_t a1, time_t a2, _QWORD *a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t result;
  int *v8;
  utimbuf v9;
  stat v10;

  v5 = a1;
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (stat((const char *)a1, &v10) < 0
    || ((v9.actime = v10.st_atimespec.tv_sec, v9.modtime = a2, *(char *)(v5 + 23) >= 0)
      ? (v6 = (const char *)v5)
      : (v6 = *(const char **)v5),
        result = utime(v6, &v9),
        (result & 0x80000000) != 0))
  {
    v8 = __error();
    return sub_1000D4868(*v8, v5, (uint64_t)a3, (uint64_t)"boost::filesystem::last_write_time");
  }
  return result;
}

void sub_1000D8584(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  __int128 *v9;
  void *v10;
  BOOL v11;
  std::string::size_type v13;
  std::string::size_type v14;
  void *v15;
  void *exception;
  __int128 v17;
  uint64_t v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  uint64_t v22;
  std::string __p;
  std::string __dst;
  __int128 v25;
  std::string v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  p_p = (std::string *)a1;
  v28 = 0uLL;
  v29 = 0;
  sub_1000C1E44(a1, &v26);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__dst, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    __dst = v26;
  v25 = v27;
  if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__p, p_p->__r_.__value_.__l.__data_, p_p->__r_.__value_.__l.__size_);
  else
    __p = *p_p;
  while (1)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_13;
    sub_10006DB18((const char *)&__p, (uint64_t)&v28, (int *)&v20);
    if (LODWORD(v20.__r_.__value_.__l.__data_) != 1)
      break;
    sub_10006CA5C(&__p);
    sub_1000C62B4(&__dst);
  }
  if (LODWORD(v20.__r_.__value_.__l.__data_))
  {
LABEL_13:
    v9 = sub_1000C6008();
    v10 = sub_1000C6014();
    v11 = 0;
    memset(&v20, 0, sizeof(v20));
    while ((_QWORD)v25 != (_QWORD)v27 || *((_QWORD *)&v25 + 1) != *((_QWORD *)&v27 + 1))
    {
      sub_10006CB94((uint64_t)&v20, &__dst);
      v11 = v11
         || !sub_10003AFE0((unint64_t)&__dst, (unint64_t)v9)
         || !sub_10003AFE0((unint64_t)&__dst, (unint64_t)v10);
      sub_1000C6020(&__dst);
    }
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = __p.__r_.__value_.__l.__size_;
    if (!v13)
      goto LABEL_37;
    sub_1000D67D0((uint64_t)&__p, a2, &v28, (unint64_t)&v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v19;
    if ((v29 & 1) != 0 && (v29 != 1 || (_DWORD)v28))
    {
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v17 = v28;
        v18 = v29;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::weakly_canonical", &__p, &v17);
      }
      *(_OWORD *)a3 = v28;
      *(_QWORD *)(a3 + 16) = v29;
    }
    else
    {
      v14 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = v20.__r_.__value_.__l.__size_;
      if (v14)
      {
        sub_10006CB94((uint64_t)&__p, &v20);
        if (v11)
        {
          p_p = &__p;
LABEL_37:
          sub_1000D9780((char *)p_p, (uint64_t)a4);
          goto LABEL_40;
        }
      }
      *a4 = __p;
      a4 = &__p;
    }
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
LABEL_40:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_42;
  }
  if (!a3)
  {
    v15 = __cxa_allocate_exception(0x30uLL);
    v21 = v28;
    v22 = v29;
    boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::weakly_canonical", &__p, &v21);
  }
  *(_OWORD *)a3 = v28;
  *(_QWORD *)(a3 + 16) = v29;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
LABEL_42:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1000D88D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  uint64_t v39;

  __cxa_free_exception(v38);
  if (a21 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a38 < 0)
    operator delete(a33);
  if (*(char *)(v39 - 121) < 0)
    operator delete(*(void **)(v39 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8970(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return sub_1000D8980(a1, a2);
}

uint64_t sub_1000D8980(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  void *exception;
  __int128 v20;
  uint64_t v21;
  unsigned int *v22;
  __int128 v23;
  uint64_t v24;

  v23 = 0uLL;
  v24 = 0;
  sub_1000D6EC0((const char *)a1, (uint64_t)&v23, (int *)&v22);
  result = 0;
  v5 = (int)v22;
  if ((_DWORD)v22 != 1)
  {
    if (!(_DWORD)v22)
    {
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v20 = v23;
        v21 = v24;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::remove_all", a1, &v20);
      }
      *(_OWORD *)a2 = v23;
      a2[2] = v24;
      return -1;
    }
    if ((_DWORD)v22 == 3)
    {
      *(_QWORD *)&v23 = 0;
      sub_10006D2F4((dirent **)&v23, a1, 0, a2);
      if (a2)
      {
        v6 = a2[2];
        if ((v6 & 1) != 0 && (v6 != 1 || *(_DWORD *)a2))
        {
          sub_10006D7E4((unsigned int **)&v23);
          return -1;
        }
      }
      v22 = 0;
      v7 = v23;
      if ((_QWORD)v23)
      {
        v8 = 0;
        v9 = 0;
        while (v7 && *(_QWORD *)(v7 + 48) || v9 && *((_QWORD *)v9 + 6))
        {
          v8 += sub_1000D8980(v7 + 8, a2);
          if (a2 && (v10 = a2[2], (v10 & 1) != 0) && (v10 != 1 || *(_DWORD *)a2)
            || (sub_10006C494((dirent **)&v23, (uint64_t)a2), a2)
            && (v11 = a2[2], (v11 & 1) != 0)
            && (v11 != 1 || *(_DWORD *)a2))
          {
            v12 = 0;
            goto LABEL_29;
          }
          v9 = v22;
          v7 = v23;
          if ((unsigned int *)v23 == v22)
            break;
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = 1;
LABEL_29:
      sub_10006D7E4(&v22);
      sub_10006D7E4((unsigned int **)&v23);
      if ((v12 & 1) == 0)
        return -1;
    }
    else
    {
      v8 = 0;
    }
    if (v5 == 1)
      goto LABEL_39;
    if (v5 == 3)
    {
      if (*(char *)(a1 + 23) >= 0)
        v13 = (const char *)a1;
      else
        v13 = *(const char **)a1;
      if (rmdir(v13))
      {
LABEL_36:
        v14 = __error();
        v15 = 0;
        v16 = *v14;
        if (v16 == 2 || v16 == 20)
        {
LABEL_40:
          if (a2)
          {
LABEL_41:
            v17 = a2[2];
            if ((v17 & 1) != 0 && (v17 != 1 || *(_DWORD *)a2))
              return -1;
          }
          return v15 + v8;
        }
        sub_1000D4868(v16, a1, (uint64_t)a2, (uint64_t)"boost::filesystem::remove");
LABEL_39:
        v15 = 0;
        goto LABEL_40;
      }
    }
    else
    {
      if (*(char *)(a1 + 23) >= 0)
        v18 = (const char *)a1;
      else
        v18 = *(const char **)a1;
      if (unlink(v18))
        goto LABEL_36;
    }
    v15 = 1;
    if (a2)
      goto LABEL_41;
    return v15 + v8;
  }
  return result;
}

void sub_1000D8BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_1000D8C1C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *__p[2];
  uint64_t v10;

  if (a1)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  v4 = getenv("TMPDIR");
  if (!v4)
  {
    v4 = getenv("TMP");
    if (!v4)
    {
      v4 = getenv("TEMP");
      if (!v4)
        v4 = getenv("TEMPDIR");
    }
  }
  if (v4)
    v5 = v4;
  else
    v5 = "/tmp";
  sub_1000D5048(__p, v5);
  v6 = (void *)HIBYTE(v10);
  if (v10 < 0)
    v6 = __p[1];
  if (!v6)
    goto LABEL_20;
  sub_10006DB18((const char *)__p, (uint64_t)a1, &v8);
  if (!a1 || (v7 = a1[2], (v7 & 1) == 0) || v7 == 1 && !*(_DWORD *)a1)
  {
    if (v8 == 3)
    {
LABEL_18:
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 16) = v10;
      return;
    }
LABEL_20:
    sub_1000D4868(20, (uint64_t)__p, (uint64_t)a1, (uint64_t)"boost::filesystem::temp_directory_path");
    goto LABEL_18;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_1000D8D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ssize_t sub_1000D8D5C(int a1, int a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  char *v11;
  ssize_t v12;
  char v14[8192];

  if (a3 == -1)
    v6 = -1;
  else
    v6 = a3 + 1;
  if (v6 <= a4)
    v6 = a4;
  if (v6 <= 0x2000)
    v6 = 0x2000;
  if (v6 >= 0x40000)
    LODWORD(v6) = 0x40000;
  v7 = (v6 - 1) | ((v6 - 1) >> 1) | ((((_DWORD)v6 - 1) | ((v6 - 1) >> 1)) >> 2);
  v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
  v9 = (v8 | HIWORD(v8)) + 1;
  v10 = (char *)operator new[](v9, &std::nothrow);
  if (!v10)
    return sub_1000D8E90(a1, a2, v14, 0x2000uLL);
  v11 = v10;
  v12 = sub_1000D8E90(a1, a2, v10, v9);
  operator delete[](v11);
  return v12;
}

void sub_1000D8E74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

ssize_t sub_1000D8E90(int a1, int a2, char *a3, size_t a4)
{
  ssize_t result;
  ssize_t v9;
  ssize_t v10;
  ssize_t v11;

  result = read(a1, a3, a4);
  if (result)
  {
    v9 = result;
    do
    {
      if ((v9 & 0x8000000000000000) == 0)
      {
        v10 = 0;
        while (1)
        {
          v11 = write(a2, &a3[v10], v9 - v10);
          if (v11 < 0)
          {
            result = *__error();
            if ((_DWORD)result != 4)
              return result;
          }
          else
          {
            v10 += v11;
          }
          if (v10 >= v9)
            goto LABEL_12;
        }
      }
      result = *__error();
      if ((_DWORD)result != 4)
        break;
LABEL_12:
      result = read(a1, a3, a4);
      v9 = result;
    }
    while (result);
  }
  return result;
}

void sub_1000D8F44(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

std::string *sub_1000D9010(std::string *this)
{
  uint64_t v2;
  std::string::size_type size;
  std::string::size_type v4;
  char *v5;
  std::string::size_type v6;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (!size)
      return this;
  }
  else
  {
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v4 = size - 1;
  if ((v2 & 0x80) != 0)
  {
    v6 = this->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(this->__r_.__value_.__r.__words[0] + v4) == 47)
    {
      v5 = (char *)(v6 + this->__r_.__value_.__l.__size_);
      goto LABEL_10;
    }
  }
  else if (this->__r_.__value_.__s.__data_[v4] == 47)
  {
    v5 = (char *)this + v2;
    v6 = (std::string::size_type)this;
LABEL_10:
    std::string::erase(this, (std::string::size_type)&v5[~v6], 1uLL);
  }
  return this;
}

unint64_t sub_1000D909C(_BYTE *a1)
{
  unint64_t v1;
  _BYTE *v2;
  unint64_t v4;

  v4 = 0;
  if ((char)a1[23] < 0)
  {
    v2 = a1;
    a1 = *(_BYTE **)a1;
    v1 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v1 = a1[23];
  }
  sub_10006CD4C(a1, v1, &v4);
  return v4;
}

unint64_t sub_1000D90D8(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v1 = a1;
  v6 = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  v3 = sub_10006CD4C(a1, v2, &v6);
  if ((char)v1[23] < 0)
    v4 = *((_QWORD *)v1 + 1);
  else
    v4 = v1[23];
  if (v3 < v4)
    return v3 + 1;
  else
    return v6;
}

std::string *sub_1000D9140@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X8>)
{
  std::string *result;
  uint64_t v4;
  unint64_t v5;
  std::string::size_type v6;
  int v7;
  int v8;
  uint64_t v9;

  sub_1000C1E68(a1, a2);
  result = (std::string *)sub_10003AFE0(a2, (unint64_t)&xmmword_100419450);
  if ((_DWORD)result)
  {
    result = (std::string *)sub_10003AFE0(a2, (unint64_t)&stru_100419468);
    if ((_DWORD)result)
    {
      v4 = *(unsigned __int8 *)(a2 + 23);
      v5 = (v4 & 0x80u) == 0 ? a2 : *(_QWORD *)a2;
      v6 = (v4 & 0x80u) == 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
      if (v6)
      {
        while (v6)
        {
          v7 = *(unsigned __int8 *)(v5 - 1 + v6--);
          if (v7 == 46)
          {
            if (v6 != -1)
            {
              v8 = (char)v4;
              v9 = a2 + v4;
              if (v8 < 0)
                v9 = *(_QWORD *)a2 + *(_QWORD *)(a2 + 8);
              return std::string::erase((std::string *)a2, v6, v9 - v5 - v6);
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

void sub_1000D91E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1000D9204(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  void **v4;
  int v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_1000C1E68(a1, (uint64_t)__p);
  if (sub_10003AFE0((unint64_t)__p, (unint64_t)&xmmword_100419450)
    && sub_10003AFE0((unint64_t)__p, (unint64_t)&stru_100419468))
  {
    v3 = v7;
    if ((v7 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v7 & 0x80u) != 0)
      v3 = (unint64_t)__p[1];
    if (v3)
    {
      while (v3)
      {
        v5 = *((unsigned __int8 *)v4 + --v3);
        if (v5 == 46)
        {
          if (v3 == -1)
            break;
          sub_1000D5048(a2, (char *)v4 + v3);
          goto LABEL_14;
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_14:
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1000D92C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D92DC(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  uint64_t v15;
  std::string::size_type v18;
  std::string __p;
  __int128 v20;
  std::string __dst;
  __int128 v22;
  std::string v23;
  __int128 v24;
  std::string v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  std::string v29;
  __int128 v30;

  sub_10003B5B0(a1, &v29);
  if (*(char *)(a1 + 23) < 0)
    v6 = *(_QWORD *)(a1 + 8);
  else
    v6 = *(unsigned __int8 *)(a1 + 23);
  sub_10003B5B0(a2, &v27);
  if (*(char *)(a2 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    __dst = v29;
  v22 = v30;
  v9 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    __p = v27;
  v20 = v28;
  while (v22 != __PAIR128__(v6, a1))
  {
    v10 = (_QWORD)v20 == a2 && *((_QWORD *)&v20 + 1) == v7;
    if (v10 || sub_10003AFE0((unint64_t)&__dst, (unint64_t)&__p))
      break;
    sub_1000C6020(&__dst);
    sub_1000C6020(&__p);
  }
  sub_1000D9B74((char *)&v23, (__int128 *)&__dst, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v24 == v30 && v26 == v28)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_68;
  }
  if (v24 == __PAIR128__(v6, a1) && v26 == __PAIR128__(v7, a2))
  {
    if ((byte_100419467 & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = xmmword_100419450;
      v11 = unk_100419460;
LABEL_66:
      *(_QWORD *)(a3 + 16) = v11;
      goto LABEL_68;
    }
LABEL_67:
    sub_10006CED8((_BYTE *)a3, (void *)xmmword_100419450, *((unint64_t *)&xmmword_100419450 + 1));
    goto LABEL_68;
  }
  v12 = 0;
  while ((_QWORD)v26 != a2 || *((_QWORD *)&v26 + 1) != v7)
  {
    if (sub_10003AFE0((unint64_t)&v25, (unint64_t)&stru_100419468))
    {
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v25.__r_.__value_.__l.__size_;
      if (size && sub_10003AFE0((unint64_t)&v25, (unint64_t)&xmmword_100419450))
        ++v12;
    }
    else
    {
      --v12;
    }
    sub_1000C6020(&v25);
  }
  if (v12 < 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_68;
  }
  if (v12)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v15 = v12 + 1;
    *(_QWORD *)(a3 + 16) = 0;
    do
    {
      sub_10006CB94(a3, &stru_100419468);
      --v15;
    }
    while (v15 > 1);
  }
  else
  {
    if ((_QWORD)v24 == a1 && *((_QWORD *)&v24 + 1) == v6)
      goto LABEL_64;
    v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = v23.__r_.__value_.__l.__size_;
    if (!v18)
    {
LABEL_64:
      if ((byte_100419467 & 0x80000000) == 0)
      {
        *(_OWORD *)a3 = xmmword_100419450;
        v11 = unk_100419460;
        goto LABEL_66;
      }
      goto LABEL_67;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  while ((_QWORD)v24 != a1 || *((_QWORD *)&v24 + 1) != v6)
  {
    sub_10006CB94(a3, &v23);
    sub_1000C6020(&v23);
  }
LABEL_68:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_72:
      if ((v8 & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(v29.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if (v8 < 0)
    goto LABEL_76;
}

void sub_1000D968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  char v30;
  uint64_t v31;

  sub_1000D9740((uint64_t)&a30);
  if (v30 < 0)
    operator delete(*(void **)(v31 - 176));
  if (a11 < 0)
    operator delete(*(void **)(v31 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D9740(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000D9780(char *__s@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string::size_type v15;
  _BYTE *v16;
  unint64_t v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v2 = __s;
  if (__s[23] < 0)
  {
    v2 = *(char **)__s;
    v4 = *((_QWORD *)__s + 1);
  }
  else
  {
    v4 = __s[23];
  }
  v33 = 0;
  v5 = sub_10006CD4C(v2, v4, &v33);
  v6 = v33;
  sub_1000D64D8((_QWORD *)a2, v2, &v2[v33], v33);
  if (v5 < v4)
  {
    std::string::push_back((std::string *)a2, 47);
    v6 = v5 + 1;
  }
  if (v6 >= v4)
    return;
  v7 = v6;
  while (v2[v7] == 47)
  {
    if (v4 == ++v7)
      return;
  }
  do
  {
    v14 = &v2[v7];
    v15 = v4 - v7;
    v16 = memchr(&v2[v7], 47, v4 - v7);
    if (v16)
      v15 = v16 - v14;
    v8 = v15 + v7;
    if (v15 == 2)
    {
      if (*v14 != 46 || v2[v7 + 1] != 46)
        goto LABEL_56;
      v17 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
      {
        v18 = *(_QWORD *)(a2 + 8);
        if (v18 <= v6)
          goto LABEL_56;
      }
      else
      {
        v18 = *(unsigned __int8 *)(a2 + 23);
        if (v6 >= v17)
          goto LABEL_56;
      }
      v13 = *(_QWORD *)a2;
      if (v18 >= v6)
        v10 = v6;
      else
        v10 = v18;
      if ((v17 & 0x80u) == 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      v20 = v19 - 1;
      v21 = v18;
      while (v21 > v6)
      {
        v22 = v21 - 1;
        v23 = *(unsigned __int8 *)(v20 + v21--);
        if (v23 == 47)
        {
          v10 = v22 + 1;
          break;
        }
      }
      if (v18 - v10 != 2
        || ((v17 & 0x80u) == 0 ? (v24 = a2) : (v24 = *(_QWORD *)a2),
            *(_BYTE *)(v24 + v10) != 46 || *(_BYTE *)(v10 + v24 + 1) != 46))
      {
        if (v10 > v6)
        {
          v9 = (v17 & 0x80u) == 0 ? a2 : *(_QWORD *)a2;
          if (*(_BYTE *)(v9 + v10 - 1) == 47)
            --v10;
        }
        v11 = (char)v17;
        v12 = a2 + v17;
        if (v11 >= 0)
          v13 = a2;
        else
          v12 = v13 + *(_QWORD *)(a2 + 8);
        std::string::erase((std::string *)a2, v10, v12 - (v13 + v10));
LABEL_57:
        if (v8 == v4)
          goto LABEL_78;
        goto LABEL_11;
      }
LABEL_56:
      sub_10006CDE0(a2);
      std::string::append((std::string *)a2, &v2[v7], v15);
      goto LABEL_57;
    }
    if (v15 != 1 || *v14 != 46)
      goto LABEL_56;
    if (v8 == v4)
      break;
LABEL_11:
    if (v8 < v4)
    {
      while (v2[v8] == 47)
      {
        if (++v8 >= v4)
          goto LABEL_59;
      }
    }
    v7 = v8;
  }
  while (v8 != v4);
LABEL_59:
  v25 = *(unsigned __int8 *)(a2 + 23);
  v26 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    v27 = *(_QWORD *)(a2 + 8);
    if (!v27)
      goto LABEL_78;
    if (v27 == 1)
      goto LABEL_77;
LABEL_65:
    v28 = v27 - 1;
    if ((v26 & 0x80) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)a2 + v28) != 46)
        goto LABEL_77;
      v29 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      if (*(_BYTE *)(a2 + v28) != 46)
        goto LABEL_77;
      v29 = *(unsigned __int8 *)(a2 + 23);
    }
    v30 = v29 - 2;
    if ((v26 & 0x80) != 0)
    {
      v31 = *(_QWORD *)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + v30) != 46)
        goto LABEL_77;
      v25 = *(_QWORD *)(a2 + 8);
      if (v25 == 2)
        goto LABEL_78;
    }
    else
    {
      if (*(_BYTE *)(a2 + v30) != 46)
        goto LABEL_77;
      if (v26 == 2)
        goto LABEL_78;
      v31 = a2;
    }
    if (*(_BYTE *)(v25 + v31 - 3) != 47)
      goto LABEL_77;
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    if (v26 != 1)
    {
      v27 = *(unsigned __int8 *)(a2 + 23);
      goto LABEL_65;
    }
LABEL_77:
    sub_10006CDE0(a2);
  }
LABEL_78:
  v32 = *(unsigned __int8 *)(a2 + 23);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a2 + 8);
  if (!v32)
    std::string::push_back((std::string *)a2, 46);
}

void sub_1000D9AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D9B04(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_1000D9C20(a1, v2, v5, v6);
}

uint64_t sub_1000D9B3C(uint64_t a1)
{
  void *v2;

  if (qword_100419480)
  {
    std::locale::~locale((std::locale *)qword_100419480);
    operator delete(v2);
  }
  qword_100419480 = 0;
  return a1;
}

char *sub_1000D9B74(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v6;
  }
  *(_OWORD *)(__dst + 24) = *(__int128 *)((char *)a2 + 24);
  v7 = __dst + 40;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006CED8(v7, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)__dst + 7) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  *((_OWORD *)__dst + 4) = *(__int128 *)((char *)a3 + 24);
  return __dst;
}

void sub_1000D9C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000D9C20(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t sub_1000D9C7C()
{
  __cxa_atexit((void (*)(void *))sub_1000D9B3C, &unk_100419448, (void *)&_mh_execute_header);
  sub_1000D5048(&xmmword_100419450, ".");
  __cxa_atexit((void (*)(void *))sub_1000D4704, &xmmword_100419450, (void *)&_mh_execute_header);
  sub_1000D5048(&stru_100419468, "..");
  return __cxa_atexit((void (*)(void *))sub_1000D4704, &stru_100419468, (void *)&_mh_execute_header);
}

void sub_1000D9DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000D9E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000D9E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D9ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D9EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D9F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D9F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000D9FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DA05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DA070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DA270(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[2];
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_defaultErrHandlerForCaller:", CFSTR("retrieveLocationRelevancyDuration:")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "remoteObjectProxyWithErrorHandler:"));
  objc_msgSend(v4, "retrieveLocationRelevancyDurationWithCompletionHandler:", *(_QWORD *)(a1 + 40));

}

void sub_1000DA2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DA2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1000DA30C(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DA344(uint64_t a1)
{

}

void sub_1000DA540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DA578(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueuePrefetch:callback:when:", *(_QWORD *)(a1 + 40), a2, 0);
}

id sub_1000DA58C(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DA5C4(uint64_t a1)
{

}

void sub_1000DA6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1000DA6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DA8B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DA8EC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueuePrefetch:callback:when:", *(_QWORD *)(a1 + 40), a2, 1);
}

id sub_1000DA900(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DA938(uint64_t a1)
{

}

void sub_1000DAB1C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1000DABB0;
  v3[3] = &unk_1003EE548;
  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(id *)(a1 + 32);
  v4 = v2;
  (*(void (**)(uint64_t, _QWORD *))(v1 + 16))(v1, v3);

}

void sub_1000DAB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

intptr_t sub_1000DABB0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1000DABB8(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DABE0(uint64_t a1)
{

}

void sub_1000DAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1000DAD7C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueueEraseEverything:", a2);
}

id sub_1000DAD88(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DADB0(uint64_t a1)
{

}

void sub_1000DAEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000DAEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DAFF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueueShutdown");
}

id sub_1000DB000(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DB028(uint64_t a1)
{

}

void sub_1000DB124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DB138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1000DB2B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueueNumFloors:", *(_QWORD *)(a1 + 40));
}

id sub_1000DB2BC(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DB2F4(uint64_t a1)
{

}

void sub_1000DB420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000DB444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DB454(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

void sub_1000DB5E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000DB62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DB72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DB740(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1000DB758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DB850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DB868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DBB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;
  void *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1000DBB60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DBB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DBB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DBBA4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "withinQueueReinitializeRemoteState");

}

void sub_1000DBBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DBBEC(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void sub_1000DBBF8(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1000DBE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;

  a10.super_class = (Class)CLIndoorXPCProvider;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

id sub_1000DBE94(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE730);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      return objc_msgSend(*(id *)(a1 + 32), "withinQueueInvalidate");
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "performing dealloc", v4, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "withinQueueInvalidate");
}

id sub_1000DBF40(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DBF68(uint64_t a1)
{

}

id sub_1000DBFE4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  int v6;
  void *v7;

  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003EE730);
  v2 = (id)qword_100417EF0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "impl"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "endpointName"));
    v6 = 138543362;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "invalidate %{public}@", (uint8_t *)&v6, 0xCu);

  }
  return objc_msgSend(*(id *)(a1 + 32), "withinQueueInvalidate");
}

void sub_1000DC0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DC0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DC10C(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DC134(uint64_t a1)
{

}

void sub_1000DC2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DC2B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DC2C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id location, uint64_t a12, id a13)
{
  objc_destroyWeak(&location);
  objc_destroyWeak(&a13);
  _Unwind_Resume(a1);
}

void sub_1000DC494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location, id a13)
{
  void *v13;

  objc_destroyWeak(&location);
  objc_destroyWeak(&a13);
  _Unwind_Resume(a1);
}

void sub_1000DC4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DC4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DC4E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DC6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DC95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DC970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DC980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DCAA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DCAB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DCAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DCC48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DCC60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DCD64(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;

  v3 = a2;
  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003EE730);
  v4 = (id)qword_100417EF0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "description"));
    v7 = 138543618;
    v8 = v5;
    v9 = 2114;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "xpc error invoking %{public}@: %{public}@", (uint8_t *)&v7, 0x16u);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000DCE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DCEAC(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DCEE4(uint64_t a1)
{

}

void sub_1000DCF5C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

void sub_1000DCF8C(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000DD020;
    block[3] = &unk_1003EE788;
    v5 = WeakRetained;
    dispatch_async(v3, block);

  }
}

void sub_1000DD00C(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void sub_1000DD018(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

id sub_1000DD020(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "withinQueueInterruptionHandler");
}

void sub_1000DD028(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v2;
  NSObject *v3;
  _QWORD block[4];
  _QWORD *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000DD0BC;
    block[3] = &unk_1003EE788;
    v5 = WeakRetained;
    dispatch_async(v3, block);

  }
}

void sub_1000DD0A8(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void sub_1000DD0B4(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
}

void sub_1000DD0BC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD **)(a1 + 32);
  if (v2[1])
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "impl"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "withinQueuePermanentShutdownReason"));

    if (v4)
    {
      if (qword_100417EE8 != -1)
        dispatch_once(&qword_100417EE8, &stru_1003EE730);
      v5 = (id)qword_100417EF0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "impl"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "endpointName"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "description"));
        v12 = 138543618;
        v13 = v7;
        v14 = 2114;
        v15 = (uint64_t)v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "XPC connection invalidated by daemon to %{public}@: %{public}@", (uint8_t *)&v12, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 32), "withinQueueInvalidate");
    }
    else
    {
      if (qword_100417EE8 != -1)
        dispatch_once(&qword_100417EE8, &stru_1003EE730);
      v9 = (id)qword_100417EF0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "impl"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "endpointName"));
        v12 = 138543618;
        v13 = v11;
        v14 = 2050;
        v15 = 5000;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Invalidated pipelined XPC connection to %{public}@ - will retry in %{public}lld ms", (uint8_t *)&v12, 0x16u);

      }
      objc_msgSend(*(id *)(a1 + 32), "withinQueueHandleReconnect:", std::chrono::steady_clock::now().__d_.__rep_);
    }

  }
}

void sub_1000DD2D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DD33C()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_1000DD500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DD518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DDC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1000DE004(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

void sub_1000DE034()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_1000DE2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DE348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DE46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DE484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DE498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DE4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DE4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000DE4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DE4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1000DE590(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "withinQueueSetDelegate:", *(_QWORD *)(a1 + 40));
}

void sub_1000DE674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000DE6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DE6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DE910(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v3 = *(_QWORD *)(a1 + 40);
    v8 = 138412290;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "setting up play-back of %@", (uint8_t *)&v8, 0xCu);
  }
LABEL_4:
  v4 = *(_QWORD **)(a1 + 32);
  v5 = (void *)v4[2];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_defaultErrHandlerForCaller:", CFSTR("playbackDatarun:")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "remoteObjectProxyWithErrorHandler:", v6));
  objc_msgSend(v7, "playbackDatarun:", *(_QWORD *)(a1 + 40));

}

void sub_1000DEA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DEA68(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DEAA0(uint64_t a1)
{

}

void sub_1000DEB78(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  int v22;
  uint64_t v23;

  if (qword_100417EE8 == -1)
  {
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v22 = 134217984;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLIndoorPositionProvider startUpdatingLocationAtLocation], _connection = %p", (uint8_t *)&v22, 0xCu);
  }
LABEL_4:
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
    objc_msgSend(v5, "setLastLocation:", v4);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
  v7 = objc_msgSend(v6, "updateLocation");

  if (!v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastLocation"));
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "lastLocation"));
      v13 = objc_msgSend(v12, "isStaleFix:", std::chrono::steady_clock::now().__d_.__rep_);

      if (!v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
        objc_msgSend(v14, "setUpdateLocation:", 1);

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
        objc_msgSend(v15, "setPausedLocalization:", 0);

        v16 = *(_QWORD **)(a1 + 32);
        v17 = (void *)v16[2];
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "_defaultErrHandlerForCaller:", CFSTR("startUpdatingLocationAtLocation:")));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "remoteObjectProxyWithErrorHandler:", v18));
        objc_msgSend(v19, "startUpdatingLocationAtLocation:", *(_QWORD *)(a1 + 40));

        return;
      }
    }
    else
    {

    }
    if (qword_100417EE8 == -1)
    {
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      {
LABEL_17:
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
        objc_msgSend(v21, "setPausedLocalization:", 1);

        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
      v20 = qword_100417EF0;
      if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
        goto LABEL_17;
    }
    LOWORD(v22) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "WARNING: [CLIndoorPositionProvider startUpdatingLocationWithMode], no valid location", (uint8_t *)&v22, 2u);
    goto LABEL_17;
  }
  if (qword_100417EE8 == -1)
  {
    v8 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CLIndoorPositionProvider startUpdatingLocationAtLocation], already started", (uint8_t *)&v22, 2u);
    }
  }
  else
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v8 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
  }
}

void sub_1000DEEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DEF1C(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DEF54(uint64_t a1)
{

}

void sub_1000DF000(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  if (qword_100417EE8 == -1)
  {
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLIndoorPositionProvider stopUpdatingLocation], stop request", buf, 2u);
  }
LABEL_4:
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
  objc_msgSend(v3, "setPausedLocalization:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
  v5 = objc_msgSend(v4, "updateLocation");

  if ((v5 & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
    objc_msgSend(v6, "setUpdateLocation:", 0);

    v7 = *(_QWORD **)(a1 + 32);
    v8 = (void *)v7[2];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "_defaultErrHandlerForCaller:", CFSTR("stopUpdatingLocation")));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remoteObjectProxyWithErrorHandler:", v9));
    objc_msgSend(v10, "stopUpdatingLocation");

    return;
  }
  if (qword_100417EE8 == -1)
  {
    v11 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLIndoorPositionProvider stopUpdatingLocation], already stopped", v12, 2u);
    }
  }
  else
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v11 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_9;
  }
}

void sub_1000DF1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1000DF1F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DF208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DF218(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DF228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DF238(uint64_t a1, uint64_t a2)
{
  id result;

  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1000DF260(uint64_t a1)
{

}

void sub_1000DF318(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  _DWORD v21[2];
  __int16 v22;
  unsigned int v23;

  if (qword_100417EE8 == -1)
  {
    v2 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
    {
LABEL_3:
      LOWORD(v21[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "got outdoorLocationAvailabile", (uint8_t *)v21, 2u);
      v3 = qword_100417EE8;
      if (*(_QWORD *)(a1 + 40))
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  v3 = -1;
  if (*(_QWORD *)(a1 + 40))
  {
LABEL_4:
    if (v3 == -1)
    {
      v4 = (id)qword_100417EF0;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
      v4 = (id)qword_100417EF0;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
LABEL_7:

        v9 = *(_QWORD *)(a1 + 40);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
        objc_msgSend(v10, "setLastLocation:", v9);

        v11 = *(_QWORD **)(a1 + 32);
        v12 = (void *)v11[2];
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "_defaultErrHandlerForCaller:", CFSTR("outdoorLocationAvailable")));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "remoteObjectProxyWithErrorHandler:", v13));
        objc_msgSend(v14, "outdoorLocationAvailable:", *(_QWORD *)(a1 + 40));

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
        LODWORD(v14) = objc_msgSend(v15, "pausedLocalization");

        if ((_DWORD)v14)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
          objc_msgSend(v16, "setPausedLocalization:", 0);

          v17 = *(void **)(a1 + 32);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "state"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "lastLocation"));
          objc_msgSend(v17, "startUpdatingLocationAtLocation:", v19);

        }
        return;
      }
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
    v6 = objc_msgSend(v5, "pausedLocalization");
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "state"));
    v8 = objc_msgSend(v7, "updateLocation");
    v21[0] = 67109376;
    v21[1] = v6;
    v22 = 1024;
    v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLIndoorPositionProvider outdoorLocationAvailabile], state = %d,%d", (uint8_t *)v21, 0xEu);

    goto LABEL_7;
  }
LABEL_11:
  if (v3 == -1)
  {
    v20 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      return;
  }
  else
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v20 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_ERROR))
      return;
  }
  LOWORD(v21[0]) = 0;
  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CLIndoorPositionProvider outdoorLocationAvailable], got nil position", (uint8_t *)v21, 2u);
}

void sub_1000DF620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1000DF690(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DF6C8(uint64_t a1)
{

}

void sub_1000DF7A0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "gpsEstimateAvailable", v7, 2u);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 32);
  v4 = (void *)v3[2];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_defaultErrHandlerForCaller:", CFSTR("gpsEstimateAvailable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v5));
  objc_msgSend(v6, "gpsEstimateAvailable:", *(_QWORD *)(a1 + 40));

}

void sub_1000DF898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DF8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DF8BC(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DF8F4(uint64_t a1)
{

}

void sub_1000DF9CC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "gpsSignalQualityAvailable", v7, 2u);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 32);
  v4 = (void *)v3[2];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_defaultErrHandlerForCaller:", CFSTR("gpsSignalQualityAvailable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v5));
  objc_msgSend(v6, "gpsSignalQualityAvailable:", *(_QWORD *)(a1 + 40));

}

void sub_1000DFAC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DFAD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DFAE8(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DFB20(uint64_t a1)
{

}

void sub_1000DFBF8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "clVisionNotificationAvailable", v7, 2u);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 32);
  v4 = (void *)v3[2];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_defaultErrHandlerForCaller:", CFSTR("clVisionNotificationAvailable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v5));
  objc_msgSend(v6, "clVisionNotificationAvailable:", *(_QWORD *)(a1 + 40));

}

void sub_1000DFCF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DFD04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DFD14(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DFD4C(uint64_t a1)
{

}

void sub_1000DFE24(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003EE9A0);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "clpOutdoorEstimatorLogEntryNotificationAvailable", v7, 2u);
  }
LABEL_4:
  v3 = *(_QWORD **)(a1 + 32);
  v4 = (void *)v3[2];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_defaultErrHandlerForCaller:", CFSTR("clpOutdoorEstimatorLogEntryNotificationAvailable")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteObjectProxyWithErrorHandler:", v5));
  objc_msgSend(v6, "clpOutdoorEstimatorLogEntryNotificationAvailable:", *(_QWORD *)(a1 + 40));

}

void sub_1000DFF1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000DFF30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DFF40(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000DFF78(uint64_t a1)
{

}

void sub_1000DFFD8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

void sub_1000E0008()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_1000E013C()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

id sub_1000E0150()
{
  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003EE9C0);
  return (id)qword_100417EF0;
}

uint64_t sub_1000E019C()
{
  return usleep(0x30D40u);
}

void sub_1000E0450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000E0564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000E057C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000E05C4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

uint64_t *sub_1000E05F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void sub_1000E0828(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x2Cu);
}

void sub_1000E0848(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x2Cu);
}

void sub_1000E085C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x2Cu);
}

BOOL sub_1000E0870(NSObject *a1)
{
  NSObject **v1;

  *v1 = a1;
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL sub_1000E0880(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

void sub_1000E0888()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

id sub_1000E089C()
{
  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003EE9E0);
  return (id)qword_100417EF0;
}

uint64_t sub_1000E08E8(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

uint64_t sub_1000E095C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1000E09C4(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
  {
    sub_10009E290(v2);
    operator delete();
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_6:
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1000E0BFC(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

void sub_1000E0C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E1E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000E1ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E37CC()
{
  operator delete();
}

uint64_t sub_1000E3BEC(uint64_t a1)
{
  uint64_t result;
  id v3;
  NSObject *v4;
  void **v5;
  id v6;
  NSObject *v7;
  void **v8;
  id v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  void **v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;

  result = wireless_diagnostics::google::protobuf::MessageLite::SerializeToZeroCopyStream(a1);
  if ((result & 1) == 0)
  {
    v3 = sub_1000E3EF0();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      v5 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v5;
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "serialized";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to serialize-append properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    v6 = sub_1000E3EF0();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_signpost_enabled(v7))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v8;
      v19 = 2082;
      v20 = "assert";
      v21 = 2081;
      v22 = "serialized";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to serialize-append properly", "{\"msg%{public}.0s\":\"Failed to serialize-append properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    v9 = sub_1000E3EF0();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
      sub_100341ED0((char *)__p, buf, v10);
    }

    abort_report_np("%s:%d: assertion failure in %s", "../common/util/protobuf_util.h", 98, "append");
    __break(1u);
  }
  return result;
}

void sub_1000E3E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000E3E80(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Client");
  v2 = (void *)qword_100417EF0;
  qword_100417EF0 = (uint64_t)v1;

}

void sub_1000E3EB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EEA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000E3EC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EEA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_1000E3EF0()
{
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003EEA50);
  return (id)qword_100417EE0;
}

void sub_1000E3F3C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Generic");
  v2 = (void *)qword_100417EE0;
  qword_100417EE0 = (uint64_t)v1;

}

void sub_1000E3F6C()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

uint64_t sub_1000E3F80(_QWORD *a1, uint64_t a2)
{
  return *a1 + (uint64_t)((*(double *)(a2 + 8) + (double)*(uint64_t *)a2) * 1000000000.0);
}

uint64_t sub_1000E3FAC(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if ((~*(_DWORD *)(a1 + 52) & 0xC) != 0)
  {
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003EEA90);
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        return *(_QWORD *)(a1 + 40) - (uint64_t)(*(double *)(a1 + 32) * 1000000000.0);
      goto LABEL_4;
    }
    v2 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
    {
LABEL_4:
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Can't compute raven time offset to pipelined due to missing info", v4, 2u);
    }
  }
  return *(_QWORD *)(a1 + 40) - (uint64_t)(*(double *)(a1 + 32) * 1000000000.0);
}

uint64_t sub_1000E4080(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  int64x2_t v14[69];

  v8 = a1 + 8;
  sub_1000E4C04((int64x2_t *)(a1 + 8));
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = off_1003F9A88;
  *(_BYTE *)(a1 + 400) &= 0xFCu;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)a1 = 0;
  sub_1000E4D54(v14);
  if (!sub_1000E9084(a3, a2, (uint64_t)v14) || !sub_1000E42D0((uint64_t)v14, v8))
    goto LABEL_9;
  *(double *)(a1 + 384) = sub_10015BF40(*(double *)(a1 + 216));
  *(double *)(a1 + 392) = sub_10015BF40(*(double *)(a1 + 224));
  *(double *)(a1 + 368) = sqrt(*(double *)(a1 + 240) + *(double *)(a1 + 264));
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 40);
  if ((~*(_DWORD *)(a2 + 52) & 0xC) != 0)
  {
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_7;
      goto LABEL_6;
    }
    dispatch_once(&qword_100417ED8, &stru_1003EEA90);
    v9 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      LOWORD(v12[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Can't compute raven time offset to pipelined due to missing info", (uint8_t *)v12, 2u);
    }
  }
LABEL_7:
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 40)
                        - (uint64_t)(*(double *)(a2 + 32) * 1000000000.0)
                        + (uint64_t)((*(double *)(a1 + 24) + (double)*(uint64_t *)(a1 + 16)) * 1000000000.0);
  *(_BYTE *)a1 = 1;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v8);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a4 + 24))(v12);
  if (v13)
  {
    v10 = v12[1];
    *(_QWORD *)(a1 + 424) = v12[0];
    *(_BYTE *)(a1 + 432) = 1;
    *(_QWORD *)(a1 + 440) = v10;
    *(_BYTE *)(a1 + 448) = 1;
  }
LABEL_9:
  sub_1000ED590((cnframework::TimestampedEvent *)v14);
  return a1;
}

void sub_1000E4288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  cnframework::TimestampedEvent *v6;
  va_list va;

  va_start(va, a5);
  sub_1000ED590((cnframework::TimestampedEvent *)va);
  nullsub_22(v5 + 376);
  cnframework::TimestampedEvent::~TimestampedEvent(v6);
  _Unwind_Resume(a1);
}

BOOL sub_1000E42D0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  double v15;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  cnprint::CNPrinter *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  _QWORD v40[2];
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  int64x2_t v47[23];

  if (!*(_BYTE *)(a1 + 1080))
    return 0;
  memset(v47, 0, 360);
  sub_1000E4C04(v47);
  memcpy((void *)(a2 + 8), &v47[0].u64[1], 0x160uLL);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)v47);
  v4 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 8) = v4;
  v5 = *(_OWORD *)(a1 + 136);
  v6 = *(_OWORD *)(a1 + 152);
  v7 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(_OWORD *)(a2 + 40) = v5;
  v8 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = v8;
  v9 = *(_OWORD *)(a1 + 136);
  v10 = *(_OWORD *)(a1 + 152);
  v11 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 168) = v11;
  *(_OWORD *)(a2 + 152) = v10;
  *(_OWORD *)(a2 + 136) = v9;
  *(_BYTE *)(a2 + 200) = 14;
  *(_BYTE *)(a2 + 280) = 1;
  v12 = *(_QWORD **)(a1 + 704);
  *(_QWORD *)(a2 + 288) = *v12;
  *(_QWORD *)(a2 + 296) = v12[1];
  *(_QWORD *)(a2 + 304) = v12[2];
  v13 = *(_QWORD **)(a1 + 880);
  *(_QWORD *)(a2 + 312) = *v13;
  *(_QWORD *)(a2 + 320) = v13[1];
  *(_QWORD *)(a2 + 328) = v13[2];
  v14 = *(_DWORD *)(a1 + 868);
  *(_QWORD *)(a2 + 336) = v13[v14 + 1];
  *(_QWORD *)(a2 + 344) = v13[v14 + 2];
  *(_QWORD *)(a2 + 352) = v13[2 * v14 + 2];
  v15 = *(double *)(a1 + 1096);
  if (v15 < 2.0 && v15 > 0.0 && (*(_QWORD *)(a1 + 1096) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    v18 = *(double *)(a1 + 1096);
  else
    v18 = 0.0;
  v45 = 0;
  v46 = 0.0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v45, 0, 2.0);
  v43 = 0;
  v44 = 0.0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v43, 0, v18);
  v41 = *(_OWORD *)(a1 + 104);
  v40[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v40[1] = v19;
  v20 = CNTimeSpan::operator-(&v41, v40);
  v47[0] = 0uLL;
  v22 = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan((CNTimeSpan *)v47, 0, fabs(v21 + (double)v20));
  v23 = v47[0].i64[0];
  v42 = v47[0];
  v24 = *(double *)&v47[0].i64[1];
  if (!v47[0].i64[0] && (v47[0].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v46 < *(double *)&v47[0].i64[1])
      goto LABEL_28;
    goto LABEL_31;
  }
  if (!v45)
  {
    v25 = v46;
    if ((*(_QWORD *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_17;
  }
  if (v47[0].i64[0] == v45)
  {
    v25 = v46;
LABEL_17:
    if (v25 < *(double *)&v47[0].i64[1])
    {
LABEL_28:
      if (cnprint::CNPrinter::GetLogLevel(v22) <= 1)
      {
        v47[0].i16[0] = 12;
        LOBYTE(v41) = 1;
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        cnprint::CNPrinter::Print(v47, &v41, "VLLocalizationEvent, VL localization position too old to use, t_event,%.3lf, t_vl,%.3lf, dt,%.3lf > %.3lf ", v28 + (double)v27, *(double *)(a1 + 112) + (double)*(uint64_t *)(a1 + 104), v24 + (double)v23, v46 + (double)v45);
      }
      return 0;
    }
    goto LABEL_20;
  }
  if (v47[0].i64[0] > v45)
    goto LABEL_28;
LABEL_20:
  if (!v47[0].i64[0] && (v47[0].i64[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    goto LABEL_31;
  if (!v43)
  {
    v26 = v44;
    if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_32:
      if (v26 >= *(double *)&v47[0].i64[1])
        goto LABEL_40;
      goto LABEL_33;
    }
  }
  if (v47[0].i64[0] == v43)
  {
LABEL_31:
    v26 = v44;
    goto LABEL_32;
  }
  if (v47[0].i64[0] <= v43)
    goto LABEL_40;
LABEL_33:
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(double *)(a1 + 112);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((v30 || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (v32 || (*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && v30 != v32)
  {
    if (v30 >= v32)
      goto LABEL_40;
    goto LABEL_39;
  }
  if (v31 < v33)
  {
LABEL_39:
    memset(v47, 0, 96);
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)v47, 0, 0.0);
    v47[1].i8[0] = 0;
    v47[1].i64[1] = 0;
    v47[2].i64[0] = 0;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v47[1].u64[1], 0, 0.0);
    v47[2].i8[8] = 0;
    v47[3] = 0uLL;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v47[3], 0, 0.0);
    v47[4].i8[0] = 0;
    v47[4].i64[1] = 0;
    v47[5].i64[0] = 0;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v47[4].u64[1], 0, 0.0);
    v47[5].i64[1] = 0x7FF8000000000000;
    v34 = v47[3];
    *(int64x2_t *)(a2 + 136) = v47[2];
    *(int64x2_t *)(a2 + 152) = v34;
    v35 = v47[1];
    *(int64x2_t *)(a2 + 104) = v47[0];
    *(int64x2_t *)(a2 + 120) = v35;
    v36 = v47[5];
    *(int64x2_t *)(a2 + 168) = v47[4];
    *(int64x2_t *)(a2 + 184) = v36;
    v47[0] = *(int64x2_t *)(a1 + 104);
    v37 = CNTimeSpan::operator+(v47, &v42);
    *(_QWORD *)(a2 + 104) = v37;
    *(_QWORD *)(a2 + 112) = v38;
    *(_QWORD *)(a2 + 8) = v37;
    *(_QWORD *)(a2 + 16) = v38;
    v39 = (*(double *)&v42.i64[1] + (double)v42.i64[0]) * 2.5 * ((*(double *)&v42.i64[1] + (double)v42.i64[0]) * 2.5);
    *(double *)(a2 + 312) = *(double *)(a2 + 312) + v39;
    *(double *)(a2 + 336) = *(double *)(a2 + 336) + v39;
    *(double *)(a2 + 352) = v39 + *(double *)(a2 + 352);
  }
LABEL_40:
  if (sub_1000E5004(a2))
    sub_1000E5490(a2);
  return (*(unsigned __int8 *)(a2 + 201) | *(unsigned __int8 *)(a2 + 280)) != 0;
}

uint64_t sub_1000E4788(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = &off_1003EF108;
  v7 = a1 + 8;
  memcpy((void *)(a1 + 16), (const void *)(a3 + 8), 0x160uLL);
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = off_1003F9A88;
  *(_BYTE *)(a1 + 400) &= 0xFCu;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(double *)(a1 + 384) = sub_10015BF40(*(double *)(a1 + 216));
  *(double *)(a1 + 392) = sub_10015BF40(*(double *)(a1 + 224));
  *(double *)(a1 + 368) = sqrt(*(double *)(a1 + 240) + *(double *)(a1 + 264));
  v8 = *a2;
  *(_QWORD *)(a1 + 408) = *a2;
  *(_QWORD *)(a1 + 416) = v8;
  *(_BYTE *)a1 = 1;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, v7);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)*a4 + 24))(v11);
  if (v12)
  {
    v9 = v11[1];
    *(_QWORD *)(a1 + 424) = v11[0];
    *(_BYTE *)(a1 + 432) = 1;
    *(_QWORD *)(a1 + 440) = v9;
    *(_BYTE *)(a1 + 448) = 1;
  }
  return a1;
}

void sub_1000E489C(_Unwind_Exception *a1)
{
  uint64_t v1;
  cnframework::TimestampedEvent *v2;

  nullsub_22(v1 + 376);
  cnframework::TimestampedEvent::~TimestampedEvent(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E48C0(unsigned __int8 *a1)
{
  return *a1;
}

void sub_1000E48C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::string v5;

  *(_QWORD *)a2 = off_1003F9E78;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = off_1003F9A88;
  *(_BYTE *)(a2 + 56) &= 0xFCu;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_WORD *)(a2 + 136) &= 0xF800u;
  *(_QWORD *)(a2 + 128) = 0;
  sub_1000C9120(a2, a1 + 376);
  sub_1000C90BC(a2, *(double *)(a1 + 368));
  sub_100060878(a2, *(_QWORD *)(a1 + 408));
  sub_100060870(a2, *(_QWORD *)(a1 + 416));
  sub_100063BA8(a2, *(_QWORD *)(a1 + 408));
  v4 = *(unsigned __int8 *)(a1 + 208);
  if (v4 == 14)
  {
    std::to_string(&v5, 0x80u);
    sub_100005C3C(a2, &v5);
  }
  else
  {
    if (v4 != 15)
      return;
    std::to_string(&v5, 0x81u);
    sub_100005C3C(a2, &v5);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1000E49E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_100051ED0(v15);
    _Unwind_Resume(a1);
  }
  sub_100051ED0(v15);
  _Unwind_Resume(a1);
}

void sub_1000E4A28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::string v5;

  *(_QWORD *)a2 = off_1003F9B48;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = off_1003F9A88;
  *(_BYTE *)(a2 + 56) &= 0xFCu;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_QWORD *)(a2 + 176) = off_1003F9B28;
  *(_DWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 188) &= ~1u;
  *(_BYTE *)(a2 + 194) &= 0xFCu;
  *(_WORD *)(a2 + 192) = 0;
  sub_1000C9120(a2, a1 + 376);
  sub_1000CBBC8(a2, *(double *)(a1 + 368));
  sub_100060878(a2, *(_QWORD *)(a1 + 408));
  sub_100060870(a2, *(_QWORD *)(a1 + 416));
  sub_100063BA8(a2, *(_QWORD *)(a1 + 408));
  if (*(_BYTE *)(a1 + 432))
    sub_1000CBBDC(a2, *(double *)(a1 + 424));
  if (*(_BYTE *)(a1 + 448))
    sub_1000CBB0C(a2, *(double *)(a1 + 440));
  v4 = *(unsigned __int8 *)(a1 + 208);
  if (v4 == 15)
  {
    std::to_string(&v5, 0x81u);
    sub_1000CBB84(a2, &v5);
  }
  else
  {
    if (v4 != 14)
      return;
    std::to_string(&v5, 0x80u);
    sub_1000CBB84(a2, &v5);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1000E4B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_10000CF0C(v15);
    _Unwind_Resume(a1);
  }
  sub_10000CF0C(v15);
  _Unwind_Resume(a1);
}

void sub_1000E4BD8(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

int64x2_t *sub_1000E4C04(int64x2_t *a1)
{
  int64x2_t v2;

  a1->i64[0] = (uint64_t)&off_1003EF108;
  a1[1].i64[0] = 0;
  a1->i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1->u64[1], 0, 0.0);
  a1[2].i64[0] = 0;
  a1[1].i8[8] = 0;
  a1[2].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[2], 0, 0.0);
  a1[3].i64[1] = 0;
  a1[3].i8[0] = 0;
  a1[4].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[3].u64[1], 0, 0.0);
  a1[5].i64[0] = 0;
  a1[4].i8[8] = 0;
  a1[5].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[5], 0, 0.0);
  a1[6].i64[1] = 0;
  a1[6].i64[0] = 0x7FF8000000000000;
  a1[7].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[6].u64[1], 0, 0.0);
  a1[8].i64[0] = 0;
  a1[7].i8[8] = 0;
  a1[8].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[8], 0, 0.0);
  a1[9].i64[1] = 0;
  a1[9].i8[0] = 0;
  a1[10].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[9].u64[1], 0, 0.0);
  a1[11].i64[0] = 0;
  a1[10].i8[8] = 0;
  a1[11].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[11], 0, 0.0);
  a1[12].i64[0] = 0x7FF8000000000000;
  a1[12].i16[4] = 0;
  a1[12].i8[10] = 0;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[13] = v2;
  a1[14] = v2;
  a1[15] = v2;
  a1[16] = v2;
  a1[17].i64[0] = 0x7FF8000000000000;
  a1[17].i8[8] = 0;
  a1[18] = v2;
  a1[19] = v2;
  a1[20] = v2;
  a1[21] = v2;
  a1[22].i64[0] = 0x7FF8000000000000;
  return a1;
}

void sub_1000E4D40(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

int64x2_t *sub_1000E4D54(int64x2_t *a1)
{
  a1->i64[0] = (uint64_t)off_1003EF0D8;
  a1[1].i64[0] = 0;
  a1->i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1->u64[1], 0, 0.0);
  a1[2].i64[0] = 0;
  a1[1].i8[8] = 0;
  a1[2].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[2], 0, 0.0);
  a1[3].i64[1] = 0;
  a1[3].i8[0] = 0;
  a1[4].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[3].u64[1], 0, 0.0);
  a1[5].i64[0] = 0;
  a1[4].i8[8] = 0;
  a1[5].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[5], 0, 0.0);
  a1[6].i64[1] = 0;
  a1[6].i64[0] = 0x7FF8000000000000;
  a1[7].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[6].u64[1], 0, 0.0);
  a1[8].i64[0] = 0;
  a1[7].i8[8] = 0;
  a1[8].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[8], 0, 0.0);
  a1[9].i64[1] = 0;
  a1[9].i8[0] = 0;
  a1[10].i64[0] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[9].u64[1], 0, 0.0);
  a1[11].i64[0] = 0;
  a1[10].i8[8] = 0;
  a1[11].i64[1] = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&a1[11], 0, 0.0);
  a1[12].i64[0] = 0x7FF8000000000000;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&a1[12].u64[1]);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&a1[40]);
  a1[67].i8[8] = 0;
  a1[68] = vdupq_n_s64(0x7FF8000000000000uLL);
  return a1;
}

void sub_1000E4E88(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  *((_QWORD *)v1 + 65) = off_1003EEB18;
  *((_QWORD *)v1 + 51) = off_1003EEB18;
  *((_QWORD *)v1 + 37) = off_1003EEB18;
  *((_QWORD *)v1 + 29) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

void sub_1000E4EB4(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000E4EC8(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

void sub_1000E4ED8(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E4EF8(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E4F04(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[9];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

BOOL sub_1000E5004(uint64_t a1)
{
  int v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  double v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t *v32;
  int v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  int v53;
  uint64_t (**v54)();
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD v61[9];
  uint64_t (**v62)();
  __int128 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t (**v67)();
  __int128 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void (**v72)(char **, double, double);
  char v73;
  uint64_t (**v74)();
  __int128 v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t (**v79)();
  __int128 v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (**v84)();
  __int128 v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD v88[7];
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;

  if (*(_BYTE *)(a1 + 280))
  {
    v1 = 1;
  }
  else
  {
    v1 = *(unsigned __int8 *)(a1 + 201);
    if (*(_BYTE *)(a1 + 201))
    {
      v1 = *(unsigned __int8 *)(a1 + 202);
      if (*(_BYTE *)(a1 + 202))
      {
        v92 = 0uLL;
        v93 = 0;
        v90 = *(_OWORD *)(a1 + 208);
        v91 = *(_QWORD *)(a1 + 224);
        if (!cnnavigation::LLAToECEF(&v90, 1, &v92))
        {
          *(_OWORD *)(a1 + 288) = v92;
          *(_QWORD *)(a1 + 304) = v93;
          v86 = 0x300000003;
          v84 = off_1003EEAC0;
          v85 = xmmword_1003827C0;
          v87 = v88;
          v4 = *(_QWORD *)(a1 + 240);
          v5 = *(_QWORD *)(a1 + 248);
          v6 = *(_QWORD *)(a1 + 256);
          v88[0] = *(_QWORD *)(a1 + 232);
          v88[1] = v4;
          v88[2] = v5;
          v88[3] = v4;
          v7 = *(_OWORD *)(a1 + 264);
          v88[4] = v6;
          v88[5] = v7;
          v88[6] = v5;
          v89 = v7;
          v81 = 0x300000003;
          v79 = off_1003EEAC0;
          v80 = xmmword_1003827C0;
          v82 = &v83;
          *(_QWORD *)&v7 = *(_QWORD *)(a1 + 208);
          v8 = *(double *)(a1 + 216);
          v73 = 0;
          v76 = 0x300000003;
          v74 = off_1003EEAC0;
          v75 = xmmword_1003827C0;
          v77 = &v78;
          if (v73)
          {
            *(_QWORD *)&v80 = v75;
            v9 = (DWORD1(v75) * v75);
            DWORD2(v80) = DWORD1(v75) * v75;
            HIDWORD(v80) = v75;
            v10 = DWORD2(v75);
            if (SDWORD2(v75) > 3)
            {
              v23 = v82;
              v24 = v77;
              v25 = (DWORD2(v75) - 1) >> 1;
              v26 = (__int128 *)v77;
              v27 = v82;
              do
              {
                v28 = *v26++;
                *(_OWORD *)v27 = v28;
                v27 += 2;
                --v25;
              }
              while (v25);
              *(_OWORD *)&v23[v10 - 2] = *(_OWORD *)&v24[v10 - 2];
            }
            else if ((int)v9 >= 1)
            {
              v11 = 0;
              v12 = v77;
              v13 = v82;
              if (v9 < 4)
                goto LABEL_15;
              if ((unint64_t)((char *)v82 - (char *)v77) < 0x20)
                goto LABEL_15;
              v11 = v9 & 0x7FFFFFFC;
              v14 = (__int128 *)(v77 + 2);
              v15 = v82 + 2;
              v16 = v9 & 0xFFFFFFFC;
              do
              {
                v17 = *v14;
                *(v15 - 1) = *(v14 - 1);
                *v15 = v17;
                v14 += 2;
                v15 += 2;
                v16 -= 4;
              }
              while (v16);
              if (v11 != v9)
              {
LABEL_15:
                v18 = v9 - v11;
                v19 = v11;
                v20 = &v13[v19];
                v21 = &v12[v19];
                do
                {
                  v22 = *v21++;
                  *v20++ = v22;
                  --v18;
                }
                while (v18);
              }
            }
          }
          v64 = 0x300000003;
          v62 = off_1003EEAC0;
          v63 = xmmword_1003827C0;
          v65 = &v66;
          sub_1000E5948((uint64_t)&v79, (uint64_t)&v84, (uint64_t)&v62);
          v29 = SDWORD1(v80);
          v30 = v80;
          v59 = 0x300000003;
          v54 = off_1003EEAC0;
          v60 = v61;
          v55 = DWORD1(v80);
          v56 = v80;
          v57 = v80 * DWORD1(v80);
          v58 = DWORD1(v80);
          if (DWORD1(v80) && (_DWORD)v80)
          {
            v31 = HIDWORD(v80);
            v32 = v82;
            if (v80 >= 0xC)
            {
              v43 = 0;
              v44 = 0;
              v45 = v80 - 1;
              v46 = v80 & 0xFFFFFFFC;
              do
              {
                v47 = 0;
                if ((_DWORD)v29 != 1)
                  goto LABEL_39;
                if (v44 + v45 < v44)
                  goto LABEL_39;
                if (v31 * v44 + v45 < v31 * v44)
                  goto LABEL_39;
                if ((unint64_t)((char *)&v61[v44] - (char *)&v32[v31 * v44]) < 0x20)
                  goto LABEL_39;
                v48 = 0;
                do
                {
                  v49 = (__int128 *)&v32[v43 + v48];
                  v50 = *v49;
                  v51 = v49[1];
                  v52 = &v61[v44 + v48];
                  *v52 = v50;
                  v52[1] = v51;
                  v48 += 4;
                }
                while (v46 != v48);
                v47 = v30 & 0xFFFFFFFC;
                if (v30 != v46)
                {
LABEL_39:
                  v53 = v44 + v29 * v47;
                  do
                  {
                    v61[v53] = v32[v43 + v47++];
                    v53 += v29;
                  }
                  while (v30 != v47);
                }
                ++v44;
                v43 += v31;
              }
              while (v44 != (_DWORD)v29);
            }
            else
            {
              v33 = 0;
              v34 = 0;
              do
              {
                v35 = &v61[v34];
                v36 = v30;
                v37 = &v32[v33];
                do
                {
                  v38 = *v37++;
                  *v35 = v38;
                  v35 += v29;
                  --v36;
                }
                while (v36);
                ++v34;
                v33 += v31;
              }
              while (v34 != (_DWORD)v29);
            }
          }
          v69 = 0x300000003;
          v67 = off_1003EEAC0;
          v68 = xmmword_1003827C0;
          v70 = &v71;
          sub_1000E5948((uint64_t)&v62, (uint64_t)&v54, (uint64_t)&v67);
          v39 = v70;
          *(_QWORD *)(a1 + 312) = *v70;
          v40 = SHIDWORD(v68);
          v41 = &v39[SHIDWORD(v68)];
          *(_QWORD *)(a1 + 320) = *v41;
          *(_QWORD *)(a1 + 328) = v39[2 * v40];
          *(_QWORD *)(a1 + 336) = v41[1];
          v42 = &v39[2 * (int)v40];
          *(_QWORD *)(a1 + 344) = v42[1];
          *(_QWORD *)(a1 + 352) = v42[2];
          *(_BYTE *)(a1 + 280) = 1;
          cnnavigation::ENUToECEFJacobian::~ENUToECEFJacobian((cnnavigation::ENUToECEFJacobian *)&v72);
        }
        v1 = *(unsigned __int8 *)(a1 + 280);
      }
    }
  }
  return v1 != 0;
}

void sub_1000E5450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  cnnavigation::ENUToECEFJacobian::~ENUToECEFJacobian((cnnavigation::ENUToECEFJacobian *)&a53);
  _Unwind_Resume(a1);
}

void sub_1000E5464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  cnnavigation::ENUToECEFJacobian::~ENUToECEFJacobian((cnnavigation::ENUToECEFJacobian *)&a53);
  _Unwind_Resume(a1);
}

void sub_1000E5478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  cnnavigation::details::JacobianBase::~JacobianBase((cnnavigation::details::JacobianBase *)&a53);
  _Unwind_Resume(a1);
}

BOOL sub_1000E5490(uint64_t a1)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  int v33;
  _QWORD *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  int v52;
  uint64_t (**v53)();
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD v60[9];
  uint64_t (**v61)();
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (**v66)();
  __int128 v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  void (**v71)(char **);
  char v72;
  uint64_t (**v73)();
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t (**v78)();
  __int128 v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t (**v83)();
  __int128 v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD v87[7];
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v2 = *(unsigned __int8 *)(a1 + 201);
  if (*(_BYTE *)(a1 + 201) && *(_BYTE *)(a1 + 202))
    return *(_BYTE *)(a1 + 202) != 0;
  if (!*(_BYTE *)(a1 + 280))
    goto LABEL_29;
  v91 = *(_OWORD *)(a1 + 288);
  v92 = *(_QWORD *)(a1 + 304);
  v89 = 0;
  v90 = 0uLL;
  if (!cnnavigation::ECEFToLLA(&v91, 1, &v89))
  {
    *(_QWORD *)(a1 + 208) = v89;
    *(_OWORD *)(a1 + 216) = v90;
    v85 = 0x300000003;
    v83 = off_1003EEAC0;
    v84 = xmmword_1003827C0;
    v86 = v87;
    v4 = *(_QWORD *)(a1 + 320);
    v5 = *(_QWORD *)(a1 + 328);
    v6 = *(_QWORD *)(a1 + 336);
    v87[0] = *(_QWORD *)(a1 + 312);
    v87[1] = v4;
    v87[2] = v5;
    v87[3] = v4;
    v7 = *(_OWORD *)(a1 + 344);
    v87[4] = v6;
    v87[5] = v7;
    v87[6] = v5;
    v88 = v7;
    v80 = 0x300000003;
    v78 = off_1003EEAC0;
    v79 = xmmword_1003827C0;
    v81 = &v82;
    v72 = 0;
    v75 = 0x300000003;
    v73 = off_1003EEAC0;
    v74 = xmmword_1003827C0;
    v76 = &v77;
    if (v72)
    {
      *(_QWORD *)&v79 = v74;
      v8 = (DWORD1(v74) * v74);
      DWORD2(v79) = DWORD1(v74) * v74;
      HIDWORD(v79) = v74;
      v9 = DWORD2(v74);
      if (SDWORD2(v74) > 3)
      {
        v22 = v81;
        v23 = v76;
        v24 = (DWORD2(v74) - 1) >> 1;
        v25 = (__int128 *)v76;
        v26 = v81;
        do
        {
          v27 = *v25++;
          *(_OWORD *)v26 = v27;
          v26 += 2;
          --v24;
        }
        while (v24);
        *(_OWORD *)&v22[v9 - 2] = *(_OWORD *)&v23[v9 - 2];
      }
      else if ((int)v8 >= 1)
      {
        v10 = 0;
        v11 = v76;
        v12 = v81;
        if (v8 < 4)
          goto LABEL_15;
        if ((unint64_t)((char *)v81 - (char *)v76) < 0x20)
          goto LABEL_15;
        v10 = v8 & 0x7FFFFFFC;
        v13 = (__int128 *)(v76 + 2);
        v14 = v81 + 2;
        v15 = v8 & 0xFFFFFFFC;
        do
        {
          v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v10 != v8)
        {
LABEL_15:
          v17 = v8 - v10;
          v18 = v10;
          v19 = &v12[v18];
          v20 = &v11[v18];
          do
          {
            v21 = *v20++;
            *v19++ = v21;
            --v17;
          }
          while (v17);
        }
      }
    }
    v63 = 0x300000003;
    v61 = off_1003EEAC0;
    v62 = xmmword_1003827C0;
    v64 = &v65;
    sub_1000E5948((uint64_t)&v78, (uint64_t)&v83, (uint64_t)&v61);
    v28 = SDWORD1(v79);
    v29 = v79;
    v58 = 0x300000003;
    v53 = off_1003EEAC0;
    v59 = v60;
    v54 = DWORD1(v79);
    v55 = v79;
    v56 = v79 * DWORD1(v79);
    v57 = DWORD1(v79);
    if (DWORD1(v79) && (_DWORD)v79)
    {
      v30 = HIDWORD(v79);
      v31 = v81;
      if (v79 >= 0xC)
      {
        v42 = 0;
        v43 = 0;
        v44 = v79 - 1;
        v45 = v79 & 0xFFFFFFFC;
        do
        {
          v46 = 0;
          if ((_DWORD)v28 != 1)
            goto LABEL_40;
          if (v43 + v44 < v43)
            goto LABEL_40;
          if (v30 * v43 + v44 < v30 * v43)
            goto LABEL_40;
          if ((unint64_t)((char *)&v60[v43] - (char *)&v31[v30 * v43]) < 0x20)
            goto LABEL_40;
          v47 = 0;
          do
          {
            v48 = (__int128 *)&v31[v42 + v47];
            v49 = *v48;
            v50 = v48[1];
            v51 = &v60[v43 + v47];
            *v51 = v49;
            v51[1] = v50;
            v47 += 4;
          }
          while (v45 != v47);
          v46 = v29 & 0xFFFFFFFC;
          if (v29 != v45)
          {
LABEL_40:
            v52 = v43 + v28 * v46;
            do
            {
              v60[v52] = v31[v42 + v46++];
              v52 += v28;
            }
            while (v29 != v46);
          }
          ++v43;
          v42 += v30;
        }
        while (v43 != (_DWORD)v28);
      }
      else
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = &v60[v33];
          v35 = v29;
          v36 = &v31[v32];
          do
          {
            v37 = *v36++;
            *v34 = v37;
            v34 += v28;
            --v35;
          }
          while (v35);
          ++v33;
          v32 += v30;
        }
        while (v33 != (_DWORD)v28);
      }
    }
    v68 = 0x300000003;
    v66 = off_1003EEAC0;
    v67 = xmmword_1003827C0;
    v69 = &v70;
    sub_1000E5948((uint64_t)&v61, (uint64_t)&v53, (uint64_t)&v66);
    v38 = v69;
    *(_QWORD *)(a1 + 232) = *v69;
    v39 = SHIDWORD(v67);
    v40 = &v38[SHIDWORD(v67)];
    *(_QWORD *)(a1 + 240) = *v40;
    *(_QWORD *)(a1 + 248) = v38[2 * v39];
    *(_QWORD *)(a1 + 256) = v40[1];
    v41 = &v38[2 * (int)v39];
    *(_QWORD *)(a1 + 264) = v41[1];
    *(_QWORD *)(a1 + 272) = v41[2];
    *(_WORD *)(a1 + 201) = 257;
    cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v71);
    v2 = *(unsigned __int8 *)(a1 + 201);
LABEL_29:
    if (!v2)
      return 0;
    return *(_BYTE *)(a1 + 202) != 0;
  }
  if (!*(_BYTE *)(a1 + 201))
    return 0;
  return *(_BYTE *)(a1 + 202) != 0;
}

void sub_1000E5908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a54);
  _Unwind_Resume(a1);
}

void sub_1000E591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a54);
  _Unwind_Resume(a1);
}

void sub_1000E5930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  cnnavigation::details::JacobianBase::~JacobianBase((cnnavigation::details::JacobianBase *)&a54);
  _Unwind_Resume(a1);
}

void sub_1000E5948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldc;
  uint64_t __ldb;
  uint64_t v5;
  uint64_t v6;
  uint32x4_t v7;
  const double *v8;
  BOOL v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  double v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double v35;
  uint64_t v36;
  float64x2_t *v37;
  uint64_t v38;
  float64x2_t *v39;
  double *v40;
  double *v41;
  double v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double *v48;
  double *v49;
  uint64_t v50;
  double v51;

  __ldc = *(_QWORD *)(a1 + 8);
  __ldb = *(_QWORD *)(a2 + 8);
  v5 = __ldc;
  *(_QWORD *)(a3 + 8) = __PAIR64__(HIDWORD(__ldb), __ldc);
  v6 = HIDWORD(__ldb);
  *(_DWORD *)(a3 + 16) = HIDWORD(__ldb) * __ldc;
  *(_DWORD *)(a3 + 20) = __ldc;
  v7.i64[0] = __ldc;
  v7.i64[1] = __ldb;
  v8 = *(const double **)(a1 + 32);
  if ((int)vmaxvq_u32(v7) > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, __ldc, SHIDWORD(__ldb), SHIDWORD(__ldc), 1.0, v8, __ldc, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), __ldc);
  }
  else
  {
    if (HIDWORD(__ldb))
      v9 = (_DWORD)__ldc == 0;
    else
      v9 = 1;
    if (!v9)
    {
      v10 = *(double **)(a3 + 32);
      v11 = HIDWORD(__ldc);
      if (HIDWORD(__ldc))
      {
        v12 = *(double **)(a2 + 32);
        v13 = __ldb;
        if (HIDWORD(__ldc) > 3)
        {
          if ((_DWORD)__ldc == 1)
          {
            v18 = HIDWORD(__ldc) & 0xFFFFFFFC;
            v19 = HIDWORD(__ldc) - v18;
            if (HIDWORD(__ldc) == v18)
            {
              v20 = 0;
              v21 = (float64x2_t *)(v12 + 2);
              do
              {
                v22 = 0.0;
                v23 = (float64x2_t *)(v8 + 2);
                v24 = v21;
                v25 = v18;
                do
                {
                  v26 = vmulq_f64(v23[-1], v24[-1]);
                  v27 = vmulq_f64(*v23, *v24);
                  v22 = v22 + v26.f64[0] + v26.f64[1] + v27.f64[0] + v27.f64[1];
                  v24 += 2;
                  v23 += 2 * v5;
                  v25 -= 4;
                }
                while (v25);
                v10[v20 * v5] = v22;
                ++v20;
                v21 = (float64x2_t *)((char *)v21 + 8 * v13);
              }
              while (v20 != v6);
            }
            else
            {
              v36 = 0;
              v37 = (float64x2_t *)(v12 + 2);
              v38 = 8 * __ldb;
              v39 = (float64x2_t *)(v8 + 2);
              v40 = &v12[4 * ((unint64_t)HIDWORD(__ldc) >> 2)];
              v41 = (double *)&v8[4 * (HIDWORD(__ldc) >> 2)];
              do
              {
                v42 = 0.0;
                v43 = v39;
                v44 = v37;
                v45 = v18;
                do
                {
                  v46 = vmulq_f64(v43[-1], v44[-1]);
                  v47 = vmulq_f64(*v43, *v44);
                  v42 = v42 + v46.f64[0] + v46.f64[1] + v47.f64[0] + v47.f64[1];
                  v44 += 2;
                  v43 += 2 * v5;
                  v45 -= 4;
                }
                while (v45);
                v48 = v41;
                v49 = v40;
                v50 = v19;
                do
                {
                  v51 = *v49++;
                  v42 = v42 + *v48 * v51;
                  v48 += v5;
                  --v50;
                }
                while (v50);
                v10[v36 * v5] = v42;
                ++v36;
                v37 = (float64x2_t *)((char *)v37 + v38);
                v40 = (double *)((char *)v40 + v38);
              }
              while (v36 != v6);
            }
          }
          else
          {
            v28 = 0;
            do
            {
              v29 = 0;
              v30 = (double *)v8;
              do
              {
                v31 = 0.0;
                v32 = v11;
                v33 = v12;
                v34 = v30;
                do
                {
                  v35 = *v33++;
                  v31 = v31 + *v34 * v35;
                  v34 += v5;
                  --v32;
                }
                while (v32);
                v10[v28 * v5 + v29++] = v31;
                ++v30;
              }
              while (v29 != v5);
              ++v28;
              v12 += __ldb;
            }
            while (v28 != HIDWORD(__ldb));
          }
        }
        else
        {
          v14 = 0;
          v15 = 8 * __ldc;
          do
          {
            v16 = 0;
            do
            {
              v17 = v8[v16 / 8] * v12[v14 * __ldb] + 0.0;
              if (HIDWORD(__ldc) != 1)
              {
                v17 = v17 + v8[__ldc + v16 / 8] * v12[v14 * __ldb + 1];
                if (HIDWORD(__ldc) != 2)
                  v17 = v17 + v8[2 * __ldc + v16 / 8] * v12[v14 * __ldb + 2];
              }
              v10[v16 / 8] = v17;
              v16 += 8;
            }
            while (v15 != v16);
            ++v14;
            v10 = (double *)((char *)v10 + v15);
          }
          while (v14 != HIDWORD(__ldb));
        }
      }
      else
      {
        bzero(v10, 8 * __ldc * (unint64_t)HIDWORD(__ldb));
      }
    }
  }
}

uint64_t sub_1000E5C48(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t __ldc;
  unint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  NSObject *v28;
  double v29;
  char v30;
  NSObject *v31;
  uint64_t v32;
  double v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 *v36;
  double *v37;
  __int128 v38;
  double *v39;
  uint64_t __ldb;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  __int128 *v49;
  _QWORD *v50;
  uint64_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  double *v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  double *v63;
  unint64_t v64;
  double v65;
  double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  _QWORD *v71;
  _QWORD *v72;
  double *v73;
  uint64_t v74;
  double *v75;
  double *v76;
  double v77;
  double v78;
  double v79;
  _BYTE *v80;
  _QWORD *v81;
  uint64_t v82;
  float64x2_t *v83;
  float64x2_t *v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  int v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  __int128 v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  double *v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  double *v115;
  __int128 v116;
  __int128 v117;
  _OWORD *v118;
  __int128 v119;
  double v120;
  double v121;
  __int128 *v122;
  _OWORD *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  float64x2_t *v128;
  uint64_t v129;
  double v130;
  float64x2_t *v131;
  float64x2_t *v132;
  uint64_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  double *v139;
  double v140;
  double *v141;
  double *v142;
  unint64_t v143;
  double v144;
  __int128 *v145;
  uint64_t *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t (**v149)();
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD v156[2];
  uint64_t (**v157)();
  __int128 v158;
  uint64_t v159;
  double *v160;
  uint64_t v161;
  uint64_t (**v162)();
  __int128 v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD v166[17];
  _QWORD v167[2];
  int v168;
  int v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD v172[2];
  uint64_t v173;
  uint64_t (**v174)();
  __int128 v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  _QWORD v179[2];
  int v180;
  int v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD v184[10];
  __int128 v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD v188[10];
  __int128 v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE v192[72];
  uint64_t (**v193)();
  __int128 v194;
  uint64_t v195;
  double *v196;
  double v197[3];
  int v198;
  int v199;
  int v200;
  int v201;
  uint64_t v202;
  double *v203;
  double __C[5];
  int v205;
  int v206;
  uint64_t v207;
  double *v208;
  double __B[2];
  uint64_t v210;
  _QWORD v211[2];
  int v212;
  int v213;
  uint64_t v214;
  double *v215;
  double v216[2];
  _BYTE v217[56];
  void (**v218)(char **);
  char v219;
  uint64_t (**v220)();
  __int128 __lda;
  uint64_t v222;
  _QWORD *v223;
  _QWORD v224[10];
  __int128 v225;
  uint64_t v226;
  __int128 *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t (**v230)();
  __int128 v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD v234[2];
  uint64_t v235;
  _OWORD v236[23];
  _BYTE buf[360];

  if (*(_BYTE *)(a1 + 400))
  {
    v4 = (uint64_t *)(a1 + 408);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v7 = *(_QWORD *)(a1 + 408);
    if (v7 || (v8 = *(double *)(a1 + 416), (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
    {
      if (v5)
        v9 = 1;
      else
        v9 = (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v9 && v7 != v5)
      {
        if (v7 > v5)
          goto LABEL_12;
        goto LABEL_16;
      }
      v8 = *(double *)(a1 + 416);
    }
    if (v8 > v6)
    {
LABEL_12:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      if (*(_BYTE *)(a1 + 400))
      {
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = &off_1003EF108;
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
        *(_BYTE *)(a1 + 400) = 1;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      goto LABEL_23;
    }
LABEL_16:
    *(_OWORD *)buf = *(_OWORD *)(a2 + 208);
    v236[0] = *(_OWORD *)(a1 + 248);
    if (sub_10015C1F8((double *)buf, (double *)v236) < 1.0)
    {
LABEL_17:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
LABEL_23:
      *v4 = result;
      goto LABEL_24;
    }
    v12 = *(double *)(a1 + 8);
    *(_QWORD *)buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    *(_QWORD *)&buf[8] = v13;
    v14 = (double)CNTimeSpan::operator-(buf, a1 + 408);
    if (v12 < v15 + v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      if (*(_BYTE *)(a1 + 400))
      {
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = &off_1003EF108;
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
        *(_BYTE *)(a1 + 400) = 1;
      }
      goto LABEL_17;
    }
    if (!*(_BYTE *)(a1 + 400))
      sub_1000E7B58();
    if (!*(_BYTE *)(a1 + 320) || !*(_BYTE *)(a2 + 280))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003EEBB8);
      v28 = qword_100417EE0;
      v29 = 0.0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Can't compute course estimation from incomplete position events", buf, 2u);
      }
      v30 = 0;
      goto LABEL_87;
    }
    *(_QWORD *)&v12 = 0x100000003;
    v232 = 0x100000003;
    v230 = off_1003EEBE8;
    v231 = xmmword_100382850;
    v233 = v234;
    v16 = *(_QWORD *)(a1 + 336);
    v234[0] = *(_QWORD *)(a1 + 328);
    v234[1] = v16;
    v235 = *(_QWORD *)(a1 + 344);
    v226 = 0x100000003;
    v224[9] = off_1003EEBE8;
    v225 = xmmword_100382850;
    v227 = &v228;
    v228 = *(_OWORD *)(a2 + 288);
    v229 = *(_QWORD *)(a2 + 304);
    v222 = 0x300000003;
    v220 = off_1003EEAC0;
    __lda = xmmword_1003827C0;
    v223 = v224;
    v219 = 0;
    memset(v236, 0, 24);
    *(_QWORD *)buf = v234[0];
    *(_QWORD *)&buf[8] = v16;
    *(_QWORD *)&buf[16] = v235;
    if (!cnnavigation::ECEFToLLA(buf, 1, v236))
      ((void (*)(void (***)(char **), double, double))v218[2])(&v218, *(double *)v236, *((double *)v236 + 1));
    if (!v219)
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003EEBB8);
      v31 = qword_100417EE0;
      v29 = 0.0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
        *(_DWORD *)buf = 134283521;
        *(double *)&buf[4] = v33 + (double)v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "jEcef2Enu computation failed for position event at %{private}.3lf", buf, 0xCu);
      }
      goto LABEL_85;
    }
    v214 = 0x300000003;
    v211[0] = off_1003EEAC0;
    v215 = v216;
    __ldc = __lda;
    v18 = DWORD1(__lda);
    v211[1] = __lda;
    v19 = (DWORD1(__lda) * __lda);
    v212 = DWORD1(__lda) * __lda;
    v213 = __lda;
    v20 = DWORD2(__lda);
    if (SDWORD2(__lda) > 3)
    {
      v34 = v223;
      v35 = (DWORD2(__lda) - 1) >> 1;
      v36 = (__int128 *)v223;
      v37 = v216;
      do
      {
        v38 = *v36++;
        *(_OWORD *)v37 = v38;
        v37 += 2;
        --v35;
      }
      while (v35);
      *(_OWORD *)&v216[v20 - 2] = *(_OWORD *)&v34[v20 - 2];
    }
    else
    {
      if ((int)v19 < 1)
        goto LABEL_53;
      v21 = v223;
      if (v19 < 6 || (unint64_t)((char *)v211 - (char *)v223 + 40) < 0x20)
      {
        v22 = 0;
LABEL_36:
        v23 = v19 - v22;
        v24 = v22;
        v25 = &v211[v22 + 5];
        v26 = &v21[v24];
        do
        {
          v27 = *v26++;
          *v25++ = v27;
          --v23;
        }
        while (v23);
        goto LABEL_53;
      }
      v22 = v19 & 0x7FFFFFFC;
      v122 = (__int128 *)(v223 + 2);
      v123 = v217;
      v124 = v19 & 0xFFFFFFFC;
      do
      {
        v125 = *v122;
        *(v123 - 1) = *(v122 - 1);
        *v123 = v125;
        v122 += 2;
        v123 += 2;
        v124 -= 4;
      }
      while (v124);
      if (v22 != v19)
        goto LABEL_36;
    }
LABEL_53:
    v207 = 0x100000003;
    *(_QWORD *)&__C[3] = off_1003EEBE8;
    v39 = __B;
    v208 = __B;
    __ldb = v225;
    v41 = DWORD1(v225);
    *(_QWORD *)&__C[4] = v225;
    v42 = (DWORD1(v225) * v225);
    v205 = v42;
    v206 = v225;
    if ((int)v42 > 3)
    {
      v49 = v227;
      v50 = v233;
      v51 = (v42 - 1) >> 1;
      v52 = (float64x2_t *)v227;
      v53 = (float64x2_t *)v233;
      v54 = (float64x2_t *)__B;
      do
      {
        v55 = *v52++;
        v56 = v55;
        v57 = *v53++;
        *v54++ = vsubq_f64(v56, v57);
        --v51;
      }
      while (v51);
      *(float64x2_t *)&__B[(v42 - 2)] = vsubq_f64(*(float64x2_t *)((char *)v49 + 8 * (v42 - 2)), *(float64x2_t *)&v50[(v42 - 2)]);
    }
    else if ((int)v42 >= 1)
    {
      v43 = (double *)v227;
      v44 = (double *)v233;
      v45 = __B;
      do
      {
        v46 = *v43++;
        v47 = v46;
        v48 = *v44++;
        *v45++ = v47 - v48;
        --v42;
      }
      while (v42);
    }
    v202 = 0x100000003;
    *(_QWORD *)&v197[2] = off_1003EEBE8;
    v58 = __C;
    v203 = __C;
    v198 = __ldc;
    v199 = v41;
    v200 = v41 * __ldc;
    v201 = __ldc;
    if (__ldc <= v18)
      v59 = v18;
    else
      v59 = __ldc;
    if (__ldb <= v41)
      v60 = v41;
    else
      v60 = __ldb;
    if (v59 <= v60)
      v59 = v60;
    if (v59 > 5)
    {
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, __ldc, v41, v18, 1.0, v216, __ldc, __B, __ldb, 0.0, __C, __ldc);
      v58 = v203;
    }
    else if ((_DWORD)v41 && (_DWORD)__ldc)
    {
      if ((_DWORD)v18)
      {
        v61 = 8 * __ldc;
        if (v18 >= 4)
        {
          v126 = 0;
          v127 = 8 * __ldb;
          v128 = (float64x2_t *)&v210;
          do
          {
            v129 = v126 * __ldc;
            if ((_DWORD)__ldc == 1)
            {
              v130 = 0.0;
              v131 = (float64x2_t *)v217;
              v132 = v128;
              v133 = v18 & 0xFFFFFFFC;
              do
              {
                v134 = vmulq_f64(v131[-1], v132[-1]);
                v135 = vmulq_f64(*v131, *v132);
                v130 = v130 + v134.f64[0] + v134.f64[1] + v135.f64[0] + v135.f64[1];
                v132 += 2;
                v131 += 2 * __ldc;
                v133 -= 4;
              }
              while (v133);
              if ((v18 & 0xFFFFFFFC) != v18)
              {
                v136 = &v216[4 * (v18 >> 2)];
                v137 = v18 & 0xFFFFFFFC;
                do
                {
                  v130 = v130 + *v136 * v39[v137++];
                  v136 = (double *)((char *)v136 + v61);
                }
                while (v18 != v137);
              }
              __C[v129] = v130;
            }
            else
            {
              v138 = 0;
              v139 = v216;
              do
              {
                v140 = 0.0;
                v141 = v139;
                v142 = v39;
                v143 = v18;
                do
                {
                  v144 = *v142++;
                  v140 = v140 + *v141 * v144;
                  v141 = (double *)((char *)v141 + v61);
                  --v143;
                }
                while (v143);
                __C[v138 + v129] = v140;
                ++v138;
                ++v139;
              }
              while (v138 != __ldc);
            }
            ++v126;
            v39 = (double *)((char *)v39 + v127);
            v128 = (float64x2_t *)((char *)v128 + v127);
          }
          while (v126 != v41);
        }
        else
        {
          v62 = 0;
          v63 = __C;
          do
          {
            v64 = 0;
            v65 = __B[v62 * __ldb];
            do
            {
              v66 = v216[v64 / 8] * v65 + 0.0;
              if ((_DWORD)v18 != 1)
              {
                v66 = v66 + v216[v61 / 8 + v64 / 8] * __B[v62 * __ldb + 1];
                if ((_DWORD)v18 != 2)
                  v66 = v66 + v216[2 * __ldc + v64 / 8] * __B[v62 * __ldb + 2];
              }
              v63[v64 / 8] = v66;
              v64 += 8;
            }
            while (v61 != v64);
            ++v62;
            v63 = (double *)((char *)v63 + v61);
          }
          while (v62 != v41);
        }
      }
      else
      {
        bzero(__C, 8 * __ldc * (unint64_t)v41);
      }
    }
    v12 = *v58;
    v67 = v58[1];
    v68 = hypot(*v58, v67);
    v29 = 0.0;
    if (v68 < 1.0 || fabs(v12) <= 0.005 && fabs(v67) <= 0.005)
    {
LABEL_85:
      v30 = 0;
LABEL_86:
      cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v218);
LABEL_87:
      *(double *)(a1 + 16) = v29;
      *(double *)(a1 + 24) = v12;
      *(_BYTE *)(a1 + 32) = v30;
      if (*(_BYTE *)(a1 + 400))
      {
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = &off_1003EF108;
        memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
        *(_BYTE *)(a1 + 400) = 1;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      goto LABEL_23;
    }
    v69 = atan2(v12, v67);
    if (v69 >= 0.0)
      v12 = v69;
    else
      v12 = v69 + 6.28318531;
    v195 = 0x200000001;
    v193 = off_1003EEC30;
    v194 = xmmword_100382860;
    v196 = v197;
    v70 = 1.0 / (v68 * v68);
    v197[0] = v67 * v70;
    v197[1] = -(*v58 * v70);
    v190 = 0x300000003;
    v188[9] = off_1003EEAC0;
    v189 = xmmword_1003827C0;
    v71 = v192;
    v191 = v192;
    v186 = 0x300000003;
    v184[9] = off_1003EEAC0;
    v185 = xmmword_1003827C0;
    v187 = v188;
    *(_QWORD *)buf = &off_1003EF108;
    memcpy(&buf[8], (const void *)(a1 + 48), 0x160uLL);
    if (!buf[280])
    {
      if (!sub_1000E5004((uint64_t)buf))
      {
LABEL_98:
        *(_QWORD *)&v236[0] = &off_1003EF108;
        memcpy((char *)v236 + 8, (const void *)(a2 + 8), 0x160uLL);
        if (BYTE8(v236[17]) || sub_1000E5004((uint64_t)v236))
        {
          v185 = xmmword_1003827C0;
          v72 = v187;
          *v187 = *((_QWORD *)&v236[19] + 1);
          v72[3] = *(_QWORD *)&v236[20];
          v72[6] = *((_QWORD *)&v236[20] + 1);
          v72[1] = *(_QWORD *)&v236[20];
          v72[4] = *(_QWORD *)&v236[21];
          v72[7] = *((_QWORD *)&v236[21] + 1);
          v72[2] = *((_QWORD *)&v236[20] + 1);
          v72[5] = *((_QWORD *)&v236[21] + 1);
          v72[8] = *(_QWORD *)&v236[22];
        }
        v182 = 0x300000003;
        v179[0] = off_1003EEAC0;
        v73 = (double *)v184;
        v183 = v184;
        v179[1] = v189;
        v74 = (DWORD1(v189) * v189);
        v180 = v74;
        v181 = v189;
        if ((int)v74 > 3)
        {
          v80 = v191;
          v81 = v187;
          v82 = (v74 - 1) >> 1;
          v83 = (float64x2_t *)v191;
          v84 = (float64x2_t *)v187;
          v85 = (float64x2_t *)v184;
          do
          {
            v86 = *v83++;
            v87 = v86;
            v88 = *v84++;
            *v85++ = vaddq_f64(v87, v88);
            --v82;
          }
          while (v82);
          *(float64x2_t *)&v184[(v74 - 2)] = vaddq_f64(*(float64x2_t *)&v80[8 * (v74 - 2)], *(float64x2_t *)&v81[(v74 - 2)]);
        }
        else if ((int)v74 >= 1)
        {
          v75 = (double *)v191;
          v76 = (double *)v187;
          do
          {
            v77 = *v75++;
            v78 = v77;
            v79 = *v76++;
            *v73++ = v78 + v79;
            --v74;
          }
          while (v74);
        }
        v176 = 0x300000003;
        v174 = off_1003EEAC0;
        v175 = xmmword_1003827C0;
        v177 = &v178;
        sub_1000E6CEC((uint64_t)&v218, (uint64_t)v179, (uint64_t)&v174);
        v89 = atomic_load((unsigned __int8 *)&qword_100419488);
        if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_100419488))
        {
          v164 = 0x200000001;
          v162 = off_1003EED00;
          v165 = v166;
          v163 = xmmword_100382860;
          v166[0] = &_mh_execute_header;
          sub_1000E6FB8((uint64_t)&v162, (uint64_t)&unk_100419490);
          __cxa_atexit((void (*)(void *))sub_1000E7048, &unk_100419490, (void *)&_mh_execute_header);
          __cxa_guard_release(&qword_100419488);
        }
        sub_1000E74F4((uint64_t)&v162, (uint64_t)&v174, (uint64_t)&unk_100419490, (uint64_t)&unk_100419490);
        v170 = 0x200000002;
        v167[0] = off_1003EEDA8;
        v167[1] = v163;
        v90 = (DWORD1(v163) * v163);
        v168 = DWORD1(v163) * v163;
        v169 = v163;
        v171 = v172;
        v91 = DWORD2(v163);
        if (SDWORD2(v163) > 3)
        {
          v99 = v165;
          v100 = (DWORD2(v163) - 1) >> 1;
          v101 = (__int128 *)v165;
          v102 = v172;
          do
          {
            v103 = *v101++;
            *v102++ = v103;
            --v100;
          }
          while (v100);
          *(_OWORD *)&v172[v91 - 2] = *(_OWORD *)&v99[v91 - 2];
          goto LABEL_121;
        }
        if ((int)v90 >= 1)
        {
          v92 = v165;
          if (v90 >= 6 && (unint64_t)((char *)v167 - (char *)v165 + 40) >= 0x20)
          {
            v93 = v90 & 0x7FFFFFFC;
            v145 = (__int128 *)(v165 + 2);
            v146 = &v173;
            v147 = v90 & 0xFFFFFFFC;
            do
            {
              v148 = *v145;
              *((_OWORD *)v146 - 1) = *(v145 - 1);
              *(_OWORD *)v146 = v148;
              v145 += 2;
              v146 += 4;
              v147 -= 4;
            }
            while (v147);
            if (v93 == v90)
              goto LABEL_121;
          }
          else
          {
            v93 = 0;
          }
          v94 = v90 - v93;
          v95 = v93;
          v96 = &v167[v93 + 5];
          v97 = &v92[v95];
          do
          {
            v98 = *v97++;
            *v96++ = v98;
            --v94;
          }
          while (v94);
        }
LABEL_121:
        v164 = 0x200000001;
        v162 = off_1003EEC30;
        v163 = xmmword_100382860;
        v165 = v166;
        sub_1000E5948((uint64_t)&v193, (uint64_t)v167, (uint64_t)&v162);
        v104 = DWORD1(v194);
        v105 = v194;
        v154 = 0x100000002;
        v149 = off_1003EEE20;
        v155 = v156;
        v150 = DWORD1(v194);
        v151 = v194;
        v152 = v194 * DWORD1(v194);
        v153 = DWORD1(v194);
        if (!DWORD1(v194) || !(_DWORD)v194)
        {
LABEL_138:
          v159 = 0x100000001;
          v157 = off_1003EEDD8;
          *(_QWORD *)&v119 = 0x100000001;
          *((_QWORD *)&v119 + 1) = 0x100000001;
          v158 = v119;
          v160 = (double *)&v161;
          sub_1000E5948((uint64_t)&v162, (uint64_t)&v149, (uint64_t)&v157);
          v30 = 0;
          v120 = *v160;
          v29 = 0.0;
          if ((*(_QWORD *)v160 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v120 >= 0.0)
          {
            v121 = sqrt(v120);
            if (v121 <= 1.57079633)
            {
              v29 = sub_10015BF40(v12);
              v12 = sub_10015BF40(v121);
              v30 = 1;
            }
            else
            {
              v30 = 0;
            }
          }
          cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)v236);
          cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)buf);
          goto LABEL_86;
        }
        v106 = 0;
        v107 = 0;
        v108 = HIDWORD(v194);
        v109 = v196;
        v110 = v194 - 1;
        v111 = v194 & 0xFFFFFFFC;
        while (1)
        {
          if (v105 >= 0xC)
          {
            v112 = 0;
            if (v104 == 1
              && v107 + v110 >= v107
              && v108 * v107 + v110 >= v108 * v107
              && (unint64_t)((char *)&v156[v107] - (char *)&v109[v108 * v107]) >= 0x20)
            {
              v114 = 0;
              do
              {
                v115 = &v109[v106 + v114];
                v116 = *(_OWORD *)v115;
                v117 = *((_OWORD *)v115 + 1);
                v118 = &v156[v107 + v114];
                *v118 = v116;
                v118[1] = v117;
                v114 += 4;
              }
              while (v111 != v114);
              v112 = v105 & 0xFFFFFFFC;
              if (v105 == v111)
                goto LABEL_124;
            }
          }
          else
          {
            v112 = 0;
          }
          v113 = v107 + v104 * v112;
          do
          {
            v156[v113] = *(_QWORD *)&v109[v106 + v112++];
            v113 += v104;
          }
          while (v105 != v112);
LABEL_124:
          ++v107;
          v106 += v108;
          if (v107 == v104)
            goto LABEL_138;
        }
      }
      v71 = v191;
    }
    v189 = xmmword_1003827C0;
    *v71 = *(_QWORD *)&buf[312];
    v71[3] = *(_QWORD *)&buf[320];
    v71[6] = *(_QWORD *)&buf[328];
    v71[1] = *(_QWORD *)&buf[320];
    v71[4] = *(_QWORD *)&buf[336];
    v71[7] = *(_QWORD *)&buf[344];
    v71[2] = *(_QWORD *)&buf[328];
    v71[5] = *(_QWORD *)&buf[344];
    v71[8] = *(_QWORD *)&buf[352];
    goto LABEL_98;
  }
  *(_QWORD *)(a1 + 40) = &off_1003EF108;
  memcpy((void *)(a1 + 48), (const void *)(a2 + 8), 0x160uLL);
  *(_BYTE *)(a1 + 400) = 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)(a1 + 408) = result;
LABEL_24:
  *(_QWORD *)(a1 + 416) = v11;
  return result;
}

void sub_1000E6BE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100419488);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&STACK[0x590]);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&STACK[0x700]);
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void sub_1000E6C4C(_Unwind_Exception *a1)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void sub_1000E6C60(_Unwind_Exception *a1)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void sub_1000E6C74(_Unwind_Exception *a1)
{
  cnnavigation::details::JacobianBase::~JacobianBase((cnnavigation::details::JacobianBase *)&STACK[0x490]);
  _Unwind_Resume(a1);
}

void sub_1000E6C8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003EEB48;
  if (*(_BYTE *)(a1 + 400))
    cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(a1 + 40));
  operator delete();
}

__n128 sub_1000E6CD8@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  return result;
}

BOOL sub_1000E6CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  int v39;
  signed int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  int v49;
  uint64_t (**v50)();
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD v57[9];
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t (**v63)();
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v60 = 0x300000003;
    v58 = off_1003EEAC0;
    v59 = xmmword_1003827C0;
    v61 = &v62;
    sub_1000E5948(a1 + 16, a2, (uint64_t)&v58);
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(int *)(a1 + 28);
    v55 = 0x300000003;
    v50 = off_1003EEAC0;
    v56 = v57;
    v51 = v7;
    v52 = v6;
    v53 = v6 * v7;
    v54 = v7;
    if ((_DWORD)v7 && v6)
    {
      v8 = *(_DWORD *)(a1 + 36);
      v9 = *(_QWORD *)(a1 + 48);
      if (v6 >= 0xC)
      {
        v39 = 0;
        v40 = 0;
        v41 = v6 - 1;
        v42 = v6 & 0xFFFFFFFC;
        do
        {
          v43 = 0;
          if ((_DWORD)v7 != 1)
            goto LABEL_33;
          if ((int)(v40 + v41) < v40)
            goto LABEL_33;
          if ((int)(v8 * v40 + v41) < v8 * v40)
            goto LABEL_33;
          if ((unint64_t)&v57[v40] - v9 + -8 * v8 * v40 < 0x20)
            goto LABEL_33;
          v44 = 0;
          do
          {
            v45 = (__int128 *)(v9 + 8 * (v39 + v44));
            v46 = *v45;
            v47 = v45[1];
            v48 = &v57[v40 + v44];
            *v48 = v46;
            v48[1] = v47;
            v44 += 4;
          }
          while (v42 != v44);
          v43 = v6 & 0xFFFFFFFC;
          if (v6 != v42)
          {
LABEL_33:
            v49 = v40 + v7 * v43;
            do
            {
              v57[v49] = *(_QWORD *)(v9 + 8 * (int)(v39 + v43++));
              v49 += v7;
            }
            while (v6 != v43);
          }
          ++v40;
          v39 += v8;
        }
        while (v40 != (_DWORD)v7);
      }
      else
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = &v57[v11];
          v13 = v6;
          v14 = (uint64_t *)(v9 + 8 * v10);
          do
          {
            v15 = *v14++;
            *v12 = v15;
            v12 += v7;
            --v13;
          }
          while (v13);
          ++v11;
          v10 += v8;
        }
        while (v11 != (_DWORD)v7);
      }
    }
    v65 = 0x300000003;
    v63 = off_1003EEAC0;
    v64 = xmmword_1003827C0;
    v66 = &v67;
    sub_1000E5948((uint64_t)&v58, (uint64_t)&v50, (uint64_t)&v63);
    if (&v63 != (uint64_t (***)())a3)
    {
      v17 = v64;
      v16 = DWORD1(v64);
      *(_DWORD *)(a3 + 8) = v64;
      *(_DWORD *)(a3 + 12) = v16;
      v18 = (v16 * v17);
      *(_DWORD *)(a3 + 16) = v18;
      *(_DWORD *)(a3 + 20) = v17;
      if (SDWORD2(v64) > 3)
      {
        v31 = (DWORD2(v64) - 2);
        v32 = *(_OWORD **)(a3 + 32);
        v33 = v66;
        v34 = (DWORD2(v64) - 1) >> 1;
        v35 = (__int128 *)v66;
        v36 = v32;
        do
        {
          v37 = *v35++;
          *v36++ = v37;
          --v34;
        }
        while (v34);
        *(_OWORD *)((char *)v32 + 8 * v31) = *(_OWORD *)&v33[v31];
      }
      else if ((int)v18 >= 1)
      {
        v19 = 0;
        v20 = v66;
        v21 = *(_QWORD *)(a3 + 32);
        if (v18 < 4)
          goto LABEL_17;
        if ((unint64_t)(v21 - (_QWORD)v66) < 0x20)
          goto LABEL_17;
        v19 = v18 & 0x7FFFFFFC;
        v22 = (__int128 *)(v66 + 2);
        v23 = (_OWORD *)(v21 + 16);
        v24 = v18 & 0xFFFFFFFC;
        do
        {
          v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 4;
        }
        while (v24);
        if (v19 != v18)
        {
LABEL_17:
          v26 = v18 - v19;
          v27 = v19;
          v28 = (_QWORD *)(v21 + v27 * 8);
          v29 = &v20[v27];
          do
          {
            v30 = *v29++;
            *v28++ = v30;
            --v26;
          }
          while (v26);
        }
      }
    }
  }
  return v3 != 0;
}

uint64_t sub_1000E6FB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int i;

  v3 = *(_DWORD *)(result + 8);
  v2 = *(_DWORD *)(result + 12);
  *(_QWORD *)(a2 + 24) = 0x100000002;
  *(_QWORD *)a2 = off_1003EEC78;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2 && v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(result + 32);
    v7 = *(_DWORD *)(result + 20);
    do
    {
      for (i = 0; i != v3; ++i)
      {
        result = (v5 + *(_DWORD *)(a2 + 20) * i);
        *(_DWORD *)(a2 + 40 + 4 * (int)result) = *(_DWORD *)(v6 + 4 * (v4 + i));
      }
      ++v5;
      v4 += v7;
    }
    while (v5 != v2);
  }
  return result;
}

_QWORD *sub_1000E7038(_QWORD *result)
{
  *result = off_1003EECD0;
  return result;
}

_QWORD *sub_1000E7048(_QWORD *result)
{
  *result = off_1003EECD0;
  return result;
}

_QWORD *sub_1000E7058(_QWORD *result)
{
  result[16] = off_1003EECD0;
  result[10] = off_1003EECD0;
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000E7078(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000E7088(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000E7098(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000E70A8(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000E70B8(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

void sub_1000E70C8(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1000E70F4(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E7114(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7120(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[3];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000E71F4(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E7214(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7220(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000E72F4(_QWORD *a1)
{
  *a1 = off_1003EECD0;
  operator delete();
}

uint64_t sub_1000E7314(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7320(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE v14[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 4 * v11;
              v13 = *(_DWORD *)(v7 + v12);
              *(_DWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000E73F4(_QWORD *a1)
{
  *a1 = off_1003EECD0;
  operator delete();
}

uint64_t sub_1000E7414(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7420(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE v14[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 4 * v11;
              v13 = *(_DWORD *)(v7 + v12);
              *(_DWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_1000E74F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int *v49;
  unsigned int v50;
  int v51;
  __int128 *v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 *v60;
  _OWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;

  *(_QWORD *)(result + 24) = 0x200000002;
  *(_OWORD *)(result + 8) = xmmword_100382870;
  *(_QWORD *)(result + 32) = result + 40;
  *(_QWORD *)result = off_1003EED48;
  *(_QWORD *)(result + 72) = a2;
  *(_QWORD *)(result + 104) = 0x100000002;
  *(_QWORD *)(result + 80) = off_1003EEC78;
  *(_OWORD *)(result + 88) = xmmword_100382880;
  *(_QWORD *)(result + 128) = off_1003EEC78;
  *(_QWORD *)(result + 112) = result + 120;
  *(_QWORD *)(result + 152) = 0x100000002;
  *(_OWORD *)(result + 136) = xmmword_100382880;
  v4 = result + 168;
  *(_QWORD *)(result + 160) = result + 168;
  if (result + 80 == a3)
  {
    LODWORD(v7) = 2;
    goto LABEL_17;
  }
  v6 = *(_DWORD *)(a3 + 8);
  v5 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(result + 88) = v6;
  *(_DWORD *)(result + 92) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(result + 96) = v7;
  *(_DWORD *)(result + 100) = v6;
  v8 = *(_DWORD *)(a3 + 16);
  if (v8 > 3)
  {
    v16 = (v8 - 1);
    v17 = *(_QWORD *)(a3 + 32);
    if (v8 >= 9 && (unint64_t)(result - v17 + 120) >= 0x20)
    {
      v18 = v16 & 0xFFFFFFF8;
      v52 = (__int128 *)(v17 + 16);
      v53 = (_OWORD *)(result + 136);
      v54 = v18;
      do
      {
        v55 = *v52;
        *(v53 - 1) = *(v52 - 1);
        *v53 = v55;
        v52 += 2;
        v53 += 2;
        v54 -= 8;
      }
      while (v54);
      if (v18 == v16)
        goto LABEL_16;
    }
    else
    {
      v18 = 0;
    }
    v19 = v16 - v18;
    v20 = 4 * v18;
    v21 = (_DWORD *)(4 * v18 + result + 120);
    v22 = (int *)(v17 + v20);
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      --v19;
    }
    while (v19);
LABEL_16:
    *(_DWORD *)(result + 120 + 4 * v16) = *(_DWORD *)(v17 + 4 * v16);
    goto LABEL_17;
  }
  if ((int)v7 < 1)
    goto LABEL_17;
  v9 = *(_QWORD *)(a3 + 32);
  if (v7 < 8 || (unint64_t)(result - v9 + 120) < 0x20)
  {
    v10 = 0;
LABEL_7:
    v11 = v7 - v10;
    v12 = 4 * v10;
    v13 = (_DWORD *)(4 * v10 + result + 120);
    v14 = (int *)(v9 + v12);
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
    goto LABEL_17;
  }
  v10 = v7 & 0x7FFFFFF8;
  v60 = (__int128 *)(v9 + 16);
  v61 = (_OWORD *)(result + 136);
  v62 = v7 & 0xFFFFFFF8;
  do
  {
    v63 = *v60;
    *(v61 - 1) = *(v60 - 1);
    *v61 = v63;
    v60 += 2;
    v61 += 2;
    v62 -= 8;
  }
  while (v62);
  if (v10 != v7)
    goto LABEL_7;
LABEL_17:
  if (result + 128 == a4)
  {
    LODWORD(v26) = *(_DWORD *)(result + 144);
    goto LABEL_33;
  }
  v25 = *(_DWORD *)(a4 + 8);
  v24 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(result + 136) = v25;
  *(_DWORD *)(result + 140) = v24;
  v26 = (v24 * v25);
  *(_DWORD *)(result + 144) = v26;
  *(_DWORD *)(result + 148) = v25;
  v27 = *(_DWORD *)(a4 + 16);
  if (v27 > 3)
  {
    v35 = (v27 - 1);
    v36 = *(_QWORD *)(a4 + 32);
    if (v27 >= 9 && (unint64_t)(result - v36 + 168) >= 0x20)
    {
      v37 = v35 & 0xFFFFFFF8;
      v56 = (__int128 *)(v36 + 16);
      v57 = (_OWORD *)(result + 184);
      v58 = v37;
      do
      {
        v59 = *v56;
        *(v57 - 1) = *(v56 - 1);
        *v57 = v59;
        v56 += 2;
        v57 += 2;
        v58 -= 8;
      }
      while (v58);
      if (v37 == v35)
        goto LABEL_32;
    }
    else
    {
      v37 = 0;
    }
    v38 = v35 - v37;
    v39 = 4 * v37;
    v40 = (_DWORD *)(4 * v37 + result + 168);
    v41 = (int *)(v36 + v39);
    do
    {
      v42 = *v41++;
      *v40++ = v42;
      --v38;
    }
    while (v38);
LABEL_32:
    *(_DWORD *)(v4 + 4 * v35) = *(_DWORD *)(v36 + 4 * v35);
    goto LABEL_33;
  }
  if ((int)v26 < 1)
    goto LABEL_33;
  v28 = *(_QWORD *)(a4 + 32);
  if (v26 < 8 || (unint64_t)(result - v28 + 168) < 0x20)
  {
    v29 = 0;
LABEL_23:
    v30 = v26 - v29;
    v31 = 4 * v29;
    v32 = (_DWORD *)(4 * v29 + result + 168);
    v33 = (int *)(v28 + v31);
    do
    {
      v34 = *v33++;
      *v32++ = v34;
      --v30;
    }
    while (v30);
    goto LABEL_33;
  }
  v29 = v26 & 0x7FFFFFF8;
  v64 = (__int128 *)(v28 + 16);
  v65 = (_OWORD *)(result + 184);
  v66 = v26 & 0xFFFFFFF8;
  do
  {
    v67 = *v64;
    *(v65 - 1) = *(v64 - 1);
    *v65 = v67;
    v64 += 2;
    v65 += 2;
    v66 -= 8;
  }
  while (v66);
  if (v29 != v26)
    goto LABEL_23;
LABEL_33:
  *(_DWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 12) = v26;
  *(_DWORD *)(result + 16) = v26 * v7;
  *(_DWORD *)(result + 20) = v7;
  if ((_DWORD)v26 && (_DWORD)v7)
  {
    v43 = 0;
    v44 = 0;
    v45 = *(_DWORD *)(a2 + 20);
    v46 = *(_QWORD *)(a2 + 32);
    do
    {
      v47 = v45 * *(_DWORD *)(v4 + 4 * v44);
      v48 = v7;
      v49 = (int *)(result + 120);
      v50 = v43;
      do
      {
        v51 = *v49++;
        *(_QWORD *)(result + 40 + 8 * v50++) = *(_QWORD *)(v46 + 8 * (v47 + v51));
        --v48;
      }
      while (v48);
      ++v44;
      v43 += v7;
    }
    while (v44 != v26);
  }
  return result;
}

void sub_1000E7848(_QWORD *a1)
{
  a1[16] = off_1003EECD0;
  a1[10] = off_1003EECD0;
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E7878(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7884(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[4];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000E7958(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

void sub_1000E7978(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E7998(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E79A4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v12, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = v12;
        v9 = (_QWORD *)(v7 + 8);
        v10 = v6 - 1;
        v11 = v3 + v1 - v5;
        do
        {
          if (!v8)
          {
            *(_QWORD *)(v7 + 8 * (v11 % (int)v6)) = *v9;
            v8 = 1;
          }
          v11 += v3 + v1 - v5;
          ++v9;
          --v10;
        }
        while (v10);
      }
    }
  }
}

void sub_1000E7A58(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000E7A78(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000E7A84(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[2];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000E7B58()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

uint64_t sub_1000E7B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  cnprint::CNPrinter *v6;
  __int128 v7;
  uint64_t v8;
  double v9;
  cnprint::CNPrinter *v10;
  int v11;
  unsigned int v12;
  _BOOL8 v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  __int128 v17;

  if ((*(_BYTE *)(a1 + 96) & 4) != 0)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (!v4)
      v4 = *(_QWORD *)(qword_10041A938 + 24);
    v5 = *(double *)(v4 + 32);
    v17 = 0uLL;
    v6 = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v17, 0, v5);
    v7 = v17;
    *(_OWORD *)(a2 + 8) = v17;
    *(_OWORD *)(a2 + 104) = v7;
    if ((*(_BYTE *)(a1 + 96) & 2) != 0)
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        v8 = *(_QWORD *)(qword_10041A938 + 16);
      v9 = *(double *)(v8 + 32);
      v17 = 0uLL;
      v10 = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v17, 0, v9);
      *(_OWORD *)(a2 + 200) = v17;
      v11 = *(_DWORD *)(a1 + 96);
      if ((v11 & 1) != 0)
      {
        v12 = *(_DWORD *)(a1 + 88) + 1;
        if (v12 >= 6)
        {
          if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
          {
            LOWORD(v17) = 12;
            v16 = 1;
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
            cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Invalid VIO Tracking State, %u");
          }
        }
        else
        {
          *(_BYTE *)(a2 + 296) = v12;
          if ((~v11 & 0x78) != 0)
          {
            if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
            {
              LOWORD(v17) = 12;
              v16 = 1;
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
              cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO State/Cov not present");
            }
          }
          else
          {
            v13 = sub_1000E7EA0(a1, a2 + 104);
            if (v13)
            {
              v14 = sub_1000E8310(a1, a2 + 104);
              if (v14)
              {
                *(_BYTE *)(a2 + 1185) = sub_1000E8808(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 96), a2 + 104);
                result = 1;
                *(_BYTE *)(a2 + 1184) = 1;
                return result;
              }
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v14) <= 1)
              {
                LOWORD(v17) = 12;
                v16 = 1;
                (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State Var-Cov");
              }
            }
            else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v13) <= 1)
            {
              LOWORD(v17) = 12;
              v16 = 1;
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
              cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State");
            }
          }
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        LOWORD(v17) = 12;
        v16 = 1;
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent,t, %.3lf, VIO Tracking Status not present");
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      LOWORD(v17) = 12;
      v16 = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO session start mach continuous time not present");
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v17) = 12;
    v16 = 1;
    cnprint::CNPrinter::Print(&v17, &v16, "ConvertProtobufVIOEstimateEvent, VIO applicable mach continuous time not present");
  }
  return 0;
}

BOOL sub_1000E7EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  int v8;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  cnprint::CNPrinter *v22;
  uint64_t v23;
  cnprint::CNPrinter *v24;
  uint64_t v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[112];
  _BYTE v38[112];
  _BYTE v39[112];
  _BYTE v40[112];
  _WORD v41[56];
  uint64_t (**v42)();
  __int128 v43;
  uint64_t v44;
  double *v45;
  _QWORD v46[9];
  uint64_t (**v47)();
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD v51[9];
  void *v52[3];

  if ((~*(_DWORD *)(a1 + 96) & 0x18) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(unsigned int *)(v3 + 24);
      if (v4 != 8 * (_DWORD)v5)
      {
LABEL_25:
        v16 = 1;
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
        {
          LOWORD(v47) = 12;
          LOBYTE(v42) = 1;
          cnprint::CNPrinter::Print(&v47, &v42, "ConvertProtobufVIOInertialState, VIO Inertial State Info Integrity failed.");
        }
        return v16 == 0;
      }
    }
    else
    {
      v3 = *(_QWORD *)(qword_10041A938 + 32);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(unsigned int *)(v3 + 24);
      if (v4 != 8 * (_DWORD)v5)
        goto LABEL_25;
    }
    v7 = *(_DWORD *)(v3 + 32);
    v8 = *(_DWORD *)(v3 + 64);
    if (v8 + v7 + *(_DWORD *)(v3 + 56) + *(_DWORD *)(v3 + 40) + *(_DWORD *)(v3 + 48) != (_DWORD)v5)
      goto LABEL_25;
    if (v4 > 0xA8 || (_DWORD)v5 == 0 || v8 != 3 || v7 != 9)
    {
LABEL_28:
      v16 = 1;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
      {
        LOWORD(v47) = 12;
        LOBYTE(v42) = 1;
        cnprint::CNPrinter::Print(&v47, &v42, "ConvertProtobufVIOInertialState, VIO Inertial State Info Sensibility checks failed.");
      }
      return v16 == 0;
    }
    v12 = *(_QWORD **)(a1 + 40);
    if (*((char *)v12 + 23) < 0)
    {
      if (v12[1] != v4)
        goto LABEL_28;
    }
    else if (*((unsigned __int8 *)v12 + 23) != v4)
    {
      goto LABEL_28;
    }
    v13 = *(unsigned int *)(v3 + 28);
    v14 = *(unsigned int *)(v3 + 60);
    sub_1000EABDC(v52, v5);
    if (*((char *)v12 + 23) < 0)
    {
      v17 = v12;
      v12 = (_QWORD *)*v12;
      v15 = v17[1];
    }
    else
    {
      v15 = *((unsigned __int8 *)v12 + 23);
    }
    if (v15)
      memmove(v52[0], v12, v15);
    v49 = 0x300000003;
    v47 = off_1003EEAC0;
    v48 = xmmword_1003827C0;
    v50 = v51;
    if (v13 <= 0xFFFFFFF6)
    {
      v18 = 0;
      v19 = 0;
      v20 = v13 + 9;
      v21 = v52[0];
      do
      {
        v51[3 * v19 + v18] = v21[v13];
        if (v18 == 2)
        {
          ++v19;
          v18 = 0;
        }
        else
        {
          ++v18;
        }
        ++v13;
      }
      while (v13 < v20);
    }
    sub_1000EA99C((uint64_t)&v47, (uint64_t)v37);
    sub_1000EA940((uint64_t)v37, (uint64_t)&v47, (uint64_t)v38);
    v28 = 0x300000003;
    v26 = off_1003EEAC0;
    v27 = xmmword_1003827C0;
    v32 = 0;
    v31 = 0u;
    v34 = 0u;
    v29 = &v30;
    v30 = 0x3FF0000000000000;
    v33 = 0x3FF0000000000000;
    v35 = 0;
    v36 = 0x3FF0000000000000;
    sub_1000EAEAC((uint64_t)v38, (uint64_t)&v26, (uint64_t)v39);
    sub_1000EADF0((uint64_t)v39, (uint64_t)v40);
    sub_1000EAC70((uint64_t)v40, (uint64_t)v41);
    sub_1000EAC70((uint64_t)v41, (uint64_t)&v42);
    if (fabs(*v45) <= 0.00001 && fabs(sub_1000EAF5C((uint64_t)&v47) + -1.0) <= 0.00001)
    {
      sub_1000EBFA4(&v42, (uint64_t)&v47);
      v23 = a2 + 200;
      cnrotation::CNRotation::operator=(v23, &v42);
      v44 = 0x100000003;
      v42 = off_1003EEBE8;
      v43 = xmmword_100382850;
      v45 = (double *)v46;
      if (v14 <= 0xFFFFFFFC)
      {
        v46[0] = *((_QWORD *)v52[0] + v14);
        if (v14 + 1 < (unint64_t)(v14 + 3))
        {
          v46[1] = *((_QWORD *)v52[0] + v14 + 1);
          v46[2] = *((_QWORD *)v52[0] + v14 + 2);
        }
      }
      sub_1000EAB2C((uint64_t)&v42);
      if ((v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v16 = 1;
        if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
        {
          v41[0] = 12;
          v40[0] = 1;
          cnprint::CNPrinter::Print(v41, v40, "ConvertProtobufVIOInertialState, NOTE: VIO Position Vector failed the sensibility check.");
        }
      }
      else
      {
        sub_1000EAFDC(v23, (uint64_t)&v42);
        v16 = 0;
      }
    }
    else
    {
      v16 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v22) <= 1)
      {
        LOWORD(v42) = 12;
        LOBYTE(v41[0]) = 1;
        cnprint::CNPrinter::Print(&v42, v41, "ConvertProtobufVIOInertialState, NOTE: VIO imu2vio rotation matrix failed the orthogonality check.");
      }
    }
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
    return v16 == 0;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v47) = 12;
    LOBYTE(v42) = 1;
    cnprint::CNPrinter::Print(&v47, &v42, "ConvertProtobufVIOInertialState, VIO Inertial State not present.");
  }
  return 0;
}

void sub_1000E82C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 88);
  if (v3)
  {
    *(_QWORD *)(v1 - 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000E8310(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v10;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  size_t v20;
  __n128 v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  cnprint::CNPrinter *v32;
  __n128 v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  double *v37;
  int v38;
  int v39;
  double *v40;
  double *v41;
  int v42;
  cnprint::CNPrinter *v43;
  double *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  double *v49;
  double v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  char v56;
  __int16 v57;
  uint64_t (**v58)();
  __int128 v59;
  uint64_t v60;
  double *v61;
  _QWORD v62[9];

  if ((~*(_DWORD *)(a1 + 96) & 0x60) == 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (!v3)
      v3 = *(_QWORD *)(qword_10041A938 + 48);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(unsigned int *)(v3 + 24);
    v6 = *(_DWORD *)(v3 + 32);
    v7 = *(_DWORD *)(v3 + 64);
    v8 = v7 + v6 + *(_DWORD *)(v3 + 48) + *(_DWORD *)(v3 + 40) + *(_DWORD *)(v3 + 56);
    if (v4 != 8 * (_DWORD)v5 || (_DWORD)v5 != v8 * v8)
    {
      v10 = 1;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
      {
        LOWORD(v58) = 12;
        LOBYTE(v57) = 1;
        cnprint::CNPrinter::Print(&v58, &v57, "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info Integrity failed.");
      }
      return v10 == 0;
    }
    if (v4 > 0x708 || (_DWORD)v5 == 0 || v7 != 3 || v6 != 3)
    {
LABEL_45:
      v10 = 1;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
      {
        LOWORD(v58) = 12;
        LOBYTE(v57) = 1;
        cnprint::CNPrinter::Print(&v58, &v57, "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info sensibility checks failed.");
      }
      return v10 == 0;
    }
    v15 = *(_QWORD **)(a1 + 56);
    if (*((char *)v15 + 23) < 0)
    {
      if (v15[1] != v4)
        goto LABEL_45;
    }
    else if (*((unsigned __int8 *)v15 + 23) != v4)
    {
      goto LABEL_45;
    }
    v16 = *(unsigned int *)(v3 + 28);
    v17 = *(unsigned int *)(v3 + 60);
    v18 = 8 * v5;
    v19 = operator new(8 * v5);
    bzero(v19, v18);
    if (*((char *)v15 + 23) < 0)
    {
      v55 = v15;
      v15 = (_QWORD *)*v15;
      v20 = v55[1];
      if (!v20)
      {
LABEL_29:
        v60 = 0x300000003;
        v58 = off_1003EEAC0;
        v21 = (__n128)xmmword_1003827C0;
        v59 = xmmword_1003827C0;
        v61 = (double *)v62;
        v22 = (v16 + 3);
        if (v16 <= 0xFFFFFFFC)
        {
          v23 = v16 * v8;
          v21.n128_u64[0] = *((_QWORD *)v19 + (v16 + v16 * v8));
          v62[0] = v21.n128_u64[0];
          v24 = v16 + 1;
          if (v16 + 1 < (unint64_t)v22)
          {
            v25 = *((_QWORD *)v19 + (v16 + 2 + v23));
            v26 = *((_QWORD *)v19 + (v16 + v8 * v24));
            v27 = *((_QWORD *)v19 + (v8 * v24 + v24));
            v62[3] = *((_QWORD *)v19 + (v23 + v24));
            v62[4] = v27;
            v21.n128_u64[0] = *((_QWORD *)v19 + (v16 + 2 + v8 * v24));
            v28 = (v16 + 2) * v8;
            v29 = *((_QWORD *)v19 + (v16 + v28));
            v62[1] = v26;
            v62[2] = v29;
            v62[5] = *((_QWORD *)v19 + (v28 + v24));
            v62[6] = v25;
            v30 = *((_QWORD *)v19 + (v16 + 2 + v28));
            v62[7] = v21.n128_u64[0];
            v62[8] = v30;
          }
        }
        v31 = a2 + 200;
        v32 = (cnprint::CNPrinter *)cntransformation::CNRigidTransformation::SetPrr(v31, &v58, v21);
        if ((v32 & 1) != 0)
        {
          v35 = (v17 + 3);
          if (v17 <= 0xFFFFFFFC)
          {
            v36 = SHIDWORD(v59);
            v37 = v61;
            v38 = v17 * v8;
            v33.n128_u64[0] = *((_QWORD *)v19 + (v17 + v17 * v8));
            *v61 = v33.n128_f64[0];
            v39 = v17 + 1;
            if (v17 + 1 < (unint64_t)v35)
            {
              v40 = &v37[v36];
              *v40 = *((double *)v19 + (v38 + v39));
              v41 = &v37[2 * v36];
              *v41 = *((double *)v19 + (v17 + 2 + v38));
              v37[1] = *((double *)v19 + (v17 + v8 * v39));
              v40[1] = *((double *)v19 + (v8 * v39 + v39));
              v41[1] = *((double *)v19 + (v17 + 2 + v8 * v39));
              v42 = (v17 + 2) * v8;
              v37[2] = *((double *)v19 + (v17 + v42));
              v40[2] = *((double *)v19 + (v42 + v39));
              v33.n128_u64[0] = *((_QWORD *)v19 + (v17 + 2 + v42));
              v41[2] = v33.n128_f64[0];
            }
          }
          v43 = (cnprint::CNPrinter *)cntransformation::CNRigidTransformation::SetPpp(v31, &v58, v33, v34);
          if ((_DWORD)v43)
          {
            if (v16 <= 0xFFFFFFFC && v17 <= 0xFFFFFFFC)
            {
              v44 = v61;
              v45 = SHIDWORD(v59);
              v46 = v16 * v8;
              *v61 = -*((double *)v19 + (v17 + v16 * v8));
              v47 = v17 + 1;
              if (v17 + 1 < v35)
              {
                v44[v45] = -*((double *)v19 + (v46 + v47));
                v44[2 * v45] = -*((double *)v19 + (v17 + v46 + 2));
              }
              if (v16 + 1 < v22)
              {
                v48 = v8 * (v16 + 1);
                v44[1] = -*((double *)v19 + (v17 + v48));
                if (v47 >= v35)
                {
                  v53 = v17 + (v16 + 2) * v8;
                  v54 = 2;
                }
                else
                {
                  v49 = &v44[v45];
                  v49[1] = -*((double *)v19 + (v48 + v47));
                  v50 = *((double *)v19 + (v17 + 2 + v48));
                  v51 = 2 * v45;
                  v44[2 * v45 + 1] = -v50;
                  v52 = (v16 + 2) * v8;
                  v44[2] = -*((double *)v19 + (v17 + v52));
                  v49[2] = -*((double *)v19 + (v52 + v47));
                  v53 = v17 + 2 + v52;
                  v54 = v51 + 2;
                }
                v44[v54] = -*((double *)v19 + v53);
              }
            }
            cntransformation::CNRigidTransformation::SetPrp(v31, &v58);
            v10 = 0;
          }
          else
          {
            v10 = 1;
            if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
            {
              v57 = 12;
              v56 = 1;
              cnprint::CNPrinter::Print(&v57, &v56, "ConvertProtobufVIOInertialCovariance, Cannot set/store the IMU Position Covariance");
            }
          }
        }
        else
        {
          v10 = 1;
          if (cnprint::CNPrinter::GetLogLevel(v32) <= 1)
          {
            v57 = 12;
            v56 = 1;
            cnprint::CNPrinter::Print(&v57, &v56, "ConvertProtobufVIOInertialCovariance, Cannot set/store the Orientation Covariance");
          }
        }
        operator delete(v19);
        return v10 == 0;
      }
    }
    else
    {
      v20 = *((unsigned __int8 *)v15 + 23);
      if (!*((_BYTE *)v15 + 23))
        goto LABEL_29;
    }
    memmove(v19, v15, v20);
    goto LABEL_29;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v58) = 12;
    LOBYTE(v57) = 1;
    cnprint::CNPrinter::Print(&v58, &v57, "ConvertProtobufVIOInertialCovariance, VIO Inertial State Var-Covariance not present.");
  }
  return 0;
}

void sub_1000E87CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000E87E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000E87F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E8808(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  float32x2_t *v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  float32x2_t *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  const mach_header_64 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const mach_header_64 **v26;
  uint64_t v27;
  const mach_header_64 **v28;
  uint64_t v29;
  const mach_header_64 **v30;
  _OWORD *v31;
  __int128 v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  unsigned int v44;
  cnprint::CNPrinter *v45;
  double *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t *v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  uint64_t v63;
  float64x2_t *v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  double v72;
  uint64_t v73;
  int v74;
  double v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  double v86;
  uint64_t v87;
  double *v88;
  double v89;
  __int128 v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t *v93;
  uint64_t v94;
  __int128 v95;
  double v96;
  uint64_t v97;
  double *v98;
  double v99;
  __int128 v100;
  cnprint::CNPrinter *v101;
  __int128 *v102;
  uint64_t *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (**v113)();
  int v114;
  unsigned int v115;
  int v116;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD v120[9];
  uint64_t (**v121)();
  __int128 v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD v126[2];
  int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t (**v133)();
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD v140[2];
  _QWORD v141[8];
  _BYTE v142[20];
  int v143;
  _QWORD *v144;
  _QWORD v145[9];
  uint64_t v146;
  _BYTE v147[56];
  uint64_t (**v148)();
  __int128 v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD v152[9];
  uint64_t v153;
  uint64_t v154;
  uint64_t (**v155)();
  __int128 v156;
  uint64_t v157;
  const mach_header_64 **v158;
  const mach_header_64 *v159;
  _QWORD v160[2];
  int v161;
  int v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD v165[2];
  uint64_t v166;
  uint64_t (**v167)();
  __int128 v168;
  uint64_t v169;
  const mach_header_64 **v170;
  const mach_header_64 *v171;
  int v172;
  uint64_t (**v173)();
  __int128 v174;
  uint64_t v175;
  _OWORD *v176;
  _OWORD v177[8];
  uint64_t (**v178)();
  __int128 v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD v182[12];

  if ((a2 & 0x80) == 0)
    return 1;
  v182[2] = v6;
  v182[3] = v5;
  v182[10] = v3;
  v182[11] = v4;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 24) == 4)
      goto LABEL_7;
    return 0;
  }
  a1 = *(_QWORD *)(qword_10041A938 + 64);
  if (*(_DWORD *)(a1 + 24) != 4)
    return 0;
LABEL_7:
  v175 = 0x400000004;
  v173 = off_1003EEEB0;
  v174 = xmmword_100382A00;
  v176 = v177;
  v9 = *(_QWORD **)(a1 + 16);
  if (*(_DWORD *)(*v9 + 24) != 4)
    return 0;
  v10 = *(float32x2_t **)(*v9 + 16);
  v177[0] = vcvtq_f64_f32(*v10);
  v177[1] = vcvtq_f64_f32(v10[1]);
  v11 = v9[1];
  if (*(_DWORD *)(v11 + 24) != 4)
    return 0;
  v12 = *(float32x2_t **)(v11 + 16);
  v177[2] = vcvtq_f64_f32(*v12);
  v177[3] = vcvtq_f64_f32(v12[1]);
  v13 = v9[2];
  if (*(_DWORD *)(v13 + 24) != 4)
    return 0;
  v14 = *(float32x2_t **)(v13 + 16);
  v177[4] = vcvtq_f64_f32(*v14);
  v177[5] = vcvtq_f64_f32(v14[1]);
  v15 = v9[3];
  if (*(_DWORD *)(v15 + 24) != 4)
    return 0;
  v16 = *(float32x2_t **)(v15 + 16);
  v177[6] = vcvtq_f64_f32(*v16);
  v177[7] = vcvtq_f64_f32(v16[1]);
  v159 = &_mh_execute_header;
  v169 = 0x100000003;
  v167 = off_1003EEE68;
  v168 = xmmword_100382850;
  v172 = 2;
  v170 = &v171;
  v171 = &_mh_execute_header;
  sub_1000EB64C((uint64_t)&v155, (uint64_t)&v173, (uint64_t)&v167, (uint64_t)&v167);
  v163 = 0x300000003;
  v160[0] = off_1003EEAC0;
  v17 = v156;
  v18 = DWORD1(v156);
  v160[1] = v156;
  v19 = (DWORD1(v156) * v156);
  v161 = DWORD1(v156) * v156;
  v162 = v156;
  v164 = v165;
  v20 = DWORD2(v156);
  if (SDWORD2(v156) > 3)
  {
    v28 = v158;
    v29 = (DWORD2(v156) - 1) >> 1;
    v30 = v158;
    v31 = v165;
    do
    {
      v32 = *(_OWORD *)v30;
      v30 += 2;
      *v31++ = v32;
      --v29;
    }
    while (v29);
    *(_OWORD *)&v165[v20 - 2] = *(_OWORD *)&v28[v20 - 2];
  }
  else
  {
    if ((int)v19 < 1)
      goto LABEL_22;
    v21 = v158;
    if (v19 < 6 || (unint64_t)((char *)v160 - (char *)v158 + 40) < 0x20)
    {
      v22 = 0;
LABEL_16:
      v23 = v19 - v22;
      v24 = v22;
      v25 = &v160[v22 + 5];
      v26 = &v21[v24];
      do
      {
        v27 = (uint64_t)*v26++;
        *v25++ = v27;
        --v23;
      }
      while (v23);
      goto LABEL_22;
    }
    v22 = v19 & 0x7FFFFFFC;
    v102 = (__int128 *)(v158 + 2);
    v103 = &v166;
    v104 = v19 & 0xFFFFFFFC;
    do
    {
      v105 = *v102;
      *((_OWORD *)v103 - 1) = *(v102 - 1);
      *(_OWORD *)v103 = v105;
      v102 += 2;
      v103 += 4;
      v104 -= 4;
    }
    while (v104);
    if (v22 != v19)
      goto LABEL_16;
  }
LABEL_22:
  v118 = 0x300000003;
  v113 = off_1003EEAC0;
  v119 = v120;
  v114 = v18;
  v115 = v17;
  v116 = v19;
  v117 = v18;
  if (v18 && v17)
  {
    v33 = 0;
    v34 = 0;
    v35 = v17 - 1;
    v36 = v17 & 0xFFFFFFFC;
    do
    {
      if (v17 >= 0xA)
      {
        v38 = (int)(v34 * v17 + v35) >= (int)(v34 * v17) && v18 == 1;
        v37 = 0;
        if (v38 && (int)(v34 + v35) >= v34)
        {
          do
          {
            v40 = (__int128 *)&v165[v33 + v37];
            v41 = *v40;
            v42 = v40[1];
            v43 = &v120[v34 + v37];
            *v43 = v41;
            v43[1] = v42;
            v37 += 4;
          }
          while (v36 != v37);
          v37 = v17 & 0xFFFFFFFC;
          if (v17 == v36)
            goto LABEL_25;
        }
      }
      else
      {
        v37 = 0;
      }
      v44 = v34 + v18 * v37;
      do
      {
        v120[v44] = v165[v33 + v37++];
        v44 += v18;
      }
      while (v17 != v37);
LABEL_25:
      ++v34;
      v33 += v17;
    }
    while (v34 != v18);
  }
  v123 = 0x300000003;
  v121 = off_1003EEAC0;
  v122 = xmmword_1003827C0;
  v124 = &v125;
  sub_1000E5948((uint64_t)&v113, (uint64_t)v160, (uint64_t)&v121);
  v46 = (double *)&v106;
  v107 = 0u;
  v108 = 0;
  v110 = 0u;
  v106 = 0x3FF0000000000000;
  v109 = 0x3FF0000000000000;
  v111 = 0;
  v112 = 0x3FF0000000000000;
  v129 = 0x300000003;
  v126[0] = off_1003EEAC0;
  v47 = (double *)v131;
  v130 = v131;
  v48 = v122;
  v49 = DWORD1(v122);
  v126[1] = v122;
  v50 = (DWORD1(v122) * v122);
  v127 = v50;
  v128 = v122;
  if ((int)v50 > 3)
  {
    v56 = v124;
    v57 = (v50 - 1) >> 1;
    v58 = (float64x2_t *)v124;
    v59 = (float64x2_t *)&v106;
    v45 = (cnprint::CNPrinter *)v131;
    do
    {
      v60 = *v58++;
      v61 = v60;
      v62 = *v59++;
      *(float64x2_t *)v45 = vsubq_f64(v61, v62);
      v45 = (cnprint::CNPrinter *)((char *)v45 + 16);
      --v57;
    }
    while (v57);
    *(float64x2_t *)&v131[(v50 - 2)] = vsubq_f64(*(float64x2_t *)&v56[(v50 - 2)], *(float64x2_t *)(&v106 + (v50 - 2)));
  }
  else if ((int)v50 >= 1)
  {
    v51 = (double *)v124;
    v52 = (DWORD1(v122) * v122);
    do
    {
      v53 = *v51++;
      v54 = v53;
      v55 = *v46++;
      *v47++ = v54 - v55;
      --v52;
    }
    while (v52);
  }
  v138 = 0x300000003;
  v133 = off_1003EEAC0;
  v139 = v140;
  v134 = v48;
  v135 = v49;
  v136 = v50;
  v137 = v48;
  if ((int)v50 >= 1)
  {
    if (v50 < 4)
    {
      v63 = 0;
LABEL_54:
      v68 = v50 - v63;
      v69 = 8 * v63 + 40;
      v70 = (double *)((char *)&v133 + v69);
      v71 = (double *)((char *)v126 + v69);
      do
      {
        v72 = *v71++;
        *v70++ = fabs(v72);
        --v68;
      }
      while (v68);
      goto LABEL_56;
    }
    v63 = v50 & 0x7FFFFFFC;
    v64 = (float64x2_t *)&v132;
    v65 = (float64x2_t *)v141;
    v66 = v50 & 0xFFFFFFFC;
    do
    {
      v67 = vabsq_f64(*v64);
      v65[-1] = vabsq_f64(v64[-1]);
      *v65 = v67;
      v64 += 2;
      v65 += 2;
      v66 -= 4;
    }
    while (v66);
    if (v63 != v50)
      goto LABEL_54;
  }
LABEL_56:
  v141[7] = off_1003EEAC0;
  v144 = v145;
  *(_DWORD *)v142 = 1;
  *(_DWORD *)&v142[4] = v49;
  v143 = 3;
  *(_DWORD *)&v142[8] = v49;
  *(_QWORD *)&v142[12] = 0x300000001;
  if (!(_DWORD)v49)
  {
    if ((_DWORD)v48 != 1)
    {
      LODWORD(v49) = 0;
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (v48 < 2)
  {
    v78 = 0;
    if (v49 < 4)
      goto LABEL_72;
    if ((_DWORD)v48 != 1)
      goto LABEL_72;
    v78 = v49 & 0xFFFFFFFC;
    v79 = (__int128 *)v141;
    v80 = v147;
    v81 = v78;
    do
    {
      v82 = *v79;
      *(v80 - 1) = *(v79 - 1);
      *v80 = v82;
      v79 += 2;
      v80 += 2;
      v81 -= 4;
    }
    while (v81);
    if (v78 != v49)
    {
LABEL_72:
      v83 = v49 - v78;
      v84 = &v145[v78];
      v85 = v48 * v78;
      do
      {
        *v84++ = v140[v85];
        v85 += v48;
        --v83;
      }
      while (v83);
    }
  }
  else
  {
    v73 = 0;
    v74 = 1;
    do
    {
      v75 = *(double *)&v140[(v48 * v73)];
      v76 = v74;
      v77 = v48 - 1;
      do
      {
        if (*(double *)&v140[v76] > v75)
          v75 = *(double *)&v140[v76];
        ++v76;
        --v77;
      }
      while (v77);
      *(double *)&v145[v73++] = v75;
      v74 += v48;
    }
    while (v73 != v49);
  }
  if ((_DWORD)v48 == 1 || (_DWORD)v49 == 1)
  {
    if ((int)v49 >= 2)
    {
      v86 = *(double *)v145;
      v87 = v49 - 1;
      v88 = (double *)&v146;
      do
      {
        v89 = *v88;
        if (*v88 > v86)
        {
          *(double *)v145 = *v88;
          v86 = v89;
        }
        ++v88;
        --v87;
      }
      while (v87);
    }
LABEL_81:
    *(_QWORD *)&v90 = 0x100000001;
    *((_QWORD *)&v90 + 1) = 0x100000001;
    *(_OWORD *)v142 = v90;
    LODWORD(v49) = 1;
  }
LABEL_82:
  v150 = 0x300000003;
  v148 = off_1003EEAC0;
  v151 = v152;
  if (!(_DWORD)v49)
    goto LABEL_94;
  if (v49 < 4)
  {
    v91 = 0;
    do
    {
LABEL_88:
      v152[v91] = v145[v91];
      ++v91;
    }
    while (v49 != v91);
    goto LABEL_89;
  }
  v91 = v49 & 0xFFFFFFFC;
  v92 = (__int128 *)v147;
  v93 = &v154;
  v94 = v91;
  do
  {
    v95 = *v92;
    *((_OWORD *)v93 - 1) = *(v92 - 1);
    *(_OWORD *)v93 = v95;
    v92 += 2;
    v93 += 4;
    v94 -= 4;
  }
  while (v94);
  if (v91 != v49)
    goto LABEL_88;
LABEL_89:
  if ((int)v49 >= 2)
  {
    v96 = *(double *)v152;
    v97 = v49 - 1;
    v98 = (double *)&v153;
    do
    {
      v99 = *v98;
      if (*v98 > v96)
      {
        *(double *)v152 = *v98;
        v96 = v99;
      }
      ++v98;
      --v97;
    }
    while (v97);
  }
LABEL_94:
  *(_QWORD *)&v100 = 0x100000001;
  *((_QWORD *)&v100 + 1) = 0x100000001;
  v149 = v100;
  if (fabs(*(double *)v152) > 0.00001)
    goto LABEL_96;
  v180 = 0x100000003;
  v178 = off_1003EEE68;
  v179 = xmmword_100382850;
  v181 = v182;
  v157 = 0x300000003;
  v155 = off_1003EEAC0;
  v156 = xmmword_1003827C0;
  v158 = &v159;
  if (fabs(sub_1000EB0BC((uint64_t)v160, (uint64_t)&v178, (uint64_t)&v155) + -1.0) > 0.00001)
  {
LABEL_96:
    if (cnprint::CNPrinter::GetLogLevel(v45) <= 1)
    {
      LOWORD(v155) = 12;
      LOBYTE(v148) = 1;
      cnprint::CNPrinter::Print(&v155, &v148, "ConvertProtobufVIOCameraPose, NOTE: ARKit camera pose rotation matrix failed the orthogonality check.", 0x100000003, 0x300000003);
    }
    return 0;
  }
  v101 = (cnprint::CNPrinter *)cntransformation::CNRigidTransformation::SetTransformationMatrix(a3 + 640, &v173);
  if ((v101 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel(v101) <= 1)
    {
      LOWORD(v155) = 12;
      LOBYTE(v148) = 1;
      cnprint::CNPrinter::Print(&v155, &v148, "ConvertProtobufVIOCameraPose, Cannot set/store the vio2camARKit Transformation Matrix.", 0x100000003, 0x300000003);
    }
    return 0;
  }
  return 1;
}

BOOL sub_1000E9084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  cnprint::CNPrinter *v6;
  uint64_t v7;
  double v8;
  cnprint::CNPrinter *LogLevel;
  int v10;
  float v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  unsigned int v49;
  cnprint::CNPrinter *v50;
  double *v51;
  double *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  uint64_t *v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  float64x2_t *v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  uint64_t v74;
  uint64_t v75;
  double *v76;
  double *v77;
  double v78;
  uint64_t v79;
  int v80;
  double v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  double v92;
  uint64_t v93;
  double *v94;
  double v95;
  __int128 v96;
  uint64_t v97;
  uint64_t i;
  __int128 *v99;
  uint64_t *v100;
  uint64_t v101;
  __int128 v102;
  double v103;
  uint64_t v104;
  double *v105;
  double v106;
  __int128 v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (***v115)();
  uint64_t (***v116)();
  uint64_t (**v117)();
  _QWORD *v118;
  uint64_t v119;
  __int128 *v120;
  _OWORD *v121;
  __int128 v122;
  cnprint::CNPrinter *v123;
  uint64_t v124;
  cnprint::CNPrinter *v125;
  uint64_t v126;
  const cnrotation::CNRotation *v127;
  __n128 v128;
  cnprint::CNPrinter *v129;
  double v130;
  BOOL v132;
  uint64_t v133;
  BOOL v134;
  BOOL v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  _BOOL4 v140;
  __int128 *v141;
  uint64_t *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  double v146;
  double v147;
  uint64_t v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  __int128 *v153;
  _OWORD *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t (**v157)();
  __int128 v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD v161[12];
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[2];
  int v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  _QWORD v169[2];
  uint64_t v170;
  uint64_t (**v171)();
  __int128 v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (**v182)();
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD v189[9];
  uint64_t (**v190)();
  __int128 v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t (**v195)();
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD v201[2];
  uint64_t v202;
  uint64_t (**v203)();
  unint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD v209[2];
  _BYTE v210[56];
  uint64_t (**v211)();
  _BYTE v212[24];
  __int128 *v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;
  uint64_t (**v219)();
  __int128 v220;
  uint64_t v221;
  const mach_header_64 **v222;
  const mach_header_64 *v223;
  int v224;
  uint64_t (**v225)();
  __int128 v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD v229[16];
  uint64_t (**v230)();
  __int128 v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  _BYTE v235[24];
  uint64_t v236;
  _QWORD *v237;
  _QWORD v238[308];

  if ((*(_BYTE *)(a2 + 52) & 4) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v225) = 1;
      cnprint::CNPrinter::Print(v235, &v225, "ConvertProtobufToVLLocalizationEvent, Event mach continuous time not present");
    }
    return 0;
  }
  v5 = *(double *)(a2 + 32);
  *(_QWORD *)&v235[8] = 0;
  *(_QWORD *)v235 = 0;
  v6 = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan((CNTimeSpan *)v235, 0, v5);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v235;
  if ((*(_BYTE *)(a1 + 64) & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v225) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      cnprint::CNPrinter::Print(v235, &v225, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Validity mach continuous time not present");
    }
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    v7 = *(_QWORD *)(qword_10041A990 + 16);
  v8 = *(double *)(v7 + 32);
  *(_QWORD *)&v235[8] = 0;
  *(_QWORD *)v235 = 0;
  LogLevel = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan((CNTimeSpan *)v235, 0, v8);
  *(_OWORD *)(a3 + 104) = *(_OWORD *)v235;
  v10 = *(_DWORD *)(a1 + 64);
  if ((v10 & 0x10) == 0 || ((v11 = *(float *)(a1 + 56), v11 >= 0.0) ? (v12 = v11 > 1.0) : (v12 = 1), v12))
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v225) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      cnprint::CNPrinter::Print(v235, &v225, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Estimation Confidence not present or wrong");
    }
    return 0;
  }
  *(double *)(a3 + 1088) = v11;
  if ((v10 & 4) == 0)
    goto LABEL_112;
  v13 = *(_QWORD *)(a1 + 32);
  if (!v13)
    v13 = *(_QWORD *)(qword_10041A990 + 32);
  if (*(_DWORD *)(v13 + 24) != 4)
    goto LABEL_112;
  v227 = 0x400000004;
  v225 = off_1003EEEB0;
  v226 = xmmword_100382A00;
  v228 = v229;
  v14 = *(_QWORD **)(v13 + 16);
  if (*(_DWORD *)(*v14 + 24) != 4)
    goto LABEL_112;
  v15 = *(_QWORD **)(*v14 + 16);
  v229[0] = *v15;
  v229[1] = v15[1];
  v229[2] = v15[2];
  v229[3] = v15[3];
  v16 = v14[1];
  if (*(_DWORD *)(v16 + 24) != 4)
    goto LABEL_112;
  v17 = *(_QWORD **)(v16 + 16);
  v229[4] = *v17;
  v229[5] = v17[1];
  v229[6] = v17[2];
  v229[7] = v17[3];
  v18 = v14[2];
  if (*(_DWORD *)(v18 + 24) != 4
    || (v19 = *(_QWORD **)(v18 + 16),
        v229[8] = *v19,
        v229[9] = v19[1],
        v229[10] = v19[2],
        v229[11] = v19[3],
        v20 = v14[3],
        *(_DWORD *)(v20 + 24) != 4))
  {
LABEL_112:
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v225) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      cnprint::CNPrinter::Print(v235, &v225, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 4x4 Transformation Matrix");
    }
    return 0;
  }
  v21 = *(_QWORD **)(v20 + 16);
  v229[12] = *v21;
  v229[13] = v21[1];
  v229[14] = v21[2];
  v229[15] = v21[3];
  v238[0] = &_mh_execute_header;
  v221 = 0x100000003;
  v219 = off_1003EEE68;
  v220 = xmmword_100382850;
  v224 = 2;
  v222 = &v223;
  v223 = &_mh_execute_header;
  sub_1000EB64C((uint64_t)v235, (uint64_t)&v225, (uint64_t)&v219, (uint64_t)&v219);
  v167 = 0x300000003;
  v164[0] = off_1003EEAC0;
  v22 = *(_DWORD *)&v235[8];
  v23 = *(_DWORD *)&v235[12];
  v164[1] = *(_QWORD *)&v235[8];
  v24 = (*(_DWORD *)&v235[12] * *(_DWORD *)&v235[8]);
  v165 = *(_DWORD *)&v235[12] * *(_DWORD *)&v235[8];
  v166 = *(_DWORD *)&v235[8];
  v168 = v169;
  v25 = *(_DWORD *)&v235[16];
  if (*(int *)&v235[16] > 3)
  {
    v33 = v237;
    v34 = (*(_DWORD *)&v235[16] - 1) >> 1;
    v35 = (__int128 *)v237;
    v36 = v169;
    do
    {
      v37 = *v35++;
      *v36++ = v37;
      --v34;
    }
    while (v34);
    *(_OWORD *)&v169[v25 - 2] = *(_OWORD *)&v33[v25 - 2];
  }
  else
  {
    if ((int)v24 < 1)
      goto LABEL_36;
    v26 = v237;
    if (v24 < 6 || (unint64_t)((char *)v164 - (char *)v237 + 40) < 0x20)
    {
      v27 = 0;
LABEL_30:
      v28 = v24 - v27;
      v29 = v27;
      v30 = &v164[v27 + 5];
      v31 = &v26[v29];
      do
      {
        v32 = *v31++;
        *v30++ = v32;
        --v28;
      }
      while (v28);
      goto LABEL_36;
    }
    v27 = v24 & 0x7FFFFFFC;
    v141 = (__int128 *)(v237 + 2);
    v142 = &v170;
    v143 = v24 & 0xFFFFFFFC;
    do
    {
      v144 = *v141;
      *((_OWORD *)v142 - 1) = *(v141 - 1);
      *(_OWORD *)v142 = v144;
      v141 += 2;
      v142 += 4;
      v143 -= 4;
    }
    while (v143);
    if (v27 != v24)
      goto LABEL_30;
  }
LABEL_36:
  v187 = 0x300000003;
  v182 = off_1003EEAC0;
  v188 = v189;
  v183 = v23;
  v184 = v22;
  v185 = v24;
  v186 = v23;
  if (v23 && v22)
  {
    v38 = 0;
    v39 = 0;
    v40 = v22 - 1;
    v41 = v22 & 0xFFFFFFFC;
    do
    {
      if (v22 >= 0xA)
      {
        v43 = (int)(v39 * v22 + v40) >= (int)(v39 * v22) && v23 == 1;
        v42 = 0;
        if (v43 && (int)(v39 + v40) >= v39)
        {
          do
          {
            v45 = (__int128 *)&v169[v38 + v42];
            v46 = *v45;
            v47 = v45[1];
            v48 = &v189[v39 + v42];
            *v48 = v46;
            v48[1] = v47;
            v42 += 4;
          }
          while (v41 != v42);
          v42 = v22 & 0xFFFFFFFC;
          if (v22 == v41)
            goto LABEL_39;
        }
      }
      else
      {
        v42 = 0;
      }
      v49 = v39 + v23 * v42;
      do
      {
        v189[v49] = v169[v38 + v42++];
        v49 += v23;
      }
      while (v22 != v42);
LABEL_39:
      ++v39;
      v38 += v22;
    }
    while (v39 != v23);
  }
  v192 = 0x300000003;
  v190 = off_1003EEAC0;
  v191 = xmmword_1003827C0;
  v193 = &v194;
  sub_1000E5948((uint64_t)&v182, (uint64_t)v164, (uint64_t)&v190);
  v173 = 0x300000003;
  v171 = off_1003EEAC0;
  v51 = (double *)&v175;
  v172 = xmmword_1003827C0;
  v176 = 0u;
  v177 = 0;
  v179 = 0u;
  v174 = &v175;
  v175 = 0x3FF0000000000000;
  v178 = 0x3FF0000000000000;
  v180 = 0;
  v181 = 0x3FF0000000000000;
  v199 = 0x300000003;
  v195 = off_1003EEAC0;
  v52 = (double *)v201;
  v200 = v201;
  v53 = v191;
  v54 = DWORD1(v191);
  v196 = v191;
  v55 = (DWORD1(v191) * v191);
  v197 = v55;
  v198 = v191;
  if ((int)v55 > 3)
  {
    v61 = v193;
    v62 = (v55 - 1) >> 1;
    v63 = (float64x2_t *)v193;
    v64 = (float64x2_t *)&v175;
    v65 = (float64x2_t *)v201;
    do
    {
      v66 = *v63++;
      v67 = v66;
      v68 = *v64++;
      *v65++ = vsubq_f64(v67, v68);
      --v62;
    }
    while (v62);
    *(float64x2_t *)&v201[(v55 - 2)] = vsubq_f64(*(float64x2_t *)&v61[(v55 - 2)], *(float64x2_t *)(&v175 + (v55 - 2)));
  }
  else if ((int)v55 >= 1)
  {
    v56 = (double *)v193;
    v57 = (DWORD1(v191) * v191);
    do
    {
      v58 = *v56++;
      v59 = v58;
      v60 = *v51++;
      *v52++ = v59 - v60;
      --v57;
    }
    while (v57);
  }
  v207 = 0x300000003;
  v203 = off_1003EEAC0;
  v208 = v209;
  v204 = __PAIR64__(v54, v53);
  v205 = v55;
  v206 = v53;
  if ((int)v55 >= 1)
  {
    if (v55 < 4)
    {
      v69 = 0;
LABEL_68:
      v74 = v55 - v69;
      v75 = 8 * v69 + 40;
      v76 = (double *)((char *)&v203 + v75);
      v77 = (double *)((char *)&v195 + v75);
      do
      {
        v78 = *v77++;
        *v76++ = fabs(v78);
        --v74;
      }
      while (v74);
      goto LABEL_70;
    }
    v69 = v55 & 0x7FFFFFFC;
    v70 = (float64x2_t *)&v202;
    v71 = (float64x2_t *)v210;
    v72 = v55 & 0xFFFFFFFC;
    do
    {
      v73 = vabsq_f64(*v70);
      v71[-1] = vabsq_f64(v70[-1]);
      *v71 = v73;
      v70 += 2;
      v71 += 2;
      v72 -= 4;
    }
    while (v72);
    if (v69 != v55)
      goto LABEL_68;
  }
LABEL_70:
  v211 = off_1003EEAC0;
  v213 = &v214;
  *(_DWORD *)v212 = 1;
  *(_DWORD *)&v212[4] = v54;
  *(_DWORD *)&v212[20] = 3;
  *(_DWORD *)&v212[8] = v54;
  *(_QWORD *)&v212[12] = 0x300000001;
  if ((_DWORD)v54)
  {
    if (v53 < 2)
    {
      v84 = 0;
      if (v54 < 4)
        goto LABEL_86;
      if ((_DWORD)v53 != 1)
        goto LABEL_86;
      v84 = v54 & 0xFFFFFFFC;
      v85 = (__int128 *)v210;
      v86 = &v215;
      v87 = v84;
      do
      {
        v88 = *v85;
        *(v86 - 1) = *(v85 - 1);
        *v86 = v88;
        v85 += 2;
        v86 += 2;
        v87 -= 4;
      }
      while (v87);
      if (v84 != v54)
      {
LABEL_86:
        v89 = v54 - v84;
        v90 = (_QWORD *)&v214 + v84;
        v91 = v53 * v84;
        do
        {
          *v90++ = v209[v91];
          v91 += v53;
          --v89;
        }
        while (v89);
      }
    }
    else
    {
      v79 = 0;
      v80 = 1;
      do
      {
        v81 = *(double *)&v209[(v53 * v79)];
        v82 = v80;
        v83 = v53 - 1;
        do
        {
          if (*(double *)&v209[v82] > v81)
            v81 = *(double *)&v209[v82];
          ++v82;
          --v83;
        }
        while (v83);
        *((double *)&v214 + v79++) = v81;
        v80 += v53;
      }
      while (v79 != v54);
    }
    if ((_DWORD)v53 != 1 && (_DWORD)v54 != 1)
    {
      v159 = 0x300000003;
      v157 = off_1003EEAC0;
      v160 = v161;
      goto LABEL_97;
    }
    if ((int)v54 >= 2)
    {
      v92 = *(double *)&v214;
      v93 = v54 - 1;
      v94 = (double *)&v214 + 1;
      do
      {
        v95 = *v94;
        if (*v94 > v92)
        {
          *(double *)&v214 = *v94;
          v92 = v95;
        }
        ++v94;
        --v93;
      }
      while (v93);
    }
  }
  else if ((_DWORD)v53 != 1)
  {
    v159 = 0x300000003;
    v157 = off_1003EEAC0;
    v160 = v161;
    goto LABEL_108;
  }
  *(_QWORD *)&v96 = 0x100000001;
  *((_QWORD *)&v96 + 1) = 0x100000001;
  *(_OWORD *)v212 = v96;
  v159 = 0x300000003;
  v157 = off_1003EEAC0;
  v160 = v161;
  LODWORD(v54) = 1;
LABEL_97:
  v97 = v54;
  if (v54 < 4)
  {
    for (i = 0; i != v97; ++i)
LABEL_102:
      v161[i] = *((_QWORD *)&v214 + i);
    goto LABEL_103;
  }
  i = v54 & 0xFFFFFFFC;
  v99 = &v215;
  v100 = &v163;
  v101 = v97 & 0xFFFFFFFC;
  do
  {
    v102 = *v99;
    *((_OWORD *)v100 - 1) = *(v99 - 1);
    *(_OWORD *)v100 = v102;
    v99 += 2;
    v100 += 4;
    v101 -= 4;
  }
  while (v101);
  if (i != v97)
    goto LABEL_102;
LABEL_103:
  if ((int)v97 >= 2)
  {
    v103 = *(double *)v161;
    v104 = v97 - 1;
    v105 = (double *)&v162;
    do
    {
      v106 = *v105;
      if (*v105 > v103)
      {
        *(double *)v161 = *v105;
        v103 = v106;
      }
      ++v105;
      --v104;
    }
    while (v104);
  }
LABEL_108:
  *(_QWORD *)&v158 = 0x100000001;
  *((_QWORD *)&v158 + 1) = 0x100000001;
  if (fabs(*(double *)v161) > 0.00001)
    goto LABEL_110;
  v232 = 0x100000003;
  v230 = off_1003EEE68;
  v231 = xmmword_100382850;
  v233 = &v234;
  v236 = 0x300000003;
  *(_QWORD *)v235 = off_1003EEAC0;
  *(_OWORD *)&v235[8] = xmmword_1003827C0;
  v237 = v238;
  if (fabs(sub_1000EB0BC((uint64_t)v164, (uint64_t)&v230, (uint64_t)v235) + -1.0) > 0.00001)
  {
LABEL_110:
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v50);
    if (LogLevel <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v157) = 1;
      LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(v235, &v157, "ConvertProtobufToVLLocalizationEvent, NOTE: VL rotation matrix failed the orthogonality check.");
    }
    goto LABEL_112;
  }
  v159 = 0x100000001;
  v157 = off_1003EEF40;
  *(_QWORD *)&v108 = 0x100000001;
  *((_QWORD *)&v108 + 1) = 0x100000001;
  v158 = v108;
  v160 = v161;
  LODWORD(v161[0]) = 3;
  sub_1000EBAE0((uint64_t)v235, (uint64_t)&v225, (uint64_t)&v219, (uint64_t)&v157);
  v207 = 0x100000003;
  v203 = off_1003EEBE8;
  v204 = *(_QWORD *)&v235[8];
  v109 = (*(_DWORD *)&v235[12] * *(_DWORD *)&v235[8]);
  v205 = *(_DWORD *)&v235[12] * *(_DWORD *)&v235[8];
  v206 = *(_DWORD *)&v235[8];
  v208 = v209;
  v110 = *(_DWORD *)&v235[16];
  if (*(int *)&v235[16] > 3)
  {
    v118 = v237;
    v119 = (*(_DWORD *)&v235[16] - 1) >> 1;
    v120 = (__int128 *)v237;
    v121 = v209;
    do
    {
      v122 = *v120++;
      *v121++ = v122;
      --v119;
    }
    while (v119);
    *(_OWORD *)&v209[v110 - 2] = *(_OWORD *)&v118[v110 - 2];
  }
  else
  {
    if ((int)v109 < 1)
      goto LABEL_126;
    v111 = v237;
    if (v109 < 6 || (unint64_t)((char *)&v203 - (char *)v237 + 40) < 0x20)
    {
      v112 = 0;
LABEL_120:
      v113 = v109 - v112;
      v114 = v112;
      v115 = &(&v203)[v112 + 5];
      v116 = (uint64_t (***)())&v111[v114];
      do
      {
        v117 = *v116++;
        *v115++ = v117;
        --v113;
      }
      while (v113);
      goto LABEL_126;
    }
    v112 = v109 & 0x7FFFFFFC;
    v153 = (__int128 *)(v237 + 2);
    v154 = v210;
    v155 = v109 & 0xFFFFFFFC;
    do
    {
      v156 = *v153;
      *(v154 - 1) = *(v153 - 1);
      *v154 = v156;
      v153 += 2;
      v154 += 2;
      v155 -= 4;
    }
    while (v155);
    if (v112 != v109)
      goto LABEL_120;
  }
LABEL_126:
  v159 = 0x100000003;
  v157 = off_1003EEBE8;
  v158 = xmmword_100382850;
  v160 = v161;
  v236 = 0x100000134;
  *(_QWORD *)v235 = off_1003EF018;
  *(_OWORD *)&v235[8] = xmmword_100382A10;
  v237 = v238;
  *(_QWORD *)&v212[16] = 0x100000003;
  v211 = off_1003EEBE8;
  *(_OWORD *)v212 = xmmword_100382850;
  v213 = &v214;
  sub_1000EC86C((uint64_t)&v203, (uint64_t)&v157, (uint64_t)v235, (uint64_t)&v211, "2");
  if ((v124 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v123);
    if (LogLevel <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v157) = 1;
      LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(v235, &v157, "ConvertProtobufToVLLocalizationEvent, NOTE: VL Position Vector failed the sensibility check.");
    }
    goto LABEL_112;
  }
  v125 = (cnprint::CNPrinter *)cntransformation::CNRigidTransformation::SetTransformationMatrix(a3 + 200, &v225);
  if ((v125 & 1) == 0)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v125);
    if (LogLevel <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v157) = 1;
      LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(v235, &v157, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix.");
    }
    goto LABEL_112;
  }
  v126 = sub_1000EA084(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 64), a3);
  if ((v126 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v126) <= 1)
    {
      *(_WORD *)v235 = 12;
      LOBYTE(v225) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
      cnprint::CNPrinter::Print(v235, &v225, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 6x6 Covariance Matrix");
    }
    return 0;
  }
  sub_1000EA3D4(a3 + 640, a3 + 200);
  *(_QWORD *)&v212[16] = 0x300000003;
  v211 = off_1003EEAC0;
  *(_OWORD *)v212 = xmmword_1003827C0;
  v217 = 0u;
  v216 = 0u;
  v215 = 0u;
  v214 = 0u;
  v218 = 0;
  *(_QWORD *)&v217 = 0xBFF0000000000000;
  *(_QWORD *)&v216 = 0xBFF0000000000000;
  v213 = &v214;
  *(_QWORD *)&v215 = 0xBFF0000000000000;
  sub_1000EBFA4(&v190, (uint64_t)&v211);
  cnrotation::CNRotation::CNRotation((cnrotation::CNRotation *)&v182, (const cnrotation::CNRotation *)(a3 + 640));
  cnrotation::Cat(&v171, (cnrotation *)&v182, (const cnrotation::CNRotation *)&v190, v127);
  cnrotation::CNRotation::operator=(a3 + 640, &v171);
  cnrotation::CNRotation::drdq((cnrotation::CNRotation *)&v171);
  cnrotation::CNRotation::dqaqdqa((cnrotation::CNRotation *)&v190);
  sub_1000EA7C8((uint64_t)v164, (uint64_t)v235, (uint64_t)&v225);
  cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)&v182);
  sub_1000EA76C((uint64_t)&v225, (uint64_t)&v157, (uint64_t)&v203);
  sub_1000EA848((uint64_t)v235, a3 + 736);
  sub_1000EA848((uint64_t)&v225, a3 + 960);
  sub_1000EA940((uint64_t)&v203, (uint64_t)v235, (uint64_t)&v157);
  sub_1000EA99C((uint64_t)&v203, (uint64_t)&v195);
  sub_1000EA940((uint64_t)&v157, (uint64_t)&v195, (uint64_t)v164);
  cntransformation::CNRigidTransformation::SetPrr(a3 + 640, v164, v128);
  sub_1000EA940((uint64_t)&v203, (uint64_t)&v225, (uint64_t)v164);
  cntransformation::CNRigidTransformation::SetPrp(a3 + 640, v164);
  *(_BYTE *)(a3 + 1080) = 1;
  sub_1000EA848((uint64_t)v164, a3 + 848);
  sub_1000EAB2C(a3 + 672);
  v132 = (*v168 < 0 || ((*v168 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      && (unint64_t)(*v168 - 1) > 0xFFFFFFFFFFFFELL;
  v140 = !v132
      && ((v133 = v168[v166 + 1], v133 >= 0)
        ? (v134 = ((v133 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
        : (v134 = 1),
          v134 ? (v135 = (unint64_t)(v133 - 1) > 0xFFFFFFFFFFFFELL) : (v135 = 0),
          !v135
       && ((v136 = v168[2 * v166 + 2], v136 >= 0)
         ? (v137 = ((v136 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         : (v137 = 1),
           v137 ? (v138 = (unint64_t)(v136 - 1) > 0xFFFFFFFFFFFFELL) : (v138 = 0),
           !v138))
      && v130 > 3185504.5
      && (*(_QWORD *)&v130 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  if (!cnprint::CNPrinter::GetLogLevel(v129))
  {
    LOWORD(v230) = 12;
    LOBYTE(v219) = 0;
    v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v147 = v146;
    v149 = *(double *)(a3 + 112);
    v157 = *(uint64_t (***)())(a3 + 104);
    v148 = (uint64_t)v157;
    *(double *)&v158 = v149;
    v195 = (uint64_t (**)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v196 = v150;
    v151 = CNTimeSpan::operator-(&v157, &v195);
    cnprint::CNPrinter::Print(&v230, &v219, "valid VLF data, t, %.3lf, applicability time,  %.3lf [dt %.3lf]", v147 + (double)v145, (double)v148 + v149, v152 + (double)v151);
  }
  return *(_BYTE *)(a3 + 1080) && v140;
}

uint64_t sub_1000EA084(uint64_t a1, char a2, uint64_t a3)
{
  double v3;
  double v4;
  _QWORD *v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  cnprint::CNPrinter *v18;
  char v19;
  __int16 v20;
  uint64_t (**v21)();
  __int128 v22;
  uint64_t v23;
  double *v24;
  double v25[40];

  if ((a2 & 8) == 0)
    return 0;
  v25[38] = v3;
  v25[39] = v4;
  if (!a1)
  {
    a1 = *(_QWORD *)(qword_10041A990 + 40);
    if (*(_DWORD *)(a1 + 24) == 6)
      goto LABEL_5;
    return 0;
  }
  if (*(_DWORD *)(a1 + 24) != 6)
    return 0;
LABEL_5:
  v23 = 0x600000006;
  v21 = off_1003EEFD0;
  v22 = xmmword_100382A20;
  v24 = v25;
  v6 = *(_QWORD **)(a1 + 16);
  if (*(_DWORD *)(*v6 + 24) != 6)
    return 0;
  v7 = *(float **)(*v6 + 16);
  v25[21] = *v7;
  v25[27] = v7[1];
  v25[33] = v7[2];
  v25[3] = v7[3];
  v25[9] = v7[4];
  v25[15] = v7[5];
  v8 = v6[1];
  if (*(_DWORD *)(v8 + 24) != 6)
    return 0;
  v9 = *(float **)(v8 + 16);
  v25[22] = *v9;
  v25[28] = v9[1];
  v25[34] = v9[2];
  v25[4] = v9[3];
  v25[10] = v9[4];
  v25[16] = v9[5];
  v10 = v6[2];
  if (*(_DWORD *)(v10 + 24) != 6)
    return 0;
  v11 = *(float **)(v10 + 16);
  v25[23] = *v11;
  v25[29] = v11[1];
  v25[35] = v11[2];
  v25[5] = v11[3];
  v25[11] = v11[4];
  v25[17] = v11[5];
  v12 = v6[3];
  if (*(_DWORD *)(v12 + 24) != 6)
    return 0;
  v13 = *(float **)(v12 + 16);
  v25[18] = *v13;
  v25[24] = v13[1];
  v25[30] = v13[2];
  v25[0] = v13[3];
  v25[6] = v13[4];
  v25[12] = v13[5];
  v14 = v6[4];
  if (*(_DWORD *)(v14 + 24) != 6)
    return 0;
  v15 = *(float **)(v14 + 16);
  v25[19] = *v15;
  v25[25] = v15[1];
  v25[31] = v15[2];
  v25[1] = v15[3];
  v25[7] = v15[4];
  v25[13] = v15[5];
  v16 = v6[5];
  if (*(_DWORD *)(v16 + 24) != 6)
    return 0;
  v17 = *(float **)(v16 + 16);
  v25[20] = *v17;
  v25[26] = v17[1];
  v25[32] = v17[2];
  v25[2] = v17[3];
  v25[8] = v17[4];
  v25[14] = v17[5];
  v18 = (cnprint::CNPrinter *)cntransformation::CNRigidTransformation::SetCovarianceMatrix(a3 + 200, &v21);
  if ((v18 & 1) != 0)
    return 1;
  if (cnprint::CNPrinter::GetLogLevel(v18) > 1)
    return 0;
  v20 = 12;
  v19 = 1;
  cnprint::CNPrinter::Print(&v20, &v19, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix Covariance");
  return 0;
}

uint64_t sub_1000EA3D4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  __int128 v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 *v70;
  _OWORD *v71;
  __int128 v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  __int128 v96;

  cnrotation::CNRotation::operator=();
  if (a1 == a2)
  {
LABEL_50:
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    return a1;
  }
  v5 = *(_DWORD *)(a2 + 40);
  v4 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v4;
  v6 = (v4 * v5);
  *(_DWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 52) = v5;
  v7 = *(_DWORD *)(a2 + 48);
  if (v7 > 3)
  {
    v20 = (v7 - 2);
    v21 = *(_OWORD **)(a1 + 64);
    v22 = *(__int128 **)(a2 + 64);
    v23 = (v7 - 1) >> 1;
    v24 = v22;
    v25 = v21;
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      --v23;
    }
    while (v23);
    *(_OWORD *)((char *)v21 + 8 * v20) = *(__int128 *)((char *)v22 + 8 * v20);
  }
  else if ((int)v6 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a1 + 64);
    if (v6 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - v9) < 0x20)
      goto LABEL_9;
    v8 = v6 & 0x7FFFFFFC;
    v11 = (__int128 *)(v9 + 16);
    v12 = (_OWORD *)(v10 + 16);
    v13 = v6 & 0xFFFFFFFC;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 4;
    }
    while (v13);
    if (v8 != v6)
    {
LABEL_9:
      v15 = v6 - v8;
      v16 = 8 * v8;
      v17 = (_QWORD *)(v10 + v16);
      v18 = (uint64_t *)(v9 + v16);
      do
      {
        v19 = *v18++;
        *v17++ = v19;
        --v15;
      }
      while (v15);
    }
  }
  v28 = *(_DWORD *)(a2 + 104);
  v27 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v28;
  *(_DWORD *)(a1 + 108) = v27;
  v29 = (v27 * v28);
  *(_DWORD *)(a1 + 112) = v29;
  *(_DWORD *)(a1 + 116) = v28;
  v30 = *(_DWORD *)(a2 + 112);
  if (v30 > 3)
  {
    v43 = (v30 - 2);
    v44 = *(_OWORD **)(a1 + 128);
    v45 = *(__int128 **)(a2 + 128);
    v46 = (v30 - 1) >> 1;
    v47 = v45;
    v48 = v44;
    do
    {
      v49 = *v47++;
      *v48++ = v49;
      --v46;
    }
    while (v46);
    *(_OWORD *)((char *)v44 + 8 * v43) = *(__int128 *)((char *)v45 + 8 * v43);
  }
  else if ((int)v29 >= 1)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a2 + 128);
    v33 = *(_QWORD *)(a1 + 128);
    if (v29 < 4)
      goto LABEL_22;
    if ((unint64_t)(v33 - v32) < 0x20)
      goto LABEL_22;
    v31 = v29 & 0x7FFFFFFC;
    v34 = (__int128 *)(v32 + 16);
    v35 = (_OWORD *)(v33 + 16);
    v36 = v29 & 0xFFFFFFFC;
    do
    {
      v37 = *v34;
      *(v35 - 1) = *(v34 - 1);
      *v35 = v37;
      v34 += 2;
      v35 += 2;
      v36 -= 4;
    }
    while (v36);
    if (v31 != v29)
    {
LABEL_22:
      v38 = v29 - v31;
      v39 = 8 * v31;
      v40 = (_QWORD *)(v33 + v39);
      v41 = (uint64_t *)(v32 + v39);
      do
      {
        v42 = *v41++;
        *v40++ = v42;
        --v38;
      }
      while (v38);
    }
  }
  v51 = *(_DWORD *)(a2 + 216);
  v50 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v51;
  *(_DWORD *)(a1 + 220) = v50;
  v52 = (v50 * v51);
  *(_DWORD *)(a1 + 224) = v52;
  *(_DWORD *)(a1 + 228) = v51;
  v53 = *(_DWORD *)(a2 + 224);
  if (v53 > 3)
  {
    v66 = (v53 - 2);
    v67 = *(_OWORD **)(a1 + 240);
    v68 = *(__int128 **)(a2 + 240);
    v69 = (v53 - 1) >> 1;
    v70 = v68;
    v71 = v67;
    do
    {
      v72 = *v70++;
      *v71++ = v72;
      --v69;
    }
    while (v69);
    *(_OWORD *)((char *)v67 + 8 * v66) = *(__int128 *)((char *)v68 + 8 * v66);
  }
  else if ((int)v52 >= 1)
  {
    v54 = 0;
    v55 = *(_QWORD *)(a2 + 240);
    v56 = *(_QWORD *)(a1 + 240);
    if (v52 < 4)
      goto LABEL_35;
    if ((unint64_t)(v56 - v55) < 0x20)
      goto LABEL_35;
    v54 = v52 & 0x7FFFFFFC;
    v57 = (__int128 *)(v55 + 16);
    v58 = (_OWORD *)(v56 + 16);
    v59 = v52 & 0xFFFFFFFC;
    do
    {
      v60 = *v57;
      *(v58 - 1) = *(v57 - 1);
      *v58 = v60;
      v57 += 2;
      v58 += 2;
      v59 -= 4;
    }
    while (v59);
    if (v54 != v52)
    {
LABEL_35:
      v61 = v52 - v54;
      v62 = 8 * v54;
      v63 = (_QWORD *)(v56 + v62);
      v64 = (uint64_t *)(v55 + v62);
      do
      {
        v65 = *v64++;
        *v63++ = v65;
        --v61;
      }
      while (v61);
    }
  }
  v73 = *(_DWORD *)(a2 + 328);
  v74 = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 328) = v73;
  *(_DWORD *)(a1 + 332) = v74;
  v75 = (v74 * v73);
  *(_DWORD *)(a1 + 336) = v75;
  *(_DWORD *)(a1 + 340) = v73;
  v76 = *(_DWORD *)(a2 + 336);
  if (v76 <= 3)
  {
    if ((int)v75 >= 1)
    {
      v77 = 0;
      v78 = *(_QWORD *)(a2 + 352);
      v79 = *(_QWORD *)(a1 + 352);
      if (v75 < 4)
        goto LABEL_48;
      if ((unint64_t)(v79 - v78) < 0x20)
        goto LABEL_48;
      v77 = v75 & 0x7FFFFFFC;
      v80 = (__int128 *)(v78 + 16);
      v81 = (_OWORD *)(v79 + 16);
      v82 = v75 & 0xFFFFFFFC;
      do
      {
        v83 = *v80;
        *(v81 - 1) = *(v80 - 1);
        *v81 = v83;
        v80 += 2;
        v81 += 2;
        v82 -= 4;
      }
      while (v82);
      if (v77 != v75)
      {
LABEL_48:
        v84 = v75 - v77;
        v85 = 8 * v77;
        v86 = (_QWORD *)(v79 + v85);
        v87 = (uint64_t *)(v78 + v85);
        do
        {
          v88 = *v87++;
          *v86++ = v88;
          --v84;
        }
        while (v84);
      }
    }
    goto LABEL_50;
  }
  v90 = (v76 - 2);
  v91 = *(_OWORD **)(a1 + 352);
  v92 = *(__int128 **)(a2 + 352);
  v93 = (v76 - 1) >> 1;
  v94 = v92;
  v95 = v91;
  do
  {
    v96 = *v94++;
    *v95++ = v96;
    --v93;
  }
  while (v93);
  *(_OWORD *)((char *)v91 + 8 * v90) = *(__int128 *)((char *)v92 + 8 * v90);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  return a1;
}

void sub_1000EA76C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = off_1003EEAC0;
  *(_OWORD *)(a3 + 8) = xmmword_1003827C0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_1000E5948(a1, a2, a3);
}

void sub_1000EA7B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1003EEB18;
  _Unwind_Resume(a1);
}

void sub_1000EA7C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x400000003;
  *(_QWORD *)a3 = off_1003EF060;
  *(_OWORD *)(a3 + 8) = xmmword_100382A30;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_1000E5948(a1, a2, a3);
}

void sub_1000EA818(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1003EEB18;
  _Unwind_Resume(a1);
}

_QWORD *sub_1000EA828(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000EA838(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

__n128 sub_1000EA848(uint64_t a1, uint64_t a2)
{
  __n128 result;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  uint64_t v23;
  __n128 v24;

  result.n128_u64[0] = 0x300000003;
  *(_QWORD *)(a1 + 24) = 0x300000003;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1003EEAC0;
  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 > 3)
  {
    v14 = (v6 - 2);
    v15 = *(__int128 **)(a2 + 32);
    v16 = (v6 - 1) >> 1;
    v17 = v15;
    v18 = (_OWORD *)(a1 + 40);
    do
    {
      v19 = *v17++;
      *v18++ = v19;
      --v16;
    }
    while (v16);
    v20 = 8 * v14;
    result = *(__n128 *)((char *)v15 + v20);
    *(__n128 *)(a1 + 40 + v20) = result;
  }
  else
  {
    if ((int)v5 < 1)
      return result;
    v7 = *(__n128 **)(a2 + 32);
    if (v5 < 6 || (unint64_t)(a1 - (_QWORD)v7 + 40) < 0x20)
    {
      v8 = 0;
LABEL_6:
      v9 = v5 - v8;
      v10 = v8;
      v11 = (unint64_t *)(8 * v8 + a1 + 40);
      v12 = &v7->n128_u64[v10];
      do
      {
        v13 = *v12++;
        result.n128_u64[0] = v13;
        *v11++ = v13;
        --v9;
      }
      while (v9);
      return result;
    }
    v8 = v5 & 0x7FFFFFFC;
    v21 = v7 + 1;
    v22 = (__n128 *)(a1 + 56);
    v23 = v5 & 0xFFFFFFFC;
    do
    {
      result = v21[-1];
      v24 = *v21;
      v22[-1] = result;
      *v22 = v24;
      v21 += 2;
      v22 += 2;
      v23 -= 4;
    }
    while (v23);
    if (v8 != v5)
      goto LABEL_6;
  }
  return result;
}

void sub_1000EA940(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = off_1003EEAC0;
  *(_OWORD *)(a3 + 8) = xmmword_1003827C0;
  *(_QWORD *)(a3 + 32) = a3 + 40;
  sub_1000E5948(a1, a2, a3);
}

void sub_1000EA98C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1003EEB18;
  _Unwind_Resume(a1);
}

double sub_1000EA99C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int k;
  _QWORD *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  signed int v15;
  unint64_t v16;
  BOOL v18;
  int v19;
  int i;
  int v21;
  int j;
  int v23;
  int v24;
  unsigned int v25;
  _OWORD *v26;
  __int128 *v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  unsigned int v31;
  __int128 v32;
  signed int v33;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)&v4 = 0x300000003;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_1003EEAC0;
  v5 = a2 + 40;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2 && v3)
  {
    v6 = *(_DWORD *)(a1 + 20);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = a2 + 40;
    if (v3 > 0xB)
    {
      if (v2 == 1)
      {
        v15 = v3 & 0xFFFFFFFC;
        v16 = v8 - v7;
        v18 = (int)(v3 - 1) < 0 || v16 < 0x20;
        if (v3 == v15)
        {
          if (v18)
          {
            v19 = 0;
            for (i = 0; i != v3; ++i)
            {
              *(_QWORD *)&v4 = *(_QWORD *)(v7 + 8 * i);
              *(_QWORD *)(v5 + 8 * v19++) = v4;
            }
          }
          else
          {
            v26 = (_OWORD *)(a2 + 56);
            v27 = (__int128 *)(v7 + 16);
            do
            {
              v4 = *(v27 - 1);
              v28 = *v27;
              *(v26 - 1) = v4;
              *v26 = v28;
              v26 += 2;
              v27 += 2;
              v15 -= 4;
            }
            while (v15);
          }
        }
        else
        {
          if (v18)
          {
            v15 = 0;
          }
          else
          {
            v29 = (_OWORD *)(a2 + 56);
            v30 = (__int128 *)(v7 + 16);
            v31 = v3 & 0xFFFFFFFC;
            do
            {
              v32 = *v30;
              *(v29 - 1) = *(v30 - 1);
              *v29 = v32;
              v29 += 2;
              v30 += 2;
              v31 -= 4;
            }
            while (v31);
          }
          v33 = v15;
          do
          {
            *(_QWORD *)&v4 = *(_QWORD *)(v7 + 8 * v15);
            *(_QWORD *)(v5 + 8 * v33) = v4;
            ++v15;
            ++v33;
          }
          while (v3 != v15);
        }
      }
      else
      {
        v21 = 0;
        for (j = 0; j != v2; ++j)
        {
          v23 = v21;
          v24 = j;
          v25 = v3;
          do
          {
            *(_QWORD *)&v4 = *(_QWORD *)(v7 + 8 * v23);
            *(_QWORD *)(v5 + 8 * v24) = v4;
            v24 += v2;
            ++v23;
            --v25;
          }
          while (v25);
          v21 += v6;
        }
      }
    }
    else
    {
      v9 = 0;
      for (k = 0; k != v2; ++k)
      {
        v11 = (_QWORD *)(v8 + 8 * k);
        v12 = v3;
        v13 = (uint64_t *)(v7 + 8 * v9);
        do
        {
          v14 = *v13++;
          *(_QWORD *)&v4 = v14;
          *v11 = v14;
          v11 += v2;
          --v12;
        }
        while (v12);
        v9 += v6;
      }
    }
  }
  return *(double *)&v4;
}

void sub_1000EAB2C(uint64_t a1)
{
  uint64_t (**v1)();
  __int128 v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v13 = 0x100000003;
  v11 = off_1003EEBE8;
  v12 = xmmword_100382850;
  v14 = &v15;
  v8 = 0x100000134;
  v6 = off_1003EF018;
  v7 = xmmword_100382A10;
  v9 = &v10;
  v3 = 0x100000003;
  v1 = off_1003EEBE8;
  v2 = xmmword_100382850;
  v4 = &v5;
  sub_1000EC86C(a1, (uint64_t)&v11, (uint64_t)&v6, (uint64_t)&v1, "2");
}

_QWORD *sub_1000EABDC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1000EAC54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1000EAC70@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  unint64_t v3;
  __n128 result;
  __n128 *v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  double v21;

  *(_DWORD *)(a2 + 28) = 3;
  *(_QWORD *)a2 = off_1003EEAC0;
  v2 = (double *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3;
  result.n128_u64[0] = 0x300000001;
  *(_QWORD *)(a2 + 20) = 0x300000001;
  if (!(_DWORD)v3)
  {
    if (*(_DWORD *)(a1 + 8) != 1)
      return result;
LABEL_29:
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    return result;
  }
  v5 = *(__n128 **)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 < 2)
  {
    v10 = 0;
    if (v3 >= 8 && (_DWORD)v6 == 1)
    {
      if ((unint64_t)(a2 - (_QWORD)v5 + 40) >= 0x20)
      {
        v10 = v3 & 0xFFFFFFFC;
        v11 = v5 + 1;
        v12 = (__n128 *)(a2 + 56);
        v13 = v10;
        do
        {
          result = v11[-1];
          v14 = *v11;
          v12[-1] = result;
          *v12 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 4;
        }
        while (v13);
        if (v10 == v3)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
      }
    }
    v15 = v3 - v10;
    v16 = (_QWORD *)(a2 + 8 * v10 + 40);
    v17 = v6 * v10;
    do
    {
      result.n128_u64[0] = v5->n128_u64[v17];
      *v16++ = result.n128_u64[0];
      v17 += v6;
      --v15;
    }
    while (v15);
    goto LABEL_21;
  }
  v7 = 0;
  for (i = 0; i != v3; ++i)
  {
    result.n128_u64[0] = v5->n128_u64[(v6 * i)];
    for (j = 1; j != v6; ++j)
    {
      if (v5->n128_f64[(v7 + j)] > result.n128_f64[0])
        result.n128_u64[0] = v5->n128_u64[(v7 + j)];
    }
    v2[i] = result.n128_f64[0];
    v7 += v6;
  }
LABEL_21:
  if ((_DWORD)v3 == 1 || (_DWORD)v6 == 1)
  {
    if ((int)v3 >= 2)
    {
      v18 = *v2;
      v19 = 6;
      do
      {
        v21 = *(double *)(a2 + 8 * v19);
        if (v21 > v18)
        {
          *v2 = v21;
          v18 = v21;
        }
        v20 = v19 - 4;
        ++v19;
      }
      while (v20 < v3);
    }
    goto LABEL_29;
  }
  return result;
}

float64x2_t sub_1000EADF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  float64x2_t result;
  uint64_t v5;
  float64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float64_t *v10;
  double *v11;
  double v12;
  float64x2_t *v13;
  float64x2_t *v14;
  uint64_t v15;
  float64x2_t v16;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_QWORD *)&result.f64[0] = 0x300000003;
  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_1003EEAC0;
  v5 = (v3 * v2);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v2;
  if ((int)v5 >= 1)
  {
    v6 = *(float64x2_t **)(a1 + 32);
    if (v5 < 6 || (unint64_t)(a2 - (_QWORD)v6 + 40) < 0x20)
    {
      v7 = 0;
LABEL_5:
      v8 = v5 - v7;
      v9 = v7;
      v10 = (float64_t *)(v9 * 8 + a2 + 40);
      v11 = &v6->f64[v9];
      do
      {
        v12 = *v11++;
        result.f64[0] = fabs(v12);
        *v10++ = result.f64[0];
        --v8;
      }
      while (v8);
      return result;
    }
    v7 = v5 & 0x7FFFFFFC;
    v13 = v6 + 1;
    v14 = (float64x2_t *)(a2 + 56);
    v15 = v5 & 0xFFFFFFFC;
    do
    {
      result = vabsq_f64(v13[-1]);
      v16 = vabsq_f64(*v13);
      v14[-1] = result;
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v7 != v5)
      goto LABEL_5;
  }
  return result;
}

float64x2_t sub_1000EAEAC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t result;
  float64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;

  *(_QWORD *)&result.f64[0] = 0x300000003;
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = off_1003EEAC0;
  v4 = (float64_t *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  if ((int)v7 > 3)
  {
    v13 = (v7 - 2);
    v14 = *(float64x2_t **)(a1 + 32);
    v15 = *(float64x2_t **)(a2 + 32);
    v16 = (float64x2_t *)((char *)v15 + 8 * v13);
    v17 = (v7 - 1) >> 1;
    v18 = v14;
    v19 = (float64x2_t *)v4;
    do
    {
      v20 = *v18++;
      v21 = v20;
      v22 = *v15++;
      *v19++ = vsubq_f64(v21, v22);
      --v17;
    }
    while (v17);
    result = vsubq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v16);
    *(float64x2_t *)&v4[v13] = result;
  }
  else if ((int)v7 >= 1)
  {
    v8 = *(double **)(a1 + 32);
    v9 = *(double **)(a2 + 32);
    do
    {
      v10 = *v8++;
      v11 = v10;
      v12 = *v9++;
      result.f64[0] = v11 - v12;
      *v4++ = result.f64[0];
      --v7;
    }
    while (v7);
  }
  return result;
}

double sub_1000EAF5C(uint64_t a1)
{
  uint64_t (**v2)();
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (**v7)();
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v9 = 0x100000003;
  v7 = off_1003EEE68;
  v8 = xmmword_100382850;
  v10 = &v11;
  v4 = 0x300000003;
  v2 = off_1003EEAC0;
  v3 = xmmword_1003827C0;
  v5 = &v6;
  return sub_1000EB0BC(a1, (uint64_t)&v7, (uint64_t)&v2);
}

__n128 sub_1000EAFDC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 + 32 != a2)
  {
    v3 = *(_DWORD *)(a2 + 8);
    v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 44) = v2;
    v4 = (v2 * v3);
    *(_DWORD *)(a1 + 48) = v4;
    *(_DWORD *)(a1 + 52) = v3;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v19 = (v5 - 2);
      v20 = *(_OWORD **)(a1 + 64);
      v21 = *(__int128 **)(a2 + 32);
      v22 = (v5 - 1) >> 1;
      v23 = v21;
      v24 = v20;
      do
      {
        v25 = *v23++;
        *v24++ = v25;
        --v22;
      }
      while (v22);
      v26 = 8 * v19;
      result = *(__n128 *)((char *)v21 + v26);
      *(__n128 *)((char *)v20 + v26) = result;
    }
    else if ((int)v4 >= 1)
    {
      v6 = 0;
      v7 = *(__n128 **)(a2 + 32);
      v8 = *(__n128 **)(a1 + 64);
      if (v4 < 4)
        goto LABEL_9;
      if ((unint64_t)((char *)v8 - (char *)v7) < 0x20)
        goto LABEL_9;
      v6 = v4 & 0x7FFFFFFC;
      v9 = v7 + 1;
      v10 = v8 + 1;
      v11 = v4 & 0xFFFFFFFC;
      do
      {
        result = v9[-1];
        v13 = *v9;
        v10[-1] = result;
        *v10 = v13;
        v9 += 2;
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      if (v6 != v4)
      {
LABEL_9:
        v14 = v4 - v6;
        v15 = v6;
        v16 = &v8->n128_u64[v15];
        v17 = &v7->n128_u64[v15];
        do
        {
          v18 = *v17++;
          result.n128_u64[0] = v18;
          *v16++ = v18;
          --v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

double sub_1000EB0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  __CLPK_doublereal *v30;
  __CLPK_integer v31;
  void *v32;
  size_t v33;
  __CLPK_integer *v34;
  __CLPK_integer *v35;
  int v36;
  double *v37;
  double result;
  int v39;
  int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  unint64_t v47;
  int32x4_t v48;
  int64x2_t v49;
  int8x16_t v50;
  int64x2_t v51;
  uint64_t v52;
  int32x4_t v53;
  uint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  __CLPK_integer __info;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;

  if (a3 != a1)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a3 + 8) = v6;
    *(_DWORD *)(a3 + 12) = v5;
    v7 = (v5 * v6);
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v6;
    v8 = *(_DWORD *)(a1 + 16);
    if (v8 > 3)
    {
      v21 = (v8 - 2);
      v22 = *(_OWORD **)(a3 + 32);
      v23 = *(__int128 **)(a1 + 32);
      v24 = (_OWORD *)((char *)v22 + 8 * v21);
      v25 = (v8 - 1) >> 1;
      v26 = v23;
      do
      {
        v27 = *v26++;
        *v22++ = v27;
        --v25;
      }
      while (v25);
      *v24 = *(__int128 *)((char *)v23 + 8 * v21);
    }
    else if ((int)v7 >= 1)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a3 + 32);
      if (v7 < 4)
        goto LABEL_9;
      if ((unint64_t)(v11 - v10) < 0x20)
        goto LABEL_9;
      v9 = v7 & 0x7FFFFFFC;
      v12 = (__int128 *)(v10 + 16);
      v13 = (_OWORD *)(v11 + 16);
      v14 = v7 & 0xFFFFFFFC;
      do
      {
        v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v9 != v7)
      {
LABEL_9:
        v16 = v7 - v9;
        v17 = 8 * v9;
        v18 = (_QWORD *)(v11 + v17);
        v19 = (uint64_t *)(v10 + v17);
        do
        {
          v20 = *v19++;
          *v18++ = v20;
          --v16;
        }
        while (v16);
      }
    }
  }
  v28 = *(unsigned int *)(a3 + 8);
  v29 = *(unsigned int *)(a3 + 12);
  v30 = *(__CLPK_doublereal **)(a3 + 32);
  v31 = *(_DWORD *)(a3 + 20);
  v32 = *(void **)(a2 + 32);
  __n = *(_DWORD *)(a3 + 12);
  __m = v28;
  __lda = v31;
  if ((int)v28 < 1)
  {
    v36 = -1;
  }
  else
  {
    v33 = 4 * v28;
    v34 = (__CLPK_integer *)operator new[](4 * v28, &std::nothrow);
    if (v34)
    {
      v35 = v34;
      __info = 0;
      dgetrf_(&__m, &__n, v30, &__lda, v34, &__info);
      memcpy(v32, v35, v33);
      operator delete[]();
    }
    v36 = -5;
  }
  LOWORD(__m) = 4;
  LOBYTE(__n) = 5;
  cnprint::CNPrinter::Print(&__m, &__n, "Error using Det: input argument %d invalid in getrf.", -v36);
  v37 = *(double **)(a3 + 32);
  result = *v37;
  if (v29 >= 2)
  {
    v39 = v29 - 1;
    v40 = v29 + 1;
    do
    {
      result = result * v37[v40];
      v40 += v29 + 1;
      --v39;
    }
    while (v39);
  }
  if ((int)v29 >= 1)
  {
    v41 = *(_QWORD *)(a2 + 32);
    if (v29 >= 0xC)
    {
      v44 = vdupq_n_s64(v29);
      v43 = v29 & 7;
      v45 = vaddq_s64(v44, (int64x2_t)xmmword_100382A40);
      v46 = vaddq_s64(v44, (int64x2_t)xmmword_100382A50);
      v47 = v29 - 1;
      v48 = 0uLL;
      v49 = vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
      v50.i64[0] = 0x100000001;
      v50.i64[1] = 0x100000001;
      v51 = vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
      v52 = v29 & 0xFFFFFFF8;
      v53 = 0uLL;
      do
      {
        v54 = v41 + 4 * v47;
        v55 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v54 - 12));
        v56 = vextq_s8(v55, v55, 8uLL);
        v57 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v54 - 28));
        v58 = vextq_s8(v57, v57, 8uLL);
        v59.i64[0] = v56.u32[0];
        v59.i64[1] = v56.u32[1];
        v60 = v59;
        v59.i64[0] = v56.u32[2];
        v59.i64[1] = v56.u32[3];
        v61 = v59;
        v59.i64[0] = v58.u32[0];
        v59.i64[1] = v58.u32[1];
        v62 = v59;
        v59.i64[0] = v58.u32[2];
        v59.i64[1] = v58.u32[3];
        v48 = vaddq_s32(v48, (int32x4_t)vbicq_s8(v50, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v46, v60), (int32x4_t)vceqq_s64(v45, v61))));
        v53 = vaddq_s32(v53, (int32x4_t)vbicq_s8(v50, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v46, v49), v62), (int32x4_t)vceqq_s64(vaddq_s64(v45, v49), v59))));
        v45 = vaddq_s64(v45, v51);
        v46 = vaddq_s64(v46, v51);
        v47 -= 8;
        v52 -= 8;
      }
      while (v52);
      v42 = vaddvq_s32(vaddq_s32(v53, v48));
      if ((v29 & 0x7FFFFFF8) == v29)
        goto LABEL_30;
    }
    else
    {
      v42 = 0;
      v43 = v29;
    }
    do
      v42 += v43 != *(unsigned int *)(v41 + 4 * (v43 - 1));
    while (v43-- > 1);
LABEL_30:
    if ((v42 & 1) != 0)
      return -result;
  }
  return result;
}

_QWORD *sub_1000EB3F0(_QWORD *result)
{
  *result = off_1003EECD0;
  return result;
}

void sub_1000EB400(_QWORD *a1)
{
  *a1 = off_1003EECD0;
  operator delete();
}

uint64_t sub_1000EB420(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000EB42C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE v14[3];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_DWORD *)(v7 + 4 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 4 * v11;
              v13 = *(_DWORD *)(v7 + v12);
              *(_DWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_QWORD *sub_1000EB500(_QWORD *result)
{
  result[22] = off_1003EECD0;
  result[15] = off_1003EECD0;
  *result = off_1003EEB18;
  return result;
}

void sub_1000EB520(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000EB540(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000EB54C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_1000EB64C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int *v49;
  unsigned int v50;
  int v51;
  __int128 *v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 *v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;

  *(_QWORD *)(result + 24) = 0x300000003;
  *(_OWORD *)(result + 8) = xmmword_1003827C0;
  *(_QWORD *)(result + 32) = result + 40;
  *(_QWORD *)result = off_1003EEEF8;
  *(_QWORD *)(result + 112) = a2;
  *(_QWORD *)(result + 144) = 0x100000003;
  *(_QWORD *)(result + 120) = off_1003EEE68;
  *(_OWORD *)(result + 128) = xmmword_100382850;
  *(_QWORD *)(result + 176) = off_1003EEE68;
  *(_QWORD *)(result + 152) = result + 160;
  *(_QWORD *)(result + 200) = 0x100000003;
  *(_OWORD *)(result + 184) = xmmword_100382850;
  v4 = result + 216;
  *(_QWORD *)(result + 208) = result + 216;
  if (result + 120 == a3)
  {
    LODWORD(v7) = 3;
    goto LABEL_17;
  }
  v6 = *(_DWORD *)(a3 + 8);
  v5 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(result + 128) = v6;
  *(_DWORD *)(result + 132) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(result + 136) = v7;
  *(_DWORD *)(result + 140) = v6;
  v8 = *(_DWORD *)(a3 + 16);
  if (v8 > 3)
  {
    v16 = (v8 - 1);
    v17 = *(_QWORD *)(a3 + 32);
    if (v8 >= 9 && (unint64_t)(result - v17 + 160) >= 0x20)
    {
      v18 = v16 & 0xFFFFFFF8;
      v52 = (__int128 *)(v17 + 16);
      v53 = v18;
      v54 = (_OWORD *)(result + 176);
      do
      {
        v55 = *v52;
        *(v54 - 1) = *(v52 - 1);
        *v54 = v55;
        v52 += 2;
        v54 += 2;
        v53 -= 8;
      }
      while (v53);
      if (v18 == v16)
        goto LABEL_16;
    }
    else
    {
      v18 = 0;
    }
    v19 = v16 - v18;
    v20 = 4 * v18;
    v21 = (_DWORD *)(4 * v18 + result + 160);
    v22 = (int *)(v17 + v20);
    do
    {
      v23 = *v22++;
      *v21++ = v23;
      --v19;
    }
    while (v19);
LABEL_16:
    *(_DWORD *)(result + 160 + 4 * v16) = *(_DWORD *)(v17 + 4 * v16);
    goto LABEL_17;
  }
  if ((int)v7 < 1)
    goto LABEL_17;
  v9 = *(_QWORD *)(a3 + 32);
  if (v7 < 8 || (unint64_t)(result - v9 + 160) < 0x20)
  {
    v10 = 0;
LABEL_7:
    v11 = v7 - v10;
    v12 = 4 * v10;
    v13 = (_DWORD *)(4 * v10 + result + 160);
    v14 = (int *)(v9 + v12);
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
    goto LABEL_17;
  }
  v10 = v7 & 0x7FFFFFF8;
  v60 = (__int128 *)(v9 + 16);
  v61 = v7 & 0xFFFFFFF8;
  v62 = (_OWORD *)(result + 176);
  do
  {
    v63 = *v60;
    *(v62 - 1) = *(v60 - 1);
    *v62 = v63;
    v60 += 2;
    v62 += 2;
    v61 -= 8;
  }
  while (v61);
  if (v10 != v7)
    goto LABEL_7;
LABEL_17:
  if (result + 176 == a4)
  {
    LODWORD(v26) = *(_DWORD *)(result + 192);
    goto LABEL_33;
  }
  v25 = *(_DWORD *)(a4 + 8);
  v24 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(result + 184) = v25;
  *(_DWORD *)(result + 188) = v24;
  v26 = (v24 * v25);
  *(_DWORD *)(result + 192) = v26;
  *(_DWORD *)(result + 196) = v25;
  v27 = *(_DWORD *)(a4 + 16);
  if (v27 > 3)
  {
    v35 = (v27 - 1);
    v36 = *(_QWORD *)(a4 + 32);
    if (v27 >= 9 && (unint64_t)(result - v36 + 216) >= 0x20)
    {
      v37 = v35 & 0xFFFFFFF8;
      v56 = (__int128 *)(v36 + 16);
      v57 = (_OWORD *)(result + 232);
      v58 = v37;
      do
      {
        v59 = *v56;
        *(v57 - 1) = *(v56 - 1);
        *v57 = v59;
        v56 += 2;
        v57 += 2;
        v58 -= 8;
      }
      while (v58);
      if (v37 == v35)
        goto LABEL_32;
    }
    else
    {
      v37 = 0;
    }
    v38 = v35 - v37;
    v39 = 4 * v37;
    v40 = (_DWORD *)(4 * v37 + result + 216);
    v41 = (int *)(v36 + v39);
    do
    {
      v42 = *v41++;
      *v40++ = v42;
      --v38;
    }
    while (v38);
LABEL_32:
    *(_DWORD *)(v4 + 4 * v35) = *(_DWORD *)(v36 + 4 * v35);
    goto LABEL_33;
  }
  if ((int)v26 < 1)
    goto LABEL_33;
  v28 = *(_QWORD *)(a4 + 32);
  if (v26 < 8 || (unint64_t)(result - v28 + 216) < 0x20)
  {
    v29 = 0;
LABEL_23:
    v30 = v26 - v29;
    v31 = 4 * v29;
    v32 = (_DWORD *)(4 * v29 + result + 216);
    v33 = (int *)(v28 + v31);
    do
    {
      v34 = *v33++;
      *v32++ = v34;
      --v30;
    }
    while (v30);
    goto LABEL_33;
  }
  v29 = v26 & 0x7FFFFFF8;
  v64 = (__int128 *)(v28 + 16);
  v65 = (_OWORD *)(result + 232);
  v66 = v26 & 0xFFFFFFF8;
  do
  {
    v67 = *v64;
    *(v65 - 1) = *(v64 - 1);
    *v65 = v67;
    v64 += 2;
    v65 += 2;
    v66 -= 8;
  }
  while (v66);
  if (v29 != v26)
    goto LABEL_23;
LABEL_33:
  *(_DWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 12) = v26;
  *(_DWORD *)(result + 16) = v26 * v7;
  *(_DWORD *)(result + 20) = v7;
  if ((_DWORD)v26 && (_DWORD)v7)
  {
    v43 = 0;
    v44 = 0;
    v45 = *(_DWORD *)(a2 + 20);
    v46 = *(_QWORD *)(a2 + 32);
    do
    {
      v47 = v45 * *(_DWORD *)(v4 + 4 * v44);
      v48 = v7;
      v49 = (int *)(result + 160);
      v50 = v43;
      do
      {
        v51 = *v49++;
        *(_QWORD *)(result + 40 + 8 * v50++) = *(_QWORD *)(v46 + 8 * (v47 + v51));
        --v48;
      }
      while (v48);
      ++v44;
      v43 += v7;
    }
    while (v44 != v26);
  }
  return result;
}

void sub_1000EB9A0(_QWORD *a1)
{
  a1[22] = off_1003EECD0;
  a1[15] = off_1003EECD0;
  *a1 = off_1003EEB18;
  operator delete();
}

_QWORD *sub_1000EB9D0(_QWORD *result)
{
  result[16] = off_1003EECD0;
  result[9] = off_1003EECD0;
  *result = off_1003EEB18;
  return result;
}

_QWORD *sub_1000EB9F0(_QWORD *result)
{
  *result = off_1003EECD0;
  return result;
}

void sub_1000EBA00(_QWORD *a1)
{
  *a1 = off_1003EECD0;
  operator delete();
}

uint64_t sub_1000EBA20(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000EBA2C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(&v12, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = v12;
        v9 = (_DWORD *)(v7 + 4);
        v10 = v6 - 1;
        v11 = v3 + v1 - v5;
        do
        {
          if (!v8)
          {
            *(_DWORD *)(v7 + 4 * (v11 % (int)v6)) = *v9;
            v8 = 1;
          }
          v11 += v3 + v1 - v5;
          ++v9;
          --v10;
        }
        while (v10);
      }
    }
  }
}

uint64_t sub_1000EBAE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int *v50;
  unsigned int v51;
  int v52;
  __int128 *v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 v56;
  __int128 *v57;
  _OWORD *v58;
  uint64_t v59;
  __int128 v60;
  __int128 *v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;

  *(_QWORD *)(result + 24) = 0x100000003;
  *(_OWORD *)(result + 8) = xmmword_100382850;
  *(_QWORD *)(result + 32) = result + 40;
  *(_QWORD *)result = off_1003EEF88;
  *(_QWORD *)(result + 64) = a2;
  *(_QWORD *)(result + 96) = 0x100000003;
  *(_QWORD *)(result + 72) = off_1003EEE68;
  *(_OWORD *)(result + 80) = xmmword_100382850;
  *(_QWORD *)(result + 104) = result + 112;
  *(_QWORD *)(result + 128) = off_1003EEF40;
  *(_QWORD *)(result + 152) = 0x100000001;
  *(_QWORD *)&v4 = 0x100000001;
  *((_QWORD *)&v4 + 1) = 0x100000001;
  *(_OWORD *)(result + 136) = v4;
  v5 = result + 168;
  *(_QWORD *)(result + 160) = result + 168;
  if (result + 72 == a3)
  {
    LODWORD(v8) = 3;
    goto LABEL_17;
  }
  v7 = *(_DWORD *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(result + 80) = v7;
  *(_DWORD *)(result + 84) = v6;
  v8 = (v6 * v7);
  *(_DWORD *)(result + 88) = v8;
  *(_DWORD *)(result + 92) = v7;
  v9 = *(_DWORD *)(a3 + 16);
  if (v9 > 3)
  {
    v17 = (v9 - 1);
    v18 = *(_QWORD *)(a3 + 32);
    if (v9 >= 9 && (unint64_t)(result - v18 + 112) >= 0x20)
    {
      v19 = v17 & 0xFFFFFFF8;
      v53 = (__int128 *)(v18 + 16);
      v54 = v19;
      v55 = (_OWORD *)(result + 128);
      do
      {
        v56 = *v53;
        *(v55 - 1) = *(v53 - 1);
        *v55 = v56;
        v53 += 2;
        v55 += 2;
        v54 -= 8;
      }
      while (v54);
      if (v19 == v17)
        goto LABEL_16;
    }
    else
    {
      v19 = 0;
    }
    v20 = v17 - v19;
    v21 = 4 * v19;
    v22 = (_DWORD *)(4 * v19 + result + 112);
    v23 = (int *)(v18 + v21);
    do
    {
      v24 = *v23++;
      *v22++ = v24;
      --v20;
    }
    while (v20);
LABEL_16:
    *(_DWORD *)(result + 112 + 4 * v17) = *(_DWORD *)(v18 + 4 * v17);
    goto LABEL_17;
  }
  if ((int)v8 < 1)
    goto LABEL_17;
  v10 = *(_QWORD *)(a3 + 32);
  if (v8 < 8 || (unint64_t)(result - v10 + 112) < 0x20)
  {
    v11 = 0;
LABEL_7:
    v12 = v8 - v11;
    v13 = 4 * v11;
    v14 = (_DWORD *)(4 * v11 + result + 112);
    v15 = (int *)(v10 + v13);
    do
    {
      v16 = *v15++;
      *v14++ = v16;
      --v12;
    }
    while (v12);
    goto LABEL_17;
  }
  v11 = v8 & 0x7FFFFFF8;
  v61 = (__int128 *)(v10 + 16);
  v62 = v8 & 0xFFFFFFF8;
  v63 = (_OWORD *)(result + 128);
  do
  {
    v64 = *v61;
    *(v63 - 1) = *(v61 - 1);
    *v63 = v64;
    v61 += 2;
    v63 += 2;
    v62 -= 8;
  }
  while (v62);
  if (v11 != v8)
    goto LABEL_7;
LABEL_17:
  if (result + 128 == a4)
  {
    LODWORD(v27) = *(_DWORD *)(result + 144);
    goto LABEL_33;
  }
  v26 = *(_DWORD *)(a4 + 8);
  v25 = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(result + 136) = v26;
  *(_DWORD *)(result + 140) = v25;
  v27 = (v25 * v26);
  *(_DWORD *)(result + 144) = v27;
  *(_DWORD *)(result + 148) = v26;
  v28 = *(_DWORD *)(a4 + 16);
  if (v28 > 3)
  {
    v36 = (v28 - 1);
    v37 = *(_QWORD *)(a4 + 32);
    if (v28 >= 9 && (unint64_t)(result - v37 + 168) >= 0x20)
    {
      v38 = v36 & 0xFFFFFFF8;
      v57 = (__int128 *)(v37 + 16);
      v58 = (_OWORD *)(result + 184);
      v59 = v38;
      do
      {
        v60 = *v57;
        *(v58 - 1) = *(v57 - 1);
        *v58 = v60;
        v57 += 2;
        v58 += 2;
        v59 -= 8;
      }
      while (v59);
      if (v38 == v36)
        goto LABEL_32;
    }
    else
    {
      v38 = 0;
    }
    v39 = v36 - v38;
    v40 = 4 * v38;
    v41 = (_DWORD *)(4 * v38 + result + 168);
    v42 = (int *)(v37 + v40);
    do
    {
      v43 = *v42++;
      *v41++ = v43;
      --v39;
    }
    while (v39);
LABEL_32:
    *(_DWORD *)(v5 + 4 * v36) = *(_DWORD *)(v37 + 4 * v36);
    goto LABEL_33;
  }
  if ((int)v27 < 1)
    goto LABEL_33;
  v29 = *(_QWORD *)(a4 + 32);
  if (v27 < 8 || (unint64_t)(result - v29 + 168) < 0x20)
  {
    v30 = 0;
LABEL_23:
    v31 = v27 - v30;
    v32 = 4 * v30;
    v33 = (_DWORD *)(4 * v30 + result + 168);
    v34 = (int *)(v29 + v32);
    do
    {
      v35 = *v34++;
      *v33++ = v35;
      --v31;
    }
    while (v31);
    goto LABEL_33;
  }
  v30 = v27 & 0x7FFFFFF8;
  v65 = (__int128 *)(v29 + 16);
  v66 = (_OWORD *)(result + 184);
  v67 = v27 & 0xFFFFFFF8;
  do
  {
    v68 = *v65;
    *(v66 - 1) = *(v65 - 1);
    *v66 = v68;
    v65 += 2;
    v66 += 2;
    v67 -= 8;
  }
  while (v67);
  if (v30 != v27)
    goto LABEL_23;
LABEL_33:
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v27;
  *(_DWORD *)(result + 16) = v27 * v8;
  *(_DWORD *)(result + 20) = v8;
  if ((_DWORD)v27 && (_DWORD)v8)
  {
    v44 = 0;
    v45 = 0;
    v46 = *(_DWORD *)(a2 + 20);
    v47 = *(_QWORD *)(a2 + 32);
    do
    {
      v48 = v46 * *(_DWORD *)(v5 + 4 * v45);
      v49 = v8;
      v50 = (int *)(result + 112);
      v51 = v44;
      do
      {
        v52 = *v50++;
        *(_QWORD *)(result + 40 + 8 * v51++) = *(_QWORD *)(v47 + 8 * (v48 + v52));
        --v49;
      }
      while (v49);
      ++v45;
      v44 += v8;
    }
    while (v45 != v27);
  }
  return result;
}

void sub_1000EBE38(_QWORD *a1)
{
  a1[16] = off_1003EECD0;
  a1[9] = off_1003EECD0;
  *a1 = off_1003EEB18;
  operator delete();
}

_QWORD *sub_1000EBE68(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

void sub_1000EBE78(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000EBE98(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000EBEA4(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[36];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

_OWORD *sub_1000EBFA4(_OWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t *v21;
  float64x2_t *v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double *v34;
  double v35;
  uint64_t v36;
  int v37;
  double v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  double v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  __int128 *v54;
  double *v55;
  uint64_t v56;
  __int128 v57;
  double v58;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  uint64_t (***v64)();
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (***v75)();
  uint64_t (***v76)();
  uint64_t (**v77)();
  __int128 *v78;
  uint64_t v79;
  __int128 *v80;
  double *v81;
  __int128 v82;
  int v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  double v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  int v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  const cnquaternion::CNQuaternion *v106;
  unsigned int v107;
  unint64_t v108;
  BOOL v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  __int128 *v113;
  double *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (**v124)();
  __int128 v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD v128[9];
  uint64_t (**v129)();
  __int128 v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD v134[2];
  int v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD v139[2];
  uint64_t v140;
  uint64_t (**v141)();
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD v148[2];
  _BYTE v149[56];
  uint64_t (**v150)();
  __int128 v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD v154[9];
  uint64_t v155;
  _BYTE v156[56];
  uint64_t (**v157)();
  __int128 v158;
  uint64_t v159;
  double *v160;
  double v161;
  double v162;
  double v163[7];

  *a1 = 0u;
  a1[1] = 0u;
  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3)
    goto LABEL_60;
  v126 = 0x300000003;
  v124 = off_1003EEAC0;
  v127 = v128;
  v125 = xmmword_1003827C0;
  v4 = *(int *)(a2 + 20);
  v5 = *(_QWORD **)(a2 + 32);
  v128[0] = *v5;
  v128[3] = v5[1];
  v128[6] = v5[2];
  v6 = &v5[v4];
  v128[1] = *v6;
  v128[4] = v6[1];
  v128[7] = v6[2];
  v7 = &v5[2 * v4];
  v128[2] = *v7;
  v128[5] = v7[1];
  v128[8] = v7[2];
  v131 = 0x300000003;
  v129 = off_1003EEAC0;
  v130 = xmmword_1003827C0;
  v132 = &v133;
  sub_1000E5948((uint64_t)&v124, a2, (uint64_t)&v129);
  v8 = (double *)&v117;
  v118 = 0u;
  v119 = 0;
  v121 = 0u;
  v117 = 0x3FF0000000000000;
  v120 = 0x3FF0000000000000;
  v122 = 0;
  v123 = 0x3FF0000000000000;
  v137 = 0x300000003;
  v134[0] = off_1003EEAC0;
  v9 = (double *)v139;
  v138 = v139;
  v11 = v130;
  v10 = DWORD1(v130);
  v134[1] = v130;
  v12 = (DWORD1(v130) * v130);
  v135 = v12;
  v136 = v130;
  if ((int)v12 > 3)
  {
    v18 = v132;
    v19 = (v12 - 1) >> 1;
    v20 = (float64x2_t *)v132;
    v21 = (float64x2_t *)&v117;
    v22 = (float64x2_t *)v139;
    do
    {
      v23 = *v20++;
      v24 = v23;
      v25 = *v21++;
      *v22++ = vsubq_f64(v24, v25);
      --v19;
    }
    while (v19);
    *(float64x2_t *)&v139[(v12 - 2)] = vsubq_f64(*(float64x2_t *)&v18[(v12 - 2)], *(float64x2_t *)(&v117 + (v12 - 2)));
  }
  else if ((int)v12 >= 1)
  {
    v13 = (double *)v132;
    v14 = (DWORD1(v130) * v130);
    do
    {
      v15 = *v13++;
      v16 = v15;
      v17 = *v8++;
      *v9++ = v16 - v17;
      --v14;
    }
    while (v14);
  }
  v146 = 0x300000003;
  v141 = off_1003EEAC0;
  v147 = v148;
  v142 = v11;
  v143 = v10;
  v144 = v12;
  v145 = v11;
  if ((int)v12 >= 1)
  {
    if (v12 < 4)
    {
      v26 = 0;
LABEL_17:
      v31 = v12 - v26;
      v32 = 8 * v26 + 40;
      v33 = (double *)((char *)&v141 + v32);
      v34 = (double *)((char *)v134 + v32);
      do
      {
        v35 = *v34++;
        *v33++ = fabs(v35);
        --v31;
      }
      while (v31);
      goto LABEL_19;
    }
    v26 = v12 & 0x7FFFFFFC;
    v27 = (float64x2_t *)&v140;
    v28 = (float64x2_t *)v149;
    v29 = v12 & 0xFFFFFFFC;
    do
    {
      v30 = vabsq_f64(*v27);
      v28[-1] = vabsq_f64(v27[-1]);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    if (v26 != v12)
      goto LABEL_17;
  }
LABEL_19:
  v152 = 0x300000003;
  v153 = v154;
  if (!(_DWORD)v10)
  {
    if ((_DWORD)v11 != 1)
    {
      LODWORD(v10) = 0;
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v11 < 2)
  {
    v41 = 0;
    if (v10 < 4)
      goto LABEL_35;
    if ((_DWORD)v11 != 1)
      goto LABEL_35;
    v41 = v10 & 0xFFFFFFFC;
    v42 = (__int128 *)v149;
    v43 = v156;
    v44 = v41;
    do
    {
      v45 = *v42;
      *(v43 - 1) = *(v42 - 1);
      *v43 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 4;
    }
    while (v44);
    if (v41 != v10)
    {
LABEL_35:
      v46 = v10 - v41;
      v47 = &v154[v41];
      v48 = v11 * v41;
      do
      {
        *v47++ = v148[v48];
        v48 += v11;
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    v36 = 0;
    v37 = 1;
    do
    {
      v38 = *(double *)&v148[(v11 * v36)];
      v39 = v37;
      v40 = v11 - 1;
      do
      {
        if (*(double *)&v148[v39] > v38)
          v38 = *(double *)&v148[v39];
        ++v39;
        --v40;
      }
      while (v40);
      *(double *)&v154[v36++] = v38;
      v37 += v11;
    }
    while (v36 != v10);
  }
  if ((_DWORD)v11 == 1 || (_DWORD)v10 == 1)
  {
    if ((int)v10 >= 2)
    {
      v49 = *(double *)v154;
      v50 = v10 - 1;
      v51 = (double *)&v155;
      do
      {
        v52 = *v51;
        if (*v51 > v49)
        {
          *(double *)v154 = *v51;
          v49 = v52;
        }
        ++v51;
        --v50;
      }
      while (v50);
    }
LABEL_44:
    *(_QWORD *)&v151 = 0x100000001;
    LODWORD(v10) = 1;
  }
LABEL_45:
  if (!(_DWORD)v10)
    goto LABEL_58;
  if (v10 < 4)
  {
    v53 = 0;
    do
    {
LABEL_51:
      *(&v161 + v53) = *(double *)&v154[v53];
      ++v53;
    }
    while (v10 != v53);
    goto LABEL_52;
  }
  v53 = v10 & 0xFFFFFFFC;
  v54 = (__int128 *)v156;
  v55 = v163;
  v56 = v53;
  do
  {
    v57 = *v54;
    *((_OWORD *)v55 - 1) = *(v54 - 1);
    *(_OWORD *)v55 = v57;
    v54 += 2;
    v55 += 4;
    v56 -= 4;
  }
  while (v56);
  if (v53 != v10)
    goto LABEL_51;
LABEL_52:
  if ((int)v10 >= 2)
  {
    v58 = v161;
    v59 = v10 - 1;
    v60 = &v162;
    v61 = v161;
    do
    {
      v62 = *v60++;
      v63 = v62;
      if (v62 > v61)
      {
        v58 = v63;
        v61 = v63;
      }
      --v59;
    }
    while (v59);
    v161 = v58;
  }
LABEL_58:
  if (fabs(v161) <= 0.00001)
  {
    v152 = 0x100000003;
    v150 = off_1003EEE68;
    v151 = xmmword_100382850;
    v153 = v154;
    v159 = 0x300000003;
    v157 = off_1003EEAC0;
    v158 = xmmword_1003827C0;
    v160 = &v161;
    if (fabs(sub_1000EB0BC(a2, (uint64_t)&v150, (uint64_t)&v157) + -1.0) <= 0.00001)
    {
      v159 = 0x300000003;
      v157 = off_1003EEAC0;
      v66 = *(unsigned int *)(a2 + 8);
      v67 = *(_DWORD *)(a2 + 12);
      v68 = (int)v66;
      LODWORD(v158) = *(_DWORD *)(a2 + 8);
      DWORD1(v158) = v67;
      v69 = (v67 * v66);
      *((_QWORD *)&v158 + 1) = __PAIR64__(v66, v69);
      v160 = &v161;
      v70 = *(_DWORD *)(a2 + 16);
      if (v70 > 3)
      {
        v78 = *(__int128 **)(a2 + 32);
        v79 = (v70 - 1) >> 1;
        v80 = v78;
        v81 = &v161;
        do
        {
          v82 = *v80++;
          *(_OWORD *)v81 = v82;
          v81 += 2;
          --v79;
        }
        while (v79);
        *(_OWORD *)(&v161 + (v70 - 2)) = *(__int128 *)((char *)v78 + 8 * (v70 - 2));
      }
      else
      {
        if ((int)v69 < 1)
          goto LABEL_73;
        v71 = *(_QWORD *)(a2 + 32);
        if (v69 < 6 || (unint64_t)&v157 - v71 + 40 < 0x20)
        {
          v72 = 0;
LABEL_67:
          v73 = v69 - v72;
          v74 = 8 * v72;
          v75 = &(&v157)[v72 + 5];
          v76 = (uint64_t (***)())(v71 + v74);
          do
          {
            v77 = *v76++;
            *v75++ = v77;
            --v73;
          }
          while (v73);
          goto LABEL_73;
        }
        v72 = v69 & 0x7FFFFFFC;
        v113 = (__int128 *)(v71 + 16);
        v114 = v163;
        v115 = v69 & 0xFFFFFFFC;
        do
        {
          v116 = *v113;
          *((_OWORD *)v114 - 1) = *(v113 - 1);
          *(_OWORD *)v114 = v116;
          v113 += 2;
          v114 += 4;
          v115 -= 4;
        }
        while (v115);
        if (v72 != v69)
          goto LABEL_67;
      }
LABEL_73:
      if ((int)v66 <= 0)
      {
        v88 = v161;
        v83 = v66 + 1;
        goto LABEL_81;
      }
      v83 = v66 + 1;
      v84 = 0.0;
      if ((_DWORD)v66 == 1)
      {
        v85 = 0;
      }
      else
      {
        v85 = 0;
        if (v83 < 0)
          v107 = ~(_DWORD)v66;
        else
          v107 = v66 + 1;
        v108 = v107 * (unint64_t)(v66 - 1);
        v109 = (v108 & 0x80000000) != 0;
        if (v83 < 0)
          v109 = v108 > 0x80000000;
        v110 = (v108 & 0xFFFFFFFF00000000) != 0;
        if (!v109 && !v110)
        {
          v111 = 0;
          v85 = v66 & 0xFFFFFFFE;
          v112 = v85;
          do
          {
            v84 = v84 + *(&v161 + v111) + *(&v161 + v83 + v111);
            v111 += 2 * v66 + 2;
            v112 -= 2;
          }
          while (v112);
          if (v85 == v66)
          {
LABEL_78:
            v88 = v161;
            if (v84 > 0.0)
            {
              v89 = &v161 + 2 * (int)v68;
              v90 = sqrt(v161 + 1.0 + *(&v161 + v83) + v89[2]);
              v91 = (v89[1] - *(&v161 + (int)v68 + 2)) / (v90 + v90);
              v92 = (v163[0] - *(&v161 + 2 * v68)) / (v90 + v90);
              v93 = (*(&v161 + v68) - v162) / (v90 + v90);
              v94 = v90 * 0.5;
LABEL_89:
              cnquaternion::CNQuaternion::CNQuaternion((cnquaternion::CNQuaternion *)&v141, v91, v92, v93, v94);
              cnrotation::CNRotation::Normalize((cnrotation::CNRotation *)&v141, v106);
              v64 = &v150;
              goto LABEL_61;
            }
LABEL_81:
            v95 = *(&v161 + v83);
            v96 = 2 * v68;
            if (v88 <= v95 || (v97 = v163[v96], v88 <= v97))
            {
              v100 = v96 + 2;
              if (v95 <= v88 || (v101 = *(&v161 + v100), v95 <= v101))
              {
                v105 = sqrt(*(&v161 + v100) + 1.0 - v88 - v95);
                v103 = v105 + v105;
                v91 = (v163[0] + *(&v161 + v96)) / (v105 + v105);
                v92 = (*(double *)((char *)&v161 + ((8 * v96) | 8)) + *(&v161 + (int)v68 + 2)) / (v105 + v105);
                v93 = v105 * 0.5;
                v104 = *(&v161 + v68) - v162;
              }
              else
              {
                v102 = sqrt(v95 + 1.0 - v88 - v101);
                v103 = v102 + v102;
                v91 = (v162 + *(&v161 + v68)) / (v102 + v102);
                v92 = v102 * 0.5;
                v93 = (*(double *)((char *)&v161 + ((8 * v96) | 8)) + *(&v161 + (int)v68 + 2)) / v103;
                v104 = v163[0] - *(&v161 + 2 * v68);
              }
              v94 = v104 / v103;
            }
            else
            {
              v98 = sqrt(v88 + 1.0 - v95 - v97);
              v91 = v98 * 0.5;
              v99 = v98 + v98;
              v92 = (v162 + *(&v161 + v68)) / (v98 + v98);
              v93 = (v163[0] + *(&v161 + v96)) / v99;
              v94 = (*(double *)((char *)&v161 + ((16 * v68) | 8)) - *(&v161 + (int)v68 + 2)) / v99;
            }
            goto LABEL_89;
          }
        }
      }
      v86 = v66 - v85;
      v87 = v83 * v85;
      do
      {
        v84 = v84 + *(&v161 + v87);
        v87 += v83;
        --v86;
      }
      while (v86);
      goto LABEL_78;
    }
  }
LABEL_60:
  cnquaternion::CNQuaternion::CNQuaternion((cnquaternion::CNQuaternion *)&v157, 0.0, 0.0, 0.0, 1.0);
  v64 = &v157;
LABEL_61:
  cnquaternion::CNQuaternion::operator=(a1, v64);
  return a1;
}

void sub_1000EC86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  int v13;
  long double v15;
  double *v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  double v29;
  double *v30;
  double *v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unsigned int v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  double *v43;
  double v44;
  double *v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  float64x2_t *v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  double *v56;
  double *v57;
  uint64_t v58;
  double v59;
  int v60;
  uint64_t v61;
  double *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v68;
  uint64_t v69;
  float64x2_t *v70;
  float64x2_t *v71;
  float64x2_t v72;
  double *v73;
  unsigned int v74;
  uint64_t v75;
  double *v76;
  unint64_t v77;
  double *v78;
  uint64_t v79;
  double v80;
  double *v81;
  double v82;
  double *v83;
  uint64_t v84;
  double v85;
  double v86;
  double *v87;
  double v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  double *v92;
  double v93;
  double *v94;
  uint64_t v95;
  double v96;
  double v97;
  unint64_t v98;
  float64x2_t *v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  double *v103;
  uint64_t v104;
  double v105;
  double v106;
  double *v107;
  uint64_t v108;
  double v109;
  double v110;
  double *v111;
  long double v112;
  uint64_t v113;
  double *v114;
  unint64_t v115;
  double *v116;
  uint64_t v117;
  double v118;
  double *v119;
  unint64_t v120;
  long double v121;
  double v122;
  double *v123;
  uint64_t v124;
  double v125;
  char v126;
  __int16 v127;
  long double v128;
  char v129;
  __int16 v130;

  v5 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v5)
    return;
  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = strcmp(__s1, "2");
  if ((_DWORD)v11 != 1 && (_DWORD)v12 != 1)
  {
    if (!v13)
    {
      sub_1000ED164(a1, a2, a3, a4);
      return;
    }
    if (strcmp(__s1, "1"))
    {
      if (strcmp(__s1, "inf"))
      {
        if (strcmp(__s1, "fro"))
        {
          v130 = 4;
          v129 = 5;
          cnprint::CNPrinter::Print(&v130, &v129, "Error using Norm: invalid %s-norm.", __s1);
          return;
        }
        v87 = *(double **)(a1 + 32);
        v88 = *v87 * *v87;
        if (v5 >= 2)
        {
          if ((_DWORD)v5 == 2)
          {
            v89 = 1;
LABEL_127:
            v116 = &v87[v89];
            v117 = v5 - v89;
            do
            {
              v118 = *v116++;
              v88 = v88 + v118 * v118;
              --v117;
            }
            while (v117);
            return;
          }
          v89 = (v5 - 1) | 1;
          v114 = v87 + 2;
          v115 = (v5 - 1) & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v88 = v88 + *(v114 - 1) * *(v114 - 1) + *v114 * *v114;
            v114 += 2;
            v115 -= 2;
          }
          while (v115);
          if (v5 - 1 != ((v5 - 1) & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_127;
        }
        return;
      }
      if ((_DWORD)v11)
      {
        v49 = 0;
        v50 = *(float64x2_t **)(a1 + 32);
        v51 = *(float64x2_t **)(a2 + 32);
        if (v11 < 4)
          goto LABEL_61;
        if ((unint64_t)((char *)v51 - (char *)v50) < 0x20)
          goto LABEL_61;
        v49 = v11 & 0xFFFFFFFC;
        v52 = v50 + 1;
        v53 = v51 + 1;
        v54 = v49;
        do
        {
          v55 = vabsq_f64(*v52);
          v53[-1] = vabsq_f64(v52[-1]);
          *v53 = v55;
          v52 += 2;
          v53 += 2;
          v54 -= 4;
        }
        while (v54);
        if (v49 != v11)
        {
LABEL_61:
          v56 = &v50->f64[v49];
          v57 = &v51->f64[v49];
          v58 = v11 - v49;
          do
          {
            v59 = *v56++;
            *v57++ = fabs(v59);
            --v58;
          }
          while (v58);
        }
        if (v12 > 1)
        {
          v60 = 0;
          v61 = *(_QWORD *)(a1 + 32);
          v62 = *(double **)(a2 + 32);
          v63 = 1;
          v64 = v11;
          while (1)
          {
            ++v60;
            if (v11 >= 8)
            {
              v65 = 0;
              if (__CFADD__(v11 * v60, v11 - 1) || (unint64_t)(v11 - 1) >> 32)
                goto LABEL_78;
              v66 = 8 * (v11 * v60);
              if ((unint64_t)v62 >= v61 + 8 * v11 + v66 || v61 + v66 >= (unint64_t)&v62[v11])
              {
                v68 = v64;
                v69 = v11 & 0xFFFFFFFC;
                v70 = (float64x2_t *)(v62 + 2);
                do
                {
                  v71 = (float64x2_t *)(v61 + 8 * v68);
                  v72 = vaddq_f64(vabsq_f64(v71[1]), *v70);
                  v70[-1] = vaddq_f64(vabsq_f64(*v71), v70[-1]);
                  *v70 = v72;
                  v70 += 2;
                  v68 += 4;
                  v69 -= 4;
                }
                while (v69);
                v65 = v11 & 0xFFFFFFFC;
                if (v65 == v11)
                  goto LABEL_80;
                goto LABEL_78;
              }
            }
            v65 = 0;
LABEL_78:
            v73 = &v62[v65];
            v74 = v64 + v65;
            v75 = v11 - v65;
            do
            {
              *v73 = fabs(*(double *)(v61 + 8 * v74)) + *v73;
              ++v73;
              ++v74;
              --v75;
            }
            while (v75);
LABEL_80:
            ++v63;
            v64 += v11;
            if (v63 == (_DWORD)v12)
              goto LABEL_115;
          }
        }
      }
      else if (v12 >= 2)
      {
        return;
      }
      v62 = *(double **)(a2 + 32);
LABEL_115:
      v106 = *v62;
      if (v11 >= 2)
      {
        v107 = v62 + 1;
        v108 = v11 - 1;
        do
        {
          v109 = *v107++;
          v110 = v109;
          if (v109 > v106)
            v106 = v110;
          --v108;
        }
        while (v108);
      }
      return;
    }
    if (!(_DWORD)v12)
      return;
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(double **)(a2 + 32);
    if (v11 <= 1)
    {
      v90 = 0;
      v91 = v12;
      v92 = *(double **)(a2 + 32);
      do
      {
        *v92++ = fabs(*(double *)(v22 + 8 * v90));
        v90 += v11;
        --v91;
      }
      while (v91);
LABEL_100:
      v93 = *v23;
      if (v12 >= 2)
      {
        v94 = v23 + 1;
        v95 = v12 - 1;
        do
        {
          v96 = *v94++;
          v97 = v96;
          if (v96 > v93)
            v93 = v97;
          --v95;
        }
        while (v95);
      }
      return;
    }
    v24 = 0;
    v25 = 0;
    v26 = (v11 - 1) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = 1;
    while (1)
    {
      v28 = v11 * v25;
      v29 = fabs(*(double *)(v22 + 8 * (v11 * v25)));
      v30 = &v23[v25];
      *v30 = v29;
      v31 = v30 + 1;
      if (v11 >= 0xB
        && (-2 - v28 >= (v11 - 2) ? (v32 = (unint64_t)(v11 - 2) >> 32 == 0) : (v32 = 0),
            v32
         && ((v33 = 8 * (v28 + 1), (unint64_t)&v23[v25] < v22 + 8 * v11 - 8 + v33)
           ? (v34 = v22 + v33 >= (unint64_t)v31)
           : (v34 = 1),
             v34)))
      {
        v35 = (v11 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        v36 = v27;
        do
        {
          v37 = (float64x2_t *)(v22 + 8 * v36);
          v38 = vabsq_f64(*v37);
          v39 = vabsq_f64(v37[1]);
          v29 = v29 + v38.f64[0] + v38.f64[1] + v39.f64[0] + v39.f64[1];
          v36 += 4;
          v35 -= 4;
        }
        while (v35);
        v23[v25] = v29;
        v40 = v26 | 1;
        if (v11 - 1 == v26)
          goto LABEL_47;
      }
      else
      {
        v40 = 1;
      }
      v41 = v24 + v40;
      v42 = v11 - v40;
      do
      {
        v29 = v29 + fabs(*(double *)(v22 + 8 * v41));
        v23[v25] = v29;
        ++v41;
        --v42;
      }
      while (v42);
LABEL_47:
      ++v25;
      v27 += v11;
      v24 += v11;
      if (v25 == v12)
        goto LABEL_100;
    }
  }
  if (!v13)
  {
    v16 = *(double **)(a1 + 32);
    v17 = *v16 * *v16;
    if (v5 < 2)
      return;
    if ((_DWORD)v5 == 2)
    {
      v18 = 1;
    }
    else
    {
      v18 = (v5 - 1) | 1;
      v76 = v16 + 2;
      v77 = (v5 - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v17 = v17 + *(v76 - 1) * *(v76 - 1) + *v76 * *v76;
        v76 += 2;
        v77 -= 2;
      }
      while (v77);
      if (v5 - 1 == ((v5 - 1) & 0xFFFFFFFFFFFFFFFELL))
        return;
    }
    v78 = &v16[v18];
    v79 = v5 - v18;
    do
    {
      v80 = *v78++;
      v17 = v17 + v80 * v80;
      --v79;
    }
    while (v79);
    return;
  }
  if (!strcmp(__s1, "1"))
  {
    v19 = *(double **)(a1 + 32);
    v20 = fabs(*v19);
    if (v5 < 2)
      return;
    if (v5 >= 5)
    {
      v98 = (v5 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v21 = v98 | 1;
      v99 = (float64x2_t *)(v19 + 3);
      v100 = v98;
      do
      {
        v101 = vabsq_f64(v99[-1]);
        v102 = vabsq_f64(*v99);
        v20 = v20 + v101.f64[0] + v101.f64[1] + v102.f64[0] + v102.f64[1];
        v99 += 2;
        v100 -= 4;
      }
      while (v100);
      if (v5 - 1 == v98)
        return;
    }
    else
    {
      v21 = 1;
    }
    v103 = &v19[v21];
    v104 = v5 - v21;
    do
    {
      v105 = *v103++;
      v20 = v20 + fabs(v105);
      --v104;
    }
    while (v104);
    return;
  }
  if (!strcmp(__s1, "inf"))
  {
    v43 = *(double **)(a1 + 32);
    v44 = fabs(*v43);
    if (v5 >= 2)
    {
      v45 = v43 + 1;
      v46 = v5 - 1;
      do
      {
        v47 = *v45++;
        v48 = fabs(v47);
        if (v48 > v44)
          v44 = v48;
        --v46;
      }
      while (v46);
    }
    return;
  }
  if (!strcmp(__s1, "-inf"))
  {
    v81 = *(double **)(a1 + 32);
    v82 = fabs(*v81);
    if (v5 >= 2)
    {
      v83 = v81 + 1;
      v84 = v5 - 1;
      do
      {
        v85 = *v83++;
        v86 = fabs(v85);
        if (v86 < v82)
          v82 = v86;
        --v84;
      }
      while (v84);
    }
    return;
  }
  v128 = 0.0;
  if (sscanf(__s1, "%lg", &v128) != 1)
  {
    v127 = 4;
    v126 = 5;
    cnprint::CNPrinter::Print(&v127, &v126, "Error using Norm: invalid %s-norm.", __s1);
    return;
  }
  v15 = v128;
  if (fabs(v128) >= 2.22044605e-16)
  {
    v111 = *(double **)(a1 + 32);
    v112 = pow(fabs(*v111), v128);
    if (v5 >= 2)
    {
      if ((_DWORD)v5 == 2)
      {
        v113 = 1;
      }
      else
      {
        v113 = (v5 - 1) | 1;
        v119 = v111 + 2;
        v120 = (v5 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v121 = fabs(*v119);
          v122 = pow(fabs(*(v119 - 1)), v15);
          v112 = v112 + v122 + pow(v121, v15);
          v119 += 2;
          v120 -= 2;
        }
        while (v120);
        if (v5 - 1 == ((v5 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_135;
      }
      v123 = &v111[v113];
      v124 = v5 - v113;
      do
      {
        v125 = *v123++;
        v112 = v112 + pow(fabs(v125), v15);
        --v124;
      }
      while (v124);
    }
LABEL_135:
    pow(v112, 1.0 / v15);
  }
}

_QWORD *sub_1000ED020(_QWORD *result)
{
  *result = off_1003EEB18;
  return result;
}

void sub_1000ED030(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000ED050(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000ED05C(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[308];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_1000ED164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __CLPK_integer v30;
  __CLPK_integer v31;
  __CLPK_doublereal *v32;
  __CLPK_doublereal *v33;
  __CLPK_doublereal *v34;
  cnprint::CNPrinter *v35;
  const char *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int32x4_t v41;
  __CLPK_integer v43;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  v8 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (a2 != a1)
  {
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
    v9 = v7 * v6;
    *(_DWORD *)(a2 + 16) = v9;
    *(_DWORD *)(a2 + 20) = v6;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10 > 3)
    {
      v23 = (v10 - 2);
      v24 = *(_OWORD **)(a2 + 32);
      v25 = *(__int128 **)(a1 + 32);
      v26 = (_OWORD *)((char *)v24 + 8 * v23);
      v27 = (v10 - 1) >> 1;
      v28 = v25;
      do
      {
        v29 = *v28++;
        *v24++ = v29;
        --v27;
      }
      while (v27);
      *v26 = *(__int128 *)((char *)v25 + 8 * v23);
    }
    else if ((int)v9 >= 1)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a2 + 32);
      if (v9 < 4)
        goto LABEL_9;
      if ((unint64_t)(v13 - v12) < 0x20)
        goto LABEL_9;
      v11 = v9 & 0x7FFFFFFC;
      v14 = (__int128 *)(v12 + 16);
      v15 = (_OWORD *)(v13 + 16);
      v16 = v9 & 0xFFFFFFFC;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v11 != v9)
      {
LABEL_9:
        v18 = v9 - v11;
        v19 = 8 * v11;
        v20 = (_QWORD *)(v13 + v19);
        v21 = (uint64_t *)(v12 + v19);
        do
        {
          v22 = *v21++;
          *v20++ = v22;
          --v18;
        }
        while (v18);
      }
    }
  }
  v30 = *(_DWORD *)(a2 + 8);
  v31 = *(_DWORD *)(a2 + 12);
  v32 = *(__CLPK_doublereal **)(a2 + 32);
  v33 = *(__CLPK_doublereal **)(a4 + 32);
  v34 = *(__CLPK_doublereal **)(a3 + 32);
  __jobu = 78;
  __jobvt = 78;
  __n = v31;
  __m = v30;
  __lda = v30;
  __ldvt = 1;
  __ldu = 1;
  v43 = 0;
  __lwork = v8;
  v35 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v32, &__lda, v33, 0, &__ldu, 0, &__ldvt, v34, &__lwork, &v43);
  if (v43)
  {
    LOWORD(__m) = 4;
    if (v43 < 0)
    {
      LOBYTE(__n) = 5;
      v36 = "Error using Svd: input argument %d invalid in gesvd.";
    }
    else
    {
      LOBYTE(__n) = 4;
      v36 = "Error using Svd: gesvd failed to converge on %d superdiagonals.";
    }
    v35 = (cnprint::CNPrinter *)cnprint::CNPrinter::Print(&__m, &__n, v36);
  }
  v37 = **(double **)(a3 + 32);
  if (v8 < v37 && cnprint::CNPrinter::GetLogLevel(v35) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print(&__m, &__n, "Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.",
      v37,
      v8);
  }
  if (v7 >= v6)
    v38 = v6;
  else
    v38 = v7;
  v39 = *(_DWORD *)(a3 + 24);
  v40 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v39;
  *(_DWORD *)(a3 + 12) = v40;
  *(_DWORD *)(a3 + 16) = v40 * v39;
  *(_DWORD *)(a3 + 20) = v39;
  v41 = vdupq_lane_s32((int32x2_t)(v38 | 0x100000000), 0);
  v41.i32[1] = 1;
  *(int32x4_t *)(a4 + 8) = v41;
  return *(double *)v41.i64;
}

void sub_1000ED3AC(_QWORD *a1)
{
  *a1 = off_1003EEB18;
  operator delete();
}

uint64_t sub_1000ED3CC(uint64_t result)
{
  *(_QWORD *)(result + 32) = result + 40;
  return result;
}

void sub_1000ED3D8(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[12];

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      v5 = *(_DWORD *)(a1 + 20);
      bzero(v14, v4);
      if (v4 >= 3)
      {
        v6 = (v4 - 1);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 1;
        do
        {
          v9 = &v14[v8];
          if (!v14[v8])
          {
            v10 = *(_QWORD *)(v7 + 8 * v8);
            v11 = v8;
            do
            {
              v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              v12 = 8 * v11;
              v13 = *(_QWORD *)(v7 + v12);
              *(_QWORD *)(v7 + v12) = v10;
              *v9 = 1;
              v9 = &v14[v11];
              v10 = v13;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_1000ED4DC(cnframework::TimestampedEvent *a1)
{
  cnframework::TimestampedEvent::~TimestampedEvent(a1);
  operator delete();
}

void sub_1000ED500(cnframework::TimestampedEvent *a1)
{
  *(_QWORD *)a1 = off_1003EF0A8;
  *((_QWORD *)a1 + 133) = off_1003EEB18;
  *((_QWORD *)a1 + 119) = off_1003EEB18;
  *((_QWORD *)a1 + 105) = off_1003EEB18;
  *((_QWORD *)a1 + 97) = off_1003EEB18;
  *((_QWORD *)a1 + 78) = off_1003EEB18;
  *((_QWORD *)a1 + 64) = off_1003EEB18;
  *((_QWORD *)a1 + 50) = off_1003EEB18;
  *((_QWORD *)a1 + 42) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(a1);
}

void sub_1000ED538(cnframework::TimestampedEvent *a1)
{
  *(_QWORD *)a1 = off_1003EF0A8;
  *((_QWORD *)a1 + 133) = off_1003EEB18;
  *((_QWORD *)a1 + 119) = off_1003EEB18;
  *((_QWORD *)a1 + 105) = off_1003EEB18;
  *((_QWORD *)a1 + 97) = off_1003EEB18;
  *((_QWORD *)a1 + 78) = off_1003EEB18;
  *((_QWORD *)a1 + 64) = off_1003EEB18;
  *((_QWORD *)a1 + 50) = off_1003EEB18;
  *((_QWORD *)a1 + 42) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(a1);
  operator delete();
}

void sub_1000ED590(cnframework::TimestampedEvent *a1)
{
  *(_QWORD *)a1 = off_1003EF0D8;
  *((_QWORD *)a1 + 120) = off_1003EEB18;
  *((_QWORD *)a1 + 106) = off_1003EEB18;
  *((_QWORD *)a1 + 92) = off_1003EEB18;
  *((_QWORD *)a1 + 84) = off_1003EEB18;
  *((_QWORD *)a1 + 65) = off_1003EEB18;
  *((_QWORD *)a1 + 51) = off_1003EEB18;
  *((_QWORD *)a1 + 37) = off_1003EEB18;
  *((_QWORD *)a1 + 29) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(a1);
}

void sub_1000ED5C8(cnframework::TimestampedEvent *a1)
{
  *(_QWORD *)a1 = off_1003EF0D8;
  *((_QWORD *)a1 + 120) = off_1003EEB18;
  *((_QWORD *)a1 + 106) = off_1003EEB18;
  *((_QWORD *)a1 + 92) = off_1003EEB18;
  *((_QWORD *)a1 + 84) = off_1003EEB18;
  *((_QWORD *)a1 + 65) = off_1003EEB18;
  *((_QWORD *)a1 + 51) = off_1003EEB18;
  *((_QWORD *)a1 + 37) = off_1003EEB18;
  *((_QWORD *)a1 + 29) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(a1);
  operator delete();
}

uint64_t sub_1000ED620(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1000ED62C(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "PositionEvent");
}

uint64_t sub_1000ED654(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1000ED660(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "VIOEstimateEvent");
}

uint64_t sub_1000ED680(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1000ED68C(char *a1@<X8>)
{
  a1[23] = 19;
  strcpy(a1, "VLLocalizationEvent");
}

uint64_t sub_1000ED6B8(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE *v9;

  v2 = (_BYTE *)(a1 + 5528);
  v3 = (_BYTE *)(a1 + 4320);
  sub_1000F44AC(a1 + 40);
  v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1003EF668;
  v5 = *(_QWORD *)(a1 + 32);
  v4[5] = 0;
  v4[6] = 0;
  v4[4] = 0;
  *((_DWORD *)v4 + 14) = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 4312);
  *(_QWORD *)(a1 + 4312) = v4;
  v4[3] = v5;
  *(_QWORD *)(a1 + 4304) = v4 + 3;
  if (!v6)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_5:
    if (!*v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (*v3)
  {
LABEL_6:
    sub_1000ED500((cnframework::TimestampedEvent *)(a1 + 4336));
    *v3 = 0;
  }
LABEL_7:
  v9 = (_BYTE *)(a1 + 6664);
  if (*v2)
    *v2 = 0;
  if (v2[24])
  {
    sub_1000ED590((cnframework::TimestampedEvent *)(a1 + 5560));
    v2[24] = 0;
  }
  if (*v9)
  {
    sub_1000ED500((cnframework::TimestampedEvent *)(a1 + 6672));
    *v9 = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 7952) + 32))(*(_QWORD *)(a1 + 7952));
}

void sub_1000ED7DC(uint64_t a1)
{
  sub_10001633C(a1);
  operator delete();
}

void sub_1000ED800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  NSObject *v14;
  double v15;
  uint64_t v16;
  double v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t (**v45)();
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  _BYTE v65[440];
  _BYTE v66[440];
  __int16 v67;
  char v68;
  _BYTE buf[32];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  uint64_t v88;
  _WORD v89[221];
  char v90;
  uint8_t v91[24];

  v46 = 0uLL;
  v45 = off_1003EF0A8;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v46, 0, 0.0);
  LOBYTE(v47) = 0;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)((char *)&v47 + 8), 0, 0.0);
  BYTE8(v48) = 0;
  v49 = 0uLL;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v49, 0, 0.0);
  LOBYTE(v50) = 0;
  *((_QWORD *)&v50 + 1) = 0;
  *(_QWORD *)&v51 = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)((char *)&v50 + 8), 0, 0.0);
  *((_QWORD *)&v51 + 1) = 0x7FF8000000000000;
  sub_1000F19B4((uint64_t)&v52);
  if ((sub_1000E7B8C(a3, (uint64_t)&v45) & 1) == 0)
  {
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
    }
    *(_WORD *)buf = 0;
    v10 = "Bad VIO estimate; skip it";
    v11 = v9;
    v12 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, 2u);
    goto LABEL_42;
  }
  if (!(_BYTE)v67)
  {
    if (qword_100417ED8 == -1)
    {
      v13 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v13 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_42;
    }
    *(_WORD *)buf = 0;
    v10 = "Current VIO estimate of IMU pose is not Valid";
    v11 = v13;
    v12 = OS_LOG_TYPE_INFO;
    goto LABEL_18;
  }
  if (v64 != 1)
  {
    if (qword_100417ED8 == -1)
    {
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_42;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_42;
    }
    __asm { BR              X10 }
  }
  v6 = (_BYTE *)(a1 + 6664);
  if (!*(_BYTE *)(a1 + 6664))
    goto LABEL_32;
  v7 = *(_QWORD *)(a1 + 6776);
  v8 = *(double *)(a1 + 6784);
  if (((_QWORD)v52 || (*((_QWORD *)&v52 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (v7 || (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (_QWORD)v52 != v7)
  {
    if ((uint64_t)v52 >= v7)
      goto LABEL_27;
LABEL_23:
    if (qword_100417ED8 == -1)
    {
      v14 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v14 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_26:
        sub_1000ED6B8(a1);
        if (!*v6)
          goto LABEL_32;
        goto LABEL_27;
      }
    }
    v15 = *(double *)(a1 + 6784) + (double)*(uint64_t *)(a1 + 6776);
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = *((double *)&v52 + 1) + (double)(uint64_t)v52;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Current VIO estimate's Time %{public}.3lf is before the previous VIO estimate %{public}.3lf", buf, 0x16u);
    goto LABEL_26;
  }
  if (*((double *)&v52 + 1) < v8)
    goto LABEL_23;
LABEL_27:
  *(_OWORD *)buf = v58;
  *(_OWORD *)v91 = *(_OWORD *)(a1 + 6872);
  v16 = CNTimeSpan::operator-(buf, v91);
  if (fabs(v17 + (double)v16) >= 2.22044605e-16)
  {
    if (qword_100417ED8 == -1)
    {
      v18 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_31:
        sub_1000ED6B8(a1);
        goto LABEL_32;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v18 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_31;
    }
    v19 = *(double *)(a1 + 6880) + (double)*(uint64_t *)(a1 + 6872);
    *(_DWORD *)buf = 134349568;
    *(double *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = *((double *)&v58 + 1) + (double)(uint64_t)v58;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = *((double *)&v52 + 1) + (double)(uint64_t)v52;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "VIO estimate session start time changed from %{public}.3lf to %{public}.3lf; change the VIO reference frame at the"
      " event applicable time %{public}.3lf",
      buf,
      0x20u);
    goto LABEL_31;
  }
LABEL_32:
  if (*v6
    && (sub_1000EE26C(a1 + 6672, (uint64_t)&v45, 1, (uint64_t)buf), buf[0])
    && (v20 = *(_QWORD *)&buf[8], *(double *)&buf[8] > 8.0))
  {
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v21 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_42;
      goto LABEL_37;
    }
    v21 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_37:
      *(_DWORD *)v91 = 134283777;
      *(_QWORD *)&v91[4] = v20;
      *(_WORD *)&v91[12] = 2049;
      *(_QWORD *)&v91[14] = 0x4020000000000000;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Inferred horizontal speed of VIO estimate %{private}.3lf exceeds the threshold %{private}.3lf", v91, 0x16u);
    }
  }
  else
  {
    *(_QWORD *)buf = sub_1000E3FAC(a2);
    *(_QWORD *)&buf[8] = off_1003EF0A8;
    v71 = v48;
    v72 = v49;
    v73 = v50;
    v74 = v51;
    *(_OWORD *)&buf[16] = v46;
    v70 = v47;
    v77 = v54;
    v78 = v55;
    v75 = v52;
    v76 = v53;
    v81 = v58;
    v82 = v59;
    v79 = v56;
    v80 = v57;
    v87 = v64;
    v85 = v62;
    v86 = v63;
    v83 = v60;
    v84 = v61;
    v22 = *(uint64_t **)(a1 + 4304);
    sub_1000F1B20((cnrotation::CNRotation *)&v88, (uint64_t)v65);
    sub_1000F1B20((cnrotation::CNRotation *)v89, (uint64_t)v66);
    v89[220] = v67;
    v90 = v68;
    sub_1000EEC18(v22, (uint64_t)buf);
    sub_1000ED500((cnframework::TimestampedEvent *)&buf[8]);
    if (*v6)
    {
      v23 = v49;
      *(_OWORD *)(a1 + 6712) = v48;
      *(_OWORD *)(a1 + 6728) = v23;
      v24 = v51;
      *(_OWORD *)(a1 + 6744) = v50;
      *(_OWORD *)(a1 + 6760) = v24;
      v25 = v47;
      *(_OWORD *)(a1 + 6680) = v46;
      *(_OWORD *)(a1 + 6696) = v25;
      *(_BYTE *)(a1 + 6968) = v64;
      v26 = v63;
      *(_OWORD *)(a1 + 6936) = v62;
      *(_OWORD *)(a1 + 6952) = v26;
      v27 = v61;
      *(_OWORD *)(a1 + 6904) = v60;
      *(_OWORD *)(a1 + 6920) = v27;
      v28 = v59;
      *(_OWORD *)(a1 + 6872) = v58;
      *(_OWORD *)(a1 + 6888) = v28;
      v29 = v57;
      *(_OWORD *)(a1 + 6840) = v56;
      *(_OWORD *)(a1 + 6856) = v29;
      v30 = v55;
      *(_OWORD *)(a1 + 6808) = v54;
      *(_OWORD *)(a1 + 6824) = v30;
      v31 = v53;
      *(_OWORD *)(a1 + 6776) = v52;
      *(_OWORD *)(a1 + 6792) = v31;
      sub_1000EA3D4(a1 + 6976, (uint64_t)v65);
      sub_1000EA3D4(a1 + 7416, (uint64_t)v66);
      *(_BYTE *)(a1 + 7858) = v68;
      *(_WORD *)(a1 + 7856) = v67;
    }
    else
    {
      *(_QWORD *)(a1 + 6672) = off_1003EF0A8;
      v32 = v49;
      *(_OWORD *)(a1 + 6712) = v48;
      *(_OWORD *)(a1 + 6728) = v32;
      v33 = v51;
      *(_OWORD *)(a1 + 6744) = v50;
      *(_OWORD *)(a1 + 6760) = v33;
      v34 = v47;
      *(_OWORD *)(a1 + 6680) = v46;
      *(_OWORD *)(a1 + 6696) = v34;
      v35 = v52;
      v36 = v53;
      v37 = v55;
      *(_OWORD *)(a1 + 6808) = v54;
      *(_OWORD *)(a1 + 6824) = v37;
      *(_OWORD *)(a1 + 6776) = v35;
      *(_OWORD *)(a1 + 6792) = v36;
      v38 = v56;
      v39 = v57;
      v40 = v59;
      *(_OWORD *)(a1 + 6872) = v58;
      *(_OWORD *)(a1 + 6888) = v40;
      *(_OWORD *)(a1 + 6840) = v38;
      *(_OWORD *)(a1 + 6856) = v39;
      v41 = v60;
      v42 = v61;
      v43 = v62;
      v44 = v63;
      *(_BYTE *)(a1 + 6968) = v64;
      *(_OWORD *)(a1 + 6936) = v43;
      *(_OWORD *)(a1 + 6952) = v44;
      *(_OWORD *)(a1 + 6904) = v41;
      *(_OWORD *)(a1 + 6920) = v42;
      sub_1000F1B20((cnrotation::CNRotation *)(a1 + 6976), (uint64_t)v65);
      sub_1000F1B20((cnrotation::CNRotation *)(a1 + 7416), (uint64_t)v66);
      *(_BYTE *)(a1 + 7858) = v68;
      *(_WORD *)(a1 + 7856) = v67;
      *v6 = 1;
    }
    sub_1000EED74(a1, 0);
    sub_1000EEF9C(a1, *(_QWORD *)(a2 + 40), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 4304) + 16) - 1200));
  }
LABEL_42:
  sub_1000ED500((cnframework::TimestampedEvent *)&v45);
}

void sub_1000EE144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  v2[912] = off_1003EEB18;
  v2[898] = off_1003EEB18;
  v2[884] = off_1003EEB18;
  v2[876] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v2 + 834));
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  cnframework::TimestampedEvent *v2;
  va_list va;

  va_start(va, a2);
  sub_1000ED500(v2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  cnframework::TimestampedEvent *v2;
  va_list va;

  va_start(va, a2);
  STACK[0x728] = (unint64_t)off_1003EEB18;
  STACK[0x6B8] = (unint64_t)off_1003EEB18;
  STACK[0x648] = (unint64_t)off_1003EEB18;
  STACK[0x608] = (unint64_t)off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(v2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000ED500((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EE26C(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  double *p_x;
  int v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  const cntransformation::CNRigidTransformation *v20;
  double v21;
  double v22;
  uint64_t v23;
  float64x2_t *v24;
  unsigned int v25;
  float64x2_t *v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  cntransformation *v35;
  const cntransformation::CNRigidTransformation *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  _QWORD *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  NSObject *v57;
  double v58;
  NSObject *v59;
  const char *v60;
  uint8_t *v61;
  double *v62;
  long double v63;
  double v64;
  int v65;
  double v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  double *v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  double *v77;
  __int128 v78;
  __int128 v79;
  _OWORD *v80;
  int v81;
  __int128 v82;
  double v83;
  uint64_t v84;
  NSObject *v85;
  NSObject *v86;
  uint64_t (**v87)();
  __int128 v88;
  uint64_t v89;
  double *v90;
  _QWORD v91[2];
  __int128 v92;
  uint64_t v93;
  const mach_header_64 **v94;
  const mach_header_64 *v95;
  uint64_t (**v96)();
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD v103[9];
  uint64_t (**v104)();
  __int128 v105;
  uint64_t v106;
  double *v107;
  double v108[9];
  uint64_t (**v109)();
  __int128 v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114[26];
  uint64_t v115;
  uint8_t buf[448];
  uint64_t (**v117)();
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  long double *v123;
  long double __x;
  long double __y;
  _BYTE v126[24];
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[9];
  _BYTE v130[24];
  uint64_t v131;
  _QWORD *v132;
  _QWORD v133[10];

  v5 = *(double *)(a2 + 112) + (double)*(uint64_t *)(a2 + 104);
  v6 = *(double *)(a1 + 112) + (double)*(uint64_t *)(a1 + 104);
  v7 = vabdd_f64(v5, v6);
  if (v7 < 2.22044605e-16)
  {
    if (qword_100417ED8 == -1)
    {
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_5:
        *(_BYTE *)a4 = 0;
LABEL_66:
        *(_BYTE *)(a4 + 24) = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to estimate speed stats from VIO estimates: Time difference is too small", buf, 2u);
    goto LABEL_5;
  }
  v122 = 0x100000003;
  v117 = off_1003EEBE8;
  p_x = &__x;
  v123 = &__x;
  v13 = *(_DWORD *)(a2 + 348);
  v118 = *(_DWORD *)(a2 + 344);
  v119 = v13;
  v14 = (v13 * v118);
  v120 = v14;
  v121 = v118;
  if ((int)v14 > 3)
  {
    v23 = (v14 - 2);
    v24 = *(float64x2_t **)(a2 + 368);
    v25 = v14 - 1;
    v26 = *(float64x2_t **)(a1 + 368);
    v27 = v25 >> 1;
    v28 = v24;
    v29 = v26;
    v30 = (float64x2_t *)&__x;
    do
    {
      v31 = *v28++;
      v32 = v31;
      v33 = *v29++;
      *v30++ = vsubq_f64(v32, v33);
      --v27;
    }
    while (v27);
    *(float64x2_t *)(&__x + v23) = vsubq_f64(*(float64x2_t *)((char *)v24 + 8 * v23), *(float64x2_t *)((char *)v26 + 8 * v23));
    v21 = hypot(__x, __y);
    v22 = v21 / v7;
    if (a3)
    {
LABEL_11:
      *(double *)(a4 + 8) = v22;
      *(_QWORD *)(a4 + 16) = 0;
LABEL_65:
      *(_BYTE *)a4 = 1;
      goto LABEL_66;
    }
  }
  else
  {
    if ((int)v14 >= 1)
    {
      v15 = *(double **)(a2 + 368);
      v16 = *(double **)(a1 + 368);
      do
      {
        v17 = *v15++;
        v18 = v17;
        v19 = *v16++;
        *p_x++ = v18 - v19;
        --v14;
      }
      while (v14);
    }
    v21 = hypot(__x, __y);
    v22 = v21 / v7;
    if (a3)
      goto LABEL_11;
  }
  v34 = v21;
  v35 = (cntransformation *)(a1 + 304);
  cntransformation::Inv(buf, v35, v20);
  cntransformation::Cat(v114, (cntransformation *)buf, (const cntransformation::CNRigidTransformation *)(a2 + 304), v36);
  cnrotation::CNRotation::RotationMatrix(v35);
  v131 = 0x300000003;
  *(_QWORD *)v130 = off_1003EEAC0;
  *(_OWORD *)&v130[8] = xmmword_1003827C0;
  v132 = v133;
  sub_1000E5948((uint64_t)&v104, (uint64_t)&v115, (uint64_t)v130);
  cnrotation::CNRotation::RotationMatrix(v35);
  v38 = v97;
  v37 = v98;
  v127 = 0x300000003;
  *(_QWORD *)v126 = off_1003EEAC0;
  v128 = v129;
  *(_DWORD *)&v126[8] = v98;
  *(_DWORD *)&v126[12] = v97;
  *(_DWORD *)&v126[16] = v97 * v98;
  *(_DWORD *)&v126[20] = v98;
  if (v98 && v97)
  {
    v39 = 0;
    v40 = 0;
    v41 = v100;
    v42 = v102;
    v43 = v97 - 1;
    v44 = v97 & 0xFFFFFFFC;
    do
    {
      if (v38 >= 0xC)
      {
        v45 = 0;
        if (v37 == 1
          && (int)(v40 + v43) >= v40
          && (int)(v41 * v40 + v43) >= v41 * v40
          && (unint64_t)((char *)&v129[v40] - (char *)&v42[v41 * v40]) >= 0x20)
        {
          v47 = 0;
          do
          {
            v48 = (__int128 *)&v42[v39 + v47];
            v49 = *v48;
            v50 = v48[1];
            v51 = &v129[v40 + v47];
            *v51 = v49;
            v51[1] = v50;
            v47 += 4;
          }
          while (v44 != v47);
          v45 = v38 & 0xFFFFFFFC;
          if (v38 == v44)
            goto LABEL_18;
        }
      }
      else
      {
        v45 = 0;
      }
      v46 = v40 + v37 * v45;
      do
      {
        v129[v46] = v42[v39 + v45++];
        v46 += v37;
      }
      while (v38 != v45);
LABEL_18:
      ++v40;
      v39 += v41;
    }
    while (v40 != v37);
  }
  v111 = 0x300000003;
  v109 = off_1003EEAC0;
  v110 = xmmword_1003827C0;
  v112 = (double *)&v113;
  sub_1000E5948((uint64_t)v130, (uint64_t)v126, (uint64_t)&v109);
  v52 = v5 - v6;
  v53 = v112[SHIDWORD(v110) + 1];
  v54 = v53 * v53 + *v112 * *v112;
  v55 = v54 + v54;
  v56 = v52 * v52;
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003EF638);
  v57 = qword_100417EE0;
  v58 = v55 / v56;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v130 = 134349312;
    *(double *)&v130[4] = v22;
    *(_WORD *)&v130[12] = 2050;
    *(double *)&v130[14] = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "VIO inferred speed, mean, %{public}f, var, %{public}f", v130, 0x16u);
  }
  if (fabs(v34) < 2.22044605e-16)
  {
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v59 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
      goto LABEL_39;
    }
    v59 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_39:
      *(_WORD *)v130 = 0;
      v60 = "Failed to estimate the course stats from VIO estimates: Distance of travel is too small";
      v61 = v130;
LABEL_63:
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, v60, v61, 2u);
    }
LABEL_64:
    *(double *)(a4 + 8) = v22;
    *(double *)(a4 + 16) = v58;
    goto LABEL_65;
  }
  v62 = v123;
  v63 = v123[1];
  v64 = atan2(v63, *v123);
  v106 = 0x200000001;
  v104 = off_1003EEC30;
  v105 = xmmword_100382860;
  v107 = v108;
  v108[0] = -v63 / (v34 * v34);
  v108[1] = *v62 / (v34 * v34);
  v133[0] = &_mh_execute_header;
  v93 = 0x100000002;
  v91[1] = off_1003EEC78;
  v92 = xmmword_100382880;
  v94 = &v95;
  v95 = &_mh_execute_header;
  v131 = 0x200000002;
  *(_QWORD *)v130 = off_1003EEDA8;
  *(_OWORD *)&v130[8] = xmmword_100382870;
  v132 = v133;
  *(double *)v133 = v112[(int)v95 + (int)v95 * HIDWORD(v110)];
  *(double *)&v133[1] = v112[(((unint64_t)&_mh_execute_header >> 32)
                                          + &_mh_execute_header * HIDWORD(v110))];
  v65 = ((unint64_t)&_mh_execute_header >> 32) * HIDWORD(v110);
  if (v64 >= 0.0)
    v66 = v64;
  else
    v66 = v64 + 6.28318531;
  *(double *)&v133[2] = v112[&_mh_execute_header + v65];
  *(double *)&v133[3] = v112[(((unint64_t)&_mh_execute_header >> 32) + v65)];
  v127 = 0x200000001;
  *(_QWORD *)v126 = off_1003EEC30;
  *(_OWORD *)&v126[8] = xmmword_100382860;
  v128 = v129;
  sub_1000E5948((uint64_t)&v104, (uint64_t)v130, (uint64_t)v126);
  v68 = v105;
  v67 = DWORD1(v105);
  v101 = 0x100000002;
  v96 = off_1003EEE20;
  v102 = v103;
  v97 = DWORD1(v105);
  v98 = v105;
  v99 = v105 * DWORD1(v105);
  v100 = DWORD1(v105);
  if (DWORD1(v105) && (_DWORD)v105)
  {
    v69 = 0;
    v70 = 0;
    v71 = HIDWORD(v105);
    v72 = v107;
    v73 = v105 - 1;
    v74 = v105 & 0xFFFFFFFC;
    do
    {
      if (v68 >= 0xC)
      {
        v75 = 0;
        if (v67 == 1
          && v70 + v73 >= v70
          && v71 * v70 + v73 >= v71 * v70
          && (unint64_t)((char *)&v103[v70] - (char *)&v72[v71 * v70]) >= 0x20)
        {
          v76 = 0;
          do
          {
            v77 = &v72[v69 + v76];
            v78 = *(_OWORD *)v77;
            v79 = *((_OWORD *)v77 + 1);
            v80 = &v103[v70 + v76];
            *v80 = v78;
            v80[1] = v79;
            v76 += 4;
          }
          while (v74 != v76);
          v75 = v68 & 0xFFFFFFFC;
          if (v68 == v74)
            goto LABEL_46;
        }
      }
      else
      {
        v75 = 0;
      }
      v81 = v70 + v67 * v75;
      do
      {
        v103[v81] = *(_QWORD *)&v72[v69 + v75++];
        v81 += v67;
      }
      while (v68 != v75);
LABEL_46:
      ++v70;
      v69 += v71;
    }
    while (v70 != v67);
  }
  v89 = 0x100000001;
  v87 = off_1003EEDD8;
  *(_QWORD *)&v82 = 0x100000001;
  *((_QWORD *)&v82 + 1) = 0x100000001;
  v88 = v82;
  v90 = (double *)v91;
  sub_1000E5948((uint64_t)v126, (uint64_t)&v96, (uint64_t)&v87);
  v83 = *v90;
  if (*v90 < 0.0)
  {
    if (qword_100417ED8 == -1)
    {
      v59 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v59 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    *(_WORD *)v126 = 0;
    v60 = "Course estimate variance is NEGATIVE; drop it.";
    v61 = v126;
    goto LABEL_63;
  }
  *(double *)&v84 = 9.8696044;
  if (v83 > 9.8696044)
  {
    if (qword_100417ED8 == -1)
    {
      v85 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_73;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v85 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_73;
    }
    *(_DWORD *)v126 = 134349056;
    *(double *)&v126[4] = v83;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Course estimate variance is too big: %{public}f; flooring it to pi^2",
      v126,
      0xCu);
    v83 = 9.8696044;
  }
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003EF638);
    v86 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_75;
    goto LABEL_74;
  }
  *(double *)&v84 = v83;
LABEL_73:
  v83 = *(double *)&v84;
  v86 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_74:
    *(_DWORD *)v126 = 134349312;
    *(double *)&v126[4] = v66;
    *(_WORD *)&v126[12] = 2050;
    *(double *)&v126[14] = v83;
    _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "VIO inferred course, mean, %{public}f, var, %{public}f", v126, 0x16u);
  }
LABEL_75:
  *(double *)(a4 + 8) = v22;
  *(double *)(a4 + 16) = v58;
  *(_BYTE *)a4 = 1;
  *(double *)(a4 + 32) = v66;
  *(double *)(a4 + 40) = v83;
  *(_BYTE *)(a4 + 24) = 1;
}

void sub_1000EEC18(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;

  v4 = a1[2];
  if (v4 >= a1[3])
  {
    v19 = sub_1000F20E0(a1 + 1, a2);
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)a2;
    *(_QWORD *)(v4 + 8) = off_1003EF0A8;
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 32) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 96) = v8;
    *(_OWORD *)(v4 + 48) = v6;
    *(_OWORD *)(v4 + 64) = v7;
    v9 = *(_OWORD *)(a2 + 176);
    v11 = *(_OWORD *)(a2 + 128);
    v10 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(v4 + 176) = v9;
    *(_OWORD *)(v4 + 128) = v11;
    *(_OWORD *)(v4 + 144) = v10;
    v12 = *(_OWORD *)(a2 + 240);
    v14 = *(_OWORD *)(a2 + 192);
    v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v4 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(v4 + 240) = v12;
    *(_OWORD *)(v4 + 192) = v14;
    *(_OWORD *)(v4 + 208) = v13;
    v16 = *(_OWORD *)(a2 + 272);
    v15 = *(_OWORD *)(a2 + 288);
    v17 = *(_OWORD *)(a2 + 256);
    *(_BYTE *)(v4 + 304) = *(_BYTE *)(a2 + 304);
    *(_OWORD *)(v4 + 272) = v16;
    *(_OWORD *)(v4 + 288) = v15;
    *(_OWORD *)(v4 + 256) = v17;
    *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
    sub_1000F1B20((cnrotation::CNRotation *)(v4 + 312), a2 + 312);
    sub_1000F1B20((cnrotation::CNRotation *)(v4 + 752), a2 + 752);
    v18 = *(_WORD *)(a2 + 1192);
    *(_BYTE *)(v4 + 1194) = *(_BYTE *)(a2 + 1194);
    *(_WORD *)(v4 + 1192) = v18;
    v19 = v4 + 1200;
    a1[2] = v4 + 1200;
  }
  a1[2] = v19;
  sub_1000F1F64((uint64_t)a1, 0x2FC962FC962FC963 * ((v19 - a1[1]) >> 4) - 1);
}

void sub_1000EED2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  cnframework::TimestampedEvent *v2;
  _QWORD *v3;

  v3[79] = off_1003EEB18;
  v3[65] = off_1003EEB18;
  v3[51] = off_1003EEB18;
  v3[43] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(v2);
  *(_QWORD *)(v1 + 16) = v3;
  _Unwind_Resume(a1);
}

void sub_1000EED5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  cnframework::TimestampedEvent *v2;
  uint64_t v3;

  cnframework::TimestampedEvent::~TimestampedEvent(v2);
  *(_QWORD *)(v1 + 16) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_1000EED74(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  if (*(_BYTE *)(result + 19))
  {
    v2 = result;
    if (*(_BYTE *)(result + 5552))
    {
      v3 = *(_QWORD *)(result + 4304);
      v5 = *(_QWORD *)(v3 + 8);
      v4 = *(_QWORD *)(v3 + 16);
      if (v5 != v4)
      {
        if ((a2 & 1) == 0)
        {
          result = sub_1000F3C50(result + 40);
          if ((result & 1) != 0)
            return result;
          v4 = *(_QWORD *)(*(_QWORD *)(v2 + 4304) + 16);
        }
        v6 = *(_OWORD *)(v4 - 1088);
        v30 = *(_OWORD *)(v2 + 5664);
        v31 = v6;
        result = CNTimeSpan::operator-(&v31, &v30);
        if (fabs(v7 + (double)result) <= 0.5)
        {
          v8 = *(_QWORD *)(v2 + 4304);
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(_QWORD *)(v8 + 16);
          if (v10 == v9)
          {
            v13 = v9;
          }
          else
          {
            v11 = *(_QWORD *)(v2 + 5664);
            v12 = *(double *)(v2 + 5672);
            if (v11)
            {
              v13 = v9;
              v14 = 0x2FC962FC962FC963 * ((v10 - v9) >> 4);
              while (1)
              {
                v15 = v14 >> 1;
                v16 = v13 + 1200 * (v14 >> 1);
                v17 = *(_QWORD *)(v16 + 112);
                if (v17)
                  v18 = 1;
                else
                  v18 = (*(_QWORD *)(v16 + 120) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                if (v18 && v17 != v11)
                {
                  if (v17 >= v11)
                    goto LABEL_12;
                }
                else if (*(double *)(v16 + 120) >= v12)
                {
                  goto LABEL_12;
                }
                v13 = v16 + 1200;
                v15 = v14 + ~v15;
LABEL_12:
                v14 = v15;
                if (!v15)
                  goto LABEL_24;
              }
            }
            if ((*(_QWORD *)(v2 + 5672) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              v13 = v9;
              v23 = 0x2FC962FC962FC963 * ((v10 - v9) >> 4);
              while (1)
              {
                v24 = v23 >> 1;
                v25 = v13 + 1200 * (v23 >> 1);
                v26 = *(_QWORD *)(v25 + 112);
                if (v26)
                {
                  if ((v26 & 0x8000000000000000) == 0)
                    goto LABEL_37;
                }
                else if (*(double *)(v25 + 120) >= v12)
                {
                  goto LABEL_37;
                }
                v13 = v25 + 1200;
                v24 = v23 + ~v24;
LABEL_37:
                v23 = v24;
                if (!v24)
                  goto LABEL_24;
              }
            }
            v13 = v9;
            v27 = 0x2FC962FC962FC963 * ((v10 - v9) >> 4);
            do
            {
              v28 = v27 >> 1;
              v29 = v13 + 1200 * (v27 >> 1);
              if (*(double *)(v29 + 120) < v12)
              {
                v13 = v29 + 1200;
                v28 = v27 + ~v28;
              }
              v27 = v28;
            }
            while (v28);
          }
LABEL_24:
          v19 = v9 + 1200 * (int)(-1775253149 * ((v10 - v9) >> 4) - 1);
          v20 = v13 - 1200;
          if (v13 == v9)
            v20 = v9;
          else
            v9 = v13;
          v21 = v13 == v10;
          if (v13 == v10)
            v22 = v19;
          else
            v22 = v20;
          if (v21)
            v9 = v19;
          return sub_1000F3C58(v2 + 40, v2 + 5560, (uint64_t *)(v22 + 112), (uint64_t *)(v9 + 112));
        }
      }
    }
  }
  return result;
}

void sub_1000EEF9C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  double v7;
  NSObject *v8;
  std::mutex *v9;
  _QWORD *v10;
  _QWORD *i;
  unsigned __int8 v12[8];
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  _QWORD v16[45];
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (*(_BYTE *)(a1 + 19))
  {
    sub_1000F5FB0((__n128 *)(a1 + 40), (uint64_t)(a3 + 1), v16);
    if (v17)
    {
      v6 = (*(uint64_t (**)(_QWORD *))(v16[0] + 16))(v16);
      v15 = *a3 + (uint64_t)((v7 + (double)v6) * 1000000000.0);
      if (!v17)
        sub_1000E7B58();
      sub_1000E48BC((uint64_t)v12, &v15, (uint64_t)v16, (_QWORD *)(a1 + 7952));
      if (!sub_1000E48C0(v12))
        goto LABEL_11;
      if (qword_100417ED8 == -1)
      {
        v8 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_8:
          v9 = (std::mutex *)(a1 + 7864);
          std::mutex::lock((std::mutex *)(a1 + 7864));
          v10 = *(_QWORD **)(a1 + 7928);
          for (i = *(_QWORD **)(a1 + 7936); v10 != i; ++v10)
            (*(void (**)(_QWORD, uint64_t, unsigned __int8 *))(*(_QWORD *)*v10 + 16))(*v10, a2, v12);
          std::mutex::unlock(v9);
LABEL_11:
          nullsub_22(v14);
          cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&v13);
          if (v17)
            cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)v16);
          return;
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003EF638);
        v8 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_8;
      }
      *(_DWORD *)buf = 134283777;
      v19 = v14[1];
      v20 = 2049;
      v21 = v14[2];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Raising VIO-based position lat,lng (%{private}.8f, %{private}.8f) from VIO estimate", buf, 0x16u);
      goto LABEL_8;
    }
  }
}

void sub_1000EF1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  nullsub_22(&a56);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&a10);
  if (!LOBYTE(STACK[0x338]))
    _Unwind_Resume(a1);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&a67);
  _Unwind_Resume(a1);
}

void sub_1000EF208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint8_t v7[16];
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[440];
  _BYTE v22[440];
  __int128 v23;
  uint64_t v24;

  sub_1000E4D54((int64x2_t *)&v8);
  if (!sub_1000E9084(a3, a2, (uint64_t)&v8))
  {
    if (qword_100417ED8 == -1)
    {
      v6 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF638);
      v6 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
    }
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bad VL location; skip it", v7, 2u);
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + 5552))
  {
    *(_OWORD *)(a1 + 5696) = v17;
    *(_OWORD *)(a1 + 5712) = v18;
    *(_OWORD *)(a1 + 5728) = v19;
    *(_OWORD *)(a1 + 5744) = v20;
    *(_OWORD *)(a1 + 5632) = v13;
    *(_OWORD *)(a1 + 5648) = v14;
    *(_OWORD *)(a1 + 5664) = v15;
    *(_OWORD *)(a1 + 5680) = v16;
    *(_OWORD *)(a1 + 5568) = v9;
    *(_OWORD *)(a1 + 5584) = v10;
    *(_OWORD *)(a1 + 5600) = v11;
    *(_OWORD *)(a1 + 5616) = v12;
    sub_1000EA3D4(a1 + 5760, (uint64_t)v21);
    sub_1000EA3D4(a1 + 6200, (uint64_t)v22);
    *(_QWORD *)(a1 + 6656) = v24;
    *(_OWORD *)(a1 + 6640) = v23;
  }
  else
  {
    *(_QWORD *)(a1 + 5560) = off_1003EF0D8;
    *(_OWORD *)(a1 + 5696) = v17;
    *(_OWORD *)(a1 + 5712) = v18;
    *(_OWORD *)(a1 + 5728) = v19;
    *(_OWORD *)(a1 + 5744) = v20;
    *(_OWORD *)(a1 + 5632) = v13;
    *(_OWORD *)(a1 + 5648) = v14;
    *(_OWORD *)(a1 + 5664) = v15;
    *(_OWORD *)(a1 + 5680) = v16;
    *(_OWORD *)(a1 + 5568) = v9;
    *(_OWORD *)(a1 + 5584) = v10;
    *(_OWORD *)(a1 + 5600) = v11;
    *(_OWORD *)(a1 + 5616) = v12;
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 5760), (uint64_t)v21);
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 6200), (uint64_t)v22);
    *(_QWORD *)(a1 + 6656) = v24;
    *(_OWORD *)(a1 + 6640) = v23;
    *(_BYTE *)(a1 + 5552) = 1;
  }
  sub_1000EED74(a1, 1);
LABEL_9:
  sub_1000ED590((cnframework::TimestampedEvent *)&v8);
}

void sub_1000EF458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  va_list va;

  va_start(va, a3);
  v3[760] = off_1003EEB18;
  v3[746] = off_1003EEB18;
  v3[732] = off_1003EEB18;
  v3[724] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v3 + 695));
  sub_1000ED590((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void sub_1000EF498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000ED590((cnframework::TimestampedEvent *)va);
  _Unwind_Resume(a1);
}

void **sub_1000EF4AC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 1200;
        sub_1000ED500((cnframework::TimestampedEvent *)(v3 - 1192));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1000EF578()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_100382C30;
  strcpy(v1.__r_.__value_.__l.__data_, "Not implemented. You shouldn't be misusing your LocalizerInputEvents.");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
  sub_10018D04C((uint64_t)v0);
  sub_1000EF6D4(&v2, (uint64_t)"static void LocalizerInputEventReceiver::unimplemented()", (uint64_t)"../../../common/localize/localizer_input_event_receiver.h", 211, (uint64_t)v0);
}

void sub_1000EF634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1000EF69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1000EF68CLL);
}

void sub_1000EF6C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000EF6D4(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003EF5B8;
  v13 = off_1003EF5E0;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003EF518;
  v18[0] = off_1003EF550;
  v21 = &off_1003EF588;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1000EFB44();
}

void sub_1000EF920(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1000EF934(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1000EF94C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1000EF998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_1000EF9BC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1000EFA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003EF518;
  *(_QWORD *)(a1 + 16) = off_1003EF550;
  *(_QWORD *)(a1 + 56) = &off_1003EF588;
  return a1;
}

void sub_1000EFAA4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000EFAB8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1003EF3B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1000EFAF4(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1000EFB44()
{
  operator new();
}

void sub_1000EFD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000EFD80(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1000EFD9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000EFDB0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t sub_1000EFE2C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1000EFEAC()
{
  operator new();
}

void sub_1000EFF4C()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 16) = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1000EFF80(_QWORD *a1)
{
  void *v2;

  *a1 = off_1003EF3B8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1000EFFCC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"PN10purpleslam13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1000F0304(a1 + 8);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_1000F0148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1000F020C(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  const char *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  int status;

  status = 0;
  v12 = 0;
  v4 = __cxa_demangle(a1, 0, &v12, &status);
  v5 = v4;
  if (v4)
    v6 = v4;
  else
    v6 = a1;
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    a2[1] = v8;
    a2[2] = v10 | 0x8000000000000000;
    *a2 = v11;
    a2 = v11;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v7;
    if (!v7)
      goto LABEL_12;
  }
  memmove(a2, v6, v8);
LABEL_12:
  *((_BYTE *)a2 + v8) = 0;
  free(v5);
}

void sub_1000F02F0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0304(uint64_t a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  _QWORD v7[8];
  void *__p[2];
  __int128 v9;
  int v10;
  void (__cdecl **v11)(std::ostringstream *__hidden);

  v6 = v2;
  *(_QWORD *)((char *)&v7[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v7[-1] + (_QWORD)*(v6 - 3));
  std::ios_base::init(v4, v7);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v7);
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 16;
  sub_10018D074(&v6, a1);
  std::stringbuf::str(v7);
  if (SBYTE7(v9) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v11);
}

void sub_1000F043C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_1000F045C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_1000F0470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

_QWORD *sub_1000F0508(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  std::ostream::sentry::sentry(v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1000F066C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_1000F0610(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  std::ostream::sentry::~sentry(&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1000F05F0);
}

void sub_1000F0658(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000F066C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_1000CDE30();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1000F07F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000F0814()
{
  operator delete();
}

uint64_t sub_1000F0828(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1000F0840()
{
  return 0;
}

uint64_t sub_1000F0848()
{
  return 0;
}

uint64_t sub_1000F0850()
{
  return 0;
}

uint64_t sub_1000F0858(uint64_t a1, const char *a2)
{
  void (__cdecl **v4)(std::ostringstream *__hidden);
  uint64_t v5;
  std::ios_base *v6;
  size_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  void *__p[2];
  uint64_t v18;
  void (__cdecl **v19)(std::ostringstream *__hidden);
  _QWORD v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  void (__cdecl **v24)(std::ostringstream *__hidden);

  if (a2)
  {
    v19 = v4;
    *(_QWORD *)((char *)&v20[-1] + (_QWORD)*(v4 - 3)) = v5;
    v6 = (std::ios_base *)((char *)&v20[-1] + (_QWORD)*(v19 - 3));
    std::ios_base::init(v6, v20);
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf(v20);
    *(_OWORD *)v21 = 0u;
    v22 = 0u;
    v23 = 16;
    v7 = strlen(a2);
    sub_1000F0508(&v19, (uint64_t)a2, v7);
    v8 = *(_QWORD **)(a1 + 8);
    if (v8 != (_QWORD *)(a1 + 16))
    {
      do
      {
        (**(void (***)(void **__return_ptr))v8[5])(__p);
        if (v18 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        if (v18 >= 0)
          v10 = HIBYTE(v18);
        else
          v10 = (uint64_t)__p[1];
        sub_1000F0508(&v19, (uint64_t)v9, v10);
        if (SHIBYTE(v18) < 0)
        {
          operator delete(__p[0]);
          v11 = (_QWORD *)v8[1];
          if (v11)
          {
            do
            {
LABEL_15:
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
            goto LABEL_4;
          }
        }
        else
        {
          v11 = (_QWORD *)v8[1];
          if (v11)
            goto LABEL_15;
        }
        do
        {
          v12 = (_QWORD *)v8[2];
          v13 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
LABEL_4:
        v8 = v12;
      }
      while (v12 != (_QWORD *)(a1 + 16));
    }
    std::stringbuf::str(v20);
    v14 = v18;
    v15 = *(_OWORD *)__p;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 48) = v14;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v22) < 0)
      operator delete(v21[0]);
    std::streambuf::~streambuf(v20);
    std::ios::~ios(&v24);
  }
  result = a1 + 32;
  if (*(char *)(a1 + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_1000F0A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1000F0484((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0AF8@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = (_QWORD *)(result + 16);
  v5 = *(_QWORD **)(result + 16);
  if (!v5)
    goto LABEL_16;
  v6 = *a2;
  v7 = (_QWORD *)(result + 16);
  do
  {
    while (1)
    {
      v8 = v5[4];
      if (v8 != v6)
        break;
      v7 = v5;
      v5 = (_QWORD *)*v5;
      if (!v5)
        goto LABEL_9;
    }
    result = strcmp((const char *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    if ((int)result < 0)
      ++v5;
    else
      v7 = v5;
    v5 = (_QWORD *)*v5;
  }
  while (v5);
LABEL_9:
  if (v7 == v4
    || (v9 = v7[4], v6 != v9)
    && (result = strcmp((const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) != 0))
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v10 = v7[6];
    *a3 = v7[5];
    a3[1] = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  return result;
}

uint64_t *sub_1000F0BE4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;

  v17 = a3;
  result = sub_1000F103C((uint64_t **)(a1 + 8), (uint64_t **)a3, (uint64_t)&unk_100395958, &v17);
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (unsigned int *)result[6];
  result[5] = v7;
  result[6] = v6;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      result = (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 16))(v10);
      v14 = v10 + 3;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        result = (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
  return result;
}

uint64_t sub_1000F0CD8(uint64_t result)
{
  ++*(_DWORD *)(result + 56);
  return result;
}

BOOL sub_1000F0CE8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 56) - 1;
  *(_DWORD *)(a1 + 56) = v1;
  if (a1 && !v1)
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    sub_1000F1188(a1 + 8, *(_QWORD **)(a1 + 16));
    operator delete();
  }
  return v1 == 0;
}

void sub_1000F0D54(_QWORD *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_1000F0F5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1000F12A8(v1);
  _Unwind_Resume(a1);
}

void sub_1000F0F78(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1000F12A8(v1);
  _Unwind_Resume(a1);
}

void sub_1000F0F8C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1000F0FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  uint64_t *v14;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  __cxa_end_catch();
  if (a14)
  {
    v16 = a14 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 16))(a14);
      v19 = a14 + 3;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 24))(a14);
    }
  }
  sub_1000F12A8(v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000F103C(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  const char *v10;
  uint64_t *v11;
  const char *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v7 = a1 + 1;
  v6 = (uint64_t **)a1[1];
  if (v6)
  {
    v8 = *a2;
    v9 = v6[4];
    if (*a2 == v9)
    {
      return (uint64_t *)v6;
    }
    else
    {
      v10 = (const char *)(v8[1] & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v12 = (const char *)(v9[1] & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v10, v12) < 0)
        {
          v11 = *v6;
          v7 = v6;
          if (!*v6)
            goto LABEL_11;
        }
        else
        {
          if ((strcmp(v12, v10) & 0x80000000) == 0)
            return (uint64_t *)v6;
          v11 = v6[1];
          if (!v11)
          {
            v7 = v6 + 1;
            goto LABEL_11;
          }
        }
        v9 = (uint64_t *)v11[4];
        v6 = (uint64_t **)v11;
      }
      while (v8 != v9);
      return v11;
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_11:
    v13 = v6;
    v14 = (uint64_t *)operator new(0x38uLL);
    v14[4] = **a4;
    v14[5] = 0;
    v14[6] = 0;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v13;
    *v7 = v14;
    v15 = (uint64_t *)**a1;
    v16 = v14;
    if (v15)
    {
      *a1 = v15;
      v16 = *v7;
    }
    sub_1000E05F4(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v14;
  }
}

void sub_1000F1188(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    sub_1000F1188(a1, *a2);
    sub_1000F1188(a1, a2[1]);
    v4 = (unsigned int *)a2[6];
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
        v8 = v4 + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
      }
    }
    operator delete(a2);
  }
}

uint64_t sub_1000F122C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 16);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *sub_1000F12A8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

void sub_1000F12EC()
{
  operator delete();
}

uint64_t sub_1000F1300(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1000F1318()
{
  return 0;
}

uint64_t sub_1000F1320()
{
  return 0;
}

uint64_t sub_1000F1328()
{
  return 0;
}

uint64_t *sub_1000F1330(uint64_t **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;
  uint64_t *v10;
  const char *v11;
  uint64_t **v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = (uint64_t **)a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = v5[4];
    if (*a2 == v8)
    {
      return (uint64_t *)v5;
    }
    else
    {
      v9 = (const char *)(v7[1] & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v11 = (const char *)(v8[1] & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v9, v11) < 0)
        {
          v10 = *v5;
          v6 = v5;
          if (!*v5)
            goto LABEL_11;
        }
        else
        {
          if ((strcmp(v11, v9) & 0x80000000) == 0)
            return (uint64_t *)v5;
          v10 = v5[1];
          if (!v10)
          {
            v6 = v5 + 1;
            goto LABEL_11;
          }
        }
        v8 = (uint64_t *)v10[4];
        v5 = (uint64_t **)v10;
      }
      while (v7 != v8);
      return v10;
    }
  }
  else
  {
    v5 = a1 + 1;
LABEL_11:
    v12 = v5;
    v13 = (char *)operator new(0x38uLL);
    *((_QWORD *)v13 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)v13 = 0u;
    *((_QWORD *)v13 + 2) = v12;
    *v6 = (uint64_t *)v13;
    v14 = (uint64_t *)**a1;
    v15 = (uint64_t *)v13;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    sub_1000E05F4(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t *)v13;
  }
}

void sub_1000F1484(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1000F14D4(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1000F1538()
{
  operator new();
}

void sub_1000F160C()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1000F1648(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000EFA10((uint64_t)exception, a1);
}

void sub_1000F1684(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F1698(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1000F16E8(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1000F174C()
{
  sub_1000F1538();
}

void sub_1000F175C(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000EFA10((uint64_t)exception, v1);
}

void sub_1000F17A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F17B4(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_1000F180C(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_1000F1878(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1000F18DC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1000F192C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1000F1990(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_1000F19B4(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)a1, 0, 0.0);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 24), 0, 0.0);
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 48), 0, 0.0);
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 72), 0, 0.0);
  *(_QWORD *)(a1 + 88) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 96), 0, 0.0);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 120), 0, 0.0);
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 144), 0, 0.0);
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 168), 0, 0.0);
  *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 192) = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 200));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 640));
  *(_WORD *)(a1 + 1080) = 0;
  *(_BYTE *)(a1 + 1082) = 0;
  return a1;
}

void sub_1000F1AD8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[65] = off_1003EEB18;
  v1[51] = off_1003EEB18;
  v1[37] = off_1003EEB18;
  v1[29] = off_1003EEB18;
  _Unwind_Resume(a1);
}

void sub_1000F1AF4(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

__n128 sub_1000F1B20(cnrotation::CNRotation *a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  __int128 v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  _OWORD *v51;
  __int128 v52;
  int v53;
  int v54;
  uint64_t v55;
  __n128 *v56;
  int v57;
  __n128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 *v65;
  uint64_t v66;
  __int128 *v67;
  _OWORD *v68;
  __int128 v69;
  uint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  uint64_t v73;
  __int128 v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  __int128 *v79;
  uint64_t v80;
  _OWORD *v81;
  __int128 v82;
  __n128 *v83;
  uint64_t v84;
  __n128 v85;

  v3 = cnrotation::CNRotation::CNRotation(a1, (const cnrotation::CNRotation *)a2);
  *(_QWORD *)(v3 + 56) = 0x100000003;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = off_1003EEBE8;
  v6 = *(_DWORD *)(a2 + 40);
  v5 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(v3 + 40) = v6;
  *(_DWORD *)(v3 + 44) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(v3 + 48) = v7;
  *(_DWORD *)(v3 + 52) = v6;
  *(_QWORD *)(v3 + 64) = v3 + 72;
  v8 = *(_DWORD *)(a2 + 48);
  if (v8 > 3)
  {
    v16 = *(__int128 **)(a2 + 64);
    v17 = (v8 - 1) >> 1;
    v18 = v16;
    v19 = (_OWORD *)(v3 + 72);
    do
    {
      v20 = *v18++;
      *v19++ = v20;
      --v17;
    }
    while (v17);
    *(_OWORD *)(v3 + 72 + 8 * (v8 - 2)) = *(__int128 *)((char *)v16 + 8 * (v8 - 2));
  }
  else
  {
    if ((int)v7 < 1)
      goto LABEL_12;
    v9 = *(_QWORD *)(a2 + 64);
    if (v7 < 6 || (unint64_t)(v3 - v9 + 72) < 0x20)
    {
      v10 = 0;
LABEL_6:
      v11 = v7 - v10;
      v12 = 8 * v10;
      v13 = (_QWORD *)(8 * v10 + v3 + 72);
      v14 = (uint64_t *)(v9 + v12);
      do
      {
        v15 = *v14++;
        *v13++ = v15;
        --v11;
      }
      while (v11);
      goto LABEL_12;
    }
    v10 = v7 & 0x7FFFFFFC;
    v71 = (__int128 *)(v9 + 16);
    v72 = (_OWORD *)(v3 + 88);
    v73 = v7 & 0xFFFFFFFC;
    do
    {
      v74 = *v71;
      *(v72 - 1) = *(v71 - 1);
      *v72 = v74;
      v71 += 2;
      v72 += 2;
      v73 -= 4;
    }
    while (v73);
    if (v10 != v7)
      goto LABEL_6;
  }
LABEL_12:
  *(_QWORD *)(v3 + 120) = 0x300000003;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 96) = off_1003EEAC0;
  v22 = *(_DWORD *)(a2 + 104);
  v21 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(v3 + 104) = v22;
  *(_DWORD *)(v3 + 108) = v21;
  v23 = (v21 * v22);
  *(_DWORD *)(v3 + 112) = v23;
  *(_DWORD *)(v3 + 116) = v22;
  *(_QWORD *)(v3 + 128) = v3 + 136;
  v24 = *(_DWORD *)(a2 + 112);
  if (v24 > 3)
  {
    v32 = *(__int128 **)(a2 + 128);
    v33 = (v24 - 1) >> 1;
    v34 = v32;
    v35 = (_OWORD *)(v3 + 136);
    do
    {
      v36 = *v34++;
      *v35++ = v36;
      --v33;
    }
    while (v33);
    *(_OWORD *)(v3 + 136 + 8 * (v24 - 2)) = *(__int128 *)((char *)v32 + 8 * (v24 - 2));
  }
  else
  {
    if ((int)v23 < 1)
      goto LABEL_23;
    v25 = *(_QWORD *)(a2 + 128);
    if (v23 < 6 || (unint64_t)(v3 - v25 + 136) < 0x20)
    {
      v26 = 0;
LABEL_17:
      v27 = v23 - v26;
      v28 = 8 * v26;
      v29 = (_QWORD *)(8 * v26 + v3 + 136);
      v30 = (uint64_t *)(v25 + v28);
      do
      {
        v31 = *v30++;
        *v29++ = v31;
        --v27;
      }
      while (v27);
      goto LABEL_23;
    }
    v26 = v23 & 0x7FFFFFFC;
    v75 = (__int128 *)(v25 + 16);
    v76 = (_OWORD *)(v3 + 152);
    v77 = v23 & 0xFFFFFFFC;
    do
    {
      v78 = *v75;
      *(v76 - 1) = *(v75 - 1);
      *v76 = v78;
      v75 += 2;
      v76 += 2;
      v77 -= 4;
    }
    while (v77);
    if (v26 != v23)
      goto LABEL_17;
  }
LABEL_23:
  *(_QWORD *)(v3 + 232) = 0x300000003;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 208) = off_1003EEAC0;
  v38 = *(_DWORD *)(a2 + 216);
  v37 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(v3 + 216) = v38;
  *(_DWORD *)(v3 + 220) = v37;
  v39 = (v37 * v38);
  *(_DWORD *)(v3 + 224) = v39;
  *(_DWORD *)(v3 + 228) = v38;
  *(_QWORD *)(v3 + 240) = v3 + 248;
  v40 = *(_DWORD *)(a2 + 224);
  if (v40 > 3)
  {
    v48 = *(__int128 **)(a2 + 240);
    v49 = (v40 - 1) >> 1;
    v50 = v48;
    v51 = (_OWORD *)(v3 + 248);
    do
    {
      v52 = *v50++;
      *v51++ = v52;
      --v49;
    }
    while (v49);
    *(_OWORD *)(v3 + 248 + 8 * (v40 - 2)) = *(__int128 *)((char *)v48 + 8 * (v40 - 2));
  }
  else
  {
    if ((int)v39 < 1)
      goto LABEL_34;
    v41 = *(_QWORD *)(a2 + 240);
    if (v39 < 6 || (unint64_t)(v3 - v41 + 248) < 0x20)
    {
      v42 = 0;
LABEL_28:
      v43 = v39 - v42;
      v44 = 8 * v42;
      v45 = (_QWORD *)(8 * v42 + v3 + 248);
      v46 = (uint64_t *)(v41 + v44);
      do
      {
        v47 = *v46++;
        *v45++ = v47;
        --v43;
      }
      while (v43);
      goto LABEL_34;
    }
    v42 = v39 & 0x7FFFFFFC;
    v79 = (__int128 *)(v41 + 16);
    v80 = v39 & 0xFFFFFFFC;
    v81 = (_OWORD *)(v3 + 264);
    do
    {
      v82 = *v79;
      *(v81 - 1) = *(v79 - 1);
      *v81 = v82;
      v79 += 2;
      v81 += 2;
      v80 -= 4;
    }
    while (v80);
    if (v42 != v39)
      goto LABEL_28;
  }
LABEL_34:
  result.n128_u64[0] = 0x300000003;
  *(_QWORD *)(v3 + 344) = 0x300000003;
  *(_QWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 336) = 0;
  *(_QWORD *)(v3 + 320) = off_1003EEAC0;
  v53 = *(_DWORD *)(a2 + 328);
  v54 = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(v3 + 328) = v53;
  *(_DWORD *)(v3 + 332) = v54;
  v55 = (v54 * v53);
  *(_DWORD *)(v3 + 336) = v55;
  *(_DWORD *)(v3 + 340) = v53;
  v56 = (__n128 *)(v3 + 360);
  *(_QWORD *)(v3 + 352) = v3 + 360;
  v57 = *(_DWORD *)(a2 + 336);
  if (v57 <= 3)
  {
    if ((int)v55 >= 1)
    {
      v58 = *(__n128 **)(a2 + 352);
      if (v55 >= 6 && (unint64_t)(v3 - (_QWORD)v58 + 360) >= 0x20)
      {
        v59 = v55 & 0x7FFFFFFC;
        v83 = v58 + 1;
        v84 = v55 & 0xFFFFFFFC;
        do
        {
          result = v83[-1];
          v85 = *v83;
          *v56 = result;
          v56[1] = v85;
          v56 += 2;
          v83 += 2;
          v84 -= 4;
        }
        while (v84);
        if (v59 == v55)
          goto LABEL_41;
      }
      else
      {
        v59 = 0;
      }
      v60 = v55 - v59;
      v61 = v59;
      v62 = (unint64_t *)(v61 * 8 + v3 + 360);
      v63 = &v58->n128_u64[v61];
      do
      {
        v64 = *v63++;
        result.n128_u64[0] = v64;
        *v62++ = v64;
        --v60;
      }
      while (v60);
    }
LABEL_41:
    *(_BYTE *)(v3 + 432) = *(_BYTE *)(a2 + 432);
    return result;
  }
  v65 = *(__int128 **)(a2 + 352);
  v66 = (v57 - 1) >> 1;
  v67 = v65;
  v68 = (_OWORD *)(v3 + 360);
  do
  {
    v69 = *v67++;
    *v68++ = v69;
    --v66;
  }
  while (v66);
  v70 = 8 * (v57 - 2);
  result = *(__n128 *)((char *)v65 + v70);
  *(__n128 *)((char *)v56 + v70) = result;
  *(_BYTE *)(v3 + 432) = *(_BYTE *)(a2 + 432);
  return result;
}

void sub_1000F1F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EF668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F1F34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EF668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000F1F64(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  char *v15;
  void *__p;
  char *v17;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if (v4 == 1200)
  {
    *(_DWORD *)(a1 + 32) = 1;
  }
  else
  {
    v5 = a2;
    if (0x2FC962FC962FC963 * (v4 >> 4) <= a2)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v3 + 1200 * v5;
        v18 = *(_OWORD *)(v7 + 16);
        v8 = sub_1000E3F80((_QWORD *)v7, (uint64_t)&v18);
        if (v6 != v5)
        {
          v9 = v8;
          v10 = 1200 * v6;
          while (1)
          {
            v11 = *(_QWORD *)(a1 + 8) + v10;
            v18 = *(_OWORD *)(v11 + 16);
            if (*(_QWORD *)a1 >= v9 - sub_1000E3F80((_QWORD *)v11, (uint64_t)&v18))
              break;
            ++v6;
            *(_DWORD *)(a1 + 32) = 2;
            v10 += 1200;
            if (v5 == v6)
              goto LABEL_5;
          }
        }
        if (v6 == v5)
        {
LABEL_5:
          *(_DWORD *)(a1 + 32) = 1;
          v6 = v5;
        }
        ++v5;
        v3 = *(_QWORD *)(a1 + 8);
      }
      while (v5 < 0x2FC962FC962FC963 * ((*(_QWORD *)(a1 + 16) - v3) >> 4));
    }
    sub_1000F2554(a1, v6, &__p);
    v12 = (char *)__p;
    if (__p)
    {
      v13 = v17;
      v14 = __p;
      if (v17 != __p)
      {
        do
        {
          v15 = v13 - 1200;
          sub_1000ED500((cnframework::TimestampedEvent *)(v13 - 1192));
          v13 = v15;
        }
        while (v15 != v12);
        v14 = __p;
      }
      v17 = v12;
      operator delete(v14);
    }
  }
}

uint64_t sub_1000F20E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  char *i;
  char *v21;
  void *__p;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;

  v3 = 0x2FC962FC962FC963 * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x369D0369D0369DLL)
    sub_1000D02C0();
  if (0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5F92C5F92C5F92C6 * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x2FC962FC962FC963 * ((a1[2] - *a1) >> 4)) >= 0x1B4E81B4E81B4ELL)
    v6 = 0x369D0369D0369DLL;
  else
    v6 = v4;
  v27 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x369D0369D0369DLL)
      sub_1000CDEB8();
    v7 = (char *)operator new(1200 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[1200 * v3];
  __p = v7;
  v24 = v8;
  v25 = v8;
  v26 = &v7[1200 * v6];
  *(_QWORD *)v8 = *(_QWORD *)a2;
  v9 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v8 + 4) = v9;
  v10 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v8 + 6) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 2) = v11;
  v12 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v8 + 9) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)v8 + 10) = v12;
  v13 = *(_OWORD *)(a2 + 128);
  *((_OWORD *)v8 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v8 + 8) = v13;
  v14 = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v8 + 13) = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v8 + 14) = v14;
  v15 = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v8 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v8 + 12) = v15;
  v8[304] = *(_BYTE *)(a2 + 304);
  v16 = *(_OWORD *)(a2 + 288);
  *((_OWORD *)v8 + 17) = *(_OWORD *)(a2 + 272);
  *((_OWORD *)v8 + 18) = v16;
  v17 = *(_OWORD *)(a2 + 256);
  *((_OWORD *)v8 + 15) = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v8 + 16) = v17;
  *((_QWORD *)v8 + 1) = off_1003EF0A8;
  sub_1000F1B20((cnrotation::CNRotation *)(v8 + 312), a2 + 312);
  sub_1000F1B20((cnrotation::CNRotation *)&v7[1200 * v3 + 752], a2 + 752);
  v18 = &v7[1200 * v3];
  *((_WORD *)v18 + 596) = *(_WORD *)(a2 + 1192);
  v18[1194] = *(_BYTE *)(a2 + 1194);
  v25 += 1200;
  sub_1000F2338(a1, &__p);
  v19 = a1[1];
  v21 = v24;
  for (i = v25; v25 != v21; i = v25)
  {
    v25 = i - 1200;
    sub_1000ED500((cnframework::TimestampedEvent *)(i - 1192));
  }
  if (__p)
    operator delete(__p);
  return v19;
}

void sub_1000F22CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F2500((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  cnframework::TimestampedEvent *v11;
  uint64_t v12;
  _QWORD *v14;

  v14 = (_QWORD *)(v10 + 1200 * v12);
  v14[79] = off_1003EEB18;
  v14[65] = off_1003EEB18;
  v14[51] = off_1003EEB18;
  v14[43] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(v11);
  sub_1000F2500((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1000F231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  cnframework::TimestampedEvent *v10;

  cnframework::TimestampedEvent::~TimestampedEvent(v10);
  sub_1000F2500((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1000F2338(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(v6 + v7 - 1200) = *(_QWORD *)(v4 + v7 - 1200);
      *(_QWORD *)(v6 + v7 - 1192) = off_1003EF0A8;
      v8 = (_OWORD *)(v6 + v7 - 1184);
      v9 = *(_OWORD *)(v4 + v7 - 1168);
      *v8 = *(_OWORD *)(v4 + v7 - 1184);
      v8[1] = v9;
      v10 = *(_OWORD *)(v4 + v7 - 1152);
      v11 = *(_OWORD *)(v4 + v7 - 1136);
      v12 = *(_OWORD *)(v4 + v7 - 1104);
      v8[4] = *(_OWORD *)(v4 + v7 - 1120);
      v8[5] = v12;
      v8[2] = v10;
      v8[3] = v11;
      v13 = v6 + v7 - 1088;
      v14 = *(_OWORD *)(v4 + v7 - 1024);
      v16 = *(_OWORD *)(v4 + v7 - 1072);
      v15 = *(_OWORD *)(v4 + v7 - 1056);
      *(_OWORD *)(v13 + 48) = *(_OWORD *)(v4 + v7 - 1040);
      *(_OWORD *)(v13 + 64) = v14;
      *(_OWORD *)(v13 + 16) = v16;
      *(_OWORD *)(v13 + 32) = v15;
      v17 = *(_OWORD *)(v4 + v7 - 960);
      v19 = *(_OWORD *)(v4 + v7 - 1008);
      v18 = *(_OWORD *)(v4 + v7 - 992);
      *(_OWORD *)(v13 + 112) = *(_OWORD *)(v4 + v7 - 976);
      *(_OWORD *)(v13 + 128) = v17;
      *(_OWORD *)(v13 + 80) = v19;
      *(_OWORD *)(v13 + 96) = v18;
      v21 = *(_OWORD *)(v4 + v7 - 928);
      v20 = *(_OWORD *)(v4 + v7 - 912);
      v22 = *(_OWORD *)(v4 + v7 - 944);
      *(_BYTE *)(v13 + 192) = *(_BYTE *)(v4 + v7 - 896);
      *(_OWORD *)(v13 + 160) = v21;
      *(_OWORD *)(v13 + 176) = v20;
      *(_OWORD *)(v13 + 144) = v22;
      *(_OWORD *)v13 = *(_OWORD *)(v4 + v7 - 1088);
      sub_1000F1B20((cnrotation::CNRotation *)(v6 + v7 - 888), v4 + v7 - 888);
      sub_1000F1B20((cnrotation::CNRotation *)(v6 + v7 - 448), v4 + v7 - 448);
      v23 = v6 + v7;
      v24 = *(_WORD *)(v4 + v7 - 8);
      *(_BYTE *)(v23 - 6) = *(_BYTE *)(v4 + v7 - 6);
      *(_WORD *)(v23 - 8) = v24;
      v7 -= 1200;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v25 = *a1;
  *a1 = v6;
  a2[1] = v25;
  v26 = a1[1];
  a1[1] = a2[2];
  a2[2] = v26;
  v27 = a1[2];
  a1[2] = a2[3];
  a2[3] = v27;
  *a2 = a2[1];
}

void sub_1000F249C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + v1 - 568) = off_1003EEB18;
  *(_QWORD *)(v2 + v1 - 680) = off_1003EEB18;
  *(_QWORD *)(v2 + v1 - 792) = off_1003EEB18;
  *(_QWORD *)(v2 + v1 - 856) = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v2 + v1 - 1192));
  for (; v1; v1 += 1200)
    sub_1000ED500((cnframework::TimestampedEvent *)(v2 + 8 + v1));
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2500(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1200;
    sub_1000ED500((cnframework::TimestampedEvent *)(i - 1192));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000F2554(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  unint64_t v23;

  v5 = *(_QWORD *)(a1 + 8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1000F26A8(a3, v5, v5 + 1200 * a2, a2);
  if (a2)
  {
    v6 = v5 + 1200 * a2;
    v7 = *(_QWORD *)(a1 + 16);
    if (v6 != v7)
    {
      v8 = 1200 * a2;
      do
      {
        *(_QWORD *)v5 = *(_QWORD *)(v5 + v8);
        v9 = *(_OWORD *)(v5 + v8 + 32);
        *(_OWORD *)(v5 + 16) = *(_OWORD *)(v5 + v8 + 16);
        *(_OWORD *)(v5 + 32) = v9;
        v10 = *(_OWORD *)(v5 + v8 + 48);
        v11 = *(_OWORD *)(v5 + v8 + 64);
        v12 = *(_OWORD *)(v5 + v8 + 96);
        *(_OWORD *)(v5 + 80) = *(_OWORD *)(v5 + v8 + 80);
        *(_OWORD *)(v5 + 96) = v12;
        *(_OWORD *)(v5 + 48) = v10;
        *(_OWORD *)(v5 + 64) = v11;
        v13 = *(_OWORD *)(v5 + v8 + 176);
        v15 = *(_OWORD *)(v5 + v8 + 128);
        v14 = *(_OWORD *)(v5 + v8 + 144);
        *(_OWORD *)(v5 + 160) = *(_OWORD *)(v5 + v8 + 160);
        *(_OWORD *)(v5 + 176) = v13;
        *(_OWORD *)(v5 + 128) = v15;
        *(_OWORD *)(v5 + 144) = v14;
        v16 = *(_OWORD *)(v5 + v8 + 240);
        v18 = *(_OWORD *)(v5 + v8 + 192);
        v17 = *(_OWORD *)(v5 + v8 + 208);
        *(_OWORD *)(v5 + 224) = *(_OWORD *)(v5 + v8 + 224);
        *(_OWORD *)(v5 + 240) = v16;
        *(_OWORD *)(v5 + 192) = v18;
        *(_OWORD *)(v5 + 208) = v17;
        v19 = *(_OWORD *)(v5 + v8 + 256);
        v20 = *(_OWORD *)(v5 + v8 + 272);
        v21 = *(_OWORD *)(v5 + v8 + 288);
        *(_BYTE *)(v5 + 304) = *(_BYTE *)(v5 + v8 + 304);
        *(_OWORD *)(v5 + 272) = v20;
        *(_OWORD *)(v5 + 288) = v21;
        *(_OWORD *)(v5 + 256) = v19;
        *(_OWORD *)(v5 + 112) = *(_OWORD *)(v5 + v8 + 112);
        sub_1000EA3D4(v5 + 312, v5 + v8 + 312);
        sub_1000EA3D4(v5 + 752, v5 + 752 + v8);
        v22 = *(_WORD *)(v5 + v8 + 1192);
        *(_BYTE *)(v5 + 1194) = *(_BYTE *)(v5 + v8 + 1194);
        *(_WORD *)(v5 + 1192) = v22;
        v5 += 1200;
      }
      while (v5 + v8 != v7);
      v6 = *(_QWORD *)(a1 + 16);
    }
    if (v6 != v5)
    {
      do
      {
        v23 = v6 - 1200;
        sub_1000ED500((cnframework::TimestampedEvent *)(v6 - 1192));
        v6 = v23;
      }
      while (v23 != v5);
    }
    *(_QWORD *)(a1 + 16) = v5;
  }
}

void sub_1000F2694(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000EF4AC(v1);
  _Unwind_Resume(a1);
}

void sub_1000F26A8(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  __int16 v26;

  if (a4)
  {
    if (a4 >= 0x369D0369D0369ELL)
      sub_1000D02C0();
    v8 = (char *)operator new(1200 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[1200 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        *(_QWORD *)v10 = *(_QWORD *)(a2 + v9);
        *((_QWORD *)v10 + 1) = off_1003EF0A8;
        v12 = *(_OWORD *)(a2 + v9 + 32);
        *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + v9 + 16);
        *((_OWORD *)v10 + 2) = v12;
        v13 = *(_OWORD *)(a2 + v9 + 48);
        v14 = *(_OWORD *)(a2 + v9 + 64);
        v15 = *(_OWORD *)(a2 + v9 + 96);
        *((_OWORD *)v10 + 5) = *(_OWORD *)(a2 + v9 + 80);
        *((_OWORD *)v10 + 6) = v15;
        *((_OWORD *)v10 + 3) = v13;
        *((_OWORD *)v10 + 4) = v14;
        v16 = *(_OWORD *)(a2 + v9 + 176);
        v18 = *(_OWORD *)(a2 + v9 + 128);
        v17 = *(_OWORD *)(a2 + v9 + 144);
        *((_OWORD *)v10 + 10) = *(_OWORD *)(a2 + v9 + 160);
        *((_OWORD *)v10 + 11) = v16;
        *((_OWORD *)v10 + 8) = v18;
        *((_OWORD *)v10 + 9) = v17;
        v19 = *(_OWORD *)(a2 + v9 + 240);
        v21 = *(_OWORD *)(a2 + v9 + 192);
        v20 = *(_OWORD *)(a2 + v9 + 208);
        *((_OWORD *)v10 + 14) = *(_OWORD *)(a2 + v9 + 224);
        *((_OWORD *)v10 + 15) = v19;
        *((_OWORD *)v10 + 12) = v21;
        *((_OWORD *)v10 + 13) = v20;
        v23 = *(_OWORD *)(a2 + v9 + 272);
        v22 = *(_OWORD *)(a2 + v9 + 288);
        v24 = *(_OWORD *)(a2 + v9 + 256);
        v10[304] = *(_BYTE *)(a2 + v9 + 304);
        *((_OWORD *)v10 + 17) = v23;
        *((_OWORD *)v10 + 18) = v22;
        *((_OWORD *)v10 + 16) = v24;
        *((_OWORD *)v10 + 7) = *(_OWORD *)(a2 + v9 + 112);
        sub_1000F1B20((cnrotation::CNRotation *)&v8[v9 + 312], a2 + v9 + 312);
        sub_1000F1B20((cnrotation::CNRotation *)&v8[v9 + 752], a2 + v9 + 752);
        v25 = &v8[v9];
        v26 = *(_WORD *)(a2 + v9 + 1192);
        v25[1194] = *(_BYTE *)(a2 + v9 + 1194);
        *((_WORD *)v25 + 596) = v26;
        v9 += 1200;
      }
      while (v11 + 1200 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1000F2804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1000F2878(&a9);
  _Unwind_Resume(a1);
}

void sub_1000F2818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v12 + 8));
  for (; v11; v11 -= 1200)
    sub_1000ED500((cnframework::TimestampedEvent *)(v10 - 1192 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_1000F2878(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1000F2878(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = v4 - 1200;
          sub_1000ED500((cnframework::TimestampedEvent *)(v4 - 1192));
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1000F2900(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned __int8 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;

  v4 = *a1;
  *((_QWORD *)a1 + 1) = *(_QWORD *)a2;
  if (v4)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    v7 = *(_OWORD *)(a2 + 64);
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 88) = v8;
    *(_OWORD *)(a1 + 72) = v7;
    *(_OWORD *)(a1 + 56) = v6;
    v9 = *(_OWORD *)(a2 + 160);
    v10 = *(_OWORD *)(a2 + 176);
    v11 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 184) = v10;
    *(_OWORD *)(a1 + 168) = v9;
    *(_OWORD *)(a1 + 152) = v11;
    v12 = *(_OWORD *)(a2 + 224);
    v13 = *(_OWORD *)(a2 + 240);
    v14 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 248) = v13;
    *(_OWORD *)(a1 + 232) = v12;
    *(_OWORD *)(a1 + 216) = v14;
    v16 = *(_OWORD *)(a2 + 272);
    v15 = *(_OWORD *)(a2 + 288);
    v17 = *(_OWORD *)(a2 + 256);
    a1[312] = *(_BYTE *)(a2 + 304);
    *(_OWORD *)(a1 + 280) = v16;
    *(_OWORD *)(a1 + 296) = v15;
    *(_OWORD *)(a1 + 264) = v17;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 112);
    sub_1000EA3D4((uint64_t)(a1 + 320), a2 + 312);
    sub_1000EA3D4((uint64_t)(a1 + 760), a2 + 752);
    v18 = *(_BYTE *)(a2 + 1194);
    *((_WORD *)a1 + 600) = *(_WORD *)(a2 + 1192);
    a1[1202] = v18;
  }
  else
  {
    *((_QWORD *)a1 + 2) = off_1003EF0A8;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v19;
    v20 = *(_OWORD *)(a2 + 48);
    v21 = *(_OWORD *)(a2 + 64);
    v22 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 88) = v22;
    *(_OWORD *)(a1 + 72) = v21;
    *(_OWORD *)(a1 + 56) = v20;
    v23 = *(_OWORD *)(a2 + 160);
    v24 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 184) = v24;
    *(_OWORD *)(a1 + 168) = v23;
    *(_OWORD *)(a1 + 152) = v25;
    v26 = *(_OWORD *)(a2 + 224);
    v27 = *(_OWORD *)(a2 + 240);
    v28 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 248) = v27;
    *(_OWORD *)(a1 + 232) = v26;
    *(_OWORD *)(a1 + 216) = v28;
    v30 = *(_OWORD *)(a2 + 272);
    v29 = *(_OWORD *)(a2 + 288);
    v31 = *(_OWORD *)(a2 + 256);
    a1[312] = *(_BYTE *)(a2 + 304);
    *(_OWORD *)(a1 + 280) = v30;
    *(_OWORD *)(a1 + 296) = v29;
    *(_OWORD *)(a1 + 264) = v31;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 112);
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 320), a2 + 312);
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 760), a2 + 752);
    v32 = *(_WORD *)(a2 + 1192);
    a1[1202] = *(_BYTE *)(a2 + 1194);
    *((_WORD *)a1 + 600) = v32;
    *a1 = 1;
  }
}

void sub_1000F2AA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  cnframework::TimestampedEvent *v2;

  v1[80] = off_1003EEB18;
  v1[66] = off_1003EEB18;
  v1[52] = off_1003EEB18;
  v1[44] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent(v2);
  _Unwind_Resume(a1);
}

void sub_1000F2AD0(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent *v1;

  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

void sub_1000F2AE4(uint64_t a1)
{
  int v1;
  NSObject *v2;
  NSObject *v3;
  _QWORD *v4;
  _BYTE *v5;
  NSObject *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *p_p;
  const char *v11;
  size_t v12;
  std::string::size_type v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _QWORD v18[2];
  char v19;
  std::string __p;
  int v21;
  _BYTE buf[12];
  __int16 v23;
  std::string *v24;
  char v25;

  v25 = 0;
  buf[0] = 0;
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_100174738((uint64_t)buf, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(*(void **)buf);
  v1 = rand();
  if (qword_100417ED8 == -1)
  {
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003EF638);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_11:
      if (sub_10017466C())
      {
        if (qword_100417ED8 == -1)
        {
          v3 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
            goto LABEL_22;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003EF638);
          v3 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
            goto LABEL_22;
        }
        sub_100170BF8(0);
        v4 = v18;
        if (v19 < 0)
          v4 = (_QWORD *)v18[0];
        if (v25 >= 0)
          v5 = buf;
        else
          v5 = *(_BYTE **)buf;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v5;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
        v21 = v1;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Precondition failure: %{private}s\n %s \n trace link nonce = %d", (uint8_t *)&__p, 0x1Cu);
        if (v25 < 0)
          operator delete(*(void **)buf);
      }
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003EF638);
        v6 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
          goto LABEL_30;
        goto LABEL_23;
      }
LABEL_22:
      v6 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
LABEL_23:
      v7 = v19;
      v8 = (_QWORD *)v18[0];
      sub_100170BF8(0);
      v9 = v18;
      if (v7 < 0)
        v9 = v8;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v9;
      v23 = 2080;
      v24 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Precondition failure: %{private}s\n %s \n", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_30:
      __cxa_allocate_exception(0x40uLL);
      if (v19 >= 0)
        v11 = (const char *)v18;
      else
        v11 = (const char *)v18[0];
      v12 = strlen(v11);
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_1000CDE30();
      v13 = v12;
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v15 + 1;
        v14 = (std::string *)operator new(v15 + 1);
        __p.__r_.__value_.__l.__size_ = v13;
        __p.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v12;
        v14 = &__p;
        if (!v12)
        {
LABEL_42:
          v14->__r_.__value_.__s.__data_[v13] = 0;
          std::runtime_error::runtime_error((std::runtime_error *)buf, &__p);
          *(_QWORD *)buf = &off_1003EF830;
          sub_10018D04C((uint64_t)v17);
          sub_1000F2F7C((std::runtime_error *)buf, (uint64_t)"void Preconditions::details::checkFailed(const Args &...) [E = std::illegal_state_error, Args = <std::string>]", (uint64_t)"../../../common/util/preconditions.h", 88, (uint64_t)v17);
        }
      }
      memmove(v14, v11, v13);
      goto LABEL_42;
    }
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v1;
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Precondition failure. log link nonce = %d", (uint8_t *)&__p, 8u);
  goto LABEL_11;
}

void sub_1000F2EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::runtime_error a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a25);
  if (a23 < 0)
    operator delete(a18);
  if ((a17 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_1000F2F7C(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1003EF7E8;
  v13 = off_1003EF810;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1003EF748;
  v18[0] = off_1003EF780;
  v21 = &off_1003EF7B8;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1000F33B0();
}

void sub_1000F31C8(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_1000F31DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1000F31F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_1000F3240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_1000F3264(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1000F32B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003EF748;
  *(_QWORD *)(a1 + 16) = off_1003EF780;
  *(_QWORD *)(a1 + 56) = &off_1003EF7B8;
  return a1;
}

void sub_1000F334C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1000F3360(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1000F33B0()
{
  operator new();
}

void sub_1000F35C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F35EC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1000F3608(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000F361C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1000F366C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1000F36D0()
{
  operator new();
}

void sub_1000F37A4()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1000F37E0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000F32B8((uint64_t)exception, a1);
}

void sub_1000F381C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F3830(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1000F3880(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1000F38E4()
{
  sub_1000F36D0();
}

void sub_1000F38F4(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000F32B8((uint64_t)exception, v1);
}

void sub_1000F3938(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F394C(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_1000F39A4(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_1000F3A10(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1000F3A74(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1000F3AC4(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1000F3B28(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

std::string *sub_1000F3B4C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1000F3B7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F3B98()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000F3BF4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000F3C50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t sub_1000F3C58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  NSObject *v47;
  uint64_t result;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  double v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  double v66;
  __n128 v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  BOOL v71;
  __n128 v72;
  __n128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  char v86;
  _BYTE v87[440];
  _WORD v88[221];
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  _BYTE v104[440];
  _WORD v105[221];
  char v106;
  uint8_t buf[16];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char v119;
  _BYTE v120[440];
  _BYTE v121[440];
  __int16 v122;
  char v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;

  sub_1000F44AC(a1);
  if (*(_BYTE *)(a1 + 1136))
  {
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 56) = v9;
    *(_OWORD *)(a1 + 40) = v8;
    v11 = *(_OWORD *)(a2 + 72);
    v12 = *(_OWORD *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v13;
    *(_OWORD *)(a1 + 120) = v12;
    *(_OWORD *)(a1 + 104) = v11;
    v14 = *(_OWORD *)(a2 + 136);
    v15 = *(_OWORD *)(a2 + 152);
    v16 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v16;
    *(_OWORD *)(a1 + 184) = v15;
    *(_OWORD *)(a1 + 168) = v14;
    sub_1000EA3D4(a1 + 232, a2 + 200);
    sub_1000EA3D4(a1 + 672, a2 + 640);
    v17 = *(_QWORD *)(a2 + 1096);
    *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a2 + 1080);
    *(_QWORD *)(a1 + 1128) = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = off_1003EF0D8;
    v18 = *(_OWORD *)(a2 + 8);
    v19 = *(_OWORD *)(a2 + 24);
    v20 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v20;
    *(_OWORD *)(a1 + 56) = v19;
    *(_OWORD *)(a1 + 40) = v18;
    v21 = *(_OWORD *)(a2 + 72);
    v22 = *(_OWORD *)(a2 + 88);
    v23 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v23;
    *(_OWORD *)(a1 + 120) = v22;
    *(_OWORD *)(a1 + 104) = v21;
    v24 = *(_OWORD *)(a2 + 136);
    v25 = *(_OWORD *)(a2 + 152);
    v26 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v26;
    *(_OWORD *)(a1 + 184) = v25;
    *(_OWORD *)(a1 + 168) = v24;
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 232), a2 + 200);
    sub_1000F1B20((cnrotation::CNRotation *)(a1 + 672), a2 + 640);
    v27 = *(_OWORD *)(a2 + 1080);
    *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a2 + 1096);
    *(_OWORD *)(a1 + 1112) = v27;
    *(_BYTE *)(a1 + 1136) = 1;
  }
  v91 = *((_OWORD *)a3 + 6);
  v74 = *((_OWORD *)a4 + 6);
  v28 = CNTimeSpan::operator-(&v91, &v74);
  v30 = v29 + (double)v28;
  memset(buf, 0, sizeof(buf));
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)buf, 0, 0.0);
  if (v30 != *(double *)&buf[8] + (double)*(uint64_t *)buf)
  {
    if (qword_100417ED8 == -1)
    {
      v47 = qword_100417EE0;
      result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF868);
      v47 = qword_100417EE0;
      result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Attempted VL synchronization with two VIO estimates from different sessions", buf, 2u);
    return 0;
  }
  sub_1000F19B4((uint64_t)buf);
  sub_1000F19B4((uint64_t)&v91);
  v31 = *a3;
  v32 = *((double *)a3 + 1);
  v33 = *a4;
  v34 = *((double *)a4 + 1);
  if ((*a3 || (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (v33 || (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && v31 != v33)
  {
    if (v31 < v33)
      goto LABEL_11;
  }
  else if (v32 < v34)
  {
LABEL_11:
    v35 = *((_OWORD *)a3 + 11);
    v117 = *((_OWORD *)a3 + 10);
    v118 = v35;
    v119 = *((_BYTE *)a3 + 192);
    v36 = *((_OWORD *)a3 + 7);
    v113 = *((_OWORD *)a3 + 6);
    v114 = v36;
    v37 = *((_OWORD *)a3 + 8);
    v116 = *((_OWORD *)a3 + 9);
    v115 = v37;
    v38 = *((_OWORD *)a3 + 3);
    v109 = *((_OWORD *)a3 + 2);
    v110 = v38;
    v39 = *((_OWORD *)a3 + 4);
    v112 = *((_OWORD *)a3 + 5);
    v111 = v39;
    v40 = *(_OWORD *)a3;
    v108 = *((_OWORD *)a3 + 1);
    *(_OWORD *)buf = v40;
    sub_1000EA3D4((uint64_t)v120, (uint64_t)(a3 + 25));
    sub_1000EA3D4((uint64_t)v121, (uint64_t)(a3 + 80));
    v122 = *((_WORD *)a3 + 540);
    v123 = *((_BYTE *)a3 + 1082);
    v41 = *((_OWORD *)a4 + 11);
    v101 = *((_OWORD *)a4 + 10);
    v102 = v41;
    v103 = *((_BYTE *)a4 + 192);
    v42 = *((_OWORD *)a4 + 7);
    v97 = *((_OWORD *)a4 + 6);
    v98 = v42;
    v43 = *((_OWORD *)a4 + 8);
    v100 = *((_OWORD *)a4 + 9);
    v99 = v43;
    v44 = *((_OWORD *)a4 + 3);
    v93 = *((_OWORD *)a4 + 2);
    v94 = v44;
    v45 = *((_OWORD *)a4 + 4);
    v96 = *((_OWORD *)a4 + 5);
    v95 = v45;
    v46 = *(_OWORD *)a4;
    v92 = *((_OWORD *)a4 + 1);
    v91 = v46;
    sub_1000EA3D4((uint64_t)v104, (uint64_t)(a4 + 25));
    sub_1000EA3D4((uint64_t)v105, (uint64_t)(a4 + 80));
    goto LABEL_18;
  }
  v49 = *((_OWORD *)a4 + 11);
  v117 = *((_OWORD *)a4 + 10);
  v118 = v49;
  v119 = *((_BYTE *)a4 + 192);
  v50 = *((_OWORD *)a4 + 7);
  v113 = *((_OWORD *)a4 + 6);
  v114 = v50;
  v51 = *((_OWORD *)a4 + 8);
  v116 = *((_OWORD *)a4 + 9);
  v115 = v51;
  v52 = *((_OWORD *)a4 + 3);
  v109 = *((_OWORD *)a4 + 2);
  v110 = v52;
  v53 = *((_OWORD *)a4 + 4);
  v112 = *((_OWORD *)a4 + 5);
  v111 = v53;
  v54 = *(_OWORD *)a4;
  v108 = *((_OWORD *)a4 + 1);
  *(_OWORD *)buf = v54;
  sub_1000EA3D4((uint64_t)v120, (uint64_t)(a4 + 25));
  sub_1000EA3D4((uint64_t)v121, (uint64_t)(a4 + 80));
  v122 = *((_WORD *)a4 + 540);
  v123 = *((_BYTE *)a4 + 1082);
  v55 = *((_OWORD *)a3 + 11);
  v101 = *((_OWORD *)a3 + 10);
  v102 = v55;
  v103 = *((_BYTE *)a3 + 192);
  v56 = *((_OWORD *)a3 + 7);
  v97 = *((_OWORD *)a3 + 6);
  v98 = v56;
  v57 = *((_OWORD *)a3 + 8);
  v100 = *((_OWORD *)a3 + 9);
  v99 = v57;
  v58 = *((_OWORD *)a3 + 3);
  v93 = *((_OWORD *)a3 + 2);
  v94 = v58;
  v59 = *((_OWORD *)a3 + 4);
  v96 = *((_OWORD *)a3 + 5);
  v95 = v59;
  v60 = *(_OWORD *)a3;
  v92 = *((_OWORD *)a3 + 1);
  v91 = v60;
  sub_1000EA3D4((uint64_t)v104, (uint64_t)(a3 + 25));
  sub_1000EA3D4((uint64_t)v105, (uint64_t)(a3 + 80));
  a4 = a3;
LABEL_18:
  v105[220] = *((_WORD *)a4 + 540);
  v106 = *((_BYTE *)a4 + 1082);
  v90 = *(_OWORD *)(a2 + 104);
  sub_1000F19B4((uint64_t)&v74);
  v124 = *(_OWORD *)buf;
  v61 = CNTimeSpan::operator-(&v90, &v124);
  v63.n128_f64[0] = v62;
  v64.n128_f64[0] = fabs(v62 + (double)v61);
  if (v64.n128_f64[0] <= 0.001)
  {
    result = sub_1000F45D4((uint64_t)buf, v64, v63);
    if (!(_DWORD)result)
      return result;
    v84 = v117;
    v85 = v118;
    v86 = v119;
    v80 = v113;
    v81 = v114;
    v82 = v115;
    v83 = v116;
    v76 = v109;
    v77 = v110;
    v78 = v111;
    v79 = v112;
    v74 = *(_OWORD *)buf;
    v75 = v108;
    sub_1000EA3D4((uint64_t)v87, (uint64_t)v120);
    sub_1000EA3D4((uint64_t)v88, (uint64_t)v121);
    v68 = buf;
LABEL_31:
    v69 = v68 + 1080;
    v88[220] = *(_WORD *)v69;
    v89 = v69[2];
LABEL_32:
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v124, 0, 0.0);
    LOBYTE(v125) = 0;
    *((_QWORD *)&v125 + 1) = 0;
    *(_QWORD *)&v126 = 0;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)((char *)&v125 + 8), 0, 0.0);
    BYTE8(v126) = 0;
    v127 = 0uLL;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v127, 0, 0.0);
    LOBYTE(v128) = 0;
    *((_QWORD *)&v128 + 1) = 0;
    *(_QWORD *)&v129 = 0;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)((char *)&v128 + 8), 0, 0.0);
    *((_QWORD *)&v129 + 1) = 0x7FF8000000000000;
    v77 = v127;
    v78 = v128;
    v75 = v125;
    v79 = v129;
    v76 = v126;
    v74 = v90;
    v89 = 1;
    return sub_1000F5560(a1, (uint64_t)&v74, a2);
  }
  v124 = v91;
  v65.n128_f64[0] = (double)CNTimeSpan::operator-(&v90, &v124);
  v67.n128_f64[0] = fabs(v66 + v65.n128_f64[0]);
  if (v67.n128_f64[0] <= 0.001)
  {
    result = sub_1000F45D4((uint64_t)&v91, v67, v65);
    if (!(_DWORD)result)
      return result;
    v84 = v101;
    v85 = v102;
    v86 = v103;
    v80 = v97;
    v81 = v98;
    v82 = v99;
    v83 = v100;
    v76 = v93;
    v77 = v94;
    v78 = v95;
    v79 = v96;
    v74 = v91;
    v75 = v92;
    sub_1000EA3D4((uint64_t)v87, (uint64_t)v104);
    sub_1000EA3D4((uint64_t)v88, (uint64_t)v105);
    v68 = (uint8_t *)&v91;
    goto LABEL_31;
  }
  if ((_QWORD)v90
    || (v65.n128_u64[0] = *((_QWORD *)&v90 + 1), (*((_QWORD *)&v90 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if ((*(_QWORD *)buf || (*(_QWORD *)&buf[8] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      && (_QWORD)v90 != *(_QWORD *)buf)
    {
      if ((uint64_t)v90 < *(uint64_t *)buf)
        return 0;
    }
    else
    {
      v65.n128_u64[0] = *((_QWORD *)&v90 + 1);
      if (*((double *)&v90 + 1) < *(double *)&buf[8])
        return 0;
    }
    v67.n128_u64[0] = *((_QWORD *)&v91 + 1);
    v70 = v91;
    if (!(_QWORD)v90)
    {
      v65.n128_u64[0] = *((_QWORD *)&v90 + 1);
      if ((*((_QWORD *)&v90 + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        goto LABEL_44;
    }
  }
  else
  {
    if (*((double *)&v90 + 1) < *(double *)&buf[8])
      return 0;
    v67.n128_u64[0] = *((_QWORD *)&v91 + 1);
    v70 = v91;
    if ((*((_QWORD *)&v90 + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      goto LABEL_44;
  }
  if (!v70 && (v67.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
    || (v71 = (uint64_t)v90 <= v70, (_QWORD)v90 == v70))
  {
    v65.n128_u64[0] = *((_QWORD *)&v90 + 1);
LABEL_44:
    v71 = v65.n128_f64[0] <= v67.n128_f64[0];
  }
  if (!v71)
    return 0;
  result = sub_1000F45D4((uint64_t)buf, v67, v65);
  if ((_DWORD)result)
  {
    result = sub_1000F45D4((uint64_t)&v91, v72, v73);
    if ((_DWORD)result)
    {
      if (sub_1000F4DEC((uint64_t *)&v90, (uint64_t)buf, (uint64_t (***)())&v91, (uint64_t)&v74))
        goto LABEL_32;
      return 0;
    }
  }
  return result;
}

void sub_1000F4458(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[69] = off_1003EEB18;
  v1[55] = off_1003EEB18;
  v1[41] = off_1003EEB18;
  v1[33] = off_1003EEB18;
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v1 + 4));
  _Unwind_Resume(a1);
}

void sub_1000F4484(_Unwind_Exception *a1)
{
  uint64_t v1;

  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)(v1 + 32));
  _Unwind_Resume(a1);
}

void sub_1000F44AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_BYTE *)(a1 + 1136))
  {
    sub_1000ED590((cnframework::TimestampedEvent *)(a1 + 32));
    *(_BYTE *)(a1 + 1136) = 0;
  }
  if (*(_BYTE *)(a1 + 2232))
  {
    *(_QWORD *)(a1 + 2104) = off_1003EEB18;
    *(_QWORD *)(a1 + 1992) = off_1003EEB18;
    *(_QWORD *)(a1 + 1880) = off_1003EEB18;
    *(_QWORD *)(a1 + 1816) = off_1003EEB18;
    *(_QWORD *)(a1 + 1664) = off_1003EEB18;
    *(_QWORD *)(a1 + 1552) = off_1003EEB18;
    *(_QWORD *)(a1 + 1440) = off_1003EEB18;
    *(_QWORD *)(a1 + 1376) = off_1003EEB18;
    *(_BYTE *)(a1 + 2232) = 0;
  }
  sub_1000F6408(a1 + 2240);
  sub_1000F6408(a1 + 2680);
  sub_1000F6408(a1 + 3120);
  sub_1000F6408(a1 + 3560);
  *(_OWORD *)(a1 + 4008) = xmmword_100382850;
  v2 = *(_QWORD *)(a1 + 4032);
  *(_QWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(a1 + 4072) = xmmword_100382850;
  v3 = *(_QWORD *)(a1 + 4096);
  *(_QWORD *)v3 = 0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(a1 + 4136) = xmmword_1003827C0;
  v4 = *(_OWORD **)(a1 + 4160);
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  v4[3] = 0uLL;
  *(_OWORD *)((char *)v4 + 56) = 0uLL;
  if (*(_BYTE *)(a1 + 4256))
    *(_BYTE *)(a1 + 4256) = 0;
}

uint64_t sub_1000F45D4(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***v13)();
  unint64_t *v14;
  uint64_t (**v15)();
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double v26;
  uint64_t v27;
  __n128 v28;
  unsigned int v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v37;
  float64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  float64x2_t v47;
  uint64_t v48;
  double *v49;
  double *v50;
  double v51;
  __n128 v52;
  __n128 v53;
  unsigned int v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  __n128 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (***v66)();
  uint64_t (***v67)();
  uint64_t (**v68)();
  __int128 *v69;
  uint64_t v70;
  __int128 *v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  BOOL v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  float64x2_t *v87;
  float64x2_t *v88;
  uint64_t v89;
  float64x2_t v90;
  uint64_t v91;
  uint64_t v92;
  double *v93;
  double *v94;
  double v95;
  uint64_t v96;
  float64x2_t *v97;
  float64x2_t *v98;
  float64x2_t v99;
  __n128 *v100;
  __n128 *v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  double *v105;
  double v106;
  __n128 v107;
  unsigned int v108;
  uint64_t v109;
  __n128 v110;
  __n128 *v111;
  __n128 *v112;
  uint64_t v113;
  __n128 v114;
  _BYTE v115[40];
  _BYTE v116[16];
  uint64_t v117;
  uint64_t (**v118)();
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE v125[16];
  _BYTE v126[56];
  uint64_t (**v127)();
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE v134[16];
  _BYTE v135[56];

  if (*(_BYTE *)(a1 + 1082))
    return 1;
  v132 = 0x300000003;
  v127 = off_1003EEAC0;
  v5 = *(unsigned int *)(a1 + 416);
  v6 = *(_DWORD *)(a1 + 420);
  v128 = v5;
  v129 = v6;
  v7 = (v6 * v5);
  v130 = v6 * v5;
  v131 = v5;
  v133 = v134;
  v8 = *(_DWORD *)(a1 + 424);
  if (v8 > 3)
  {
    v16 = *(__int128 **)(a1 + 440);
    v17 = (v8 - 1) >> 1;
    v18 = v16;
    v19 = v134;
    do
    {
      v20 = *v18++;
      *v19++ = v20;
      --v17;
    }
    while (v17);
    v21 = 8 * (v8 - 2);
    a2 = *(__n128 *)((char *)v16 + v21);
    *(__n128 *)&v134[v21] = a2;
  }
  else
  {
    if ((int)v7 < 1)
      goto LABEL_15;
    v9 = *(__n128 **)(a1 + 440);
    if (v7 < 6 || (unint64_t)((char *)&v127 - (char *)v9 + 40) < 0x20)
    {
      v10 = 0;
LABEL_9:
      v11 = v7 - v10;
      v12 = v10;
      v13 = &(&v127)[v10 + 5];
      v14 = &v9->n128_u64[v12];
      do
      {
        v15 = (uint64_t (**)())*v14++;
        *v13++ = v15;
        --v11;
      }
      while (v11);
      goto LABEL_15;
    }
    v10 = v7 & 0x7FFFFFFC;
    v100 = v9 + 1;
    v101 = (__n128 *)v135;
    v102 = v7 & 0xFFFFFFFC;
    do
    {
      a2 = v100[-1];
      a3 = *v100;
      v101[-1] = a2;
      *v101 = a3;
      v100 += 2;
      v101 += 2;
      v102 -= 4;
    }
    while (v102);
    if (v10 != v7)
      goto LABEL_9;
  }
LABEL_15:
  if ((int)v5 < 1)
  {
    a2.n128_u64[0] = 0;
    a3.n128_u64[0] = 1.0;
    if (fabs(0.0) >= 2.22044605e-16)
LABEL_21:
      a3.n128_f64[0] = a3.n128_f64[0] / a2.n128_f64[0];
  }
  else
  {
    v22 = v5 + 1;
    a2.n128_u64[0] = 0;
    v23 = 0;
    if ((_DWORD)v5 == 1)
      goto LABEL_17;
    if (v22 < 0)
      v29 = ~(_DWORD)v5;
    else
      v29 = v5 + 1;
    v30 = v29 * (unint64_t)(v5 - 1);
    v31 = (v30 & 0x80000000) != 0;
    if (v22 < 0)
      v31 = v30 > 0x80000000;
    v32 = (v30 & 0xFFFFFFFF00000000) != 0;
    if (v31)
      goto LABEL_17;
    if (v32)
      goto LABEL_17;
    v33 = 0;
    v23 = v5 & 0xFFFFFFFE;
    v34 = v23;
    do
    {
      a2.n128_f64[0] = a2.n128_f64[0] + *(double *)&v134[8 * v33] + *(double *)&v134[8 * v22 + 8 * v33];
      v33 += 2 * v5 + 2;
      v34 -= 2;
    }
    while (v34);
    if (v23 != v5)
    {
LABEL_17:
      v24 = v5 - v23;
      v25 = v22 * v23;
      do
      {
        a2.n128_f64[0] = a2.n128_f64[0] + *(double *)&v134[8 * v25];
        v25 += v22;
        --v24;
      }
      while (v24);
    }
    a3.n128_u64[0] = 1.0;
    if (a2.n128_f64[0] < 1.0)
    {
      a3.n128_u64[0] = 1.0;
      if (fabs(a2.n128_f64[0]) >= 2.22044605e-16)
        goto LABEL_21;
    }
  }
  if ((int)v7 <= 0)
  {
    v128 = v5;
    v129 = v6;
    v130 = v6 * v5;
    v131 = v5;
    result = cntransformation::CNRigidTransformation::SetPpp(a1 + 200, &v127, a2, a3);
    if (!(_DWORD)result)
      return result;
    goto LABEL_55;
  }
  v26 = a3.n128_f64[0] * 4.0;
  if (v7 >= 4)
  {
    v27 = v7 & 0x7FFFFFFC;
    v35 = (float64x2_t *)v135;
    v36 = (float64x2_t *)v126;
    v37 = v7 & 0xFFFFFFFC;
    do
    {
      v38 = vmulq_n_f64(*v35, v26);
      v36[-1] = vmulq_n_f64(v35[-1], v26);
      *v36 = v38;
      v35 += 2;
      v36 += 2;
      v37 -= 4;
    }
    while (v37);
    if (v27 == v7)
      goto LABEL_45;
  }
  else
  {
    v27 = 0;
  }
  v39 = v7 - v27;
  v40 = 8 * v27 + 40;
  v41 = (double *)((char *)&v118 + v40);
  v42 = (double *)((char *)&v127 + v40);
  do
  {
    v43 = *v42++;
    *v41++ = v26 * v43;
    --v39;
  }
  while (v39);
LABEL_45:
  if ((int)v7 > 3)
  {
    v44 = (v7 - 1) >> 1;
    v45 = (float64x2_t *)v134;
    v46 = (float64x2_t *)v125;
    do
    {
      v47 = *v45++;
      *v46++ = vmulq_n_f64(v47, v26);
      --v44;
    }
    while (v44);
    *(float64x2_t *)&v125[8 * (v7 - 2)] = vmulq_n_f64(*(float64x2_t *)&v134[8 * (v7 - 2)], v26);
  }
  else
  {
    v48 = (v6 * v5);
    v49 = (double *)v125;
    v50 = (double *)v134;
    do
    {
      v51 = *v50++;
      *v49++ = v26 * v51;
      --v48;
    }
    while (v48);
  }
  v128 = v5;
  v129 = v6;
  v130 = v6 * v5;
  v131 = v5;
  if ((int)v7 > 3)
  {
    v54 = v7 - 2;
    memcpy(v134, v125, 16 * ((v7 - 1) >> 1));
    v55 = 8 * v54;
    v56 = *(__n128 *)&v125[v55];
    *(__n128 *)&v134[v55] = v56;
    result = cntransformation::CNRigidTransformation::SetPpp(a1 + 200, &v127, v56, v57);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    memcpy(v134, v125, 8 * v7);
    result = cntransformation::CNRigidTransformation::SetPpp(a1 + 200, &v127, v52, v53);
    if (!(_DWORD)result)
      return result;
  }
LABEL_55:
  v123 = 0x300000003;
  v118 = off_1003EEAC0;
  v58 = *(unsigned int *)(a1 + 304);
  v59 = *(_DWORD *)(a1 + 308);
  v119 = v58;
  v120 = v59;
  v60 = (v59 * v58);
  v121 = v59 * v58;
  v122 = v58;
  v124 = v125;
  v61 = *(_DWORD *)(a1 + 312);
  if (v61 > 3)
  {
    v69 = *(__int128 **)(a1 + 328);
    v70 = (v61 - 1) >> 1;
    v71 = v69;
    v72 = v125;
    do
    {
      v73 = *v71++;
      *v72++ = v73;
      --v70;
    }
    while (v70);
    v74 = 8 * (v61 - 2);
    v28 = *(__n128 *)((char *)v69 + v74);
    *(__n128 *)&v125[v74] = v28;
  }
  else
  {
    if ((int)v60 < 1)
      goto LABEL_66;
    v62 = *(__n128 **)(a1 + 328);
    if (v60 < 6 || (unint64_t)((char *)&v118 - (char *)v62 + 40) < 0x20)
    {
      v63 = 0;
LABEL_60:
      v64 = v60 - v63;
      v65 = 8 * v63;
      v66 = &(&v118)[v63 + 5];
      v67 = (uint64_t (***)())((char *)v62 + v65);
      do
      {
        v68 = *v67++;
        *v66++ = v68;
        --v64;
      }
      while (v64);
      goto LABEL_66;
    }
    v63 = v60 & 0x7FFFFFFC;
    v111 = v62 + 1;
    v112 = (__n128 *)v126;
    v113 = v60 & 0xFFFFFFFC;
    do
    {
      v28 = v111[-1];
      v114 = *v111;
      v112[-1] = v28;
      *v112 = v114;
      v111 += 2;
      v112 += 2;
      v113 -= 4;
    }
    while (v113);
    if (v63 != v60)
      goto LABEL_60;
  }
LABEL_66:
  if ((int)v58 < 1)
  {
    v76 = 0.0;
    v28.n128_u64[0] = 16.0;
    if (fabs(0.0) >= 2.22044605e-16)
LABEL_72:
      v28.n128_f64[0] = 0.00121846968 / v76 * 16.0;
  }
  else
  {
    v75 = v58 + 1;
    v76 = 0.0;
    v77 = 0;
    if ((_DWORD)v58 == 1)
      goto LABEL_68;
    if (v75 < 0)
      v81 = ~(_DWORD)v58;
    else
      v81 = v58 + 1;
    v82 = v81 * (unint64_t)(v58 - 1);
    v83 = (v82 & 0x80000000) != 0;
    if (v75 < 0)
      v83 = v82 > 0x80000000;
    v84 = (v82 & 0xFFFFFFFF00000000) != 0;
    if (v83)
      goto LABEL_68;
    if (v84)
      goto LABEL_68;
    v85 = 0;
    v77 = v58 & 0xFFFFFFFE;
    v86 = v77;
    do
    {
      v76 = v76 + *(double *)&v125[8 * v85] + *(double *)&v125[8 * v75 + 8 * v85];
      v85 += 2 * v58 + 2;
      v86 -= 2;
    }
    while (v86);
    if (v77 != v58)
    {
LABEL_68:
      v78 = v58 - v77;
      v79 = v75 * v77;
      do
      {
        v76 = v76 + *(double *)&v125[8 * v79];
        v79 += v75;
        --v78;
      }
      while (v78);
    }
    v28.n128_u64[0] = 16.0;
    if (v76 < 0.00121846968)
    {
      v28.n128_u64[0] = 16.0;
      if (fabs(v76) >= 2.22044605e-16)
        goto LABEL_72;
    }
  }
  if ((int)v60 <= 0)
  {
    v119 = v58;
    v120 = v59;
    v121 = v59 * v58;
    v122 = v58;
    result = cntransformation::CNRigidTransformation::SetPrr(a1 + 200, &v118, v28);
    if (!(_DWORD)result)
      return result;
LABEL_110:
    *(_BYTE *)(a1 + 1082) = 1;
    return result;
  }
  if (v60 >= 4)
  {
    v80 = v60 & 0x7FFFFFFC;
    v87 = (float64x2_t *)v126;
    v88 = (float64x2_t *)&v117;
    v89 = v60 & 0xFFFFFFFC;
    do
    {
      v90 = vmulq_n_f64(*v87, v28.n128_f64[0]);
      v88[-1] = vmulq_n_f64(v87[-1], v28.n128_f64[0]);
      *v88 = v90;
      v87 += 2;
      v88 += 2;
      v89 -= 4;
    }
    while (v89);
    if (v80 == v60)
      goto LABEL_96;
  }
  else
  {
    v80 = 0;
  }
  v91 = v60 - v80;
  v92 = 8 * v80 + 40;
  v93 = (double *)&v115[v92];
  v94 = (double *)((char *)&v118 + v92);
  do
  {
    v95 = *v94++;
    *v93++ = v28.n128_f64[0] * v95;
    --v91;
  }
  while (v91);
LABEL_96:
  if ((int)v60 > 3)
  {
    v96 = (v60 - 1) >> 1;
    v97 = (float64x2_t *)v125;
    v98 = (float64x2_t *)v116;
    do
    {
      v99 = *v97++;
      *v98++ = vmulq_n_f64(v99, v28.n128_f64[0]);
      --v96;
    }
    while (v96);
    *(float64x2_t *)&v116[8 * (v60 - 2)] = vmulq_n_f64(*(float64x2_t *)&v125[8 * (v60 - 2)], v28.n128_f64[0]);
  }
  else
  {
    v103 = (v59 * v58);
    v104 = (double *)v116;
    v105 = (double *)v125;
    do
    {
      v106 = *v105++;
      *v104++ = v28.n128_f64[0] * v106;
      --v103;
    }
    while (v103);
  }
  v119 = v58;
  v120 = v59;
  v121 = v59 * v58;
  v122 = v58;
  if ((int)v60 > 3)
  {
    v108 = v60 - 2;
    memcpy(v125, v116, 16 * ((v60 - 1) >> 1));
    v109 = 8 * v108;
    v110 = *(__n128 *)&v116[v109];
    *(__n128 *)&v125[v109] = v110;
    result = cntransformation::CNRigidTransformation::SetPrr(a1 + 200, &v118, v110);
    if (!(_DWORD)result)
      return result;
    goto LABEL_110;
  }
  memcpy(v125, v116, 8 * v60);
  result = cntransformation::CNRigidTransformation::SetPrr(a1 + 200, &v118, v107);
  if ((_DWORD)result)
    goto LABEL_110;
  return result;
}

BOOL sub_1000F4DEC(uint64_t *a1, uint64_t a2, uint64_t (***a3)(), uint64_t a4)
{
  uint64_t (**v8)();
  double v9;
  uint64_t (**v10)();
  double v11;
  BOOL v12;
  uint64_t (**v13)();
  double v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t (**v19)();
  uint64_t v20;
  double v21;
  float64x2_t v22;
  uint64_t v23;
  double v24;
  float64x2_t v25;
  double *v26;
  int v27;
  int v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  double v33;
  float64x2_t *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  double *v43;
  double v44;
  uint64_t v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t v50;
  uint64_t *v51;
  double *v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  float64x2_t *v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  _QWORD *v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 *v68;
  _OWORD *v69;
  __int128 v70;
  unsigned int v71;
  const cnrotation::CNRotation *v72;
  const cnrotation::CNRotation *v73;
  const cnrotation::CNRotation *v74;
  __n128 v75;
  _BOOL8 result;
  __n128 v77;
  __n128 v78;
  uint64_t v79;
  unsigned int v80;
  float64x2_t v81;
  float64x2_t v82;
  _BYTE v83[64];
  _BYTE v84[64];
  _QWORD v85[14];
  uint64_t (**v86)();
  __int128 v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE v90[64];
  uint64_t v91;
  _BYTE v92[112];
  uint64_t (**v93)();
  __int128 v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD v97[9];
  _BYTE v98[24];
  uint64_t v99;
  _QWORD *v100;
  _QWORD v101[9];
  _QWORD v102[4];
  _BYTE v103[32];
  uint64_t (**v104)();
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD v111[3];

  v8 = *(uint64_t (***)())a2;
  v9 = *(double *)(a2 + 8);
  v10 = (uint64_t (**)())*a1;
  if (*a1 || (v11 = *((double *)a1 + 1), (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if (v8)
      v12 = 1;
    else
      v12 = (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v12 && v10 != v8)
    {
      if ((uint64_t)v10 < (uint64_t)v8)
        return 0;
    }
    else if (*((double *)a1 + 1) < v9)
    {
      return 0;
    }
    v13 = *a3;
    v14 = *((double *)a3 + 1);
    if (v10 || (v11 = *((double *)a1 + 1), (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
    {
LABEL_14:
      if (v13 || (*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v15 = (uint64_t)v10 <= (uint64_t)v13;
        if (v10 == v13)
        {
          v15 = *((double *)a1 + 1) <= v14;
          v13 = (uint64_t (**)())*a1;
        }
        if (!v15)
          return 0;
        goto LABEL_26;
      }
      if (*((double *)a1 + 1) <= v14)
      {
        v13 = 0;
        goto LABEL_26;
      }
      return 0;
    }
  }
  else
  {
    if (v11 < v9)
      return 0;
    v13 = *a3;
    v14 = *((double *)a3 + 1);
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      goto LABEL_14;
  }
  if (v11 > v14)
    return 0;
LABEL_26:
  *(_QWORD *)v98 = v13;
  *(double *)&v98[8] = v14;
  v93 = v8;
  *(double *)&v94 = v9;
  v16 = CNTimeSpan::operator-(v98, &v93);
  v18 = v17 + (double)v16;
  if (fabs(v18) < 2.22044605e-16)
    return 0;
  v19 = a3[1];
  *(_QWORD *)v98 = *a3;
  *(_QWORD *)&v98[8] = v19;
  v20 = CNTimeSpan::operator-(v98, a1);
  v22.f64[0] = (v21 + (double)v20) / v18;
  v81 = v22;
  *(_OWORD *)v98 = *(_OWORD *)a2;
  v23 = CNTimeSpan::operator-(a1, v98);
  v99 = 0x100000003;
  *(_QWORD *)v98 = off_1003EEBE8;
  v26 = (double *)v101;
  v100 = v101;
  v27 = *(_DWORD *)(a2 + 240);
  v28 = *(_DWORD *)(a2 + 244);
  *(_DWORD *)&v98[8] = v27;
  *(_DWORD *)&v98[12] = v28;
  v29 = (v28 * v27);
  *(_DWORD *)&v98[16] = v29;
  *(_DWORD *)&v98[20] = v27;
  if ((int)v29 > 3)
  {
    v34 = *(float64x2_t **)(a2 + 264);
    v35 = (v29 - 1) >> 1;
    v36 = v34;
    v37 = (float64x2_t *)v101;
    do
    {
      v38 = *v36++;
      *v37++ = vmulq_n_f64(v38, v81.f64[0]);
      --v35;
    }
    while (v35);
    *(float64x2_t *)&v101[(v29 - 2)] = vmulq_n_f64(*(float64x2_t *)((char *)v34 + 8 * (v29 - 2)), v81.f64[0]);
  }
  else if ((int)v29 >= 1)
  {
    v30 = *(double **)(a2 + 264);
    v31 = (double *)v101;
    v32 = (v28 * v27);
    do
    {
      v33 = *v30++;
      *v31++ = v81.f64[0] * v33;
      --v32;
    }
    while (v32);
  }
  v95 = 0x100000003;
  v93 = off_1003EEBE8;
  v39 = (double *)v97;
  v96 = v97;
  v40 = *((_DWORD *)a3 + 61);
  v25.f64[0] = (v24 + (double)v23) / v18;
  v82 = v25;
  LODWORD(v94) = *((_DWORD *)a3 + 60);
  DWORD1(v94) = v40;
  v41 = (v40 * v94);
  *((_QWORD *)&v94 + 1) = __PAIR64__(v94, v41);
  if ((int)v41 > 3)
  {
    v45 = (v41 - 2);
    v46 = (float64x2_t *)a3[33];
    v47 = (v41 - 1) >> 1;
    v48 = v46;
    v49 = (float64x2_t *)v97;
    do
    {
      v50 = *v48++;
      *v49++ = vmulq_n_f64(v50, v25.f64[0]);
      --v47;
    }
    while (v47);
    *(float64x2_t *)&v97[v45] = vmulq_n_f64(*(float64x2_t *)((char *)v46 + 8 * v45), v25.f64[0]);
  }
  else if ((int)v41 >= 1)
  {
    v42 = (double *)a3[33];
    v43 = (double *)v97;
    do
    {
      v44 = *v42++;
      *v43++ = v25.f64[0] * v44;
      --v41;
    }
    while (v41);
  }
  v109 = 0x100000003;
  v104 = off_1003EEBE8;
  v51 = v111;
  v110 = v111;
  v105 = v27;
  v106 = v28;
  v107 = v28 * v27;
  v108 = v27;
  if ((int)v29 > 3)
  {
    v57 = (v29 - 1) >> 1;
    v58 = (float64x2_t *)v101;
    v59 = (float64x2_t *)v97;
    v60 = (float64x2_t *)v111;
    do
    {
      v61 = *v58++;
      v62 = v61;
      v63 = *v59++;
      *v60++ = vaddq_f64(v62, v63);
      --v57;
    }
    while (v57);
    *(float64x2_t *)&v111[(v29 - 2)] = vaddq_f64(*(float64x2_t *)&v101[(v29 - 2)], *(float64x2_t *)&v97[(v29 - 2)]);
  }
  else if ((int)v29 >= 1)
  {
    v52 = (double *)v111;
    v53 = (v28 * v27);
    do
    {
      v54 = *v26++;
      v55 = v54;
      v56 = *v39++;
      *v52++ = v55 + v56;
      --v53;
    }
    while (v53);
  }
  if ((uint64_t (***)())(a4 + 232) != &v104)
  {
    *(_DWORD *)(a4 + 240) = v27;
    *(_DWORD *)(a4 + 244) = v28;
    *(_DWORD *)(a4 + 248) = v29;
    *(_DWORD *)(a4 + 252) = v27;
    if ((int)v29 > 3)
    {
      v66 = *(_OWORD **)(a4 + 264);
      v67 = (v29 - 1) >> 1;
      v68 = (__int128 *)v111;
      v69 = v66;
      do
      {
        v70 = *v68++;
        *v69++ = v70;
        --v67;
      }
      while (v67);
      *(_OWORD *)((char *)v66 + 8 * (v29 - 2)) = *(_OWORD *)&v111[(v29 - 2)];
    }
    else if ((int)v29 >= 1)
    {
      v64 = *(_QWORD **)(a4 + 264);
      do
      {
        v65 = *v51++;
        *v64++ = v65;
        --v29;
      }
      while (v29);
    }
  }
  cnrotation::CNRotation::CNRotation((cnrotation::CNRotation *)v103);
  if (cnrotation::Slerp((cnrotation *)(a2 + 200), (const cnrotation::CNRotation *)(a3 + 25), (const cnrotation::CNRotation *)v103, v82.f64[0], (cnrotation::CNRotation *)8, v71))return 0;
  cnrotation::CNRotation::operator=(a4 + 200, v103);
  cnrotation::Inv(v98, (cnrotation *)(a2 + 200), v72);
  cnrotation::Cat(v102, (cnrotation *)(a4 + 200), (const cnrotation::CNRotation *)v98, v73);
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v102);
  v95 = 0x300000003;
  v93 = off_1003EEAC0;
  v94 = xmmword_1003827C0;
  v96 = v97;
  sub_1000E5948((uint64_t)v92, a2 + 296, (uint64_t)&v93);
  cnrotation::Inv(v85, (cnrotation *)v102, v74);
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v85);
  v99 = 0x300000003;
  *(_QWORD *)v98 = off_1003EEAC0;
  *(_OWORD *)&v98[8] = xmmword_1003827C0;
  v100 = v101;
  sub_1000E5948((uint64_t)&v93, (uint64_t)&v86, (uint64_t)v98);
  if ((cntransformation::CNRigidTransformation::SetPrr(a4 + 200, v98, v75) & 1) == 0)
    return 0;
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v102);
  v99 = 0x300000003;
  *(_QWORD *)v98 = off_1003EEAC0;
  *(_OWORD *)&v98[8] = xmmword_1003827C0;
  v100 = v101;
  sub_1000E5948((uint64_t)&v93, a2 + 520, (uint64_t)v98);
  cntransformation::CNRigidTransformation::SetPrp(a4 + 200, v98);
  v99 = 0x300000003;
  *(_QWORD *)v98 = off_1003EEAC0;
  *(_OWORD *)&v98[8] = xmmword_1003827C0;
  memset(v101, 0, sizeof(v101));
  v100 = v101;
  if (!sub_1000F6658(a2 + 408, (uint64_t)v98))
    return 0;
  v95 = 0x300000003;
  v93 = off_1003EEAC0;
  v94 = xmmword_1003827C0;
  memset(v97, 0, sizeof(v97));
  v96 = v97;
  if (!sub_1000F6658((uint64_t)(a3 + 51), (uint64_t)&v93))
    return 0;
  sub_1000F68C4((uint64_t)v98, (uint64_t)&v86, v81);
  sub_1000F68C4((uint64_t)&v93, (uint64_t)v85, v82);
  sub_1000F6814((uint64_t)&v86, (uint64_t)v85, (uint64_t)v92);
  v88 = 0x300000003;
  v86 = off_1003EEAC0;
  v87 = xmmword_1003827C0;
  memset(v90, 0, sizeof(v90));
  v89 = v90;
  v91 = 0;
  result = sub_1000F6658((uint64_t)v92, (uint64_t)&v86);
  if (!result)
    return result;
  if ((cntransformation::CNRigidTransformation::SetPpp(a4 + 200, &v86, v77, v78) & 1) == 0)
    return 0;
  result = 1;
  if (*(_BYTE *)(a2 + 1081) && *((_BYTE *)a3 + 1081))
  {
    sub_1000F65BC(a2 + 672, (uint64_t)v84, v81);
    sub_1000F65BC((uint64_t)(a3 + 84), (uint64_t)v83, v82);
    sub_1000F6508((uint64_t)v84, (uint64_t)v83, (uint64_t)v85);
    v79 = a4 + 640;
    sub_1000EAFDC(v79, (uint64_t)v85);
    cnrotation::CNRotation::CNRotation((cnrotation::CNRotation *)v84);
    if (!cnrotation::Slerp((cnrotation *)(a2 + 640), (const cnrotation::CNRotation *)(a3 + 80), (const cnrotation::CNRotation *)v84, v82.f64[0], (cnrotation::CNRotation *)8, v80))
    {
      cnrotation::CNRotation::operator=(v79, v84);
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_1000F5560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  cntransformation *v7;
  const cntransformation::CNRigidTransformation *v13;
  const cntransformation::CNRigidTransformation *v14;
  const cntransformation::CNRigidTransformation *v15;
  const cntransformation::CNRigidTransformation *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  __int128 v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 *v60;
  _OWORD *v61;
  __int128 v62;
  __int128 *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 *v74;
  _OWORD *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  double v85;
  double v86;
  _OWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 *v90;
  _OWORD *v91;
  __int128 v92;
  const cntransformation::CNRigidTransformation *v93;
  uint64_t *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  double *v98;
  double *v99;
  double *v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t *v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  _QWORD *v116;
  uint64_t v117;
  __int128 *v118;
  _OWORD *v119;
  __int128 v120;
  const cntransformation::CNRigidTransformation *v121;
  _BYTE *v122;
  __int128 *v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  _OWORD *v135;
  __int128 v136;
  const cntransformation::CNRigidTransformation *v137;
  uint64_t (**v139)();
  __int128 v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  _OWORD v144[2];
  void (**v145)(char **);
  unsigned __int8 v146;
  uint64_t (**v147)();
  __int128 v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t (**v152)();
  __int128 v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[37];
  _OWORD v160[2];
  uint64_t (**v161)();
  __int128 v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD v165[2];
  __int128 v166;
  uint64_t v167;
  _BYTE v168[24];
  uint64_t v169;
  _BYTE v170[440];
  _QWORD v171[55];
  double v172;
  double v173;
  unint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD v177[2];
  int v178;
  _OWORD *v179;
  _BYTE buf[24];
  uint64_t v181;
  __int128 *v182;
  __int128 v183;
  _QWORD *v184;

  v6 = a2 + 640;
  v7 = (cntransformation *)(a2 + 200);
  cntransformation::Cat(v171, (cntransformation *)(a2 + 640), (const cntransformation::CNRigidTransformation *)(a2 + 200), (const cntransformation::CNRigidTransformation *)a3);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v170);
  v163 = 0x300000003;
  v161 = off_1003EEAC0;
  v162 = xmmword_1003827C0;
  v165[0] = 0;
  v167 = 0;
  *(_OWORD *)&v168[8] = 0u;
  v166 = 0u;
  v169 = 0;
  v164 = v165;
  v165[1] = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)v168 = _Q0;
  sub_1000EBFA4(v160, (uint64_t)&v161);
  cnrotation::CNRotation::operator=(v170, v160);
  cntransformation::Cat(v159, (cntransformation *)(a3 + 200), (const cntransformation::CNRigidTransformation *)v170, v13);
  cntransformation::Cat(buf, (cntransformation *)v159, (const cntransformation::CNRigidTransformation *)v171, v14);
  sub_1000EA3D4(a1 + 2240, (uint64_t)buf);
  *(_BYTE *)(a1 + 26) = 1;
  sub_1000F1B20((cnrotation::CNRotation *)buf, v6);
  cntransformation::Inv(&v172, (cntransformation *)buf, v15);
  if ((_DWORD **)(a1 + 4064) != &v176)
  {
    v17 = v177[0];
    v18 = v177[1];
    *(_DWORD *)(a1 + 4072) = v177[0];
    *(_DWORD *)(a1 + 4076) = v18;
    v19 = (v18 * v17);
    *(_DWORD *)(a1 + 4080) = v19;
    *(_DWORD *)(a1 + 4084) = v17;
    if (v178 > 3)
    {
      v32 = (v178 - 2);
      v33 = *(_OWORD **)(a1 + 4096);
      v34 = v179;
      v35 = (v178 - 1) >> 1;
      v36 = v179;
      v37 = v33;
      do
      {
        v38 = *v36++;
        *v37++ = v38;
        --v35;
      }
      while (v35);
      *(_OWORD *)((char *)v33 + 8 * v32) = *(_OWORD *)((char *)v34 + 8 * v32);
    }
    else if ((int)v19 >= 1)
    {
      v20 = 0;
      v21 = v179;
      v22 = *(_QWORD *)(a1 + 4096);
      if (v19 < 4)
        goto LABEL_9;
      if ((unint64_t)(v22 - (_QWORD)v179) < 0x20)
        goto LABEL_9;
      v20 = v19 & 0x7FFFFFFC;
      v23 = v179 + 1;
      v24 = (_OWORD *)(v22 + 16);
      v25 = v19 & 0xFFFFFFFC;
      do
      {
        v26 = *v23;
        *(v24 - 1) = *(v23 - 1);
        *v24 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v20 != v19)
      {
LABEL_9:
        v27 = v19 - v20;
        v28 = 8 * v20;
        v29 = (_QWORD *)(v22 + v28);
        v30 = (uint64_t *)((char *)v21 + v28);
        do
        {
          v31 = *v30++;
          *v29++ = v31;
          --v27;
        }
        while (v27);
      }
    }
  }
  v154 = 0x100000003;
  v152 = off_1003EEBE8;
  v153 = xmmword_100382850;
  v155 = &v156;
  v156 = 0;
  v158 = 0;
  v157 = 0;
  v183 = xmmword_100382850;
  v39 = v184;
  *v184 = 0;
  v39[1] = v157;
  v39[2] = v158;
  cntransformation::Cat(&v145, (cntransformation *)v159, (const cntransformation::CNRigidTransformation *)buf, v16);
  sub_1000EA3D4(a1 + 3120, (uint64_t)&v145);
  *(_BYTE *)(a1 + 28) = 1;
  v40 = *(_DWORD *)(a1 + 2280);
  v41 = *(_DWORD *)(a1 + 2284);
  *(_DWORD *)(a1 + 4008) = v40;
  *(_DWORD *)(a1 + 4012) = v41;
  v42 = (v41 * v40);
  *(_DWORD *)(a1 + 4016) = v42;
  *(_DWORD *)(a1 + 4020) = v40;
  v43 = *(_DWORD *)(a1 + 2288);
  if (v43 > 3)
  {
    v56 = (v43 - 2);
    v57 = *(_OWORD **)(a1 + 4032);
    v58 = *(__int128 **)(a1 + 2304);
    v59 = (v43 - 1) >> 1;
    v60 = v58;
    v61 = v57;
    do
    {
      v62 = *v60++;
      *v61++ = v62;
      --v59;
    }
    while (v59);
    *(_OWORD *)((char *)v57 + 8 * v56) = *(__int128 *)((char *)v58 + 8 * v56);
  }
  else if ((int)v42 >= 1)
  {
    v44 = 0;
    v45 = *(_QWORD *)(a1 + 2304);
    v46 = *(_QWORD *)(a1 + 4032);
    if (v42 < 4)
      goto LABEL_22;
    if ((unint64_t)(v46 - v45) < 0x20)
      goto LABEL_22;
    v44 = v42 & 0x7FFFFFFC;
    v47 = (__int128 *)(v45 + 16);
    v48 = (_OWORD *)(v46 + 16);
    v49 = v42 & 0xFFFFFFFC;
    do
    {
      v50 = *v47;
      *(v48 - 1) = *(v47 - 1);
      *v48 = v50;
      v47 += 2;
      v48 += 2;
      v49 -= 4;
    }
    while (v49);
    if (v44 != v42)
    {
LABEL_22:
      v51 = v42 - v44;
      v52 = 8 * v44;
      v53 = (_QWORD *)(v46 + v52);
      v54 = (uint64_t *)(v45 + v52);
      do
      {
        v55 = *v54++;
        *v53++ = v55;
        --v51;
      }
      while (v51);
    }
  }
  *(_BYTE *)(a1 + 24) = 1;
  v63 = *(__int128 **)(a1 + 2304);
  v64 = *((_QWORD *)v63 + 2);
  v149 = 0x300000003;
  v147 = off_1003EEAC0;
  v148 = xmmword_1003827C0;
  v150 = &v151;
  v146 = 0;
  v65 = *v63;
  v173 = 0.0;
  v172 = 0.0;
  v174 = 0;
  *(_OWORD *)buf = v65;
  *(_QWORD *)&buf[16] = v64;
  if (!cnnavigation::ECEFToLLA(buf, 1, &v172))
    ((void (*)(void (***)(char **), double, double))v145[2])(&v145, v172, v173);
  v66 = v146;
  if (v146)
  {
    if (&v147 != (uint64_t (***)())(a1 + 4128))
    {
      v68 = v148;
      v67 = DWORD1(v148);
      *(_DWORD *)(a1 + 4136) = v148;
      *(_DWORD *)(a1 + 4140) = v67;
      v69 = (v67 * v68);
      *(_DWORD *)(a1 + 4144) = v69;
      *(_DWORD *)(a1 + 4148) = v68;
      v70 = DWORD2(v148);
      if (SDWORD2(v148) > 3)
      {
        v87 = *(_OWORD **)(a1 + 4160);
        v88 = v150;
        v89 = (DWORD2(v148) - 1) >> 1;
        v90 = (__int128 *)v150;
        v91 = v87;
        do
        {
          v92 = *v90++;
          *v91++ = v92;
          --v89;
        }
        while (v89);
        *(_OWORD *)((char *)v87 + 8 * (v70 - 2)) = *(_OWORD *)&v88[v70 - 2];
      }
      else if ((int)v69 >= 1)
      {
        v71 = 0;
        v72 = v150;
        v73 = *(_QWORD *)(a1 + 4160);
        if (v69 < 4)
          goto LABEL_39;
        if ((unint64_t)(v73 - (_QWORD)v150) < 0x20)
          goto LABEL_39;
        v71 = v69 & 0x7FFFFFFC;
        v74 = (__int128 *)(v150 + 2);
        v75 = (_OWORD *)(v73 + 16);
        v76 = v69 & 0xFFFFFFFC;
        do
        {
          v77 = *v74;
          *(v75 - 1) = *(v74 - 1);
          *v75 = v77;
          v74 += 2;
          v75 += 2;
          v76 -= 4;
        }
        while (v76);
        if (v71 != v69)
        {
LABEL_39:
          v78 = v69 - v71;
          v79 = v71;
          v80 = (_QWORD *)(v73 + v79 * 8);
          v81 = &v72[v79];
          do
          {
            v82 = *v81++;
            *v80++ = v82;
            --v78;
          }
          while (v78);
        }
      }
    }
    *(_BYTE *)(a1 + 25) = 1;
    v154 = 0x100000003;
    v152 = off_1003EEBE8;
    v153 = xmmword_100382850;
    v155 = &v156;
    sub_1000E5948(a1 + 4128, a1 + 2272, (uint64_t)&v152);
    sub_1000EBFA4(v144, a1 + 4128);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)buf);
    cnrotation::CNRotation::operator=(buf, v144);
    v141 = 0x100000003;
    v139 = off_1003EEBE8;
    v140 = xmmword_100382850;
    v142 = &v143;
    sub_1000E5948(a1 + 4128, a1 + 2272, (uint64_t)&v139);
    v175 = 0x100000003;
    v94 = (uint64_t *)v177;
    v176 = v177;
    v95 = v153;
    v96 = DWORD1(v153);
    v173 = *(double *)&v153;
    v97 = (DWORD1(v153) * v153);
    v174 = __PAIR64__(v153, v97);
    if ((int)v97 > 3)
    {
      v107 = v155;
      v108 = v142;
      v109 = (v97 - 1) >> 1;
      v110 = (float64x2_t *)v155;
      v111 = (float64x2_t *)v142;
      v112 = (float64x2_t *)v177;
      do
      {
        v113 = *v110++;
        v114 = v113;
        v115 = *v111++;
        *v112++ = vsubq_f64(v114, v115);
        --v109;
      }
      while (v109);
      *(float64x2_t *)&v177[2 * (v97 - 2)] = vsubq_f64(*(float64x2_t *)&v107[(v97 - 2)], *(float64x2_t *)&v108[(v97 - 2)]);
      *(_QWORD *)&v183 = __PAIR64__(v96, v95);
      *((_QWORD *)&v183 + 1) = __PAIR64__(v95, v97);
      v116 = v184;
      v117 = (v97 - 1) >> 1;
      v118 = (__int128 *)v177;
      v119 = v184;
      do
      {
        v120 = *v118++;
        *v119++ = v120;
        --v117;
      }
      while (v117);
      *(_OWORD *)&v116[(v97 - 2)] = *(_OWORD *)&v177[2 * (v97 - 2)];
    }
    else if ((int)v97 <= 0)
    {
      *(_QWORD *)&v183 = v153;
      *((_QWORD *)&v183 + 1) = __PAIR64__(v153, v97);
    }
    else
    {
      v98 = (double *)v155;
      v99 = (double *)v142;
      v100 = (double *)v177;
      v101 = (DWORD1(v153) * v153);
      do
      {
        v102 = *v98++;
        v103 = v102;
        v104 = *v99++;
        *v100++ = v103 - v104;
        --v101;
      }
      while (v101);
      *(_QWORD *)&v183 = __PAIR64__(v96, v95);
      *((_QWORD *)&v183 + 1) = __PAIR64__(v95, v97);
      v105 = v184;
      do
      {
        v106 = *v94++;
        *v105++ = v106;
        --v97;
      }
      while (v97);
    }
    cntransformation::Cat(&v172, (cntransformation *)buf, (const cntransformation::CNRigidTransformation *)(a1 + 2240), v93);
    sub_1000EA3D4(a1 + 2680, (uint64_t)&v172);
    *(_BYTE *)(a1 + 27) = 1;
    cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v145);
    v122 = (_BYTE *)(a2 + 232);
    v181 = 0x100000003;
    v123 = &v183;
    v182 = &v183;
    v124 = *(_DWORD *)(a2 + 240);
    v125 = *(_DWORD *)(a2 + 244);
    *(_DWORD *)&buf[8] = v124;
    *(_DWORD *)&buf[12] = v125;
    v126 = (v125 * v124);
    *(_DWORD *)&buf[16] = v126;
    *(_DWORD *)&buf[20] = v124;
    if ((int)v126 > 3)
    {
      v130 = 0;
      v128 = *(_QWORD **)(a2 + 264);
      v131 = *(_QWORD *)(a1 + 4096);
      do
      {
        *(&v183 + v130) = (__int128)vsubq_f64(*(float64x2_t *)&v128[2 * v130], *(float64x2_t *)(v131 + 16 * v130));
        ++v130;
      }
      while ((v126 - 1) >> 1 != v130);
      *(__int128 *)((char *)&v183 + 8 * (v126 - 2)) = (__int128)vsubq_f64(*(float64x2_t *)&v128[(v126 - 2)], *(float64x2_t *)(v131+ 8* (v126 - 2)));
      if (v122 == buf)
        goto LABEL_79;
    }
    else
    {
      if ((int)v126 < 1)
      {
        if (v122 != buf)
        {
          *(_DWORD *)(a2 + 240) = v124;
          *(_DWORD *)(a2 + 244) = v125;
          *(_DWORD *)(a2 + 248) = v126;
          *(_DWORD *)(a2 + 252) = v124;
        }
        goto LABEL_79;
      }
      v127 = 0;
      v128 = *(_QWORD **)(a2 + 264);
      v129 = *(_QWORD *)(a1 + 4096);
      do
      {
        *(double *)((char *)&v183 + v127 * 8) = *(double *)&v128[v127] - *(double *)(v129 + v127 * 8);
        ++v127;
      }
      while (v125 * v124 != v127);
      if (v122 == buf)
      {
LABEL_79:
        cntransformation::Inv(buf, v7, v121);
        cntransformation::Cat(&v172, (cntransformation *)(a1 + 2680), (const cntransformation::CNRigidTransformation *)buf, v137);
        sub_1000EA3D4(a1 + 3560, (uint64_t)&v172);
        return v66 != 0;
      }
    }
    *(_DWORD *)(a2 + 240) = v124;
    *(_DWORD *)(a2 + 244) = v125;
    *(_DWORD *)(a2 + 248) = v126;
    *(_DWORD *)(a2 + 252) = v124;
    if ((int)v126 > 3)
    {
      v133 = (v126 - 1) >> 1;
      v134 = &v183;
      v135 = v128;
      do
      {
        v136 = *v134++;
        *v135++ = v136;
        --v133;
      }
      while (v133);
      *(_OWORD *)&v128[(v126 - 2)] = *(__int128 *)((char *)&v183 + 8 * (v126 - 2));
    }
    else
    {
      do
      {
        v132 = *(_QWORD *)v123;
        v123 = (__int128 *)((char *)v123 + 8);
        *v128++ = v132;
        --v126;
      }
      while (v126);
    }
    goto LABEL_79;
  }
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003EF868);
    v83 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_45;
    goto LABEL_44;
  }
  v83 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_44:
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v85 = *(double *)(a3 + 112) + (double)*(uint64_t *)(a3 + 104);
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v86 + (double)v84;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v85;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "vio-vl-sync, vl_evt_t, %{public}.3lf, vl_app_t, %{public}.3lf, VLF position Jecef2enu computation failed.", buf, 0x16u);
  }
LABEL_45:
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v145);
  return v66 != 0;
}

void sub_1000F5ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  cnnavigation::details::JacobianBase::~JacobianBase((cnnavigation::details::JacobianBase *)&a26);
  _Unwind_Resume(a1);
}

void sub_1000F5FB0(__n128 *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __n128 v17;
  __n128 *v18;
  uint64_t v19;
  double v20;
  const cntransformation::CNRigidTransformation *v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  _BYTE v40[360];
  uint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE v47[24];
  uint64_t v48;
  int v49;
  _QWORD *v50;
  __n128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  _BYTE v65[40];
  unint64_t v66;
  int v67;
  int v68;
  _QWORD *v69;
  _WORD v70[221];
  char v71;

  if (!a1[1].n128_u8[12])
    goto LABEL_15;
  if (a1[71].n128_u8[0])
  {
    v52.n128_u64[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v52.n128_u64[1] = v6;
    if (!a1[71].n128_u8[0])
      sub_1000E7B58();
    v41 = (*(uint64_t (**)(__n128 *))(a1[2].n128_u64[0] + 16))(a1 + 2);
    v42 = v7;
    v8 = CNTimeSpan::operator-(&v52, &v41);
    if (v9 + (double)v8 < a1[1].n128_f64[0])
      goto LABEL_15;
  }
  v10 = *(_OWORD *)(a2 + 248);
  v64 = *(_BYTE *)(a2 + 296);
  v11 = *(_OWORD *)(a2 + 184);
  v12 = *(_OWORD *)(a2 + 216);
  v58 = *(_OWORD *)(a2 + 200);
  v59 = v12;
  v60 = *(_OWORD *)(a2 + 232);
  v61 = v10;
  v13 = *(_OWORD *)(a2 + 120);
  v14 = *(_OWORD *)(a2 + 152);
  v54 = *(_OWORD *)(a2 + 136);
  v55 = v14;
  v56 = *(_OWORD *)(a2 + 168);
  v57 = v11;
  v52 = *(__n128 *)(a2 + 104);
  v53 = v13;
  v15 = *(_OWORD *)(a2 + 280);
  v62 = *(_OWORD *)(a2 + 264);
  v63 = v15;
  sub_1000F1B20((cnrotation::CNRotation *)v65, a2 + 304);
  sub_1000F1B20((cnrotation::CNRotation *)v70, a2 + 744);
  v70[220] = *(_WORD *)(a2 + 1184);
  v71 = *(_BYTE *)(a2 + 1186);
  v17 = v52;
  v51 = v52;
  v18 = a1 + 266;
  if (a1[266].n128_u8[0])
  {
    v19 = CNTimeSpan::operator-(&v51, &a1[265]);
    v17.n128_f64[0] = v20 + (double)v19 + (v20 + (double)v19) * 0.05;
    v16.n128_u64[0] = a1[1].n128_u64[0];
    if (v17.n128_f64[0] <= v16.n128_f64[0])
      goto LABEL_15;
  }
  if ((sub_1000F45D4((uint64_t)&v52, v17, v16) & 1) == 0)
  {
LABEL_15:
    *a3 = 0;
    a3[360] = 0;
  }
  else
  {
    v45 = 0x100000003;
    v22 = (uint64_t *)v47;
    v46 = v47;
    v23 = v66;
    v24 = HIDWORD(v66);
    v42 = v66;
    v25 = (HIDWORD(v66) * v66);
    v43 = v25;
    v44 = v66;
    if ((int)v25 > 3)
    {
      v30 = 0;
      v31 = v69;
      v32 = a1[256].n128_i64[0];
      do
      {
        *(float64x2_t *)&v47[16 * v30] = vsubq_f64((float64x2_t)v31[v30], *(float64x2_t *)(v32 + 16 * v30));
        ++v30;
      }
      while ((v25 - 1) >> 1 != v30);
      *(float64x2_t *)&v47[8 * (v25 - 2)] = vsubq_f64(*(float64x2_t *)((char *)v31 + 8 * (v25 - 2)), *(float64x2_t *)(v32 + 8 * (v25 - 2)));
      v66 = __PAIR64__(v24, v23);
      v67 = v25;
      v68 = v23;
      v33 = (v25 - 1) >> 1;
      v34 = (__int128 *)v47;
      v35 = v31;
      do
      {
        v36 = *v34++;
        *v35++ = v36;
        --v33;
      }
      while (v33);
      *(_OWORD *)((char *)v31 + 8 * (v25 - 2)) = *(_OWORD *)&v47[8 * (v25 - 2)];
    }
    else if ((int)v25 <= 0)
    {
      v67 = HIDWORD(v66) * v66;
      v68 = v66;
    }
    else
    {
      v26 = 0;
      v27 = v69;
      v28 = a1[256].n128_i64[0];
      do
      {
        *(double *)&v47[v26 * 8] = *(double *)&v27[v26] - *(double *)(v28 + v26 * 8);
        ++v26;
      }
      while (v25 != v26);
      v66 = __PAIR64__(v24, v23);
      v67 = v25;
      v68 = v23;
      do
      {
        v29 = *v22++;
        *v27++ = v29;
        --v25;
      }
      while (v25);
    }
    cntransformation::Cat(&v41, (cntransformation *)&a1[195], (const cntransformation::CNRigidTransformation *)v65, v21);
    memset(v40, 0, sizeof(v40));
    sub_1000E4C04((int64x2_t *)v40);
    *(_OWORD *)&v40[24] = v53;
    *(__n128 *)&v40[8] = v52;
    *(_OWORD *)&v40[88] = v57;
    *(_OWORD *)&v40[72] = v56;
    *(_OWORD *)&v40[56] = v55;
    *(_OWORD *)&v40[40] = v54;
    *(_OWORD *)&v40[120] = v53;
    *(__n128 *)&v40[104] = v52;
    *(_OWORD *)&v40[184] = v57;
    *(_OWORD *)&v40[168] = v56;
    *(_OWORD *)&v40[152] = v55;
    *(_OWORD *)&v40[136] = v54;
    v40[200] = 15;
    *(_OWORD *)&v40[288] = *(_OWORD *)v48;
    *(_QWORD *)&v40[304] = *(_QWORD *)(v48 + 16);
    *(_QWORD *)&v40[312] = *v50;
    v37 = &v50[v49];
    *(_QWORD *)&v40[320] = *v37;
    *(_QWORD *)&v40[328] = v50[2 * v49];
    *(_QWORD *)&v40[336] = v37[1];
    v38 = &v50[2 * v49];
    *(_QWORD *)&v40[344] = v38[1];
    *(_QWORD *)&v40[352] = v38[2];
    v40[280] = 1;
    if (sub_1000E5004((uint64_t)v40))
      sub_1000E5490((uint64_t)v40);
    v39 = v18->n128_u8[0];
    a1[265] = v51;
    if (!v39)
      v18->n128_u8[0] = 1;
    *(_QWORD *)a3 = &off_1003EF108;
    memcpy(a3 + 8, &v40[8], 0x160uLL);
    a3[360] = 1;
    cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)v40);
  }
}

void sub_1000F63F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&a9);
  _Unwind_Resume(a1);
}

double sub_1000F6408(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD *v7;
  __int128 v8;
  double result;
  _OWORD v10[2];

  cnrotation::CNRotation::CNRotation((cnrotation::CNRotation *)v10);
  cnrotation::CNRotation::operator=(a1, v10);
  *(_OWORD *)(a1 + 40) = xmmword_100382850;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)v2 = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  memset(v10, 0, 24);
  *(_OWORD *)(a1 + 104) = xmmword_1003827C0;
  v3 = *(_OWORD **)(a1 + 128);
  *v3 = 0u;
  v3[1] = 0u;
  v4 = v10[0];
  v3[2] = 0u;
  v3[3] = v4;
  *(_OWORD *)((char *)v3 + 56) = *(_OWORD *)((char *)v10 + 8);
  memset(v10, 0, 24);
  *(_OWORD *)(a1 + 216) = xmmword_1003827C0;
  v5 = *(_OWORD **)(a1 + 240);
  *v5 = 0u;
  v5[1] = 0u;
  v6 = v10[0];
  v5[2] = 0u;
  v5[3] = v6;
  *(_OWORD *)((char *)v5 + 56) = *(_OWORD *)((char *)v10 + 8);
  memset(v10, 0, 24);
  *(_OWORD *)(a1 + 328) = xmmword_1003827C0;
  v7 = *(_OWORD **)(a1 + 352);
  *v7 = 0u;
  v7[1] = 0u;
  v8 = v10[0];
  v7[2] = 0u;
  v7[3] = v8;
  result = *((double *)v10 + 1);
  *(_OWORD *)((char *)v7 + 56) = *(_OWORD *)((char *)v10 + 8);
  *(_BYTE *)(a1 + 432) = 0;
  return result;
}

float64x2_t sub_1000F6508@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t result;
  float64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;

  *(_QWORD *)&result.f64[0] = 0x100000003;
  *(_QWORD *)(a3 + 24) = 0x100000003;
  *(_QWORD *)a3 = off_1003EEBE8;
  v4 = (float64_t *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  if ((int)v7 > 3)
  {
    v13 = (v7 - 2);
    v14 = *(float64x2_t **)(a1 + 32);
    v15 = *(float64x2_t **)(a2 + 32);
    v16 = (float64x2_t *)((char *)v15 + 8 * v13);
    v17 = (v7 - 1) >> 1;
    v18 = v14;
    v19 = (float64x2_t *)v4;
    do
    {
      v20 = *v18++;
      v21 = v20;
      v22 = *v15++;
      *v19++ = vaddq_f64(v21, v22);
      --v17;
    }
    while (v17);
    result = vaddq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v16);
    *(float64x2_t *)&v4[v13] = result;
  }
  else if ((int)v7 >= 1)
  {
    v8 = *(double **)(a1 + 32);
    v9 = *(double **)(a2 + 32);
    do
    {
      v10 = *v8++;
      v11 = v10;
      v12 = *v9++;
      result.f64[0] = v11 + v12;
      *v4++ = result.f64[0];
      --v7;
    }
    while (v7);
  }
  return result;
}

float64x2_t sub_1000F65BC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>)
{
  double *v3;
  int v4;
  int v5;
  uint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;

  *(_QWORD *)(a2 + 24) = 0x100000003;
  *(_QWORD *)a2 = off_1003EEBE8;
  v3 = (double *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v4;
  v6 = (v4 * v5);
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v5;
  if ((int)v6 > 3)
  {
    v9 = (v6 - 2);
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = (float64x2_t *)((char *)v10 + 8 * v9);
    v12 = (v6 - 1) >> 1;
    v13 = (float64x2_t *)v3;
    do
    {
      v14 = *v10++;
      *v13++ = vmulq_n_f64(v14, result.f64[0]);
      --v12;
    }
    while (v12);
    result = vmulq_n_f64(*v11, result.f64[0]);
    *(float64x2_t *)&v3[v9] = result;
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(double **)(a1 + 32);
    do
    {
      v8 = *v7++;
      *v3++ = v8 * result.f64[0];
      --v6;
    }
    while (v6);
  }
  return result;
}

BOOL sub_1000F6658(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL8 result;
  double *v5;
  double v6;
  double *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint8_t v17[16];

  if (*(_DWORD *)(a1 + 8) == 3 && *(_DWORD *)(a1 + 12) == 3)
  {
    *(_OWORD *)(a2 + 8) = xmmword_1003827C0;
    v5 = *(double **)(a1 + 32);
    v6 = sqrt(*v5);
    v7 = *(double **)(a2 + 32);
    *v7 = v6;
    v8 = *(_DWORD *)(a1 + 20);
    v9 = sqrt(v5[v8 + 1]);
    v7[4] = v9;
    v10 = sqrt(v5[2 * v8 + 2]);
    v7[8] = v10;
    if (fabs(v6 * v9) >= 2.22044605e-16)
    {
      v11 = v5[1] / (v6 * v9);
      v7[1] = v11;
      v12 = v6 * v10;
      if (fabs(v12) >= 2.22044605e-16)
      {
        v13 = v5[2] / v12;
        v7[2] = v13;
        v14 = v9 * v10;
        if (fabs(v14) >= 2.22044605e-16)
        {
          v15 = v5[v8 + 2];
          v7[3] = v11;
          v16 = v15 / v14;
          v7[5] = v16;
          v7[6] = v13;
          v7[7] = v16;
          return 1;
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (qword_100417ED8 == -1)
    {
      v3 = qword_100417EE0;
      result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EF868);
      v3 = qword_100417EE0;
      result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Input variance-covariance matrix has wrong dimensions, expected 3x3", v17, 2u);
    return 0;
  }
}

float64x2_t sub_1000F6814@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t result;
  float64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t *v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;

  *(_QWORD *)&result.f64[0] = 0x300000003;
  *(_QWORD *)(a3 + 24) = 0x300000003;
  *(_QWORD *)a3 = off_1003EEAC0;
  v4 = (float64_t *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = a3 + 40;
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v5;
  v7 = (v5 * v6);
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  if ((int)v7 > 3)
  {
    v13 = (v7 - 2);
    v14 = *(float64x2_t **)(a1 + 32);
    v15 = *(float64x2_t **)(a2 + 32);
    v16 = (float64x2_t *)((char *)v15 + 8 * v13);
    v17 = (v7 - 1) >> 1;
    v18 = v14;
    v19 = (float64x2_t *)v4;
    do
    {
      v20 = *v18++;
      v21 = v20;
      v22 = *v15++;
      *v19++ = vaddq_f64(v21, v22);
      --v17;
    }
    while (v17);
    result = vaddq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v16);
    *(float64x2_t *)&v4[v13] = result;
  }
  else if ((int)v7 >= 1)
  {
    v8 = *(double **)(a1 + 32);
    v9 = *(double **)(a2 + 32);
    do
    {
      v10 = *v8++;
      v11 = v10;
      v12 = *v9++;
      result.f64[0] = v11 + v12;
      *v4++ = result.f64[0];
      --v7;
    }
    while (v7);
  }
  return result;
}

float64x2_t sub_1000F68C4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>)
{
  double *v3;
  int v4;
  int v5;
  uint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;

  *(_QWORD *)(a2 + 24) = 0x300000003;
  *(_QWORD *)a2 = off_1003EEAC0;
  v3 = (double *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = a2 + 40;
  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v4;
  v6 = (v4 * v5);
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v5;
  if ((int)v6 > 3)
  {
    v9 = (v6 - 2);
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = (float64x2_t *)((char *)v10 + 8 * v9);
    v12 = (v6 - 1) >> 1;
    v13 = (float64x2_t *)v3;
    do
    {
      v14 = *v10++;
      *v13++ = vmulq_n_f64(v14, result.f64[0]);
      --v12;
    }
    while (v12);
    result = vmulq_n_f64(*v11, result.f64[0]);
    *(float64x2_t *)&v3[v9] = result;
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(double **)(a1 + 32);
    do
    {
      v8 = *v7++;
      *v3++ = v8 * result.f64[0];
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1000F695C(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1000F6988(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = off_1003EF898;
  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  operator delete();
}

uint64_t sub_1000F6A58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 208))(*(_QWORD *)(a1 + 64));
}

void sub_1000F6A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  _QWORD *i;
  _QWORD *v8;
  unsigned __int8 v9[8];
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 216))(*(_QWORD *)(a1 + 64));
  if (*(_BYTE *)(a1 + 40))
  {
    sub_1000E4784((uint64_t)v9, a2, a3, (_QWORD *)(a1 + 80));
    if (sub_1000E48C0(v9))
    {
      v6 = (std::mutex *)(a1 + 96);
      std::mutex::lock((std::mutex *)(a1 + 96));
      v8 = *(_QWORD **)(a1 + 160);
      for (i = *(_QWORD **)(a1 + 168); v8 != i; ++v8)
        (*(void (**)(_QWORD, _QWORD, unsigned __int8 *))(*(_QWORD *)*v8 + 16))(*v8, *(_QWORD *)(a2 + 40), v9);
      std::mutex::unlock(v6);
    }
    nullsub_22(&v11);
    cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&v10);
  }
}

void sub_1000F6B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  nullsub_22(&a57);
  cnframework::TimestampedEvent::~TimestampedEvent((cnframework::TimestampedEvent *)&a11);
  _Unwind_Resume(a1);
}

void sub_1000F6B68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EF9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F6B78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EF9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000F6BA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFA08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F6BB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFA08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000F6BE8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000F6BFC()
{
  operator delete();
}

void sub_1000F6C14(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void sub_1000F6C24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F6C34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1000F6C64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000F6C74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003EFAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000F6CA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000F6CB8()
{
  operator delete();
}

uint64_t sub_1000F6CDC()
{
  return 0;
}

void sub_1000F6CE4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1000F6CF4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000F6D50()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

char *sub_1000F6DAC(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  __int128 *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  size_t v36;
  char *v37;

  v5 = *(char **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(__int128 **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 > (v11 - (uint64_t)v12) >> 4)
  {
    v13 = a5 + (((char *)v12 - v5) >> 4);
    if (v13 >> 60)
      sub_1000D02C0();
    v14 = v11 - (_QWORD)v5;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_1000CDEB8();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[16 * (v6 >> 4)];
    v27 = 16 * a5;
    v28 = &v26[16 * a5];
    v29 = v26;
    do
    {
      v30 = *(_OWORD *)v9;
      v9 += 16;
      *(_OWORD *)v29 = v30;
      v29 += 16;
      v27 -= 16;
    }
    while (v27);
    v31 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      v33 = v26;
      v35 = &v17[16 * v16];
      v36 = (char *)v12 - v7;
      if (v12 == (__int128 *)v7)
        goto LABEL_33;
    }
    else
    {
      v32 = v7;
      v33 = v26;
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v32 - 1);
        v33 -= 16;
        v32 -= 16;
      }
      while (v32 != v31);
      v34 = *(_BYTE **)(a1 + 8);
      v35 = &v17[16 * v16];
      v36 = v34 - v7;
      if (v34 == v7)
        goto LABEL_33;
    }
    memmove(v28, v7, v36);
LABEL_33:
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v33;
    *(_QWORD *)(a1 + 8) = &v28[v36];
    *(_QWORD *)(a1 + 16) = v35;
    if (v37)
      operator delete(v37);
    return v26;
  }
  v18 = ((char *)v12 - v7) >> 4;
  if (v18 >= a5)
  {
    v19 = &__src[16 * a5];
    v21 = *(char **)(a1 + 8);
    v22 = &v7[16 * a5];
    v23 = &v12[-a5];
    v24 = v21;
    if (v23 >= v12)
    {
LABEL_21:
      *(_QWORD *)(a1 + 8) = v24;
      if (v21 != v22)
        memmove(&v21[-16 * ((v21 - v22) >> 4)], v7, v21 - v22);
      if (v19 != v9)
        memmove(v7, v9, v19 - v9);
      return v7;
    }
LABEL_19:
    v24 = v21;
    do
    {
      v25 = *v23++;
      *(_OWORD *)v24 = v25;
      v24 += 16;
    }
    while (v23 < v12);
    goto LABEL_21;
  }
  v19 = &__src[16 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(*(void **)(a1 + 8), &__src[16 * v18], a4 - v19);
  v21 = (char *)v12 + v20;
  *(_QWORD *)(a1 + 8) = (char *)v12 + v20;
  if ((char *)v12 - v7 >= 1)
  {
    v22 = &v7[16 * a5];
    v23 = (__int128 *)&v21[-16 * a5];
    v24 = (char *)v12 + v20;
    if (v23 >= v12)
      goto LABEL_21;
    goto LABEL_19;
  }
  return v7;
}

long double sub_1000F6FDC(double a1, double a2)
{
  return atan(a1 / (a2 * -0.67418914 + a2 * -0.67418914)) / 3.14159265 + 0.5;
}

uint64_t sub_1000F7018(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 56);
}

void sub_1000F70C4()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

_QWORD *sub_1000F70D8(_QWORD *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  void *v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  sub_1000FD0F8((uint64_t)__dst, (__int128 *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  __dst[3] = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  __dst[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *((_DWORD *)__dst + 10) = *(_DWORD *)(a3 + 16);
  sub_10006DB18((const char *)a2, 0, (int *)&v15);
  if (LODWORD(v15.__r_.__value_.__l.__data_) != 3)
  {
    sub_1000D5048(v13, "");
    sub_1000F8A40(a2, &v15);
    sub_1000F9D38(" isn't a valid directory", &v16);
    sub_100174738((uint64_t)v13, (uint64_t)&v15, 2);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if ((v14 & 0x80000000) == 0)
          goto LABEL_14;
LABEL_17:
        operator delete(v13[0]);
LABEL_14:
        sub_1000F2AE4((uint64_t)&v12);
      }
    }
    else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_17;
  }
  return __dst;
}

void sub_1000F7274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  sub_1000E095C(v33);
  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000F7304(_QWORD *__dst, uint64_t a2, _QWORD *a3, int a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[2];
  int v12;

  v5 = (std::__shared_weak_count *)a3[1];
  v11[0] = *a3;
  v11[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = a4;
  sub_1000F70D8(__dst, a2, (uint64_t)v11);
  if (!v5)
    return __dst;
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return __dst;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return __dst;
}

void sub_1000F73A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F73B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  void **v5;
  void **v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  void *__p[5];
  char v20;
  std::string v21;
  uint64_t *v22;
  uint64_t **v23;

  *(_QWORD *)a2 = off_1003F64D8;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 68) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 225) = 0u;
  *(_QWORD *)(a2 + 248) = off_1003F6498;
  *(_QWORD *)(a2 + 256) = 0;
  *(_DWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_BYTE *)(a2 + 280) &= 0xF0u;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 288) = off_1003F64B8;
  *(_QWORD *)(a2 + 296) = a2 + 304;
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_DWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_BYTE *)(a2 + 348) &= 0xF8u;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 376) = 0;
  *(_DWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  v4 = *(_BYTE *)(a2 + 402);
  *(_WORD *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 402) = ((v4 >> 2 << 18) | 0x10000u) >> 16;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "datarun_metadata.bin");
  sub_1000FD150(a1, (uint64_t)__p, &v21);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  sub_10006DB18((const char *)&v21, 0, (int *)__p);
  if (LODWORD(__p[0]) >= 2)
    sub_1000F7764((uint64_t)__p, (uint64_t)&v21);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 24) + 16))(__p);
  v5 = (void **)(a2 + 192);
  if (*(char *)(a2 + 215) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)__p;
  *(void **)(a2 + 208) = __p[2];
  v16 = 1;
  LOWORD(v15) = 10;
  sub_1002D2488((char *)&v15, (uint64_t)__p);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 24) + 24))(&v13);
  v22 = 0;
  v23 = (uint64_t **)v14;
  sub_1000FC448((uint64_t)__p, &v23, &v22);
  v6 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v17;
  *(_QWORD *)(a2 + 48) = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  v7 = v14;
  if (v14)
  {
    do
    {
      v9 = v7;
      v7 = (_QWORD *)*v7;
      v10 = (std::__shared_weak_count *)v9[3];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
    }
    while (v7);
  }
  v8 = v13;
  v13 = 0;
  if (v8)
    operator delete(v8);
  if (v20 < 0)
  {
    operator delete(__p[3]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v16 & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_15:
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_26:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_25:
  operator delete(v15);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 40);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
}

void sub_1000F76DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  sub_100172368(&a24);
  if (*(char *)(v25 - 65) < 0)
    operator delete(*(void **)(v25 - 88));
  sub_100172368(v24);
  _Unwind_Resume(a1);
}

void sub_1000F7750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1000F773CLL);
  JUMPOUT(0x1000F7740);
}

void sub_1000F7764(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1003F64D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_QWORD *)(a1 + 248) = off_1003F6498;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) &= 0xF0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = off_1003F64B8;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 348) &= 0xF8u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  v2 = *(_BYTE *)(a1 + 402);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 402) = ((v2 >> 2 << 18) | 0x10000u) >> 16;
  sub_100179604(a2, 12, 7, &v5);
  if (v6)
  {
    v3 = (unint64_t *)(v6 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_1000F9FEC();
}

void sub_1000F7A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  sub_1000F9F48((uint64_t)va);
  sub_1000F9ECC(v5 - 48);
  sub_1000E095C(v5 - 32);
  sub_100172368(v4);
  _Unwind_Resume(a1);
}

void sub_1000F7AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100172368(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7AE8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_1000F7B78(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

int *sub_1000F7BD0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v4[92];
  int v5;

  sub_100178D5C(a1, &v5);
  wireless_diagnostics::google::protobuf::io::FileInputStream::FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v4, v5, -1);
  sub_100016654(a2);
  sub_1000FC764((uint64_t)a2);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)v4);
  return sub_100068888(&v5);
}

void sub_1000F7C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  sub_100026CE8(v9);
  wireless_diagnostics::google::protobuf::io::FileInputStream::~FileInputStream((wireless_diagnostics::google::protobuf::io::FileInputStream *)&a9);
  sub_100068888((int *)(v10 - 20));
  _Unwind_Resume(a1);
}

void sub_1000F7C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100068888((int *)(v1 - 20));
  _Unwind_Resume(a1);
}

void sub_1000F7C70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p;
  char *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  sub_1002C4488(a3, &__p, a1, *(_QWORD *)(a2 + 8), 0xFFFFFFFFLL);
  v3 = (char *)__p;
  if (__p)
  {
    v4 = v10;
    v5 = __p;
    if (v10 != __p)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v10 = v3;
    operator delete(v5);
  }
}

void sub_1000F7D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F7D3C((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1000F7D3C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1000F7DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002C5D58(a2, a1);
}

uint64_t sub_1000F7DE0(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_1000F7E48(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::logic_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::logic_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::logic_error::logic_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::logic_error_vtbl *)off_1003EFDA8;
  v13 = &off_1003EFDD0;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::logic_error::logic_error(&v17, &v12);
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::logic_error_vtbl *)off_1003EFD08;
  v18[0] = off_1003EFD40;
  v21 = &off_1003EFD78;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_1000F8294();
}

void sub_1000F80A8(void *a1)
{
  std::invalid_argument *v1;

  std::invalid_argument::~invalid_argument(v1);
  sub_1000CDD68(a1);
}

void sub_1000F80BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::invalid_argument a20)
{
  std::invalid_argument::~invalid_argument(&a20);
  sub_1000CDD68(a1);
}

void sub_1000F80D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::invalid_argument a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::invalid_argument::~invalid_argument(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::invalid_argument::~invalid_argument(&a20);
  sub_1000CDD68(a1);
}

void sub_1000F8120(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_1000F8144(std::invalid_argument *this)
{
  const char *imp;

  this[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(this);
}

uint64_t sub_1000F8194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1003EFD08;
  *(_QWORD *)(a1 + 16) = off_1003EFD40;
  *(_QWORD *)(a1 + 56) = &off_1003EFD78;
  return a1;
}

void sub_1000F8230(_Unwind_Exception *a1)
{
  std::invalid_argument *v1;

  std::invalid_argument::~invalid_argument(v1);
  _Unwind_Resume(a1);
}

void sub_1000F8244(std::invalid_argument *this)
{
  const char *imp;

  this[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(this);
}

void sub_1000F8294()
{
  operator new();
}

void sub_1000F84AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000F84D0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_1000F84EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000F8500(std::invalid_argument *this)
{
  const char *imp;

  this[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(this);
}

void sub_1000F8550(std::invalid_argument *this)
{
  const char *imp;

  this[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::invalid_argument::~invalid_argument(this);
  operator delete();
}

void sub_1000F85B4()
{
  operator new();
}

void sub_1000F8690()
{
  std::invalid_argument *v0;

  std::invalid_argument::~invalid_argument(v0);
  operator delete();
}

void sub_1000F86CC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000F8194((uint64_t)exception, a1);
}

void sub_1000F8708(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F871C(std::invalid_argument *a1)
{
  const char *imp;

  a1->__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(a1 - 1);
}

void sub_1000F876C(std::invalid_argument *a1)
{
  const char *imp;

  a1->__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::invalid_argument::~invalid_argument(a1 - 1);
  operator delete();
}

void sub_1000F87D0()
{
  sub_1000F85B4();
}

void sub_1000F87E0(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1000F8194((uint64_t)exception, v1);
}

void sub_1000F8824(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F8838(_QWORD *a1)
{
  std::invalid_argument *v1;
  const char *imp;

  v1 = (std::invalid_argument *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(v1);
}

void sub_1000F8890(_QWORD *a1)
{
  std::invalid_argument *v1;
  const char *imp;

  v1 = (std::invalid_argument *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::invalid_argument::~invalid_argument(v1);
  operator delete();
}

void sub_1000F88FC(std::invalid_argument *this)
{
  const char *imp;

  this[1].__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::invalid_argument::~invalid_argument(this);
  operator delete();
}

void sub_1000F8960(std::invalid_argument *a1)
{
  const char *imp;

  a1->__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::invalid_argument::~invalid_argument(a1 - 1);
}

void sub_1000F89B0(std::invalid_argument *a1)
{
  const char *imp;

  a1->__vftable = (std::invalid_argument_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::invalid_argument::~invalid_argument(a1 - 1);
  operator delete();
}

void sub_1000F8A14(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1000F8A40@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t result;
  std::bad_cast v3;
  _UNKNOWN **v4;
  _UNKNOWN **v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  result = sub_1000F8ADC(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v3);
  }
  return result;
}

void sub_1000F8AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  uint64_t v10;

  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F8ADC(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  char *v15;
  __int128 *v16;
  std::string::size_type *v17;
  unint64_t v18;
  __int128 v19;
  std::string::value_type v20;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  uint64_t v28;
  void (__cdecl **v29)(std::ostream *__hidden);
  std::ios_base v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v28 = 0;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  std::streambuf::basic_streambuf(&v22);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  LODWORD(v28) = 24;
  *(_QWORD *)&v24 = 0;
  v23 = 0uLL;
  v22.n128_u64[0] = (unint64_t)off_1003EFE30;
  std::ios_base::init(&v30, &v22);
  v31 = 0;
  v32 = -1;
  v34 = (char *)&v33;
  v35 = (char *)&v33 + 2;
  sub_1000F8F38(&v22, a1);
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    v7 = v34;
    v6 = v35;
    v8 = v35 - v34;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = a2->__r_.__value_.__r.__words[2];
      v11 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 >= v8)
      {
        v13 = HIBYTE(v12);
LABEL_9:
        if ((v13 & 0x80u) == 0)
          v9 = a2;
        else
          v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_12:
        if (v7 == v6)
        {
          v14 = v9;
        }
        else
        {
          if (v8 < 0x20 || (unint64_t)((char *)v9 - v7) < 0x20)
          {
            v14 = v9;
            v15 = v7;
          }
          else
          {
            v14 = (std::string *)((char *)v9 + (v8 & 0xFFFFFFFFFFFFFFE0));
            v15 = &v7[v8 & 0xFFFFFFFFFFFFFFE0];
            v16 = (__int128 *)(v7 + 16);
            v17 = &v9->__r_.__value_.__r.__words[2];
            v18 = v8 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v19 = *v16;
              *((_OWORD *)v17 - 1) = *(v16 - 1);
              *(_OWORD *)v17 = v19;
              v16 += 2;
              v17 += 4;
              v18 -= 32;
            }
            while (v18);
            if (v8 == (v8 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_22;
          }
          do
          {
            v20 = *v15++;
            v14->__r_.__value_.__s.__data_[0] = v20;
            v14 = (std::string *)((char *)v14 + 1);
          }
          while (v15 != v6);
        }
LABEL_22:
        v14->__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          a2->__r_.__value_.__l.__size_ = v8;
        else
          *((_BYTE *)&a2->__r_.__value_.__s + 23) = v8 & 0x7F;
        goto LABEL_25;
      }
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v9 = a2;
      if (v8 <= 0x16)
        goto LABEL_12;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v11 = 22;
    }
    std::string::__grow_by(a2, v11, v8 - v11, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v13) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_9;
  }
LABEL_25:
  std::ostream::~ostream(&v29);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(&v22);
  return v5;
}

void sub_1000F8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000F8D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000F8D1C(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

uint64_t sub_1000F8D34(uint64_t a1)
{
  std::ostream::~ostream(a1 + 104);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf(a1);
}

uint64_t sub_1000F8D8C(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    a1 = v1;
  }
  return std::streambuf::~streambuf(a1);
}

void sub_1000F8DDC(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::streambuf::~streambuf(a1);
  operator delete();
}

_QWORD *sub_1000F8E30(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

double sub_1000F8E40@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  if ((a4 & 0x10) != 0)
  {
    v7 = -1;
    goto LABEL_19;
  }
  v5 = a1[2];
  v6 = a1[4] - v5;
  if (!a3)
  {
    v7 = -1;
    if (a2 < 0 || v6 < a2)
      goto LABEL_19;
    v9 = v5 + a2;
LABEL_15:
    v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    v7 = -1;
    v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6)
      goto LABEL_19;
    v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    v9 = a1[3];
    goto LABEL_18;
  }
  v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    v8 = a1[4];
    v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    v7 = v9 - v5;
  }
LABEL_19:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v7;
  return result;
}

double sub_1000F8EF0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if ((a3 & 0x10) == 0)
  {
    v4 = a1[2];
    v5 = *(_QWORD *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      v6 = v4 + v5;
      v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = -1;
  return result;
}

__n128 sub_1000F8F38(__n128 *a1, uint64_t a2)
{
  unint64_t *v4;
  std::ios_base *v5;
  __n128 result;
  void *__p[2];
  uint64_t v8;

  v4 = &a1[6].n128_u64[1];
  v5 = (std::ios_base *)&a1[6].n128_i8[*(_QWORD *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
  }
  sub_1000F9060(v4, (unsigned __int8 *)__p, 0x26u, 0x22u);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  result = *(__n128 *)(*(unint64_t *)((char *)v4 + *(_QWORD *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t sub_1000F900C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  __cxa_end_catch();
  return 0;
}

_QWORD *sub_1000F9060(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int64x2_t v12;
  unsigned __int8 *v13;
  int64x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int8x16_t v17;
  unint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x8_t v24;
  int v25;
  int v26;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  const std::locale::facet *v45;
  int v46;
  char *v47;
  int v48;
  const std::locale::facet *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE v54[16];
  std::locale v55;

  std::ostream::sentry::sentry(v54, a1);
  if (!v54[0])
    goto LABEL_79;
  if (((char)a2[23] & 0x80000000) == 0)
  {
    v8 = a2[23];
    if (a2[23])
      goto LABEL_4;
LABEL_7:
    v9 = 2;
    goto LABEL_18;
  }
  v11 = a2;
  a2 = *(unsigned __int8 **)a2;
  v8 = *((_QWORD *)v11 + 1);
  if (!v8)
    goto LABEL_7;
LABEL_4:
  if (v8 >= 4)
  {
    v10 = &a2[v8 & 0xFFFFFFFFFFFFFFFCLL];
    v12 = (int64x2_t)xmmword_100382F40;
    v13 = a2 + 2;
    v14 = 0uLL;
    v15 = (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a3), (int8x8_t)0xFF000000FFLL);
    v16 = (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a4), (int8x8_t)0xFF000000FFLL);
    v17 = (int8x16_t)vdupq_n_s64(2uLL);
    v18 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v19.i32[0] = *(v13 - 2);
      v19.i32[1] = *(v13 - 1);
      v20.i32[0] = *v13;
      v20.i32[1] = v13[1];
      v21 = vorr_s8((int8x8_t)vceq_s32(v19, v15), (int8x8_t)vceq_s32(v19, v16));
      v22.i64[0] = v21.i32[0];
      v22.i64[1] = v21.i32[1];
      v23 = v22;
      v24 = vorr_s8((int8x8_t)vceq_s32(v20, v15), (int8x8_t)vceq_s32(v20, v16));
      v22.i64[0] = v24.i32[0];
      v22.i64[1] = v24.i32[1];
      v12 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v23, v17), (int64x2_t)vmvnq_s8(v23)), v12);
      v14 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v22, v17), (int64x2_t)vmvnq_s8(v22)), v14);
      v13 += 4;
      v18 -= 4;
    }
    while (v18);
    v9 = vaddvq_s64(vaddq_s64(v14, v12));
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_18;
  }
  else
  {
    v9 = 2;
    v10 = a2;
  }
  do
  {
    v26 = *v10++;
    v25 = v26;
    if (v26 == a4 || v25 == a3)
      v28 = 2;
    else
      v28 = 1;
    v9 += v28;
  }
  while (v10 != &a2[v8]);
LABEL_18:
  v29 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v30 = (_QWORD *)*((_QWORD *)v29 + 5);
  v31 = *((_QWORD *)v29 + 3);
  v32 = v31 - v9;
  if (v31 > v9)
  {
    if ((*((_DWORD *)v29 + 2) & 0xB0) == 0x20)
    {
      v33 = (_BYTE *)v30[6];
      if (v33 == (_BYTE *)v30[7])
      {
        if ((*(unsigned int (**)(_QWORD, _QWORD))(*v30 + 104))(*((_QWORD *)v29 + 5), a4) == -1)
          goto LABEL_95;
      }
      else
      {
        v30[6] = v33 + 1;
        *v33 = a4;
      }
      if (v8 == v9)
      {
        if ((*(uint64_t (**)(_QWORD *, unsigned __int8 *, unint64_t))(*v30 + 96))(v30, a2, v8) != v8)
          goto LABEL_95;
      }
      else
      {
        for (; v8; --v8)
        {
          v41 = *a2;
          if ((_DWORD)v41 == a3 || (_DWORD)v41 == a4)
          {
            v42 = (_BYTE *)v30[6];
            if (v42 == (_BYTE *)v30[7])
            {
              if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a3) == -1)
                goto LABEL_95;
            }
            else
            {
              v30[6] = v42 + 1;
              *v42 = a3;
            }
          }
          v43 = (_BYTE *)v30[6];
          if (v43 == (_BYTE *)v30[7])
          {
            if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v30 + 104))(v30, v41) == -1)
              goto LABEL_95;
          }
          else
          {
            v30[6] = v43 + 1;
            *v43 = v41;
          }
          ++a2;
        }
      }
      v44 = (_BYTE *)v30[6];
      if (v44 == (_BYTE *)v30[7])
      {
        if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a4) == -1)
          goto LABEL_95;
      }
      else
      {
        v30[6] = v44 + 1;
        *v44 = a4;
      }
      v47 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v48 = *((_DWORD *)v47 + 36);
      if (v48 == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
        v49 = std::locale::use_facet(&v55, &std::ctype<char>::id);
        v48 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 32);
        std::locale::~locale(&v55);
        *((_DWORD *)v47 + 36) = v48;
      }
      v55.__locale_ = (std::locale::__imp *)(0x101010101010101 * v48);
      if (v32 >= 9)
      {
        while ((*(uint64_t (**)(_QWORD *, std::locale *, uint64_t))(*v30 + 96))(v30, &v55, 8) == 8)
        {
          v32 -= 8;
          if (v32 <= 8)
            goto LABEL_77;
        }
        goto LABEL_95;
      }
LABEL_77:
      if ((*(uint64_t (**)(_QWORD *, std::locale *, unint64_t))(*v30 + 96))(v30, &v55, v32) == v32)
        goto LABEL_78;
LABEL_95:
      std::ostream::sentry::~sentry(v54);
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
      return a1;
    }
    if (*((_DWORD *)v29 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v45 = std::locale::use_facet(&v55, &std::ctype<char>::id);
      v46 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 32);
      std::locale::~locale(&v55);
      *((_DWORD *)v29 + 36) = v46;
      v55.__locale_ = (std::locale::__imp *)(0x101010101010101 * v46);
      if (v32 >= 9)
      {
LABEL_26:
        while ((*(uint64_t (**)(_QWORD *, std::locale *, uint64_t))(*v30 + 96))(v30, &v55, 8) == 8)
        {
          v32 -= 8;
          if (v32 <= 8)
            goto LABEL_28;
        }
        goto LABEL_95;
      }
    }
    else
    {
      v55.__locale_ = (std::locale::__imp *)(0x101010101010101 * *((_DWORD *)v29 + 36));
      if (v32 >= 9)
        goto LABEL_26;
    }
LABEL_28:
    if ((*(uint64_t (**)(_QWORD *, std::locale *, unint64_t))(*v30 + 96))(v30, &v55, v32) != v32)
      goto LABEL_95;
    v36 = (_BYTE *)v30[6];
    v35 = v30 + 6;
    if (v36 == (_BYTE *)v30[7])
    {
      if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a4) == -1)
        goto LABEL_95;
    }
    else
    {
      *v35 = v36 + 1;
      *v36 = a4;
    }
    if (v8 == v9)
    {
      if ((*(uint64_t (**)(_QWORD *, unsigned __int8 *, unint64_t))(*v30 + 96))(v30, a2, v8) != v8)
        goto LABEL_95;
    }
    else
    {
      for (; v8; --v8)
      {
        v50 = *a2;
        if ((_DWORD)v50 == a3 || (_DWORD)v50 == a4)
        {
          v51 = (_BYTE *)v30[6];
          if (v51 == (_BYTE *)v30[7])
          {
            if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a3) == -1)
              goto LABEL_95;
          }
          else
          {
            *v35 = v51 + 1;
            *v51 = a3;
          }
        }
        v52 = (_BYTE *)v30[6];
        if (v52 == (_BYTE *)v30[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v30 + 104))(v30, v50) == -1)
            goto LABEL_95;
        }
        else
        {
          *v35 = v52 + 1;
          *v52 = v50;
        }
        ++a2;
      }
    }
    v40 = (_BYTE *)v30[6];
    if (v40 == (_BYTE *)v30[7])
      goto LABEL_49;
LABEL_48:
    *v35 = v40 + 1;
    *v40 = a4;
    goto LABEL_78;
  }
  v34 = (_BYTE *)v30[6];
  v35 = v30 + 6;
  if (v34 == (_BYTE *)v30[7])
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*v30 + 104))(*((_QWORD *)v29 + 5), a4) == -1)
      goto LABEL_95;
  }
  else
  {
    *v35 = v34 + 1;
    *v34 = a4;
  }
  if (v8 == v9)
  {
    if ((*(uint64_t (**)(_QWORD *, unsigned __int8 *, unint64_t))(*v30 + 96))(v30, a2, v8) != v8)
      goto LABEL_95;
  }
  else
  {
    for (; v8; --v8)
    {
      v37 = *a2;
      if ((_DWORD)v37 == a3 || (_DWORD)v37 == a4)
      {
        v38 = (_BYTE *)v30[6];
        if (v38 == (_BYTE *)v30[7])
        {
          if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a3) == -1)
            goto LABEL_95;
        }
        else
        {
          *v35 = v38 + 1;
          *v38 = a3;
        }
      }
      v39 = (_BYTE *)v30[6];
      if (v39 == (_BYTE *)v30[7])
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t))(*v30 + 104))(v30, v37) == -1)
          goto LABEL_95;
      }
      else
      {
        *v35 = v39 + 1;
        *v39 = v37;
      }
      ++a2;
    }
  }
  v40 = (_BYTE *)v30[6];
  if (v40 != (_BYTE *)v30[7])
    goto LABEL_48;
LABEL_49:
  if ((*(unsigned int (**)(_QWORD *, _QWORD))(*v30 + 104))(v30, a4) == -1)
    goto LABEL_95;
LABEL_78:
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
LABEL_79:
  std::ostream::sentry::~sentry(v54);
  return a1;
}

void sub_1000F9790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  _QWORD *v11;

  std::locale::~locale(&a11);
  std::ostream::sentry::~sentry(&a9);
  std::ios_base::clear((std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)), *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 32) | 1);
  _Unwind_Resume(a1);
}

void sub_1000F9804(uint64_t a1)
{
  __n128 *exception;

  exception = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_1000F9858(exception, a1);
}

void sub_1000F9840(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1000F9858(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)&off_1003EDEA0;
  a1->n128_u64[1] = (unint64_t)&off_1003EFFF0;
  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&off_1003EFF78;
  a1->n128_u64[1] = (unint64_t)off_1003EFFA8;
  a1[2].n128_u64[0] = (unint64_t)off_1003EFFD0;
  a1[2].n128_u64[1] = 0;
  return result;
}

std::bad_cast *sub_1000F98A8(std::bad_cast *a1)
{
  std::bad_cast_vtbl *v2;

  a1[4].__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = a1[5].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
    a1[5].__vftable = 0;
  std::bad_cast::~bad_cast(a1 + 1);
  return a1;
}

void sub_1000F9900()
{
  operator new();
}

void sub_1000F99D4()
{
  std::bad_cast *v0;

  std::bad_cast::~bad_cast(v0);
  operator delete();
}

void sub_1000F9A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9A1C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  sub_1000F9C7C((uint64_t)exception, a1);
}

void sub_1000F9A58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000F9A6C(std::bad_cast *a1)
{
  std::bad_cast_vtbl *v2;

  a1[4].__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = a1[5].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
      a1[5].__vftable = 0;
  }
  std::bad_cast::~bad_cast(a1 + 1);
  operator delete();
}

void sub_1000F9AD4(std::bad_cast *this)
{
  std::bad_cast_vtbl *v2;

  this[3].__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = this[4].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
    this[4].__vftable = 0;
  std::bad_cast::~bad_cast(this);
}

void sub_1000F9B24(std::bad_cast *this)
{
  std::bad_cast_vtbl *v2;

  this[3].__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = this[4].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
      this[4].__vftable = 0;
  }
  std::bad_cast::~bad_cast(this);
  operator delete();
}

const char *sub_1000F9B90()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_1000F9B9C(std::bad_cast *a1)
{
  std::bad_cast_vtbl *v2;

  a1->__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
    a1[1].__vftable = 0;
  std::bad_cast::~bad_cast(a1 - 3);
}

void sub_1000F9BEC(std::bad_cast *a1)
{
  std::bad_cast_vtbl *v2;

  a1->__vftable = (std::bad_cast_vtbl *)&off_1003EDD90;
  v2 = a1[1].__vftable;
  if (v2)
  {
    if ((*((unsigned int (**)(std::bad_cast_vtbl *))v2->~bad_cast + 4))(v2))
      a1[1].__vftable = 0;
  }
  std::bad_cast::~bad_cast(a1 - 3);
  operator delete();
}

void sub_1000F9C58(std::bad_cast *a1)
{
  std::bad_cast::~bad_cast(a1);
  operator delete();
}

uint64_t sub_1000F9C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_1003EDEA0;
  *(_QWORD *)(a1 + 8) = &off_1003EFFF0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &off_1003EDD90;
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)a1 = &off_1003EFF78;
  *(_QWORD *)(a1 + 8) = off_1003EFFA8;
  *(_QWORD *)(a1 + 32) = off_1003EFFD0;
  return a1;
}

void sub_1000F9D24(_Unwind_Exception *a1)
{
  std::bad_cast *v1;

  std::bad_cast::~bad_cast(v1);
  _Unwind_Resume(a1);
}

std::string *sub_1000F9D38@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1000F9D68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F9D84(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int *v16;

  v4 = a2[1];
  v15 = *a2;
  v16 = (unsigned int *)v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_1000FA980((_QWORD *)a1, &v15);
  v7 = v16;
  if (v16)
  {
    v8 = v16 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
      v11 = v7 + 3;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
    }
  }
  *(_QWORD *)a1 = off_1003F0198;
  *(_QWORD *)(a1 + 32) = *a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 256;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1000F9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a10)
  {
    v11 = a10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 16))(a10);
      v14 = a10 + 3;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 24))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000F9ECC(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t sub_1000F9F48(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)a1 = off_1003F0198;
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    free(v2);
    *(_DWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)a1 = off_1003F0658;
  v3 = *(unsigned int **)(a1 + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1000F9FEC()
{
  operator new();
}

void sub_1000FA0D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1000FA0DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1000FA0F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0018;
  if (*(_BYTE *)(a1 + 24))
  {
    (**(void (***)(uint64_t))(a1 + 32))(a1 + 32);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1000FA13C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0018;
  if (*(_BYTE *)(a1 + 24))
  {
    (**(void (***)(uint64_t))(a1 + 32))(a1 + 32);
    *(_BYTE *)(a1 + 24) = 0;
  }
  operator delete();
}

uint64_t sub_1000FA198(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result + 32;
    result = (**(uint64_t (***)(uint64_t))(result + 32))(result + 32);
    *(_BYTE *)(v1 - 8) = 0;
  }
  return result;
}

uint64_t sub_1000FA1D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost6detail13sp_ms_deleterIN6apache6thrift9transport21TInputStreamTransportEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost6detail13sp_ms_deleterIN6apache6thrift9transport21TInputStreamTransportEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost6detail13sp_ms_deleterIN6apache6thrift9transport21TInputStreamTransportEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost6detail13sp_ms_deleterIN6apache6thrift9transport21TInputStreamTransportEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_1000FA23C()
{
  return 0;
}

uint64_t sub_1000FA244(uint64_t a1)
{
  return a1 + 24;
}

_QWORD *sub_1000FA24C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_1003F0078;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1000FA2C0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = off_1003F0078;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete();
}

uint64_t sub_1000FA334()
{
  return 0;
}

uint64_t sub_1000FA33C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_1000FA348()
{
  _BYTE *exception;
  char *v1;

  exception = __cxa_allocate_exception(0x28uLL);
  v1 = (char *)operator new(0x20uLL);
  strcpy(v1, "Cannot open base TTransport.");
  *(_QWORD *)exception = off_1003F0158;
  sub_10006CED8(exception + 8, v1, 0x1CuLL);
  *(_QWORD *)exception = off_100406738;
  *((_DWORD *)exception + 8) = 1;
}

void sub_1000FA3DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA3F0(_Unwind_Exception *a1)
{
  std::exception *v1;
  void *v2;

  std::exception::~exception(v1);
  operator delete(v2);
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA428(uint64_t a1)
{
  const void *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = *(const void **)(a1 + 8);
  if (v1)
  {
    if (v2)
    {
      v3 = v2;
      if (!std::filebuf::close(v2 + 2))
        std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
    }
  }
}

uint64_t sub_1000FA494(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::istream::read(*(_QWORD *)(a1 + 8), a2, a3);
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t sub_1000FA4C8()
{
  return 0;
}

uint64_t sub_1000FA4D4()
{
  return 0;
}

uint64_t sub_1000FA4E0()
{
  return 0;
}

void sub_1000FA4EC(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "Unknown");
}

void sub_1000FA514()
{
  _BYTE *exception;
  char *v1;

  exception = __cxa_allocate_exception(0x28uLL);
  v1 = (char *)operator new(0x20uLL);
  strcpy(v1, "Base TTransport cannot consume.");
  *(_QWORD *)exception = off_1003F0158;
  sub_10006CED8(exception + 8, v1, 0x1FuLL);
  *(_QWORD *)exception = off_100406738;
  *((_DWORD *)exception + 8) = 1;
}

void sub_1000FA5A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA5BC(_Unwind_Exception *a1)
{
  std::exception *v1;
  void *v2;

  std::exception::~exception(v1);
  operator delete(v2);
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA5E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FA5F4(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1003F0158;
  v5 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)a1 = off_100406738;
  *(_DWORD *)(a1 + 32) = a2;
  return a1;
}

void sub_1000FA65C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA670(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_1003F0158;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_1000FA6BC(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_1003F0158;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_1000FA708(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1003F0158;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  operator delete();
}

const char *sub_1000FA758(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16))
      return *(const char **)(a1 + 8);
    else
      return "Default TException.";
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    return (const char *)(a1 + 8);
  }
  else
  {
    return "Default TException.";
  }
}

uint64_t sub_1000FA794(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *exception;
  __int128 v11;

  if (!a3)
    return 0;
  LODWORD(v6) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  do
  {
    std::istream::read(v7, a2 + v6, a3 - v6);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(v7 + 8);
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      sub_1000D5048(&v11, "No more data to read.");
      sub_1000FA5F4((uint64_t)exception, 3, &v11);
    }
    v6 = (v6 + v8);
  }
  while (v6 < a3);
  return v6;
}

void sub_1000FA868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_1000FA8A0()
{
  _BYTE *exception;
  char *v1;

  exception = __cxa_allocate_exception(0x28uLL);
  v1 = (char *)operator new(0x20uLL);
  strcpy(v1, "Can't write to input stream");
  *(_QWORD *)exception = off_1003F0158;
  sub_10006CED8(exception + 8, v1, 0x1BuLL);
  *(_QWORD *)exception = off_100406738;
  *((_DWORD *)exception + 8) = 1;
}

void sub_1000FA934(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA948(_Unwind_Exception *a1)
{
  std::exception *v1;
  void *v2;

  std::exception::~exception(v1);
  operator delete(v2);
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1000FA96C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FA980(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  v4 = (unsigned int *)a2[1];
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
    *a1 = off_1003F0658;
    a1[1] = v3;
    a1[2] = v4;
    do
      v8 = __ldxr(v5);
    while (__stxr(v8 + 1, v5));
    a1[3] = 0x4000000000;
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v11 = v4 + 3;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
    *a1 = off_1003F04E0;
    do
    {
      v14 = __ldaxr(v5);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v5));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v16 = v4 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
    a1[3] = 0x4000000000;
  }
  *a1 = off_1003F0368;
  return a1;
}

void sub_1000FAACC(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)a1 = off_1003F0198;
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    free(v2);
    *(_DWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)a1 = off_1003F0658;
  v3 = *(unsigned int **)(a1 + 16);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  operator delete();
}

uint64_t sub_1000FAB84()
{
  return 0;
}

uint64_t sub_1000FAB8C()
{
  return 0;
}

uint64_t sub_1000FAB94()
{
  return 0;
}

void sub_1000FAB9C()
{
  sub_1000FA8A0();
}

void sub_1000FABC8()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FABE4()
{
  return 3;
}

uint64_t sub_1000FABF8()
{
  return 0;
}

void sub_1000FAC00()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAC20()
{
  return 1;
}

void sub_1000FAC30()
{
  sub_1000FA8A0();
}

void sub_1000FAC64()
{
  sub_1000FA8A0();
}

void sub_1000FAC78()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAC90()
{
  return 6;
}

uint64_t sub_1000FACA8()
{
  return 0;
}

void sub_1000FACB0()
{
  sub_1000FA8A0();
}

void sub_1000FACDC()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FACF4()
{
  return 5;
}

uint64_t sub_1000FAD08()
{
  return 0;
}

void sub_1000FAD10()
{
  sub_1000FA8A0();
}

void sub_1000FAD3C()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAD54()
{
  return 5;
}

uint64_t sub_1000FAD68()
{
  return 0;
}

void sub_1000FAD70()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAD90()
{
  return 1;
}

void sub_1000FADA0()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FADC0()
{
  return 1;
}

void sub_1000FADD0()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FADF8()
{
  return 2;
}

void sub_1000FAE08()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAE2C()
{
  return 4;
}

void sub_1000FAE3C()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAE60()
{
  return 8;
}

void sub_1000FAE70()
{
  sub_1000FA8A0();
}

uint64_t sub_1000FAE98()
{
  return 8;
}

void sub_1000FAEA8(uint64_t a1, uint64_t a2)
{
  _QWORD *exception;

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8) >> 31)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = 0;
      exception[3] = 0;
      *exception = off_1003F07E8;
      exception[1] = 0;
      *((_DWORD *)exception + 8) = 3;
    }
  }
  sub_1000FA8A0();
}

void sub_1000FAF64(uint64_t a1, uint64_t a2)
{
  _QWORD *exception;

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8) >> 31)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = 0;
      exception[3] = 0;
      *exception = off_1003F07E8;
      exception[1] = 0;
      *((_DWORD *)exception + 8) = 3;
    }
  }
  sub_1000FA8A0();
}

uint64_t sub_1000FB024()
{
  return 0;
}

uint64_t sub_1000FB02C(int a1, std::string *this)
{
  std::string::assign(this, "");
  return 0;
}

uint64_t sub_1000FB050()
{
  return 0;
}

uint64_t sub_1000FB058(uint64_t a1, uint64_t a2, _DWORD *a3, _WORD *a4)
{
  uint64_t v7;
  unsigned int v8;
  char v10;
  unsigned __int16 v11;

  v7 = 1;
  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v10, 1u);
  v8 = v10;
  *a3 = v10;
  if (v8)
  {
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v11, 2u);
    v8 = bswap32(v11) >> 16;
    v7 = 3;
  }
  *a4 = v8;
  return v7;
}

uint64_t sub_1000FB0D4()
{
  return 0;
}

uint64_t sub_1000FB0E0()
{
  return 0;
}

uint64_t sub_1000FB0E8(uint64_t a1, _DWORD *a2, signed int *a3)
{
  signed int v6;
  signed int v7;
  BOOL v8;
  _QWORD *exception;
  _QWORD *v11;
  char v12;
  unsigned int v13;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v12, 1u);
  *a2 = v12;
  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v13, 4u);
  v6 = bswap32(v13);
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 2;
  }
  v7 = *(_DWORD *)(a1 + 44);
  if (v7)
    v8 = v6 <= v7;
  else
    v8 = 1;
  if (!v8)
  {
    v11 = __cxa_allocate_exception(0x28uLL);
    v11[2] = 0;
    v11[3] = 0;
    *v11 = off_1003F07E8;
    v11[1] = 0;
    *((_DWORD *)v11 + 8) = 3;
  }
  *a3 = v6;
  return 5;
}

uint64_t sub_1000FB1D0()
{
  return 0;
}

uint64_t sub_1000FB1D8(uint64_t a1, _DWORD *a2, signed int *a3)
{
  signed int v6;
  signed int v7;
  BOOL v8;
  _QWORD *exception;
  _QWORD *v11;
  char v12;
  unsigned int v13;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v12, 1u);
  *a2 = v12;
  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v13, 4u);
  v6 = bswap32(v13);
  if (v6 < 0)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 2;
  }
  v7 = *(_DWORD *)(a1 + 44);
  if (v7)
    v8 = v6 <= v7;
  else
    v8 = 1;
  if (!v8)
  {
    v11 = __cxa_allocate_exception(0x28uLL);
    v11[2] = 0;
    v11[3] = 0;
    *v11 = off_1003F07E8;
    v11[1] = 0;
    *((_DWORD *)v11 + 8) = 3;
  }
  *a3 = v6;
  return 5;
}

uint64_t sub_1000FB2C0()
{
  return 0;
}

uint64_t sub_1000FB2C8(uint64_t a1, BOOL *a2)
{
  char v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 1u);
  *a2 = v4 != 0;
  return 1;
}

uint64_t sub_1000FB310(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  char v7;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v7, 1u);
  if (v7)
    v5 = *a2 | a3;
  else
    v5 = *a2 & ~a3;
  *a2 = v5;
  return 1;
}

uint64_t sub_1000FB380(uint64_t a1, _BYTE *a2)
{
  char v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 1u);
  *a2 = v4;
  return 1;
}

uint64_t sub_1000FB3C0(uint64_t a1, _WORD *a2)
{
  unsigned __int16 v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 2u);
  *a2 = bswap32(v4) >> 16;
  return 2;
}

uint64_t sub_1000FB408(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 4u);
  *a2 = bswap32(v4);
  return 4;
}

uint64_t sub_1000FB44C(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 8u);
  *a2 = bswap64(v4);
  return 8;
}

uint64_t sub_1000FB490(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v4, 8u);
  *a2 = bswap64(v4);
  return 8;
}

uint64_t sub_1000FB4D4(uint64_t a1, std::string *a2)
{
  unsigned int v5;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v5, 4u);
  return sub_1000FBEAC(a1, a2, bswap32(v5)) + 4;
}

uint64_t sub_1000FB524(uint64_t a1, std::string *a2)
{
  unsigned int v5;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v5, 4u);
  return sub_1000FBEAC(a1, a2, bswap32(v5)) + 4;
}

_QWORD *sub_1000FB578(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1003F0658;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1000FB600(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1003F0658;
  v1 = (unsigned int *)a1[2];
  if (v1)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
  operator delete();
}

uint64_t sub_1000FB69C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  v2 = 0;
  switch(a2)
  {
    case 2:
      LOBYTE(__p) = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, &__p);
      goto LABEL_8;
    case 3:
      LOBYTE(__p) = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 296))(a1, &__p);
      goto LABEL_8;
    case 4:
      __p = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 328))(a1, &__p);
      goto LABEL_8;
    case 6:
      LOWORD(__p) = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 304))(a1, &__p);
      goto LABEL_8;
    case 8:
      LODWORD(__p) = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 312))(a1, &__p);
      goto LABEL_8;
    case 10:
      __p = 0;
      v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 320))(a1, &__p);
LABEL_8:
      v2 = v4;
      goto LABEL_9;
    case 11:
      __p = 0;
      v17 = 0;
      v18 = 0;
      v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 344))(a1, &__p);
      if (SHIBYTE(v18) < 0)
        goto LABEL_29;
      goto LABEL_9;
    case 12:
      __p = 0;
      v17 = 0;
      v18 = 0;
      LOWORD(v15) = 0;
      HIDWORD(v15) = 0;
      for (i = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 200))(a1, &__p);
            ;
            i = v11 + v10 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1))
      {
        v10 = (*(uint64_t (**)(uint64_t, void **, char *, uint64_t *))(*(_QWORD *)a1 + 216))(a1, &__p, (char *)&v15 + 4, &v15)+ i;
        if (!HIDWORD(v15))
          break;
        v11 = sub_1000FB69C(a1, HIDWORD(v15));
      }
      v2 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1) + v10;
      if ((SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_29:
      operator delete(__p);
      result = v2;
      break;
    case 13:
      LODWORD(__p) = 0;
      v15 = 0;
      v6 = (*(uint64_t (**)(uint64_t, void **, char *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, &__p, (char *)&v15 + 4, &v15);
      if ((_DWORD)v15)
      {
        v12 = 0;
        do
        {
          v13 = sub_1000FB69C(a1, __p) + v6;
          v6 = v13 + sub_1000FB69C(a1, HIDWORD(v15));
          ++v12;
        }
        while (v12 < v15);
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
      goto LABEL_27;
    case 14:
      HIDWORD(v15) = 0;
      LODWORD(__p) = 0;
      v6 = (*(uint64_t (**)(uint64_t, void **, char *))(*(_QWORD *)a1 + 264))(a1, &__p, (char *)&v15 + 4);
      if (HIDWORD(v15))
      {
        v14 = 0;
        do
        {
          v6 += sub_1000FB69C(a1, __p);
          ++v14;
        }
        while (v14 < HIDWORD(v15));
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
      goto LABEL_27;
    case 15:
      HIDWORD(v15) = 0;
      LODWORD(__p) = 0;
      v6 = (*(uint64_t (**)(uint64_t, void **, char *))(*(_QWORD *)a1 + 248))(a1, &__p, (char *)&v15 + 4);
      if (HIDWORD(v15))
      {
        v7 = 0;
        do
        {
          v6 += sub_1000FB69C(a1, __p);
          ++v7;
        }
        while (v7 < HIDWORD(v15));
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
LABEL_27:
      result = (v8 + v6);
      break;
    default:
LABEL_9:
      result = v2;
      break;
  }
  return result;
}

void sub_1000FB980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FB9A4(uint64_t a1, uint64_t a2)
{
  _QWORD *exception;

  if (*(_BYTE *)(a1 + 49))
    sub_1000FA8A0();
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8) >> 31)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = 0;
      exception[3] = 0;
      *exception = off_1003F07E8;
      exception[1] = 0;
      *((_DWORD *)exception + 8) = 3;
    }
  }
  sub_1000FA8A0();
}

void sub_1000FBB4C(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_1003F0158;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_1000FBB98(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1003F0158;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  operator delete();
}

const char *sub_1000FBBE8(uint64_t a1)
{
  const char *result;
  uint64_t v3;

  result = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    if (*(_QWORD *)(a1 + 16))
      return *(const char **)result;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    return result;
  }
  v3 = *(int *)(a1 + 32);
  if (v3 > 5)
    return "TProtocolException: (Invalid exception type)";
  else
    return off_1003F0800[v3];
}

uint64_t sub_1000FBC3C(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4)
{
  std::string::size_type v8;
  int v9;
  int v11;
  void *v12;
  void *exception;
  __int128 v14;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 4u);
  v8 = bswap32(v14);
  if ((v8 & 0x80000000) != 0)
  {
    if (WORD1(v8) != 32769)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      sub_1000D5048(&v14, "Bad version identifier");
      sub_1000FBE34((uint64_t)exception, 4, &v14);
    }
    *a3 = v8;
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 4u);
    v11 = sub_1000FBEAC(a1, a2, bswap32(v14));
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 4u);
    *a4 = bswap32(v14);
    return (v11 + 12);
  }
  else
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v12 = __cxa_allocate_exception(0x28uLL);
      sub_1000D5048(&v14, "No version identifier... old protocol client in strict mode?");
      sub_1000FBE34((uint64_t)v12, 4, &v14);
    }
    v9 = sub_1000FBEAC(a1, a2, v8);
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 1u);
    *a3 = (char)v14;
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 4u);
    *a4 = bswap32(v14);
    return (v9 + 9);
  }
}

void sub_1000FBDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FBE34(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1003F0158;
  v5 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)v5, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)a1 = off_1003F07E8;
  *(_DWORD *)(a1 + 32) = a2;
  return a1;
}

void sub_1000FBE98(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

std::string::size_type sub_1000FBEAC(uint64_t a1, std::string *this, std::string::size_type __n)
{
  int v5;
  std::string *v8;
  _QWORD *exception;
  _QWORD *v11;

  if ((__n & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 2;
  }
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 >= 1 && v5 < (int)__n)
  {
    v11 = __cxa_allocate_exception(0x28uLL);
    v11[2] = 0;
    v11[3] = 0;
    *v11 = off_1003F07E8;
    v11[1] = 0;
    *((_DWORD *)v11 + 8) = 3;
  }
  if ((_DWORD)__n)
  {
    std::string::resize(this, __n, 0);
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = this;
    else
      v8 = (std::string *)this->__r_.__value_.__r.__words[0];
    sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)v8, __n);
    return __n;
  }
  else
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
    return __n;
  }
}

uint64_t sub_1000FBFCC(uint64_t a1, _DWORD *a2, _DWORD *a3, signed int *a4)
{
  signed int v8;
  signed int v9;
  _QWORD *exception;
  _QWORD *v12;
  char v13;
  char v14;
  unsigned int v15;

  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v13, 1u);
  *a2 = v13;
  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v14, 1u);
  *a3 = v14;
  sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v15, 4u);
  v8 = bswap32(v15);
  if (v8 < 0)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 2;
  }
  v9 = *(_DWORD *)(a1 + 44);
  if (v9 && v8 > v9)
  {
    v12 = __cxa_allocate_exception(0x28uLL);
    v12[2] = 0;
    v12[3] = 0;
    *v12 = off_1003F07E8;
    v12[1] = 0;
    *((_DWORD *)v12 + 8) = 3;
  }
  *a4 = v8;
  return 6;
}

uint64_t sub_1000FC0D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  signed int v10;
  int v11;
  int i;
  uint64_t v13;
  unsigned int j;
  int v15;
  uint64_t v16;
  unsigned int v17;
  signed int v18;
  int v19;
  _QWORD *exception;
  _QWORD *v21;
  unsigned int v22;
  std::string v23;
  unsigned int v24;

  v2 = 0;
  switch(a2)
  {
    case 2:
    case 3:
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v23, 1u);
      return 1;
    case 4:
    case 10:
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 8;
      v7 = 8;
      goto LABEL_6;
    case 6:
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 2;
      v7 = 2;
      goto LABEL_6;
    case 8:
      v5 = *(_QWORD *)(a1 + 32);
      v6 = 4;
      v7 = 4;
LABEL_6:
      sub_1000FA794(v5, (uint64_t)&v23, v7);
      return v6;
    case 11:
      memset(&v23, 0, sizeof(v23));
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v24, 4u);
      v2 = sub_1000FBEAC(a1, &v23, bswap32(v24)) + 4;
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v2;
      goto LABEL_37;
    case 12:
      memset(&v23, 0, sizeof(v23));
      std::string::assign(&v23, "");
      for (i = 0; ; i += sub_1000FC0D0(a1, v13) + 3)
      {
        sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v24, 1u);
        v13 = (char)v24;
        if (!(_BYTE)v24)
          break;
        sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v24, 2u);
      }
      v2 = (i + 1);
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v2;
LABEL_37:
      operator delete(v23.__r_.__value_.__l.__data_);
      return v2;
    case 13:
      v22 = 0;
      LODWORD(v23.__r_.__value_.__l.__data_) = 0;
      v24 = 0;
      v2 = sub_1000FBFCC(a1, &v23, &v24, (signed int *)&v22);
      if (v22)
      {
        for (j = 0; j < v22; ++j)
        {
          v15 = sub_1000FC0D0(a1, LODWORD(v23.__r_.__value_.__l.__data_)) + v2;
          v2 = v15 + sub_1000FC0D0(a1, v24);
        }
      }
      return v2;
    case 14:
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v23, 1u);
      v16 = v23.__r_.__value_.__s.__data_[0];
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v23, 4u);
      v17 = bswap32(v23.__r_.__value_.__l.__data_);
      if ((v17 & 0x80000000) != 0)
        goto LABEL_39;
      v18 = *(_DWORD *)(a1 + 44);
      if (v18 && (int)v17 > v18)
        goto LABEL_40;
      if (!LODWORD(v23.__r_.__value_.__l.__data_))
        return 5;
      if (v17 <= 1)
        v19 = 1;
      else
        v19 = v17;
      LODWORD(v2) = 5;
      do
      {
        v2 = sub_1000FC0D0(a1, v16) + v2;
        --v19;
      }
      while (v19);
      return v2;
    case 15:
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v23, 1u);
      v8 = v23.__r_.__value_.__s.__data_[0];
      sub_1000FA794(*(_QWORD *)(a1 + 32), (uint64_t)&v23, 4u);
      v9 = bswap32(v23.__r_.__value_.__l.__data_);
      if ((v9 & 0x80000000) != 0)
      {
LABEL_39:
        exception = __cxa_allocate_exception(0x28uLL);
        exception[2] = 0;
        exception[3] = 0;
        *exception = off_1003F07E8;
        exception[1] = 0;
        *((_DWORD *)exception + 8) = 2;
      }
      v10 = *(_DWORD *)(a1 + 44);
      if (v10 && (int)v9 > v10)
      {
LABEL_40:
        v21 = __cxa_allocate_exception(0x28uLL);
        v21[2] = 0;
        v21[3] = 0;
        *v21 = off_1003F07E8;
        v21[1] = 0;
        *((_DWORD *)v21 + 8) = 3;
      }
      if (!LODWORD(v23.__r_.__value_.__l.__data_))
        return 5;
      if (v9 <= 1)
        v11 = 1;
      else
        v11 = v9;
      LODWORD(v2) = 5;
      do
      {
        v2 = sub_1000FC0D0(a1, v8) + v2;
        --v11;
      }
      while (v11);
      return v2;
    default:
      return v2;
  }
}

void sub_1000FC424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FC448(uint64_t a1, uint64_t ***a2, uint64_t **a3)
{
  uint64_t **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_1000FC5A4((uint64_t)v12);
  v6 = *a2;
  if (*a3 != (uint64_t *)*a2)
  {
    sub_100023E4C(&v13, v6 + 2);
    while (1)
    {
      v6 = (uint64_t **)*v6;
      if (v6 == (uint64_t **)*a3)
        break;
      v7 = *(char *)(a1 + 23);
      if (v7 >= 0)
        v8 = a1;
      else
        v8 = *(_QWORD *)a1;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a1 + 23);
      else
        v9 = *(_QWORD *)(a1 + 8);
      sub_1000F0508(&v13, v8, v9);
      sub_100023E4C(&v13, v6 + 2);
    }
  }
  std::stringbuf::str(v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_1000FC568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000FC57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000FC590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FC5A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1000FC6A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_1000FC6C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FC6DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

uint64_t sub_1000FC764(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  void **v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void **v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  result = wireless_diagnostics::google::protobuf::MessageLite::ParseFromZeroCopyStream();
  if ((result & 1) == 0)
  {
    if (qword_100417ED8 == -1)
    {
      v3 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_10;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003EFE00);
      v3 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_10;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v4;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "parsed";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to deserialize-next properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003EFE00);
      v5 = qword_100417EE0;
      if (!os_signpost_enabled((os_log_t)qword_100417EE0))
        goto LABEL_17;
      goto LABEL_11;
    }
LABEL_10:
    v5 = qword_100417EE0;
    if (!os_signpost_enabled((os_log_t)qword_100417EE0))
      goto LABEL_17;
LABEL_11:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v6;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "parsed";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to deserialize-next properly", "{\"msg%{public}.0s\":\"Failed to deserialize-next properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003EFE00);
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_23;
      goto LABEL_18;
    }
LABEL_17:
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_23;
LABEL_18:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 68289795;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v8;
    v17 = 2082;
    v18 = "assert";
    v19 = 2081;
    v20 = "parsed";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed to deserialize-next properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    if (v10 < 0)
      operator delete(__p[0]);
LABEL_23:
    abort_report_np("%s:%d: assertion failure in %s", "../../../common/util/protobuf_util.h", 31, "next");
    __break(1u);
  }
  return result;
}

uint64_t *sub_1000FCAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1000CFA7C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10006CED8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v26[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1000FCF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FCF60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1000FCF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FCF60((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000FCF60(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void ***sub_1000FCFAC(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1000FD040()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000FD09C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000FD0F8(uint64_t __dst, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = __dst;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    return v2;
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(__dst + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  return __dst;
}

void sub_1000FD150(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
  }
  sub_10006CED8(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_6:
  sub_1000675EC(a3, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1000FD1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1000FD248(uint64_t a1)
{
  if (*(char *)(a1 + 463) < 0)
  {
    operator delete(*(void **)(a1 + 440));
    sub_1000FE64C((_QWORD *)(a1 + 144));
  }
  else
  {
    sub_1000FE64C((_QWORD *)(a1 + 144));
  }
  return sub_1000FEB40((uint64_t *)a1);
}

void sub_1000FD298(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string v4;
  std::string __p;
  std::string v6;
  std::string v7;

  sub_1000FED10(a1, &v7);
  sub_1000FEDF8(a1, &v6);
  sub_1000FEEF4(a1, &__p);
  sub_10006DB18((const char *)&v7, 0, (int *)&v4);
  if (LODWORD(v4.__r_.__value_.__l.__data_) >= 2)
  {
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    else
      v4 = v7;
    *(std::string *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 32) = 0;
LABEL_12:
    *(_BYTE *)a2 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  sub_10006DB18((const char *)&v6, 0, (int *)&v4);
  if (LODWORD(v4.__r_.__value_.__l.__data_) < 2)
  {
    sub_10006DB18((const char *)&__p, 0, (int *)&v4);
    if (LODWORD(v4.__r_.__value_.__l.__data_) < 2)
    {
      *(_BYTE *)a2 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v4 = __p;
    *(std::string *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 32) = 2;
    goto LABEL_12;
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&v4, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    v4 = v6;
  *(std::string *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 32) = 1;
  *(_BYTE *)a2 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_19:
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
}

void sub_1000FD464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v25 - 17) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((*(char *)(v25 - 17) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v25 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1000FD4E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string v4;
  std::string __p;
  std::string v6;

  sub_1000FEFD8(a1, &v6);
  sub_1000FF0D4(a1, &__p);
  sub_10006DB18((const char *)&v6, 0, (int *)&v4);
  if (LODWORD(v4.__r_.__value_.__l.__data_) < 2)
  {
    sub_10006DB18((const char *)&__p, 0, (int *)&v4);
    if (LODWORD(v4.__r_.__value_.__l.__data_) < 2)
    {
      *(_BYTE *)a2 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v4 = __p;
    *(std::string *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_11:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v4, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    else
      v4 = v6;
    *(std::string *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 32) = 1;
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_11;
  }
LABEL_12:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1000FD62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v18 - 17) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v18 - 17) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v18 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1000FD680(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char __p[20];
  char v4;

  v4 = 19;
  strcpy(__p, "pedometer.thriftbin");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)__p);
  if (v4 < 0)
    operator delete(*(void **)__p);
}

void sub_1000FD720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FD76C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  void *__p[2];
  char v5;
  std::string __dst;

  v5 = 11;
  strcpy((char *)__p, "ar_state.pb");
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000675EC(&__dst, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  sub_10006DB18((const char *)&__dst, 0, (int *)__p);
  if (LODWORD(__p[0]) < 2)
  {
    *(_BYTE *)a2 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v3 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10006CED8(v3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    }
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
}

void sub_1000FD87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FD8C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  char __p[18];
  char v5;
  std::string __dst;

  v5 = 17;
  strcpy(__p, "vio_estimation.pb");
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000675EC(&__dst, (uint64_t)__p);
  if (v5 < 0)
    operator delete(*(void **)__p);
  sub_10006DB18((const char *)&__dst, 0, (int *)__p);
  if (*(_DWORD *)__p < 2u)
  {
    *(_BYTE *)a2 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v3 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10006CED8(v3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    }
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
}

void sub_1000FD9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FDA14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  void *__p;
  __int128 v6;
  std::string __dst;

  __p = operator new(0x20uLL);
  v6 = xmmword_100382FE0;
  strcpy((char *)__p, "vl_localization_result.pb");
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000675EC(&__dst, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  sub_10006DB18((const char *)&__dst, 0, (int *)&__p);
  if (__p < 2)
  {
    *(_BYTE *)a2 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v4 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10006CED8(v4, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    }
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
}

void sub_1000FDB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FDB7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  char __p[21];
  char v5;
  std::string __dst;

  v5 = 20;
  strcpy(__p, "provider_position.pb");
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000675EC(&__dst, (uint64_t)__p);
  if (v5 < 0)
    operator delete(*(void **)__p);
  sub_10006DB18((const char *)&__dst, 0, (int *)__p);
  if (*(_DWORD *)__p < 2u)
  {
    *(_BYTE *)a2 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v3 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10006CED8(v3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    }
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
}

void sub_1000FDC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FDCD4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  void *__p;
  __int128 v6;
  std::string __dst;

  __p = operator new(0x20uLL);
  v6 = xmmword_100382FF0;
  strcpy((char *)__p, "outdoor_estimator_log_entry.pb");
  if (*(char *)(a1 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  sub_1000675EC(&__dst, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  sub_10006DB18((const char *)&__dst, 0, (int *)&__p);
  if (__p < 2)
  {
    *(_BYTE *)a2 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    v4 = (_BYTE *)(a2 + 8);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10006CED8(v4, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v4 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    }
    *(_BYTE *)a2 = 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
}

void sub_1000FDDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FDE3C(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];
  std::logic_error v5;
  std::string v6;
  uint64_t v7;
  std::string v8;
  std::string v9;

  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&v6, "datarun_metadata.pb");
  sub_1000FD150(a1, (uint64_t)&v6, &v9);
  sub_10006DB18((const char *)&v9, 0, (int *)&v6);
  if (LODWORD(v6.__r_.__value_.__l.__data_) < 2)
  {
    *((_BYTE *)&v6.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&v6, "datarun_metadata.bin");
    sub_1000FD150(a1, (uint64_t)&v6, &v8);
    sub_10006DB18((const char *)&v8, 0, (int *)&v6);
    if (LODWORD(v6.__r_.__value_.__l.__data_) >= 2)
      sub_1000FE10C((uint64_t)&v6, (uint64_t)&v8);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>("Unsupported datarun format w/o metadata file in '", a1);
    std::logic_error::logic_error(&v5, &v6);
    sub_10018D04C((uint64_t)v4);
    sub_1000F7E48(&v5, (uint64_t)"std::chrono::nanoseconds UnprocessedDatarun::getStartTimeNanos() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/unprocessed_datarun.cpp", 171, (uint64_t)v4);
  }
  sub_1000F7BD0((uint64_t)&v9, &v6);
  if (v7)
  {
    v2 = *(_QWORD *)(v7 + 40);
    sub_100026CE8(&v6);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_4:
      operator delete(v9.__r_.__value_.__l.__data_);
      return v2;
    }
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(qword_10041AAF8 + 40) + 40);
    sub_100026CE8(&v6);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_4;
  }
  return v2;
}

void sub_1000FE040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::invalid_argument a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  std::invalid_argument::~invalid_argument(&a13);
  if (a19 < 0)
    operator delete(a14);
  if (*(char *)(v19 - 57) < 0)
  {
    operator delete(*(void **)(v19 - 80));
    if (*(char *)(v19 - 33) < 0)
    {
LABEL_9:
      operator delete(*(void **)(v19 - 56));
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v19 - 33) < 0)
  {
    goto LABEL_9;
  }
  _Unwind_Resume(a1);
}

void sub_1000FE10C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1003F64D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_QWORD *)(a1 + 248) = off_1003F6498;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) &= 0xF0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = off_1003F64B8;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 348) &= 0xF8u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  v2 = *(_BYTE *)(a1 + 402);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 402) = ((v2 >> 2 << 18) | 0x10000u) >> 16;
  sub_100179604(a2, 12, 7, &v5);
  if (v6)
  {
    v3 = (unint64_t *)(v6 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_1000F9FEC();
}

void sub_1000FE430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  sub_1000F9F48((uint64_t)va);
  sub_1000F9ECC(v5 - 48);
  sub_1000E095C(v5 - 32);
  sub_100172368(v4);
  _Unwind_Resume(a1);
}

void sub_1000FE47C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100172368(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000FE490(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD v4[3];

  v1 = *result;
  if (*result)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      sub_10006CF64((DIR **)(v1 + 48), (void **)(v1 + 56), v4);
      if (*(char *)(v1 + 31) < 0)
        operator delete(*(void **)(v1 + 8));
      operator delete();
    }
  }
  return result;
}

void **sub_1000FE50C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1000FE57C(uint64_t *result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD v7[3];

  v1 = result[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      sub_10006CF64((DIR **)(v1 + 48), (void **)(v1 + 56), v7);
      if (*(char *)(v1 + 31) < 0)
        operator delete(*(void **)(v1 + 8));
      operator delete();
    }
  }
  v4 = *result;
  if (*result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      sub_10006CF64((DIR **)(v4 + 48), (void **)(v4 + 56), v7);
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      operator delete();
    }
  }
  return result;
}

_QWORD *sub_1000FE64C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;

  v2 = (std::__shared_weak_count *)a1[35];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[33];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[33];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[31];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[29];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[29];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[27];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[25];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[25];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[23];
  if (!v20)
    goto LABEL_35;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[21];
    if (!v23)
      goto LABEL_41;
  }
  else
  {
LABEL_35:
    v23 = (std::__shared_weak_count *)a1[21];
    if (!v23)
      goto LABEL_41;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_41:
  v26 = (std::__shared_weak_count *)a1[19];
  if (!v26)
    goto LABEL_45;
  v27 = (unint64_t *)&v26->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v29 = (std::__shared_weak_count *)a1[17];
    if (!v29)
      goto LABEL_51;
  }
  else
  {
LABEL_45:
    v29 = (std::__shared_weak_count *)a1[17];
    if (!v29)
      goto LABEL_51;
  }
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_51:
  v32 = (std::__shared_weak_count *)a1[15];
  if (!v32)
    goto LABEL_55;
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = (std::__shared_weak_count *)a1[13];
    if (!v35)
      goto LABEL_61;
  }
  else
  {
LABEL_55:
    v35 = (std::__shared_weak_count *)a1[13];
    if (!v35)
      goto LABEL_61;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_61:
  v38 = (std::__shared_weak_count *)a1[11];
  if (!v38)
    goto LABEL_65;
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v41 = (std::__shared_weak_count *)a1[9];
    if (!v41)
      goto LABEL_71;
  }
  else
  {
LABEL_65:
    v41 = (std::__shared_weak_count *)a1[9];
    if (!v41)
      goto LABEL_71;
  }
  v42 = (unint64_t *)&v41->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_71:
  v44 = (std::__shared_weak_count *)a1[7];
  if (!v44)
    goto LABEL_75;
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v47 = (std::__shared_weak_count *)a1[5];
    if (!v47)
      goto LABEL_81;
  }
  else
  {
LABEL_75:
    v47 = (std::__shared_weak_count *)a1[5];
    if (!v47)
      goto LABEL_81;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
LABEL_81:
  v50 = (std::__shared_weak_count *)a1[3];
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      v53 = (std::__shared_weak_count *)a1[1];
      if (v53)
        goto LABEL_86;
      return a1;
    }
  }
  v53 = (std::__shared_weak_count *)a1[1];
  if (!v53)
    return a1;
LABEL_86:
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
    return a1;
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  return a1;
}

uint64_t sub_1000FEAD8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_1000FEB40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[15];
  a1[15] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[14];
  a1[14] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[13];
  a1[13] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[12];
  a1[12] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[11];
  a1[11] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[10];
  a1[10] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[9];
  a1[9] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[8];
  a1[8] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a1[7];
  a1[7] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a1[5];
  a1[5] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a1[4];
  a1[4] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a1[3];
  a1[3] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a1[2];
  a1[2] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a1[1];
  a1[1] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *a1;
  *a1 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return a1;
}

void sub_1000FED10(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;

  v4 = 15;
  strcpy((char *)__p, "accel.thriftbin");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1000FEDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FEDF8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p;
  __int128 v5;

  __p = operator new(0x20uLL);
  v5 = xmmword_100382FF0;
  strcpy((char *)__p, "process_output/accel.thriftbin");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
}

void sub_1000FEEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FEEF4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;

  v4 = 9;
  strcpy((char *)__p, "accel.dat");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1000FEF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FEFD8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p;
  __int128 v5;

  __p = operator new(0x28uLL);
  v5 = xmmword_100383000;
  strcpy((char *)__p, "process_output/rotationRate.thriftbin");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
}

void sub_1000FF088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000FF0D4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p;
  __int128 v5;

  __p = operator new(0x20uLL);
  v5 = xmmword_100383010;
  strcpy((char *)__p, "corrected_gyro.thriftbin");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)&__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p);
}

void sub_1000FF184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000FF1D0(unint64_t a1, char *__s)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_10003B4F4(a1, (unint64_t)__dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

std::string *sub_1000FF2A8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1000FF2D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1000FF2F4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1000FF324(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1000FF340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  _QWORD *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__int128 *)(a1 + 16 * (v4 >> 1));
    v9 = sub_10005D4C0(*(int **)v8);
    v11 = *(int **)(a2 - 16);
    v10 = (_QWORD *)(a2 - 16);
    if (v9 >= sub_10005D4C0(v11))
    {
      v26 = *(_OWORD *)v10;
      *v10 = 0;
      v10[1] = 0;
      while (1)
      {
        v12 = v8;
        v13 = *v8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        v14 = (std::__shared_weak_count *)v10[1];
        *(_OWORD *)v10 = v13;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__int128 *)(a1 + 16 * v7);
        v17 = sub_10005D4C0(*(int **)v8);
        v18 = v26;
        v10 = v12;
        if (v17 < sub_10005D4C0((int *)v26))
        {
          v19 = *((_QWORD *)&v26 + 1);
          v27 = 0uLL;
          v20 = (std::__shared_weak_count *)v12[1];
          *v12 = v18;
          v12[1] = v19;
          if (!v20)
            goto LABEL_18;
          goto LABEL_14;
        }
      }
      v21 = v26;
      v27 = 0uLL;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v8 + 1);
      *v8 = v21;
      if (!v20)
        goto LABEL_18;
LABEL_14:
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
LABEL_18:
      if (*((_QWORD *)&v27 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
        }
      }
    }
  }
}

void sub_1000FF4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000FEAD8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FF4EC(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[96 * v3];
  *((_QWORD *)&v19 + 1) = &v7[96 * v6];
  sub_10004F148(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_10004F148(v8 + v18, v8 + i))
    v8 -= 96;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 96;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 96;
    v14 = v11 - 96;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 96;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 96;
}

void sub_1000FF65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1000FF6A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FF6A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1000FF6FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003F0840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000FF70C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003F0840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

char *sub_1000FF73C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1000CDEB8();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1000FF8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FF910((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FF910(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1000FF974()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1000FF9D0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1000FFA2C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  wireless_diagnostics::google::protobuf::DescriptorPool *v4;
  uint64_t v5;
  uint64_t FileByName;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *__p;
  __int128 v11;

  sub_1000FFBE0(a1, a2, a3, a4);
  v5 = wireless_diagnostics::google::protobuf::DescriptorPool::generated_pool(v4);
  __p = operator new(0x19uLL);
  v11 = xmmword_100382C20;
  strcpy((char *)__p, "protobuf/gen/uuid.proto");
  FileByName = wireless_diagnostics::google::protobuf::DescriptorPool::FindFileByName(v5, &__p);
  v7 = FileByName;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p);
    if (v7)
      goto LABEL_6;
  }
  else if (FileByName)
  {
    goto LABEL_6;
  }
  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&__p, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/uuid.pb.cc", 36);
  v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: file != NULL: ");
  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&__p);
LABEL_6:
  qword_1004194D0 = *(_QWORD *)(v7 + 80);
  operator new();
}

void sub_1000FFB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000FFB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000FFBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000FFBE0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v4;

  if ((byte_1004194C0 & 1) == 0)
  {
    byte_1004194C0 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/uuid.pb.cc", a4);
    wireless_diagnostics::google::protobuf::DescriptorPool::InternalAddGeneratedFile((wireless_diagnostics::google::protobuf::DescriptorPool *)"\n\x17protobuf/gen/uuid.proto\x12\bproto.id\"E\n\x04UUID\x12\x1E\n\x16least_significant_bits\x18\x01 \x02(\x12\x12\x1D\n\x15most_significant_bits\x18\x02 \x02(\x12B\x1B\n\x19com.apple.indoor.proto.id", (const void *)0x87, v4);
    wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("protobuf/gen/uuid.proto", sub_1000FFD08);
    operator new();
  }
}

void sub_1000FFC9C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_1000FFCC4()
{
  uint64_t result;

  if (qword_10041A8E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A8E0 + 8))(qword_10041A8E0);
  result = qword_1004194D8;
  if (qword_1004194D8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1004194D8 + 8))(qword_1004194D8);
  return result;
}

uint64_t sub_1000FFD08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v0 = qword_1004194E0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v3[1] = sub_1000FFA2C;
    v4 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004194E0, v3);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v3);
  }
  v1 = qword_1004194D0;
  if (qword_10041A8E0)
    return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(qword_1004194D0);
  sub_1000FFBE0();
  return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v1);
}

void sub_1000FFDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000FFDC0(_QWORD *a1)
{
  *a1 = off_1003F0890;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_1000FFDF8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FFE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/uuid.pb.cc", 301);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_QWORD *)(a1 + 24) = v7;
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000FFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000FFED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000FFEE8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0890;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1000FFF18(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0890;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1000FFF5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1000FFF64(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_10041A8E0;
  if (!qword_10041A8E0)
  {
    sub_1000FFBE0(0, a2, a3, a4);
    return qword_10041A8E0;
  }
  return result;
}

void sub_1000FFF9C()
{
  operator new();
}

void sub_1000FFFEC()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100100014(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  if (*(_BYTE *)(a1 + 36))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 7) = 0;
  if (v2)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100100034(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t result;
  unint64_t v18;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_17;
      v18 = 0;
      v12 = (char *)*((_QWORD *)this + 1);
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v18);
        if (!(_DWORD)result)
          return result;
        v13 = v18;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
      }
      else
      {
        v13 = *v12;
        v14 = v12 + 1;
        *((_QWORD *)this + 1) = v14;
      }
      *(_QWORD *)(a1 + 16) = -(uint64_t)(v13 & 1) ^ (v13 >> 1);
      *(_DWORD *)(a1 + 36) |= 1u;
      if ((unint64_t)v14 < v10 && *v14 == 16)
      {
        v11 = v14 + 1;
        *((_QWORD *)this + 1) = v11;
        v18 = 0;
        if ((unint64_t)v11 >= v10)
          goto LABEL_27;
LABEL_25:
        if ((char)*v11 < 0)
        {
LABEL_27:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v18);
          if (!(_DWORD)result)
            return result;
          v15 = v18;
          v16 = (char *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          goto LABEL_29;
        }
        v15 = *v11;
        v16 = (char *)(v11 + 1);
        *((_QWORD *)this + 1) = v16;
LABEL_29:
        *(_QWORD *)(a1 + 24) = -(uint64_t)(v15 & 1) ^ (v15 >> 1);
        *(_DWORD *)(a1 + 36) |= 2u;
        if (v16 == (char *)v10 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        v18 = 0;
        if ((unint64_t)v11 >= v10)
          goto LABEL_27;
        goto LABEL_25;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_17:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
      return 0;
  }
}

uint64_t sub_10010022C(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 36) & 2) == 0)
    {
LABEL_3:
      v9 = *(_QWORD **)(v5 + 8);
      v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
      v7 = v9;
      if (!v9)
        return this;
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 24), (uint64_t)a2, a4);
  v10 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v10;
  if (!v10)
    return this;
LABEL_7:
  if (*v7 != v7[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  return this;
}

const wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1001002B4(wireless_diagnostics::google::protobuf::internal::WireFormat *this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  int v4;
  _QWORD *v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *((_DWORD *)this + 9);
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = *((_QWORD *)this + 3);
    *(_BYTE *)a2 = 16;
    a2 = (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * v9) ^ (v9 >> 63)), (unint64_t)a2 + 1, a3);
    v10 = (_QWORD *)*((_QWORD *)this + 1);
    v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v5 = v10;
    if (!v10)
      return a2;
    goto LABEL_7;
  }
  v8 = *((_QWORD *)this + 2);
  *(_BYTE *)a2 = 8;
  a2 = (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * v8) ^ (v8 >> 63)), (unint64_t)a2 + 1, a3);
  if ((*((_DWORD *)this + 9) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v5 = v7;
  if (!v7)
    return a2;
LABEL_7:
  if (*v5 != v5[1])
    return (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, a2, a3);
  return a2;
}

uint64_t sub_100100350(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(a1 + 36))
  {
    if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    {
      v3 = 0;
      if ((*(_BYTE *)(a1 + 36) & 2) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_QWORD *)(a1 + 16)) ^ (*(uint64_t *)(a1 + 16) >> 63)), (unint64_t)a2)+ 1;
    if ((*(_DWORD *)(a1 + 36) & 2) != 0)
LABEL_7:
      v3 = v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_QWORD *)(a1 + 24)) ^ (*(uint64_t *)(a1 + 24) >> 63)), (unint64_t)a2)+ 1;
  }
  else
  {
    v3 = 0;
  }
LABEL_8:
  v4 = *(_QWORD **)(a1 + 8);
  if (v4 && *v4 != v4[1])
    v3 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8), a2)+ v3;
  *(_DWORD *)(a1 + 32) = v3;
  return v3;
}

uint64_t sub_1001003E8(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/uuid.pb.cc", 289);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_1000FFE0C((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_10010049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001004B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001004C4(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

BOOL sub_10010050C(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 36) & 3) == 0;
}

uint64_t sub_100100520()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004194E0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_1000FFA2C;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004194E0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_1004194D0;
}

void sub_100100594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001005A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1001005B0(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  return v1;
}

void sub_1001005D4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  wireless_diagnostics::google::protobuf::DescriptorPool *v4;
  uint64_t v5;
  uint64_t FileByName;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *__p;
  __int128 v11;

  sub_100100788(a1, a2, a3, a4);
  v5 = wireless_diagnostics::google::protobuf::DescriptorPool::generated_pool(v4);
  __p = operator new(0x20uLL);
  v11 = xmmword_100383070;
  strcpy((char *)__p, "CLPPipelinedLogEntry.proto");
  FileByName = wireless_diagnostics::google::protobuf::DescriptorPool::FindFileByName(v5, &__p);
  v7 = FileByName;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p);
    if (v7)
      goto LABEL_6;
  }
  else if (FileByName)
  {
    goto LABEL_6;
  }
  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&__p, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPipelinedLogEntry.pb.cc", 38);
  v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: file != NULL: ");
  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&__p);
LABEL_6:
  qword_1004194F8 = *(_QWORD *)(v7 + 80);
  operator new();
}

void sub_100100720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100100734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100100748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100100788(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;

  if ((byte_1004194E8 & 1) == 0)
  {
    byte_1004194E8 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPipelinedLogEntry.pb.cc", a4);
    sub_10012B340(v4, v5, v6, v7);
    wireless_diagnostics::google::protobuf::DescriptorPool::InternalAddGeneratedFile((wireless_diagnostics::google::protobuf::DescriptorPool *)"\n\x1ACLPPipelinedLogEntry.proto\x12\x1Cproto.CLP.LogEntry.Pipelined\x1A\x18CLPPipelinedOutput.proto\"S\n\bLogEntry\x12G\n\x10pipelined_output\x18\x01 \x01(\v2-.proto.CLP.LogEntry.Pipelined.PipelinedOutput", (const void *)0xA9, v8);
    wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("CLPPipelinedLogEntry.proto", sub_1001008B8);
    operator new();
  }
}

void sub_10010084C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100100874()
{
  uint64_t result;

  if (qword_10041A8E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A8E8 + 8))(qword_10041A8E8);
  result = qword_100419500;
  if (qword_100419500)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_100419500 + 8))(qword_100419500);
  return result;
}

uint64_t sub_1001008B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v0 = qword_100419508;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v3[1] = sub_1001005D4;
    v4 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100419508, v3);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v3);
  }
  v1 = qword_1004194F8;
  if (qword_10041A8E8)
    return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(qword_1004194F8);
  sub_100100788();
  return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v1);
}

void sub_10010095C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100100970(_QWORD *a1)
{
  *a1 = off_1003F0958;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  return a1;
}

void sub_1001009A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001009B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BYTE v9[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPipelinedLogEntry.pb.cc", 273);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
    if ((*(_BYTE *)(a2 + 28) & 1) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) == 0)
  {
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  *(_DWORD *)(a1 + 28) |= 1u;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    operator new();
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_10041A8E8 + 16);
  sub_10012EA58(v5, v6);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100100AAC()
{
  operator delete();
}

void sub_100100AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100100AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100100AF8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003F0958;
  if ((_QWORD *)qword_10041A8E8 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100100B50(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003F0958;
  if ((_QWORD *)qword_10041A8E8 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100100BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100100BC4(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_10041A8E8;
  if (!qword_10041A8E8)
  {
    sub_100100788(0, a2, a3, a4);
    return qword_10041A8E8;
  }
  return result;
}

void sub_100100BFC()
{
  operator new();
}

void sub_100100C48()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100100C70(uint64_t this)
{
  uint64_t v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;

  v1 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = sub_10012EE0C(this);
  }
  v3 = *(_QWORD *)(v1 + 8);
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v2 + 5) = 0;
  if (v3)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v2);
  return this;
}

uint64_t sub_100100CBC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  unsigned __int8 *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int v20;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 < *((_QWORD *)this + 2) && ((char)*v7 & 0x80000000) == 0)
        break;
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if ((_DWORD)TagFallback != 10)
        goto LABEL_5;
LABEL_10:
      *(_DWORD *)(a1 + 28) |= 1u;
      v9 = *(_QWORD *)(a1 + 16);
      if (!v9)
        operator new();
      v20 = 0;
      v10 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20))return 0;
      }
      else
      {
        v20 = *v10;
        *((_QWORD *)this + 1) = v10 + 1;
      }
      v11 = *((_DWORD *)this + 14);
      v12 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v11 + 1;
      if (v11 >= v12)
        return 0;
      v13 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v20);
      if (!sub_10012EEF8(v9, this, v14, v15) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v13);
      v16 = *((_DWORD *)this + 14);
      v17 = __OFSUB__(v16, 1);
      v18 = v16 - 1;
      if (v18 < 0 == v17)
        *((_DWORD *)this + 14) = v18;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      }
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    *((_QWORD *)this + 1) = v7 + 1;
    if ((_DWORD)TagFallback == 10)
      goto LABEL_10;
LABEL_5:
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
      return 0;
  }
}

void sub_100100E94()
{
  operator delete();
}

uint64_t sub_100100EB8(uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;

  v5 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
  {
    v6 = *(_QWORD *)(this + 16);
    if (!v6)
      v6 = *(_QWORD *)(qword_10041A8E8 + 16);
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100100F28(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int *v5;
  unsigned int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v8;
  _QWORD *v9;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v10;
  _QWORD *v11;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    if (v5)
    {
      *(_BYTE *)a2 = 10;
      v6 = (_DWORD)a2 + 1;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[14];
      if (v7 <= 0x7F)
      {
LABEL_4:
        *((_BYTE *)a2 + 1) = (_BYTE)v7;
        v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
LABEL_7:
        a2 = sub_10012F45C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v5, v8, a3, a4);
        goto LABEL_8;
      }
    }
    else
    {
      v5 = *(unsigned int **)(qword_10041A8E8 + 16);
      *(_BYTE *)a2 = 10;
      v6 = (_DWORD)a2 + 1;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[14];
      if (v7 <= 0x7F)
        goto LABEL_4;
    }
    v8 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, v6, a3);
    goto LABEL_7;
  }
LABEL_8:
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v9 = v11;
  if (!v11 || *v9 == v9[1])
    return a2;
  else
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v10, a2, a3);
}

uint64_t sub_100100FDC(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v4;
  _QWORD *v5;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10012F61C(v7, a2);
      if (v8 < 0x80)
        goto LABEL_6;
    }
    else
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10012F61C(*(_QWORD *)(qword_10041A8E8 + 16), a2);
      if (v8 < 0x80)
      {
LABEL_6:
        v3 = ((_DWORD)v8 + 2);
        v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
        v5 = *(_QWORD **)(a1 + 8);
        if (!v5)
          goto LABEL_3;
        goto LABEL_10;
      }
    }
    v3 = v8
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
    v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v5 = *(_QWORD **)(a1 + 8);
    if (!v5)
      goto LABEL_3;
    goto LABEL_10;
  }
  v3 = 0;
  v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
  {
LABEL_3:
    *(_DWORD *)(a1 + 24) = v3;
    return v3;
  }
LABEL_10:
  if (*v5 == v5[1])
    goto LABEL_3;
  v9 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v4, a2)
     + v3;
  *(_DWORD *)(a1 + 24) = v9;
  return v9;
}

uint64_t sub_1001010AC(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPipelinedLogEntry.pb.cc", 261);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_1001009B8((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100101160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100101174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100101188(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_1001011D0()
{
  return 1;
}

uint64_t sub_1001011D8()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_100419508;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_1001005D4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100419508, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_1004194F8;
}

void sub_10010124C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100101260(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_10010126C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  wireless_diagnostics::google::protobuf::DescriptorPool *v4;
  uint64_t v5;
  uint64_t FileByName;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *__p;
  __int128 v11;

  sub_100101420(a1, a2, a3, a4);
  v5 = wireless_diagnostics::google::protobuf::DescriptorPool::generated_pool(v4);
  __p = operator new(0x20uLL);
  v11 = xmmword_1003830B0;
  strcpy((char *)__p, "CLPPrivateDataCapture.proto");
  FileByName = wireless_diagnostics::google::protobuf::DescriptorPool::FindFileByName(v5, &__p);
  v7 = FileByName;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p);
    if (v7)
      goto LABEL_6;
  }
  else if (FileByName)
  {
    goto LABEL_6;
  }
  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(&__p, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPrivateDataCapture.pb.cc", 38);
  v8 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: file != NULL: ");
  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v8);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&__p);
LABEL_6:
  qword_100419520 = *(_QWORD *)(v7 + 80);
  operator new();
}

void sub_1001013B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001013CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001013E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100101420(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;

  if ((byte_100419510 & 1) == 0)
  {
    byte_100419510 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPrivateDataCapture.pb.cc", a4);
    sub_100121018(v4, v5, v6, v7);
    sub_100100788(v8, v9, v10, v11);
    sub_10012A178(v12, v13, v14, v15);
    sub_100132270(v16, v17, v18, v19);
    sub_100117418(v20, v21, v22, v23);
    wireless_diagnostics::google::protobuf::DescriptorPool::InternalAddGeneratedFile((wireless_diagnostics::google::protobuf::DescriptorPool *)"\n\x1BCLPPrivateDataCapture.proto\x12\x1Eproto.CLP.LogEntry.PrivateData\x1A\x1ACLPPrivateDataShared.proto\x1A\x1ACLPPipelinedLogEntry.proto\x1A\x17CLPVisionLogEntry.proto\x1A\x1DCLPSensorSurveyLogEntry.proto\x1A!CLPOutdoorEstimatorLogEntry.proto\"\xF3\x03\x0A\x12PrivateDataCapture\x124\n\x05accel\x18\x01 \x01(\v2%.proto.CLP.LogEntry.PrivateData.Accel\x122\n\x04gyro\x18\x02 \x01(\v2$.proto.CLP.LogEntry.PrivateData.Gyro\x12K\n\x11wifi_notification\x18\x16 \x01(\v20.proto.CLP.LogEntry.PrivateData.WifiNotification\x12>\n\x10vision_log_entry\x18\xEF\x07\x20\x01(\v2#.proto.CLP.LogEntry.Vision.LogEntry\x12K\n\x17sensor_survey_log_entry\x18\xF1\x07\x20\x01(\v2).proto.CLP.LogEntry.SensorSurvey.LogEntry\x12D\n\x13pipelined_log_entry\x18\xF3\x07\x20\x01(\v2&.proto.CLP.LogEntry.Pipelined.LogEntry\x12S\n"
                                                                "\x1Boutdoor_estimator_log_entry\x18\xF4\x07\x20\x01(\v2-"
                                                                ".proto.CLP.LogEntry.OutdoorEstimator.LogEntry",
      (const void *)0x2C6,
      v24);
    wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("CLPPrivateDataCapture.proto", sub_100101598);
    operator new();
  }
}

void sub_10010152C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100101554()
{
  uint64_t result;

  if (qword_10041A8F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A8F0 + 8))(qword_10041A8F0);
  result = qword_100419528;
  if (qword_100419528)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_100419528 + 8))(qword_100419528);
  return result;
}

uint64_t sub_100101598()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v0 = qword_100419530;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v3[1] = sub_10010126C;
    v4 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100419530, v3);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v3);
  }
  v1 = qword_100419520;
  if (qword_10041A8F0)
    return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(qword_100419520);
  sub_100101420();
  return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v1);
}

void sub_10010163C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100101650(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  _BYTE v22[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v22, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPrivateDataCapture.pb.cc", 542);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v21, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v22);
    LOBYTE(v4) = *(_BYTE *)(a2 + 76);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 76);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 1u;
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      v7 = *(_QWORD *)(qword_10041A8F0 + 16);
    sub_100122FF4(v6, v7);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 2u;
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_10041A8F0 + 24);
    sub_100124928(v8, v9);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 4) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 4u;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 32);
    if (!v11)
      v11 = *(_QWORD *)(qword_10041A8F0 + 32);
    sub_100128094(v10, v11);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 8u;
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 40);
    if (!v13)
      v13 = *(_QWORD *)(qword_10041A8F0 + 40);
    sub_10012A380(v12, v13);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 0x10) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 0x10u;
    v14 = *(_QWORD *)(a1 + 48);
    if (!v14)
      operator new();
    v15 = *(_QWORD *)(a2 + 48);
    if (!v15)
      v15 = *(_QWORD *)(qword_10041A8F0 + 48);
    sub_10013249C(v14, v15);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 0x20u;
    v16 = *(_QWORD *)(a1 + 56);
    if (!v16)
      operator new();
    v17 = *(_QWORD *)(a2 + 56);
    if (!v17)
      v17 = *(_QWORD *)(qword_10041A8F0 + 56);
    sub_1001009B8(v16, v17);
    v4 = *(_DWORD *)(a2 + 76);
  }
  if ((v4 & 0x40) != 0)
  {
    *(_DWORD *)(a1 + 76) |= 0x40u;
    v18 = *(_QWORD *)(a1 + 64);
    if (!v18)
      operator new();
    v19 = *(_QWORD *)(a2 + 64);
    if (!v19)
      v19 = *(_QWORD *)(qword_10041A8F0 + 64);
    sub_100033480(v18, v19);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1001019B8()
{
  operator delete();
}

void sub_1001019DC()
{
  operator delete();
}

void sub_100101A00()
{
  operator delete();
}

void sub_100101A24()
{
  operator delete();
}

void sub_100101A48()
{
  operator delete();
}

void sub_100101A6C()
{
  operator delete();
}

void sub_100101A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100101AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100101ABC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = off_1003F0A20;
  if ((_QWORD *)qword_10041A8F0 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = a1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = a1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = a1[7];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = a1[8];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100101B90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 72) = a2;
  return result;
}

uint64_t sub_100101B98(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_10041A8F0;
  if (!qword_10041A8F0)
  {
    sub_100101420(0, a2, a3, a4);
    return qword_10041A8F0;
  }
  return result;
}

void sub_100101BD0()
{
  operator new();
}

void sub_100101C24()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100101C4C(uint64_t this)
{
  uint64_t v1;
  int v2;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  uint64_t v4;

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 76);
  if ((_BYTE)v2)
  {
    if ((*(_BYTE *)(this + 76) & 1) != 0)
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = sub_1001233A0(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(_QWORD *)(v1 + 24);
      if (this)
      {
        this = sub_100124CD4(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 32);
      if (this)
      {
        this = sub_100128624(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 40);
      if (this)
      {
        this = sub_10012A73C(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(_QWORD *)(v1 + 48);
      if (this)
      {
        this = sub_100132AB0(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        this = sub_100100C70(this);
        v2 = *(_DWORD *)(v1 + 76);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      this = *(_QWORD *)(v1 + 64);
      if (this)
        this = sub_1000C4EA8(this);
    }
  }
  v4 = *(_QWORD *)(v1 + 8);
  v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v3 + 17) = 0;
  if (v4)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v3);
  return this;
}

uint64_t sub_100101D14(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v60;
  int v61;
  int v62;
  unsigned __int8 *v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v78;
  int v79;
  int v80;
  uint64_t result;
  unsigned int v82;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v9 = TagFallback >> 3;
        if (TagFallback >> 3 > 0x3EE)
        {
          switch(v9)
          {
            case 0x3EFu:
              v10 = TagFallback & 7;
              if (v10 != 2)
                goto LABEL_38;
              *(_DWORD *)(a1 + 76) |= 8u;
              v11 = *(_QWORD *)(a1 + 40);
              if (!v11)
                goto LABEL_11;
              goto LABEL_76;
            case 0x3F1u:
              v10 = TagFallback & 7;
              if (v10 != 2)
                goto LABEL_38;
              *(_DWORD *)(a1 + 76) |= 0x10u;
              v13 = *(_QWORD *)(a1 + 48);
              if (!v13)
                goto LABEL_20;
              goto LABEL_89;
            case 0x3F3u:
              v10 = TagFallback & 7;
              if (v10 != 2)
                goto LABEL_38;
              *(_DWORD *)(a1 + 76) |= 0x20u;
              v14 = *(_QWORD *)(a1 + 56);
              if (!v14)
                goto LABEL_23;
              goto LABEL_102;
            case 0x3F4u:
              v10 = TagFallback & 7;
              if (v10 != 2)
                goto LABEL_38;
              *(_DWORD *)(a1 + 76) |= 0x40u;
              v15 = *(_QWORD *)(a1 + 64);
              if (!v15)
                goto LABEL_26;
              goto LABEL_115;
            default:
              goto LABEL_37;
          }
        }
        if (v9 != 1)
          break;
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_38;
        *(_DWORD *)(a1 + 76) |= 1u;
        v16 = *(_QWORD *)(a1 + 16);
        if (!v16)
          operator new();
        v82 = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
        }
        else
        {
          v82 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v20 = *((_DWORD *)this + 14);
        v21 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v20 + 1;
        if (v20 >= v21)
          return 0;
        v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
        if (!sub_100123440(v16, this, v23, v24) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
        v25 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v27 < 0 == v26)
          *((_DWORD *)this + 14) = v27;
        v28 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 < *((_QWORD *)this + 2) && *v28 == 18)
        {
          *((_QWORD *)this + 1) = v28 + 1;
          *(_DWORD *)(a1 + 76) |= 2u;
          v18 = *(_QWORD *)(a1 + 24);
          if (!v18)
LABEL_50:
            operator new();
          goto LABEL_35;
        }
      }
      if (v9 != 2)
        break;
      v10 = TagFallback & 7;
      if (v10 != 2)
        goto LABEL_38;
      *(_DWORD *)(a1 + 76) |= 2u;
      v18 = *(_QWORD *)(a1 + 24);
      if (!v18)
        goto LABEL_50;
LABEL_35:
      v82 = 0;
      v19 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
      }
      else
      {
        v82 = *v19;
        *((_QWORD *)this + 1) = v19 + 1;
      }
      v29 = *((_DWORD *)this + 14);
      v30 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v29 + 1;
      if (v29 >= v30)
        return 0;
      v31 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
      if (!sub_100124D74(v18, this, v32, v33) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v31);
      v34 = *((_DWORD *)this + 14);
      v26 = __OFSUB__(v34, 1);
      v35 = v34 - 1;
      if (v35 < 0 == v26)
        *((_DWORD *)this + 14) = v35;
      v36 = (unsigned __int8 *)*((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) - (int)v36 > 1 && *v36 == 178 && v36[1] == 1)
      {
        *((_QWORD *)this + 1) = v36 + 2;
        *(_DWORD *)(a1 + 76) |= 4u;
        v12 = *(_QWORD *)(a1 + 32);
        if (!v12)
LABEL_17:
          operator new();
LABEL_63:
        v82 = 0;
        v37 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v37 >= *((_QWORD *)this + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
        }
        else
        {
          v82 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)this + 14);
        v39 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v38 + 1;
        if (v38 >= v39)
          return 0;
        v40 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
        if (!sub_100128760(v12, this, v41, v42) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v40);
        v43 = *((_DWORD *)this + 14);
        v26 = __OFSUB__(v43, 1);
        v44 = v43 - 1;
        if (v44 < 0 == v26)
          *((_DWORD *)this + 14) = v44;
        v45 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v45 > 1 && *v45 == 250 && v45[1] == 62)
        {
          *((_QWORD *)this + 1) = v45 + 2;
          *(_DWORD *)(a1 + 76) |= 8u;
          v11 = *(_QWORD *)(a1 + 40);
          if (!v11)
LABEL_11:
            operator new();
LABEL_76:
          v82 = 0;
          v46 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v46 >= *((_QWORD *)this + 2) || *v46 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
          }
          else
          {
            v82 = *v46;
            *((_QWORD *)this + 1) = v46 + 1;
          }
          v47 = *((_DWORD *)this + 14);
          v48 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v47 + 1;
          if (v47 >= v48)
            return 0;
          v49 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
          if (!sub_10012A7BC(v11, this, v50, v51) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v49);
          v52 = *((_DWORD *)this + 14);
          v26 = __OFSUB__(v52, 1);
          v53 = v52 - 1;
          if (v53 < 0 == v26)
            *((_DWORD *)this + 14) = v53;
          v54 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if (*((_DWORD *)this + 4) - (int)v54 > 1 && *v54 == 138 && v54[1] == 63)
          {
            *((_QWORD *)this + 1) = v54 + 2;
            *(_DWORD *)(a1 + 76) |= 0x10u;
            v13 = *(_QWORD *)(a1 + 48);
            if (!v13)
LABEL_20:
              operator new();
LABEL_89:
            v82 = 0;
            v55 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v55 >= *((_QWORD *)this + 2) || *v55 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
            }
            else
            {
              v82 = *v55;
              *((_QWORD *)this + 1) = v55 + 1;
            }
            v56 = *((_DWORD *)this + 14);
            v57 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v56 + 1;
            if (v56 >= v57)
              return 0;
            v58 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
            if (!sub_100132B8C(v13, this, v59, v60) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v58);
            v61 = *((_DWORD *)this + 14);
            v26 = __OFSUB__(v61, 1);
            v62 = v61 - 1;
            if (v62 < 0 == v26)
              *((_DWORD *)this + 14) = v62;
            v63 = (unsigned __int8 *)*((_QWORD *)this + 1);
            if (*((_DWORD *)this + 4) - (int)v63 > 1 && *v63 == 154 && v63[1] == 63)
            {
              *((_QWORD *)this + 1) = v63 + 2;
              *(_DWORD *)(a1 + 76) |= 0x20u;
              v14 = *(_QWORD *)(a1 + 56);
              if (!v14)
LABEL_23:
                operator new();
LABEL_102:
              v82 = 0;
              v64 = (char *)*((_QWORD *)this + 1);
              if ((unint64_t)v64 >= *((_QWORD *)this + 2) || *v64 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
              }
              else
              {
                v82 = *v64;
                *((_QWORD *)this + 1) = v64 + 1;
              }
              v65 = *((_DWORD *)this + 14);
              v66 = *((_DWORD *)this + 15);
              *((_DWORD *)this + 14) = v65 + 1;
              if (v65 >= v66)
                return 0;
              v67 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
              if (!sub_100100CBC(v14, this, v68, v69) || !*((_BYTE *)this + 36))
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v67);
              v70 = *((_DWORD *)this + 14);
              v26 = __OFSUB__(v70, 1);
              v71 = v70 - 1;
              if (v71 < 0 == v26)
                *((_DWORD *)this + 14) = v71;
              v72 = (unsigned __int8 *)*((_QWORD *)this + 1);
              if (*((_DWORD *)this + 4) - (int)v72 > 1 && *v72 == 162 && v72[1] == 63)
              {
                *((_QWORD *)this + 1) = v72 + 2;
                *(_DWORD *)(a1 + 76) |= 0x40u;
                v15 = *(_QWORD *)(a1 + 64);
                if (!v15)
LABEL_26:
                  operator new();
LABEL_115:
                v82 = 0;
                v73 = (char *)*((_QWORD *)this + 1);
                if ((unint64_t)v73 >= *((_QWORD *)this + 2) || *v73 < 0)
                {
                  if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v82))return 0;
                }
                else
                {
                  v82 = *v73;
                  *((_QWORD *)this + 1) = v73 + 1;
                }
                v74 = *((_DWORD *)this + 14);
                v75 = *((_DWORD *)this + 15);
                *((_DWORD *)this + 14) = v74 + 1;
                if (v74 >= v75)
                  return 0;
                v76 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v82);
                if (!sub_10000F2CC(v15, this, v77, v78) || !*((_BYTE *)this + 36))
                  return 0;
                wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v76);
                v79 = *((_DWORD *)this + 14);
                v26 = __OFSUB__(v79, 1);
                v80 = v79 - 1;
                if (v80 < 0 == v26)
                  *((_DWORD *)this + 14) = v80;
                if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
                  && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                {
                  *((_DWORD *)this + 8) = 0;
                  result = 1;
                  *((_BYTE *)this + 36) = 1;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    if (v9 == 22)
    {
      v10 = TagFallback & 7;
      if (v10 == 2)
      {
        *(_DWORD *)(a1 + 76) |= 4u;
        v12 = *(_QWORD *)(a1 + 32);
        if (!v12)
          goto LABEL_17;
        goto LABEL_63;
      }
    }
    else
    {
LABEL_37:
      v10 = TagFallback & 7;
    }
LABEL_38:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
      return 0;
  }
}

void sub_10010260C()
{
  operator delete();
}

uint64_t sub_1001026E8(uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = this;
  v6 = *(_DWORD *)(this + 76);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_14:
    v11 = *(_QWORD *)(v5 + 24);
    if (v11)
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v11, a2, a4);
      v6 = *(_DWORD *)(v5 + 76);
      if ((v6 & 4) != 0)
        goto LABEL_18;
    }
    else
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(qword_10041A8F0 + 24), a2, a4);
      v6 = *(_DWORD *)(v5 + 76);
      if ((v6 & 4) != 0)
        goto LABEL_18;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
LABEL_22:
    v13 = *(_QWORD *)(v5 + 40);
    if (v13)
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF, v13, a2, a4);
      v6 = *(_DWORD *)(v5 + 76);
      if ((v6 & 0x10) != 0)
        goto LABEL_26;
    }
    else
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF, *(_QWORD *)(qword_10041A8F0 + 40), a2, a4);
      v6 = *(_DWORD *)(v5 + 76);
      if ((v6 & 0x10) != 0)
        goto LABEL_26;
    }
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
LABEL_30:
    v15 = *(_QWORD *)(v5 + 56);
    if (v15)
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F3, v15, a2, a4);
      if ((*(_DWORD *)(v5 + 76) & 0x40) != 0)
        goto LABEL_34;
    }
    else
    {
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F3, *(_QWORD *)(qword_10041A8F0 + 56), a2, a4);
      if ((*(_DWORD *)(v5 + 76) & 0x40) != 0)
        goto LABEL_34;
    }
LABEL_8:
    v9 = *(_QWORD **)(v5 + 8);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
    v7 = v9;
    if (!v9)
      return this;
    goto LABEL_38;
  }
  v10 = *(_QWORD *)(this + 16);
  if (v10)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v10, a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(qword_10041A8F0 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 2) != 0)
      goto LABEL_14;
  }
LABEL_3:
  if ((v6 & 4) == 0)
    goto LABEL_4;
LABEL_18:
  v12 = *(_QWORD *)(v5 + 32);
  if (v12)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v12, a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 8) != 0)
      goto LABEL_22;
  }
  else
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(_QWORD *)(qword_10041A8F0 + 32), a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 8) != 0)
      goto LABEL_22;
  }
LABEL_5:
  if ((v6 & 0x10) == 0)
    goto LABEL_6;
LABEL_26:
  v14 = *(_QWORD *)(v5 + 48);
  if (v14)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F1, v14, a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 0x20) != 0)
      goto LABEL_30;
  }
  else
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F1, *(_QWORD *)(qword_10041A8F0 + 48), a2, a4);
    v6 = *(_DWORD *)(v5 + 76);
    if ((v6 & 0x20) != 0)
      goto LABEL_30;
  }
LABEL_7:
  if ((v6 & 0x40) == 0)
    goto LABEL_8;
LABEL_34:
  v16 = *(_QWORD *)(v5 + 64);
  if (v16)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F4, v16, a2, a4);
    v17 = *(_QWORD **)(v5 + 8);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
    v7 = v17;
    if (!v17)
      return this;
  }
  else
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F4, *(_QWORD *)(qword_10041A8F0 + 64), a2, a4);
    v18 = *(_QWORD **)(v5 + 8);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
    v7 = v18;
    if (!v18)
      return this;
  }
LABEL_38:
  if (*v7 != v7[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  return this;
}

uint64_t sub_100102914(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPPrivateDataCapture.pb.cc", 530);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_100101650((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_1001029C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001029DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001029F0(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100102A38()
{
  return 1;
}

uint64_t sub_100102A40()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_100419530;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_10010126C;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_100419530, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419520;
}

void sub_100102AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100102AC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_100102AD4()
{
  wireless_diagnostics::google::protobuf::DescriptorPool *v0;
  uint64_t v1;
  uint64_t FileByName;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char __p[21];
  char v7;

  v0 = (wireless_diagnostics::google::protobuf::DescriptorPool *)sub_10010365C();
  v1 = wireless_diagnostics::google::protobuf::DescriptorPool::generated_pool(v0);
  v7 = 20;
  strcpy(__p, "CLPVisionEvent.proto");
  FileByName = wireless_diagnostics::google::protobuf::DescriptorPool::FindFileByName(v1, __p);
  v3 = FileByName;
  if (v7 < 0)
  {
    operator delete(*(void **)__p);
    if (v3)
      goto LABEL_6;
  }
  else if (FileByName)
  {
    goto LABEL_6;
  }
  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(__p, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 100);
  v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: file != NULL: ");
  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v5, v4);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)__p);
LABEL_6:
  qword_100419548 = *(_QWORD *)(v3 + 80);
  operator new();
}

void sub_1001035A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001035BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001035D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10010365C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  int v4;

  if ((byte_100419538 & 1) == 0)
  {
    byte_100419538 = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", a4);
    wireless_diagnostics::google::protobuf::DescriptorPool::InternalAddGeneratedFile((wireless_diagnostics::google::protobuf::DescriptorPool *)&unk_100383284, (const void *)0x124D, v4);
    wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("CLPVisionEvent.proto", sub_100104598);
    operator new();
  }
}

void sub_100103F4C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100103F78()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100103FA4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100104170(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  operator delete();
  _Unwind_Resume(a1);
}

void sub_10010419C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_1001041C4()
{
  uint64_t result;

  if (qword_10041A8F8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A8F8 + 8))(qword_10041A8F8);
  if (qword_100419550)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419550 + 8))(qword_100419550);
  if (qword_10041A900)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A900 + 8))(qword_10041A900);
  if (qword_100419560)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419560 + 8))(qword_100419560);
  if (qword_10041A908)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A908 + 8))(qword_10041A908);
  if (qword_100419570)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419570 + 8))(qword_100419570);
  if (qword_10041A910)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A910 + 8))(qword_10041A910);
  if (qword_100419580)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419580 + 8))(qword_100419580);
  if (qword_10041A918)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A918 + 8))(qword_10041A918);
  if (qword_100419590)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419590 + 8))(qword_100419590);
  if (qword_10041A920)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A920 + 8))(qword_10041A920);
  if (qword_1004195A0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195A0 + 8))(qword_1004195A0);
  if (qword_10041A928)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A928 + 8))(qword_10041A928);
  if (qword_1004195B0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195B0 + 8))(qword_1004195B0);
  if (qword_10041A930)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A930 + 8))(qword_10041A930);
  if (qword_1004195C0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195C0 + 8))(qword_1004195C0);
  if (qword_10041A938)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A938 + 8))(qword_10041A938);
  if (qword_1004195D0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195D0 + 8))(qword_1004195D0);
  if (qword_10041A940)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A940 + 8))(qword_10041A940);
  if (qword_1004195E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195E0 + 8))(qword_1004195E0);
  if (qword_10041A948)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A948 + 8))(qword_10041A948);
  if (qword_1004195F0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1004195F0 + 8))(qword_1004195F0);
  if (qword_10041A950)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A950 + 8))(qword_10041A950);
  if (qword_100419600)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419600 + 8))(qword_100419600);
  if (qword_10041A958)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A958 + 8))(qword_10041A958);
  if (qword_100419610)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419610 + 8))(qword_100419610);
  if (qword_10041A960)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A960 + 8))(qword_10041A960);
  if (qword_100419620)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419620 + 8))(qword_100419620);
  if (qword_10041A968)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A968 + 8))(qword_10041A968);
  if (qword_100419630)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419630 + 8))(qword_100419630);
  if (qword_10041A970)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A970 + 8))(qword_10041A970);
  if (qword_100419640)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419640 + 8))(qword_100419640);
  if (qword_10041A978)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A978 + 8))(qword_10041A978);
  if (qword_100419650)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419650 + 8))(qword_100419650);
  if (qword_10041A980)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A980 + 8))(qword_10041A980);
  if (qword_100419660)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419660 + 8))(qword_100419660);
  if (qword_10041A988)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A988 + 8))(qword_10041A988);
  if (qword_100419670)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_100419670 + 8))(qword_100419670);
  if (qword_10041A990)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_10041A990 + 8))(qword_10041A990);
  result = qword_100419680;
  if (qword_100419680)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_100419680 + 8))(qword_100419680);
  return result;
}

uint64_t sub_100104598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  char v42;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v41[1] = sub_100102AD4;
    v42 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v41);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v41);
  }
  v1 = qword_100419548;
  if (!qword_10041A8F8)
    ((void (*)(void))sub_10010365C)();
  v2 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v1);
  v3 = qword_100419558;
  if (!qword_10041A900)
    sub_10010365C(v2);
  v4 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v3);
  v5 = qword_100419568;
  if (!qword_10041A908)
    sub_10010365C(v4);
  v6 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v5);
  v7 = qword_100419578;
  if (!qword_10041A910)
    sub_10010365C(v6);
  v8 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v7);
  v9 = qword_100419588;
  if (!qword_10041A918)
    sub_10010365C(v8);
  v10 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v9);
  v11 = qword_100419598;
  if (!qword_10041A920)
    sub_10010365C(v10);
  v12 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v11);
  v13 = qword_1004195A8;
  if (!qword_10041A928)
    sub_10010365C(v12);
  v14 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v13);
  v15 = qword_1004195B8;
  if (!qword_10041A930)
    sub_10010365C(v14);
  v16 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v15);
  v17 = qword_1004195C8;
  if (!qword_10041A938)
    sub_10010365C(v16);
  v18 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v17);
  v19 = qword_1004195D8;
  if (!qword_10041A940)
    sub_10010365C(v18);
  v20 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v19);
  v21 = qword_1004195E8;
  if (!qword_10041A948)
    sub_10010365C(v20);
  v22 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v21);
  v23 = qword_1004195F8;
  if (!qword_10041A950)
    sub_10010365C(v22);
  v24 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v23);
  v25 = qword_100419608;
  if (!qword_10041A958)
    sub_10010365C(v24);
  v26 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v25);
  v27 = qword_100419618;
  if (!qword_10041A960)
    sub_10010365C(v26);
  v28 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v27);
  v29 = qword_100419628;
  if (!qword_10041A968)
    sub_10010365C(v28);
  v30 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v29);
  v31 = qword_100419638;
  if (!qword_10041A970)
    sub_10010365C(v30);
  v32 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v31);
  v33 = qword_100419648;
  if (!qword_10041A978)
    sub_10010365C(v32);
  v34 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v33);
  v35 = qword_100419658;
  if (!qword_10041A980)
    sub_10010365C(v34);
  v36 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v35);
  v37 = qword_100419668;
  if (!qword_10041A988)
    sub_10010365C(v36);
  v38 = wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v37);
  v39 = qword_100419678;
  if (qword_10041A990)
    return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(qword_100419678);
  sub_10010365C(v38);
  return wireless_diagnostics::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v39);
}

void sub_1001048E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001048FC(_QWORD *a1)
{
  *a1 = off_1003F0C48;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_100104934(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104948(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F1068;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 88) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1001049A0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001049B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F1488;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_100383120;
  return a1;
}

void sub_1001049F8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100104A0C(_QWORD *a1)
{
  *a1 = off_1003F1538;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_100104A44(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100104A58(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F17F8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_100104A98(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100104AAC(int a1)
{
  return (a1 + 1) < 4;
}

uint64_t sub_100104ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1053);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_QWORD *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 44) & 4) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 1u;
  *(_QWORD *)(a1 + 16) = v8;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v5 & 4) != 0)
  {
LABEL_7:
    v6 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_QWORD *)(a1 + 32) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100104B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100104BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100104BC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0AE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100104BF0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0AE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100104C34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

void sub_100104C3C()
{
  operator new();
}

void sub_100104C8C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100104CB4(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  if (*(_BYTE *)(a1 + 44))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 9) = 0;
  if (v2)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100104CD8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t result;
  unint64_t v14;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v10 = TagFallback & 7;
        if (v10 != 1)
          goto LABEL_28;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_19;
        }
      }
      if (v9 == 2)
        break;
      if (v9 == 3)
      {
        v10 = TagFallback & 7;
        if (v10 == 1)
        {
          v14 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
            return 0;
          goto LABEL_23;
        }
      }
      else
      {
        v10 = TagFallback & 7;
      }
LABEL_28:
      if (v10 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v10 = TagFallback & 7;
    if (v10 != 1)
      goto LABEL_28;
LABEL_19:
    v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 44) |= 2u;
    v12 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 25)
    {
      *((_QWORD *)this + 1) = v12 + 1;
      v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
        return 0;
LABEL_23:
      *(_QWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 44) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100104EE0(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = this;
  v5 = *(_DWORD *)(this + 44);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(this + 16), a3);
    v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v4 + 24), a3);
  if ((*(_DWORD *)(v4 + 44) & 4) == 0)
  {
LABEL_4:
    v8 = *(_QWORD **)(v4 + 8);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
    v6 = v8;
    if (!v8)
      return this;
    goto LABEL_9;
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (int)a2, *(double *)(v4 + 32), a3);
  v9 = *(_QWORD **)(v4 + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v6 = v9;
  if (!v9)
    return this;
LABEL_9:
  if (*v6 != v6[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  return this;
}

uint64_t sub_100104F84(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = *(_DWORD *)(a1 + 44);
  if ((v3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 1) = v7;
    a2 += 9;
    v3 = *(_DWORD *)(a1 + 44);
    if ((v3 & 2) == 0)
    {
LABEL_3:
      if ((v3 & 4) == 0)
        goto LABEL_4;
LABEL_8:
      v9 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)a2 = 25;
      *(_QWORD *)(a2 + 1) = v9;
      a2 += 9;
      v10 = *(_QWORD **)(a1 + 8);
      v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v5 = v10;
      if (!v10)
        return a2;
      goto LABEL_9;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)a2 = 17;
  *(_QWORD *)(a2 + 1) = v8;
  a2 += 9;
  if ((*(_DWORD *)(a1 + 44) & 4) != 0)
    goto LABEL_8;
LABEL_4:
  v6 = *(_QWORD **)(a1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v5 = v6;
  if (!v6)
    return a2;
LABEL_9:
  if (*v5 != v5[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v4, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
  return a2;
}

uint64_t sub_1001050B4(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *(unsigned __int8 *)(a1 + 44);
  v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
    v4 += 9;
  if ((v3 & 4) != 0)
    v4 += 9;
  if (*(_BYTE *)(a1 + 44))
    v5 = v4;
  else
    v5 = 0;
  v8 = *(_QWORD **)(a1 + 8);
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v7 = v8;
  if (v8 && *v7 != v7[1])
    v5 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v6, a2)
       + v5;
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

uint64_t sub_100105124(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1041);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_100104ABC((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_1001051D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001051EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100105200(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100105248()
{
  return 1;
}

uint64_t sub_100105250()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419548;
}

void sub_1001052C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001052D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1273);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    v8 = v6 + v5;
    if (v7 < v8)
    {
      v9 = 2 * v7;
      if (2 * v7 <= v8)
        v9 = v8;
      if (v9 <= 4)
        v9 = 4;
      *(_DWORD *)(a1 + 28) = v9;
      operator new[]();
    }
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 4 * v6), *(const void **)(a2 + 16), 4 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100105410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100105424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100105438(_QWORD *a1)
{
  *a1 = off_1003F0B98;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100105488(_QWORD *a1)
{
  *a1 = off_1003F0B98;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1001054EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void sub_1001054F4()
{
  operator new();
}

void sub_100105544()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10010556C(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 7) = 0;
  if (v2)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100105584(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  signed int v19;
  signed int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  unsigned int v28;

  v6 = (uint64_t *)(a1 + 16);
  v7 = a1 + 8;
  do
  {
    while (1)
    {
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v8 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      v10 = TagFallback & 7;
      if ((TagFallback & 0xFFFFFFF8) == 8)
        break;
LABEL_10:
      if (v10 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
        return 0;
    }
    if (v10 != 2)
    {
      if (v10 != 5)
        goto LABEL_10;
      goto LABEL_15;
    }
    result = sub_100105820(this, v6);
    if (!(_DWORD)result)
      return result;
    while (1)
    {
      v26 = (_BYTE *)*((_QWORD *)this + 1);
      v27 = (_BYTE *)*((_QWORD *)this + 2);
      if (v26 >= v27 || *v26 != 13)
        break;
      *((_QWORD *)this + 1) = v26 + 1;
LABEL_15:
      v28 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v28) & 1) == 0)
        return 0;
      v12 = v28;
      v13 = *(_DWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 16);
      if (v13 == *(_DWORD *)(a1 + 28))
      {
        if (2 * v13 <= v13 + 1)
          v15 = v13 + 1;
        else
          v15 = 2 * v13;
        if (v15 <= 4)
          v15 = 4;
        *(_DWORD *)(a1 + 28) = v15;
        operator new[]();
      }
      v16 = v13 + 1;
      *(_DWORD *)(a1 + 24) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      v17 = *((_QWORD *)this + 1);
      v18 = *((_DWORD *)this + 4) - v17;
      if (v18 >= 1)
      {
        v19 = *(_DWORD *)(a1 + 28) - v16;
        v20 = v18 / 5u;
        if ((int)(v18 / 5u) >= v19)
          v20 = *(_DWORD *)(a1 + 28) - v16;
        if (v20 >= 1)
        {
          v21 = 0;
          v22 = v13 + 2;
          v23 = v14 + 4 * v16;
          v24 = ((*((_DWORD *)this + 4) - v17) * (unsigned __int128)0x3333333333333334uLL) >> 64;
          if (v24 >= v19)
            LODWORD(v24) = v19;
          while (*(_BYTE *)v17 == 13)
          {
            v25 = *(_DWORD *)(v17 + 1);
            *(_DWORD *)(a1 + 24) = v22 + v21;
            *(_DWORD *)(v23 + 4 * v21++) = v25;
            v17 += 5;
            if ((_DWORD)v24 == (_DWORD)v21)
              goto LABEL_31;
          }
          v20 = v21;
          if ((_DWORD)v21)
          {
LABEL_31:
            wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 5 * v20);
            continue;
          }
        }
      }
    }
  }
  while (v26 != v27 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100105820(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  v12 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!(_DWORD)result)
      return result;
    v5 = v12;
  }
  else
  {
    v5 = *v4;
    v12 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_17:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      v13 = 0;
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13);
      if (!(_DWORD)result)
        break;
      v9 = v13;
      v10 = *((_DWORD *)a2 + 2);
      if (v10 == *((_DWORD *)a2 + 3))
      {
        if (2 * v10 <= v10 + 1)
          v11 = v10 + 1;
        else
          v11 = 2 * v10;
        if (v11 <= 4)
          v11 = 4;
        *((_DWORD *)a2 + 3) = v11;
        operator new[]();
      }
      v8 = *a2;
      *((_DWORD *)a2 + 2) = v10 + 1;
      *(_DWORD *)(v8 + 4 * v10) = v9;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_100105990(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;

  v4 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v5 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(float *)(*(_QWORD *)(v4 + 16) + 4 * v5++), a3);
    while (v5 < *(int *)(v4 + 24));
  }
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

uint64_t sub_100105A18(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*(int *)(a1 + 24) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v3);
      *(_BYTE *)a2 = 13;
      *(_DWORD *)(a2 + 1) = v4;
      a2 += 5;
      ++v3;
    }
    while (v3 < *(int *)(a1 + 24));
  }
  v7 = *(_QWORD **)(a1 + 8);
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = v7;
  if (!v7 || *v6 == v6[1])
    return a2;
  else
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v5, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
}

uint64_t sub_100105A88(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  wireless_diagnostics::google::protobuf::internal::WireFormat *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v4 = v5;
  v6 = (5 * *((_DWORD *)v3 + 4));
  if (v5 && *v4 != v4[1])
    v6 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v3, a2)
       + v6;
  *(_DWORD *)(a1 + 32) = v6;
  return v6;
}

uint64_t sub_100105AD0(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1261);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_1001052D8((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100105B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100105B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100105BAC(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100105BF4()
{
  return 1;
}

uint64_t sub_100105BFC()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419558;
}

void sub_100105C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100105C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1481);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 24);
    v7 = *(_DWORD *)(a1 + 28);
    v8 = v6 + v5;
    if (v7 < v8)
    {
      v9 = 2 * v7;
      if (2 * v7 <= v8)
        v9 = v8;
      if (v9 <= 4)
        v9 = 4;
      *(_DWORD *)(a1 + 28) = v9;
      operator new[]();
    }
    memcpy((void *)(*(_QWORD *)(a1 + 16) + 8 * v6), *(const void **)(a2 + 16), 8 * *(int *)(a2 + 24));
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100105DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100105DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100105DE4(_QWORD *a1)
{
  *a1 = off_1003F0C48;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100105E34(_QWORD *a1)
{
  *a1 = off_1003F0C48;
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100105E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_100105EA0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_10041A908;
  if (!qword_10041A908)
  {
    sub_10010365C(0, a2, a3, a4);
    return qword_10041A908;
  }
  return result;
}

void sub_100105ED8()
{
  operator new();
}

void sub_100105F28()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100105F50(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 7) = 0;
  if (v2)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100105F68(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  signed int v19;
  signed int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  unint64_t v28;

  v6 = (uint64_t *)(a1 + 16);
  v7 = a1 + 8;
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    v10 = TagFallback & 7;
    if ((TagFallback & 0xFFFFFFF8) == 8)
    {
      if (v10 == 1)
      {
        while (1)
        {
          v28 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v28) & 1) == 0)
            return 0;
          v12 = v28;
          v13 = *(_DWORD *)(a1 + 24);
          v14 = *(_QWORD *)(a1 + 16);
          if (v13 == *(_DWORD *)(a1 + 28))
          {
            if (2 * v13 <= v13 + 1)
              v15 = v13 + 1;
            else
              v15 = 2 * v13;
            if (v15 <= 4)
              v15 = 4;
            *(_DWORD *)(a1 + 28) = v15;
            operator new[]();
          }
          v16 = v13 + 1;
          *(_DWORD *)(a1 + 24) = v13 + 1;
          *(_QWORD *)(v14 + 8 * v13) = v12;
          v17 = *((_QWORD *)this + 1);
          v18 = *((_DWORD *)this + 4) - v17;
          if (v18 >= 1)
          {
            v19 = *(_DWORD *)(a1 + 28) - v16;
            v20 = v18 / 9u;
            if ((int)(v18 / 9u) >= v19)
              v20 = *(_DWORD *)(a1 + 28) - v16;
            if (v20 >= 1)
            {
              v21 = 0;
              v22 = v13 + 2;
              v23 = v14 + 8 * v16;
              v24 = ((*((_DWORD *)this + 4) - v17) * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64;
              if (v24 >= v19)
                LODWORD(v24) = v19;
              while (*(_BYTE *)v17 == 9)
              {
                v25 = *(_QWORD *)(v17 + 1);
                *(_DWORD *)(a1 + 24) = v22 + v21;
                *(_QWORD *)(v23 + 8 * v21++) = v25;
                v17 += 9;
                if ((_DWORD)v24 == (_DWORD)v21)
                  goto LABEL_31;
              }
              v20 = v21;
              if ((_DWORD)v21)
LABEL_31:
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(this, 9 * v20);
            }
          }
LABEL_32:
          v26 = (_BYTE *)*((_QWORD *)this + 1);
          v27 = (_BYTE *)*((_QWORD *)this + 2);
          if (v26 >= v27 || *v26 != 9)
          {
            if (v26 == v27 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
          *((_QWORD *)this + 1) = v26 + 1;
        }
      }
      if (v10 == 2)
        break;
    }
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
  result = sub_10010620C(this, v6);
  if ((_DWORD)result)
    goto LABEL_32;
  return result;
}

uint64_t sub_10010620C(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;

  v12 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!(_DWORD)result)
      return result;
    v5 = v12;
  }
  else
  {
    v5 = *v4;
    v12 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) < 1)
  {
LABEL_17:
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v7);
    return 1;
  }
  else
  {
    while (1)
    {
      v13 = 0;
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v13);
      if (!(_DWORD)result)
        break;
      v9 = v13;
      v10 = *((_DWORD *)a2 + 2);
      if (v10 == *((_DWORD *)a2 + 3))
      {
        if (2 * v10 <= v10 + 1)
          v11 = v10 + 1;
        else
          v11 = 2 * v10;
        if (v11 <= 4)
          v11 = 4;
        *((_DWORD *)a2 + 3) = v11;
        operator new[]();
      }
      v8 = *a2;
      *((_DWORD *)a2 + 2) = v10 + 1;
      *(_QWORD *)(v8 + 8 * v10) = v9;
      if ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) <= 0)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_10010637C(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;

  v4 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v5 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(*(_QWORD *)(v4 + 16) + 8 * v5++), a3);
    while (v5 < *(int *)(v4 + 24));
  }
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

uint64_t sub_100106404(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*(int *)(a1 + 24) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v3);
      *(_BYTE *)a2 = 9;
      *(_QWORD *)(a2 + 1) = v4;
      a2 += 9;
      ++v3;
    }
    while (v3 < *(int *)(a1 + 24));
  }
  v7 = *(_QWORD **)(a1 + 8);
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = v7;
  if (!v7 || *v6 == v6[1])
    return a2;
  else
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v5, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
}

uint64_t sub_100106494(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  wireless_diagnostics::google::protobuf::internal::WireFormat *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v4 = v5;
  v6 = (9 * *((_DWORD *)v3 + 4));
  if (v5 && *v4 != v4[1])
    v6 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v3, a2)
       + v6;
  *(_DWORD *)(a1 + 32) = v6;
  return v6;
}

uint64_t sub_1001064DC(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1469);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_100105C84((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100106590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001065A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001065B8(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100106600()
{
  return 1;
}

uint64_t sub_100106608()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419568;
}

void sub_10010667C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100106690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1684);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  sub_10011667C((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), a2 + 16);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100106714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100106728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10010673C(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)a1 = off_1003F0CF8;
  v2 = *(_DWORD *)(a1 + 28);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1001067CC(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)a1 = off_1003F0CF8;
  v2 = *(_DWORD *)(a1 + 28);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100106870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

void sub_100106878()
{
  operator new();
}

void sub_1001068CC()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_1001068F4(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;

  v1 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  v5 = *(_QWORD *)(v1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 9) = 0;
  if (v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  return this;
}

uint64_t sub_100106964(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t result;
  unsigned int v26;

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 4);
  v7 = (_DWORD)a1 + 8;
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if ((_DWORD)TagFallback == 10)
        goto LABEL_12;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if ((_DWORD)TagFallback == 10)
      {
        while (1)
        {
LABEL_12:
          v10 = a1[7];
          v11 = a1[6];
          if ((int)v11 >= v10)
          {
            if (v10 == a1[8])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v10 + 1);
              v10 = a1[7];
            }
            a1[7] = v10 + 1;
            operator new();
          }
          v12 = *((_QWORD *)a1 + 2);
          a1[6] = v11 + 1;
          v13 = *(_QWORD *)(v12 + 8 * v11);
          v26 = 0;
          v14 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0;
          }
          else
          {
            v26 = *v14;
            *((_QWORD *)this + 1) = v14 + 1;
          }
          v15 = *((_DWORD *)this + 14);
          v16 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v15 + 1;
          if (v15 >= v16)
            return 0;
          v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v26);
          if (!sub_100105584(v13, this, v18, v19) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
          v20 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)this + 14) = v22;
          v23 = (_BYTE *)*((_QWORD *)this + 1);
          v24 = (_BYTE *)*((_QWORD *)this + 2);
          if (v23 >= v24 || *v23 != 10)
          {
            if (v23 == v24 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
          *((_QWORD *)this + 1) = v23 + 1;
        }
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
}

void sub_100106B98()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100106BC0(uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;

  v5 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100106C48(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  uint64_t i;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v11;
  _QWORD *v12;
  _QWORD *v13;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v14;
  _QWORD *v15;

  if (*((int *)this + 6) >= 1)
  {
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      *(_BYTE *)a2 = 10;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v6 + 32);
      if (v7 > 0x7F)
      {
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, (int)a2 + 1, a3);
        if (*(int *)(v6 + 24) >= 1)
        {
LABEL_8:
          v8 = 0;
          do
          {
            v9 = *(_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * v8);
            *(_BYTE *)a2 = 13;
            *(_DWORD *)((char *)a2 + 1) = v9;
            a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 5);
            ++v8;
          }
          while (v8 < *(int *)(v6 + 24));
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v7;
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        if (*(int *)(v6 + 24) >= 1)
          goto LABEL_8;
      }
      v12 = *(_QWORD **)(v6 + 8);
      v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 8);
      v10 = v12;
      if (v12 && *v10 != v10[1])
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v11, a2, a3);
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  v14 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v13 = v15;
  if (!v15 || *v13 == v13[1])
    return a2;
  else
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v14, a2, a3);
}

uint64_t sub_100106D88(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(unsigned int *)(a1 + 24);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 16) + 8 * v4);
      v7 = (5 * v6[6]);
      v8 = (_QWORD *)*((_QWORD *)v6 + 1);
      if (v8 && *v8 != v8[1])
        v7 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 2), a2)+ v7;
      v6[8] = v7;
      if (v7 >= 0x80)
        v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7, a2);
      else
        v5 = 1;
      v3 = (v7 + v3 + v5);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 24));
  }
  v9 = *(_QWORD **)(a1 + 8);
  if (v9 && *v9 != v9[1])
    v3 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8), a2)+ v3;
  *(_DWORD *)(a1 + 40) = v3;
  return v3;
}

uint64_t sub_100106E54(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1672);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_100106690((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100106F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100106F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100106F30(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100106F78()
{
  return 1;
}

uint64_t sub_100106F80()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419578;
}

void sub_100106FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100107008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  _BYTE v7[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v7, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1887);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v6, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  sub_1001167AC((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16), a2 + 16);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10010708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001070A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001070B4(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)a1 = off_1003F0DA8;
  v2 = *(_DWORD *)(a1 + 28);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100107144(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)a1 = off_1003F0DA8;
  v2 = *(_DWORD *)(a1 + 28);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1001071E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

void sub_1001071F0()
{
  operator new();
}

void sub_100107244()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10010726C(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  uint64_t v5;

  v1 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  v5 = *(_QWORD *)(v1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 9) = 0;
  if (v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(v4);
  return this;
}

uint64_t sub_1001072DC(int *a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t result;
  unsigned int v26;

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 4);
  v7 = (_DWORD)a1 + 8;
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if ((_DWORD)TagFallback == 10)
        goto LABEL_12;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v8 + 1;
      if ((_DWORD)TagFallback == 10)
      {
        while (1)
        {
LABEL_12:
          v10 = a1[7];
          v11 = a1[6];
          if ((int)v11 >= v10)
          {
            if (v10 == a1[8])
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v10 + 1);
              v10 = a1[7];
            }
            a1[7] = v10 + 1;
            operator new();
          }
          v12 = *((_QWORD *)a1 + 2);
          a1[6] = v11 + 1;
          v13 = *(_QWORD *)(v12 + 8 * v11);
          v26 = 0;
          v14 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26))return 0;
          }
          else
          {
            v26 = *v14;
            *((_QWORD *)this + 1) = v14 + 1;
          }
          v15 = *((_DWORD *)this + 14);
          v16 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v15 + 1;
          if (v15 >= v16)
            return 0;
          v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v26);
          if (!sub_100105F68(v13, this, v18, v19) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
          v20 = *((_DWORD *)this + 14);
          v21 = __OFSUB__(v20, 1);
          v22 = v20 - 1;
          if (v22 < 0 == v21)
            *((_DWORD *)this + 14) = v22;
          v23 = (_BYTE *)*((_QWORD *)this + 1);
          v24 = (_BYTE *)*((_QWORD *)this + 2);
          if (v23 >= v24 || *v23 != 10)
          {
            if (v23 == v24 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
          *((_QWORD *)this + 1) = v23 + 1;
        }
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
}

void sub_100107510()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100107538(uint64_t this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;

  v5 = this;
  if (*(int *)(this + 24) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1001075C0(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  uint64_t i;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v11;
  _QWORD *v12;
  _QWORD *v13;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v14;
  _QWORD *v15;

  if (*((int *)this + 6) >= 1)
  {
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      *(_BYTE *)a2 = 10;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v6 + 32);
      if (v7 > 0x7F)
      {
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, (int)a2 + 1, a3);
        if (*(int *)(v6 + 24) >= 1)
        {
LABEL_8:
          v8 = 0;
          do
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8 * v8);
            *(_BYTE *)a2 = 9;
            *(_QWORD *)((char *)a2 + 1) = v9;
            a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 9);
            ++v8;
          }
          while (v8 < *(int *)(v6 + 24));
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v7;
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        if (*(int *)(v6 + 24) >= 1)
          goto LABEL_8;
      }
      v12 = *(_QWORD **)(v6 + 8);
      v11 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 8);
      v10 = v12;
      if (v12 && *v10 != v10[1])
        a2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v11, a2, a3);
    }
  }
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  v14 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v13 = v15;
  if (!v15 || *v13 == v13[1])
    return a2;
  else
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v14, a2, a3);
}

uint64_t sub_100107720(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *(unsigned int *)(a1 + 24);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v6 = *(_DWORD **)(*(_QWORD *)(a1 + 16) + 8 * v4);
      v7 = (9 * v6[6]);
      v8 = (_QWORD *)*((_QWORD *)v6 + 1);
      if (v8 && *v8 != v8[1])
        v7 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(v6 + 2), a2)+ v7;
      v6[8] = v7;
      if (v7 >= 0x80)
        v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7, a2);
      else
        v5 = 1;
      v3 = (v7 + v3 + v5);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 24));
  }
  v9 = *(_QWORD **)(a1 + 8);
  if (v9 && *v9 != v9[1])
    v3 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8), a2)+ v3;
  *(_DWORD *)(a1 + 40) = v3;
  return v3;
}

uint64_t sub_1001077EC(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 1875);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_100107008((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_1001078A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001078B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001078C8(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100107910()
{
  return 1;
}

uint64_t sub_100107918()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419588;
}

void sub_10010798C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001079A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 2123);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_QWORD *)(a1 + 24) = v7;
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100107A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100107A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100107A7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0E58;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100107AAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0E58;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100107AF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void sub_100107AF8()
{
  operator new();
}

void sub_100107B48()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100107B70(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  if (*(_BYTE *)(a1 + 36))
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 7) = 0;
  if (v2)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100107B90(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v9 = TagFallback & 7;
        if (v9 == 1)
        {
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          goto LABEL_17;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_22:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v9 = TagFallback & 7;
    if (v9 != 1)
      goto LABEL_22;
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 36) |= 1u;
    v10 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 17)
    {
      *((_QWORD *)this + 1) = v10 + 1;
      v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
        return 0;
LABEL_17:
      *(_QWORD *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 36) |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100107D38(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (int)a2, *(double *)(this + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 2) == 0)
    {
LABEL_3:
      v8 = *(_QWORD **)(v4 + 8);
      v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
      v6 = v8;
      if (!v8)
        return this;
      goto LABEL_7;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (int)a2, *(double *)(v4 + 24), a3);
  v9 = *(_QWORD **)(v4 + 8);
  v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v6 = v9;
  if (!v9)
    return this;
LABEL_7:
  if (*v6 != v6[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  return this;
}

uint64_t sub_100107DC0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *(_DWORD *)(a1 + 36);
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)a2 = 17;
    *(_QWORD *)(a2 + 1) = v8;
    a2 += 9;
    v9 = *(_QWORD **)(a1 + 8);
    v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v5 = v9;
    if (!v9)
      return a2;
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)a2 = 9;
  *(_QWORD *)(a2 + 1) = v7;
  a2 += 9;
  if ((*(_DWORD *)(a1 + 36) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  v6 = *(_QWORD **)(a1 + 8);
  v4 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v5 = v6;
  if (!v6)
    return a2;
LABEL_7:
  if (*v5 != v5[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v4, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
  return a2;
}

uint64_t sub_100107E98(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  _QWORD *v7;
  _QWORD *v8;

  v3 = *(unsigned __int8 *)(a1 + 36);
  v4 = (v3 << 31 >> 31) & 9;
  if ((v3 & 2) != 0)
    v4 += 9;
  if (*(_BYTE *)(a1 + 36))
    v5 = v4;
  else
    v5 = 0;
  v8 = *(_QWORD **)(a1 + 8);
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v7 = v8;
  if (v8 && *v7 != v7[1])
    v5 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v6, a2)
       + v5;
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

uint64_t sub_100107EFC(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 2111);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_1001079A0((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100107FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100107FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100107FD8(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_100108020()
{
  return 1;
}

uint64_t sub_100108028()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_100419598;
}

void sub_10010809C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001080B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  _BYTE v20[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 2735);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  v5 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_QWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 28) = v11;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 32) = v12;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_25:
    v14 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 40) = v14;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_DWORD *)(a1 + 36) = v13;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_25;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_26:
  v15 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v15;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 48) = v6;
    v5 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((v5 & 0x100) != 0)
  {
    v16 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_DWORD *)(a1 + 52) = v16;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
LABEL_30:
      v18 = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 72) |= 0x400u;
      *(_DWORD *)(a1 + 60) = v18;
      if ((*(_DWORD *)(a2 + 72) & 0x800) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v17 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) |= 0x200u;
  *(_DWORD *)(a1 + 56) = v17;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x400) != 0)
    goto LABEL_30;
LABEL_17:
  if ((v5 & 0x800) != 0)
  {
LABEL_18:
    v7 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x800u;
    *(_DWORD *)(a1 + 64) = v7;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1001082B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001082CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1001082E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0F08;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100108310(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0F08;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100108354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 68) = a2;
  return result;
}

void sub_10010835C()
{
  operator new();
}

void sub_1001083B4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1001083DC(uint64_t a1)
{
  int v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 72);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(a1 + 60) = 0;
    *(_QWORD *)(a1 + 52) = 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 16) = 0;
  if (v3)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_100108418(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  unint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;

  v44 = (unint64_t *)(a1 + 16);
  v45 = (unsigned int *)(a1 + 24);
  v46 = (unsigned int *)(a1 + 28);
  v47 = (unsigned int *)(a1 + 32);
  v48 = (unsigned int *)(a1 + 36);
  v49 = (unsigned int *)(a1 + 40);
  v6 = (unsigned int *)(a1 + 44);
  v7 = (unsigned int *)(a1 + 48);
  v8 = (unsigned int *)(a1 + 52);
  v9 = (unsigned int *)(a1 + 56);
  v10 = (unsigned int *)(a1 + 60);
  v11 = (unsigned int *)(a1 + 64);
  v12 = a1 + 8;
  while (1)
  {
    v13 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v13 < *((_QWORD *)this + 2) && (*v13 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v13;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v13 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v44);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 1u;
          if ((unint64_t)v18 >= v16)
            continue;
        }
        else
        {
          *v44 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)this + 1) = v18;
          *(_DWORD *)(a1 + 72) |= 1u;
          if ((unint64_t)v18 >= v16)
            continue;
        }
        if (*v18 != 16)
          continue;
        v19 = v18 + 1;
        *((_QWORD *)this + 1) = v19;
        if ((unint64_t)v19 >= v16)
          goto LABEL_51;
        goto LABEL_48;
      case 2u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v19 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v16)
          goto LABEL_51;
LABEL_48:
        if (*v19 < 0)
        {
LABEL_51:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 2u;
          if ((unint64_t)v30 >= v16)
            continue;
        }
        else
        {
          *v45 = *v19;
          v30 = v19 + 1;
          *((_QWORD *)this + 1) = v30;
          *(_DWORD *)(a1 + 72) |= 2u;
          if ((unint64_t)v30 >= v16)
            continue;
        }
        if (*v30 != 24)
          continue;
        v20 = v30 + 1;
        *((_QWORD *)this + 1) = v20;
        if ((unint64_t)v20 >= v16)
          goto LABEL_58;
LABEL_55:
        if (*v20 < 0)
        {
LABEL_58:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v46);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 4u;
          if ((unint64_t)v31 >= v16)
            continue;
        }
        else
        {
          *v46 = *v20;
          v31 = v20 + 1;
          *((_QWORD *)this + 1) = v31;
          *(_DWORD *)(a1 + 72) |= 4u;
          if ((unint64_t)v31 >= v16)
            continue;
        }
        if (*v31 != 32)
          continue;
        v21 = v31 + 1;
        *((_QWORD *)this + 1) = v21;
        if ((unint64_t)v21 >= v16)
          goto LABEL_65;
LABEL_62:
        if (*v21 < 0)
        {
LABEL_65:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v47);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 8u;
          if ((unint64_t)v32 >= v16)
            continue;
        }
        else
        {
          *v47 = *v21;
          v32 = v21 + 1;
          *((_QWORD *)this + 1) = v32;
          *(_DWORD *)(a1 + 72) |= 8u;
          if ((unint64_t)v32 >= v16)
            continue;
        }
        if (*v32 != 40)
          continue;
        v22 = v32 + 1;
        *((_QWORD *)this + 1) = v22;
        if ((unint64_t)v22 >= v16)
          goto LABEL_72;
LABEL_69:
        if (*v22 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v48);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x10u;
          if ((unint64_t)v33 >= v16)
            continue;
        }
        else
        {
          *v48 = *v22;
          v33 = v22 + 1;
          *((_QWORD *)this + 1) = v33;
          *(_DWORD *)(a1 + 72) |= 0x10u;
          if ((unint64_t)v33 >= v16)
            continue;
        }
        if (*v33 != 48)
          continue;
        v23 = v33 + 1;
        *((_QWORD *)this + 1) = v23;
        if ((unint64_t)v23 >= v16)
          goto LABEL_79;
LABEL_76:
        if (*v23 < 0)
        {
LABEL_79:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v49);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x20u;
          if ((unint64_t)v34 >= v16)
            continue;
        }
        else
        {
          *v49 = *v23;
          v34 = v23 + 1;
          *((_QWORD *)this + 1) = v34;
          *(_DWORD *)(a1 + 72) |= 0x20u;
          if ((unint64_t)v34 >= v16)
            continue;
        }
        if (*v34 != 56)
          continue;
        v24 = v34 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_83:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x40u;
          if ((unint64_t)v35 >= v16)
            continue;
        }
        else
        {
          *v6 = *v24;
          v35 = v24 + 1;
          *((_QWORD *)this + 1) = v35;
          *(_DWORD *)(a1 + 72) |= 0x40u;
          if ((unint64_t)v35 >= v16)
            continue;
        }
        if (*v35 != 64)
          continue;
        v25 = v35 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_91:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x80u;
          if ((unint64_t)v36 >= v16)
            continue;
        }
        else
        {
          *v7 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)this + 1) = v36;
          *(_DWORD *)(a1 + 72) |= 0x80u;
          if ((unint64_t)v36 >= v16)
            continue;
        }
        if (*v36 != 72)
          continue;
        v26 = v36 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_99:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x100u;
          if ((unint64_t)v37 >= v16)
            continue;
        }
        else
        {
          *v8 = *v26;
          v37 = v26 + 1;
          *((_QWORD *)this + 1) = v37;
          *(_DWORD *)(a1 + 72) |= 0x100u;
          if ((unint64_t)v37 >= v16)
            continue;
        }
        if (*v37 != 80)
          continue;
        v27 = v37 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_107:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x200u;
          if ((unint64_t)v38 >= v16)
            continue;
        }
        else
        {
          *v9 = *v27;
          v38 = v27 + 1;
          *((_QWORD *)this + 1) = v38;
          *(_DWORD *)(a1 + 72) |= 0x200u;
          if ((unint64_t)v38 >= v16)
            continue;
        }
        if (*v38 != 88)
          continue;
        v28 = v38 + 1;
        *((_QWORD *)this + 1) = v28;
LABEL_115:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x400u;
          if ((unint64_t)v39 >= v16)
            continue;
        }
        else
        {
          *v10 = *v28;
          v39 = v28 + 1;
          *((_QWORD *)this + 1) = v39;
          *(_DWORD *)(a1 + 72) |= 0x400u;
          if ((unint64_t)v39 >= v16)
            continue;
        }
        if (*v39 != 96)
          continue;
        v29 = v39 + 1;
        *((_QWORD *)this + 1) = v29;
LABEL_123:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v42 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x800u;
          if (v42 != v41)
            continue;
        }
        else
        {
          *v11 = *v29;
          v40 = (unsigned __int8 *)(v29 + 1);
          *((_QWORD *)this + 1) = v40;
          *(_DWORD *)(a1 + 72) |= 0x800u;
          if (v40 != (unsigned __int8 *)v16)
            continue;
        }
        if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v20 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v20 >= v16)
          goto LABEL_58;
        goto LABEL_55;
      case 4u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v21 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v21 >= v16)
          goto LABEL_65;
        goto LABEL_62;
      case 5u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v22 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v22 >= v16)
          goto LABEL_72;
        goto LABEL_69;
      case 6u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v23 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v16)
          goto LABEL_79;
        goto LABEL_76;
      case 7u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v24 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_83;
      case 8u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v25 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_91;
      case 9u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v26 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 0xAu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v27 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xBu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v28 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_115;
      case 0xCu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v29 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_123;
      default:
        v15 = TagFallback & 7;
LABEL_40:
        if (v15 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v12, a4) & 1) != 0)
          continue;
        return 0;
    }
  }
}

uint64_t sub_100108BB8(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 36), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 44), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 48), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 52), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 56), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 60), a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x800) == 0)
  {
LABEL_13:
    v9 = *(_QWORD **)(v5 + 8);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
    v7 = v9;
    if (!v9)
      return this;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 64), a2, a4);
  v10 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v10;
  if (!v10)
    return this;
LABEL_27:
  if (*v7 != v7[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100108D58(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  int v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  _QWORD *v22;
  _QWORD *v23;

  v3 = a2;
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 2);
    *(_BYTE *)a2 = 8;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, (unint64_t)a2 + 1, a3);
    if ((*((_DWORD *)this + 18) & 2) == 0)
    {
LABEL_3:
      if ((*((_BYTE *)this + 72) & 4) == 0)
        goto LABEL_4;
LABEL_21:
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
      *(_BYTE *)v3 = 24;
      if (v12 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 8) != 0)
          goto LABEL_25;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v12;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 8) != 0)
          goto LABEL_25;
      }
LABEL_5:
      if ((*((_BYTE *)this + 72) & 0x10) == 0)
        goto LABEL_6;
LABEL_29:
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      *(_BYTE *)v3 = 40;
      if (v14 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 0x20) != 0)
          goto LABEL_33;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v14;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 0x20) != 0)
          goto LABEL_33;
      }
LABEL_7:
      if ((*((_BYTE *)this + 72) & 0x40) == 0)
        goto LABEL_8;
LABEL_37:
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      *(_BYTE *)v3 = 56;
      if (v16 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 0x80) != 0)
          goto LABEL_41;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v16;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 0x80) != 0)
          goto LABEL_41;
      }
LABEL_9:
      if ((*((_BYTE *)this + 73) & 1) == 0)
        goto LABEL_10;
LABEL_45:
      v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
      *(_BYTE *)v3 = 72;
      if (v18 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 73) & 2) != 0)
          goto LABEL_49;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v18;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 73) & 2) != 0)
          goto LABEL_49;
      }
LABEL_11:
      if ((*((_BYTE *)this + 73) & 4) == 0)
        goto LABEL_12;
LABEL_53:
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
      *(_BYTE *)v3 = 88;
      if (v20 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 73) & 8) != 0)
          goto LABEL_57;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v20;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 73) & 8) != 0)
          goto LABEL_57;
      }
LABEL_13:
      v8 = (_QWORD *)*((_QWORD *)this + 1);
      v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      v6 = v8;
      if (!v8)
        return v3;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  *(_BYTE *)v3 = 16;
  if (v11 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v11, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_21;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v11;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_21;
  }
LABEL_4:
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_5;
LABEL_25:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  *(_BYTE *)v3 = 32;
  if (v13 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 0x10) != 0)
      goto LABEL_29;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v13;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 0x10) != 0)
      goto LABEL_29;
  }
LABEL_6:
  if ((*((_BYTE *)this + 72) & 0x20) == 0)
    goto LABEL_7;
LABEL_33:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  *(_BYTE *)v3 = 48;
  if (v15 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 0x40) != 0)
      goto LABEL_37;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v15;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 0x40) != 0)
      goto LABEL_37;
  }
LABEL_8:
  if ((*((_BYTE *)this + 72) & 0x80) == 0)
    goto LABEL_9;
LABEL_41:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  *(_BYTE *)v3 = 64;
  if (v17 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v17, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 73) & 1) != 0)
      goto LABEL_45;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v17;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 73) & 1) != 0)
      goto LABEL_45;
  }
LABEL_10:
  if ((*((_BYTE *)this + 73) & 2) == 0)
    goto LABEL_11;
LABEL_49:
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  *(_BYTE *)v3 = 80;
  if (v19 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v19, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 73) & 4) != 0)
      goto LABEL_53;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v19;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 73) & 4) != 0)
      goto LABEL_53;
  }
LABEL_12:
  if ((*((_BYTE *)this + 73) & 8) == 0)
    goto LABEL_13;
LABEL_57:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  *(_BYTE *)v3 = 96;
  if (v21 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (int)v3 + 1, a3);
    v23 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v6 = v23;
    if (!v23)
      return v3;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v21;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    v22 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v6 = v22;
    if (!v22)
      return v3;
  }
LABEL_14:
  if (*v6 != v6[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v7, v3, a3);
  return v3;
}

uint64_t sub_1001090B4(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v19;
  _QWORD *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  uint64_t v28;

  v3 = *(_DWORD *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), (unint64_t)a2)+ 1;
    v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v4 + v6 + 1);
LABEL_12:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v4 + v8 + 1);
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_14:
    if ((v3 & 0x10) == 0)
      goto LABEL_15;
LABEL_28:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v4 + v12 + 1);
      if ((v3 & 0x20) != 0)
        goto LABEL_32;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x20) != 0)
        goto LABEL_32;
    }
LABEL_16:
    if ((v3 & 0x40) == 0)
      goto LABEL_17;
LABEL_36:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v16 + 1 + v4);
      if ((v3 & 0x80) != 0)
        goto LABEL_40;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x80) != 0)
        goto LABEL_40;
    }
LABEL_18:
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
LABEL_44:
    if ((v3 & 0x100) == 0)
    {
      if ((v3 & 0x200) == 0)
        goto LABEL_46;
LABEL_54:
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if (v24 >= 0x80)
      {
        v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
        v3 = *(_DWORD *)(a1 + 72);
        v4 = (v25 + 1 + v4);
        if ((v3 & 0x400) != 0)
          goto LABEL_58;
      }
      else
      {
        v4 = (v4 + 2);
        if ((v3 & 0x400) != 0)
          goto LABEL_58;
      }
LABEL_47:
      if ((v3 & 0x800) == 0)
        goto LABEL_48;
      goto LABEL_62;
    }
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v23 + 1 + v4);
      if ((v3 & 0x200) != 0)
        goto LABEL_54;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x200) != 0)
        goto LABEL_54;
    }
LABEL_46:
    if ((v3 & 0x400) == 0)
      goto LABEL_47;
LABEL_58:
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    if (v26 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2)+ 1+ v4;
      if ((*(_DWORD *)(a1 + 72) & 0x800) == 0)
        goto LABEL_48;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x800) == 0)
        goto LABEL_48;
    }
LABEL_62:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if (v27 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2)+ 1+ v4;
      v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 8);
      if (!v20)
        goto LABEL_49;
    }
    else
    {
      v4 = (v4 + 2);
      v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 8);
      if (!v20)
        goto LABEL_49;
    }
    goto LABEL_66;
  }
  if ((v3 & 8) == 0)
    goto LABEL_14;
LABEL_24:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v4 + v10 + 1);
    if ((v3 & 0x10) != 0)
      goto LABEL_28;
  }
  else
  {
    v4 = (v4 + 2);
    if ((v3 & 0x10) != 0)
      goto LABEL_28;
  }
LABEL_15:
  if ((v3 & 0x20) == 0)
    goto LABEL_16;
LABEL_32:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v14 + 1 + v4);
    if ((v3 & 0x40) != 0)
      goto LABEL_36;
  }
  else
  {
    v4 = (v4 + 2);
    if ((v3 & 0x40) != 0)
      goto LABEL_36;
  }
LABEL_17:
  if ((v3 & 0x80) == 0)
    goto LABEL_18;
LABEL_40:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v18 + 1 + v4);
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
    goto LABEL_44;
  }
  v4 = (v4 + 2);
  if ((v3 & 0xFF00) != 0)
    goto LABEL_44;
LABEL_48:
  v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v20 = *(_QWORD **)(a1 + 8);
  if (!v20)
  {
LABEL_49:
    *(_DWORD *)(a1 + 68) = v4;
    return v4;
  }
LABEL_66:
  if (*v20 == v20[1])
    goto LABEL_49;
  v28 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v19, a2)
      + v4;
  *(_DWORD *)(a1 + 68) = v28;
  return v28;
}

uint64_t sub_1001093A4(const wireless_diagnostics::google::protobuf::Message *a1, const wireless_diagnostics::google::protobuf::Message *lpsrc)
{
  uint64_t v4;
  void *v5;
  wireless_diagnostics::google::protobuf::Message *v6;
  char v8;
  _BYTE v9[48];

  if (lpsrc == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v9, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 2723);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v8, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  if (v5)
    return sub_1001080B0((uint64_t)a1, (uint64_t)v5);
  else
    return wireless_diagnostics::google::protobuf::internal::ReflectionOps::Merge(lpsrc, a1, v6);
}

void sub_100109458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10010946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100109480(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2 != result)
  {
    v3 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return result;
}

uint64_t sub_1001094C8()
{
  return 1;
}

uint64_t sub_1001094D0()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1004196B0;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[1] = sub_100102AD4;
    v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl(&qword_1004196B0, v2);
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_1004195A8;
}

void sub_100109544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100109558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  _BYTE v20[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v20, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPVisionEvent.pb.cc", 3389);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v19, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  v5 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v5)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(_QWORD *)(a1 + 16) = v9;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(_DWORD *)(a1 + 28) = v11;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 32) = v12;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_25:
    v14 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(_DWORD *)(a1 + 40) = v14;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(_DWORD *)(a1 + 36) = v13;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_25;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_26:
  v15 = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(_DWORD *)(a1 + 44) = v15;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    v6 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(_DWORD *)(a1 + 48) = v6;
    v5 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v5 & 0xFF00) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((v5 & 0x100) != 0)
  {
    v16 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(_DWORD *)(a1 + 52) = v16;
    v5 = *(_DWORD *)(a2 + 72);
    if ((v5 & 0x200) == 0)
    {
LABEL_16:
      if ((v5 & 0x400) == 0)
        goto LABEL_17;
LABEL_30:
      v18 = *(_DWORD *)(a2 + 60);
      *(_DWORD *)(a1 + 72) |= 0x400u;
      *(_DWORD *)(a1 + 60) = v18;
      if ((*(_DWORD *)(a2 + 72) & 0x800) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_16;
  }
  v17 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) |= 0x200u;
  *(_DWORD *)(a1 + 56) = v17;
  v5 = *(_DWORD *)(a2 + 72);
  if ((v5 & 0x400) != 0)
    goto LABEL_30;
LABEL_17:
  if ((v5 & 0x800) != 0)
  {
LABEL_18:
    v7 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) |= 0x800u;
    *(_DWORD *)(a1 + 64) = v7;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100109760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100109774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100109788(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0FB8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1001097B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0FB8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1001097FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 68) = a2;
  return result;
}

void sub_100109804()
{
  operator new();
}

void sub_10010985C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100109884(uint64_t a1)
{
  int v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *result;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 72);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(a1 + 60) = 0;
    *(_QWORD *)(a1 + 52) = 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  result = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  *((_DWORD *)result + 16) = 0;
  if (v3)
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t sub_1001098C0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  unint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;

  v44 = (unint64_t *)(a1 + 16);
  v45 = (unsigned int *)(a1 + 24);
  v46 = (unsigned int *)(a1 + 28);
  v47 = (unsigned int *)(a1 + 32);
  v48 = (unsigned int *)(a1 + 36);
  v49 = (unsigned int *)(a1 + 40);
  v6 = (unsigned int *)(a1 + 44);
  v7 = (unsigned int *)(a1 + 48);
  v8 = (unsigned int *)(a1 + 52);
  v9 = (unsigned int *)(a1 + 56);
  v10 = (unsigned int *)(a1 + 60);
  v11 = (unsigned int *)(a1 + 64);
  v12 = a1 + 8;
  while (1)
  {
    v13 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v13 < *((_QWORD *)this + 2) && (*v13 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v13;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v13 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v44);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 1u;
          if ((unint64_t)v18 >= v16)
            continue;
        }
        else
        {
          *v44 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)this + 1) = v18;
          *(_DWORD *)(a1 + 72) |= 1u;
          if ((unint64_t)v18 >= v16)
            continue;
        }
        if (*v18 != 16)
          continue;
        v19 = v18 + 1;
        *((_QWORD *)this + 1) = v19;
        if ((unint64_t)v19 >= v16)
          goto LABEL_51;
        goto LABEL_48;
      case 2u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v19 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v16)
          goto LABEL_51;
LABEL_48:
        if (*v19 < 0)
        {
LABEL_51:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v45);
          if (!(_DWORD)result)
            return result;
          v30 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 2u;
          if ((unint64_t)v30 >= v16)
            continue;
        }
        else
        {
          *v45 = *v19;
          v30 = v19 + 1;
          *((_QWORD *)this + 1) = v30;
          *(_DWORD *)(a1 + 72) |= 2u;
          if ((unint64_t)v30 >= v16)
            continue;
        }
        if (*v30 != 24)
          continue;
        v20 = v30 + 1;
        *((_QWORD *)this + 1) = v20;
        if ((unint64_t)v20 >= v16)
          goto LABEL_58;
LABEL_55:
        if (*v20 < 0)
        {
LABEL_58:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v46);
          if (!(_DWORD)result)
            return result;
          v31 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 4u;
          if ((unint64_t)v31 >= v16)
            continue;
        }
        else
        {
          *v46 = *v20;
          v31 = v20 + 1;
          *((_QWORD *)this + 1) = v31;
          *(_DWORD *)(a1 + 72) |= 4u;
          if ((unint64_t)v31 >= v16)
            continue;
        }
        if (*v31 != 32)
          continue;
        v21 = v31 + 1;
        *((_QWORD *)this + 1) = v21;
        if ((unint64_t)v21 >= v16)
          goto LABEL_65;
LABEL_62:
        if (*v21 < 0)
        {
LABEL_65:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v47);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 8u;
          if ((unint64_t)v32 >= v16)
            continue;
        }
        else
        {
          *v47 = *v21;
          v32 = v21 + 1;
          *((_QWORD *)this + 1) = v32;
          *(_DWORD *)(a1 + 72) |= 8u;
          if ((unint64_t)v32 >= v16)
            continue;
        }
        if (*v32 != 40)
          continue;
        v22 = v32 + 1;
        *((_QWORD *)this + 1) = v22;
        if ((unint64_t)v22 >= v16)
          goto LABEL_72;
LABEL_69:
        if (*v22 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v48);
          if (!(_DWORD)result)
            return result;
          v33 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x10u;
          if ((unint64_t)v33 >= v16)
            continue;
        }
        else
        {
          *v48 = *v22;
          v33 = v22 + 1;
          *((_QWORD *)this + 1) = v33;
          *(_DWORD *)(a1 + 72) |= 0x10u;
          if ((unint64_t)v33 >= v16)
            continue;
        }
        if (*v33 != 48)
          continue;
        v23 = v33 + 1;
        *((_QWORD *)this + 1) = v23;
        if ((unint64_t)v23 >= v16)
          goto LABEL_79;
LABEL_76:
        if (*v23 < 0)
        {
LABEL_79:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v49);
          if (!(_DWORD)result)
            return result;
          v34 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x20u;
          if ((unint64_t)v34 >= v16)
            continue;
        }
        else
        {
          *v49 = *v23;
          v34 = v23 + 1;
          *((_QWORD *)this + 1) = v34;
          *(_DWORD *)(a1 + 72) |= 0x20u;
          if ((unint64_t)v34 >= v16)
            continue;
        }
        if (*v34 != 56)
          continue;
        v24 = v34 + 1;
        *((_QWORD *)this + 1) = v24;
LABEL_83:
        if ((unint64_t)v24 >= v16 || *v24 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v35 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x40u;
          if ((unint64_t)v35 >= v16)
            continue;
        }
        else
        {
          *v6 = *v24;
          v35 = v24 + 1;
          *((_QWORD *)this + 1) = v35;
          *(_DWORD *)(a1 + 72) |= 0x40u;
          if ((unint64_t)v35 >= v16)
            continue;
        }
        if (*v35 != 64)
          continue;
        v25 = v35 + 1;
        *((_QWORD *)this + 1) = v25;
LABEL_91:
        if ((unint64_t)v25 >= v16 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!(_DWORD)result)
            return result;
          v36 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x80u;
          if ((unint64_t)v36 >= v16)
            continue;
        }
        else
        {
          *v7 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)this + 1) = v36;
          *(_DWORD *)(a1 + 72) |= 0x80u;
          if ((unint64_t)v36 >= v16)
            continue;
        }
        if (*v36 != 72)
          continue;
        v26 = v36 + 1;
        *((_QWORD *)this + 1) = v26;
LABEL_99:
        if ((unint64_t)v26 >= v16 || *v26 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
          if (!(_DWORD)result)
            return result;
          v37 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x100u;
          if ((unint64_t)v37 >= v16)
            continue;
        }
        else
        {
          *v8 = *v26;
          v37 = v26 + 1;
          *((_QWORD *)this + 1) = v37;
          *(_DWORD *)(a1 + 72) |= 0x100u;
          if ((unint64_t)v37 >= v16)
            continue;
        }
        if (*v37 != 80)
          continue;
        v27 = v37 + 1;
        *((_QWORD *)this + 1) = v27;
LABEL_107:
        if ((unint64_t)v27 >= v16 || *v27 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
          if (!(_DWORD)result)
            return result;
          v38 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x200u;
          if ((unint64_t)v38 >= v16)
            continue;
        }
        else
        {
          *v9 = *v27;
          v38 = v27 + 1;
          *((_QWORD *)this + 1) = v38;
          *(_DWORD *)(a1 + 72) |= 0x200u;
          if ((unint64_t)v38 >= v16)
            continue;
        }
        if (*v38 != 88)
          continue;
        v28 = v38 + 1;
        *((_QWORD *)this + 1) = v28;
LABEL_115:
        if ((unint64_t)v28 >= v16 || *v28 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v10);
          if (!(_DWORD)result)
            return result;
          v39 = (_BYTE *)*((_QWORD *)this + 1);
          v16 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x400u;
          if ((unint64_t)v39 >= v16)
            continue;
        }
        else
        {
          *v10 = *v28;
          v39 = v28 + 1;
          *((_QWORD *)this + 1) = v39;
          *(_DWORD *)(a1 + 72) |= 0x400u;
          if ((unint64_t)v39 >= v16)
            continue;
        }
        if (*v39 != 96)
          continue;
        v29 = v39 + 1;
        *((_QWORD *)this + 1) = v29;
LABEL_123:
        if ((unint64_t)v29 >= v16 || *v29 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v11);
          if (!(_DWORD)result)
            return result;
          v42 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 72) |= 0x800u;
          if (v42 != v41)
            continue;
        }
        else
        {
          *v11 = *v29;
          v40 = (unsigned __int8 *)(v29 + 1);
          *((_QWORD *)this + 1) = v40;
          *(_DWORD *)(a1 + 72) |= 0x800u;
          if (v40 != (unsigned __int8 *)v16)
            continue;
        }
        if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v20 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v20 >= v16)
          goto LABEL_58;
        goto LABEL_55;
      case 4u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v21 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v21 >= v16)
          goto LABEL_65;
        goto LABEL_62;
      case 5u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v22 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v22 >= v16)
          goto LABEL_72;
        goto LABEL_69;
      case 6u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v23 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v16)
          goto LABEL_79;
        goto LABEL_76;
      case 7u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v24 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_83;
      case 8u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v25 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_91;
      case 9u:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v26 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_99;
      case 0xAu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v27 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_107;
      case 0xBu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v28 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_115;
      case 0xCu:
        v15 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_40;
        v29 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        goto LABEL_123;
      default:
        v15 = TagFallback & 7;
LABEL_40:
        if (v15 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v12, a4) & 1) != 0)
          continue;
        return 0;
    }
  }
}

uint64_t sub_10010A060(uint64_t this, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), (unint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 28), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 32), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 36), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(_DWORD *)(v5 + 44), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(_DWORD *)(v5 + 48), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 52), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 56), a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(_DWORD *)(v5 + 60), a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x800) == 0)
  {
LABEL_13:
    v9 = *(_QWORD **)(v5 + 8);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
    v7 = v9;
    if (!v9)
      return this;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(_DWORD *)(v5 + 64), a2, a4);
  v10 = *(_QWORD **)(v5 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v5 + 8);
  v7 = v10;
  if (!v10)
    return this;
LABEL_27:
  if (*v7 != v7[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  return this;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10010A200(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v3;
  int v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v7;
  _QWORD *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  _QWORD *v22;
  _QWORD *v23;

  v3 = a2;
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 2);
    *(_BYTE *)a2 = 8;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, (unint64_t)a2 + 1, a3);
    if ((*((_DWORD *)this + 18) & 2) == 0)
    {
LABEL_3:
      if ((*((_BYTE *)this + 72) & 4) == 0)
        goto LABEL_4;
LABEL_21:
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
      *(_BYTE *)v3 = 24;
      if (v12 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 8) != 0)
          goto LABEL_25;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v12;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 8) != 0)
          goto LABEL_25;
      }
LABEL_5:
      if ((*((_BYTE *)this + 72) & 0x10) == 0)
        goto LABEL_6;
LABEL_29:
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
      *(_BYTE *)v3 = 40;
      if (v14 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 0x20) != 0)
          goto LABEL_33;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v14;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 0x20) != 0)
          goto LABEL_33;
      }
LABEL_7:
      if ((*((_BYTE *)this + 72) & 0x40) == 0)
        goto LABEL_8;
LABEL_37:
      v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
      *(_BYTE *)v3 = 56;
      if (v16 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 72) & 0x80) != 0)
          goto LABEL_41;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v16;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 72) & 0x80) != 0)
          goto LABEL_41;
      }
LABEL_9:
      if ((*((_BYTE *)this + 73) & 1) == 0)
        goto LABEL_10;
LABEL_45:
      v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
      *(_BYTE *)v3 = 72;
      if (v18 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 73) & 2) != 0)
          goto LABEL_49;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v18;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 73) & 2) != 0)
          goto LABEL_49;
      }
LABEL_11:
      if ((*((_BYTE *)this + 73) & 4) == 0)
        goto LABEL_12;
LABEL_53:
      v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 15);
      *(_BYTE *)v3 = 88;
      if (v20 > 0x7F)
      {
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, (int)v3 + 1, a3);
        if ((*((_BYTE *)this + 73) & 8) != 0)
          goto LABEL_57;
      }
      else
      {
        *((_BYTE *)v3 + 1) = (_BYTE)v20;
        v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
        if ((*((_BYTE *)this + 73) & 8) != 0)
          goto LABEL_57;
      }
LABEL_13:
      v8 = (_QWORD *)*((_QWORD *)this + 1);
      v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      v6 = v8;
      if (!v8)
        return v3;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  *(_BYTE *)v3 = 16;
  if (v11 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v11, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_21;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v11;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_21;
  }
LABEL_4:
  if ((*((_BYTE *)this + 72) & 8) == 0)
    goto LABEL_5;
LABEL_25:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  *(_BYTE *)v3 = 32;
  if (v13 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 0x10) != 0)
      goto LABEL_29;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v13;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 0x10) != 0)
      goto LABEL_29;
  }
LABEL_6:
  if ((*((_BYTE *)this + 72) & 0x20) == 0)
    goto LABEL_7;
LABEL_33:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  *(_BYTE *)v3 = 48;
  if (v15 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 72) & 0x40) != 0)
      goto LABEL_37;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v15;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 72) & 0x40) != 0)
      goto LABEL_37;
  }
LABEL_8:
  if ((*((_BYTE *)this + 72) & 0x80) == 0)
    goto LABEL_9;
LABEL_41:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
  *(_BYTE *)v3 = 64;
  if (v17 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v17, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 73) & 1) != 0)
      goto LABEL_45;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v17;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 73) & 1) != 0)
      goto LABEL_45;
  }
LABEL_10:
  if ((*((_BYTE *)this + 73) & 2) == 0)
    goto LABEL_11;
LABEL_49:
  v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
  *(_BYTE *)v3 = 80;
  if (v19 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v19, (int)v3 + 1, a3);
    if ((*((_BYTE *)this + 73) & 4) != 0)
      goto LABEL_53;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v19;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    if ((*((_BYTE *)this + 73) & 4) != 0)
      goto LABEL_53;
  }
LABEL_12:
  if ((*((_BYTE *)this + 73) & 8) == 0)
    goto LABEL_13;
LABEL_57:
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  *(_BYTE *)v3 = 96;
  if (v21 > 0x7F)
  {
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (int)v3 + 1, a3);
    v23 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v6 = v23;
    if (!v23)
      return v3;
  }
  else
  {
    *((_BYTE *)v3 + 1) = (_BYTE)v21;
    v3 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v3 + 2);
    v22 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v6 = v22;
    if (!v22)
      return v3;
  }
LABEL_14:
  if (*v6 != v6[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v7, v3, a3);
  return v3;
}

uint64_t sub_10010A55C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  int v18;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v19;
  _QWORD *v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  uint64_t v28;

  v3 = *(_DWORD *)(a1 + 72);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((v3 & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), (unint64_t)a2)+ 1;
    v3 = *(_DWORD *)(a1 + 72);
    if ((v3 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
    v3 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    v6 = 1;
  }
  v4 = (v4 + v6 + 1);
LABEL_12:
  if ((v3 & 4) != 0)
  {
    v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if (v7 >= 0x80)
    {
      v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v4 + v8 + 1);
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_14:
    if ((v3 & 0x10) == 0)
      goto LABEL_15;
LABEL_28:
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
    if (v11 >= 0x80)
    {
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v4 + v12 + 1);
      if ((v3 & 0x20) != 0)
        goto LABEL_32;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x20) != 0)
        goto LABEL_32;
    }
LABEL_16:
    if ((v3 & 0x40) == 0)
      goto LABEL_17;
LABEL_36:
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if (v15 >= 0x80)
    {
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v16 + 1 + v4);
      if ((v3 & 0x80) != 0)
        goto LABEL_40;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x80) != 0)
        goto LABEL_40;
    }
LABEL_18:
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
LABEL_44:
    if ((v3 & 0x100) == 0)
    {
      if ((v3 & 0x200) == 0)
        goto LABEL_46;
LABEL_54:
      v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 56);
      if (v24 >= 0x80)
      {
        v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
        v3 = *(_DWORD *)(a1 + 72);
        v4 = (v25 + 1 + v4);
        if ((v3 & 0x400) != 0)
          goto LABEL_58;
      }
      else
      {
        v4 = (v4 + 2);
        if ((v3 & 0x400) != 0)
          goto LABEL_58;
      }
LABEL_47:
      if ((v3 & 0x800) == 0)
        goto LABEL_48;
      goto LABEL_62;
    }
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if (v22 >= 0x80)
    {
      v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
      v3 = *(_DWORD *)(a1 + 72);
      v4 = (v23 + 1 + v4);
      if ((v3 & 0x200) != 0)
        goto LABEL_54;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x200) != 0)
        goto LABEL_54;
    }
LABEL_46:
    if ((v3 & 0x400) == 0)
      goto LABEL_47;
LABEL_58:
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
    if (v26 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2)+ 1+ v4;
      if ((*(_DWORD *)(a1 + 72) & 0x800) == 0)
        goto LABEL_48;
    }
    else
    {
      v4 = (v4 + 2);
      if ((v3 & 0x800) == 0)
        goto LABEL_48;
    }
LABEL_62:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
    if (v27 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2)+ 1+ v4;
      v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 8);
      if (!v20)
        goto LABEL_49;
    }
    else
    {
      v4 = (v4 + 2);
      v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 8);
      if (!v20)
        goto LABEL_49;
    }
    goto LABEL_66;
  }
  if ((v3 & 8) == 0)
    goto LABEL_14;
LABEL_24:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v4 + v10 + 1);
    if ((v3 & 0x10) != 0)
      goto LABEL_28;
  }
  else
  {
    v4 = (v4 + 2);
    if ((v3 & 0x10) != 0)
      goto LABEL_28;
  }
LABEL_15:
  if ((v3 & 0x20) == 0)
    goto LABEL_16;
LABEL_32:
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if (v13 >= 0x80)
  {
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v14 + 1 + v4);
    if ((v3 & 0x40) != 0)
      goto LABEL_36;
  }
  else
  {
    v4 = (v4 + 2);
    if ((v3 & 0x40) != 0)
      goto LABEL_36;
  }
LABEL_17:
  if ((v3 & 0x80) == 0)
    goto LABEL_18;
LABEL_40:
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
  if (v17 >= 0x80)
  {
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2);
    v3 = *(_DWORD *)(a1 + 72);
    v4 = (v18 + 1 + v4);
    if ((v3 & 0xFF00) == 0)
      goto LABEL_48;
    goto LABEL_44;
  }
  v4 = (v4 + 2);
  if ((v3 & 0xFF00) != 0)
    goto LABEL_44;
LABEL_48:
  v19 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v20 = *(_QWORD **)(a1 + 8);
  if (!v20)
  {
LABEL_49:
    *(_DWORD *)(a1 + 68) = v4;
    return v4;
  }
LABEL_66:
  if (*v20 == v20[1])
    goto LABEL_49;
  v28 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v19, a2)
      + v4;
  *(_DWORD *)(a1 + 68) = v28;
  return v28;
}

