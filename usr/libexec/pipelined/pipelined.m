void sub_100005138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 152));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

void sub_1000051D4(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003F4088;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100015138(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100005224(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v22 = 134219009;
    v23 = v5;
    v24 = 2048;
    v25 = v6;
    v26 = 2048;
    v27 = v7;
    v28 = 2049;
    v29 = v8;
    v30 = 2049;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveGPS = {timestampNanos=%lld,systemTiemstampNanos=%lld,horizontalAccuracy=%f,latlon={ lat=%{private}.18f, lon=%{private}.18f} }", (uint8_t *)&v22, 0x34u);
  }
LABEL_4:
  sub_1000C8CC8(a2, (uint64_t)&v22);
  sub_1000520EC(a1, (uint64_t)&v22);
  sub_100051ED0((uint64_t)&v22);
  if ((sub_1000C7EA4(a2) & 1) == 0)
  {
    if (qword_100417ED8 == -1)
    {
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    v15 = *(_QWORD *)(a2 + 64);
    v14 = a2 + 64;
    v13 = v15;
    if (*(char *)(v14 + 23) >= 0)
      v13 = v14;
    v22 = 136315138;
    v23 = v13;
    v11 = "dropped a measurement with provider %s";
    v16 = v12;
    v17 = 12;
    goto LABEL_35;
  }
  if (!**(_BYTE **)(a1 + 248) || *(_BYTE *)(a1 + 2178))
  {
    if (*(int *)(a2 + 124) < 90)
    {
      if (qword_100417ED8 == -1)
      {
        v10 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          return;
        goto LABEL_10;
      }
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v10 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_10:
        LOWORD(v22) = 0;
        v11 = "Ignoring GPS-coarse.";
LABEL_34:
        v16 = v10;
        v17 = 2;
LABEL_35:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v22, v17);
        return;
      }
      return;
    }
    if (*(_BYTE *)(a1 + 688))
    {
      if (*(_QWORD *)(a2 + 8) <= *(_QWORD *)(a1 + 704))
      {
        if (qword_100417ED8 == -1)
        {
          v10 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            return;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
          v10 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            return;
        }
        LOWORD(v22) = 0;
        v11 = "Ignoring GPS because older than last precise location";
        goto LABEL_34;
      }
      sub_1000CBA38(a1 + 696, a2);
    }
    else
    {
      sub_1001A3BF0(a1 + 696, a2);
      *(_BYTE *)(a1 + 688) = 1;
    }
    if (qword_100417ED8 == -1)
    {
      v18 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_23:
        if (*(_BYTE *)(a1 + 1536))
        {
          v20 = *(void **)(a1 + 1568);
          if (v20)
          {
            *(_QWORD *)(a1 + 1576) = v20;
            operator delete(v20);
          }
          v21 = *(void **)(a1 + 1544);
          if (v21)
          {
            *(_QWORD *)(a1 + 1552) = v21;
            operator delete(v21);
          }
          *(_BYTE *)(a1 + 1536) = 0;
        }
        if (sub_1000BFBE8(*(_QWORD *)(a1 + 248)))
        {
          sub_10022C52C(*(_QWORD *)(a1 + 176), a2);
          *(_BYTE *)(a1 + 304) = 1;
        }
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v18 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_23;
    }
    v19 = *(_QWORD *)(a1 + 792);
    v22 = 134217984;
    v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "fLastGpsLikePreciseLocation gps with accuracy %f", (uint8_t *)&v22, 0xCu);
    goto LABEL_23;
  }
}

void sub_100005618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100051ED0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100005630(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  sub_10001D9FC((id *)(a1 + 88));
  *(_QWORD *)a1 = off_1004063D8;
  v2 = *(_QWORD **)(a1 + 64);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    return a1;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_10000572C(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003F1A88;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100052BA8(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_10000577C(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1003FC300;
  a1[1] = off_1003FC398;
  sub_10000895C((uint64_t)(a1 + 2));
  a1[7] = a2;
  operator new();
}

void sub_10000583C()
{
  operator delete();
}

void sub_1000058CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F4558;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_10000595C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10000596C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "path"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:", v2));

  return v3;
}

void sub_1000059B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000059C0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 7864);
  std::mutex::lock((std::mutex *)(a1 + 7864));
  v5 = *(char **)(a1 + 7936);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 7944);
  if ((unint64_t)v5 < v7)
  {
    *(_QWORD *)v5 = a2;
    v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 7928);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 7928) = v15;
      *(_QWORD *)(a1 + 7936) = v8;
      *(_QWORD *)(a1 + 7944) = v16;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  v6 = *(char **)(a1 + 7928);
  *(_QWORD *)(a1 + 7928) = v15;
  *(_QWORD *)(a1 + 7936) = v8;
  *(_QWORD *)(a1 + 7944) = v16;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 7936) = v8;
  std::mutex::unlock(v4);
}

void sub_100005B78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100005B8C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  int64_t v7;

  v4 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 280))(*(_QWORD *)(a1 + 64), a2);
  v6 = *(char **)(a1 + 160);
  v5 = *(char **)(a1 + 168);
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = *(char **)(a1 + 168);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8)
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    *(_QWORD *)(a1 + 168) = &v6[v7];
  }
  std::mutex::unlock(v4);
}

void sub_100005C28(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::string *sub_100005C3C(uint64_t a1, const std::string *a2)
{
  std::string *result;

  result = std::string::operator=((std::string *)(a1 + 64), a2);
  *(_WORD *)(a1 + 136) |= 0x10u;
  return result;
}

uint64_t *sub_100005C6C(uint64_t *result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(_BYTE *)(v1 + 104))
      *(_BYTE *)(v1 + 104) = 0;
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(_QWORD *)(v1 + 80) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 32);
    if (v3)
    {
      *(_QWORD *)(v1 + 40) = v3;
      operator delete(v3);
    }
    operator delete();
  }
  return result;
}

dispatch_object_t *sub_100005D30(dispatch_object_t *a1)
{
  dispatch_release(*a1);
  return a1;
}

void sub_100005DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100005DD8(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_1000CDEB8();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void sub_100006034(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 96));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

uint64_t *sub_1000060D0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 40))
      *(_BYTE *)(v2 + 40) = 0;
    if (*(_BYTE *)(v2 + 8))
      *(_BYTE *)(v2 + 8) = 0;
    operator delete();
  }
  return a1;
}

void sub_100006184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100006194(uint64_t a1)
{
  NSObject *v2;
  int v3;
  unsigned int *v4;
  _DWORD v6[2];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 113) & 4) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)a1 + 84);
    return *v4;
  }
  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    v3 = *(_DWORD *)(*(_QWORD *)a1 + 80);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No regional value specified for 'regionalLocationOfInterestMergeRadiusKM', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  v4 = (unsigned int *)(*(_QWORD *)a1 + 80);
  return *v4;
}

void sub_100006298(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(*(_QWORD *)v2 + 8), "startListeningCachedScans");
  objc_autoreleasePoolPop(v3);
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1000062EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  std::promise<void> *v17;
  std::exception_ptr v18;
  std::exception_ptr v19[7];

  __cxa_begin_catch(a1);
  v17 = *(std::promise<void> **)(v16 + 40);
  std::current_exception();
  v18.__ptr_ = v19;
  std::promise<void>::set_exception(v17, v18);
  std::exception_ptr::~exception_ptr(v19);
  __cxa_end_catch();
}

void sub_100006328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100006380(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(*(_QWORD *)v2 + 8), "stopListeningCachedScans");
  objc_autoreleasePoolPop(v3);
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1000063D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  std::promise<void> *v17;
  std::exception_ptr v18;
  std::exception_ptr v19[7];

  __cxa_begin_catch(a1);
  v17 = *(std::promise<void> **)(v16 + 40);
  std::current_exception();
  v18.__ptr_ = v19;
  std::promise<void>::set_exception(v17, v18);
  std::exception_ptr::~exception_ptr(v19);
  __cxa_end_catch();
}

void sub_100006410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10000642C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 96));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

uint64_t sub_1000064C8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  *(_QWORD *)a1 = off_1003EF898;
  v3 = *a2;
  v4 = a2[1];
  v5 = *((_QWORD *)a2 + 6);
  v6 = a2[2];
  *(_QWORD *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v7 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if (!*(_BYTE *)(a1 + 42))
  {
    v19 = operator new(0x20uLL);
    v19[1] = 0;
    v19[2] = 0;
    *v19 = off_1003EFA08;
    v19[3] = off_1003EFA58;
    *(_QWORD *)(a1 + 80) = v19 + 3;
    *(_QWORD *)(a1 + 88) = v19;
    if (*(_BYTE *)(a1 + 9))
      goto LABEL_8;
LABEL_14:
    v20 = operator new(0x20uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = off_1003EFAF8;
    v20[3] = off_1003EFB48;
    v15 = *(std::__shared_weak_count **)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v20 + 3;
    *(_QWORD *)(a1 + 72) = v20;
    if (!v15)
      return a1;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (v22)
      return a1;
    goto LABEL_18;
  }
  v8 = operator new(0x1C0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = off_1003EF9B8;
  v9 = sub_1000C6660((uint64_t)(v8 + 3), *(double *)(a1 + 48));
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v8;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!*(_BYTE *)(a1 + 9))
    goto LABEL_14;
LABEL_8:
  v13 = operator new(0x1F38uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = off_1003EFAA8;
  v14 = sub_1000C83A4((uint64_t)(v13 + 3), a1 + 16, v7);
  v15 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v13;
  if (!v15)
    return a1;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
LABEL_18:
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_1000066C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::mutex *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v1 + 160);
  if (v6)
  {
    *(_QWORD *)(v1 + 168) = v6;
    operator delete(v6);
  }
  std::mutex::~mutex(v3);
  sub_1000E095C(v4);
  sub_1000E095C(v2);
  _Unwind_Resume(a1);
}

void sub_100006814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100006834(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  sub_100018860(a1);
  *(_QWORD *)a1 = off_100406488;
  objc_initWeak((id *)(a1 + 96), v3);

  return a1;
}

void sub_100006880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100006890(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17[2];
  char v18;
  std::string __p;
  __int128 v20;

  *(_QWORD *)a1 = off_1004007D0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 16), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 40), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  if (*a4)
LABEL_22:
    operator new();
  v18 = 10;
  strcpy((char *)v17, "privacy.db");
  if (*((char *)a2 + 23) < 0)
    sub_10006CED8(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  else
    __p = *(std::string *)a2;
  sub_1000675EC(&__p, (uint64_t)v17);
  sub_1000CB228((uint64_t)&__p, 0, (uint64_t *)&v20);
  v10 = v20;
  v20 = 0uLL;
  v11 = (std::__shared_weak_count *)a4[1];
  *(_OWORD *)a4 = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_20;
  v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((v18 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_25:
      operator delete(v17[0]);
      goto LABEL_22;
    }
  }
  else
  {
LABEL_20:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((v18 & 0x80000000) == 0)
    goto LABEL_22;
  goto LABEL_25;
}

void sub_100006B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t *v22;
  void **v23;
  void **v24;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v21 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v21 + 39) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v21 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v24);
  if ((*(char *)(v21 + 39) & 0x80000000) == 0)
  {
LABEL_4:
    sub_100278934(v22);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*v23);
  sub_100278934(v22);
  _Unwind_Resume(a1);
}

void sub_100006D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100006D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100006D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100006D8C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __str;
  uint64_t v14;
  std::__shared_weak_count *v15;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 48))(&v14);
  v2 = v14;
  *(_BYTE *)(v14 + 32) = 0;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  std::string::operator=((std::string *)(v2 + 8), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v4 = v14;
  v3 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a1[2];
  a1[1] = v4;
  a1[2] = v3;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_100006E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1000E095C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100006EB0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003F2AF0;
  if ((_QWORD *)qword_10041AA40 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100006F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  _BYTE v23[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v23, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 5221);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v22, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v23);
  }
  v5 = *(_DWORD *)(a2 + 48);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 48);
    v7 = *(_DWORD *)(a1 + 52);
    v8 = v6 + v5;
    if (v7 < v8)
    {
      v9 = 2 * v7;
      if (2 * v7 <= v8)
        v9 = v8;
      if (v9 <= 4)
        v9 = 4;
      *(_DWORD *)(a1 + 52) = v9;
      operator new[]();
    }
    memcpy((void *)(*(_QWORD *)(a1 + 40) + 4 * v6), *(const void **)(a2 + 40), 4 * *(int *)(a2 + 48));
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
  }
  v10 = *(_DWORD *)(a2 + 76);
  if (!(_BYTE)v10)
    goto LABEL_20;
  if ((v10 & 1) != 0)
  {
    v14 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 76) |= 1u;
    *(_DWORD *)(a1 + 16) = v14;
    v10 = *(_DWORD *)(a2 + 76);
    if ((v10 & 2) == 0)
    {
LABEL_14:
      if ((v10 & 4) == 0)
        goto LABEL_15;
      goto LABEL_28;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_14;
  }
  v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 76) |= 2u;
  *(_DWORD *)(a1 + 20) = v15;
  v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 4) == 0)
  {
LABEL_15:
    if ((v10 & 8) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v16 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) |= 4u;
  *(_DWORD *)(a1 + 24) = v16;
  v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 8) == 0)
  {
LABEL_16:
    if ((v10 & 0x10) == 0)
      goto LABEL_17;
LABEL_30:
    v18 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 76) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v18;
    v10 = *(_DWORD *)(a2 + 76);
    if ((v10 & 0x20) == 0)
    {
LABEL_18:
      if ((v10 & 0x40) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_29:
  v17 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 76) |= 8u;
  *(_DWORD *)(a1 + 28) = v17;
  v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 0x10) != 0)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x20) == 0)
    goto LABEL_18;
LABEL_31:
  v19 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 76) |= 0x20u;
  *(_DWORD *)(a1 + 36) = v19;
  v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 0x40) != 0)
  {
LABEL_19:
    v11 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) |= 0x40u;
    *(_DWORD *)(a1 + 56) = v11;
    v10 = *(_DWORD *)(a2 + 76);
  }
LABEL_20:
  if ((v10 & 0xFF00) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((v10 & 0x100) == 0)
  {
    if ((v10 & 0x200) == 0)
      goto LABEL_23;
LABEL_34:
    v21 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 76) |= 0x200u;
    *(_DWORD *)(a1 + 64) = v21;
    if ((*(_DWORD *)(a2 + 76) & 0x400) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_24;
  }
  v20 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) |= 0x100u;
  *(_DWORD *)(a1 + 60) = v20;
  v10 = *(_DWORD *)(a2 + 76);
  if ((v10 & 0x200) != 0)
    goto LABEL_34;
LABEL_23:
  if ((v10 & 0x400) != 0)
  {
LABEL_24:
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a1 + 76) |= 0x400u;
    *(_DWORD *)(a1 + 68) = v12;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000071CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1000071E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000071F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  void *v12;
  void *__p[2];
  char v14;
  std::string buf;

  *(_QWORD *)a1 = off_1003FFC20;
  *(_QWORD *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a2;
  v7 = (uint64_t *)(a1 + 104);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 120) = a3;
  sub_1000BC9B8(a4, a1 + 128);
  *(_DWORD *)(a1 + 184) = sub_1000BFC78(a4);
  *(double *)(a1 + 192) = sub_1000BFC38(a4);
  sub_1000BFC90(a4, a1 + 200);
  if (!*v7)
  {
    sub_1000D5048(__p, "");
    sub_100263CDC("In order to auto-multifloor/multibuilding between a set of locations, you must at least provide a non-empty set of locations", &buf);
    sub_100174738((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v14 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v12);
  }
  if (qword_100417ED8 == -1)
  {
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FFC90);
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_5;
  }
  v9 = sub_1002682EC(*v7);
  LODWORD(buf.__r_.__value_.__l.__data_) = 134283521;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Auto switching between %{private}zu locations", (uint8_t *)&buf, 0xCu);
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FFC90);
    v10 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return a1;
    goto LABEL_6;
  }
LABEL_5:
  v10 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CoarseIndoorSpec is %d", (uint8_t *)&buf, 8u);
  }
  return a1;
}

void sub_100007464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  sub_100094C10(v22);
  sub_1000E095C(v21);
  sub_100265150((_QWORD *)(v20 + 8));
  _Unwind_Resume(a1);
}

void sub_100007624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100007738(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003F4608;
  if ((_QWORD *)qword_10041AB60 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[18];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100007834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)DispatchMonotonicTimer;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100007994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000079D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  void *__p;
  uint64_t v27;
  char *v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    if (v3 >> 61)
      sub_1000D02C0();
    v4 = (char *)operator new(8 * v3);
    __p = v4;
    v27 = (uint64_t)v4;
    v28 = &v4[8 * v3];
    v5 = *(_QWORD **)(a2 + 32);
    if (!v5)
      goto LABEL_37;
    while (1)
    {
LABEL_9:
      v7 = v5 + 4;
      if (v4 < v28)
      {
        *(_QWORD *)v4 = v7;
        v6 = (uint64_t)(v4 + 8);
        goto LABEL_8;
      }
      v8 = (char *)__p;
      v9 = v4 - (_BYTE *)__p;
      v10 = (v4 - (_BYTE *)__p) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        sub_1000D02C0();
      v12 = v28 - (_BYTE *)__p;
      if ((v28 - (_BYTE *)__p) >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 61)
          sub_1000CDEB8();
        v14 = operator new(8 * v13);
        v15 = &v14[8 * v10];
        *v15 = v7;
        v6 = (uint64_t)(v15 + 1);
        if (v4 == v8)
        {
LABEL_19:
          __p = v15;
          v28 = &v14[8 * v13];
          if (!v4)
            goto LABEL_8;
LABEL_26:
          operator delete(v4);
          goto LABEL_8;
        }
      }
      else
      {
        v14 = 0;
        v15 = (_QWORD *)(8 * v10);
        *(_QWORD *)(8 * v10) = v7;
        v6 = 8 * v10 + 8;
        if (v4 == v8)
          goto LABEL_19;
      }
      v16 = v4 - 8 - v8;
      if (v16 < 0x168)
      {
        v17 = v4;
        goto LABEL_24;
      }
      if (&v14[v9 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v9 - 8])
        break;
      if (&v4[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v4 - 8)
      {
        v17 = v4;
        goto LABEL_24;
      }
      if ((unint64_t)(v4 - &v14[v9]) < 0x20)
      {
        v17 = v4;
        goto LABEL_24;
      }
      v19 = (v16 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = &v4[-v20];
      v15 = (_QWORD *)((char *)v15 - v20);
      v21 = &v14[8 * v10 - 16];
      v22 = v4 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
LABEL_25:
      v4 = (char *)__p;
      __p = v15;
      v28 = &v14[8 * v13];
      if (v4)
        goto LABEL_26;
LABEL_8:
      v27 = v6;
      v5 = (_QWORD *)*v5;
      v4 = (char *)v6;
      if (!v5)
        goto LABEL_37;
    }
    v17 = v4;
    do
    {
LABEL_24:
      v18 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *--v15 = v18;
    }
    while (v17 != v8);
    goto LABEL_25;
  }
  v4 = 0;
  v5 = *(_QWORD **)(a2 + 32);
  if (v5)
    goto LABEL_9;
LABEL_37:
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &__p);
  if (__p)
  {
    v27 = (uint64_t)__p;
    operator delete(__p);
  }
}

void sub_100007C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100007D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NewWifiScanner;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

uint64_t sub_100007DB8(uint64_t a1, int a2, void *a3)
{
  id v5;

  v5 = a3;
  sub_100018860(a1);
  *(_QWORD *)a1 = off_100404C78;
  *(_DWORD *)(a1 + 96) = a2;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 144) = 0;
  objc_initWeak((id *)(a1 + 152), v5);

  return a1;
}

void sub_100007E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100007E38(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  _QWORD *v5;

  *(_QWORD *)a1 = off_1003FF238;
  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v5 = operator new(0x3C8uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = off_1003FF398;
  *(_QWORD *)(a1 + 48) = sub_1000C8E44(v5 + 3);
  *(_QWORD *)(a1 + 56) = v5;
  operator new();
}

void sub_100007F60()
{
  operator delete();
}

void sub_100007FE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100008000(uint64_t a1, int a2)
{
  NSObject *v2;
  uint8_t buf[8];
  uint64_t v4;

  *(_DWORD *)(a1 + 8) = a2;
  if (qword_100417ED8 == -1)
  {
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE6D0);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(_QWORD *)buf = sub_1000CA158;
      v4 = 0;
      sub_100011A34();
    }
  }
  *(_WORD *)buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Starting localizer thread", buf, 2u);
  goto LABEL_4;
}

void sub_100008174(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3F28;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_1000081B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  unsigned int *v4;
  _DWORD v6[2];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 112) & 0x10) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)a1 + 60);
    return *v4;
  }
  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    v3 = *(_DWORD *)(*(_QWORD *)a1 + 56);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalPrefetchRadiusKM', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  v4 = (unsigned int *)(*(_QWORD *)a1 + 56);
  return *v4;
}

void sub_100008310(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  id WeakRetained;
  id v7;

  v4 = (id *)(a1 + 104);
  v5 = a1 + 8;
  if (*(_BYTE *)a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a2 + 96));
    objc_storeWeak(v4, WeakRetained);

    if (v5 != a2)
      sub_1002F4CB4(a1 + 80, *(_QWORD **)(a2 + 72), *(_QWORD **)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4);
  }
  else
  {
    sub_100018860(a1 + 8);
    *(_QWORD *)(a1 + 8) = off_100404DC0;
    v7 = objc_loadWeakRetained((id *)(a2 + 96));
    objc_initWeak(v4, v7);

    *(_BYTE *)a1 = 1;
  }
}

void sub_1000083D0(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003F3068;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_1000C537C(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100008768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)BaseWifiScannerBackend;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

_QWORD *sub_1000087A4(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;

  v2 = (char *)operator new(0x88uLL);
  sub_100330A4C((uint64_t)v2, "UI thread");
  *a1 = v2 + 24;
  a1[1] = v2;
  v3 = (char *)operator new(0x88uLL);
  sub_100330BB4((uint64_t)v3, "MapState");
  a1[2] = v3 + 24;
  a1[3] = v3;
  v4 = (char *)operator new(0x88uLL);
  sub_100330CDC((uint64_t)v4, "DataUploadDb");
  a1[4] = v4 + 24;
  a1[5] = v4;
  return a1;
}

void sub_100008824(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;
  operator delete(v3);
  sub_1000E095C(v1 + 16);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_100008854(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;
  operator delete(v3);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_100008874(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_100008888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1000088A0(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "onQueueNotifyDelegatePrefetchComplete");

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_1000088E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000088F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1003F3FD8;
  if ((_QWORD *)qword_10041AB18 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_10000895C(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  char *v4;
  std::string v6;
  void *__p[2];
  int64_t v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v6.__r_.__value_.__r.__words[1] = xmmword_100382FE0;
  strcpy(v6.__r_.__value_.__l.__data_, "com.apple.purpleslam.cpq.");
  v2 = std::string::append(&v6, (const std::string::value_type *)((unint64_t)"19LocalizerInputEvent" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v8 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  sub_10000CD1C((dispatch_queue_t *)(a1 + 32), v4);
  if (SHIBYTE(v8) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100008A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_1000F7D3C(v15);
    _Unwind_Resume(a1);
  }
  sub_1000F7D3C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100008A7C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  int v5;
  __int128 v7;
  uint64_t v8;
  unsigned __int8 v9;
  __int128 __p;
  uint64_t v11;

  v9 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10006CED8(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v9 = 1;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
    v7 = *a3;
    v8 = *((_QWORD *)a3 + 2);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_100405758;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_7:
    *(_OWORD *)(a1 + 32) = __p;
    *(_QWORD *)(a1 + 48) = v11;
    v11 = 0;
    __p = 0uLL;
    v5 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    goto LABEL_8;
  }
  sub_10006CED8(&v7, *(void **)a3, *((_QWORD *)a3 + 1));
  v5 = v9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_100405758;
  *(_BYTE *)(a1 + 24) = 0;
  if (v5)
    goto LABEL_7;
LABEL_8:
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  v8 = 0;
  v7 = 0uLL;
  *(_BYTE *)(a1 + 56) = 1;
  *(_WORD *)(a1 + 111) = 273;
  strcpy((char *)(a1 + 88), "survey_keep_awake");
  *(_QWORD *)(a1 + 120) = 6370413;
  *(_BYTE *)(a1 + 143) = 3;
  if (v5 && SHIBYTE(v11) < 0)
    operator delete((void *)__p);
  return a1;
}

void sub_100008C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14)
  {
    if (a20 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100008C3C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD v7[5];
  _QWORD v8[7];

  v2 = atomic_load((unsigned __int8 *)&qword_10041A328);
  if ((v2 & 1) == 0)
  {
    v3 = a1;
    v4 = a2;
    v5 = __cxa_guard_acquire(&qword_10041A328);
    a2 = v4;
    v6 = v5;
    a1 = v3;
    if (v6)
    {
      sub_10000CD1C(&qword_10041A320, "com.apple.indoor.WifiSettingsSingleton.changeListeners");
      __cxa_atexit((void (*)(void *))sub_100005D30, &qword_10041A320, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10041A328);
      a1 = v3;
      a2 = v4;
    }
  }
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3802000000;
  v8[3] = sub_1002EF968;
  v8[4] = nullsub_216;
  v8[5] = a1;
  v8[6] = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1002EF978;
  v7[3] = &unk_100404780;
  v7[4] = v8;
  sub_10005C5D4(&qword_10041A320, v7);
  _Block_object_dispose(v8, 8);
}

void sub_100008D5C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 1592);
  std::mutex::lock((std::mutex *)(a1 + 1592));
  v5 = *(char **)(a1 + 1664);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 1672);
  if ((unint64_t)v5 < v7)
  {
    *(_QWORD *)v5 = a2;
    v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 1656);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 1656) = v15;
      *(_QWORD *)(a1 + 1664) = v8;
      *(_QWORD *)(a1 + 1672) = v16;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  v6 = *(char **)(a1 + 1656);
  *(_QWORD *)(a1 + 1656) = v15;
  *(_QWORD *)(a1 + 1664) = v8;
  *(_QWORD *)(a1 + 1672) = v16;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 1664) = v8;
  std::mutex::unlock(v4);
}

void sub_100008F0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100008F20(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  size_t v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  _BYTE *v11;
  size_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;

  if ((_DWORD)a2 == -1)
    return 0;
  v4 = *(_BYTE **)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v4 < v5)
    {
      *(_QWORD *)(a1 + 48) = v4 + 1;
      *v4 = a2;
      return a2;
    }
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v8 = *(void **)(a1 + 16);
    v7 = v5 - (_QWORD)v8;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v7 = 0;
    v8 = *(void **)(a1 + 16);
  }
  v9 = v7 >> 1;
  if (v7 >> 1 <= 0x100)
    v9 = 256;
  while (__CFADD__(v9, v7))
  {
    v10 = v9 >= 2;
    v9 >>= 1;
    if (!v10)
    {
      v11 = 0;
      v12 = v7;
LABEL_18:
      memmove(v11, v8, v7);
      v13 = 0;
      if (!*(_BYTE *)(a1 + 72))
        goto LABEL_20;
LABEL_19:
      operator delete(v8);
      goto LABEL_20;
    }
  }
  v12 = v9 + v7;
  v11 = operator new(v9 + v7);
  if (v7)
    goto LABEL_18;
  v13 = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_19;
LABEL_20:
  *(_BYTE *)(a1 + 72) = 1;
  if (v13)
  {
    v14 = &v11[v12];
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v11;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = v11 + 1;
      if (v11 == v14)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v11;
      if (v11 == v14)
      {
LABEL_23:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, a2);
        return a2;
      }
    }
  }
  else
  {
    v15 = &v11[*(_QWORD *)(a1 + 64) - (_QWORD)v8];
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_DWORD *)(a1 + 48) - v16;
    v18 = v16 - (_QWORD)v8;
    v20 = *(_QWORD *)(a1 + 16);
    v19 = *(_QWORD *)(a1 + 24);
    v21 = &v11[v18];
    v22 = &v11[v12];
    *(_QWORD *)(a1 + 56) = &v11[v12];
    *(_QWORD *)(a1 + 64) = v15;
    v23 = &v21[v17];
    *(_QWORD *)(a1 + 40) = v21;
    *(_QWORD *)(a1 + 48) = v23;
    if ((*(_BYTE *)(a1 + 76) & 8) != 0)
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = &v11[(int)v19 - (int)v20];
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v23 + 1;
      if (v23 == v22)
        goto LABEL_23;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = 0;
      v24 = v11;
      v11 = &v21[v17];
      *(_QWORD *)(a1 + 32) = v24;
      if (v23 == v22)
        goto LABEL_23;
    }
  }
  *(_QWORD *)(a1 + 48) = v11 + 1;
  *v11 = a2;
  return a2;
}

void sub_10000927C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000934C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100009390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000093A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a1 = off_1004007D0;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v2)
        goto LABEL_4;
      return a1;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
LABEL_4:
    sub_1000CB118();
    operator delete();
  }
  return a1;
}

uint64_t sub_1000094EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  if (*(_BYTE *)(a1 + 8))
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(void **)(a1 + 16);
      if (v9 != v8)
      {
        do
        {
          v11 = *(std::__shared_weak_count **)(v9 - 8);
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 16;
        }
        while (v9 != v8);
        v10 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v8;
      operator delete(v10);
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_10000960C(uint64_t a1)
{

}

void sub_100009908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100009970(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  v5 = *(char **)(a1 + 1928);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 1936);
  if ((unint64_t)v5 < v7)
  {
    *(_QWORD *)v5 = a2;
    v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 1920);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v7 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 1920) = v15;
      *(_QWORD *)(a1 + 1928) = v8;
      *(_QWORD *)(a1 + 1936) = v16;
      if (!v5)
        goto LABEL_14;
LABEL_13:
      operator delete(v6);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = &v5[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v5 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  v6 = *(char **)(a1 + 1920);
  *(_QWORD *)(a1 + 1920) = v15;
  *(_QWORD *)(a1 + 1928) = v8;
  *(_QWORD *)(a1 + 1936) = v16;
  if (v6)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 1928) = v8;
  std::mutex::unlock(v4);
}

void sub_100009B20(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 sub_100009B34(__n128 *a1, uint64_t a2)
{
  unint64_t *v4;
  std::ios_base *v5;
  void **v6;
  uint64_t v7;
  __n128 result;
  void *__p[2];
  unsigned __int8 v10;

  v4 = &a1[6].n128_u64[1];
  v5 = (std::ios_base *)&a1[6].n128_i8[*(_QWORD *)(a1[6].n128_u64[1] - 24) + 8];
  v5->__exceptions_ = 1;
  std::ios_base::clear(v5, v5->__rdstate_);
  sub_100023CD8(a2);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (uint64_t)__p[1];
  sub_1000F0508(v4, (uint64_t)v6, v7);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  result = *(__n128 *)(*(unint64_t *)((char *)v4 + *(_QWORD *)(a1[6].n128_u64[1] - 24) + 40) + 40);
  a1[17] = result;
  return result;
}

uint64_t sub_100009BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v24;
  char v25;

  if (v25 < 0)
    operator delete(v24);
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  __cxa_begin_catch(exception_object);
  __cxa_end_catch();
  return 0;
}

void sub_100009C50()
{
  operator new();
}

void sub_100009D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100009EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100009F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 96));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

void sub_100009FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = a2;
  v5 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (*(char *)(a2 + 23) < 0)
    a2 = *(_QWORD *)a2;
  rename((const std::__fs::filesystem::path *)a1, (const std::__fs::filesystem::path *)a2, (std::error_code *)a3);
  if (v6 && (v7 = *__error()) != 0)
  {
    sub_1000D499C(v7, v5, v4, a3, (uint64_t)"boost::filesystem::rename");
  }
  else if (a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_10000A06C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  objc_msgSend(WeakRetained, "strategyChanged:", a2);

}

void sub_10000A0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10000A0BC(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[4];
  _QWORD v9[2];
  void *__p;
  char v11;
  void *__dst[2];
  uint64_t v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;

  sub_100024F74(a2, (uint64_t)v16);
  sub_1000C28C8((uint64_t)a2, (uint64_t)v14);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10006CED8(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a3 + 16);
  }
  v6 = sub_1000C2964((uint64_t)a2);
  v11 = 0;
  LOBYTE(__p) = 0;
  memset(v8, 0, sizeof(v8));
  v7[0] = off_1003F64B8;
  v7[1] = v8;
  v9[0] = 0;
  *(_QWORD *)((char *)v9 + 5) = 0;
  sub_1000C431C(a1, v16, v14, __dst, v6, &__p, v7);
  sub_10000CF68((uint64_t)v7);
  if (v11 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_6:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__dst[0]);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(v16[0]);
    return;
  }
LABEL_11:
  operator delete(v14[0]);
  if (v17 < 0)
    goto LABEL_12;
}

void sub_10000A1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 57) < 0)
  {
    operator delete(*(void **)(v29 - 80));
    if ((*(char *)(v29 - 33) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v29 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v29 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A2A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *(_QWORD *)a1 = off_1003FFD50;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = v2 + 8;
      v5 = *(std::__shared_weak_count **)(a1 + 32);
      v18 = v4;
      v19 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      sub_10003A40C(v3, &v18);
      v8 = v19;
      if (v19)
      {
        v9 = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 40))
  {
    sub_100073074((_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 40) = 0;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_10000A4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000A728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000A764(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  v6 = *(char **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = a2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_14;
  }
  v9 = *(char **)(a1 + 160);
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    sub_1000D02C0();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      sub_1000CDEB8();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
    {
LABEL_12:
      *(_QWORD *)(a1 + 160) = v15;
      *(_QWORD *)(a1 + 168) = v8;
      *(_QWORD *)(a1 + 176) = v16;
      if (!v6)
        goto LABEL_14;
LABEL_13:
      operator delete(v7);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)(8 * v10);
    v16 = 0;
    *(_QWORD *)(8 * v10) = a2;
    v8 = 8 * v10 + 8;
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_12;
  }
  v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58)
    goto LABEL_28;
  if ((unint64_t)(v9 - v14) < 0x20)
    goto LABEL_28;
  v19 = (v18 >> 3) + 1;
  v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  v7 = &v6[-v20];
  v15 -= v20;
  v21 = &v14[8 * v10 - 16];
  v22 = v6 - 16;
  v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
    *(_OWORD *)v21 = v24;
    v21 -= 32;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_28:
    do
    {
      v25 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v7 != v9);
  }
  v7 = *(char **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v15;
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = v16;
  if (v7)
    goto LABEL_13;
LABEL_14:
  *(_QWORD *)(a1 + 168) = v8;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 272))(*(_QWORD *)(a1 + 64), a2);
  std::mutex::unlock(v4);
}

void sub_10000A91C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10000A930(_QWORD *a1@<X8>)
{
  sub_100016654(a1);
  operator new();
}

void sub_10000AA3C()
{
  operator delete();
}

void sub_10000AA90(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100026CE8(v1);
  _Unwind_Resume(a1);
}

void sub_10000AAA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  unint64_t v5;
  id v6;
  NSObject *v7;
  std::string *v8;
  id v9;
  NSObject *v10;
  std::string *v11;
  id v12;
  NSObject *v13;
  std::string __p;
  unint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  std::string *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100417F08 == -1)
  {
    v3 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v3 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40))
    v4 = "Encrypted";
  else
    v4 = "EncryptedUntilFirstUser";
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)v17 = v4;
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "making sure migration is unnecessary in %s DB", buf, 0xCu);
LABEL_7:
  v5 = sub_10000CA44(v2);
  v15 = v5;
  if (v5 == 2 || !(_BYTE)v5 && HIDWORD(v5) == 17)
  {
    sub_1000CB33C(v2, 17);
    sub_10002DFD0(v2);
    sub_1000C6944(*(sqlite3 ***)(v2 + 40), 1);
  }
  else
  {
    v6 = sub_1001E487C();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      sub_1001E5DD8((char *)&v15, &__p);
      v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      v18 = 2082;
      v19 = v8;
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "currentVersion.dbOkForVersion(gDbVersion)";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Migration is not supported\", \"version\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v9 = sub_1001E487C();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_signpost_enabled(v10))
    {
      sub_1001E5DD8((char *)&v15, &__p);
      v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      v18 = 2082;
      v19 = v11;
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "currentVersion.dbOkForVersion(gDbVersion)";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Migration is not supported", "{\"msg%{public}.0s\":\"Migration is not supported\", \"version\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    v12 = sub_1001E487C();
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      sub_1001E5DD8((char *)&v15, &__p);
      sub_100342E44((char *)&__p, (uint64_t)buf, v13);
    }

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 388, "SqlPrivacyDb_block_invoke");
    __break(1u);
  }
}

void sub_10000ADE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000AE04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 96));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

uint64_t sub_10000AEA0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[8];

  v7 = a2;
  v6 = 0;
  v2 = atomic_load((unsigned __int8 *)&qword_10041A328);
  if ((v2 & 1) == 0)
  {
    v4 = a1;
    v5 = __cxa_guard_acquire(&qword_10041A328);
    a1 = v4;
    if (v5)
    {
      sub_10000CD1C(&qword_10041A320, "com.apple.indoor.WifiSettingsSingleton.changeListeners");
      __cxa_atexit((void (*)(void *))sub_100005D30, &qword_10041A320, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10041A328);
      a1 = v4;
    }
  }
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x4002000000;
  v9[3] = sub_1002EF9D0;
  v9[4] = nullsub_217;
  v9[5] = a1;
  v9[6] = &v7;
  v9[7] = &v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1002EF9E8;
  v8[3] = &unk_1004047A8;
  v8[4] = v9;
  sub_10005C5D4(&qword_10041A320, v8);
  _Block_object_dispose(v9, 8);
  return v6;
}

void sub_10000AFC4(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 2UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_10000B2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001F0F74(v68);

            _Unwind_Resume(a1);
          }
          sub_1001F0F74(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_10000B4F0(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  unint64_t v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  const void *v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  const void *v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v31;
  const void *v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v37;
  const void *v38;
  uint64_t v39;
  unsigned int v40;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v41;
  unsigned int *v42;
  unsigned int v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v45;
  _QWORD *v46;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v47;
  _QWORD *v48;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v49;
  unint64_t v50;
  _QWORD *v51;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;

  v4 = a2;
  v6 = *((_DWORD *)this + 19);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_15:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 12);
    *(_BYTE *)v4 = 16;
    v14 = (unint64_t)v4 + 1;
    if ((v13 & 0x80000000) != 0)
    {
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v13, v14, a3);
      v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0)
        goto LABEL_22;
    }
    else if (v13 > 0x7F)
    {
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, v14, a3);
      v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0)
        goto LABEL_22;
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v13;
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      v7 = *((_DWORD *)this + 19);
      if ((v7 & 4) != 0)
        goto LABEL_22;
    }
LABEL_4:
    if ((v7 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v8)
  {
    *(_BYTE *)a2 = 10;
    v9 = (_DWORD)a2 + 1;
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8[12];
    if (v10 <= 0x7F)
      goto LABEL_11;
LABEL_14:
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, v9, a3);
    v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000C0BF8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v8, v11, v12);
    if ((*((_DWORD *)this + 19) & 2) != 0)
      goto LABEL_15;
    goto LABEL_3;
  }
  v8 = *(unsigned int **)(qword_10041AB20 + 16);
  *(_BYTE *)a2 = 10;
  v9 = (_DWORD)a2 + 1;
  v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8[12];
  if (v10 > 0x7F)
    goto LABEL_14;
LABEL_11:
  *((_BYTE *)v4 + 1) = (_BYTE)v10;
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)sub_1000C0BF8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v8, (uint64_t)v4 + 2, a3);
  if ((*((_DWORD *)this + 19) & 2) != 0)
    goto LABEL_15;
LABEL_3:
  v7 = *((_DWORD *)this + 19);
  if ((v7 & 4) == 0)
    goto LABEL_4;
LABEL_22:
  v15 = *((_QWORD *)this + 3);
  *(_BYTE *)v4 = 26;
  if (*(char *)(v15 + 23) < 0)
  {
    v16 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v15 + 8);
    if (v16 <= 0x7F)
      goto LABEL_24;
  }
  else
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v15 + 23);
    if (*(unsigned __int8 *)(v15 + 23) <= 0x7Fu)
    {
LABEL_24:
      *((_BYTE *)v4 + 1) = (_BYTE)v16;
      v17 = (_DWORD)v4 + 2;
      goto LABEL_27;
    }
  }
  v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (int)v4 + 1, a3);
LABEL_27:
  v18 = *(char *)(v15 + 23);
  if (v18 >= 0)
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15;
  else
    v19 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v15;
  if (v18 >= 0)
    v20 = (const void *)*(unsigned __int8 *)(v15 + 23);
  else
    v20 = (const void *)*(unsigned int *)(v15 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v19, v20, v17, a4);
  v7 = *((_DWORD *)this + 19);
  if ((v7 & 8) == 0)
  {
LABEL_5:
    if ((v7 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_34:
  v21 = *((_QWORD *)this + 4);
  *(_BYTE *)v4 = 34;
  if (*(char *)(v21 + 23) < 0)
  {
    v22 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v21 + 8);
    if (v22 <= 0x7F)
      goto LABEL_36;
  }
  else
  {
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v21 + 23);
    if (*(unsigned __int8 *)(v21 + 23) <= 0x7Fu)
    {
LABEL_36:
      *((_BYTE *)v4 + 1) = (_BYTE)v22;
      v23 = (_DWORD)v4 + 2;
      goto LABEL_39;
    }
  }
  v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, (int)v4 + 1, a3);
LABEL_39:
  v24 = *(char *)(v21 + 23);
  if (v24 >= 0)
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v21;
  else
    v25 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v21;
  if (v24 >= 0)
    v26 = (const void *)*(unsigned __int8 *)(v21 + 23);
  else
    v26 = (const void *)*(unsigned int *)(v21 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v25, v26, v23, a4);
  v7 = *((_DWORD *)this + 19);
  if ((v7 & 0x10) == 0)
  {
LABEL_6:
    if ((v7 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_46:
  v27 = *((_QWORD *)this + 5);
  *(_BYTE *)v4 = 42;
  if (*(char *)(v27 + 23) < 0)
  {
    v28 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v27 + 8);
    if (v28 <= 0x7F)
      goto LABEL_48;
  }
  else
  {
    v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v27 + 23);
    if (*(unsigned __int8 *)(v27 + 23) <= 0x7Fu)
    {
LABEL_48:
      *((_BYTE *)v4 + 1) = (_BYTE)v28;
      v29 = (_DWORD)v4 + 2;
      goto LABEL_51;
    }
  }
  v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, (int)v4 + 1, a3);
LABEL_51:
  v30 = *(char *)(v27 + 23);
  if (v30 >= 0)
    v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v27;
  else
    v31 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v27;
  if (v30 >= 0)
    v32 = (const void *)*(unsigned __int8 *)(v27 + 23);
  else
    v32 = (const void *)*(unsigned int *)(v27 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v31, v32, v29, a4);
  v7 = *((_DWORD *)this + 19);
  if ((v7 & 0x20) == 0)
  {
LABEL_7:
    if ((v7 & 0x40) == 0)
      goto LABEL_85;
LABEL_70:
    v39 = *((_QWORD *)this + 8);
    if (v39)
    {
      *(_BYTE *)v4 = 58;
      v40 = (_DWORD)v4 + 1;
      v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v39 + 24);
      if (v41 <= 0x7F)
        goto LABEL_72;
    }
    else
    {
      v39 = *(_QWORD *)(qword_10041AB20 + 64);
      *(_BYTE *)v4 = 58;
      v40 = (_DWORD)v4 + 1;
      v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v39 + 24);
      if (v41 <= 0x7F)
      {
LABEL_72:
        *((_BYTE *)v4 + 1) = (_BYTE)v41;
        v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
        if ((*(_BYTE *)(v39 + 28) & 1) == 0)
        {
LABEL_82:
          v48 = *(_QWORD **)(v39 + 8);
          v47 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v39 + 8);
          v46 = v48;
          if (v48)
          {
            if (*v46 != v46[1])
              v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v47, v4, a3);
          }
          goto LABEL_85;
        }
LABEL_76:
        v42 = *(unsigned int **)(v39 + 16);
        if (v42)
        {
          *(_BYTE *)v4 = 10;
          v43 = (_DWORD)v4 + 1;
          v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42[9];
          if (v44 <= 0x7F)
          {
LABEL_78:
            *((_BYTE *)v4 + 1) = (_BYTE)v44;
            v45 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
LABEL_81:
            v4 = sub_1000C1B38((wireless_diagnostics::google::protobuf::internal::WireFormat *)v42, v45, a3);
            goto LABEL_82;
          }
        }
        else
        {
          v42 = *(unsigned int **)(qword_10041AB18 + 16);
          *(_BYTE *)v4 = 10;
          v43 = (_DWORD)v4 + 1;
          v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v42[9];
          if (v44 <= 0x7F)
            goto LABEL_78;
        }
        v45 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v43, a3);
        goto LABEL_81;
      }
    }
    v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v41, v40, a3);
    if ((*(_BYTE *)(v39 + 28) & 1) == 0)
      goto LABEL_82;
    goto LABEL_76;
  }
LABEL_58:
  v33 = *((_QWORD *)this + 7);
  *(_BYTE *)v4 = 50;
  if (*(char *)(v33 + 23) < 0)
  {
    v34 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v33 + 8);
    if (v34 <= 0x7F)
      goto LABEL_60;
  }
  else
  {
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v33 + 23);
    if (*(unsigned __int8 *)(v33 + 23) <= 0x7Fu)
    {
LABEL_60:
      *((_BYTE *)v4 + 1) = (_BYTE)v34;
      v35 = (_DWORD)v4 + 2;
      goto LABEL_63;
    }
  }
  v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, (int)v4 + 1, a3);
LABEL_63:
  v36 = *(char *)(v33 + 23);
  if (v36 >= 0)
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v33;
  else
    v37 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)v33;
  if (v36 >= 0)
    v38 = (const void *)*(unsigned __int8 *)(v33 + 23);
  else
    v38 = (const void *)*(unsigned int *)(v33 + 8);
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRawToArray(v37, v38, v35, a4);
  if ((*((_DWORD *)this + 19) & 0x40) != 0)
    goto LABEL_70;
LABEL_85:
  if ((*((_BYTE *)this + 76) & 0x80) == 0)
  {
LABEL_89:
    v53 = (_QWORD *)*((_QWORD *)this + 1);
    v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v51 = v53;
    if (!v53)
      return v4;
    goto LABEL_94;
  }
  v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((int *)this + 13);
  *(_BYTE *)v4 = 64;
  v50 = (unint64_t)v4 + 1;
  if ((v49 & 0x80000000) == 0)
  {
    if (v49 > 0x7F)
    {
      v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v49, v50, a3);
      v55 = (_QWORD *)*((_QWORD *)this + 1);
      v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
      v51 = v55;
      if (!v55)
        return v4;
      goto LABEL_94;
    }
    *((_BYTE *)v4 + 1) = (_BYTE)v49;
    v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    goto LABEL_89;
  }
  v4 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v49, v50, a3);
  v54 = (_QWORD *)*((_QWORD *)this + 1);
  v52 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v51 = v54;
  if (!v54)
    return v4;
LABEL_94:
  if (*v51 != v51[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v52, v4, a3);
  return v4;
}

intptr_t sub_10000B948(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100404290);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
    goto LABEL_3;
  }
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Runloop has started, allowing init to continue", v4, 2u);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000BA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, objc_super a12)
{
  a12.super_class = (Class)WifiScannerThread;
  -[_Unwind_Exception dealloc](&a12, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10000BAD0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x49;
  v4 = v2 - 73;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF8uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF8uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF8uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_10000C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_10000C048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000C05C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000C074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000C08C(int a1@<W0>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[24];
  std::string v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  std::runtime_error v20;

  switch(a1)
  {
    case 0:
      v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      v3->__shared_weak_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_100401178;
      LODWORD(v3[1].__shared_owners_) = 0;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1004011C8;
      *a2 = (uint64_t)&v3[1];
      a2[1] = (uint64_t)v3;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      goto LABEL_19;
    case 1:
    case 3:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "Localizer type not ported");
      std::runtime_error::runtime_error(&v20, &v14);
      v20.__vftable = (std::runtime_error_vtbl *)&off_100400330;
      sub_10018D04C((uint64_t)v19);
      sub_10026C54C(&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 35, (uint64_t)v19);
    case 2:
    case 10:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "Localizer type deleted to simplify life.");
      std::runtime_error::runtime_error(&v20, &v14);
      v20.__vftable = (std::runtime_error_vtbl *)&off_100400330;
      sub_10018D04C((uint64_t)v18);
      sub_10026C54C(&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 42, (uint64_t)v18);
    case 4:
    case 5:
    case 7:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "Localizer type not ported");
      std::runtime_error::runtime_error(&v20, &v14);
      v20.__vftable = (std::runtime_error_vtbl *)&off_100400330;
      sub_10018D04C((uint64_t)v17);
      sub_10026C54C(&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 50, (uint64_t)v17);
    case 6:
      v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_owners_ = 0;
      v7 = (unint64_t *)&v3->__shared_owners_;
      v3->__shared_weak_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_100401290;
      LODWORD(v3[1].__shared_owners_) = 6;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_1003F4908;
      *a2 = (uint64_t)&v3[1];
      a2[1] = (uint64_t)v3;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      goto LABEL_19;
    case 8:
      v3 = (std::__shared_weak_count *)operator new(0x38uLL);
      v3->__shared_owners_ = 0;
      v11 = (unint64_t *)&v3->__shared_owners_;
      v3->__shared_weak_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_1004012E0;
      LODWORD(v3[1].__shared_owners_) = 8;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_100401330;
      LODWORD(v3[2].__vftable) = 6;
      v3[1].__shared_weak_owners_ = (uint64_t)off_1003F4908;
      *a2 = (uint64_t)&v3[1];
      a2[1] = (uint64_t)v3;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v6 = __ldaxr(v11);
      while (__stlxr(v6 - 1, v11));
      goto LABEL_19;
    case 9:
      v3 = (std::__shared_weak_count *)operator new(0x28uLL);
      v3->__shared_owners_ = 0;
      v9 = (unint64_t *)&v3->__shared_owners_;
      v3->__shared_weak_owners_ = 0;
      v3->__vftable = (std::__shared_weak_count_vtbl *)off_1004013B0;
      LODWORD(v3[1].__shared_owners_) = 9;
      v3[1].__vftable = (std::__shared_weak_count_vtbl *)off_100401400;
      *a2 = (uint64_t)&v3[1];
      a2[1] = (uint64_t)v3;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
LABEL_19:
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      break;
    case 11:
    case 12:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "Localizer type not ported");
      std::runtime_error::runtime_error(&v20, &v14);
      v20.__vftable = (std::runtime_error_vtbl *)&off_100400330;
      sub_10018D04C((uint64_t)v15);
      sub_10026C54C(&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 64, (uint64_t)v15);
    case 13:
      sub_10015A6A0(a2);
      break;
    case 14:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "make_shared<specs::MultiphonePdrNoMag>()");
      std::runtime_error::runtime_error(&v20, &v14);
      v20.__vftable = (std::runtime_error_vtbl *)&off_100400330;
      sub_10018D04C((uint64_t)v16);
      sub_10026C54C(&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 56, (uint64_t)v16);
    case 15:
      sub_10015F3C0(a2);
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      std::logic_error::logic_error((std::logic_error *)&v20, "Unrecognized localizer type");
      sub_10018D04C((uint64_t)v13);
      sub_1000F7E48((std::logic_error *)&v20, (uint64_t)"static shared_ptr<LocalizerSpec> LocalizerSpec::forLocalizerType(LocalizerType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_spec.cpp", 77, (uint64_t)v13);
  }
}

void sub_10000C5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::invalid_argument a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v28 - 48));
  if (a18 < 0)
    operator delete(a14.__vftable);
  _Unwind_Resume(a1);
}

void sub_10000C7A8(std::locale::facet *this)
{
  std::locale::facet_vtbl *shared_owners;
  std::locale::facet_vtbl *v3;
  void *v4;
  std::locale::facet_vtbl *v5;
  uint64_t v6;
  std::locale::facet_vtbl *v7;
  std::locale::facet_vtbl *v8;
  std::locale::facet_vtbl *v9;
  void *v10;
  std::locale::facet_vtbl *v11;
  uint64_t v12;
  std::locale::facet_vtbl *v13;
  std::locale::facet_vtbl *v14;
  std::locale::facet_vtbl *v15;
  void *v16;
  std::locale::facet_vtbl *v17;
  uint64_t v18;
  std::locale::facet_vtbl *v19;

  this->__vftable = (std::locale::facet_vtbl *)&off_1003F9288;
  shared_owners = (std::locale::facet_vtbl *)this[19].__shared_owners_;
  if (shared_owners)
  {
    v3 = this[20].__vftable;
    v4 = (void *)this[19].__shared_owners_;
    if (v3 != shared_owners)
    {
      do
      {
        if (SHIBYTE(v3[-1].__on_zero_shared) < 0)
          operator delete(v3[-1].~facet);
        --v3;
      }
      while (v3 != shared_owners);
      v4 = (void *)this[19].__shared_owners_;
    }
    this[20].__vftable = shared_owners;
    operator delete(v4);
  }
  v5 = this[18].__vftable;
  if (v5)
  {
    v6 = this[18].__shared_owners_;
    v7 = this[18].__vftable;
    if ((std::locale::facet_vtbl *)v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while ((std::locale::facet_vtbl *)v6 != v5);
      v7 = this[18].__vftable;
    }
    this[18].__shared_owners_ = (uint64_t)v5;
    operator delete(v7);
  }
  v8 = (std::locale::facet_vtbl *)this[16].__shared_owners_;
  if (v8)
  {
    v9 = this[17].__vftable;
    v10 = (void *)this[16].__shared_owners_;
    if (v9 != v8)
    {
      do
      {
        if (SHIBYTE(v9[-1].__on_zero_shared) < 0)
          operator delete(v9[-1].~facet);
        --v9;
      }
      while (v9 != v8);
      v10 = (void *)this[16].__shared_owners_;
    }
    this[17].__vftable = v8;
    operator delete(v10);
  }
  v11 = this[15].__vftable;
  if (v11)
  {
    v12 = this[15].__shared_owners_;
    v13 = this[15].__vftable;
    if ((std::locale::facet_vtbl *)v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while ((std::locale::facet_vtbl *)v12 != v11);
      v13 = this[15].__vftable;
    }
    this[15].__shared_owners_ = (uint64_t)v11;
    operator delete(v13);
  }
  v14 = (std::locale::facet_vtbl *)this[13].__shared_owners_;
  if (v14)
  {
    v15 = this[14].__vftable;
    v16 = (void *)this[13].__shared_owners_;
    if (v15 != v14)
    {
      do
      {
        if (SHIBYTE(v15[-1].__on_zero_shared) < 0)
          operator delete(v15[-1].~facet);
        --v15;
      }
      while (v15 != v14);
      v16 = (void *)this[13].__shared_owners_;
    }
    this[14].__vftable = v14;
    operator delete(v16);
  }
  v17 = this[12].__vftable;
  if (v17)
  {
    v18 = this[12].__shared_owners_;
    v19 = this[12].__vftable;
    if ((std::locale::facet_vtbl *)v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while ((std::locale::facet_vtbl *)v18 != v17);
      v19 = this[12].__vftable;
    }
    this[12].__shared_owners_ = (uint64_t)v17;
    operator delete(v19);
  }
  if (SHIBYTE(this[11].__shared_owners_) < 0)
  {
    operator delete((void *)this[10].__shared_owners_);
    if ((SHIBYTE(this[10].__vftable) & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(this[8].__shared_owners_) & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(this[10].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(this[9].__vftable);
  if ((SHIBYTE(this[8].__shared_owners_) & 0x80000000) == 0)
  {
LABEL_52:
    if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_61;
  }
LABEL_60:
  operator delete((void *)this[7].__shared_owners_);
  if ((SHIBYTE(this[7].__vftable) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(this[6].__vftable);
  if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(this[3].__shared_owners_) & 0x80000000) == 0)
      goto LABEL_55;
LABEL_63:
    operator delete((void *)this[2].__shared_owners_);
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
      goto LABEL_56;
LABEL_64:
    operator delete(this[1].__vftable);
    std::locale::facet::~facet(this);
    return;
  }
LABEL_62:
  operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__shared_owners_) < 0)
    goto LABEL_63;
LABEL_55:
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_64;
LABEL_56:
  std::locale::facet::~facet(this);
}

uint64_t sub_10000CA44(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v6;
  _QWORD *v7;
  __int16 v8;
  int v9;

  v2 = sub_100031AA0(*(sqlite3 ***)(a1 + 40));
  if (qword_100417F08 == -1)
  {
    v3 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      return v2;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v3 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      return v2;
  }
  v4 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v4 = (_QWORD *)*v4;
  v6 = 136446466;
  v7 = v4;
  v8 = 1026;
  v9 = HIDWORD(v2);
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "privacy.db @ %{public}s found to have %{public}d", (uint8_t *)&v6, 0x12u);
  return v2;
}

uint64_t sub_10000CB58(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F0A20;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10000CB94(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10000CBC4(_QWORD *a1@<X8>)
{
  sub_100016654(a1);
  operator new();
}

void sub_10000CCB4()
{
  operator delete();
}

void sub_10000CD08(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100026CE8(v1);
  _Unwind_Resume(a1);
}

dispatch_queue_t *sub_10000CD1C(dispatch_queue_t *a1, char *label)
{
  *a1 = dispatch_queue_create(label, 0);
  return a1;
}

void sub_10000CD4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  objc_destroyWeak((id *)(a1 + 96));
  *(_QWORD *)a1 = off_1004064E8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  operator delete();
}

void sub_10000CEDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10000CEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10000CF0C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9B48;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    nullsub_22(a1 + 32);
  }
  else
  {
    nullsub_22(a1 + 32);
  }
  return a1;
}

uint64_t sub_10000CF68(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F64B8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_1000733B4(a1 + 8, *(_QWORD *)(a1 + 16));
  return a1;
}

wireless_diagnostics::google::protobuf::io::FileOutputStream *sub_10000CFB0(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::io::FileOutputStream *result;

  result = (wireless_diagnostics::google::protobuf::io::FileOutputStream *)sub_10005F0F0();
  if ((uint64_t)result - *(_QWORD *)(a1 + 72) >= 0x12A05F201)
  {
    *(_QWORD *)(a1 + 72) = sub_10003C888();
    result = *(wireless_diagnostics::google::protobuf::io::FileOutputStream **)(a1 + 48);
    if (result)
      return (wireless_diagnostics::google::protobuf::io::FileOutputStream *)wireless_diagnostics::google::protobuf::io::FileOutputStream::Flush(result);
  }
  return result;
}

uint64_t sub_10000D008(uint64_t a1)
{
  NSObject *v2;
  int v3;
  unsigned int *v4;
  _DWORD v6[2];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 112) & 0x40) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)a1 + 68);
    return *v4;
  }
  if (qword_100417EE8 != -1)
  {
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
    v2 = qword_100417EF0;
    if (!os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    goto LABEL_4;
  }
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    v3 = *(_DWORD *)(*(_QWORD *)a1 + 64);
    v6[0] = 67240192;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalPrefetchMaxFloorCount', using indoor value of %{public}u", (uint8_t *)v6, 8u);
  }
LABEL_5:
  v4 = (unsigned int *)(*(_QWORD *)a1 + 64);
  return *v4;
}

void sub_10000D488()
{
  void *v0;

  operator delete();
}

void sub_10000D4B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000D4C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA860;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_10000D508(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  __int128 v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  void *v17;
  _BYTE v18[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = a2;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v13;
    *(_QWORD *)&v4 = 138477827;
    v11 = v4;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v7, "hasPrefix:", CFSTR("com.apple.pipelined.TilePrefetch"), v11, (_QWORD)v12) & 1) != 0
          && (objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.pipelined.TilePrefetch.v0")) & 1) == 0)
        {
          if (qword_100417EF8 == -1)
          {
            v8 = qword_100417F00;
            if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
              goto LABEL_11;
          }
          else
          {
            dispatch_once(&qword_100417EF8, &stru_100407900);
            v8 = qword_100417F00;
            if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
            {
LABEL_11:
              *(_DWORD *)buf = v11;
              v17 = v7;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Cancelling existing stale session %{private}@", buf, 0xCu);
            }
          }
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:](NSURLSessionConfiguration, "backgroundSessionConfigurationWithIdentifier:", v7));
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:](NSURLSession, "sessionWithConfiguration:", v9));
          objc_msgSend(v10, "invalidateAndCancel");

          continue;
        }
      }
      v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v12, v18, 16);
    }
    while (v3);
  }

}

void sub_10000D708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000D7B0(uint64_t a1, uint64_t a2)
{
  char __p[17];
  char v5;
  int v6;
  __int128 __dst;
  uint64_t v8;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_10006CED8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
  }
  v5 = 16;
  strcpy(__p, ".protoToFile-tmp");
  sub_1000692F8((uint64_t)&__dst, (uint64_t)__p);
  if (v5 < 0)
    operator delete(*(void **)__p);
  sub_100068AE8((uint64_t)&__dst, 2, 0x1A4u, &v6);
  wireless_diagnostics::google::protobuf::io::FileOutputStream::FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)__p, v6, -1);
  sub_1000CB448(a1);
  wireless_diagnostics::google::protobuf::io::FileOutputStream::~FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)__p);
  sub_100068888(&v6);
  sub_100009FDC((uint64_t)&__dst, a2, 0);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__dst);
}

void sub_10000D8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if ((*(char *)(v14 - 25) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)(v14 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000D928(uint64_t a1)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint32_t v9;
  uint64_t v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  _QWORD v18[2];

  sub_10006DB18((const char *)a1, 0, &v17);
  if (v17 != 3)
  {
    if (qword_100417F08 == -1)
    {
      v10 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v10 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_14;
    }
    LOWORD(v17) = 0;
    v6 = "dbVersionMismatchWithExpected: directory is missing - no need to remove";
    v7 = v10;
    v8 = OS_LOG_TYPE_INFO;
LABEL_12:
    v9 = 2;
    goto LABEL_13;
  }
  v2 = sub_10006D960(a1);
  if (v2 == 2)
  {
    if (qword_100417F08 == -1)
    {
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      {
LABEL_19:
        if (!sub_1001E48F8(a1))
          goto LABEL_14;
        if (qword_100417F08 == -1)
        {
          v13 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
            goto LABEL_14;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v13 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
            goto LABEL_14;
        }
        LOWORD(v17) = 0;
        v6 = "dbVersionMismatchWithExpected: #warning, user_version==0, but tables exist";
        v7 = v13;
        v8 = OS_LOG_TYPE_FAULT;
        goto LABEL_12;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
    }
    LOWORD(v17) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#warning, dbVersionMismatchWithExpected: On-disk db has user_version == 0.", (uint8_t *)&v17, 2u);
    goto LABEL_19;
  }
  if (v2 == 1)
  {
    if (qword_100417F08 == -1)
    {
      v14 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v14 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_14;
    }
    if (*(char *)(a1 + 23) >= 0)
      v15 = a1;
    else
      v15 = *(_QWORD *)a1;
    v17 = 136315138;
    v18[0] = v15;
    v6 = "dbVersionMismatchWithExpected: No on-disk db in %s";
    v7 = v14;
    v8 = OS_LOG_TYPE_INFO;
    v9 = 12;
    goto LABEL_13;
  }
  if (!(_BYTE)v2)
  {
    v4 = HIDWORD(v2);
    if (HIDWORD(v2) == 17)
    {
      if (qword_100417F08 != -1)
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v5 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_14;
        goto LABEL_8;
      }
      v5 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      {
LABEL_8:
        v17 = 67240192;
        LODWORD(v18[0]) = 17;
        v6 = "dbVersionMismatchWithExpected: On-disk db in is correct version, %{public}d";
        v7 = v5;
        v8 = OS_LOG_TYPE_INFO;
        v9 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, (uint8_t *)&v17, v9);
      }
LABEL_14:
      v3 = 0;
      return v3 & 1;
    }
    if (qword_100417F08 == -1)
    {
      v16 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_31:
        v17 = 67240448;
        LODWORD(v18[0]) = v4;
        WORD2(v18[0]) = 1026;
        *(_DWORD *)((char *)v18 + 6) = 17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "dbVersionMismatchWithExpected: current user_version, %{public}d, expected, %{public}d", (uint8_t *)&v17, 0xEu);
        v3 = 1;
        return v3 & 1;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v16 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
    }
    v3 = 1;
  }
  return v3 & 1;
}

void sub_10000DD14(_QWORD *a1)
{
  int v2;
  size_t v3;
  size_t v4;
  char **p_dst;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _BYTE v21[24];
  _DWORD v22[2];
  std::runtime_error v23;
  char *__dst;
  std::__shared_weak_count *v25;
  unint64_t v26;
  std::string v27;
  __int128 __p;
  _BYTE v29[7];
  char v30;

  v2 = *(unsigned __int8 *)(a1[1] + 32);
  v3 = strlen((const char *)((unint64_t)"P11EventLogger" & 0x7FFFFFFFFFFFFFFFLL));
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (char **)operator new(v6 + 1);
    v25 = (std::__shared_weak_count *)v4;
    v26 = v7 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v26) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_8:
    memcpy(p_dst, (const void *)((unint64_t)"P11EventLogger" & 0x7FFFFFFFFFFFFFFFLL), v4);
  *((_BYTE *)p_dst + v4) = 0;
  sub_10000EA1C((void **)&__dst, (uint64_t)&v27);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst);
  v8 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v22[0] = v27.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[2] + 3);
  v9 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
  if (v2)
  {
    sub_1000D5048(&__dst, "");
    sub_100163210("Unexpected attempt to start logging that is already logging: ", &v27);
    if (v9 < 0)
    {
      sub_10006CED8(&__p, (void *)v8, *((unint64_t *)&v8 + 1));
    }
    else
    {
      __p = v8;
      *(_DWORD *)v29 = v22[0];
      *(_DWORD *)&v29[3] = *(_DWORD *)((char *)v22 + 3);
      v30 = v9;
    }
    sub_100174738((uint64_t)&__dst, (uint64_t)&v27, 2);
    if (v30 < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_37:
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          goto LABEL_38;
LABEL_41:
        operator delete(__dst);
LABEL_38:
        sub_1000F2AE4((uint64_t)&v23);
      }
    }
    else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_41;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  (*(void (**)(char **__return_ptr, _QWORD *))(*a1 + 48))(&__dst, a1);
  v10 = __dst;
  if ((__dst[31] & 0x80000000) == 0)
  {
    if (__dst[31])
      goto LABEL_16;
LABEL_31:
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v27, "Log directory not specified before call to start logging");
    std::runtime_error::runtime_error(&v23, &v27);
    v23.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v21);
    sub_1000F2F7C(&v23, (uint64_t)"virtual void EventLogger::start()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 51, (uint64_t)v21);
  }
  if (!*((_QWORD *)__dst + 2))
    goto LABEL_31;
LABEL_16:
  __dst[32] = 1;
  (*(void (**)(char *))(*(_QWORD *)v10 + 16))(v10);
  v12 = __dst;
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a1[2];
  a1[1] = v12;
  a1[2] = v11;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_10000E060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;

  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (v31 < 0)
  {
    operator delete(v30);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000E27C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000E294(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];
  uint8_t v7[16];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    if (qword_100417ED8 == -1)
    {
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_5;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100404290);
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        objc_msgSend(*(id *)(a1 + 32), "onQueueTeardown");
        if (qword_100417ED8 == -1)
        {
          v3 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          {
LABEL_8:
            **(_BYTE **)(a1 + 40) = 1;
            return;
          }
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_100404290);
          v3 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            goto LABEL_8;
        }
        *(_WORD *)v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Wi-Fi callbacks unregistered.", v5, 2u);
        goto LABEL_8;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unregistering all Wi-Fi callbacks.", buf, 2u);
    goto LABEL_5;
  }
  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_12:
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Wi-Fi thread already shut-down", v7, 2u);
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100404290);
    v4 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_12;
  }
}

uint64_t sub_10000E46C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 112) & 0x80) != 0)
    return *(unsigned int *)(*(_QWORD *)a1 + 72);
  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
  v1 = 200000000;
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67240192;
    v4[1] = 200000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'indoorprefetchmaxfloorcount', using value of %{public}d", (uint8_t *)v4, 8u);
  }
  return v1;
}

void sub_10000E54C(sqlite3 **a1, int __val)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  const char *v7;
  std::string v8;
  std::string v9;
  __int128 v10;
  int64_t v11;

  std::to_string(&v8, __val);
  v3 = std::string::insert(&v8, 0, "PRAGMA user_version = ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v9, ";");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v11 >= 0)
    v7 = (const char *)&v10;
  else
    v7 = (const char *)v10;
  sub_10008E514(a1, v7, "Failed to set user version");
  if (SHIBYTE(v11) < 0)
  {
    operator delete((void *)v10);
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_10:
      operator delete(v8.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_10000E644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
  {
    operator delete(*(void **)(v21 - 48));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_10000E6B8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int64_t v30;
  char *v31;
  char *v32;
  void *__p;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  char *v38;

  sub_1000C4D3C(a1 + 40, a2);
  v3 = *(_DWORD *)(a1 + 72);
  if (v3 <= 2)
    *(_BYTE *)(a1 + 20) = 0x10100u >> (8 * v3);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v4 = *(_DWORD *)(a1 + 88);
  if (!v4)
  {
    v38 = 0;
    v35 = 0;
    v36 = 0;
    __p = 0;
    v34 = 0;
    goto LABEL_41;
  }
  if (v4 < 0)
    sub_1000D02C0();
  v5 = *(unsigned int *)(a1 + 88);
  v6 = v4;
  v7 = (char *)operator new(4 * v4);
  v8 = 0;
  v37 = v7;
  v9 = v7;
  v10 = &v7[4 * v6];
  v11 = v5;
  do
  {
    while (1)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v8);
      if (v7 >= v10)
        break;
      *(_DWORD *)v7 = v12;
      v7 += 4;
      if (++v8 >= (int)v11)
        goto LABEL_36;
    }
    v13 = (v7 - v9) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
    {
      v37 = v7;
      v38 = v10;
      v36 = v9;
      sub_1000D02C0();
    }
    if ((v10 - v9) >> 1 > v14)
      v14 = (v10 - v9) >> 1;
    if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
      {
        v37 = v7;
        v38 = v10;
        v36 = v9;
        sub_1000CDEB8();
      }
      v16 = v11;
      v17 = v15;
      v18 = operator new(4 * v15);
      v11 = v16;
      v15 = v17;
      v19 = &v18[4 * v13];
      *(_DWORD *)v19 = v12;
      v20 = (uint64_t)(v19 + 4);
      if (v7 == v9)
        goto LABEL_22;
    }
    else
    {
      v18 = 0;
      v19 = (char *)(4 * v13);
      *(_DWORD *)(4 * v13) = v12;
      v20 = 4 * v13 + 4;
      if (v7 == v9)
        goto LABEL_22;
    }
    v21 = v7 - 4 - v9;
    if (v21 < 0xBC)
    {
      v22 = v7;
      goto LABEL_21;
    }
    if (&v18[v7 - v9 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v7 - v9 - 4])
    {
      v22 = v7;
      do
      {
LABEL_21:
        v23 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v19 - 1) = v23;
        v19 -= 4;
      }
      while (v22 != v9);
      goto LABEL_22;
    }
    if (&v7[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
    {
      v22 = v7;
      goto LABEL_21;
    }
    if ((unint64_t)(v9 - v18) < 0x20)
    {
      v22 = v7;
      goto LABEL_21;
    }
    v24 = (v21 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v7[-v25];
    v19 -= v25;
    v26 = &v18[4 * v13 - 16];
    v27 = (__int128 *)(v7 - 16);
    v28 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 8;
    }
    while (v28);
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_21;
LABEL_22:
    v10 = &v18[4 * v15];
    if (v9)
    {
      operator delete(v9);
      v11 = *(unsigned int *)(a1 + 88);
    }
    v9 = v19;
    v7 = (char *)v20;
    ++v8;
  }
  while (v8 < (int)v11);
LABEL_36:
  v37 = v7;
  v38 = v10;
  v35 = 0;
  v36 = v9;
  __p = 0;
  v34 = 0;
  v30 = v7 - v9;
  if (v30)
  {
    if (v30 < 0)
      sub_1000D02C0();
    v31 = (char *)operator new(v30);
    v32 = &v31[4 * (v30 >> 2)];
    __p = v31;
    v35 = v32;
    memcpy(v31, v9, v30);
    v34 = v32;
  }
LABEL_41:
  sub_1000C7E54(a1 + 152, (uint64_t)&__p);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  sub_1000AB4B0(a1);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_10000E9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_10000EA1C(void **a1@<X0>, uint64_t a2@<X8>)
{
  void **v2;
  char *v4;
  char *v5;
  size_t v6;
  size_t v7;
  _BYTE *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  int status;
  _BYTE buf[24];

  v2 = a1;
  status = 0;
  v16 = 0;
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  v4 = __cxa_demangle((const char *)a1, 0, &v16, &status);
  v5 = v4;
  if (status)
  {
    free(v4);
    if (status != -3)
    {
      if (status == -2)
      {
        if (*((char *)v2 + 23) < 0)
          goto LABEL_32;
        goto LABEL_34;
      }
      if (status == -1)
      {
        if (*((char *)v2 + 23) < 0)
          goto LABEL_32;
        goto LABEL_34;
      }
      if (qword_100417ED8 == -1)
      {
        v11 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_31;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003F6358);
        v11 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_31;
      }
      if (*((char *)v2 + 23) >= 0)
        v12 = v2;
      else
        v12 = *v2;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = status;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unknown status code %d demangling '%s'\n", buf, 0x12u);
LABEL_31:
      if (*((char *)v2 + 23) < 0)
      {
LABEL_32:
        sub_10006CED8((_BYTE *)a2, *v2, (unint64_t)v2[1]);
LABEL_35:
        *(_BYTE *)(a2 + 24) = 0;
        return;
      }
LABEL_34:
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(_QWORD *)(a2 + 16) = v2[2];
      goto LABEL_35;
    }
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_23;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003F6358);
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_23;
    }
    if (*((char *)v2 + 23) >= 0)
      v10 = v2;
    else
      v10 = *v2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Invalid args provided to demangle '%s'\n", buf, 0xCu);
LABEL_23:
    if (*((char *)v2 + 23) < 0)
      goto LABEL_32;
    goto LABEL_34;
  }
  if (!v4)
  {
    if (*((char *)v2 + 23) < 0)
      goto LABEL_32;
    goto LABEL_34;
  }
  v6 = strlen(v4);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v13 = v6 | 7;
    v14 = v13 + 1;
    v8 = operator new(v13 + 1);
    *(_QWORD *)&buf[8] = v7;
    *(_QWORD *)&buf[16] = v14 | 0x8000000000000000;
    *(_QWORD *)buf = v8;
LABEL_39:
    memmove(v8, v5, v7);
    v8[v7] = 0;
    free(v5);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
  buf[23] = v6;
  v8 = buf;
  if (v6)
    goto LABEL_39;
  buf[0] = 0;
  free(v5);
  if ((buf[23] & 0x80000000) == 0)
  {
LABEL_14:
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
LABEL_40:
  v15 = *(void **)buf;
  sub_10006CED8((_BYTE *)a2, *(void **)buf, *(unint64_t *)&buf[8]);
  *(_BYTE *)(a2 + 24) = 1;
  operator delete(v15);
}

void sub_10000EDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000EDD4(uint64_t a1)
{
  const std::locale *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  const std::locale::facet *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE *p_p;
  uint64_t *v11;
  int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  void **v16;
  unsigned int v17;
  uint64_t v18;
  void *__p;
  unint64_t v21;
  unsigned __int8 v22;
  std::locale v23;

  std::locale::locale(&v23);
  v2 = std::locale::classic();
  if (std::locale::operator==(&v23, v2))
  {
    v3 = *(_DWORD *)a1;
    do
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4 - 1;
      *(_BYTE *)(v4 - 1) = *(_DWORD *)(a1 + 20) + v3 % 0xA;
      LODWORD(v4) = *(_DWORD *)a1;
      v3 = *(_DWORD *)a1 / 0xAu;
      *(_DWORD *)a1 = v3;
    }
    while (v4 > 9);
    v5 = *(_QWORD *)(a1 + 8);
    goto LABEL_28;
  }
  v6 = std::locale::use_facet(&v23, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v6->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v22 < 0)
  {
    v7 = v21;
    if (!v21 || *(char *)__p <= 0)
      goto LABEL_24;
LABEL_11:
    v8 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
    v9 = 0;
    p_p = __p;
    if ((v22 & 0x80u) == 0)
      p_p = &__p;
    v11 = (uint64_t *)(a1 + 8);
    LOBYTE(v12) = *p_p;
    v13 = *p_p;
    do
    {
      if (!v13)
      {
        if (++v9 < v7)
        {
          v16 = (v22 & 0x80u) == 0 ? &__p : (void **)__p;
          v12 = *((char *)v16 + v9);
          if (v12 < 1)
            LOBYTE(v12) = 127;
        }
        v14 = (_BYTE *)(*v11 - 1);
        *v11 = (uint64_t)v14;
        *v14 = v8;
        v13 = v12;
      }
      --v13;
      v15 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v15 - 1;
      *(_BYTE *)(v15 - 1) = *(_DWORD *)(a1 + 20) + *(_DWORD *)a1 % 0xAu;
      LODWORD(v15) = *(_DWORD *)a1;
      *(_DWORD *)a1 /= 0xAu;
    }
    while (v15 > 9);
    goto LABEL_26;
  }
  v7 = v22;
  if (v22 && (char)__p > 0)
    goto LABEL_11;
LABEL_24:
  v11 = (uint64_t *)(a1 + 8);
  v17 = *(_DWORD *)a1;
  do
  {
    v18 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18 - 1;
    *(_BYTE *)(v18 - 1) = *(_DWORD *)(a1 + 20) + v17 % 0xA;
    LODWORD(v18) = *(_DWORD *)a1;
    v17 = *(_DWORD *)a1 / 0xAu;
    *(_DWORD *)a1 = v17;
  }
  while (v18 > 9);
LABEL_26:
  v5 = *v11;
  if ((char)v22 < 0)
    operator delete(__p);
LABEL_28:
  std::locale::~locale(&v23);
  return v5;
}

void sub_10000F014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void sub_10000F0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10000F0F0(uint64_t a1, uint64_t a2)
{
  id result;

  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_10000F128(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint8_t buf[8];
  uint8_t *v12;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();

  if (qword_100417ED8 == -1)
  {
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Waiting for finalizers to finish running", buf, 2u);
  }
LABEL_4:
  *(_QWORD *)buf = 0;
  v12 = buf;
  v13 = 0x3002000000;
  v14 = nullsub_41;
  v15 = nullsub_37;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = nullsub_42;
  v10[3] = &unk_1003FDDD8;
  v10[4] = buf;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 144), v10);
  _Block_object_dispose(buf, 8);
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 160);
    v5 = *(void **)(a1 + 152);
    if (v4 == v3)
    {
LABEL_14:
      *(_QWORD *)(a1 + 160) = v3;
      operator delete(v5);
      goto LABEL_15;
    }
    while (1)
    {
      v8 = v4 - 32;
      v6 = *(_QWORD **)(v4 - 8);
      if ((_QWORD *)(v4 - 32) == v6)
      {
        v6 = (_QWORD *)(v4 - 32);
        v7 = 4;
      }
      else
      {
        if (!v6)
          goto LABEL_9;
        v7 = 5;
      }
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
      v4 = v8;
      if (v8 == v3)
      {
        v5 = *(void **)(a1 + 152);
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  sub_100005D30((dispatch_object_t *)(a1 + 144));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_10000F2CC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v32;
  int v33;
  BOOL v34;
  int v35;
  _BYTE *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v41;
  int v42;
  int v43;
  _BYTE *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v49;
  int v50;
  int v51;
  _BYTE *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v57;
  int v58;
  int v59;
  _BYTE *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v65;
  int v66;
  int v67;
  _BYTE *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v73;
  int v74;
  int v75;
  _BYTE *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v81;
  int v82;
  int v83;
  _BYTE *v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v89;
  int v90;
  int v91;
  _BYTE *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v97;
  int v98;
  int v99;
  uint64_t result;
  unsigned int v101;

  v6 = a1 + 8;
  while (1)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 < *((_QWORD *)this + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 1u;
        v10 = *(_QWORD *)(a1 + 16);
        if (!v10)
          operator new();
        v101 = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10001F5AC(v10, this, v31, v32) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
        v33 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v33, 1);
        v35 = v33 - 1;
        if (v35 < 0 == v34)
          *((_DWORD *)this + 14) = v35;
        v36 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v36 >= *((_QWORD *)this + 2) || *v36 != 18)
          continue;
        *((_QWORD *)this + 1) = v36 + 1;
        *(_DWORD *)(a1 + 92) |= 2u;
        v12 = *(_QWORD *)(a1 + 24);
        if (!v12)
LABEL_59:
          operator new();
LABEL_16:
        v101 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v37 = *((_DWORD *)this + 14);
        v38 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v37 + 1;
        if (v37 >= v38)
          return 0;
        v39 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_100119FD0(v12, this, v40, v41) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v39);
        v42 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v42, 1);
        v43 = v42 - 1;
        if (v43 < 0 == v34)
          *((_DWORD *)this + 14) = v43;
        v44 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 != 26)
          continue;
        *((_QWORD *)this + 1) = v44 + 1;
        *(_DWORD *)(a1 + 92) |= 4u;
        v14 = *(_QWORD *)(a1 + 32);
        if (!v14)
LABEL_71:
          operator new();
LABEL_20:
        v101 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v45 = *((_DWORD *)this + 14);
        v46 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011A8F0(v14, this, v48, v49) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v47);
        v50 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v50, 1);
        v51 = v50 - 1;
        if (v51 < 0 == v34)
          *((_DWORD *)this + 14) = v51;
        v52 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 != 34)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
        *(_DWORD *)(a1 + 92) |= 8u;
        v16 = *(_QWORD *)(a1 + 40);
        if (!v16)
LABEL_83:
          operator new();
LABEL_24:
        v101 = 0;
        v17 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v17 >= *((_QWORD *)this + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011BDC8(v16, this, v56, v57) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v58 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 == v34)
          *((_DWORD *)this + 14) = v59;
        v60 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v60 >= *((_QWORD *)this + 2) || *v60 != 42)
          continue;
        *((_QWORD *)this + 1) = v60 + 1;
        *(_DWORD *)(a1 + 92) |= 0x10u;
        v18 = *(_QWORD *)(a1 + 48);
        if (!v18)
LABEL_95:
          operator new();
LABEL_28:
        v101 = 0;
        v19 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v19 >= *((_QWORD *)this + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v19;
          *((_QWORD *)this + 1) = v19 + 1;
        }
        v61 = *((_DWORD *)this + 14);
        v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62)
          return 0;
        v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011D7D0(v18, this, v64, v65) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        v66 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v67 < 0 == v34)
          *((_DWORD *)this + 14) = v67;
        v68 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v68 >= *((_QWORD *)this + 2) || *v68 != 50)
          continue;
        *((_QWORD *)this + 1) = v68 + 1;
        *(_DWORD *)(a1 + 92) |= 0x20u;
        v20 = *(_QWORD *)(a1 + 56);
        if (!v20)
LABEL_107:
          operator new();
LABEL_32:
        v101 = 0;
        v21 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v21;
          *((_QWORD *)this + 1) = v21 + 1;
        }
        v69 = *((_DWORD *)this + 14);
        v70 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v69 + 1;
        if (v69 >= v70)
          return 0;
        v71 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011E6B0(v20, this, v72, v73) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v71);
        v74 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v74, 1);
        v75 = v74 - 1;
        if (v75 < 0 == v34)
          *((_DWORD *)this + 14) = v75;
        v76 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v76 >= *((_QWORD *)this + 2) || *v76 != 58)
          continue;
        *((_QWORD *)this + 1) = v76 + 1;
        *(_DWORD *)(a1 + 92) |= 0x40u;
        v22 = *(_QWORD *)(a1 + 64);
        if (!v22)
LABEL_119:
          operator new();
LABEL_36:
        v101 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v77 = *((_DWORD *)this + 14);
        v78 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v77 + 1;
        if (v77 >= v78)
          return 0;
        v79 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011EFD0(v22, this, v80, v81) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v79);
        v82 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v82, 1);
        v83 = v82 - 1;
        if (v83 < 0 == v34)
          *((_DWORD *)this + 14) = v83;
        v84 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v84 >= *((_QWORD *)this + 2) || *v84 != 66)
          continue;
        *((_QWORD *)this + 1) = v84 + 1;
        *(_DWORD *)(a1 + 92) |= 0x80u;
        v24 = *(_QWORD *)(a1 + 72);
        if (!v24)
LABEL_131:
          operator new();
LABEL_40:
        v101 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v85 = *((_DWORD *)this + 14);
        v86 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v85 + 1;
        if (v85 >= v86)
          return 0;
        v87 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_10011F880(v24, this, v88, v89) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v87);
        v90 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v90, 1);
        v91 = v90 - 1;
        if (v91 < 0 == v34)
          *((_DWORD *)this + 14) = v91;
        v92 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v92 >= *((_QWORD *)this + 2) || *v92 != 74)
          continue;
        *((_QWORD *)this + 1) = v92 + 1;
        *(_DWORD *)(a1 + 92) |= 0x100u;
        v26 = *(_QWORD *)(a1 + 80);
        if (!v26)
LABEL_143:
          operator new();
LABEL_44:
        v101 = 0;
        v27 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v27 >= *((_QWORD *)this + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v101))return 0;
        }
        else
        {
          v101 = *v27;
          *((_QWORD *)this + 1) = v27 + 1;
        }
        v93 = *((_DWORD *)this + 14);
        v94 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v93 + 1;
        if (v93 >= v94)
          return 0;
        v95 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v101);
        if (!sub_100120130(v26, this, v96, v97) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v95);
        v98 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v98, 1);
        v99 = v98 - 1;
        if (v99 < 0 == v34)
          *((_DWORD *)this + 14) = v99;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        break;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 2u;
        v12 = *(_QWORD *)(a1 + 24);
        if (v12)
          goto LABEL_16;
        goto LABEL_59;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 4u;
        v14 = *(_QWORD *)(a1 + 32);
        if (v14)
          goto LABEL_20;
        goto LABEL_71;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 8u;
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
          goto LABEL_24;
        goto LABEL_83;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 0x10u;
        v18 = *(_QWORD *)(a1 + 48);
        if (v18)
          goto LABEL_28;
        goto LABEL_95;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 0x20u;
        v20 = *(_QWORD *)(a1 + 56);
        if (v20)
          goto LABEL_32;
        goto LABEL_107;
      case 7u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 0x40u;
        v22 = *(_QWORD *)(a1 + 64);
        if (v22)
          goto LABEL_36;
        goto LABEL_119;
      case 8u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 0x80u;
        v24 = *(_QWORD *)(a1 + 72);
        if (v24)
          goto LABEL_40;
        goto LABEL_131;
      case 9u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_47;
        *(_DWORD *)(a1 + 92) |= 0x100u;
        v26 = *(_QWORD *)(a1 + 80);
        if (v26)
          goto LABEL_44;
        goto LABEL_143;
      default:
        v9 = TagFallback & 7;
LABEL_47:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_10000FE9C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10000FEC4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_10000FF70()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

id sub_10000FF98(uint64_t a1, uint64_t a2)
{
  id result;

  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_10000FFD0(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_BYTE *)(a1 + 2232) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 2240));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 2680));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 3120));
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)(a1 + 3560));
  *(_QWORD *)(a1 + 4024) = 0x100000003;
  *(_QWORD *)(a1 + 4000) = off_1003EEBE8;
  *(_QWORD *)(a1 + 4032) = a1 + 4040;
  *(_OWORD *)(a1 + 4008) = xmmword_100382850;
  *(_QWORD *)(a1 + 4040) = 0;
  *(_QWORD *)(a1 + 4056) = 0;
  *(_QWORD *)(a1 + 4048) = 0;
  *(_QWORD *)(a1 + 4088) = 0x100000003;
  *(_QWORD *)(a1 + 4064) = off_1003EEBE8;
  *(_QWORD *)(a1 + 4096) = a1 + 4104;
  *(_OWORD *)(a1 + 4072) = xmmword_100382850;
  *(_QWORD *)(a1 + 4104) = 0;
  *(_QWORD *)(a1 + 4120) = 0;
  *(_QWORD *)(a1 + 4112) = 0;
  *(_QWORD *)(a1 + 4152) = 0x300000003;
  *(_QWORD *)(a1 + 4128) = off_1003EEAC0;
  *(_QWORD *)(a1 + 4160) = a1 + 4168;
  *(_OWORD *)(a1 + 4136) = xmmword_1003827C0;
  *(_BYTE *)(a1 + 4256) = 0;
  *(_OWORD *)(a1 + 4225) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  return a1;
}

void sub_1000100F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  cnframework::TimestampedEvent *v2;

  *(_QWORD *)(v1 + 3440) = off_1003EEB18;
  *(_QWORD *)(v1 + 3328) = off_1003EEB18;
  *(_QWORD *)(v1 + 3216) = off_1003EEB18;
  *(_QWORD *)(v1 + 3152) = off_1003EEB18;
  *(_QWORD *)(v1 + 3000) = off_1003EEB18;
  *(_QWORD *)(v1 + 2888) = off_1003EEB18;
  *(_QWORD *)(v1 + 2776) = off_1003EEB18;
  *(_QWORD *)(v1 + 2712) = off_1003EEB18;
  *(_QWORD *)(v1 + 2560) = off_1003EEB18;
  *(_QWORD *)(v1 + 2448) = off_1003EEB18;
  *(_QWORD *)(v1 + 2336) = off_1003EEB18;
  *(_QWORD *)(v1 + 2272) = off_1003EEB18;
  if (*(_BYTE *)(v1 + 2232))
  {
    *(_QWORD *)(v1 + 2104) = off_1003EEB18;
    *(_QWORD *)(v1 + 1992) = off_1003EEB18;
    *(_QWORD *)(v1 + 1880) = off_1003EEB18;
    *(_QWORD *)(v1 + 1816) = off_1003EEB18;
    *(_QWORD *)(v1 + 1664) = off_1003EEB18;
    *(_QWORD *)(v1 + 1552) = off_1003EEB18;
    *(_QWORD *)(v1 + 1440) = off_1003EEB18;
    *(_QWORD *)(v1 + 1376) = off_1003EEB18;
    if (!*(_BYTE *)(v1 + 1136))
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!*(_BYTE *)(v1 + 1136))
  {
    goto LABEL_3;
  }
  sub_1000ED590(v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001027C(uint64_t a1)
{
  double v2;
  int v3;
  double v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  double v10;
  int v11;
  unsigned int v12;
  int v13;
  double v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  double v24;
  int v25;
  NSObject *v26;
  double v27;
  double v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v40;
  int v41;
  int v42;
  int v43;
  _QWORD v44[4];
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint8_t buf[4];
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;

  v2 = (double)(uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) / 1000000000.0;
  if (v2 >= 0.0)
  {
    if (v2 >= 2.0)
    {
      if (v2 >= 5.0)
      {
        if (v2 >= 10.0)
        {
          if (v2 >= 20.0)
          {
            if (v2 >= 60.0)
            {
              if (v2 >= 120.0)
              {
                if (v2 >= 300.0)
                {
                  if (v2 >= 600.0)
                  {
                    if (v2 >= 1200.0)
                    {
                      if (v2 >= 3600.0)
                        v3 = 11;
                      else
                        v3 = 10;
                    }
                    else
                    {
                      v3 = 9;
                    }
                  }
                  else
                  {
                    v3 = 8;
                  }
                }
                else
                {
                  v3 = 7;
                }
              }
              else
              {
                v3 = 6;
              }
            }
            else
            {
              v3 = 5;
            }
          }
          else
          {
            v3 = 4;
          }
        }
        else
        {
          v3 = 3;
        }
      }
      else
      {
        v3 = 2;
      }
    }
    else
    {
      v3 = 1;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = (double)*(uint64_t *)(a1 + 24) / 1000000000.0;
  if (v4 <= 0.0)
  {
    v5 = 0;
  }
  else if (v4 >= 1.0)
  {
    if (v4 >= 2.0)
    {
      if (v4 >= 3.0)
      {
        if (v4 >= 5.0)
        {
          if (v4 >= 8.0)
          {
            if (v4 >= 13.0)
            {
              if (v4 >= 21.0)
                v5 = 8;
              else
                v5 = 7;
            }
            else
            {
              v5 = 6;
            }
          }
          else
          {
            v5 = 5;
          }
        }
        else
        {
          v5 = 4;
        }
      }
      else
      {
        v5 = 3;
      }
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = 2;
    }
    else if (v6 >= 5)
    {
      if (v6 >= 0xA)
      {
        if (v6 >= 0x3C)
        {
          if (v6 >= 0x78)
          {
            if (v6 >= 0x12C)
            {
              if (v6 < 0x258)
                v7 = 8;
              else
                v7 = 9;
            }
            else
            {
              v7 = 7;
            }
          }
          else
          {
            v7 = 6;
          }
        }
        else
        {
          v7 = 5;
        }
      }
      else
      {
        v7 = 4;
      }
    }
    else
    {
      v7 = 3;
    }
  }
  else
  {
    v7 = 1;
  }
  v8 = *(_DWORD *)(a1 + 36);
  if (v8)
  {
    if (v8 == 1)
    {
      v9 = 2;
    }
    else if (v8 >= 5)
    {
      if (v8 >= 0xA)
      {
        if (v8 >= 0x3C)
        {
          if (v8 >= 0x78)
          {
            if (v8 >= 0x12C)
            {
              if (v8 < 0x258)
                v9 = 8;
              else
                v9 = 9;
            }
            else
            {
              v9 = 7;
            }
          }
          else
          {
            v9 = 6;
          }
        }
        else
        {
          v9 = 5;
        }
      }
      else
      {
        v9 = 4;
      }
    }
    else
    {
      v9 = 3;
    }
  }
  else
  {
    v9 = 1;
  }
  v10 = *(double *)(a1 + 40);
  if (v10 <= 0.0)
  {
    v11 = 0;
  }
  else if (v10 >= 5.0)
  {
    if (v10 >= 10.0)
    {
      if (v10 >= 15.0)
      {
        if (v10 >= 25.0)
        {
          if (v10 >= 40.0)
          {
            if (v10 >= 65.0)
            {
              if (v10 >= 105.0)
              {
                if (v10 >= 165.0)
                  v11 = 9;
                else
                  v11 = 8;
              }
              else
              {
                v11 = 7;
              }
            }
            else
            {
              v11 = 6;
            }
          }
          else
          {
            v11 = 5;
          }
        }
        else
        {
          v11 = 4;
        }
      }
      else
      {
        v11 = 3;
      }
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  v12 = *(_DWORD *)(a1 + 48);
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = 2;
      v14 = *(double *)(a1 + 56);
      if (v14 < 0.0)
        goto LABEL_115;
    }
    else if (v12 >= 3)
    {
      if (v12 >= 5)
      {
        if (v12 < 8)
          v13 = 5;
        else
          v13 = 6;
        v14 = *(double *)(a1 + 56);
        if (v14 < 0.0)
          goto LABEL_115;
      }
      else
      {
        v13 = 4;
        v14 = *(double *)(a1 + 56);
        if (v14 < 0.0)
        {
LABEL_115:
          v15 = 0;
          goto LABEL_116;
        }
      }
    }
    else
    {
      v13 = 3;
      v14 = *(double *)(a1 + 56);
      if (v14 < 0.0)
        goto LABEL_115;
    }
  }
  else
  {
    v13 = 1;
    v14 = *(double *)(a1 + 56);
    if (v14 < 0.0)
      goto LABEL_115;
  }
  if (v14 >= 1.0)
  {
    if (v14 >= 2.0)
    {
      if (v14 >= 3.0)
      {
        if (v14 >= 5.0)
        {
          if (v14 >= 8.0)
          {
            if (v14 >= 13.0)
            {
              if (v14 >= 20.0)
              {
                if (v14 >= 30.0)
                {
                  if (v14 >= 50.0)
                  {
                    if (v14 >= 100.0)
                    {
                      if (v14 >= 150.0)
                        v15 = 12;
                      else
                        v15 = 11;
                    }
                    else
                    {
                      v15 = 10;
                    }
                  }
                  else
                  {
                    v15 = 9;
                  }
                }
                else
                {
                  v15 = 8;
                }
              }
              else
              {
                v15 = 7;
              }
            }
            else
            {
              v15 = 6;
            }
          }
          else
          {
            v15 = 5;
          }
        }
        else
        {
          v15 = 4;
        }
      }
      else
      {
        v15 = 3;
      }
    }
    else
    {
      v15 = 2;
    }
  }
  else
  {
    v15 = 1;
  }
LABEL_116:
  v16 = *(_DWORD *)(a1 + 64);
  if (!v16)
  {
    v17 = *(_DWORD *)(a1 + 68);
    v42 = v13;
    v43 = v11;
    v40 = 1;
    v41 = v15;
    if (!v17)
      goto LABEL_137;
    goto LABEL_127;
  }
  if (v16 == 1)
  {
    v17 = *(_DWORD *)(a1 + 68);
    v42 = v13;
    v43 = v11;
    v40 = 2;
    v41 = v15;
    if (!v17)
      goto LABEL_137;
LABEL_127:
    if (v17 == 1)
    {
      v18 = 2;
    }
    else if (v17 >= 5)
    {
      if (v17 >= 0xA)
      {
        if (v17 >= 0x14)
        {
          if (v17 >= 0x1E)
          {
            if (v17 >= 0x3C)
            {
              if (v17 >= 0x5A)
              {
                if (v17 >= 0x78)
                {
                  if (v17 >= 0x12C)
                  {
                    if (v17 < 0x258)
                      v18 = 11;
                    else
                      v18 = 12;
                  }
                  else
                  {
                    v18 = 10;
                  }
                }
                else
                {
                  v18 = 9;
                }
              }
              else
              {
                v18 = 8;
              }
            }
            else
            {
              v18 = 7;
            }
          }
          else
          {
            v18 = 6;
          }
        }
        else
        {
          v18 = 5;
        }
      }
      else
      {
        v18 = 4;
      }
    }
    else
    {
      v18 = 3;
    }
    goto LABEL_138;
  }
  if (v16 < 3)
  {
    v17 = *(_DWORD *)(a1 + 68);
    v42 = v13;
    v43 = v11;
    v40 = 3;
    v41 = v15;
    if (!v17)
      goto LABEL_137;
    goto LABEL_127;
  }
  if (v16 >= 5)
  {
    if (v16 < 8)
      v19 = 5;
    else
      v19 = 6;
    v17 = *(_DWORD *)(a1 + 68);
    v42 = v13;
    v43 = v11;
    v40 = v19;
    v41 = v15;
    if (!v17)
      goto LABEL_137;
    goto LABEL_127;
  }
  v17 = *(_DWORD *)(a1 + 68);
  v42 = v13;
  v43 = v11;
  v40 = 4;
  v41 = v15;
  if (v17)
    goto LABEL_127;
LABEL_137:
  v18 = 1;
LABEL_138:
  v20 = *(_DWORD *)(a1 + 72);
  if (v20)
  {
    if (v20 >= 0xA)
    {
      if (v20 >= 0x14)
      {
        if (v20 >= 0x32)
        {
          if (v20 >= 0x64)
          {
            if (v20 >= 0xC8)
            {
              if (v20 >= 0x12C)
              {
                if (v20 >= 0x258)
                {
                  if (v20 >= 0x384)
                  {
                    if (v20 >= 0x4B0)
                    {
                      if (v20 >= 0xBB8)
                      {
                        if (v20 >> 4 < 0x177)
                          v21 = 12;
                        else
                          v21 = 13;
                      }
                      else
                      {
                        v21 = 11;
                      }
                    }
                    else
                    {
                      v21 = 10;
                    }
                  }
                  else
                  {
                    v21 = 9;
                  }
                }
                else
                {
                  v21 = 8;
                }
              }
              else
              {
                v21 = 7;
              }
            }
            else
            {
              v21 = 6;
            }
          }
          else
          {
            v21 = 5;
          }
        }
        else
        {
          v21 = 4;
        }
      }
      else
      {
        v21 = 3;
      }
    }
    else
    {
      v21 = 2;
    }
  }
  else
  {
    v21 = 1;
  }
  v22 = *(_DWORD *)(a1 + 76);
  if (v22)
  {
    if (v22 >= 0xA)
    {
      if (v22 >= 0x14)
      {
        if (v22 >= 0x32)
        {
          if (v22 >= 0x64)
          {
            if (v22 >= 0xC8)
            {
              if (v22 >= 0x12C)
              {
                if (v22 >= 0x258)
                {
                  if (v22 >= 0x384)
                  {
                    if (v22 >= 0x4B0)
                    {
                      if (v22 < 0xBB8)
                        v23 = 11;
                      else
                        v23 = 12;
                    }
                    else
                    {
                      v23 = 10;
                    }
                  }
                  else
                  {
                    v23 = 9;
                  }
                }
                else
                {
                  v23 = 8;
                }
              }
              else
              {
                v23 = 7;
              }
            }
            else
            {
              v23 = 6;
            }
          }
          else
          {
            v23 = 5;
          }
        }
        else
        {
          v23 = 4;
        }
      }
      else
      {
        v23 = 3;
      }
    }
    else
    {
      v23 = 2;
    }
  }
  else
  {
    v23 = 1;
  }
  v24 = *(double *)(a1 + 80);
  if (v24 >= 0.0)
  {
    if (v24 >= 1.0)
    {
      if (v24 >= 2.0)
      {
        if (v24 >= 5.0)
        {
          if (v24 >= 10.0)
          {
            if (v24 >= 15.0)
            {
              if (v24 >= 25.0)
              {
                if (v24 >= 40.0)
                {
                  if (v24 >= 65.0)
                    v25 = 9;
                  else
                    v25 = 8;
                }
                else
                {
                  v25 = 7;
                }
              }
              else
              {
                v25 = 6;
              }
            }
            else
            {
              v25 = 5;
            }
          }
          else
          {
            v25 = 4;
          }
        }
        else
        {
          v25 = 3;
        }
      }
      else
      {
        v25 = 2;
      }
    }
    else
    {
      v25 = 1;
    }
  }
  else
  {
    v25 = 0;
  }
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_100406F08);
  v26 = (id)qword_100417EE0;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    v27 = (double)(uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) / 1000000000.0;
    *(_DWORD *)buf = 134351873;
    v28 = (double)*(uint64_t *)(a1 + 24);
    v29 = *(_DWORD *)(a1 + 32);
    v30 = *(_DWORD *)(a1 + 36);
    v31 = *(_QWORD *)(a1 + 40);
    v32 = *(_DWORD *)(a1 + 48);
    v33 = *(_QWORD *)(a1 + 56);
    v34 = *(_DWORD *)(a1 + 64);
    v35 = *(_DWORD *)(a1 + 68);
    v36 = *(_DWORD *)(a1 + 72);
    v37 = *(_DWORD *)(a1 + 76);
    v38 = *(_QWORD *)(a1 + 80);
    v58 = v27;
    v59 = 2050;
    v60 = v28 / 1000000000.0;
    v61 = 1026;
    v62 = v29;
    v63 = 1026;
    v64 = v30;
    v65 = 2050;
    v66 = v31;
    v67 = 1025;
    v68 = v32;
    v69 = 2049;
    v70 = v33;
    v71 = 1026;
    v72 = v34;
    v73 = 1026;
    v74 = v35;
    v75 = 1026;
    v76 = v36;
    v77 = 1025;
    v78 = v37;
    v79 = 2049;
    v80 = v38;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "LocalizationSessionStats, length, %{public}.3lf, ttff, %{public}.3lf, numOfFix, %{public}d, numOfIndoorFix, %{public}d, avgHAcc, %{public}.2lf, changeOfUniverse, %{private}d, avgNumOfSelectedLoc, %{private}.2lf, changeOfLocContext, %{public}d, numOfVL, %{public}d, numOfVIO, %{public}d, numOfWifiScan, %{private}d, avgNumApsPerScan, %{private}.2lf", buf, 0x5Eu);
  }

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100056C4C;
  v44[3] = &unk_100406DC8;
  v45 = v3;
  v46 = v5;
  v47 = v7;
  v48 = v9;
  v49 = v43;
  v50 = v42;
  v51 = v41;
  v52 = v40;
  v53 = v18;
  v54 = v21;
  v55 = v23;
  v56 = v25;
  AnalyticsSendEventLazy(CFSTR("com.apple.pipelined.localizationsessionstats"), v44);
  return 1;
}

void sub_100010CF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  _BYTE __p[12];
  char v21;
  uint8_t buf[4];
  _BYTE *v23;
  __int16 v24;
  unint64_t v25;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 64);
  *v4 |= 1 << v5;
  if (v5 == 63)
  {
    v6 = 0;
    *(_QWORD *)(a1 + 56) = ++v4;
  }
  else
  {
    v6 = v5 + 1;
  }
  *(_DWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = (uint64_t)&v7[v8 >> 6];
  if (v4 == (_QWORD *)v9 && v6 == (v8 & 0x3F))
  {
    *(_QWORD *)(a1 + 56) = v7;
    *(_DWORD *)(a1 + 64) = 0;
  }
  buf[0] = 1;
  v11 = sub_1002EFF60(v7, 0, v9, v8 & 0x3F, buf);
  v12 = v11 & ~(v11 >> 63);
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_100404810);
  v13 = (id)qword_100417EE0;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (sub_10005D8A4(*(_QWORD *)(a1 + 8)))
    {
      strcpy(__p, "LOW");
      v14 = 3;
    }
    else
    {
      strcpy(__p, "HIGH");
      v14 = 4;
    }
    v21 = v14;
    *(_DWORD *)buf = 136315394;
    v23 = __p;
    v24 = 2048;
    v25 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Wifi Scan error. Priority %s. Num rejected scans in window: %llu", buf, 0x16u);
    if (v21 < 0)
      operator delete(*(void **)__p);
  }

  v15 = sub_10005D8AC(*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(v15 + 32) == 2)
  {
    if ((sub_10005D8A4(*(_QWORD *)(a1 + 8)) & 1) == 0)
    {
      sub_1002EFC68(a1, a2);
      return;
    }
    if (v12 > *(unsigned int *)(v15 + 64))
    {
      if (qword_100417ED8 == -1)
      {
        v16 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_24:
          v17 = *(_QWORD *)(a1 + 32);
          v18 = *(_QWORD *)(a1 + 40);
          if (v18)
          {
            if (v18 >= 0x40)
              bzero(*(void **)(a1 + 32), 8 * (v18 >> 6));
            if ((v18 & 0x3F) != 0)
              *(_QWORD *)(v17 + 8 * (v18 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v18 & 0x3F));
          }
          *(_QWORD *)(a1 + 56) = v17;
          *(_DWORD *)(a1 + 64) = 0;
          if (!*(_BYTE *)(a1 + 16))
            *(_BYTE *)(a1 + 16) = 1;
          *(_QWORD *)(a1 + 24) = a2;
          sub_1002EEB68(*(_QWORD *)(a1 + 8), 0);
          return;
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_100404810);
        v16 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_24;
      }
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Wifi Scan failed and roaming has been allowed long enough. Switching to high priority scans", __p, 2u);
      goto LABEL_24;
    }
    if (qword_100417ED8 == -1)
    {
      v19 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100404810);
      v19 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Wifi Scan failed but still allowing roaming. Num rejected scans in window: %llu", __p, 0xCu);
  }
}

void sub_10001104C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000110E4(uint64_t a1)
{
  void *v2;
  const char *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString ps_stringWithSTL:](NSString, "ps_stringWithSTL:", a1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](NSThread, "currentThread"));
  objc_msgSend(v2, "setName:", v4);

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  pthread_setname_np(v3);

}

void sub_100011158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100011170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100011220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_100011238(void *a1)
{
  id v1;
  uint64_t v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **__dst;
  size_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  void *__p[2];
  char v25;

  v1 = a1;
  if (v1)
  {
    v22 = sub_1000C3924();
    v23 = v2;
    v3 = (const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
    v4 = strlen(v3);
    if (v4 > 0x7FFFFFFFFFFFFFF7)
      sub_1000CDE30();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v12 = v4 | 7;
      v13 = v12 + 1;
      p_dst = (void **)operator new(v12 + 1);
      v20 = v5;
      v21 = v13 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v21) = v4;
      p_dst = (void **)&__dst;
      if (!v4)
      {
LABEL_17:
        *((_BYTE *)p_dst + v5) = 0;
        sub_100023300((uint64_t)&v22, (uint64_t)&__dst, (uint64_t)__p);
        if (v25 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        goto LABEL_27;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_17;
  }
  v22 = sub_1000C3924();
  v23 = v7;
  if (byte_10041ACA7 >= 0)
    v8 = (const char *)&qword_10041AC90;
  else
    v8 = (const char *)qword_10041AC90;
  v9 = strlen(v8);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    v20 = v10;
    v21 = v16 | 0x8000000000000000;
    __dst = v11;
    goto LABEL_23;
  }
  HIBYTE(v21) = v9;
  v11 = (void **)&__dst;
  if (v9)
LABEL_23:
    memmove(v11, v8, v10);
  *((_BYTE *)v11 + v10) = 0;
  sub_100023300((uint64_t)&v22, (uint64_t)&__dst, (uint64_t)__p);
  if (v25 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
LABEL_27:
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_31:
    operator delete(__dst);
    goto LABEL_29;
  }
  if (SHIBYTE(v21) < 0)
    goto LABEL_31;
LABEL_29:

  return v17;
}

void sub_100011458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int128 __p, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete((void *)__p);
  if (a14 < 0)
  {
    operator delete((void *)a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_100011588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001159C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000115AC(_QWORD *a1, uint64_t a2, std::ios_base *this, uint64_t a4, uint64_t a5, std::string *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type size;
  uint64_t v21;
  std::string *v22;
  std::string *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  int v30;
  BOOL v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  std::string *v35;
  std::string *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  int v43;
  BOOL v44;
  std::string *v45;
  std::string::size_type v46;
  uint64_t v47;
  std::string *v48;
  std::string *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  int v56;
  BOOL v57;
  std::string *v58;
  std::string::size_type v59;
  uint64_t v60;
  std::string *v61;
  std::string *v62;
  char v63;
  std::string *v64;
  const std::locale::facet *v65;
  std::string::size_type v66;
  uint64_t v67;
  std::locale v69;
  char *v70;

  v12 = a1[39];
  if (v12 != a1[40])
  {
    v13 = v12 + 24 * *(int *)(a5 + 24);
    v14 = *(char *)(v13 + 23);
    v15 = *(_QWORD *)(v13 + 8);
    if (v14 >= 0)
      v16 = (char *)v13;
    else
      v16 = *(char **)v13;
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(v13 + 23);
    v17 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    v18 = v17 < 0;
    v19 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v17 >= 0)
      v19 = a6;
    size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v18)
      size = a6->__r_.__value_.__l.__size_;
    if (size)
    {
      v21 = 0;
      v22 = v19;
      while (1)
      {
        if (v19->__r_.__value_.__s.__data_[v21] == 37)
        {
          v23 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + v21 + 1);
          if (size - 1 != v21)
          {
            if (v23->__r_.__value_.__s.__data_[0] == 65)
            {
              v23 = (std::string *)&v19->__r_.__value_.__s.__data_[v21 + 2];
              v24 = -1;
            }
            else
            {
              v24 = 0;
            }
            if ((v24 & 1) != 0)
              break;
          }
        }
        v22 = (std::string *)((char *)v22 + 1);
        if (size == ++v21)
          goto LABEL_23;
      }
      if ((std::string *)((char *)v19 + v21) != v23)
      {
        v69.__locale_ = (std::locale::__imp *)"%A";
        v70 = "";
        sub_10019021C(a6, (uint64_t *)&v69, v16, &v16[v15], (std::string *)((char *)v19 + v21), v23, v16, &v16[v15]);
      }
    }
  }
LABEL_23:
  v25 = a1[36];
  if (v25 != a1[37])
  {
    v26 = v25 + 24 * *(int *)(a5 + 24);
    v27 = *(char *)(v26 + 23);
    v28 = *(_QWORD *)(v26 + 8);
    if (v27 >= 0)
      v29 = (char *)v26;
    else
      v29 = *(char **)v26;
    if (v27 >= 0)
      v28 = *(unsigned __int8 *)(v26 + 23);
    v30 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    v31 = v30 < 0;
    v32 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v30 >= 0)
      v32 = a6;
    v33 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v31)
      v33 = a6->__r_.__value_.__l.__size_;
    if (v33)
    {
      v34 = 0;
      v35 = v32;
      while (1)
      {
        if (v32->__r_.__value_.__s.__data_[v34] == 37)
        {
          v36 = (std::string *)((char *)&v32->__r_.__value_.__l.__data_ + v34 + 1);
          if (v33 - 1 != v34)
          {
            if (v36->__r_.__value_.__s.__data_[0] == 97)
            {
              v36 = (std::string *)&v32->__r_.__value_.__s.__data_[v34 + 2];
              v37 = -1;
            }
            else
            {
              v37 = 0;
            }
            if ((v37 & 1) != 0)
              break;
          }
        }
        v35 = (std::string *)((char *)v35 + 1);
        if (v33 == ++v34)
          goto LABEL_45;
      }
      if ((std::string *)((char *)v32 + v34) != v36)
      {
        v69.__locale_ = (std::locale::__imp *)"%a";
        v70 = "";
        sub_10019021C(a6, (uint64_t *)&v69, v29, &v29[v28], (std::string *)((char *)v32 + v34), v36, v29, &v29[v28]);
      }
    }
  }
LABEL_45:
  v38 = a1[33];
  if (v38 != a1[34])
  {
    v39 = v38 + 24 * *(int *)(a5 + 16);
    v40 = *(char *)(v39 + 23);
    v41 = *(_QWORD *)(v39 + 8);
    if (v40 >= 0)
      v42 = (char *)v39;
    else
      v42 = *(char **)v39;
    if (v40 >= 0)
      v41 = *(unsigned __int8 *)(v39 + 23);
    v43 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    v44 = v43 < 0;
    v45 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v43 >= 0)
      v45 = a6;
    v46 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v44)
      v46 = a6->__r_.__value_.__l.__size_;
    if (v46)
    {
      v47 = 0;
      v48 = v45;
      while (1)
      {
        if (v45->__r_.__value_.__s.__data_[v47] == 37)
        {
          v49 = (std::string *)((char *)&v45->__r_.__value_.__l.__data_ + v47 + 1);
          if (v46 - 1 != v47)
          {
            if (v49->__r_.__value_.__s.__data_[0] == 66)
            {
              v49 = (std::string *)&v45->__r_.__value_.__s.__data_[v47 + 2];
              v50 = -1;
            }
            else
            {
              v50 = 0;
            }
            if ((v50 & 1) != 0)
              break;
          }
        }
        v48 = (std::string *)((char *)v48 + 1);
        if (v46 == ++v47)
          goto LABEL_67;
      }
      if ((std::string *)((char *)v45 + v47) != v49)
      {
        v69.__locale_ = (std::locale::__imp *)"%B";
        v70 = "";
        sub_10019021C(a6, (uint64_t *)&v69, v42, &v42[v41], (std::string *)((char *)v45 + v47), v49, v42, &v42[v41]);
      }
    }
  }
LABEL_67:
  v51 = a1[30];
  if (v51 != a1[31])
  {
    v52 = v51 + 24 * *(int *)(a5 + 16);
    v53 = *(char *)(v52 + 23);
    v54 = *(_QWORD *)(v52 + 8);
    if (v53 >= 0)
      v55 = (char *)v52;
    else
      v55 = *(char **)v52;
    if (v53 >= 0)
      v54 = *(unsigned __int8 *)(v52 + 23);
    v56 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
    v57 = v56 < 0;
    v58 = (std::string *)a6->__r_.__value_.__r.__words[0];
    if (v56 >= 0)
      v58 = a6;
    v59 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (v57)
      v59 = a6->__r_.__value_.__l.__size_;
    if (v59)
    {
      v60 = 0;
      v61 = v58;
      while (1)
      {
        if (v58->__r_.__value_.__s.__data_[v60] == 37)
        {
          v62 = (std::string *)((char *)&v58->__r_.__value_.__l.__data_ + v60 + 1);
          if (v59 - 1 != v60)
          {
            if (v62->__r_.__value_.__s.__data_[0] == 98)
            {
              v62 = (std::string *)&v58->__r_.__value_.__s.__data_[v60 + 2];
              v63 = -1;
            }
            else
            {
              v63 = 0;
            }
            if ((v63 & 1) != 0)
              break;
          }
        }
        v61 = (std::string *)((char *)v61 + 1);
        if (v59 == ++v60)
          goto LABEL_89;
      }
      if ((std::string *)((char *)v58 + v60) != v62)
      {
        v69.__locale_ = (std::locale::__imp *)"%b";
        v70 = "";
        sub_10019021C(a6, (uint64_t *)&v69, v55, &v55[v54], (std::string *)((char *)v58 + v60), v62, v55, &v55[v54]);
      }
    }
  }
LABEL_89:
  v64 = a6;
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    v64 = (std::string *)a6->__r_.__value_.__r.__words[0];
  std::ios_base::getloc(this);
  v65 = std::locale::use_facet(&v69, &std::time_put<char,std::ostreambuf_iterator<char>>::id);
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    v66 = a6->__r_.__value_.__l.__size_;
  else
    v66 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
  v67 = std::time_put<char,std::ostreambuf_iterator<char>>::put(v65, a2, this, a4, a5, v64, (char *)v64 + v66);
  std::locale::~locale(&v69);
  return v67;
}

void sub_100011A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_100011A34()
{
  operator new();
}

void sub_100011AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100222B84((std::__thread_struct **)va);
  _Unwind_Resume(a1);
}

void sub_100011B00()
{
  operator delete();
}

void sub_100011B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__thread_struct **a9, std::__thread_struct *a10)
{
  sub_100222B1C(&a9);
  sub_100222B84(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100011C28(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;
  mode_t st_mode;
  int v8;
  const char *v9;
  int v10;
  stat v12;
  int v13;

  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (a2)
  {
    v6 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0)
      v6 = *(const char **)a2;
    if (stat(v6, &v12) < 0)
    {
      v8 = *__error();
      goto LABEL_17;
    }
    st_mode = v12.st_mode;
    if ((v12.st_mode & 0xF000) != 0x4000)
    {
      v8 = 20;
LABEL_17:
      sub_1000D499C(v8, a1, a2, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
      return 0;
    }
  }
  else
  {
    st_mode = 511;
  }
  if (*(char *)(a1 + 23) >= 0)
    v9 = (const char *)a1;
  else
    v9 = *(const char **)a1;
  if (mkdir(v9, st_mode))
  {
    v10 = *__error();
    memset(&v12, 0, 24);
    sub_10006DB18((const char *)a1, (uint64_t)&v12, &v13);
    if (v13 != 3)
      sub_1000D4868(v10, a1, (uint64_t)a3, (uint64_t)"boost::filesystem::create_directory");
    return 0;
  }
  return 1;
}

void sub_100011D30(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3E78;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100011D74(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_9;
LABEL_6:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_10:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100011E0C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;
  void **v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  ssize_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  char v16;
  void **v17;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[2];

  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v20 = *(_QWORD *)(a1 + 16);
  }
  v21[0] = 0;
  v21[1] = 0;
  if (v20 >= 0)
    v4 = (void *)HIBYTE(v20);
  else
    v4 = __p[1];
  if (!v4)
  {
LABEL_37:
    if (a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v20;
    return;
  }
  v5 = 0;
  v6 = 32;
  while (1)
  {
    if (v20 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (*((_BYTE *)v7 + v5) != 37)
      goto LABEL_32;
    if (v6 == 32)
    {
      v8 = open("/dev/urandom", 0x1000000);
      if (v8 != -1 || (v8 = open("/dev/random", 0x1000000), v8 != -1))
      {
        v9 = 0;
        v10 = v21;
        while (1)
        {
          v11 = read(v8, v10, 16 - v9);
          if (v11 == -1)
          {
            v12 = *__error();
            if (v12 != 4)
            {
              close(v8);
              goto LABEL_35;
            }
          }
          else
          {
            v9 += v11;
            v10 = (_QWORD *)((char *)v10 + v11);
          }
          if (v9 >= 0x10)
          {
            close(v8);
            goto LABEL_23;
          }
        }
      }
      v12 = *__error();
LABEL_35:
      if (v12)
        sub_1000D4734(v12, (uint64_t)a2, (uint64_t)"boost::filesystem::unique_path");
LABEL_23:
      if (!a2 || (v13 = a2[2], (v13 & 1) == 0))
      {
        v6 = 0;
        goto LABEL_28;
      }
      if (v13 != 1)
        break;
      v6 = *(_DWORD *)a2;
      if (*(_DWORD *)a2)
        break;
    }
LABEL_28:
    v14 = *((char *)v21 + ((unint64_t)v6 >> 1));
    v15 = 4 * (v6++ & 1);
    v16 = a0123456789abcd[(v14 >> v15) & 0xFLL];
    if (v20 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *((_BYTE *)v17 + v5) = v16;
LABEL_32:
    if ((void *)++v5 == v4)
      goto LABEL_37;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_10001206C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void sub_100012108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100012310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CLIndoorProvider;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

id sub_1000123CC(uint64_t a1, uint64_t a2)
{
  id result;

  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000124B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000124CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000124E0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];

  if ((*(_BYTE *)(*(_QWORD *)a1 + 113) & 1) != 0)
    return *(unsigned int *)(*(_QWORD *)a1 + 76);
  if (qword_100417EE8 != -1)
    dispatch_once(&qword_100417EE8, &stru_1003FBE40);
  v1 = 100000000;
  v2 = qword_100417EF0;
  if (os_log_type_enabled((os_log_t)qword_100417EF0, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67240192;
    v4[1] = 100000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "No regional value specified for 'regionalprefetchmaxtotalbytes', using value of %{public}d", (uint8_t *)v4, 8u);
  }
  return v1;
}

void sub_1000125C0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;

  v4 = 10;
  strcpy((char *)__p, "privacy.db");
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  sub_1000675EC(a2, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_10001265C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000126A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v6;
  int v7;
  void *v8;
  void *v9;
  _DWORD v11[2];

  *(_DWORD *)(a1 + 2464) = *a3;
  if (qword_100417ED8 == -1)
  {
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    v7 = *a3;
    v11[0] = 67240192;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Update cached ARSessionState to %{public}d", (uint8_t *)v11, 8u);
  }
LABEL_4:
  if (*(_BYTE *)(a1 + 1536))
  {
    v8 = *(void **)(a1 + 1568);
    if (v8)
    {
      *(_QWORD *)(a1 + 1576) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a1 + 1544);
    if (v9)
    {
      *(_QWORD *)(a1 + 1552) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 1536) = 0;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *))(**(_QWORD **)(a1 + 2528) + 200))(*(_QWORD *)(a1 + 2528), a2, a3);
}

void sub_1000127E8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v2);
        WiFiDeviceClientRegisterScanUpdateCallback(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), sub_1002EC3C4, 1, *(_QWORD *)(a1 + 32));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1000128FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001291C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v1 = *(_QWORD *)(a1 + 32);
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(v1 + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v2);
        WiFiDeviceClientRegisterScanUpdateCallback(*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), 0, 1, 0);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_100012A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100012A3C(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_1003F9288;
  *(_QWORD *)(a1 + 8) = a6 - 1;
  v11 = (void *)(a1 + 16);
  v12 = strlen(__s);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v14;
  }
  else
  {
    *(_BYTE *)(a1 + 39) = v12;
    v14 = v11;
    if (!v12)
      goto LABEL_9;
  }
  memmove(v14, __s, v13);
LABEL_9:
  *((_BYTE *)v14 + v13) = 0;
  *(_BYTE *)(a1 + 63) = 2;
  strcpy((char *)(a1 + 40), "%b");
  *(_BYTE *)(a1 + 87) = 2;
  strcpy((char *)(a1 + 64), "%a");
  sub_1000C5B0C(a1 + 88, a3);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_1001900A4((char *)(a1 + 192), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  sub_1001900A4((char *)(a1 + 216), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_100012BB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  sub_1000FE50C(v3);
  sub_10018EBA8(v4);
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*(void **)(v1 + 64));
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 39) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 40));
  if ((*(char *)(v1 + 39) & 0x80000000) == 0)
  {
LABEL_4:
    std::locale::facet::~facet((std::locale::facet *)v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*v2);
  std::locale::facet::~facet((std::locale::facet *)v1);
  _Unwind_Resume(a1);
}

void sub_100012C38(_Unwind_Exception *a1)
{
  std::locale::facet *v1;

  std::locale::facet::~facet(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100012C4C(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_1003F64B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (std::string *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) &= 0xF8u;
  if (a1 != a2)
    sub_1000772D4((uint64_t *)(a1 + 8), *(_QWORD **)(a2 + 8), (_QWORD *)(a2 + 16));
  std::string::operator=(v4, (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

void sub_100012CEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t *v4;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_1000733B4(v1, *v4);
  _Unwind_Resume(a1);
}

void sub_100012D14(_QWORD *a1, const std::string *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  std::logic_error v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_10006DB18((const char *)a2, 0, (int *)&v17);
  if (v17 <= 1)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v16, "Path given to logger doesn't exist");
    sub_10018D04C((uint64_t)v15);
    sub_1000F7E48(&v16, (uint64_t)"virtual void EventLogger::setLogDirectory(const fs::path &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 19, (uint64_t)v15);
  }
  sub_10006DB18((const char *)a2, 0, (int *)&v17);
  if ((_DWORD)v17 != 3)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v16, "Path given to logger isn't a directory");
    sub_10018D04C((uint64_t)v14);
    sub_1000F7E48(&v16, (uint64_t)"virtual void EventLogger::setLogDirectory(const fs::path &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/logging/event_logger.cpp", 24, (uint64_t)v14);
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 48))(&v17, a1);
  if (sub_10003B4F4((unint64_t)a2, v17 + 8))
  {
    std::string::operator=((std::string *)(v17 + 8), a2);
    v4 = v17;
    if (*(_BYTE *)(v17 + 32))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      v4 = v17;
    }
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = (std::__shared_weak_count *)a1[2];
    a1[1] = v4;
    a1[2] = v5;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_10001300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::invalid_argument a22,std::invalid_argument a23)
{
  void *v23;

  sub_1000F8144(&a23);
  if (__p)
    operator delete(__p);
  std::invalid_argument::~invalid_argument(&a22);
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100013100(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "SurveySdkData");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "customProperties", 13, 1)+ v6;
  v8 = v7
     + (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 11, 11, *(unsigned int *)(a1 + 24));
  v9 = *(_QWORD **)(a1 + 8);
  if (v9 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v20 = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)a2 + 168))(a2, v9 + 4);
      v21 = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)a2 + 168))(a2, v9 + 7);
      v22 = (_QWORD *)v9[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v9[2];
          v24 = *v23 == (_QWORD)v9;
          v9 = v23;
        }
        while (!v24);
      }
      v8 += v20 + v21;
      v9 = v23;
    }
    while (v23 != (_QWORD *)(a1 + 16));
  }
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 80))(a2) + v8;
  v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v12 = v10
      + v11
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "surveyorId", 11, 2);
  v13 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 32);
  v14 = v13 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v15 = v12
      + v14
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "specifiedSurveyType", 8, 3);
  v16 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 56));
  v17 = v16 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v15 + v18 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_100013360(uint64_t a1)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  objc_msgSend(*(id *)(a1 + 32), "onQueueHandleScan:forSettings:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  objc_autoreleasePoolPop(v2);
}

void sub_100013394(uint64_t a1, CFTypeRef cf, int a3, id *a4)
{
  CFTypeID v8;
  id v9;
  NSObject *v10;
  CFTypeID v11;
  const __CFString *v12;
  id v13;
  NSObject *v14;
  CFTypeID v15;
  const __CFString *v16;
  const char *v17;
  id v18;
  NSObject *v19;
  CFTypeID v20;
  const __CFString *v21;
  const char *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *CStringPtr;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;

  if (cf)
  {
    v8 = CFGetTypeID(cf);
    if (v8 != CFArrayGetTypeID())
    {
      v9 = sub_1002EB5C4();
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        v11 = CFGetTypeID(cf);
        v12 = CFCopyTypeIDDescription(v11);
        *(_DWORD *)buf = 68289795;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
        v29 = 2082;
        v30 = "assert";
        v31 = 2081;
        v32 = "networkScan == __null || CFGetTypeID(networkScan) == CFArrayGetTypeID()";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"We expect that networkScan is of type CFArray, but it's not. Memory smasher?\", \"networkScanType\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }

      v13 = sub_1002EB5C4();
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_signpost_enabled(v14))
      {
        v15 = CFGetTypeID(cf);
        v16 = CFCopyTypeIDDescription(v15);
        v17 = CFStringGetCStringPtr(v16, 0x8000100u);
        *(_DWORD *)buf = 68289795;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        CStringPtr = v17;
        v29 = 2082;
        v30 = "assert";
        v31 = 2081;
        v32 = "networkScan == __null || CFGetTypeID(networkScan) == CFArrayGetTypeID()";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "We expect that networkScan is of type CFArray, but it's not. Memory smasher?", "{\"msg%{public}.0s\":\"We expect that networkScan is of type CFArray, but it's not. Memory smasher?\", \"networkScanType\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }

      v18 = sub_1002EB5C4();
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = CFGetTypeID(cf);
        v21 = CFCopyTypeIDDescription(v20);
        v22 = CFStringGetCStringPtr(v21, 0x8000100u);
        sub_100344A28((uint64_t)v22, buf, v19);
      }

      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/wifiscanning/sensor/backend/IOSWifiScannerBackend.mm", 452, "ScanCallback_bounce_internal");
      __break(1u);
    }
  }
  sub_10003693C(a1, (const __CFArray *)cf, a3, a4);
}

void sub_1000135F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001362C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if ((objc_opt_respondsToSelector(*(_QWORD *)(v2 + 48), "wifiScanInitiated:") & 1) != 0)
    objc_msgSend(*(id *)(v2 + 48), "wifiScanInitiated:", *(unsigned int *)(v2 + 56));
  std::promise<void>::set_value((std::promise<void> *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48));
}

void sub_100013688(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = (std::promise<void> *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 8) + 48);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_1000136C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000136E4(uint64_t a1, uint64_t a2)
{
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
}

id sub_100013718(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  result = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_100013750(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10001382C(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 24);
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  sub_10001385C(v1);
}

void sub_10001385C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    v3 = (_QWORD *)v2[a1[1]];
    if (!v3)
      goto LABEL_20;
    while (1)
    {
      v5 = (_QWORD *)*v3;
      v6 = v3[3];
      if (!v6)
        goto LABEL_6;
      v7 = v3[4];
      v4 = (void *)v3[3];
      if (v7 != v6)
        break;
LABEL_5:
      v3[4] = v6;
      operator delete(v4);
LABEL_6:
      operator delete(v3);
      v3 = v5;
      if (!v5)
      {
        v2 = (_QWORD *)a1[5];
LABEL_20:
        operator delete(v2);
        a1[2] = 0;
        a1[4] = 0;
        a1[5] = 0;
        return;
      }
    }
    while (1)
    {
      v8 = *(std::__shared_weak_count **)(v7 - 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
          break;
      }
      v11 = *(_QWORD *)(v7 - 40);
      if (v11)
        goto LABEL_16;
LABEL_10:
      v7 -= 48;
      if (v7 == v6)
      {
        v4 = (void *)v3[3];
        goto LABEL_5;
      }
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(_QWORD *)(v7 - 40);
    if (!v11)
      goto LABEL_10;
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_10;
  }
}

void sub_100013954(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "onQueueTick");

}

void sub_100013988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_1000139B8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned int *v5;
  unsigned int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v12;
  unsigned int *v13;
  unsigned int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v16;
  _QWORD *v17;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v18;
  _QWORD *v19;

  v3 = a2;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    v5 = *(unsigned int **)(a1 + 40);
    if (v5)
    {
      *a2 = 10;
      v6 = (_DWORD)a2 + 1;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[12];
      if (v7 <= 0x7F)
      {
LABEL_4:
        v3[1] = v7;
        v8 = (uint64_t)(v3 + 2);
LABEL_7:
        v3 = (unsigned __int8 *)sub_100013AF0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v5, v8, a3);
        goto LABEL_8;
      }
    }
    else
    {
      v5 = *(unsigned int **)(qword_10041AAF8 + 40);
      *a2 = 10;
      v6 = (_DWORD)a2 + 1;
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v5[12];
      if (v7 <= 0x7F)
        goto LABEL_4;
    }
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, v6, a3);
    goto LABEL_7;
  }
LABEL_8:
  v9 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8), 2, 3, v3);
  v12 = v9;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    v13 = *(unsigned int **)(a1 + 48);
    if (v13)
    {
      *(_BYTE *)v9 = 34;
      v14 = (_DWORD)v9 + 1;
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13[18];
      if (v15 <= 0x7F)
      {
LABEL_11:
        *((_BYTE *)v12 + 1) = (_BYTE)v15;
        v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v12 + 2);
LABEL_14:
        v12 = sub_100013C64((wireless_diagnostics::google::protobuf::internal::WireFormat *)v13, v16, v10, v11);
        goto LABEL_15;
      }
    }
    else
    {
      v13 = *(unsigned int **)(qword_10041AAF8 + 48);
      *(_BYTE *)v9 = 34;
      v14 = (_DWORD)v9 + 1;
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13[18];
      if (v15 <= 0x7F)
        goto LABEL_11;
    }
    v16 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, v14, v10);
    goto LABEL_14;
  }
LABEL_15:
  v19 = *(_QWORD **)(a1 + 32);
  v18 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 32);
  v17 = v19;
  if (!v19 || *v17 == v17[1])
    return v12;
  else
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v18, v12, v10);
}

uint64_t sub_100013AF0(wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4;
  _QWORD *v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  _QWORD *v11;

  v4 = *((_DWORD *)this + 13);
  if ((v4 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 9;
    *(_QWORD *)(a2 + 1) = v7;
    a2 += 9;
    v4 = *((_DWORD *)this + 13);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *((_QWORD *)this + 3);
  *(_BYTE *)a2 = 17;
  *(_QWORD *)(a2 + 1) = v8;
  a2 += 9;
  v4 = *((_DWORD *)this + 13);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_10:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((_QWORD *)this + 5);
    *(_BYTE *)a2 = 32;
    a2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v10, a2 + 1, a3);
    v11 = (_QWORD *)*((_QWORD *)this + 1);
    v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v5 = v11;
    if (!v11)
      return a2;
    goto LABEL_11;
  }
LABEL_9:
  v9 = *((_QWORD *)this + 4);
  *(_BYTE *)a2 = 25;
  *(_QWORD *)(a2 + 1) = v9;
  a2 += 9;
  if ((*((_DWORD *)this + 13) & 8) != 0)
    goto LABEL_10;
LABEL_5:
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v5)
    return a2;
LABEL_11:
  if (*v5 != v5[1])
    return wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v6, (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)a2, a3);
  return a2;
}

wireless_diagnostics::google::protobuf::UnknownFieldSet *sub_100013C64(wireless_diagnostics::google::protobuf::internal::WireFormat *this, wireless_diagnostics::google::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v4;
  int v6;
  _QWORD *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v18;
  unsigned __int8 *v19;
  unsigned int *v20;
  unsigned int v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int *v26;
  unsigned int v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned int *v32;
  unsigned int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int *v38;
  unsigned int v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned int *v44;
  unsigned int v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  _QWORD *v47;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v48;
  unsigned __int8 *v49;
  _QWORD *v50;

  v4 = a2;
  v6 = *((_DWORD *)this + 19);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_16:
    v15 = (unsigned int *)*((_QWORD *)this + 3);
    if (v15)
    {
      *(_BYTE *)v4 = 18;
      v16 = (_DWORD)v4 + 1;
      v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15[12];
      if (v17 <= 0x7F)
        goto LABEL_18;
    }
    else
    {
      v15 = *(unsigned int **)(qword_10041A8F0 + 24);
      *(_BYTE *)v4 = 18;
      v16 = (_DWORD)v4 + 1;
      v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15[12];
      if (v17 <= 0x7F)
      {
LABEL_18:
        *((_BYTE *)v4 + 1) = (_BYTE)v17;
        v4 = sub_1001251D4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v15, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
        v6 = *((_DWORD *)this + 19);
        if ((v6 & 4) != 0)
          goto LABEL_22;
LABEL_4:
        if ((v6 & 8) == 0)
          goto LABEL_5;
LABEL_28:
        v26 = (unsigned int *)*((_QWORD *)this + 5);
        if (v26)
        {
          *(_WORD *)v4 = 16122;
          v27 = (_DWORD)v4 + 2;
          v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26[11];
          if (v28 <= 0x7F)
            goto LABEL_30;
        }
        else
        {
          v26 = *(unsigned int **)(qword_10041A8F0 + 40);
          *(_WORD *)v4 = 16122;
          v27 = (_DWORD)v4 + 2;
          v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26[11];
          if (v28 <= 0x7F)
          {
LABEL_30:
            *((_BYTE *)v4 + 2) = (_BYTE)v28;
            v4 = sub_1000C04BC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v26, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
            v6 = *((_DWORD *)this + 19);
            if ((v6 & 0x10) != 0)
              goto LABEL_34;
LABEL_6:
            if ((v6 & 0x20) == 0)
              goto LABEL_7;
LABEL_40:
            v38 = (unsigned int *)*((_QWORD *)this + 7);
            if (v38)
            {
              *(_WORD *)v4 = 16282;
              v39 = (_DWORD)v4 + 2;
              v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[6];
              if (v40 <= 0x7F)
                goto LABEL_42;
            }
            else
            {
              v38 = *(unsigned int **)(qword_10041A8F0 + 56);
              *(_WORD *)v4 = 16282;
              v39 = (_DWORD)v4 + 2;
              v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v38[6];
              if (v40 <= 0x7F)
              {
LABEL_42:
                *((_BYTE *)v4 + 2) = (_BYTE)v40;
                v4 = sub_100100F28((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
                if ((*((_DWORD *)this + 19) & 0x40) != 0)
                  goto LABEL_46;
LABEL_8:
                v9 = (_QWORD *)*((_QWORD *)this + 1);
                v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
                v7 = v9;
                if (!v9)
                  return v4;
                goto LABEL_52;
              }
            }
            v41 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v40, v39, a3);
            v4 = sub_100100F28((wireless_diagnostics::google::protobuf::internal::WireFormat *)v38, v41, v42, v43);
            if ((*((_DWORD *)this + 19) & 0x40) != 0)
              goto LABEL_46;
            goto LABEL_8;
          }
        }
        v29 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, v27, a3);
        v4 = sub_1000C04BC((wireless_diagnostics::google::protobuf::internal::WireFormat *)v26, v29, v30, v31);
        v6 = *((_DWORD *)this + 19);
        if ((v6 & 0x10) != 0)
          goto LABEL_34;
        goto LABEL_6;
      }
    }
    v18 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v17, v16, a3);
    v4 = sub_1001251D4((wireless_diagnostics::google::protobuf::internal::WireFormat *)v15, v18, v19);
    v6 = *((_DWORD *)this + 19);
    if ((v6 & 4) != 0)
      goto LABEL_22;
    goto LABEL_4;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  if (v10)
  {
    *(_BYTE *)a2 = 10;
    v11 = (_DWORD)a2 + 1;
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[12];
    if (v12 <= 0x7F)
      goto LABEL_12;
LABEL_15:
    v13 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v12, v11, a3);
    v4 = sub_1001238A0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, v13, v14);
    v6 = *((_DWORD *)this + 19);
    if ((v6 & 2) != 0)
      goto LABEL_16;
    goto LABEL_3;
  }
  v10 = *(unsigned int **)(qword_10041A8F0 + 16);
  *(_BYTE *)a2 = 10;
  v11 = (_DWORD)a2 + 1;
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v10[12];
  if (v12 > 0x7F)
    goto LABEL_15;
LABEL_12:
  *((_BYTE *)v4 + 1) = (_BYTE)v12;
  v4 = sub_1001238A0((wireless_diagnostics::google::protobuf::internal::WireFormat *)v10, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 2), a3);
  v6 = *((_DWORD *)this + 19);
  if ((v6 & 2) != 0)
    goto LABEL_16;
LABEL_3:
  if ((v6 & 4) == 0)
    goto LABEL_4;
LABEL_22:
  v20 = (unsigned int *)*((_QWORD *)this + 4);
  if (v20)
  {
    *(_WORD *)v4 = 434;
    v21 = (_DWORD)v4 + 2;
    v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20[14];
    if (v22 <= 0x7F)
      goto LABEL_24;
LABEL_27:
    v23 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, v21, a3);
    v4 = sub_10012920C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v20, v23, v24, v25);
    v6 = *((_DWORD *)this + 19);
    if ((v6 & 8) != 0)
      goto LABEL_28;
    goto LABEL_5;
  }
  v20 = *(unsigned int **)(qword_10041A8F0 + 32);
  *(_WORD *)v4 = 434;
  v21 = (_DWORD)v4 + 2;
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20[14];
  if (v22 > 0x7F)
    goto LABEL_27;
LABEL_24:
  *((_BYTE *)v4 + 2) = (_BYTE)v22;
  v4 = sub_10012920C((wireless_diagnostics::google::protobuf::internal::WireFormat *)v20, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
  v6 = *((_DWORD *)this + 19);
  if ((v6 & 8) != 0)
    goto LABEL_28;
LABEL_5:
  if ((v6 & 0x10) == 0)
    goto LABEL_6;
LABEL_34:
  v32 = (unsigned int *)*((_QWORD *)this + 6);
  if (v32)
  {
    *(_WORD *)v4 = 16266;
    v33 = (_DWORD)v4 + 2;
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[20];
    if (v34 <= 0x7F)
      goto LABEL_36;
LABEL_39:
    v35 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v34, v33, a3);
    v4 = sub_1000C1144((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, v35, v36, v37);
    v6 = *((_DWORD *)this + 19);
    if ((v6 & 0x20) != 0)
      goto LABEL_40;
    goto LABEL_7;
  }
  v32 = *(unsigned int **)(qword_10041A8F0 + 48);
  *(_WORD *)v4 = 16266;
  v33 = (_DWORD)v4 + 2;
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32[20];
  if (v34 > 0x7F)
    goto LABEL_39;
LABEL_36:
  *((_BYTE *)v4 + 2) = (_BYTE)v34;
  v4 = sub_1000C1144((wireless_diagnostics::google::protobuf::internal::WireFormat *)v32, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3, a4);
  v6 = *((_DWORD *)this + 19);
  if ((v6 & 0x20) != 0)
    goto LABEL_40;
LABEL_7:
  if ((v6 & 0x40) == 0)
    goto LABEL_8;
LABEL_46:
  v44 = (unsigned int *)*((_QWORD *)this + 8);
  if (v44)
  {
    *(_WORD *)v4 = 16290;
    v45 = (_DWORD)v4 + 2;
    v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[22];
    if (v46 <= 0x7F)
      goto LABEL_48;
LABEL_51:
    v48 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v46, v45, a3);
    v4 = sub_1000C06F8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, v48, v49);
    v50 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
    v7 = v50;
    if (!v50)
      return v4;
    goto LABEL_52;
  }
  v44 = *(unsigned int **)(qword_10041A8F0 + 64);
  *(_WORD *)v4 = 16290;
  v45 = (_DWORD)v4 + 2;
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v44[22];
  if (v46 > 0x7F)
    goto LABEL_51;
LABEL_48:
  *((_BYTE *)v4 + 2) = (_BYTE)v46;
  v4 = sub_1000C06F8((wireless_diagnostics::google::protobuf::internal::WireFormat *)v44, (wireless_diagnostics::google::protobuf::UnknownFieldSet *)((char *)v4 + 3), a3);
  v47 = (_QWORD *)*((_QWORD *)this + 1);
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)((char *)this + 8);
  v7 = v47;
  if (!v47)
    return v4;
LABEL_52:
  if (*v7 != v7[1])
    return (wireless_diagnostics::google::protobuf::UnknownFieldSet *)wireless_diagnostics::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v8, v4, a3);
  return v4;
}

void sub_100014054(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "onQueueNotifyLocationContext:withLocationContext:", *(unsigned __int8 *)(a1 + 40), *(unsigned int *)(a1 + 44));

}

void sub_100014094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100014168(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x100014118);
}

uint64_t sub_100014180()
{
  if (qword_10041A318 != -1)
    dispatch_once(&qword_10041A318, &stru_100404640);
  return qword_10041A310;
}

uint64_t *sub_1000141CC()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A560);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A560))
    return &qword_10041A6E0;
  qword_10041A6E0 = (uint64_t)sub_10016E218();
  unk_10041A6E8 = v2;
  byte_10041A6F0 = 0;
  byte_10041A6F8 = 0;
  byte_10041A6FA = 0;
  __cxa_guard_release(&qword_10041A560);
  return &qword_10041A6E0;
}

void sub_100014240(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A560);
  _Unwind_Resume(a1);
}

float sub_100014258(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

void sub_100014260(id *a1)
{

}

void sub_100014290(id *a1)
{

}

void sub_10001442C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v2 - 128));

  _Unwind_Resume(a1);
}

void sub_10001481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  nullsub_22(&a9);
  nullsub_22(&a17);
  _Unwind_Resume(a1);
}

void sub_10001483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  nullsub_22(va);
  _Unwind_Resume(a1);
}

id sub_100014850(uint64_t a1, id *a2)
{
  NSObject *v4;
  id v5;
  id result;
  int v7;
  id v8;

  if (qword_100417EF8 != -1)
    dispatch_once(&qword_100417EF8, &stru_100407200);
  v4 = (id)qword_100417F00;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend(*a2, "count");
    v7 = 134349056;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLIndoorProvider] startUpdatingLocationAtLocation. Universe was updated, start requesting %{public}lu venues", (uint8_t *)&v7, 0xCu);
  }

  result = objc_msgSend(*a2, "count");
  if (result)
    return objc_msgSend(**(id **)(a1 + 32), "setSet:", *a2);
  return result;
}

void sub_10001494C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100014960(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  void **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void *v16;
  char *v17;
  size_t v18;
  std::string::size_type v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string v26;
  void *__p;
  void **v28;
  uint64_t v29;
  void *v30;
  void **v31;
  uint64_t v32;
  char v33[8];
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;

  sub_1000C5B0C((uint64_t)v33, a3);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_1001900A4((char *)&v30, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  __p = 0;
  v28 = 0;
  v29 = 0;
  sub_1001900A4((char *)&__p, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3));
  sub_100012A3C(a1, a2, (uint64_t)v33, (uint64_t *)&v30, (uint64_t *)&__p, a6);
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v28;
    v13 = __p;
    if (v28 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v28 = v11;
    operator delete(v13);
  }
  v14 = (void **)v30;
  if (v30)
  {
    v15 = v31;
    v16 = v30;
    if (v31 != v30)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*(v15 - 3));
        v15 -= 3;
      }
      while (v15 != v14);
      v16 = v30;
    }
    v31 = v14;
    operator delete(v16);
  }
  if (v41 < 0)
  {
    operator delete(v40);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_19:
      if ((v37 & 0x80000000) == 0)
        goto LABEL_20;
LABEL_34:
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v38);
  if (v37 < 0)
    goto LABEL_34;
LABEL_20:
  if ((v35 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_35:
  operator delete(v34);
LABEL_21:
  *(_QWORD *)a1 = off_1003F9210;
  v17 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0];
  v18 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = (std::string *)operator new(v21 + 1);
    v26.__r_.__value_.__l.__size_ = v19;
    v26.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    goto LABEL_28;
  }
  *((_BYTE *)&v26.__r_.__value_.__s + 23) = v18;
  v20 = &v26;
  if (v18)
LABEL_28:
    memmove(v20, v17, v19);
  v20->__r_.__value_.__s.__data_[v19] = 0;
  v23 = std::string::append(&v26, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100014BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  std::locale::facet *v21;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_10000C7A8(v21);
    _Unwind_Resume(a1);
  }
  sub_10000C7A8(v21);
  _Unwind_Resume(a1);
}

void sub_100014C54(_QWORD *a1@<X8>)
{
  id v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(+[DarwinDeviceInfo currentDevice](DarwinDeviceInfo, "currentDevice"));
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "osVersion")));
  v3 = (const char *)objc_msgSend(v2, "UTF8String");
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(a1, v3, v5);
LABEL_9:
  *((_BYTE *)a1 + v5) = 0;

}

void sub_100014D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100014D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100015000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000150E8()
{
  void *v0;

  operator delete();
}

void sub_100015114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100015138(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  v1 = result;
  v2 = result[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  v4 = result[4];
  if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete();
  }
  v6 = result[5];
  if ((_UNKNOWN *)v6 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    operator delete();
  }
  v8 = result[7];
  if ((_UNKNOWN *)v8 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    operator delete();
  }
  if ((_QWORD *)qword_10041AB20 != result)
  {
    v10 = result[2];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    result = (_QWORD *)v1[8];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1000152CC(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_100015488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000154F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015570(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  if (qword_100417ED8 == -1)
  {
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_100404290);
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Freeing old WiFi manager", buf, 2u);
  }
LABEL_4:
  CFRelease(*(CFTypeRef *)(a1 + 40));
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100404290);
    v3 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    goto LABEL_6;
  }
  v3 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Stopping the WiFi runloop", v4, 2u);
  }
LABEL_7:
  objc_msgSend(*(id *)(a1 + 32), "setStopExpected");
  CFRunLoopStop(*(CFRunLoopRef *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t sub_1000156B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)a1 = off_1003FF238;
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 208);
    v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v4);
  }
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
  v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(_QWORD *)(a1 + 144) = v6;
    operator delete(v6);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!*(_BYTE *)(a1 + 96))
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  if (*(_BYTE *)(a1 + 96))
LABEL_18:
    *(_BYTE *)(a1 + 96) = 0;
LABEL_19:
  v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v10)
    goto LABEL_23;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = *(uint64_t **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v13)
    {
LABEL_24:
      sub_100005C6C(v13);
      operator delete();
    }
  }
  else
  {
LABEL_23:
    v13 = *(uint64_t **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v13)
      goto LABEL_24;
  }
  v14 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v14)
    sub_10024DAD4(a1 + 64, v14);
  v15 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v15)
    return a1;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_1000159FC()
{
  operator delete();
}

void sub_100015A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_100015C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100015C20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100015E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100015E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015E5C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = sub_100022DE8(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_100011238(v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  sub_100018068(a3, v6, v8);

}

void sub_100015ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100015EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100016298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10001633C(uint64_t a1)
{
  _BYTE *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (_BYTE *)(a1 + 6664);
  *(_QWORD *)a1 = off_1003EF180;
  v3 = *(std::__shared_weak_count **)(a1 + 7960);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (_BYTE *)(a1 + 5528);
    v7 = *(void **)(a1 + 7928);
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (_BYTE *)(a1 + 5528);
  v7 = *(void **)(a1 + 7928);
  if (v7)
  {
LABEL_6:
    *(_QWORD *)(a1 + 7936) = v7;
    operator delete(v7);
  }
LABEL_7:
  std::mutex::~mutex((std::mutex *)(a1 + 7864));
  if (*v2)
  {
    sub_1000ED500((cnframework::TimestampedEvent *)(a1 + 6672));
    *v2 = 0;
  }
  v8 = (_BYTE *)(a1 + 4320);
  if (v6[24])
  {
    sub_1000ED590((cnframework::TimestampedEvent *)(a1 + 5560));
    v6[24] = 0;
  }
  if (*v6)
    *v6 = 0;
  if (*v8)
  {
    sub_1000ED500((cnframework::TimestampedEvent *)(a1 + 4336));
    *v8 = 0;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 4312);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 4168) = off_1003EEB18;
  *(_QWORD *)(a1 + 4104) = off_1003EEB18;
  *(_QWORD *)(a1 + 4040) = off_1003EEB18;
  *(_QWORD *)(a1 + 3920) = off_1003EEB18;
  *(_QWORD *)(a1 + 3808) = off_1003EEB18;
  *(_QWORD *)(a1 + 3696) = off_1003EEB18;
  *(_QWORD *)(a1 + 3632) = off_1003EEB18;
  *(_QWORD *)(a1 + 3480) = off_1003EEB18;
  *(_QWORD *)(a1 + 3368) = off_1003EEB18;
  *(_QWORD *)(a1 + 3256) = off_1003EEB18;
  *(_QWORD *)(a1 + 3192) = off_1003EEB18;
  *(_QWORD *)(a1 + 3040) = off_1003EEB18;
  *(_QWORD *)(a1 + 2928) = off_1003EEB18;
  *(_QWORD *)(a1 + 2816) = off_1003EEB18;
  *(_QWORD *)(a1 + 2752) = off_1003EEB18;
  *(_QWORD *)(a1 + 2600) = off_1003EEB18;
  *(_QWORD *)(a1 + 2488) = off_1003EEB18;
  *(_QWORD *)(a1 + 2376) = off_1003EEB18;
  *(_QWORD *)(a1 + 2312) = off_1003EEB18;
  if (*(_BYTE *)(a1 + 2272))
  {
    *(_QWORD *)(a1 + 2144) = off_1003EEB18;
    *(_QWORD *)(a1 + 2032) = off_1003EEB18;
    *(_QWORD *)(a1 + 1920) = off_1003EEB18;
    *(_QWORD *)(a1 + 1856) = off_1003EEB18;
    *(_QWORD *)(a1 + 1704) = off_1003EEB18;
    *(_QWORD *)(a1 + 1592) = off_1003EEB18;
    *(_QWORD *)(a1 + 1480) = off_1003EEB18;
    *(_QWORD *)(a1 + 1416) = off_1003EEB18;
  }
  if (*(_BYTE *)(a1 + 1176))
    sub_1000ED590((cnframework::TimestampedEvent *)(a1 + 72));
  return a1;
}

void sub_10001662C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_100016654(_QWORD *a1)
{
  *a1 = off_1003F3D98;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 4));
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_1000166A4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v2;

  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000166C0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000166D4(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  _QWORD *v8;
  id v9;
  id v10;
  unsigned int v11;

  v11 = a2;
  v10 = objc_alloc_init((Class)NSOperationQueue);
  objc_msgSend(v10, "setName:", CFSTR("Sensor Listener Queue"));
  objc_msgSend(v10, "setMaxConcurrentOperationCount:", 1);
  v7 = sub_1000C8254();
  v9 = (id)objc_claimAutoreleasedReturnValue(v7);
  v8 = operator new(0x78uLL);
  sub_100300BA0(v8, a1 + 8, (uint64_t *)&v9, (uint64_t *)&v10, &v11, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

}

void sub_10001678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  operator delete(v11);

  _Unwind_Resume(a1);
}

void sub_1000167B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000167C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100016AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100016B0C(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  char *v15;
  __int128 *v16;
  std::string::size_type *v17;
  unint64_t v18;
  __int128 v19;
  std::string::value_type v20;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  uint64_t v28;
  void (__cdecl **v29)(std::ostream *__hidden);
  std::ios_base v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v28 = 0;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  std::streambuf::basic_streambuf(&v22);
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  LODWORD(v28) = 24;
  *(_QWORD *)&v24 = 0;
  v23 = 0uLL;
  v22.n128_u64[0] = (unint64_t)off_1003EFE30;
  std::ios_base::init(&v30, &v22);
  v31 = 0;
  v32 = -1;
  v34 = (char *)&v33;
  v35 = (char *)&v33 + 2;
  sub_100009B34(&v22, a1);
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    v7 = v34;
    v6 = v35;
    v8 = v35 - v34;
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = a2->__r_.__value_.__r.__words[2];
      v11 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 >= v8)
      {
        v13 = HIBYTE(v12);
LABEL_9:
        if ((v13 & 0x80u) == 0)
          v9 = a2;
        else
          v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_12:
        if (v7 == v6)
        {
          v14 = v9;
        }
        else
        {
          if (v8 < 0x20 || (unint64_t)((char *)v9 - v7) < 0x20)
          {
            v14 = v9;
            v15 = v7;
          }
          else
          {
            v14 = (std::string *)((char *)v9 + (v8 & 0xFFFFFFFFFFFFFFE0));
            v15 = &v7[v8 & 0xFFFFFFFFFFFFFFE0];
            v16 = (__int128 *)(v7 + 16);
            v17 = &v9->__r_.__value_.__r.__words[2];
            v18 = v8 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v19 = *v16;
              *((_OWORD *)v17 - 1) = *(v16 - 1);
              *(_OWORD *)v17 = v19;
              v16 += 2;
              v17 += 4;
              v18 -= 32;
            }
            while (v18);
            if (v8 == (v8 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_22;
          }
          do
          {
            v20 = *v15++;
            v14->__r_.__value_.__s.__data_[0] = v20;
            v14 = (std::string *)((char *)v14 + 1);
          }
          while (v15 != v6);
        }
LABEL_22:
        v14->__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          a2->__r_.__value_.__l.__size_ = v8;
        else
          *((_BYTE *)&a2->__r_.__value_.__s + 23) = v8 & 0x7F;
        goto LABEL_25;
      }
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v9 = a2;
      if (v8 <= 0x16)
        goto LABEL_12;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v11 = 22;
    }
    std::string::__grow_by(a2, v11, v8 - v11, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v13) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_9;
  }
LABEL_25:
  std::ostream::~ostream(&v29);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(&v22);
  return v5;
}

void sub_100016D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100016D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100016D4C(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

void sub_100016DF8(uint64_t a1)
{
  NSObject *v2;
  _QWORD v3[5];
  uint8_t buf[8];
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)();
  uint64_t v9;

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished playing back events", buf, 2u);
  }
LABEL_4:
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_BYTE *)(a1 + 17) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  *(_QWORD *)buf = 0;
  v5 = buf;
  v6 = 0x3002000000;
  v7 = sub_1002183A4;
  v8 = nullsub_137;
  v9 = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_1002183B4;
  v3[3] = &unk_1003FDE28;
  v3[4] = buf;
  sub_1000C7D70((dispatch_queue_t *)(a1 + 144), v3);
  _Block_object_dispose(buf, 8);
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

uint64_t sub_100016F34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  *(_QWORD *)a1 = off_100407E88;
  v2 = *(std::__shared_weak_count **)(a1 + 936);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    nullsub_8(a1 + 824);
    nullsub_8(a1 + 720);
    v5 = *(void **)(a1 + 688);
    if (!v5)
      goto LABEL_10;
  }
  else
  {
LABEL_5:
    nullsub_8(a1 + 824);
    nullsub_8(a1 + 720);
    v5 = *(void **)(a1 + 688);
    if (!v5)
      goto LABEL_10;
  }
  v6 = *(_QWORD *)(a1 + 696);
  v7 = v5;
  if ((void *)v6 != v5)
  {
    do
      v6 = nullsub_8(v6 - 104);
    while ((void *)v6 != v5);
    v7 = *(void **)(a1 + 688);
  }
  *(_QWORD *)(a1 + 696) = v5;
  operator delete(v7);
LABEL_10:
  nullsub_8(a1 + 576);
  nullsub_8(a1 + 472);
  v8 = *(_QWORD *)(a1 + 440);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 448);
    v10 = *(void **)(a1 + 440);
    if (v9 != v8)
    {
      do
        v9 = nullsub_8(v9 - 104);
      while (v9 != v8);
      v10 = *(void **)(a1 + 440);
    }
    *(_QWORD *)(a1 + 448) = v8;
    operator delete(v10);
  }
  if (*(_BYTE *)(a1 + 376))
    *(_BYTE *)(a1 + 376) = 0;
  nullsub_8(a1 + 272);
  nullsub_8(a1 + 168);
  v11 = *(_QWORD *)(a1 + 136);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 144);
    v13 = *(void **)(a1 + 136);
    if (v12 != v11)
    {
      do
        v12 = nullsub_8(v12 - 104);
      while (v12 != v11);
      v13 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v11;
    operator delete(v13);
  }
  sub_1000C7D78((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t sub_1000170A0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;
  _DWORD v16[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v16[0] == v16[0] >> 31)
  {
    v4 = *a2;
  }
  else
  {
    sub_10032F5B0((uint64_t)v16);
    v4 = v5;
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1004073A8);
      v6 = (id)qword_100417EE0;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v16, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v13 = v7;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v11 < 0)
          operator delete(__p[0]);
      }

      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v16);
  return v4;
}

void sub_10001720C(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  id v5;
  NSObject *v6;
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t buf;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  if (a2)
  {

    __cxa_begin_catch(a1);
    v5 = sub_10032D098();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000173C4(unint64_t a1, uint64_t *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *a2;
  v8 = a2[1];
  v10 = (v8 - *a2) >> 3;
  if (v10 != (uint64_t)(a3[1] - *a3) >> 4)
  {
    sub_1000D5048(v21, "");
    sub_100174738((uint64_t)v21, 0, 0);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    sub_10015C2DC((uint64_t)&v26);
  }
  sub_1000FC5A4((uint64_t)v21);
  v11 = v22;
  *(_DWORD *)((char *)v23 + *(_QWORD *)(v22 - 24)) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(v22 - 24)) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v23[1] + *(_QWORD *)(v11 - 24)) = 1;
  v12 = (double)a1;
  if (v8 != v9)
  {
    v13 = 0;
    v14 = 0;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v15 = (_QWORD *)std::ostream::operator<<(*(double *)(*a2 + 8 * v14) * v12);
      v16 = sub_1000F0508(v15, (uint64_t)" @ L", 4);
      v17 = sub_100023E4C(v16, (uint64_t **)(*a3 + v13));
      sub_1000F0508(v17, (uint64_t)" | ", 3);
      ++v14;
      v13 += 16;
    }
    while (v10 != v14);
  }
  v18 = (_QWORD *)std::ostream::operator<<(v12 * a4);
  sub_1000F0508(v18, (uint64_t)" offmap", 7);
  std::stringbuf::str(v23);
  *(void **)((char *)v21
  v22 = v19;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf(v23);
  return std::ios::~ios(&v25);
}

void sub_1000175D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

void sub_1000175F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000FC6DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100017604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000FC6DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100017618(_QWORD *a1, uint64_t a2)
{
  id result;
  uint64_t v5;

  a1[4] = *(id *)(a2 + 32);
  a1[5] = *(id *)(a2 + 40);
  result = *(id *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  a1[6] = result;
  a1[7] = v5;
  return result;
}

void sub_1000177A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100017920()
{
  void *v0;

  operator delete();
}

void sub_10001794C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000179E4(uint64_t a1)
{
  uint64_t v2;
  std::thread *v3;

  *(_QWORD *)a1 = off_1004003F8;
  *(_QWORD *)(a1 + 8) = off_100400490;
  sub_1000CAEE0(a1);
  sub_100017A84(*(uint64_t **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    sub_10026FC34(a1 + 88, v2);
  v3 = *(std::thread **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
  {
    if (v3[2].__t_)
      std::thread::join(v3 + 2);
    std::thread::~thread(v3 + 2);
    operator delete();
  }
  return sub_10004D464(a1);
}

void sub_100017A84(uint64_t *a1)
{
  sub_100017A8C(*a1);
}

void sub_100017A8C(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (!*(_BYTE *)(a1 + 17))
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 88), &v2);
  while (*(_BYTE *)(a1 + 17));
  if (v2.__owns_)
LABEL_4:
    std::mutex::unlock(v2.__m_);
}

void sub_100017F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
    operator delete(a13);
  sub_1000E095C((uint64_t)&a20);

  _Unwind_Resume(a1);
}

id sub_100018024(_QWORD *a1, id *a2)
{
  id result;

  a1[4] = a2[4];
  a1[5] = a2[5];
  result = objc_retainBlock(a2[6]);
  a1[6] = result;
  return result;
}

uint64_t sub_100018068(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  std::operator+<char>("v", &unk_10041AB68);
  *(_QWORD *)(a1 + 24) = 0;
  v7 = v5;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = objc_alloc_init((Class)NSURLComponents);
  v9 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;

  objc_msgSend(*(id *)(a1 + 24), "setPath:", v6);
  return a1;
}

void sub_1000180F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001810C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);

  _Unwind_Resume(a1);
}

void sub_100018140(id *a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  NSObject *v5;
  unsigned int v6;
  const char *v7;
  NSObject *v8;
  os_log_type_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "settings"));
  v4 = objc_msgSend(v3, "lowPriorityScan");

  if (v4)
  {
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_100404988);
    v5 = (id)qword_100417EE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = objc_msgSend(a1[5], "code");
      v11 = 67109120;
      v12 = v6;
      v7 = "WARNING: wifi scan failed with %d";
      v8 = v5;
      v9 = OS_LOG_TYPE_INFO;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, 8u);
    }
  }
  else
  {
    if (qword_100417ED8 != -1)
      dispatch_once(&qword_100417ED8, &stru_100404988);
    v5 = (id)qword_100417EE0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = objc_msgSend(a1[5], "code");
      v11 = 67109120;
      v12 = v10;
      v7 = "wifi scan failed with %d";
      v8 = v5;
      v9 = OS_LOG_TYPE_ERROR;
      goto LABEL_10;
    }
  }

  objc_msgSend(a1[6], "onQueueHandleScanFailed:forSettings:", a1[5], a1[4]);
  objc_autoreleasePoolPop(v2);
}

void sub_1000182C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000182D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000182E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000186F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  char v4;
  int v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  void *__p[2];
  uint64_t v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 1015) < 0)
    {
      sub_10006CED8(__p, (void *)i[124], i[125]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)i + 62);
      v10 = i[126];
    }
    v4 = HIBYTE(v10);
    if (SHIBYTE(v10) < 0)
    {
      v5 = *(unsigned __int8 *)__p[0];
      if (v5 == 71)
      {
        v6 = *(_QWORD *)(a2 + 8);
        if (v6 < *(_QWORD *)(a2 + 16))
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      v5 = LOBYTE(__p[0]);
      if (LOBYTE(__p[0]) == 71)
      {
        v6 = *(_QWORD *)(a2 + 8);
        if (v6 < *(_QWORD *)(a2 + 16))
          goto LABEL_17;
        goto LABEL_18;
      }
    }
    if (v5 != 76)
    {
      v6 = *(_QWORD *)(a2 + 8);
      if (v6 < *(_QWORD *)(a2 + 16))
      {
        if ((SHIBYTE(v10) & 0x80000000) == 0)
        {
LABEL_17:
          v7 = *(_OWORD *)__p;
          *(_QWORD *)(v6 + 16) = v10;
          *(_OWORD *)v6 = v7;
          goto LABEL_20;
        }
LABEL_19:
        sub_10006CED8((_BYTE *)v6, __p[0], (unint64_t)__p[1]);
LABEL_20:
        v8 = (char *)(v6 + 24);
        *(_QWORD *)(a2 + 8) = v6 + 24;
LABEL_21:
        *(_QWORD *)(a2 + 8) = v8;
        v4 = HIBYTE(v10);
        goto LABEL_22;
      }
LABEL_18:
      v8 = sub_100211128((char **)a2, (uint64_t)__p);
      goto LABEL_21;
    }
LABEL_22:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_10001881C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000FE50C((void **)v14);
    _Unwind_Resume(a1);
  }
  sub_1000FE50C((void **)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100018860(uint64_t a1)
{
  NSObject *v2;
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1004064E8;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100406550);
    v2 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return a1;
    goto LABEL_3;
  }
  v2 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v4 = 134217984;
    v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Creating sensor %p", (uint8_t *)&v4, 0xCu);
  }
  return a1;
}

_QWORD *sub_100018964(_QWORD *a1, uint64_t *a2)
{
  const std::ios_base *v4;
  std::ios_base::fmtflags fmtflags;
  uint64_t rdbuf;
  _BOOL4 has_facet;
  const std::locale::facet *v8;
  std::ios_base *v9;
  std::ios_base::fmtflags v10;
  const std::locale::facet *v11;
  std::locale v13;
  std::locale v14;

  v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  fmtflags = v4->__fmtflags_;
  rdbuf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  has_facet = std::locale::has_facet(&v14, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v14);
  if (!has_facet)
    operator new();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v8 = std::locale::use_facet(&v13, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v10 = v9[1].__fmtflags_;
  if (v10 == -1)
  {
    std::ios_base::getloc(v9);
    v11 = std::locale::use_facet(&v14, &std::ctype<char>::id);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
    std::locale::~locale(&v14);
    v9[1].__fmtflags_ = v10;
  }
  sub_1000348AC((uint64_t)v8, rdbuf, v9, (char)v10, a2);
  std::locale::~locale(&v13);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_100018BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, std::locale a11, std::locale a12)
{
  uint64_t v12;
  int v13;

  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

void sub_100018C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  uint64_t v11;
  int v12;

  std::locale::~locale(&a11);
  *(_DWORD *)(v11 + 8) = v12;
  _Unwind_Resume(a1);
}

void sub_100018E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018EC4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003F3CE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_100018F50(a1, a2);
  return a1;
}

void sub_100018F20(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100018F3C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100018F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPLogEntry.pb.cc", 402);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_12:
      v10 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 4u;
      *(_QWORD *)(a1 + 32) = v10;
      if ((*(_DWORD *)(a2 + 52) & 8) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_QWORD *)(a1 + 24) = v9;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v5 & 8) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_QWORD *)(a1 + 40) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10001904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100019060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10001919C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100019334()
{
  operator delete();
}

void sub_100019364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001937C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_100019394(_QWORD *a1, int a2, char *__s, const char *a4, const char *a5, const char *a6)
{
  void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_DWORD *)a1 = a2;
  v11 = a1 + 1;
  v12 = strlen(__s);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    a1[2] = v13;
    a1[3] = v16 | 0x8000000000000000;
    a1[1] = v14;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 31) = v12;
  v14 = v11;
  if (v12)
LABEL_8:
    memmove(v14, __s, v13);
  *((_BYTE *)v14 + v13) = 0;
  v17 = strlen(a4);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v18 = v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    a1[5] = v18;
    a1[6] = v21 | 0x8000000000000000;
    a1[4] = v19;
    goto LABEL_16;
  }
  *((_BYTE *)a1 + 55) = v17;
  v19 = a1 + 4;
  if (v17)
LABEL_16:
    memmove(v19, a4, v18);
  *((_BYTE *)v19 + v18) = 0;
  v22 = strlen(a5);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v23 = v22;
  if (v22 >= 0x17)
  {
    v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v25 = v22 | 7;
    v26 = v25 + 1;
    v24 = operator new(v25 + 1);
    a1[8] = v23;
    a1[9] = v26 | 0x8000000000000000;
    a1[7] = v24;
    goto LABEL_24;
  }
  *((_BYTE *)a1 + 79) = v22;
  v24 = a1 + 7;
  if (v22)
LABEL_24:
    memmove(v24, a5, v23);
  *((_BYTE *)v24 + v23) = 0;
  v27 = a1 + 10;
  v28 = strlen(a6);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v30 = v28 | 7;
    v31 = v30 + 1;
    v27 = operator new(v30 + 1);
    a1[11] = v29;
    a1[12] = v31 | 0x8000000000000000;
    a1[10] = v27;
  }
  else
  {
    *((_BYTE *)a1 + 103) = v28;
    if (!v28)
      goto LABEL_33;
  }
  memmove(v27, a6, v29);
LABEL_33:
  *((_BYTE *)v27 + v29) = 0;
  return a1;
}

void sub_1000195E8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
  {
    operator delete(*v4);
    if ((v1[55] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[31] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v1[55] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100019700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100019714(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[DarwinDeviceInfo currentDevice](DarwinDeviceInfo, "currentDevice"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "systemName"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "systemVersion"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "machine"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("systemName=%@\nsystemVersion=%@\nhw.machine=%@"), v2, v3, v4));
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "ps_STLString");
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }

}

void sub_1000197E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10001981C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1000199DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100019A38(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_QWORD *)a1 = off_1003F9E78;
  *(_QWORD *)(a1 + 32) = off_1003F9A88;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) &= 0xFCu;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (std::string *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 136) &= 0xF800u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_100077D9C(a1 + 32, a2 + 32);
  std::string::operator=(v4, (const std::string *)(a2 + 64));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_100019AF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  nullsub_22(v2);
  _Unwind_Resume(a1);
}

void sub_100019B18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003F1BE8;
  if ((_QWORD *)qword_10041A9A8 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100019D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_guard_abort(&qword_10041A370);

  _Unwind_Resume(a1);
}

void sub_100019ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100019EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100019EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100019F0C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  std::promise<void> *v3;
  _QWORD v4[2];
  _QWORD block[6];
  std::future<void> v6;
  std::promise<void> v7;

  v4[0] = a1;
  v4[1] = a2;
  v2 = *(id *)(a1 + 32);
  v3 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F71D8;
  block[3] = &unk_1003FC648;
  block[4] = v4;
  block[5] = &v7;
  dispatch_sync(v2, block);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);

}

void sub_100019FB4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_100019FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001A1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001A400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10001A66C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10001A6F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001A704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  void *__dst[2];
  uint64_t v35;
  std::string v36[2];
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE v40[72];
  void *v41[2];
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  char v49;
  void *__p;
  char v51;
  uint64_t v52;

  v10 = *(_QWORD *)(a2 + 8);
  v36[0].__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
  v36[0].__r_.__value_.__l.__size_ = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_1000B347C((uint64_t)&v36[0].__r_.__value_.__r.__words[2], a2 + 16);
  v13 = *(_QWORD *)(a2 + 64);
  v37 = *(_QWORD *)(a2 + 56);
  v38 = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v39 = *(_BYTE *)(a2 + 72);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10006CED8(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v35 = *(_QWORD *)(a3 + 16);
  }
  sub_10000A0BC((uint64_t)v41, v36, (uint64_t)__dst);
  v16 = (std::__shared_weak_count *)operator new(0x38uLL);
  sub_10033FDA4(v16, a4);
  v32 = &v16[1].__vftable;
  v33 = v16;
  v30 = 0;
  v31 = 0;
  v26[0] = off_1003F6498;
  v26[1] = 0;
  v27 = 0;
  v28 = 0;
  v29 &= 0xF0u;
  sub_1000C4418((uint64_t)v40, a1, (uint64_t)v41, (uint64_t)&v32, 4, 2, (uint64_t)v26);
  nullsub_52(v26);
  v17 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  sub_10000CF68((uint64_t)&v52);
  if (v49)
  {
    if (v51 < 0)
      operator delete(__p);
    v49 = 0;
  }
  if (v48 < 0)
  {
    operator delete(v47);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v44 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_33;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v45);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_27:
    if ((v42 & 0x80000000) == 0)
      goto LABEL_28;
LABEL_34:
    operator delete(v41[0]);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_35;
  }
LABEL_33:
  operator delete(v43);
  if (v42 < 0)
    goto LABEL_34;
LABEL_28:
  if ((SHIBYTE(v35) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_35:
  operator delete(__dst[0]);
LABEL_29:
  sub_100073074(v36);
  v23 = sub_1000C0344((uint64_t)v40);
  if (*(char *)(v23 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)a5, *(void **)v23, *(_QWORD *)(v23 + 8));
  }
  else
  {
    v24 = *(_OWORD *)v23;
    *(_QWORD *)(a5 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)a5 = v24;
  }
  return sub_100011D74((uint64_t)v40);
}

void sub_10001A9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_100073074((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10001A9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  nullsub_52(&a10);
  sub_1000E095C((uint64_t)&a17);
  sub_1000E095C((uint64_t)&a15);
  sub_10033FCF8((uint64_t)&a44);
  if (a24 < 0)
    operator delete(__p);
  sub_100073074(&a25);
  _Unwind_Resume(a1);
}

void sub_10001AA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (a23)
  {
    p_shared_owners = (unint64_t *)&a23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10001AA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_100011D74((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_10001AA8C(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "ActivityState");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "cmLogTime", 4, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "startDate", 4, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 24));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "endDate", 4, 4);
  v17 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 32));
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "classification", 12, 5);
  LODWORD(a1) = v19 + sub_10005F738(a1 + 40, a2);
  v20 = v16 + a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v20 + a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10001ACE8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "DataRunSettings");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "scanStrategy", 8, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "refreshPeriodMs", 8, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 12));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "dwellMs", 8, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 16));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "dutyCycle", 4, 4);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 24));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v16 + a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_10001AEF8(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];
  _QWORD v3[7];

  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x3802000000;
  v3[3] = sub_1000BCCD0;
  v3[4] = nullsub_36;
  v3[5] = a1 + 16;
  v3[6] = a2;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_10005D5C0;
  v2[3] = &unk_1003FC408;
  v2[4] = v3;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 48), v2);
  _Block_object_dispose(v3, 8);
}

void sub_10001B24C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001B2D4(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "onQueueHandleScanTimer");

  objc_autoreleasePoolPop(v2);
}

void sub_10001B310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

sqlite3 **sub_10001B320(sqlite3 **a1)
{
  NSObject *v2;
  sqlite3 *v3;
  const char *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v9;
  sqlite3 *v10;
  __int16 v11;
  const char *v12;

  if (!*a1)
    return a1;
  if (qword_100417F08 == -1)
  {
    v2 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    goto LABEL_4;
  }
  dispatch_once(&qword_100417F08, &stru_1003FF920);
  v2 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    v3 = *a1;
    v4 = sqlite3_db_filename(*a1, "main");
    v9 = 134218242;
    v10 = v3;
    v11 = 2080;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closing sqlite handle %p. main = %s", (uint8_t *)&v9, 0x16u);
  }
LABEL_5:
  v5 = sqlite3_close(*a1);
  v6 = v5;
  if (v5)
  {
    sub_10008B9C4(v5, *a1);
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v7 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        return a1;
      goto LABEL_8;
    }
    v7 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      v9 = 67109120;
      LODWORD(v10) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error closing db (error %d)", (uint8_t *)&v9, 8u);
    }
  }
  return a1;
}

void sub_10001B4D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000CDD68(a1);
}

void sub_10001B754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001B788(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "Universal2d");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "x", 4, 1)
     + v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "y", 4, 2);
  LODWORD(a1) = v10 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 16));
  v11 = v9 + a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v11 + a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_10001B8F4(uint64_t a1@<X8>)
{
  uint64_t v2;
  double v3;
  double v4;
  CFAbsoluteTime Current;

  sub_10001B9B8(a1);
  v2 = sub_10003C888();
  *(_DWORD *)(a1 + 52) |= 8u;
  *(_QWORD *)(a1 + 40) = v2;
  v3 = sub_10001BAC8();
  *(_DWORD *)(a1 + 52) |= 2u;
  *(double *)(a1 + 24) = v3;
  v4 = sub_10001BA08();
  *(_DWORD *)(a1 + 52) |= 4u;
  *(double *)(a1 + 32) = v4;
  Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 52) |= 1u;
  *(CFAbsoluteTime *)(a1 + 16) = Current;
}

void sub_10001B968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100051F2C(v1);
  _Unwind_Resume(a1);
}

void sub_10001B97C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100051F2C(v1);
  _Unwind_Resume(a1);
}

void sub_10001B990(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100051F2C(v1);
  _Unwind_Resume(a1);
}

void sub_10001B9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100051F2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B9B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3CE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

void sub_10001B9F4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

double sub_10001BA08()
{
  uint64_t v0;
  double v1;
  uint32_t denom;
  uint32_t numer;
  uint32_t v4;
  unsigned int v5;
  uint32_t v6;
  uint32_t v7;
  mach_timebase_info info;

  v0 = mach_continuous_time();
  v1 = *(double *)&qword_10041A058;
  if (*(double *)&qword_10041A058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v4 = denom;
        denom = numer % denom;
        numer = v4;
      }
      while (denom);
    }
    else
    {
      v4 = info.numer;
    }
    v5 = 1000000000;
    v6 = info.numer / v4;
    do
    {
      v7 = v6;
      v6 = v5;
      v5 = v7 % v5;
    }
    while (v5);
    v1 = (double)(info.numer / v4 / v6) / (double)(0x3B9ACA00 / v6 * (unint64_t)(info.denom / v4));
    *(double *)&qword_10041A058 = v1;
  }
  return v1 * (double)v0;
}

double sub_10001BAC8()
{
  uint64_t v0;
  double v1;
  uint32_t denom;
  uint32_t numer;
  uint32_t v4;
  unsigned int v5;
  uint32_t v6;
  uint32_t v7;
  mach_timebase_info info;

  v0 = mach_absolute_time();
  v1 = *(double *)&qword_10041A058;
  if (*(double *)&qword_10041A058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v4 = denom;
        denom = numer % denom;
        numer = v4;
      }
      while (denom);
    }
    else
    {
      v4 = info.numer;
    }
    v5 = 1000000000;
    v6 = info.numer / v4;
    do
    {
      v7 = v6;
      v6 = v5;
      v5 = v7 % v5;
    }
    while (v5);
    v1 = (double)(info.numer / v4 / v6) / (double)(0x3B9ACA00 / v6 * (unint64_t)(info.denom / v4));
    *(double *)&qword_10041A058 = v1;
  }
  return v1 * (double)v0;
}

void sub_10001BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  std::future<void>::~future((std::future<void> *)(v11 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v11 - 24));

  _Unwind_Resume(a1);
}

void sub_10001BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_10001BED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001C1E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001C214(const void *a1@<X0>, size_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int *a6@<X8>)
{
  NSObject *v12;
  std::string::size_type v13;
  _BYTE *v14;
  unint64_t v15;
  std::string::size_type v16;
  std::string *p_buf;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  std::string::value_type *v21;
  std::string::size_type *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  std::string::value_type v26;
  std::string *v27;
  void *v28;
  char v29;
  int v30;
  time_t v31;
  NSObject *v32;
  std::string::size_type v33;
  void *v34[2];
  char v35;
  std::string v36;
  void *__p;
  _BYTE v38[15];
  char v39;
  void *v40[2];
  char v41;
  _QWORD v42[2];
  std::string __dst;
  std::string buf;

  if (qword_100417ED8 == -1)
  {
    v12 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003F6D68);
    v12 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
  }
  if ((char)a3[23] >= 0)
    v13 = (std::string::size_type)a3;
  else
    v13 = *(_QWORD *)a3;
  LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Writing %zu bytes to %s", (uint8_t *)&buf, 0x16u);
LABEL_7:
  if ((char)a3[23] >= 0)
    v14 = a3;
  else
    v14 = *(_BYTE **)a3;
  v15 = sub_10006CAB4(a3);
  v16 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_buf = (std::string *)operator new(v19 + 1);
    buf.__r_.__value_.__l.__size_ = v16;
    buf.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
  }
  else
  {
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = v15;
    p_buf = &buf;
    if (!v16)
    {
      v18 = &buf;
      goto LABEL_25;
    }
  }
  if (v16 < 0x20 || (unint64_t)((char *)p_buf - v14) < 0x20)
  {
    v21 = v14;
    v18 = p_buf;
  }
  else
  {
    v21 = &v14[v16 & 0xFFFFFFFFFFFFFFE0];
    v18 = (std::string *)((char *)p_buf + (v16 & 0xFFFFFFFFFFFFFFE0));
    v22 = &p_buf->__r_.__value_.__r.__words[2];
    v23 = (__int128 *)(v14 + 16);
    v24 = v16 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 += 4;
      v23 += 2;
      v24 -= 32;
    }
    while (v24);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_25;
  }
  do
  {
    v26 = *v21++;
    v18->__r_.__value_.__s.__data_[0] = v26;
    v18 = (std::string *)((char *)v18 + 1);
  }
  while (v21 != &v14[v16]);
LABEL_25:
  v18->__r_.__value_.__s.__data_[0] = 0;
  sub_1000C1E68(a3, (uint64_t)v34);
  std::operator+<char>(".", v34);
  v27 = std::string::append(&v36, "-%%%%-%%%%-%%%%-%%%%.tmp");
  v28 = (void *)v27->__r_.__value_.__r.__words[0];
  v42[0] = v27->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v42 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
  v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&v38[7] = *(_QWORD *)((char *)v42 + 7);
  __p = v28;
  *(_QWORD *)v38 = v42[0];
  v39 = v29;
  v30 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__dst, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __dst = buf;
  sub_1000675EC(&__dst, (uint64_t)&__p);
  sub_100011E0C((uint64_t)&__dst, 0, (uint64_t)v40);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
LABEL_47:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((v35 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_48;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(__p);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_47;
LABEL_31:
  if ((v35 & 0x80000000) == 0)
    goto LABEL_32;
LABEL_48:
  operator delete(v34[0]);
LABEL_32:
  sub_100068C0C(a6, (uint64_t)v40, 513, 0, 0x1A4u);
  sub_1000C39E4(a6, a1, a2);
  if (*(_BYTE *)a4)
  {
    v31 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)(a4 + 8));
    sub_1000D84E4((uint64_t)v40, v31, 0);
  }
  if (a5 == 1)
    sub_1000C3AD8(a6);
  sub_100009FDC((uint64_t)v40, (uint64_t)a3, 0);
  if (qword_100417ED8 == -1)
  {
    v32 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003F6D68);
    v32 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_42;
  }
  if ((char)a3[23] >= 0)
    v33 = (std::string::size_type)a3;
  else
    v33 = *(_QWORD *)a3;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v33;
  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Writing to %s completed", (uint8_t *)&__dst, 0xCu);
LABEL_42:
  if ((v41 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0)
      return;
LABEL_50:
    operator delete(buf.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v40[0]);
  if (v30 < 0)
    goto LABEL_50;
}

void sub_10001C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a26 < 0)
  {
    operator delete(a21);
    if (a20 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a14 & 0x80000000) == 0)
      {
LABEL_8:
        if ((*(_BYTE *)(v40 - 105) & 0x80) != 0)
          operator delete(*(void **)(v40 - 128));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a9);
      goto LABEL_8;
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_3;
  }
  if ((a14 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_10001C74C(uint64_t a1)
{
  NSObject *v2;
  std::promise<void> *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v8;
  _QWORD block[6];
  std::future<void> v10;
  std::promise<void> v11;

  v2 = *(id *)(a1 + 32);
  v3 = std::promise<void>::promise(&v11);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F2218;
  block[3] = &unk_1003FC648;
  block[4] = &v8;
  block[5] = &v11;
  dispatch_sync(v2, block);
  std::future<void>::get(&v10);
  std::future<void>::~future(&v10);
  std::promise<void>::~promise(&v11);

  sub_1000BEBF4(a1 + 56);
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);

    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_5:

    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10001C880(void *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 48));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 40));

  sub_1000CDD68(a1);
}

void sub_10001C8AC(void *a1)
{
  void *v1;

  sub_1000CDD68(a1);
}

void sub_10001C974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  std::future<void>::~future((std::future<void> *)(v11 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v11 - 24));

  _Unwind_Resume(a1);
}

void sub_10001C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10001CAE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001CB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_1000E095C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10001CB20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001CB30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001CB40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001CE3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001CE8C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  uint8_t buf[16];
  __int128 v14;

  a1[1] = off_1003FE158;
  *a1 = off_1003FE040;
  a1[2] = sub_1000C02DC(*a3);
  if (a2)
  {
    a1[4] = 0;
    a1[3] = a2;
    a1[5] = 0;
    sub_1000C7CF4((uint64_t)(a1 + 7));
    v6 = *a3;
    v7 = operator new(0x100uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = off_1003FE288;
    a1[15] = sub_1000CB9C0((uint64_t)(v7 + 3), v6);
    a1[16] = v7;
    v8 = *a3;
    v9 = operator new(0xA8uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = off_1003FE2D8;
    a1[17] = sub_1000CAE10((uint64_t)(v9 + 3), v8);
    a1[18] = v9;
    sub_1000C02E8(*a3, (uint64_t)buf);
    v10 = (char *)operator new(0x90uLL);
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
    *(_QWORD *)v10 = off_1003FE328;
    sub_1000CA4E4((__n128 *)(v10 + 24), (uint64_t)buf);
    a1[19] = v11;
    a1[20] = v10;
    sub_1000C4AFC((uint64_t)buf);
    sub_1000C64C8();
  }
  sub_1000D5048(buf, "");
  sub_100174738((uint64_t)buf, 0, 0);
  if (SBYTE7(v14) < 0)
    operator delete(*(void **)buf);
  sub_10015AD4C((uint64_t)__p);
}

void sub_10001D560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  if (a24 < 0)
    operator delete(__p);
  sub_10021E170((void ***)&a17);
  sub_10021A6A8(v26 + 184);
  v29 = *(_QWORD *)(v26 + 176);
  *(_QWORD *)(v26 + 176) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  sub_10021A718(a13);
  sub_1000E095C(v26 + 152);
  sub_1000E095C(v26 + 136);
  sub_1000E095C(a14);
  nullsub_26(a15);
  sub_1000E095C(v27);
  _Unwind_Resume(a1);
}

void sub_10001D9F4()
{
  JUMPOUT(0x10001D978);
}

id *sub_10001D9FC(id *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *a1;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v6, "invalidate") & 1) != 0)
          objc_msgSend(v6, "invalidate", (_QWORD)v8);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

  return a1;
}

void sub_10001DB28(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_10001DD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001E290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001E310(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  uint64_t v13;
  __int128 v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t (**v18)();
  _QWORD v19[2];
  char v20;

  v3 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = v3;
  v15 = off_1003F9948;
  v16 = 0u;
  v17 = 0u;
  v20 = 0;
  v18 = off_1003F9928;
  v19[0] = 0;
  *(_QWORD *)((char *)v19 + 6) = 0;
  objc_msgSend(v5, "timestamp");
  sub_1000504A8((uint64_t)&v15, v6);
  objc_msgSend(v5, "timestamp");
  v8 = sub_10004F1AC(v7);
  sub_100060870((uint64_t)&v15, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "startDate"));
  objc_msgSend(v9, "timeIntervalSince1970");
  sub_100050498((uint64_t)&v15, v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v11, "timeIntervalSince1970");
  sub_100071548((uint64_t)&v15, v12);

  *(_QWORD *)&v14 = 0;
  *(_QWORD *)((char *)&v14 + 6) = 0;
  sub_100060878((uint64_t)&v13, (uint64_t)objc_msgSend(v5, "confidence", off_1003F9928, 0, *((_QWORD *)&v14 + 1)));
  sub_1000C72C8((uint64_t)&v13, (char)objc_msgSend(v5, "stationary"));
  sub_1000C72D8((uint64_t)&v13, (char)objc_msgSend(v5, "walking"));
  sub_1000C72E0((uint64_t)&v13, (char)objc_msgSend(v5, "running"));
  sub_1000C72D0((uint64_t)&v13, (char)objc_msgSend(v5, "automotive"));
  sub_100063B48((uint64_t)&v13, (char)objc_msgSend(v5, "unknown"));
  sub_1000CAF78((uint64_t)&v15, (uint64_t)&v13);
  sub_1000C6F10(v4, (uint64_t)&v15);
  nullsub_47(&v13);
  nullsub_54(&v15);

}

void sub_10001E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);

  nullsub_54(va);
  _Unwind_Resume(a1);
}

void sub_10001E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  nullsub_54(va);

  _Unwind_Resume(a1);
}

void sub_10001E4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  nullsub_47(&a9);
  nullsub_54(&a12);

  _Unwind_Resume(a1);
}

void sub_10001E748(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10001E6C4);
}

void sub_10001E75C(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10001E6F4);
}

void sub_10001E810()
{
  JUMPOUT(0x10001E800);
}

void sub_10001E884(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
  {
    sub_10009E290(v2);
    operator delete();
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v3)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_6:
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t sub_10001E93C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10001EBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35)
{
  void *v35;
  uint64_t v36;

  sub_100052B6C(&a35);
  sub_100051F2C(v36 - 120);

  _Unwind_Resume(a1);
}

void sub_10001EEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, ...)
{
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a4);
  if (a4)
    sub_1000A87F4((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_10001F174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001F188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001F198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001F1BC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  *(_QWORD *)a1 = off_1003FED38;
  v2 = *(_QWORD **)(a1 + 200);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    operator delete(v4);
  sub_1000410F4(a1 + 144, *(_QWORD **)(a1 + 160));
  v5 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 120);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v8)
    operator delete(v8);
  *(_QWORD *)a1 = off_1003FED90;
  v9 = (void **)(a1 + 56);
  sub_100039810((_QWORD *)(a1 + 56));
  v10 = *(void ***)(a1 + 64);
  v11 = *(void ***)(a1 + 72);
  if (v10 != v11)
  {
    do
    {
      v12 = *v10++;
      operator delete(v12);
    }
    while (v10 != v11);
    v14 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 72);
    if (v13 != v14)
      *(_QWORD *)(a1 + 72) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v9)
    operator delete(*v9);
  v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 32) = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_10001F560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001F594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10001F5AC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v31;
  int v32;
  int v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t result;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43[2];

  v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_29;
        *(_DWORD *)(a1 + 60) |= 1u;
        v10 = *(_QWORD *)(a1 + 16);
        if (!v10)
          operator new();
        v43[0] = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43))return 0;
        }
        else
        {
          v43[0] = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v18 = *((_DWORD *)this + 14);
        v19 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v18 + 1;
        if (v18 >= v19)
          return 0;
        v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43[0]);
        if (!sub_10001FB08(v10, this, v21, v22) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
        v23 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)this + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 != 18)
          continue;
        *((_QWORD *)this + 1) = v26 + 1;
        *(_DWORD *)(a1 + 60) |= 2u;
        v12 = *(_QWORD *)(a1 + 24);
        if (!v12)
LABEL_41:
          operator new();
LABEL_17:
        v43[0] = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43))return 0;
        }
        else
        {
          v43[0] = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v27 = *((_DWORD *)this + 14);
        v28 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43[0]);
        if (!sub_10001FB08(v12, this, v30, v31) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
        v32 = *((_DWORD *)this + 14);
        v24 = __OFSUB__(v32, 1);
        v33 = v32 - 1;
        if (v33 < 0 == v24)
          *((_DWORD *)this + 14) = v33;
        v35 = (_BYTE *)*((_QWORD *)this + 1);
        v34 = *((_QWORD *)this + 2);
        if ((unint64_t)v35 >= v34 || *v35 != 24)
          continue;
        v15 = v35 + 1;
        *((_QWORD *)this + 1) = v15;
        v43[0] = 0;
        if ((unint64_t)v15 >= v34)
          goto LABEL_56;
LABEL_53:
        if (*v15 < 0)
        {
LABEL_56:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result)
            return result;
          v36 = v43[0];
          if (v43[0] <= 2)
          {
LABEL_55:
            *(_DWORD *)(a1 + 60) |= 4u;
            *(_DWORD *)(a1 + 32) = v36;
            goto LABEL_59;
          }
        }
        else
        {
          v36 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
          if (v36 <= 2)
            goto LABEL_55;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 3, (int)v36);
LABEL_59:
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        v38 = *((_QWORD *)this + 2);
        if ((unint64_t)v39 >= v38 || *v39 != 32)
          continue;
        v17 = v39 + 1;
        *((_QWORD *)this + 1) = v17;
        v43[0] = 0;
        if ((unint64_t)v17 >= v38)
          goto LABEL_65;
LABEL_62:
        if (*v17 < 0)
        {
LABEL_65:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v43);
          if (!(_DWORD)result)
            return result;
          v40 = v43[0];
          if (v43[0] <= 3)
          {
LABEL_64:
            *(_DWORD *)(a1 + 60) |= 8u;
            *(_DWORD *)(a1 + 36) = v40;
            goto LABEL_68;
          }
        }
        else
        {
          v40 = *v17;
          *((_QWORD *)this + 1) = v17 + 1;
          if (v40 <= 3)
            goto LABEL_64;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 4, (int)v40);
LABEL_68:
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v41 >= *((_QWORD *)this + 2) || *v41 != 41)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
LABEL_71:
        *(_QWORD *)(a1 + 40) = *(_QWORD *)v43;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        v42 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v42 >= *((_QWORD *)this + 2) || *v42 != 49)
          continue;
        *((_QWORD *)this + 1) = v42 + 1;
LABEL_74:
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) != 0)
        {
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v43;
          *(_DWORD *)(a1 + 60) |= 0x20u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_29;
        *(_DWORD *)(a1 + 60) |= 2u;
        v12 = *(_QWORD *)(a1 + 24);
        if (v12)
          goto LABEL_17;
        goto LABEL_41;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v15 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        v43[0] = 0;
        if ((unint64_t)v15 >= v14)
          goto LABEL_56;
        goto LABEL_53;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        v43[0] = 0;
        if ((unint64_t)v17 >= v16)
          goto LABEL_65;
        goto LABEL_62;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_29;
        *(_QWORD *)v43 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v43) & 1) == 0)return 0;
        goto LABEL_71;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_29;
        goto LABEL_74;
      default:
        v9 = TagFallback & 7;
LABEL_29:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)return 0;
        continue;
    }
  }
}

void sub_10001FADC()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_10001FB08(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t result;
  unint64_t v14;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v10 = TagFallback & 7;
        if (v10 != 1)
          goto LABEL_28;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_19;
        }
      }
      if (v9 == 2)
        break;
      if (v9 == 3)
      {
        v10 = TagFallback & 7;
        if (v10 == 1)
        {
          v14 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
            return 0;
          goto LABEL_23;
        }
      }
      else
      {
        v10 = TagFallback & 7;
      }
LABEL_28:
      if (v10 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v10 = TagFallback & 7;
    if (v10 != 1)
      goto LABEL_28;
LABEL_19:
    v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 44) |= 2u;
    v12 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 25)
    {
      *((_QWORD *)this + 1) = v12 + 1;
      v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
        return 0;
LABEL_23:
      *(_QWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 44) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

void sub_10001FFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001FFE0(uint64_t a1, _QWORD *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a2)
  {
    sub_10001FFE0(a1, *a2);
    sub_10001FFE0(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    v5 = (std::__shared_weak_count *)a2[5];
    if (!v5)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      operator delete(a2);
    }
    else
    {
LABEL_8:
      operator delete(a2);
    }
  }
}

void sub_10002027C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100020290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000202A4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  unsigned int v2;
  id v3;
  NSObject *v4;
  void **v5;
  id v6;
  NSObject *v7;
  void **v8;
  id v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint8_t v13[32];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  void **v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream(v13);
  v2 = (*(uint64_t (**)(wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a1 + 72))(a1);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13, v2);
  if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToCodedStream(a1, (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13) & 1) == 0)
  {
    v3 = sub_100166708();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a1 + 16))(__p, a1);
      v5 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2081;
      v19 = v5;
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "serialized";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to serialize-append-delimited properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    v6 = sub_100166708();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_signpost_enabled(v7))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a1 + 16))(__p, a1);
      v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289795;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2081;
      v19 = v8;
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "serialized";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to serialize-append-delimited properly", "{\"msg%{public}.0s\":\"Failed to serialize-append-delimited properly\", \"typename\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    v9 = sub_100166708();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, wireless_diagnostics::google::protobuf::MessageLite *))(*(_QWORD *)a1 + 16))(__p, a1);
      sub_100342288((char *)__p, buf, v10);
    }

    abort_report_np("%s:%d: assertion failure in %s", "../../../common/util/protobuf_util.h", 117, "appendDelimited");
    __break(1u);
  }
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v13);
}

void sub_100020544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)va);
  _Unwind_Resume(a1);
}

void sub_100020568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)va);
  _Unwind_Resume(a1);
}

void sub_100020574()
{
  void *v0;

  JUMPOUT(0x10002057CLL);
}

uint64_t sub_100020590(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  const wireless_diagnostics::google::protobuf::UnknownFieldSet *v14;
  uint64_t v15;
  _QWORD *v16;

  if (!*(_BYTE *)(a1 + 60))
  {
    v3 = 0;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 60) & 2) == 0)
      goto LABEL_31;
LABEL_25:
    v10 = *(_QWORD *)(a1 + 48);
    if (v10)
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020724(v10, a2);
      if (v12 < 0x80)
      {
LABEL_27:
        v13 = 1;
LABEL_30:
        v3 += (_DWORD)v12 + v13 + 1;
        goto LABEL_31;
      }
    }
    else
    {
      v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020724(*(_QWORD *)(qword_10041AAF8 + 48), a2);
      if (v12 < 0x80)
        goto LABEL_27;
    }
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, v11);
    goto LABEL_30;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 52);
    if (*(_BYTE *)(v4 + 52))
      goto LABEL_8;
  }
  else
  {
    v4 = *(_QWORD *)(qword_10041AAF8 + 40);
    v5 = *(unsigned __int8 *)(v4 + 52);
    if (*(_BYTE *)(v4 + 52))
    {
LABEL_8:
      v6 = (v5 << 31 >> 31) & 9;
      if ((v5 & 2) != 0)
        v6 += 9;
      if ((v5 & 4) != 0)
        v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v6 + 9);
      else
        v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v6;
      if ((v5 & 8) != 0)
        v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(v7
                                                                             + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v4 + 40), (unint64_t)a2)+ 1);
      v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
      v9 = *(_QWORD **)(v4 + 8);
      if (!v9)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  v7 = 0;
  v8 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v4 + 8);
  v9 = *(_QWORD **)(v4 + 8);
  if (v9)
  {
LABEL_19:
    if (*v9 != v9[1])
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v8, a2)+ v7);
  }
LABEL_21:
  *(_DWORD *)(v4 + 48) = (_DWORD)v7;
  if (v7 < 0x80)
  {
    v3 = (_DWORD)v7 + 2;
    if ((*(_DWORD *)(a1 + 60) & 2) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  v3 = (_DWORD)v7
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2)
     + 1;
  if ((*(_DWORD *)(a1 + 60) & 2) != 0)
    goto LABEL_25;
LABEL_31:
  v15 = wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8))
      + v3;
  v16 = *(_QWORD **)(a1 + 32);
  if (v16 && *v16 != v16[1])
    v15 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 32), v14)+ v15;
  *(_DWORD *)(a1 + 56) = v15;
  return v15;
}

uint64_t sub_100020724(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  uint64_t v24;

  LOBYTE(v3) = *(_BYTE *)(a1 + 76);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_25;
    goto LABEL_56;
  }
  if ((*(_BYTE *)(a1 + 76) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 76) & 2) == 0)
      goto LABEL_19;
LABEL_13:
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001252FC(v9, a2);
      if (v10 < 0x80)
      {
LABEL_15:
        v11 = 1;
LABEL_18:
        v4 = (v4 + (_DWORD)v10 + v11 + 1);
        v3 = *(_DWORD *)(a1 + 76);
        goto LABEL_19;
      }
    }
    else
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001252FC(*(_QWORD *)(qword_10041A8F0 + 24), a2);
      if (v10 < 0x80)
        goto LABEL_15;
    }
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001239C8(v7, a2);
    if (v8 < 0x80)
      goto LABEL_9;
LABEL_12:
    v4 = v8
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 2) == 0)
      goto LABEL_19;
    goto LABEL_13;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001239C8(*(_QWORD *)(qword_10041A8F0 + 16), a2);
  if (v8 >= 0x80)
    goto LABEL_12;
LABEL_9:
  v4 = ((_DWORD)v8 + 2);
  v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 2) != 0)
    goto LABEL_13;
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100129640(v13, a2);
      if (v14 < 0x80)
        goto LABEL_28;
    }
    else
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100129640(*(_QWORD *)(qword_10041A8F0 + 32), a2);
      if (v14 < 0x80)
      {
LABEL_28:
        v4 = (v4 + (_DWORD)v14 + 3);
        v3 = *(_DWORD *)(a1 + 76);
        if ((v3 & 8) != 0)
          goto LABEL_32;
LABEL_21:
        if ((v3 & 0x10) == 0)
          goto LABEL_22;
LABEL_38:
        v17 = *(_QWORD *)(a1 + 48);
        if (v17)
        {
          v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C0D6C(v17, a2);
          if (v18 < 0x80)
            goto LABEL_40;
        }
        else
        {
          v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000C0D6C(*(_QWORD *)(qword_10041A8F0 + 48), a2);
          if (v18 < 0x80)
          {
LABEL_40:
            v4 = (v4 + (_DWORD)v18 + 3);
            v3 = *(_DWORD *)(a1 + 76);
            if ((v3 & 0x20) != 0)
              goto LABEL_44;
LABEL_23:
            if ((v3 & 0x40) == 0)
              goto LABEL_24;
LABEL_50:
            v21 = *(_QWORD *)(a1 + 64);
            if (v21)
            {
              v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020C78(v21, a2);
              if (v22 < 0x80)
              {
LABEL_52:
                v23 = 1;
                goto LABEL_55;
              }
            }
            else
            {
              v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020C78(*(_QWORD *)(qword_10041A8F0 + 64), a2);
              if (v22 < 0x80)
                goto LABEL_52;
            }
            v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
LABEL_55:
            v4 = (v4 + (_DWORD)v22 + v23 + 2);
            v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
            v6 = *(_QWORD **)(a1 + 8);
            if (!v6)
              goto LABEL_25;
            goto LABEL_56;
          }
        }
        v4 = (_DWORD)v4
           + (_DWORD)v18
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2)+ 2;
        v3 = *(_DWORD *)(a1 + 76);
        if ((v3 & 0x20) != 0)
          goto LABEL_44;
        goto LABEL_23;
      }
    }
    v4 = (_DWORD)v4
       + (_DWORD)v14
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2)+ 2;
    v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 8) != 0)
      goto LABEL_32;
    goto LABEL_21;
  }
  if ((v3 & 8) == 0)
    goto LABEL_21;
LABEL_32:
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020A8C(v15, a2);
    if (v16 < 0x80)
      goto LABEL_34;
LABEL_37:
    v4 = (_DWORD)v4
       + (_DWORD)v16
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2)+ 2;
    v3 = *(_DWORD *)(a1 + 76);
    if ((v3 & 0x10) != 0)
      goto LABEL_38;
    goto LABEL_22;
  }
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100020A8C(*(_QWORD *)(qword_10041A8F0 + 40), a2);
  if (v16 >= 0x80)
    goto LABEL_37;
LABEL_34:
  v4 = (v4 + (_DWORD)v16 + 3);
  v3 = *(_DWORD *)(a1 + 76);
  if ((v3 & 0x10) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v3 & 0x20) == 0)
    goto LABEL_23;
LABEL_44:
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
  {
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100100FDC(v19, a2);
    if (v20 < 0x80)
      goto LABEL_46;
LABEL_49:
    v4 = (_DWORD)v4
       + (_DWORD)v20
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)+ 2;
    if ((*(_DWORD *)(a1 + 76) & 0x40) != 0)
      goto LABEL_50;
    goto LABEL_24;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100100FDC(*(_QWORD *)(qword_10041A8F0 + 56), a2);
  if (v20 >= 0x80)
    goto LABEL_49;
LABEL_46:
  v4 = (v4 + (_DWORD)v20 + 3);
  if ((*(_DWORD *)(a1 + 76) & 0x40) != 0)
    goto LABEL_50;
LABEL_24:
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
  {
LABEL_25:
    *(_DWORD *)(a1 + 72) = v4;
    return v4;
  }
LABEL_56:
  if (*v6 == v6[1])
    goto LABEL_25;
  v24 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 72) = v24;
  return v24;
}

uint64_t sub_100020A8C(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v5;
  _QWORD *v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  uint64_t v17;

  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_23;
    goto LABEL_36;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      goto LABEL_20;
LABEL_14:
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010CA08(v8, a2);
      if (v9 < 0x80)
      {
LABEL_16:
        v10 = 1;
LABEL_19:
        v4 = (v4 + (_DWORD)v9 + v10 + 1);
        v3 = *(_DWORD *)(a1 + 48);
        goto LABEL_20;
      }
    }
    else
    {
      v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10010CA08(*(_QWORD *)(qword_10041AA40 + 16), a2);
      if (v9 < 0x80)
        goto LABEL_16;
    }
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
    goto LABEL_19;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v7 & 0x80000000) != 0)
  {
    v4 = 11;
    if ((v3 & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    if (v7 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2)+ 1;
      v3 = *(_DWORD *)(a1 + 48);
      if ((v3 & 2) == 0)
        goto LABEL_20;
      goto LABEL_14;
    }
    v4 = 2;
    if ((v3 & 2) != 0)
      goto LABEL_14;
  }
LABEL_20:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_22;
LABEL_30:
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100115FFC(v14, a2);
      if (v15 < 0x80)
      {
LABEL_32:
        v16 = 1;
        goto LABEL_35;
      }
    }
    else
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100115FFC(*(_QWORD *)(qword_10041AA40 + 32), a2);
      if (v15 < 0x80)
        goto LABEL_32;
    }
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
LABEL_35:
    v4 = (v4 + (_DWORD)v15 + v16 + 1);
    v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    if (!v6)
      goto LABEL_23;
    goto LABEL_36;
  }
  v12 = *(_QWORD *)(a1 + 24);
  if (v12)
  {
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001125FC(v12, a2);
    if (v13 < 0x80)
      goto LABEL_26;
LABEL_29:
    v4 = (_DWORD)v4
       + (_DWORD)v13
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2)+ 1;
    if ((*(_DWORD *)(a1 + 48) & 8) != 0)
      goto LABEL_30;
    goto LABEL_22;
  }
  v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001125FC(*(_QWORD *)(qword_10041AA40 + 24), a2);
  if (v13 >= 0x80)
    goto LABEL_29;
LABEL_26:
  v4 = (v4 + (_DWORD)v13 + 2);
  if ((*(_DWORD *)(a1 + 48) & 8) != 0)
    goto LABEL_30;
LABEL_22:
  v5 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 8);
  if (!v6)
  {
LABEL_23:
    *(_DWORD *)(a1 + 44) = v4;
    return v4;
  }
LABEL_36:
  if (*v6 == v6[1])
    goto LABEL_23;
  v17 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v5, a2)
      + v4;
  *(_DWORD *)(a1 + 44) = v17;
  return v17;
}

uint64_t sub_100020C78(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v10;
  _QWORD *v11;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  uint64_t v28;

  v3 = *(_DWORD *)(a1 + 92);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    if ((v3 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_19;
LABEL_13:
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011A48C(v7, a2);
      if (v8 < 0x80)
      {
LABEL_15:
        v9 = 1;
LABEL_18:
        v4 = (v4 + (_DWORD)v8 + v9 + 1);
        v3 = *(_DWORD *)(a1 + 92);
        goto LABEL_19;
      }
    }
    else
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011A48C(*(_QWORD *)(qword_10041A998 + 24), a2);
      if (v8 < 0x80)
        goto LABEL_15;
    }
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2);
    goto LABEL_18;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000210BC(v5, a2);
    if (v6 < 0x80)
      goto LABEL_9;
LABEL_12:
    v4 = v6
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 2) == 0)
      goto LABEL_19;
    goto LABEL_13;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1000210BC(*(_QWORD *)(qword_10041A998 + 16), a2);
  if (v6 >= 0x80)
    goto LABEL_12;
LABEL_9:
  v4 = ((_DWORD)v6 + 2);
  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 2) != 0)
    goto LABEL_13;
LABEL_19:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011AF94(v13, a2);
      if (v14 < 0x80)
        goto LABEL_30;
    }
    else
    {
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011AF94(*(_QWORD *)(qword_10041A998 + 32), a2);
      if (v14 < 0x80)
      {
LABEL_30:
        v4 = (v4 + (_DWORD)v14 + 2);
        v3 = *(_DWORD *)(a1 + 92);
        if ((v3 & 8) != 0)
          goto LABEL_34;
LABEL_21:
        if ((v3 & 0x10) == 0)
          goto LABEL_22;
LABEL_40:
        v17 = *(_QWORD *)(a1 + 48);
        if (v17)
        {
          v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011E228(v17, a2);
          if (v18 < 0x80)
            goto LABEL_42;
        }
        else
        {
          v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011E228(*(_QWORD *)(qword_10041A998 + 48), a2);
          if (v18 < 0x80)
          {
LABEL_42:
            v4 = (v4 + (_DWORD)v18 + 2);
            v3 = *(_DWORD *)(a1 + 92);
            if ((v3 & 0x20) != 0)
              goto LABEL_46;
LABEL_23:
            if ((v3 & 0x40) == 0)
              goto LABEL_24;
LABEL_52:
            v21 = *(_QWORD *)(a1 + 64);
            if (v21)
            {
              v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011F444(v21, a2);
              if (v22 < 0x80)
                goto LABEL_54;
            }
            else
            {
              v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011F444(*(_QWORD *)(qword_10041A998 + 64), a2);
              if (v22 < 0x80)
              {
LABEL_54:
                v4 = (v4 + (_DWORD)v22 + 2);
                v3 = *(_DWORD *)(a1 + 92);
                if ((v3 & 0x80) != 0)
                  goto LABEL_58;
LABEL_25:
                if ((v3 & 0x100) == 0)
                  goto LABEL_26;
LABEL_64:
                v25 = *(_QWORD *)(a1 + 80);
                if (v25)
                {
                  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001205A4(v25, a2);
                  if (v26 < 0x80)
                  {
LABEL_66:
                    v27 = 1;
                    goto LABEL_69;
                  }
                }
                else
                {
                  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1001205A4(*(_QWORD *)(qword_10041A998 + 80), a2);
                  if (v26 < 0x80)
                    goto LABEL_66;
                }
                v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
LABEL_69:
                v4 = (v4 + (_DWORD)v26 + v27 + 1);
                v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
                v11 = *(_QWORD **)(a1 + 8);
                if (!v11)
                  goto LABEL_27;
                goto LABEL_70;
              }
            }
            v4 = (_DWORD)v4
               + (_DWORD)v22
               + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2)+ 1;
            v3 = *(_DWORD *)(a1 + 92);
            if ((v3 & 0x80) != 0)
              goto LABEL_58;
            goto LABEL_25;
          }
        }
        v4 = (_DWORD)v4
           + (_DWORD)v18
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2)+ 1;
        v3 = *(_DWORD *)(a1 + 92);
        if ((v3 & 0x20) != 0)
          goto LABEL_46;
        goto LABEL_23;
      }
    }
    v4 = (_DWORD)v4
       + (_DWORD)v14
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 8) != 0)
      goto LABEL_34;
    goto LABEL_21;
  }
  if ((v3 & 8) == 0)
    goto LABEL_21;
LABEL_34:
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
  {
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011CF88(v15, a2);
    if (v16 < 0x80)
      goto LABEL_36;
LABEL_39:
    v4 = (_DWORD)v4
       + (_DWORD)v16
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 0x10) != 0)
      goto LABEL_40;
    goto LABEL_22;
  }
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011CF88(*(_QWORD *)(qword_10041A998 + 40), a2);
  if (v16 >= 0x80)
    goto LABEL_39;
LABEL_36:
  v4 = (v4 + (_DWORD)v16 + 2);
  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x10) != 0)
    goto LABEL_40;
LABEL_22:
  if ((v3 & 0x20) == 0)
    goto LABEL_23;
LABEL_46:
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
  {
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011EB6C(v19, a2);
    if (v20 < 0x80)
      goto LABEL_48;
LABEL_51:
    v4 = (_DWORD)v4
       + (_DWORD)v20
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2)+ 1;
    v3 = *(_DWORD *)(a1 + 92);
    if ((v3 & 0x40) != 0)
      goto LABEL_52;
    goto LABEL_24;
  }
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011EB6C(*(_QWORD *)(qword_10041A998 + 56), a2);
  if (v20 >= 0x80)
    goto LABEL_51;
LABEL_48:
  v4 = (v4 + (_DWORD)v20 + 2);
  v3 = *(_DWORD *)(a1 + 92);
  if ((v3 & 0x40) != 0)
    goto LABEL_52;
LABEL_24:
  if ((v3 & 0x80) == 0)
    goto LABEL_25;
LABEL_58:
  v23 = *(_QWORD *)(a1 + 72);
  if (v23)
  {
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011FCF4(v23, a2);
    if (v24 < 0x80)
      goto LABEL_60;
LABEL_63:
    v4 = (_DWORD)v4
       + (_DWORD)v24
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2)+ 1;
    if ((*(_DWORD *)(a1 + 92) & 0x100) != 0)
      goto LABEL_64;
    goto LABEL_26;
  }
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10011FCF4(*(_QWORD *)(qword_10041A998 + 72), a2);
  if (v24 >= 0x80)
    goto LABEL_63;
LABEL_60:
  v4 = (v4 + (_DWORD)v24 + 2);
  if ((*(_DWORD *)(a1 + 92) & 0x100) != 0)
    goto LABEL_64;
LABEL_26:
  v10 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v11 = *(_QWORD **)(a1 + 8);
  if (!v11)
  {
LABEL_27:
    *(_DWORD *)(a1 + 88) = v4;
    return v4;
  }
LABEL_70:
  if (*v11 == v11[1])
    goto LABEL_27;
  v28 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v10, a2)
      + v4;
  *(_DWORD *)(a1 + 88) = v28;
  return v28;
}

uint64_t sub_1000210BC(uint64_t a1, const wireless_diagnostics::google::protobuf::UnknownFieldSet *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v6;
  _QWORD *v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v13;
  _QWORD *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  uint64_t v16;
  int v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  wireless_diagnostics::google::protobuf::internal::WireFormat *v20;
  _QWORD *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  LOBYTE(v3) = *(_BYTE *)(a1 + 60);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      v4 = 0;
      if ((*(_BYTE *)(a1 + 60) & 2) == 0)
        goto LABEL_42;
LABEL_25:
      v16 = *(_QWORD *)(a1 + 24);
      if (v16)
      {
        v17 = *(unsigned __int8 *)(v16 + 44);
        if (*(_BYTE *)(v16 + 44))
          goto LABEL_27;
      }
      else
      {
        v16 = *(_QWORD *)(qword_10041A9A8 + 24);
        v17 = *(unsigned __int8 *)(v16 + 44);
        if (*(_BYTE *)(v16 + 44))
        {
LABEL_27:
          v18 = (v17 << 31 >> 31) & 9;
          if ((v17 & 2) != 0)
            v18 += 9;
          if ((v17 & 4) != 0)
            LODWORD(v19) = v18 + 9;
          else
            LODWORD(v19) = v18;
          v20 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v16 + 8);
          v21 = *(_QWORD **)(v16 + 8);
          if (!v21)
            goto LABEL_39;
LABEL_36:
          if (*v21 != v21[1])
          {
            v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v20, a2)+ v19);
            *(_DWORD *)(v16 + 40) = (_DWORD)v19;
            if (v19 >= 0x80)
              v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
            else
              v22 = 1;
            goto LABEL_41;
          }
LABEL_39:
          *(_DWORD *)(v16 + 40) = (_DWORD)v19;
          v22 = 1;
LABEL_41:
          v4 += (_DWORD)v19 + v22 + 1;
          v3 = *(_DWORD *)(a1 + 60);
          goto LABEL_42;
        }
      }
      LODWORD(v19) = 0;
      v20 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v16 + 8);
      v21 = *(_QWORD **)(v16 + 8);
      if (!v21)
        goto LABEL_39;
      goto LABEL_36;
    }
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(v9 + 44);
      if (*(_BYTE *)(v9 + 44))
        goto LABEL_9;
    }
    else
    {
      v9 = *(_QWORD *)(qword_10041A9A8 + 16);
      v10 = *(unsigned __int8 *)(v9 + 44);
      if (*(_BYTE *)(v9 + 44))
      {
LABEL_9:
        v11 = (v10 << 31 >> 31) & 9;
        if ((v10 & 2) != 0)
          v11 += 9;
        if ((v10 & 4) != 0)
          v12 = v11 + 9;
        else
          v12 = v11;
        v13 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v9 + 8);
        v14 = *(_QWORD **)(v9 + 8);
        if (!v14)
          goto LABEL_22;
        goto LABEL_18;
      }
    }
    v12 = 0;
    v13 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(v9 + 8);
    v14 = *(_QWORD **)(v9 + 8);
    if (!v14)
      goto LABEL_22;
LABEL_18:
    if (*v14 != v14[1])
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)(wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v13, a2)+ v12);
      *(_DWORD *)(v9 + 40) = (_DWORD)v15;
      if (v15 >= 0x80)
      {
        v4 = (_DWORD)v15
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2)
           + 1;
        v3 = *(_DWORD *)(a1 + 60);
        if ((v3 & 2) == 0)
          goto LABEL_42;
        goto LABEL_25;
      }
      v4 = (_DWORD)v15 + 2;
      v3 = *(_DWORD *)(a1 + 60);
      if ((v3 & 2) != 0)
        goto LABEL_25;
LABEL_42:
      if ((v3 & 4) != 0)
      {
        v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
        if ((v23 & 0x80000000) != 0)
        {
          v4 += 11;
          if ((v3 & 8) == 0)
            goto LABEL_58;
        }
        else if (v23 >= 0x80)
        {
          v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
          v3 = *(_DWORD *)(a1 + 60);
          v4 += v24 + 1;
          if ((v3 & 8) == 0)
            goto LABEL_58;
        }
        else
        {
          v4 += 2;
          if ((v3 & 8) == 0)
            goto LABEL_58;
        }
      }
      else if ((v3 & 8) == 0)
      {
        goto LABEL_58;
      }
      v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 36);
      if ((v25 & 0x80000000) != 0)
      {
        v26 = 11;
      }
      else if (v25 >= 0x80)
      {
        v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2)
            + 1;
        v3 = *(_DWORD *)(a1 + 60);
      }
      else
      {
        v26 = 2;
      }
      v4 += v26;
LABEL_58:
      v27 = v4 + 9;
      if ((v3 & 0x10) == 0)
        v27 = v4;
      if ((v3 & 0x20) != 0)
        v5 = v27 + 9;
      else
        v5 = v27;
      v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
      v7 = *(_QWORD **)(a1 + 8);
      if (!v7)
        goto LABEL_6;
      goto LABEL_64;
    }
LABEL_22:
    *(_DWORD *)(v9 + 40) = v12;
    v4 = v12 + 2;
    v3 = *(_DWORD *)(a1 + 60);
    if ((v3 & 2) != 0)
      goto LABEL_25;
    goto LABEL_42;
  }
  v5 = 0;
  v6 = (wireless_diagnostics::google::protobuf::internal::WireFormat *)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 8);
  if (!v7)
  {
LABEL_6:
    *(_DWORD *)(a1 + 56) = v5;
    return v5;
  }
LABEL_64:
  if (*v7 == v7[1])
    goto LABEL_6;
  v28 = wireless_diagnostics::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(v6, a2)
      + v5;
  *(_DWORD *)(a1 + 56) = v28;
  return v28;
}

void sub_1000216D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002171C(const std::chrono::system_clock::time_point *a1)
{
  time_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = std::chrono::system_clock::to_time_t(a1);
  v2 = 1000000 * v1;
  if (1000000 * v1 != 0x8000000000000000)
    v2 = 1000000 * v1 + 210866803200000000;
  v3 = v2;
  operator new();
}

void sub_100021A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 208));
  _Unwind_Resume(a1);
}

void sub_100021A60(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  sub_1000FE50C((void **)(v1 - 200));
  sub_1000FE50C((void **)va);
  sub_10018EBA8(v1 - 176);
  operator delete();
}

void sub_100021AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  std::locale::~locale((std::locale *)&a9);
  sub_1000FC6DC((uint64_t)&a10);
  std::locale::~locale((std::locale *)(v10 - 208));
  _Unwind_Resume(a1);
}

void sub_100021AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_100021AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  std::locale::~locale((std::locale *)(v2 - 208));
  _Unwind_Resume(a1);
}

void sub_100021B18(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  int64_t v8;
  std::chrono::system_clock::time_point v9;
  unint64_t *v10;
  unint64_t v11;
  char __p[21];
  char v13;
  std::string v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[192];
  uint64_t (**v18)();
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t (**v23)();
  _QWORD *v24;
  _QWORD v25[4];
  _QWORD v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  std::string v33[2];
  __int128 v34;
  _QWORD v35[2];
  std::string __dst;

  v8 = sub_10005F0F0();
  v9.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1003F64D8;
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, 28);
  memset(&v17[32], 0, 153);
  v18 = off_1003F6498;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v25, 0, sizeof(v25));
  v23 = off_1003F64B8;
  v24 = v25;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v26[2] = 0;
  v26[3] = 0;
  *(_QWORD *)((char *)v26 + 5) = 0;
  v26[0] = 0;
  v32 = 1;
  v31 = 0;
  sub_1000CA3BC((uint64_t)&v14, 4);
  sub_1000719AC((uint64_t)&v14, (const std::string *)(a1 + 8));
  sub_1000CA438((uint64_t)&v14, a2);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 32))(v33, a3);
  sub_1000CA430((uint64_t)&v14, v33);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  sub_1000CA464((uint64_t)&v14, *(_DWORD *)a1);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 24))(v33, a3);
  sub_1000CA390((uint64_t)&v14, v33);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 40))(v33, a3);
  sub_1000CA3B4((uint64_t)&v14, v33);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  sub_1000CA374((uint64_t)&v14, v8 / 1000000);
  sub_1000CA3A0((uint64_t)&v14, v8);
  sub_1000CA37C((uint64_t)&v14, 1000 * v9.__d_.__rep_);
  sub_1000CA428(&v14, a2 + 2);
  sub_1000CA398(&v14, a2 + 1);
  v31 |= 0x400u;
  sub_1000CA440((uint64_t)&v14, a4);
  sub_100012C4C((uint64_t)v33, (uint64_t)&a2[5].__r_.__value_.__r.__words[2]);
  sub_1000CA3D0((uint64_t)&v14, (uint64_t)v33);
  sub_10000CF68((uint64_t)v33);
  v13 = 20;
  strcpy(__p, "datarun_metadata.bin");
  if (*(char *)(a1 + 55) < 0)
    sub_10006CED8(&__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __dst = *(std::string *)(a1 + 32);
  sub_1000675EC(&__dst, (uint64_t)__p);
  sub_10006821C(0, v33);
  sub_100067DEC((uint64_t)&__dst, (uint64_t)v33, 0, (uint64_t)v35);
  if (SHIBYTE(v33[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33[0].__r_.__value_.__l.__data_);
  sub_100067938((uint64_t)v35, 52, 7, &v34);
  *(_OWORD *)&v33[0].__r_.__value_.__l.__data_ = v34;
  if (*((_QWORD *)&v34 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_1000C5CE8();
}

void sub_100022094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    if (a2 != 1)
      goto LABEL_11;
  }
  else if (a2 != 1)
  {
LABEL_11:
    sub_100172368(&a15);
    _Unwind_Resume(a1);
  }
  v18 = __cxa_begin_catch(a1);
  if (qword_100417ED8 == -1)
  {
    v19 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      __cxa_end_catch();
      JUMPOUT(0x100022054);
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100405E68);
    v19 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
  }
  v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
  *(_DWORD *)(v15 - 96) = 136315138;
  *(_QWORD *)(v15 - 92) = v20;
  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Somehow we failed to convert our metadata into a thrift file. %s", (uint8_t *)(v15 - 96), 0xCu);
  goto LABEL_8;
}

void sub_10002229C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  id *v9;
  id *v10;
  id *v11;
  uint64_t *v12;
  id *v13;
  os_activity_scope_state_s state;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "objectAtIndexedSubscript:", a2));

  v5 = objc_autoreleasePoolPush();
  os_activity_scope_enter(*(os_activity_t *)(a1 + 40), &state);
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_msgSend(v6, "initiateScanOnDevice:withSettings:deviceNumber:", v4, *(_QWORD *)(a1 + 48), a2);
    v7 = *(uint64_t **)(a1 + 56);
    v8 = *v7;
    if (a2 < (v7[1] - *v7) >> 3)
      goto LABEL_3;
LABEL_9:
    sub_1001E2FA0();
  }
  v13 = 0;
  v12 = *(uint64_t **)(a1 + 56);
  v8 = *v12;
  if (a2 >= (v12[1] - *v12) >> 3)
    goto LABEL_9;
LABEL_3:
  v9 = v13;
  v13 = 0;
  v10 = *(id **)(v8 + 8 * a2);
  *(_QWORD *)(v8 + 8 * a2) = v9;
  if (v10)
  {
    sub_100049E84(v10);
    operator delete();
  }
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    sub_100049E84(v11);
    operator delete();
  }
  os_activity_scope_leave(&state);
  objc_autoreleasePoolPop(v5);
}

void sub_1000223B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10)
{
  if (a10)
    sub_100344A10(a10);
  _Unwind_Resume(exception_object);
}

void sub_1000225D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100022650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  int v18;
  double v19;
  double v20;
  std::chrono::system_clock::time_point v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char __p[20];
  char v30;
  std::string __str;
  _QWORD v32[5];
  uint64_t v33;
  uint64_t v34;
  int v35;

  sub_100016654(v32);
  v6 = v35 | 2;
  v35 |= 2u;
  v7 = v34;
  if (!v34)
    operator new();
  v35 = v6 | 1;
  v8 = v33;
  if (!v33)
    operator new();
  *(_DWORD *)(v34 + 76) |= 0x10u;
  v9 = *(_QWORD *)(v7 + 48);
  if (!v9)
    operator new();
  *(_DWORD *)(v9 + 84) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
    operator new();
  *(_DWORD *)(v10 + 76) |= 0x40u;
  v11 = *(_QWORD *)(v10 + 64);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 28) |= 1u;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    operator new();
  v13 = *(_DWORD *)(v10 + 76) | 1;
  *(_DWORD *)(v10 + 76) = v13;
  v14 = *(_QWORD *)(v10 + 16);
  if (!v14)
    operator new();
  *(_DWORD *)(v10 + 52) = 2;
  *(_DWORD *)(v10 + 76) = v13 | 0x84;
  v15 = *(std::string **)(v10 + 24);
  if (v15 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v15, (const std::string *)(a1 + 8));
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(&__str, a2);
  *(_DWORD *)(v10 + 76) |= 8u;
  v16 = *(std::string **)(v10 + 32);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v16, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&__str, a2);
  *(_DWORD *)(v10 + 76) |= 0x10u;
  v17 = *(std::string **)(v10 + 40);
  if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
    operator new();
  std::string::operator=(v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v18 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(v10 + 76) |= 2u;
  *(_DWORD *)(v10 + 48) = v18;
  v19 = sub_10001BAC8();
  *(_DWORD *)(v14 + 52) |= 2u;
  *(double *)(v14 + 24) = v19;
  v20 = sub_10001BA08();
  *(_DWORD *)(v14 + 52) |= 4u;
  *(double *)(v14 + 32) = v20;
  v21.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  *(_DWORD *)(v14 + 52) |= 1u;
  *(double *)(v14 + 16) = (double)(1000 * v21.__d_.__rep_) / 1000000000.0 + -978307200.0;
  v22 = sub_10005F0F0();
  *(_DWORD *)(v14 + 52) |= 8u;
  *(_QWORD *)(v14 + 40) = v22;
  v23 = *(_DWORD *)(v12 + 40);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(a3 + 16);
  v24 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(v12 + 40) = v23 | 0xC;
  *(_QWORD *)(v12 + 24) = v24;
  v25 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(v12 + 40) = v23 | 0xE;
  *(_DWORD *)(v12 + 20) = v25;
  v26 = sub_1000C8394(*(_DWORD *)(a3 + 8));
  *(_DWORD *)(v12 + 40) |= 1u;
  *(_DWORD *)(v12 + 16) = v26;
  v27 = *(_DWORD *)(v8 + 52);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v14 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v14 + 32);
  v28 = *(_QWORD *)(v14 + 40);
  *(_DWORD *)(v8 + 52) = v27 | 0xF;
  *(_QWORD *)(v8 + 40) = v28;
  v30 = 19;
  strcpy(__p, "datarun_metadata.pb");
  if (*(char *)(a1 + 55) < 0)
    sub_10006CED8(&__str, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __str = *(std::string *)(a1 + 32);
  sub_1000675EC(&__str, (uint64_t)__p);
  sub_10000D7B0((uint64_t)v32, (uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v30 < 0)
LABEL_32:
      operator delete(*(void **)__p);
  }
  else if (v30 < 0)
  {
    goto LABEL_32;
  }
  sub_100026CE8(v32);
}

void sub_100022B58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t buf, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  NSObject *v24;

  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_begin_catch(a1);
    if (qword_100417ED8 == -1)
    {
LABEL_3:
      v24 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_5:
        __cxa_end_catch();
        JUMPOUT(0x100022B34);
      }
LABEL_4:
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Exception writing protobuf metadata", (uint8_t *)&buf, 2u);
      goto LABEL_5;
    }
  }
  else
  {
    __cxa_begin_catch(a1);
    if (qword_100417ED8 == -1)
      goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_100405E68);
  v24 = qword_100417EE0;
  if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    goto LABEL_5;
  goto LABEL_4;
}

void sub_100022D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100026CE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100022D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100026CE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100022D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100026CE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100022D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100026CE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100022DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_100026CE8(&a20);
    _Unwind_Resume(a1);
  }
  sub_100026CE8(&a20);
  _Unwind_Resume(a1);
}

id sub_100022DE8(void *a1)
{
  id v1;
  void *v2;
  id v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  id v8;
  const char *v9;
  size_t v10;
  std::string::size_type v11;
  std::string *v12;
  void *v13;
  const std::string::value_type *v14;
  const std::string::value_type *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  std::string *v21;
  void *v22;
  void **v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  std::string __dst;
  unsigned int v37;
  std::string v38;
  std::string v39;

  v1 = a1;
  v2 = v1;
  memset(&v39, 0, sizeof(v39));
  memset(&v38, 0, sizeof(v38));
  v37 = 0;
  if (v1)
  {
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "scheme")));
    v4 = (const char *)objc_msgSend(v3, "UTF8String");
    v5 = strlen(v4);
    if (v5 > 0x7FFFFFFFFFFFFFF7)
      sub_1000CDE30();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v28 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v28 = v5 | 7;
      v29 = v28 + 1;
      p_dst = (std::string *)operator new(v28 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_6;
LABEL_39:
        operator delete(v39.__r_.__value_.__l.__data_);
LABEL_6:
        v39 = __dst;

        v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "host")));
        v9 = (const char *)objc_msgSend(v8, "UTF8String");
        v10 = strlen(v9);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          sub_1000CDE30();
        v11 = v10;
        if (v10 >= 0x17)
        {
          v30 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v30 = v10 | 7;
          v31 = v30 + 1;
          v12 = (std::string *)operator new(v30 + 1);
          __dst.__r_.__value_.__l.__size_ = v11;
          __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
          v12 = &__dst;
          if (!v10)
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_10:
              v38 = __dst;

              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "port"));
              v37 = objc_msgSend(v13, "unsignedIntValue");

              goto LABEL_18;
            }
LABEL_44:
            operator delete(v38.__r_.__value_.__l.__data_);
            goto LABEL_10;
          }
        }
        memmove(v12, v9, v11);
        v12->__r_.__value_.__s.__data_[v11] = 0;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_44;
      }
    }
    memmove(p_dst, v4, v6);
    p_dst->__r_.__value_.__s.__data_[v6] = 0;
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
  if (byte_10041AC77 >= 0)
    v14 = (const std::string::value_type *)&qword_10041AC60;
  else
    v14 = (const std::string::value_type *)qword_10041AC60;
  std::string::assign(&v39, v14);
  if (byte_10041AC8F >= 0)
    v15 = (const std::string::value_type *)&qword_10041AC78;
  else
    v15 = (const std::string::value_type *)qword_10041AC78;
  std::string::assign(&v38, v15);
  v37 = dword_10041ACA8;
LABEL_18:
  __p[0] = (void *)sub_1000C3884();
  __p[1] = v16;
  sub_100023300((uint64_t)__p, (uint64_t)&v39, (uint64_t)&__dst);
  v32 = sub_1000C2FB0();
  v33 = v17;
  sub_100023300((uint64_t)&v32, (uint64_t)&v38, (uint64_t)__p);
  v32 = sub_1000C38A4();
  v33 = v18;
  v19 = sub_1000C34B8((uint64_t)&v32, &v37);
  v20 = objc_alloc_init((Class)NSURLComponents);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__dst;
  else
    v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
  objc_msgSend(v20, "setScheme:", v22);

  if (v35 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
  objc_msgSend(v20, "setHost:", v24);

  if ((_DWORD)v19)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
    objc_msgSend(v20, "setPort:", v25);

  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "URL"));

  if (v35 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_33:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
LABEL_34:
      operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
LABEL_29:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_34;
LABEL_30:

  return v26;
}

void sub_1000231A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, int a12, __int16 a13, char a14, char a15, uint64_t a16, __int128 __dst, int a18, __int16 a19, char a20,char a21,int a22,int a23,__int128 a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete((void *)__p);
  if (a21 < 0)
    operator delete((void *)__dst);
  if (a28 < 0)
  {
    operator delete((void *)a24);
    if ((*(char *)(v31 - 73) & 0x80000000) == 0)
    {
LABEL_7:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v31 - 73) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(v31 - 96));

  _Unwind_Resume(a1);
}

void sub_100023300(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  void **v14;
  _DWORD v15[8];

  sub_1000B3964(*(_QWORD *)a1);
  if (v15[0] == v15[0] >> 31)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10006CED8((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    sub_10030835C((uint64_t)v15);
    if (!*(_BYTE *)(a1 + 8))
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_100405C60);
      v6 = (id)qword_100417EE0;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)a1;
        sub_10016A280(v15, (uint64_t)__p);
        if (v10 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v12 = v7;
        v13 = 2080;
        v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "developer override of %s with %s", buf, 0x16u);
        if (v10 < 0)
          operator delete(__p[0]);
      }

      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  sub_1000B3D5C((uint64_t)v15);
}

void sub_100023490(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v4;
  id v6;
  NSObject *v7;
  void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t buf;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  __p = va_arg(va1, void *);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  buf = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (a2)
  {

    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    __cxa_begin_catch(a1);
    v6 = sub_100308310();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10016A280((int *)va1, (uint64_t)va);
      sub_10016A398();
    }

    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_100023970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);

  _Unwind_Resume(a1);
}

void sub_100023C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100023CD8(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;
  _QWORD v7[10];
  char v8;
  uint64_t v9;

  sub_1000FC5A4((uint64_t)v5);
  sub_1000F0508(&v6, (uint64_t)"[", 1);
  v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    sub_100023E4C(&v6, v2 + 2);
    while (1)
    {
      v2 = (uint64_t **)*v2;
      if (!v2)
        break;
      sub_1000F0508(&v6, (uint64_t)", ", 2);
      sub_100023E4C(&v6, v2 + 2);
    }
  }
  sub_1000F0508(&v6, (uint64_t)"]", 1);
  std::stringbuf::str(v7);
  *(_QWORD *)((char *)v5
  v6 = v3;
  if (v8 < 0)
    operator delete((void *)v7[8]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v9);
}

void sub_100023DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100023E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100023E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100023E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000FC6DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100023E4C(_QWORD *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((unsigned __int8 *)*a2 + 23);
  v3 = (*a2)[1];
  if ((v2 & 0x80u) == 0)
    v4 = (uint64_t)*a2;
  else
    v4 = **a2;
  if ((v2 & 0x80u) == 0)
    v5 = v2;
  else
    v5 = v3;
  return sub_1000F0508(a1, v4, v5);
}

char *sub_100023E6C@<X0>(char *__s@<X1>, char *result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  std::string::size_type v19;

  v5 = *(_QWORD *)result;
  v6 = *((_QWORD *)result + 1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v5 == v6)
    goto LABEL_10;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = *(_QWORD *)v5;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  for (result = sub_10009B080((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
        ;
        result = sub_10009B080((std::string *)a3, v16, v18, (std::string::value_type *)(v18 + v19), v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6)
      break;
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    v12 = v11 + v10;
    v13 = strlen(__s);
    sub_10009B520((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    v16 = v15 + v14;
    v17 = *(char *)(v5 + 23);
    if (v17 >= 0)
      v18 = v5;
    else
      v18 = *(_QWORD *)v5;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v5 + 23);
    else
      v19 = *(_QWORD *)(v5 + 8);
  }
  return result;
}

void sub_100023F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_1000244D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;

  if (a54 < 0)
    operator delete(*(void **)(v57 + 160));

  _Unwind_Resume(a1);
}

uint64_t sub_10002459C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  void *v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSNumber *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  double v47;
  void *v48;
  id v49;
  _QWORD v51[4];
  id v52;
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[1920];
  const void **buf;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  _BYTE v60[24];
  _BYTE v61[32];
  _QWORD v62[3];
  char v63;
  _OWORD v64[6];
  __int128 v65;
  __int128 v66;
  _BYTE v67[28];
  _QWORD v68[4];
  _QWORD v69[4];

  v11 = a4;
  v12 = v11;
  if (v11 && fabs((double)((*(_QWORD *)(a2 + 240) - a5) / 1000000000)) <= 1.25)
  {
    v13 = *((_QWORD *)a1 + 1);
    if (!(v13 % *a1))
    {
      v66 = 0u;
      memset(v67, 0, sizeof(v67));
      v65 = 0u;
      memset(v64, 0, sizeof(v64));
      objc_msgSend(v11, "gpsLocation");
      v62[2] = 0;
      v62[0] = off_1003F9A88;
      v62[1] = 0;
      v63 &= 0xFCu;
      sub_1000504A8((uint64_t)v62, *(double *)((char *)v64 + 4));
      sub_1000504A0((uint64_t)v62, *(double *)((char *)v64 + 12));
      v14 = *(double *)((char *)&v64[1] + 4);
      v15 = v65;
      v16 = *(unsigned int *)(a2 + 296);
      v17 = objc_alloc_init((Class)NSMutableDictionary);
      v68[0] = CFSTR("externalLocUnc");
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14));
      v69[0] = v18;
      v68[1] = CFSTR("externalLocType");
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15));
      v69[1] = v19;
      v68[2] = CFSTR("yieldStatus");
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v16));
      v69[2] = v20;
      v68[3] = CFSTR("pipelinedLocType");
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
      v69[3] = v21;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v69, v68, 4));
      objc_msgSend(v17, "setDictionary:", v22);

      if ((*(_BYTE *)(a2 + 755) & 4) != 0)
      {
        v23 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)sub_10015C0B0(a2 + 40, (uint64_t)v62));
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        objc_msgSend(v17, "setObject:forKey:", v24, CFSTR("distance"));

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 280)));
        objc_msgSend(v17, "setObject:forKey:", v26, CFSTR("pipelinedUnc"));

      }
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 320)));
      objc_msgSend(v17, "setObject:forKey:", v27, CFSTR("prbCoarseIndoorSaysIndoor"));

      if ((*(_BYTE *)(a2 + 757) & 2) != 0)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 560)));
        objc_msgSend(v17, "setObject:forKey:", v28, CFSTR("signedDistToSurveyBound"));

      }
      v29 = *(_BYTE *)(a2 + 456);
      if ((v29 & 0x20) != 0)
      {
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 448)));
        objc_msgSend(v17, "setObject:forKey:", v30, CFSTR("prbCoarseIndoorSaysIndoorWifiAndGps"));

        v29 = *(_BYTE *)(a2 + 456);
      }
      if ((v29 & 0x10) != 0)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 440)));
        objc_msgSend(v17, "setObject:forKey:", v31, CFSTR("prbRawCLOutdoorServiceSaysIndoor"));

        v29 = *(_BYTE *)(a2 + 456);
      }
      if ((v29 & 8) != 0)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 432)));
        objc_msgSend(v17, "setObject:forKey:", v32, CFSTR("prbZAxisSaysIndoor"));

      }
      v33 = *(_QWORD *)(a2 + 752);
      if ((v33 & 0x100000000000) != 0)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 608)));
        objc_msgSend(v17, "setObject:forKey:", v34, CFSTR("yieldParticleFilterType"));

        v33 = *(_QWORD *)(a2 + 752);
      }
      if ((v33 & 0x80) != 0)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 128)));
        objc_msgSend(v17, "setObject:forKey:", v35, CFSTR("floorOrdinal"));

      }
      if (*a6)
      {
        sub_10008930C(&buf, *a6 + 8);
        v36 = sub_1000781C4(&buf, (unsigned __int8 ***)&qword_10041AD40);
        v37 = v57;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if (v36)
        {
          sub_1000B53CC(v55, *a6);
          sub_100159F88((uint64_t)v55, &buf);
          sub_1001A23D4((uint64_t)v54, (uint64_t)v62);
          sub_100159CBC((uint64_t)&buf, (uint64_t)v54, (uint64_t)v60);
          sub_100159E28((uint64_t)v60, (uint64_t)v61);
          nullsub_22(v54);
          v40 = v59;
          if (v59)
          {
            v41 = (unint64_t *)&v59->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v43 = v58;
          if (v58)
          {
            v44 = (unint64_t *)&v58->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          nullsub_22(&buf);
          sub_100073738(v55);
          v46 = (_QWORD *)*a6;
          sub_1001A2040((uint64_t)v53, (uint64_t)v61);
          v47 = sub_100317888(v46, (uint64_t)v53, 0, 1, 1, 0.0);
          nullsub_23(v53);
          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v47));
          objc_msgSend(v17, "setObject:forKey:", v48, CFSTR("externalLocSignedDistToSurveyBound"));

          nullsub_23(v61);
        }
      }
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472;
      v51[2] = sub_100323180;
      v51[3] = &unk_100406D28;
      v49 = v17;
      v52 = v49;
      AnalyticsSendEventLazy(CFSTR("com.apple.pipelined.fixcrosscheck"), v51);

      nullsub_22(v62);
      v13 = *((_QWORD *)a1 + 1);
    }
    *((_QWORD *)a1 + 1) = v13 + 1;
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }

  return v25;
}

void sub_100024CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  nullsub_22(&STACK[0x870]);
  _Unwind_Resume(a1);
}

uint64_t sub_100024E14(int a1)
{
  _BYTE v2[24];
  std::string v3;
  std::runtime_error v4;

  if (a1 == 4)
    return 11;
  if (a1 == 1 || a1 == 3)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v3, "Yield source not viable for location type conversion");
    std::runtime_error::runtime_error(&v4, &v3);
    v4.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
    sub_10018D04C((uint64_t)v2);
    sub_1000EF6D4(&v4, (uint64_t)"CLLocationType getLocationTypeFromPoseEstimate(const PoseEstimate &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/daemon/indoorservice/CLIndoorProvider.mm", 193, (uint64_t)v2);
  }
  return 10;
}

void sub_100024EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

std::string *sub_100024F74@<X0>(std::string *result@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type *p_size;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  p_size = &result[1].__r_.__value_.__l.__size_;
  while (1)
  {
    p_size = (std::string::size_type *)*p_size;
    if (!p_size)
      break;
    v4 = *(unsigned __int8 *)(a2 + 23);
    if ((v4 & 0x80u) != 0)
      v4 = *(_QWORD *)(a2 + 8);
    if (v4)
      std::string::push_back((std::string *)a2, 10);
    v5 = sub_100050DB0((uint64_t)(p_size + 2));
    v6 = *(char *)(v5 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)v5;
    else
      v7 = *(const std::string::value_type **)v5;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    result = std::string::append((std::string *)a2, v7, v8);
  }
  return result;
}

void sub_100024FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100025010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  _BYTE v20[760];
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD block[4];
  id v24;
  _QWORD v25[96];
  std::__shared_weak_count *v26;

  v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000BDA04;
  block[3] = &unk_100407220;
  objc_copyWeak(&v19, (id *)(a1 + 32));
  sub_1000768A0(v20, a3);
  v8 = (std::__shared_weak_count *)a5[1];
  v21 = *a5;
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  objc_copyWeak(&v24, &v19);
  sub_1000768A0(v25, v20);
  v25[95] = v21;
  v26 = v22;
  if (v22)
  {
    v11 = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  dispatch_async(v7, block);
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_100076820((uint64_t)v20);
  objc_destroyWeak(&v19);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_100076820((uint64_t)v25);
  objc_destroyWeak(&v24);
}

void sub_1000251AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  id *v9;
  uint64_t v10;

  objc_destroyWeak(v9);
  if (STACK[0x308])
    sub_1003444E0();
  sub_100076820(v10);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1000251DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_10002534C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100025364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100025378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100025390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000255B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10002587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000258B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100025C38(_QWORD *a1@<X8>)
{
  id v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  v9 = (id)objc_claimAutoreleasedReturnValue(+[DarwinDeviceInfo currentDevice](DarwinDeviceInfo, "currentDevice"));
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hwModel")));
  v3 = (const char *)objc_msgSend(v2, "UTF8String");
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(a1, v3, v5);
LABEL_9:
  *((_BYTE *)a1 + v5) = 0;

}

void sub_100025D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100025D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100025D78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100025DA4(id *a1)
{
  void *v2;
  NSObject *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  unsigned int v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  void *__p;
  char *v32;
  uint8_t buf[8];
  char *v34;
  uint64_t v35;

  v2 = objc_autoreleasePoolPush();
  if (qword_100417EF8 == -1)
  {
    v3 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417EF8, &stru_100407B20);
  v3 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Connection invalidated", buf, 2u);
  }
LABEL_4:
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (!WeakRetained)
  {
    if (qword_100417EF8 == -1)
    {
      v11 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      {
LABEL_16:
        objc_autoreleasePoolPop(v2);
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417EF8, &stru_100407B20);
      v11 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        goto LABEL_16;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "No connection so nothing to do", buf, 2u);
    goto LABEL_16;
  }
  v5 = WeakRetained;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "exportedObject"));
  v7 = v6;
  if (!v6)
  {
    if (qword_100417EF8 == -1)
    {
      v12 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    else
    {
      dispatch_once(&qword_100417EF8, &stru_100407B20);
      v12 = qword_100417F00;
      if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
        goto LABEL_15;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "No provider so nothing to invalidate", buf, 2u);
    goto LABEL_15;
  }
  objc_msgSend(v6, "onConnectionQueueShutdown");

  objc_msgSend(v5, "setExportedObject:", 0);
  objc_autoreleasePoolPop(v2);
  v8 = objc_loadWeakRetained(a1 + 6);
  v9 = objc_autoreleasePoolPush();
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "delayedClearTilesPolicy"));

  if (v10)
  {
    if (v8)
    {
      objc_msgSend(v8, "onQueueDbsToClear");
    }
    else
    {
      *(_QWORD *)buf = 0;
      v34 = 0;
      v35 = 0;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "delayedClearTilesPolicy"));
    sub_10033F24C(&__p, (uint64_t)buf);
    objc_msgSend(v8, "onQueueClearTiles:fromDbs:", v13, &__p);
    v14 = (char *)__p;
    if (__p)
    {
      v15 = v32;
      v16 = __p;
      if (v32 != __p)
      {
        do
        {
          v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldaxr(p_shared_owners);
            while (__stlxr(v19 - 1, p_shared_owners));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          v15 -= 16;
        }
        while (v15 != v14);
        v16 = __p;
      }
      v32 = v14;
      operator delete(v16);
    }

    v20 = *(char **)buf;
    if (*(_QWORD *)buf)
    {
      v21 = v34;
      v22 = *(char **)buf;
      if (v34 != *(char **)buf)
      {
        do
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v21 -= 16;
        }
        while (v21 != v20);
        v22 = *(char **)buf;
      }
      v34 = v20;
      operator delete(v22);
    }
  }
  objc_autoreleasePoolPop(v9);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionManager"));
  v27 = objc_msgSend(v26, "isLastOpenTransactionWithDescription:", CFSTR("start indoor provider"));

  if (v27)
  {
    objc_msgSend(a1[4], "releaseObjectsNotNeededForLocalization");
    goto LABEL_45;
  }
  if (qword_100417EF8 == -1)
  {
    v28 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      goto LABEL_45;
    goto LABEL_44;
  }
  dispatch_once(&qword_100417EF8, &stru_100407B20);
  v28 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
  {
LABEL_44:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Deferring destruction of FilesystemDB objects and prefetcher since we're still active", buf, 2u);
  }
LABEL_45:
  if (qword_100417EF8 != -1)
  {
    dispatch_once(&qword_100417EF8, &stru_100407B20);
    v29 = qword_100417F00;
    if (!os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
      goto LABEL_48;
    goto LABEL_47;
  }
  v29 = qword_100417F00;
  if (os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO))
  {
LABEL_47:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Releasing the indoor provider transaction", buf, 2u);
  }
LABEL_48:
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transactionManager"));
  objc_msgSend(v30, "closeTransactionWithDescription:", CFSTR("start indoor provider"));

}

void sub_100026254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100026264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1000F7D3C((void **)va);

  sub_1000F7D3C((void **)va1);
  _Unwind_Resume(a1);
}

void sub_100026298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000262B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000262C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000262D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100026740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  void *v57;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100026C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100026CE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003F3D98;
  if ((_QWORD *)qword_10041AAF8 != a1)
  {
    v2 = a1[5];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[6];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 4));
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100026D5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3CE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100026DA0(_QWORD *a1)
{
  sub_100101ABC(a1);
  operator delete();
}

void sub_100027260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  sub_100195804((uint64_t)&STACK[0x3E0]);

  _Unwind_Resume(a1);
}

void sub_10002727C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100027290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000272A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000272B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100027828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100027940(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;

  v11 = (id)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deviceIdentifierForVendor"));

  v3 = (void *)v2;
  if (!v2)
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v12 = v3;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  v5 = (const char *)objc_msgSend(v4, "UTF8String");
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a1[1] = v7;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v10;
    a1 = v10;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    if (!v6)
      goto LABEL_11;
  }
  memmove(a1, v5, v7);
LABEL_11:
  *((_BYTE *)a1 + v7) = 0;

}

void sub_100027A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100027A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100027A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100028504(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  JUMPOUT(0x100028550);
}

void sub_100028558()
{
  JUMPOUT(0x100028580);
}

void sub_100028564()
{
  JUMPOUT(0x10002856CLL);
}

void sub_100028574()
{
  JUMPOUT(0x10002857CLL);
}

void sub_100028A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100028B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100028E84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v10;
  id v13;
  NSObject *v14;

  sub_1000E09C4((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v13 = sub_1000E089C();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(a9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "_openTileFileForIncrementalIO: fail to open availability tile; most likely due to race condition",
        (uint8_t *)&a9,
        2u);
    }

    a9 = 0uLL;
    sub_1000E08E8(v9 + 8, &a9);
    sub_1000E095C((uint64_t)&a9);
    __cxa_end_catch();
    JUMPOUT(0x100028DE8);
  }
  if (*(char *)(v10 - 49) < 0)
    operator delete(*(void **)(v10 - 72));
  _Unwind_Resume(a1);
}

void sub_100028F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100028F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  void **v10;
  NSObject *v11;
  void *v12;
  int v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string buf;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  buf.__r_.__value_.__s.__data_[0] = 0;
  if (!*(_BYTE *)(a2 + 104))
  {
    buf.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
    sub_10002171C((const std::chrono::system_clock::time_point *)&buf);
  }
  v8 = (_OWORD *)(a2 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_10006CED8(&buf.__r_.__value_.__s.__data_[8], *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *v8;
    v18 = *(_QWORD *)(a2 + 128);
  }
  buf.__r_.__value_.__s.__data_[0] = 1;
  if (SHIBYTE(v18) < 0)
  {
    operator delete((void *)buf.__r_.__value_.__l.__size_);
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (*(_BYTE *)(a2 + 104))
    {
LABEL_8:
      if (*(char *)(a2 + 135) < 0)
      {
        sub_10006CED8(&buf.__r_.__value_.__s.__data_[8], *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
      }
      else
      {
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *v8;
        v18 = *(_QWORD *)(a2 + 128);
      }
      buf.__r_.__value_.__s.__data_[0] = 1;
      v9 = a1 + 8;
      if (*(char *)(a1 + 31) < 0)
        goto LABEL_15;
      goto LABEL_12;
    }
  }
  else
  {
    buf.__r_.__value_.__s.__data_[0] = 0;
    if (*(_BYTE *)(a2 + 104))
      goto LABEL_8;
  }
  v9 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
LABEL_15:
    operator delete(*(void **)v9);
LABEL_12:
  *(_OWORD *)v9 = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
  *(_QWORD *)(v9 + 16) = v18;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 56) + 32))(&v15);
  *((_BYTE *)&v16.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v16, "logs");
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&buf, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    buf = v15;
  sub_1000675EC(&buf, (uint64_t)&v16);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_10006CED8(&v19, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v19 = *(_OWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a1 + 24);
  }
  sub_1000675EC(&buf, (uint64_t)&v19);
  v14 = buf;
  memset(&buf, 0, sizeof(buf));
  if ((SHIBYTE(v20) & 0x80000000) == 0
    || (operator delete((void *)v19), (SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_25:
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_26:
  sub_10003AAF0((uint64_t)&v14, 0);
  sub_10006DB18((const char *)&v14, 0, (int *)&buf);
  if (LODWORD(buf.__r_.__value_.__l.__data_) <= 1)
  {
    __cxa_allocate_exception(0x60uLL);
    memset(&v16, 0, sizeof(v16));
    boost::filesystem::filesystem_error::filesystem_error(&buf, "Log directory doesn't exist", &v14, &v16);
    sub_10018D04C((uint64_t)&v19);
    sub_1001798D4((uint64_t)&buf, (uint64_t)"fs::path generateLogDirectory(const IBackgroundUploader &, const std::string &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/demo/map_run.cpp", 73, (uint64_t)&v19);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = (void **)(a1 + 32);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else
  {
    v10 = (void **)(a1 + 32);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_29;
  }
  operator delete(*v10);
LABEL_29:
  *(std::string *)v10 = v14;
  if (qword_100417ED8 == -1)
  {
    v11 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_34;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100405E68);
    v11 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_34;
  }
  v12 = v10;
  if (*(char *)(a1 + 55) < 0)
    v12 = *v10;
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logging sensors into %s", (uint8_t *)&buf, 0xCu);
LABEL_34:
  sub_100022650(a1, a3, a4);
  if (*(_DWORD *)(a1 + 4) == 2)
    sub_100021B18(a1, (const std::string *)a2, a3, a4);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&buf, a3);
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v15, "phoneinfo.txt");
  if (*(char *)(a1 + 55) < 0)
    sub_10006CED8(&v16, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    v16 = *(std::string *)v10;
  sub_1000675EC(&v16, (uint64_t)&v15);
  LOBYTE(v19) = 0;
  sub_1000C3954((const void **)&buf.__r_.__value_.__l.__data_, &v16, (uint64_t)&v19, 1, &v13);
  sub_100068888(&v13);
  if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
LABEL_46:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_47;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_46;
LABEL_43:
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_47:
  operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_100029C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void **v64;
  uint64_t v65;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((a51 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a51 & 0x80000000) == 0)
  {
LABEL_3:
    if (a44 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(v64[4]);
  if (a44 < 0)
  {
LABEL_4:
    operator delete(a39);
    if ((a37 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a37 & 0x80000000) == 0)
  {
LABEL_5:
    if (a30 < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a32);
  if (a30 < 0)
  {
LABEL_6:
    operator delete(a25);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a58 & 0x80000000) == 0)
    {
LABEL_16:
      if (*(char *)(v65 - 105) < 0)
        operator delete(v64[30]);
      if (a64 < 0)
        operator delete(v64[11]);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(v64[8]);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a19);
  if ((a58 & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_100029D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void **v46;
  uint64_t v47;

  if (a40 < 0)
    operator delete(v46[8]);
  if (*(char *)(v47 - 105) < 0)
    operator delete(v46[30]);
  if (a46 < 0)
    operator delete(v46[11]);
  _Unwind_Resume(a1);
}

void sub_100029DEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (a43 < 0)
  {
    operator delete(*(void **)(v45 + 88));
    if ((*(char *)(v46 - 201) & 0x80000000) == 0)
    {
LABEL_3:
      if (a2 != 1)
LABEL_12:
        JUMPOUT(0x10002A2B0);
LABEL_7:
      __cxa_begin_catch(a1);
      if (*(_QWORD *)(v43 + 3800) == -1)
      {
        if (!os_log_type_enabled(*(os_log_t *)(v44 + 3808), OS_LOG_TYPE_ERROR))
        {
LABEL_9:
          __cxa_end_catch();
          JUMPOUT(0x100029AB0);
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_100405E68);
        if (!os_log_type_enabled(*(os_log_t *)(v44 + 3808), OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      __cxa_rethrow();
    }
  }
  else if ((*(char *)(v46 - 201) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v45 + 144));
  if (a2 != 1)
    goto LABEL_12;
  goto LABEL_7;
}

void sub_100029E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (*(char *)(v47 - 201) < 0)
  {
    operator delete(*(void **)(v46 + 144));
    if (a46 < 0)
      goto LABEL_8;
  }
  else if (a46 < 0)
  {
LABEL_8:
    JUMPOUT(0x10002A29CLL);
  }
  JUMPOUT(0x10002A2A0);
}

void sub_100029E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if ((a46 & 0x80000000) == 0)
    JUMPOUT(0x10002A2A0);
  JUMPOUT(0x10002A268);
}

void sub_100029E20()
{
  JUMPOUT(0x10002A2A0);
}

void sub_100029E38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void **v49;
  uint64_t v50;

  if (a49 < 0)
  {
    operator delete(v49[14]);
    if ((a43 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v50 - 201) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v49[11]);
  if ((*(char *)(v50 - 201) & 0x80000000) == 0)
  {
LABEL_4:
    if (a2 != 1)
LABEL_10:
      JUMPOUT(0x10002A2B0);
LABEL_9:
    JUMPOUT(0x100029EACLL);
  }
LABEL_8:
  operator delete(v49[18]);
  if (a2 != 1)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_100029E9C(uint64_t a1, int a2)
{
  if (a2 == 1)
    JUMPOUT(0x100029EACLL);
  JUMPOUT(0x10002A2B0);
}

void sub_100029F0C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    __cxa_rethrow();
  }
  JUMPOUT(0x10002A2B0);
}

void sub_100029F3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int buf)
{
  NSObject *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  unint64_t v47;
  char *v48;

  if (a2)
  {
    v46 = __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (a2 == 4)
      v47 = (unint64_t)v46;
    else
      v47 = 0;
    if (v42 | v47)
    {
      sub_10016B04C(v42, v47, 1, 1, (char *)(v44 - 224));
      if (*(char *)(v44 - 201) >= 0)
        v48 = (char *)(v44 - 224);
      else
        v48 = *(char **)(v43 + 144);
    }
    else
    {
      v48 = (char *)operator new(0x28uLL);
      *(_QWORD *)(v43 + 144) = v48;
      *(_OWORD *)(v43 + 152) = xmmword_10038A6C0;
      strcpy(v48, "No diagnostic information available.");
    }
    buf = 136315138;
    *(_QWORD *)(v43 + 116) = v48;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Trouble writing out stuff %s", (uint8_t *)&buf, 0xCu);
    if (*(char *)(v44 - 201) < 0)
      operator delete(*(void **)(v43 + 144));
    JUMPOUT(0x100029ED4);
  }
  JUMPOUT(0x10002A2B0);
}

void sub_10002A018()
{
  __cxa_end_catch();
  JUMPOUT(0x10002A2B0);
}

void sub_10002A028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    JUMPOUT(0x10002A29CLL);
  JUMPOUT(0x10002A2A0);
}

void sub_10002A160(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  boost::filesystem::filesystem_error *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;

  boost::filesystem::filesystem_error::~filesystem_error(v47);
  *(_QWORD *)(v50 + 112) = v49;
  if (a47 < 0)
    operator delete(*(void **)(v50 + 120));
  *(_QWORD *)(v50 + 192) = v48 + 16;
  v52 = *(_QWORD *)(v50 + 200);
  if (v52 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52))
    *(_QWORD *)(v50 + 200) = 0;
  boost::filesystem::filesystem_error::~filesystem_error((boost::filesystem::filesystem_error *)(v51 - 224));
  v53 = *(void **)(v50 + 240);
  if (v53)
  {
    *(_QWORD *)(v50 + 248) = v53;
    operator delete(v53);
  }
  __cxa_free_exception(v47);
  __cxa_end_catch();
  JUMPOUT(0x10002A1F8);
}

void sub_10002A208(void *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  JUMPOUT(0x10002A2B0);
}

void sub_10002A218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (*(char *)(v47 - 105) < 0)
  {
    operator delete(*(void **)(v46 + 240));
    if (*(char *)(v47 - 201) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v46 + 144));
      if (a46 < 0)
        goto LABEL_11;
      goto LABEL_12;
    }
  }
  else if (*(char *)(v47 - 201) < 0)
  {
    goto LABEL_5;
  }
  if (a46 < 0)
LABEL_11:
    JUMPOUT(0x10002A29CLL);
LABEL_12:
  JUMPOUT(0x10002A2A0);
}

void sub_10002A254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if ((*(char *)(v47 - 201) & 0x80000000) == 0)
    JUMPOUT(0x10002A260);
  operator delete(*(void **)(v46 + 144));
  if (a46 < 0)
    JUMPOUT(0x10002A268);
  JUMPOUT(0x10002A2A0);
}

void sub_10002A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;

  if (a40 < 0)
    JUMPOUT(0x10002A280);
  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v46 + 240));
  if (a46 < 0)
    operator delete(*(void **)(v46 + 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10002A2B8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "LatLon");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "lat", 4, 1)
     + v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "lon", 4, 2);
  LODWORD(a1) = v10 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 16));
  v11 = v9 + a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v11 + a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

void sub_10002A690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002A6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002A6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002A8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10002A8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10002A8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10002A908(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v1 == v2)
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    v5 = *v1++;
    v4 = v4 + sub_10002A97C(v5);
    v3 += v6;
  }
  while (v1 != v2);
  return v4;
}

uint64_t sub_10002A97C(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *i;
  std::__shared_weak_count *v14;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 72);
  v4 = *(_QWORD **)(a1 + 80);
  if (v3 == v4)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v8 = (std::__shared_weak_count *)v3[1];
      if (v8 && (v9 = std::__shared_weak_count::lock(v8)) != 0)
      {
        v10 = v9;
        v7 = *v3 == 0;
        if (*v3)
          ++v6;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        v7 = 1;
      }
      v5 += v7;
      v3 += 2;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)(a1 + 72);
    for (i = *(_QWORD **)(a1 + 80); i != v3; i -= 2)
    {
      v14 = (std::__shared_weak_count *)*(i - 1);
      if (v14)
        std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(a1 + 80) = v3;
  std::mutex::unlock(v2);
  return v6;
}

id *sub_10002AA80(id *a1, uint64_t *a2, void *a3, void *a4, unsigned int a5, uint64_t a6)
{
  id v11;
  id v12;
  WifiSensor *v13;
  IOSPedometry *v14;
  IOSGps *v15;
  IOSAltimeter *v16;
  IOSBeacon *v17;
  IOSDeviceMotion *v18;
  uint64_t v19;
  IOSDeviceMotion *v20;
  unsigned __int8 v21;
  IOSActivityState *v22;
  IOSActivityState *v23;
  IOSNearbyObject *v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v28;
  _QWORD **v29;
  BOOL v30;
  id v31;
  _QWORD **v32;
  _QWORD *v33[2];

  v11 = a3;
  v12 = a4;
  sub_1000C9358((uint64_t)a1, a2);
  sub_1000CC1B0(a1 + 11);
  *a1 = off_100404B10;
  if ((a5 & 0x10) == 0)
  {
    v13 = objc_alloc_init(WifiSensor);
    if (-[WifiSensor sensorPresent](v13, "sensorPresent"))
    {
      sub_10002AF30(a1, (uint64_t)-[WifiSensor getSensor](v13, "getSensor"));
      sub_10002B2D8(a1 + 11, v13);
    }

  }
  v14 = objc_alloc_init(IOSPedometry);
  if (-[IOSPedometry sensorPresent](v14, "sensorPresent"))
  {
    sub_10002AF30(a1, (uint64_t)-[IOSPedometry getSensor](v14, "getSensor"));
    sub_10002B2D8(a1 + 11, v14);
  }
  if ((a5 & 1) == 0)
  {
    v15 = -[IOSGps initWithDisableBackground:]([IOSGps alloc], "initWithDisableBackground:", (a5 >> 2) & 1);
    if (-[IOSGps sensorPresent](v15, "sensorPresent"))
    {
      sub_10002AF30(a1, (uint64_t)-[IOSGps getSensor](v15, "getSensor"));
      sub_10002B2D8(a1 + 11, v15);
    }

  }
  v16 = -[IOSAltimeter initWithOperationQueue:]([IOSAltimeter alloc], "initWithOperationQueue:", v12);
  if (-[IOSAltimeter sensorPresent](v16, "sensorPresent"))
  {
    sub_10002AF30(a1, (uint64_t)-[IOSAltimeter getSensor](v16, "getSensor"));
    sub_10002B2D8(a1 + 11, v16);
  }
  if ((a5 & 0x20) == 0)
  {
    v17 = objc_alloc_init(IOSBeacon);
    if (-[IOSBeacon sensorPresent](v17, "sensorPresent"))
    {
      sub_10002AF30(a1, (uint64_t)-[IOSBeacon getSensor](v17, "getSensor"));
      sub_10002B2D8(a1 + 11, v17);
    }

  }
  if ((a5 & 8) != 0)
    objc_msgSend(v11, "setDeviceMotionUpdateInterval:", 0.02);
  v18 = [IOSDeviceMotion alloc];
  if ((a5 & 2) != 0)
    v19 = 1;
  else
    v19 = 4;
  v20 = -[IOSDeviceMotion initWithMotionManager:andHandler:usingReferenceFrame:](v18, "initWithMotionManager:andHandler:usingReferenceFrame:", v11, v12, v19);
  if (-[IOSDeviceMotion sensorPresent](v20, "sensorPresent"))
  {
    sub_10002AF30(a1, (uint64_t)-[IOSAbstractInertialSensor getSensor](v20, "getSensor"));
    sub_10002B2D8(a1 + 11, v20);
  }
  v21 = atomic_load((unsigned __int8 *)qword_10041A358);
  if ((v21 & 1) == 0 && __cxa_guard_acquire(qword_10041A358))
  {
    qword_10041A350 = (uint64_t)objc_alloc_init((Class)CMMotionActivityManager);
    __cxa_guard_release(qword_10041A358);
  }
  v22 = [IOSActivityState alloc];
  v23 = -[IOSActivityState initWithMotionActivityManager:andHandler:](v22, "initWithMotionActivityManager:andHandler:", qword_10041A350, v12);
  if (-[IOSActivityState sensorPresent](v23, "sensorPresent"))
  {
    sub_10002AF30(a1, (uint64_t)-[IOSActivityState getSensor](v23, "getSensor"));
    sub_10002B2D8(a1 + 11, v23);
  }
  v24 = -[IOSNearbyObject initWithType:reducedRate:]([IOSNearbyObject alloc], "initWithType:reducedRate:", (a5 >> 6) & 1, (a5 >> 7) & 1);
  if (-[IOSNearbyObject sensorPresent](v24, "sensorPresent"))
  {
    sub_10002AF30(a1, (uint64_t)-[IOSNearbyObject getSensor](v24, "getSensor"));
    sub_10002B2D8(a1 + 11, v24);
  }
  v25 = *(_QWORD *)(a6 + 24);
  if (v25)
  {
    v31 = v11;
    (*(void (**)(_QWORD ***__return_ptr))(*(_QWORD *)v25 + 48))(&v32);
    v26 = v32;
    if (v32 != v33)
    {
      do
      {
        sub_10002AF30(a1, (uint64_t)v26[5]);
        sub_10002B2D8(a1 + 11, v26[4]);
        v28 = v26[1];
        if (v28)
        {
          do
          {
            v29 = (_QWORD **)v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD **)v26[2];
            v30 = *v29 == v26;
            v26 = v29;
          }
          while (!v30);
        }
        v26 = v29;
      }
      while (v29 != v33);
    }
    sub_1002F2014((uint64_t)&v32, v33[0]);
    v11 = v31;
  }

  return a1;
}

void sub_10002AE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _QWORD *v9;
  void *v10;
  id *v11;
  void *v12;
  void *v13;
  void *v14;

  __cxa_guard_abort(qword_10041A358);

  sub_10001D9FC(v11);
  sub_1002F1EAC(v9);

  _Unwind_Resume(a1);
}

void sub_10002AF30(_QWORD *a1, uint64_t a2)
{
  char *v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD v37[2];

  v4 = (char *)a1[3];
  v6 = (char *)a1[4];
  v5 = (void **)(a1 + 3);
  v7 = v6;
  v8 = v4;
  if (v4 != v6)
  {
    while (*(_QWORD *)v8 != a2)
    {
      v8 += 8;
      if (v8 == v6)
      {
        v8 = (char *)a1[4];
        break;
      }
    }
  }
  if (v8 == v6)
  {
    v11 = a1[5];
    if ((unint64_t)v6 < v11)
    {
      *(_QWORD *)v6 = a2;
      v12 = (uint64_t)(v6 + 8);
      goto LABEL_31;
    }
    v13 = v6 - v4;
    v14 = (v6 - v4) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_1000D02C0();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        sub_1000CDEB8();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = a2;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v6)
        goto LABEL_29;
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = a2;
      v12 = 8 * v14 + 8;
      if (v4 == v6)
      {
LABEL_29:
        a1[3] = v19;
        a1[4] = v12;
        a1[5] = v20;
        if (v4)
          operator delete(v4);
LABEL_31:
        a1[4] = v12;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
        v29 = a1[7];
        if (v29)
        {
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            v31 = v28;
            if (v29 <= v28)
              v31 = v28 % v29;
          }
          else
          {
            v31 = (v29 - 1) & v28;
          }
          v32 = *(uint64_t ***)(a1[6] + 8 * v31);
          if (v32)
          {
            v33 = *v32;
            if (v33)
            {
              if (v30.u32[0] < 2uLL)
              {
                v34 = v29 - 1;
                while (1)
                {
                  v36 = v33[1];
                  if (v36 == v28)
                  {
                    if (*((_DWORD *)v33 + 4) == v28)
                      goto LABEL_52;
                  }
                  else if ((v36 & v34) != v31)
                  {
                    return;
                  }
                  v33 = (uint64_t *)*v33;
                  if (!v33)
                    return;
                }
              }
              while (1)
              {
                v35 = v33[1];
                if (v35 == v28)
                {
                  if (*((_DWORD *)v33 + 4) == v28)
                  {
LABEL_52:
                    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
                    return;
                  }
                }
                else
                {
                  if (v35 >= v29)
                    v35 %= v29;
                  if (v35 != v31)
                    return;
                }
                v33 = (uint64_t *)*v33;
                if (!v33)
                  return;
              }
            }
          }
        }
        return;
      }
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_59;
    if ((unint64_t)(v4 - v18) < 0x20)
      goto LABEL_59;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v22];
    v19 = (_QWORD *)((char *)v19 - v22);
    v23 = &v18[8 * v14 - 16];
    v24 = v6 - 16;
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v19 = v27;
      }
      while (v7 != v4);
    }
    v4 = (char *)*v5;
    goto LABEL_29;
  }
  if (qword_100417ED8 == -1)
  {
    v9 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v37[0] = 67109120;
      v37[1] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Sensor %d already in collection", (uint8_t *)v37, 8u);
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100406458);
    v9 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
  }
}

void sub_10002B2D8(id *a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*a1, "addObject:");

}

sqlite3 **sub_10002B318(sqlite3 **a1, char *a2, int a3, int a4)
{
  NSObject *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  const char *v23;
  int v24;
  NSObject *v25;
  char *v26;
  sqlite3 *v27;
  const char *v28;
  NSObject *v29;
  int *v31;
  std::string *v32;
  __int128 v33;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v36;
  __int128 v37;
  _BYTE v38[24];
  std::string __dst;
  std::string v40;
  std::string v41;
  std::string v42;
  std::runtime_error v43;
  std::string v44;
  _BYTE buf[24];
  const char *v46;

  *a1 = 0;
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FF920);
  v8 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
  {
    if (a2[23] >= 0)
      v9 = a2;
    else
      v9 = *(char **)a2;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Opening db %s", buf, 0xCu);
  }
  if (a4 == 1)
  {
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    v11 = sub_10006CAB4(a2);
    v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      sub_1000CDE30();
    if (v11 >= 0x17)
    {
      v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v15 = v11 | 7;
      v16 = v15 + 1;
      v13 = operator new(v15 + 1);
      *(_QWORD *)&buf[8] = v12;
      *(_QWORD *)&buf[16] = v16 | 0x8000000000000000;
      *(_QWORD *)buf = v13;
    }
    else
    {
      buf[23] = v11;
      v13 = buf;
      if (!v12)
      {
        v14 = buf;
        goto LABEL_27;
      }
    }
    if (v12 < 0x20 || (unint64_t)(v13 - v10) < 0x20)
    {
      v17 = v10;
      v14 = v13;
    }
    else
    {
      v17 = &v10[v12 & 0xFFFFFFFFFFFFFFE0];
      v14 = &v13[v12 & 0xFFFFFFFFFFFFFFE0];
      v18 = v13 + 16;
      v19 = (__int128 *)(v10 + 16);
      v20 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 32;
      }
      while (v20);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_27:
        *v14 = 0;
        sub_100011C28((uint64_t)buf, 0, 0);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_29;
      }
    }
    do
    {
      v22 = *v17++;
      *v14++ = v22;
    }
    while (v17 != &v10[v12]);
    goto LABEL_27;
  }
LABEL_29:
  if (a2[23] >= 0)
    v23 = a2;
  else
    v23 = *(const char **)a2;
  v24 = sqlite3_open_v2(v23, a1, a3, 0);
  sub_10008B9C4(v24, *a1);
  if (v24)
  {
    v31 = __error();
    sub_10025FF8C(*v31, &v44);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v40, " w/ ");
    v32 = std::string::insert(&v40, 0, "Couldn't open db");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    else
      __dst = v44;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v41, (const std::string::value_type *)p_dst, size);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v43, &v42);
    v43.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v38);
    sub_1001F2298(&v43, (uint64_t)"db::resources::handle::handle(const fs::path &, int, handle::OpenOption)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 247, (uint64_t)v38);
  }
  if (qword_100417F08 == -1)
  {
    v25 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_39;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FF920);
    v25 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_39;
  }
  if (a2[23] >= 0)
    v26 = a2;
  else
    v26 = *(char **)a2;
  v27 = *a1;
  v28 = sqlite3_db_filename(*a1, "main");
  *(_DWORD *)buf = 136315650;
  *(_QWORD *)&buf[4] = v26;
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v27;
  *(_WORD *)&buf[22] = 2080;
  v46 = v28;
  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Opened db %s with sqlite handle %p. main = %s", buf, 0x20u);
LABEL_39:
  sub_10008E514(a1, "PRAGMA auto_vacuum = 2", "Unable to enable auto_vacuum");
  sub_10008E514(a1, "PRAGMA journal_mode=WAL;", "Failed to set journal_mode=WAL");
  if (qword_100417F08 != -1)
  {
    dispatch_once(&qword_100417F08, &stru_1003FF920);
    v29 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      return a1;
    goto LABEL_41;
  }
  v29 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_41:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Journal mode set to WAL", buf, 2u);
  }
  return a1;
}

void sub_10002B8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  int v61;
  uint64_t v62;
  void *v64;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_4:
    sub_1001F26E8((std::runtime_error *)(v62 - 160));
    v64 = a33;
    if (!a33)
    {
LABEL_10:
      std::runtime_error::~runtime_error((std::runtime_error *)(v62 - 200));
      if (a60 < 0)
      {
        operator delete(a55);
        if ((a41 & 0x80000000) == 0)
        {
LABEL_12:
          if ((a53 & 0x80000000) == 0)
            goto LABEL_13;
          goto LABEL_18;
        }
      }
      else if ((a41 & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(a36);
      if ((a53 & 0x80000000) == 0)
      {
LABEL_13:
        if (a47 < 0)
          goto LABEL_14;
        goto LABEL_19;
      }
LABEL_18:
      operator delete(a48);
      if (a47 < 0)
      {
LABEL_14:
        operator delete(a42);
        if ((v61 & 1) == 0)
        {
LABEL_21:
          if (*(char *)(v62 - 161) < 0)
          {
            operator delete(*(void **)(v62 - 184));
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_20:
        __cxa_free_exception(v60);
        goto LABEL_21;
      }
LABEL_19:
      if (!v61)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_9:
    operator delete(v64);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a23);
  sub_1001F26E8((std::runtime_error *)(v62 - 160));
  v64 = a33;
  if (!a33)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_10002BA8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p;
  char v9;

  v2 = *a2;
  sub_10002BB38(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
  {
    if (v9)
    {
      if (*((_QWORD *)v3 + 9))
        operator delete(*((void **)v3 + 7));
      if (*((_QWORD *)v3 + 6))
        operator delete(*((void **)v3 + 4));
      v4 = (std::__shared_weak_count *)*((_QWORD *)v3 + 3);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(v3);
  }
  return v2;
}

_QWORD *sub_10002BB38@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *sub_10002BC6C(_QWORD *a1, uint64_t ***a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_10002BCA4(a1, a2);
  if (result)
    return (uint64_t *)sub_10002BA8C(a1, result);
  return result;
}

const void ***sub_10002BCA4(_QWORD *a1, uint64_t ***a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  const void ****v9;
  const void ***v10;
  uint64_t v11;
  unint64_t v12;
  const void **v13;
  char v15;

  v4 = sub_1000B40D8((uint64_t)&v15, a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v8 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v8 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v9 = *(const void *****)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  v10 = *v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v13 = v10[1];
        if (v13 == (const void **)v6)
        {
          if ((sub_1000790EC(v10 + 2, (unsigned __int8 ***)a2) & 1) != 0)
            return v10;
        }
        else if (((unint64_t)v13 & v11) != v8)
        {
          return 0;
        }
        v10 = (const void ***)*v10;
        if (!v10)
          return v10;
      }
    }
    do
    {
      v12 = (unint64_t)v10[1];
      if (v12 == v6)
      {
        if ((sub_1000790EC(v10 + 2, (unsigned __int8 ***)a2) & 1) != 0)
          return v10;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v8)
          return 0;
      }
      v10 = (const void ***)*v10;
    }
    while (v10);
  }
  return v10;
}

void sub_10002CD1C()
{
  __cxa_end_catch();
  JUMPOUT(0x10002CB60);
}

void sub_10002CD28(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x10002CB90);
}

uint64_t sub_10002CD60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t f_bsize;
  uint64_t v8;
  statfs v9;

  v4 = a1;
  a3[1] = -1;
  a3[2] = -1;
  *a3 = -1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  result = statfs((const char *)a1, &v9);
  if ((_DWORD)result)
  {
    result = *__error();
    if ((_DWORD)result)
      return sub_1000D4868(result, v4, (uint64_t)a2, (uint64_t)"boost::filesystem::space");
  }
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  f_bsize = v9.f_bsize;
  v8 = v9.f_bfree * v9.f_bsize;
  *a3 = v9.f_blocks * v9.f_bsize;
  a3[1] = v8;
  a3[2] = v9.f_bavail * f_bsize;
  return result;
}

uint64_t sub_10002CE44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  std::string::size_type size;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string::size_type v24;
  void *v25;
  void (***v26)(_QWORD);
  BOOL v27;
  void *__p[2];
  void *v30[2];
  char v31;
  std::string v32;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = a3[1];
  a3[1] = 0;
  v8 = a3[2];
  v6 = a3 + 2;
  v7 = v8;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = (_QWORD *)(a1 + 32);
  v10 = v6[1];
  *(_QWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)v6 + 4);
  if (!v10)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & (v12 - 1)) != 0)
  {
    if (v11 >= v12)
      v11 %= v12;
  }
  else
  {
    v11 &= v12 - 1;
  }
  *(_QWORD *)(v5 + 8 * v11) = v9;
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = v13 == 1;
  if (!v13)
  {
LABEL_5:
    sub_1000D5048(v30, "");
    sub_10022B678("Cannot select an empty universe", &v32);
    sub_100174738((uint64_t)v30, (uint64_t)&v32, 1);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((v31 & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v30[0]);
LABEL_7:
    sub_10015C2DC((uint64_t)__p);
  }
  v14 = (_QWORD *)*v9;
  if (*v9)
  {
    do
    {
      v15 = *((_DWORD *)v14 + 486);
      if ((v15 & 1) == 0)
      {
        if ((v15 & 2) == 0)
        {
          sub_1000D5048(v30, "");
          sub_10022B6C4("UID & ID missing from location configuration", &v32);
          sub_100174738((uint64_t)v30, (uint64_t)&v32, 1);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (v31 < 0)
            operator delete(v30[0]);
          sub_1000F2AE4((uint64_t)__p);
        }
        std::string::operator=((std::string *)(v14 + 5), (const std::string *)(v14 + 8));
        *((_DWORD *)v14 + 486) |= 1u;
      }
      v14 = (_QWORD *)*v14;
    }
    while (v14);
  }
  memset(&v32, 0, sizeof(v32));
  sub_1000BE0AC(&v32, *(_QWORD *)(a1 + 40));
  v16 = (_QWORD *)*v9;
  if (*v9)
  {
    size = v32.__r_.__value_.__l.__size_;
    do
    {
      v18 = (uint64_t)(v16 + 4);
      if (size >= v32.__r_.__value_.__r.__words[2])
      {
        size = (std::string::size_type)sub_10022B710(&v32, v18);
      }
      else
      {
        sub_1000B53CC(size, v18);
        size += 1920;
      }
      v32.__r_.__value_.__l.__size_ = size;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  v19 = operator new(0x140uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = off_1003FEAB8;
  v20 = sub_1000C94BC((uint64_t)(v19 + 3), (uint64_t *)&v32, a2);
  v21 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v19;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v32.__r_.__value_.__r.__words[0];
  if (v32.__r_.__value_.__r.__words[0])
  {
    v25 = (void *)v32.__r_.__value_.__r.__words[0];
    if (v32.__r_.__value_.__l.__size_ != v32.__r_.__value_.__r.__words[0])
    {
      v26 = (void (***)(_QWORD))(v32.__r_.__value_.__l.__size_ - 1920);
      do
      {
        (**v26)(v26);
        v27 = v26 == (void (***)(_QWORD))v24;
        v26 -= 240;
      }
      while (!v27);
      v25 = (void *)v32.__r_.__value_.__r.__words[0];
    }
    v32.__r_.__value_.__l.__size_ = v24;
    operator delete(v25);
  }
  return a1;
}

void sub_10002D190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a14 < 0)
    operator delete(__p);
  sub_1000E095C(v24);
  sub_1001E45B8(v23);
  sub_1000E095C(v22);
  _Unwind_Resume(a1);
}

void sub_10002D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10002D914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002D930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002D940(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  id v5;
  size_t v6;
  size_t v7;
  unint64_t v8;

  v4 = objc_autoreleasePoolPush();
  v8 = 0;
  v5 = objc_msgSend(objc_retainAutorelease(a1), "decodeBytesForKey:returnedLength:", CFSTR("locationPrivateInfo"), &v8);
  if (v8 >= 0x230)
    v6 = 560;
  else
    v6 = v8;
  if (v8 <= 0x230)
    v7 = 560 - v8;
  else
    v7 = 0;
  memcpy(a2, v5, v6);
  bzero(&a2[v6], v7);
  objc_autoreleasePoolPop(v4);
}

id sub_10002D9D0(void *a1)
{
  void *v2;
  id v3;

  v2 = objc_autoreleasePoolPush();
  v3 = objc_msgSend(a1, "decodeIntegerForKey:", CFSTR("gpsExpiryInfo"));
  objc_autoreleasePoolPop(v2);
  return v3;
}

void sub_10002DA14(void *a1@<X0>, char *a2@<X8>)
{
  void *v4;
  id v5;
  size_t v6;
  size_t v7;
  unint64_t v8;

  v4 = objc_autoreleasePoolPush();
  v8 = 0;
  v5 = objc_msgSend(objc_retainAutorelease(a1), "decodeBytesForKey:returnedLength:", CFSTR("locationInfo"), &v8);
  if (v8 >= 0x9C)
    v6 = 156;
  else
    v6 = v8;
  if (v8 <= 0x9C)
    v7 = 156 - v8;
  else
    v7 = 0;
  memcpy(a2, v5, v6);
  bzero(&a2[v6], v7);
  objc_autoreleasePoolPop(v4);
}

void sub_10002DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::future<void> a11, std::promise<void> a12)
{
  void *v12;

  std::future<void>::~future(&a11);
  std::promise<void>::~promise(&a12);

  _Unwind_Resume(a1);
}

void sub_10002DFD0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  uint8_t *v74;
  NSObject *v75;
  char *v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string *v95;
  __int128 v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  __int128 v104;
  std::string *v105;
  __int128 v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  std::string::size_type v112;
  uint8_t v113;
  uint8_t *v114;
  _OWORD v115[2];
  __int128 v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  uint8_t buf[32];
  std::string v141;

  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v2 = (id)qword_100417F10;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Enabling foreign key support", buf, 2u);
  }

  sub_10008E514(*(sqlite3 ***)(a1 + 40), "PRAGMA foreign_keys = ON;", "Failed to turn on foreign key support");
  if (qword_100417F08 == -1)
  {
    v3 = (id)qword_100417F10;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v3 = (id)qword_100417F10;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
LABEL_7:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Creating table for venues", buf, 2u);
  }
LABEL_8:

  v117.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  v116 = xmmword_1003830B0;
  *(_OWORD *)&v117.__r_.__value_.__r.__words[1] = xmmword_1003830B0;
  strcpy(v117.__r_.__value_.__l.__data_, "CREATE TABLE IF NOT EXISTS ");
  qmemcpy(v115, "E IF NOT EXISTS CREATE TABLE IF ", sizeof(v115));
  v4 = std::string::append(&v117, "venues");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v118.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v118, "(");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v8 = (const std::string::value_type *)&qword_100419F50;
  else
    v8 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v9 = byte_100419F67;
  else
    v9 = *(_QWORD *)&byte_100419F58;
  v10 = std::string::append(&v119, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v120, " TEXT UNIQUE NOT NULL, ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v121.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F7F >= 0)
    v14 = (const std::string::value_type *)&qword_100419F68;
  else
    v14 = (const std::string::value_type *)qword_100419F68;
  if (byte_100419F7F >= 0)
    v15 = byte_100419F7F;
  else
    v15 = *(_QWORD *)&byte_100419F70;
  v16 = std::string::append(&v121, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v122, " TEXT NOT NULL, ");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v20 = (const std::string::value_type *)&qword_100419F80;
  else
    v20 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v21 = byte_100419F97;
  else
    v21 = *(_QWORD *)&byte_100419F88;
  v22 = std::string::append(&v123, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v124, " INTEGER PRIMARY KEY NOT NULL, ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FAF >= 0)
    v26 = (const std::string::value_type *)&qword_100419F98;
  else
    v26 = (const std::string::value_type *)qword_100419F98;
  if (byte_100419FAF >= 0)
    v27 = byte_100419FAF;
  else
    v27 = unk_100419FA0;
  v28 = std::string::append(&v141, v26, v27);
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v125, " INT NOT NULL, ");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A00F >= 0)
    v32 = (const std::string::value_type *)&qword_100419FF8;
  else
    v32 = (const std::string::value_type *)qword_100419FF8;
  if (byte_10041A00F >= 0)
    v33 = byte_10041A00F;
  else
    v33 = unk_10041A000;
  v34 = std::string::append(&v126, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&v127, " INT, ");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FC7 >= 0)
    v38 = (const std::string::value_type *)&xmmword_100419FB0;
  else
    v38 = (const std::string::value_type *)xmmword_100419FB0;
  if (byte_100419FC7 >= 0)
    v39 = byte_100419FC7;
  else
    v39 = *((_QWORD *)&xmmword_100419FB0 + 1);
  v40 = std::string::append(&v128, v38, v39);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append(&v129, " INT, ");
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A027 >= 0)
    v44 = (const std::string::value_type *)&xmmword_10041A010;
  else
    v44 = (const std::string::value_type *)xmmword_10041A010;
  if (byte_10041A027 >= 0)
    v45 = byte_10041A027;
  else
    v45 = *((_QWORD *)&xmmword_10041A010 + 1);
  v46 = std::string::append(&v130, v44, v45);
  v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  v48 = std::string::append(&v131, " INT, ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FDF >= 0)
    v50 = (const std::string::value_type *)&qword_100419FC8;
  else
    v50 = (const std::string::value_type *)qword_100419FC8;
  if (byte_100419FDF >= 0)
    v51 = byte_100419FDF;
  else
    v51 = *(_QWORD *)&dword_100419FD0;
  v52 = std::string::append(&v132, v50, v51);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v133, " INT, ");
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FF7 >= 0)
    v56 = (const std::string::value_type *)&qword_100419FE0;
  else
    v56 = (const std::string::value_type *)qword_100419FE0;
  if (byte_100419FF7 >= 0)
    v57 = byte_100419FF7;
  else
    v57 = qword_100419FE8;
  v58 = std::string::append(&v134, v56, v57);
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v135, " INT NOT NULL, ");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v62 = (const std::string::value_type *)&qword_10041A028;
  else
    v62 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v63 = byte_10041A03F;
  else
    v63 = qword_10041A030;
  v64 = std::string::append(&v136, v62, v63);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v137, " INT, ");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A057 >= 0)
    v68 = (const std::string::value_type *)&qword_10041A040;
  else
    v68 = (const std::string::value_type *)qword_10041A040;
  if (byte_10041A057 >= 0)
    v69 = byte_10041A057;
  else
    v69 = *(_QWORD *)&byte_10041A048;
  v70 = std::string::append(&v138, v68, v69);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v72 = std::string::append(&v139, " BLOB);");
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v72->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_77;
      goto LABEL_147;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_148;
  }
LABEL_147:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_149;
  }
LABEL_148:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_150;
  }
LABEL_149:
  operator delete(v135.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_80:
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_151;
  }
LABEL_150:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_152;
  }
LABEL_151:
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_82:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_153;
  }
LABEL_152:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_154;
  }
LABEL_153:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_155;
  }
LABEL_154:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_85:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_156;
  }
LABEL_155:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_86:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_87:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v127.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_159;
  }
LABEL_158:
  operator delete(v126.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_160;
  }
LABEL_159:
  operator delete(v125.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_161;
  }
LABEL_160:
  operator delete(v141.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v124.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
    goto LABEL_163;
  }
LABEL_162:
  operator delete(v123.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_164;
  }
LABEL_163:
  operator delete(v122.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_165;
  }
LABEL_164:
  operator delete(v121.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_95:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_166;
  }
LABEL_165:
  operator delete(v120.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_167:
    operator delete(v118.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_168;
  }
LABEL_166:
  operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_167;
LABEL_97:
  if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_98;
LABEL_168:
  operator delete(v117.__r_.__value_.__l.__data_);
LABEL_98:
  if ((buf[23] & 0x80u) == 0)
    v74 = buf;
  else
    v74 = *(uint8_t **)buf;
  sub_10008E514(*(sqlite3 ***)(a1 + 40), (const char *)v74, "Failed to create venues table");
  if (qword_100417F08 == -1)
  {
    v75 = (id)qword_100417F10;
    if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
      goto LABEL_104;
    goto LABEL_103;
  }
  dispatch_once(&qword_100417F08, &stru_1003FC628);
  v75 = (id)qword_100417F10;
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
  {
LABEL_103:
    LOWORD(v139.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "Creating table for tiles", (uint8_t *)&v139, 2u);
  }
LABEL_104:

  v76 = (char *)operator new(0x20uLL);
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
  *(_OWORD *)&v125.__r_.__value_.__r.__words[1] = v116;
  *(_OWORD *)v76 = v115[1];
  *(_OWORD *)(v76 + 11) = v115[0];
  v76[27] = 0;
  v77 = std::string::append(&v125, "tile_data");
  v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v126.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  v79 = std::string::append(&v126, "(");
  v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v80;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v81 = (const std::string::value_type *)&qword_100419F80;
  else
    v81 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v82 = byte_100419F97;
  else
    v82 = *(_QWORD *)&byte_100419F88;
  v83 = std::string::append(&v127, v81, v82);
  v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  v85 = std::string::append(&v128, " INTEGER PRIMARY KEY, ");
  v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  v87 = std::string::append(&v129, "headers");
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = std::string::append(&v130, " BLOB NOT NULL, ");
  v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  v91 = std::string::append(&v131, "tiles");
  v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  v93 = std::string::append(&v132, " BLOB NOT NULL, ");
  v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  v95 = std::string::append(&v133, "FOREIGN KEY (");
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v97 = (const std::string::value_type *)&qword_100419F80;
  else
    v97 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v98 = byte_100419F97;
  else
    v98 = *(_QWORD *)&byte_100419F88;
  v99 = std::string::append(&v134, v97, v98);
  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  v135.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  v101 = std::string::append(&v135, ") REFERENCES ");
  v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  v103 = std::string::append(&v136, "venues");
  v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v104;
  v103->__r_.__value_.__l.__size_ = 0;
  v103->__r_.__value_.__r.__words[2] = 0;
  v103->__r_.__value_.__r.__words[0] = 0;
  v105 = std::string::append(&v137, "(");
  v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v107 = (const std::string::value_type *)&qword_100419F80;
  else
    v107 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v108 = byte_100419F97;
  else
    v108 = *(_QWORD *)&byte_100419F88;
  v109 = std::string::append(&v138, v107, v108);
  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  v111 = std::string::append(&v139, ") ON DELETE CASCADE ON UPDATE RESTRICT);");
  v112 = v111->__r_.__value_.__r.__words[0];
  v141.__r_.__value_.__r.__words[0] = v111->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v111->__r_.__value_.__r.__words[1] + 7);
  v113 = HIBYTE(v111->__r_.__value_.__r.__words[2]);
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = v112;
  *(_QWORD *)&buf[8] = v141.__r_.__value_.__r.__words[0];
  *(_QWORD *)&buf[15] = *(std::string::size_type *)((char *)v141.__r_.__value_.__r.__words + 7);
  buf[23] = v113;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_171;
    }
  }
  else if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_126;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_127:
    if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_128;
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_128:
    if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_129;
    goto LABEL_173;
  }
LABEL_172:
  operator delete(v136.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_129:
    if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v135.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_130:
    if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_131;
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v134.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v133.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_176;
  }
LABEL_175:
  operator delete(v133.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_133;
    goto LABEL_177;
  }
LABEL_176:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_133:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_134;
    goto LABEL_178;
  }
LABEL_177:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_134:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
    goto LABEL_179;
  }
LABEL_178:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_135:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_136;
    goto LABEL_180;
  }
LABEL_179:
  operator delete(v129.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_136:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_137;
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v128.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_137:
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_138;
LABEL_182:
    operator delete(v126.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_139;
    goto LABEL_183;
  }
LABEL_181:
  operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_182;
LABEL_138:
  if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_139;
LABEL_183:
  operator delete(v125.__r_.__value_.__l.__data_);
LABEL_139:
  if ((buf[23] & 0x80u) == 0)
    v114 = buf;
  else
    v114 = *(uint8_t **)buf;
  sub_10008E514(*(sqlite3 ***)(a1 + 40), (const char *)v114, "Failed to create tile data table");
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
}

void sub_10002EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  uint64_t v77;

  if (*(char *)(v77 - 137) < 0)
  {
    operator delete(*(void **)(v77 - 160));
    if ((*(char *)(v77 - 169) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v77 - 201) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(char *)(v77 - 169) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v77 - 192));
  if ((*(char *)(v77 - 201) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v77 - 233) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(v77 - 224));
  if ((*(char *)(v77 - 233) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(*(void **)(v77 - 256));
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  operator delete((void *)STACK[0x270]);
  if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x250]);
  if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x230]);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((*(char *)(v77 - 105) & 0x80000000) == 0)
LABEL_34:
      _Unwind_Resume(a1);
LABEL_33:
    operator delete(*(void **)(v77 - 128));
    _Unwind_Resume(a1);
  }
LABEL_32:
  operator delete(a47);
  if ((*(char *)(v77 - 105) & 0x80000000) == 0)
    goto LABEL_34;
  goto LABEL_33;
}

_QWORD *sub_10002F3EC(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (_QWORD *)a1[8];
  while (v2)
  {
    v7 = v2;
    v2 = (_QWORD *)*v2;
    v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    operator delete(v7);
  }
  v3 = (void *)a1[6];
  a1[6] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[3];
  while (v4)
  {
    v11 = v4;
    v4 = (_QWORD *)*v4;
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  v5 = (void *)a1[1];
  a1[1] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_10002F4E4(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  uint64_t result;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "CLOutdoorPosition");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "latlon", 12, 2);
  v11 = v10 + sub_10002A2B8(a1 + 32, a2);
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = *(_WORD *)(a1 + 136);
  if ((v13 & 0x10) != 0)
  {
    v27 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "provider", 11, 3);
    v28 = v27 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 64);
    v12 += v28 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v13 = *(_WORD *)(a1 + 136);
    if ((v13 & 0x20) == 0)
    {
LABEL_4:
      if ((v13 & 0x40) == 0)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  else if ((v13 & 0x20) == 0)
  {
    goto LABEL_4;
  }
  v29 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "altitude", 4, 4);
  v30 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 88));
  v12 = v29 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v30;
  v13 = *(_WORD *)(a1 + 136);
  if ((v13 & 0x40) == 0)
  {
LABEL_5:
    if ((v13 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_14:
  v31 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "horizontalAccuracy", 4, 5);
  v32 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 96));
  v12 = v31 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v32;
  if ((*(_WORD *)(a1 + 136) & 0x80) != 0)
  {
LABEL_6:
    v14 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "speed", 4, 6);
    v15 = v12 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 104));
    v12 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v15;
  }
LABEL_7:
  v16 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "receivedTimestampNanos", 10, 7);
  v17 = v12 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 16));
  v18 = v16 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "simulationTimestampNanos", 10, 8);
  v20 = v19 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 24));
  v21 = v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v17;
  v22 = *(_WORD *)(a1 + 136);
  if ((v22 & 0x100) == 0)
  {
    if ((*(_WORD *)(a1 + 136) & 0x200) == 0)
      goto LABEL_9;
LABEL_17:
    v35 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "horzUncSemiMin", 4, 10);
    v36 = v21 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 120));
    v21 = v35 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v36;
    if ((*(_WORD *)(a1 + 136) & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v33 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "horzUncSemiMaj", 4, 9);
  v34 = v33 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 112));
  v21 += v34 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v22 = *(_WORD *)(a1 + 136);
  if ((v22 & 0x200) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v22 & 0x400) != 0)
  {
LABEL_10:
    v23 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "horzUncSemiMajAz", 4, 11);
    v24 = v21 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 128));
    v21 = v23 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v24;
  }
LABEL_11:
  v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v25 + v21 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10002F98C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if (*(_BYTE *)(a1 + 40))
  {
    sub_100073074((_QWORD *)(a1 + 48));
    *(_BYTE *)(a1 + 40) = 0;
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 0);
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_10002FA04(_QWORD *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  uint64_t v12;
  _BYTE buf[12];
  __int16 v14;
  _DWORD __p[6];

  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_100406458);
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v14 = 1024;
    __p[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Stopping sensor collection %p %d", buf, 0x12u);
  }
LABEL_4:
  sub_10002FE00(a2, (uint64_t)buf);
  if (((*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 40))(a1, buf) & 1) != 0)
    goto LABEL_8;
  if (qword_100417ED8 == -1)
  {
    v5 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_once(&qword_100417ED8, &stru_100406458);
  v5 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    v6 = (uint64_t)(a1[4] - a1[3]) >> 3;
    v10[0] = 67109376;
    v10[1] = a2;
    v11 = 2048;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "WARNING: Attempt to stop control group %d but no matching sensors found (%zu sensors available)", (uint8_t *)v10, 0x12u);
  }
LABEL_8:
  v7 = *(_QWORD **)((char *)__p + 2);
  if (*(_QWORD *)((char *)__p + 2))
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v9)
    operator delete(v9);
}

void sub_10002FBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10022CAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10002FBFC(_QWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _DWORD v11[2];
  __int16 v12;
  uint64_t v13;
  uint8_t buf[8];
  __int16 v15;
  _QWORD __p[3];

  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_100406458);
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    v15 = 2048;
    __p[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting up sensor collection %d with %zu sensors in collection", buf, 0x12u);
  }
LABEL_4:
  sub_10002FE00(a2, (uint64_t)buf);
  if (((*(uint64_t (**)(_QWORD *, uint8_t *))(*a1 + 16))(a1, buf) & 1) != 0)
    goto LABEL_8;
  if (qword_100417ED8 == -1)
  {
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_once(&qword_100417ED8, &stru_100406458);
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_7:
    v7 = (uint64_t)(a1[4] - a1[3]) >> 3;
    v11[0] = 67109376;
    v11[1] = a2;
    v12 = 2048;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WARNING: Attempt to start control group %d but no matching sensors found (%zu sensors available)", (uint8_t *)v11, 0x12u);
  }
LABEL_8:
  v8 = *(_QWORD **)((char *)__p + 6);
  if (*(_QWORD *)((char *)__p + 6))
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)buf;
  *(_QWORD *)buf = 0;
  if (v10)
    operator delete(v10);
}

void sub_10002FDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10022CAC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002FE00@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  _BYTE v6[24];
  std::string v7;
  std::runtime_error v8;
  const char *v9;
  _QWORD v10[7];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  switch(a1)
  {
    case 0:
      LODWORD(v9) = 1;
      sub_100030194(a2, (int *)&v9, &v9);
      v9 = sub_1000304B4();
      v10[0] = v3;
      if (sub_1000AC110((uint64_t)&v9, (_BYTE *)v10 + 1))
      {
        LODWORD(v9) = 11;
        sub_100030194(a2, (int *)&v9, &v9);
      }
      LODWORD(v9) = 17;
      result = sub_100030194(a2, (int *)&v9, &v9);
      break;
    case 1:
      LODWORD(v9) = 8;
      sub_100030194(a2, (int *)&v9, &v9);
      LODWORD(v9) = 16;
      result = sub_100030194(a2, (int *)&v9, &v9);
      break;
    case 2:
      LODWORD(v9) = 14;
      result = sub_100030194(a2, (int *)&v9, &v9);
      break;
    case 3:
      LODWORD(v9) = 1;
      sub_100030194(a2, (int *)&v9, &v9);
      v9 = sub_1000304B4();
      v10[0] = v5;
      if (sub_1000AC110((uint64_t)&v9, (_BYTE *)v10 + 1))
      {
        LODWORD(v9) = 11;
        sub_100030194(a2, (int *)&v9, &v9);
      }
      LODWORD(v9) = 7;
      sub_100030194(a2, (int *)&v9, &v9);
      LODWORD(v9) = 14;
      sub_100030194(a2, (int *)&v9, &v9);
      LODWORD(v9) = 17;
      sub_100030194(a2, (int *)&v9, &v9);
      LODWORD(v9) = 8;
      sub_100030194(a2, (int *)&v9, &v9);
      LODWORD(v9) = 16;
      result = sub_100030194(a2, (int *)&v9, &v9);
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v7, "Unsupported control group to get thrift types for");
      std::runtime_error::runtime_error(&v8, &v7);
      v8.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)v6);
      sub_1000F2F7C(&v8, (uint64_t)"static std::unordered_set<SensorType> SensorManager::getAcceptedTypes(ControlGroup)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/sensors/sensor_manager.cpp", 85, (uint64_t)v6);
  }
  return result;
}

void sub_100030094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,std::runtime_error a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  sub_1000F3264(&a21);
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a20);
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_10022CAC0(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  sub_10022CAC0(v21);
  _Unwind_Resume(a1);
}

uint64_t *sub_100030194(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1000304A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const char *sub_1000304B4()
{
  return "SCAN_BLUETOOTH";
}

uint64_t sub_1000304C4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;

  v4 = (_QWORD *)a1[3];
  v5 = (_QWORD *)a1[4];
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4);
      v9 = a2[1];
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v11 = v8;
          if (v9 <= v8)
            v11 = v8 % v9;
        }
        else
        {
          v11 = (v9 - 1) & v8;
        }
        v12 = *(uint64_t ***)(*a2 + 8 * v11);
        if (v12)
        {
          v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              v14 = v9 - 1;
              while (1)
              {
                v16 = v13[1];
                if (v16 == v8)
                {
                  if (*((_DWORD *)v13 + 4) == v8)
                    goto LABEL_3;
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_4;
                }
                v13 = (uint64_t *)*v13;
                if (!v13)
                  goto LABEL_4;
              }
            }
            do
            {
              v15 = v13[1];
              if (v15 == v8)
              {
                if (*((_DWORD *)v13 + 4) == v8)
                {
LABEL_3:
                  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
                  v6 = 1;
                  break;
                }
              }
              else
              {
                if (v15 >= v9)
                  v15 %= v9;
                if (v15 != v11)
                  break;
              }
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_4:
      ++v4;
    }
    while (v4 != v5);
  }
  v17 = (int *)a2[2];
  if (v17)
  {
    v18 = a1 + 6;
    do
    {
      sub_100030638(v18, v17 + 4);
      v17 = *(int **)v17;
    }
    while (v17);
  }
  return v6 & 1;
}

uint64_t sub_100030638(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v12;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != (_DWORD)v3)
    goto LABEL_11;
LABEL_22:
  sub_10002BB38(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
  return 1;
}

uint64_t sub_10003074C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 32);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4);
      v9 = a2[1];
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          v11 = v8;
          if (v9 <= v8)
            v11 = v8 % v9;
        }
        else
        {
          v11 = (v9 - 1) & v8;
        }
        v12 = *(uint64_t ***)(*a2 + 8 * v11);
        if (v12)
        {
          v13 = *v12;
          if (v13)
          {
            if (v10.u32[0] < 2uLL)
            {
              v14 = v9 - 1;
              while (1)
              {
                v16 = v13[1];
                if (v16 == v8)
                {
                  if (*((_DWORD *)v13 + 4) == v8)
                    goto LABEL_3;
                }
                else if ((v16 & v14) != v11)
                {
                  goto LABEL_4;
                }
                v13 = (uint64_t *)*v13;
                if (!v13)
                  goto LABEL_4;
              }
            }
            do
            {
              v15 = v13[1];
              if (v15 == v8)
              {
                if (*((_DWORD *)v13 + 4) == v8)
                {
LABEL_3:
                  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
                  v6 = 1;
                  break;
                }
              }
              else
              {
                if (v15 >= v9)
                  v15 %= v9;
                if (v15 != v11)
                  break;
              }
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_4:
      ++v4;
    }
    while (v4 != v5);
  }
  v17 = (int *)a2[2];
  if (v17)
  {
    v18 = a1 + 48;
    do
    {
      sub_1000308C4(v18, v17 + 4, v17 + 4);
      v17 = *(int **)v17;
    }
    while (v17);
  }
  return v6 & 1;
}

uint64_t *sub_1000308C4(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100030BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100030BE4()
{
  return 14;
}

uint64_t sub_100030BEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_100030BF4()
{
  return 22;
}

uint64_t sub_100030BFC()
{
  return 1;
}

uint64_t sub_100030C04()
{
  return 16;
}

uint64_t sub_100030C0C()
{
  return 17;
}

uint64_t sub_100030C14()
{
  return 11;
}

void sub_100030C1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  std::__shared_weak_count *v11;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v4 = (std::__shared_weak_count *)i[3];
    v10 = (uint64_t **)i[2];
    v11 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    sub_100031624(a2, &v10, (uint64_t)&v10);
    v7 = v11;
    if (v11)
    {
      v8 = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_100030CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100195804((uint64_t)&a9);
  sub_1000F7AE8(v9);
  _Unwind_Resume(a1);
}

void sub_100030CF0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  int buf;
  uint64_t buf_4;
  __int16 buf_12;
  int buf_14;

  if (qword_100417ED8 == -1)
  {
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_4:
      sub_1000C8690((_OWORD *)(a1 + 2184));
      sub_100009C50();
    }
  }
  buf = 134218240;
  buf_4 = a2;
  buf_12 = 1024;
  buf_14 = a3;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Getting a forceReset at timestamp %lld, localizerType %d", (uint8_t *)&buf, 0x12u);
  goto LABEL_4;
}

void sub_100031480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::bad_cast a24,uint64_t a25)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100031394);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100031624(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v7 = sub_1000B40D8((uint64_t)v31, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = *(void **)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x20uLL);
  v31[0] = v12;
  v31[1] = a1 + 16;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v32 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *(_QWORD *)v12 = *v19;
LABEL_61:
      *v19 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v28 & v8;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v8));
      if (v19)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v18 + 8 * v3) = v15;
  if (*(_QWORD *)v12)
  {
    v29 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_100031950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100031964(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  *a1 = off_1004061E8;
  v2 = (_QWORD *)a1[7];
  while (v2)
  {
    v11 = v2;
    v2 = (_QWORD *)*v2;
    v12 = (std::__shared_weak_count *)v11[5];
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    v13 = (std::__shared_weak_count *)v11[3];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    operator delete(v11);
  }
  v3 = (void *)a1[5];
  a1[5] = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = (std::__shared_weak_count *)a1[2];
      if (v7)
        goto LABEL_9;
      return a1;
    }
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7)
    return a1;
LABEL_9:
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_100031AA0(sqlite3 **a1)
{
  os_activity_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t result;
  NSObject *v12;
  int *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  int *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v29;
  uint64_t v30;
  std::string v31;
  _BYTE v32[24];
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::runtime_error v37;
  std::string __dst;
  uint8_t buf[23];
  char v40;

  v40 = 20;
  strcpy((char *)buf, "PRAGMA user_version;");
  v2 = _os_activity_create((void *)&_mh_execute_header, "query DB version", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  sub_100032CE0(a1, (uint64_t)buf, v2, (uint64_t)&pStmt);

  if (v40 < 0)
    operator delete(*(void **)buf);
  v3 = 0;
  v4 = 2;
  v5 = pStmt;
  v6 = pStmt;
  while (1)
  {
    v7 = sqlite3_step(v6);
    v8 = v7;
    if (v7 != 100)
    {
      if (v7 != 101)
      {
        if (v7 != 19)
        {
          sub_10008B9C4(v7, db);
          if (v8)
          {
            v13 = __error();
            sub_10025FF8C(*v13, &__dst);
            __cxa_allocate_exception(0x40uLL);
            *((_BYTE *)&v34.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v34, " w/ ");
            v14 = std::string::insert(&v34, 0, "Failed sqlite3_step");
            v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              sub_10006CED8(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              v33 = __dst;
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = &v33;
            else
              v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
            else
              size = v33.__r_.__value_.__l.__size_;
            v18 = std::string::append(&v35, (const std::string::value_type *)v16, size);
            v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(&v37, &v36);
            v37.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
            sub_10018D04C((uint64_t)v32);
            sub_1001F2298(&v37, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v32);
          }
          goto LABEL_14;
        }
        if (qword_100417F08 == -1)
        {
          v12 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
            goto LABEL_26;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v12 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          {
LABEL_26:
            __cxa_allocate_exception(0x40uLL);
            v31.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = xmmword_100392530;
            strcpy(v31.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
            std::runtime_error::runtime_error((std::runtime_error *)&v36, &v31);
            v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
            sub_10018D04C((uint64_t)&v30);
            sub_1001F9F6C((std::runtime_error *)&v36, (uint64_t)"auto db::resources::statement<1, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v30);
          }
        }
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        goto LABEL_26;
      }
      v9 = sqlite3_reset(pStmt);
      sub_10008B9C4(v9, db);
      if (v9)
      {
        v20 = __error();
        sub_10025FF8C(*v20, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((_BYTE *)&v34.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v34, " w/ ");
        v21 = std::string::insert(&v34, 0, "Failed to execute query");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_10006CED8(&v33, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v33 = __dst;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v33;
        else
          v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
        else
          v24 = v33.__r_.__value_.__l.__size_;
        v25 = std::string::append(&v35, (const std::string::value_type *)v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v37, &v36);
        v37.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
        sub_10018D04C((uint64_t)v32);
        sub_1001F2298(&v37, (uint64_t)"void db::resources::statement<1, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:169:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v32);
      }
      if (qword_100417F08 == -1)
      {
        v10 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_19:
          sub_10003320C((uint64_t)&pStmt);

          return v4 | (unint64_t)(v3 << 32);
        }
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v10 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_19;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "DB version retrieved from db = %d", buf, 8u);
      goto LABEL_19;
    }
    if ((_DWORD)v3)
      break;
    if (sqlite3_column_type(v5, 0) == 5)
    {
      v3 = 0;
      v6 = pStmt;
    }
    else
    {
      v3 = sqlite3_column_int(v5, 0);
      if ((_DWORD)v3)
        v4 = 0;
LABEL_14:
      v6 = pStmt;
    }
  }
  sub_100342D00();
  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 170, "operator()");
  __break(1u);
  return result;
}

void sub_100032754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  std::runtime_error *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;

  std::runtime_error::~runtime_error(v71);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if (a40 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a15);
  if (a40 < 0)
  {
LABEL_4:
    operator delete(a35);
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v73 - 192) = v72;
    if (*(char *)(v73 - 161) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a28);
  *(_QWORD *)(v73 - 192) = v72;
  if (*(char *)(v73 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v73 - 184));
    if ((a46 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v73 - 144) = &off_1003EDD90;
    v75 = *(_QWORD *)(v73 - 136);
    if (!v75)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a41);
  *(_QWORD *)(v73 - 144) = &off_1003EDD90;
  v75 = *(_QWORD *)(v73 - 136);
  if (!v75)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 32))(v75))
    *(_QWORD *)(v73 - 136) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v73 - 160));
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v73 - 232));
  if (*(char *)(v73 - 233) < 0)
    operator delete(*(void **)(v73 - 256));
  if (a59 < 0)
    operator delete(a54);
  if (a71 < 0)
    operator delete(a66);
  if (a65 < 0)
    operator delete(a60);
  __cxa_free_exception(v71);
  if (*(char *)(v73 - 193) < 0)
  {
    operator delete(*(void **)(v73 - 216));
    sub_1001E48C8((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_1001E48C8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_100032CE0(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 1UL, nQueries = 0UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_100032FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001E48C8(v68);

            _Unwind_Resume(a1);
          }
          sub_1001E48C8(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_10003320C(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_1000333C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000333F0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003F1A88;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100033480(a1, a2);
  return a1;
}

void sub_100033450(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10003346C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100033480(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  _BYTE v26[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v26, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPOutdoorEstimatorLogEntry.pb.cc", 1066);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v25, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
    v4 = *(_DWORD *)(a2 + 92);
    if (!(_BYTE)v4)
      goto LABEL_45;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 92);
    if (!(_BYTE)v4)
      goto LABEL_45;
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 1u;
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      v7 = *(_QWORD *)(qword_10041A998 + 16);
    sub_100033AC8(v6, v7);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 2u;
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_10041A998 + 24);
    sub_100118980(v8, v9);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 4) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 4u;
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10)
      operator new();
    v11 = *(_QWORD *)(a2 + 32);
    if (!v11)
      v11 = *(_QWORD *)(qword_10041A998 + 32);
    sub_100118AF8(v10, v11);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 8) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 8u;
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      operator new();
    v13 = *(_QWORD *)(a2 + 40);
    if (!v13)
      v13 = *(_QWORD *)(qword_10041A998 + 40);
    sub_100118CB4(v12, v13);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 0x10) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 0x10u;
    v14 = *(_QWORD *)(a1 + 48);
    if (!v14)
      operator new();
    v15 = *(_QWORD *)(a2 + 48);
    if (!v15)
      v15 = *(_QWORD *)(qword_10041A998 + 48);
    sub_100118E3C(v14, v15);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 0x20u;
    v16 = *(_QWORD *)(a1 + 56);
    if (!v16)
      operator new();
    v17 = *(_QWORD *)(a2 + 56);
    if (!v17)
      v17 = *(_QWORD *)(qword_10041A998 + 56);
    sub_1001190C0(v16, v17);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 0x40) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 0x40u;
    v18 = *(_QWORD *)(a1 + 64);
    if (!v18)
      operator new();
    v19 = *(_QWORD *)(a2 + 64);
    if (!v19)
      v19 = *(_QWORD *)(qword_10041A998 + 64);
    sub_100119238(v18, v19);
    v4 = *(_DWORD *)(a2 + 92);
  }
  if ((v4 & 0x80) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 0x80u;
    v20 = *(_QWORD *)(a1 + 72);
    if (!v20)
      operator new();
    v21 = *(_QWORD *)(a2 + 72);
    if (!v21)
      v21 = *(_QWORD *)(qword_10041A998 + 72);
    sub_1001193B0(v20, v21);
    v4 = *(_DWORD *)(a2 + 92);
  }
LABEL_45:
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 92) |= 0x100u;
    v22 = *(_QWORD *)(a1 + 80);
    if (!v22)
      operator new();
    v23 = *(_QWORD *)(a2 + 80);
    if (!v23)
      v23 = *(_QWORD *)(qword_10041A998 + 80);
    sub_100119528(v22, v23);
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_1000339A4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100033AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100033AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100033AC8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v16, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPOutdoorEstimatorLogEntry.pb.cc", 1788);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v15, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
    LOBYTE(v4) = *(_BYTE *)(a2 + 60);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 60);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 60) |= 1u;
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      v7 = *(_QWORD *)(qword_10041A9A8 + 16);
    sub_100033D24(v6, v7);
    v4 = *(_DWORD *)(a2 + 60);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 60) |= 2u;
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      operator new();
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_10041A9A8 + 24);
    sub_100033D24(v8, v9);
    v4 = *(_DWORD *)(a2 + 60);
  }
  if ((v4 & 4) != 0)
  {
    v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(_DWORD *)(a1 + 32) = v12;
    v4 = *(_DWORD *)(a2 + 60);
    if ((v4 & 8) == 0)
    {
LABEL_17:
      if ((v4 & 0x10) == 0)
        goto LABEL_18;
LABEL_23:
      v14 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 60) |= 0x10u;
      *(_QWORD *)(a1 + 40) = v14;
      if ((*(_DWORD *)(a2 + 60) & 0x20) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_19;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_17;
  }
  v13 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) |= 8u;
  *(_DWORD *)(a1 + 36) = v13;
  v4 = *(_DWORD *)(a2 + 60);
  if ((v4 & 0x10) != 0)
    goto LABEL_23;
LABEL_18:
  if ((v4 & 0x20) != 0)
  {
LABEL_19:
    v10 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(_QWORD *)(a1 + 48) = v10;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100033CD0()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100033CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100033D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100033D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/protobuf/clpsensorsurvey/Proto/CLPOutdoorEstimatorLogEntry.pb.cc", 1374);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0)
      goto LABEL_6;
LABEL_10:
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) |= 2u;
    *(_QWORD *)(a1 + 24) = v9;
    if ((*(_DWORD *)(a2 + 44) & 4) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) |= 1u;
  *(_QWORD *)(a1 + 16) = v8;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 2) != 0)
    goto LABEL_10;
LABEL_6:
  if ((v5 & 4) != 0)
  {
LABEL_7:
    v6 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 4u;
    *(_QWORD *)(a1 + 32) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100033E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100033E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100033E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  v4 = a1 + 8;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(v7, "");
    sub_10015D524("Unexpected request to record legacy data for ", &v9);
    sub_1000F8A40(v4, &v10);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_10005F09C(a1);
  sub_10003400C(a2, (_DWORD *)(a1 + 80));
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_100033F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003400C(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "TimeMappingDiag");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "systemTimestampNanos", 10, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "source", 8, 3);
  LODWORD(a1) = v13
              + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 24));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = v12 + a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000341C8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  double *i;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  int v44;
  int v45;
  int v46;
  uint64_t result;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "HealthIndicators");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbPipelinedSaysYield", 4, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbCoarseIndoorSaysIndoor", 4, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbWifiSaysIndoor", 4, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 24));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbGpsSaysIndoor", 4, 4);
  v17 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 32));
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbParticleFilterSaysYield", 4, 5);
  v20 = v19 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 40));
  v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbOnFloors", 4, 6);
  v23 = v22 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 48));
  v24 = v23 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v25 = v24
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbOnFloor", 15, 7);
  v26 = v21
      + v25
      + (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 4, (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3);
  for (i = *(double **)(a1 + 56);
        i != *(double **)(a1 + 64);
        v26 += (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, v28))
  {
    v28 = *i++;
  }
  v29 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 96))(a2);
  v30 = v26 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v31 = v29
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbInlier", 4, 8);
  v32 = v31 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 80)) + v30;
  v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v34 = v33
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbLocalizerIoWrapperSaysWifiOk", 4, 9);
  v35 = v34 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 88));
  v36 = v32 + v35 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v37 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbInjectionOccupancyRetryLimitOk", 4, 10);
  v38 = v37 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 96));
  v39 = v38 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v40 = v39
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbInjectionGainRetryLimitOk", 4, 11);
  v41 = v36 + v40 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 104));
  v42 = v41 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v43 = *(_BYTE *)(a1 + 152);
  if ((v43 & 1) != 0)
  {
    v48 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "pfYieldStatusBeforeCalculatePose", 8, 12);
    v49 = v48 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 112));
    v42 += v49 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v43 = *(_BYTE *)(a1 + 152);
    if ((v43 & 2) == 0)
    {
LABEL_6:
      if ((v43 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 152) & 2) == 0)
  {
    goto LABEL_6;
  }
  v50 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "yieldStatusBeforeCalculatePose", 8, 13);
  v51 = v42 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 116));
  v42 = v50 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v51;
  v43 = *(_BYTE *)(a1 + 152);
  if ((v43 & 4) == 0)
  {
LABEL_7:
    if ((v43 & 8) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v52 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "motionUpdateSource", 8, 14);
  v53 = v42 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 120));
  v42 = v52 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v53;
  v43 = *(_BYTE *)(a1 + 152);
  if ((v43 & 8) == 0)
  {
LABEL_8:
    if ((v43 & 0x10) == 0)
      goto LABEL_9;
LABEL_16:
    v56 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbRawCLOutdoorServiceSaysIndoor", 4, 16);
    v57 = v42 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 136));
    v42 = v56 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v57;
    if ((*(_BYTE *)(a1 + 152) & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_15:
  v54 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbZAxisSaysIndoor", 4, 15);
  v55 = v42 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 128));
  v42 = v54 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v55;
  v43 = *(_BYTE *)(a1 + 152);
  if ((v43 & 0x10) != 0)
    goto LABEL_16;
LABEL_9:
  if ((v43 & 0x20) != 0)
  {
LABEL_10:
    v44 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "prbCoarseIndoorSaysIndoorWifiAndGps", 4, 17);
    v45 = v42 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 144));
    v42 = v44 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v45;
  }
LABEL_11:
  v46 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v46 + v42 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000348AC(uint64_t a1, uint64_t a2, std::ios_base *a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  char v21;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  char v26;
  char *v27;
  std::string *v28;
  int64_t v29;
  int64_t v30;
  std::string::size_type v31;
  int64_t v32;
  char *v33;
  int v34;
  std::string *v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const std::locale::facet *v43;
  std::string::value_type v44;
  char *v45;
  size_t v46;
  std::string::size_type v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  size_t v53;
  char v54;
  std::string::size_type v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  char *v59;
  char *v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char *v67;
  int64_t v68;
  std::string *v69;
  int64_t v70;
  int64_t v71;
  char *v72;
  int v73;
  int64_t v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  size_t v79;
  char *v80;
  std::string *v81;
  int64_t v82;
  std::string *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  std::string *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  char *v91;
  int v92;
  std::string *v93;
  int64_t v94;
  char *v95;
  char *v96;
  std::locale::__imp *v97;
  std::locale::__imp *v98;
  std::ios_base *v99;
  _QWORD *v100;
  size_t v101;
  unsigned __int8 v102;
  char *p_p;
  uint64_t v104;
  std::string *v105;
  std::string::size_type v106;
  std::string::size_type v107;
  std::string *v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  std::string *v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  char *v120;
  int v121;
  std::string *v122;
  int64_t v123;
  char *v124;
  char *v125;
  std::locale::__imp *v126;
  std::locale::__imp *v127;
  std::ios_base *v128;
  _QWORD *v129;
  size_t v130;
  unsigned __int8 v131;
  char *v132;
  uint64_t v133;
  std::string *v134;
  std::string::size_type v135;
  std::string::size_type v136;
  std::string *v137;
  uint64_t v138;
  std::string::size_type v139;
  std::string *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  int64_t v144;
  std::string *v145;
  int64_t v146;
  int64_t v147;
  char *v148;
  int v149;
  int64_t v150;
  std::string *v151;
  int64_t v152;
  char *v153;
  char *v154;
  size_t v155;
  char *v156;
  std::string *v157;
  int64_t v158;
  std::string *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  int64_t v163;
  std::string *v164;
  int64_t v165;
  char *v166;
  int v167;
  int64_t v168;
  std::string *v169;
  int64_t v170;
  char *v171;
  char *v172;
  size_t v173;
  char *v174;
  std::string *v175;
  int64_t v176;
  std::string *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  std::string *v181;
  int64_t v182;
  int64_t v183;
  int64_t v184;
  char *v185;
  int v186;
  std::string *v187;
  int64_t v188;
  char *v189;
  char *v190;
  std::locale::__imp *v191;
  unint64_t v192;
  std::locale::__imp *locale;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  size_t v199;
  char *v200;
  std::locale::__imp *v201;
  std::string *v202;
  std::string::size_type v203;
  char *v204;
  char *v205;
  std::string *v206;
  std::string::size_type v207;
  std::string *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  int64_t v212;
  int64_t v213;
  int64_t v214;
  char *v215;
  int v216;
  std::string *v217;
  int64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const std::ios_base *v225;
  unint64_t v226;
  const std::locale::facet *v227;
  std::string::value_type v228;
  const std::string::value_type *v229;
  std::string::size_type v230;
  size_t v231;
  char v232;
  std::string::size_type v233;
  std::string *p_dst;
  std::string *v235;
  std::string::size_type v236;
  char *v237;
  std::string *v238;
  std::string::size_type v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  std::string *v243;
  size_t v244;
  std::string::size_type v245;
  std::string *v246;
  std::string *v247;
  std::string::size_type v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  std::string *v252;
  uint64_t v253;
  unsigned int v256;
  std::ios_base *v257;
  std::string v259;
  void *__p;
  uint64_t v261;
  unsigned __int8 v262;
  std::locale v263[2];
  unint64_t v264;
  __int128 v265;
  __int128 v266;
  int v267;
  _QWORD v268[19];
  __int128 v269;
  uint64_t v270;
  std::string v271;
  std::string __dst;

  v5 = a4;
  v7 = *a5;
  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if (*(char *)(a1 + 39) < 0)
      sub_10006CED8(&v271, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    else
      v271 = *(std::string *)(a1 + 16);
    v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
    v13 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
    v14 = &v271;
    size = v271.__r_.__value_.__l.__size_;
    v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
    if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v17 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v17 = v271.__r_.__value_.__l.__size_;
      v14 = (std::string *)v271.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      v18 = 0;
      v19 = v14;
      while (1)
      {
        if (v14->__r_.__value_.__s.__data_[v18] == 37)
        {
          v20 = (std::string *)((char *)&v14->__r_.__value_.__l.__data_ + v18 + 1);
          if (v17 - 1 != v18)
          {
            if (v20->__r_.__value_.__s.__data_[0] == 84)
            {
              v20 = (std::string *)&v14->__r_.__value_.__s.__data_[v18 + 2];
              v21 = -1;
            }
            else
            {
              v21 = 0;
            }
            if ((v21 & 1) != 0)
              break;
          }
        }
        v19 = (std::string *)((char *)v19 + 1);
        if (v17 == ++v18)
          goto LABEL_33;
      }
      if ((std::string *)((char *)v14 + v18) != v20)
      {
        v263[0].__locale_ = (std::locale::__imp *)"%T";
        v263[1].__locale_ = (std::locale::__imp *)"";
        sub_100192F4C(&v271, (uint64_t *)v263, "%H:%M:%S", "", (std::string *)((char *)v14 + v18), v20, "%H:%M:%S", "");
        v13 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        size = v271.__r_.__value_.__l.__size_;
        v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
        v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_33:
    v22 = &v271;
    if ((v12 & 0x80u) != 0)
    {
      v22 = v16;
      v13 = size;
    }
    v257 = a3;
    if (v13)
    {
      v23 = 0;
      v24 = v22;
      while (1)
      {
        if (v22->__r_.__value_.__s.__data_[v23] == 37)
        {
          v25 = (std::string *)((char *)&v22->__r_.__value_.__l.__data_ + v23 + 1);
          if (v13 - 1 != v23)
          {
            if (v25->__r_.__value_.__s.__data_[0] == 82)
            {
              v25 = (std::string *)&v22->__r_.__value_.__s.__data_[v23 + 2];
              v26 = -1;
            }
            else
            {
              v26 = 0;
            }
            if ((v26 & 1) != 0)
              break;
          }
        }
        v24 = (std::string *)((char *)v24 + 1);
        if (v13 == ++v23)
          goto LABEL_48;
      }
      if ((std::string *)((char *)v22 + v23) != v25)
      {
        v263[0].__locale_ = (std::locale::__imp *)"%R";
        v263[1].__locale_ = (std::locale::__imp *)"";
        sub_100192F4C(&v271, (uint64_t *)v263, "%H:%M", "", (std::string *)((char *)v22 + v23), v25, "%H:%M", "");
        v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
      }
    }
LABEL_48:
    v256 = v5;
    v269 = 0uLL;
    v270 = 0;
    v27 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
    if ((v12 & 0x80u) == 0)
      v28 = &v271;
    else
      v28 = v16;
    v29 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0]);
    if (v29)
    {
      v30 = v29;
      v31 = v271.__r_.__value_.__l.__size_;
      v32 = v12;
      if ((v12 & 0x80u) != 0)
        v32 = v271.__r_.__value_.__l.__size_;
      if (v32 >= v29)
      {
        v33 = (char *)v28 + v32;
        v34 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
        v35 = v28;
        do
        {
          v36 = v32 - v30;
          if (v36 == -1)
            break;
          v37 = (char *)memchr(v35, v34, v36 + 1);
          if (!v37)
            break;
          v38 = v37;
          if (!memcmp(v37, v27, v30))
          {
            if (v38 == v33 || v38 - (char *)v28 == -1)
              break;
            goto LABEL_63;
          }
          v35 = (std::string *)(v38 + 1);
          v32 = v33 - (v38 + 1);
        }
        while (v32 >= v30);
      }
LABEL_115:
      v67 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
      v68 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0]);
      if ((v12 & 0x80u) == 0)
        v69 = &v271;
      else
        v69 = v16;
      if ((v12 & 0x80u) == 0)
        v70 = v12;
      else
        v70 = v31;
      if (v68)
      {
        v71 = v68;
        if (v70 >= v68)
        {
          v72 = (char *)v69 + v70;
          v73 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::posix_zone_string_format[0];
          v74 = v70;
          v75 = v69;
          do
          {
            v76 = v74 - v71;
            if (v76 == -1)
              break;
            v77 = (char *)memchr(v75, v73, v76 + 1);
            if (!v77)
              break;
            v78 = v77;
            if (!memcmp(v77, v67, v71))
            {
              if (v78 == v72 || v78 - (char *)v69 == -1)
                break;
              goto LABEL_131;
            }
            v75 = (std::string *)(v78 + 1);
            v74 = v72 - (v78 + 1);
          }
          while (v74 >= v71);
        }
      }
      else
      {
LABEL_131:
        v79 = strlen(v67);
        if (v70 && v79)
        {
          v80 = &v67[v79];
          v81 = (std::string *)((char *)v69 + v70);
          v82 = v70 - 1;
LABEL_136:
          v84 = 0;
          do
          {
            if (v69->__r_.__value_.__s.__data_[v84] != v67[v84])
            {
              v83 = (std::string *)((char *)v69 + v84);
              if (&v67[v84] == v80)
                goto LABEL_142;
LABEL_135:
              v69 = (std::string *)((char *)v69 + 1);
              --v82;
              if (v69 == v81)
                goto LABEL_144;
              goto LABEL_136;
            }
            v85 = v84 + 1;
            if (v82 == v84)
              break;
            v66 = v79 - 1 == v84++;
          }
          while (!v66);
          v83 = (std::string *)((char *)v69 + v85);
          if (&v67[v85] != v80)
            goto LABEL_135;
LABEL_142:
          if (v69 != v83)
          {
            v263[0].__locale_ = (std::locale::__imp *)v67;
            v263[1].__locale_ = (std::locale::__imp *)&v67[v79];
            sub_100193BD4(&v271, (uint64_t *)v263, v69, v83);
            v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_144:
      v86 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0];
      if ((v12 & 0x80u) == 0)
        v87 = &v271;
      else
        v87 = v16;
      v88 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0]);
      if (v88)
      {
        v89 = v88;
        v90 = v271.__r_.__value_.__l.__size_;
        if ((v12 & 0x80u) == 0)
          v90 = v12;
        if (v90 >= v88)
        {
          v91 = (char *)v87 + v90;
          v92 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0];
          v93 = v87;
          do
          {
            v94 = v90 - v89;
            if (v94 == -1)
              break;
            v95 = (char *)memchr(v93, v92, v94 + 1);
            if (!v95)
              break;
            v96 = v95;
            if (!memcmp(v95, v86, v89))
            {
              if (v96 == v91 || v96 - (char *)v87 == -1)
                break;
              goto LABEL_159;
            }
            v93 = (std::string *)(v96 + 1);
            v90 = v91 - (v96 + 1);
          }
          while (v90 >= v89);
        }
      }
      else
      {
LABEL_159:
        v263[0].__locale_ = v97;
        *(std::locale::__imp **)((char *)&v263[0].__locale_ + *((_QWORD *)v97 - 3)) = v98;
        v99 = (std::ios_base *)((char *)v263 + *((_QWORD *)v263[0].__locale_ - 3));
        std::ios_base::init(v99, &v263[1]);
        v99[1].__vftable = 0;
        v99[1].__fmtflags_ = -1;
        std::streambuf::basic_streambuf(&v263[1]);
        v265 = 0u;
        v266 = 0u;
        v267 = 16;
        __dst.__r_.__value_.__s.__data_[0] = 32;
        v100 = sub_1000F0508(v263, (uint64_t)&__dst, 1);
        v101 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0]);
        sub_1000F0508(v100, (uint64_t)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_name_format[0], v101);
        std::stringbuf::str(&v263[1]);
        v102 = v262;
        p_p = (char *)__p;
        if ((v262 & 0x80u) != 0)
        {
          v104 = v261;
        }
        else
        {
          p_p = (char *)&__p;
          v104 = v262;
        }
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &v271;
        else
          v105 = (std::string *)v271.__r_.__value_.__r.__words[0];
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        else
          v106 = v271.__r_.__value_.__l.__size_;
        if (v106 && v104)
        {
          v107 = (std::string::size_type)&p_p[v104];
          v108 = (std::string *)((char *)v105 + v106);
          v109 = v104 - 1;
          v110 = v106 - 1;
LABEL_173:
          v112 = 0;
          do
          {
            if (v105->__r_.__value_.__s.__data_[v112] != p_p[v112])
            {
              v111 = (std::string *)((char *)v105 + v112);
              if (&p_p[v112] == (char *)v107)
                goto LABEL_179;
LABEL_172:
              v105 = (std::string *)((char *)v105 + 1);
              --v110;
              if (v105 == v108)
                goto LABEL_181;
              goto LABEL_173;
            }
            v113 = v112 + 1;
            if (v110 == v112)
              break;
            v66 = v109 == v112++;
          }
          while (!v66);
          v111 = (std::string *)((char *)v105 + v113);
          if (&p_p[v113] != (char *)v107)
            goto LABEL_172;
LABEL_179:
          if (v105 != v111)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
            __dst.__r_.__value_.__l.__size_ = v107;
            sub_100193F1C(&v271, (uint64_t *)&__dst, v105, v111);
            v102 = v262;
          }
        }
LABEL_181:
        if ((v102 & 0x80) != 0)
          operator delete(__p);
        if (SBYTE7(v266) < 0)
          operator delete((void *)v265);
        std::streambuf::~streambuf(&v263[1]);
        std::ios::~ios(v268);
        v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
      }
      v114 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0];
      if ((v12 & 0x80u) == 0)
        v115 = &v271;
      else
        v115 = v16;
      v116 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0]);
      if (v116)
      {
        v117 = v116;
        v118 = v271.__r_.__value_.__l.__size_;
        v119 = v12;
        if ((v12 & 0x80u) != 0)
          v119 = v271.__r_.__value_.__l.__size_;
        if (v119 >= v116)
        {
          v120 = (char *)v115 + v119;
          v121 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0];
          v122 = v115;
          do
          {
            v123 = v119 - v117;
            if (v123 == -1)
              break;
            v124 = (char *)memchr(v122, v121, v123 + 1);
            if (!v124)
              break;
            v125 = v124;
            if (!memcmp(v124, v114, v117))
            {
              if (v125 == v120 || v125 - (char *)v115 == -1)
                break;
              goto LABEL_201;
            }
            v122 = (std::string *)(v125 + 1);
            v119 = v120 - (v125 + 1);
          }
          while (v119 >= v117);
        }
      }
      else
      {
LABEL_201:
        v263[0].__locale_ = v126;
        *(std::locale::__imp **)((char *)&v263[0].__locale_ + *((_QWORD *)v126 - 3)) = v127;
        v128 = (std::ios_base *)((char *)v263 + *((_QWORD *)v263[0].__locale_ - 3));
        std::ios_base::init(v128, &v263[1]);
        v128[1].__vftable = 0;
        v128[1].__fmtflags_ = -1;
        std::streambuf::basic_streambuf(&v263[1]);
        v265 = 0u;
        v266 = 0u;
        v267 = 16;
        __dst.__r_.__value_.__s.__data_[0] = 32;
        v129 = sub_1000F0508(v263, (uint64_t)&__dst, 1);
        v130 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0]);
        sub_1000F0508(v129, (uint64_t)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_abbrev_format[0], v130);
        std::stringbuf::str(&v263[1]);
        v131 = v262;
        v132 = (char *)__p;
        if ((v262 & 0x80u) != 0)
        {
          v133 = v261;
        }
        else
        {
          v132 = (char *)&__p;
          v133 = v262;
        }
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = &v271;
        else
          v134 = (std::string *)v271.__r_.__value_.__r.__words[0];
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v135 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        else
          v135 = v271.__r_.__value_.__l.__size_;
        if (v135 && v133)
        {
          v136 = (std::string::size_type)&v132[v133];
          v137 = (std::string *)((char *)v134 + v135);
          v138 = v133 - 1;
          v139 = v135 - 1;
LABEL_215:
          v141 = 0;
          do
          {
            if (v134->__r_.__value_.__s.__data_[v141] != v132[v141])
            {
              v140 = (std::string *)((char *)v134 + v141);
              if (&v132[v141] == (char *)v136)
                goto LABEL_221;
LABEL_214:
              v134 = (std::string *)((char *)v134 + 1);
              --v139;
              if (v134 == v137)
                goto LABEL_223;
              goto LABEL_215;
            }
            v142 = v141 + 1;
            if (v139 == v141)
              break;
            v66 = v138 == v141++;
          }
          while (!v66);
          v140 = (std::string *)((char *)v134 + v142);
          if (&v132[v142] != (char *)v136)
            goto LABEL_214;
LABEL_221:
          if (v134 != v140)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
            __dst.__r_.__value_.__l.__size_ = v136;
            sub_100193F1C(&v271, (uint64_t *)&__dst, v134, v140);
            v131 = v262;
          }
        }
LABEL_223:
        if ((v131 & 0x80) != 0)
          operator delete(__p);
        if (SBYTE7(v266) < 0)
          operator delete((void *)v265);
        std::streambuf::~streambuf(&v263[1]);
        std::ios::~ios(v268);
        v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
        v118 = v271.__r_.__value_.__l.__size_;
        v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
      }
      v143 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0];
      v144 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0]);
      if ((v12 & 0x80u) == 0)
        v145 = &v271;
      else
        v145 = v16;
      if ((v12 & 0x80u) == 0)
        v146 = v12;
      else
        v146 = v118;
      if (v144)
      {
        v147 = v144;
        if (v146 >= v144)
        {
          v148 = (char *)v145 + v146;
          v149 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_extended_format[0];
          v150 = v146;
          v151 = v145;
          do
          {
            v152 = v150 - v147;
            if (v152 == -1)
              break;
            v153 = (char *)memchr(v151, v149, v152 + 1);
            if (!v153)
              break;
            v154 = v153;
            if (!memcmp(v153, v143, v147))
            {
              if (v154 == v148 || v154 - (char *)v145 == -1)
                break;
              goto LABEL_244;
            }
            v151 = (std::string *)(v154 + 1);
            v150 = v148 - (v154 + 1);
          }
          while (v150 >= v147);
        }
      }
      else
      {
LABEL_244:
        v155 = strlen(v143);
        if (v146 && v155)
        {
          v156 = &v143[v155];
          v157 = (std::string *)((char *)v145 + v146);
          v158 = v146 - 1;
LABEL_249:
          v160 = 0;
          do
          {
            if (v145->__r_.__value_.__s.__data_[v160] != v143[v160])
            {
              v159 = (std::string *)((char *)v145 + v160);
              if (&v143[v160] == v156)
                goto LABEL_255;
LABEL_248:
              v145 = (std::string *)((char *)v145 + 1);
              --v158;
              if (v145 == v157)
                goto LABEL_257;
              goto LABEL_249;
            }
            v161 = v160 + 1;
            if (v158 == v160)
              break;
            v66 = v155 - 1 == v160++;
          }
          while (!v66);
          v159 = (std::string *)((char *)v145 + v161);
          if (&v143[v161] != v156)
            goto LABEL_248;
LABEL_255:
          if (v145 != v159)
          {
            v263[0].__locale_ = (std::locale::__imp *)v143;
            v263[1].__locale_ = (std::locale::__imp *)&v143[v155];
            sub_100193BD4(&v271, (uint64_t *)v263, v145, v159);
            v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            v118 = v271.__r_.__value_.__l.__size_;
            v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_257:
      v162 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0];
      v163 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0]);
      if ((v12 & 0x80u) == 0)
        v164 = &v271;
      else
        v164 = v16;
      if ((v12 & 0x80u) == 0)
        v118 = v12;
      if (v163)
      {
        v165 = v163;
        if (v118 >= v163)
        {
          v166 = (char *)v164 + v118;
          v167 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::zone_iso_format[0];
          v168 = v118;
          v169 = v164;
          do
          {
            v170 = v168 - v165;
            if (v170 == -1)
              break;
            v171 = (char *)memchr(v169, v167, v170 + 1);
            if (!v171)
              break;
            v172 = v171;
            if (!memcmp(v171, v162, v165))
            {
              if (v172 == v166 || v172 - (char *)v164 == -1)
                break;
              goto LABEL_272;
            }
            v169 = (std::string *)(v172 + 1);
            v168 = v166 - (v172 + 1);
          }
          while (v168 >= v165);
        }
      }
      else
      {
LABEL_272:
        v173 = strlen(v162);
        if (v118 && v173)
        {
          v174 = &v162[v173];
          v175 = (std::string *)((char *)v164 + v118);
          v176 = v118 - 1;
LABEL_277:
          v178 = 0;
          do
          {
            if (v164->__r_.__value_.__s.__data_[v178] != v162[v178])
            {
              v177 = (std::string *)((char *)v164 + v178);
              if (&v162[v178] == v174)
                goto LABEL_283;
LABEL_276:
              v164 = (std::string *)((char *)v164 + 1);
              --v176;
              if (v164 == v175)
                goto LABEL_285;
              goto LABEL_277;
            }
            v179 = v178 + 1;
            if (v176 == v178)
              break;
            v66 = v173 - 1 == v178++;
          }
          while (!v66);
          v177 = (std::string *)((char *)v164 + v179);
          if (&v162[v179] != v174)
            goto LABEL_276;
LABEL_283:
          if (v164 != v177)
          {
            v263[0].__locale_ = (std::locale::__imp *)v162;
            v263[1].__locale_ = (std::locale::__imp *)&v162[v173];
            sub_100193BD4(&v271, (uint64_t *)v263, v164, v177);
            v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_285:
      v180 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
      if ((v12 & 0x80u) == 0)
        v181 = &v271;
      else
        v181 = v16;
      v182 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0]);
      if (v182)
      {
        v183 = v182;
        v184 = v271.__r_.__value_.__l.__size_;
        if ((v12 & 0x80u) == 0)
          v184 = v12;
        if (v184 >= v182)
        {
          v185 = (char *)v181 + v184;
          v186 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
          v187 = v181;
          do
          {
            v188 = v184 - v183;
            if (v188 == -1)
              break;
            v189 = (char *)memchr(v187, v186, v188 + 1);
            if (!v189)
              break;
            v190 = v189;
            if (!memcmp(v189, v180, v183))
            {
              if (v190 == v185 || v190 - (char *)v181 == -1)
                break;
              goto LABEL_300;
            }
            v187 = (std::string *)(v190 + 1);
            v184 = v185 - (v190 + 1);
          }
          while (v184 >= v183);
        }
      }
      else
      {
LABEL_300:
        v191 = (std::locale::__imp *)HIBYTE(v270);
        LOBYTE(v192) = HIBYTE(v270);
        locale = (std::locale::__imp *)*((_QWORD *)&v269 + 1);
        if (v270 >= 0)
          v194 = HIBYTE(v270);
        else
          v194 = *((_QWORD *)&v269 + 1);
        if (!v194)
        {
          v195 = *a5;
          v196 = 0x7FFFFFFFFFFFFFFELL;
          if (*a5 == 0x8000000000000000)
            v196 = 0x8000000000000000;
          if (v195 != 0x7FFFFFFFFFFFFFFFLL)
            v195 = v196;
          if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
            v195 = *a5 % 86400000000;
          v197 = v195 % 1000000;
          if (v197 >= 0)
            v198 = v197;
          else
            v198 = -v197;
          sub_100193918(v198, 6);
          if (SHIBYTE(v270) < 0)
            operator delete((void *)v269);
          v270 = v264;
          v269 = *(_OWORD *)&v263[0].__locale_;
          v180 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format[0];
          v191 = (std::locale::__imp *)HIBYTE(v264);
          locale = v263[1].__locale_;
          v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
          v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
          v192 = HIBYTE(v264);
        }
        v199 = strlen(v180);
        if ((v192 & 0x80u) == 0)
          v200 = (char *)&v269;
        else
          v200 = (char *)v269;
        if ((v192 & 0x80u) == 0)
          v201 = v191;
        else
          v201 = locale;
        if ((v12 & 0x80u) == 0)
          v202 = &v271;
        else
          v202 = v16;
        if ((v12 & 0x80u) == 0)
          v203 = v12;
        else
          v203 = v271.__r_.__value_.__l.__size_;
        if (v203 && v199)
        {
          v204 = &v180[v199];
          v205 = (char *)v201 + (_QWORD)v200;
          v206 = (std::string *)((char *)v202 + v203);
          v207 = v203 - 1;
LABEL_333:
          v209 = 0;
          do
          {
            if (v202->__r_.__value_.__s.__data_[v209] != v180[v209])
            {
              v208 = (std::string *)((char *)v202 + v209);
              if (&v180[v209] == v204)
                goto LABEL_339;
LABEL_332:
              v202 = (std::string *)((char *)v202 + 1);
              --v207;
              if (v202 == v206)
                goto LABEL_341;
              goto LABEL_333;
            }
            v210 = v209 + 1;
            if (v207 == v209)
              break;
            v66 = v199 - 1 == v209++;
          }
          while (!v66);
          v208 = (std::string *)((char *)v202 + v210);
          if (&v180[v210] != v204)
            goto LABEL_332;
LABEL_339:
          if (v202 != v208)
          {
            v263[0].__locale_ = (std::locale::__imp *)v180;
            v263[1].__locale_ = (std::locale::__imp *)&v180[v199];
            sub_10019021C(&v271, (uint64_t *)v263, v200, v205, v202, v208, v200, v205);
            v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
          }
        }
      }
LABEL_341:
      v211 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
      if ((v12 & 0x80u) == 0)
        v16 = &v271;
      v212 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
      if (v212)
      {
        v213 = v212;
        v214 = v271.__r_.__value_.__l.__size_;
        if ((v12 & 0x80u) == 0)
          v214 = v12;
        if (v214 >= v212)
        {
          v215 = (char *)v16 + v214;
          v216 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
          v217 = v16;
          do
          {
            v218 = v214 - v213;
            if (v218 == -1)
              break;
            v219 = (char *)memchr(v217, v216, v218 + 1);
            if (!v219)
              break;
            v220 = v219;
            if (!memcmp(v219, v211, v213))
            {
              if (v220 == v215 || v220 - (char *)v16 == -1)
                break;
              goto LABEL_355;
            }
            v217 = (std::string *)(v220 + 1);
            v214 = v215 - (v220 + 1);
          }
          while (v214 >= v213);
        }
LABEL_425:
        sub_1000C5DEC(a5, (uint64_t)v263);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          sub_10006CED8(&v259, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
        else
          v259 = v271;
        v253 = (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, _QWORD, std::locale *, std::string *))(*(_QWORD *)a1 + 48))(a1, a2, v257, v256, v263, &v259);
        if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v259.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v270) & 0x80000000) == 0)
          {
LABEL_430:
            if ((SHIBYTE(v271.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return v253;
LABEL_434:
            operator delete(v271.__r_.__value_.__l.__data_);
            return v253;
          }
        }
        else if ((SHIBYTE(v270) & 0x80000000) == 0)
        {
          goto LABEL_430;
        }
        operator delete((void *)v269);
        if ((SHIBYTE(v271.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v253;
        goto LABEL_434;
      }
LABEL_355:
      v221 = *a5;
      v222 = 0x7FFFFFFFFFFFFFFELL;
      if (*a5 == 0x8000000000000000)
        v222 = 0x8000000000000000;
      if (v221 != 0x7FFFFFFFFFFFFFFFLL)
        v221 = v222;
      if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
        v221 = *a5 % 86400000000;
      v223 = v221 % 1000000;
      if (v223)
      {
        if (v223 >= 0)
          v224 = v223;
        else
          v224 = -v223;
        sub_100193918(v224, 6);
        v225 = v257;
        if ((SHIBYTE(v270) & 0x80000000) == 0)
        {
LABEL_366:
          v270 = v264;
          v269 = *(_OWORD *)&v263[0].__locale_;
          v226 = HIBYTE(v264);
          if ((v264 & 0x8000000000000000) != 0)
            v226 = *((_QWORD *)&v269 + 1);
          if (v226)
          {
            std::ios_base::getloc(v225);
            v227 = std::locale::use_facet(v263, &std::numpunct<char>::id);
            v228 = ((uint64_t (*)(const std::locale::facet *))v227->__vftable[1].~facet)(v227);
            std::locale::~locale(v263);
            memset(&__dst, 0, sizeof(__dst));
            std::string::push_back(&__dst, v228);
            if (v270 >= 0)
              v229 = (const std::string::value_type *)&v269;
            else
              v229 = (const std::string::value_type *)v269;
            if (v270 >= 0)
              v230 = HIBYTE(v270);
            else
              v230 = *((_QWORD *)&v269 + 1);
            std::string::append(&__dst, v229, v230);
            v231 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
            v232 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            v233 = __dst.__r_.__value_.__l.__size_;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v233 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v235 = &v271;
            else
              v235 = (std::string *)v271.__r_.__value_.__r.__words[0];
            if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v236 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            else
              v236 = v271.__r_.__value_.__l.__size_;
            if (v236 && v231)
            {
              v237 = (char *)p_dst + v233;
              v238 = (std::string *)((char *)v235 + v236);
              v239 = v236 - 1;
              while (1)
              {
                v240 = 0;
                while (v235->__r_.__value_.__s.__data_[v240] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v240])
                {
                  v241 = v240 + 1;
                  if (v239 != v240)
                  {
                    v66 = v231 - 1 == v240++;
                    if (!v66)
                      continue;
                  }
                  v242 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v241];
                  v243 = (std::string *)((char *)v235 + v241);
                  goto LABEL_396;
                }
                v242 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v240];
                v243 = (std::string *)((char *)v235 + v240);
LABEL_396:
                if (v242 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v231])
                  break;
                v235 = (std::string *)((char *)v235 + 1);
                --v239;
                if (v235 == v238)
                  goto LABEL_421;
              }
              if (v235 != v243)
              {
                v263[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
                v263[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v231];
                sub_10019021C(&v271, (uint64_t *)v263, (char *)p_dst, v237, v235, v243, (char *)p_dst, v237);
                v232 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
            }
LABEL_421:
            if (v232 < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
          }
          else
          {
            v244 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0]);
            v245 = v271.__r_.__value_.__l.__size_;
            if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v246 = &v271;
            else
              v246 = (std::string *)v271.__r_.__value_.__r.__words[0];
            if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v245 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
            if (v245 && v244)
            {
              v247 = (std::string *)((char *)v246 + v245);
              v248 = v245 - 1;
              while (1)
              {
                v249 = 0;
                while (v246->__r_.__value_.__s.__data_[v249] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v249])
                {
                  v250 = v249 + 1;
                  if (v248 != v249)
                  {
                    v66 = v244 - 1 == v249++;
                    if (!v66)
                      continue;
                  }
                  v251 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v250];
                  v252 = (std::string *)((char *)v246 + v250);
                  goto LABEL_416;
                }
                v251 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v249];
                v252 = (std::string *)((char *)v246 + v249);
LABEL_416:
                if (v251 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v244])
                  break;
                v246 = (std::string *)((char *)v246 + 1);
                --v248;
                if (v246 == v247)
                  goto LABEL_425;
              }
              if (v246 != v252)
              {
                v263[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0];
                v263[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format[0][v244];
                sub_100193BD4(&v271, (uint64_t *)v263, v246, v252);
              }
            }
          }
          goto LABEL_425;
        }
      }
      else
      {
        v263[0].__locale_ = 0;
        v263[1].__locale_ = 0;
        v264 = 0;
        v225 = v257;
        if ((SHIBYTE(v270) & 0x80000000) == 0)
          goto LABEL_366;
      }
      operator delete((void *)v269);
      goto LABEL_366;
    }
LABEL_63:
    v39 = *a5;
    v40 = 0x7FFFFFFFFFFFFFFELL;
    if (*a5 == 0x8000000000000000)
      v40 = 0x8000000000000000;
    if (v39 != 0x7FFFFFFFFFFFFFFFLL)
      v39 = v40;
    if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) > 2)
      v39 = *a5 % 86400000000;
    v41 = v39 % 1000000;
    if (v41 >= 0)
      v42 = v41;
    else
      v42 = -v41;
    sub_100193918(v42, 6);
    if (SHIBYTE(v270) < 0)
      operator delete((void *)v269);
    v269 = *(_OWORD *)&v263[0].__locale_;
    v270 = v264;
    std::ios_base::getloc(v257);
    v43 = std::locale::use_facet(v263, &std::numpunct<char>::id);
    v44 = ((uint64_t (*)(const std::locale::facet *))v43->__vftable[1].~facet)(v43);
    std::locale::~locale(v263);
    v45 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format[0];
    v46 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format[0]);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      sub_1000CDE30();
    v47 = v46;
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = (std::string *)operator new(v49 + 1);
      __dst.__r_.__value_.__l.__size_ = v47;
      __dst.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v46;
      v48 = &__dst;
      if (!v46)
        goto LABEL_82;
    }
    memmove(v48, v45, v47);
LABEL_82:
    v48->__r_.__value_.__s.__data_[v47] = 0;
    std::string::push_back(&__dst, v44);
    if (v270 >= 0)
      v51 = (const std::string::value_type *)&v269;
    else
      v51 = (const std::string::value_type *)v269;
    if (v270 >= 0)
      v52 = HIBYTE(v270);
    else
      v52 = *((_QWORD *)&v269 + 1);
    std::string::append(&__dst, v51, v52);
    v53 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0]);
    v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v55 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &__dst;
    else
      v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = &v271;
    else
      v57 = (std::string *)v271.__r_.__value_.__r.__words[0];
    if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
    else
      v58 = v271.__r_.__value_.__l.__size_;
    if (v58 && v53)
    {
      v59 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v53];
      v60 = (char *)v56 + v55;
      v61 = (std::string *)((char *)v57 + v58);
      v62 = v58 - 1;
LABEL_104:
      v64 = 0;
      do
      {
        if (v57->__r_.__value_.__s.__data_[v64] != boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v64])
        {
          v63 = (std::string *)((char *)v57 + v64);
          if (&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v64] == v59)
            goto LABEL_110;
LABEL_103:
          v57 = (std::string *)((char *)v57 + 1);
          --v62;
          if (v57 == v61)
            goto LABEL_112;
          goto LABEL_104;
        }
        v65 = v64 + 1;
        if (v62 == v64)
          break;
        v66 = v53 - 1 == v64++;
      }
      while (!v66);
      v63 = (std::string *)((char *)v57 + v65);
      if (&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v65] != v59)
        goto LABEL_103;
LABEL_110:
      if (v57 != v63)
      {
        v263[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0];
        v263[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[0][v53];
        sub_10019021C(&v271, (uint64_t *)v263, (char *)v56, v60, v57, v63, (char *)v56, v60);
        v54 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_112:
    if (v54 < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v12 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
    v31 = v271.__r_.__value_.__l.__size_;
    v16 = (std::string *)v271.__r_.__value_.__r.__words[0];
    goto LABEL_115;
  }
  if (v7 == 0x8000000000000000)
    v8 = 0;
  else
    v8 = -2;
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v8 = -1;
    v9 = 2;
  }
  else
  {
    v9 = 5;
  }
  if (!v8)
    v9 = 1;
  if (v8 == -2)
    v10 = 0;
  else
    v10 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4, v10);
}

void sub_100035EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  uint64_t v28;

  if (a27 < 0)
    operator delete(__p);
  sub_1000F0484((uint64_t)&a28);
  if (*(char *)(v28 - 153) < 0)
  {
    operator delete(*(void **)(v28 - 176));
    if ((*(char *)(v28 - 121) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((*(char *)(v28 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v28 - 144));
  _Unwind_Resume(a1);
}

id sub_100035FCC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  std::string *v4;
  _BYTE *v5;
  unint64_t v6;
  std::string *v7;
  std::string::value_type *v8;
  __int128 *v9;
  std::string::size_type *v10;
  unint64_t v11;
  __int128 v12;
  std::string::value_type v13;
  void *__p;
  void *v15;
  char v16;
  _QWORD v17[2];
  char v18;
  int v19;
  std::string v20;
  std::string v21;
  _BYTE v23[6];
  _BYTE v24[6];
  _BYTE *v25;
  _BYTE *v26;

  v1 = atomic_load((unint64_t *)(*(_QWORD *)(a1 + 32) + 112));
  if (v1)
  {
    v16 = 0;
    LOBYTE(v15) = 0;
    memset(&v20, 0, sizeof(v20));
    std::string::assign(&v20, "Only 1 scan allowed at a time: ");
    memset(&v21, 0, sizeof(v21));
    v25 = v23;
    v26 = v24;
    v17[0] = v1;
    v17[1] = v24;
    v18 = 48;
    v19 = 48;
    v3 = sub_1001E2CD8((uint64_t)v17);
    v4 = &v21;
    v25 = (_BYTE *)v3;
    v26 = v24;
    v5 = &v24[-v3];
    if ((unint64_t)&v24[-v3] >= 0x17)
    {
      std::string::__grow_by(&v21, 0x16uLL, (std::string::size_type)(v5 - 22), 0, 0, 0, 0);
      v21.__r_.__value_.__l.__size_ = 0;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v4 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((_BYTE *)v3 == v24)
    {
      v7 = v4;
    }
    else
    {
      v6 = (unint64_t)&v23[-v3 + 42];
      if (v6 < 0x20 || (unint64_t)v4 - v3 < 0x20)
      {
        v7 = v4;
        v8 = (std::string::value_type *)v3;
      }
      else
      {
        v7 = (std::string *)((char *)v4 + (v6 & 0xFFFFFFFFFFFFFFE0));
        v8 = (std::string::value_type *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
        v9 = (__int128 *)(v3 + 16);
        v10 = &v4->__r_.__value_.__r.__words[2];
        v11 = v6 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v12 = *v9;
          *((_OWORD *)v10 - 1) = *(v9 - 1);
          *(_OWORD *)v10 = v12;
          v9 += 2;
          v10 += 4;
          v11 -= 32;
        }
        while (v11);
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_16;
      }
      do
      {
        v13 = *v8++;
        v7->__r_.__value_.__s.__data_[0] = v13;
        v7 = (std::string *)((char *)v7 + 1);
      }
      while (v8 != v24);
    }
LABEL_16:
    v7->__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)&v24[-v3];
    else
      *((_BYTE *)&v21.__r_.__value_.__s + 23) = v5 & 0x7F;
    sub_100174738((uint64_t)&v15, (uint64_t)&v20, 2);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_22;
LABEL_25:
        operator delete(v15);
LABEL_22:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_25;
  }
  return objc_msgSend(*(id *)(a1 + 32), "onQueueInitiateScan:initiated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100036204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  id v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, id);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_100168FEC((id *)va);
  sub_1002EBD9C((uint64_t *)va1);

  _Unwind_Resume(a1);
}

void sub_10003659C(uint64_t a1, int a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  std::future<void> v6;
  _QWORD block[6];
  uint64_t v8;
  std::promise<void> *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(std::promise<void> *);
  void *v13;
  std::promise<void> v14;
  _QWORD v15[6];
  id v16;
  int v17;

  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  v4 = *(id *)(a1 + 40);
  v5 = v3;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4012000000;
  v15[3] = sub_1000BCD00;
  v15[4] = sub_1000BCCAC;
  v15[5] = &unk_1003C7327;
  v16 = v4;
  v17 = a2;
  v8 = 0;
  v9 = (std::promise<void> *)&v8;
  v10 = 0x3812000000;
  v11 = sub_1002F080C;
  v12 = sub_1002F081C;
  v13 = &unk_1003C7327;
  std::promise<void>::promise(&v14);
  std::promise<void>::get_future(v9 + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001362C;
  block[3] = &unk_1004049B0;
  block[4] = v15;
  block[5] = &v8;
  dispatch_async(v5, block);
  _Block_object_dispose(&v8, 8);
  std::promise<void>::~promise(&v14);
  _Block_object_dispose(v15, 8);

  std::future<void>::~future(&v6);
}

void sub_1000366E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  std::promise<void> *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::promise<void>::~promise(v9);
  _Block_object_dispose((const void *)(v10 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_10003672C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  id *v28;
  id *v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_1000D02C0();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1000CDEB8();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = (id *)*((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
          {
            sub_100049E84(v28);
            operator delete();
          }
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void sub_10003693C(uint64_t a1, const __CFArray *a2, int a3, id *a4)
{
  void *v8;
  NSObject *v9;
  CFIndex Count;
  id WeakRetained;
  id v12;
  id v13;
  uint64_t v14;
  char isKindOfClass;
  objc_class *v16;
  NSString *v17;
  id v18;
  uint64_t v19;
  char v20;
  objc_class *v21;
  NSString *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  const std::string::value_type *v31;
  void *__p[2];
  void *block[2];
  void (*v34)(uint64_t);
  void *v35;
  _QWORD *v36;
  _BYTE *v37;
  _BYTE buf[32];
  id v39;
  const __CFArray *v40;
  int v41;

  v8 = objc_autoreleasePoolPush();
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_100404290);
  v9 = (id)qword_100417EE0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = -1;
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = Count;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Got scan result from framework: %ld APs, errcode %d, refcon %p", buf, 0x1Cu);
  }

  WeakRetained = objc_loadWeakRetained(a4 + 2);
  v12 = a4[3];
  v13 = a4[4];
  if (!v12)
  {
    sub_1000D5048(block, "");
    sub_1001E0780("Lost track of wifi settings for request", (std::string *)buf);
    sub_100174738((uint64_t)block, (uint64_t)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v34) < 0)
      operator delete(block[0]);
    sub_1000F2AE4((uint64_t)__p);
  }
  if (!v13)
  {
    sub_1000D5048(block, "");
    sub_1001E0780("Lost track of wifi settings for request", (std::string *)buf);
    sub_100174738((uint64_t)block, (uint64_t)buf, 1);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (SHIBYTE(v34) < 0)
      operator delete(block[0]);
    sub_1000F2AE4((uint64_t)__p);
  }
  v14 = objc_opt_class(NSDictionary);
  isKindOfClass = objc_opt_isKindOfClass(v13, v14);
  v16 = (objc_class *)objc_opt_class(v13);
  v17 = NSStringFromClass(v16);
  v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v17));
  v31 = (const std::string::value_type *)objc_msgSend(v18, "UTF8String");
  if ((isKindOfClass & 1) == 0)
  {
    sub_1000D5048(block, "");
    sub_1002EC8BC("We expect that settingsDictionary is of type NSDictionary, but it's not. Memory smasher? Got ", (std::string *)buf);
    sub_1002CF860(&v31, (std::string *)&buf[24]);
    sub_100174738((uint64_t)block, (uint64_t)buf, 2);
    if (SHIBYTE(v40) < 0)
    {
      operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) == 0)
      {
LABEL_28:
        if ((SHIBYTE(v34) & 0x80000000) == 0)
          goto LABEL_29;
LABEL_36:
        operator delete(block[0]);
LABEL_29:
        sub_1000F2AE4((uint64_t)__p);
      }
    }
    else if ((buf[23] & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(*(void **)buf);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_36;
  }

  v19 = objc_opt_class(WifiScannerSettings);
  v20 = objc_opt_isKindOfClass(v12, v19);
  v21 = (objc_class *)objc_opt_class(v12);
  v22 = NSStringFromClass(v21);
  v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v22));
  v31 = (const std::string::value_type *)objc_msgSend(v23, "UTF8String", v31);
  if ((v20 & 1) == 0)
  {
    sub_1000D5048(block, "");
    sub_100224114("We expect that settings is of type WifiScannerSettings, but it's not. Memory smasher? Got ", (std::string *)buf);
    sub_1002CF860(&v31, (std::string *)&buf[24]);
    sub_100174738((uint64_t)block, (uint64_t)buf, 2);
    if (SHIBYTE(v40) < 0)
    {
      operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v34) & 0x80000000) == 0)
          goto LABEL_33;
LABEL_39:
        operator delete(block[0]);
LABEL_33:
        sub_1000F2AE4((uint64_t)__p);
      }
    }
    else if ((buf[23] & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(*(void **)buf);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_39;
  }

  v24 = WeakRetained;
  *(_QWORD *)buf = v24;
  *(_QWORD *)&buf[8] = a1;
  *(_QWORD *)&buf[16] = a4;
  v25 = v12;
  *(_QWORD *)&buf[24] = v25;
  v26 = v13;
  v39 = v26;
  v40 = a2;
  v41 = a3;
  v27 = v24;
  v28 = v27;
  if (v27)
  {
    v29 = (void *)v27[3];
    if (v29)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = (void *)3321888768;
      v34 = sub_1002EC908;
      v35 = &unk_100404390;
      v36 = v27;
      v37 = buf;
      v30 = v29;
      dispatch_sync(v30, block);

    }
  }

  objc_autoreleasePoolPop(v8);
}

void sub_100036E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100036F28(uint64_t a1, void *a2, unsigned int a3)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v5 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if ((int)(v4 + a3) <= v5)
    v6 = a3;
  else
    v6 = (v5 - v4);
  v7 = sqlite3_blob_read(*(sqlite3_blob **)(a1 + 8), a2, v6, v4);
  if (!v7)
  {
    *(_DWORD *)(a1 + 20) += v6;
    return v6;
  }
  v8 = v7;
  if (qword_100417F08 != -1)
  {
    dispatch_once(&qword_100417F08, &stru_1003FFF98);
    v9 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v9 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
  {
LABEL_7:
    v10 = *(_DWORD *)(a1 + 20);
    v12[0] = 67109632;
    v12[1] = v6;
    v13 = 1024;
    v14 = v10;
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to read blob of size %d at offset %d: %d", (uint8_t *)v12, 0x14u);
  }
  return 0xFFFFFFFFLL;
}

void sub_100037078(uint64_t a1)
{
  objc_msgSend(**(id **)(a1 + 32), "onQueueInvalidate");
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_1000370B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_1000370E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10003726C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100037858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100037AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100037B84(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *i;
  sqlite3_int64 v24;
  sqlite3_int64 v25;
  sqlite3_int64 v26;
  uint64_t v27;
  NSObject *v28;
  std::string *v29;
  char *v30;
  __int128 v31;
  int v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  char *v56;
  char *v57;
  void *v58;
  NSObject *v59;
  int *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type size;
  std::string *v65;
  __int128 v66;
  int *v67;
  std::string *v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v76;
  void *__p[2];
  std::string::size_type v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::runtime_error v89;
  std::string __dst;
  std::string v91;
  std::string v92;

  v79 = 0;
  v80 = 0;
  v81 = 0;
  std::operator+<char>("SELECT ", &qword_100419F80);
  v4 = std::string::append(&v87, ", ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v6 = (const std::string::value_type *)&qword_10041A028;
  else
    v6 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v7 = byte_10041A03F;
  else
    v7 = qword_10041A030;
  v8 = std::string::append(&v88, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&__dst, " FROM ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v82, "venues");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v83, " WHERE ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v16 = (const std::string::value_type *)&qword_10041A028;
  else
    v16 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v17 = byte_10041A03F;
  else
    v17 = qword_10041A030;
  v18 = std::string::append(&v92, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v91, " IS NOT NULL");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v78 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_87;
    }
  }
  else if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v92.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_90:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
LABEL_91:
    operator delete(v87.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
LABEL_89:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_90;
LABEL_19:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_91;
LABEL_20:
  sub_10000AFC4(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  v22 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    v24 = sqlite3_step(i);
    v25 = v24;
    if ((_DWORD)v24 != 100)
      break;
    if (sqlite3_column_type(v22, 1) != 5)
      v25 = sqlite3_column_int64(v22, 1);
    sqlite3_column_type(v22, 0);
    v26 = sqlite3_column_int64(v22, 0);
    std::to_string(&v91, v26);
    v92.__r_.__value_.__r.__words[0] = v25;
    v27 = *(_QWORD *)(a2 + 24);
    if (!v27)
      sub_10016CA74();
    if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 48))(v27, &v92))
    {
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
LABEL_44:
      operator delete(v91.__r_.__value_.__l.__data_);
      continue;
    }
    if (qword_100417F08 == -1)
    {
      v28 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v28 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v91;
        else
          v29 = (std::string *)v91.__r_.__value_.__r.__words[0];
        LODWORD(v92.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "TileVisit, clear, %{private}s", (uint8_t *)&v92, 0xCu);
      }
    }
    v30 = v80;
    if ((unint64_t)v80 >= v81)
    {
      v80 = sub_1002076F0((char **)&v79, (uint64_t)&v91);
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
      goto LABEL_44;
    }
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v31 = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
      *((_QWORD *)v80 + 2) = *((_QWORD *)&v91.__r_.__value_.__l + 2);
      *(_OWORD *)v30 = v31;
      v80 = v30 + 24;
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        continue;
      goto LABEL_44;
    }
    sub_10006CED8(v80, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    v80 = v30 + 24;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_44;
LABEL_21:
    ;
  }
  if ((_DWORD)v24 != 101)
  {
    if (v24 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v59 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_113;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v59 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_113:
          LOWORD(v91.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v91, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v83.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v88, &v83);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v82);
      sub_1001F9F6C((std::runtime_error *)&v88, (uint64_t)"auto db::resources::statement<2, 0>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23) &&)::(anonymous class)::operator()() const [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v82);
    }
    sub_10008B9C4(v24, db);
    if ((_DWORD)v25)
    {
      v60 = __error();
      sub_10025FF8C(*v60, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v86.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v86, " w/ ");
      v61 = std::string::insert(&v86, 0, "Failed sqlite3_step");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v85 = __dst;
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v85;
      else
        v63 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      v65 = std::string::append(&v87, (const std::string::value_type *)v63, size);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v89, &v88);
      v89.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)&v84);
      sub_1001F2298(&v89, (uint64_t)"void db::resources::statement<2, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v84);
    }
    goto LABEL_21;
  }
  v32 = sqlite3_reset(pStmt);
  sub_10008B9C4(v32, db);
  if (v32)
  {
    v67 = __error();
    sub_10025FF8C(*v67, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v86.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v86, " w/ ");
    v68 = std::string::insert(&v86, 0, "Failed to execute query");
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v85, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v85 = __dst;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v85;
    else
      v70 = (std::string *)v85.__r_.__value_.__r.__words[0];
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      v71 = v85.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v87, (const std::string::value_type *)v70, v71);
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v89, &v88);
    v89.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)&v84);
    sub_1001F2298(&v89, (uint64_t)"void db::resources::statement<2, 0>::run(Cb &&, ConstraintHandler &&) [nCols = 2, nQueries = 0, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1102:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v84);
  }
  sub_1000152CC((uint64_t)&pStmt);

  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  sub_10008E9D8(", ", (char *)&v79, (uint64_t)&v91);
  *((_BYTE *)&v84.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v84, "UPDATE ");
  v33 = std::string::append(&v84, "venues");
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v85, " SET ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A03F >= 0)
    v37 = (const std::string::value_type *)&qword_10041A028;
  else
    v37 = (const std::string::value_type *)qword_10041A028;
  if (byte_10041A03F >= 0)
    v38 = byte_10041A03F;
  else
    v38 = qword_10041A030;
  v39 = std::string::append(&v86, v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v87, " = NULL WHERE ");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v43 = (const std::string::value_type *)&qword_100419F80;
  else
    v43 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v44 = byte_100419F97;
  else
    v44 = *(_QWORD *)&byte_100419F88;
  v45 = std::string::append(&v88, v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&__dst, " IN (");
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &v91;
  else
    v49 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v50 = v91.__r_.__value_.__l.__size_;
  v51 = std::string::append(&v82, (const std::string::value_type *)v49, v50);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v53 = std::string::append(&v83, ")");
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v92.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
LABEL_93:
    operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_94;
LABEL_73:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_95:
    operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_96;
LABEL_75:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_97:
    operator delete(v86.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_98;
LABEL_77:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_78;
LABEL_99:
    operator delete(v84.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  operator delete(v83.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_93;
LABEL_72:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_73;
LABEL_94:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
LABEL_74:
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_96:
  operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_97;
LABEL_76:
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_77;
LABEL_98:
  operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
LABEL_78:
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v92;
  else
    v55 = (std::string *)v92.__r_.__value_.__r.__words[0];
  sub_10008E514(*(sqlite3 ***)(a1 + 40), (const char *)v55, "Failed to clear last visited");
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v92.__r_.__value_.__l.__data_);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_101;
LABEL_83:
    v56 = (char *)v79;
    if (v79)
    {
LABEL_102:
      v57 = v80;
      v58 = v56;
      if (v80 != v56)
      {
        do
        {
          if (*(v57 - 1) < 0)
            operator delete(*((void **)v57 - 3));
          v57 -= 24;
        }
        while (v57 != v56);
        v58 = v79;
      }
      v80 = v56;
      operator delete(v58);
    }
  }
  else
  {
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
LABEL_101:
    operator delete(v91.__r_.__value_.__l.__data_);
    v56 = (char *)v79;
    if (v79)
      goto LABEL_102;
  }
}

void sub_100038DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  void *a74;
  char a75;
  std::runtime_error a76;
  char a77;
  std::runtime_error *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;

  std::runtime_error::~runtime_error(v77);
  if (a37 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_3:
    if (a51 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a25);
  if (a51 < 0)
  {
LABEL_4:
    operator delete(a46);
    if ((a44 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a44 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v79 - 144) = v78;
    if (*(char *)(v79 - 113) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a39);
  *(_QWORD *)(v79 - 144) = v78;
  if (*(char *)(v79 - 113) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v79 - 136));
    if ((a57 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a57 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v79 - 192) = &off_1003EDD90;
    v81 = *(_QWORD *)(v79 - 184);
    if (!v81)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a52);
  *(_QWORD *)(v79 - 192) = &off_1003EDD90;
  v81 = *(_QWORD *)(v79 - 184);
  if (!v81)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 32))(v81))
    *(_QWORD *)(v79 - 184) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v79 - 208));
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v79 - 256));
  if (a77 < 0)
    operator delete(a76.__vftable);
  if (a70 < 0)
    operator delete(a65);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  __cxa_free_exception(v77);
  if (*(char *)(v79 - 217) < 0)
    operator delete(*(void **)(v79 - 240));
  sub_1001F0F74((uint64_t)&a12);
  if (a20 < 0)
    operator delete(a15);
  sub_1000FE50C(&a22);
  _Unwind_Resume(a1);
}

BOOL sub_1000395CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  id *v4;
  NSObject *v5;
  _BOOL8 result;
  uint8_t v7[16];

  v3 = *a2;
  v4 = *(id **)(a1 + 16);
  ++**(_DWORD **)(a1 + 8);
  if (!objc_msgSend(*v4, "tileLastModified:needsEvictionAt:", (double)v3 - kCFAbsoluteTimeIntervalSince1970, **(double **)(a1 + 24)))return 1;
  ++**(_DWORD **)(a1 + 32);
  if (qword_100417EF8 == -1)
  {
    v5 = qword_100417F00;
    result = os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&qword_100417EF8, &stru_100407B20);
    v5 = qword_100417F00;
    result = os_log_type_enabled((os_log_t)qword_100417F00, OS_LOG_TYPE_INFO);
    if (!result)
      return result;
  }
  *(_WORD *)v7 = 0;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Resetting visit for venue", v7, 2u);
  return 0;
}

void sub_100039810(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v15 = (char *)v3 - (char *)v2;
    if (v15 < 0x11)
      goto LABEL_25;
    goto LABEL_24;
  }
  v4 = a1[4];
  v5 = &v2[v4 / 0x49];
  v6 = (char *)*v5 + 56 * (v4 % 0x49);
  v7 = (unint64_t)v2[(a1[5] + v4) / 0x49] + 56 * ((a1[5] + v4) % 0x49);
  if (v6 != (char *)v7)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v6 + 3);
      if (v8)
      {
        *((_QWORD *)v6 + 4) = v8;
        operator delete(v8);
      }
      v9 = *(char **)v6;
      if (*(_QWORD *)v6)
      {
        v10 = (char *)*((_QWORD *)v6 + 1);
        v11 = *(char **)v6;
        if (v10 != v9)
        {
          do
          {
            v13 = *((_DWORD *)v10 - 44);
            if (v13 == v13 >> 31)
            {
              if (*(v10 - 128))
                *(v10 - 128) = 0;
            }
            else
            {
              v12 = *((_QWORD *)v10 - 21);
              if (v13 < 0)
              {
                if (v12)
                  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
              }
              else
              {
                (*(void (**)(char *))v12)(v10 - 168);
              }
            }
            v10 -= 208;
          }
          while (v10 != v9);
          v11 = *(char **)v6;
        }
        *((_QWORD *)v6 + 1) = v9;
        operator delete(v11);
      }
      v6 += 56;
      if (v6 - (_BYTE *)*v5 == 4088)
      {
        v14 = (char *)v5[1];
        ++v5;
        v6 = v14;
      }
    }
    while (v6 != (char *)v7);
    v2 = (void **)a1[1];
    v3 = (void **)a1[2];
  }
  a1[5] = 0;
  v15 = (char *)v3 - (char *)v2;
  if (v15 >= 0x11)
  {
    do
    {
LABEL_24:
      operator delete(*v2);
      v16 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v15 = v16 - (_QWORD)v2;
    }
    while (v15 > 0x10);
  }
LABEL_25:
  if (v15 >> 3 == 1)
  {
    v17 = 36;
  }
  else
  {
    if (v15 >> 3 != 2)
      return;
    v17 = 73;
  }
  a1[4] = v17;
}

void sub_10003A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  sub_1000E095C(v14 - 176);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003A2FC()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::~__shared_weak_count(v0);
  JUMPOUT(0x10003A30CLL);
}

void sub_10003A320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003A334()
{
  operator delete();
}

void sub_10003A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003A374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003A40C(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 32);
  while (v2 != v3)
  {
    v5 = *v2++;
    sub_10003A450(v5, a2);
  }
}

void sub_10003A450(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  uint8_t v13[16];

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = sub_10003A880(a1 + 72, a2);
  v6 = v5;
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 == v5)
  {
    if (qword_100417ED8 == -1)
    {
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100406550);
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
    }
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Attempt to remove observer not in list", v13, 2u);
    goto LABEL_16;
  }
  v8 = v5 + 2;
  if (v5 + 2 != v7)
  {
    do
    {
      v9 = *(_OWORD *)v8;
      *v8 = 0;
      v8[1] = 0;
      v10 = (std::__shared_weak_count *)*(v8 - 1);
      *((_OWORD *)v8 - 1) = v9;
      if (v10)
        std::__shared_weak_count::__release_weak(v10);
      v8 += 2;
    }
    while (v8 != v7);
    v7 = *(_QWORD **)(a1 + 80);
    v6 = v8 - 2;
  }
  while (v7 != v6)
  {
    v11 = (std::__shared_weak_count *)*(v7 - 1);
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
    v7 -= 2;
  }
  *(_QWORD *)(a1 + 80) = v6;
LABEL_16:
  std::mutex::unlock(v4);
}

void sub_10003A5A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10003A5B4(uint64_t a1, std::string::size_type *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 32);
  while (v2 != v3)
  {
    v5 = *v2++;
    sub_10003A5F8(v5, a2);
  }
}

void sub_10003A5F8(uint64_t a1, std::string::size_type *a2)
{
  std::mutex *v4;
  _QWORD *v5;
  NSObject *v6;
  std::__shared_weak_count *size;
  std::string::size_type v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::string::size_type *v11;
  unint64_t v12;
  _OWORD *v13;
  void *v14;
  void *__p[2];
  char v16;
  std::string buf;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (!*a2)
  {
    sub_1000D5048(__p, "");
    sub_1001E18C4("Trying to add null observer", &buf);
    sub_100174738((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v14);
  }
  v5 = sub_10003A880(a1 + 72, a2);
  if (*(_QWORD **)(a1 + 80) == v5)
  {
    v8 = *a2;
    size = (std::__shared_weak_count *)a2[1];
    buf.__r_.__value_.__r.__words[0] = *a2;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)size;
    if (size)
    {
      p_shared_weak_owners = (unint64_t *)&size->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v11 = *(std::string::size_type **)(a1 + 80);
      if ((unint64_t)v11 < *(_QWORD *)(a1 + 88))
      {
        *v11 = v8;
        v11[1] = (std::string::size_type)size;
        do
          v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        v13 = v11 + 2;
LABEL_16:
        *(_QWORD *)(a1 + 80) = v13;
        if (size)
          std::__shared_weak_count::__release_weak(size);
        goto LABEL_18;
      }
    }
    else if (*(_QWORD *)(a1 + 88) > (unint64_t)v5)
    {
      *v5 = v8;
      v5[1] = 0;
      v13 = v5 + 2;
      goto LABEL_16;
    }
    v13 = sub_100315688(a1 + 72, (__int128 *)&buf);
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    goto LABEL_16;
  }
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100406550);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    goto LABEL_5;
  }
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
  {
LABEL_5:
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempt to add observer already present", (uint8_t *)&buf, 2u);
  }
LABEL_18:
  std::mutex::unlock(v4);
}

void sub_10003A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::mutex *v22;

  if (a14 < 0)
  {
    operator delete(__p);
    std::mutex::unlock(v22);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003A880(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint8_t buf[4];
  uint64_t v23;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v3)
    return v2;
  while (1)
  {
    v6 = (std::__shared_weak_count *)v2[1];
    if (!v6)
      break;
    v7 = std::__shared_weak_count::lock(v6);
    if (!v7)
      goto LABEL_9;
    v8 = *v2;
    if (*v2 == *a2)
      goto LABEL_33;
LABEL_10:
    if (!v8)
    {
      if (qword_100417ED8 == -1)
      {
        v9 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_15;
LABEL_18:
        v11 = v2 + 2;
        v12 = *(_QWORD **)(a1 + 8);
        if (v2 + 2 == v12)
          goto LABEL_19;
        do
        {
LABEL_21:
          v14 = *(_OWORD *)v11;
          *v11 = 0;
          v11[1] = 0;
          v15 = (std::__shared_weak_count *)*(v11 - 1);
          *((_OWORD *)v11 - 1) = v14;
          if (v15)
            std::__shared_weak_count::__release_weak(v15);
          v11 += 2;
        }
        while (v11 != v12);
        v13 = v11 - 2;
        v11 = *(_QWORD **)(a1 + 8);
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_100406550);
        v9 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_18;
LABEL_15:
        v10 = ((uint64_t)v2 - *(_QWORD *)a1) >> 4;
        *(_DWORD *)buf = 134217984;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Invalid weak reference in collection @ [%ld]. Removing", buf, 0xCu);
        v11 = v2 + 2;
        v12 = *(_QWORD **)(a1 + 8);
        if (v2 + 2 != v12)
          goto LABEL_21;
LABEL_19:
        v13 = v2;
      }
      while (v11 != v13)
      {
        v16 = (std::__shared_weak_count *)*(v11 - 1);
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
        v11 -= 2;
      }
      *(_QWORD *)(a1 + 8) = v13;
      v2 -= 2;
      if (!v7)
        goto LABEL_3;
LABEL_29:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      goto LABEL_3;
    }
    if (v7)
      goto LABEL_29;
LABEL_3:
    v2 += 2;
    if (v2 == v3)
      return *(_QWORD **)(a1 + 8);
  }
  v7 = 0;
LABEL_9:
  v8 = 0;
  if (*a2)
    goto LABEL_10;
LABEL_33:
  if (v7)
  {
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v2;
}

uint64_t sub_10003AAF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  char v11;
  std::string::size_type size;
  void *v15;
  uint64_t v16;
  void *v17;
  void *exception;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::string v29;
  std::string __dst;
  __int128 v31;
  std::string v32;
  __int128 v33;
  _QWORD v34[3];

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    sub_1000C1E44(a1, &v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    else
      __dst = v32;
    v31 = v33;
    if (*(char *)(a1 + 23) < 0)
      sub_10006CED8(&v29, *(void **)a1, *(_QWORD *)(a1 + 8));
    else
      v29 = *(std::string *)a1;
    v6 = sub_1000C6008();
    v7 = sub_1000C6014();
    v27 = 0uLL;
    v28 = 0;
    sub_10003B780(&v29, __p);
    while (1)
    {
      sub_10003B6C8(&v29);
      if (!v8)
      {
LABEL_28:
        v10 = 2;
        goto LABEL_29;
      }
      v9 = (void *)HIBYTE(v26);
      if (v26 < 0)
        v9 = __p[1];
      if (v9
        && sub_10003AFE0((unint64_t)__p, (unint64_t)v6)
        && sub_10003AFE0((unint64_t)__p, (unint64_t)v7))
      {
        sub_10006DB18((const char *)&v29, (uint64_t)&v27, (int *)&v21);
        if ((_DWORD)v21 == 3)
          goto LABEL_28;
        if (!(_DWORD)v21)
          break;
      }
      sub_1000C62B4(&__dst);
      sub_10006CA5C(&v29);
      sub_10003B780(&v29, &v21);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v21;
      v26 = v22;
    }
    if (!a2)
    {
      exception = __cxa_allocate_exception(0x30uLL);
      v23 = v27;
      v24 = v28;
      boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::create_directories", a1, &v29, &v23);
    }
    *(_OWORD *)a2 = v27;
    a2[2] = v28;
    v10 = 1;
LABEL_29:
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    if (v10 == 2)
    {
      v11 = 0;
      while ((_QWORD)v31 != (_QWORD)v33 || *((_QWORD *)&v31 + 1) != *((_QWORD *)&v33 + 1))
      {
        sub_10006CB94((uint64_t)&v29, &__dst);
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __dst.__r_.__value_.__l.__size_;
        if (size)
        {
          if (sub_10003AFE0((unint64_t)&__dst, (unint64_t)v6))
          {
            if (sub_10003AFE0((unint64_t)&__dst, (unint64_t)v7))
            {
              v11 = sub_100011C28((uint64_t)&v29, 0, &v27);
              if ((v28 & 1) != 0 && (v28 != 1 || (_DWORD)v27))
              {
                if (!a2)
                {
                  v17 = __cxa_allocate_exception(0x30uLL);
                  v19 = v27;
                  v20 = v28;
                  boost::filesystem::filesystem_error::filesystem_error(v17, "boost::filesystem::create_directories", a1, &v29, &v19);
                }
                v11 = 0;
                *(_OWORD *)a2 = v27;
                a2[2] = v28;
                break;
              }
            }
          }
        }
        sub_1000C6020(&__dst);
      }
    }
    else
    {
      v11 = 0;
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    if (!a2)
    {
      v15 = __cxa_allocate_exception(0x30uLL);
      v34[0] = 0;
      if ((qword_100417FC8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 22))
      {
        v16 = 3;
      }
      else
      {
        v16 = 2;
      }
      LODWORD(v34[0]) = 22;
      v34[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v34[2] = v16;
      boost::filesystem::filesystem_error::filesystem_error(v15, "boost::filesystem::create_directories", a1, v34);
    }
    if ((qword_100417FC8 & 0xFFFFFFFFFFFFFFFELL) == 0xB2AB117A257EDFD0
      || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 22))
    {
      v5 = 3;
    }
    else
    {
      v5 = 2;
    }
    v11 = 0;
    *a2 = 22;
    a2[1] = &boost::system::detail::generic_cat_holder<void>::instance;
    a2[2] = v5;
  }
  return v11 & 1;
}

void sub_10003AF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a24 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003AFE0(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  std::string __p;
  _QWORD v10[5];
  std::string v11;

  sub_10003B5B0(a1, &v11);
  memset(v10, 0, 24);
  v10[3] = a1;
  if (*(char *)(a1 + 23) < 0)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(unsigned __int8 *)(a1 + 23);
  v10[4] = v4;
  sub_10003B5B0(a2, &__p);
  memset(v8, 0, 24);
  v8[3] = a2;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  v8[4] = v5;
  v6 = sub_10003B09C(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t sub_10003B09C(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data;
  std::string::size_type size;
  char *v8;
  std::string::size_type v9;

  data = a1[1].__r_.__value_.__l.__data_;
  size = a1[1].__r_.__value_.__l.__size_;
  v8 = *(char **)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    v8 = data;
    v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(_QWORD *)(a4 + 24)
         || a3[1].__r_.__value_.__l.__size_ != *(_QWORD *)(a4 + 32))
  {
    while ((sub_1000D9B04(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((sub_1000D9B04(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0)
        return 1;
      sub_1000C6020(a1);
      sub_1000C6020(a3);
      data = a1[1].__r_.__value_.__l.__data_;
      size = a1[1].__r_.__value_.__l.__size_;
      v8 = *(char **)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      if (data == v8 && size == v9)
        goto LABEL_16;
      if (a3[1].__r_.__value_.__r.__words[0] == *(_QWORD *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(_QWORD *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9)
    return 1;
  if (a3[1].__r_.__value_.__r.__words[0] != *(_QWORD *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(_QWORD *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t sub_10003B19C(std::string *a1, uint64_t a2, std::string *a3, uint64_t a4)
{
  std::string::pointer data;
  std::string::size_type size;
  char *v8;
  std::string::size_type v9;

  data = a1[1].__r_.__value_.__l.__data_;
  size = a1[1].__r_.__value_.__l.__size_;
  v8 = *(char **)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (data == v8 && size == v9)
  {
LABEL_16:
    v8 = data;
    v9 = size;
  }
  else if (a3[1].__r_.__value_.__r.__words[0] != *(_QWORD *)(a4 + 24)
         || a3[1].__r_.__value_.__l.__size_ != *(_QWORD *)(a4 + 32))
  {
    while ((sub_1000D9B04(a1, (void **)&a3->__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      if ((sub_1000D9B04(a3, (void **)&a1->__r_.__value_.__l.__data_) & 0x80) != 0)
        return 1;
      sub_10003B29C(a1);
      sub_10003B29C(a3);
      data = a1[1].__r_.__value_.__l.__data_;
      size = a1[1].__r_.__value_.__l.__size_;
      v8 = *(char **)(a2 + 24);
      v9 = *(_QWORD *)(a2 + 32);
      if (data == v8 && size == v9)
        goto LABEL_16;
      if (a3[1].__r_.__value_.__r.__words[0] == *(_QWORD *)(a4 + 24)
        && a3[1].__r_.__value_.__l.__size_ == *(_QWORD *)(a4 + 32))
      {
        goto LABEL_17;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  if (data != v8 || size != v9)
    return 1;
  if (a3[1].__r_.__value_.__r.__words[0] != *(_QWORD *)(a4 + 24)
    || a3[1].__r_.__value_.__l.__size_ != *(_QWORD *)(a4 + 32))
  {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_10003B29C(std::string *this)
{
  std::string *v1;
  std::string::pointer data;
  unint64_t v3;
  std::string::size_type *p_size;
  std::string::size_type v5;
  std::string::pointer v6;
  unint64_t v7;
  std::string::pointer v8;
  unint64_t v9;
  std::string::pointer v10;
  std::string::pointer v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  std::string::pointer v15;
  std::string::size_type v16;
  unint64_t v17;
  unint64_t v18;

  v1 = this;
  data = this[1].__r_.__value_.__l.__data_;
  if (data[23] < 0)
    v3 = *((_QWORD *)data + 1);
  else
    v3 = data[23];
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    p_size = &v1[1].__r_.__value_.__l.__size_;
    v5 = v1[1].__r_.__value_.__l.__size_ + v1->__r_.__value_.__l.__size_;
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      *v1->__r_.__value_.__l.__data_ = 0;
      v1->__r_.__value_.__l.__size_ = 0;
      return;
    }
  }
  else
  {
    p_size = &v1[1].__r_.__value_.__l.__size_;
    v5 = v1[1].__r_.__value_.__l.__size_ + HIBYTE(v1->__r_.__value_.__r.__words[2]);
    v1[1].__r_.__value_.__l.__size_ = v5;
    if (v5 >= v3)
    {
      v1->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = 0;
      return;
    }
  }
  v6 = data;
  if (data[23] < 0)
    v6 = *(std::string::pointer *)data;
  if (v6[v5] == 47)
  {
    v18 = 0;
    if (data[23] < 0)
      data = *(std::string::pointer *)data;
    v7 = sub_10006CD4C(data, v3, &v18);
    v5 = *p_size;
    if (*p_size == v7)
    {
      if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v1->__r_.__value_.__l.__size_ == v18)
        {
          v1->__r_.__value_.__l.__size_ = 1;
          v1 = (std::string *)v1->__r_.__value_.__r.__words[0];
          goto LABEL_20;
        }
      }
      else if (v18 == HIBYTE(v1->__r_.__value_.__r.__words[2]))
      {
        *((_BYTE *)&v1->__r_.__value_.__s + 23) = 1;
LABEL_20:
        LOWORD(v1->__r_.__value_.__l.__data_) = 47;
        return;
      }
    }
    data = v1[1].__r_.__value_.__l.__data_;
    if (v5 == v3)
    {
LABEL_26:
      if (v3 - 1 >= v7)
        v9 = v7;
      else
        v9 = v3 - 1;
      if (data[23] >= 0)
        v10 = data;
      else
        v10 = *(std::string::pointer *)data;
      v11 = v10 - 2;
      v12 = v3;
      while (1)
      {
        v13 = v12 - 1;
        if (v12 - 1 <= v7)
          break;
        v14 = v11[v12--];
        if (v14 != 47)
          goto LABEL_37;
      }
      v13 = v9;
LABEL_37:
      v5 = v3;
      if (v13 != v7)
      {
        v1[1].__r_.__value_.__l.__size_ = v3 - 1;
        std::string::operator=(v1, (const std::string *)&xmmword_100419450);
        return;
      }
    }
    else
    {
      while (1)
      {
        v8 = data;
        if (data[23] < 0)
          v8 = *(std::string::pointer *)data;
        if (v8[v5] != 47)
          break;
        *p_size = ++v5;
        if (v3 == v5)
          goto LABEL_26;
      }
    }
  }
  if (data[23] < 0)
  {
    v15 = *(std::string::pointer *)data;
    v16 = *((_QWORD *)data + 1);
  }
  else
  {
    v15 = data;
    v16 = data[23];
  }
  if (v16 <= v5)
    goto LABEL_45;
  v17 = v5;
  while (v15[v17] != 47)
  {
    if (v16 == ++v17)
      goto LABEL_45;
  }
  if (v16 == v17 || v17 == -1)
LABEL_45:
    v17 = v3;
  if (data[23] < 0)
    data = *(std::string::pointer *)data;
  sub_1000D8F44(v1, &data[v5], &data[v17], v17 - v5);
}

uint64_t sub_10003B4F4(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  std::string __p;
  _QWORD v10[5];
  std::string v11;

  sub_10003B5B0(a1, &v11);
  memset(v10, 0, 24);
  v10[3] = a1;
  if (*(char *)(a1 + 23) < 0)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(unsigned __int8 *)(a1 + 23);
  v10[4] = v4;
  sub_10003B5B0(a2, &__p);
  memset(v8, 0, 24);
  v8[3] = a2;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  v8[4] = v5;
  v6 = sub_10003B19C(&v11, (uint64_t)v10, &__p, (uint64_t)v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v6;
}

unint64_t sub_10003B5B0@<X0>(unint64_t result@<X0>, std::string *a2@<X8>)
{
  unint64_t v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string v14;
  char v15;

  v2 = result;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2[1].__r_.__value_.__r.__words[0] = result;
  v4 = *(char *)(result + 23);
  v5 = *(_QWORD *)(result + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(result + 23);
  else
    v6 = *(_QWORD *)(result + 8);
  a2[1].__r_.__value_.__l.__size_ = 0;
  if (v4 < 0)
  {
    if (!v5)
      return result;
    v14.__r_.__value_.__r.__words[0] = 0;
    result = *(_QWORD *)result;
  }
  else
  {
    if (!v4)
      return result;
    v14.__r_.__value_.__r.__words[0] = 0;
  }
  result = sub_10006CD4C((_BYTE *)result, v6, (unint64_t *)&v14);
  v7 = v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0])
    goto LABEL_10;
  v8 = result;
  if (result < v6)
  {
    a2[1].__r_.__value_.__l.__size_ = result;
    v7 = 1;
    goto LABEL_13;
  }
  v9 = *(char *)(v2 + 23);
  v10 = v9 < 0;
  if (v9 >= 0)
    v11 = v2;
  else
    v11 = *(_QWORD *)v2;
  if (v10)
    v7 = *(_QWORD *)(v2 + 8);
  else
    v7 = *(unsigned __int8 *)(v2 + 23);
  if (!v7)
  {
LABEL_25:
    if (!v7)
      return result;
LABEL_10:
    v8 = 0;
LABEL_13:
    result = (unint64_t)std::string::basic_string(&v14, (const std::string *)v2, v8, v7, (std::allocator<char> *)&v15);
    *a2 = v14;
    return result;
  }
  v12 = 0;
  while (*(_BYTE *)(v11 + v12) != 47)
  {
    if (v7 == ++v12)
      goto LABEL_25;
  }
  if (v12 == -1)
    v13 = v7;
  else
    v13 = v12;
  if (v7 != v12)
    v7 = v13;
  if (v7)
    goto LABEL_10;
  return result;
}

unint64_t sub_10003B6C8(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  int v9;
  unint64_t v10;

  v1 = a1;
  v10 = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  v3 = sub_10006CD4C(a1, v2, &v10);
  result = v10;
  v5 = v1[23];
  if ((char)v1[23] < 0)
  {
    v6 = *((_QWORD *)v1 + 1);
    if (v3 >= v6)
      return result;
  }
  else
  {
    v6 = v1[23];
    if (v3 >= v5)
      return result;
  }
  v7 = v3 + 1;
  if (v6 <= v3 + 1)
    result = v3 + 1;
  else
    result = v6;
  while (v7 < v6)
  {
    v8 = v1;
    if ((v5 & 0x80) != 0)
      v8 = *(_BYTE **)v1;
    v9 = v8[v7++];
    if (v9 != 47)
      return v7 - 1;
  }
  return result;
}

_QWORD *sub_10003B780@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v2 = a1;
  v4 = sub_10003B7CC(a1);
  if ((char)v2[23] < 0)
  {
    v6 = v2;
    v2 = *(_BYTE **)v2;
    v5 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v5 = v2[23];
  }
  return sub_1000D64D8(a2, &v2[v5 - v4], &v2[v5], v4);
}

unint64_t sub_10003B7CC(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v10;

  v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  v10 = 0;
  sub_10006CD4C(a1, v2, &v10);
  if (v2 >= v10)
    v3 = v10;
  else
    v3 = v2;
  if ((char)v1[23] >= 0)
    v4 = v1;
  else
    v4 = *(_BYTE **)v1;
  v5 = v4 - 1;
  v6 = v2;
  while (v6 > v10)
  {
    v7 = v6 - 1;
    v8 = v5[v6--];
    if (v8 == 47)
    {
      v3 = v7 + 1;
      return v2 - v3;
    }
  }
  return v2 - v3;
}

void sub_10003B860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

uint64_t sub_10003B8AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  char *v5;
  uint64_t result;

  v3 = (int *)(a1 + 64);
  v4 = (uint64_t *)(a1 + 8);
  v5 = (char *)operator new(0x1AD8uLL);
  result = sub_10016D810((uint64_t)v5, v3, v4);
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void sub_10003B8F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10003B90C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned __int8 v5;
  char *v6;
  unsigned __int8 v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *__p;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  _BYTE *v33;
  _BYTE buf[24];
  __n128 (*v35)(uint64_t, uint64_t);
  uint64_t (*v36)();
  uint64_t *v37;
  uint64_t v38;

  if (!*(_QWORD *)(a2 + 24))
  {
    sub_1000D5048(buf, "");
    sub_100174738((uint64_t)buf, 0, 0);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_1000F2AE4((uint64_t)&__p);
  }
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(_BYTE *)(a1 + 17) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 24));
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Apply event queue in real time", buf, 2u);
  }
LABEL_5:
  v27 = sub_10005F0F0();
  v5 = atomic_load((unsigned __int8 *)(a1 + 16));
  if ((v5 & 1) != 0)
    goto LABEL_45;
  v6 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(a1 + 136);
    if (!v8)
    {
      v10 = v27 + 250000000;
      v27 += 250000000;
      v9 = 1.0;
LABEL_12:
      v11 = sub_10003C888();
      sub_10003C090((uint64_t)(v9 * (double)(uint64_t)(v10 - v11)));
      v10 = v27;
      goto LABEL_13;
    }
    sub_1002BD474(v8);
    v9 = sub_1002BD468(*(unint64_t **)(a1 + 136));
    v10 = v27 + 250000000;
    v27 += 250000000;
    if (v9 > 0.0)
      goto LABEL_12;
LABEL_13:
    *(_QWORD *)buf = v10;
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
      sub_10016CA74();
    if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, buf) == 1)
      break;
    if (qword_100417ED8 == -1)
    {
      v13 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_18;
LABEL_17:
      v14 = *(_QWORD *)a1;
      v28 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v35 = sub_100218560;
      v36 = nullsub_141;
      v37 = &v28;
      v38 = v14;
      __p = _NSConcreteStackBlock;
      v30 = 0x40000000;
      v31 = sub_100218570;
      v32 = &unk_1003FDF08;
      v33 = buf;
      sub_10005C5D4((dispatch_queue_t *)(v14 + 32), &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "We have %zu events in queue", buf, 0xCu);
      goto LABEL_18;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v13 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_17;
LABEL_18:
    v15 = sub_10003C0B4((uint64_t *)a1, v6);
    if (!v15)
      goto LABEL_22;
    if (qword_100417ED8 == -1)
    {
      v16 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_22;
LABEL_21:
      v17 = *(_QWORD *)a1;
      v28 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v35 = sub_100218560;
      v36 = nullsub_141;
      v37 = &v28;
      v38 = v17;
      __p = _NSConcreteStackBlock;
      v30 = 0x40000000;
      v31 = sub_100218570;
      v32 = &unk_1003FDF08;
      v33 = buf;
      sub_10005C5D4((dispatch_queue_t *)(v17 + 32), &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WARNING: We have dropped %zu events.  %zu remaining", buf, 0x16u);
      goto LABEL_22;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v16 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_21;
LABEL_22:
    v6 = (char *)(v27 - 100000000);
    v18 = sub_10004D550((uint64_t *)a1, v27 - 100000000);
    if (qword_100417ED8 == -1)
    {
      v19 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_25;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
      v19 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_25:
        v20 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_27;
LABEL_26:
        v21 = sub_10018EB80(&v27);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Applying update motion event at %f", buf, 0xCu);
        goto LABEL_27;
      }
    }
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Applied %zu events - simulating motion until %lld ns", buf, 0x16u);
    if (qword_100417ED8 == -1)
      goto LABEL_25;
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v20 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_26;
LABEL_27:
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), v6);
    v22 = sub_10005F0F0();
    v23 = v22 - v27;
    if ((uint64_t)(v22 - v27) >= 3000000001)
    {
      if (qword_100417ED8 == -1)
      {
        v24 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        {
LABEL_31:
          sub_100217BD8((_QWORD *)a1);
          v27 = v22;
          goto LABEL_7;
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
        v24 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_31;
      }
      v25 = *(_QWORD *)a1;
      v28 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3802000000;
      v35 = sub_100218560;
      v36 = nullsub_141;
      v37 = &v28;
      v38 = v25;
      __p = _NSConcreteStackBlock;
      v30 = 0x40000000;
      v31 = sub_100218570;
      v32 = &unk_1003FDF08;
      v33 = buf;
      sub_10005C5D4((dispatch_queue_t *)(v25 + 32), &__p);
      _Block_object_dispose(buf, 8);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = (double)v23 / 1000000000.0;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "WARNING: Lag (%f) too high, dropping %zu events", buf, 0x16u);
      goto LABEL_31;
    }
LABEL_7:
    v7 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v7 & 1) != 0)
      goto LABEL_45;
  }
  if (qword_100417ED8 == -1)
  {
    v26 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_44;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
    v26 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_44:
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Finished playing back events", buf, 2u);
    }
  }
LABEL_45:
  sub_100016DF8(a1);
}

void sub_10003C050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10003C090(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a1)
{
  std::chrono::nanoseconds __ns;

  __ns.__rep_ = a1;
  std::this_thread::sleep_for (&__ns);
}

uint64_t sub_10003C0B4(uint64_t *a1, char *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *i;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void **v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v33;
  __n128 (*v34)(uint64_t, uint64_t);
  uint64_t (*v35)();
  char **v36;
  char **v37;
  void **p_p;

  v4 = *a1;
  v26 = a2;
  v23 = 0;
  v24 = 0;
  __p = 0;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v33 = 0x4002000000;
  v34 = sub_100218590;
  v35 = nullsub_142;
  v36 = (char **)v4;
  v37 = &v26;
  p_p = &__p;
  v27 = _NSConcreteStackBlock;
  v28 = 0x40000000;
  v29 = sub_1002185A8;
  v30 = &unk_1003FDF30;
  p_buf = &buf;
  sub_10005C5D4((dispatch_queue_t *)(v4 + 32), &v27);
  _Block_object_dispose(&buf, 8);
  v5 = (char *)__p;
  v6 = v23;
  if (__p != v23)
  {
    *(_QWORD *)&buf = a2;
    while (!sub_100218920((uint64_t *)&buf, (int **)v5))
    {
      v5 += 16;
      if (v5 == v6)
      {
        v5 = v6;
        goto LABEL_19;
      }
    }
    if (v5 != v6)
    {
      for (i = v5 + 16; i != v6; i += 16)
      {
        if (!sub_100218920((uint64_t *)&buf, (int **)i))
        {
          v9 = *(_OWORD *)i;
          *(_QWORD *)i = 0;
          *((_QWORD *)i + 1) = 0;
          v10 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
          *(_OWORD *)v5 = v9;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v5 += 16;
        }
      }
    }
LABEL_19:
    v13 = *a1;
    v25 = v23;
    v26 = v5;
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v33 = 0x4002000000;
    v34 = sub_100218A94;
    v35 = nullsub_143;
    v36 = &v26;
    v37 = &v25;
    p_p = (void **)v13;
    v27 = _NSConcreteStackBlock;
    v28 = 0x40000000;
    v29 = sub_100218AAC;
    v30 = &unk_1003FDF58;
    p_buf = &buf;
    sub_10005C5D4((dispatch_queue_t *)(v13 + 32), &v27);
    _Block_object_dispose(&buf, 8);
    v14 = (v23 - (_BYTE *)__p) >> 4;
    v7 = v14 - ((v23 - v5) >> 4);
    if (v14 != (v23 - v5) >> 4)
    {
      if (qword_100417ED8 == -1)
      {
        v15 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_23;
        goto LABEL_22;
      }
      dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
      v15 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_22:
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WARNING: Dropping %zu events", (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_23:
    v5 = (char *)__p;
    if (!__p)
      return v7;
    goto LABEL_24;
  }
  v7 = 0;
  if (!__p)
    return v7;
LABEL_24:
  v16 = v23;
  v17 = v5;
  if (v23 != v5)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v16 - 1);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v16 -= 16;
    }
    while (v16 != v5);
    v17 = __p;
  }
  v23 = v5;
  operator delete(v17);
  return v7;
}

void sub_10003C3F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_1000CDD68(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003C420(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003C5AC(a1);
  sub_10003C5AC(v2 + 168);
  sub_10003C5AC(a1 + 336);
  sub_10003C5AC(a1 + 504);
  sub_10003C5AC(a1 + 672);
  sub_10003C5AC(a1 + 840);
  sub_10003C5AC(a1 + 1008);
  sub_10003C5AC(a1 + 1176);
  sub_10003C5AC(a1 + 1344);
  sub_10003C5AC(a1 + 1512);
  sub_10003C5AC(a1 + 1680);
  sub_10003C5AC(a1 + 1848);
  sub_10003C5AC(a1 + 2016);
  sub_10003C5AC(a1 + 2184);
  sub_10003C5AC(a1 + 2352);
  sub_10003C5AC(a1 + 2520);
  sub_10003C5AC(a1 + 2688);
  sub_10003C5AC(a1 + 2856);
  sub_10003C5AC(a1 + 3024);
  sub_10003C5AC(a1 + 3192);
  sub_10003C5AC(a1 + 3360);
  sub_10003C5AC(a1 + 3528);
  sub_10003C5AC(a1 + 3696);
  sub_10003C5AC(a1 + 3864);
  sub_10003C5AC(a1 + 4032);
  sub_10003C5AC(a1 + 4200);
  sub_10003C5AC(a1 + 4368);
  return a1;
}

void sub_10003C58C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  do
  {
    v2 -= 168;
    sub_100064EFC(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C5AC(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  v2 = sub_10003C888();
  *(_QWORD *)(a1 + 152) = v2;
  *(_QWORD *)(a1 + 160) = v2;
  return a1;
}

void sub_10003C5F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (*(_BYTE *)(v1 + 72))
  {
    *(_QWORD *)(v1 + 80) = off_1003F54B8;
    v3 = *(void **)(v1 + 136);
    if (v3)
    {
      free(v3);
      *(_DWORD *)(v1 + 144) = 0;
    }
    *(_QWORD *)(v1 + 80) = off_1003F0658;
    v4 = *(unsigned int **)(v1 + 96);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
        v8 = v4 + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
      }
    }
    *(_BYTE *)(v1 + 72) = 0;
  }
  sub_100342094();
  _Unwind_Resume(a1);
}

uint64_t sub_10003C6A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003C824(a1);
  sub_10003C824(v2 + 80);
  sub_10003C824(a1 + 160);
  sub_10003C824(a1 + 240);
  sub_10003C824(a1 + 320);
  sub_10003C824(a1 + 400);
  sub_10003C824(a1 + 480);
  sub_10003C824(a1 + 560);
  sub_10003C824(a1 + 640);
  sub_10003C824(a1 + 720);
  sub_10003C824(a1 + 800);
  sub_10003C824(a1 + 880);
  sub_10003C824(a1 + 960);
  sub_10003C824(a1 + 1040);
  sub_10003C824(a1 + 1120);
  sub_10003C824(a1 + 1200);
  sub_10003C824(a1 + 1280);
  sub_10003C824(a1 + 1360);
  sub_10003C824(a1 + 1440);
  sub_10003C824(a1 + 1520);
  sub_10003C824(a1 + 1600);
  sub_10003C824(a1 + 1680);
  sub_10003C824(a1 + 1760);
  sub_10003C824(a1 + 1840);
  sub_10003C824(a1 + 1920);
  sub_10003C824(a1 + 2000);
  sub_10003C824(a1 + 2080);
  return a1;
}

void sub_10003C804(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  do
  {
    v2 -= 80;
    sub_100064CA8(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C824(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = sub_10003C888();
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v2;
  return a1;
}

void sub_10003C864(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 56))
    sub_100342060();
  sub_100342104();
  _Unwind_Resume(a1);
}

uint64_t sub_10003C888()
{
  unsigned __int8 v0;
  mach_timebase_info info;

  v0 = atomic_load((unsigned __int8 *)&qword_100419C30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100419C30))
  {
    mach_timebase_info(&info);
    qword_100419C28 = (uint64_t)info;
    __cxa_guard_release(&qword_100419C30);
  }
  return qword_100419C10 + mach_absolute_time() * qword_100419C28 / HIDWORD(qword_100419C28);
}

void sub_10003C908(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100419C30);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C920(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1003F5DC8;
  v4 = a1 + 8;
  v5 = *a2;
  if (*a2)
  {
    v6 = (std::__shared_weak_count *)a2[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (*(char *)(v5 + 31) < 0)
    {
      sub_10006CED8((_BYTE *)v4, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16));
    }
    else
    {
      v9 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v4 = v9;
    }
    if (v6)
    {
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 31) = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  v12 = *a2;
  if (*a2)
    LOBYTE(v12) = *(_BYTE *)(v12 + 32) != 0;
  *(_BYTE *)(a1 + 32) = v12;
  return a1;
}

void sub_10003CA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CA18(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;

  *(_QWORD *)a1 = &off_1003FEB58;
  sub_10022ED88(a1 + 472);
  v2 = *(std::__shared_weak_count **)(a1 + 424);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 408);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 408);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 376);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 384);
    v10 = *(void **)(a1 + 376);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 376);
    }
    *(_QWORD *)(a1 + 384) = v8;
    operator delete(v10);
  }
  v14 = *(std::__shared_weak_count **)(a1 + 368);
  if (!v14)
    goto LABEL_26;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v17)
      goto LABEL_32;
  }
  else
  {
LABEL_26:
    v17 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v17)
      goto LABEL_32;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_32:
  if (*(_BYTE *)(a1 + 72))
  {
    sub_10000CF0C(a1 + 80);
    *(_BYTE *)(a1 + 72) = 0;
  }
  v20 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v20)
    goto LABEL_38;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v23)
      goto LABEL_44;
  }
  else
  {
LABEL_38:
    v23 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v23)
      goto LABEL_44;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_44:
  v26 = *(uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v26)
  {
    sub_10003CF10(v26);
    operator delete();
  }
  v27 = *(uint64_t **)(a1 + 8);
  if (v27)
  {
    v28 = *(uint64_t **)(a1 + 16);
    v29 = *(void **)(a1 + 8);
    if (v28 != v27)
    {
      do
        v28 = sub_10003CF10(v28 - 9);
      while (v28 != v27);
      v29 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v27;
    operator delete(v29);
  }
  return a1;
}

uint64_t *sub_10003CCA8(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = a1[2];
  a1[2] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *a1;
  *a1 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

_QWORD *sub_10003CD90(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  if (result)
  {
    sub_10003F6BC(result);
    operator delete();
  }
  return result;
}

void sub_10003CDC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = off_1003FECF0;
  v2 = (std::__shared_weak_count *)a1[29];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *a1 = off_1003F4C00;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    *a1 = off_1003F4C00;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  sub_100048DC0((uint64_t)(a1 + 1));
  operator delete();
}

void sub_10003CE9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = off_1003FFE30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete();
}

void sub_10003CF14(uint64_t a1)
{
  sub_10003CF38(a1);
  operator delete();
}

uint64_t sub_10003CF38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = off_1003FE848;
  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 64))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 64))
LABEL_6:
    *(_BYTE *)(a1 + 64) = 0;
LABEL_7:
  if (*(_BYTE *)(a1 + 48))
    *(_BYTE *)(a1 + 48) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 16);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 80;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

void sub_10003D038(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD **a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  size_t v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *i;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void **__dst;
  _QWORD *v34;
  int64_t v35;
  double *v36;
  void *v37;
  uint8_t buf[4];
  void **v39;
  __int16 v40;
  uint64_t v41;

  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
  v8 = qword_100417EE0;
  if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    goto LABEL_22;
  v9 = qword_10041AE50;
  if (!qword_10041AE50)
LABEL_10:
    sub_10018CB98("map::at:  key not found");
  v10 = *(_DWORD *)(*a3 + 8);
  while (1)
  {
    while (1)
    {
      v11 = *(_DWORD *)(v9 + 32);
      if (v10 >= v11)
        break;
      v9 = *(_QWORD *)v9;
      if (!v9)
        goto LABEL_10;
    }
    if (v11 >= v10)
      break;
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
      goto LABEL_10;
  }
  v12 = *(const char **)(v9 + 40);
  v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v34 = (_QWORD *)v14;
    v35 = v17 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v13;
    p_dst = (void **)&__dst;
    if (!v13)
    {
LABEL_19:
      *((_BYTE *)p_dst + v14) = 0;
      v18 = (void **)&__dst;
      if (v35 < 0)
        v18 = __dst;
      *(_DWORD *)buf = 136315394;
      v39 = v18;
      v40 = 2048;
      v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Creating new particle filter %s at timestamp %lld", buf, 0x16u);
      if (SHIBYTE(v35) < 0)
      {
        operator delete(__dst);
        v19 = (uint64_t)(a1 + 47);
        if (a1 + 47 == a4)
        {
LABEL_24:
          v21 = *a3;
          v20 = a3[1];
          if (v20)
          {
            v22 = (unint64_t *)(v20 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v24 = (std::__shared_weak_count *)a1[46];
          a1[45] = v21;
          a1[46] = v20;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (uint64_t *)a1[1];
          a1[57] = a2;
          for (i = (uint64_t *)a1[2]; i != v27; i = sub_10003CF10(i - 9))
            ;
          a1[2] = v27;
          v29 = (uint64_t *)a1[4];
          a1[4] = 0;
          if (v29)
          {
            sub_10003CF10(v29);
            operator delete();
          }
          v30 = a1[35];
          v31 = operator new(0x20uLL);
          *((_QWORD *)v31 + 1) = 0;
          *((_QWORD *)v31 + 2) = 0;
          *(_QWORD *)v31 = off_1003FE418;
          v36 = sub_10003F3F4((double *)v31 + 3, v30);
          v37 = v31;
          v32 = operator new(0xB0uLL);
          v32[1] = 0;
          v32[2] = 0;
          *v32 = off_1003FEC38;
          sub_10022EF34((uint64_t)buf, (uint64_t)(v32 + 3), v19, a1 + 50);
          __dst = (void **)(v32 + 3);
          v34 = v32;
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
          operator new();
        }
LABEL_23:
        sub_10021F6C8(v19, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
        goto LABEL_24;
      }
LABEL_22:
      v19 = (uint64_t)(a1 + 47);
      if (a1 + 47 == a4)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  memmove(p_dst, v12, v14);
  goto LABEL_19;
}

void sub_10003DC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v30 + 16) = v31;
  sub_10022C110(&a20);
  v34 = a23;
  a23 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  sub_1000E095C((uint64_t)&a16);
  v35 = a26;
  a26 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_1000E095C((uint64_t)&a18);
  v36 = *(_QWORD *)(v32 + 48);
  *(_QWORD *)(v32 + 48) = 0;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    sub_1000E095C((uint64_t)&a27);
    sub_1000E095C((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_1000E095C((uint64_t)&a27);
  sub_1000E095C((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_10003DFEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v2 - 144));
  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v1 + 64));
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10003E07C()
{
  operator new();
}

void sub_10003E150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1003444E0();
  operator delete();
}

uint64_t sub_10003E180()
{
  return 3;
}

uint64_t sub_10003E188()
{
  return 5;
}

void sub_10003E190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v18 = *(_QWORD *)a1;
  *((_QWORD *)&v18 + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(unsigned int *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *v8;
  v10 = v8[1];
  v17 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  sub_100040018(a2, &v18, v7, v6, v9, v10, &v17);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_10003E280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;

  *(_QWORD *)a1 = off_1003FFE30;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = sub_10003E3C8(a3);
  *(long double *)(a1 + 24) = 1.0 - exp(v5 * -0.25);
  v6 = sub_10003E38C(a3);
  *(long double *)(a1 + 32) = 1.0 - exp(v6 * -0.25);
  v7 = sub_10003E350(a3);
  *(long double *)(a1 + 40) = 1.0 - exp(v7 * -0.25);
  return a1;
}

void sub_10003E338(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    sub_100344030(v3);
  _Unwind_Resume(exception_object);
}

double sub_10003E350(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return 1.0 / *(double *)(v1 + 24);
}

double sub_10003E38C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 176);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 176);
  return 1.0 / *(double *)(v1 + 56);
}

double sub_10003E3C8(uint64_t a1)
{
  return 1.0 / *(double *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t sub_10003E3DC(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v8;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v9;
  v10 = *a4;
  *a4 = 0;
  v12 = *a5;
  v11 = a5[1];
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a6[1];
  *(_QWORD *)(result + 40) = *a6;
  *(_QWORD *)(result + 48) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_DWORD *)(result + 56) = a7;
  *(_QWORD *)(result + 64) = a8;
  return result;
}

uint64_t sub_10003E44C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  float v8;
  int v10;
  double v11;

  *(_QWORD *)sub_10003F8C0(a1, a2) = &off_1003FEE90;
  *(double *)(a1 + 128) = 1.0 / sub_10003E5E4(*a2, a3);
  *(double *)(a1 + 136) = sub_10003E678(*a2);
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FEEF0);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return a1;
    goto LABEL_3;
  }
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    v7 = sub_10003E684(*a2);
    v8 = sub_10003E5E4(*a2, a3);
    v10 = 134217984;
    v11 = -(log(1.0 - 1.0 / (double)(unint64_t)v7) * v8);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Average injection rate if weight is exactly 50%% off-map: one injected particle every %f seconds", (uint8_t *)&v10, 0xCu);
  }
  return a1;
}

void sub_10003E5BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003CF38(v1);
  _Unwind_Resume(a1);
}

void sub_10003E5D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003CF38(v1);
  _Unwind_Resume(a1);
}

float sub_10003E5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float result;
  uint64_t v4;
  uint64_t v5;

  switch(a2)
  {
    case 5:
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
      if (!v4)
        v4 = *(_QWORD *)(qword_10041B018 + 72);
      return *(float *)(v4 + 24);
    case 3:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
      if (!v5)
        v5 = *(_QWORD *)(qword_10041B018 + 72);
      return *(float *)(v5 + 20);
    case 2:
      v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
      if (!v2)
        v2 = *(_QWORD *)(qword_10041B018 + 72);
      return *(float *)(v2 + 16);
  }
  return result;
}

double sub_10003E678(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 184);
}

uint64_t sub_10003E684(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24);
}

void sub_10003E694(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  std::runtime_error v5;
  _QWORD v6[8];
  _QWORD v7[7];
  std::string v8;
  int v9;

  *a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a4;
  v9 = *(_DWORD *)(a3 + 8);
  switch(v9)
  {
    case 0:
      operator new();
    case 1:
    case 3:
    case 4:
    case 5:
    case 7:
    case 10:
    case 11:
    case 12:
      sub_1001D4178();
    case 2:
    case 6:
      sub_10003F430(v4);
      sub_10003F444(v4, (uint64_t)v6);
      operator new();
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
      operator new();
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v8, "LocalizerType not implemented to generate ParticleGenerator initialization step");
      std::runtime_error::runtime_error(&v5, &v8);
      v5.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)v7);
      sub_1000F2F7C(&v5, (uint64_t)"ParticleGenerator::InitializationSteps newParticleGeneratorImpl(const LocalizerSpec &, const Params &, const Universal2d *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_generator.cpp", 125, (uint64_t)v7);
  }
}

void sub_10003ECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::runtime_error a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;

  sub_1000F3264(&a12);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a11);
  if (*(char *)(v25 - 121) < 0)
  {
    operator delete(*(void **)(v25 - 144));
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_1000E095C(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  sub_1000E095C(v22);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003F310(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1003FF6F0;
  sub_10003F348(a2, (uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_10003F348@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
  {
    v10 = *(_QWORD *)(qword_10041B018 + 56);
    v4 = *(float *)(v10 + 16);
    v5 = *(float32x2_t *)(v10 + 20);
    v6 = *(_QWORD *)(v10 + 28);
    v7 = *(_QWORD *)(v2 + 72);
    if (v7)
      goto LABEL_3;
LABEL_5:
    v7 = *(_QWORD *)(qword_10041B018 + 72);
    goto LABEL_3;
  }
  v4 = *(float *)(v3 + 16);
  v5 = *(float32x2_t *)(v3 + 20);
  v6 = *(_QWORD *)(v3 + 28);
  v7 = *(_QWORD *)(v2 + 72);
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v8 = (int8x16_t)vcvtq_f64_f32(v5);
  v9 = *(unsigned int *)(v7 + 28);
  *(double *)a2 = v4;
  *(int8x16_t *)(a2 + 8) = vextq_s8(v8, v8, 8uLL);
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v9;
  return result;
}

uint64_t sub_10003F3C4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FF6A0;
  sub_10003F3F4((double *)(a1 + 8), a2);
  return a1;
}

double *sub_10003F3F4(double *a1, uint64_t a2)
{
  *a1 = sub_10003F420(a2);
  return a1;
}

double sub_10003F420(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 136);
}

BOOL sub_10003F430(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 100) != 0;
}

uint64_t sub_10003F444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  if (!v2)
    v2 = *(_QWORD *)(qword_10041B018 + 72);
  return sub_10003F4AC(a2, v2);
}

uint64_t sub_10003F470(uint64_t a1, char a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1003FF6C8;
  sub_10003F4AC(a1 + 8, a3);
  *(_BYTE *)(a1 + 64) = a2;
  return a1;
}

uint64_t sub_10003F4AC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003FA0D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_10003F538((_DWORD *)a1, a2);
  return a1;
}

void sub_10003F508(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10003F524(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003F538(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;
  _BYTE v15[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v15, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 2884);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v14, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 48);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 16);
    a1[12] |= 1u;
    a1[4] = v8;
    v5 = *(_DWORD *)(a2 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 20);
  a1[12] |= 2u;
  a1[5] = v9;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v10 = *(_DWORD *)(a2 + 24);
  a1[12] |= 4u;
  a1[6] = v10;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *(_DWORD *)(a2 + 28);
  a1[12] |= 8u;
  a1[7] = v11;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_18:
    v13 = *(_DWORD *)(a2 + 36);
    a1[12] |= 0x20u;
    a1[9] = v13;
    if ((*(_DWORD *)(a2 + 48) & 0x40) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_11;
  }
LABEL_17:
  v12 = *(_DWORD *)(a2 + 32);
  a1[12] |= 0x10u;
  a1[8] = v12;
  v5 = *(_DWORD *)(a2 + 48);
  if ((v5 & 0x20) != 0)
    goto LABEL_18;
LABEL_10:
  if ((v5 & 0x40) != 0)
  {
LABEL_11:
    v6 = *(_DWORD *)(a2 + 40);
    a1[12] |= 0x40u;
    a1[10] = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10003F694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10003F6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003F6BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (!v5)
    return a1;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_10003F76C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1003FF7C0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  operator delete();
}

void sub_10003F7FC()
{
  operator delete();
}

void sub_10003F810()
{
  operator delete();
}

void sub_10003F824()
{
  operator delete();
}

void sub_10003F838()
{
  operator delete();
}

void sub_10003F84C(_QWORD *a1)
{
  *a1 = off_1003FF6C8;
  sub_10003F88C((uint64_t)(a1 + 1));
  operator delete();
}

void sub_10003F88C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA0D0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_10003F8C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  sub_10003F950(a1);
  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = v4;
  if (!v8)
    return a1;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_10003F950(uint64_t a1)
{
  __n128 v3;

  sub_10003FAB0((uint64_t)&v3, 1.0);
  *(_QWORD *)a1 = off_1003FE848;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10003FADC((__n128 *)(a1 + 32), &v3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  sub_10003FAA0(a1 + 120);
  *(_BYTE *)(a1 + 120) = 0;
  return a1;
}

void sub_10003F9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(v1 + 104);
  if (v4)
    sub_100343D74(v4);
  if (*(_BYTE *)(v1 + 64))
  {
    *(_BYTE *)(v1 + 64) = 0;
    if (!*(_BYTE *)(v1 + 48))
    {
LABEL_5:
      v5 = (char *)*v2;
      if (!*v2)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (!*(_BYTE *)(v1 + 48))
  {
    goto LABEL_5;
  }
  *(_BYTE *)(v1 + 48) = 0;
  v5 = (char *)*v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_9:
  v6 = *(char **)(v1 + 16);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 2);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 -= 80;
    }
    while (v6 != v5);
    v7 = *v2;
  }
  *(_QWORD *)(v1 + 16) = v5;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003FAA0(uint64_t result)
{
  *(_BYTE *)result = 1;
  *(_DWORD *)(result + 4) = 0;
  return result;
}

uint64_t sub_10003FAB0(uint64_t a1, long double a2)
{
  *(long double *)a1 = log(a2);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

__n128 sub_10003FADC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *sub_10003FAE8(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  *a1 = off_1003FF7C0;
  a1[1] = 0;
  v8 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v9 = (char *)operator new(0x18uLL);
  a1[1] = v9;
  a1[2] = v9;
  a1[3] = v9 + 24;
  v10 = *a2;
  *a2 = 0;
  v11 = *a3;
  *a3 = 0;
  v18 = v11;
  v19[0] = v10;
  v12 = *a4;
  *a4 = 0;
  v17 = v12;
  sub_10003FD88(v8, v19, &v18, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v19[0];
  v19[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return a1;
}

void sub_10003FBD8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  _QWORD *v13;
  _Unwind_Exception *v16;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  sub_100342AC0(&a11, &a12, a1, a2, (uint64_t)&a13);
  v16 = a13;
  sub_1001D4FB4(v13);
  _Unwind_Resume(v16);
}

void sub_10003FC24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001D4FB4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003FC38(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  *a1 = off_1003FF7C0;
  a1[1] = 0;
  v8 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v9 = (char *)operator new(0x18uLL);
  a1[1] = v9;
  a1[2] = v9;
  a1[3] = v9 + 24;
  v10 = *a2;
  *a2 = 0;
  v11 = *a3;
  *a3 = 0;
  v18 = v11;
  v19[0] = v10;
  v12 = *a4;
  *a4 = 0;
  v17 = v12;
  sub_10003FED0(v8, v19, &v18, &v17);
  v13 = v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v19[0];
  v19[0] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return a1;
}

void sub_10003FD28(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  _QWORD *v13;
  _Unwind_Exception *v16;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  sub_100342AC0(&a11, &a12, a1, a2, (uint64_t)&a13);
  v16 = a13;
  sub_1001D4FB4(v13);
  _Unwind_Resume(v16);
}

void sub_10003FD74(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001D4FB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FD88(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v7 = (uint64_t *)a1[1];
  if ((unint64_t)v7 >= a1[2])
  {
    v9 = sub_1001D5028(a1, a2);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[1] = v9;
  v10 = *a3;
  *a3 = 0;
  v17 = v10;
  v11 = *a4;
  *a4 = 0;
  v12 = (uint64_t *)a1[1];
  if ((unint64_t)v12 >= a1[2])
  {
    v13 = sub_1001D5028(a1, &v17);
  }
  else
  {
    v17 = 0;
    *v12 = v10;
    v13 = v12 + 1;
  }
  a1[1] = v13;
  v18 = v11;
  if ((unint64_t)v13 >= a1[2])
  {
    v14 = sub_1001D5028(a1, &v18);
    v15 = v18;
    a1[1] = v14;
    v18 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v11;
    a1[1] = v13 + 1;
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10003FE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003FED0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v7 = (uint64_t *)a1[1];
  if ((unint64_t)v7 >= a1[2])
  {
    v9 = sub_1001D5028(a1, a2);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *v7 = v8;
    v9 = v7 + 1;
  }
  a1[1] = v9;
  v10 = *a3;
  *a3 = 0;
  v17 = v10;
  v11 = *a4;
  *a4 = 0;
  v12 = (uint64_t *)a1[1];
  if ((unint64_t)v12 >= a1[2])
  {
    v13 = sub_1001D5028(a1, &v17);
  }
  else
  {
    v17 = 0;
    *v12 = v10;
    v13 = v12 + 1;
  }
  a1[1] = v13;
  v18 = v11;
  if ((unint64_t)v13 >= a1[2])
  {
    v14 = sub_1001D5028(a1, &v18);
    v15 = v18;
    a1[1] = v14;
    v18 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    *v13 = v11;
    a1[1] = v13 + 1;
  }
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10003FFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_100040018(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14 = *a7;
  v15 = v7;
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 72))(a1, &v15, a3, a4, a5, a6, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1000400E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000400FC()
{
  sub_100281474();
}

void sub_10004014C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  double *v6;
  float64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  float64x2_t *v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  double v16;
  int *v17;
  int *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v26;

  sub_1000B2914(a1, a3[6]);
  v7 = (float64x2_t *)a3[3];
  v6 = (double *)a3[4];
  if (v7 == (float64x2_t *)v6)
  {
    v9 = 0;
    goto LABEL_11;
  }
  v8 = (char *)v6 - (char *)v7 - 8;
  if (v8 >= 0x18)
  {
    v11 = (v8 >> 3) + 1;
    v10 = &v7->f64[v11 & 0x3FFFFFFFFFFFFFFCLL];
    v12 = v7 + 1;
    v13 = 0uLL;
    v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    v15 = 0uLL;
    do
    {
      v13 = vsubq_s64(v13, vcgtzq_f64(v12[-1]));
      v15 = vsubq_s64(v15, vcgtzq_f64(*v12));
      v12 += 2;
      v14 -= 4;
    }
    while (v14);
    v9 = vaddvq_s64(vaddq_s64(v15, v13));
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_11;
  }
  else
  {
    v9 = 0;
    v10 = (double *)a3[3];
  }
  do
  {
    v16 = *v10++;
    if (v16 > 0.0)
      ++v9;
  }
  while (v10 != v6);
LABEL_11:
  *(_QWORD *)&v26 = a3[6];
  *((_QWORD *)&v26 + 1) = v9;
  sub_10004822C(a1 + 2, &v26);
  v17 = (int *)*a3;
  v18 = (int *)a3[1];
  if ((int *)*a3 != v18)
  {
    do
    {
      LODWORD(v26) = 1;
      v19 = sub_10004033C((uint64_t)(a1 + 13), (uint64_t)v17, v17, (int *)&v26);
      if (!v20)
        ++v19[6];
      v17 += 52;
    }
    while (v17 != v18);
  }
  v21 = a1[8];
  v22 = a1[9];
  v23 = 73 * ((v22 - v21) >> 3) - 1;
  if (v22 == v21)
    v23 = 0;
  if (v23 == a1[12] + a1[11])
  {
    sub_10000BAD0((uint64_t)(a1 + 7));
    v21 = a1[8];
    v22 = a1[9];
  }
  if (v22 == v21)
  {
    v25 = 0;
  }
  else
  {
    v24 = a1[12] + a1[11];
    v25 = (_QWORD *)(*(_QWORD *)(v21 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49));
  }
  sub_100043C90(v25, a3);
  ++a1[12];
  sub_1000407B0((uint64_t)a1, a2, a3);
}

_QWORD *sub_10004033C(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v47;
  char *v48;

  v48 = &v47;
  v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  else
  {
    v10 = sub_10022CC84((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v4 = v10;
    if (v10 >= v11)
      v4 = v10 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v10;
  }
  v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v13)
  {
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      v15 = *(_DWORD *)a2;
      v16 = (v15 >> 31) ^ v15;
      v17 = v15 >> 31 == v15;
      v18 = *(_QWORD *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
                return v14;
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              v22 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
                return v14;
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      if (v17)
      {
        while (1)
        {
          v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
              return v14;
          }
          else
          {
            if (v24 >= v11)
              v24 %= v11;
            if (v24 != v4)
              goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      do
      {
        v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            v26 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
              return v14;
          }
        }
        else
        {
          if (v25 >= v11)
            v25 %= v11;
          if (v25 != v4)
            break;
        }
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  v28 = operator new(0x38uLL);
  v14 = v28;
  *v28 = 0;
  v28[1] = v10;
  v29 = v28 + 3;
  v32 = *a3;
  v31 = a3 + 2;
  v30 = v32;
  v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    *v29 = *(_QWORD *)v31;
    v33 = v30;
  }
  else
  {
    *(_OWORD *)v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 10) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  v28[6] = *a4;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    v10 = v4;
  }
  else
  {
    v36 = 1;
    if (v11 >= 3)
      v36 = (v11 & (v11 - 1)) != 0;
    v37 = v36 | (2 * v11);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_74;
    if (prime < v11)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v11)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v10 %= v11;
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  v43 = *(_QWORD *)a1;
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v44)
  {
    *v14 = *v44;
LABEL_97:
    *v44 = v14;
    goto LABEL_98;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v43 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    v45 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_10004079C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000407B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  void *v18;
  NSObject *v19;
  __int128 v20;
  int64_t v21;
  _BYTE __p[12];
  __int16 v23;
  _BYTE v24[10];
  unint64_t v25;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 108) && *(_BYTE *)(a2 + 109))
      goto LABEL_7;
    if (*(_QWORD *)(a2 + 40) != 110 || *(_DWORD *)(a2 + 104) != 2)
    {
      if (!*(_BYTE *)(a2 + 108))
      {
        v6 = "unknown";
        v7 = strlen("unknown");
        if (v7 < 0x7FFFFFFFFFFFFFF8)
          goto LABEL_11;
        goto LABEL_35;
      }
LABEL_7:
      if (*(_BYTE *)(a2 + 109))
        v6 = "merged";
      else
        v6 = "not merged";
      v7 = strlen(v6);
      if (v7 < 0x7FFFFFFFFFFFFFF8)
      {
LABEL_11:
        v8 = v7;
        if (v7 >= 0x17)
        {
          v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v12 = v7 | 7;
          v13 = v12 + 1;
          v9 = (__int128 *)operator new(v12 + 1);
          *((_QWORD *)&v20 + 1) = v8;
          v21 = v13 | 0x8000000000000000;
          *(_QWORD *)&v20 = v9;
        }
        else
        {
          HIBYTE(v21) = v7;
          v9 = &v20;
          if (!v7)
          {
LABEL_22:
            *((_BYTE *)v9 + v8) = 0;
            if (qword_100417ED8 == -1)
            {
              v14 = qword_100417EE0;
              if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
              {
LABEL_24:
                v15 = &v20;
                if (v21 < 0)
                  v15 = (__int128 *)v20;
                v16 = *(_QWORD *)(a2 + 40);
                v17 = *(_DWORD *)(a2 + 104);
                *(_DWORD *)__p = 136315650;
                *(_QWORD *)&__p[4] = v15;
                v23 = 2048;
                *(_QWORD *)v24 = v16;
                *(_WORD *)&v24[8] = 1024;
                LODWORD(v25) = v17;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Scan not used for coarse indoor. merged = %s, dwell = %lld, scanType = %d", __p, 0x1Cu);
              }
            }
            else
            {
              dispatch_once(&qword_100417ED8, &stru_1003FEDD0);
              v14 = qword_100417EE0;
              if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
                goto LABEL_24;
            }
            if ((SHIBYTE(v21) & 0x80000000) == 0)
              return;
            v18 = (void *)v20;
LABEL_32:
            operator delete(v18);
            return;
          }
        }
        memcpy(v9, v6, v8);
        goto LABEL_22;
      }
LABEL_35:
      sub_1000CDE30();
    }
LABEL_17:
    sub_100040AD0(a1, a2, a3);
    return;
  }
  sub_10004189C(a3, (uint64_t)__p);
  v10 = v25;
  sub_1000410F4((uint64_t)__p, *(_QWORD **)&v24[2]);
  v11 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v11)
    operator delete(v11);
  if (v10 < 2)
    goto LABEL_17;
  if (qword_100417ED8 == -1)
  {
    v19 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FEDD0);
    v19 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return;
  }
  sub_10004189C(a3, (uint64_t)__p);
  LODWORD(v20) = 134217984;
  *(_QWORD *)((char *)&v20 + 4) = v25;
  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Scan not used for coarse indoor. splitByFrequency size = %zu", (uint8_t *)&v20, 0xCu);
  sub_1000410F4((uint64_t)__p, *(_QWORD **)&v24[2]);
  v18 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v18)
    goto LABEL_32;
}

void sub_100040AD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  char *v6;
  char *i;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19[2];
  uint64_t *v20;
  void *__p[3];

  sub_10004189C(a3, (uint64_t)v19);
  v5 = v20;
  if (v20)
  {
    while (1)
    {
      v6 = (char *)v5[3];
      v18 = *((_DWORD *)v5 + 4);
      for (i = (char *)v5[4]; v6 != i; v6 += 208)
      {
        while (1)
        {
          v8 = sub_1000411C0((_QWORD *)(a1 + 184), (uint64_t)v6);
          if (!v8)
            break;
          ++v8[6];
          v6 += 208;
          if (v6 == i)
            goto LABEL_10;
        }
        __p[0] = v6;
        sub_10004142C(a1 + 184, (uint64_t)v6, (uint64_t)&unk_100395958, (int **)__p)[6] = 1;
      }
LABEL_10:
      v9 = sub_100040D68(a1 + 144, &v18, &v18, v5 + 3);
      if (v10)
        goto LABEL_4;
      v11 = v9;
      if (a2)
      {
        if (v5[9] - v9[9] < 500000 * *(_QWORD *)(a2 + 40))
          goto LABEL_4;
      }
      v12 = (char *)v9[3];
      v13 = (char *)v9[4];
      if (v12 != v13)
        break;
LABEL_21:
      if (v5 != v11)
      {
        sub_100232970(v11 + 3, v5[3], v5[4], 0x4EC4EC4EC4EC4EC5 * ((v5[4] - v5[3]) >> 4));
        sub_100199588(v11 + 6, (char *)v5[6], (char *)v5[7], (v5[7] - v5[6]) >> 3);
      }
      v11[9] = v5[9];
      *(_BYTE *)(a1 + 224) = 1;
LABEL_4:
      v5 = (uint64_t *)*v5;
      if (!v5)
      {
        sub_1000410F4((uint64_t)v19, v20);
        v17 = v19[0];
        v19[0] = 0;
        if (!v17)
          return;
        goto LABEL_24;
      }
    }
    while (1)
    {
      while (1)
      {
        __p[0] = v12;
        v14 = sub_10004142C(a1 + 184, (uint64_t)v12, (uint64_t)&unk_100395958, (int **)__p);
        if (v14[6] == 1)
          break;
        --v14[6];
LABEL_16:
        v12 += 208;
        if (v12 == v13)
          goto LABEL_21;
      }
      v15 = sub_1000411C0((_QWORD *)(a1 + 184), (uint64_t)v12);
      if (!v15)
        goto LABEL_16;
      sub_10002BB38((_QWORD *)(a1 + 184), v15, (uint64_t)__p);
      v16 = __p[0];
      __p[0] = 0;
      if (!v16)
        goto LABEL_16;
      operator delete(v16);
      v12 += 208;
      if (v12 == v13)
        goto LABEL_21;
    }
  }
  sub_1000410F4((uint64_t)v19, 0);
  v17 = v19[0];
  v19[0] = 0;
  if (!v17)
    return;
LABEL_24:
  operator delete(v17);
}

void sub_100040D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021929C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100040D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021929C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100040D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021929C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100040D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10021929C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100040D68(uint64_t a1, int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      result = (_QWORD *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = result[1];
            if (v14 == v8)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v8)
                return result;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = result[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v8)
              return result;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v29 = operator new(0x50uLL);
  *v29 = 0;
  v29[1] = v8;
  *((_DWORD *)v29 + 4) = *a3;
  sub_100043C90(v29 + 3, a4);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v23)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v23)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < *(_QWORD *)&v23)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v4 = v8 % v9;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        v18 = v29;
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v4 = v8;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        v18 = v29;
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v8;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v8));
      v18 = v29;
      if (v17)
        goto LABEL_26;
    }
LABEL_50:
    *v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      v28 = *(_QWORD *)(*v29 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v28 >= v9)
          v28 %= v9;
      }
      else
      {
        v28 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v29;
    }
    goto LABEL_61;
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v18 = v29;
  if (!v17)
    goto LABEL_50;
LABEL_26:
  *v18 = *v17;
  *v17 = v29;
LABEL_61:
  result = v29;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1000410C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;

  if (a10)
    sub_100219E18(v10, a10);
  _Unwind_Resume(exception_object);
}

void sub_1000410F4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (a2)
  {
    v2 = a2;
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (void *)v2[6];
      if (v5)
      {
        v2[7] = v5;
        operator delete(v5);
      }
      v6 = v2[3];
      if (v6)
      {
        v7 = v2[4];
        v3 = (void *)v2[3];
        if (v7 != v6)
        {
          do
          {
            v9 = *(_DWORD *)(v7 - 176);
            if (v9 == v9 >> 31)
            {
              if (*(_BYTE *)(v7 - 128))
                *(_BYTE *)(v7 - 128) = 0;
            }
            else
            {
              v8 = *(_QWORD *)(v7 - 168);
              if (v9 < 0)
              {
                if (v8)
                  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
              }
              else
              {
                (*(void (**)(uint64_t))v8)(v7 - 168);
              }
            }
            v7 -= 208;
          }
          while (v7 != v6);
          v3 = (void *)v2[3];
        }
        v2[4] = v6;
        operator delete(v3);
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
}

uint64_t *sub_1000411C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t *v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  char v24;
  char *v25;

  v25 = &v24;
  v4 = a2 + 8;
  if (*(_DWORD *)a2 != *(int *)a2 >> 31)
  {
    v5 = sub_10022CC84((uint64_t)&v25, (unsigned __int8 *)(a2 + 8));
    v6 = (int8x8_t)a1[1];
    if (v6)
      goto LABEL_3;
    return 0;
  }
  v5 = *(_QWORD *)v4;
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
LABEL_3:
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v10 = *(uint64_t **)(*a1 + 8 * v8);
  if (!v10)
    return v10;
  v10 = (uint64_t *)*v10;
  if (!v10)
    return v10;
  v11 = *(_DWORD *)a2;
  v12 = (v11 >> 31) ^ v11;
  v13 = v11 >> 31 == v11;
  v14 = *(_QWORD *)(a2 + 8);
  if (v7.u32[0] <= 1uLL)
  {
    v15 = *(_QWORD *)&v6 - 1;
    if (v13)
    {
      while (1)
      {
        v16 = v10[1];
        if (v16 == v5)
        {
          if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12 && v10[3] == v14)
            return v10;
        }
        else if ((v16 & v15) != v8)
        {
          return 0;
        }
        v10 = (uint64_t *)*v10;
        if (!v10)
          return v10;
      }
    }
    while (1)
    {
      v17 = v10[1];
      if (v17 == v5)
      {
        if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12)
        {
          v18 = v10[3] == *(_QWORD *)v4 && v10[4] == *(_QWORD *)(v4 + 8);
          if (v18 && *((_DWORD *)v10 + 10) == (unint64_t)*(unsigned int *)(v4 + 16))
            return v10;
        }
      }
      else if ((v17 & v15) != v8)
      {
        return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return v10;
    }
  }
  if (v13)
  {
    while (1)
    {
      v20 = v10[1];
      if (v20 == v5)
      {
        if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12 && v10[3] == v14)
          return v10;
      }
      else
      {
        if (v20 >= *(_QWORD *)&v6)
          v20 %= *(_QWORD *)&v6;
        if (v20 != v8)
          return 0;
      }
      v10 = (uint64_t *)*v10;
      if (!v10)
        return v10;
    }
  }
  while (1)
  {
    v21 = v10[1];
    if (v21 != v5)
      break;
    if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12)
    {
      v22 = v10[3] == *(_QWORD *)v4 && v10[4] == *(_QWORD *)(v4 + 8);
      if (v22 && *((_DWORD *)v10 + 10) == (unint64_t)*(unsigned int *)(v4 + 16))
        return v10;
    }
LABEL_44:
    v10 = (uint64_t *)*v10;
    if (!v10)
      return v10;
  }
  if (v21 >= *(_QWORD *)&v6)
    v21 %= *(_QWORD *)&v6;
  if (v21 == v8)
    goto LABEL_44;
  return 0;
}

_QWORD *sub_10004142C(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v27;
  int *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  int v32;
  __int128 v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v47;
  char *v48;

  v48 = &v47;
  v8 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      goto LABEL_58;
  }
  else
  {
    v9 = sub_10022CC84((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      goto LABEL_58;
  }
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v4 = v9;
    if (v9 >= v10)
      v4 = v9 % v10;
  }
  else
  {
    v4 = (v10 - 1) & v9;
  }
  v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v12)
  {
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      v14 = *(_DWORD *)a2;
      v15 = (v14 >> 31) ^ v14;
      v16 = v14 >> 31 == v14;
      v17 = *(_QWORD *)(a2 + 8);
      if (v11.u32[0] <= 1uLL)
      {
        v18 = v10 - 1;
        if (v16)
        {
          while (1)
          {
            v19 = v13[1];
            if (v19 == v9)
            {
              if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15 && v13[3] == v17)
                return v13;
            }
            else if ((v19 & v18) != v4)
            {
              goto LABEL_58;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v20 = v13[1];
          if (v20 == v9)
          {
            if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15)
            {
              v21 = v13[3] == *(_QWORD *)v8 && v13[4] == *(_QWORD *)(v8 + 8);
              if (v21 && *((_DWORD *)v13 + 10) == (unint64_t)*(unsigned int *)(v8 + 16))
                return v13;
            }
          }
          else if ((v20 & v18) != v4)
          {
            goto LABEL_58;
          }
          v13 = (_QWORD *)*v13;
          if (!v13)
            goto LABEL_58;
        }
      }
      if (v16)
      {
        while (1)
        {
          v23 = v13[1];
          if (v23 == v9)
          {
            if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15 && v13[3] == v17)
              return v13;
          }
          else
          {
            if (v23 >= v10)
              v23 %= v10;
            if (v23 != v4)
              goto LABEL_58;
          }
          v13 = (_QWORD *)*v13;
          if (!v13)
            goto LABEL_58;
        }
      }
      do
      {
        v24 = v13[1];
        if (v24 == v9)
        {
          if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15)
          {
            v25 = v13[3] == *(_QWORD *)v8 && v13[4] == *(_QWORD *)(v8 + 8);
            if (v25 && *((_DWORD *)v13 + 10) == (unint64_t)*(unsigned int *)(v8 + 16))
              return v13;
          }
        }
        else
        {
          if (v24 >= v10)
            v24 %= v10;
          if (v24 != v4)
            break;
        }
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
  }
LABEL_58:
  v27 = operator new(0x38uLL);
  v13 = v27;
  *v27 = 0;
  v27[1] = v9;
  v28 = *a4;
  v29 = v27 + 3;
  v31 = *a4 + 2;
  v30 = **a4;
  if (v30 == v30 >> 31)
  {
    *v29 = *v31;
    v32 = v30;
  }
  else
  {
    v33 = *(_OWORD *)v31;
    *((_DWORD *)v27 + 10) = (*a4)[6];
    *(_OWORD *)v29 = v33;
    v32 = *v28;
    v30 = *v28 >> 31;
  }
  *((_DWORD *)v27 + 4) = v32 ^ v30;
  v27[6] = 0;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (v10 && (float)(v35 * (float)v10) >= v34)
  {
    v9 = v4;
  }
  else
  {
    v36 = 1;
    if (v10 >= 3)
      v36 = (v10 & (v10 - 1)) != 0;
    v37 = v36 | (2 * v10);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_74;
    if (prime < v10)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v10)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v9 %= v10;
    }
    else
    {
      v9 &= v10 - 1;
    }
  }
  v43 = *(_QWORD *)a1;
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v44)
  {
    *v13 = *v44;
LABEL_97:
    *v44 = v13;
    goto LABEL_98;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v43 + 8 * v9) = a1 + 16;
  if (*v13)
  {
    v45 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10)
        v45 %= v10;
    }
    else
    {
      v45 &= v10 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_100041888(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10004189C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  int v58;
  _QWORD *v59;
  int v60;
  __int128 v61;
  int v62;
  int *v63;
  _QWORD *v64;
  int v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  void *v74;
  void *v75;
  void *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  void *v82[2];
  void *__p[2];
  __int128 v84;
  int v85;
  void *v86[2];
  void *v87[2];
  int v88;
  void *v89;
  void *v90[2];
  char v91;
  std::string v92;

  *(_OWORD *)v86 = 0u;
  *(_OWORD *)v87 = 0u;
  v88 = 1065353216;
  v3 = *a1;
  if (a1[1] == *a1)
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
    goto LABEL_95;
  }
  v5 = 0;
  v6 = (uint64_t *)&__p[1];
LABEL_7:
  v8 = a1[3];
  if (v5 < (a1[4] - v8) >> 3)
  {
    v9 = *(_QWORD *)(v8 + 8 * v5);
    v10 = (_DWORD *)(v3 + 208 * v5);
    v85 = 0;
    v12 = v10 + 8;
    v11 = v10[8];
    if (v11 == v11 >> 31)
    {
      v13 = *(_DWORD *)(v3 + 208 * v5 + 120);
      v85 = v13;
      v14 = (unint64_t)v86[1];
      if (!v86[1])
        goto LABEL_34;
    }
    else
    {
      v15 = v3 + 208 * v5;
      v18 = *(_QWORD *)(v15 + 40);
      v16 = v15 + 40;
      v17 = v18;
      if (v11 >= 0)
        v19 = v16;
      else
        v19 = v17;
      v13 = *(_DWORD *)(v19 + 96) + 2402;
      v85 = v13;
      v14 = (unint64_t)v86[1];
      if (!v86[1])
        goto LABEL_34;
    }
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v21 = v13;
      if (v14 <= v13)
        v21 = v13 % v14;
    }
    else
    {
      v21 = (v14 - 1) & v13;
    }
    v22 = (uint64_t **)*((_QWORD *)v86[0] + v21);
    if (!v22 || (v23 = *v22) == 0)
    {
LABEL_34:
      *(_OWORD *)__p = 0u;
      v84 = 0u;
      *(_OWORD *)v82 = 0u;
      v27 = operator new(8uLL);
      *v27 = v9;
      v82[1] = v27 + 1;
      __p[0] = v27 + 1;
      v82[0] = v27;
      *(_QWORD *)&v84 = sub_10021970C(v6, v3 + 208 * v5);
      sub_100042088((uint64_t)v86, &v85, &v85, (uint64_t)v82);
      if ((v28 & 1) == 0)
      {
        sub_1000D5048(v90, "");
        sub_100219DCC(".find() didn't match so this should be a clean insertion", &v92);
        sub_100174738((uint64_t)v90, (uint64_t)&v92, 1);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (v91 < 0)
          operator delete(v90[0]);
        sub_1000F2AE4((uint64_t)&v89);
      }
      v29 = (char *)__p[1];
      if (__p[1])
      {
        v30 = (char *)v84;
        v31 = __p[1];
        if ((void *)v84 != __p[1])
        {
          do
          {
            v33 = *((_DWORD *)v30 - 44);
            if (v33 == v33 >> 31)
            {
              if (*(v30 - 128))
                *(v30 - 128) = 0;
            }
            else
            {
              v32 = *((_QWORD *)v30 - 21);
              if (v33 < 0)
              {
                if (v32)
                  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
              }
              else
              {
                (*(void (**)(char *))v32)(v30 - 168);
              }
            }
            v30 -= 208;
          }
          while (v30 != v29);
          v31 = __p[1];
        }
        *(_QWORD *)&v84 = v29;
        operator delete(v31);
      }
      if (v82[0])
      {
        v82[1] = v82[0];
        operator delete(v82[0]);
      }
      goto LABEL_6;
    }
    if (v20.u32[0] < 2uLL)
    {
      v24 = v14 - 1;
      while (1)
      {
        v26 = v23[1];
        if (v26 == v13)
        {
          if (*((_DWORD *)v23 + 4) == v13)
            goto LABEL_50;
        }
        else if ((v26 & v24) != v21)
        {
          goto LABEL_34;
        }
        v23 = (uint64_t *)*v23;
        if (!v23)
          goto LABEL_34;
      }
    }
    while (1)
    {
      v25 = v23[1];
      if (v25 == v13)
      {
        if (*((_DWORD *)v23 + 4) == v13)
        {
LABEL_50:
          v35 = (char *)v23[4];
          v34 = v23[5];
          if ((unint64_t)v35 < v34)
          {
            *(_QWORD *)v35 = v9;
            v36 = v35 + 8;
            goto LABEL_72;
          }
          v81 = v6;
          v37 = (char *)v23[3];
          v38 = v35 - v37;
          v39 = (v35 - v37) >> 3;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            sub_1000D02C0();
          v41 = v34 - (_QWORD)v37;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (!v42)
          {
            v44 = 0;
            v45 = (_QWORD *)(8 * v39);
            *(_QWORD *)(8 * v39) = v9;
            v46 = 8 * v39 + 8;
            if (v35 != v37)
              goto LABEL_61;
LABEL_64:
            v6 = v81;
            goto LABEL_70;
          }
          if (v42 >> 61)
            sub_1000CDEB8();
          v43 = v42;
          v44 = operator new(8 * v42);
          v42 = v43;
          v39 = (v35 - v37) >> 3;
          v38 = v35 - v37;
          v45 = &v44[8 * v39];
          *v45 = v9;
          v46 = (uint64_t)(v45 + 1);
          if (v35 == v37)
            goto LABEL_64;
LABEL_61:
          v47 = v35 - 8 - v37;
          if (v47 < 0x58)
          {
            v6 = v81;
            goto LABEL_69;
          }
          v6 = v81;
          if ((unint64_t)(v35 - v44 - v38) < 0x20)
            goto LABEL_118;
          v48 = (v47 >> 3) + 1;
          v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
          v50 = &v35[-v49];
          v45 = (_QWORD *)((char *)v45 - v49);
          v51 = &v44[8 * v39 - 16];
          v52 = v35 - 16;
          v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 4;
          }
          while (v53);
          v35 = v50;
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_118:
            do
            {
LABEL_69:
              v55 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *--v45 = v55;
            }
            while (v35 != v37);
          }
LABEL_70:
          v23[3] = (uint64_t)v45;
          v23[4] = v46;
          v23[5] = (uint64_t)&v44[8 * v42];
          if (v37)
          {
            v36 = (_QWORD *)v46;
            operator delete(v37);
LABEL_72:
            v46 = (uint64_t)v36;
          }
          v23[4] = v46;
          v56 = v23[7];
          if (v56 >= v23[8])
          {
            v7 = sub_10021970C(v23 + 6, (uint64_t)v10);
          }
          else
          {
            v57 = (_QWORD *)(v56 + 8);
            v59 = v10 + 2;
            v58 = *v10;
            if (v58 == v58 >> 31)
            {
              *v57 = *v59;
              v60 = v58;
            }
            else
            {
              v61 = *(_OWORD *)v59;
              *(_DWORD *)(v56 + 24) = v10[6];
              *(_OWORD *)v57 = v61;
              v60 = *v10;
              v58 = (int)*v10 >> 31;
            }
            *(_DWORD *)v56 = v60 ^ v58;
            v62 = *v12;
            v63 = (int *)(v3 + 208 * v5 + 40);
            if (v62 == v62 >> 31)
            {
              v64 = (_QWORD *)(v56 + 48);
              v65 = *v63;
              v66 = (_QWORD *)(v3 + 208 * v5 + 48);
              if (v65 == v65 >> 31)
              {
                *v64 = *v66;
                v67 = v65;
              }
              else
              {
                v69 = *(_OWORD *)v66;
                *(_DWORD *)(v56 + 64) = *(_DWORD *)(v3 + 208 * v5 + 64);
                *(_OWORD *)v64 = v69;
                v67 = *v63;
                v65 = v67 >> 31;
              }
              *(_DWORD *)(v56 + 40) = v67 ^ v65;
              v70 = v3 + 208 * v5;
              *(_QWORD *)(v56 + 72) = *(_QWORD *)(v70 + 72);
              *(_BYTE *)(v56 + 80) = 0;
              if (*(_BYTE *)(v70 + 80))
              {
                *(_DWORD *)(v56 + 84) = *(_DWORD *)(v3 + 208 * v5 + 84);
                *(_BYTE *)(v56 + 80) = 1;
              }
              v71 = v3 + 208 * v5;
              v72 = *(_OWORD *)(v71 + 88);
              v73 = *(_OWORD *)(v71 + 104);
              *(_DWORD *)(v56 + 120) = *(_DWORD *)(v71 + 120);
              *(_OWORD *)(v56 + 104) = v73;
              *(_OWORD *)(v56 + 88) = v72;
            }
            else
            {
              if (v62 >= 0)
                v68 = v3 + 208 * v5 + 40;
              else
                v68 = *(_QWORD *)v63;
              sub_1001A4778(v56 + 40, v68);
            }
            *(_DWORD *)(v56 + 32) = *v12 ^ (*v12 >> 31);
            v7 = v56 + 208;
            v23[7] = v56 + 208;
          }
          v23[7] = v7;
LABEL_6:
          ++v5;
          v3 = *a1;
          if (v5 >= 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4))
            break;
          goto LABEL_7;
        }
      }
      else
      {
        if (v25 >= v14)
          v25 %= v14;
        if (v25 != v21)
          goto LABEL_34;
      }
      v23 = (uint64_t *)*v23;
      if (!v23)
        goto LABEL_34;
    }
  }
  v74 = v87[0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  for (*(_DWORD *)(a2 + 32) = 1065353216; v74; v74 = *(void **)v74)
  {
    sub_100043B10(v82, (uint64_t)v74 + 24, (uint64_t *)v74 + 6, a1[6]);
    sub_100042590(a2, (int *)v74 + 4, (_DWORD *)v74 + 4, (__int128 *)v82);
    if (__p[1])
    {
      *(void **)&v84 = __p[1];
      operator delete(__p[1]);
    }
    v77 = (char *)v82[0];
    if (v82[0])
    {
      v78 = (char *)v82[1];
      v76 = v82[0];
      if (v82[1] != v82[0])
      {
        do
        {
          v80 = *((_DWORD *)v78 - 44);
          if (v80 == v80 >> 31)
          {
            if (*(v78 - 128))
              *(v78 - 128) = 0;
          }
          else
          {
            v79 = *((_QWORD *)v78 - 21);
            if (v80 < 0)
            {
              if (v79)
                (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
            }
            else
            {
              (*(void (**)(char *))v79)(v78 - 168);
            }
          }
          v78 -= 208;
        }
        while (v78 != v77);
        v76 = v82[0];
      }
      v82[1] = v77;
      operator delete(v76);
    }
  }
LABEL_95:
  sub_1000424C0((int)v86, (_QWORD *)v87[0]);
  v75 = v86[0];
  v86[0] = 0;
  if (v75)
    operator delete(v75);
}

void sub_100041FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_100219134((uint64_t)&a13);
    sub_1002192D4((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  sub_100219134((uint64_t)&a13);
  sub_1002192D4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t *sub_100042088(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (uint64_t *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v4)
              break;
          }
          result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_1000423C0(a1, *a2, a3, a4, (uint64_t)v26);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v20)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v20 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < *(_QWORD *)&v20)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v24 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v4 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v4 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v24 & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v24 & v6));
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7)
          v25 %= v7;
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26[0];
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v26[0] = *v15;
  *v15 = v26[0];
LABEL_61:
  result = (uint64_t *)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_10004239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_100219CE8((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000423C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x48uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = *a3;
  v10[3] = 0;
  *((_DWORD *)v10 + 4) = v11;
  v10[4] = 0;
  v10[5] = 0;
  v13 = *(const void **)a4;
  v12 = *(_QWORD *)(a4 + 8);
  v14 = v12 - *(_QWORD *)a4;
  if (v12 != *(_QWORD *)a4)
  {
    if (v14 < 0)
      sub_1000D02C0();
    v15 = (char *)operator new(v12 - *(_QWORD *)a4);
    v10[3] = v15;
    v10[4] = v15;
    v16 = &v15[8 * (v14 >> 3)];
    v10[5] = v16;
    memcpy(v15, v13, v14);
    v10[4] = v16;
  }
  result = sub_100043D44(v10 + 6, (uint64_t *)(a4 + 24));
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_100042490(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    v2[4] = v6;
    operator delete(v6);
  }
  *v1 = 0;
  sub_100219CE8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1000424C0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[6];
      if (v4)
      {
        v5 = v2[7];
        v6 = (void *)v2[6];
        if (v5 != v4)
        {
          do
          {
            v8 = *(_DWORD *)(v5 - 176);
            if (v8 == v8 >> 31)
            {
              if (*(_BYTE *)(v5 - 128))
                *(_BYTE *)(v5 - 128) = 0;
            }
            else
            {
              v7 = *(_QWORD *)(v5 - 168);
              if (v8 < 0)
              {
                if (v7)
                  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
              }
              else
              {
                (*(void (**)(uint64_t))v7)(v5 - 168);
              }
            }
            v5 -= 208;
          }
          while (v5 != v4);
          v6 = (void *)v2[6];
        }
        v2[7] = v4;
        operator delete(v6);
      }
      v9 = (void *)v2[3];
      if (v9)
      {
        v2[4] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *sub_100042590(uint64_t a1, int *a2, _DWORD *a3, __int128 *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x50uLL);
  *((_DWORD *)v12 + 4) = *a3;
  v16 = *a4;
  *((_QWORD *)v12 + 5) = *((_QWORD *)a4 + 2);
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v17 = *(__int128 *)((char *)a4 + 24);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v18 = *((_QWORD *)a4 + 5);
  v19 = *((_QWORD *)a4 + 6);
  *((_QWORD *)a4 + 4) = 0;
  *((_QWORD *)a4 + 5) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *(_OWORD *)(v12 + 24) = v16;
  *((_OWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 8) = v18;
  *((_QWORD *)v12 + 9) = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *(_QWORD *)v12 = *v23;
LABEL_61:
      *v23 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_26;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*(_QWORD *)v12)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1000428DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100219E18(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1000428F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t ****v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t ****v35;
  void *v36;
  unint64_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t ***v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  int v54;
  void *v55;
  uint64_t ***v56;
  uint64_t ***v57;
  uint64_t ***v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66;
  void *v67;
  int8x8_t v68;
  void *v69;
  unint64_t v70;
  float v71;
  void *v72[2];
  void *v73;
  void *__p[2];
  void *v75;
  char v76;
  uint64_t v77;
  void *v78;
  void *v79[3];
  uint64_t ***v80;
  uint64_t ***v81;
  uint64_t ***v82;
  uint8_t buf[24];

  v10 = sub_100044454();
  v11 = v10;
  v12 = atomic_load((unsigned __int8 *)v10 + 20);
  if ((v12 & 1) != 0 || *((_BYTE *)v10 + 16))
  {
    v13 = *((unsigned __int8 *)v10 + 17);
    v15 = *a2;
    v14 = a2[1];
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v16 = v14 - v15;
    if (!v16)
      goto LABEL_6;
  }
  else
  {
    v42 = sub_1000AC110((uint64_t)v10, (_BYTE *)v10 + 9);
    *((_BYTE *)v11 + 17) = v42;
    *((_BYTE *)v11 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v11 + 20);
    v13 = v42;
    v44 = *a2;
    v43 = a2[1];
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v16 = v43 - v44;
    if (!v16)
      goto LABEL_6;
  }
  v17 = v16 / 208;
  if ((unint64_t)(v16 / 208) >> 61)
    sub_1000D02C0();
  v80 = (uint64_t ***)operator new(8 * v17);
  v82 = &v80[v17];
  memset_pattern16(v80, &unk_100394090, 8 * v17);
  v81 = v82;
LABEL_6:
  sub_10004525C(v72, (uint64_t)&v80, a2, a4);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  (*(void (**)(_QWORD, uint64_t, void **))(*(_QWORD *)*a5 + 24))(*a5, a3, v72);
  if (*(_BYTE *)(a1 + 1536))
  {
    v18 = *(void **)(a1 + 1568);
    if (v18)
    {
      *(_QWORD *)(a1 + 1576) = v18;
      operator delete(v18);
    }
    v19 = *(void **)(a1 + 1544);
    if (v19)
    {
      *(_QWORD *)(a1 + 1552) = v19;
      operator delete(v19);
    }
    *(_BYTE *)(a1 + 1536) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v20 = (char *)v72[0];
  if (v72[0])
  {
    v21 = (char *)v72[1];
    v22 = v72[0];
    if (v72[1] != v72[0])
    {
      do
      {
        v24 = *((_DWORD *)v21 - 44);
        if (v24 == v24 >> 31)
        {
          if (*(v21 - 128))
            *(v21 - 128) = 0;
        }
        else
        {
          v23 = *((_QWORD *)v21 - 21);
          if (v24 < 0)
          {
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          }
          else
          {
            (*(void (**)(char *))v23)(v21 - 168);
          }
        }
        v21 -= 208;
      }
      while (v21 != v20);
      v22 = v72[0];
    }
    v72[1] = v20;
    operator delete(v22);
  }
  if (!sub_1000480CC(*(_QWORD *)(a1 + 176)))
  {
    v25 = *(_QWORD *)(a1 + 176);
    sub_1000ACD60(a1, a4, (_QWORD **)v72);
    v80 = 0;
    v81 = 0;
    sub_1000B8A20(v25, a4, v72, (uint64_t *)&v80, a1 + 2184);
    v26 = (std::__shared_weak_count *)v81;
    if (v81)
    {
      v27 = (unint64_t *)(v81 + 1);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)v72[1];
    if (v72[1])
    {
      v30 = (unint64_t *)((char *)v72[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  sub_100045260(a2, &v78);
  if (v79[0] == v79[1])
  {
LABEL_59:
    sub_100043F24(*(_QWORD *)(a1 + 176), (uint64_t)&v67);
    sub_10004482C((uint64_t)&v66, (uint64_t)&v67);
    v64[0] = 0;
    v64[1] = 0;
    v65 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    prime = vcvtps_u32_f32((float)v70 / v71);
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = v68;
    if (prime > *(_QWORD *)&v68)
      goto LABEL_64;
    if (prime < *(_QWORD *)&v68)
    {
      v39 = vcvtps_u32_f32((float)v70 / v71);
      if (*(_QWORD *)&v68 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v68), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_64:
        sub_100005DD8((uint64_t)&v67, prime);
    }
    v45 = v69;
    if (v69)
    {
      v46 = v81;
      do
      {
        while (v46 >= v82)
        {
          v46 = (uint64_t ***)sub_1001E3C34((uint64_t)&v80, v45 + 2);
          v81 = v46;
          v45 = (_QWORD *)*v45;
          if (!v45)
            goto LABEL_85;
        }
        *v46 = (uint64_t **)v45[2];
        v47 = v45[3];
        v46[1] = (uint64_t **)v47;
        if (v47)
        {
          v48 = (unint64_t *)(v47 + 8);
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        v46 += 2;
        v81 = v46;
        v45 = (_QWORD *)*v45;
      }
      while (v45);
    }
LABEL_85:
    (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 32) + 32))(v72, *(_QWORD *)(a1 + 32), &v78);
    sub_100044210(v72, &v80, (uint64_t *)buf);
    v50 = (char *)v64[0];
    if (v64[0])
    {
      v51 = (char *)v64[1];
      v52 = v64[0];
      if (v64[1] != v64[0])
      {
        do
        {
          v54 = *((_DWORD *)v51 - 44);
          if (v54 == v54 >> 31)
          {
            if (*(v51 - 128))
              *(v51 - 128) = 0;
          }
          else
          {
            v53 = *((_QWORD *)v51 - 21);
            if (v54 < 0)
            {
              if (v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
            }
            else
            {
              (*(void (**)(char *))v53)(v51 - 168);
            }
          }
          v51 -= 208;
        }
        while (v51 != v50);
        v52 = v64[0];
      }
      v64[1] = v50;
      operator delete(v52);
    }
    *(_OWORD *)v64 = *(_OWORD *)buf;
    v65 = *(_QWORD *)&buf[16];
    memset(buf, 0, sizeof(buf));
    sub_10021D8D0((int)v72, v73);
    v55 = v72[0];
    v72[0] = 0;
    if (v55)
      operator delete(v55);
    v56 = v80;
    if (v80)
    {
      v57 = v81;
      v58 = v80;
      if (v81 != v80)
      {
        do
        {
          v59 = (std::__shared_weak_count *)*(v57 - 1);
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(p_shared_owners);
            while (__stlxr(v61 - 1, p_shared_owners));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v57 -= 2;
        }
        while (v57 != v56);
        v58 = v80;
      }
      v81 = v56;
      operator delete(v58);
    }
    v62 = *(_QWORD *)(a1 + 288);
    v63 = sub_100044208(*(_QWORD *)(a1 + 176));
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 64))(v63);
    if (v13)
      sub_10023EC60(v62, (const void ****)&v66);
    sub_1000444E0((uint64_t **)(a1 + 168), a4, (uint64_t *)v64);
    sub_100043F00((_QWORD *)(a1 + 168));
    sub_100044928(v62);
  }
  sub_1000FC5A4((uint64_t)v72);
  *(_DWORD *)((char *)__p + *((_QWORD *)v73 - 3)) |= 0x800u;
  sub_10021E988((double **)v79);
  if (SHIBYTE(v82) >= 0)
    v32 = &v80;
  else
    v32 = (uint64_t ****)v80;
  if (SHIBYTE(v82) >= 0)
    v33 = HIBYTE(v82);
  else
    v33 = (uint64_t)v81;
  sub_1000F0508(&v73, (uint64_t)v32, v33);
  if (SHIBYTE(v82) < 0)
    operator delete(v80);
  if (qword_100417ED8 == -1)
  {
    v34 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_51;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v34 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_51:
      std::stringbuf::str(__p);
      if (SHIBYTE(v82) >= 0)
        v35 = &v80;
      else
        v35 = (uint64_t ****)v80;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "WARNING: Bad RSSI values @ t=%lld: %s", buf, 0x16u);
      if (SHIBYTE(v82) < 0)
        operator delete(v80);
    }
  }
  *(void **)((char *)v72
  v73 = v36;
  if (v76 < 0)
    operator delete(v75);
  std::streambuf::~streambuf(__p);
  std::ios::~ios(&v77);
  goto LABEL_59;
}

void sub_1000436AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100042DCCLL);
  }
  _Unwind_Resume(a1);
}

double sub_100043AC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100043AD4(a2, a1).n128_u64[0];
  return result;
}

__n128 sub_100043AD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1003F9A08;
  *(_BYTE *)(a1 + 56) &= 0xFCu;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

_QWORD *sub_100043B10(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  void *v14;
  void *__p[2];
  char v16;

  v7 = sub_100043D44(a1, a3);
  v7[3] = 0;
  v7[4] = 0;
  v7[5] = 0;
  v8 = *(const void **)a2;
  v9 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v9)
  {
    if (v9 < 0)
      sub_1000D02C0();
    v10 = (char *)operator new(v9);
    a1[3] = v10;
    a1[4] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    a1[5] = v11;
    memcpy(v10, v8, v9);
    a1[4] = v11;
    v12 = (unint64_t)v9 >> 3;
  }
  else
  {
    v12 = 0;
  }
  a1[6] = a4;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 4) != v12)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v16 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v14);
  }
  return a1;
}

void sub_100043C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  void *v17;

  if (a14 < 0)
  {
    operator delete(__p);
    v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      sub_10021908C((void **)v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v17 = *v15;
    if (!*v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v14 + 32) = v17;
  operator delete(v17);
  sub_10021908C((void **)v14);
  _Unwind_Resume(a1);
}

_QWORD *sub_100043C90(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  v4 = sub_100043D44(a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  v6 = (_BYTE *)a2[3];
  v5 = (_BYTE *)a2[4];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_1000D02C0();
    v8 = (char *)operator new(v5 - v6);
    a1[3] = v8;
    a1[4] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  a1[6] = a2[6];
  return a1;
}

void sub_100043D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_100343904((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100043D44(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 4);
    if (v7 >= 0x13B13B13B13B13CLL)
      sub_1000D02C0();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[208 * v7];
    a1[1] = sub_10021942C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_100043DF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_10034345C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100043E24()
{
  return 1;
}

uint64_t sub_100043E2C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[5];
    if (!v6)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
      {
LABEL_11:
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
LABEL_10:
      v9 = (std::__shared_weak_count *)v5[3];
      if (v9)
        goto LABEL_11;
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_100043F00(_QWORD *a1)
{
  return *a1 + 8;
}

BOOL sub_100043F0C(uint64_t a1)
{
  return *(_DWORD *)a1 && sub_100044D64(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100043F24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  unint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  const void ****v13;
  const void ***v14;
  uint64_t v15;
  unint64_t v16;
  const void **v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  std::string __p;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  v18 = v3;
  while (v4 != v3)
  {
    result = sub_100050DB0(v4);
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_QWORD *)(result + 16);
    while (v5 != v6)
    {
      v7 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 56) + 64))(*(_QWORD *)(v5 + 56));
      if (!sub_1000A9C6C((_QWORD *)a2, v7))
      {
        result = (uint64_t)sub_10022E90C(a2, v7, (const void **)v7, (const void **)(v5 + 56));
        goto LABEL_7;
      }
      v8 = sub_1000B40D8((uint64_t)&__p, v7);
      v9 = *(int8x8_t *)(a2 + 8);
      if (!*(_QWORD *)&v9)
        goto LABEL_36;
      v10 = v8;
      v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v12 = v8;
        if (v8 >= *(_QWORD *)&v9)
          v12 = v8 % *(_QWORD *)&v9;
      }
      else
      {
        v12 = (*(_QWORD *)&v9 - 1) & v8;
      }
      v13 = *(const void *****)(*(_QWORD *)a2 + 8 * v12);
      if (!v13 || (v14 = *v13) == 0)
LABEL_36:
        sub_10018CB98("unordered_map::at: key not found");
      if (v11.u32[0] < 2uLL)
      {
        v15 = *(_QWORD *)&v9 - 1;
        while (1)
        {
          v17 = v14[1];
          if (v17 == (const void **)v10)
          {
            result = sub_1000790EC(v14 + 2, (unsigned __int8 ***)v7);
            if ((result & 1) != 0)
              goto LABEL_29;
          }
          else if (((unint64_t)v17 & v15) != v12)
          {
            goto LABEL_36;
          }
          v14 = (const void ***)*v14;
          if (!v14)
            goto LABEL_36;
        }
      }
      while (1)
      {
        v16 = (unint64_t)v14[1];
        if (v16 == v10)
          break;
        if (v16 >= *(_QWORD *)&v9)
          v16 %= *(_QWORD *)&v9;
        if (v16 != v12)
          goto LABEL_36;
LABEL_19:
        v14 = (const void ***)*v14;
        if (!v14)
          goto LABEL_36;
      }
      result = sub_1000790EC(v14 + 2, (unsigned __int8 ***)v7);
      if ((result & 1) == 0)
        goto LABEL_19;
LABEL_29:
      if (*(const void ***)(v5 + 56) != v14[4])
      {
        v21 = 0;
        LOBYTE(v20) = 0;
        sub_10022E8C0("Two particles with the same floorKey must have the same floorEnv", &__p);
        sub_100174738((uint64_t)&v20, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v21 < 0)
          operator delete(v20);
        sub_1000F2AE4((uint64_t)&v19);
      }
LABEL_7:
      v5 += 80;
    }
    v4 += 72;
    v3 = v18;
  }
  return result;
}

void sub_10004419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
  {
    operator delete(__p);
    sub_100043E2C(v22);
    _Unwind_Resume(a1);
  }
  sub_100043E2C(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100044208(uint64_t a1)
{
  return *(_QWORD *)(a1 + 360);
}

void sub_100044210(_QWORD *a1@<X0>, uint64_t ****a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t ***v4;
  uint64_t ***v5;
  const void ***v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  __int128 v16;
  int v17;
  int *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30[2];
  void *__p[2];
  int v32;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)__p = 0u;
  v32 = 1065353216;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = sub_1000A9C6C(a1, v4);
      if (v7)
      {
        v8 = (uint64_t)v7[4];
        v9 = v7[5];
        while ((const void **)v8 != v9)
        {
          if (!sub_1000411C0(v30, v8))
          {
            v11 = a3[1];
            if (v11 >= a3[2])
            {
              v10 = sub_10021970C(a3, v8);
            }
            else
            {
              v12 = (_QWORD *)(v11 + 8);
              v14 = (_QWORD *)(v8 + 8);
              v13 = *(_DWORD *)v8;
              if (v13 == v13 >> 31)
              {
                *v12 = *v14;
                v15 = v13;
              }
              else
              {
                v16 = *(_OWORD *)v14;
                *(_DWORD *)(v11 + 24) = *(_DWORD *)(v8 + 24);
                *(_OWORD *)v12 = v16;
                v15 = *(_DWORD *)v8;
                v13 = *(int *)v8 >> 31;
              }
              *(_DWORD *)v11 = v15 ^ v13;
              v17 = *(_DWORD *)(v8 + 32);
              v18 = (int *)(v8 + 40);
              if (v17 == v17 >> 31)
              {
                v19 = (_QWORD *)(v11 + 48);
                v20 = *(_DWORD *)(v8 + 40);
                v21 = (_QWORD *)(v8 + 48);
                if (v20 == v20 >> 31)
                {
                  *v19 = *v21;
                  v22 = v20;
                }
                else
                {
                  v24 = *(_OWORD *)v21;
                  *(_DWORD *)(v11 + 64) = *(_DWORD *)(v8 + 64);
                  *(_OWORD *)v19 = v24;
                  v22 = *v18;
                  v20 = v22 >> 31;
                }
                *(_DWORD *)(v11 + 40) = v22 ^ v20;
                *(_QWORD *)(v11 + 72) = *(_QWORD *)(v8 + 72);
                *(_BYTE *)(v11 + 80) = 0;
                if (*(_BYTE *)(v8 + 80))
                {
                  *(_DWORD *)(v11 + 84) = *(_DWORD *)(v8 + 84);
                  *(_BYTE *)(v11 + 80) = 1;
                }
                v25 = *(_OWORD *)(v8 + 88);
                v26 = *(_OWORD *)(v8 + 104);
                *(_DWORD *)(v11 + 120) = *(_DWORD *)(v8 + 120);
                *(_OWORD *)(v11 + 104) = v26;
                *(_OWORD *)(v11 + 88) = v25;
              }
              else
              {
                if (v17 >= 0)
                  v23 = v8 + 40;
                else
                  v23 = *(_QWORD *)v18;
                sub_1001A4778(v11 + 40, v23);
              }
              *(_DWORD *)(v11 + 32) = *(_DWORD *)(v8 + 32) ^ (*(int *)(v8 + 32) >> 31);
              v10 = v11 + 208;
              a3[1] = v11 + 208;
            }
            a3[1] = v10;
            sub_100069BFC((uint64_t)v30, v8, (int *)v8);
          }
          v8 += 208;
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
    v27 = __p[0];
    if (__p[0])
    {
      do
      {
        v28 = (_QWORD *)*v27;
        operator delete(v27);
        v27 = v28;
      }
      while (v28);
    }
  }
  v29 = v30[0];
  v30[0] = 0;
  if (v29)
    operator delete(v29);
}

void sub_100044410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;

  sub_10022CAC0((uint64_t)&a9);
  sub_10021908C(v9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100044454()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A580);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A580))
    return &qword_10041A620;
  qword_10041A620 = (uint64_t)sub_10016E258();
  unk_10041A628 = v2;
  byte_10041A630 = 0;
  byte_10041A632 = 0;
  byte_10041A634 = 0;
  __cxa_guard_release(&qword_10041A580);
  return &qword_10041A620;
}

void sub_1000444C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A580);
  _Unwind_Resume(a1);
}

void sub_1000444E0(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15[2];
  char v16;
  std::string __p;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
  {
    v10 = *a3;
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(v3 + 40);
      v7 = *(_DWORD *)(v3 + 32);
      if (v7 >= 0)
        v6 = v3 + 40;
      v8 = (_QWORD *)(v6 + 8);
      v9 = (_QWORD *)(v3 + 96);
      if (v7 != v7 >> 31)
        v9 = v8;
      if (*v9 != a2)
      {
        sub_1000D5048(v15, "");
        sub_1002D2384("Rolling wifi independence requires the current Wi-Fi scan to always appear in the history. This isn't guaranteed if the scan has different timestamps", &__p);
        sub_100174738((uint64_t)v15, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v16 < 0)
          operator delete(v15[0]);
        sub_1000F2AE4((uint64_t)&v14);
      }
      v3 += 208;
    }
    while (v3 != v4);
    v10 = *a3;
    v3 = a3[1];
  }
  v11 = *a1;
  v12 = (*a1)[2];
  v13 = (*a1)[1];
  sub_10023347C(v11 + 1, v11[2], v10, v3, 0x4EC4EC4EC4EC4EC5 * ((v3 - v10) >> 4));
  sub_100048474(v11, 0x4EC4EC4EC4EC4EC5 * ((v12 - v13) >> 4));
}

void sub_10004466C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000446B0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **i;
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  unint64_t v16;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  for (i = *(unsigned __int8 ***)(a2 + 16); i; i = (unsigned __int8 **)*i)
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v6)
    {
      while ((sub_1000790EC((const void ***)v5, (unsigned __int8 ***)i + 2) & 1) == 0)
      {
        v5 += 16;
        if (v5 == v6)
        {
          v5 = v6;
          break;
        }
      }
      v7 = v5;
      v5 = *(_QWORD *)(a1 + 8);
      if (v7 != v5)
        continue;
    }
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      v11 = sub_1001E3C34(a1, i + 2);
    }
    else
    {
      v8 = i[3];
      *(_QWORD *)v5 = i[2];
      *(_QWORD *)(v5 + 8) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (_QWORD *)(v5 + 16);
    }
    *(_QWORD *)(a1 + 8) = v11;
    v12 = *(_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)i[4] + 40))(i[4]);
    if (v12 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0)
    {
      v13 = *(_QWORD **)(a1 + 32);
      if ((unint64_t)v13 >= *(_QWORD *)(a1 + 40))
      {
        v4 = sub_1001E3DB8(a1 + 24, (__int128 *)i + 2);
      }
      else
      {
        v14 = i[5];
        *v13 = i[4];
        v13[1] = v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        v4 = v13 + 2;
      }
      *(_QWORD *)(a1 + 32) = v4;
    }
  }
  return a1;
}

void sub_100044808(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  sub_1000F7D3C(v2);
  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

void sub_100044830(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *a1 = off_1003FF110;
  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *(_DWORD *)(v3 - 176);
        if (v6 == v6 >> 31)
        {
          if (*(_BYTE *)(v3 - 128))
            *(_BYTE *)(v3 - 128) = 0;
        }
        else
        {
          v5 = *(_QWORD *)(v3 - 168);
          if (v6 < 0)
          {
            if (v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          }
          else
          {
            (*(void (**)(uint64_t))v5)(v3 - 168);
          }
        }
        v3 -= 208;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete();
}

void sub_100044928(uint64_t a1)
{
  sub_1000449B8(a1);
}

void sub_100044998(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1000449B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  _BYTE v9[24];
  std::string v10;
  std::string v11;
  std::runtime_error v12;
  uint64_t v13;
  uint64_t v14;
  int v15[10];

  if (sub_100044D64(*(_QWORD *)(a1 + 40)))
  {
    v2 = *(_QWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = v2;
    if (!v2)
      goto LABEL_7;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 64);
    v13 = *(_QWORD *)(a1 + 56);
    v14 = v2;
    if (!v2)
      goto LABEL_7;
  }
  v3 = (unint64_t *)(v2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
LABEL_7:
  v5 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    if (v5 != 1)
    {
      if (v5 == 2)
        sub_10023EE4C();
      __cxa_allocate_exception(0x40uLL);
      v15[0] = *(_DWORD *)a1;
      v6 = sub_10023EFE0((uint64_t)&qword_10041AE30, v15);
      sub_1000D5048(&v10, (char *)*v6);
      v7 = std::string::insert(&v10, 0, "Not yet implemented: ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v12, &v11);
      v12.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)v9);
      sub_1000F2F7C(&v12, (uint64_t)"std::unique_ptr<WifiIndependenceSnapshot> WifiMeasurementIndependence::getSnapshot(const std::vector<RadioScanEntry> &, const std::vector<RadioScanEntry> &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/rssi/wifi_measurement_independence.cpp", 131, (uint64_t)v9);
    }
    sub_10023EE4C();
  }
  operator new();
}

void sub_100044BA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::runtime_error a25,char a26)
{
  __break(1u);
}

void sub_100044CB8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 96);
  if (v1)
  {
    *(_QWORD *)(v0 - 88) = v1;
    operator delete(v1);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v0 - 48));
  if (*(char *)(v0 - 49) < 0)
    operator delete(*(void **)(v0 - 72));
  __cxa_end_catch();
  JUMPOUT(0x100044D2CLL);
}

void sub_100044D48()
{
  JUMPOUT(0x100044D54);
}

BOOL sub_100044D64(_BOOL8 result)
{
  if (result)
    return *(_QWORD *)(result + 56) != *(_QWORD *)(result + 48);
  return result;
}

_QWORD *sub_100044D78(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v5 = *a2;
  v4 = a2[1];
  *a1 = off_1003FF110;
  a1[1] = v5;
  a1[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_100043D44(a1 + 3, a3);
  return a1;
}

void sub_100044DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    sub_100344030(v3);
  _Unwind_Resume(exception_object);
}

void sub_100044DE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v8;
  double *v9;
  int v10;
  _QWORD *v11;
  int v12;
  __int128 v13;
  double v14;
  int *v15;
  _QWORD *v16;
  int v17;
  int v18;
  double *v19;
  double *v20;
  __int128 v21;
  int v22;
  int *v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  double *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  double *v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  _OWORD *v45;
  double *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  void *v52;
  uint64_t v53;
  int v54;
  void *__p;
  _DWORD *v58;
  unint64_t i;
  void *v60;
  double *v61;
  double *v62;
  int v63;
  __int128 v64;
  int v65;

  ++*(_DWORD *)(a1 + 72);
  v5 = *a3;
  v6 = a3[1];
  v60 = 0;
  v61 = 0;
  v62 = 0;
  __p = 0;
  v58 = 0;
  for (i = 0; v5 != v6; v5 += 208)
  {
    v11 = (_QWORD *)(v5 + 8);
    v10 = *(_DWORD *)v5;
    v12 = *(int *)v5 >> 31;
    if (v10 >> 31 == v10)
    {
      *(_QWORD *)&v64 = *v11;
      v12 = v10;
    }
    else
    {
      v13 = *(_OWORD *)v11;
      v65 = *(_DWORD *)(v5 + 24);
      v64 = v13;
    }
    v63 = v12 ^ v10;
    v14 = (*(double (**)(uint64_t, int *))(*(_QWORD *)a2 + 16))(a2, &v63);
    if (v14 <= 0.0)
      continue;
    v15 = v58;
    if ((unint64_t)v58 >= i)
    {
      v58 = (_DWORD *)sub_10023F034((uint64_t *)&__p, v5);
      v20 = v61;
      v19 = v62;
      if (v61 >= v62)
        goto LABEL_31;
    }
    else
    {
      v16 = v58 + 2;
      v17 = *(_DWORD *)v5;
      if (v17 == v17 >> 31)
      {
        *v16 = *v11;
        v18 = v17;
      }
      else
      {
        v21 = *(_OWORD *)v11;
        v58[6] = *(_DWORD *)(v5 + 24);
        *(_OWORD *)v16 = v21;
        v18 = *(_DWORD *)v5;
        v17 = *(int *)v5 >> 31;
      }
      *v15 = v18 ^ v17;
      v22 = *(_DWORD *)(v5 + 32);
      v23 = (int *)(v5 + 40);
      if (v22 == v22 >> 31)
      {
        v24 = v15 + 12;
        v25 = *(_DWORD *)(v5 + 40);
        v26 = (_QWORD *)(v5 + 48);
        if (v25 == v25 >> 31)
        {
          *v24 = *v26;
          v27 = v25;
        }
        else
        {
          v29 = *(_OWORD *)v26;
          v15[16] = *(_DWORD *)(v5 + 64);
          *(_OWORD *)v24 = v29;
          v27 = *v23;
          v25 = v27 >> 31;
        }
        v15[10] = v27 ^ v25;
        *((_QWORD *)v15 + 9) = *(_QWORD *)(v5 + 72);
        *((_BYTE *)v15 + 80) = 0;
        if (*(_BYTE *)(v5 + 80))
        {
          v15[21] = *(_DWORD *)(v5 + 84);
          *((_BYTE *)v15 + 80) = 1;
        }
        v30 = *(_OWORD *)(v5 + 88);
        v31 = *(_OWORD *)(v5 + 104);
        v15[30] = *(_DWORD *)(v5 + 120);
        *(_OWORD *)(v15 + 26) = v31;
        *(_OWORD *)(v15 + 22) = v30;
      }
      else
      {
        if (v22 >= 0)
          v28 = v5 + 40;
        else
          v28 = *(_QWORD *)v23;
        sub_1001A4778((uint64_t)(v15 + 10), v28);
      }
      v15[8] = *(_DWORD *)(v5 + 32) ^ (*(int *)(v5 + 32) >> 31);
      v58 = v15 + 52;
      v20 = v61;
      v19 = v62;
      if (v61 >= v62)
      {
LABEL_31:
        v32 = (double *)v60;
        v33 = (char *)v20 - (_BYTE *)v60;
        v34 = ((char *)v20 - (_BYTE *)v60) >> 3;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61)
          sub_1000D02C0();
        v36 = (char *)v19 - (_BYTE *)v60;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 61)
            sub_1000CDEB8();
          v38 = operator new(8 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = (double *)&v38[8 * v34];
        if (v14 <= 1.0)
          v40 = v14;
        else
          v40 = 1.0;
        *v39 = v40;
        v9 = v39 + 1;
        if (v20 != v32)
        {
          v41 = (char *)(v20 - 1) - (char *)v32;
          if (v41 < 0x58)
            goto LABEL_73;
          if ((unint64_t)((char *)v20 - &v38[v33]) < 0x20)
            goto LABEL_73;
          v42 = (v41 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v44 = &v20[v43 / 0xFFFFFFFFFFFFFFF8];
          v39 = (double *)((char *)v39 - v43);
          v45 = &v38[8 * v34 - 16];
          v46 = v20 - 2;
          v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 4;
            v47 -= 4;
          }
          while (v47);
          v20 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_73:
            do
            {
              v49 = *((_QWORD *)v20-- - 1);
              *((_QWORD *)v39-- - 1) = v49;
            }
            while (v20 != v32);
          }
        }
        v60 = v39;
        v61 = v9;
        v62 = (double *)&v38[8 * v37];
        if (v32)
          operator delete(v32);
        goto LABEL_7;
      }
    }
    if (v14 <= 1.0)
      v8 = v14;
    else
      v8 = 1.0;
    *v20 = v8;
    v9 = v20 + 1;
LABEL_7:
    v61 = v9;
  }
  sub_10004525C(a5, (uint64_t)&v60, (uint64_t *)&__p, a4);
  v50 = __p;
  if (__p)
  {
    v51 = v58;
    v52 = __p;
    if (v58 != __p)
    {
      do
      {
        v54 = *(v51 - 44);
        if (v54 == v54 >> 31)
        {
          if (*((_BYTE *)v51 - 128))
            *((_BYTE *)v51 - 128) = 0;
        }
        else
        {
          v53 = *((_QWORD *)v51 - 21);
          if (v54 < 0)
          {
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          }
          else
          {
            (*(void (**)(_DWORD *))v53)(v51 - 42);
          }
        }
        v51 -= 52;
      }
      while (v51 != v50);
      v52 = __p;
    }
    v58 = v50;
    operator delete(v52);
  }
  if (v60)
  {
    v61 = (double *)v60;
    operator delete(v60);
  }
}

void sub_100045208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a12)
    sub_100343FA8((uint64_t)&a12, a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100045260(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  double v5;
  double *v6;
  double *v7;
  int *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  double *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  int *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  _OWORD *v36;
  double *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  _DWORD *v45;
  void *v46;
  uint64_t v47;
  int v48;
  void *__p;
  double *v51;
  double *v52;
  void *v53;
  _DWORD *v54;
  unint64_t v55;

  __p = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (!sub_10004565C(v2))
      {
        v8 = v54;
        if ((unint64_t)v54 >= v55)
        {
          v23 = sub_10021970C((uint64_t *)&v53, v2);
        }
        else
        {
          v9 = v54 + 2;
          v11 = (_QWORD *)(v2 + 8);
          v10 = *(_DWORD *)v2;
          if (v10 == v10 >> 31)
          {
            *v9 = *v11;
            v12 = v10;
          }
          else
          {
            v24 = *(_OWORD *)v11;
            v54[6] = *(_DWORD *)(v2 + 24);
            *(_OWORD *)v9 = v24;
            v12 = *(_DWORD *)v2;
            v10 = *(int *)v2 >> 31;
          }
          *v8 = v12 ^ v10;
          v25 = *(_DWORD *)(v2 + 32);
          v26 = (int *)(v2 + 40);
          if (v25 == v25 >> 31)
          {
            v27 = v8 + 12;
            v28 = *(_DWORD *)(v2 + 40);
            v29 = (_QWORD *)(v2 + 48);
            if (v28 == v28 >> 31)
            {
              *v27 = *v29;
              v30 = v28;
            }
            else
            {
              v41 = *(_OWORD *)v29;
              v8[16] = *(_DWORD *)(v2 + 64);
              *(_OWORD *)v27 = v41;
              v30 = *v26;
              v28 = v30 >> 31;
            }
            v8[10] = v30 ^ v28;
            *((_QWORD *)v8 + 9) = *(_QWORD *)(v2 + 72);
            *((_BYTE *)v8 + 80) = 0;
            if (*(_BYTE *)(v2 + 80))
            {
              v8[21] = *(_DWORD *)(v2 + 84);
              *((_BYTE *)v8 + 80) = 1;
            }
            v42 = *(_OWORD *)(v2 + 88);
            v43 = *(_OWORD *)(v2 + 104);
            v8[30] = *(_DWORD *)(v2 + 120);
            *(_OWORD *)(v8 + 26) = v43;
            *(_OWORD *)(v8 + 22) = v42;
          }
          else
          {
            if (v25 >= 0)
              v31 = v2 + 40;
            else
              v31 = *(_QWORD *)v26;
            sub_1001A4778((uint64_t)(v8 + 10), v31);
          }
          v8[8] = *(_DWORD *)(v2 + 32) ^ (*(int *)(v2 + 32) >> 31);
          v23 = (uint64_t)(v8 + 52);
        }
        v54 = (_DWORD *)v23;
        goto LABEL_4;
      }
      v4 = *(_DWORD *)(v2 + 32);
      if (v4 == v4 >> 31)
      {
        v5 = *(double *)(v2 + 72);
        v7 = v51;
        v6 = v52;
        if (v51 >= v52)
          goto LABEL_16;
      }
      else
      {
        if (v4 >= 0)
          v13 = v2 + 40;
        else
          v13 = *(_QWORD *)(v2 + 40);
        v5 = (double)*(int *)(v13 + 92);
        v7 = v51;
        v6 = v52;
        if (v51 >= v52)
        {
LABEL_16:
          v14 = (double *)__p;
          v15 = (char *)v7 - (_BYTE *)__p;
          v16 = ((char *)v7 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            sub_1000D02C0();
          v18 = (char *)v6 - (_BYTE *)__p;
          if (v18 >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 61)
              sub_1000CDEB8();
            v20 = operator new(8 * v19);
            v21 = (double *)&v20[8 * v16];
            *v21 = v5;
            v22 = (uint64_t)(v21 + 1);
            if (v7 == v14)
              goto LABEL_42;
LABEL_36:
            v32 = (char *)(v7 - 1) - (char *)v14;
            if (v32 < 0x58)
              goto LABEL_71;
            if ((unint64_t)((char *)v7 - &v20[v15]) < 0x20)
              goto LABEL_71;
            v33 = (v32 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v35 = &v7[v34 / 0xFFFFFFFFFFFFFFF8];
            v21 = (double *)((char *)v21 - v34);
            v36 = &v20[8 * v16 - 16];
            v37 = v7 - 2;
            v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            v7 = v35;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_71:
              do
              {
                v40 = *((_QWORD *)v7-- - 1);
                *((_QWORD *)v21-- - 1) = v40;
              }
              while (v7 != v14);
            }
          }
          else
          {
            v20 = 0;
            v21 = (double *)(8 * v16);
            *(double *)(8 * v16) = v5;
            v22 = 8 * v16 + 8;
            if (v7 != v14)
              goto LABEL_36;
          }
LABEL_42:
          __p = v21;
          v51 = (double *)v22;
          v52 = (double *)&v20[8 * v19];
          if (v14)
            operator delete(v14);
          v51 = (double *)v22;
          goto LABEL_4;
        }
      }
      *v7 = v5;
      v51 = v7 + 1;
LABEL_4:
      v2 += 208;
    }
    while (v2 != v3);
  }
  sub_10021935C(a2, (uint64_t *)&v53, (uint64_t)&__p);
  if (__p)
  {
    v51 = (double *)__p;
    operator delete(__p);
  }
  v44 = v53;
  if (v53)
  {
    v45 = v54;
    v46 = v53;
    if (v54 != v53)
    {
      do
      {
        v48 = *(v45 - 44);
        if (v48 == v48 >> 31)
        {
          if (*((_BYTE *)v45 - 128))
            *((_BYTE *)v45 - 128) = 0;
        }
        else
        {
          v47 = *((_QWORD *)v45 - 21);
          if (v48 < 0)
          {
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          }
          else
          {
            (*(void (**)(_DWORD *))v47)(v45 - 42);
          }
        }
        v45 -= 52;
      }
      while (v45 != v44);
      v46 = v53;
    }
    v54 = v44;
    operator delete(v46);
  }
}

void sub_100045620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  sub_10021908C(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_10004565C(uint64_t a1)
{
  int v2;
  double v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BOOL4 v10;
  NSObject *v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == v2 >> 31)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if ((*(_BYTE *)(a1 + 85) & 0x10) != 0)
        return 1;
      v3 = *(double *)(a1 + 72);
      if (v3 >= -120.0 && v3 <= -20.0 && v3 != -1.0 && v3 != 0.0 && v3 != (double)2000000000)
        return 0;
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1003FE010);
      v12 = qword_100417EE0;
      v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
        v13 = *(_DWORD *)(a1 + 32);
        if (v13 == v13 >> 31)
        {
          v14 = *(double *)(a1 + 72);
        }
        else
        {
          v17 = *(_QWORD *)(a1 + 40);
          v16 = a1 + 40;
          v15 = v17;
          if (v13 >= 0)
            v18 = v16;
          else
            v18 = v15;
          v14 = (double)*(int *)(v18 + 92);
        }
        v19 = 134217984;
        v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WARNING: WiFi chip reported OK RSSI but %f seems invalid", (uint8_t *)&v19, 0xCu);
      }
      return v7;
    }
    v9 = *(double *)(a1 + 72);
  }
  else
  {
    if (v2 >= 0)
      v8 = a1 + 40;
    else
      v8 = *(_QWORD *)(a1 + 40);
    v9 = (double)*(int *)(v8 + 92);
  }
  v10 = v9 == 0.0;
  if (v9 == (double)2000000000)
    v10 = 1;
  if (v9 == -1.0)
    v10 = 1;
  if (v9 > -20.0)
    v10 = 1;
  return v9 < -120.0 || v10;
}

void sub_10004583C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint8_t v31[16];
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  __int128 buf;

  sub_100047C40(a2, &v36);
  if (v36 == v37)
  {
    if (qword_100417ED8 == -1)
    {
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_5;
      goto LABEL_4;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
    v11 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "No viable locations for positioning", v31, 2u);
    }
  }
LABEL_5:
  v12 = ((char *)v37 - (char *)v36) >> 4;
  if (*(_QWORD *)(a1 + 464) == v12)
    goto LABEL_26;
  sub_1000FC5A4((uint64_t)v31);
  v13 = sub_1000F0508(&v32, (uint64_t)"WiFi measurement on frequencies ", 32);
  sub_10022CE88(a4, &buf);
  sub_10022F81C((unsigned int **)&buf);
  if (v40 >= 0)
    v14 = (void **)&v38;
  else
    v14 = v38;
  if (v40 >= 0)
    v15 = HIBYTE(v40);
  else
    v15 = v39;
  v16 = sub_1000F0508(v13, (uint64_t)v14, v15);
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  v17 = sub_1000F0508(v16, (uint64_t)" that are indicative of ", 24);
  v18 = (_QWORD *)std::ostream::operator<<(v17, ((char *)v37 - (char *)v36) >> 4);
  sub_1000F0508(v18, (uint64_t)" possible locations", 19);
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  if (qword_100417ED8 == -1)
  {
    v19 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_18;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
    v19 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_18:
      std::stringbuf::str(v33);
      if (v40 >= 0)
        v20 = (void **)&v38;
      else
        v20 = v38;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v40) < 0)
        operator delete(v38);
    }
  }
  v32 = v21;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf(v33);
  std::ios::~ios(&v35);
  v12 = ((char *)v37 - (char *)v36) >> 4;
LABEL_26:
  *(_QWORD *)(a1 + 464) = v12;
  sub_100048124(&v36, (uint64_t)v31);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 48))(*(_QWORD *)(a1 + 360)))
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(_QWORD *)(a1 + 16);
    if (v22 != v23)
    {
      v24 = a1 + 320;
      do
      {
        v38 = (void **)v31;
        v39 = v24;
        v40 = a3;
        sub_100045CB4(v22, (uint64_t *)&v38, a4, a5, a6);
        v22 += 72;
      }
      while (v22 != v23);
    }
  }
  v25 = v36;
  if (v36)
  {
    v26 = v37;
    v27 = v36;
    if (v37 != v36)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*(v26 - 1);
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(p_shared_owners);
          while (__stlxr(v30 - 1, p_shared_owners));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 2;
      }
      while (v26 != v25);
      v27 = v36;
    }
    v37 = v25;
    operator delete(v27);
  }
}

void sub_100045C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_1000FC6DC((uint64_t)&a9);
  sub_1000F7D3C((void **)(v9 - 160));
  _Unwind_Resume(a1);
}

void sub_100045CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7D3C((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_100045CB4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9;
  std::string::size_type v10;
  double v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  int v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  char *v27;
  void *__p;
  void *v29;

  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 40);
  sub_100043C90(&v22, a3);
  v11 = sub_100045E80(a4, *(_DWORD *)(a1 + 56));
  sub_100045E90((uint64_t)&v26, (uint64_t)&v22, a5, v11);
  sub_100045EE0(v9, a2, v10, (uint64_t *)&v26);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  v12 = (char *)v26;
  if (v26)
  {
    v13 = v27;
    v14 = v26;
    if (v27 != v26)
    {
      do
      {
        v16 = *((_DWORD *)v13 - 44);
        if (v16 == v16 >> 31)
        {
          if (*(v13 - 128))
            *(v13 - 128) = 0;
        }
        else
        {
          v15 = *((_QWORD *)v13 - 21);
          if (v16 < 0)
          {
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          else
          {
            (*(void (**)(char *))v15)(v13 - 168);
          }
        }
        v13 -= 208;
      }
      while (v13 != v12);
      v14 = v26;
    }
    v27 = v12;
    operator delete(v14);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  v17 = (char *)v22;
  if (v22)
  {
    v18 = v23;
    v19 = v22;
    if (v23 != v22)
    {
      do
      {
        v21 = *((_DWORD *)v18 - 44);
        if (v21 == v21 >> 31)
        {
          if (*(v18 - 128))
            *(v18 - 128) = 0;
        }
        else
        {
          v20 = *((_QWORD *)v18 - 21);
          if (v21 < 0)
          {
            if (v20)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          else
          {
            (*(void (**)(char *))v20)(v18 - 168);
          }
        }
        v18 -= 208;
      }
      while (v18 != v17);
      v19 = v22;
    }
    v23 = v17;
    operator delete(v19);
  }
}

void sub_100045E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_1002191E8(&a16);
  sub_1002191E8(&a9);
  _Unwind_Resume(a1);
}

void sub_100045E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1002191E8(&a9);
  _Unwind_Resume(a1);
}

double sub_100045E80(uint64_t a1, int a2)
{
  return *(double *)(a1 + 8 * (a2 == 0));
}

uint64_t sub_100045E90(uint64_t result, uint64_t a2, char a3, double a4)
{
  uint64_t v4;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(result + 48) = v4;
  *(double *)(result + 56) = a4;
  *(_BYTE *)(result + 64) = a3;
  return result;
}

void sub_100045EE0(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t *a4)
{
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  void *__p[2];
  void *v15[2];
  char v16;
  std::string v17;
  std::string *v18;
  _BYTE v19[24];
  _BYTE *v20;

  if (!sub_1000466BC((_QWORD *)(a1 + 8), (double *)(a1 + 32), -INFINITY))
  {
    sub_1000D5048(v15, "");
    sub_1002264D0("BEFORE WIFI: ", &v17);
    sub_100174738((uint64_t)v15, (uint64_t)&v17, 1);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (v16 < 0)
      operator delete(v15[0]);
    sub_1000F2AE4((uint64_t)__p);
  }
  sub_100046698(a2, a4, (double **)__p);
  v8 = (std::string *)operator new(0x20uLL);
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1003FE8D0;
  v8->__r_.__value_.__l.__size_ = a3;
  v8->__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
  v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  v9 = operator new(0x20uLL);
  *v9 = off_1003FE960;
  v9[1] = a3;
  v9[2] = __p;
  v9[3] = a4;
  v18 = v8;
  v20 = v9;
  sub_100046704(a1, (uint64_t)&v17);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_7;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_7:
  v12 = v18;
  if (v18 == &v17)
  {
    v13 = 4;
    v12 = &v17;
  }
  else
  {
    if (!v18)
      goto LABEL_12;
    v13 = 5;
  }
  (*(void (**)(void))(v12->__r_.__value_.__r.__words[0] + 8 * v13))();
LABEL_12:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_100046100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004618C(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  int8x16_t v8;
  uint64_t *v9;
  uint64_t *v10;
  double v11;
  int8x16_t v12;
  float64x2_t v13;
  float64x2_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  double v19;
  unint64_t v20;
  double v21;
  char *v22;
  double *v23;
  unint64_t v24;
  double *v25;
  double v26;
  unint64_t v27;
  int64x2_t v28;
  int64x2_t *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;

  sub_10004664C((uint64_t)&v31);
  sub_100046660((uint64_t)&v31, a1);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = v32;
    v9 = v6 + 5;
    do
    {
      v15 = *((_DWORD *)v9 - 2);
      if (v15 == v15 >> 31)
      {
        v11 = *((double *)v9 + 4);
      }
      else
      {
        if (v15 >= 0)
          v10 = v9;
        else
          v10 = (uint64_t *)*v9;
        v11 = (double)*((int *)v10 + 23);
      }
      v9 += 26;
      v12 = (int8x16_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0), (float64x2_t)xmmword_100395050);
      *(_QWORD *)&v13.f64[0] = v12.i64[0];
      *(_QWORD *)&v13.f64[1] = v8.i64[1];
      *(_QWORD *)&v14.f64[0] = v8.i64[0];
      *(_QWORD *)&v14.f64[1] = v12.i64[1];
      v8 = vbslq_s8((int8x16_t)vcgtq_f64(v14, v13), v12, v8);
    }
    while (v9 - 5 != v7);
    v32 = v8;
  }
  v31 += 0x4EC4EC4EC4EC4EC5 * (((char *)v7 - (char *)v6) >> 4);
  if (sub_10004637C((uint64_t)&v31) >= 1.0)
  {
    v18 = a2;
    v16 = *a2;
    v17 = v18[1];
    v19 = sub_10004637C((uint64_t)&v31);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v17 != v16)
    {
      v20 = ((char *)v17 - (char *)v16) / 208;
      if (v20 >> 61)
        sub_1000D02C0();
      v21 = v19;
      v22 = (char *)operator new(8 * v20);
      *a3 = v22;
      a3[1] = v22;
      v23 = (double *)&v22[8 * v20];
      a3[2] = v23;
      v24 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v25 = (double *)v22;
      v26 = 1.0 / v21;
      if (v24 < 3)
        goto LABEL_25;
      v27 = v24 + 1;
      v25 = (double *)&v22[8 * (v27 & 0x3FFFFFFFFFFFFFFCLL)];
      v28 = vdupq_lane_s64(*(uint64_t *)&v26, 0);
      v29 = (int64x2_t *)(v22 + 16);
      v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *v29 = v28;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        do
          *v25++ = v26;
        while (v25 != v23);
      }
      a3[1] = v23;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_100046360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_10004637C(uint64_t a1)
{
  if (*(_QWORD *)a1)
    return (*(double *)(a1 + 16) - *(double *)(a1 + 8)) * (double)(*(_QWORD *)a1 + 1) / (double)*(uint64_t *)a1;
  else
    return INFINITY;
}

void sub_1000465DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100046620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void **v16;

  while (1)
  {
    if (*((char *)v16 - 1) < 0)
      operator delete(*(v16 - 3));
    v16 -= 3;
    if (v16 == (void **)&a16)
      JUMPOUT(0x1000465FCLL);
  }
}

double sub_10004664C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  result = INFINITY;
  *(_OWORD *)(a1 + 8) = xmmword_100395670;
  return result;
}

uint64_t sub_100046660(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;

  *(_QWORD *)result += *(_QWORD *)a2;
  v2 = *(double *)(a2 + 8);
  v3 = *(double *)(result + 16);
  if (v2 >= *(double *)(result + 8))
    v2 = *(double *)(result + 8);
  *(double *)(result + 8) = v2;
  v4 = *(double *)(a2 + 16);
  if (v3 >= v4)
    v4 = v3;
  *(double *)(result + 16) = v4;
  return result;
}

void sub_100046698(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double **a3@<X8>)
{
  if (*(_DWORD *)(a1[1] + 28))
    sub_10023C0CC(a1[2], a2, a3);
  else
    sub_10004618C(*a1, (uint64_t **)a2, a3);
}

BOOL sub_1000466BC(_QWORD *a1, double *a2, double a3)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  double v6;
  BOOL v7;

  if (*a2 > a3)
    return 1;
  v4 = a1[1];
  if (*a1 == v4)
    return 0;
  v5 = *a1 + 80;
  do
  {
    v6 = *(double *)(v5 - 80);
    result = v6 > a3;
    v7 = v6 > a3 || v5 == v4;
    v5 += 80;
  }
  while (!v7);
  return result;
}

void sub_100046704(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  double v13;
  void *__p[3];
  uint8_t buf[8];

  v3 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    sub_10016CA74();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(__p, v4, a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      sub_100047C20(v6 + v7);
      v9 = *((double *)__p[0] + v8);
      sub_100047C28((double *)(v6 + v7), v9);
      if (v9 != -INFINITY)
        *(_BYTE *)(a1 + 120) = 1;
      sub_100047C20(v6 + v7);
      ++v8;
      v6 = *(_QWORD *)(a1 + 8);
      v7 += 80;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v6) >> 4));
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (!v10)
    sub_10016CA74();
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
  sub_100047C28((double *)(a1 + 32), v13);
  sub_100047C20(a1 + 32);
  if (v3 != *(unsigned __int8 *)(a1 + 120))
  {
    if (qword_100417ED8 == -1)
    {
      v11 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_12;
      goto LABEL_11;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FE8A0);
    v11 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_11:
      v12 = *(unsigned __int8 *)(a1 + 120);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "After receiveWifi, hasFeasibleParticles changed to '%d'", buf, 8u);
    }
  }
LABEL_12:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_100046B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::invalid_argument a31,int a32,__int16 a33,char a34,char a35)
{
  if (a24 < 0)
    operator delete(__p);
  if (!a16)
    _Unwind_Resume(exception_object);
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

double sub_100046C54(uint64_t a1)
{
  return sub_100046C74(*(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_100046C64(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_100047118(*(double **)(a1 + 8), a2, *(_QWORD **)(a1 + 16), *(double **)(a1 + 24), a3);
}

double sub_100046C74(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  void *__p[2];
  char v15;
  void *v16;
  void *v17[2];
  char v18;
  std::string v19;

  v3 = a2[1];
  v4 = 0.0;
  if (*a2 != v3)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *(_QWORD *)a3) >> 4);
    if (v8 != (v3 - *a2) >> 3)
    {
      sub_1000D5048(v17, "");
      sub_10023DAE8("Each measurement must have a prior probability, otherwise OffMap, injection, and Yield/NoYield won't work!", &v19);
      sub_100174738((uint64_t)v17, (uint64_t)&v19, 1);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (v18 < 0)
        operator delete(v17[0]);
      sub_10015C2DC((uint64_t)&v16);
    }
    if (v7 != *(_QWORD *)a3)
    {
      v9 = 0;
      v10 = 0;
      if (v8 <= 1)
        v11 = 1;
      else
        v11 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *(_QWORD *)a3) >> 4);
      do
      {
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4) <= v10)
          sub_1001E2FA0();
        v12 = *(double *)(a3 + 56) * *(double *)(*(_QWORD *)(a3 + 24) + 8 * v10);
        sub_100060EDC(*(_QWORD *)a3 + v9, (uint64_t)__p);
        if (v15 < 0)
          operator delete(__p[0]);
        __p[0] = 0;
        __p[0] = *(void **)(*a2 + 8 * v10);
        v4 = v4 + v12 * log(*(long double *)__p);
        ++v10;
        v9 += 208;
      }
      while (v11 != v10);
    }
  }
  return v4;
}

void sub_100047048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100047118(double *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, double *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *size;
  unint64_t *v61;
  unint64_t v62;
  double *v63;
  char *v64;
  char *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  std::string::size_type v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t (**v92)();
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t (**v96)();
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  void *v101;
  _QWORD *v102;
  void *v103;
  uint64_t *v104;
  uint64_t *v109;
  _QWORD *v110;
  std::string __p;
  std::__shared_weak_count *v112;
  uint64_t (**v113)();
  __int128 v114;
  char v115;
  std::runtime_error v116;
  __int128 v117;
  int v118;
  char *v119;
  char *v120;
  _BYTE v121[24];
  __int128 v122;
  __int128 v123;
  int v124;
  std::string *p_p;

  v122 = 0u;
  v123 = 0u;
  v124 = 1065353216;
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    while (1)
    {
      v116.__vftable = *(std::runtime_error_vtbl **)(v6 + 80 * v7 + 56);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
      v11 = sub_10023D230((uint64_t)&v122, (uint64_t *)&v116, (uint64_t)&unk_100395958, &__p);
      v13 = (char *)v11[4];
      v12 = v11[5];
      if ((unint64_t)v13 >= v12)
        break;
      *(_QWORD *)v13 = v7;
      v8 = (uint64_t)(v13 + 8);
LABEL_4:
      v11[4] = v8;
      ++v7;
      v6 = *a2;
      v9 = a2[1];
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a2) >> 4);
      if (v7 >= v10)
      {
        a5[1] = 0;
        *a5 = 0;
        a5[2] = 0;
        if (v9 != v6)
        {
          if (v10 >> 61)
            sub_1000D02C0();
          v30 = (char *)operator new(8 * v10);
          *a5 = (uint64_t)v30;
          a5[2] = (uint64_t)&v30[8 * v10];
          bzero(v30, 8 * v10);
          a5[1] = (uint64_t)&v30[8 * v10];
        }
        v31 = v123;
        if (!(_QWORD)v123)
          goto LABEL_127;
        while (1)
        {
LABEL_35:
          v33 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 16) + 40))(*(_QWORD *)(v31 + 16));
          if (!*v33)
          {
            __cxa_allocate_exception(0x40uLL);
            sub_1000D5048(&__p, "As of <rdar://problem/16461123> this is no longer possible");
            std::runtime_error::runtime_error(&v116, &__p);
            v116.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
            sub_10018D04C((uint64_t)v121);
            sub_1000F2F7C(&v116, (uint64_t)"std::vector<double> WifiMapLikelihood::measurementLogLikelihood(const std::vector<Particle> &, const WifiMapLikelihood::PriorProbabilities &, const WifiLikelihoodMeasurementEvent &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/wifi_map_likelihood.cpp", 66, (uint64_t)v121);
          }
          (*(void (**)(char **__return_ptr, _QWORD, double *))(*(_QWORD *)*v33 + 48))(&v119, *v33, a4);
          v116 = (std::runtime_error)0;
          v117 = 0u;
          v118 = 1065353216;
          v34 = *(uint64_t **)(v31 + 24);
          v104 = (uint64_t *)v31;
          v109 = *(uint64_t **)(v31 + 32);
          v110 = v33;
          if (v34 != v109)
            break;
LABEL_72:
          sub_10023D598((uint64_t)&v116);
          v64 = v119;
          if (v119)
          {
            v65 = v120;
            v32 = v119;
            if (v120 != v119)
            {
              do
              {
                v66 = (std::__shared_weak_count *)*((_QWORD *)v65 - 1);
                if (v66)
                {
                  p_shared_owners = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldaxr(p_shared_owners);
                  while (__stlxr(v68 - 1, p_shared_owners));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v65 -= 16;
              }
              while (v65 != v64);
              v32 = v119;
            }
            v120 = v64;
            operator delete(v32);
          }
          v31 = *v104;
          if (!*v104)
          {
            v100 = (_QWORD *)v123;
            if ((_QWORD)v123)
            {
              do
              {
                v102 = (_QWORD *)*v100;
                v103 = (void *)v100[3];
                if (v103)
                {
                  v100[4] = v103;
                  operator delete(v103);
                }
                operator delete(v100);
                v100 = v102;
              }
              while (v102);
            }
            goto LABEL_127;
          }
        }
        while (2)
        {
          v35 = *v34;
          v36 = *a2;
          v113 = off_1003F9A68;
          v114 = 0uLL;
          v115 &= 0xFCu;
          v114 = *(_OWORD *)(v36 + 80 * v35 + 16);
          (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t (***)()))(*(_QWORD *)*v33 + 16))(&__p, *v33, &v113);
          p_p = &__p;
          v37 = sub_10023D67C((uint64_t)&v116, (uint64_t)&__p, (uint64_t)&unk_100395958, (_QWORD **)&p_p);
          v39 = (char *)*((_QWORD *)v37 + 10);
          v38 = *((_QWORD *)v37 + 11);
          if ((unint64_t)v39 < v38)
          {
            *(_QWORD *)v39 = v35;
            v40 = (uint64_t)(v39 + 8);
            goto LABEL_60;
          }
          v41 = (char *)*((_QWORD *)v37 + 9);
          v42 = (v39 - v41) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            sub_1000D02C0();
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_1000CDEB8();
            v46 = operator new(8 * v45);
            v47 = &v46[8 * v42];
            *v47 = v35;
            v40 = (uint64_t)(v47 + 1);
            if (v39 == v41)
              goto LABEL_58;
LABEL_52:
            v48 = v39 - 8 - v41;
            if (v48 < 0x58)
              goto LABEL_144;
            if ((unint64_t)(v41 - v46) < 0x20)
              goto LABEL_144;
            v49 = (v48 >> 3) + 1;
            v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            v51 = &v39[-v50];
            v47 = (_QWORD *)((char *)v47 - v50);
            v52 = &v46[8 * v42 - 16];
            v53 = v39 - 16;
            v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v55 = *(_OWORD *)v53;
              *(v52 - 1) = *((_OWORD *)v53 - 1);
              *v52 = v55;
              v52 -= 2;
              v53 -= 32;
              v54 -= 4;
            }
            while (v54);
            v39 = v51;
            if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_144:
              do
              {
                v56 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *--v47 = v56;
              }
              while (v39 != v41);
            }
          }
          else
          {
            v46 = 0;
            v47 = (_QWORD *)(8 * v42);
            *(_QWORD *)(8 * v42) = v35;
            v40 = 8 * v42 + 8;
            if (v39 != v41)
              goto LABEL_52;
          }
LABEL_58:
          *((_QWORD *)v37 + 9) = v47;
          *((_QWORD *)v37 + 10) = v40;
          *((_QWORD *)v37 + 11) = &v46[8 * v45];
          if (v41)
            operator delete(v41);
LABEL_60:
          *((_QWORD *)v37 + 10) = v40;
          v57 = v112;
          v33 = v110;
          if (!v112)
            goto LABEL_64;
          v58 = (unint64_t *)&v112->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
LABEL_65:
              v61 = (unint64_t *)&size->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
          else
          {
LABEL_64:
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
              goto LABEL_65;
          }
          nullsub_23(&v113);
          if (++v34 != v109)
            continue;
          break;
        }
        v63 = (double *)v117;
        if (!(_QWORD)v117)
          goto LABEL_72;
        while (2)
        {
          memset(&__p, 0, sizeof(__p));
          v70 = (char *)*((_QWORD *)v63 + 9);
          v69 = (char *)*((_QWORD *)v63 + 10);
          v71 = v69 - v70;
          if (v69 == v70)
          {
            v72 = 0;
          }
          else
          {
            if (v71 < 0)
              sub_1000D02C0();
            v72 = (char *)operator new(v69 - v70);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v72[8 * (v71 >> 3)];
            v70 = (char *)*((_QWORD *)v63 + 9);
            v69 = (char *)*((_QWORD *)v63 + 10);
          }
LABEL_88:
          if (v70 == v69)
          {
            sub_10023B2A4(a1, v110, v63 + 2, (uint64_t *)&__p, a3, a4, (uint64_t)&v119, (uint64_t)&v113);
            v92 = v113;
            if ((uint64_t (**)())v114 == v113)
            {
              if (v113)
                goto LABEL_123;
            }
            else
            {
              v93 = (uint64_t)(v114 - (_QWORD)v113) >> 3;
              v94 = (uint64_t *)*((_QWORD *)v63 + 9);
              v95 = *a5;
              if (v93 <= 1)
                v93 = 1;
              v96 = v113;
              do
              {
                v97 = (uint64_t)*v96++;
                v98 = v97;
                v99 = *v94++;
                *(_QWORD *)(v95 + 8 * v99) = v98;
                --v93;
              }
              while (v93);
LABEL_123:
              *(_QWORD *)&v114 = v92;
              operator delete(v92);
            }
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            v63 = *(double **)v63;
            if (!v63)
              goto LABEL_72;
            continue;
          }
          break;
        }
        v74 = (_QWORD *)(*a2 + 80 * *(_QWORD *)v70 + 40);
        if ((unint64_t)v72 < __p.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)v72 = *v74;
          v73 = (std::string::size_type)(v72 + 8);
        }
        else
        {
          v75 = (char *)__p.__r_.__value_.__r.__words[0];
          v76 = &v72[-__p.__r_.__value_.__r.__words[0]];
          v77 = (uint64_t)&v72[-__p.__r_.__value_.__r.__words[0]] >> 3;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 61)
            sub_1000D02C0();
          v79 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2 > v78)
            v78 = v79 >> 2;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
            v80 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v80 = v78;
          if (v80)
          {
            if (v80 >> 61)
              sub_1000CDEB8();
            v81 = operator new(8 * v80);
            v82 = &v81[8 * v77];
            *v82 = *v74;
            v73 = (std::string::size_type)(v82 + 1);
            if (v72 == v75)
              goto LABEL_104;
          }
          else
          {
            v81 = 0;
            v82 = (_QWORD *)(8 * v77);
            *(_QWORD *)(8 * v77) = *v74;
            v73 = 8 * v77 + 8;
            if (v72 == v75)
              goto LABEL_104;
          }
          v83 = v72 - 8 - v75;
          if (v83 >= 0x168)
          {
            if (&v76[(_QWORD)v81 - 8 - (v83 & 0xFFFFFFFFFFFFFFF8)] > &v76[(_QWORD)v81 - 8])
            {
              v84 = v72;
            }
            else if (&v72[-(v83 & 0xFFFFFFFFFFFFFFF8) - 8] > v72 - 8)
            {
              v84 = v72;
            }
            else if ((unint64_t)(v72 - v81 - (_QWORD)v76) >= 0x20)
            {
              v86 = (v83 >> 3) + 1;
              v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
              v84 = &v72[-v87];
              v82 = (_QWORD *)((char *)v82 - v87);
              v88 = &v81[8 * v77 - 16];
              v89 = v72 - 16;
              v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v91 = *(_OWORD *)v89;
                *(v88 - 1) = *((_OWORD *)v89 - 1);
                *v88 = v91;
                v88 -= 2;
                v89 -= 32;
                v90 -= 4;
              }
              while (v90);
              if (v86 == (v86 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_104;
            }
            else
            {
              v84 = v72;
            }
          }
          else
          {
            v84 = v72;
          }
          do
          {
            v85 = *((_QWORD *)v84 - 1);
            v84 -= 8;
            *--v82 = v85;
          }
          while (v84 != v75);
LABEL_104:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          __p.__r_.__value_.__l.__size_ = v73;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v81[8 * v80];
          if (v75)
            operator delete(v75);
        }
        __p.__r_.__value_.__l.__size_ = v73;
        v70 += 8;
        v72 = (char *)v73;
        goto LABEL_88;
      }
    }
    v14 = (char *)v11[3];
    v15 = (v13 - v14) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      sub_1000D02C0();
    v17 = v12 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_1000CDEB8();
      v19 = operator new(8 * v18);
      v20 = (unint64_t *)&v19[8 * v15];
      *v20 = v7;
      v8 = (uint64_t)(v20 + 1);
      if (v13 == v14)
        goto LABEL_23;
    }
    else
    {
      v19 = 0;
      v20 = (unint64_t *)(8 * v15);
      *(_QWORD *)(8 * v15) = v7;
      v8 = 8 * v15 + 8;
      if (v13 == v14)
      {
LABEL_23:
        v11[3] = v20;
        v11[4] = v8;
        v11[5] = &v19[8 * v18];
        if (v14)
          operator delete(v14);
        goto LABEL_4;
      }
    }
    v21 = v13 - 8 - v14;
    if (v21 < 0x58)
      goto LABEL_145;
    if ((unint64_t)(v14 - v19) < 0x20)
      goto LABEL_145;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v13[-v23];
    v20 = (unint64_t *)((char *)v20 - v23);
    v25 = &v19[8 * v15 - 16];
    v26 = v13 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v13 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_145:
      do
      {
        v29 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v20 = v29;
      }
      while (v13 != v14);
    }
    goto LABEL_23;
  }
  a5[1] = 0;
  *a5 = 0;
  a5[2] = 0;
  v31 = v123;
  if ((_QWORD)v123)
    goto LABEL_35;
LABEL_127:
  v101 = (void *)v122;
  *(_QWORD *)&v122 = 0;
  if (v101)
    operator delete(v101);
}

void sub_100047A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,std::runtime_error a34)
{
  uint64_t v34;
  void *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  void *v40;

  v36 = *a12;
  if (*a12)
  {
    *a10 = v36;
    operator delete(v36);
  }
  v37 = *(_QWORD **)(v34 - 144);
  if (v37)
  {
    do
    {
      v39 = (_QWORD *)*v37;
      v40 = (void *)v37[3];
      if (v40)
      {
        v37[4] = v40;
        operator delete(v40);
      }
      operator delete(v37);
      v37 = v39;
    }
    while (v39);
  }
  v38 = *(void **)(v34 - 160);
  *(_QWORD *)(v34 - 160) = 0;
  if (v38)
    operator delete(v38);
  _Unwind_Resume(exception_object);
}

double sub_100047C20(uint64_t a1)
{
  return *(double *)a1;
}

double sub_100047C28(double *a1, double a2)
{
  double result;

  result = *a1 + a2;
  *a1 = result;
  return result;
}

uint64_t sub_100047C38()
{
  return 1;
}

void sub_100047C40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_100047D14((uint64_t)a2, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4);
  v5 = *(_QWORD **)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  while (v5 != v4)
  {
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 40))(*v5);
    v8 = (_QWORD *)a2[1];
    if ((unint64_t)v8 >= a2[2])
    {
      v6 = sub_1001E3DB8((uint64_t)a2, (__int128 *)v7);
    }
    else
    {
      v9 = *(_QWORD *)(v7 + 8);
      *v8 = *(_QWORD *)v7;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 = v8 + 2;
    }
    a2[1] = v6;
    v5 += 2;
  }
}

void sub_100047CEC(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

void sub_100047D00(_Unwind_Exception *a1)
{
  void **v1;

  sub_1000F7D3C(v1);
  _Unwind_Resume(a1);
}

void sub_100047D14(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_1000D02C0();
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_16:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v2 -= 16;
        }
        while (v2 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_16;
    }
  }
}

uint64_t sub_100047E1C(uint64_t result, float64_t a2, float64_t a3, double a4)
{
  double v5;
  int8x16_t v6;
  float64x2_t v7;
  float64x2_t v8;
  int8x16_t v9;
  void *v10;
  void *__p[2];
  char v12;
  std::string v13;

  if (a2 >= a3)
  {
    sub_1000D5048(__p, "");
    sub_10030442C("You must add a _range_. If you intend to add an individual value, use addObservation() instead.", &v13);
    sub_100174738((uint64_t)__p, (uint64_t)&v13, 1);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v12 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v10);
  }
  v5 = *(double *)(result + 16) + (a2 + a3) * a4 * 0.5;
  *(double *)(result + 8) = *(double *)(result + 8) + a4;
  *(double *)(result + 16) = v5;
  v6 = *(int8x16_t *)(result + 40);
  v7.f64[0] = *(float64_t *)(result + 40);
  v7.f64[1] = a3;
  v8.f64[1] = *(float64_t *)(result + 48);
  v8.f64[0] = a2;
  v9 = (int8x16_t)vcgtq_f64(v7, v8);
  v7.f64[0] = a2;
  *(float64x2_t *)(result + 24) = vaddq_f64((float64x2_t)COERCE_UNSIGNED_INT64((a2 * a3 + a3 * a3 + a2 * a2) * a4 / 3.0), *(float64x2_t *)(result + 24));
  *(int8x16_t *)(result + 40) = vbslq_s8(v9, (int8x16_t)v7, v6);
  return result;
}

void sub_100047F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100047FAC(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;

  v4 = sub_1000480CC(*(_QWORD *)(a1 + 176));
  if (v4)
  {
    *(_BYTE *)(a1 + 304) = 1;
    return !v4;
  }
  v6 = *(_QWORD *)(a1 + 176);
  sub_1000ACD60(a1, a2, &v15);
  v13 = 0;
  v14 = 0;
  sub_1000B8A20(v6, a2, &v15, &v13, a1 + 2184);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (!v16)
    return !v4;
  v11 = (unint64_t *)&v16->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
    return !v4;
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return 1;
}

void sub_1000480B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1000480CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v1 == v2)
    return 1;
  do
  {
    v3 = sub_100050DB0(v1);
    v4 = *(unsigned __int8 *)(v3 + 120);
    result = *(_BYTE *)(v3 + 120) != 0;
    v1 += 72;
    if (v4)
      v6 = v1 == v2;
    else
      v6 = 1;
  }
  while (!v6);
  return result;
}

void sub_100048124(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[5];

  v4.n128_f64[0] = sub_10004664C(a2);
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    v8 = *v5;
    v7 = (std::__shared_weak_count *)v5[1];
    v13[3] = *v5;
    v13[4] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 40))(v8, v4) & 1) == 0)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v8 + 64))(v13, v8);
      sub_100046660(a2, (uint64_t)v13);
    }
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 2;
  }
}

void sub_100048204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100048218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004822C(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v5 = (_OWORD *)a1[2];
  v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_OWORD **)(a1 + 1);
    v8 = (_OWORD *)a1[1];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1000D02C0();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_1000CDEB8();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      v5 = *v7;
    }
    a1[1] = v14;
    a1[2] = v6;
    a1[3] = &v13[16 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[2] = v6;
  return sub_10004834C(a1, (((uint64_t)v6 - a1[1]) >> 4) - 1);
}

_QWORD *sub_10004834C(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  v4 = (_QWORD *)result[1];
  v3 = (_BYTE *)result[2];
  v5 = v3 - (_BYTE *)v4;
  if (v3 - (_BYTE *)v4 == 16)
  {
    *((_DWORD *)result + 8) = 1;
  }
  else
  {
    v6 = v5 >> 4;
    if (v5 >> 4 > a2)
    {
      v7 = 0;
      do
      {
        if (v7 != a2)
        {
          v8 = v4[2 * a2];
          v9 = *result;
          v10 = &v4[2 * v7];
          while (1)
          {
            v11 = *v10;
            v10 += 2;
            if (v9 >= v8 - v11)
              break;
            ++v7;
            *((_DWORD *)result + 8) = 2;
            if (a2 == v7)
              goto LABEL_6;
          }
        }
        if (v7 == a2)
        {
LABEL_6:
          *((_DWORD *)result + 8) = 1;
          v7 = a2;
        }
        ++a2;
      }
      while (a2 != v6);
      if (v7)
      {
        if ((v7 & 0x8000000000000000) != 0)
          sub_1000D02C0();
        v12 = (char *)&v4[2 * v7];
        v13 = v3 - v12;
        if (v3 != v12)
          result = memmove(v4, v12, v3 - v12);
        v2[2] = (char *)v4 + v13;
      }
    }
  }
  return result;
}

void sub_100048458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100048474(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  int v27;
  void *__p;
  char *v29;

  v3 = a1[1];
  v2 = (uint64_t)(a1 + 1);
  v4 = a1[2] - v3;
  if (v4 == 208)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    v5 = v4 / 208;
    if (v4 / 208 <= a2)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v3 + 208 * a2;
        v10 = *(_QWORD *)(v7 + 40);
        v8 = v7 + 40;
        v9 = v10;
        v11 = *(_DWORD *)(v8 - 8);
        if (v11 >= 0)
          v9 = v8;
        v12 = (uint64_t *)(v9 + 8);
        v13 = (uint64_t *)(v8 + 56);
        if (v11 != v11 >> 31)
          v13 = v12;
        if (v6 != a2)
        {
          v14 = *v13;
          v15 = *a1;
          v16 = v3 + 96 + 208 * v6;
          while (1)
          {
            v17 = *(_DWORD *)(v16 - 64);
            v18 = v16 - 56;
            if (v17 < 0)
              v18 = *(_QWORD *)(v16 - 56);
            v19 = v18 + 8;
            v20 = (_QWORD *)(v17 == v17 >> 31 ? v16 : v19);
            if (v15 >= v14 - *v20)
              break;
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            v16 += 208;
            if (a2 == v6)
              goto LABEL_6;
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    v21 = v3 + 208 * v6;
    sub_10004866C(&__p, v3, v21);
    sub_100048750(v2, v3, v21, v22);
    v23 = (char *)__p;
    if (__p)
    {
      v24 = v29;
      v25 = __p;
      if (v29 != __p)
      {
        do
        {
          v27 = *((_DWORD *)v24 - 44);
          if (v27 == v27 >> 31)
          {
            if (*(v24 - 128))
              *(v24 - 128) = 0;
          }
          else
          {
            v26 = *((_QWORD *)v24 - 21);
            if (v27 < 0)
            {
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            }
            else
            {
              (*(void (**)(char *))v26)(v24 - 168);
            }
          }
          v24 -= 208;
        }
        while (v24 != v23);
        v25 = __p;
      }
      v29 = v23;
      operator delete(v25);
    }
  }
}

void sub_100048650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a10)
    sub_100343FA8((uint64_t)&a10, a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10004866C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v9;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v5 = a3 - a2;
  if (a3 != a2)
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * (v5 >> 4);
    if (v6 >= 0x13B13B13B13B13CLL)
      sub_1000D02C0();
    v9 = (char *)operator new(v5);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[208 * v6];
    a1[1] = sub_10021942C(v4, a2, a3, (uint64_t)v9);
  }
  return a1;
}

void sub_100048724(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_1003445DC((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048750(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  if (a2 != a3)
  {
    v6 = a3;
    v7 = *(_QWORD *)(a1 + 8);
    if (a3 == v7)
    {
      v9 = a2;
    }
    else
    {
      v8 = 16 * ((a3 - a2) >> 4);
      v9 = a2;
      do
      {
        v11 = *(_DWORD *)(v9 + v8);
        if (*(_DWORD *)v9 == v11)
        {
          v12 = (_QWORD *)(v9 + 8);
          v13 = v9 + 8 + v8;
          if (*(_DWORD *)v9 == *(int *)v9 >> 31)
          {
            *v12 = *(_QWORD *)v13;
          }
          else
          {
            v10 = *(_OWORD *)v13;
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v13 + 16);
            *(_OWORD *)v12 = v10;
          }
        }
        else
        {
          v14 = v11 ^ (v11 >> 31);
          v15 = v9 + 8 + v8;
          if (v14)
          {
            v16 = *(_OWORD *)v15;
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v15 + 16);
            *(_OWORD *)(v9 + 8) = v16;
            *(_DWORD *)v9 = v14;
          }
          else
          {
            *(_QWORD *)(v9 + 8) = *(_QWORD *)v15;
            *(_DWORD *)v9 = 0;
          }
        }
        a4.n128_f64[0] = sub_100233B78((uint64_t *)(v9 + 32), (unsigned int *)(v9 + 32 + v8));
        v9 += 208;
      }
      while (v9 + v8 != v7);
      v6 = *(_QWORD *)(a1 + 8);
    }
    while (1)
    {
      while (1)
      {
        if (v6 == v9)
        {
          *(_QWORD *)(a1 + 8) = v9;
          return a2;
        }
        v17 = *(_DWORD *)(v6 - 176);
        if (v17 == v17 >> 31)
          break;
        v18 = *(_QWORD *)(v6 - 168);
        if (v17 < 0)
        {
          if (v18)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, a4);
LABEL_14:
          v6 -= 208;
        }
        else
        {
          (*(void (**)(uint64_t, __n128))v18)(v6 - 168, a4);
          v6 -= 208;
        }
      }
      if (!*(_BYTE *)(v6 - 128))
        goto LABEL_14;
      *(_BYTE *)(v6 - 128) = 0;
      v6 -= 208;
    }
  }
  return a2;
}

uint64_t sub_1000488CC(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v14[3];

  sub_100048E4C(a3, v14);
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)a1 = off_1003F4C00;
  sub_100048BD0((_QWORD *)(a1 + 8), (uint64_t)v14);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  sub_100048DC0((uint64_t)v14);
  *(_QWORD *)a1 = off_100401780;
  sub_10003F348(a3, (uint64_t)v14);
  sub_100048E78(a1 + 72, v14, 0.25);
  v12 = *a5;
  *(_OWORD *)(a1 + 120) = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  if (a4 == 1)
  {
    *(float *)&v12 = sub_10026AAA0(a3);
  }
  else if (!a4)
  {
    *(float *)&v12 = sub_1000BFC84(a3);
  }
  *(double *)(a1 + 136) = sqrt(*(float *)&v12 * 0.25);
  return a1;
}

void sub_1000489C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1000E095C(v2);
  sub_10015DE40(v1);
  _Unwind_Resume(a1);
}

void sub_1000489E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_100048DC0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1000489FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10015DE40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100048A10(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  __int128 v23[3];

  sub_100048E4C(a3, v23);
  v10 = *a2;
  v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(_QWORD *)a1 = off_1003F4C00;
  sub_100048BD0((_QWORD *)(a1 + 8), (uint64_t)v23);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  sub_100048DC0((uint64_t)v23);
  *(_QWORD *)a1 = off_1003FECF0;
  sub_10003F348(a3, (uint64_t)v23);
  sub_100048E78(a1 + 72, v23, 0.25);
  v13 = a1 + 120;
  if (a4 == 1)
  {
    v12.n128_u64[0] = 0.25;
    sub_10026A6B0(a3, v13, v12);
  }
  else if (!a4)
  {
    v12.n128_u64[0] = 0.25;
    sub_100048E08(a3, v13, v12);
  }
  sub_100048EC4();
  *(_QWORD *)(a1 + 184) = v14;
  *(_QWORD *)(a1 + 192) = v15;
  sub_100048EA4();
  *(double *)(a1 + 200) = v16;
  *(_QWORD *)(a1 + 208) = v17;
  *(_QWORD *)(a1 + 224) = *a5;
  v18 = a5[1];
  *(_QWORD *)(a1 + 232) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  if (a4 == 1)
  {
    v21 = sub_10026A9B8(a3, 0.25);
    goto LABEL_12;
  }
  if (!a4)
  {
    v21 = sub_100048DF0(a3, 0.25);
LABEL_12:
    v16 = v21;
  }
  *(double *)(a1 + 216) = sqrt(v16 * 12.0);
  return a1;
}

void sub_100048B70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1000E095C(v2);
  sub_10015DE40(v1);
  _Unwind_Resume(a1);
}

void sub_100048B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_100048DC0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100048BA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10015DE40(v1);
  _Unwind_Resume(a1);
}

void sub_100048BBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10015DE40(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100048BD0(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1003FA700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_QWORD *)((char *)a1 + 29) = 0;
  sub_100048C5C((uint64_t)a1, a2);
  return a1;
}

void sub_100048C2C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100048C48(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100048C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/parameters.pb.cc", 6279);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 44);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 44) |= 2u;
  *(_DWORD *)(a1 + 20) = v9;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) |= 4u;
  *(_DWORD *)(a1 + 24) = v10;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_16:
    v12 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) |= 0x10u;
    *(_DWORD *)(a1 + 32) = v12;
    if ((*(_DWORD *)(a2 + 44) & 0x20) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_10;
  }
LABEL_15:
  v11 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 44) |= 8u;
  *(_DWORD *)(a1 + 28) = v11;
  v5 = *(_DWORD *)(a2 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_16;
LABEL_9:
  if ((v5 & 0x20) != 0)
  {
LABEL_10:
    v6 = *(_BYTE *)(a2 + 36);
    *(_DWORD *)(a1 + 44) |= 0x20u;
    *(_BYTE *)(a1 + 36) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100048D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100048DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100048DC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003FA700;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

float sub_100048DF0(uint64_t a1, double a2)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 44) * a2;
}

uint64_t sub_100048E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float *v5;

  v5 = *(float **)(*(_QWORD *)(a1 + 8) + 64);
  if (!v5)
    v5 = *(float **)(qword_10041B018 + 64);
  return sub_100049158(a2, a3, (float)(v5[4] + v5[4]), v5[5], v5[6], v5[7]);
}

_QWORD *sub_100048E4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
  if (!v2)
    v2 = *(_QWORD *)(qword_10041B018 + 160);
  return sub_100048BD0(a2, v2);
}

double sub_100048E78(uint64_t a1, __int128 *a2, double a3)
{
  __int128 v3;
  __int128 v4;
  double result;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  result = sqrt(*(double *)a2 * a3 * 3.0);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100048ED8(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  void *v12;
  void *__p[2];
  char v14;

  *(double *)a1 = a3;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 56) = 0x7FF8000000000000;
  *(long double *)(a1 + 48) = exp(-(a5 * a2));
  *(double *)(a1 + 32) = sqrt(a2 * a3);
  *(double *)(a1 + 40) = a4 / sqrt(a2);
  if (a6 < 0.0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v14 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v12);
  }
  *(double *)(a1 + 56) = a6 * a2;
  return a1;
}

void sub_10004912C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100049A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id *sub_100049E84(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  int v8;
  id v9;

  v2 = a1[5];
  if (v2)
  {
    dispatch_source_set_timer(v2, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler((dispatch_source_t)a1[5], &stru_100404370);
    dispatch_source_cancel((dispatch_source_t)a1[5]);
    v3 = a1[5];
  }
  else
  {
    v3 = 0;
  }

  objc_destroyWeak(a1 + 2);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    CFRelease(v4);
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100404290);
    v5 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return a1;
    goto LABEL_8;
  }
  v5 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_8:
    v6 = *a1;
    v8 = 134217984;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Pending scan information destroyed: %p", (uint8_t *)&v8, 0xCu);
  }
  return a1;
}

void sub_100049FD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000CDD68(a1);
}

void sub_10004A074(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004A2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

WifiScanResult *__cdecl sub_10004A30C(id a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t Property;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int IsAdHoc;
  int IsCaptive;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = ((uint64_t (*)(void))WiFiNetworkGetProperty)();
  Property = WiFiNetworkGetProperty(v2, CFSTR("BSSID"));
  v5 = WiFiNetworkGetProperty(v2, CFSTR("SSID_STR"));
  v6 = WiFiNetworkGetProperty(v2, CFSTR("CHANNEL"));
  v7 = WiFiNetworkGetProperty(v2, CFSTR("RSSI"));
  v8 = WiFiNetworkGetProperty(v2, CFSTR("CHANNEL_FLAGS"));
  IsAdHoc = WiFiNetworkIsAdHoc(v2);
  IsCaptive = WiFiNetworkIsCaptive(v2);
  v11 = WiFiNetworkGetProperty(v2, CFSTR("AP_MODE"));
  LOBYTE(v15) = WiFiNetworkIsApplePersonalHotspot(v2) != 0;
  BYTE1(v14) = IsCaptive != 0;
  LOBYTE(v14) = IsAdHoc != 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[WifiScannerCommonDarwin scanResultWithAge:bssid:ssid:channel:rssi:flags:adHoc:captive:mode:personalHotspot:](WifiScannerCommonDarwin, "scanResultWithAge:bssid:ssid:channel:rssi:flags:adHoc:captive:mode:personalHotspot:", v3, Property, v5, v6, v7, v8, v14, v11, v15));

  return (WifiScanResult *)v12;
}

void sub_10004A460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10004A764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10004A778(uint64_t a1)
{
  char v1;

  sub_10022F064((uint64_t)&v1, (char **)(a1 + 24));
}

uint64_t sub_10004A79C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10004A7A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = off_100405F58;
  v2 = (std::__shared_weak_count *)a1[252];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = a1[250];
      a1[250] = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = a1[250];
  a1[250] = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
LABEL_7:
  sub_100073738(a1 + 10);
  v6 = (std::__shared_weak_count *)a1[9];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)a1[7];
      if (v9)
        goto LABEL_12;
      return a1;
    }
  }
  v9 = (std::__shared_weak_count *)a1[7];
  if (!v9)
    return a1;
LABEL_12:
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

uint64_t sub_10004A8CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10004A8DC(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  *(_QWORD *)a1 = off_1004006B8;
  sub_10004AAA0(a1 + 328, *(_QWORD **)(a1 + 336));
  v2 = *(void **)(a1 + 304);
  if (v2)
    operator delete(v2);
  sub_10004AA70(a1 + 248);
  sub_10004AA70(a1 + 192);
  v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v12)
      goto LABEL_23;
  }
  else
  {
LABEL_17:
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v12)
      goto LABEL_23;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_23:
  v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v15)
    return a1;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
    return a1;
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

void sub_10004AA70(uint64_t a1)
{
  *(_QWORD *)a1 = off_100402F60;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_10004AAA0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10004AAA0(a1, *a2);
    sub_10004AAA0(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_10004AAE4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10004AB00(_QWORD *a1)
{
  sub_10004AC38(a1);
  operator delete();
}

void sub_10004AB24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_100402E38;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_10004ABA0(a1 + 1);
  operator delete();
}

void sub_10004ABA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;

  *a1 = off_100403B98;
  v2 = a1[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_10042EA58 != a1)
  {
    v4 = a1[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

_QWORD *sub_10004AC38(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *a1 = off_1003FF438;
  v2 = a1[6];
  if (v2)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 40))(v2, a1 + 1);
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)a1[2];
  if (!v9)
    return a1;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_10004AD3C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  nullsub_21(a1 + 48);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_10004AD74(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  std::promise<void> *v3;
  _QWORD v4[2];
  _QWORD block[6];
  std::future<void> v6;
  std::promise<void> v7;

  v4[0] = a1;
  v4[1] = a2;
  v2 = *(id *)(a1 + 32);
  v3 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020398C;
  block[3] = &unk_1003FC648;
  block[4] = v4;
  block[5] = &v7;
  dispatch_sync(v2, block);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);

}

void sub_10004AE1C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_10004AE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10004AE5C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void sub_10004AE6C(uint64_t a1, uint64_t a2)
{
  sub_10004AD74(*(_QWORD *)(a1 + 8), a2);
}

void sub_10004B054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10004B82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;

  if (a47 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10004B990(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentForegroundFetchRequest"));
    objc_msgSend((id)v2, "requestDidComplete:", *(_QWORD *)(a1 + 32));

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentForegroundFetchRequest"));
    LOBYTE(v2) = objc_msgSend(v3, "allFloorsDownloaded");

    if ((v2 & 1) != 0)
      objc_msgSend(WeakRetained, "foregroundTileDownloadComplete");
  }

}

void sub_10004BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_10004BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10004BA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const void ***sub_10004BA5C(uint64_t a1, uint64_t ***a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void ****v13;
  const void ***v14;
  unint64_t v15;
  const void **v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v36[2];
  char v37;

  v9 = sub_1000B40D8((uint64_t)v36, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(const void *****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == (const void **)v10)
            {
              if ((sub_1000790EC(v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v14;
            }
            else if (((unint64_t)v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (const void ***)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if ((sub_1000790EC(v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (const void ***)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x7A0uLL);
  v36[0] = v17;
  v36[1] = a1 + 16;
  v37 = 0;
  *v17 = 0;
  v17[1] = v10;
  v18 = a3[1];
  v17[2] = *a3;
  v17[3] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_1000B53CC(v17 + 4, a4);
  v37 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v24 = (_QWORD *)v36[0];
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v24 = (_QWORD *)v36[0];
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v33 & v10;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v33 & v10));
      v24 = (_QWORD *)v36[0];
      if (v23)
        goto LABEL_29;
    }
LABEL_53:
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v36[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v36[0])
    {
      v34 = *(_QWORD *)(*(_QWORD *)v36[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v34 >= v11)
          v34 %= v11;
      }
      else
      {
        v34 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v36[0];
    }
    goto LABEL_64;
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v24 = (_QWORD *)v36[0];
  if (!v23)
    goto LABEL_53;
LABEL_29:
  *v24 = *v23;
  *v23 = v36[0];
LABEL_64:
  v14 = (const void ***)v36[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_10004BDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10004BDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(_QWORD *)(v2 + 24))
    sub_1003444E0();
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10004BE10(char **a1)
{
  char *result;

  result = *a1;
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

_QWORD *sub_10004BE28(_QWORD *a1, const char *a2)
{
  const char *v4;

  v4 = a2;
  sub_10019586C(&v4, a1);
  return a1;
}

void sub_10004BECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004C06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10004C088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10004C0A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10004C0B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004CE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

void sub_10004D088(uint64_t a1, uint64_t a2)
{
  sub_10007EB48(*(_QWORD *)(a1 + 8), a2);
}

void sub_10004D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001E63D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10004D1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001E63D0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10004D2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10004D3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10004D464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = off_1003FC300;
  *(_QWORD *)(a1 + 8) = off_1003FC398;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    sub_1000CA720(v2);
    operator delete();
  }
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100005D30((dispatch_object_t *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(void **)(a1 + 16);
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_10004D550(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int **v7;
  int **i;
  NSObject *v9;
  uint64_t v10;
  _BYTE *v11;
  double v12;
  NSObject *v13;
  int **v14;
  int **v15;
  uint64_t v16;
  int **v17;
  int **v18;
  int **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int **v23;
  int **v25;
  int **v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE buf[24];
  __n128 (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)();
  uint64_t *v32;
  uint64_t *v33;
  int ***v34;
  _BYTE v35[24];
  void *v36;
  _BYTE *v37;

  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a1;
    v25 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3802000000;
    v30 = sub_100218560;
    v31 = nullsub_141;
    v32 = (uint64_t *)&v25;
    v33 = (uint64_t *)v5;
    *(_QWORD *)v35 = _NSConcreteStackBlock;
    *(_QWORD *)&v35[8] = 0x40000000;
    *(_QWORD *)&v35[16] = sub_100218570;
    v36 = &unk_1003FDF08;
    v37 = buf;
    sub_10005C5D4((dispatch_queue_t *)(v5 + 32), v35);
    _Block_object_dispose(buf, 8);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v25;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Applying until timestamp %lld with queue size %zu", buf, 0x16u);
  }
  v6 = *a1;
  v28 = a2;
  *(_QWORD *)buf = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x4002000000;
  v30 = sub_100218C40;
  v31 = nullsub_146;
  v32 = (uint64_t *)v6;
  v33 = &v28;
  v34 = &v25;
  *(_QWORD *)v35 = _NSConcreteStackBlock;
  *(_QWORD *)&v35[8] = 0x40000000;
  *(_QWORD *)&v35[16] = sub_100218C58;
  v36 = &unk_1003FDFD0;
  v37 = buf;
  sub_10005C5D4((dispatch_queue_t *)(v6 + 32), v35);
  _Block_object_dispose(buf, 8);
  v7 = v25;
  for (i = v26; v7 != i; v7 += 2)
  {
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_8;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
      v9 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_8:
        sub_100217D24(*v7);
        if (buf[23] >= 0)
          v11 = buf;
        else
          v11 = *(_BYTE **)buf;
        v28 = sub_10005D4C0(*v7);
        v12 = sub_10018EB80(&v28);
        *(_DWORD *)v35 = 136315394;
        *(_QWORD *)&v35[4] = v11;
        *(_WORD *)&v35[12] = 2048;
        *(double *)&v35[14] = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Applying event %s @ %f", v35, 0x16u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
    }
    *(_QWORD *)buf = a1[1];
    sub_10004E050(*v7, (uint64_t)buf, v10);
  }
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003FDDB0);
  v13 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
    v15 = v25;
    v14 = v26;
    v16 = *a1;
    v28 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3802000000;
    v30 = sub_100218560;
    v31 = nullsub_141;
    v32 = &v28;
    v33 = (uint64_t *)v16;
    *(_QWORD *)v35 = _NSConcreteStackBlock;
    *(_QWORD *)&v35[8] = 0x40000000;
    *(_QWORD *)&v35[16] = sub_100218570;
    v36 = &unk_1003FDF08;
    v37 = buf;
    sub_10005C5D4((dispatch_queue_t *)(v16 + 32), v35);
    _Block_object_dispose(buf, 8);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = ((char *)v14 - (char *)v15) >> 4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v28;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Applied %zu, %zu events remaining to be applied", buf, 0x16u);
  }
  v18 = v25;
  v17 = v26;
  if (v25)
  {
    if (v26 == v25)
    {
      v23 = v26;
    }
    else
    {
      v19 = v26;
      do
      {
        v20 = (std::__shared_weak_count *)*(v19 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v19 -= 2;
      }
      while (v19 != v18);
      v23 = v25;
    }
    v26 = v18;
    operator delete(v23);
  }
  return ((char *)v17 - (char *)v18) >> 4;
}

void sub_10004D9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    sub_1000CDD68(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10004DA30(uint64_t a1)
{
  sub_10004DA38(a1 + 24);
}

void sub_10004DA38(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10004DA6C@<X0>(uint64_t *a1@<X0>, int a2@<W8>)
{
  uint64_t result;

  if ((a2 & 0x80000000) == 0)
    return nullsub_8(a1);
  result = *a1;
  if (result)
  {
    nullsub_8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10004E050(int *a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(int *, uint64_t, uint64_t, int *))((char *)sub_10004E074
                                                                 + 4 * byte_100393CFC[*a1 ^ (*a1 >> 31)]))(a1, a2, a3, a1 + 2);
}

uint64_t sub_10004E074@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X3>, int a3@<W8>)
{
  if (a3 < 0)
    a2 = (_QWORD *)*a2;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 32))(*a1, a2 + 1);
}

uint64_t sub_10004E090@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X3>, int a3@<W8>)
{
  if (a3 < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *a2);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 40))(*a1, a2);
}

uint64_t sub_10004E380(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  std::string *v5;
  __int128 v6;
  _BYTE v7[24];
  std::string v8;
  std::string v9;
  std::runtime_error v10;

  v2 = (unsigned int *)(a1 + 96);
  v3 = *(_DWORD *)(a1 + 96) - 2;
  if (v3 >= 0xE || ((0x2D07u >> v3) & 1) == 0)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_100169BFC(v2, &v8);
    v5 = std::string::insert(&v8, 0, "Illegal state - how is the thrift type enum = ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v10, &v9);
    v10.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v7);
    sub_1000F2F7C(&v10, (uint64_t)"void InertialInputEvent::applyTo(Receiver *) const [Receiver = LocalizerInputEventChronology]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_input_event.h", 288, (uint64_t)v7);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 8 * qword_100393FD8[v3]))(a2, a1);
}

void sub_10004E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 48));
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10004E530(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  BOOL v16;
  BOOL v17;
  NSObject *v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  BOOL v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  id v63;
  void *v64;
  void *v65;
  double v66;
  void *v67;
  void *v68;
  double v69;
  void *v70;
  void *v71;
  double v72;
  double v73;
  uint64_t v74;
  double v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  id v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  double v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  id v94;
  double v95;
  double v96;
  double v97;
  double v98;
  uint64_t v99;
  double v100;
  double v101;
  _QWORD *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  NSObject *v106;
  objc_super v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t (**v118)();
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  __int16 v129;
  uint8_t buf[32];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    v108[0].receiver = *(id *)(a1 + 32);
    v108[0].super_class = (Class)IOSDeviceMotion;
    v9 = -[objc_super sensorBridge](v108, "sensorBridge");
    v10 = v5;
    buf[23] = 18;
    strcpy((char *)buf, "DeviceMotion accel");
    objc_msgSend(v10, "userAcceleration");
    v12 = v11;
    objc_msgSend(v10, "userAcceleration");
    v14 = v13;
    objc_msgSend(v10, "userAcceleration");
    v16 = sub_10004F1E4((uint64_t *)buf, v12, v14, v15);
    v17 = v16;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v17)
        goto LABEL_34;
    }
    else if (!v16)
    {
      goto LABEL_34;
    }
    buf[23] = 20;
    strcpy((char *)buf, "DeviceMotion gravity");
    objc_msgSend(v10, "gravity");
    v21 = v20;
    objc_msgSend(v10, "gravity");
    v23 = v22;
    objc_msgSend(v10, "gravity");
    v25 = sub_10004F1E4((uint64_t *)buf, v21, v23, v24);
    v26 = v25;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v26)
        goto LABEL_34;
    }
    else if (!v25)
    {
LABEL_34:

      v49 = v10;
      objc_msgSend(v49, "rotationRate");
      v51 = v50;
      v53 = v52;
      v55 = v54;
      objc_msgSend(v49, "timestamp");
      v57 = sub_10004F1AC(v56);
      v118 = off_1003F98E8;
      v128 = 0;
      v123 = 0;
      v125 = 0;
      v126 = 0;
      v124 = 0;
      v127 = 0;
      v129 = 0;
      v119 = v51;
      v120 = v53;
      v121 = v55;
      v122 = v57;
      objc_msgSend(v49, "timestamp");
      sub_10004F1D0((uint64_t)&v118, v58);
      sub_10004F494(buf, 13, &v118);
      v59 = operator new(0x108uLL);
      v59[2] = 0;
      *v59 = off_1003F0840;
      v59[1] = 0;
      sub_10004F148((uint64_t)(v59 + 4), (uint64_t)buf);
      *((_DWORD *)v59 + 32) = v134;
      *((_DWORD *)v59 + 6) = 8;
      *(_QWORD *)&v113 = v59 + 3;
      *((_QWORD *)&v113 + 1) = v59;
      sub_10005C2A4((uint64_t)v9, (uint64_t)&v113);
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      nullsub_8(buf);
      nullsub_8(&v118);

      v63 = v49;
      v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "attitude"));
      v65 = v64;
      if (v64)
      {
        objc_msgSend(v64, "rotationMatrix");
        v66 = *(double *)buf;
      }
      else
      {
        v133 = 0;
        v131 = 0u;
        v132 = 0u;
        memset(buf, 0, sizeof(buf));
        v66 = 0.0;
      }
      v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "attitude"));
      v68 = v67;
      if (v67)
      {
        objc_msgSend(v67, "rotationMatrix");
        v69 = *((double *)&v114 + 1);
      }
      else
      {
        v117 = 0;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v69 = 0.0;
      }
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "attitude"));
      v71 = v70;
      if (v70)
      {
        objc_msgSend(v70, "rotationMatrix");
        v72 = *(double *)&v111;
      }
      else
      {
        v112 = 0;
        v110 = 0u;
        v111 = 0u;
        v108[1] = 0u;
        v109 = 0u;
        v72 = 0.0;
      }
      objc_msgSend(v63, "timestamp");
      v74 = sub_10004F1AC(v73);
      v118 = off_1003F98E8;
      v128 = 0;
      v123 = 0;
      v125 = 0;
      v126 = 0;
      v124 = 0;
      v127 = 0;
      v129 = 0;
      v119 = v66;
      v120 = v69;
      v121 = v72;
      v122 = v74;
      objc_msgSend(v63, "timestamp");
      sub_10004F1D0((uint64_t)&v118, v75);

      sub_10004F498((uint64_t)buf, v8, (uint64_t)&v118);
      v76 = operator new(0x108uLL);
      v76[2] = 0;
      *v76 = off_1003F0840;
      v76[1] = 0;
      sub_10004F148((uint64_t)(v76 + 4), (uint64_t)buf);
      *((_DWORD *)v76 + 32) = v134;
      *((_DWORD *)v76 + 6) = 3;
      *(_QWORD *)&v113 = v76 + 3;
      *((_QWORD *)&v113 + 1) = v76;
      sub_10005C2A4((uint64_t)v9, (uint64_t)&v113);
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      nullsub_8(buf);
      nullsub_8(&v118);

      v80 = v63;
      objc_msgSend(v80, "gravity");
      v82 = v81;
      objc_msgSend(v80, "gravity");
      v84 = v83;
      objc_msgSend(v80, "gravity");
      v86 = v85;
      objc_msgSend(v80, "timestamp");
      v88 = sub_10004F1AC(v87);
      v118 = off_1003F98E8;
      v128 = 0;
      v123 = 0;
      v125 = 0;
      v126 = 0;
      v124 = 0;
      v127 = 0;
      v129 = 0;
      v119 = v82 * 9.81;
      v120 = v84 * 9.81;
      v121 = v86 * 9.81;
      v122 = v88;
      objc_msgSend(v80, "timestamp");
      sub_10004F1D0((uint64_t)&v118, v89);
      sub_10004F494(buf, 12, &v118);
      v90 = operator new(0x108uLL);
      v90[2] = 0;
      *v90 = off_1003F0840;
      v90[1] = 0;
      sub_10004F148((uint64_t)(v90 + 4), (uint64_t)buf);
      *((_DWORD *)v90 + 32) = v134;
      *((_DWORD *)v90 + 6) = 8;
      *(_QWORD *)&v113 = v90 + 3;
      *((_QWORD *)&v113 + 1) = v90;
      sub_10005C2A4((uint64_t)v9, (uint64_t)&v113);
      v91 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      nullsub_8(buf);
      nullsub_8(&v118);

      if (v8 != 1)
      {
        v94 = v80;
        objc_msgSend(v94, "magneticField");
        v95 = *(double *)buf;
        objc_msgSend(v94, "magneticField");
        v96 = *((double *)&v113 + 1);
        objc_msgSend(v94, "magneticField");
        v97 = *(double *)&v109;
        objc_msgSend(v94, "timestamp");
        v99 = sub_10004F1AC(v98);
        v118 = off_1003F98E8;
        v128 = 0;
        v123 = 0;
        v125 = 0;
        v126 = 0;
        v124 = 0;
        v127 = 0;
        v129 &= 0xFC00u;
        v119 = v95;
        v120 = v96;
        v121 = v97;
        v122 = v99;
        objc_msgSend(v94, "timestamp");
        sub_10004F1D0((uint64_t)&v118, v100);
        objc_msgSend(v94, "magneticField");
        sub_1001A0360((uint64_t)&v118, *(int *)&buf[24]);
        objc_msgSend(v94, "magneticField");
        sub_1001A0374((uint64_t)&v118, *(int *)&buf[24]);
        objc_msgSend(v94, "timestamp");
        sub_10004F1D0((uint64_t)&v118, v101);
        sub_10004F494(buf, 3, &v118);
        v102 = operator new(0x108uLL);
        v102[2] = 0;
        *v102 = off_1003F0840;
        v102[1] = 0;
        sub_10004F148((uint64_t)(v102 + 4), (uint64_t)buf);
        *((_DWORD *)v102 + 32) = v134;
        *((_DWORD *)v102 + 6) = 8;
        *(_QWORD *)&v113 = v102 + 3;
        *((_QWORD *)&v113 + 1) = v102;
        sub_10005C2A4((uint64_t)v9, (uint64_t)&v113);
        v103 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
        if (*((_QWORD *)&v113 + 1))
        {
          v104 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        nullsub_8(buf);
        nullsub_8(&v118);

      }
      goto LABEL_66;
    }
    objc_msgSend(v10, "userAcceleration");
    v28 = v27;
    objc_msgSend(v10, "gravity");
    v30 = v29;
    objc_msgSend(v10, "userAcceleration");
    v32 = v31;
    objc_msgSend(v10, "gravity");
    v34 = v33;
    objc_msgSend(v10, "userAcceleration");
    v36 = v35;
    objc_msgSend(v10, "gravity");
    v38 = v37;
    objc_msgSend(v10, "timestamp");
    v40 = sub_10004F1AC(v39);
    v118 = off_1003F98E8;
    v128 = 0;
    v123 = 0;
    v125 = 0;
    v126 = 0;
    v124 = 0;
    v127 = 0;
    v129 &= 0xFC00u;
    v119 = v28 + v30;
    v120 = v32 + v34;
    v121 = v36 + v38;
    v122 = v40;
    objc_msgSend(v10, "timestamp");
    sub_10004F1D0((uint64_t)&v118, v41);
    buf[23] = 8;
    strcpy((char *)buf, "rawAccel");
    v42 = sub_10004F1E4((uint64_t *)buf, v119, v120, v121);
    v43 = v42;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v43)
      {
LABEL_33:
        nullsub_8(&v118);
        goto LABEL_34;
      }
    }
    else if (!v42)
    {
      goto LABEL_33;
    }
    +[IOSDeviceMotion convertGToAccel:](IOSDeviceMotion, "convertGToAccel:", &v118);
    strcpy((char *)buf, "convertGToAccel result");
    buf[23] = 22;
    v44 = sub_10004F1E4((uint64_t *)buf, v119, v120, v121);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (v44)
    {
      sub_10004F494(buf, 2, &v118);
      v45 = operator new(0x108uLL);
      v45[2] = 0;
      *v45 = off_1003F0840;
      v45[1] = 0;
      sub_10004F148((uint64_t)(v45 + 4), (uint64_t)buf);
      *((_DWORD *)v45 + 32) = v134;
      *((_DWORD *)v45 + 6) = 8;
      *(_QWORD *)&v113 = v45 + 3;
      *((_QWORD *)&v113 + 1) = v45;
      sub_10005C2A4((uint64_t)v9, (uint64_t)&v113);
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      nullsub_8(buf);
    }
    goto LABEL_33;
  }
  if (!v6)
  {
    if (qword_100417ED8 == -1)
    {
      v106 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_66;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100404AC0);
      v106 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_66;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "no data and no error", buf, 2u);
    goto LABEL_66;
  }
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_100404AC0);
  v18 = (id)qword_100417EE0;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "description")));
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = objc_msgSend(v19, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "error reported: %s", buf, 0xCu);

  }
LABEL_66:

}

void sub_10004EF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  sub_1000FEAD8((uint64_t)&a21);
  nullsub_8(v34 - 256);
  nullsub_8(&a31);

  _Unwind_Resume(a1);
}

double sub_10004F148(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003F98E8;
  *(_WORD *)(a1 + 88) &= 0xFC00u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return result;
}

uint64_t sub_10004F1AC(double a1)
{
  return qword_100419C10 + (uint64_t)(a1 * 1000000000.0);
}

uint64_t sub_10004F1D0(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  *(_WORD *)(result + 88) |= 0x200u;
  return result;
}

BOOL sub_10004F1E4(uint64_t *a1, double a2, double a3, double a4)
{
  _BOOL8 result;
  NSObject *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    return 1;
  }
  if (qword_100417ED8 == -1)
  {
    v9 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100404AC0);
    v9 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
  }
  if (*((char *)a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  v11 = 136446978;
  v12 = v10;
  v13 = 2050;
  v14 = a2;
  v15 = 2050;
  v16 = a3;
  v17 = 2050;
  v18 = a4;
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "%{public}s failed finite check: %{public}f, %{public}f, %{public}f", (uint8_t *)&v11, 0x2Au);
  return 0;
}

void sub_10004F400(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  std::string v5;

  sub_10004F148(a1, a3);
  *(_DWORD *)(v4 + 96) = a2;
  if (a2 > 0xF || ((1 << a2) & 0xB41C) == 0)
  {
    sub_100308D74(a2, &v5);
    sub_100344B04();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_input_event.cpp", 63, "InertialInputEvent");
    __break(1u);
  }
}

void sub_10004F498(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;

  sub_10004F148(a1, a3);
  *(_DWORD *)(v4 + 96) = a2;
}

uint64_t sub_10004F4F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 144))(*(_QWORD *)(a1 + 296));
}

uint64_t sub_10004F508(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 24))(*(_QWORD *)(a1 + 296));
}

uint64_t sub_10004F51C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 80))(*(_QWORD *)(a1 + 296));
}

void sub_10004F52C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE v12[8];
  double v13;
  double v14;
  double v15;

  sub_10004F6B4(&v11, a2);
  sub_100050B4C((uint64_t)a1, &v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1[6] + 24))(a1[6], a2);
  sub_10004F610(a1[6], (uint64_t)v12);
  if (v12[0])
  {
    v4 = (uint64_t *)a1[9];
    v5 = sub_100050DB0((uint64_t)&v11);
    v6 = v13;
    v7 = v14;
    v8 = v15;
    sub_100050DC8(v4, v5, v6, v7, v8);
  }
  v9 = a1[8];
  v10 = sub_10004F6C0(a1[6]);
  sub_100051574(v9, a2, v10);
}

void sub_10004F610(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;

  v4 = sub_10004F698(a1 + 8);
  v5 = a1 + 16;
  v6 = (double *)sub_10004F6AC(v5);
  if (!v4 || sub_10004FBF4(v6) == 0.0)
  {
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v7 = nullsub_10(v5);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v7;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v7 + 16);
    *(_BYTE *)a2 = 1;
  }
}

BOOL sub_10004F698(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 56) != 0;
}

uint64_t sub_10004F6AC(uint64_t a1)
{
  return a1 + 24;
}

_QWORD *sub_10004F6B4(_QWORD *result, uint64_t a2)
{
  *result = *(_QWORD *)(a2 + 32);
  return result;
}

double sub_10004F6C0(uint64_t a1)
{
  return sub_10004F6C8((double *)(a1 + 16));
}

double sub_10004F6C8(double *a1)
{
  double *v2;
  int8x16_t v3;
  int8x16_t v4;
  float64x2_t v5;
  double v6;
  BOOL v7;
  double result;
  int8x16_t v9;

  v2 = a1 + 6;
  *(double *)v3.i64 = sub_10004FBF4(a1 + 6);
  v9 = v3;
  *(double *)v4.i64 = sub_10004FA9C(v2, a1);
  v5.f64[0] = NAN;
  v5.f64[1] = NAN;
  *(_QWORD *)&v6 = vbslq_s8((int8x16_t)vnegq_f64(v5), v9, v4).u64[0];
  v7 = *(double *)v4.i64 == 0.0;
  result = 0.0;
  if (!v7)
    return v6;
  return result;
}

uint64_t sub_10004F724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28[3];
  _BYTE __p[24];
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _BYTE v38[24];
  _BYTE v39[24];

  v4 = *(_QWORD *)(a2 + 32);
  sub_10004FA84((uint64_t)v38, a2);
  __p[23] = 19;
  strcpy(__p, "accel cannot be NaN");
  sub_10004FC10((uint64_t)v38);
  v5 = *(double *)(a2 + 8);
  v6 = -v5;
  v7 = *(double *)(a2 + 16);
  v8 = -v7;
  v9 = *(double *)(a2 + 24);
  v10 = sub_100050080((uint64_t *)(a1 + 8), (double)v4 / 1000000000.0, v6, v8, -v9);
  v12 = v11;
  LODWORD(v4) = v13;
  v14 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)__p = off_1003F98E8;
  v36 = 0;
  *(_OWORD *)&__p[8] = 0u;
  v30 = 0u;
  v31 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  v37 = 0;
  sub_1000504B0((uint64_t)__p, v14);
  sub_1000504A8((uint64_t)__p, v10);
  sub_1000504A0((uint64_t)__p, v12);
  sub_100050498((uint64_t)__p, *(float *)&v4);
  sub_10004FA84((uint64_t)v28, (uint64_t)__p);
  if (sub_10004F698(a1 + 8) && sub_10004FBF4(v28) != 0.0)
  {
    *(_QWORD *)v39 = operator new(0x20uLL);
    *(_OWORD *)&v39[8] = xmmword_100382FF0;
    strcpy(*(char **)v39, "Gravity became NaN after accel");
    sub_10004FC10((uint64_t)v28);
    if ((v39[23] & 0x80000000) != 0)
      operator delete(*(void **)v39);
    sub_10004FABC(a1 + 16, (uint64_t)__p);
    if (*(_BYTE *)(a1 + 376))
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = (double *)nullsub_10(a1 + 16);
      v17 = sub_10004FA9C((double *)(a1 + 384), v16);
      sub_1000505FC(v39, v15, a1 + 384, -v17);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)&v39[16];
      *(_OWORD *)(a1 + 408) = *(_OWORD *)v39;
    }
  }
  sub_10005151C(a1 + 16, a2);
  sub_10004FA84((uint64_t)v39, a2);
  v18 = nullsub_10(a1 + 16);
  v19 = sub_10004FA9C((double *)v39, (double *)v18);
  v20 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v18;
  *(_QWORD *)(a1 + 120) = v20;
  sub_1000501E0((float64x2_t *)(a1 + 104), -v19);
  sub_10005003C((float64x2_t *)(a1 + 104), (float64x2_t *)v39);
  v21 = *(double *)(v18 + 8);
  v22 = -(v21 * *(double *)v18);
  v23 = *(double *)(v18 + 16);
  v24 = ((1.0 - v21 * v21) * *(double *)&v39[8] + *(double *)v39 * v22 + *(double *)&v39[16] * -(v21 * v23))
      / sqrt((1.0 - v21 * v21) * (1.0 - v21 * v21) + v22 * v22 + v22 * v22);
  v25 = -(v23 * *(double *)v18);
  v26 = (-(v23 * v21) * *(double *)&v39[8] + *(double *)v39 * v25 + *(double *)&v39[16] * (1.0 - v23 * v23))
      / sqrt(-(v23 * v21) * -(v23 * v21) + v25 * v25 + v25 * v25);
  *(double *)(a1 + 88) = v24;
  *(double *)(a1 + 96) = v26;
  return nullsub_8(__p);
}

void sub_10004FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 81) < 0)
  {
    operator delete(*(void **)(v18 - 104));
    nullsub_8(&__p);
    _Unwind_Resume(a1);
  }
  nullsub_8(&__p);
  _Unwind_Resume(a1);
}

double sub_10004FA84(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 16) = result;
  return result;
}

double sub_10004FA9C(double *a1, double *a2)
{
  return a1[1] * a2[1] + *a1 * *a2 + a1[2] * a2[2];
}

void sub_10004FABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  _BYTE __p[24];

  v3 = a1 + 24;
  sub_10004FA84(a1 + 24, a2);
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_100383070;
  strcpy(*(char **)__p, "Gravity cannot contain NaN");
  sub_10004FC10(v3);
  operator delete(*(void **)__p);
  v4 = sub_10004FBF4((double *)v3);
  *(_OWORD *)__p = *(_OWORD *)v3;
  *(_QWORD *)&__p[16] = *(_QWORD *)(v3 + 16);
  sub_100050060((float64x2_t *)__p, v4);
  v5 = *(_QWORD *)&__p[16];
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_100382FD0;
  strcpy(*(char **)__p, "Gravity cannot be zero (freefall?)");
  sub_10004FC10(a1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
}

void sub_10004FBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10004FBF4(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1 + a1[2] * a1[2]);
}

double sub_10004FC10(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

void sub_10004FE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v56 - 64));
  if (*(char *)(v56 - 73) < 0)
  {
    operator delete(*(void **)(v56 - 96));
    if ((*(char *)(v56 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a18 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_16;
    }
  }
  else if ((*(char *)(v56 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v56 - 128));
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v56 - 137) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a13);
  if ((*(char *)(v56 - 137) & 0x80000000) == 0)
  {
LABEL_7:
    if ((a56 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v56 - 160));
  if ((a56 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a51);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a49 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a19);
  if ((a49 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a44);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a30 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a37);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a36 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_13;
  }
LABEL_22:
  operator delete(a25);
  if ((a36 & 0x80000000) == 0)
LABEL_23:
    _Unwind_Resume(a1);
LABEL_13:
  operator delete(a31);
  goto LABEL_23;
}

float64_t sub_10005003C(float64x2_t *a1, float64x2_t *a2)
{
  float64_t result;

  *a1 = vaddq_f64(*a2, *a1);
  result = a2[1].f64[0] + a1[1].f64[0];
  a1[1].f64[0] = result;
  return result;
}

float64_t sub_100050060(float64x2_t *a1, double a2)
{
  float64_t result;

  *a1 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  result = a1[1].f64[0] / a2;
  a1[1].f64[0] = result;
  return result;
}

float sub_100050080(uint64_t *a1, double a2, float a3, float a4, float a5)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  float v13;
  __float2 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;

  v7 = a3;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 56);
  if (v9)
  {
    v10 = *(double *)(v8 + 16);
    v11 = a2 - *(double *)(v8 + 32);
    *(double *)(v8 + 32) = a2;
    *(double *)(v8 + 16) = a2;
    v12 = *(float *)v8;
    if (*(_QWORD *)(v8 + 64))
    {
      v13 = (a2 - v10) * *(float *)(v8 + 52);
      v14 = __sincosf_stret(v13);
      v16 = *(float *)(v8 + 44);
      v15 = *(float *)(v8 + 48);
      v18 = *(float *)(v8 + 4);
      v17 = *(float *)(v8 + 8);
      v19 = *(float *)(v8 + 40);
      v20 = (float)(v15 * v12) - (float)(v19 * v17);
      v21 = (float)(v19 * v18) - (float)(v16 * v12);
      v22 = (float)(1.0 - v14.__cosval) * (float)((float)((float)(v16 * v18) + (float)(v19 * v12)) + (float)(v15 * v17));
      v12 = (float)(v14.__cosval * v12)
          + (float)((float)(v19 * v22) + (float)((float)((float)(v16 * v17) - (float)(v15 * v18)) * v14.__sinval));
      v23 = (float)(v18 * v14.__cosval) + (float)((float)(v16 * v22) + (float)(v20 * v14.__sinval));
      v24 = (float)(v17 * v14.__cosval) + (float)((float)(v15 * v22) + (float)(v21 * v14.__sinval));
    }
    else
    {
      v23 = *(float *)(v8 + 4);
      v24 = *(float *)(v8 + 8);
    }
    v26 = exp(v11 / -5.0);
    v27 = 1.0 - v26;
    v7 = v12 + (float)(v27 * (float)(v7 - v12));
    *(float *)v8 = v7;
    *(float *)(v8 + 4) = v23 + (float)(v27 * (float)(a4 - v23));
    *(float *)(v8 + 8) = v24 + (float)(v27 * (float)(a5 - v24));
    v25 = v9 + 1;
  }
  else
  {
    *(double *)(v8 + 32) = a2;
    *(float *)v8 = a3;
    *(float *)(v8 + 4) = a4;
    *(float *)(v8 + 8) = a5;
    v25 = 1;
    *(double *)(v8 + 16) = a2;
  }
  *(_QWORD *)(v8 + 56) = v25;
  return v7;
}

float64_t sub_1000501E0(float64x2_t *a1, double a2)
{
  float64_t result;

  *a1 = vmulq_n_f64(*a1, a2);
  result = a1[1].f64[0] * a2;
  a1[1].f64[0] = result;
  return result;
}

uint64_t sub_1000501FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double *v17;
  double v18;
  _BYTE v20[24];
  double v21[3];
  void *__p;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 32);
  sub_10004FA84((uint64_t)&v32, a2);
  __p = operator new(0x20uLL);
  v23 = xmmword_1003830B0;
  strcpy((char *)__p, "rotation rate cannot be NaN");
  sub_10004FC10((uint64_t)&v32);
  operator delete(__p);
  v5 = *(double *)(a2 + 8);
  v6 = *(double *)(a2 + 16);
  v7 = *(double *)(a2 + 24);
  sub_100050600((uint64_t *)(a1 + 8), (double)v4 / 1000000000.0, v5, v6, v7);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = *(_QWORD *)(a2 + 32);
  __p = off_1003F98E8;
  v30 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = 0;
  v31 = 0;
  sub_1000504B0((uint64_t)&__p, v14);
  sub_1000504A8((uint64_t)&__p, v9);
  sub_1000504A0((uint64_t)&__p, v11);
  sub_100050498((uint64_t)&__p, v13);
  sub_10004FA84((uint64_t)v21, (uint64_t)&__p);
  if (sub_10004F698(a1 + 8) && sub_10004FBF4(v21) != 0.0)
  {
    *(_QWORD *)v20 = operator new(0x28uLL);
    *(_OWORD *)&v20[8] = xmmword_100383000;
    strcpy(*(char **)v20, "Gravity became NaN after rotationRate");
    sub_10004FC10((uint64_t)v21);
    operator delete(*(void **)v20);
    sub_10004FABC(a1 + 16, (uint64_t)&__p);
    v15 = *(unsigned __int8 *)(a1 + 376);
    *(_OWORD *)(a1 + 384) = v32;
    *(_QWORD *)(a1 + 400) = v33;
    if (!v15)
      *(_BYTE *)(a1 + 376) = 1;
    v16 = *(_QWORD *)(a2 + 32);
    v17 = (double *)nullsub_10(a1 + 16);
    v18 = sub_10004FA9C((double *)(a1 + 384), v17);
    sub_1000505FC(v20, v16, a1 + 384, -v18);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)&v20[16];
    *(_OWORD *)(a1 + 408) = *(_OWORD *)v20;
  }
  return nullsub_8(&__p);
}

void sub_100050438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
  {
    operator delete(__p);
    nullsub_8(&a19);
    _Unwind_Resume(a1);
  }
  nullsub_8(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100050498(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000504A0(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return result;
}

uint64_t sub_1000504A8(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1000504B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1000504B8(uint64_t a1, uint64_t a2, double *a3, int8x16_t a4)
{
  int8x16_t v6;
  float64x2_t v7;
  double v8;
  void *v11;
  void *__p[2];
  char v13;
  std::string v14;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4.i64[0];
  *(double *)v6.i64 = sub_10004FBF4(a3);
  v7.f64[0] = NAN;
  v7.f64[1] = NAN;
  *(_QWORD *)&v8 = vbslq_s8((int8x16_t)vnegq_f64(v7), v6, a4).u64[0];
  if (*(double *)a4.i64 == 0.0)
    v8 = 0.0;
  *(double *)(a1 + 16) = v8;
  if (a2 < 0)
  {
    sub_1000D5048(__p, "");
    sub_10025FA04("Invalid timestamp", &v14);
    sub_100174738((uint64_t)__p, (uint64_t)&v14, 1);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)&v11);
  }
  return a1;
}

void sub_1000505B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050600(uint64_t *a1, double a2, float a3, float a4, float a5)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  float v14;
  __float2 v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  __float2 v30;
  float sinval;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  double v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  __float2 v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  __float2 v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;

  v10 = *a1;
  if (*(_QWORD *)(*a1 + 56))
  {
    if (*(_QWORD *)(v10 + 64))
    {
      v11 = a2 - *(double *)(v10 + 24);
      v12 = a2 - *(double *)(v10 + 16);
      v13 = v11 * 0.5;
      if (v11 * 0.5 >= v12)
      {
        v63 = sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
        *(float *)(v10 + 52) = v63;
        v64 = 0.0;
        v65 = 0.0;
        v66 = 0.0;
        if (v63 > 0.0)
        {
          v64 = -(float)(a3 * (float)(1.0 / v63));
          v65 = -(float)(a4 * (float)(1.0 / v63));
          v66 = -(float)(a5 * (float)(1.0 / v63));
        }
        *(float *)(v10 + 40) = v64;
        *(float *)(v10 + 44) = v65;
        *(float *)(v10 + 48) = v66;
        v28 = *a1;
        v67 = v12 * *(float *)(*a1 + 52);
        v68 = __sincosf_stret(v67);
        sinval = v68.__sinval;
        v70 = *(float *)(v28 + 4);
        v69 = *(float *)(v28 + 8);
        v71 = *(float *)(v28 + 44);
        v34 = *(float *)(v28 + 48);
        v72 = *(float *)(v28 + 40);
        v73 = (float)(v34 * *(float *)v28) - (float)(v72 * v69);
        v38 = (float)(v72 * v70) - (float)(v71 * *(float *)v28);
        v39 = (float)(1.0 - v68.__cosval)
            * (float)((float)((float)(v71 * v70) + (float)(v72 * *(float *)v28)) + (float)(v34 * v69));
        v40 = v69 * v68.__cosval;
        *(float *)v28 = (float)(v68.__cosval * *(float *)v28)
                      + (float)((float)(v72 * v39)
                              + (float)((float)((float)(v71 * v69) - (float)(v34 * v70)) * v68.__sinval));
        v41 = (float)(v70 * v68.__cosval) + (float)((float)(v71 * v39) + (float)(v73 * v68.__sinval));
      }
      else
      {
        v14 = (v12 - v13) * *(float *)(v10 + 52);
        v15 = __sincosf_stret(v14);
        v17 = *(float *)(v10 + 4);
        v16 = *(float *)(v10 + 8);
        v19 = *(float *)(v10 + 44);
        v18 = *(float *)(v10 + 48);
        v20 = *(float *)(v10 + 40);
        v21 = (float)(v18 * *(float *)v10) - (float)(v20 * v16);
        v22 = (float)(v20 * v17) - (float)(v19 * *(float *)v10);
        v23 = (float)(1.0 - v15.__cosval)
            * (float)((float)((float)(v19 * v17) + (float)(v20 * *(float *)v10)) + (float)(v18 * v16));
        *(float *)v10 = (float)(v15.__cosval * *(float *)v10)
                      + (float)((float)(v20 * v23)
                              + (float)((float)((float)(v19 * v16) - (float)(v18 * v17)) * v15.__sinval));
        *(float *)(v10 + 4) = (float)(v17 * v15.__cosval) + (float)((float)(v19 * v23) + (float)(v21 * v15.__sinval));
        *(float *)(v10 + 8) = (float)(v16 * v15.__cosval) + (float)((float)(v18 * v23) + (float)(v22 * v15.__sinval));
        v24 = sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
        v25 = 0.0;
        v26 = -(float)(a3 * (float)(1.0 / v24));
        v27 = -(float)(a4 * (float)(1.0 / v24));
        if (v24 > 0.0)
        {
          v25 = -(float)(a5 * (float)(1.0 / v24));
        }
        else
        {
          v26 = 0.0;
          v27 = 0.0;
        }
        *(float *)(v10 + 40) = v26;
        *(float *)(v10 + 44) = v27;
        *(float *)(v10 + 48) = v25;
        *(float *)(v10 + 52) = v24;
        v28 = *a1;
        v29 = v13 * *(float *)(v28 + 52);
        v30 = __sincosf_stret(v29);
        sinval = v30.__sinval;
        v33 = *(float *)(v28 + 4);
        v32 = *(float *)(v28 + 8);
        v35 = *(float *)(v28 + 44);
        v34 = *(float *)(v28 + 48);
        v36 = *(float *)(v28 + 40);
        v37 = (float)(v35 * v32) - (float)(v34 * v33);
        v38 = (float)(v36 * v33) - (float)(v35 * *(float *)v28);
        v39 = (float)(1.0 - v30.__cosval)
            * (float)((float)((float)(v35 * v33) + (float)(v36 * *(float *)v28)) + (float)(v34 * v32));
        v40 = v32 * v30.__cosval;
        v41 = (float)(v33 * v30.__cosval)
            + (float)((float)(v35 * v39)
                    + (float)((float)((float)(v34 * *(float *)v28) - (float)(v36 * v32)) * v30.__sinval));
        *(float *)v28 = (float)(v30.__cosval * *(float *)v28)
                      + (float)((float)(v36 * v39) + (float)(v37 * v30.__sinval));
      }
      *(float *)(v28 + 4) = v41;
      *(float *)(v28 + 8) = v40 + (float)((float)(v34 * v39) + (float)(v38 * sinval));
      *(double *)(v28 + 16) = a2;
      *(double *)(v28 + 24) = a2;
      v62 = *(_QWORD *)(v28 + 64) + 1;
    }
    else
    {
      v47 = a2 - *(double *)(v10 + 16);
      v48 = sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
      *(float *)(v10 + 52) = v48;
      v49 = 0.0;
      v50 = 0.0;
      v51 = 0.0;
      if (v48 > 0.0)
      {
        v49 = -(float)(a3 * (float)(1.0 / v48));
        v50 = -(float)(a4 * (float)(1.0 / v48));
        v51 = -(float)(a5 * (float)(1.0 / v48));
      }
      *(float *)(v10 + 40) = v49;
      *(float *)(v10 + 44) = v50;
      *(float *)(v10 + 48) = v51;
      v28 = *a1;
      v52 = v47 * *(float *)(*a1 + 52);
      v53 = __sincosf_stret(v52);
      v55 = *(float *)(v28 + 4);
      v54 = *(float *)(v28 + 8);
      v57 = *(float *)(v28 + 44);
      v56 = *(float *)(v28 + 48);
      v58 = *(float *)(v28 + 40);
      v59 = (float)(v56 * *(float *)v28) - (float)(v58 * v54);
      v60 = (float)(v58 * v55) - (float)(v57 * *(float *)v28);
      v61 = (float)(1.0 - v53.__cosval)
          * (float)((float)((float)(v57 * v55) + (float)(v58 * *(float *)v28)) + (float)(v56 * v54));
      *(float *)v28 = (float)(v53.__cosval * *(float *)v28)
                    + (float)((float)(v58 * v61)
                            + (float)((float)((float)(v57 * v54) - (float)(v56 * v55)) * v53.__sinval));
      *(float *)(v28 + 4) = (float)(v55 * v53.__cosval) + (float)((float)(v57 * v61) + (float)(v59 * v53.__sinval));
      *(float *)(v28 + 8) = (float)(v54 * v53.__cosval) + (float)((float)(v56 * v61) + (float)(v60 * v53.__sinval));
      *(double *)(v28 + 16) = a2;
      *(double *)(v28 + 24) = a2;
      v62 = 1;
    }
    *(_QWORD *)(v28 + 64) = v62;
  }
  else
  {
    v42 = sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
    *(float *)(v10 + 52) = v42;
    v43 = 0.0;
    v44 = 0.0;
    v45 = 0.0;
    if (v42 > 0.0)
    {
      v43 = -(float)(a3 * (float)(1.0 / v42));
      v44 = -(float)(a4 * (float)(1.0 / v42));
      v45 = -(float)(a5 * (float)(1.0 / v42));
    }
    *(float *)(v10 + 40) = v43;
    *(float *)(v10 + 44) = v44;
    *(float *)(v10 + 48) = v45;
    v46 = *a1;
    *(double *)(v46 + 24) = a2;
    ++*(_QWORD *)(v46 + 64);
  }
}

float sub_100050A04(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  void *v11;
  void *__p[2];
  double v13;
  double v14;

  sub_10004F6B4(&v10, a2);
  if (v10 < 0)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v11);
  }
  sub_100050B4C(a1, &v10);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 144))(*(_QWORD *)(a1 + 48), a2);
  sub_10004F610(*(_QWORD *)(a1 + 48), (uint64_t)__p);
  if (LOBYTE(__p[0]))
  {
    v5 = *(uint64_t **)(a1 + 72);
    v6 = sub_100050DB0((uint64_t)&v10);
    v7 = *(double *)&__p[1];
    v8 = v13;
    v9 = v14;
    sub_100050DC8(v5, v6, v7, v8, v9);
  }
  return result;
}

void sub_100050B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100050B4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD **v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;

  v4 = sub_100050DB8(*(_QWORD *)(a1 + 48));
  if (v4)
  {
    v5 = *a2;
    if (!*(_BYTE *)(a1 + 96))
    {
      *(_BYTE *)(a1 + 96) = 1;
      *(_QWORD *)(a1 + 104) = v5;
      return;
    }
    v6 = *(_QWORD *)(a1 + 104);
    if (v5 != v6)
    {
      if (v5 < v6)
      {
        if (qword_100417ED8 == -1)
        {
          v7 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            return;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FF368);
          v7 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            return;
        }
        v8 = *a2;
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v8;
        v27 = 2048;
        v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WARNING: Event timestamp of %lld is before heading filter's last tnanos %lld: ~=!no stack trace!.\n\nEvent log =", buf, 0x16u);
        return;
      }
      v9 = v4;
      v10 = 2;
      v25 = 2;
      v11 = *(_QWORD ***)(a1 + 72);
      v12 = sub_100050DB0((uint64_t)a2);
      v13 = sub_100051384(v11, v12);
      if ((v13 - 1) >= 2)
      {
        v14 = 0;
        if (!v13)
        {
          v10 = 0;
          v25 = 0;
        }
      }
      else
      {
        v14 = 1;
        v25 = 1;
        v10 = 1;
      }
      v15 = *(_DWORD *)(a1 + 112);
      v16 = v10;
      if (v15 != 2)
      {
        if (v15 || !v14)
          goto LABEL_19;
        v16 = 1;
      }
      *(_DWORD *)(a1 + 112) = v16;
LABEL_19:
      v17 = *(double *)(v9 + 8);
      *(double *)buf = v17;
      v18 = *(_QWORD *)(a1 + 144);
      if (v18 >= *(_QWORD *)(a1 + 152))
      {
        v19 = sub_10024DBB0((uint64_t *)(a1 + 136), (_QWORD *)(a1 + 104), a2, (double *)buf, &v25);
      }
      else
      {
        sub_100051D94(*(_QWORD *)(a1 + 144), (_QWORD *)(a1 + 104), a2, v10, v17);
        v19 = v18 + 32;
        *(_QWORD *)(a1 + 144) = v18 + 32;
      }
      *(_QWORD *)(a1 + 144) = v19;
      v20 = (__int128 *)(v19 - 32);
      v21 = (__int128 *)(a1 + 168);
      if (*(_BYTE *)(a1 + 160))
      {
        v22 = *v20;
        *(_OWORD *)(a1 + 180) = *(_OWORD *)(v19 - 20);
        *v21 = v22;
        v23 = *a2;
        if (*(_BYTE *)(a1 + 96))
        {
LABEL_25:
          *(_QWORD *)(a1 + 104) = v23;
          return;
        }
      }
      else
      {
        v24 = *(_OWORD *)(v19 - 16);
        *v21 = *v20;
        *(_OWORD *)(a1 + 184) = v24;
        *(_BYTE *)(a1 + 160) = 1;
        v23 = *a2;
        if (*(_BYTE *)(a1 + 96))
          goto LABEL_25;
      }
      *(_BYTE *)(a1 + 96) = 1;
      goto LABEL_25;
    }
  }
}

void sub_100050DA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100050DB0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_100050DB8(uint64_t a1)
{
  return (a1 + 408) & ~(*(uint64_t *)(a1 + 408) >> 63);
}

void sub_100050DC8(uint64_t *a1, uint64_t a2, float a3, float a4, float a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  double v28;
  double v29;

  v6 = sqrtf(1.0 / (float)((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5)));
  sub_100050F8C(*a1, a2, a3 * v6, a4 * v6, a5 * v6);
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 56) != 2 || *(_DWORD *)(v7 + 96) != 2)
    goto LABEL_20;
  v9 = *(_QWORD *)(v7 + 32);
  v8 = *(_QWORD *)(v7 + 40);
  if (v9 == v8)
  {
    v14 = NAN;
    v15 = *(_QWORD *)(v7 + 72);
    v16 = *(_QWORD *)(v7 + 80);
    if (v15 != v16)
      goto LABEL_13;
LABEL_7:
    v17 = 0.0;
    goto LABEL_19;
  }
  v10 = v8 - v9;
  v11 = v8 - v9 - 16;
  if (v11 < 0x10)
  {
    v12 = 0.0;
    v13 = *(_QWORD *)(v7 + 32);
    do
    {
LABEL_11:
      v12 = v12 + *(double *)(v13 + 8);
      v13 += 16;
    }
    while (v13 != v8);
    goto LABEL_12;
  }
  v18 = (v11 >> 4) + 1;
  v13 = v9 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
  v19 = (double *)(v9 + 24);
  v12 = 0.0;
  v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v21 = *(v19 - 2);
    v22 = *v19;
    v19 += 4;
    v12 = v12 + v21 + v22;
    v20 -= 2;
  }
  while (v20);
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_11;
LABEL_12:
  v14 = v12 / (double)(unint64_t)(v10 >> 4);
  v15 = *(_QWORD *)(v7 + 72);
  v16 = *(_QWORD *)(v7 + 80);
  if (v15 == v16)
    goto LABEL_7;
LABEL_13:
  v23 = v16 - v15 - 16;
  if (v23 < 0x10)
  {
    v17 = 0.0;
    v24 = v15;
    do
    {
LABEL_18:
      v17 = v17 + *(double *)(v24 + 8);
      v24 += 16;
    }
    while (v24 != v16);
    goto LABEL_19;
  }
  v25 = (v23 >> 4) + 1;
  v24 = v15 + 16 * (v25 & 0x1FFFFFFFFFFFFFFELL);
  v26 = (double *)(v15 + 24);
  v17 = 0.0;
  v27 = v25 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v28 = *(v26 - 2);
    v29 = *v26;
    v26 += 4;
    v17 = v17 + v28 + v29;
    v27 -= 2;
  }
  while (v27);
  if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  if (fabs(v14) - fabs(v17 / (double)(unint64_t)((v16 - v15) >> 4)) > *(float *)(v7 + 16))
  {
LABEL_20:
    *(_QWORD *)(v7 + 136) = 0;
    return;
  }
  ++*(_QWORD *)(v7 + 136);
}

void sub_100050F8C(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  long double v14;
  __int128 v15;

  sub_100051094((_QWORD *)a1, a2);
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = a2 - v10;
  if (a2 == v10
    || ((v12 = sqrt((float)(a4 - *(float *)(a1 + 124)) * (float)(a4 - *(float *)(a1 + 124))+ (float)(a3 - *(float *)(a1 + 120)) * (float)(a3 - *(float *)(a1 + 120))+ (float)(a5 - *(float *)(a1 + 128)) * (float)(a5 - *(float *)(a1 + 128))), v12 <= 1.0)? (v14 = asin(v12), v13 = v14 + v14): (v13 = 3.14159265), *(_QWORD *)&v15 = a2, *((double *)&v15 + 1) = v13 / ((double)v11 * 0.000000001), sub_100051DB0((_QWORD *)(a1 + 24), &v15), *(_BYTE *)(a1 + 104)))
  {
    *(_QWORD *)(a1 + 112) = a2;
    *(float *)(a1 + 120) = a3;
    *(float *)(a1 + 124) = a4;
    *(float *)(a1 + 128) = a5;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a1 + 112) = a2;
    *(float *)(a1 + 120) = a3;
    *(float *)(a1 + 124) = a4;
    *(float *)(a1 + 128) = a5;
    *(_BYTE *)(a1 + 104) = 1;
  }
}

void sub_100051094(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  char *v6;

  sub_10005124C(a1 + 3, a2, &__p);
  v4 = a1[9];
  v3 = a1[10];
  sub_1000F6DAC((uint64_t)(a1 + 9), v3, (char *)__p, v6, (v6 - (_BYTE *)__p) >> 4);
  sub_100051124(a1 + 8, (v3 - v4) >> 4);
  if (__p)
  {
    v6 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100051108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100051124(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  v4 = (_QWORD *)result[1];
  v3 = (_BYTE *)result[2];
  v5 = v3 - (_BYTE *)v4;
  if (v3 - (_BYTE *)v4 == 16)
  {
    *((_DWORD *)result + 8) = 1;
  }
  else
  {
    v6 = v5 >> 4;
    if (v5 >> 4 > a2)
    {
      v7 = 0;
      do
      {
        if (v7 != a2)
        {
          v8 = v4[2 * a2];
          v9 = *result;
          v10 = &v4[2 * v7];
          while (1)
          {
            v11 = *v10;
            v10 += 2;
            if (v9 >= v8 - v11)
              break;
            ++v7;
            *((_DWORD *)result + 8) = 2;
            if (a2 == v7)
              goto LABEL_6;
          }
        }
        if (v7 == a2)
        {
LABEL_6:
          *((_DWORD *)result + 8) = 1;
          v7 = a2;
        }
        ++a2;
      }
      while (a2 != v6);
      if (v7)
      {
        if ((v7 & 0x8000000000000000) != 0)
          sub_1000D02C0();
        v12 = (char *)&v4[2 * v7];
        v13 = v3 - v12;
        if (v3 != v12)
          result = memmove(v4, v12, v3 - v12);
        v2[2] = (char *)v4 + v13;
      }
    }
  }
  return result;
}

void sub_100051230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10005124C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;

  v4 = (char *)result[1];
  v5 = (char *)result[2];
  if (v4 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = result;
    v7 = 0;
    v8 = (v5 - v4) >> 4;
    v9 = *result;
    v10 = (uint64_t *)result[1];
    while (1)
    {
      v11 = *v10;
      v10 += 2;
      if (v9 >= a2 - v11)
        break;
      ++v7;
      *((_DWORD *)result + 8) = 2;
      if (v8 == v7)
        goto LABEL_9;
    }
    if (v8 != v7)
      goto LABEL_10;
LABEL_9:
    *((_DWORD *)result + 8) = 1;
    v7 = (v5 - v4) >> 4;
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v7)
    {
      if (v7 < 0)
        sub_1000D02C0();
      v12 = 16 * v7;
      v13 = (char *)operator new(16 * v7);
      v14 = &v4[16 * v7];
      *a3 = v13;
      v15 = &v13[16 * v7];
      a3[2] = v15;
      result = memmove(v13, v4, v12);
      a3[1] = v15;
      if (v5 != v14)
        result = memmove(v4, &v4[v12], v5 - v14);
      v6[2] = &v4[v5 - v14];
    }
  }
  return result;
}

void sub_100051368(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100051384(_QWORD **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;

  sub_100051094(*a1, a2);
  v3 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 14) != 2 || *(_DWORD *)(v3 + 96) != 2)
    return 2;
  v5 = *(_QWORD *)(v3 + 32);
  v4 = *(_QWORD *)(v3 + 40);
  if (v5 != v4)
  {
    v6 = v4 - v5;
    v7 = v4 - v5 - 16;
    if (v7 >= 0x10)
    {
      v15 = (v7 >> 4) + 1;
      v9 = v5 + 16 * (v15 & 0x1FFFFFFFFFFFFFFELL);
      v16 = (double *)(v5 + 24);
      v8 = 0.0;
      v17 = v15 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v18 = *(v16 - 2);
        v19 = *v16;
        v16 += 4;
        v8 = v8 + v18 + v19;
        v17 -= 2;
      }
      while (v17);
      if (v15 == (v15 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        v11 = v8 / (double)(unint64_t)(v6 >> 4);
        v12 = *(_QWORD *)(v3 + 72);
        v13 = *(_QWORD *)(v3 + 80);
        if (v12 != v13)
          goto LABEL_14;
LABEL_8:
        v14 = 0.0;
        return fabs(v11) - fabs(v14 / (double)(unint64_t)((v13 - v12) >> 4)) > *(float *)(v3 + 16);
      }
    }
    else
    {
      v8 = 0.0;
      v9 = *(_QWORD *)(v3 + 32);
    }
    do
    {
      v8 = v8 + *(double *)(v9 + 8);
      v9 += 16;
    }
    while (v9 != v4);
    goto LABEL_13;
  }
  v11 = NAN;
  v12 = *(_QWORD *)(v3 + 72);
  v13 = *(_QWORD *)(v3 + 80);
  if (v12 == v13)
    goto LABEL_8;
LABEL_14:
  v20 = v13 - v12 - 16;
  if (v20 >= 0x10)
  {
    v22 = (v20 >> 4) + 1;
    v21 = v12 + 16 * (v22 & 0x1FFFFFFFFFFFFFFELL);
    v23 = (double *)(v12 + 24);
    v14 = 0.0;
    v24 = v22 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v25 = *(v23 - 2);
      v26 = *v23;
      v23 += 4;
      v14 = v14 + v25 + v26;
      v24 -= 2;
    }
    while (v24);
    if (v22 == (v22 & 0x1FFFFFFFFFFFFFFELL))
      return fabs(v11) - fabs(v14 / (double)(unint64_t)((v13 - v12) >> 4)) > *(float *)(v3 + 16);
  }
  else
  {
    v14 = 0.0;
    v21 = v12;
  }
  do
  {
    v14 = v14 + *(double *)(v21 + 8);
    v21 += 16;
  }
  while (v21 != v13);
  return fabs(v11) - fabs(v14 / (double)(unint64_t)((v13 - v12) >> 4)) > *(float *)(v3 + 16);
}

double sub_10005151C(uint64_t a1, uint64_t a2)
{
  double result;
  float64x2_t v4;
  double v5;
  float64x2_t v6;
  double v7;

  sub_10004FA84((uint64_t)&v4, a2);
  v6 = v4;
  v7 = v5;
  sub_10005003C(&v6, (float64x2_t *)(a1 + 24));
  result = v7;
  *(float64x2_t *)(a1 + 48) = v6;
  *(double *)(a1 + 64) = result;
  return result;
}

void sub_100051574(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float64x2_t v25;
  double v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double *v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  int v45;
  __int128 v46;

  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)&v46 = v5;
  *((double *)&v46 + 1) = a3;
  sub_100051B30((_QWORD *)(a1 + 16), &v46);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6 >= *(_QWORD *)(a1 + 80))
  {
    v7 = sub_1000FF4EC((_QWORD *)(a1 + 64), a2);
  }
  else
  {
    sub_10004F148(*(_QWORD *)(a1 + 72), a2);
    v7 = v6 + 96;
    *(_QWORD *)(a1 + 72) = v6 + 96;
  }
  *(_QWORD *)(a1 + 72) = v7;
  sub_100051900((uint64_t *)(a1 + 56), 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)(a1 + 64)) >> 5) - 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (v8 == v9)
  {
    v11 = 0.0;
    goto LABEL_12;
  }
  v10 = v9 - v8 - 16;
  if (v10 < 0x10)
  {
    v11 = 0.0;
    v12 = *(_QWORD *)(a1 + 24);
    do
    {
LABEL_11:
      v11 = v11 + *(double *)(v12 + 8);
      v12 += 16;
    }
    while (v12 != v9);
    goto LABEL_12;
  }
  v13 = (v10 >> 4) + 1;
  v12 = v8 + 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
  v14 = (double *)(v8 + 24);
  v11 = 0.0;
  v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v16 = *(v14 - 2);
    v17 = *v14;
    v14 += 4;
    v11 = v11 + v16 + v17;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_11;
LABEL_12:
  v18 = v11 / (double)(unint64_t)((v9 - v8) >> 4);
  *(double *)(a1 + 8) = v18;
  v20 = *(double **)(a1 + 64);
  v19 = *(double **)(a1 + 72);
  v21 = (char *)v19 - (char *)v20;
  if (v19 == v20)
  {
    *(_QWORD *)a1 = 0;
LABEL_26:
    *(_DWORD *)(a1 + 152) = 2;
    sub_100051D78((int64x2_t *)(a1 + 120));
    *(_QWORD *)(a1 + 160) = 0;
    *(_DWORD *)(a1 + 180) = 2;
    return;
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 5);
  v23 = v21 - 96;
  v24 = (v21 - 96) / 0x60uLL + 1;
  if (v23 < 0x60)
  {
    v25 = 0uLL;
    v26 = 0.0;
    v27 = *(double **)(a1 + 64);
    do
    {
LABEL_19:
      v25 = vaddq_f64(v25, *(float64x2_t *)(v27 + 1));
      v26 = v26 + v27[3];
      v27 += 12;
    }
    while (v27 != v19);
    goto LABEL_20;
  }
  v27 = &v20[12 * (v24 & 0x7FFFFFFFFFFFFFELL)];
  v28 = v20 + 15;
  v25 = 0uLL;
  v26 = 0.0;
  v29 = v24 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    v25 = vaddq_f64(vaddq_f64(v25, *(float64x2_t *)(v28 - 14)), *(float64x2_t *)(v28 - 2));
    v26 = v26 + *(v28 - 12) + *v28;
    v28 += 24;
    v29 -= 2;
  }
  while (v29);
  if (v24 != (v24 & 0x7FFFFFFFFFFFFFELL))
    goto LABEL_19;
LABEL_20:
  v30 = (double)v22;
  v31 = v25.f64[0] / (double)v22;
  v32 = v25.f64[1] / (double)v22;
  v33 = 0.0;
  v34 = v26 / (double)v22;
  if (v23 < 0x60)
    goto LABEL_42;
  v35 = &v20[12 * (v24 & 0x7FFFFFFFFFFFFFELL)];
  v36 = v20 + 15;
  v37 = v24 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    v38 = *(v36 - 14) - v31;
    v39 = *(v36 - 2) - v31;
    v40 = *(v36 - 13) - v32;
    v41 = *(v36 - 1) - v32;
    v42 = *(v36 - 12);
    v43 = *v36;
    v36 += 24;
    v33 = v33
        + (v40 * v40 + v38 * v38 + (v42 - v34) * (v42 - v34)) / v30
        + (v41 * v41 + v39 * v39 + (v43 - v34) * (v43 - v34)) / v30;
    v37 -= 2;
  }
  while (v37);
  v20 = v35;
  if (v24 != (v24 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_42:
    do
    {
      v33 = v33
          + ((v20[2] - v32) * (v20[2] - v32) + (v20[1] - v31) * (v20[1] - v31) + (v20[3] - v34) * (v20[3] - v34)) / v30;
      v20 += 12;
    }
    while (v20 != v19);
  }
  *(double *)a1 = v33;
  if (v33 < 0.290521)
    goto LABEL_26;
  v44 = *(_DWORD *)(a1 + 152);
  if (v44 && v18 > 0.75)
  {
    if (!sub_100340EC4(a1, v5))
      goto LABEL_37;
    v45 = 0;
    goto LABEL_36;
  }
  if (v44 != 1 && v18 < -0.75 && sub_100340EC4(a1, v5))
  {
    v45 = 1;
LABEL_36:
    *(_DWORD *)(a1 + 152) = v45;
  }
LABEL_37:
  if (*(_DWORD *)(a1 + 180) != 2 && sub_100340D78(a1 + 120, v5))
  {
    sub_100051D78((int64x2_t *)(a1 + 120));
    *(_DWORD *)(a1 + 180) = 3;
  }
}

void sub_1000518F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 72) = v2;
  _Unwind_Resume(a1);
}

void sub_100051900(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(_QWORD, __n128);
  void (***v16)(_QWORD, __n128);
  void (**v17)(_QWORD, __n128);
  BOOL v18;
  char *v19;
  void *v20;
  char *v21;
  void (***v22)(char *);
  void (**v23)(char *);
  void *__p;
  char *v25;
  uint64_t v26;

  v3 = a1[1];
  v4 = a1[2] - v3;
  if (v4 == 96)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    v5 = v4 / 96;
    if (v5 <= a2)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        if (v6 != a2)
        {
          v7 = *(_QWORD *)(v3 + 96 * a2 + 32);
          v8 = *a1;
          v9 = (uint64_t *)(v3 + 32 + 96 * v6);
          while (1)
          {
            v10 = *v9;
            v9 += 12;
            if (v8 >= v7 - v10)
              break;
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            if (a2 == v6)
              goto LABEL_6;
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    __p = 0;
    v25 = 0;
    v26 = 0;
    sub_10034108C(&__p, v3, v3 + 96 * v6, v6);
    if (v6)
    {
      v12 = v3 + 96 * v6;
      v13 = a1[2];
      if (v12 != v13)
      {
        v14 = 96 * v6;
        do
        {
          v11.n128_f64[0] = sub_100051AE4(v3, v3 + v14);
          v3 += 96;
        }
        while (v3 + v14 != v13);
        v12 = a1[2];
      }
      if (v12 != v3)
      {
        v15 = (void (***)(_QWORD, __n128))(v12 - 96);
        v16 = (void (***)(_QWORD, __n128))(v12 - 96);
        do
        {
          v17 = *v16;
          v16 -= 12;
          (*v17)(v15, v11);
          v18 = v15 == (void (***)(_QWORD, __n128))v3;
          v15 = v16;
        }
        while (!v18);
      }
      a1[2] = v3;
    }
    v19 = (char *)__p;
    if (__p)
    {
      v20 = __p;
      if (v25 != __p)
      {
        v21 = v25 - 96;
        v22 = (void (***)(char *))(v25 - 96);
        do
        {
          v23 = *v22;
          v22 -= 12;
          (*v23)(v21);
          v18 = v21 == v19;
          v21 = (char *)v22;
        }
        while (!v18);
        v20 = __p;
      }
      v25 = v19;
      operator delete(v20);
    }
  }
}

void sub_100051AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a10)
    sub_100345D78((uint64_t)&a10, a10);
  _Unwind_Resume(exception_object);
}

double sub_100051AE4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 80);
  *(double *)(a1 + 80) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return result;
}

_QWORD *sub_100051B30(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v5 = (_OWORD *)a1[2];
  v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_OWORD **)(a1 + 1);
    v8 = (_OWORD *)a1[1];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1000D02C0();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_1000CDEB8();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      v5 = *v7;
    }
    a1[1] = v14;
    a1[2] = v6;
    a1[3] = &v13[16 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[2] = v6;
  return sub_100051C50(a1, (((uint64_t)v6 - a1[1]) >> 4) - 1);
}

_QWORD *sub_100051C50(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = result;
  v4 = (_QWORD *)result[1];
  v3 = (_BYTE *)result[2];
  v5 = v3 - (_BYTE *)v4;
  if (v3 - (_BYTE *)v4 == 16)
  {
    *((_DWORD *)result + 8) = 1;
  }
  else
  {
    v6 = v5 >> 4;
    if (v5 >> 4 > a2)
    {
      v7 = 0;
      do
      {
        if (v7 != a2)
        {
          v8 = v4[2 * a2];
          v9 = *result;
          v10 = &v4[2 * v7];
          while (1)
          {
            v11 = *v10;
            v10 += 2;
            if (v9 >= v8 - v11)
              break;
            ++v7;
            *((_DWORD *)result + 8) = 2;
            if (a2 == v7)
              goto LABEL_6;
          }
        }
        if (v7 == a2)
        {
LABEL_6:
          *((_DWORD *)result + 8) = 1;
          v7 = a2;
        }
        ++a2;
      }
      while (a2 != v6);
      if (v7)
      {
        if ((v7 & 0x8000000000000000) != 0)
          sub_1000D02C0();
        v12 = (char *)&v4[2 * v7];
        v13 = v3 - v12;
        if (v3 != v12)
          result = memmove(v4, v12, v3 - v12);
        v2[2] = (char *)v4 + v13;
      }
    }
  }
  return result;
}

void sub_100051D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64x2_t sub_100051D78(int64x2_t *a1)
{
  int64x2_t result;

  if (a1->i8[0])
    a1->i8[0] = 0;
  result = vdupq_n_s64(0x8000000000000000);
  a1[1] = result;
  return result;
}

uint64_t sub_100051D94(uint64_t result, _QWORD *a2, _QWORD *a3, int a4, double a5)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = *a3;
  *(double *)(result + 16) = a5;
  *(_DWORD *)(result + 24) = a4;
  return result;
}

_QWORD *sub_100051DB0(_QWORD *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD **v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;

  v5 = (_OWORD *)a1[2];
  v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_OWORD **)(a1 + 1);
    v8 = (_OWORD *)a1[1];
    v9 = v5 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_1000D02C0();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 60)
        sub_1000CDEB8();
      v13 = (char *)operator new(16 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[16 * v9];
    *(_OWORD *)v14 = *a2;
    v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      v5 = *v7;
    }
    a1[1] = v14;
    a1[2] = v6;
    a1[3] = &v13[16 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[2] = v6;
  return sub_100051124(a1, (((uint64_t)v6 - a1[1]) >> 4) - 1);
}

uint64_t sub_100051ED0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9E78;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    nullsub_22(a1 + 32);
  }
  else
  {
    nullsub_22(a1 + 32);
  }
  return a1;
}

void sub_100051F2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F3CE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100051F5C(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *i;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (qword_100417ED8 == -1)
  {
    v4 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
  v4 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[12];
    v8 = a2[5];
    v9 = a2[6];
    v12 = 134219009;
    v13 = v5;
    v14 = 2048;
    v15 = v6;
    v16 = 2048;
    v17 = v7;
    v18 = 2049;
    v19 = v8;
    v20 = 2049;
    v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveOutdoorPos = {timestampNanos=%lld,systemTimestampNanos=%lld,horizontalAccuracy=%f,latlon={ lat=%{private}.18f,lon=%{private}.18f }}", (uint8_t *)&v12, 0x34u);
  }
LABEL_4:
  std::mutex::lock((std::mutex *)(a1 + 1680));
  v10 = *(_QWORD **)(a1 + 1744);
  for (i = *(_QWORD **)(a1 + 1752); v10 != i; ++v10)
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(*(_QWORD *)*v10 + 16))(*v10, a2[1], a2);
  std::mutex::unlock((std::mutex *)(a1 + 1680));
  sub_1000520EC(a1, (uint64_t)a2);
}

void sub_1000520D8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000520EC(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  char v8;
  std::string *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  char v14;
  std::string *v15;
  unsigned __int8 *v16;
  _BOOL4 v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  int v22;
  std::string *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  char v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  _BOOL4 v45;
  NSObject *v46;
  std::string::size_type v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  char v53;
  std::string *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  std::string::size_type v58;
  char v59;
  std::string *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  std::string::size_type v64;
  int v65;
  std::string *p_p;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  NSObject *v73;
  std::string::size_type v74;
  std::string __p;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;

  if ((*(_WORD *)(a2 + 136) & 0x10) == 0)
    goto LABEL_35;
  std::to_string(&v79, 1u);
  v4 = (const void **)(a2 + 64);
  v5 = *(unsigned __int8 *)(a2 + 87);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 87);
  else
    v6 = *(_QWORD *)(a2 + 72);
  size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v79.__r_.__value_.__l.__size_;
  if (v6 == size)
  {
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v79;
    else
      v9 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v4, v9, *(_QWORD *)(a2 + 72)))
        goto LABEL_18;
    }
    else if (*(_BYTE *)(a2 + 87))
    {
      v10 = (unsigned __int8 *)(a2 + 64);
      while (*v10 == v9->__r_.__value_.__s.__data_[0])
      {
        ++v10;
        v9 = (std::string *)((char *)v9 + 1);
        if (!--v5)
          goto LABEL_33;
      }
      goto LABEL_18;
    }
LABEL_33:
    v17 = 0;
    if ((v8 & 0x80) == 0)
      goto LABEL_173;
    goto LABEL_34;
  }
LABEL_18:
  std::to_string(&v78, 9u);
  v11 = *(unsigned __int8 *)(a2 + 87);
  if ((v11 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(a2 + 87);
  else
    v12 = *(_QWORD *)(a2 + 72);
  v13 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v14 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v78.__r_.__value_.__l.__size_;
  if (v12 != v13)
    goto LABEL_103;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v78;
  else
    v15 = (std::string *)v78.__r_.__value_.__r.__words[0];
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v4, v15, *(_QWORD *)(a2 + 72)))
      goto LABEL_103;
  }
  else if (*(_BYTE *)(a2 + 87))
  {
    v16 = (unsigned __int8 *)(a2 + 64);
    while (*v16 == v15->__r_.__value_.__s.__data_[0])
    {
      ++v16;
      v15 = (std::string *)((char *)v15 + 1);
      if (!--v11)
        goto LABEL_118;
    }
LABEL_103:
    std::to_string(&v77, 0x80u);
    v50 = *(unsigned __int8 *)(a2 + 87);
    if ((v50 & 0x80u) == 0)
      v51 = *(unsigned __int8 *)(a2 + 87);
    else
      v51 = *(_QWORD *)(a2 + 72);
    v52 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    v53 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = v77.__r_.__value_.__l.__size_;
    if (v51 != v52)
      goto LABEL_121;
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v77;
    else
      v54 = (std::string *)v77.__r_.__value_.__r.__words[0];
    if ((v50 & 0x80) != 0)
    {
      if (memcmp(*v4, v54, *(_QWORD *)(a2 + 72)))
        goto LABEL_121;
    }
    else if (*(_BYTE *)(a2 + 87))
    {
      v55 = (unsigned __int8 *)(a2 + 64);
      while (*v55 == v54->__r_.__value_.__s.__data_[0])
      {
        ++v55;
        v54 = (std::string *)((char *)v54 + 1);
        if (!--v50)
          goto LABEL_136;
      }
LABEL_121:
      std::to_string(&v76, 0x81u);
      v56 = *(unsigned __int8 *)(a2 + 87);
      if ((v56 & 0x80u) == 0)
        v57 = *(unsigned __int8 *)(a2 + 87);
      else
        v57 = *(_QWORD *)(a2 + 72);
      v58 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      v59 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = v76.__r_.__value_.__l.__size_;
      if (v57 != v58)
        goto LABEL_141;
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v76;
      else
        v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if ((v56 & 0x80) != 0)
      {
        if (memcmp(*v4, v60, *(_QWORD *)(a2 + 72)))
          goto LABEL_141;
      }
      else if (*(_BYTE *)(a2 + 87))
      {
        v61 = (unsigned __int8 *)(a2 + 64);
        while (*v61 == v60->__r_.__value_.__s.__data_[0])
        {
          ++v61;
          v60 = (std::string *)((char *)v60 + 1);
          if (!--v56)
            goto LABEL_160;
        }
LABEL_141:
        std::to_string(&__p, 4u);
        v62 = *(unsigned __int8 *)(a2 + 87);
        if ((v62 & 0x80u) == 0)
          v63 = *(unsigned __int8 *)(a2 + 87);
        else
          v63 = *(_QWORD *)(a2 + 72);
        v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v65 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v64 = __p.__r_.__value_.__l.__size_;
        if (v63 == v64)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((v62 & 0x80) != 0)
          {
            v17 = memcmp(*v4, p_p, *(_QWORD *)(a2 + 72)) != 0;
          }
          else if (*(_BYTE *)(a2 + 87))
          {
            v67 = v62 - 1;
            v68 = (unsigned __int8 *)(a2 + 64);
            do
            {
              v70 = *v68++;
              v69 = v70;
              v71 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              v17 = v69 != v71;
            }
            while (v69 == v71 && v67-- != 0);
          }
          else
          {
            v17 = 0;
          }
        }
        else
        {
          v17 = 1;
        }
        if (v65 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&v76.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_168:
          if ((*((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_170;
          goto LABEL_169;
        }
LABEL_167:
        operator delete(v76.__r_.__value_.__l.__data_);
        goto LABEL_168;
      }
LABEL_160:
      v17 = 0;
      if ((v59 & 0x80) == 0)
        goto LABEL_168;
      goto LABEL_167;
    }
LABEL_136:
    v17 = 0;
    if ((v53 & 0x80) == 0)
      goto LABEL_170;
LABEL_169:
    operator delete(v77.__r_.__value_.__l.__data_);
LABEL_170:
    if ((*((_BYTE *)&v78.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_172;
    goto LABEL_171;
  }
LABEL_118:
  v17 = 0;
  if ((v14 & 0x80) == 0)
    goto LABEL_172;
LABEL_171:
  operator delete(v78.__r_.__value_.__l.__data_);
LABEL_172:
  if ((*((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_173:
    if (v17)
      goto LABEL_174;
LABEL_35:
    std::to_string(&v79, 0x80u);
    v18 = (const void **)(a2 + 64);
    v19 = *(unsigned __int8 *)(a2 + 87);
    if ((v19 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(a2 + 87);
    else
      v20 = *(_QWORD *)(a2 + 72);
    v21 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    v22 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = v79.__r_.__value_.__l.__size_;
    if (v20 == v21)
    {
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v79;
      else
        v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v19 & 0x80) != 0)
      {
        v32 = memcmp(*v18, v23, *(_QWORD *)(a2 + 72)) == 0;
        if ((v22 & 0x80000000) == 0)
          goto LABEL_53;
      }
      else if (*(_BYTE *)(a2 + 87))
      {
        v24 = v19 - 1;
        v25 = (unsigned __int8 *)(a2 + 64);
        do
        {
          v27 = *v25++;
          v26 = v27;
          v29 = v23->__r_.__value_.__s.__data_[0];
          v23 = (std::string *)((char *)v23 + 1);
          v28 = v29;
          v30 = v24-- != 0;
          v31 = v30;
          v32 = v26 == v28;
        }
        while (v26 == v28 && (v31 & 1) != 0);
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_53:
          if (v32)
            goto LABEL_54;
          goto LABEL_58;
        }
      }
      else
      {
        v32 = 1;
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_53;
      }
    }
    else
    {
      v32 = 0;
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
    }
    operator delete(v79.__r_.__value_.__l.__data_);
    if (v32)
    {
LABEL_54:
      v33 = a1 + 1208;
      if (!*(_BYTE *)(a1 + 1200))
      {
        sub_1000C90B8(v33, a2);
        *(_BYTE *)(a1 + 1200) = 1;
        if (qword_100417ED8 == -1)
          goto LABEL_91;
        goto LABEL_100;
      }
LABEL_89:
      sub_100052E08(v33, a2);
LABEL_90:
      if (qword_100417ED8 == -1)
        goto LABEL_91;
      goto LABEL_100;
    }
LABEL_58:
    std::to_string(&v79, 0x81u);
    v34 = *(unsigned __int8 *)(a2 + 87);
    if ((v34 & 0x80u) == 0)
      v35 = *(unsigned __int8 *)(a2 + 87);
    else
      v35 = *(_QWORD *)(a2 + 72);
    v36 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    v37 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = v79.__r_.__value_.__l.__size_;
    if (v35 != v36)
    {
      v45 = 0;
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_87;
      goto LABEL_77;
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v79;
    else
      v38 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v34 & 0x80) != 0)
    {
      v45 = memcmp(*v18, v38, *(_QWORD *)(a2 + 72)) == 0;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 87))
      {
        v45 = 1;
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          if (v45)
          {
LABEL_88:
            v33 = a1 + 1360;
            if (!*(_BYTE *)(a1 + 1352))
            {
              sub_1000C90B8(v33, a2);
              *(_BYTE *)(a1 + 1352) = 1;
              if (qword_100417ED8 == -1)
              {
LABEL_91:
                v46 = qword_100417EE0;
                if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
                  goto LABEL_93;
                goto LABEL_92;
              }
LABEL_100:
              dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
              v46 = qword_100417EE0;
              if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
              {
LABEL_93:
                if (*(_BYTE *)(a1 + 1536))
                {
                  v48 = *(void **)(a1 + 1568);
                  if (v48)
                  {
                    *(_QWORD *)(a1 + 1576) = v48;
                    operator delete(v48);
                  }
                  v49 = *(void **)(a1 + 1544);
                  if (v49)
                  {
                    *(_QWORD *)(a1 + 1552) = v49;
                    operator delete(v49);
                  }
                  *(_BYTE *)(a1 + 1536) = 0;
                }
                return;
              }
LABEL_92:
              v47 = *(_QWORD *)(a2 + 96);
              LODWORD(v79.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 4) = v47;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "fRegionalCLLocationTracker with horizontalAccuracy %f", (uint8_t *)&v79, 0xCu);
              goto LABEL_93;
            }
            goto LABEL_89;
          }
LABEL_78:
          sub_10005288C((_BYTE *)(a1 + 896), a2);
          goto LABEL_90;
        }
LABEL_77:
        operator delete(v79.__r_.__value_.__l.__data_);
        if (v45)
          goto LABEL_88;
        goto LABEL_78;
      }
      v39 = v34 - 1;
      do
      {
        v41 = *(unsigned __int8 *)v18;
        v18 = (const void **)((char *)v18 + 1);
        v40 = v41;
        v43 = v38->__r_.__value_.__s.__data_[0];
        v38 = (std::string *)((char *)v38 + 1);
        v42 = v43;
        v30 = v39-- != 0;
        v44 = v30;
        v45 = v40 == v42;
      }
      while (v40 == v42 && (v44 & 1) != 0);
    }
    if ((v37 & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_77;
  }
LABEL_34:
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!v17)
    goto LABEL_35;
LABEL_174:
  if (qword_100417ED8 == -1)
  {
    v73 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v73 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return;
  }
  if (*(char *)(a2 + 87) >= 0)
    v74 = a2 + 64;
  else
    v74 = *(_QWORD *)(a2 + 64);
  LODWORD(v79.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 4) = v74;
  _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "dropped a measurement with provider %s", (uint8_t *)&v79, 0xCu);
}

void sub_1000527E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a17 < 0)
  {
    operator delete(__p);
    if (a23 < 0)
    {
LABEL_5:
      operator delete(a18);
      if (a29 < 0)
      {
LABEL_8:
        operator delete(a24);
        if ((*(char *)(v29 - 57) & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_11:
        operator delete(*(void **)(v29 - 80));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((*(char *)(v29 - 57) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_5;
  }
  if (a29 < 0)
    goto LABEL_8;
  goto LABEL_10;
}

void sub_10005288C(_BYTE *a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  char v8;
  std::string *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type v13;
  int v14;
  std::string *p_p;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  char v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;
  _BOOL4 v36;
  uint64_t v37;
  std::string __p;
  std::string v39;

  if ((*(_WORD *)(a2 + 136) & 0x10) == 0)
  {
LABEL_63:
    v37 = (uint64_t)(a1 + 160);
    if (!a1[152])
    {
      sub_1000C90B8(v37, a2);
      a1[152] = 1;
      return;
    }
LABEL_64:
    sub_100052E08(v37, a2);
    return;
  }
  v4 = (const void **)(a2 + 64);
  std::to_string(&v39, 1u);
  v5 = *(unsigned __int8 *)(a2 + 87);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 87);
  else
    v6 = *(_QWORD *)(a2 + 72);
  size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  v8 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v39.__r_.__value_.__l.__size_;
  if (v6 == size)
  {
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v39;
    else
      v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v4, v9, *(_QWORD *)(a2 + 72)))
        goto LABEL_18;
    }
    else if (*(_BYTE *)(a2 + 87))
    {
      v10 = (unsigned __int8 *)(a2 + 64);
      while (*v10 == v9->__r_.__value_.__s.__data_[0])
      {
        ++v10;
        v9 = (std::string *)((char *)v9 + 1);
        if (!--v5)
          goto LABEL_38;
      }
      goto LABEL_18;
    }
LABEL_38:
    v24 = 1;
    if ((v8 & 0x80) == 0)
      goto LABEL_62;
LABEL_39:
    operator delete(v39.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_63;
    goto LABEL_40;
  }
LABEL_18:
  std::to_string(&__p, 9u);
  v11 = *(unsigned __int8 *)(a2 + 87);
  if ((v11 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(a2 + 87);
  else
    v12 = *(_QWORD *)(a2 + 72);
  v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = __p.__r_.__value_.__l.__size_;
  if (v12 != v13)
  {
    v24 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_37;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((v11 & 0x80) != 0)
  {
    v24 = memcmp(*v4, p_p, *(_QWORD *)(a2 + 72)) == 0;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a2 + 87))
  {
    v16 = v11 - 1;
    v17 = (unsigned __int8 *)(a2 + 64);
    do
    {
      v19 = *v17++;
      v18 = v19;
      v21 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      v20 = v21;
      v22 = v16-- != 0;
      v23 = v22;
      v24 = v18 == v20;
    }
    while (v18 == v20 && (v23 & 1) != 0);
LABEL_60:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_61;
LABEL_37:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v24 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
LABEL_61:
  if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_39;
LABEL_62:
  if (v24)
    goto LABEL_63;
LABEL_40:
  if ((*(_WORD *)(a2 + 136) & 0x10) != 0)
  {
    std::to_string(&v39, 4u);
    v25 = *(unsigned __int8 *)(a2 + 87);
    if ((v25 & 0x80u) == 0)
      v26 = *(unsigned __int8 *)(a2 + 87);
    else
      v26 = *(_QWORD *)(a2 + 72);
    v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    v28 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = v39.__r_.__value_.__l.__size_;
    if (v26 == v27)
    {
      v29 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v39
          : (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v25 & 0x80) != 0)
      {
        v36 = memcmp(*v4, v29, *(_QWORD *)(a2 + 72)) == 0;
      }
      else if (*(_BYTE *)(a2 + 87))
      {
        v30 = v25 - 1;
        do
        {
          v32 = *(unsigned __int8 *)v4;
          v4 = (const void **)((char *)v4 + 1);
          v31 = v32;
          v34 = v29->__r_.__value_.__s.__data_[0];
          v29 = (std::string *)((char *)v29 + 1);
          v33 = v34;
          v22 = v30-- != 0;
          v35 = v22;
          v36 = v31 == v33;
        }
        while (v31 == v33 && (v35 & 1) != 0);
      }
      else
      {
        v36 = 1;
      }
    }
    else
    {
      v36 = 0;
    }
    if (v28 < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v36)
    {
      v37 = (uint64_t)(a1 + 8);
      if (!*a1)
      {
        sub_1000C90B8(v37, a2);
        *a1 = 1;
        return;
      }
      goto LABEL_64;
    }
  }
}

void sub_100052B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052B6C(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  *a1 = off_1003F1A88;
  v2 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1);
  sub_100052BA8(a1);
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

_QWORD *sub_100052BA8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_QWORD *)qword_10041A998 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[7];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[8];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[9];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (_QWORD *)v1[10];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100052C90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1003F1BE8;
  if ((_QWORD *)qword_10041A9A8 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[3];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100052D10(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F1B38;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_100052D54(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    v2 = result;
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 60) & 1) == 0)
        return result;
    }
    else
    {
      v3 = *(_QWORD *)(qword_10041A998 + 16);
      if ((*(_BYTE *)(v3 + 60) & 1) == 0)
        return result;
    }
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 44) & 2) == 0)
        return result;
    }
    else if ((*(_BYTE *)(*(_QWORD *)(qword_10041A9A8 + 16) + 44) & 2) == 0)
    {
      return result;
    }
    v5 = result + 72;
    if (*(_BYTE *)(v2 + 64))
    {
      return sub_1000C4E68(v5, a2);
    }
    else
    {
      result = sub_1000333F0(v5, a2);
      *(_BYTE *)(v2 + 64) = 1;
    }
  }
  return result;
}

uint64_t sub_100052DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100052D54(*(_QWORD *)(a1 + 1520), a3);
}

uint64_t sub_100052E08(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  sub_100077D9C(a1 + 32, a2 + 32);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

void sub_100052E78(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_100052FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_1000E095C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100052FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100053518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100053960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000545D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  uint64_t v60;

  if (a52 < 0)
  {
    operator delete(__p);
    if (a59 < 0)
    {
LABEL_5:
      operator delete(a54);
      if ((*(char *)(v60 - 137) & 0x80000000) == 0)
      {
LABEL_9:

        sub_100275288(&a44);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v60 - 160));
      goto LABEL_9;
    }
  }
  else if (a59 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v60 - 137) & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_1000547D8(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  int v13;
  int v14;
  _QWORD *v15;
  __int128 v16;
  char *v17;
  char *v18;

  v2 = *(_BYTE **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL)
      sub_1000D02C0();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v12 = &v8[v9 - 80];
        v13 = *(_DWORD *)&v4[v9 - 88];
        v14 = v13 >> 31;
        v15 = &v4[v9 - 80];
        if (v13 >> 31 == v13)
        {
          *(_QWORD *)v12 = *v15;
          v14 = v13;
        }
        else
        {
          v16 = *(_OWORD *)v15;
          *(_DWORD *)&v8[v9 - 64] = *(_DWORD *)&v4[v9 - 64];
          *(_OWORD *)v12 = v16;
        }
        *(_DWORD *)&v8[v9 - 88] = v13 ^ v14;
        v17 = &v8[v9];
        v18 = &v4[v9];
        *((_QWORD *)v17 - 7) = *(_QWORD *)&v4[v9 - 56];
        *(v17 - 48) = 0;
        if (v4[v9 - 48])
        {
          *((_DWORD *)v17 - 11) = *((_DWORD *)v18 - 11);
          *(v17 - 48) = 1;
        }
        v10 = *(_OWORD *)(v18 - 40);
        v11 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v17 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v17 - 24) = v11;
        *(_OWORD *)(v17 - 40) = v10;
        v9 -= 88;
      }
      while (&v4[v9] != v2);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v4 != v2)
      {
        if (*(v4 - 48))
          *(v4 - 48) = 0;
        v4 -= 88;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_100054960(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *i;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  std::__shared_weak_count *v18;
  void *__p;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v16 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100054AE4((uint64_t)v17, a2, (uint64_t)&v16, a4);
  sub_1003153B0(v17, &v21);
  sub_10005C2A4(a1, (uint64_t)&v21);
  v5 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (char *)__p;
  if (__p)
  {
    for (i = v20; i != v8; i -= 88)
    {
      if (*(i - 48))
        *(i - 48) = 0;
    }
    v20 = v8;
    operator delete(v8);
  }
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100054AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_1000FEAD8(v12 - 40);
  sub_100315288(&a12);
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100054AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100315288(&a12);
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100054AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = a1 + 24;
  *(_QWORD *)(v5 + 16) = 0;
  sub_100309F90((char *)v5, *a4, a4[1], 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 3));
  return a1;
}

uint64_t sub_100054B44(uint64_t result, _DWORD *a2, uint64_t a3, int a4, char a5, char a6, int a7, uint64_t a8, double a9, double a10)
{
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;

  v10 = (_QWORD *)(result + 8);
  v11 = a2 + 2;
  if (*a2 == (int)*a2 >> 31)
  {
    *v10 = *v11;
    *(_DWORD *)result = 0;
    *(double *)(result + 32) = a9;
    *(_BYTE *)(result + 40) = 0;
    if (!*(_BYTE *)a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v12 = *(_OWORD *)v11;
  *(_DWORD *)(result + 24) = a2[6];
  *(_OWORD *)v10 = v12;
  *(_DWORD *)result = *a2 ^ ((int)*a2 >> 31);
  *(double *)(result + 32) = a9;
  *(_BYTE *)(result + 40) = 0;
  if (*(_BYTE *)a3)
  {
LABEL_5:
    *(_DWORD *)(result + 44) = *(_DWORD *)(a3 + 4);
    *(_BYTE *)(result + 40) = 1;
  }
LABEL_6:
  *(_BYTE *)(result + 48) = a5;
  *(_BYTE *)(result + 49) = a6;
  *(_QWORD *)(result + 56) = a8;
  *(_DWORD *)(result + 64) = a7;
  *(double *)(result + 72) = a10;
  *(_DWORD *)(result + 80) = a4;
  return result;
}

void sub_100054BDC(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::string *v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  std::string::size_type v54;
  char v55;
  uint64_t v56;
  std::string::size_type v57;
  void *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type v69;
  char v70;
  uint64_t v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  _QWORD v77[2];
  _QWORD v78[2];

  memset(&v74, 0, sizeof(v74));
  std::string::reserve(&v74, 0xCuLL);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(a1 + 23);
  if (v4 < 0)
  {
    v7 = *(_QWORD *)a1;
    v8 = *(_QWORD *)(a1 + 8);
    if ((uint64_t)(*(_QWORD *)a1 + v8 - v5) < 2)
      goto LABEL_80;
  }
  else
  {
    v7 = a1;
    v8 = *(unsigned __int8 *)(a1 + 23);
    if ((uint64_t)(a1 + v6 - v5) <= 1)
      goto LABEL_80;
  }
  v9 = (char *)(v7 + v8);
  v10 = (char *)v5;
  if ((char *)v5 != v9)
  {
    v10 = (char *)v5;
    while (1)
    {
      v11 = *v10;
      if (v11 == 45 || v11 == 58)
        break;
      if (++v10 == v9)
      {
        v10 = v9;
        break;
      }
    }
  }
  if ((v6 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(_QWORD *)a1;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (v10 == (char *)(v12 + v6))
    goto LABEL_106;
  if (&v10[-v5] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v5, v10);
  v13 = (unint64_t)(v10 + 1);
  v14 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    if ((uint64_t)(*(_QWORD *)a1 + v16 - v13) < 2)
      goto LABEL_80;
  }
  else
  {
    v15 = a1;
    v16 = *(unsigned __int8 *)(a1 + 23);
    if ((uint64_t)(a1 + v14 - v13) < 2)
      goto LABEL_80;
  }
  v17 = (char *)(v15 + v16);
  v18 = v10 + 1;
  if ((char *)v13 != v17)
  {
    v18 = (char *)v13;
    while (1)
    {
      v19 = *v18;
      if (v19 == 45 || v19 == 58)
        break;
      if (++v18 == v17)
      {
        v18 = v17;
        break;
      }
    }
  }
  if ((v14 & 0x80u) == 0)
    v20 = a1;
  else
    v20 = *(_QWORD *)a1;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v18 == (char *)(v20 + v14))
    goto LABEL_106;
  if (&v18[-v13] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v13, v18);
  v21 = (unint64_t)(v18 + 1);
  v22 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD *)(a1 + 8);
    if ((uint64_t)(*(_QWORD *)a1 + v24 - v21) >= 2)
      goto LABEL_44;
LABEL_80:
    std::operator+<char>("Address is too short: '", a1);
    v43 = std::string::append(&v73, "'");
LABEL_107:
    v54 = v43->__r_.__value_.__r.__words[0];
    v75.__r_.__value_.__r.__words[0] = v43->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
    v55 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v76.__r_.__value_.__r.__words[0] = v75.__r_.__value_.__r.__words[0];
    v56 = *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 7);
    *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 7);
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 55) = v56;
    v57 = v76.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 40) = v54;
    *(_QWORD *)(a2 + 48) = v57;
    *(_BYTE *)(a2 + 63) = v55;
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_110;
    v58 = (void *)v73.__r_.__value_.__r.__words[0];
    goto LABEL_109;
  }
  v23 = a1;
  v24 = *(unsigned __int8 *)(a1 + 23);
  if ((uint64_t)(a1 + v22 - v21) < 2)
    goto LABEL_80;
LABEL_44:
  v25 = (char *)(v23 + v24);
  v26 = v18 + 1;
  if ((char *)v21 != v25)
  {
    v26 = (char *)v21;
    while (1)
    {
      v27 = *v26;
      if (v27 == 45 || v27 == 58)
        break;
      if (++v26 == v25)
      {
        v26 = v25;
        break;
      }
    }
  }
  if ((v22 & 0x80u) == 0)
    v28 = a1;
  else
    v28 = *(_QWORD *)a1;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a1 + 8);
  if (v26 == (char *)(v28 + v22))
    goto LABEL_106;
  if (&v26[-v21] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v21, v26);
  v29 = (unint64_t)(v26 + 1);
  v30 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v32 = *(_QWORD *)a1;
    v33 = *(_QWORD *)(a1 + 8);
    v31 = *(_QWORD *)a1 + v33 - v29;
  }
  else
  {
    v31 = a1 + v30 - v29;
    v32 = a1;
    v33 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v31 < 2)
    goto LABEL_80;
  v34 = (char *)(v32 + v33);
  v35 = v26 + 1;
  if ((char *)v29 != v34)
  {
    v35 = (char *)v29;
    while (1)
    {
      v36 = *v35;
      if (v36 == 45 || v36 == 58)
        break;
      if (++v35 == v34)
      {
        v35 = v34;
        break;
      }
    }
  }
  if ((v30 & 0x80u) == 0)
    v37 = a1;
  else
    v37 = *(_QWORD *)a1;
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a1 + 8);
  if (v35 == (char *)(v37 + v30))
    goto LABEL_106;
  if (&v35[-v29] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v29, v35);
  v38 = (unint64_t)(v35 + 1);
  v39 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v41 = *(_QWORD *)a1;
    v42 = *(_QWORD *)(a1 + 8);
    v40 = *(_QWORD *)a1 + v42 - v38;
  }
  else
  {
    v40 = a1 + v39 - v38;
    v41 = a1;
    v42 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v40 < 2)
    goto LABEL_80;
  v44 = (char *)(v41 + v42);
  v45 = v35 + 1;
  if ((char *)v38 != v44)
  {
    v45 = (char *)v38;
    while (1)
    {
      v46 = *v45;
      if (v46 == 45 || v46 == 58)
        break;
      if (++v45 == v44)
      {
        v45 = v44;
        break;
      }
    }
  }
  if ((v39 & 0x80u) == 0)
    v47 = a1;
  else
    v47 = *(_QWORD *)a1;
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(a1 + 8);
  if (v45 == (char *)(v47 + v39))
  {
LABEL_106:
    std::operator+<char>("Non-terminal byte is too short/long: '", a1);
    v43 = std::string::append(&v73, "'");
    goto LABEL_107;
  }
  if (&v45[-v38] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v38, v45);
  v48 = *(unsigned __int8 *)(a1 + 23);
  v49 = (unint64_t)(v45 + 1);
  if ((v48 & 0x80u) == 0)
    v50 = a1;
  else
    v50 = *(_QWORD *)a1;
  if ((v48 & 0x80u) != 0)
    v48 = *(_QWORD *)(a1 + 8);
  v51 = (char *)(v50 + v48);
  if (~v49 + v50 + v48 > 1)
  {
    std::operator+<char>("The last byte is too short/too long: '", a1);
    v43 = std::string::append(&v73, "'");
    goto LABEL_107;
  }
  if (&v51[-v49] == (char *)1)
    std::string::append(&v74, 1uLL, 48);
  sub_100160DDC(&v74, v49, v51);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v52 = *(unsigned __int8 *)(a1 + 23);
    if (v51 != (char *)(a1 + v52))
    {
      v53 = a1;
      goto LABEL_115;
    }
LABEL_126:
    sub_1000553C0((const char *)&v74, a2);
    goto LABEL_110;
  }
  v53 = *(_QWORD *)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v51 == (char *)(*(_QWORD *)a1 + v52))
    goto LABEL_126;
LABEL_115:
  std::to_string(&v72, v53 + v52 - (_QWORD)v51);
  v59 = std::string::insert(&v72, 0, "Didn't parse BSSID fully.  Stopped at ");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  v61 = std::string::append(&v75, " in '");
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = *(char *)(a1 + 23);
  if (v63 >= 0)
    v64 = (const std::string::value_type *)a1;
  else
    v64 = *(const std::string::value_type **)a1;
  if (v63 >= 0)
    v65 = *(unsigned __int8 *)(a1 + 23);
  else
    v65 = *(_QWORD *)(a1 + 8);
  v66 = std::string::append(&v76, v64, v65);
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  v68 = std::string::append(&v73, "'");
  v69 = v68->__r_.__value_.__r.__words[0];
  v77[0] = v68->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7);
  v70 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v78[0] = v77[0];
  *(_QWORD *)((char *)v78 + 7) = *(_QWORD *)((char *)v77 + 7);
  *(_BYTE *)a2 = 0;
  v71 = v78[0];
  *(_QWORD *)(a2 + 55) = *(_QWORD *)((char *)v78 + 7);
  *(_QWORD *)(a2 + 40) = v69;
  *(_QWORD *)(a2 + 48) = v71;
  *(_BYTE *)(a2 + 63) = v70;
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_124;
      goto LABEL_129;
    }
  }
  else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_123;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_124:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_130;
    goto LABEL_110;
  }
LABEL_129:
  operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_130:
    v58 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_109:
    operator delete(v58);
  }
LABEL_110:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
}

void sub_1000552D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000553C0(const char *a1@<X0>, uint64_t a2@<X8>)
{
  const char *v2;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  char *v25;
  std::string *v26;
  std::string::size_type v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string v32;
  _QWORD v33[2];
  _QWORD v34[2];

  v2 = a1;
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (unsigned __int8 *)a1;
    if (v4 == 12)
    {
      v6 = *a1;
      if ((*a1 - 48) < 0xAu)
        goto LABEL_11;
      goto LABEL_7;
    }
LABEL_50:
    std::operator+<char>("Invalid format for hex MAC address '", a1);
    v26 = std::string::append(&v32, "'");
    goto LABEL_53;
  }
  if (*((_QWORD *)a1 + 1) != 12)
    goto LABEL_50;
  v5 = *(unsigned __int8 **)a1;
  v6 = **(_BYTE **)a1;
  if ((v6 - 48) < 0xAu)
    goto LABEL_11;
LABEL_7:
  v7 = v6 - 65;
  v8 = v7 > 0x25;
  v9 = (1 << v7) & 0x3F0000003FLL;
  if (v8 || v9 == 0)
  {
LABEL_51:
    std::operator+<char>("Encountered non-hex digit in '", a1);
    v26 = std::string::append(&v32, "'");
    goto LABEL_53;
  }
LABEL_11:
  if ((v5[1] - 48) >= 0xAu)
  {
    v11 = v5[1] - 65;
    v8 = v11 > 0x25;
    v12 = (1 << v11) & 0x3F0000003FLL;
    if (v8 || v12 == 0)
      goto LABEL_51;
  }
  if ((v5[2] - 48) >= 0xAu)
  {
    v14 = v5[2] - 65;
    if (v14 > 0x25 || ((1 << v14) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[3] - 48) >= 0xAu)
  {
    v15 = v5[3] - 65;
    if (v15 > 0x25 || ((1 << v15) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[4] - 48) >= 0xAu)
  {
    v16 = v5[4] - 65;
    if (v16 > 0x25 || ((1 << v16) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[5] - 48) >= 0xAu)
  {
    v17 = v5[5] - 65;
    if (v17 > 0x25 || ((1 << v17) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[6] - 48) >= 0xAu)
  {
    v18 = v5[6] - 65;
    if (v18 > 0x25 || ((1 << v18) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[7] - 48) >= 0xAu)
  {
    v19 = v5[7] - 65;
    if (v19 > 0x25 || ((1 << v19) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[8] - 48) >= 0xAu)
  {
    v20 = v5[8] - 65;
    if (v20 > 0x25 || ((1 << v20) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[9] - 48) >= 0xAu)
  {
    v21 = v5[9] - 65;
    if (v21 > 0x25 || ((1 << v21) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if ((v5[10] - 48) >= 0xAu)
  {
    v22 = v5[10] - 65;
    if (v22 > 0x25 || ((1 << v22) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  v23 = v5[11];
  if ((v23 - 48) >= 0xAu)
  {
    v24 = v23 - 65;
    if (v24 > 0x25 || ((1 << v24) & 0x3F0000003FLL) == 0)
      goto LABEL_51;
  }
  if (v4 < 0)
    a1 = *(const char **)a1;
  v31 = 0;
  if (sscanf(a1, "%llx", &v31) == 1)
  {
    *(_QWORD *)(a2 + 16) = v31;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)a2 = 1;
    v25 = (char *)operator new(0x20uLL);
    *(_QWORD *)(a2 + 40) = v25;
    *(_OWORD *)(a2 + 48) = xmmword_100383070;
    strcpy(v25, "Pass MacAddress validation");
    return;
  }
  std::operator+<char>("Failed to convert '", v2);
  v26 = std::string::append(&v32, "' to number");
LABEL_53:
  v27 = v26->__r_.__value_.__r.__words[0];
  v33[0] = v26->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v34[0] = v33[0];
  v29 = *(_QWORD *)((char *)v33 + 7);
  *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)((char *)v33 + 7);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 55) = v29;
  v30 = v34[0];
  *(_QWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 48) = v30;
  *(_BYTE *)(a2 + 63) = v28;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1000557F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100055A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100055AEC(uint64_t a1, float a2)
{
  return (uint64_t)(float)((float)((float)((float)a1 - (float)((float)a1 * a2)) / a2) * 1000000.0);
}

void sub_100055B14(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *i;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  unsigned int v40;
  int v41;
  _QWORD *v42;
  std::string *v43;
  __int128 v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  id v51;
  int v52;
  unsigned int v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  _BYTE v63[24];
  std::string v64;
  std::string v65;
  std::logic_error v66;
  _BYTE v67[128];
  char v68[8];
  void *v69;
  char v70;

  v3 = a2;
  LOBYTE(v62) = 0;
  if (objc_msgSend(v3, "wifiError"))
  {
    HIDWORD(v62) = objc_msgSend(v3, "wifiError");
    LOBYTE(v62) = 1;
  }
  v68[0] = 0;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  v47 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "channels"));
  v6 = (unint64_t)objc_msgSend(v5, "count");
  v7 = v6;
  if (v6)
  {
    if (v6 >> 62)
      sub_1000D02C0();
    v8 = (char *)operator new(4 * v6);
    __p = &v8[v60 & 0xFFFFFFFFFFFFFFFCLL];
    v60 = (unint64_t)__p;
    v61 = &v8[4 * v7];
  }

  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "channels"));
  v45 = a1;

  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
  if (v11)
  {
    v46 = *(_QWORD *)v56;
    v12 = v10;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(_QWORD *)v56 != v46)
          objc_enumerationMutation(v10);
        v15 = sub_1000B7B10((int)objc_msgSend(*(id *)(*((_QWORD *)&v55 + 1) + 8 * (_QWORD)i), "intValue"));
        v16 = v15;
        v17 = (char *)v60;
        if (v60 < (unint64_t)v61)
        {
          *(_DWORD *)v60 = v15;
          v14 = (uint64_t)(v17 + 4);
          goto LABEL_10;
        }
        v18 = (char *)__p;
        v19 = v60 - (_QWORD)__p;
        v20 = (uint64_t)(v60 - (_QWORD)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_1000D02C0();
        v22 = v61 - (_BYTE *)__p;
        if ((v61 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 62)
            sub_1000CDEB8();
          v24 = (char *)operator new(4 * v23);
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = v16;
          v14 = (uint64_t)(v25 + 4);
          if (v17 == v18)
            goto LABEL_31;
LABEL_25:
          v26 = v17 - 4 - v18;
          if (v26 < 0x2C)
            goto LABEL_47;
          if ((unint64_t)(v17 - &v24[v19]) < 0x20)
            goto LABEL_47;
          v27 = (v26 >> 2) + 1;
          v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          v29 = &v17[-v28];
          v25 -= v28;
          v30 = &v24[4 * v20 - 16];
          v31 = v17 - 16;
          v32 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v33 = *(_OWORD *)v31;
            *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
            *(_OWORD *)v30 = v33;
            v30 -= 32;
            v31 -= 32;
            v32 -= 8;
          }
          while (v32);
          v17 = v29;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_47:
            do
            {
              v34 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v25 - 1) = v34;
              v25 -= 4;
            }
            while (v17 != v18);
          }
          goto LABEL_31;
        }
        v24 = 0;
        v25 = (char *)(4 * v20);
        *(_DWORD *)(4 * v20) = v16;
        v14 = 4 * v20 + 4;
        if (v17 != v18)
          goto LABEL_25;
LABEL_31:
        __p = v25;
        v60 = v14;
        v61 = &v24[4 * v23];
        if (v18)
          operator delete(v18);
LABEL_10:
        v3 = v47;
        v60 = v14;
        v10 = v12;
      }
      v11 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
    }
    while (v11);
  }

  v54 = objc_msgSend(v3, "initiatedTimestamp");
  v52 = 0;
  v53 = objc_msgSend(v3, "cachedScan") ^ 1;
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  v51 = objc_msgSend(v35, "dwell");
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  v50 = objc_msgSend(v36, "includeOffChannelResults") ^ 1;
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  objc_msgSend(v37, "dutyCycle");
  v49 = v38;
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "settings"));
  v40 = objc_msgSend(v39, "scanType");
  v41 = v40;
  if (v40 >= 3)
  {
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v64, v41);
    v43 = std::string::insert(&v64, 0, "invalid scan type ");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(&v66, &v65);
    sub_10018D04C((uint64_t)v63);
    sub_1002F55E4(&v66, (uint64_t)"wifi::ScanType convert(WifiScanType)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/xcode/purpleslam/IOSCommon/IOSCommon/WifiSensor.mm", 42, (uint64_t)v63);
  }
  v48 = v40;
  LOWORD(v64.__r_.__value_.__l.__data_) = (unsigned __int16)objc_msgSend(v3, "merged");
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)objc_msgSend(v3, "scanRssiThreshold");
  LOBYTE(v66.__vftable) = objc_msgSend(v3, "targettedSsid");
  v42 = operator new(0x98uLL);
  v42[1] = 0;
  v42[2] = 0;
  *v42 = off_100404E88;
  sub_1002F548C((uint64_t)v63, (uint64_t)(v42 + 3), (uint64_t *)&v54, &v62, (int *)&v53, &v52, (uint64_t)v68, (uint64_t *)&v51, (uint64_t)&__p, (int *)&v50, (float *)&v49, (int *)&v48, (__int16 *)&v64, (uint64_t *)&v65, (char *)&v66);
  *v45 = v42 + 3;
  v45[1] = v42;

  if (__p)
  {
    v60 = (unint64_t)__p;
    operator delete(__p);
  }
  if (v68[0] && v70 < 0)
    operator delete(v69);

}

void sub_1000560FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,std::out_of_range a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;

  if (a37)
    operator delete(a37);
  std::out_of_range::~out_of_range(&a52);
  if (a51 < 0)
    operator delete(a46);
  if (a45 < 0)
    operator delete(a40);

  if (__p)
    operator delete(__p);
  if (*(_BYTE *)(v74 - 136))
  {
    if (*(char *)(v74 - 105) < 0)
      operator delete(a70);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000562EC(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int a10, int a11, __int16 a12, uint64_t a13, char a14)
{
  __int128 v14;

  *(_BYTE *)result = 0;
  if (*(_BYTE *)a6)
  {
    v14 = *(_OWORD *)(a6 + 8);
    *(_QWORD *)(result + 24) = *(_QWORD *)(a6 + 24);
    *(_OWORD *)(result + 8) = v14;
    *(_QWORD *)(a6 + 16) = 0;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_BYTE *)result = 1;
  }
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 56) = a4;
  *(_DWORD *)(result + 60) = a5;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_OWORD *)(result + 64) = *(_OWORD *)a8;
  *(_QWORD *)(result + 80) = *(_QWORD *)(a8 + 16);
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_DWORD *)(result + 88) = a10;
  *(double *)(result + 96) = a9;
  *(_DWORD *)(result + 104) = a11;
  *(_WORD *)(result + 108) = a12;
  *(_QWORD *)(result + 112) = a13;
  *(_BYTE *)(result + 120) = a14;
  return result;
}

void sub_10005644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000565C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000565D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000565EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000569E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_100056A6C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100056C04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_100056C4C(unsigned int *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[12];
  _QWORD v17[12];

  v16[0] = CFSTR("sessionLength");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[8]));
  v17[0] = v15;
  v16[1] = CFSTR("ttff");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[9]));
  v17[1] = v14;
  v16[2] = CFSTR("numOfFixes");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[10]));
  v17[2] = v13;
  v16[3] = CFSTR("numOfIndoorFixes");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[11]));
  v17[3] = v2;
  v16[4] = CFSTR("avgHAcc");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[12]));
  v17[4] = v3;
  v16[5] = CFSTR("numOfUniverseChange");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[13]));
  v17[5] = v4;
  v16[6] = CFSTR("avgNumOfSelectedLocs");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[14]));
  v17[6] = v5;
  v16[7] = CFSTR("numOfLocContextChange");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[15]));
  v17[7] = v6;
  v16[8] = CFSTR("numOfVL");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[16]));
  v17[8] = v7;
  v16[9] = CFSTR("numOfVIO");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[17]));
  v17[9] = v8;
  v16[10] = CFSTR("numOfWifiScan");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[18]));
  v17[10] = v9;
  v16[11] = CFSTR("avgNumOfApsInWifiScan");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[19]));
  v17[11] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 12));

  return v11;
}

void sub_100056ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

WifiScannerSettings *sub_100056F7C(uint64_t a1, unint64_t a2, void *a3)
{
  char *v5;
  uint64_t *v6;
  char *i;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *j;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  WifiScannerSettings *v53;
  uint64_t v54;
  void *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  WifiScannerSettings *v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  unsigned __int8 v66;
  _BYTE *v67;
  uint64_t *v68;
  char *v69;
  double *v70;
  double *v71;
  int v72;
  uint8x8_t v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const float *v88;
  int32x4_t v89;
  int32x4_t v90;
  const float *v91;
  unsigned __int128 v92;
  unsigned __int128 v93;
  int v94;
  unint64_t v95;
  double v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char *v104;
  id v105;
  id v106;
  double v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  unsigned int v112;
  WifiScannerSettings *v113;
  _DWORD *ii;
  uint64_t v115;
  void *v116;
  void *v117;
  unsigned __int8 v118;
  void *v119;
  id v120;
  void *v121;
  int v122;
  WifiScannerSettings *v123;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  double v139;
  double v140;
  long double v141;
  long double v142;
  long double v143;
  BOOL v144;
  double v145;
  unint64_t v146;
  char *v147;
  double v148;
  double v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t k;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  double v160;
  BOOL v161;
  char *m;
  uint64_t v163;
  double v164;
  long double v165;
  long double v166;
  BOOL v167;
  char *n;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  long double v179;
  long double v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  long double v187;
  long double v188;
  long double v189;
  BOOL v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  int v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  double v207;
  double v208;
  uint64_t v209;
  long double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  long double v215;
  long double v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  _DWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  double v228;
  double v229;
  long double v230;
  long double v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  uint64_t v237;
  char *v238;
  double *v239;
  uint64_t v240;
  uint64_t v241;
  double v243;
  double v244;
  long double v245;
  long double v246;
  BOOL v247;
  double v248;
  double v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  long double v254;
  long double v255;
  long double v256;
  BOOL v257;
  double v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  double v267;
  double v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  double v272;
  long double v273;
  long double v274;
  BOOL v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  long double v282;
  long double v283;
  BOOL v284;
  double v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  double *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  double v301;
  double *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  double v308;
  double v309;
  long double v310;
  long double v311;
  BOOL v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  double v316;
  double v317;
  double v318;
  double v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  id v323;
  void *v324;
  uint64_t v325;
  int *v326;
  int v327;
  NSNumber *v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  unint64_t v336;
  id v337;
  _QWORD *v338;
  WifiScannerSettings *v339;
  id obj;
  int *obja;
  uint64_t v342;
  char *v343;
  id v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  int v348;
  uint64_t v349;
  void *v350[2];
  __int128 v351;
  __int128 v352;
  __int128 v353;
  void *v354[2];
  __int128 v355;
  __int128 v356;
  __int128 v357;
  _QWORD v358[3];
  void *__p[2];
  __int128 v360;
  void *v361[2];
  void *v362[2];
  int v363;
  void *v364;

  v337 = a3;
  v347 = a2;
  v349 = a1;
  if (a2 || objc_msgSend(v337, "count"))
  {
    v344 = v337;
    *(_OWORD *)v354 = 0u;
    v355 = 0u;
    v356 = 0u;
    v357 = 0u;
    obj = *(id *)(a1 + 56);
    v5 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v354, v361, 16);
    if (!v5)
      goto LABEL_95;
    v342 = *(_QWORD *)v355;
    v6 = (uint64_t *)(a1 + 16);
    v338 = (_QWORD *)(a1 + 32);
    while (1)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v355 != v342)
          objc_enumerationMutation(obj);
        v8 = objc_msgSend(*((id *)v354[1] + (_QWORD)i), "intValue");
        v9 = sub_1000B7B10(v8);
        v10 = v9;
        v11 = v9;
        v12 = *(_QWORD *)(v349 + 24);
        if (v12)
        {
          v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            a2 = v9;
            if (v12 <= v9)
              a2 = v9 % v12;
          }
          else
          {
            a2 = (v12 - 1) & v9;
          }
          v14 = *(void ***)(*v6 + 8 * a2);
          if (v14)
          {
            v15 = *v14;
            if (*v14)
            {
              if (v13.u32[0] < 2uLL)
              {
                while (1)
                {
                  v17 = v15[1];
                  if (v17 == v9)
                  {
                    if (*((_DWORD *)v15 + 4) == v9)
                      goto LABEL_54;
                  }
                  else if ((v17 & (v12 - 1)) != a2)
                  {
                    goto LABEL_30;
                  }
                  v15 = (_QWORD *)*v15;
                  if (!v15)
                    goto LABEL_30;
                }
              }
              do
              {
                v16 = v15[1];
                if (v16 == v9)
                {
                  if (*((_DWORD *)v15 + 4) == v9)
                    goto LABEL_54;
                }
                else
                {
                  if (v16 >= v12)
                    v16 %= v12;
                  if (v16 != a2)
                    break;
                }
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
          }
        }
LABEL_30:
        v15 = operator new(0x48uLL);
        *v15 = 0;
        v15[1] = v11;
        *((_DWORD *)v15 + 4) = v10;
        v15[7] = 0;
        v15[8] = 0;
        v15[3] = 10000000000;
        v15[4] = 0;
        v15[5] = 0;
        v15[6] = 0;
        *((_DWORD *)v15 + 14) = 0;
        v18 = (float)(unint64_t)(*(_QWORD *)(v349 + 40) + 1);
        v19 = *(float *)(v349 + 48);
        if (v12 && (float)(v19 * (float)v12) >= v18)
        {
          v20 = *v6;
          v21 = *(_QWORD **)(*v6 + 8 * a2);
          if (v21)
            goto LABEL_33;
        }
        else
        {
          v22 = (v12 & (v12 - 1)) != 0;
          if (v12 < 3)
            v22 = 1;
          v23 = v22 | (2 * v12);
          v24 = vcvtps_u32_f32(v18 / v19);
          if (v23 <= v24)
            v25 = v24;
          else
            v25 = v23;
          sub_1002ED5FC((uint64_t)v6, v25);
          v12 = *(_QWORD *)(v349 + 24);
          v26 = v12 - 1;
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v12 <= v11)
            {
              a2 = v11 % v12;
              v20 = *v6;
              v21 = *(_QWORD **)(*v6 + 8 * (v11 % v12));
              if (v21)
              {
LABEL_33:
                *v15 = *v21;
LABEL_52:
                *v21 = v15;
                goto LABEL_53;
              }
            }
            else
            {
              a2 = v11;
              v20 = *v6;
              v21 = *(_QWORD **)(*v6 + 8 * v11);
              if (v21)
                goto LABEL_33;
            }
          }
          else
          {
            a2 = v26 & v11;
            v20 = *v6;
            v21 = *(_QWORD **)(*v6 + 8 * (v26 & v11));
            if (v21)
              goto LABEL_33;
          }
        }
        *v15 = *v338;
        *v338 = v15;
        *(_QWORD *)(v20 + 8 * a2) = v338;
        if (*v15)
        {
          v27 = *(_QWORD *)(*v15 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v27 >= v12)
              v27 %= v12;
          }
          else
          {
            v27 &= v12 - 1;
          }
          v21 = (_QWORD *)(*v6 + 8 * v27);
          goto LABEL_52;
        }
LABEL_53:
        ++*(_QWORD *)(v349 + 40);
LABEL_54:
        v352 = 0u;
        v353 = 0u;
        *(_OWORD *)v350 = 0u;
        v351 = 0u;
        v28 = v344;
        v29 = 0;
        v30 = (char *)objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", v350, __p, 16);
        if (v30)
        {
          v31 = *(_QWORD *)v351;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v351 != v31)
                objc_enumerationMutation(v28);
              if (objc_msgSend(*((id *)v350[1] + (_QWORD)j), "channel") == v8)
                ++v29;
            }
            v30 = (char *)objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", v350, __p, 16);
          }
          while (v30);
        }

        v34 = (char *)v15[5];
        v33 = v15[6];
        if ((unint64_t)v34 >= v33)
        {
          v36 = (char *)v15[4];
          v37 = (v34 - v36) >> 4;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60)
            sub_1000D02C0();
          v39 = v33 - (_QWORD)v36;
          if (v39 >> 3 > v38)
            v38 = v39 >> 3;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
            v40 = 0xFFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 >> 60)
              sub_1000CDEB8();
            v41 = (char *)operator new(16 * v40);
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[16 * v37];
          *(_QWORD *)v42 = v347;
          *((_DWORD *)v42 + 2) = v29;
          v43 = v42;
          if (v34 != v36)
          {
            do
            {
              *((_OWORD *)v43 - 1) = *((_OWORD *)v34 - 1);
              v43 -= 16;
              v34 -= 16;
            }
            while (v34 != v36);
            v34 = (char *)v15[4];
          }
          a2 = 2;
          v35 = v42 + 16;
          v15[4] = v43;
          v15[5] = v42 + 16;
          v15[6] = &v41[16 * v40];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v34 = v347;
          *((_DWORD *)v34 + 2) = v29;
          v35 = v34 + 16;
          a2 = 2;
        }
        v15[5] = v35;
        v44 = (char *)v15[4];
        v45 = ((v35 - v44) >> 4) - 1;
        if (v35 - v44 == 16)
        {
          *((_DWORD *)v15 + 14) = 1;
        }
        else if ((unint64_t)(v35 - v44) >= 0x10)
        {
          v46 = 0;
          if ((v35 - v44) >> 4 != 1)
          {
            v47 = *(_QWORD *)&v44[16 * v45];
            v48 = v15[3];
            v49 = (uint64_t *)v15[4];
            while (1)
            {
              v50 = *v49;
              v49 += 2;
              if (v48 >= v47 - v50)
                break;
              ++v46;
              *((_DWORD *)v15 + 14) = 2;
              if (v45 == v46)
                goto LABEL_88;
            }
          }
          if (v46 == v45)
          {
LABEL_88:
            *((_DWORD *)v15 + 14) = 1;
            v46 = ((v35 - v44) >> 4) - 1;
          }
          memset(v358, 0, sizeof(v358));
          if (v46)
          {
            if (v46 < 0)
              sub_1000D02C0();
            v51 = &v44[16 * v46];
            v52 = v35 - v51;
            if (v52)
              memmove(v44, v51, v52);
            v15[5] = &v44[v52];
          }
        }
        v15[8] = v347;
      }
      v5 = (char *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v354, v361, 16);
      if (!v5)
      {
LABEL_95:

        a1 = v349;
        break;
      }
    }
  }
  if (*(_DWORD *)(a1 + 8))
  {
    v53 = [WifiScannerSettings alloc];
    v54 = v349;
    v55 = *(void **)(v349 + 128);
    *(_OWORD *)v361 = 0u;
    *(_OWORD *)v362 = 0u;
    v363 = 1065353216;
    v364 = v55;
    v56 = *(_DWORD *)(v349 + 8);
    if (!v56)
    {
      sub_1000D5048(v354, "");
      sub_100227518("Cannot pickChannels in UNINITALIZED state ", (std::string *)__p);
      sub_100174738((uint64_t)v354, (uint64_t)__p, 1);
      if (SBYTE7(v360) < 0)
        operator delete(__p[0]);
      if (SBYTE7(v355) < 0)
        operator delete(v354[0]);
      sub_1000F2AE4((uint64_t)v350);
    }
    if (v56 == 1)
    {
      v57 = *(_QWORD *)(v349 + 88);
      v58 = (v57 - *(_QWORD *)(v349 + 80)) >> 2 >= (unint64_t)v55 - (unint64_t)v362[1]
          ? (_BYTE *)v55 - (char *)v362[1]
          : (v57 - *(_QWORD *)(v349 + 80)) >> 2;
      if (v58)
      {
        do
        {
          LODWORD(v358[0]) = *(_DWORD *)(v57 - 4);
          sub_1002ED8FC((uint64_t)v361, (int *)v358, v358);
          if (v362[1] > v364)
          {
            sub_1000D5048(v354, "");
            sub_100263C44("Selected channels cannot exceed channelsPerScanCount", (std::string *)__p);
            sub_100174738((uint64_t)v354, (uint64_t)__p, 1);
            if (SBYTE7(v360) < 0)
              operator delete(__p[0]);
            if (SBYTE7(v355) < 0)
              operator delete(v354[0]);
            sub_1000F2AE4((uint64_t)v350);
          }
          v57 = *(_QWORD *)(v349 + 88) - 4;
          *(_QWORD *)(v349 + 88) = v57;
          --v58;
        }
        while (v58);
        v55 = v364;
        v54 = v349;
      }
    }
    v67 = v362[1];
    if (v362[1] >= v55)
    {
      v105 = sub_1002ED868((uint64_t)v361);
      v106 = (id)objc_claimAutoreleasedReturnValue(v105);
      v108 = v362[0];
      if (!v362[0])
        goto LABEL_173;
      goto LABEL_172;
    }
    v339 = v53;
    v68 = *(uint64_t **)(v54 + 32);
    if (v68)
    {
      v69 = 0;
      v70 = 0;
      v71 = 0;
      while (1)
      {
        v72 = sub_100170BB4(*((_DWORD *)v68 + 4));
        if (v361[1])
        {
          v73 = (uint8x8_t)vcnt_s8((int8x8_t)v361[1]);
          v73.i16[0] = vaddlv_u8(v73);
          if (v73.u32[0] > 1uLL)
          {
            v74 = v72;
            if (v361[1] <= (void *)v72)
              v74 = v72 % (unint64_t)v361[1];
          }
          else
          {
            v74 = ((unint64_t)v361[1] - 1) & v72;
          }
          v75 = (uint64_t **)*((_QWORD *)v361[0] + v74);
          if (v75)
          {
            v76 = *v75;
            if (v76)
            {
              if (v73.u32[0] < 2uLL)
              {
                while (1)
                {
                  v78 = v76[1];
                  if (v78 == v72)
                  {
                    if (*((_DWORD *)v76 + 4) == v72)
                      goto LABEL_166;
                  }
                  else if ((v78 & ((uint64_t)v361[1] - 1)) != v74)
                  {
                    goto LABEL_138;
                  }
                  v76 = (uint64_t *)*v76;
                  if (!v76)
                    goto LABEL_138;
                }
              }
              do
              {
                v77 = v76[1];
                if (v77 == v72)
                {
                  if (*((_DWORD *)v76 + 4) == v72)
                    goto LABEL_166;
                }
                else
                {
                  if ((void *)v77 >= v361[1])
                    v77 %= (unint64_t)v361[1];
                  if (v77 != v74)
                    break;
                }
                v76 = (uint64_t *)*v76;
              }
              while (v76);
            }
          }
        }
LABEL_138:
        v79 = v68[4];
        v80 = v68[5];
        if (v79 == v80)
        {
          v84 = 0.0;
        }
        else
        {
          v81 = v80 - v79 - 16;
          if (v81 >= 0x80)
          {
            v85 = (v81 >> 4) + 1;
            v86 = v85 & 7;
            if ((v85 & 7) == 0)
              v86 = 8;
            v87 = v85 - v86;
            v83 = v79 + 16 * v87;
            v88 = (const float *)(v79 + 72);
            v89 = 0uLL;
            v90 = 0uLL;
            do
            {
              v91 = v88 - 16;
              v92 = (unsigned __int128)vld4q_f32(v91);
              v93 = (unsigned __int128)vld4q_f32(v88);
              v89 = vaddq_s32((int32x4_t)v92, v89);
              v90 = vaddq_s32((int32x4_t)v93, v90);
              v88 += 32;
              v87 -= 8;
            }
            while (v87);
            v82 = vaddvq_s32(vaddq_s32(v90, v89));
          }
          else
          {
            v82 = 0;
            v83 = v68[4];
          }
          do
          {
            v82 += *(_DWORD *)(v83 + 8);
            v83 += 16;
          }
          while (v83 != v80);
          v84 = (double)v82;
        }
        v94 = *((_DWORD *)v68 + 4);
        v95 = v347 - v68[8];
        v96 = v84 / (double)(unint64_t)((v80 - v79) >> 4);
        if (v70 < (double *)v69)
        {
          *(_QWORD *)v70 = v95;
          v70[1] = v96;
          *((_DWORD *)v70 + 6) = v94;
          v70 += 4;
          goto LABEL_165;
        }
        v97 = ((char *)v70 - (char *)v71) >> 5;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 59)
          sub_1000D02C0();
        if ((v69 - (char *)v71) >> 4 > v98)
          v98 = (v69 - (char *)v71) >> 4;
        if ((unint64_t)(v69 - (char *)v71) >= 0x7FFFFFFFFFFFFFE0)
          v99 = 0x7FFFFFFFFFFFFFFLL;
        else
          v99 = v98;
        if (v99)
        {
          if (v99 >> 59)
            sub_1000CDEB8();
          v100 = (char *)operator new(32 * v99);
          v101 = (uint64_t)&v100[32 * v97];
          *(_QWORD *)v101 = v95;
          *(double *)(v101 + 8) = v96;
          *(_DWORD *)(v101 + 24) = v94;
          if (v70 == v71)
          {
LABEL_169:
            v104 = (char *)v101;
            v69 = &v100[32 * v99];
            v70 = (double *)(v101 + 32);
            if (!v71)
              goto LABEL_164;
            goto LABEL_163;
          }
        }
        else
        {
          v100 = 0;
          v101 = 32 * v97;
          *(_QWORD *)v101 = v95;
          *(double *)(v101 + 8) = v96;
          *(_DWORD *)(v101 + 24) = v94;
          if (v70 == v71)
            goto LABEL_169;
        }
        v102 = v101;
        do
        {
          v103 = *((_OWORD *)v70 - 1);
          v104 = (char *)(v102 - 32);
          *(_OWORD *)(v102 - 32) = *((_OWORD *)v70 - 2);
          *(_OWORD *)(v102 - 16) = v103;
          v70 -= 4;
          v102 -= 32;
        }
        while (v70 != v71);
        v69 = &v100[32 * v99];
        v70 = (double *)(v101 + 32);
        if (!v71)
          goto LABEL_164;
LABEL_163:
        operator delete(v71);
LABEL_164:
        v71 = (double *)v104;
LABEL_165:
        v54 = v349;
LABEL_166:
        v68 = (uint64_t *)*v68;
        if (!v68)
        {
          v67 = v362[1];
          v55 = v364;
          goto LABEL_195;
        }
      }
    }
    v70 = 0;
    v71 = 0;
LABEL_195:
    v125 = (_BYTE *)v55 - v67;
    if (((char *)v70 - (char *)v71) >> 5 < v125)
      v125 = ((char *)v70 - (char *)v71) >> 5;
    v335 = v125;
    v336 = v125 << 32;
    v354[0] = (void *)v54;
    obja = (int *)v71;
    v343 = (char *)&v71[4 * (int)v125];
    if (v343 == (char *)v70)
      goto LABEL_445;
    v126 = (char *)v71;
    while (1)
    {
      v127 = ((char *)v70 - v126) >> 5;
      if (v127 < 2)
        goto LABEL_445;
      if (v127 == 3)
      {
        sub_1002EDC1C((uint64_t *)v126, (uint64_t *)v126 + 4, (uint64_t *)v70 - 4, (uint64_t *)v354);
        goto LABEL_445;
      }
      if (v127 == 2)
        break;
      if ((char *)v70 - v126 <= 255)
      {
        if (v70 - 4 == (double *)v126)
          goto LABEL_445;
LABEL_416:
        if (v126 == (char *)v70)
          goto LABEL_415;
        v297 = v126 + 32;
        if (v126 + 32 == (char *)v70)
          goto LABEL_415;
        v298 = *(_QWORD *)(v54 + 144);
        v299 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
        v300 = 1000000 * v298;
        v301 = (double)v298 * 1000000.0;
        v302 = (double *)v126;
        while (1)
        {
          v303 = *(_QWORD *)v297;
          v304 = *(_QWORD *)v297 + v299;
          v305 = *(_QWORD *)v302;
          v306 = *(_QWORD *)v302 + v299;
          if (v304 < v300 && v306 < v300)
          {
            v308 = (double)v304 / v301;
            v309 = (double)v306;
            if (*(_BYTE *)(v54 + 152))
            {
              v310 = v308 * (1.0 - exp(-*((double *)v297 + 1)));
              v311 = v309 / v301 * (1.0 - exp(-v302[1]));
              v312 = v310 == v311;
              if (v310 <= v311)
                goto LABEL_432;
            }
            else
            {
              v312 = v308 == v309 / v301;
              if (v308 <= v309 / v301)
              {
LABEL_432:
                if (!v312)
                  goto LABEL_420;
LABEL_434:
                if (*((_DWORD *)v302 + 6) <= *((_DWORD *)v297 + 6))
                  goto LABEL_420;
              }
            }
          }
          else if (v305 >= v303)
          {
            if (v303 != v305)
              goto LABEL_420;
            goto LABEL_434;
          }
          v302 = (double *)v297;
LABEL_420:
          v297 += 32;
          if (v297 == (char *)v70)
          {
            if (v302 != (double *)v126)
            {
              v313 = *((_OWORD *)v126 + 1);
              *(_OWORD *)__p = *(_OWORD *)v126;
              v360 = v313;
              v314 = *((_OWORD *)v302 + 1);
              *(_OWORD *)v126 = *(_OWORD *)v302;
              *((_OWORD *)v126 + 1) = v314;
              v315 = v360;
              *(_OWORD *)v302 = *(_OWORD *)__p;
              *((_OWORD *)v302 + 1) = v315;
            }
LABEL_415:
            v126 += 32;
            if (v126 != (char *)(v70 - 4))
              goto LABEL_416;
LABEL_445:
            v323 = sub_1002ED868((uint64_t)v361);
            v324 = (void *)objc_claimAutoreleasedReturnValue(v323);
            v53 = v339;
            if (v336)
            {
              v325 = 32 * v335;
              v326 = obja + 6;
              do
              {
                v327 = *v326;
                v326 += 8;
                v328 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100170BB4(v327));
                v329 = (void *)objc_claimAutoreleasedReturnValue(v328);
                objc_msgSend(v324, "addObject:", v329);

                v325 -= 32;
              }
              while (v325);
            }
            v106 = v324;

            if (obja)
              operator delete(obja);
            v54 = v349;
            v108 = v362[0];
            if (!v362[0])
            {
LABEL_173:
              v110 = v361[0];
              v361[0] = 0;
              if (v110)
                operator delete(v110);
              v111 = *(_QWORD *)(v54 + 64);
              v112 = atomic_load((unsigned int *)(v54 + 72));
              LODWORD(v107) = v112;
              LOBYTE(v112) = atomic_load((unsigned __int8 *)(v54 + 104));
              v113 = -[WifiScannerSettings initWithChannels:dwell:scanType:includingOffChannelResults:atDutyCycle:asLowPriority:](v53, "initWithChannels:dwell:scanType:includingOffChannelResults:atDutyCycle:asLowPriority:", v106, v111, 2, 0, v112 & 1, v107);

              goto LABEL_185;
            }
            do
            {
LABEL_172:
              v109 = (_QWORD *)*v108;
              operator delete(v108);
              v108 = v109;
            }
            while (v109);
            goto LABEL_173;
          }
        }
      }
      v128 = v127 >> 1;
      v129 = (unint64_t)&v126[32 * (v127 >> 1)];
      v130 = (unint64_t)(v70 - 4);
      v348 = sub_1002EDC1C((uint64_t *)v126, (uint64_t *)v129, (uint64_t *)v70 - 4, (uint64_t *)v354);
      v131 = *(_QWORD *)(v54 + 144);
      v132 = *(_QWORD *)v126;
      v133 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
      v134 = v133 + *(_QWORD *)v126;
      v135 = 1000000 * v131;
      v136 = *(_QWORD *)v129;
      v137 = *(_QWORD *)v129 + v133;
      v138 = v134 < 1000000 * v131 && v137 < v135;
      if (v138)
      {
        v330 = v133 + *(_QWORD *)v126;
        v331 = *(_QWORD *)(v54 + 144);
        v139 = (double)v131 * 1000000.0;
        v140 = (double)v134 / v139;
        if (*(_BYTE *)(v54 + 152))
        {
          v345 = *(_QWORD *)v126;
          v141 = v140 * (1.0 - exp(-*((double *)v126 + 1)));
          v142 = exp(-*(double *)(v129 + 8));
          v132 = v345;
          v143 = (double)v137 / v139 * (1.0 - v142);
          v144 = v141 == v143;
          if (v141 > v143)
            goto LABEL_225;
        }
        else
        {
          v145 = (double)v137 / v139;
          v144 = v140 == v145;
          if (v140 > v145)
            goto LABEL_225;
        }
        v134 = v330;
        v131 = v331;
        if (!v144)
          goto LABEL_217;
LABEL_216:
        if (*(_DWORD *)&v126[32 * v128 + 24] > *((_DWORD *)v126 + 6))
          goto LABEL_225;
        goto LABEL_217;
      }
      if (v136 < v132)
        goto LABEL_225;
      if (v132 == v136)
        goto LABEL_216;
LABEL_217:
      v146 = (unint64_t)(v70 - 8);
      if (v126 == (char *)(v70 - 8))
      {
LABEL_288:
        v203 = (unint64_t)(v126 + 32);
        v204 = *(_QWORD *)v130;
        if (v134 >= v135 || (v205 = v204 + v133, v204 + v133 >= v135))
        {
          if (v204 < v132)
            goto LABEL_366;
          if (v132 == v204)
            goto LABEL_349;
          goto LABEL_350;
        }
        v332 = v131;
        v206 = v134;
        v207 = (double)v131 * 1000000.0;
        v208 = (double)v134 / v207;
        if (*(_BYTE *)(v54 + 152))
        {
          v209 = v132;
          v208 = v208 * (1.0 - exp(-*((double *)v126 + 1)));
          v210 = exp(-*(v70 - 3));
          v132 = v209;
          v211 = (double)v205 / v207 * (1.0 - v210);
        }
        else
        {
          v211 = (double)v205 / v207;
        }
        if (v208 <= v211)
        {
          v134 = v206;
          v131 = v332;
          if (v208 == v211)
          {
LABEL_349:
            if (*((_DWORD *)v70 - 2) > *((_DWORD *)v126 + 6))
              goto LABEL_366;
          }
LABEL_350:
          if (v203 == v130)
            goto LABEL_445;
          v248 = (double)v131 * 1000000.0;
          v249 = (double)v134 / v248;
          while (2)
          {
            v250 = *(_QWORD *)v203;
            if (v134 >= v135 || (v251 = v250 + v133, v250 + v133 >= v135))
            {
              if (v250 < v132)
                goto LABEL_365;
              if (v132 == v250)
                goto LABEL_352;
            }
            else
            {
              if (*(_BYTE *)(v54 + 152))
              {
                v252 = v132;
                v253 = v134;
                v254 = v249 * (1.0 - exp(-*((double *)v126 + 1)));
                v255 = exp(-*(double *)(v203 + 8));
                v134 = v253;
                v132 = v252;
                v256 = (double)v251 / v248 * (1.0 - v255);
                v257 = v254 == v256;
                if (v254 > v256)
                  goto LABEL_365;
              }
              else
              {
                v258 = (double)v251 / v248;
                v257 = v249 == v258;
                if (v249 > v258)
                {
LABEL_365:
                  v259 = *(_OWORD *)(v203 + 16);
                  *(_OWORD *)__p = *(_OWORD *)v203;
                  v360 = v259;
                  v260 = *((_OWORD *)v70 - 1);
                  *(_OWORD *)v203 = *(_OWORD *)v130;
                  *(_OWORD *)(v203 + 16) = v260;
                  v203 += 32;
                  v261 = v360;
                  *(_OWORD *)v130 = *(_OWORD *)__p;
                  *((_OWORD *)v70 - 1) = v261;
                  break;
                }
              }
              if (!v257)
                goto LABEL_353;
LABEL_352:
              if (*(_DWORD *)(v203 + 24) > *((_DWORD *)v126 + 6))
                goto LABEL_365;
            }
LABEL_353:
            v203 += 32;
            if (v203 == v130)
              goto LABEL_445;
            continue;
          }
        }
LABEL_366:
        if (v203 == v130)
          goto LABEL_445;
        while (2)
        {
          v262 = *(_QWORD *)(v54 + 144);
          v263 = *(_QWORD *)v126;
          v264 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
          v265 = v264 + *(_QWORD *)v126;
          v266 = 1000000 * v262;
          v267 = (double)v262 * 1000000.0;
          v268 = (double)v265 / v267;
          if (v265 >= 1000000 * v262)
          {
            v269 = *(_QWORD *)v203;
            if (*(_QWORD *)v203 < v263)
              goto LABEL_388;
            do
            {
              if (v263 == v269 && *(_DWORD *)(v203 + 24) > *((_DWORD *)v126 + 6))
                break;
              v276 = *(_QWORD *)(v203 + 32);
              v203 += 32;
              v269 = v276;
            }
            while (v276 >= v263);
LABEL_385:
            if (v265 >= v266)
            {
LABEL_388:
              do
              {
                do
                {
                  v278 = *(_QWORD *)(v130 - 32);
                  v130 -= 32;
                  v277 = v278;
                }
                while (v278 < v263);
              }
              while (v263 == v277 && *(_DWORD *)(v130 + 24) > *((_DWORD *)v126 + 6));
LABEL_400:
              if (v203 >= v130)
              {
                if (v203 > (unint64_t)v343)
                  goto LABEL_445;
                goto LABEL_403;
              }
              v286 = *(_OWORD *)(v203 + 16);
              *(_OWORD *)__p = *(_OWORD *)v203;
              v360 = v286;
              v287 = *(_OWORD *)(v130 + 16);
              *(_OWORD *)v203 = *(_OWORD *)v130;
              *(_OWORD *)(v203 + 16) = v287;
              v203 += 32;
              v288 = v360;
              *(_OWORD *)v130 = *(_OWORD *)__p;
              *(_OWORD *)(v130 + 16) = v288;
              continue;
            }
            while (1)
            {
              v280 = *(_QWORD *)(v130 - 32);
              v130 -= 32;
              v279 = v280;
              v281 = v280 + v264;
              if (v280 + v264 >= v266)
              {
                if (v279 < v263)
                  continue;
                if (v263 != v279)
                  goto LABEL_400;
              }
              else
              {
                if (*(_BYTE *)(v54 + 152))
                {
                  v282 = v268 * (1.0 - exp(-*((double *)v126 + 1)));
                  v283 = (double)v281 / v267 * (1.0 - exp(-*(double *)(v130 + 8)));
                  v284 = v282 == v283;
                  if (v282 > v283)
                    continue;
                }
                else
                {
                  v285 = (double)v281 / v267;
                  v284 = v268 == v285;
                  if (v268 > v285)
                    continue;
                }
                if (!v284)
                  goto LABEL_400;
              }
              if (*(_DWORD *)(v130 + 24) <= *((_DWORD *)v126 + 6))
                goto LABEL_400;
            }
          }
          break;
        }
        while (2)
        {
          v270 = *(_QWORD *)v203;
          v271 = *(_QWORD *)v203 + v264;
          if (v271 >= v266)
          {
            if (v270 < v263)
              goto LABEL_385;
            if (v263 == v270)
              goto LABEL_370;
          }
          else
          {
            v272 = (double)v271;
            if (*(_BYTE *)(v54 + 152))
            {
              v273 = v268 * (1.0 - exp(-*((double *)v126 + 1)));
              v274 = v272 / v267 * (1.0 - exp(-*(double *)(v203 + 8)));
              v275 = v273 == v274;
              if (v273 > v274)
                goto LABEL_385;
            }
            else
            {
              v275 = v268 == v272 / v267;
              if (v268 > v272 / v267)
                goto LABEL_385;
            }
            if (!v275)
              goto LABEL_371;
LABEL_370:
            if (*(_DWORD *)(v203 + 24) > *((_DWORD *)v126 + 6))
              goto LABEL_385;
          }
LABEL_371:
          v203 += 32;
          continue;
        }
      }
      v147 = &v126[32 * v128 + 24];
      if (v136 + v133 < v135)
      {
        v148 = (double)v131 * 1000000.0;
        v149 = (double)(v136 + v133) / v148;
        v346 = v132;
        v333 = v133;
        v334 = v135;
        while (1)
        {
          v182 = *(_QWORD *)v146;
          v183 = *(_QWORD *)v146 + v133;
          if (v183 >= v135)
          {
            if (v136 < v182)
              goto LABEL_224;
            if (v182 == v136)
              goto LABEL_268;
          }
          else
          {
            v184 = (double)v183 / v148;
            if (*(_BYTE *)(v54 + 152))
            {
              v185 = v134;
              v186 = v131;
              v187 = v184 * (1.0 - exp(-*(double *)(v146 + 8)));
              v188 = exp(-*(double *)(v129 + 8));
              v131 = v186;
              v134 = v185;
              v132 = v346;
              v189 = v149 * (1.0 - v188);
              v190 = v187 == v189;
              if (v187 > v189)
                goto LABEL_224;
            }
            else
            {
              v190 = v184 == v149;
              if (v184 > v149)
                goto LABEL_224;
            }
            v133 = v333;
            v135 = v334;
            if (v190)
            {
LABEL_268:
              if (*(_DWORD *)v147 > *(_DWORD *)(v146 + 24))
                goto LABEL_224;
            }
          }
          v146 -= 32;
          if ((char *)v146 == v126)
            goto LABEL_288;
        }
      }
      while (v136 >= *(_QWORD *)v146 && (*(_QWORD *)v146 != v136 || *(_DWORD *)v147 <= *(_DWORD *)(v146 + 24)))
      {
        v146 -= 32;
        if ((char *)v146 == v126)
          goto LABEL_288;
      }
LABEL_224:
      v150 = *((_OWORD *)v126 + 1);
      *(_OWORD *)__p = *(_OWORD *)v126;
      v360 = v150;
      v151 = *(_OWORD *)(v146 + 16);
      *(_OWORD *)v126 = *(_OWORD *)v146;
      *((_OWORD *)v126 + 1) = v151;
      v152 = v360;
      *(_OWORD *)v146 = *(_OWORD *)__p;
      *(_OWORD *)(v146 + 16) = v152;
      ++v348;
      v130 = v146;
LABEL_225:
      if ((unint64_t)(v126 + 32) >= v130)
      {
        k = 1;
        goto LABEL_281;
      }
      for (k = 1; ; ++k)
      {
        v154 = *(_QWORD *)(v54 + 144);
        v155 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
        v156 = 1000000 * v154;
        v157 = *(_QWORD *)v129;
        v158 = *(_QWORD *)v129 + v155;
        v159 = (double)v154 * 1000000.0;
        v160 = (double)v158 / v159;
        v161 = v158 < 1000000 * v154;
        if (v158 < 1000000 * v154)
        {
          for (m = &v126[32 * k + 24]; ; m += 32)
          {
            v163 = *((_QWORD *)m - 3);
            if (v163 + v155 >= v156)
            {
              if (v157 < v163)
                goto LABEL_233;
              if (v163 != v157)
              {
LABEL_249:
                v54 = v349;
                if (v161)
                  goto LABEL_258;
                goto LABEL_250;
              }
            }
            else
            {
              v164 = (double)(v163 + v155) / v159;
              if (*(_BYTE *)(v349 + 152))
              {
                v165 = v164 * (1.0 - exp(-*((double *)m - 2)));
                v166 = v160 * (1.0 - exp(-*(double *)(v129 + 8)));
                v167 = v165 == v166;
                if (v165 > v166)
                  goto LABEL_233;
              }
              else
              {
                v167 = v164 == v160;
                if (v164 > v160)
                  goto LABEL_233;
              }
              if (!v167)
                goto LABEL_249;
            }
            if (*(_DWORD *)(v129 + 24) <= *(_DWORD *)m)
              goto LABEL_249;
LABEL_233:
            ++k;
          }
        }
        for (n = &v126[32 * k];
              v157 < *(_QWORD *)n || *(_QWORD *)n == v157 && *(_DWORD *)(v129 + 24) > *((_DWORD *)n + 6);
              n += 32)
        {
          ++k;
        }
        if (v161)
        {
          while (1)
          {
LABEL_258:
            while (1)
            {
              v176 = *(_QWORD *)(v130 - 32);
              v130 -= 32;
              v175 = v176;
              v177 = v176 + v155;
              if (v176 + v155 < v156)
                break;
              if (v157 < v175)
                goto LABEL_253;
              if (v175 == v157)
                goto LABEL_257;
            }
            v178 = (double)v177 / v159;
            if (*(_BYTE *)(v54 + 152))
            {
              v179 = v178 * (1.0 - exp(-*(double *)(v130 + 8)));
              v180 = v160 * (1.0 - exp(-*(double *)(v129 + 8)));
              v181 = v179 == v180;
              if (v179 > v180)
                goto LABEL_253;
            }
            else
            {
              v181 = v178 == v160;
              if (v178 > v160)
                goto LABEL_253;
            }
            if (v181)
            {
LABEL_257:
              if (*(_DWORD *)(v129 + 24) > *(_DWORD *)(v130 + 24))
                goto LABEL_253;
            }
          }
        }
        do
        {
LABEL_250:
          v170 = *(_QWORD *)(v130 - 32);
          v130 -= 32;
          v169 = v170;
        }
        while (v157 >= v170 && (v169 != v157 || *(_DWORD *)(v129 + 24) <= *(_DWORD *)(v130 + 24)));
LABEL_253:
        v171 = &v126[32 * k];
        if ((unint64_t)v171 >= v130)
          break;
        v172 = *((_OWORD *)v171 + 1);
        *(_OWORD *)__p = *(_OWORD *)v171;
        v360 = v172;
        v173 = *(_OWORD *)(v130 + 16);
        *(_OWORD *)v171 = *(_OWORD *)v130;
        *((_OWORD *)v171 + 1) = v173;
        v174 = v360;
        *(_OWORD *)v130 = *(_OWORD *)__p;
        *(_OWORD *)(v130 + 16) = v174;
        ++v348;
        if ((char *)v129 == v171)
          v129 = v130;
      }
LABEL_281:
      v191 = &v126[32 * k];
      if (v191 != (char *)v129)
      {
        v192 = *(_QWORD *)(v54 + 144);
        v193 = *(_QWORD *)v129;
        v194 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
        v195 = v194 + *(_QWORD *)v129;
        v196 = *(_QWORD *)v191;
        v197 = *(_QWORD *)v191 + v194;
        if (v195 < 1000000 * v192 && v197 < 1000000 * v192)
        {
          v212 = (double)v192 * 1000000.0;
          v213 = (double)v195 / v212;
          v214 = (double)v197;
          if (*(_BYTE *)(v54 + 152))
          {
            v215 = v213 * (1.0 - exp(-*(double *)(v129 + 8)));
            v216 = v214 / v212 * (1.0 - exp(-*((double *)v191 + 1)));
            v217 = v215 == v216;
            if (v215 > v216)
              goto LABEL_287;
          }
          else
          {
            v217 = v213 == v214 / v212;
            if (v213 > v214 / v212)
              goto LABEL_287;
          }
          if (v217 && *(_DWORD *)&v126[32 * k + 24] > *(_DWORD *)(v129 + 24))
          {
LABEL_287:
            v199 = *((_OWORD *)v191 + 1);
            *(_OWORD *)__p = *(_OWORD *)v191;
            v360 = v199;
            v200 = *(_OWORD *)(v129 + 16);
            *(_OWORD *)v191 = *(_OWORD *)v129;
            *((_OWORD *)v191 + 1) = v200;
            v201 = v360;
            *(_OWORD *)v129 = *(_OWORD *)__p;
            *(_OWORD *)(v129 + 16) = v201;
            v202 = v348 + 1;
            goto LABEL_306;
          }
        }
        else if (v196 < v193 || v193 == v196 && *(_DWORD *)&v126[32 * k + 24] > *(_DWORD *)(v129 + 24))
        {
          goto LABEL_287;
        }
      }
      v202 = v348;
LABEL_306:
      if (v191 == v343)
        goto LABEL_445;
      if (!v202)
      {
        if (v191 > v343)
        {
          if (k == 1)
            goto LABEL_445;
          v218 = *(_QWORD *)(v54 + 144);
          v219 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
          v220 = 1000000 * v218;
          v221 = (double)v218 * 1000000.0;
          v223 = v126 + 56;
          v222 = *(_QWORD *)v126;
          v224 = 32 * k - 32;
          while (1)
          {
            v225 = *((_QWORD *)v223 - 3);
            v226 = v222 + v219;
            if (v225 + v219 < v220 && v226 < v220)
            {
              v228 = (double)(v225 + v219) / v221;
              v229 = (double)v226;
              if (*(_BYTE *)(v54 + 152))
              {
                v230 = v228 * (1.0 - exp(-*((double *)v223 - 2)));
                v231 = v229 / v221 * (1.0 - exp(-*((double *)v223 - 6)));
                v232 = v230 == v231;
                if (v230 > v231)
                  goto LABEL_308;
              }
              else
              {
                v232 = v228 == v229 / v221;
                if (v228 > v229 / v221)
                  goto LABEL_308;
              }
              if (v232)
              {
LABEL_314:
                if (*(v223 - 8) > *v223)
                  goto LABEL_308;
              }
            }
            else
            {
              if (v222 < v225)
                goto LABEL_308;
              if (v225 == v222)
                goto LABEL_314;
            }
            v223 += 8;
            v222 = v225;
            v224 -= 32;
            if (!v224)
              goto LABEL_445;
          }
        }
        if (v191 + 32 == (char *)v70)
          goto LABEL_445;
        v233 = *(_QWORD *)(v54 + 144);
        v234 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
        v235 = 1000000 * v233;
        v236 = (double)v233 * 1000000.0;
        v237 = *(_QWORD *)v191;
        v238 = &v126[32 * k + 56];
        while (1)
        {
          v240 = *((_QWORD *)v238 - 3);
          v241 = v237 + v234;
          if (v240 + v234 < v235 && v241 < v235)
          {
            v243 = (double)(v240 + v234) / v236;
            v244 = (double)v241;
            if (*(_BYTE *)(v54 + 152))
            {
              v245 = v243 * (1.0 - exp(-*((double *)v238 - 2)));
              v246 = v244 / v236 * (1.0 - exp(-*((double *)v238 - 6)));
              v247 = v245 == v246;
              if (v245 > v246)
                break;
            }
            else
            {
              v247 = v243 == v244 / v236;
              if (v243 > v244 / v236)
                break;
            }
            if (v247)
            {
LABEL_331:
              if (*((_DWORD *)v238 - 8) > *(_DWORD *)v238)
                break;
            }
          }
          else
          {
            if (v237 < v240)
              break;
            if (v240 == v237)
              goto LABEL_331;
          }
          v239 = (double *)(v238 + 8);
          v238 += 32;
          v237 = v240;
          if (v239 == v70)
            goto LABEL_445;
        }
      }
LABEL_308:
      if (v191 <= v343)
      {
        v203 = (unint64_t)(v191 + 32);
      }
      else
      {
        v70 = (double *)v191;
        v203 = (unint64_t)v126;
      }
LABEL_403:
      v126 = (char *)v203;
      if (v70 == (double *)v343)
        goto LABEL_445;
    }
    v290 = v70 - 4;
    v289 = *((_QWORD *)v70 - 4);
    v291 = *(_QWORD *)(v54 + 144);
    v292 = 1000000 * *(_QWORD *)(v54 + 136) + 50000000;
    v293 = v292 + v289;
    v294 = *(_QWORD *)v126;
    v138 = v292 + v289 < 1000000 * v291;
    v295 = *(_QWORD *)v126 + v292;
    if (v138 && v295 < 1000000 * v291)
    {
      v316 = (double)v291 * 1000000.0;
      v317 = (double)v293 / v316;
      v318 = (double)v295;
      if (*(_BYTE *)(v54 + 152))
      {
        v317 = v317 * (1.0 - exp(-*(v70 - 3)));
        v319 = v318 / v316 * (1.0 - exp(-*((double *)v126 + 1)));
      }
      else
      {
        v319 = v318 / v316;
      }
      if (v317 <= v319)
      {
        if (v317 != v319)
          goto LABEL_445;
LABEL_443:
        if (*((_DWORD *)v126 + 6) <= *((_DWORD *)v70 - 2))
          goto LABEL_445;
      }
    }
    else if (v294 >= v289)
    {
      if (v289 != v294)
        goto LABEL_445;
      goto LABEL_443;
    }
    v320 = *((_OWORD *)v126 + 1);
    *(_OWORD *)__p = *(_OWORD *)v126;
    v360 = v320;
    v321 = *((_OWORD *)v70 - 1);
    *(_OWORD *)v126 = *(_OWORD *)v290;
    *((_OWORD *)v126 + 1) = v321;
    v322 = v360;
    *(_OWORD *)v290 = *(_OWORD *)__p;
    *((_OWORD *)v70 - 1) = v322;
    goto LABEL_445;
  }
  v59 = (*(uint64_t (**)(_QWORD, unint64_t, id))(**(_QWORD **)(a1 + 112) + 40))(*(_QWORD *)(a1 + 112), v347, v337);
  v60 = (WifiScannerSettings *)objc_claimAutoreleasedReturnValue(v59);
  v62 = *(_DWORD **)(v349 + 80);
  v61 = *(_DWORD **)(v349 + 88);
  if (v62 != v61)
  {
    while (1)
    {
      v63 = *v62;
      v64 = (void *)objc_claimAutoreleasedReturnValue(-[WifiScannerSettings channels](v60, "channels"));
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v63));
      v66 = objc_msgSend(v64, "containsObject:", v65);

      if ((v66 & 1) != 0)
        break;
      if (++v62 == v61)
      {
        v62 = v61;
        goto LABEL_182;
      }
    }
    if (v62 != v61)
    {
      for (ii = v62 + 1; ii != v61; ++ii)
      {
        v115 = *ii;
        v116 = (void *)objc_claimAutoreleasedReturnValue(-[WifiScannerSettings channels](v60, "channels"));
        v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v115));
        v118 = objc_msgSend(v116, "containsObject:", v117);

        if ((v118 & 1) == 0)
          *v62++ = *ii;
      }
    }
  }
LABEL_182:
  if (v62 != *(_DWORD **)(v349 + 88))
    *(_QWORD *)(v349 + 88) = v62;
  v113 = v60;
LABEL_185:
  v119 = (void *)objc_claimAutoreleasedReturnValue(-[WifiScannerSettings channels](v113, "channels"));
  v120 = objc_msgSend(v119, "copy");
  v121 = *(void **)(v349 + 56);
  *(_QWORD *)(v349 + 56) = v120;

  v122 = *(_DWORD *)(v349 + 8);
  if (v122)
  {
    if (v122 != 1)
      goto LABEL_193;
    goto LABEL_187;
  }
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v349 + 112) + 16))(*(_QWORD *)(v349 + 112)))
  {
    if (*(_DWORD *)(v349 + 8) != 1)
      goto LABEL_193;
LABEL_187:
    if (*(_QWORD *)(v349 + 80) == *(_QWORD *)(v349 + 88))
      goto LABEL_191;
    goto LABEL_193;
  }
  *(_DWORD *)(v349 + 8) = 1;
  if (*(_QWORD *)(v349 + 80) == *(_QWORD *)(v349 + 88))
LABEL_191:
    *(_DWORD *)(v349 + 8) = 2;
LABEL_193:
  v123 = v113;

  return v123;
}

void sub_100058B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a28 < 0)
    operator delete(__p);
  sub_10022CAC0((uint64_t)&a62);

  _Unwind_Resume(a1);
}

BOOL sub_100058CF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56);
}

WifiScannerSettings *sub_100058D04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WifiScannerSettings *v9;
  void *v10;
  void *v11;
  double v12;
  uint64_t v13;
  unsigned __int8 v14;
  WifiScannerSettings *v15;
  void *v17;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  if (v2 == v3)
  {
    v7 = *(unsigned int **)(a1 + 72);
    if (v7 == *(unsigned int **)(a1 + 32))
      v7 = *(unsigned int **)(a1 + 24);
    v4 = *v7;
    *(_QWORD *)(a1 + 72) = v7 + 1;
    v8 = atomic_load((unsigned int *)(a1 + 16));
    v5 = *(float *)&v8;
    v6 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v4 = *(unsigned int *)(v3 - 4);
    *(_QWORD *)(a1 + 56) = v3 - 4;
    v5 = 0.5;
    v6 = 110;
  }
  v9 = [WifiScannerSettings alloc];
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v4));
  v17 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  if (v2 == v3)
  {
    v14 = atomic_load((unsigned __int8 *)(a1 + 80));
    v13 = v14 & 1;
  }
  else
  {
    v13 = 1;
  }
  *(float *)&v12 = v5;
  v15 = -[WifiScannerSettings initWithChannels:dwell:scanType:includingOffChannelResults:atDutyCycle:asLowPriority:](v9, "initWithChannels:dwell:scanType:includingOffChannelResults:atDutyCycle:asLowPriority:", v11, v6, 2, 0, v13, v12);

  return v15;
}

void sub_100058E54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000595EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *sub_10005968C(id *a1, const void *a2, void *a3, void *a4, void *a5, void *a6)
{
  dispatch_queue_t *v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  std::chrono::steady_clock::time_point v17;
  NSObject *v18;
  _OWORD *v19;
  dispatch_time_t v20;
  __int128 v22;
  void (*v23)(uint64_t);
  void *v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  *a1 = a1;
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_100404290);
    v15 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_4;
    goto LABEL_3;
  }
  v15 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    v16 = *a1;
    LODWORD(v22) = 134217984;
    *(_QWORD *)((char *)&v22 + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Pending scan information created: %p", (uint8_t *)&v22, 0xCu);
  }
LABEL_4:
  a1[1] = (id)CFRetain(a2);
  objc_initWeak(a1 + 2, v11);
  a1[3] = objc_msgSend(v12, "copy");
  a1[4] = v13;
  a1[5] = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v11[3]);
  a1[6] = objc_msgSend(v14, "copy");
  v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v18 = a1[5];
  a1[7] = (id)v17.__d_.__rep_;
  *((_DWORD *)a1 + 16) = 0;
  *(_QWORD *)&v22 = _NSConcreteStackBlock;
  *((_QWORD *)&v22 + 1) = 3321888768;
  v23 = sub_1002ECCB8;
  v24 = &unk_1004043F0;
  rep = v17.__d_.__rep_;
  v19 = objc_retainBlock(&v22);
  dispatch_source_set_event_handler(v18, v19);

  v20 = dispatch_time(0, 30000000000);
  dispatch_source_set_timer((dispatch_source_t)a1[5], v20, 0x6FC23AC00uLL, 0);
  dispatch_resume((dispatch_object_t)a1[5]);

  return a1;
}

void sub_1000598BC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  dispatch_source_t *v5;
  id *v6;

  sub_1002EC730(v5);

  objc_destroyWeak(v6);
  sub_1002EC7A0((const void **)(v2 + 8));
  sub_1002EC7D4((uint64_t *)v2);

  _Unwind_Resume(a1);
}

void sub_1000599E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100059FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  std::__shared_weak_count *v21;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v21);

  _Unwind_Resume(a1);
}

void sub_10005A194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10005A1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005A1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10005A4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(_QWORD *)(v10 - 56))
    sub_1003444E0();
  _Unwind_Resume(exception_object);
}

void sub_10005A53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (*(_BYTE *)a1)
  {
    if (*(_BYTE *)a2)
    {
      sub_1002661CC(a1, (uint64_t *)(a2 + 8));
    }
    else
    {
      sub_100073074((_QWORD *)(a1 + 8));
      *(_BYTE *)a1 = 0;
    }
  }
  else if (*(_BYTE *)a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    sub_1000B347C(a1 + 24, a2 + 24);
    v7 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)a1 = 1;
  }
}

void sub_10005A5F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16))
    sub_100342060();
  _Unwind_Resume(exception_object);
}

void sub_10005A9F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10005B04C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_10005B5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;

  if (a38 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10005B7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10005B808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005B818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  void *v14;
  void *v15;

  std::exception::~exception(&a14);

  _Unwind_Resume(a1);
}

double sub_10005B834(double *a1, uint64_t a2)
{
  double *v3;
  double *v4;
  double *v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  double *v22;
  double *v23;

  v3 = *(double **)a2;
  v4 = *(double **)(a2 + 8);
  if ((unint64_t)v4 - *(_QWORD *)a2 >= 0x40)
  {
    LODWORD(v23) = 0;
    BYTE4(v23) = 0;
    if (v3 + 2 != v4)
    {
      do
      {
        if (!sub_10005B9D0(a1, v3, v3 + 2, (uint64_t)&v23))
          break;
        v6 = v3 + 4;
        v3 += 2;
      }
      while (v6 != v4);
      if (BYTE4(v23) || (_DWORD)v23)
        return sub_10005BFB0(a1, *(double ***)(a2 + 24), *(double ***)(a2 + 32));
      v3 = *(double **)a2;
      v4 = *(double **)(a2 + 8);
    }
  }
  if (v4 == v3)
    return 0.0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  sub_10005BD78(a1, v3, v4, (uint64_t)&v20, &v23, &v22, (double *)&v21);
  v8 = v22[1];
  v9 = *a1;
  v10 = a1[1];
  v11 = v23[1];
  v12 = *v22 - *v23;
  v13 = v8 - v11;
  v14 = *a1 - *v23;
  v15 = (v10 - v11) * (v8 - v11) + v14 * v12;
  if (v15 <= 0.0)
  {
    v19 = v14 * v14 + 0.0 + (v10 - v11) * (v10 - v11);
  }
  else
  {
    v16 = v13 * v13 + v12 * v12;
    if (v16 <= v15)
    {
      v17 = v10 - v8;
      v18 = v9 - *v22;
    }
    else
    {
      v17 = v10 - (v11 + v13 * (v15 / v16));
      v18 = v9 - (*v23 + v12 * (v15 / v16));
    }
    v19 = v18 * v18 + 0.0 + v17 * v17;
  }
  return sqrt(v19);
}

BOOL sub_10005B9D0(double *a1, double *a2, double *a3, uint64_t a4)
{
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  _BOOL4 v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  double v38;
  _BOOL8 result;
  double v40;
  double v41;

  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2 != *a1)
  {
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      v8 = 0;
      if (v7 != v5)
        goto LABEL_24;
    }
    else
    {
      v15 = vabdd_f64(v6, v5);
      v16 = fabs(v6);
      v17 = fabs(v5);
      if (v16 < v17)
        v16 = v17;
      if (v16 >= 1.0)
        v18 = v16 * 2.22044605e-16;
      else
        v18 = 2.22044605e-16;
      v8 = v15 <= v18;
      if (v7 != v5)
        goto LABEL_24;
    }
LABEL_3:
    v9 = 1;
    if (v8)
    {
LABEL_4:
      v10 = a1[1];
      v11 = a2[1];
      v12 = a3[1];
      v13 = v11 > v10 || v12 < v10;
      if (!v13 || (v11 >= v10 ? (v14 = v12 > v10) : (v14 = 1), !v14))
        *(_BYTE *)(a4 + 4) = 1;
      return *(_BYTE *)(a4 + 4) == 0;
    }
    goto LABEL_36;
  }
  v8 = 1;
  if (v7 == v5)
    goto LABEL_3;
LABEL_24:
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v20 = vabdd_f64(v7, v5);
    v21 = fabs(v7);
    v22 = fabs(v5);
    if (v21 < v22)
      v21 = v22;
    if (v21 >= 1.0)
      v23 = v21 * 2.22044605e-16;
    else
      v23 = 2.22044605e-16;
    v9 = v20 <= v23;
    if (v8 && v9)
      goto LABEL_4;
LABEL_36:
    if (v8)
      goto LABEL_37;
    if (v9)
    {
      v24 = 1;
      v25 = v6 <= v5;
      v26 = -1;
      goto LABEL_40;
    }
    goto LABEL_58;
  }
  if (v8)
  {
LABEL_37:
    v24 = -1;
    v25 = v7 <= v5;
    v26 = 1;
LABEL_40:
    if (v25)
      v27 = v24;
    else
      v27 = v26;
    if (v8)
      v28 = a2;
    else
      v28 = a3;
    v29 = a1[1];
    v30 = v28[1];
    if (v29 != v30)
    {
      if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_55;
      }
      v31 = vabdd_f64(v29, v30);
      v32 = fabs(v29);
      v33 = fabs(v30);
      if (v32 < v33)
        v32 = v33;
      v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
      if (v31 > v34)
      {
LABEL_55:
        if (v29 >= v30)
          v35 = v27;
        else
          v35 = -v27;
        goto LABEL_80;
      }
    }
    goto LABEL_70;
  }
LABEL_58:
  if (v6 < v5 && v7 > v5)
  {
    v27 = 2;
    goto LABEL_69;
  }
  if (v6 > v5 && v7 < v5)
  {
    v27 = -2;
LABEL_69:
    v41 = 1.0;
    v38 = sub_10005C128(a2, a3, a1, &v41);
    if (v38 != 0.0)
    {
      if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v38 > 0.0)
          v35 = 1;
        else
          v35 = -1;
      }
      else
      {
        v40 = fabs(v38);
        if (v38 > 0.0)
          v35 = 1;
        else
          v35 = -1;
        if (v40 <= v41 * 2.22044605e-16)
          goto LABEL_70;
      }
LABEL_80:
      if (v27 * v35 >= 1)
        *(_DWORD *)a4 += v27;
      return *(_BYTE *)(a4 + 4) == 0;
    }
LABEL_70:
    result = 0;
    *(_BYTE *)(a4 + 4) = 1;
    *(_DWORD *)a4 = 0;
    return result;
  }
  return *(_BYTE *)(a4 + 4) == 0;
}

void sub_10005BD24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10005BD40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double *sub_10005BD78(double *result, double *a2, double *a3, uint64_t a4, double **a5, double **a6, double *a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;

  if (a2 + 2 != a3)
  {
    v7 = a2[2];
    v8 = a2[3];
    v9 = *result;
    v10 = result[1];
    v11 = a2[1];
    v12 = v7 - *a2;
    v13 = v8 - v11;
    v14 = *result - *a2;
    v15 = (v10 - v11) * (v8 - v11) + v14 * v12;
    if (v15 <= 0.0)
    {
      v28 = v14 * v14 + 0.0 + (v10 - v11) * (v10 - v11);
      *a7 = v28;
      if (a2 + 4 != a3)
      {
LABEL_13:
        v29 = a2 + 2;
        v30 = a2 + 3;
        do
        {
          v32 = *(v30 - 1);
          v34 = v30[1];
          v33 = v30[2];
          v35 = *result;
          v36 = result[1];
          v37 = v34 - v32;
          v38 = v33 - *v30;
          v39 = *result - v32;
          v40 = v36 - *v30;
          v41 = v40 * v38 + v39 * (v34 - v32);
          if (v41 <= 0.0)
          {
            v43 = v39 * v39 + 0.0 + v40 * v40;
            if (v43 == 0.0)
              goto LABEL_25;
          }
          else
          {
            v42 = v38 * v38 + v37 * v37;
            if (v42 <= v41)
            {
              v43 = (v35 - v34) * (v35 - v34) + 0.0 + (v36 - v33) * (v36 - v33);
              if (v43 == 0.0)
              {
LABEL_25:
                *a7 = 0.0;
                *a5 = v29;
                *a6 = v29 + 2;
                return result;
              }
            }
            else
            {
              v43 = (v35 - (v32 + v37 * (v41 / v42))) * (v35 - (v32 + v37 * (v41 / v42)))
                  + 0.0
                  + (v36 - (*v30 + v38 * (v41 / v42))) * (v36 - (*v30 + v38 * (v41 / v42)));
              if (v43 == 0.0)
                goto LABEL_25;
            }
          }
          if (v43 < v28)
          {
            *a7 = v43;
            v28 = v43;
            a2 = v30 - 1;
          }
          v29 += 2;
          v31 = v30 + 3;
          v30 += 2;
        }
        while (v31 != a3);
      }
    }
    else
    {
      v16 = v13 * v13 + v12 * v12;
      if (v16 <= v15)
      {
        v17 = v10 - v8;
        v18 = v9 - v7;
      }
      else
      {
        v17 = v10 - (v11 + v13 * (v15 / v16));
        v18 = v9 - (*a2 + v12 * (v15 / v16));
      }
      v28 = v18 * v18 + 0.0 + v17 * v17;
      *a7 = v28;
      if (a2 + 4 != a3)
        goto LABEL_13;
    }
    *a6 = a2;
    *a5 = a2;
    *a6 += 2;
    return result;
  }
  *a6 = a2;
  *a5 = a2;
  v19 = *a2;
  v20 = a2[1];
  v21 = result[1];
  v22 = v19 - v19;
  v23 = v20 - v20;
  v24 = *result - *a2;
  v25 = (v20 - v20) * (v21 - v20) + v24 * (v19 - v19);
  if (v25 <= 0.0 || (v26 = v23 * v23 + v22 * v22, v26 <= v25))
  {
    *a7 = v24 * v24 + 0.0 + (v21 - v20) * (v21 - v20);
  }
  else
  {
    v27 = *result - (v19 + v22 * (v25 / v26));
    *a7 = v27 * v27 + 0.0 + (v21 - (v20 + v23 * (v25 / v26))) * (v21 - (v20 + v23 * (v25 / v26)));
  }
  return result;
}

double sub_10005BFB0(double *a1, double **a2, double **a3)
{
  double v3;
  double **v5;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char v25;
  uint64_t v26;
  double *v27;
  double *v28;

  v3 = 0.0;
  if (a2 != a3)
  {
    v5 = a2;
    while (1)
    {
      v7 = *v5;
      v8 = v5[1];
      if ((unint64_t)((char *)v8 - (char *)*v5) >= 0x40)
      {
        LODWORD(v28) = 0;
        BYTE4(v28) = 0;
        if (v7 + 2 != v8)
        {
          do
          {
            if (!sub_10005B9D0(a1, v7, v7 + 2, (uint64_t)&v28))
              break;
            v9 = v7 + 4;
            v7 += 2;
          }
          while (v9 != v8);
          if (!BYTE4(v28) && (_DWORD)v28)
            break;
        }
      }
      v5 += 3;
      if (v5 == a3)
        return v3;
    }
    v10 = *v5;
    v11 = v5[1];
    if (v11 != *v5)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      sub_10005BD78(a1, v10, v11, (uint64_t)&v25, &v28, &v27, (double *)&v26);
      v12 = v27[1];
      v13 = *a1;
      v14 = a1[1];
      v15 = v28[1];
      v16 = *v27 - *v28;
      v17 = v12 - v15;
      v18 = *a1 - *v28;
      v19 = (v14 - v15) * (v12 - v15) + v18 * v16;
      if (v19 <= 0.0)
      {
        v23 = v18 * v18 + 0.0 + (v14 - v15) * (v14 - v15);
      }
      else
      {
        v20 = v17 * v17 + v16 * v16;
        if (v20 <= v19)
        {
          v21 = v14 - v12;
          v22 = v13 - *v27;
        }
        else
        {
          v21 = v14 - (v15 + v17 * (v19 / v20));
          v22 = v13 - (*v28 + v16 * (v19 / v20));
        }
        v23 = v22 * v22 + 0.0 + v21 * v21;
      }
      return sqrt(v23);
    }
  }
  return v3;
}

double sub_10005C128(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18[2];
  double v19[2];
  double v20[2];
  double v21;
  double v22[2];
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];

  v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  v5 = a2[1];
  v19[0] = *a2;
  v19[1] = v5;
  v6 = a3[1];
  v18[0] = *a3;
  v18[1] = v6;
  v7 = v20[0] - v18[0];
  v27[0] = v20[0] - v18[0];
  v8 = v5 - v6;
  v26[0] = v5 - v6;
  v9 = v4 - v6;
  v25[0] = v4 - v6;
  v10 = v19[0] - v18[0];
  v24[0] = v19[0] - v18[0];
  v11 = vabdd_f64(v20[0], v18[0]);
  v12 = vabdd_f64(v5, v6);
  v13 = vabdd_f64(v4, v6);
  v14 = vabdd_f64(v19[0], v18[0]);
  if (v11 < v12)
    v11 = v12;
  if (v11 < v13)
    v11 = v13;
  if (v11 < v14)
    v11 = v14;
  if (v11 < 1.0)
    v11 = 1.0;
  *a4 = v11;
  v15 = v7 * v8;
  v23[0] = v7 * v8;
  v16 = v10 * v9;
  result = v7 * v8 - v10 * v9;
  v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0))
    return sub_1001D0954(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  return result;
}

void sub_10005C248(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "onQueueRecordInputEventMetrics:", a1 + 40);

}

void sub_10005C284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10005C2A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void **v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::mutex *v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  void **v22;

  v14 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 72);
  v4 = *(uint64_t **)(a1 + 80);
  while (v5 != v4)
  {
    v17 = 0;
    v18 = 0;
    v6 = (std::__shared_weak_count *)v5[1];
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      v18 = v7;
      if (v7)
      {
        v8 = *v5;
        v17 = v8;
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
LABEL_16:
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          goto LABEL_3;
        }
      }
    }
    else
    {
      v7 = 0;
    }
    if (qword_100417ED8 == -1)
    {
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_15;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100406550);
      v9 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_15;
    }
    v10 = *(_QWORD *)(a1 + 72);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(__p, a1);
    v11 = __p;
    if (v16 < 0)
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 134218242;
    v20 = ((uint64_t)v5 - v10) >> 4;
    v21 = 2080;
    v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Reference to dead observer @ [%ld] in %s. Did you forget to remove it?", buf, 0x16u);
    if (v16 < 0)
      operator delete(__p[0]);
LABEL_15:
    if (v7)
      goto LABEL_16;
LABEL_3:
    v5 += 2;
  }
  std::mutex::unlock(v14);
}

void sub_10005C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_1000E095C((uint64_t)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10005C4C4(_BYTE *a1, int **a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE *v7;

  if (a1[44])
  {
    v4 = sub_10005D4C0(*a2);
    sub_10005C780((uint64_t)(a1 + 48), v4);
  }
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
  if ((_DWORD)result)
  {
    v7 = a1 + 8;
    return sub_10005C9A8(*a2, (uint64_t)&v7, v6);
  }
  return result;
}

void sub_10005C540(uint64_t a1, uint64_t a2)
{
  _QWORD v2[5];
  _QWORD v3[7];

  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x3802000000;
  v3[3] = sub_1000BCCD0;
  v3[4] = nullsub_36;
  v3[5] = a1 + 8;
  v3[6] = a2;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_10005D5C0;
  v2[3] = &unk_1003FC408;
  v2[4] = v3;
  sub_10005C5D4((dispatch_queue_t *)(a1 + 40), v2);
  _Block_object_dispose(v3, 8);
}

void sub_10005C5D4(dispatch_queue_t *a1, void *a2)
{
  dispatch_sync(*a1, a2);
}

void sub_10005C5DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2 && (*(_DWORD *)v2 ^ (*(int *)v2 >> 31)) == 0xE)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 16) + 48))
      sub_100010CF4(a1, v3);
    else
      sub_10005D69C(a1, v3);
  }
}

void sub_10005C60C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  void *v16;
  std::__shared_weak_count *v17;
  _QWORD block[4];
  id v19[2];
  std::__shared_weak_count *v20;

  v3 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10005C248;
  block[3] = &unk_100407448;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(void **)a2;
  v17 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  objc_copyWeak(v19, &v15);
  v19[1] = v16;
  v20 = v17;
  if (v17)
  {
    v7 = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  dispatch_async(v3, block);
  v9 = v17;
  if (!v17)
    goto LABEL_11;
  v10 = (unint64_t *)&v17->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    objc_destroyWeak(&v15);
    v12 = v20;
    if (!v20)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    objc_destroyWeak(&v15);
    v12 = v20;
    if (!v20)
      goto LABEL_17;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  objc_destroyWeak(v19);
}

uint64_t sub_10005C768(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 - 16) + 32);
}

uint64_t sub_10005C774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t sub_10005C780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  double v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v12;
  int v13;
  double v14;

  if (!*(_BYTE *)(a1 + 25) || !*(_BYTE *)(a1 + 8))
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  v5 = !((v4 < 0) ^ v3 | (v4 == 0));
  *(_BYTE *)(a1 + 24) = v5;
  if ((v4 < 0) ^ v3 | (v4 == 0))
    return 0;
  v6 = (double)(v4 + 1000000000 * *(_QWORD *)(a1 + 32)) / 1000000000.0;
  if (!*(_BYTE *)a1)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (uint64_t)v6 + 0x888888888888888 > 0x1111111111111110)
      return 1;
    if (qword_100417ED8 == -1)
    {
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        return 1;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FFED0);
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        return 1;
    }
    v13 = 134349056;
    v14 = v6;
    v8 = "WARNING: no Wi-Fi scans in %{public}f";
    v9 = v12;
    v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_11;
  }
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FFED0);
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
      return 1;
    goto LABEL_10;
  }
  v7 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
  {
LABEL_10:
    v13 = 134349056;
    v14 = v6;
    v8 = "FATAL: no Wi-Fi scan timer expired and no scans in %{public}f";
    v9 = v7;
    v10 = OS_LOG_TYPE_FAULT;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0xCu);
  }
  return 1;
}

uint64_t sub_10005C980(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  return sub_10005C9A8(*a2, (uint64_t)&v4, a3);
}

uint64_t sub_10005C9A8(int *a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(int *, uint64_t, uint64_t, int *))((char *)sub_10005C9CC
                                                                 + 4 * byte_100389C6E[*a1 ^ (*a1 >> 31)]))(a1, a2, a3, a1 + 2);
}

uint64_t sub_10005C9CC@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X3>, int a3@<W8>)
{
  if (a3 < 0)
    a2 = (_QWORD *)*a2;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 32))(*a1, a2 + 1);
}

uint64_t sub_10005C9E8@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X3>, int a3@<W8>)
{
  if (a3 < 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *a2);
  else
    return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 40))(*a1, a2);
}

uint64_t sub_10005CCD8(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  int v3;
  std::string *v5;
  __int128 v6;
  _BYTE v7[24];
  std::string v8;
  std::string v9;
  std::runtime_error v10;

  v2 = (unsigned int *)(a1 + 96);
  v3 = *(_DWORD *)(a1 + 96) - 2;
  if (v3 >= 0xE || ((0x2D07u >> v3) & 1) == 0)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_100169BFC(v2, &v8);
    v5 = std::string::insert(&v8, 0, "Illegal state - how is the thrift type enum = ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v10, &v9);
    v10.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v7);
    sub_1000F2F7C(&v10, (uint64_t)"void InertialInputEvent::applyTo(Receiver *) const [Receiver = ILocalizerInputEventReceiver]", (uint64_t)"../../../common/localize/localizer_input_event.h", 288, (uint64_t)v7);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 8 * qword_10038A628[v3]))(a2, a1);
}

void sub_10005CDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 48));
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10005CE88(uint64_t a1, uint64_t a2)
{
  sub_10005CEA8(a1 - 32, a2);
}

void sub_10005CE90(uint64_t a1, uint64_t a2)
{
  sub_10005CFD4(a1 - 32, a2);
}

void sub_10005CE98(uint64_t a1, uint64_t a2, int a3)
{
  sub_10005D100(a1 - 32, a2, a3);
}

void sub_10005CEA0(uint64_t a1, uint64_t a2)
{
  sub_10005D384(a1 - 32, a2);
}

void sub_10005CEA8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[10];

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v9[8] = v4;
  v9[9] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_10005EEDC(v4 + 1888, a2);
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    sub_100302D18(v9);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10005CF90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10005CFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10005CFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10005CFD4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[10];

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v9[8] = v4;
  v9[9] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_10005EEDC(v4 + 40, a2);
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    sub_1003025CC(v9);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10005D0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10005D0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10005D0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10005D100(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  _BYTE v15[24];
  std::string v16;
  std::string v17;
  std::string v18;
  std::runtime_error v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v4;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  switch(a3)
  {
    case 1:
      v8 = v4 + 712;
      break;
    case 2:
      v8 = v4 + 880;
      break;
    case 4:
      v8 = v4 + 1048;
      break;
    case 8:
      v8 = v4 + 1216;
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      std::to_string(&v16, a3);
      v11 = std::string::insert(&v16, 0, "cmAttitudeReferenceFrame ");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = std::string::append(&v17, " not implemented");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v19, &v18);
      v19.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)v15);
      sub_1000F2F7C(&v19, (uint64_t)"virtual void sensors::CombinedLogger::receiveAttitudeX(const SensorMeasurement &, int)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/sensors/sensor_logger.mm", 747, (uint64_t)v15);
  }
  sub_10005EEDC(v8, a2);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_10005D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v30 - 64));
  if (a30 < 0)
  {
    operator delete(a25);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_6;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_9:
    sub_1000E095C(v30 - 48);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a12);
  goto LABEL_9;
}

void sub_10005D384(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[10];

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v9[8] = v4;
  v9[9] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_10005EEDC(v4 + 2224, a2);
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    sub_100302AB8(v9);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10005D46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10005D480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10005D49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D4C0(int *a1)
{
  return ((uint64_t (*)(int *))((char *)sub_10005D4E0 + 4 * byte_100383020[*a1 ^ (*a1 >> 31)]))(a1 + 2);
}

uint64_t sub_10005D4E0@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    return **(_QWORD **)a1;
  else
    return *(_QWORD *)a1;
}

uint64_t sub_10005D4F8@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[2];
}

uint64_t sub_10005D50C@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[4];
}

uint64_t sub_10005D520@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D534@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D548@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D55C@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D570@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[4];
}

uint64_t sub_10005D584@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D598@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

uint64_t sub_10005D5AC@<X0>(_QWORD *a1@<X0>, int a2@<W8>)
{
  if (a2 < 0)
    a1 = (_QWORD *)*a1;
  return a1[1];
}

void sub_10005D5C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  char v9;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(uint64_t **)(v1 + 40);
  v2 = *(_QWORD **)(v1 + 48);
  v4 = (_QWORD *)v3[1];
  if ((unint64_t)v4 >= v3[2])
  {
    v8 = sub_1001E3C34((uint64_t)v3, v2);
  }
  else
  {
    v5 = v2[1];
    *v4 = *v2;
    v4[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = v4 + 2;
  }
  v3[1] = (uint64_t)v8;
  sub_1000FF340(*v3, (uint64_t)v8, (uint64_t)&v9, ((uint64_t)v8 - *v3) >> 4);
}

void sub_10005D644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_1000603E4(a1 - 32, a2, a3, a4);
}

double sub_10005D64C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v4;
  double result;

  v4 = *(_DWORD *)(a1 + 76);
  result = ((double)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3))
          + *(double *)(a1 + 80) * (double)v4)
         / ((double)v4 + 1.0);
  *(double *)(a1 + 80) = result;
  *(_DWORD *)(a1 + 76) = v4 + 1;
  return result;
}

void sub_10005D69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *__p[2];
  char v18;
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  uint64_t v23;

  v4 = sub_10005D8AC(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD **)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 64);
  *v5 &= ~(1 << v6);
  if (v6 == 63)
  {
    v7 = 0;
    *(_QWORD *)(a1 + 56) = ++v5;
  }
  else
  {
    v7 = v6 + 1;
  }
  *(_DWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a1 + 32);
  if (v5 == (_QWORD *)(v8 + 8 * (*(_QWORD *)(a1 + 40) >> 6)) && v7 == (*(_DWORD *)(a1 + 40) & 0x3F))
  {
    *(_QWORD *)(a1 + 56) = v8;
    *(_DWORD *)(a1 + 64) = 0;
  }
  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_100404810);
  v10 = (id)qword_100417EE0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    if (sub_10005D8A4(*(_QWORD *)(a1 + 8)))
    {
      LODWORD(__p[0]) = 5721932;
      v11 = 3;
    }
    else
    {
      strcpy((char *)__p, "HIGH");
      v11 = 4;
    }
    v18 = v11;
    v12 = *(_QWORD **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v19 = 1;
    v14 = sub_1002EFF60(v12, 0, (uint64_t)&v12[v13 >> 6], v13 & 0x3F, &v19);
    *(_DWORD *)buf = 136315394;
    v21 = __p;
    v22 = 2048;
    v23 = v14 & ~(v14 >> 63);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Wifi Scan success. Priority %s. Num rejected scans in window: %llu", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
  }

  v15 = sub_10005D8A4(*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(v4 + 32) == 2)
    v16 = v15;
  else
    v16 = 1;
  if ((v16 & 1) == 0)
    sub_1002EFC68(a1, a2);
}

void sub_10005D888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10005D8A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_10005D8AC(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_10005D8B4(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t result;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "PoseEstimate");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "userPosition", 12, 1)+ v6;
  v8 = sub_10001B788(a1 + 8, a2);
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "userHeading", 4, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 72));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "screenHeading", 4, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 80));
  v15 = v12 + v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(_BYTE *)(a1 + 752) & 0x10) != 0)
  {
    v16 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "walking", 8, 4);
    v17 = v16 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 88));
    v15 += v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v18 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "measuredHeading", 4, 5);
  v19 = v15 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 96));
  v20 = v18 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v21 = v20
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "floorId", 11, 6);
  v22 = v21 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 104);
  v23 = v22 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v19;
  v24 = *(_QWORD *)(a1 + 752);
  if ((v24 & 0x200000000000000) != 0)
  {
    v100 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_floorIndex", 8, 7);
    v101 = v100 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 712));
    v23 += v101 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v24 = *(_QWORD *)(a1 + 752);
    if ((v24 & 0x400000000000000) == 0)
    {
LABEL_6:
      if ((v24 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((v24 & 0x400000000000000) == 0)
  {
    goto LABEL_6;
  }
  v102 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_floorplanId", 11, 8);
  v103 = v23 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 720);
  v23 = v102 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v103;
  if ((*(_QWORD *)(a1 + 752) & 0x100) != 0)
  {
LABEL_7:
    v25 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_accuracyRadius", 4, 9);
    v26 = v23 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 136));
    v23 = v25 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v26;
  }
LABEL_8:
  v27 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "latLonPosition", 12, 10);
  v28 = v23 + sub_10002A2B8(a1 + 40, a2);
  v29 = v27 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v30 = v29
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "gainDbm", 4, 11);
  v31 = v30 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 144));
  v32 = v31 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v28;
  if ((*(_BYTE *)(a1 + 759) & 1) != 0)
  {
    v33 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_onFloorProbability", 4, 12);
    v34 = v33 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 704));
    v32 += v34 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v35 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "sigmaDist", 4, 13);
  v36 = v32 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 152));
  v37 = v35 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v38 = v37
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "compoundConfidence", 4, 14);
  v39 = v38 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 160));
  v40 = v39 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v41 = v40
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "probabilityOnMappedLocation", 4, 15);
  v42 = v41 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 168));
  v43 = v42 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v44 = v43
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "probabilityOnFloorId", 4, 16);
  v45 = v44 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 176)) + v36;
  v46 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v47 = v46
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "probabilityInlier", 4, 17);
  v48 = v47 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 184));
  v49 = v45 + v48 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(_BYTE *)(a1 + 759) & 8) != 0)
  {
    v50 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_probabilityRadiusInterval", 4, 18);
    v51 = v50 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 744));
    v49 += v51 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v52 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "scaledFloorplanX", 4, 19);
  v53 = v49 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 200));
  v54 = v52 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v55 = v54
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "scaledFloorplanY", 4, 20);
  v56 = v55 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 208));
  v57 = v56 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v58 = v57
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "origFloorplanX", 4, 21);
  v59 = v58 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 216));
  v60 = v59 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v61 = v60
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "origFloorplanY", 4, 22);
  v62 = v61 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 224));
  v63 = v62 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v53;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x100000) != 0)
  {
    v104 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "origFloorplanSigmaDist", 4, 23);
    v105 = v104 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 232));
    v63 += v105 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v64 = *(_QWORD *)(a1 + 752);
    if ((v64 & 0x200000) == 0)
    {
LABEL_14:
      if ((v64 & 0x400000) == 0)
        goto LABEL_15;
      goto LABEL_55;
    }
  }
  else if ((v64 & 0x200000) == 0)
  {
    goto LABEL_14;
  }
  v106 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 24);
  v107 = v63 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 240));
  v63 = v106 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v107;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x400000) == 0)
  {
LABEL_15:
    if ((v64 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_56;
  }
LABEL_55:
  v108 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "userHeadingVariance", 4, 25);
  v109 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 248));
  v63 = v108 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v109;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x800000) == 0)
  {
LABEL_16:
    if ((v64 & 0x1000000) == 0)
      goto LABEL_17;
    goto LABEL_57;
  }
LABEL_56:
  v110 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "gyroBias", 4, 26);
  v111 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 256));
  v63 = v110 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v111;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v64 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_58;
  }
LABEL_57:
  v112 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "measuredHeadingIndependence", 4, 27);
  v113 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 264));
  v63 = v112 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v113;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v64 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_59;
  }
LABEL_58:
  v114 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "attitudeHeading", 4, 28);
  v115 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 272));
  v63 = v114 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v115;
  v64 = *(_QWORD *)(a1 + 752);
  if ((v64 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v64 & 0x8000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_59:
  v116 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "horizontalAccuracy", 4, 29);
  v117 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 280));
  v63 = v116 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v117;
  if ((*(_QWORD *)(a1 + 752) & 0x8000000) != 0)
  {
LABEL_20:
    v65 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "verticalAccuracy", 4, 30);
    v66 = v63 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 288));
    v63 = v65 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v66;
  }
LABEL_21:
  v67 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "yieldStatus", 8, 31);
  v68 = v63 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 296));
  v69 = v67 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v68;
  if ((*(_BYTE *)(a1 + 755) & 0x20) != 0)
  {
    v70 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "yieldFailureType", 8, 32);
    v71 = v70 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 300));
    v69 += v71 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v72 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "indoorNeedsGps", 2, 33);
  v73 = v69 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 464));
  v74 = v72 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v73;
  if ((*(_BYTE *)(a1 + 752) & 0x80) != 0)
  {
    v75 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "floorNumber", 8, 34);
    v76 = v75 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 128));
    v74 += v76 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v77 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "gpsStrobingActive", 2, 36);
  v78 = v74 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 465));
  v79 = v77 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v80 = v79
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "lastWifiDataTimestampNanos", 10, 37);
  v81 = v80 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 472));
  v82 = v81 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v83 = v82
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "healthIndicators", 12, 38);
  v84 = v83 + sub_1000341C8(a1 + 304, a2);
  v85 = v84 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v78;
  v86 = *(_QWORD *)(a1 + 752);
  if ((v86 & 0x400000000) != 0)
  {
    v118 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "Pxx", 4, 39);
    v119 = v118 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 488));
    v85 += v119 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v86 = *(_QWORD *)(a1 + 752);
    if ((v86 & 0x800000000) == 0)
    {
LABEL_27:
      if ((v86 & 0x1000000000) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else if ((v86 & 0x800000000) == 0)
  {
    goto LABEL_27;
  }
  v120 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "Pxy", 4, 40);
  v121 = v85 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 496));
  v85 = v120 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v121;
  if ((*(_QWORD *)(a1 + 752) & 0x1000000000) != 0)
  {
LABEL_28:
    v87 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "Pyy", 4, 41);
    v88 = v85 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 504));
    v85 = v87 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v88;
  }
LABEL_29:
  v89 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "lifespan", 4, 42);
  v90 = v85 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 512));
  v91 = v89 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v92 = v91
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "lastBeaconDataTimestampNanos", 10, 43);
  v93 = v92 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 480));
  v94 = v93 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v90;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x4000000000) != 0)
  {
    v122 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "numOfLoadedLocations", 8, 44);
    v123 = v122 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 520));
    v94 += v123 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v95 = *(_QWORD *)(a1 + 752);
    if ((v95 & 0x8000000000) == 0)
    {
LABEL_31:
      if ((v95 & 0x10000000000) == 0)
        goto LABEL_32;
      goto LABEL_66;
    }
  }
  else if ((v95 & 0x8000000000) == 0)
  {
    goto LABEL_31;
  }
  v124 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "yieldSource", 8, 45);
  v125 = v94 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 524));
  v94 = v124 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v125;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x10000000000) == 0)
  {
LABEL_32:
    if ((v95 & 0x20000000000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  v126 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "nonwalkableLatLonPosition", 12, 46);
  v127 = v94 + sub_10002A2B8(a1 + 528, a2);
  v94 = v126 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v127;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v95 & 0x40000000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  v128 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "signedDistanceToSurveyWithToleranceMaximized", 4, 47);
  v129 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 560));
  v94 = v128 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v129;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v95 & 0x80000000000) == 0)
      goto LABEL_35;
    goto LABEL_69;
  }
LABEL_68:
  v130 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "floorTransitionState", 12, 48);
  v131 = v94 + sub_10019D658(a1 + 568, a2);
  v94 = v130 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v131;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x80000000000) == 0)
  {
LABEL_35:
    if ((v95 & 0x100000000000) == 0)
      goto LABEL_36;
    goto LABEL_70;
  }
LABEL_69:
  v132 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "signedDistanceToFloorplanWithToleranceMaximized", 4, 49);
  v133 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 600));
  v94 = v132 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v133;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v95 & 0x200000000000) == 0)
      goto LABEL_37;
    goto LABEL_71;
  }
LABEL_70:
  v134 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "yieldType", 8, 50);
  v135 = v94 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 608));
  v94 = v134 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v135;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v95 & 0x400000000000) == 0)
      goto LABEL_38;
    goto LABEL_72;
  }
LABEL_71:
  v136 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "speed", 4, 51);
  v137 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 616));
  v94 = v136 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v137;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x400000000000) == 0)
  {
LABEL_38:
    if ((v95 & 0x800000000000) == 0)
      goto LABEL_39;
    goto LABEL_73;
  }
LABEL_72:
  v138 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "speedAccuracy", 4, 52);
  v139 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 624));
  v94 = v138 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v139;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x800000000000) == 0)
  {
LABEL_39:
    if ((v95 & 0x1000000000000) == 0)
      goto LABEL_40;
    goto LABEL_74;
  }
LABEL_73:
  v140 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "bearing", 4, 53);
  v141 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 632));
  v94 = v140 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v141;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x1000000000000) == 0)
  {
LABEL_40:
    if ((v95 & 0x2000000000000) == 0)
      goto LABEL_41;
    goto LABEL_75;
  }
LABEL_74:
  v142 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "bearingAccuracy", 4, 54);
  v143 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 640));
  v94 = v142 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v143;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x2000000000000) == 0)
  {
LABEL_41:
    if ((v95 & 0x4000000000000) == 0)
      goto LABEL_42;
    goto LABEL_76;
  }
LABEL_75:
  v144 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "gpsSignedDistanceToFloorplanWithToleranceMaximized", 4, 55);
  v145 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 648));
  v94 = v144 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v145;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x4000000000000) == 0)
  {
LABEL_42:
    if ((v95 & 0x8000) == 0)
      goto LABEL_43;
    goto LABEL_77;
  }
LABEL_76:
  v146 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "gpsSignedDistanceToSurveyWithToleranceMaximized", 4, 56);
  v147 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 656));
  v94 = v146 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v147;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x8000) == 0)
  {
LABEL_43:
    if ((v95 & 0x8000000000000) == 0)
      goto LABEL_44;
    goto LABEL_78;
  }
LABEL_77:
  v148 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "selectedWeightFractionOfModeParticles", 4, 57);
  v149 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 192));
  v94 = v148 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v149;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x8000000000000) == 0)
  {
LABEL_44:
    if ((v95 & 0x10000000000000) == 0)
      goto LABEL_45;
    goto LABEL_79;
  }
LABEL_78:
  v150 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "bodyFixedState", 8, 58);
  v151 = v94 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 664));
  v94 = v150 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v151;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x10000000000000) == 0)
  {
LABEL_45:
    if ((v95 & 0x20000000000000) == 0)
      goto LABEL_46;
    goto LABEL_80;
  }
LABEL_79:
  v152 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "machAbsoluteTimestampSecs", 4, 59);
  v153 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 672));
  v94 = v152 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v153;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x20000000000000) == 0)
  {
LABEL_46:
    if ((v95 & 0x40000000000000) == 0)
      goto LABEL_47;
LABEL_81:
    v156 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "cfTimestampSecs", 4, 61);
    v157 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 688));
    v94 = v156 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v157;
    if ((*(_QWORD *)(a1 + 752) & 0x80000000000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_80:
  v154 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "machContinuousTimestampSecs", 4, 60);
  v155 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 680));
  v94 = v154 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v155;
  v95 = *(_QWORD *)(a1 + 752);
  if ((v95 & 0x40000000000000) != 0)
    goto LABEL_81;
LABEL_47:
  if ((v95 & 0x80000000000000) != 0)
  {
LABEL_48:
    v96 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "altitude", 4, 62);
    v97 = v94 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 696));
    v94 = v96 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v97;
  }
LABEL_49:
  v98 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v98 + v94 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10005EEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;

  sub_10005F09C(a1);
  sub_10005F188(a2, (_DWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v13 = bswap64(*(_QWORD *)(a2 + 32));
    *(float *)&v5 = *(double *)(a2 + 8);
    *(float *)&v6 = *(double *)(a2 + 16);
    *(float *)&v7 = *(double *)(a2 + 24);
    v11 = bswap32(v6);
    v12 = bswap32(v5);
    v9 = bswap32(*(_DWORD *)(a2 + 40));
    v10 = bswap32(v7);
    std::ostream::write(v4, &v13, 8);
    std::ostream::write(v4, &v12, 4);
    std::ostream::write(v4, &v11, 4);
    std::ostream::write(v4, &v10, 4);
    std::ostream::write(v4, &v9, 4);
  }
  *(_BYTE *)a1 = 1;
  return a1;
}

uint64_t sub_10005F09C(uint64_t a1)
{
  uint64_t result;

  result = sub_10005F0F0();
  if ((uint64_t)(result - *(_QWORD *)(a1 + 160)) >= 0x12A05F201)
  {
    *(_QWORD *)(a1 + 160) = sub_10003C888();
    return std::ostream::flush(*(_QWORD *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10005F0F0()
{
  unsigned __int8 v0;
  mach_timebase_info info;

  v0 = atomic_load((unsigned __int8 *)&qword_100419C30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100419C30))
  {
    mach_timebase_info(&info);
    qword_100419C28 = (uint64_t)info;
    __cxa_guard_release(&qword_100419C30);
  }
  return qword_100419C10 + mach_absolute_time() * qword_100419C28 / HIDWORD(qword_100419C28);
}

void sub_10005F170(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100419C30);
  _Unwind_Resume(a1);
}

uint64_t sub_10005F188(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "SensorMeasurement");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "x", 4, 1)
     + v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "y", 4, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "z", 4, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 24));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 4);
  v17 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 32));
  v18 = v16 + v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x10) != 0)
  {
    v24 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "accuracy", 8, 5);
    v25 = v24 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 40));
    v18 += v25 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v19 = *(_WORD *)(a1 + 88);
    if ((v19 & 0x20) == 0)
    {
LABEL_4:
      if ((v19 & 0x40) == 0)
        goto LABEL_5;
      goto LABEL_12;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_4;
  }
  v26 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_eventTimestampNanos", 10, 6);
  v27 = v18 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 48));
  v18 = v26 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v27;
  v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x40) == 0)
  {
LABEL_5:
    if ((v19 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v28 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "DEPRECATED_pdrTimestampNanos", 10, 7);
  v29 = v18 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 56));
  v18 = v28 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v29;
  v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x80) == 0)
  {
LABEL_6:
    if ((v19 & 0x100) == 0)
      goto LABEL_7;
LABEL_14:
    v32 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "magAccuracy", 8, 9);
    v33 = v18 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 72));
    v18 = v32 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v33;
    if ((*(_WORD *)(a1 + 88) & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_13:
  v30 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "w", 4, 8);
  v31 = v18 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 64));
  v18 = v30 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v31;
  v19 = *(_WORD *)(a1 + 88);
  if ((v19 & 0x100) != 0)
    goto LABEL_14;
LABEL_7:
  if ((v19 & 0x200) != 0)
  {
LABEL_8:
    v20 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "cmTimestampSeconds", 4, 10);
    v21 = v18 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 80));
    v18 = v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v21;
  }
LABEL_9:
  v22 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v22 + v18 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10005F5DC(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  char v7;
  __int16 v8;

  v7 = a3;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v7, 1);
  v8 = bswap32(a4) >> 16;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v8, 2);
  return 3;
}

uint64_t sub_10005F640()
{
  return 0;
}

uint64_t sub_10005F648(uint64_t a1, double a2)
{
  unint64_t v3;

  v3 = bswap64(*(unint64_t *)&a2);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v3, 8);
  return 8;
}

uint64_t sub_10005F684(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = bswap64(a2);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v3, 8);
  return 8;
}

uint64_t sub_10005F6BC()
{
  return 0;
}

uint64_t sub_10005F6C4()
{
  return 0;
}

uint64_t sub_10005F6CC(uint64_t a1)
{
  char v2;

  v2 = 0;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v2, 1);
  return 1;
}

uint64_t sub_10005F700(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  v3 = bswap32(a2);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v3, 4);
  return 4;
}

uint64_t sub_10005F738(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "ActivityStateClassification");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "confidence", 10, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "stationary", 2, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "walking", 2, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 17));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "running", 2, 4);
  v17 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 18));
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "automotive", 2, 5);
  v20 = v19 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 19));
  v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "unknown", 2, 6);
  LODWORD(a1) = v22
              + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 20));
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  LODWORD(a1) = a1 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v21 + a1 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10005F9EC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "WifiRssiValue");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "rssi", 4, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "freq", 8, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 16));
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "adhoc", 2, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 20));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "measurementTimestampNanos", 10, 4);
  v17 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 24));
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "personalHotspot", 2, 5);
  v20 = v19 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 32));
  v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(_BYTE *)(a1 + 40) & 0x20) != 0)
  {
    v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "channelFlags", 8, 6);
    v23 = v22 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 36));
    v21 += v23 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v24 + v21 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10005FCAC(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *i;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  uint64_t result;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "WifiScanSettings");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "initiatedTimestamp", 10, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "error", 8, 2);
    v11 = v10 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 16));
    v9 += v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v12 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "cached", 2, 3);
  v13 = v9 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 20));
  v14 = v12 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v15 = v14
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "indoorScan", 2, 4);
  v16 = v15
      + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 21))
      + v13;
  v17 = v16 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  if ((*(_BYTE *)(a1 + 104) & 2) != 0)
  {
    v18 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "initiator", 11, 5);
    v19 = v18 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 24);
    v17 += v19 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v20 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "dwellMs", 6, 6);
  v21 = v17
      + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 136))(a2, *(__int16 *)(a1 + 48));
  v22 = v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v23 = v22
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "frequencies", 15, 7);
  v24 = v23
      + (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 8, (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2)+ v21;
  for (i = *(unsigned int **)(a1 + 56);
        i != *(unsigned int **)(a1 + 64);
        v24 += (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, v26))
  {
    v26 = *i++;
  }
  v27 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 96))(a2);
  v28 = v24 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v29 = v27
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "offChannelIncluded", 2, 8);
  v30 = v29
      + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 80))
      + v28;
  v31 = v30 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v32 = *(_BYTE *)(a1 + 104);
  if ((v32 & 4) != 0)
  {
    v37 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "dutyCycle", 4, 9);
    v38 = v37 + (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)a2 + 160))(a2, *(double *)(a1 + 88));
    v31 += v38 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v32 = *(_BYTE *)(a1 + 104);
    if ((v32 & 8) == 0)
    {
LABEL_10:
      if ((v32 & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a1 + 104) & 8) == 0)
  {
    goto LABEL_10;
  }
  v39 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "notPassive", 2, 10);
  v40 = v31 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 96));
  v31 = v39 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v40;
  v32 = *(_BYTE *)(a1 + 104);
  if ((v32 & 0x10) == 0)
  {
LABEL_11:
    if ((v32 & 0x20) == 0)
      goto LABEL_12;
LABEL_18:
    v43 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "targettedScan", 2, 12);
    v44 = v31 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 98));
    v31 = v43 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v44;
    if ((*(_BYTE *)(a1 + 104) & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_17:
  v41 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "merged", 2, 11);
  v42 = v31 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 97));
  v31 = v41 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v42;
  v32 = *(_BYTE *)(a1 + 104);
  if ((v32 & 0x20) != 0)
    goto LABEL_18;
LABEL_12:
  if ((v32 & 0x40) != 0)
  {
LABEL_13:
    v33 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "rssiThreshold", 8, 13);
    v34 = v31 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 100));
    v31 = v33 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v34;
  }
LABEL_14:
  v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v35 + v31 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_100060248(uint64_t a1, char a2)
{
  char v3;

  v3 = a2;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v3, 1);
  return 1;
}

uint64_t sub_10006027C(uint64_t a1, char a2, unsigned int a3)
{
  char v6;
  unsigned int v7;

  v6 = a2;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v6, 1);
  v7 = bswap32(a3);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v7, 4);
  return 5;
}

uint64_t sub_1000602DC()
{
  return 0;
}

uint64_t sub_1000602E4(uint64_t a1, unsigned int a2)
{
  __int16 v3;

  v3 = bswap32(a2) >> 16;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v3, 2);
  return 2;
}

void sub_100060320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1000CBC04(v4 + 3064, a2);
  sub_1000605B4(a1, 7, *(_QWORD *)(a2 + 8));
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1000603D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1000603E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[22];

  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v15[20] = v9;
  v15[21] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_10006094C(a2, a3, a4, (uint64_t)v15);
  sub_100063BD4(v9 + 4240, (uint64_t)v15);
  sub_100060888((uint64_t)v15);
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
  {
    sub_1003145A4(a2, a3, a4, (uint64_t)v15);
    sub_10000CFB0(v9 + 6576);
    if (*(_QWORD *)(v9 + 6624))
      sub_1000202A4((wireless_diagnostics::google::protobuf::MessageLite *)v15);
    *(_BYTE *)(v9 + 6576) = 1;
    sub_100026CE8(v15);
  }
  sub_1000605B4(a1, 1, a2);
  if (*(_BYTE *)(a1 + 68))
  {
    v12 = a1 + 72;
    if (*(_BYTE *)(a1 + 97))
      sub_1000C3C44(v12, a2);
    else
      sub_1000C3D88(v12, a2);
  }
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100060540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_100060554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100026CE8(&a9);
  sub_1000E095C(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_100060570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100060888((uint64_t)&a9);
  sub_1000E095C(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_10006058C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1000605A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_1000605B4(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BYTE v23[32];
  _QWORD block[5];
  std::__shared_weak_count *v25;
  _BYTE v26[32];
  _QWORD v27[2];
  _QWORD v28[3];
  std::__shared_weak_count *v29;

  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v28[2] = v6;
  v29 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v27[1] = 0;
  v28[0] = 0;
  v27[0] = off_100405AB8;
  *(_QWORD *)((char *)v28 + 5) = 0;
  sub_100060878((uint64_t)v27, a3);
  sub_100060870((uint64_t)v27, 1000 * rep);
  sub_100060880((uint64_t)v27, a2);
  v10 = *(id *)(v6 + 6736);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000BC948;
  block[3] = &unk_1003F5B90;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_10006083C((uint64_t)v23, (uint64_t)v27);
  block[4] = v6;
  v25 = v5;
  if (v5)
  {
    v13 = (unint64_t *)&v5->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10006083C((uint64_t)v26, (uint64_t)v23);
  dispatch_sync(v10, block);
  nullsub_16(v23);
  if (v5)
  {
    v15 = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  nullsub_16(v26);
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  nullsub_16(v27);
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1000607D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;

  if (a20)
    sub_100342030();
  sub_100165488((uint64_t)&a9);

  nullsub_16(v21 - 96);
  sub_1000E095C(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10006081C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_16(v1 - 96);
  sub_1000E095C(v1 - 64);
  _Unwind_Resume(a1);
}

__n128 sub_10006083C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_100405AB8;
  *(_BYTE *)(a1 + 28) &= 0xF8u;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return result;
}

uint64_t sub_100060870(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_100060878(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_100060880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100060888(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1003F9BF8;
  *(_QWORD *)(a1 + 40) = off_1003F9BD8;
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  sub_1000608EC(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_1000608EC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1000608EC(a1, *(_QWORD *)a2);
    sub_1000608EC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_10006094C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t **v7;
  std::string *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *__p[2];
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;

  *(_QWORD *)a4 = off_1003F9BF8;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 16) = a4 + 24;
  v7 = (uint64_t **)(a4 + 16);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = off_1003F9BD8;
  v8 = (std::string *)(a4 + 40);
  *(_QWORD *)(a4 + 96) = 0;
  v9 = a4 + 96;
  *(_DWORD *)(a4 + 140) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 54) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_WORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_BYTE *)(a4 + 120) = 0;
  *(_QWORD *)(a4 + 128) = 0;
  *(_DWORD *)(a4 + 135) = 0;
  *(_BYTE *)(a4 + 144) &= 0x80u;
  *(_BYTE *)(a4 + 152) &= 0xF8u;
  sub_100060878(a4, a1);
  v10 = *(_BYTE *)(a4 + 152) | 2;
  *(_BYTE *)(a4 + 152) = v10;
  v11 = *a3;
  v12 = a3[1];
  if (v11 != v12)
  {
    do
    {
      v17 = (unint64_t)off_1003F9BB8;
      LODWORD(v18) = 0;
      BYTE4(v18) = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 &= 0xC0u;
      sub_1000504A8((uint64_t)&v17, *(double *)(v11 + 32));
      sub_100063BCC((uint64_t)&v17, *(_DWORD *)(v11 + 80));
      sub_100063B48((uint64_t)&v17, *(_BYTE *)(v11 + 48) == 0);
      sub_100063BA8((uint64_t)&v17, *(_QWORD *)(v11 + 56));
      sub_100063BB0((uint64_t)&v17, *(_BYTE *)(v11 + 49) == 1);
      sub_100063BB8((uint64_t)&v17, *(_DWORD *)(v11 + 44));
      sub_100060EDC(v11, (uint64_t)__p);
      sub_100060C68(v7, (const void **)__p, (uint64_t)__p, (uint64_t)&v17);
      if (v16 < 0)
        operator delete(__p[0]);
      nullsub_19(&v17);
      v11 += 88;
    }
    while (v11 != v12);
    v10 = *(_BYTE *)(a4 + 152);
  }
  *(_BYTE *)(a4 + 152) = v10 | 4;
  sub_100060878((uint64_t)v8, *(_QWORD *)(a2 + 32));
  if (*(_BYTE *)(a2 + 48))
    sub_1000C91B0((uint64_t)v8, *(_DWORD *)(a2 + 52));
  sub_100063B48((uint64_t)v8, *(_DWORD *)(a2 + 56) == 0);
  sub_100063B2C((uint64_t)v8, *(_DWORD *)(a2 + 60) == 1);
  if (*(_BYTE *)a2)
    sub_1001A4B2C(v8, (const std::string *)(a2 + 8));
  *(_WORD *)(a4 + 88) = *(_QWORD *)(a2 + 40);
  sub_100060E18((uint64_t *)a2, &v17);
  v13 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(a4 + 104) = v13;
    operator delete(v13);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a4 + 96) = v17;
  *(_QWORD *)(a4 + 112) = v18;
  sub_100063B10((uint64_t)v8, *(_DWORD *)(a2 + 88) == 0);
  sub_100063B34((uint64_t)v8, *(double *)(a2 + 96));
  return sub_100063B18((uint64_t)v8, *(_DWORD *)(a2 + 104) != 2);
}

void sub_100060BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100060888(v1);
  _Unwind_Resume(a1);
}

void sub_100060C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
  {
    operator delete(__p);
    nullsub_19(&a16);
    sub_100060888(v16);
    _Unwind_Resume(a1);
  }
  nullsub_19(&a16);
  sub_100060888(v16);
  _Unwind_Resume(a1);
}

uint64_t **sub_100060C68(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  const void *v14;
  const void *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t *v26;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v7;
        v15 = (const void *)v7[4];
        v13 = v7 + 4;
        v14 = v15;
        v16 = *((char *)v13 + 23);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v13 + 23);
        else
          v17 = v13[1];
        if (v16 >= 0)
          v18 = v13;
        else
          v18 = v14;
        if (v17 >= v10)
          v19 = v10;
        else
          v19 = v17;
        v20 = memcmp(v11, v18, v19);
        v21 = v10 < v17;
        if (v20)
          v21 = v20 < 0;
        if (!v21)
          break;
        v7 = *v12;
        v8 = v12;
        if (!*v12)
          goto LABEL_27;
      }
      v22 = memcmp(v18, v11, v19);
      v23 = v17 < v10;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        return v12;
      v7 = v12[1];
      if (!v7)
      {
        v8 = v12 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v12 = a1 + 1;
LABEL_27:
    v24 = operator new(0x68uLL);
    v24[2] = *(_OWORD *)a3;
    *((_QWORD *)v24 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_100063B54((uint64_t)v24 + 56, a4);
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v12;
    *v8 = (uint64_t *)v24;
    v25 = (uint64_t *)**a1;
    v26 = (uint64_t *)v24;
    if (v25)
    {
      *a1 = v25;
      v26 = *v8;
    }
    sub_1000E05F4(a1[1], v26);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v24;
}

void sub_100060DF4(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[55] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100060E18@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  _QWORD *v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (char *)result[8];
  v3 = (char *)result[9];
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v8 = a2;
  }
  else
  {
    if (v5 < 0)
      sub_1000D02C0();
    v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[4 * (v5 >> 2)];
    v8 = a2;
    do
    {
      v7 = *(_DWORD *)v4;
      result = sub_10022CFEC((uint64_t *)&v8, &v7);
      v4 += 4;
    }
    while (v4 != v3);
  }
  return result;
}

void sub_100060EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100060EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::string *v4;
  _QWORD v6[3];
  _BYTE v7[200];

  v3 = a1 + 8;
  if (*(_DWORD *)a1 != *(int *)a1 >> 31)
    return sub_1001DFEA4((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a1 + 28));
  sub_10006232C((uint64_t)v7, "%012x");
  v6[0] = v3;
  v6[1] = nullsub_18;
  v6[2] = sub_100062048;
  v4 = (std::string *)sub_100061298((uint64_t)v7, (uint64_t)v6);
  sub_100060FD8(v4, a2);
  return sub_100062218((uint64_t)v7);
}

void sub_100060FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100062218((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100060FD8@<X0>(std::string *result@<X0>, uint64_t a2@<X8>)
{
  std::string *v2;
  std::string::size_type size;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string::size_type *v11;
  std::string::size_type v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  _QWORD v27[3];

  v2 = result;
  v5 = result->__r_.__value_.__r.__words[0];
  size = result->__r_.__value_.__l.__size_;
  v6 = size - result->__r_.__value_.__r.__words[0];
  if (size == result->__r_.__value_.__r.__words[0])
  {
    if (result[3].__r_.__value_.__s.__data_[15] < 0)
      return (std::string *)sub_10006CED8((_BYTE *)a2, (void *)result[2].__r_.__value_.__r.__words[2], result[3].__r_.__value_.__r.__words[0]);
    *(_OWORD *)a2 = *(_OWORD *)&result[2].__r_.__value_.__r.__words[2];
    *(_QWORD *)(a2 + 16) = result[3].__r_.__value_.__l.__size_;
    return result;
  }
  v7 = SHIDWORD(result[2].__r_.__value_.__r.__words[0]);
  v8 = SLODWORD(result[2].__r_.__value_.__r.__words[1]);
  if ((int)v7 < (int)v8 && (result[3].__r_.__value_.__s.__data_[16] & 2) != 0)
  {
    v27[0] = &off_1003F5278;
    v27[1] = v7;
    v27[2] = v8;
    sub_1001623AC((uint64_t)v27);
  }
  v9 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[3].__r_.__value_.__s.__data_[15] < 0)
    v10 = result[3].__r_.__value_.__r.__words[0];
  else
    v10 = result[3].__r_.__value_.__s.__data_[15];
  if (v9 <= 1)
    v9 = 1;
  v11 = (std::string::size_type *)(v5 + 56);
  do
  {
    while (1)
    {
      if (*((char *)v11 - 25) < 0)
      {
        v12 = *(v11 - 5) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      else
      {
        v12 = *((unsigned __int8 *)v11 - 25) + v10;
        if (*((_DWORD *)v11 - 14) != -2)
          goto LABEL_12;
      }
      if (v12 <= *v11)
        v12 = *v11;
LABEL_12:
      if (*((char *)v11 - 1) < 0)
        break;
      v10 = *((unsigned __int8 *)v11 - 1) + v12;
      v11 += 15;
      if (!--v9)
        goto LABEL_23;
    }
    v10 = *(v11 - 2) + v12;
    v11 += 15;
    --v9;
  }
  while (v9);
LABEL_23:
  std::string::reserve((std::string *)a2, v10);
  v13 = v2[3].__r_.__value_.__s.__data_[15];
  if (v13 >= 0)
    v14 = &v2[2].__r_.__value_.__s.__data_[16];
  else
    v14 = (const std::string::value_type *)v2[2].__r_.__value_.__r.__words[2];
  if (v13 >= 0)
    v15 = v2[3].__r_.__value_.__s.__data_[15];
  else
    v15 = v2[3].__r_.__value_.__r.__words[0];
  result = std::string::append((std::string *)a2, v14, v15);
  v16 = v2->__r_.__value_.__r.__words[0];
  if (v2->__r_.__value_.__l.__size_ != v2->__r_.__value_.__r.__words[0])
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(char *)(v16 + v17 + 31);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)(v16 + v17 + 8);
      else
        v20 = *(const std::string::value_type **)(v16 + v17 + 8);
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v16 + v17 + 31);
      else
        v21 = *(_QWORD *)(v16 + v17 + 16);
      std::string::append((std::string *)a2, v20, v21);
      if (*(_DWORD *)(v16 + v17) != -2)
        goto LABEL_43;
      v22 = *(_QWORD *)(v16 + v17 + 56);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        break;
      v23 = *(_QWORD *)(a2 + 8);
      if (v22 > v23)
        goto LABEL_42;
LABEL_43:
      v24 = *(char *)(v16 + v17 + 55);
      if (v24 >= 0)
        v25 = (const std::string::value_type *)(v16 + v17 + 32);
      else
        v25 = *(const std::string::value_type **)(v16 + v17 + 32);
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(v16 + v17 + 55);
      else
        v26 = *(_QWORD *)(v16 + v17 + 40);
      result = std::string::append((std::string *)a2, v25, v26);
      ++v18;
      v16 = v2->__r_.__value_.__r.__words[0];
      v17 += 120;
      if (v18 >= 0xEEEEEEEEEEEEEEEFLL
                * ((uint64_t)(v2->__r_.__value_.__l.__size_ - v2->__r_.__value_.__r.__words[0]) >> 3))
        goto LABEL_50;
    }
    v23 = *(unsigned __int8 *)(a2 + 23);
    if (v22 <= v23)
      goto LABEL_43;
LABEL_42:
    std::string::append((std::string *)a2, v22 - v23, *(_BYTE *)(v16 + v17 + 72));
    goto LABEL_43;
  }
LABEL_50:
  v2[2].__r_.__value_.__s.__data_[12] = 1;
  return result;
}

void sub_100061264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_100061278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_BYTE *)(a1 + 60))
  {
    v5 = *(_QWORD *)a1;
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 != *(_QWORD *)a1)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (!*(_QWORD *)(a1 + 32)
          || (v8 = *(unsigned int *)(v5 + v6), (v8 & 0x80000000) != 0)
          || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0)
        {
          std::string::resize((std::string *)(v5 + v6 + 8), 0, 0);
          v5 = *(_QWORD *)a1;
          v4 = *(_QWORD *)(a1 + 8);
        }
        ++v7;
        v6 += 120;
      }
      while (v7 < 0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3));
    }
    *(_DWORD *)(a1 + 52) = 0;
    *(_BYTE *)(a1 + 60) = 0;
    if (*(_QWORD *)(a1 + 32))
    {
      v9 = *(unsigned int *)(a1 + 56);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = *(_QWORD *)(a1 + 24);
        do
        {
          if (((*(_QWORD *)(v11 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
            break;
          *(_DWORD *)(a1 + 52) = ++v10;
        }
        while (v9 != v10);
      }
    }
  }
  sub_1000613F8((uint64_t *)a1, a2);
  v12 = *(int *)(a1 + 52);
  v13 = v12 + 1;
  *(_DWORD *)(a1 + 52) = v12 + 1;
  if (*(_QWORD *)(a1 + 32))
  {
    v14 = *(int *)(a1 + 56);
    if ((int)v13 < (int)v14)
    {
      v15 = *(_QWORD *)(a1 + 24);
      v16 = v12 + 2;
      do
      {
        if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        ++v13;
        *(_DWORD *)(a1 + 52) = v16++;
      }
      while (v14 != v13);
    }
  }
  return a1;
}

uint64_t *sub_1000613F8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = *((int *)result + 13);
  v3 = *((int *)result + 14);
  if ((int)v2 >= (int)v3)
  {
    if ((result[11] & 4) != 0)
    {
      v8[0] = &off_1003F5010;
      v8[1] = v2;
      v8[2] = v3;
      sub_1001619B0((uint64_t)v8);
    }
  }
  else
  {
    v5 = *result;
    v4 = result[1];
    if (v4 != *result)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (*(_DWORD *)(v5 + v6) == *((_DWORD *)result + 13))
          sub_1000614F8(a2, v5 + v6, v5 + v6 + 8, (uint64_t)(result + 12));
        ++v7;
        v6 += 120;
      }
      while (v7 < 0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3));
    }
  }
  return result;
}

void sub_1000614E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

void sub_1000614F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100062054(&v4, a4);
}

void sub_100061D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38)
{
  uint64_t v38;

  std::locale::~locale((std::locale *)(v38 - 240));
  sub_100162040((uint64_t)&a38);
  sub_100162040((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_100061E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100162040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100061E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100162040((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100061E3C(uint64_t a1, std::ios_base *this, const std::locale *a3)
{
  std::locale *rdbuf;
  std::locale *v6;
  std::locale *v7;
  std::locale *v9;
  std::locale *v10;
  std::streamsize v11;
  std::ios_base::fmtflags v12;
  const std::locale::facet *v13;
  std::ios_base::fmtflags v14;
  uint64_t v15;
  char v16;
  std::locale v17;
  std::locale v18;

  if (*(_BYTE *)(a1 + 32))
  {
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, (const std::locale *)(a1 + 40));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)this->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(void *, uint64_t))rdbuf->__locale_ + 2))(this->__rdbuf_, a1 + 40);
      v6 = rdbuf + 1;
      std::locale::locale(&v17, v6);
      std::locale::operator=(v6, (const std::locale *)(a1 + 40));
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v16;
  }
  else
  {
    if (!a3)
      goto LABEL_10;
    std::ios_base::getloc(this);
    std::ios_base::imbue(this, a3);
    std::locale::~locale(&v18);
    v9 = (std::locale *)this->__rdbuf_;
    if (v9)
    {
      (*((void (**)(void *, const std::locale *))v9->__locale_ + 2))(this->__rdbuf_, a3);
      v10 = v9 + 1;
      std::locale::locale(&v17, v10);
      std::locale::operator=(v10, a3);
      std::locale::~locale(&v17);
    }
    v7 = (std::locale *)&v15;
  }
  std::locale::~locale(v7);
LABEL_10:
  if (*(_QWORD *)a1 != -1)
    this->__width_ = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 != -1)
    this->__precision_ = v11;
  v12 = *(char *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (this[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(this);
      v13 = std::locale::use_facet(&v18, &std::ctype<char>::id);
      v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 32);
      std::locale::~locale(&v18);
      this[1].__fmtflags_ = v14;
    }
    this[1].__fmtflags_ = v12;
  }
  this->__fmtflags_ = *(_DWORD *)(a1 + 20);
  std::ios_base::clear(this, *(_DWORD *)(a1 + 24));
  this->__exceptions_ = *(_DWORD *)(a1 + 28);
  std::ios_base::clear(this, this->__rdstate_);
}

void sub_100061FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_100062008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void sub_10006201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_100062030()
{
  operator delete();
}

uint64_t sub_100062048(uint64_t a1, _QWORD *a2)
{
  return std::ostream::operator<<(a1, *a2);
}

void sub_100062054(_QWORD *a1, uint64_t a2)
{
  a1[1] = a2;
  a1[2] = 0;
  operator new();
}

void sub_100062110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1001620D0(v2);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_10006212C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_100062138(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_end_catch();
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

double sub_100062154@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v4 = *(_QWORD *)(a2 + 128);
  v5 = a1[6];
  if (v5 && a1[8] < v5)
    a1[8] = v5;
  if (v4 == -1)
  {
LABEL_16:
    v10 = -1;
    goto LABEL_17;
  }
  if ((a3 & 8) != 0)
  {
    v6 = a1[3];
    if (v6)
    {
      if ((v4 & 0x8000000000000000) == 0)
      {
        v7 = a1[2];
        if (v4 <= a1[8] - v7)
        {
          v8 = v6 + (int)v4 - (int)v6 + (int)v7;
          a1[3] = v8;
          if ((a3 & 0x10) == 0 || !v5)
            goto LABEL_20;
          v9 = v8 - v5;
LABEL_19:
          a1[6] = v5 + v9;
LABEL_20:
          v10 = v4;
          goto LABEL_17;
        }
      }
      goto LABEL_16;
    }
  }
  v10 = -1;
  if ((a3 & 0x10) != 0 && v5 && (v4 & 0x8000000000000000) == 0)
  {
    v11 = a1[2];
    if (v4 <= a1[8] - v11)
    {
      v9 = v4 - v5 + v11;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_17:
  result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = v10;
  return result;
}

uint64_t sub_100062218(uint64_t a1)
{
  void *v2;
  std::locale *v3;
  std::locale *v4;
  std::locale *v5;

  if (*(_BYTE *)(a1 + 184))
  {
    std::locale::~locale((std::locale *)(a1 + 192));
    *(_BYTE *)(a1 + 184) = 0;
  }
  *(_QWORD *)(a1 + 96) = off_1003F4D88;
  if (*(_BYTE *)(a1 + 168))
    operator delete(*(void **)(a1 + 112));
  *(_OWORD *)(a1 + 153) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::streambuf::~streambuf(a1 + 96);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 24);
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 24);
  if (v2)
LABEL_7:
    operator delete(v2);
LABEL_8:
  v3 = *(std::locale **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(std::locale **)(a1 + 8);
    v5 = *(std::locale **)a1;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
      return a1;
    }
    while (1)
    {
      if (LOBYTE(v4[-4].__locale_))
      {
        std::locale::~locale(v4 - 3);
        LOBYTE(v4[-4].__locale_) = 0;
      }
      if (SHIBYTE(v4[-9].__locale_) < 0)
      {
        operator delete(v4[-11].__locale_);
        if (SHIBYTE(v4[-12].__locale_) < 0)
LABEL_18:
          operator delete(v4[-14].__locale_);
      }
      else if (SHIBYTE(v4[-12].__locale_) < 0)
      {
        goto LABEL_18;
      }
      v4 -= 15;
      if (v4 == v3)
      {
        v5 = *(std::locale **)a1;
        goto LABEL_22;
      }
    }
  }
  return a1;
}

uint64_t sub_10006232C(uint64_t a1, const char *a2)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string __dst;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_BYTE *)(a1 + 88) = -1;
  std::streambuf::basic_streambuf(a1 + 96);
  *(_QWORD *)(a1 + 96) = off_1003F4D88;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 24;
  *(_BYTE *)(a1 + 184) = 0;
  if (!a2)
    return a1;
  v4 = strlen(a2);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_9:
    memcpy(p_dst, a2, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  sub_1000624E4(a1, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100062460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v19;

  if (a15 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v15 + 184))
  {
    std::locale::~locale((std::locale *)(v15 + 192));
    *(_BYTE *)(v15 + 184) = 0;
  }
  sub_1001603BC(v16);
  if (*(char *)(v15 + 87) < 0)
  {
    operator delete(*v17);
    v19 = *(void **)(v15 + 24);
    if (!v19)
    {
LABEL_7:
      sub_100160408((void **)v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v19 = *(void **)(v15 + 24);
    if (!v19)
      goto LABEL_7;
  }
  operator delete(v19);
  sub_100160408((void **)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1000624E4(uint64_t a1, const std::string *a2)
{
  std::locale::facet *v4;
  char v5;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string::size_type size;
  char *v14;
  unsigned __int8 *v15;
  const std::string *v16;
  int v17;
  std::string::size_type v18;
  char *v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  unsigned int *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  std::string *v30;
  std::string::size_type v31;
  BOOL v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v42;
  char v43;
  int v44;
  int v45;
  const std::string *v46;
  std::locale v47;
  void *v48[2];
  void *__p[2];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  std::locale v57[2];
  int v58;

  if (*(_BYTE *)(a1 + 184))
    std::locale::locale(&v47, (const std::locale *)(a1 + 192));
  else
    std::locale::locale(&v47);
  v4 = (std::locale::facet *)std::locale::use_facet(&v47, &std::ctype<char>::id);
  std::locale::~locale(&v47);
  v5 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 37);
  v6 = sub_100062A4C(a2, v5, (uint64_t)v4, *(_BYTE *)(a1 + 88));
  sub_1000634F0((char **)a1, v6);
  v46 = 0;
  v7 = std::string::find(a2, v5, 0);
  if (v7 == -1)
  {
    v10 = 0;
    v45 = 0;
    v44 = -1;
    v42 = 0;
    v43 = 1;
    goto LABEL_43;
  }
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v45 = 0;
  v44 = -1;
  v42 = 0;
  v43 = 1;
  do
  {
    v11 = (std::string *)(a1 + 64);
    if (v9)
      v11 = (std::string *)(*(_QWORD *)a1 + 120 * v9 - 88);
    v12 = v8 + 1;
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v14 = (char *)a2->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) == 0)
      v14 = (char *)a2;
    if (v14[v12] == v14[v8])
    {
      sub_100160DDC(v11, (unint64_t)&v14[v10], &v14[v12]);
      v10 = v8 + 2;
      v15 = (unsigned __int8 *)(v8 + 2);
      goto LABEL_7;
    }
    if (v8 != v10)
    {
      sub_100160DDC(v11, (unint64_t)&v14[v10], &v14[v8]);
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    if ((size & 0x80) != 0)
    {
      v16 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v16 = a2;
    }
    v46 = (const std::string *)((char *)v16 + v12);
    v47.__locale_ = (std::locale::__imp *)((char *)v16 + size);
    v17 = sub_100062BD0((unsigned __int8 **)&v46, (char **)&v47, *(_QWORD *)a1 + 120 * v9, v4, (unsigned __int8 *)(v8 + 1), *(unsigned __int8 *)(a1 + 88));
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = (std::string::size_type)a2;
    else
      v18 = a2->__r_.__value_.__r.__words[0];
    v15 = (unsigned __int8 *)v46 - v18;
    if (!v17)
    {
      v10 = v8;
      goto LABEL_7;
    }
    v19 = *(char **)a1;
    v20 = (_DWORD *)(*(_QWORD *)a1 + 120 * v9);
    v21 = v20 + 28;
    v22 = v20[28];
    if ((v22 & 1) == 0)
      goto LABEL_26;
    v23 = &v19[120 * v9];
    v26 = *((_DWORD *)v23 + 19);
    v24 = (unsigned int *)(v23 + 76);
    v25 = v26;
    if ((v26 & 0x20) == 0)
    {
      v22 &= ~2u;
      *v21 = v22;
      v19[120 * v9 + 72] = 48;
      *v24 = v25 & 0xFFFFFF4F | 0x10;
LABEL_26:
      if ((v22 & 2) != 0)
        goto LABEL_27;
      goto LABEL_30;
    }
    v22 &= ~1u;
    *v21 = v22;
    if ((v22 & 2) != 0)
    {
LABEL_27:
      if ((v19[120 * v9 + 77] & 8) != 0)
        *v21 = v22 & 0xFFFFFFFD;
    }
LABEL_30:
    v27 = *v20;
    if (v27 != -3)
    {
      if (v27 == -1)
      {
        v43 = 0;
        v28 = v45;
      }
      else
      {
        v28 = v45;
        if (v27 == -2)
        {
          v42 = 1;
        }
        else
        {
          v29 = v44;
          if (v27 > v44)
            v29 = v27;
          v44 = v29;
        }
      }
      v45 = v28 + 1;
      ++v9;
    }
    v10 = (std::string::size_type)v15;
LABEL_7:
    v8 = std::string::find(a2, v5, (std::string::size_type)v15);
  }
  while (v8 != -1);
  if (v9)
  {
    v30 = (std::string *)(*(_QWORD *)a1 + 120 * v9 - 88);
    goto LABEL_44;
  }
LABEL_43:
  v30 = (std::string *)(a1 + 64);
LABEL_44:
  v31 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v32 = (v31 & 0x80u) != 0;
  if ((v31 & 0x80u) != 0)
    v31 = a2->__r_.__value_.__l.__size_;
  if (v32)
    v33 = (char *)a2->__r_.__value_.__r.__words[0];
  else
    v33 = (char *)a2;
  sub_100160DDC(v30, (unint64_t)&v33[v10], &v33[v31]);
  if ((v43 & 1) == 0)
  {
    if ((v44 & 0x80000000) == 0 && (*(_BYTE *)(a1 + 88) & 1) != 0)
    {
      v47.__locale_ = (std::locale::__imp *)&off_1003F4F10;
      v48[0] = (void *)v44;
      v48[1] = 0;
      sub_100160930((uint64_t)&v47);
    }
    if (v45 < 1)
    {
      v34 = 0;
    }
    else
    {
      v34 = 0;
      v35 = *(char **)a1;
      v36 = v45;
      do
      {
        if (*(_DWORD *)v35 == -1)
          *(_DWORD *)v35 = v34++;
        v35 += 120;
        --v36;
      }
      while (v36);
    }
    v44 = v34 - 1;
  }
  v37 = ((uint64_t (*)(std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  LODWORD(v47.__locale_) = -1;
  v56 = 0;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)__p = 0u;
  v50 = 0u;
  v51 = 0;
  v52 = 6;
  v53 = v37;
  v55 = 0;
  v54 = 4098;
  v57[1].__locale_ = (std::locale::__imp *)0x7FFFFFFFFFFFFFFFLL;
  v58 = 0;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = 0xEEEEEEEEEEEEEEEFLL * ((v38 - *(_QWORD *)a1) >> 3);
  if (v45 > v39)
  {
    sub_10016164C((void **)a1, v45 - v39, (uint64_t)&v47);
    goto LABEL_72;
  }
  if (v45 < v39)
  {
    v40 = *(_QWORD *)a1 + 120 * v45;
    while (1)
    {
      if (v38 == v40)
      {
        *(_QWORD *)(a1 + 8) = v40;
        break;
      }
      if (*(_BYTE *)(v38 - 32))
      {
        std::locale::~locale((std::locale *)(v38 - 24));
        *(_BYTE *)(v38 - 32) = 0;
      }
      if (*(char *)(v38 - 65) < 0)
      {
        operator delete(*(void **)(v38 - 88));
        if ((*(char *)(v38 - 89) & 0x80000000) == 0)
          goto LABEL_64;
      }
      else if ((*(char *)(v38 - 89) & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      operator delete(*(void **)(v38 - 112));
LABEL_64:
      v38 -= 120;
    }
  }
LABEL_72:
  if (v56)
  {
    std::locale::~locale(v57);
    v56 = 0;
  }
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_76;
LABEL_80:
    operator delete(v48[0]);
    if ((v42 & 1) == 0)
      goto LABEL_78;
LABEL_77:
    *(_DWORD *)(a1 + 48) |= 4u;
    goto LABEL_78;
  }
  operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_80;
LABEL_76:
  if ((v42 & 1) != 0)
    goto LABEL_77;
LABEL_78:
  *(_DWORD *)(a1 + 56) = v44 + 1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFFFE | v43 & 1;
  return a1;
}

void sub_100062A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  std::exception::~exception(&a14);
  _Unwind_Resume(a1);
}

void sub_100062A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1001606F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100062A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100062A4C(const std::string *a1, unsigned __int8 a2, uint64_t a3, char a4)
{
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string::size_type v12;
  const std::string *v13;
  std::string::size_type v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  _QWORD v21[3];

  v8 = std::string::find(a1, a2, 0);
  if (v8 == -1)
    return 0;
  v9 = 0;
  while (1)
  {
    v10 = v8 + 1;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v12 = (size & 0x80u) == 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
    if (v10 >= v12)
      break;
    v13 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) == 0)
      v14 = (std::string::size_type)a1;
    else
      v14 = a1->__r_.__value_.__r.__words[0];
    v15 = *(unsigned __int8 *)(v14 + v10);
    if ((size & 0x80) != 0)
    {
      size = a1->__r_.__value_.__l.__size_;
      if (v15 == v13->__r_.__value_.__s.__data_[v8])
        goto LABEL_3;
LABEL_15:
      v16 = (unsigned __int8 *)v13 + v10;
      if (v10 != size)
      {
        v17 = (unsigned __int8 *)v13 + size;
        v18 = ~v8 + size;
        while (((char)*v16 & 0x80000000) == 0 && (*(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * *v16) & 0x400) != 0)
        {
          ++v16;
          if (!--v18)
          {
            v16 = v17;
            break;
          }
        }
      }
      v19 = (std::string::size_type)&v16[-v14];
      if ((unint64_t)&v16[-v14] < v12 && *v16 == a2)
        ++v19;
      v9 = (v9 + 1);
      v8 = std::string::find(a1, a2, v19);
      if (v8 == -1)
        return v9;
    }
    else
    {
      v13 = a1;
      if (v15 != a1->__r_.__value_.__s.__data_[v8])
        goto LABEL_15;
LABEL_3:
      v8 = std::string::find(a1, a2, v8 + 2);
      if (v8 == -1)
        return v9;
    }
  }
  if ((a4 & 1) != 0)
  {
    v21[0] = &off_1003F4F10;
    v21[1] = v8;
    v21[2] = v12;
    sub_100160930((uint64_t)v21);
  }
  return (v9 + 1);
}

void sub_100062BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100062BD0(unsigned __int8 **a1, char **a2, uint64_t a3, _QWORD *a4, unsigned __int8 *a5, uint64_t a6)
{
  unsigned __int8 *v8;
  uint64_t v9;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  int v20;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 v35;
  int v36;
  int v37;
  _BOOL4 v39;
  int v41;
  unsigned __int8 v42;
  unsigned int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  unsigned __int8 v52;
  void (**v53)(std::exception *__hidden);
  unsigned __int8 *v54;
  uint64_t v55;

  *(_DWORD *)a3 = -1;
  v8 = *a1;
  v9 = (uint64_t)&a5[*a2 - (char *)*a1];
  if (*a2 <= (char *)*a1)
  {
    if ((a6 & 1) != 0)
    {
      v53 = &off_1003F4F10;
      v54 = a5;
      v55 = v9;
      sub_100160930((uint64_t)&v53);
    }
    return 0;
  }
  v14 = *v8;
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
  v16 = *a1;
  if (v14 == v15)
  {
    *a1 = ++v16;
    if (v16 >= (unsigned __int8 *)*a2)
    {
      if ((a6 & 1) != 0)
      {
        v53 = &off_1003F4F10;
        v54 = &v16[a5 - v8];
        v55 = v9;
        sub_100160930((uint64_t)&v53);
      }
      return 0;
    }
  }
  v52 = v15;
  v51 = v9;
  v17 = *v16;
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 48);
  v19 = *a1;
  if (v17 == v18 || (char)*v19 < 0 || (*(_DWORD *)(a4[2] + 4 * *v19) & 0x400) == 0)
  {
    if (v19 != (unsigned __int8 *)*a2)
      goto LABEL_8;
    goto LABEL_41;
  }
  v50 = v14;
  if (*a2 == (char *)v19)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      if ((char)*v19 < 0)
        break;
      v23 = *v19;
      if ((*(_DWORD *)(a4[2] + 4 * v23) & 0x400) == 0)
        break;
      v22 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v23, 0)
          + 10 * v22
          - 48;
      ++v19;
    }
    while (v19 != (unsigned __int8 *)*a2);
  }
  *a1 = v19;
  if (v19 >= (unsigned __int8 *)*a2)
  {
    if ((a6 & 1) != 0)
    {
      v53 = &off_1003F4F10;
      v54 = &v19[a5 - v8];
      v55 = v51;
      sub_100160930((uint64_t)&v53);
    }
    return 0;
  }
  v27 = *v19;
  if (v27 == (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 37))
  {
    *(_DWORD *)a3 = v22 - 1;
    v28 = *a1 + 1;
    *a1 = v28;
    if (v50 == v52)
LABEL_79:
      sub_10016108C(a6, (uint64_t)&v28[a5 - v8], v51);
    return 1;
  }
  v29 = **a1;
  if (v29 != (*(unsigned __int8 (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 36))
  {
    *(_QWORD *)(a3 + 56) = v22;
    *(_DWORD *)a3 = -1;
    v26 = *a1;
    goto LABEL_52;
  }
  *(_DWORD *)a3 = v22 - 1;
  v19 = *a1 + 1;
  *a1 = v19;
  v14 = v50;
  if (v19 != (unsigned __int8 *)*a2)
  {
LABEL_8:
    v50 = v14;
    while (2)
    {
      switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v19, 0))
      {
        case ' ':
          *(_DWORD *)(a3 + 112) |= 2u;
          goto LABEL_11;
        case '#':
          v20 = *(_DWORD *)(a3 + 76) | 0x600;
          goto LABEL_10;
        case '\'':
          goto LABEL_11;
        case '+':
          v20 = *(_DWORD *)(a3 + 76) | 0x800;
          goto LABEL_10;
        case '-':
          v20 = *(_DWORD *)(a3 + 76) | 0x20;
          goto LABEL_10;
        case '0':
          *(_DWORD *)(a3 + 112) |= 1u;
          goto LABEL_11;
        case '=':
          *(_DWORD *)(a3 + 112) |= 4u;
          goto LABEL_11;
        case '_':
          v20 = *(_DWORD *)(a3 + 76) | 0x10;
LABEL_10:
          *(_DWORD *)(a3 + 76) = v20;
LABEL_11:
          v19 = *a1 + 1;
          *a1 = v19;
          if (v19 != (unsigned __int8 *)*a2)
            continue;
          goto LABEL_41;
        default:
          v24 = **a1;
          v25 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
          v26 = *a1;
          if (v24 == v25)
          {
            ++v26;
LABEL_31:
            *a1 = v26;
            goto LABEL_52;
          }
          if (v26 != (unsigned __int8 *)*a2
            && ((char)*v26 & 0x80000000) == 0
            && (*(_DWORD *)(a4[2] + 4 * *v26) & 0x400) != 0)
          {
            *(_QWORD *)(a3 + 56) = 0;
            do
            {
              if ((char)*v26 < 0)
                break;
              v30 = *v26;
              if ((*(_DWORD *)(a4[2] + 4 * v30) & 0x400) == 0)
                break;
              *(_QWORD *)(a3 + 56) = 10 * *(_QWORD *)(a3 + 56)
                                   + (*(int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)v30, 0)- 48;
              ++v26;
            }
            while (v26 != (unsigned __int8 *)*a2);
            goto LABEL_31;
          }
          break;
      }
      break;
    }
LABEL_52:
    if (v26 >= (unsigned __int8 *)*a2)
    {
      if ((a6 & 1) != 0)
      {
        v53 = &off_1003F4F10;
        v54 = &v26[a5 - v8];
        v55 = v51;
        sub_100160930((uint64_t)&v53);
      }
      return 1;
    }
    v31 = *v26;
    v32 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 46);
    v33 = *a1;
    if (v31 == v32)
    {
      *a1 = ++v33;
      if (v33 != (unsigned __int8 *)*a2)
      {
        v34 = *v33;
        v35 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 42);
        v33 = *a1;
        if (v34 == v35)
        {
          v36 = 0;
          *a1 = ++v33;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          goto LABEL_66;
        }
        if (v33 != (unsigned __int8 *)*a2
          && ((char)*v33 & 0x80000000) == 0
          && (*(_DWORD *)(a4[2] + 4 * *v33) & 0x400) != 0)
        {
          v33 = sub_1001610E0(a1, a2, (_QWORD *)(a3 + 64), a4);
          *a1 = v33;
          v36 = 1;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          goto LABEL_66;
        }
      }
      v36 = 0;
      *(_QWORD *)(a3 + 64) = 0;
      if (v33 == (unsigned __int8 *)*a2)
        goto LABEL_95;
      goto LABEL_66;
    }
    v36 = 0;
    if (v33 == (unsigned __int8 *)*a2)
    {
LABEL_95:
      if ((a6 & 1) != 0)
      {
        v53 = &off_1003F4F10;
        v54 = &v33[a5 - v8];
        v55 = v51;
        sub_100160930((uint64_t)&v53);
      }
      return 1;
    }
LABEL_66:
    v37 = 0;
    while (1)
    {
      switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v33, 0))
      {
        case '2':
          if (v37 == 51)
            goto LABEL_73;
          goto LABEL_78;
        case '3':
          if (v37 != 73)
            goto LABEL_78;
          v37 = 51;
          goto LABEL_68;
        case '4':
          if (v37 != 54)
            goto LABEL_78;
LABEL_73:
          v37 = 0;
          goto LABEL_68;
        case '6':
          if (v37 != 73)
          {
LABEL_78:
            v28 = *a1;
            goto LABEL_79;
          }
          v37 = 54;
LABEL_68:
          v33 = *a1 + 1;
          *a1 = v33;
          if (v33 == (unsigned __int8 *)*a2)
            goto LABEL_95;
          break;
        case 'I':
          v37 = 73;
          goto LABEL_68;
        case 'L':
        case 'h':
        case 'j':
        case 'l':
        case 'w':
        case 'z':
          goto LABEL_68;
        default:
          v33 = *a1;
          v39 = v37 != 73 && v37 != 0;
          if (v33 >= (unsigned __int8 *)*a2 || v39)
            goto LABEL_95;
          if (v50 == v52)
          {
            v41 = *v33;
            v42 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
            v33 = *a1;
            if (v41 == v42)
            {
              *a1 = v33 + 1;
              return 1;
            }
          }
          switch((*(unsigned int (**)(_QWORD *, _QWORD, _QWORD))(*a4 + 72))(a4, (char)*v33, 0))
          {
            case 'A':
              v46 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v46;
              goto LABEL_118;
            case 'C':
            case 'c':
              *(_QWORD *)(a3 + 104) = 1;
              goto LABEL_123;
            case 'E':
              v47 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v47;
              goto LABEL_121;
            case 'F':
              v45 = *(_DWORD *)(a3 + 76) | 0x4000;
              *(_DWORD *)(a3 + 76) = v45;
              goto LABEL_115;
            case 'G':
              v43 = *(_DWORD *)(a3 + 76) | 0x4000;
              goto LABEL_122;
            case 'S':
            case 's':
              if (v36)
                *(_QWORD *)(a3 + 104) = *(_QWORD *)(a3 + 64);
              *(_QWORD *)(a3 + 64) = 6;
              goto LABEL_123;
            case 'T':
              v44 = *a1 + 1;
              *a1 = v44;
              if (v44 >= (unsigned __int8 *)*a2)
              {
                sub_10016108C(a6, (uint64_t)&v44[a5 - v8], v51);
                return 0;
              }
              *(_BYTE *)(a3 + 72) = *v44;
LABEL_106:
              *(_DWORD *)(a3 + 112) |= 8u;
              *(_DWORD *)a3 = -2;
LABEL_123:
              v28 = *a1 + 1;
              *a1 = v28;
              if (v50 != v52)
                return 1;
              if (v28 != (unsigned __int8 *)*a2)
              {
                v48 = *v28;
                v49 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 124);
                v28 = *a1;
                if (v48 == v49)
                {
                  *a1 = v28 + 1;
                  return 1;
                }
              }
              break;
            case 'X':
              *(_DWORD *)(a3 + 76) |= 0x4000u;
              goto LABEL_109;
            case 'a':
              v46 = *(_DWORD *)(a3 + 76);
LABEL_118:
              v43 = v46 & 0xFFFFFEB1 | 0x104;
              goto LABEL_122;
            case 'b':
              v43 = *(_DWORD *)(a3 + 76) | 1;
              goto LABEL_122;
            case 'd':
            case 'g':
            case 'i':
            case 'u':
              goto LABEL_123;
            case 'e':
              v47 = *(_DWORD *)(a3 + 76);
LABEL_121:
              v43 = v47 | 0x100;
              goto LABEL_122;
            case 'f':
              v45 = *(_DWORD *)(a3 + 76);
LABEL_115:
              v43 = v45 | 4;
              goto LABEL_122;
            case 'n':
              *(_DWORD *)a3 = -3;
              goto LABEL_123;
            case 'o':
              v43 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 0x40;
              goto LABEL_122;
            case 'p':
            case 'x':
LABEL_109:
              v43 = *(_DWORD *)(a3 + 76) & 0xFFFFFFB5 | 8;
LABEL_122:
              *(_DWORD *)(a3 + 76) = v43;
              goto LABEL_123;
            case 't':
              *(_BYTE *)(a3 + 72) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a4 + 56))(a4, 32);
              goto LABEL_106;
            default:
              sub_10016108C(a6, (uint64_t)&(*a1)[a5 - v8], v51);
              goto LABEL_123;
          }
          goto LABEL_79;
      }
    }
  }
LABEL_41:
  if ((a6 & 1) != 0)
  {
    v53 = &off_1003F4F10;
    v54 = &v19[a5 - v8];
    v55 = v51;
    sub_100160930((uint64_t)&v53);
  }
  return 1;
}

void sub_100063478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_10006348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_1000634A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_1000634B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_1000634C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_1000634DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void sub_1000634F0(char **a1, unint64_t a2)
{
  const std::locale::facet *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::locale v12;
  void *v13[2];
  void *__p[2];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  std::locale v22;
  uint64_t v23;
  int v24;

  if (*((_BYTE *)a1 + 184))
    std::locale::locale(&v12, (const std::locale *)a1 + 24);
  else
    std::locale::locale(&v12);
  v4 = std::locale::use_facet(&v12, &std::ctype<char>::id);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 32);
  std::locale::~locale(&v12);
  v6 = a1[1] - *a1;
  if (!v6)
  {
    LODWORD(v12.__locale_) = -1;
    v21 = 0;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    v16 = 0;
    v17 = 6;
    v18 = v5;
    v20 = 0;
    v19 = 4098;
    v23 = 0x7FFFFFFFFFFFFFFFLL;
    v24 = 0;
    sub_1000637F0((void **)a1, a2, (uint64_t)&v12);
    if (v21)
    {
      std::locale::~locale(&v22);
      v21 = 0;
    }
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p[1]);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        goto LABEL_22;
    }
    else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v13[0]);
    goto LABEL_22;
  }
  v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  if (a2 <= v7)
  {
    sub_100160984((uint64_t)(a1 + 3), 0, 0);
    if (!a2)
      goto LABEL_22;
    goto LABEL_17;
  }
  LODWORD(v12.__locale_) = -1;
  v21 = 0;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 0;
  v17 = 6;
  v18 = v5;
  v20 = 0;
  v19 = 4098;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0;
  sub_10016164C((void **)a1, a2 - v7, (uint64_t)&v12);
  if (v21)
  {
    std::locale::~locale(&v22);
    v21 = 0;
  }
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      goto LABEL_10;
LABEL_24:
    operator delete(v13[0]);
    goto LABEL_10;
  }
  if (SHIBYTE(__p[0]) < 0)
    goto LABEL_24;
LABEL_10:
  sub_100160984((uint64_t)(a1 + 3), 0, 0);
LABEL_17:
  v8 = 0;
  do
  {
    v9 = *a1;
    v10 = &(*a1)[v8];
    *(_DWORD *)v10 = -1;
    *((_QWORD *)v10 + 13) = 0x7FFFFFFFFFFFFFFFLL;
    *((_DWORD *)v10 + 28) = 0;
    std::string::resize((std::string *)(v10 + 8), 0, 0);
    std::string::resize((std::string *)(v10 + 32), 0, 0);
    v11 = &v9[v8];
    *(_OWORD *)(v11 + 56) = xmmword_1003896C0;
    v11[72] = v5;
    *((_DWORD *)v11 + 21) = 0;
    *(_QWORD *)(v11 + 76) = 4098;
    v8 += 120;
    --a2;
  }
  while (a2);
LABEL_22:
  std::string::resize((std::string *)(a1 + 8), 0, 0);
}

void sub_1000637B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001606F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000637C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1001606F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000637D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11)
{
  std::locale::~locale(&a11);
  _Unwind_Resume(a1);
}

void sub_1000637F0(void **a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  std::locale *v13;
  std::locale::__imp *v14;
  __int128 v15;
  std::locale *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;

  v7 = (uint64_t)(a1 + 2);
  v6 = (uint64_t)a1[2];
  v8 = (std::locale *)*a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - (uint64_t)*a1) >> 3) >= a2)
  {
    v29 = ((_BYTE *)a1[1] - (_BYTE *)v8) / 120;
    if (v29 >= a2)
      v11 = a2;
    else
      v11 = ((_BYTE *)a1[1] - (_BYTE *)v8) / 120;
    if (v11)
    {
      v12 = (_OWORD *)(a3 + 56);
      v13 = v8 + 13;
      do
      {
        LODWORD(v13[-13].__locale_) = *(_DWORD *)a3;
        std::string::operator=((std::string *)&v13[-12], (const std::string *)(a3 + 8));
        std::string::operator=((std::string *)&v13[-9], (const std::string *)(a3 + 32));
        v15 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)&v13[-6].__locale_ = *v12;
        *(_OWORD *)&v13[-4].__locale_ = v15;
        if (LOBYTE(v13[-2].__locale_))
        {
          v16 = v13 - 1;
          if (*(_BYTE *)(a3 + 88))
          {
            std::locale::operator=(v16, (const std::locale *)(a3 + 96));
          }
          else
          {
            std::locale::~locale(v16);
            LOBYTE(v13[-2].__locale_) = 0;
          }
        }
        else if (*(_BYTE *)(a3 + 88))
        {
          std::locale::locale(v13 - 1, (const std::locale *)(a3 + 96));
          LOBYTE(v13[-2].__locale_) = 1;
        }
        v14 = *(std::locale::__imp **)(a3 + 104);
        LODWORD(v13[1].__locale_) = *(_DWORD *)(a3 + 112);
        v13->__locale_ = v14;
        v13 += 15;
        --v11;
      }
      while (v11);
    }
    if (a2 > v29)
    {
      v17 = (uint64_t)a1[1];
      v18 = v17 + 120 * (a2 - v29);
      v19 = 120 * a2 - 120 * v29;
      do
      {
        sub_100160BEC(v7, v17, a3);
        v17 += 120;
        v19 -= 120;
      }
      while (v19);
      a1[1] = (void *)v18;
      return;
    }
    v20 = (std::locale *)a1[1];
    v21 = (uint64_t)*a1 + 120 * a2;
    while (1)
    {
      if (v20 == (std::locale *)v21)
      {
        a1[1] = (void *)v21;
        return;
      }
      if (LOBYTE(v20[-4].__locale_))
      {
        std::locale::~locale(v20 - 3);
        LOBYTE(v20[-4].__locale_) = 0;
      }
      if (SHIBYTE(v20[-9].__locale_) < 0)
      {
        operator delete(v20[-11].__locale_);
        if ((SHIBYTE(v20[-12].__locale_) & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((SHIBYTE(v20[-12].__locale_) & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(v20[-14].__locale_);
LABEL_30:
      v20 -= 15;
    }
  }
  if (!v8)
    goto LABEL_42;
  v9 = (std::locale *)a1[1];
  v10 = *a1;
  if (v9 != v8)
  {
    while (1)
    {
      if (LOBYTE(v9[-4].__locale_))
      {
        std::locale::~locale(v9 - 3);
        LOBYTE(v9[-4].__locale_) = 0;
      }
      if (SHIBYTE(v9[-9].__locale_) < 0)
      {
        operator delete(v9[-11].__locale_);
        if (SHIBYTE(v9[-12].__locale_) < 0)
LABEL_12:
          operator delete(v9[-14].__locale_);
      }
      else if (SHIBYTE(v9[-12].__locale_) < 0)
      {
        goto LABEL_12;
      }
      v9 -= 15;
      if (v9 == v8)
      {
        v10 = *a1;
        break;
      }
    }
  }
  a1[1] = v8;
  operator delete(v10);
  v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_42:
  if (a2 > 0x222222222222222)
    goto LABEL_52;
  v22 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  v23 = 2 * v22;
  if (2 * v22 <= a2)
    v23 = a2;
  v24 = v22 >= 0x111111111111111 ? 0x222222222222222 : v23;
  if (v24 > 0x222222222222222)
LABEL_52:
    sub_1000D02C0();
  v25 = 120 * v24;
  v26 = (char *)operator new(120 * v24);
  *a1 = v26;
  a1[1] = v26;
  a1[2] = &v26[v25];
  v27 = 120 * a2;
  v28 = &v26[v27];
  do
  {
    sub_100160BEC(v7, (uint64_t)v26, a3);
    v26 += 120;
    v27 -= 120;
  }
  while (v27);
  a1[1] = v28;
}

void sub_100063B00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_100063B08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_100063B10(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

uint64_t sub_100063B18(uint64_t result, char a2)
{
  *(_BYTE *)(result + 96) = a2;
  *(_BYTE *)(result + 104) |= 8u;
  return result;
}

uint64_t sub_100063B2C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 21) = a2;
  return result;
}

uint64_t sub_100063B34(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  *(_BYTE *)(result + 104) |= 4u;
  return result;
}

uint64_t sub_100063B48(uint64_t result, char a2)
{
  *(_BYTE *)(result + 20) = a2;
  return result;
}

double sub_100063B54(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003F9BB8;
  *(_BYTE *)(a1 + 40) &= 0xC0u;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return result;
}

uint64_t sub_100063BA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100063BB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t sub_100063BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  *(_BYTE *)(result + 40) |= 0x20u;
  return result;
}

uint64_t sub_100063BCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_100063BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *__p;
  void *v7[2];
  char v8;
  std::string v9;
  std::string v10;

  v4 = a1 + 8;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(v7, "");
    sub_10015D524("Unexpected request to record legacy data for ", &v9);
    sub_1000F8A40(v4, &v10);
    sub_100174738((uint64_t)v7, (uint64_t)&v9, 2);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v10.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v7[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_10005F09C(a1);
  sub_100063DB8(a2, (_DWORD *)(a1 + 80));
  *(_BYTE *)a1 = 1;
  return a1;
}

void sub_100063D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100063DB8(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "WifiScanEvent");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "timestampNanos", 10, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 8));
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "rssiDict", 13, 2);
  v11 = v9
      + v10
      + (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 11, 12, *(unsigned int *)(a1 + 32));
  v12 = *(_QWORD **)(a1 + 16);
  if (v12 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v20 = (*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)a2 + 168))(a2, v12 + 4);
      v21 = sub_10005F9EC((uint64_t)(v12 + 7), a2);
      v22 = (_QWORD *)v12[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v12[2];
          v24 = *v23 == (_QWORD)v12;
          v12 = v23;
        }
        while (!v24);
      }
      v11 += v20 + v21;
      v12 = v23;
    }
    while (v23 != (_QWORD *)(a1 + 24));
  }
  v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 80))(a2) + v11;
  v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v15 = v13
      + v14
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "settings", 12, 3);
  v16 = sub_10005FCAC(a1 + 40, a2);
  v17 = v16 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v18 = v15 + v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v18 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_10006400C(uint64_t a1, char a2, char a3, unsigned int a4)
{
  char v8;
  char v9;
  unsigned int v10;

  v8 = a2;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v8, 1);
  v9 = a3;
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v9, 1);
  v10 = bswap32(a4);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v10, 4);
  return 6;
}

uint64_t sub_100064090()
{
  return 0;
}

uint64_t sub_100064098(uint64_t a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t i;
  int v34;
  int v35;
  unsigned __int16 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t result;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _QWORD *exception;

  v2 = a2[7];
  v3 = a2[6] + 1;
  a2[6] = v3;
  if (v2 < v3)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    exception[2] = 0;
    exception[3] = 0;
    *exception = off_1003F07E8;
    exception[1] = 0;
    *((_DWORD *)exception + 8) = 6;
  }
  v6 = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a2 + 32))(a2, "DataRunMetadata");
  v7 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "locationId", 11, 1)+ v6;
  v8 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 32);
  v9 = v7 + v8 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "phoneModel", 11, 2);
  v11 = v10 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 56);
  v12 = v9 + v11 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v13 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "runType", 8, 3);
  v14 = v13 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 80));
  v15 = v14 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v12
      + v15
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "macAddress", 11, 4);
  v17 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 88);
  v18 = v17 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v19 = v18
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "androidVersion", 11, 5);
  v20 = v19 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 136);
  v21 = v16 + v20 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v22 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "mappingStartTimestampMillis", 10, 6);
  v23 = v22 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 160));
  v24 = v23 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v25 = v24
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "emailAddress", 11, 7);
  v26 = v25 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 168);
  v27 = v21 + v26 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v28 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "locationGroupId", 11, 8);
  v29 = v28 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 192);
  v30 = v29 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v31 = v30
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "origDemoWifiSnapshot", 15, 9);
  v32 = v27
      + v31
      + (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 11, -1431655765 * ((*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 3));
  for (i = *(_QWORD *)(a1 + 216); i != *(_QWORD *)(a1 + 224); i += 24)
    v32 += (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, i);
  v34 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 96))(a2);
  v35 = v34 + v32 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v36 = (unsigned __int16 *)(a1 + 400);
  if ((*(_WORD *)(a1 + 400) & 0x800) != 0)
  {
    v37 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "isServerDataRun", 2, 10);
    v38 = v37
        + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 120))(a2, *(unsigned __int8 *)(a1 + 240));
    v35 += v38 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  }
  v39 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "settings", 12, 11);
  v40 = v35 + sub_10001ACE8(a1 + 248, a2);
  v41 = v39 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v42 = v41
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "surveySdkData", 12, 12);
  v43 = v42 + sub_100013100(a1 + 288, a2);
  v44 = v43 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v40;
  v45 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "surveyId", 11, 13);
  v46 = v45 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 8);
  v47 = v46 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v48 = v47
      + (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "deviceIdForVendor", 11, 14);
  v49 = v48 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 112);
  v50 = v44 + v49 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
  v51 = *v36;
  v52 = v51 | (*(unsigned __int8 *)(a1 + 402) << 16);
  if ((v51 & 0x4000) != 0)
  {
    v57 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "startTimeNanos", 10, 15);
    v58 = v57 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 352));
    v50 += v58 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2);
    v59 = *v36;
    v52 = v59 | (*(unsigned __int8 *)(a1 + 402) << 16);
    if ((v59 & 0x8000) == 0)
    {
LABEL_8:
      if ((v52 & 0x10000) == 0)
        goto LABEL_9;
LABEL_14:
      v62 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "versionNumber", 8, 17);
      v63 = v50 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 144))(a2, *(unsigned int *)(a1 + 368));
      v50 = v62 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v63;
      if (((*v36 | (*(unsigned __int8 *)(a1 + 402) << 16)) & 0x20000) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v51 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v60 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "wallclockStartTimeNanos", 10, 16);
  v61 = v50 + (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 360));
  v50 = v60 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v61;
  v52 = *v36 | (*(unsigned __int8 *)(a1 + 402) << 16);
  if ((v52 & 0x10000) != 0)
    goto LABEL_14;
LABEL_9:
  if ((v52 & 0x20000) != 0)
  {
LABEL_10:
    v53 = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, "originalSurveyId", 11, 18);
    v54 = v50 + (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a2 + 168))(a2, a1 + 376);
    v50 = v53 + (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 56))(a2) + v54;
  }
LABEL_11:
  v55 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 64))(a2);
  result = v55 + v50 + (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a2 + 40))(a2);
  --a2[6];
  return result;
}

uint64_t sub_1000647F0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *exception;
  unsigned int v8;

  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if (v4 >> 31)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      exception[2] = 0;
      exception[3] = 0;
      *exception = off_1003F07E8;
      exception[1] = 0;
      *((_DWORD *)exception + 8) = 3;
    }
  }
  else
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  v8 = bswap32(v4);
  std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v8, 4);
  if ((_DWORD)v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    std::ostream::write(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v5, v4);
  }
  return (v4 + 4);
}

uint64_t sub_1000648B4(uint64_t a1)
{
  _BYTE *v2;
  dispatch_semaphore_t v3;
  dispatch_semaphore_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  _QWORD v12[4];
  NSObject *v13;
  _QWORD v14[4];
  NSObject *v15;
  _QWORD v16[4];
  NSObject *v17;

  v2 = (_BYTE *)(a1 + 6744);
  *(_QWORD *)a1 = off_1003F5D78;
  if (*(_BYTE *)(a1 + 32))
  {
    dispatch_barrier_sync(*(dispatch_queue_t *)(a1 + 6736), &stru_1003F5DE0);
    v3 = dispatch_semaphore_create(0);
    v4 = v3;
    if (*v2)
    {
      v5 = *(void **)(a1 + 6752);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3321888768;
      v16[2] = sub_10016A1EC;
      v16[3] = &unk_1003F5E00;
      v6 = v3;
      v17 = v6;
      objc_msgSend(v5, "finishWritingWithCompletionHandler:", v16);

      dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    }
    if (v2[32])
    {
      v7 = *(void **)(a1 + 6784);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10016A224;
      v14[3] = &unk_1003EE788;
      v8 = v4;
      v15 = v8;
      objc_msgSend(v7, "finishWritingWithCompletionHandler:", v14);
      dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);

    }
    if (v2[64])
    {
      v9 = *(void **)(a1 + 6816);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10016A22C;
      v12[3] = &unk_1003EE788;
      v10 = v4;
      v13 = v10;
      objc_msgSend(v9, "finishWritingWithCompletionHandler:", v12);
      dispatch_semaphore_wait(v10, 0xFFFFFFFFFFFFFFFFLL);

    }
  }
  if (v2[64])
  {

    v2[64] = 0;
  }
  if (v2[32])
  {

    v2[32] = 0;
  }
  if (*v2)
  {

    *v2 = 0;
  }

  sub_100064AF0(a1 + 4576);
  sub_100064CAC(a1 + 40);
  *(_QWORD *)a1 = off_1003F5DC8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100064AF0(uint64_t a1)
{
  sub_100064CA8(a1 + 2080);
  sub_100064CA8(a1 + 2000);
  sub_100064CA8(a1 + 1920);
  sub_100064CA8(a1 + 1840);
  sub_100064CA8(a1 + 1760);
  sub_100064CA8(a1 + 1680);
  sub_100064CA8(a1 + 1600);
  sub_100064CA8(a1 + 1520);
  sub_100064CA8(a1 + 1440);
  sub_100064CA8(a1 + 1360);
  sub_100064CA8(a1 + 1280);
  sub_100064CA8(a1 + 1200);
  sub_100064CA8(a1 + 1120);
  sub_100064CA8(a1 + 1040);
  sub_100064CA8(a1 + 960);
  sub_100064CA8(a1 + 880);
  sub_100064CA8(a1 + 800);
  sub_100064CA8(a1 + 720);
  sub_100064CA8(a1 + 640);
  sub_100064CA8(a1 + 560);
  sub_100064CA8(a1 + 480);
  sub_100064CA8(a1 + 400);
  sub_100064CA8(a1 + 320);
  sub_100064CA8(a1 + 240);
  sub_100064CA8(a1 + 160);
  sub_100064CA8(a1 + 80);
  return sub_100064CA8(a1);
}

uint64_t sub_100064BE0(uint64_t a1)
{
  wireless_diagnostics::google::protobuf::io::FileOutputStream *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(wireless_diagnostics::google::protobuf::io::FileOutputStream **)(a1 + 48);
  if (v2)
    wireless_diagnostics::google::protobuf::io::FileOutputStream::Flush(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_12:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100064CAC(uint64_t a1)
{
  sub_100064EFC(a1 + 4368);
  sub_100064EFC(a1 + 4200);
  sub_100064EFC(a1 + 4032);
  sub_100064EFC(a1 + 3864);
  sub_100064EFC(a1 + 3696);
  sub_100064EFC(a1 + 3528);
  sub_100064EFC(a1 + 3360);
  sub_100064EFC(a1 + 3192);
  sub_100064EFC(a1 + 3024);
  sub_100064EFC(a1 + 2856);
  sub_100064EFC(a1 + 2688);
  sub_100064EFC(a1 + 2520);
  sub_100064EFC(a1 + 2352);
  sub_100064EFC(a1 + 2184);
  sub_100064EFC(a1 + 2016);
  sub_100064EFC(a1 + 1848);
  sub_100064EFC(a1 + 1680);
  sub_100064EFC(a1 + 1512);
  sub_100064EFC(a1 + 1344);
  sub_100064EFC(a1 + 1176);
  sub_100064EFC(a1 + 1008);
  sub_100064EFC(a1 + 840);
  sub_100064EFC(a1 + 672);
  sub_100064EFC(a1 + 504);
  sub_100064EFC(a1 + 336);
  sub_100064EFC(a1 + 168);
  return sub_100064EFC(a1);
}

uint64_t sub_100064DA4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    std::ostream::flush(v2);
  if (*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(a1 + 80) = off_1003F54B8;
    v3 = *(void **)(a1 + 136);
    if (v3)
    {
      free(v3);
      *(_DWORD *)(a1 + 144) = 0;
    }
    *(_QWORD *)(a1 + 80) = off_1003F0658;
    v4 = *(unsigned int **)(a1 + 96);
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
        v8 = v4 + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
      }
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
  v11 = *(std::__shared_weak_count **)(a1 + 56);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v14)
    goto LABEL_24;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_24:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100064F04(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100064F18(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100064F24(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F53A0;
  if (*(_BYTE *)(a1 + 24))
  {
    (**(void (***)(uint64_t))(a1 + 32))(a1 + 32);
    *(_BYTE *)(a1 + 24) = 0;
  }
  operator delete();
}

uint64_t sub_100064F80(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result + 32;
    result = (**(uint64_t (***)(uint64_t))(result + 32))(result + 32);
    *(_BYTE *)(v1 - 8) = 0;
  }
  return result;
}

_QWORD *sub_100064FB8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_1003F5400;
  v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *sub_10006502C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1003F8E08;
  v2 = a1 + 52;
  a1[52] = off_1003F8E30;
  std::filebuf::~filebuf(a1 + 1);
  std::ostream::~ostream(a1, off_1003F8DD0);
  std::ios::~ios(v2);
  return a1;
}

int *sub_100065088(uint64_t a1)
{
  return sub_100068888((int *)(a1 + 24));
}

uint64_t sub_100065094(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1000650A0(uint64_t a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  _QWORD *v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD __dst[2];
  unint64_t v10;
  std::string __p;

  v2 = off_100418350[0];
  v3 = strlen(off_100418350[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v7 = v3 | 7;
    v8 = v7 + 1;
    v5 = operator new(v7 + 1);
    __dst[1] = v4;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v10) = v3;
    v5 = __dst;
    if (!v3)
    {
      v6 = (std::string *)(a1 + 8);
      LOBYTE(__dst[0]) = 0;
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      {
LABEL_5:
        __p = *v6;
        goto LABEL_11;
      }
LABEL_10:
      sub_10006CED8(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
LABEL_11:
      sub_1000675EC(&__p, (uint64_t)__dst);
      sub_1000676E0(a1 + 40, &__p);
    }
  }
  memmove(v5, v2, v4);
  v6 = (std::string *)(a1 + 8);
  *((_BYTE *)v5 + v4) = 0;
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_10;
}

void sub_10006729C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a15 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000675EC(std::string *a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  const std::string::value_type *v8;
  _BYTE *v9;
  const std::string::value_type *v10;
  void *__p[2];
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = v2;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    if (a1 == (std::string *)a2)
    {
      if ((char)v2 < 0)
      {
        sub_10006CED8(__p, *(void **)a2, v4);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)a2;
        v12 = *(_QWORD *)(a2 + 16);
      }
      sub_1000675EC(a2, __p);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(const std::string::value_type **)a2;
      if ((v2 & 0x80u) == 0)
        v9 = (_BYTE *)a2;
      else
        v9 = *(_BYTE **)a2;
      if (*v9 != 47)
      {
        sub_10006CDE0((uint64_t)a1);
        v2 = *(unsigned __int8 *)(a2 + 23);
        v8 = *(const std::string::value_type **)a2;
        v4 = *(_QWORD *)(a2 + 8);
        v3 = *(_BYTE *)(a2 + 23);
      }
      if (v3 >= 0)
        v10 = (const std::string::value_type *)a2;
      else
        v10 = v8;
      if (v3 >= 0)
        v4 = v2;
      std::string::append(a1, v10, v4);
    }
  }
}

void sub_1000676C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000676E0(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *(_BYTE *)a1 = 0;
  v3 = a1 + 8;
  std::string::operator=((std::string *)(a1 + 8), a2);
  sub_100067938(v3, 52, 7, &v10);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v10;
  v10 = 0uLL;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_100068374();
}

void sub_100067938(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::ios_base *v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  std::string v17;

  sub_10006821C(0, &v17);
  sub_100067DEC(a1, (uint64_t)&v17, 0, (uint64_t)v15);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_3:
    *(_OWORD *)__p = *(_OWORD *)v15;
    v14 = v16;
    goto LABEL_6;
  }
  sub_10006CED8(__p, v15[0], (unint64_t)v15[1]);
LABEL_6:
  v8 = operator new(0x250uLL);
  v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = off_1003F8D30;
  v10 = v8 + 3;
  v11 = (std::ios_base *)(v8 + 55);
  if (*(char *)(a1 + 23) >= 0)
    v12 = a1;
  else
    v12 = *(_QWORD *)a1;
  sub_100067CD4(v8 + 3, (uint64_t *)&off_1003F8DC8, v12, a2);
  v9[3] = off_1003F8D88;
  v9[55] = off_1003F8DB0;
  *((_DWORD *)v9 + 119) = a3;
  std::ios_base::clear(v11, *((_DWORD *)v9 + 118));
  *a4 = v10;
  a4[1] = v9;
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v15[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    goto LABEL_13;
}

void sub_100067A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100067CD4(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;

  v8 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  v9 = a1 + 1;
  v10 = a2[1];
  *a1 = v10;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 24)) = a2[2];
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 1);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v12 - 24)) = a2[3];
  std::filebuf::basic_filebuf(v9);
  if (!std::filebuf::open(v9, a3, a4 | 0x10u))
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_100067DB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100067DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::filebuf::~filebuf(v3);
  std::ostream::~ostream(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100067DEC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  std::string v20;
  std::string __dst;
  std::string __p;

  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  sub_1000681BC((_BYTE *)a1);
  if (v8)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_10006CED8((_BYTE *)a4, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  if (*(char *)(a2 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __dst = *(std::string *)a2;
  sub_1000681BC((_BYTE *)a2);
  if (v9)
    goto LABEL_11;
  if (!a3)
  {
    sub_10006821C(0, &v20);
    sub_100067DEC(&__p, a2, &v20, 0);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_11;
  }
  sub_10006821C(a3, &__p);
  v11 = a3[2];
  if ((v11 & 1) != 0 && (v11 != 1 || *(_DWORD *)a3))
    memset(&v20, 0, sizeof(v20));
  else
    sub_100067DEC(&v20, a2, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  __dst = v20;
  v19 = a3[2];
  if ((v19 & 1) == 0 || v19 == 1 && !*(_DWORD *)a3)
  {
LABEL_11:
    v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a1 + 8);
    if (v10)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      if (sub_1000D909C((_BYTE *)a1))
        sub_1000D6710((char *)a1, &__p);
      else
        sub_1000D6710((char *)&__dst, &__p);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(std::string *)a4 = __p;
      sub_1000681BC((_BYTE *)a1);
      if (v12)
      {
        sub_1000D6750((_BYTE *)a1, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a4, (const std::string::value_type *)p_p, size);
      }
      else
      {
        sub_1000D6750(&__dst, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &__p;
        else
          v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v16 = __p.__r_.__value_.__l.__size_;
        std::string::append((std::string *)a4, (const std::string::value_type *)v15, v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_1000D6790(&__dst, &__p);
        sub_10006CB94(a4, &__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_1000D6790((_BYTE *)a1, &__p);
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = __p.__r_.__value_.__l.__size_;
      if (v17)
      {
        sub_10006CB94(a4, &__p);
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v18 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *(std::string *)a4 = __dst;
      memset(&__dst, 0, sizeof(__dst));
    }
    goto LABEL_63;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_63:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_10006811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1000681BC(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v4;

  v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  return sub_10006CD4C(a1, v2, &v4);
}

void sub_10006821C(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  size_t i;
  char *v6;
  BOOL v7;
  char v9[1024];

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = getcwd(v9, 0x400uLL);
  if (v4)
  {
    sub_1000D51A4(a2, v4);
    if (a1)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
  }
  else if (!sub_1000D8488(a1))
  {
    for (i = 2048; ; i *= 2)
    {
      v6 = (char *)operator new[](i);
      if (getcwd(v6, i))
        break;
      v7 = sub_1000D8488(a1);
      operator delete[](v6);
      if (v7)
        return;
      if (i > 0x4000)
      {
        sub_1000D4734(63, (uint64_t)a1, (uint64_t)"boost::filesystem::current_path");
        return;
      }
    }
    sub_1000D51A4(a2, v6);
    if (a1)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    operator delete[](v6);
  }
}

void sub_10006833C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100068374()
{
  sub_1000685F0();
}

void sub_100068488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100163500((uint64_t)&a9);
  sub_100163500((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000684A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = *a2;
  v4 = (unsigned int *)a2[1];
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
    *a1 = off_1003F0658;
    a1[1] = v3;
    a1[2] = v4;
    do
      v8 = __ldxr(v5);
    while (__stxr(v8 + 1, v5));
    a1[3] = 0x4000000000;
    do
    {
      v9 = __ldaxr(v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v5));
    if (!v10)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v11 = v4 + 3;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
    *a1 = off_1003F04E0;
    do
    {
      v14 = __ldaxr(v5);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v5));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v16 = v4 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
    a1[3] = 0x4000000000;
  }
  *a1 = off_1003F5660;
  return a1;
}

void sub_1000685F0()
{
  operator new();
}

void sub_1000686F4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_100068700(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100068714(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v16;

  *(_BYTE *)a1 = 0;
  v3 = a1 + 8;
  std::string::operator=((std::string *)(a1 + 8), a2);
  sub_100068AE8(v3, 2, 0x1A4u, &v16);
  v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1003F57D8;
  v5 = sub_100068AD4((_DWORD *)v4 + 6, &v16);
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_100068888(&v16);
  v9 = **(_DWORD **)(a1 + 32);
  v10 = operator new(0x68uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = off_1003F5828;
  v11 = wireless_diagnostics::google::protobuf::io::FileOutputStream::FileOutputStream((wireless_diagnostics::google::protobuf::io::FileOutputStream *)(v10 + 3), v9, -1);
  v12 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v10;
  if (!v12)
    return a1;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void sub_10006885C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100068874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  sub_100068888(&a11);
  _Unwind_Resume(a1);
}

int *sub_100068888(int *a1)
{
  if (*a1 != -1)
    sub_1000688C0(a1);
  return a1;
}

uint64_t sub_1000688C0(int *a1)
{
  int v2;
  uint64_t result;
  int v4;
  const std::error_category *v5;
  _BYTE v6[24];
  std::system_error v7;
  _BYTE v8[24];
  std::runtime_error v9;

  v2 = *a1;
  if (v2 == -1)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v7, "Trying to close file-handle not-opened");
    std::runtime_error::runtime_error(&v9, (const std::string *)&v7);
    v9.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
    sub_10018D04C((uint64_t)v8);
    sub_1000F2F7C(&v9, (uint64_t)"void FileUtil::PosixHandle::close()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 138, (uint64_t)v8);
  }
  result = close(v2);
  *a1 = -1;
  if ((_DWORD)result == -1)
  {
    __cxa_allocate_exception(0x50uLL);
    v4 = *__error();
    v5 = std::system_category();
    std::system_error::system_error(&v7, v4, v5);
    sub_10018D04C((uint64_t)v6);
    sub_100179194(&v7, (uint64_t)"void FileUtil::PosixHandle::close()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 147, (uint64_t)v6);
  }
  return result;
}

void sub_1000689F8(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, std::system_error *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__pa, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__pa)
    operator delete(__pa);
  std::system_error::~system_error((std::system_error *)&a12);
  _Unwind_Resume(__p);
}

void sub_100068A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::system_error *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  std::system_error::~system_error((std::system_error *)&a12);
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void sub_100068A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v20 - 48));
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

_DWORD *sub_100068AD4(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  *a2 = -1;
  return result;
}

_DWORD *sub_100068AE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _DWORD *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;

  if (!a3)
  {
    if (qword_100417ED8 == -1)
    {
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return sub_100068C0C(a4, a1, a2 | 0x200u, 0, a3);
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003F6D68);
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return sub_100068C0C(a4, a1, a2 | 0x200u, 0, a3);
    }
    if (*(char *)(a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    v11 = 136315138;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "WARNING: File %s will be created without any permission bits set.", (uint8_t *)&v11, 0xCu);
  }
  return sub_100068C0C(a4, a1, a2 | 0x200u, 0, a3);
}

_DWORD *sub_100068C0C(_DWORD *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  const char *v9;
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  const std::error_category *v18;
  _BYTE v19[24];
  _BYTE v20[24];
  std::system_error v21;
  void *__dst[2];
  unint64_t v23;

  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v23 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_11;
  }
  HIBYTE(v23) = v10;
  v12 = __dst;
  if (v10)
LABEL_11:
    memmove(v12, v9, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v15 = sub_100068FC0((const char *)__dst, a3, a4, a5);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
  *a1 = v15;
  if (v15 == -1)
  {
    v17 = *__error();
    __cxa_allocate_exception(0x50uLL);
    if (v17 == 1)
    {
      sub_100178D18(&v21);
      sub_10018D04C((uint64_t)v20);
      sub_100178D80(&v21, (uint64_t)"FileUtil::PosixHandle::PosixHandle(const fs::path &, int, Lock, mode_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 91, (uint64_t)v20);
    }
    v18 = std::system_category();
    std::system_error::system_error(&v21, v17, v18);
    sub_10018D04C((uint64_t)v19);
    sub_100179194(&v21, (uint64_t)"FileUtil::PosixHandle::PosixHandle(const fs::path &, int, Lock, mode_t)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/file_util.cpp", 93, (uint64_t)v19);
  }
  return a1;
}

void sub_100068EA0(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, __int16 a8, void *__pa, void *a10, uint64_t a11, uint64_t a12, std::system_error *a13, std::system_error *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  sub_100179560((std::system_error *)&a23);
  if (__pa)
    operator delete(__pa);
  std::system_error::~system_error((std::system_error *)&a19);
  __cxa_free_exception(v23);
  _Unwind_Resume(__p);
}

uint64_t sub_100068FC0(const char *a1, int a2, int a3, unsigned int a4)
{
  int v4;
  int v5;

  v4 = a2 | 0x10;
  if (a3 != 1)
    v4 = a2;
  if (a3 == 2)
    v5 = a2 | 0x20;
  else
    v5 = v4;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return open(a1, v5, a4);
}

void sub_10006900C(uint64_t a1, char a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  void *__p[2];
  char v12;
  std::string v13;

  *(_BYTE *)(a1 + 64) = a2;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1000D5048(__p, "");
    sub_10016A234("Legacy output stream already open", &v13);
    sub_100174738((uint64_t)__p, (uint64_t)&v13, 1);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v12 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v10);
  }
  sub_1000691F0(a1 + 8, (uint64_t)&v13);
  sub_100067938((uint64_t)&v13, 52, 7, __p);
  v3 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_11;
  v8 = (unint64_t *)((char *)__p[1] + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_11:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
LABEL_12:
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_100069190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000691F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  void *__p;
  char v6;
  void *__dst[2];
  uint64_t v8;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_10006CED8(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v8 = *(_QWORD *)(a1 + 16);
  }
  v6 = 3;
  LODWORD(__p) = 7627108;
  v3 = sub_1000692F8((uint64_t)__dst, (uint64_t)&__p);
  if (*(char *)(v3 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)a2, *(void **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)a2 = v4;
  }
  if ((v6 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v8) < 0)
    goto LABEL_11;
}

void sub_1000692BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000692F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type size;
  int v6;
  _BYTE *v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(unsigned __int8 *)(a1 + 23);
  sub_1000693F8((_BYTE *)a1, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::string::erase((std::string *)a1, v4 - size, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return a1;
    v7 = *(_BYTE **)a2;
  }
  else
  {
    v7 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23))
      return a1;
  }
  if (*v7 != 46)
  {
    std::string::push_back((std::string *)a1, 46);
    LOBYTE(v6) = *(_BYTE *)(a2 + 23);
  }
  if ((v6 & 0x80u) == 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if ((v6 & 0x80u) == 0)
    v9 = v6;
  else
    v9 = *(_QWORD *)(a2 + 8);
  std::string::append((std::string *)a1, v8, v9);
  return a1;
}

void sub_1000693DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000693F8(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  _BYTE *v2;
  unint64_t v4;
  int v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v4 = *((_QWORD *)v2 + 1);
  }
  else
  {
    v4 = a1[23];
  }
  v16 = 0;
  sub_10006CD4C(a1, v4, &v16);
  v5 = (char)v2[23];
  if (v4 >= v16)
    v6 = v16;
  else
    v6 = v4;
  if (v5 >= 0)
    v7 = v2;
  else
    v7 = *(_BYTE **)v2;
  v8 = v7 - 1;
  v9 = v4;
  while (v9 > v16)
  {
    v10 = v9 - 1;
    v11 = v8[v9--];
    if (v11 == 47)
    {
      v6 = v10 + 1;
      break;
    }
  }
  v12 = v4 - v6;
  if (v4 != v6)
  {
    v13 = v5 >= 0 ? v2 : *(_BYTE **)v2;
    if (v13[v6] != 46 || v12 != 1 && (v12 != 2 || v13[v6 + 1] != 46))
    {
      v14 = 0;
      while (v4 + v14 > v6)
      {
        v15 = v13[v4 - 1 + v14--];
        if (v15 == 46)
        {
          if (v4 + v14 > v6)
            sub_1000D8F44(a2, &v13[v4 + v14], &v13[v4], -v14);
          return;
        }
      }
    }
  }
}

void sub_100069524(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100069540(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const void ***v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  int **v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  std::string::size_type v29;
  unint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  unint64_t v35;
  char *v36;
  void *v37;
  char *v38;
  void (***v39)(char *);
  void (**v40)(char *);
  BOOL v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  const void ***v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v62[2];
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  std::string __p;
  void *v67;
  _BYTE v68[24];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  uint64_t v72[6];

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 40;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  v58 = (std::string *)(a1 + 80);
  *(_OWORD *)(a1 + 136) = 0u;
  v7 = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_OWORD *)(a1 + 176) = 0u;
  v8 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 208) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  v60 = (_QWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 248) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  sub_1000BE84C(a1 + 256, a4);
  v9 = *a2;
  v10 = a2[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v10 - *a2) >> 7) != (a3[1] - *a3) >> 7)
  {
    sub_1000D5048(&v63, "");
    sub_1001E0F98("universe information should be the same length as tile header info", &__p);
    sub_100174738((uint64_t)&v63, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65) < 0)
      operator delete(v63);
    sub_10015C2DC((uint64_t)v62);
  }
  v56 = v8;
  v57 = v7;
  v64 = 0;
  v65 = 0;
  v63 = &v64;
  if (v10 != v9)
  {
    v11 = 0;
    v59 = a2;
    v12 = &unk_100395958;
    do
    {
      v13 = v9 + 1920 * v11;
      v14 = v13 + 8;
      sub_10008930C(&__p, v13 + 8);
      v62[0] = &__p;
      v15 = sub_10006A284(a1, (uint64_t ***)&__p, (uint64_t)v12, (_OWORD **)v62);
      sub_10006A90C((uint64_t)(v15 + 4), v13);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v19 = *a3;
      v20 = sub_10007C4C8(v13);
      v21 = v19 + (v11 << 7);
      v22 = (int **)(v21 + 8);
      if (v20)
      {
        __p = *(std::string *)(v21 + 8);
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *v22 = 0;
        sub_100268CA4((uint64_t **)&v63, v13 + 8, (uint64_t)&__p);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v23 = v12;
        v24 = a3;
        v25 = v19 + (v11 << 7);
        v26 = v25 + 80;
        if (!*(_BYTE *)v21)
          v22 = (int **)(v25 + 80);
        v27 = *v22;
        v28 = v22[1];
        if (*v22 != v28)
        {
          do
          {
            sub_100069BFC(v6, (uint64_t)v27, v27);
            v27 += 8;
          }
          while (v27 != v28);
        }
        v31 = *(_QWORD *)(v25 + 56);
        v30 = v25 + 56;
        v29 = v31;
        v32 = *(_QWORD *)(v30 - 16);
        v33 = *(_QWORD *)(v30 - 8);
        *(_QWORD *)(v30 - 16) = 0;
        *(_QWORD *)(v30 - 8) = 0;
        __p.__r_.__value_.__r.__words[0] = v32;
        __p.__r_.__value_.__l.__size_ = v33;
        __p.__r_.__value_.__r.__words[2] = v31;
        v67 = *(void **)(v30 + 8);
        *(_DWORD *)v68 = *(_DWORD *)(v30 + 16);
        if (v67)
        {
          v34 = *(_QWORD *)(v29 + 8);
          if ((v33 & (v33 - 1)) != 0)
          {
            if (v34 >= v33)
              v34 %= v33;
          }
          else
          {
            v34 &= v33 - 1;
          }
          *(_QWORD *)(v32 + 8 * v34) = (char *)&__p.__r_.__value_.__l + 16;
          *(_QWORD *)v30 = 0;
          *(_QWORD *)(v30 + 8) = 0;
        }
        *(_OWORD *)&v68[8] = *(_OWORD *)v26;
        v35 = v19 + (v11 << 7);
        v69 = *(_QWORD *)(v35 + 96);
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        *(_OWORD *)v70 = *(_OWORD *)(v35 + 104);
        v71 = *(_QWORD *)(v35 + 120);
        *(_QWORD *)(v35 + 112) = 0;
        *(_QWORD *)(v35 + 120) = 0;
        *(_QWORD *)(v35 + 104) = 0;
        sub_100268F00(v60, v14, (uint64_t *)&__p);
        v36 = (char *)v70[0];
        a3 = v24;
        v12 = v23;
        a2 = v59;
        if (v70[0])
        {
          v37 = v70[0];
          if (v70[1] != v70[0])
          {
            v38 = (char *)v70[1] - 40;
            v39 = (void (***)(char *))((char *)v70[1] - 40);
            do
            {
              v40 = *v39;
              v39 -= 5;
              (*v40)(v38);
              v41 = v38 == v36;
              v38 = (char *)v39;
            }
            while (!v41);
            v37 = v70[0];
          }
          v70[1] = v36;
          operator delete(v37);
        }
        if (*(_QWORD *)&v68[8])
        {
          *(_QWORD *)&v68[16] = *(_QWORD *)&v68[8];
          operator delete(*(void **)&v68[8]);
        }
        v42 = (_QWORD *)__p.__r_.__value_.__r.__words[2];
        if (__p.__r_.__value_.__r.__words[2])
        {
          do
          {
            v43 = (_QWORD *)*v42;
            operator delete(v42);
            v42 = v43;
          }
          while (v43);
        }
        v44 = (void *)__p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v44)
          operator delete(v44);
        sub_10008930C(&__p, v14);
        v45 = sub_10002BCA4(v60, (uint64_t ***)&__p);
        if (!v45)
          sub_10018CB98("unordered_map::at: key not found");
        sub_10006A05C((uint64_t **)&v63, v14, (uint64_t *)v45 + 9);
        v46 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v47 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
      }
      ++v11;
      v9 = *a2;
    }
    while (v11 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 7));
  }
  v49 = *a3;
  for (i = a3[1]; i != v49; i -= 128)
  {
    if (*(_BYTE *)(i - 96))
      sub_10006A864(i - 96);
    if (*(_BYTE *)(i - 128))
    {
      v51 = *(void **)(i - 120);
      if (v51)
      {
        *(_QWORD *)(i - 112) = v51;
        operator delete(v51);
      }
      *(_BYTE *)(i - 128) = 0;
    }
  }
  a3[1] = v49;
  sub_1000BDF84(a3);
  sub_1000C6E7C((uint64_t)&__p, (uint64_t)&v63);
  v52 = a1;
  if (&__p != v58)
  {
    *(_QWORD *)(a1 + 88) = 0;
    v53 = *(void **)(a1 + 80);
    if (v53)
    {
      operator delete(v53);
      v52 = a1;
    }
    *(std::string *)(v52 + 80) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)(v52 + 112) = 0;
    v54 = *(void **)(v52 + 104);
    if (v54)
    {
      operator delete(v54);
      v52 = a1;
    }
    *(_QWORD *)(v52 + 104) = v67;
    *(_OWORD *)(v52 + 112) = *(_OWORD *)v68;
    *(_QWORD *)v68 = 0;
    *(_QWORD *)&v68[8] = 0;
    v67 = 0;
  }
  *(_DWORD *)(v52 + 128) = *(_DWORD *)&v68[16];
  sub_1000BEAC0(v57, &v69);
  sub_1000BE98C(v56, v72);
  sub_10002F3EC(&v68[16]);
  if (*(_QWORD *)&v68[8])
    operator delete(v67);
  if (__p.__r_.__value_.__r.__words[2])
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_10001FFE0((uint64_t)&v63, v64);
  return a1;
}

void sub_100069B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  sub_1000F7AE8(a10);
  sub_100268290(a16);
  sub_100268248(a13);
  sub_10022CAC0(v32);
  sub_1001E45B8(a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_100069BFC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  float v32;
  float v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v45;
  char *v46;

  v46 = &v45;
  v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  else
  {
    v8 = sub_10022CC84((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_58;
  }
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v9)
      v3 = v8 % v9;
  }
  else
  {
    v3 = (v9 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v11)
  {
    v12 = (_QWORD *)*v11;
    if (*v11)
    {
      v13 = *(_DWORD *)a2;
      v14 = (v13 >> 31) ^ v13;
      v15 = v13 >> 31 == v13;
      v16 = *(_QWORD *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
                return v12;
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              v20 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
                return v12;
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      if (v15)
      {
        while (1)
        {
          v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16)
              return v12;
          }
          else
          {
            if (v22 >= v9)
              v22 %= v9;
            if (v22 != v3)
              goto LABEL_58;
          }
          v12 = (_QWORD *)*v12;
          if (!v12)
            goto LABEL_58;
        }
      }
      do
      {
        v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            v24 = v12[3] == *(_QWORD *)v7 && v12[4] == *(_QWORD *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16))
              return v12;
          }
        }
        else
        {
          if (v23 >= v9)
            v23 %= v9;
          if (v23 != v3)
            break;
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  v26 = operator new(0x30uLL);
  v12 = v26;
  *v26 = 0;
  v26[1] = v8;
  v27 = v26 + 3;
  v30 = *a3;
  v29 = a3 + 2;
  v28 = v30;
  v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    *v27 = *(_QWORD *)v29;
    v31 = v28;
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 10) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    v8 = v3;
  }
  else
  {
    v34 = 1;
    if (v9 >= 3)
      v34 = (v9 & (v9 - 1)) != 0;
    v35 = v34 | (2 * v9);
    v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_74;
    if (prime < v9)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < v9)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v8 %= v9;
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  v41 = *(_QWORD *)a1;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v42)
  {
    *v12 = *v42;
LABEL_97:
    *v42 = v12;
    goto LABEL_98;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    v43 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9)
        v43 %= v9;
    }
    else
    {
      v43 &= v9 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_10006A048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10006A05C(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  const void ***v9;
  uint64_t **v10;
  const void ***v11;
  uint64_t *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *__p;

  v6 = a1 + 1;
  __p = operator new(0x48uLL);
  sub_100268FEC(__p + 4, a2, a3);
  v7 = __p;
  v8 = *v6;
  if (!*v6)
  {
    v10 = v6;
LABEL_21:
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v6 = v7;
    v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      v7 = *v6;
    }
    sub_1000E05F4(a1[1], v7);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  v9 = (const void ***)(__p + 4);
  while (1)
  {
    while (1)
    {
      v10 = (uint64_t **)v8;
      v11 = (const void ***)(v8 + 4);
      if (!sub_10006A214(v9, (const void ***)v8 + 4))
        break;
      v8 = *v10;
      v6 = v10;
      if (!*v10)
      {
        v6 = v10;
        v7 = __p;
        goto LABEL_21;
      }
    }
    if (!sub_10006A214(v11, v9))
      break;
    v6 = v10 + 1;
    v8 = v10[1];
    if (!v8)
    {
      v7 = __p;
      goto LABEL_21;
    }
  }
  v12 = *v6;
  v7 = __p;
  if (!*v6)
    goto LABEL_21;
  if (__p)
  {
    v13 = (void *)__p[6];
    if (v13)
    {
      __p[7] = v13;
      operator delete(v13);
    }
    v14 = (std::__shared_weak_count *)__p[5];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(__p);
  }
  return v12;
}

void sub_10006A1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100268E74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006A200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100268E74((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10006A214(const void ***a1, const void ***a2)
{
  int v2;
  int v3;
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  int v9;

  v2 = *((char *)*a2 + 23);
  v3 = *((char *)*a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)*a1 + 23);
  else
    v4 = (size_t)(*a1)[1];
  if (v3 >= 0)
    v5 = *a1;
  else
    v5 = **a1;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)*a2 + 23);
  else
    v6 = (size_t)(*a2)[1];
  if (v2 >= 0)
    v7 = *a2;
  else
    v7 = **a2;
  if (v6 >= v4)
    v8 = v4;
  else
    v8 = v6;
  v9 = memcmp(v5, v7, v8);
  if (v9)
    return v9 < 0;
  else
    return v4 < v6;
}

const void ***sub_10006A284(uint64_t a1, uint64_t ***a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  const void ****v12;
  const void ***v13;
  unint64_t v14;
  const void **v15;
  _QWORD *v16;
  _QWORD *v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v33[2];
  char v34;

  v8 = sub_1000B40D8((uint64_t)v33, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(const void *****)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == (const void **)v9)
            {
              if ((sub_1000790EC(v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v13;
            }
            else if (((unint64_t)v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v13 = (const void ***)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if ((sub_1000790EC(v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (const void ***)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = operator new(0x7A0uLL);
  v33[0] = v16;
  v33[1] = a1 + 16;
  v34 = 0;
  *v16 = 0;
  v16[1] = v9;
  v17 = *a4;
  *((_OWORD *)v16 + 1) = **a4;
  *v17 = 0;
  v17[1] = 0;
  sub_100071104((uint64_t)(v16 + 4));
  v34 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v26)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v26)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v26 < 3uLL || (v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < *(_QWORD *)&v26)
LABEL_37:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v21 = (_QWORD *)v33[0];
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v4 = v9;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v21 = (_QWORD *)v33[0];
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v9;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v9));
      v21 = (_QWORD *)v33[0];
      if (v20)
        goto LABEL_26;
    }
LABEL_50:
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v33[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v33[0])
    {
      v31 = *(_QWORD *)(*(_QWORD *)v33[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10)
          v31 %= v10;
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v33[0];
    }
    goto LABEL_61;
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v21 = (_QWORD *)v33[0];
  if (!v20)
    goto LABEL_50;
LABEL_26:
  *v21 = *v20;
  *v20 = v33[0];
LABEL_61:
  v13 = (const void ***)v33[0];
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_10006A5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006A5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
    sub_10034356C(v4);
  sub_1001E4710((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***sub_10006A618(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 ***v4;
  unint64_t v5;
  const void ***result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;

  v4 = (unsigned __int8 ***)(a2 + 16);
  v5 = sub_1000B40D8((uint64_t)&v12, (uint64_t ***)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v5;
  result = sub_10021A0E4((uint64_t)a1, v5, v4);
  if (!result)
  {
    v7 = (int8x8_t)a1[1];
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v10 = *(_QWORD **)(*a1 + 8 * v8);
    if (v10)
    {
      *(_QWORD *)a2 = *v10;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_15:
        ++a1[3];
        return (const void ***)a2;
      }
      v11 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v11 >= *(_QWORD *)&v7)
          v11 %= *(_QWORD *)&v7;
      }
      else
      {
        v11 &= *(_QWORD *)&v7 - 1;
      }
      v10 = (_QWORD *)(*a1 + 8 * v11);
    }
    *v10 = a2;
    goto LABEL_15;
  }
  return result;
}

unint64_t sub_10006A744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  char v15;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x78uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  sub_10008930C((_QWORD *)v8 + 2, a2);
  v9 = *a3;
  v10 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v11 = a3[2];
  *((_QWORD *)v8 + 6) = v11;
  *((_QWORD *)v8 + 4) = v9;
  *((_QWORD *)v8 + 5) = v10;
  v12 = a3[3];
  *((_QWORD *)v8 + 7) = v12;
  *((_DWORD *)v8 + 16) = *((_DWORD *)a3 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v13 >= v10)
        v13 %= v10;
    }
    else
    {
      v13 &= v10 - 1;
    }
    *(_QWORD *)(v9 + 8 * v13) = v8 + 48;
    a3[2] = 0;
    a3[3] = 0;
  }
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 5);
  *((_QWORD *)v8 + 11) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  *((_OWORD *)v8 + 6) = *((_OWORD *)a3 + 4);
  *((_QWORD *)v8 + 14) = a3[10];
  a3[7] = 0;
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  result = sub_1000B40D8((uint64_t)&v15, (uint64_t ***)v8 + 2);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_10006A850(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100268FA8(v1);
  _Unwind_Resume(a1);
}

void sub_10006A864(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  v2 = *(void (****)(_QWORD))(a1 + 72);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      v5 = v3 - 5;
      v6 = v3 - 5;
      do
      {
        v7 = *v6;
        v6 -= 5;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 24);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12)
    operator delete(v12);
  *(_BYTE *)a1 = 0;
}

uint64_t sub_10006A90C(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_100077628(a1 + 80, a2 + 80);
  std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
  *(_BYTE *)(a1 + 928) = *(_BYTE *)(a2 + 928);
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)(a2 + 960));
  *(_BYTE *)(a1 + 984) = *(_BYTE *)(a2 + 984);
  if (a1 != a2)
  {
    sub_1000772D4((uint64_t *)(a1 + 1000), *(_QWORD **)(a2 + 1000), (_QWORD *)(a2 + 1008));
    sub_1000772D4((uint64_t *)(a1 + 1024), *(_QWORD **)(a2 + 1024), (_QWORD *)(a2 + 1032));
  }
  *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
  sub_10007774C(a1 + 1056, a2 + 1056);
  sub_1000780C0(a1 + 1440, a2 + 1440);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a2 + 1608);
  *(_DWORD *)(a1 + 1616) = *(_DWORD *)(a2 + 1616);
  sub_100077D9C(a1 + 1624, a2 + 1624);
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a2 + 1712);
  *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 1720);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a2 + 1736);
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 1792);
  if (a1 == a2)
  {
    *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
  }
  else
  {
    sub_100199AE8((void **)(a1 + 1800), *(_QWORD *)(a2 + 1800), *(_QWORD *)(a2 + 1808), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 1808) - *(_QWORD *)(a2 + 1800)) >> 3));
    *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
    sub_10019A3C8((uint64_t *)(a1 + 1832), *(_QWORD *)(a2 + 1832), *(_QWORD *)(a2 + 1840), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1840) - *(_QWORD *)(a2 + 1832)) >> 4));
  }
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a2 + 1856);
  *(_BYTE *)(a1 + 1860) = *(_BYTE *)(a2 + 1860);
  std::string::operator=((std::string *)(a1 + 1864), (const std::string *)(a2 + 1864));
  if (a1 != a2)
    sub_10019A760((uint64_t *)(a1 + 1888), *(_QWORD *)(a2 + 1888), *(_QWORD *)(a2 + 1896), 0xDAB7EC1DD3431B57 * ((uint64_t)(*(_QWORD *)(a2 + 1896) - *(_QWORD *)(a2 + 1888)) >> 3));
  *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  return a1;
}

void sub_10006C1DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_10006C494(dirent **a1, uint64_t a2)
{
  dirent *v4;
  DIR *v5;
  dirent **v6;
  dirent *v7;
  int data;
  dirent *v9;
  std::string::size_type v10;
  std::string *p_src;
  std::string *v12;
  int v13;
  std::string *v14;
  dirent *v15;
  unsigned int **p_p;
  __int128 v17;
  dirent *v18;
  void *exception;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  std::string::size_type v24;
  std::string __p;
  std::string __src;
  dirent *v27;
  uint64_t v28;
  int v29;

  if (a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  memset(&__src, 0, sizeof(__src));
  v29 = 0;
  v28 = 0;
  v4 = *a1;
  v5 = *(DIR **)&(*a1)->d_name[27];
  while (1)
  {
    v27 = 0;
    *__error() = 0;
    v6 = (dirent **)&v4->d_name[35];
    if (sysconf(91) < 0)
    {
      *__error() = 0;
      v9 = readdir(v5);
      v27 = v9;
      if (v9)
      {
LABEL_14:
        sub_1000D51A4(&__src, v9->d_name);
        memset(&__p, 0, sizeof(__p));
        v28 = 0;
        v29 = 0;
        goto LABEL_15;
      }
      data = *__error();
      if (data)
        goto LABEL_31;
    }
    else
    {
      v7 = *v6;
      if (!*v6)
      {
        v20 = sub_10006D028() + 25;
        v15 = (dirent *)malloc(v20);
        *v6 = v15;
        if (!v15)
        {
          data = 12;
LABEL_31:
          __p.__r_.__value_.__r.__words[0] = 0;
          if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8
            || ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, data))
          {
            v10 = 3;
          }
          else
          {
            v10 = 2;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = data;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::system_cat_holder<void>::instance;
          __p.__r_.__value_.__r.__words[2] = v10;
          goto LABEL_9;
        }
        v7 = v15;
        bzero(v15, v20);
      }
      data = readdir_r(v5, v7, &v27);
      if (data)
        goto LABEL_31;
    }
    v9 = v27;
    if (v27)
      goto LABEL_14;
    sub_10006CF64((DIR **)&v4->d_name[27], (void **)&v4->d_name[35], &__p);
    data = (int)__p.__r_.__value_.__l.__data_;
    v10 = __p.__r_.__value_.__r.__words[2];
LABEL_9:
    v28 = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4);
    v29 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
    if ((v10 & 1) != 0 && (v10 != 1 || data))
    {
      v27 = *a1;
      v18 = v27;
      *a1 = 0;
      sub_1000D52B4((char *)&v18->d_seekoff, &__p);
      if (!a2)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v21 = data;
        v22 = v28;
        v23 = v29;
        v24 = v10;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::directory_iterator::operator++", &__p, &v21);
      }
      *(_DWORD *)a2 = data;
      *(_QWORD *)(a2 + 4) = v28;
      *(_DWORD *)(a2 + 12) = v29;
      *(_QWORD *)(a2 + 16) = v10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      p_p = (unsigned int **)&v27;
      goto LABEL_42;
    }
LABEL_15:
    v4 = *a1;
    v5 = *(DIR **)&(*a1)->d_name[27];
    if (!v5)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a1;
      *a1 = 0;
      p_p = (unsigned int **)&__p;
LABEL_42:
      sub_10006D7E4(p_p);
      goto LABEL_46;
    }
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_src = &__src;
    else
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (p_src->__r_.__value_.__s.__data_[0] != 46)
      break;
    v12 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__src
        : (std::string *)__src.__r_.__value_.__r.__words[0];
    v13 = v12->__r_.__value_.__s.__data_[1];
    if (v13)
    {
      if (v13 != 46)
        break;
      v14 = (__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__src
          : (std::string *)__src.__r_.__value_.__r.__words[0];
      if (v14->__r_.__value_.__s.__data_[2])
        break;
    }
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_10006CED8(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    __p = __src;
  sub_10006CA5C((std::string *)&v4->d_seekoff);
  sub_10006CB94((uint64_t)&v4->d_seekoff, &__p);
  *(_QWORD *)&v17 = 0xFFFF00000000;
  *((_QWORD *)&v17 + 1) = 0xFFFF00000000;
  *(_OWORD *)&v4->d_name[11] = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

void sub_10006C7F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  __break(1u);
}

void sub_10006C8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006C904(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10006C910(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x10006C918);
  sub_1000CDD68(a1);
}

std::string *sub_10006C928(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

__darwin_time_t sub_10006C9E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int *v5;
  stat v6;

  v3 = a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if ((stat((const char *)a1, &v6) & 0x80000000) == 0)
    return v6.st_mtimespec.tv_sec;
  v5 = __error();
  sub_1000D4868(*v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::last_write_time");
  return 0x8000000000000000;
}

std::string *sub_10006CA5C(std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type v3;
  std::string *v4;

  v2 = sub_10006CAB4(a1);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v3 = a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_;
  }
  else
  {
    v3 = (std::string::size_type)a1 + HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v4 = a1;
  }
  std::string::erase(a1, v2, v3 - (_QWORD)v4 - v2);
  return a1;
}

unint64_t sub_10006CAB4(_BYTE *a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v16;

  v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(_BYTE **)a1;
    v2 = *((_QWORD *)v1 + 1);
  }
  else
  {
    v2 = a1[23];
  }
  v16 = 0;
  v3 = sub_10006CD4C(a1, v2, &v16);
  v4 = (char)v1[23];
  if (v2 >= v16)
    v5 = v16;
  else
    v5 = v2;
  if (v4 >= 0)
    v6 = v1;
  else
    v6 = *(_BYTE **)v1;
  v7 = v6 - 1;
  v8 = v2;
  while (v8 > v16)
  {
    v9 = v8 - 1;
    v10 = v7[v8--];
    if (v10 == 47)
    {
      v5 = v9 + 1;
      break;
    }
  }
  if (v5 >= v16)
    v11 = v16;
  else
    v11 = v5;
  if (v4 >= 0)
    v12 = v1;
  else
    v12 = *(_BYTE **)v1;
  v13 = v12 - 1;
  v14 = v5;
  while (v14 > v16)
  {
    if (v13[v14] != 47)
      return v14;
    if (v3 == --v14)
    {
      if (v2 == v5)
        return v3;
      else
        return v3 + 1;
    }
  }
  if (v2 == v5)
    return 0;
  else
    return v11;
}

void sub_10006CB94(uint64_t a1, const std::string *a2)
{
  int v3;
  unint64_t size;
  std::string *v6;
  unint64_t v7;
  _BYTE *v8;
  size_t v9;
  _BYTE *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  const std::string *v14;
  const std::string::value_type *v15;
  size_t __n[2];
  std::string::size_type v17;
  unint64_t v18;

  v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    if ((const std::string *)a1 == a2)
    {
      if (v3 < 0)
      {
        sub_10006CED8(__n, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__n = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        v17 = a2->__r_.__value_.__r.__words[2];
      }
      sub_10006CB94(a2, __n);
      if (SHIBYTE(v17) < 0)
        operator delete((void *)__n[0]);
    }
    else
    {
      if (v3 >= 0)
        v6 = (std::string *)a2;
      else
        v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      __n[0] = 0;
      if (sub_10006CD4C(v6, size, __n) < size)
      {
LABEL_23:
        std::string::operator=((std::string *)a1, a2);
        return;
      }
      v18 = 0;
      if (*(char *)(a1 + 23) < 0)
      {
        v8 = *(_BYTE **)a1;
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v7 = *(unsigned __int8 *)(a1 + 23);
        v8 = (_BYTE *)a1;
      }
      sub_10006CD4C(v8, v7, &v18);
      v9 = __n[0];
      if (__n[0])
      {
        if (__n[0] != v18)
          goto LABEL_23;
        v10 = (_BYTE *)a1;
        if (*(char *)(a1 + 23) < 0)
          v10 = *(_BYTE **)a1;
        v11 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        v13 = v11 >= 0 ? (uint64_t *)a2 : (uint64_t *)a2->__r_.__value_.__r.__words[0];
        if (memcmp(v10, v13, __n[0]))
          goto LABEL_23;
      }
      else
      {
        LOBYTE(v11) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
        v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v11 & 0x80u) == 0)
        v14 = a2;
      else
        v14 = (const std::string *)v12;
      v15 = (char *)v14 + v9;
      if (v14->__r_.__value_.__s.__data_[v9] != 47)
        sub_10006CDE0(a1);
      std::string::append((std::string *)a1, v15, size - v9);
    }
  }
  else if (sub_10003B7CC((_BYTE *)a1))
  {
    std::string::push_back((std::string *)a1, 47);
  }
}

void sub_10006CD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_10006CD4C(_BYTE *__s, unint64_t a2, unint64_t *a3)
{
  size_t v4;
  char *v5;
  _BYTE *v7;
  size_t v8;

  *a3 = 0;
  if (a2 && *__s == 47)
  {
    if (a2 < 2 || __s[1] != 47)
      return 0;
    v4 = a2 - 2;
    if (a2 != 2)
    {
      v5 = __s + 2;
      if (__s[2] == 47)
        return 0;
      v7 = memchr(v5, 47, v4);
      v8 = v7 - v5;
      if (!v7)
        v8 = v4;
      a2 = v8 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

uint64_t sub_10006CDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v1 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return 0;
    v2 = a1 + v1;
LABEL_6:
    if (*(_BYTE *)(v2 - 1) != 47)
    {
      std::string::push_back((std::string *)a1, 47);
      return v1;
    }
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(_QWORD *)a1 + v1;
    goto LABEL_6;
  }
  return v1;
}

off_t sub_10006CE40(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v5;
  stat v6;

  v3 = a1;
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  if (stat((const char *)a1, &v6) < 0)
  {
    v5 = *__error();
LABEL_11:
    sub_1000D4868(v5, v3, (uint64_t)a2, (uint64_t)"boost::filesystem::file_size");
    return -1;
  }
  if ((v6.st_mode & 0xF000) != 0x8000)
  {
    v5 = 78;
    goto LABEL_11;
  }
  return v6.st_size;
}

void *sub_10006CED8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1000CDE30();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

DIR *sub_10006CF64@<X0>(DIR **a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  DIR *result;
  int v7;
  uint64_t v8;

  if (*a2)
  {
    free(*a2);
    *a2 = 0;
  }
  result = *a1;
  if (*a1 && (*a1 = 0, result = (DIR *)closedir(result), (_DWORD)result))
  {
    v7 = *__error();
    *a3 = 0;
    if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
      result = (DIR *)(v7 != 0);
    else
      result = (DIR *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v7);
    v8 = 2;
    *(_DWORD *)a3 = v7;
    if ((_DWORD)result)
      v8 = 3;
    a3[1] = &boost::system::detail::system_cat_holder<void>::instance;
    a3[2] = v8;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t sub_10006D028()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_100419440);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_100419440))
  {
    qword_100419438 = sub_1000D649C();
    __cxa_guard_release(&qword_100419440);
  }
  return qword_100419438;
}

void sub_10006D080(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100419440);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006D098@<X0>(unsigned int **a1@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  _QWORD v18[3];

  v5 = *a1;
  v17 = v5;
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v7 = *a2;
  v16 = v7;
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  result = sub_10006D1C8(a3, (uint64_t *)&v17, (uint64_t *)&v16);
  v10 = (uint64_t)v16;
  if (v16)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      sub_10006CF64((DIR **)(v10 + 48), (void **)(v10 + 56), v18);
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      operator delete();
    }
  }
  v13 = (uint64_t)v17;
  if (v17)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      sub_10006CF64((DIR **)(v13 + 48), (void **)(v13 + 56), v18);
      if (*(char *)(v13 + 31) < 0)
        operator delete(*(void **)(v13 + 8));
      operator delete();
    }
  }
  return result;
}

void sub_10006D1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_1000FE490((uint64_t *)va);
  sub_1000FE490((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006D1C8(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[3];

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  v5 = *a3;
  if (*a3)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  *result = v3;
  if (v3)
  {
    do
      v7 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v7 + 1, (unsigned int *)v3));
  }
  result[1] = v5;
  if (v5)
  {
    do
      v8 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v8 + 1, (unsigned int *)v5));
    do
    {
      v9 = __ldaxr((unsigned int *)v5);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v5));
    if (!v10)
    {
      sub_10006CF64((DIR **)(v5 + 48), (void **)(v5 + 56), v13);
      if (*(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v5 + 8));
      operator delete();
    }
  }
  if (v3)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v3);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v3));
    if (!v12)
    {
      sub_10006CF64((DIR **)(v3 + 48), (void **)(v3 + 56), v13);
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      operator delete();
    }
  }
  return result;
}

unsigned int **sub_10006D2F4(dirent **a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  const char *v17;
  DIR *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int *v24;
  dirent *v25;
  __int128 v26;
  char v27;
  uint64_t (***size)();
  int v29;
  uint64_t v31;
  std::string __p;
  std::string __str;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int *v37;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v37 = 0;
      v9 = operator new(0x40uLL, &std::nothrow);
      if (v9)
      {
        *(_DWORD *)v9 = 0;
        v9[2] = 0;
        v9[3] = 0;
        v9[1] = 0;
        *((_DWORD *)v9 + 8) = 0;
        *(_QWORD *)((char *)v9 + 36) = 0xFFFFLL;
        *((_DWORD *)v9 + 11) = 0xFFFF;
        v9[6] = 0;
        v9[7] = 0;
        v34 = (unsigned int *)v9;
        do
          v10 = __ldaxr((unsigned int *)v9);
        while (__stlxr(v10 + 1, (unsigned int *)v9));
        v11 = v34;
        v12 = v37;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
      v34 = v12;
      v37 = v11;
      sub_10006D7E4(&v34);
      v16 = v37;
      if (!v37)
      {
        if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
          || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 12))
        {
          v31 = 3;
        }
        else
        {
          v31 = 2;
        }
        *a4 = 12;
        a4[1] = &boost::system::detail::generic_cat_holder<void>::instance;
        a4[2] = v31;
        return sub_10006D7E4(&v37);
      }
    }
    else
    {
      v37 = 0;
      v13 = operator new(0x40uLL);
      *(_DWORD *)v13 = 0;
      v13[2] = 0;
      v13[3] = 0;
      v13[1] = 0;
      *((_DWORD *)v13 + 8) = 0;
      *(_QWORD *)((char *)v13 + 36) = 0xFFFFLL;
      *((_DWORD *)v13 + 11) = 0xFFFF;
      v13[6] = 0;
      v13[7] = 0;
      v34 = (unsigned int *)v13;
      do
        v14 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v14 + 1, (unsigned int *)v13));
      v15 = v34;
      v34 = v37;
      v37 = v15;
      sub_10006D7E4(&v34);
      v16 = v37;
    }
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const char *)a2;
    else
      v17 = *(const char **)a2;
    v18 = opendir(v17);
    *((_QWORD *)v16 + 6) = v18;
    if (v18)
    {
      v34 = 0;
      v35 = 0;
      v19 = 1;
      v20 = 46;
      v36 = 0;
      goto LABEL_26;
    }
    v21 = *__error();
    v34 = 0;
    if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
      v22 = v21 != 0;
    else
      v22 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v21);
    v23 = 2;
    LODWORD(v34) = v21;
    if (v22)
      v23 = 3;
    v35 = (unint64_t)&boost::system::detail::system_cat_holder<void>::instance;
    v36 = v23;
    if ((v23 & 1) == 0)
    {
      v20 = 0;
      v19 = 0;
LABEL_26:
      v24 = v37;
      if (*((_QWORD *)v37 + 6))
      {
        v25 = *a1;
        *a1 = (dirent *)v37;
        v37 = (unsigned int *)v25;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v20;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
        if (*(char *)(a2 + 23) < 0)
          sub_10006CED8(&__str, *(void **)a2, *(_QWORD *)(a2 + 8));
        else
          __str = *(std::string *)a2;
        sub_10006CB94((uint64_t)&__str, &__p);
        std::string::operator=((std::string *)(v24 + 2), &__str);
        *(_QWORD *)&v26 = 0xFFFF00000000;
        *((_QWORD *)&v26 + 1) = 0xFFFF00000000;
        *((_OWORD *)v24 + 2) = v26;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (!v18)
            return sub_10006D7E4(&v37);
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v18)
LABEL_36:
          sub_10006C494(a1, (uint64_t)a4);
      }
      return sub_10006D7E4(&v37);
    }
    __str.__r_.__value_.__r.__words[0] = 13;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)&boost::system::detail::generic_cat_holder<void>::instance;
    if ((((uint64_t (*)(uint64_t, uint64_t, uint64_t))boost::system::detail::system_cat_holder<void>::instance[2])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v21, (uint64_t)&__str) & 1) != 0)
    {
      v27 = 1;
      if ((a3 & 1) == 0)
        goto LABEL_45;
    }
    else
    {
      if (__str.__r_.__value_.__l.__size_)
        size = (uint64_t (***)())__str.__r_.__value_.__l.__size_;
      else
        size = &boost::system::detail::generic_cat_holder<void>::instance;
      v27 = ((uint64_t (*)(uint64_t (***)(), unsigned int **, _QWORD))(*size)[3])(size, &v34, LODWORD(__str.__r_.__value_.__l.__data_));
      if ((a3 & 1) == 0)
        goto LABEL_45;
    }
    if ((v27 & 1) != 0)
      return sub_10006D7E4(&v37);
LABEL_45:
    v29 = (int)v34;
    if (v36 == 1)
      v29 = (_DWORD)v34 + 1000 * (v35 % 0x1FFFF7);
    if (v29)
    {
      sub_1000D4868(v29, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
    }
    else if (a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    return sub_10006D7E4(&v37);
  }
  return (unsigned int **)sub_1000D4868(2, a2, (uint64_t)a4, (uint64_t)"boost::filesystem::directory_iterator::construct");
}

void sub_10006D6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v23)
    {
      if ((unint64_t)qword_100417FC8 >> 1 == 0x595588BD12BF6FE8
        || ((BOOL (*)(uint64_t, int))boost::system::detail::generic_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::generic_cat_holder<void>::instance, 12))
      {
        v28 = 3;
      }
      else
      {
        v28 = 2;
      }
      *v23 = 12;
      v23[1] = &boost::system::detail::generic_cat_holder<void>::instance;
      v23[2] = v28;
      a23 = *v24;
      *v24 = 0;
      sub_10006D7E4((unsigned int **)&a23);
      __cxa_end_catch();
      JUMPOUT(0x10006D624);
    }
    __cxa_rethrow();
  }
  sub_10006D7E4((unsigned int **)(v25 - 72));
  _Unwind_Resume(a1);
}

void sub_10006D7D4()
{
  __cxa_end_catch();
  JUMPOUT(0x10006D6FCLL);
}

unsigned int **sub_10006D7E4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = *a1;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = (void *)sub_1000D65FC((uint64_t)v2);
      operator delete(v5);
    }
  }
  return a1;
}

double sub_10006D828@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, double *a3@<X8>)
{
  BOOL v5;
  int v6;
  int v7;
  double result;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 24))
    v5 = *(_DWORD *)(a1 + 28) == 0xFFFF;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 32);
    v7 = *(_DWORD *)(a1 + 36);
    if ((v6 & 0xFFFFFFFB) == 0 || v7 == 0xFFFF)
    {
      sub_10006DB18((const char *)a1, (uint64_t)a2, (int *)&v10);
      *(_QWORD *)(a1 + 24) = v10;
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 28) = v7;
  }
  if (a2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
LABEL_14:
  result = *(double *)(a1 + 24);
  *a3 = result;
  return result;
}

void sub_10006D938(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16))
    sub_100342060();
  _Unwind_Resume(exception_object);
}

const char *sub_10006D950()
{
  return "LOG_PRUNE_TRACES";
}

unint64_t sub_10006D960(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7[2];
  std::string __p;
  sqlite3 *v9;
  uint8_t buf[4];
  int v11;

  sub_1000125C0(a1, &__p);
  sub_10006DB18((const char *)&__p, 0, (int *)&v9);
  if (v9 <= 1)
  {
    v4 = 0;
    v3 = 0;
    v5 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_1000C6940(&v9, &__p, 294914, 0);
    if (qword_100417F08 != -1)
      dispatch_once(&qword_100417F08, &stru_1003FC628);
    v1 = (id)qword_100417F10;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      sub_10006DB18((const char *)&__p, 0, v7);
      *(_DWORD *)buf = 67109120;
      v11 = v7[1];
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "db permissions = %x", buf, 8u);
    }

    v2 = sub_100031AA0(&v9);
    LODWORD(v5) = v2;
    v3 = v2 & 0xFFFFFFFF00000000;
    sub_1000C693C(&v9);
    v4 = v5 & 0xFFFFFF00;
    v5 = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  return v3 | v4 | v5;
}

void sub_10006DAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;

  sub_1000C693C(&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

int *sub_10006DB18@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  const char *v4;
  int *result;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  void *exception;
  _BOOL4 v14;
  uint64_t v15;
  _QWORD v16[3];
  stat v17;

  v4 = a1;
  if (a2)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = (int *)stat(a1, &v17);
  if ((_DWORD)result)
  {
    result = __error();
    v7 = *result;
    if (a2)
    {
      if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
        result = (int *)(v7 != 0);
      else
        result = (int *)((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v7);
      v11 = 2;
      if ((_DWORD)result)
        v11 = 3;
      *(_DWORD *)a2 = v7;
      *(_DWORD *)(a2 + 4) = 0;
      *(_QWORD *)(a2 + 8) = &boost::system::detail::system_cat_holder<void>::instance;
      *(_QWORD *)(a2 + 16) = v11;
      if (v7 == 20)
        v12 = 0;
      else
        v12 = 0xFFFF;
      v9 = v7 == 2 || v7 == 20;
      if (v7 == 2)
        v8 = 0;
      else
        v8 = v12;
    }
    else
    {
      if (v7 != 2 && v7 != 20)
      {
        exception = __cxa_allocate_exception(0x30uLL);
        v16[0] = 0;
        if ((unint64_t)qword_100417F98 >> 1 == 0x595588BD12BF6FE8)
          v14 = v7 != 0;
        else
          v14 = ((BOOL (*)(uint64_t, int))boost::system::detail::system_cat_holder<void>::instance[6])((uint64_t)&boost::system::detail::system_cat_holder<void>::instance, v7);
        v15 = 2;
        LODWORD(v16[0]) = v7;
        if (v14)
          v15 = 3;
        v16[1] = &boost::system::detail::system_cat_holder<void>::instance;
        v16[2] = v15;
        boost::filesystem::filesystem_error::filesystem_error(exception, "boost::filesystem::status", v4, v16);
      }
      v8 = 0;
      v9 = 1;
    }
  }
  else
  {
    v8 = 0xFFFF;
    v9 = 10;
    switch(((v17.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 7;
        break;
      case 1u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 6;
        break;
      case 3u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 3;
        break;
      case 5u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 5;
        break;
      case 7u:
        v8 = v17.st_mode & 0xFFF;
        v9 = 2;
        break;
      case 0xBu:
        v8 = v17.st_mode & 0xFFF;
        v9 = 8;
        break;
      default:
        break;
    }
  }
  *a3 = v9;
  a3[1] = v8;
  return result;
}

void sub_10006DD2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DD40(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *i;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void (***v39)(_QWORD);
  void (***v40)(_QWORD);
  void *v41;
  void (***v42)(_QWORD);
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void **v64;

  *(_QWORD *)a1 = off_1003FE040;
  *(_QWORD *)(a1 + 8) = off_1003FE158;
  sub_100005B8C(*(_QWORD *)(a1 + 2528), a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 2536);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(void ***)(a1 + 2440);
  if (v5)
  {
    do
    {
      v16 = (void **)*v5;
      sub_10021642C((uint64_t)(v5 + 5));
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v16;
    }
    while (v16);
  }
  v6 = *(void **)(a1 + 2424);
  *(_QWORD *)(a1 + 2424) = 0;
  if (v6)
    operator delete(v6);
  sub_1000CACE8(a1 + 2240);
  v7 = *(std::__shared_weak_count **)(a1 + 2224);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*(_BYTE *)(a1 + 2160))
    *(_BYTE *)(a1 + 2160) = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 2152);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_1000C91C4(a1 + 2032);
  if (*(_BYTE *)(a1 + 2016))
    *(_BYTE *)(a1 + 2016) = 0;
  if (*(_BYTE *)(a1 + 2000))
    *(_BYTE *)(a1 + 2000) = 0;
  if (*(_BYTE *)(a1 + 1984))
    *(_BYTE *)(a1 + 1984) = 0;
  if (*(_BYTE *)(a1 + 1968))
    *(_BYTE *)(a1 + 1968) = 0;
  v13 = *(_QWORD *)(a1 + 1944);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 1952);
    v15 = *(void **)(a1 + 1944);
    if (v14 != v13)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v14 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v14 -= 16;
      }
      while (v14 != v13);
      v15 = *(void **)(a1 + 1944);
    }
    *(_QWORD *)(a1 + 1952) = v13;
    operator delete(v15);
  }
  v20 = *(void **)(a1 + 1920);
  if (v20)
  {
    *(_QWORD *)(a1 + 1928) = v20;
    operator delete(v20);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1856));
  v21 = *(void **)(a1 + 1832);
  if (v21)
  {
    *(_QWORD *)(a1 + 1840) = v21;
    operator delete(v21);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1768));
  v22 = *(void **)(a1 + 1744);
  if (v22)
  {
    *(_QWORD *)(a1 + 1752) = v22;
    operator delete(v22);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1680));
  v23 = *(void **)(a1 + 1656);
  if (v23)
  {
    *(_QWORD *)(a1 + 1664) = v23;
    operator delete(v23);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  if (*(_BYTE *)(a1 + 1536))
  {
    v24 = *(void **)(a1 + 1568);
    if (v24)
    {
      *(_QWORD *)(a1 + 1576) = v24;
      operator delete(v24);
    }
    v25 = *(void **)(a1 + 1544);
    if (v25)
    {
      *(_QWORD *)(a1 + 1552) = v25;
      operator delete(v25);
    }
    *(_BYTE *)(a1 + 1536) = 0;
  }
  v26 = *(std::__shared_weak_count **)(a1 + 1528);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)(a1 + 1512);
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (*(_BYTE *)(a1 + 1352))
  {
    sub_100051ED0(a1 + 1360);
    *(_BYTE *)(a1 + 1352) = 0;
  }
  if (*(_BYTE *)(a1 + 1200))
  {
    sub_100051ED0(a1 + 1208);
    *(_BYTE *)(a1 + 1200) = 0;
  }
  if (*(_BYTE *)(a1 + 1048))
  {
    sub_100051ED0(a1 + 1056);
    *(_BYTE *)(a1 + 1048) = 0;
  }
  if (*(_BYTE *)(a1 + 896))
  {
    sub_100051ED0(a1 + 904);
    *(_BYTE *)(a1 + 896) = 0;
  }
  if (*(_BYTE *)(a1 + 688))
  {
    sub_10000CF0C(a1 + 696);
    *(_BYTE *)(a1 + 688) = 0;
  }
  sub_1000060D0((uint64_t *)(a1 + 680));
  if (*(_BYTE *)(a1 + 664))
    *(_BYTE *)(a1 + 664) = 0;
  if (*(_BYTE *)(a1 + 648))
    *(_BYTE *)(a1 + 648) = 0;
  sub_1000C93B0(a1 + 528);
  sub_1000C6514(a1 + 328);
  v32 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v33)
  {
    sub_1000C7030(v33);
    operator delete();
  }
  v34 = *(char **)(a1 + 264);
  if (v34)
  {
    for (i = *(char **)(a1 + 272); i != v34; i -= 88)
    {
      if (*(i - 64))
        *(i - 64) = 0;
    }
    *(_QWORD *)(a1 + 272) = v34;
    operator delete(v34);
  }
  v36 = *(std::__shared_weak_count **)(a1 + 256);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v64 = (void **)(a1 + 224);
  sub_10021E170(&v64);
  v39 = *(void (****)(_QWORD))(a1 + 192);
  if (v39)
  {
    v40 = *(void (****)(_QWORD))(a1 + 200);
    v41 = *(void **)(a1 + 192);
    if (v40 != v39)
    {
      v42 = v40 - 95;
      do
      {
        (**v42)(v42);
        v43 = v42 == v39;
        v42 -= 95;
      }
      while (!v43);
      v41 = *(void **)(a1 + 192);
    }
    *(_QWORD *)(a1 + 200) = v39;
    operator delete(v41);
  }
  v44 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
  v45 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v45)
  {
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
      v47 = *(_QWORD *)(v45 + 16);
      v48 = *(void **)(v45 + 8);
      if (v47 != v46)
      {
        do
        {
          v50 = *(_DWORD *)(v47 - 176);
          if (v50 == v50 >> 31)
          {
            if (*(_BYTE *)(v47 - 128))
              *(_BYTE *)(v47 - 128) = 0;
          }
          else
          {
            v49 = *(_QWORD *)(v47 - 168);
            if (v50 < 0)
            {
              if (v49)
                (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            }
            else
            {
              (*(void (**)(uint64_t))v49)(v47 - 168);
            }
          }
          v47 -= 208;
        }
        while (v47 != v46);
        v48 = *(void **)(v45 + 8);
      }
      *(_QWORD *)(v45 + 16) = v46;
      operator delete(v48);
    }
    operator delete();
  }
  v51 = *(std::__shared_weak_count **)(a1 + 160);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(std::__shared_weak_count **)(a1 + 144);
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(std::__shared_weak_count **)(a1 + 128);
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  nullsub_26(a1 + 56);
  v60 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v60)
    return a1;
  v61 = (unint64_t *)&v60->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (v62)
    return a1;
  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
  std::__shared_weak_count::__release_weak(v60);
  return a1;
}

void sub_10006E388(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _OWORD v13[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      sub_10008930C(v13, v4 + 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)a2 + 120))(&v15, a2, v13);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v13[0] + 1);
      if (*((_QWORD *)&v13[0] + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v13[0] + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      sub_10006F418(&v15, (uint64_t)v13);
      if (v14)
        sub_100268824((_QWORD *)a3, v4 + 8, v13);
      v10 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 += 1920;
    }
    while (v4 != v5);
  }
}

void sub_10006E4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_100195804((uint64_t)va);
  sub_1000F7AE8(v2);
  _Unwind_Resume(a1);
}

void sub_10006E4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_10006E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_1000E095C((uint64_t)va);
  sub_1000F7AE8(v7);
  _Unwind_Resume(a1);
}

void sub_10006E4F8(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v5;
  uint64_t v6;
  _BYTE v7[96];
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  char *v14;

  *a3 = 0;
  a3[1] = 0;
  if (qword_100417ED8 == -1)
  {
    v5 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100406268);
    v5 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      (*(void (**)(uint64_t *__return_ptr, _QWORD, char **))(**(_QWORD **)(a1 + 8) + 120))(&v12, *(_QWORD *)(a1 + 8), a2);
      sub_10007024C(&v12, (uint64_t)buf);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, char **))(**(_QWORD **)(a1 + 8) + 128))(&v11, *(_QWORD *)(a1 + 8), a2);
      v10 = 0;
      if (sub_10006EEE8((uint64_t)&v11))
      {
        sub_10006EEC4((uint64_t)&v11);
        operator new();
      }
      v9 = sub_10006EEB8((uint64_t)&v12);
      v6 = sub_10006EE94((uint64_t)&v12);
      sub_10006FE14(v6, (uint64_t)v7);
      sub_1000700CC((uint64_t)v7, &v8);
      sub_1003135C0();
    }
  }
  *(_DWORD *)buf = 136380675;
  v14 = sub_10004BE10(a2);
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Setting up floor environment for %{private}s", buf, 0xCu);
  goto LABEL_4;
}

void sub_10006E88C()
{
  operator delete();
}

uint64_t sub_10006E9D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10006E9DC(uint64_t a1, uint64_t a2)
{
  sub_10006E9E4(*(_QWORD *)(a1 + 8), a2);
}

void sub_10006E9E4(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_10006EB54(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_10006EBC0((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_10006EBAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_10006EBC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_10006ECAC(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x10006EC08);
}

void sub_10006ECE8(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

void sub_10006ED48(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_10006EDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10006EE10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t sub_10006EE94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if (!result)
    return *(_QWORD *)(qword_10042EA50 + 48);
  return result;
}

uint64_t sub_10006EEB8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 60);
}

uint64_t sub_10006EEC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a1 + 64);
  if (!result)
    return *(_QWORD *)(qword_10042EA28 + 64);
  return result;
}

uint64_t sub_10006EEE8(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)a1 + 92) >> 2) & 1;
}

uint64_t sub_10006EEF8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  double v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_100405F58;
  v8 = *a3;
  if (!*a3 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 40))(*a3) & 1) != 0)
  {
    *(_OWORD *)(a1 + 8) = xmmword_10039A5F8;
    *(_OWORD *)(a1 + 24) = unk_10039A608;
    if ((*(_BYTE *)(a2 + 1914) & 8) == 0)
      goto LABEL_7;
LABEL_6:
    v11 = *(double *)(a2 + 1824);
    if (v11 > 0.0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  v10 = v9[1];
  *(_OWORD *)(a1 + 8) = *v9;
  *(_OWORD *)(a1 + 24) = v10;
  if ((*(_BYTE *)(a2 + 1914) & 8) != 0)
    goto LABEL_6;
LABEL_7:
  v11 = sub_100071CFC((uint64_t *)(a2 + 1800));
LABEL_8:
  v12 = a3[1];
  *(_QWORD *)(a1 + 48) = *a3;
  *(double *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10006F0F8(a2, (_QWORD *)(a1 + 64));
  sub_1000B53CC(a1 + 80, a2);
  v15 = *a4;
  if (!*a4)
    operator new();
  *a4 = 0;
  *(_QWORD *)(a1 + 2000) = v15;
  sub_10008930C((_QWORD *)(a1 + 2008), a1 + 88);
  *(_DWORD *)(a1 + 2024) = sub_100071A44(a1 + 80);
  return a1;
}

void sub_10006F064(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100073738(v3);
  sub_1000E095C(v2);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_10006F0B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1000E095C(v2);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_10006F0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F0E8()
{
  return 0;
}

uint64_t sub_10006F0F0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_10006F0F8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  double v7;
  __double2 v8;
  __double2 v9;
  __double2 v10;
  double v11;
  long double v12;
  void *v13[2];
  void *v14[2];
  char v15;
  std::string __p;

  if ((*(_BYTE *)(result + 1913) & 4) == 0)
    return sub_10006FC40(a2);
  v3 = result;
  v4 = *(unsigned __int16 *)(result + 1432);
  if ((~v4 & 0x180) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      sub_1000D5048(v14, "");
      sub_10015C704("We need image dimensions to get the ENU for a floorlan. Your ImageMetadata isn't set!", &__p);
      sub_100174738((uint64_t)v14, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v15 < 0)
        operator delete(v14[0]);
      sub_10015C2DC((uint64_t)v13);
    }
    if ((*(_BYTE *)(result + 1104) & 1) == 0)
    {
      sub_1000D5048(v14, "");
      sub_10015C750("We need image width to get the ENU for a floorplan. Your ImageMetadata.width isn't set!", &__p);
      sub_100174738((uint64_t)v14, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v15 < 0)
        operator delete(v14[0]);
      sub_10015C2DC((uint64_t)v13);
    }
    if ((*(_BYTE *)(result + 1104) & 2) == 0)
    {
      sub_1000D5048(v14, "");
      sub_10015C79C("We need image height to get the ENU for a floorplan. Your ImageMetadata.height isn't set!", &__p);
      sub_100174738((uint64_t)v14, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v15 < 0)
        operator delete(v14[0]);
      sub_10015C2DC((uint64_t)v13);
    }
    v5 = *(_DWORD *)(result + 1076);
    v6 = *(double *)(result + 1304) * 0.0174532925;
    v7 = *(double *)(result + 1336) * 0.0174532925;
    v8 = __sincos_stret(*(double *)(result + 1344) * 0.0174532925 - *(double *)(result + 1312) * 0.0174532925);
    v9 = __sincos_stret(v7);
    v10 = __sincos_stret(v6);
    LODWORD(v7) = *(_DWORD *)(v3 + 1072);
    v11 = atan2(v9.__cosval * v8.__sinval, -(v10.__sinval * v9.__cosval) * v8.__cosval + v10.__cosval * v9.__sinval);
    v12 = atan2((double)-v5, (double)SLODWORD(v7));
    return sub_10015FFE0(a2, v11 + v12);
  }
  return result;
}

void sub_10006F3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006F418(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  _OWORD v4[2];

  if ((~*(_DWORD *)(*a1 + 200) & 0x180000) != 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  else
  {
    sub_1002CFC68((uint64_t)v4, a1);
    v3 = v4[1];
    *(_OWORD *)a2 = v4[0];
    *(_OWORD *)(a2 + 16) = v3;
    *(_BYTE *)(a2 + 32) = 1;
  }
}

uint64_t sub_10006F488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = off_1004006B8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = sub_10006FB2C(a2);
  sub_100071A40(a1 + 24, v5);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  *(double *)(a1 + 80) = sub_10006F854(*(double **)(a1 + 64));
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v8;
  sub_100071CF8(a1 + 112, a1 + 64);
  *(_DWORD *)(a1 + 168) = sub_10006FC00(a2);
  *(double *)(a1 + 176) = sub_10006FB68(a2);
  *(double *)(a1 + 184) = sub_10006FB50(a2);
  v12 = sub_10006FBA0(a2, v9, v10, v11);
  sub_10006F668((_QWORD *)(a1 + 192), v12);
  v16 = sub_10006FBD0(a2, v13, v14, v15);
  sub_10006F668((_QWORD *)(a1 + 248), v16);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 352) = sub_10006FC1C(a2);
  *(_QWORD *)(a1 + 360) = v17;
  *(_QWORD *)(a1 + 368) = sub_10006FB80(a2);
  *(_QWORD *)(a1 + 376) = v18;
  return a1;
}

void sub_10006F5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_1000E095C(v10);
  sub_1000E095C(a10);
  _Unwind_Resume(a1);
}

void sub_10006F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  sub_10004AAA0(v16, *v10);
  if (*v17)
    operator delete(*v17);
  sub_10004AA70(v15);
  sub_10004AA70(v14);
  sub_1001D3250(v13);
  sub_1000E095C(v12);
  sub_1000E095C(v11);
  sub_1000E095C(a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006F668(_QWORD *a1, uint64_t a2)
{
  *a1 = off_100402F60;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[5] = 0;
  a1[6] = 0;
  a1[2] = 0x3FF0000000000000;
  a1[3] = 0;
  a1[4] = 0;
  sub_10006F6F8((uint64_t)a1, a2);
  return a1;
}

void sub_10006F6C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_10006F6E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/math.pb.cc", 797);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 52);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
    v5 = *(_DWORD *)(a2 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_12:
      v10 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 4u;
      *(_QWORD *)(a1 + 32) = v10;
      if ((*(_DWORD *)(a2 + 52) & 8) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 2u;
  *(_QWORD *)(a1 + 24) = v9;
  v5 = *(_DWORD *)(a2 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v5 & 8) != 0)
  {
LABEL_8:
    v6 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(_QWORD *)(a1 + 40) = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_10006F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10006F808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F81C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_10042E9D8;
  if (!qword_10042E9D8)
  {
    sub_1002D7A18(0, a2, a3, a4);
    return qword_10042E9D8;
  }
  return result;
}

double sub_10006F854(double *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  long double v9;
  std::__shared_weak_count *v10;
  _BYTE v11[32];
  long double v12;
  std::__shared_weak_count *v13;
  _BYTE v14[32];
  double v15;

  sub_10006F9A4(a1, (uint64_t)&v12);
  sub_10006FD04(&v12, (uint64_t)v14);
  sub_10006FA58(a1, (uint64_t)&v9);
  sub_10006FD04(&v9, (uint64_t)v11);
  sub_100071A70((uint64_t)&v15, (uint64_t)v14, (uint64_t)v11);
  nullsub_23(v11);
  v2 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_23(v14);
  v5 = v13;
  if (!v13)
    return v15;
  v6 = (unint64_t *)&v13->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return v15;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return v15;
}

void sub_10006F954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  nullsub_23(&a13);
  sub_1000E095C((uint64_t)&a9);
  nullsub_23(v17 - 80);
  sub_1000E095C((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10006F990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006F9A4(double *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  std::__shared_weak_count *v10;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v9 = v5;
  if (!v4 || (v10 = std::__shared_weak_count::lock(v4)) == 0)
    sub_1001608FC();
  sub_100071CB4(a2, (uint64_t)&v9, a1[12], a1[15]);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10006FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10006FA58(double *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  std::__shared_weak_count *v10;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v9 = v5;
  if (!v4 || (v10 = std::__shared_weak_count::lock(v4)) == 0)
    sub_1001608FC();
  sub_100071CB4(a2, (uint64_t)&v9, a1[13], a1[14]);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10006FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FB08@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10006FB2C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (!result)
    return *(_QWORD *)(qword_10042EA50 + 40);
  return result;
}

double sub_10006FB50(uint64_t a1)
{
  double result;

  result = 0.0;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 201) & 0x80) != 0)
    return *(double *)(*(_QWORD *)a1 + 152);
  return result;
}

double sub_10006FB68(uint64_t a1)
{
  double result;

  result = 30.0;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 201) & 0x20) != 0)
    return *(double *)(*(_QWORD *)a1 + 144);
  return result;
}

BOOL sub_10006FB80(uint64_t a1)
{
  return (*(_BYTE *)(*(_QWORD *)a1 + 202) & 0x10) != 0;
}

uint64_t sub_10006FBA0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 202) & 1) == 0)
    return sub_10006F81C(a1, a2, a3, a4);
  result = *(_QWORD *)(*(_QWORD *)a1 + 160);
  if (!result)
    return *(_QWORD *)(qword_10042EA50 + 160);
  return result;
}

uint64_t sub_10006FBD0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 202) & 2) == 0)
    return sub_10006F81C(a1, a2, a3, a4);
  result = *(_QWORD *)(*(_QWORD *)a1 + 168);
  if (!result)
    return *(_QWORD *)(qword_10042EA50 + 168);
  return result;
}

uint64_t sub_10006FC00(uint64_t a1)
{
  if ((*(_BYTE *)(*(_QWORD *)a1 + 201) & 8) != 0)
    return *(unsigned int *)(*(_QWORD *)a1 + 136);
  else
    return 1;
}

BOOL sub_10006FC1C(uint64_t a1)
{
  return (*(_BYTE *)(*(_QWORD *)a1 + 202) & 8) != 0;
}

uint64_t sub_10006FC40@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (**v3)();
  _QWORD v4[3];
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v3 = off_1003F9AA8;
  v4[0] = off_1003F9A68;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v5 = 0;
  v9 = 4;
  sub_1000504A8((uint64_t)v4, 0.0);
  sub_1000504A0((uint64_t)v4, 0.0);
  sub_100070094((uint64_t)&v3, 1.0);
  v7 = 1;
  sub_10015A3D4((uint64_t)&unk_1003894D1, (uint64_t)&v3, a1);
  return nullsub_21(&v3);
}

void sub_10006FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_21(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FD04@<X0>(long double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  __double2 v13;
  double v14;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(double *)(*(_QWORD *)a1 + 80);
  v5 = a1[2];
  if (v4 == 0.0)
  {
    v6 = *(double *)(v3 + 64);
    v7 = v5 * v6;
    v8 = v6 * (a1[3] * (double)*(int *)(v3 + 16));
  }
  else
  {
    v9 = a1[3];
    v10 = hypot(a1[2], v9);
    v11 = atan2(v9, v5);
    v12 = (double)*(int *)(v3 + 16);
    v13 = __sincos_stret(v11 + v12 * v4);
    v14 = *(double *)(v3 + 64);
    v7 = v14 * (v10 * v13.__cosval);
    v8 = v14 * (v10 * v13.__sinval * v12);
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = off_1003F9A68;
  *(_BYTE *)(a2 + 24) &= 0xFCu;
  sub_1000504A8(a2, v7 + *(double *)(v3 + 40));
  result = sub_1000504A0(a2, v8 + *(double *)(v3 + 48));
  *(_BYTE *)(a2 + 24) |= 3u;
  return result;
}

void sub_10006FE00(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_23(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 v6[4];

  *(_QWORD *)a2 = off_1003F9AC8;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = off_1003F9AA8;
  *(_QWORD *)(a2 + 24) = off_1003F9A68;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= 0xFCu;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = *(_BYTE *)(a2 + 80) & 0xF8 | 4;
  *(_BYTE *)(a2 + 88) &= 0xF8u;
  sub_10006FF64(a2, *(_DWORD *)(a1 + 16));
  sub_10006FF6C(a2, *(_DWORD *)(a1 + 20));
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    v4 = *(_QWORD *)(qword_10042EA78 + 24);
  sub_10006FF74(v4, v6);
  sub_10006FF30(a2, (uint64_t)v6);
  return nullsub_21(v6);
}

void sub_10006FEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_21(va);
  nullsub_25(v2);
  _Unwind_Resume(a1);
}

void sub_10006FF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_25(v1);
  _Unwind_Resume(a1);
}

void sub_10006FF1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_25(v1);
  _Unwind_Resume(a1);
}

double sub_10006FF30(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 48);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 64);
  return result;
}

uint64_t sub_10006FF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_10006FF6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2;
  return result;
}

uint64_t sub_10006FF74@<X0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  _QWORD v6[3];
  char v7;

  a2->n128_u64[0] = (unint64_t)off_1003F9AA8;
  a2->n128_u64[1] = (unint64_t)off_1003F9A68;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u8[0] &= 0xFCu;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u8[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u8[0] = a2[4].n128_u8[0] & 0xF8 | 4;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    v4 = *(_QWORD *)(qword_10042EA70 + 16);
  v6[1] = 0;
  v6[2] = 0;
  v7 = 0;
  v6[0] = off_1003F9A68;
  sub_1000504A8((uint64_t)v6, *(double *)(v4 + 16));
  sub_1000504A0((uint64_t)v6, *(double *)(v4 + 24));
  sub_10007009C(a2, (uint64_t)v6);
  nullsub_23(v6);
  sub_100070094((uint64_t)a2, *(double *)(a1 + 24));
  sub_1000700C4((uint64_t)a2, *(_BYTE *)(a1 + 40));
  return sub_1000700B0((uint64_t)a2, *(double *)(a1 + 32));
}

void sub_100070060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  nullsub_23(&a9);
  nullsub_21(v9);
  _Unwind_Resume(a1);
}

void sub_100070080(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_21(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100070094(uint64_t result, double a2)
{
  *(double *)(result + 40) = a2;
  return result;
}

__n128 sub_10007009C(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[2].n128_u8[0] = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t sub_1000700B0(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(_BYTE *)(result + 64) |= 4u;
  return result;
}

uint64_t sub_1000700C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

void sub_1000700CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10016075C(a1 + 16, (int *)(a1 + 12), (int *)(a1 + 8), a2);
}

double sub_1000700F8(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003F9AA8;
  *(_QWORD *)(a1 + 8) = off_1003F9A68;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) &= 0xFCu;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xF8 | 4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

uint64_t sub_100070160(uint64_t a1, double *a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t (**v9)();
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;

  v9 = off_1003F9A08;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0;
  sub_100071A5C((uint64_t)&v9, a2[7]);
  sub_100071A48((uint64_t)&v9, a2[6]);
  sub_1000504A0((uint64_t)&v9, a2[3]);
  sub_100050498((uint64_t)&v9, a2[4]);
  sub_1000504A8((uint64_t)&v9, a2[2]);
  sub_100071548((uint64_t)&v9, a2[5]);
  v4 = *((double *)&v10 + 1);
  v5 = llround(*(double *)&v10);
  *(_QWORD *)a1 = v5;
  v6 = v4 / (double)v5;
  v7 = sqrt((*(double *)&v11 / (double)v5 - v6 * v6) * 3.0);
  *(double *)(a1 + 8) = v6 - v7;
  *(double *)(a1 + 16) = v6 + v7;
  nullsub_26(&v9);
  return a1;
}

void sub_100070238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_26(&a9);
  _Unwind_Resume(a1);
}

void sub_10007024C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t i;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  void (**v83)(char *);
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94[8];
  uint64_t (**v95)();
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  int v100;
  uint64_t (**v101)();
  uint64_t v102;
  uint64_t (**v103)();
  uint64_t (**v104)();
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (**v115)();
  __int128 v116;
  __int128 v117;
  char v118;
  uint64_t (**v119)();
  __int128 v120;
  __int128 v121;
  char v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t (**v126)();
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t (**v130)();
  uint64_t v131;
  uint64_t v132;
  char v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int16 v137;
  unsigned __int8 v138;
  uint64_t (**v139)();
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  char v144;
  std::runtime_error v145;

  v2 = a2;
  v3 = *a1;
  sub_100071104(a2);
  sub_10007197C(v2, *(const std::string **)(v3 + 16));
  sub_1000719AC(v2, *(const std::string **)(v3 + 16));
  sub_100071A10(v2, *(_DWORD *)(v3 + 56));
  *(_DWORD *)(v2 + 1912) |= 0x8000u;
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    v4 = *(_QWORD *)(qword_10042EA50 + 32);
  sub_1000504A8(v2 + 1624, *(double *)(v4 + 16));
  v5 = *(_QWORD *)(v3 + 32);
  if (!v5)
    v5 = *(_QWORD *)(qword_10042EA50 + 32);
  sub_1000504A0(v2 + 1624, *(double *)(v5 + 24));
  *(_DWORD *)(v2 + 1912) |= 8u;
  v94[0] = (char *)off_1003F9CB8;
  memset(&v94[1], 0, 56);
  v95 = off_1003F9A08;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 &= 0xFCu;
  v100 = 0;
  v101 = off_1003F9AC8;
  v102 = 0;
  v103 = off_1003F9AA8;
  v104 = off_1003F9A68;
  v105 = 0;
  v106 = 0;
  v107 &= 0xFCu;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = v111 & 0xF8 | 4;
  v112 &= 0xF8u;
  v113 = 0;
  v114 = 0;
  v115 = off_1003F9A28;
  v116 = xmmword_10038DC80;
  v117 = xmmword_10038DC90;
  v118 |= 0xFu;
  v119 = off_1003F9A28;
  v120 = xmmword_10038DC80;
  v121 = xmmword_10038DC90;
  v122 |= 0xFu;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  v126 = off_1003F9A68;
  v127 = 0;
  v128 = 0;
  v129 &= 0xFCu;
  v132 = 0;
  v130 = off_1003F9A68;
  v131 = 0;
  v133 &= 0xFCu;
  v135 = 0u;
  v136 = 0u;
  v134 = 0u;
  v137 = 0;
  v138 = ((v138 << 16) & 0xFE0000u) >> 16;
  v86 = v3;
  v6 = *(double **)(v3 + 40);
  if (!v6)
    v6 = *(double **)(qword_10042EA50 + 40);
  v139 = off_1003F9A08;
  v140 = 0uLL;
  v141 = 0uLL;
  v142 = 0uLL;
  LOBYTE(v143) = v143 & 0xFC;
  v91 = v2;
  sub_1000504A8((uint64_t)&v139, v6[2]);
  sub_1000504A0((uint64_t)&v139, v6[3]);
  sub_100050498((uint64_t)&v139, v6[4]);
  sub_100071548((uint64_t)&v139, v6[5]);
  sub_100071A38((uint64_t)v94, (uint64_t)&v139);
  nullsub_26(&v139);
  v7 = *(_QWORD *)(v86 + 48);
  if (!v7)
    v7 = *(_QWORD *)(qword_10042EA50 + 48);
  sub_10006FE14(v7, (uint64_t)&v139);
  sub_100071A30((uint64_t)v94, (uint64_t)&v139);
  nullsub_25(&v139);
  sub_100071A24(v2 + 80, (uint64_t)v94);
  sub_10007368C(v94);
  v8 = *(_QWORD *)(v86 + 64);
  if (!v8)
    v8 = *(_QWORD *)(qword_10042EA50 + 64);
  v94[0] = (char *)off_1003F9638;
  memset(&v94[4], 0, 32);
  LOBYTE(v95) = v95 & 0x80;
  *(_OWORD *)&v94[1] = *(_OWORD *)(v8 + 16);
  v94[3] = *(char **)(v8 + 32);
  sub_1000719E4(v2, (uint64_t)v94);
  nullsub_20(v94);
  v9 = *(_QWORD *)(v86 + 72);
  if (!v9)
    v9 = *(_QWORD *)(qword_10042EA50 + 72);
  v94[0] = (char *)off_1003F9638;
  memset(&v94[4], 0, 32);
  LOBYTE(v95) = v95 & 0x80;
  *(_OWORD *)&v94[1] = *(_OWORD *)(v9 + 16);
  v94[3] = *(char **)(v9 + 32);
  sub_1000719B4(v2, (uint64_t)v94);
  nullsub_20(v94);
  sub_100071550((_QWORD *)(v2 + 1800), *(int *)(v86 + 88));
  v87 = (_QWORD *)(v2 + 1832);
  sub_100071824((_QWORD *)(v2 + 1832), *(int *)(v86 + 120));
  *(_DWORD *)(v2 + 1912) &= ~0x200000u;
  v10 = *(_DWORD *)(v86 + 200);
  if ((v10 & 0x4000) != 0)
  {
    v11 = *(_DWORD *)(v86 + 140);
    if ((v11 - 1) >= 2)
    {
      __cxa_allocate_exception(0x40uLL);
      v94[0] = (char *)operator new(0x30uLL);
      *(_OWORD *)&v94[1] = xmmword_100391FB0;
      strcpy(v94[0], "Unsupported proto::venue::LocationContext enum");
      std::runtime_error::runtime_error(&v145, (const std::string *)v94);
      v145.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
      sub_10018D04C((uint64_t)&v139);
      sub_1000EF6D4(&v145, (uint64_t)"LocationContext convert(proto::venue::LocationContext)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/venue.cpp", 126, (uint64_t)&v139);
    }
    sub_100072FF8(v2, v11);
    v10 = *(_DWORD *)(v86 + 200);
  }
  if ((v10 & 0x200) != 0)
    sub_1001978C4(v2, *(double *)(v86 + 104));
  v12 = *(int *)(v86 + 88);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)(v86 + 80);
    v14 = 8 * v12;
    do
    {
      while (1)
      {
        sub_1000716A8((uint64_t)v94, *v13);
        v15 = *(_QWORD *)(v2 + 1808);
        if (v15 < *(_QWORD *)(v2 + 1816))
          break;
        *(_QWORD *)(v2 + 1808) = sub_1002CFD38((_QWORD *)(v2 + 1800), (uint64_t)v94);
        sub_10007342C(v94);
        ++v13;
        v14 -= 8;
        if (!v14)
          goto LABEL_23;
      }
      sub_100071A2C(*(_QWORD *)(v2 + 1808), v94);
      *(_QWORD *)(v2 + 1808) = v15 + 72;
      *(_QWORD *)(v2 + 1808) = v15 + 72;
      sub_10007342C(v94);
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
LABEL_23:
  v16 = *(int *)(v86 + 120);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD **)(v86 + 112);
    v88 = &v17[v16];
    while (1)
    {
      v89 = v17;
      v19 = *v17;
      v94[0] = (char *)off_1003F9678;
      v94[1] = (char *)off_1003F9658;
      memset(&v94[2], 0, 48);
      v95 = 0;
      LOBYTE(v96) = v96 & 0xF8;
      v97 = 0uLL;
      *((_QWORD *)&v96 + 1) = 0;
      LOBYTE(v98) = v98 & 0xFC;
      v20 = *(_QWORD *)(v19 + 16);
      if (!v20)
        v20 = *(_QWORD *)(qword_10042EA40 + 16);
      sub_1000716A8((uint64_t)&v139, v20);
      sub_100073010((uint64_t)v94, (uint64_t)&v139);
      sub_10007342C(&v139);
      sub_100071550((_QWORD *)&v96 + 1, *(int *)(v19 + 32));
      v21 = *(int *)(v19 + 32);
      if ((_DWORD)v21)
        break;
LABEL_124:
      v85 = *(_QWORD *)(v2 + 1840);
      if (v85 >= *(_QWORD *)(v2 + 1848))
      {
        v18 = sub_1002D007C(v87, (uint64_t)v94);
      }
      else
      {
        sub_10007300C(*(_QWORD *)(v2 + 1840), v94);
        v18 = (char *)(v85 + 112);
        *(_QWORD *)(v2 + 1840) = v85 + 112;
      }
      *(_QWORD *)(v2 + 1840) = v18;
      sub_1000737B8(v94);
      v17 = v89 + 1;
      if (v89 + 1 == v88)
        goto LABEL_126;
    }
    v22 = *(_QWORD **)(v19 + 24);
    v90 = &v22[v21];
    while (1)
    {
      v23 = *v22;
      v139 = off_1003F9658;
      v140 = 0u;
      v141 = 0u;
      v142 = 0u;
      v143 = 0;
      v144 &= 0xF8u;
      v92 = v22;
      v93 = v23;
      v24 = *(int *)(v23 + 24);
      if ((_DWORD)v24)
      {
        if ((v24 & 0x80000000) != 0)
          goto LABEL_133;
        v25 = (char *)operator new(8 * v24);
        *(_QWORD *)&v140 = v25;
        *((_QWORD *)&v140 + 1) = v25;
        *(_QWORD *)&v141 = &v25[8 * v24];
        v26 = *(_DWORD *)(v93 + 48);
        v27 = v26;
        if (v26)
        {
LABEL_40:
          if (v26 < 0)
LABEL_133:
            sub_1000D02C0();
          *((_QWORD *)&v141 + 1) = operator new(8 * v27);
          *(_QWORD *)&v142 = *((_QWORD *)&v141 + 1);
          *((_QWORD *)&v142 + 1) = *((_QWORD *)&v141 + 1) + 8 * v27;
          if (!(_DWORD)v24)
          {
LABEL_37:
            if (v26)
              goto LABEL_73;
            goto LABEL_103;
          }
          goto LABEL_42;
        }
      }
      else
      {
        v25 = 0;
        v26 = *(_DWORD *)(v23 + 48);
        v27 = v26;
        if (v26)
          goto LABEL_40;
      }
      if (!(_DWORD)v24)
        goto LABEL_37;
LABEL_42:
      v28 = *(_QWORD **)(v93 + 16);
      v29 = &v28[v24];
      do
      {
        if ((unint64_t)v25 < (unint64_t)v141)
        {
          *(_QWORD *)v25 = *v28;
          v30 = (uint64_t)(v25 + 8);
          goto LABEL_44;
        }
        v31 = (char *)v140;
        v32 = (uint64_t)&v25[-v140] >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          sub_1000D02C0();
        v34 = v141 - v140;
        if ((uint64_t)(v141 - v140) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
            sub_1000CDEB8();
          v36 = operator new(8 * v35);
          v37 = &v36[8 * v32];
          *v37 = *v28;
          v30 = (uint64_t)(v37 + 1);
          if (v25 == v31)
            goto LABEL_60;
        }
        else
        {
          v36 = 0;
          v37 = (_QWORD *)(8 * v32);
          *(_QWORD *)(8 * v32) = *v28;
          v30 = 8 * v32 + 8;
          if (v25 == v31)
            goto LABEL_60;
        }
        v38 = v25 - 8 - v31;
        if (v38 < 0x168)
        {
          v39 = v25;
          goto LABEL_59;
        }
        if (&v36[v25 - v31 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[v25 - v31 - 8])
        {
          v39 = v25;
          do
          {
LABEL_59:
            v40 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *--v37 = v40;
          }
          while (v39 != v31);
          goto LABEL_60;
        }
        if (&v25[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v25 - 8)
        {
          v39 = v25;
          goto LABEL_59;
        }
        if ((unint64_t)(v31 - v36) < 0x20)
        {
          v39 = v25;
          goto LABEL_59;
        }
        v41 = (v38 >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = &v25[-v42];
        v37 = (_QWORD *)((char *)v37 - v42);
        v43 = &v36[8 * v32 - 16];
        v44 = v25 - 16;
        v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46 = *(_OWORD *)v44;
          *(v43 - 1) = *((_OWORD *)v44 - 1);
          *v43 = v46;
          v43 -= 2;
          v44 -= 32;
          v45 -= 4;
        }
        while (v45);
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_59;
LABEL_60:
        *(_QWORD *)&v140 = v37;
        *((_QWORD *)&v140 + 1) = v30;
        *(_QWORD *)&v141 = &v36[8 * v35];
        if (v31)
          operator delete(v31);
LABEL_44:
        *((_QWORD *)&v140 + 1) = v30;
        ++v28;
        v25 = (char *)v30;
      }
      while (v28 != v29);
      v47 = *(_DWORD *)(v93 + 48);
      v27 = v47;
      if (v47)
      {
LABEL_73:
        v48 = *(_QWORD **)(v93 + 40);
        v49 = &v48[v27];
        v50 = (char *)v142;
        while ((unint64_t)v50 < *((_QWORD *)&v142 + 1))
        {
          *(_QWORD *)v50 = *v48;
          v51 = (uint64_t)(v50 + 8);
LABEL_75:
          *(_QWORD *)&v142 = v51;
          ++v48;
          v50 = (char *)v51;
          if (v48 == v49)
            goto LABEL_103;
        }
        v52 = (char *)*((_QWORD *)&v141 + 1);
        v53 = (uint64_t)&v50[-*((_QWORD *)&v141 + 1)] >> 3;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
          sub_1000D02C0();
        v55 = *((_QWORD *)&v142 + 1) - *((_QWORD *)&v141 + 1);
        if ((uint64_t)(*((_QWORD *)&v142 + 1) - *((_QWORD *)&v141 + 1)) >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 61)
            sub_1000CDEB8();
          v57 = operator new(8 * v56);
          v58 = &v57[8 * v53];
          *v58 = *v48;
          v51 = (uint64_t)(v58 + 1);
          if (v50 == v52)
            goto LABEL_91;
LABEL_88:
          v59 = v50 - 8 - v52;
          if (v59 < 0x168)
          {
            v60 = v50;
            goto LABEL_90;
          }
          if (&v57[v50 - v52 - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] > &v57[v50 - v52 - 8])
          {
            v60 = v50;
            goto LABEL_90;
          }
          if (&v50[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
          {
            v60 = v50;
            goto LABEL_90;
          }
          if ((unint64_t)(v52 - v57) < 0x20)
          {
            v60 = v50;
            goto LABEL_90;
          }
          v62 = (v59 >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = &v50[-v63];
          v58 = (_QWORD *)((char *)v58 - v63);
          v64 = &v57[8 * v53 - 16];
          v65 = v50 - 16;
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *(_OWORD *)v65;
            *(v64 - 1) = *((_OWORD *)v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 32;
            v66 -= 4;
          }
          while (v66);
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_90:
              v61 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *--v58 = v61;
            }
            while (v60 != v52);
          }
        }
        else
        {
          v57 = 0;
          v58 = (_QWORD *)(8 * v53);
          *(_QWORD *)(8 * v53) = *v48;
          v51 = 8 * v53 + 8;
          if (v50 != v52)
            goto LABEL_88;
        }
LABEL_91:
        *((_QWORD *)&v141 + 1) = v58;
        *(_QWORD *)&v142 = v51;
        *((_QWORD *)&v142 + 1) = &v57[8 * v56];
        if (v52)
          operator delete(v52);
        goto LABEL_75;
      }
LABEL_103:
      sub_10007181C((uint64_t)&v139, *(double *)(v93 + 64));
      v68 = v97;
      if ((unint64_t)v97 >= *((_QWORD *)&v97 + 1))
      {
        v70 = 0x8E38E38E38E38E39 * ((uint64_t)(v97 - *((_QWORD *)&v96 + 1)) >> 3);
        v71 = v70 + 1;
        if (v70 + 1 > 0x38E38E38E38E38ELL)
          sub_1000D02C0();
        if (0x1C71C71C71C71C72 * ((uint64_t)(*((_QWORD *)&v97 + 1) - *((_QWORD *)&v96 + 1)) >> 3) > v71)
          v71 = 0x1C71C71C71C71C72 * ((uint64_t)(*((_QWORD *)&v97 + 1) - *((_QWORD *)&v96 + 1)) >> 3);
        if (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v97 + 1) - *((_QWORD *)&v96 + 1)) >> 3) >= 0x1C71C71C71C71C7)
          v72 = 0x38E38E38E38E38ELL;
        else
          v72 = v71;
        if (v72)
        {
          if (v72 > 0x38E38E38E38E38ELL)
            sub_1000CDEB8();
          v73 = (char *)operator new(72 * v72);
        }
        else
        {
          v73 = 0;
        }
        v74 = &v73[72 * v70];
        sub_100071A2C(v74, &v139);
        v75 = 0;
        v76 = &v73[72 * v72];
        v69 = v74 + 72;
        v78 = *((_QWORD *)&v96 + 1);
        for (i = v97; i + v75 != v78; sub_100071A2C(&v74[v75], v75 + i))
          v75 -= 72;
        v80 = (char *)*((_QWORD *)&v96 + 1);
        v79 = (char *)v97;
        *((_QWORD *)&v96 + 1) = &v74[v75];
        *(_QWORD *)&v97 = v74 + 72;
        *((_QWORD *)&v97 + 1) = v76;
        if (v79 != v80)
        {
          v81 = v79 - 72;
          v82 = v79 - 72;
          do
          {
            v83 = *(void (***)(char *))v82;
            v82 -= 72;
            (*v83)(v81);
            v84 = v81 == v80;
            v81 = v82;
          }
          while (!v84);
        }
        if (v80)
          operator delete(v80);
        v2 = v91;
      }
      else
      {
        v2 = v91;
        sub_100071A2C(v97, &v139);
        v69 = (char *)(v68 + 72);
      }
      *(_QWORD *)&v97 = v69;
      sub_10007342C(&v139);
      v22 = v92 + 1;
      if (v92 + 1 == v90)
        goto LABEL_124;
    }
  }
LABEL_126:
  if ((*(_BYTE *)(v86 + 202) & 4) != 0)
    sub_1001978D8(v2, *(_BYTE *)(v86 + 192));
}

void sub_100070ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 200);
  if (v30)
  {
    *(_QWORD *)(v28 - 192) = v30;
    operator delete(v30);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v28 - 104));
  if (a28 < 0)
    operator delete(__p);
  sub_100073738(a20);
  _Unwind_Resume(a1);
}

void sub_100070F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  std::runtime_error::~runtime_error((std::runtime_error *)(v29 - 104));
  if (a28 < 0)
    operator delete(__p);
  __cxa_free_exception(v28);
  sub_100073738(a20);
  _Unwind_Resume(a1);
}

void sub_100070F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  nullsub_20(va);
  sub_100073738(v15);
  _Unwind_Resume(a1);
}

void sub_100070F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10007368C(va);
  sub_100073738(a13);
  _Unwind_Resume(a1);
}

void sub_100070FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100073738(v1);
  _Unwind_Resume(a1);
}

void sub_10007104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  uint64_t v24;

  if (v23)
    operator delete(v23);
  sub_10007342C((_QWORD *)(v24 - 200));
  sub_1000737B8(&a23);
  sub_100073738(a20);
  _Unwind_Resume(a1);
}

void sub_10007105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  sub_10007342C(v16 - 200);
  sub_1000737B8((uint64_t *)va);
  sub_100073738(v15);
  _Unwind_Resume(a1);
}

void sub_10007106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  sub_10007342C((_QWORD *)(v16 - 200));
  sub_1000737B8((uint64_t *)va);
  sub_100073738(v15);
  _Unwind_Resume(a1);
}

void sub_1000710D8()
{
  JUMPOUT(0x1000710E0);
}

double sub_100071104(uint64_t a1)
{
  double result;
  char v2;

  *(_QWORD *)a1 = off_1003F9698;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = off_1003F9A08;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 280) &= 0xFCu;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = off_1003F9AC8;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = off_1003F9AA8;
  *(_QWORD *)(a1 + 320) = off_1003F9A68;
  *(_BYTE *)(a1 + 344) &= 0xFCu;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a1 + 376) & 0xF8 | 4;
  *(_BYTE *)(a1 + 384) &= 0xF8u;
  *(_QWORD *)(a1 + 408) = off_1003F9A28;
  *(_OWORD *)(a1 + 416) = xmmword_10038DC80;
  *(_OWORD *)(a1 + 432) = xmmword_10038DC90;
  *(_BYTE *)(a1 + 448) |= 0xFu;
  *(_QWORD *)(a1 + 456) = off_1003F9A28;
  *(_OWORD *)(a1 + 464) = xmmword_10038DC80;
  *(_OWORD *)(a1 + 480) = xmmword_10038DC90;
  *(_BYTE *)(a1 + 496) |= 0xFu;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = off_1003F9A68;
  *(_BYTE *)(a1 + 568) &= 0xFCu;
  *(_QWORD *)(a1 + 576) = off_1003F9A68;
  *(_BYTE *)(a1 + 600) &= 0xFCu;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  v2 = *(_BYTE *)(a1 + 658);
  *(_WORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 658) = v2 & 0xFE;
  *(_QWORD *)(a1 + 664) = off_1003F9778;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_BYTE *)(a1 + 696) &= ~1u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_WORD *)(a1 + 896) &= 0xE000u;
  *(_BYTE *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 992) = off_1003F95F8;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_QWORD *)(a1 + 1000) = a1 + 1008;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_BYTE *)(a1 + 1048) &= 0xFCu;
  *(_QWORD *)(a1 + 1056) = off_1003F9DE8;
  *(_QWORD *)(a1 + 1064) = off_1003F9D88;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1104) &= 0xF8u;
  *(_QWORD *)(a1 + 1112) = off_1003F9AA8;
  *(_QWORD *)(a1 + 1120) = off_1003F9A68;
  *(_BYTE *)(a1 + 1144) &= 0xFCu;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1176) = *(_BYTE *)(a1 + 1176) & 0xF8 | 4;
  *(_QWORD *)(a1 + 1184) = off_1003F9DA8;
  *(_BYTE *)(a1 + 1256) &= 0xC0u;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1296) = off_1003F9A88;
  *(_BYTE *)(a1 + 1320) &= 0xFCu;
  *(_QWORD *)(a1 + 1328) = off_1003F9A88;
  *(_BYTE *)(a1 + 1352) &= 0xFCu;
  *(_QWORD *)(a1 + 1360) = off_1003F9D88;
  *(_BYTE *)(a1 + 1400) &= 0xF8u;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_WORD *)(a1 + 1432) &= 0xF800u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_QWORD *)(a1 + 1440) = off_1003F9E08;
  *(_QWORD *)(a1 + 1448) = off_1003F9D88;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_BYTE *)(a1 + 1488) &= 0xF8u;
  *(_QWORD *)(a1 + 1496) = off_1003F9AA8;
  *(_QWORD *)(a1 + 1504) = off_1003F9A68;
  *(_BYTE *)(a1 + 1528) &= 0xFCu;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_BYTE *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a1 + 1560) & 0xF8 | 4;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_BYTE *)(a1 + 1592) &= 0xF8u;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_QWORD *)(a1 + 1624) = off_1003F9A88;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_BYTE *)(a1 + 1648) &= 0xFCu;
  *(_QWORD *)(a1 + 1656) = off_1003F9638;
  *(_QWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_BYTE *)(a1 + 1720) &= 0x80u;
  *(_QWORD *)(a1 + 1728) = off_1003F9638;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1792) &= 0x80u;
  *(_DWORD *)(a1 + 1912) &= 0xFE000000;
  *(_QWORD *)(a1 + 80) = off_1003F9618;
  *(_QWORD *)(a1 + 160) = off_1003F9CB8;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1845) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  return result;
}

uint64_t sub_100071548(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

void sub_100071550(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;
  __int128 v15;

  v2 = (char *)*a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 72 * a2;
    v6 = (char *)operator new(72 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 72;
      sub_100071A2C(&v8[v7], v7 + v4);
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v15;
    if (v9 != v10)
    {
      v11 = v9 - 72;
      v12 = v9 - 72;
      do
      {
        v13 = *(void (***)(char *))v12;
        v12 -= 72;
        (*v13)(v11);
        v14 = v11 == v10;
        v11 = v12;
      }
      while (!v14);
    }
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1000716A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)a1 = off_1003F9658;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) &= 0xF8u;
  v5 = *(int *)(a2 + 24);
  v6 = 8 * v5;
  if ((_DWORD)v5)
  {
    if ((v5 & 0x80000000) != 0)
      goto LABEL_14;
    v7 = (char *)operator new(8 * v5);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = &v7[8 * v5];
  }
  v8 = *(_DWORD *)(a2 + 48);
  v9 = v8;
  if (!v8)
    goto LABEL_7;
  if (v8 < 0)
LABEL_14:
    sub_1000D02C0();
  v10 = (char *)operator new(8 * v8);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = &v10[8 * v8];
LABEL_7:
  v11 = *(_QWORD **)(a2 + 16);
  v15 = v4;
  if ((_DWORD)v5)
  {
    do
    {
      sub_1002CFF0C(&v15, v11++);
      v6 -= 8;
    }
    while (v6);
    v8 = *(_DWORD *)(a2 + 48);
    v9 = v8;
  }
  v12 = *(_QWORD **)(a2 + 40);
  v15 = a1 + 32;
  if (v8)
  {
    v13 = 8 * v9;
    do
    {
      sub_1002CFF0C(&v15, v12++);
      v13 -= 8;
    }
    while (v13);
  }
  return sub_10007181C(a1, *(double *)(a2 + 64));
}

void sub_1000717E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10007342C(v1);
  _Unwind_Resume(a1);
}

void sub_1000717F4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10007342C(v1);
  _Unwind_Resume(a1);
}

void sub_100071808(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10007342C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007181C(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  return result;
}

void sub_100071824(_QWORD *a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;
  __int128 v15;

  v2 = (char *)*a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      sub_1000D02C0();
    v4 = a1[1];
    v5 = 112 * a2;
    v6 = (char *)operator new(112 * a2);
    v7 = 0;
    v8 = &v6[v4 - (_QWORD)v2];
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = &v6[v5];
    while ((char *)(v4 + v7) != v2)
    {
      v7 -= 112;
      sub_10007300C(&v8[v7], v7 + v4);
    }
    v10 = (char *)*a1;
    v9 = (char *)a1[1];
    *a1 = &v8[v7];
    *(_OWORD *)(a1 + 1) = v15;
    if (v9 != v10)
    {
      v11 = v9 - 112;
      v12 = v9 - 112;
      do
      {
        v13 = *(void (***)(char *))v12;
        v12 -= 112;
        (*v13)(v11);
        v14 = v11 == v10;
        v11 = v12;
      }
      while (!v14);
    }
    if (v10)
      operator delete(v10);
  }
}

std::string *sub_10007197C(uint64_t a1, const std::string *a2)
{
  std::string *result;

  result = std::string::operator=((std::string *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 1912) |= 2u;
  return result;
}

std::string *sub_1000719AC(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

double sub_1000719B4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 1736) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1768) = *(_OWORD *)(a2 + 40);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 1784) = result;
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 64);
  return result;
}

double sub_1000719E4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 40);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 1712) = result;
  *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 64);
  return result;
}

uint64_t sub_100071A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1616) = a2;
  *(_DWORD *)(result + 1912) |= 0x4000u;
  return result;
}

uint64_t sub_100071A24(uint64_t a1, uint64_t a2)
{
  return sub_100077E88(a1 + 80, a2);
}

double sub_100071A30(uint64_t a1, uint64_t a2)
{
  return sub_100077FFC(a1 + 136, a2);
}

double sub_100071A38(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_100078040(a1 + 64, a2).n128_u64[0];
  return result;
}

uint64_t sub_100071A48(uint64_t result, double a2)
{
  *(double *)(result + 40) = a2;
  *(_BYTE *)(result + 56) |= 1u;
  return result;
}

uint64_t sub_100071A5C(uint64_t result, double a2)
{
  *(double *)(result + 48) = a2;
  *(_BYTE *)(result + 56) |= 2u;
  return result;
}

__n128 sub_100071A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_100071A88(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = off_1003FF438;
  v6 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  v7 = a1 + 8;
  *(_QWORD *)(a1 + 16) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v10 = *a5;
  v11 = a5[1];
  *(_QWORD *)(a1 + 48) = *a5;
  *(_QWORD *)(a1 + 56) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v10 = *(_QWORD *)(a1 + 48);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, v7);
  return a1;
}

void sub_100071B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count **v1;
  std::__shared_weak_count *v3;

  v3 = v1[7];
  if (v3)
    sub_1003440F4(v3);
  sub_100344084(v1 + 5, v1 + 2);
  _Unwind_Resume(a1);
}

uint64_t sub_100071B44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100071B54(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v19 = -1;
  v20 = -1;
  sub_100071CC8(a1, &v21, &v20, &v19);
  v7 = v22;
  if (v22)
  {
    v8 = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_100071CB4(a1 + 24, (uint64_t)&v17, NAN, NAN);
  v13 = v18;
  if (!v18)
    return a1;
  v14 = (unint64_t *)&v18->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_100071C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  sub_1000E095C(v2);
  _Unwind_Resume(a1);
}

void sub_100071CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100071CB4(uint64_t result, uint64_t a2, double a3, double a4)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(result + 16) = a3;
  *(double *)(result + 24) = a4;
  return result;
}

uint64_t sub_100071CC8(uint64_t result, _QWORD *a2, _DWORD *a3, int *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;

  v4 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a4;
  *(_DWORD *)(result + 16) = *a3;
  *(_DWORD *)(result + 20) = v7;
  return result;
}

double sub_100071CFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double *v4;
  double *v5;
  uint64_t v6;
  void *v7;
  double v8;
  double *v9;
  std::string::size_type v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  const double *v14;
  uint64_t v15;
  const double *v16;
  const double *v17;
  const double *v18;
  double v19;
  std::string::size_type size;
  std::string::size_type v21;
  double v22;
  double **v23;
  double v24;
  double *v25;
  double *v26;
  unint64_t v27;
  double *v28;
  BOOL v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  const double *v34;
  uint64_t v35;
  const double *v36;
  const double *v37;
  const double *v38;
  double v39;
  void *v40;
  std::string::size_type v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  void *v46[2];
  void *v47[2];
  char v48;
  std::string v49;
  std::string __p;
  std::string v51;
  std::string v52;
  float64x2x2_t v53;
  float64x2x2_t v54;
  float64x2x2_t v55;
  float64x2x2_t v56;
  float64x2x2_t v57;
  float64x2x2_t v58;
  float64x2x2_t v59;
  float64x2x2_t v60;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
  {
LABEL_61:
    sub_1000D5048(v47, "");
    sub_100169760("Polygon bounds must never be zero!", &v49);
    sub_100174738((uint64_t)v47, (uint64_t)&v49, 1);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v48 & 0x80000000) == 0)
        goto LABEL_63;
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
    operator delete(v47[0]);
LABEL_63:
    sub_1000F2AE4((uint64_t)v46);
  }
  v3 = 0.0;
  do
  {
    v4 = *(double **)(v1 + 8);
    v5 = *(double **)(v1 + 16);
    v44 = (uint64_t)(*(_QWORD *)(v1 + 40) - *(_QWORD *)(v1 + 32)) >> 3;
    v45 = v5 - v4;
    if (v45 != v44)
    {
      sub_1000D5048(v47, "");
      sub_100219DCC("PolygonBounds objects must have xs.size() == ys.size()! ", &v49);
      sub_1001E2B30(&v45, &__p);
      sub_10023D198(" ", &v51);
      sub_1001E2B30(&v44, &v52);
      sub_100174738((uint64_t)v47, (uint64_t)&v49, 4);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_46:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_47;
          goto LABEL_57;
        }
      }
      else if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      operator delete(v51.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_47:
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_48;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if ((v48 & 0x80000000) == 0)
          goto LABEL_49;
LABEL_59:
        operator delete(v47[0]);
LABEL_49:
        sub_1000F2AE4((uint64_t)v46);
      }
LABEL_58:
      operator delete(v49.__r_.__value_.__l.__data_);
      if ((v48 & 0x80000000) == 0)
        goto LABEL_49;
      goto LABEL_59;
    }
    if (v5 == v4)
    {
      sub_1000D5048(v47, "");
      sub_100258B30("All PolygonBounds must be non-empty!", &v49);
      sub_100174738((uint64_t)v47, (uint64_t)&v49, 1);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (v48 < 0)
        operator delete(v47[0]);
      sub_1000F2AE4((uint64_t)v46);
    }
    v6 = v5 - v4;
    if (v6 == 2)
    {
      v3 = v3
         + hypot(*v4 - v4[1], **(double **)(v1 + 32) - *(double *)(*(_QWORD *)(v1 + 32) + 8))
         * (*(double *)(v1 + 56) + *(double *)(v1 + 56))
         + *(double *)(v1 + 56) * (*(double *)(v1 + 56) * 3.14159265);
      goto LABEL_4;
    }
    if (v6 == 1)
    {
      v3 = v3 + *(double *)(v1 + 56) * 3.14159265 * *(double *)(v1 + 56);
      goto LABEL_4;
    }
    sub_100072330((_QWORD *)v1, (uint64_t)&v49);
    v7 = (void *)v49.__r_.__value_.__r.__words[0];
    v8 = 0.0;
    if (v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0] < 0x40)
      goto LABEL_19;
    v9 = (double *)(v49.__r_.__value_.__r.__words[0] + 16);
    if (v49.__r_.__value_.__r.__words[0] + 16 == v49.__r_.__value_.__l.__size_)
      goto LABEL_19;
    v10 = v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0] - 32;
    if (v10 >= 0x30)
    {
      v12 = (v10 >> 4) + 1;
      v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFCLL);
      v9 = (double *)((char *)v9 + v13);
      v11 = (double *)(v49.__r_.__value_.__r.__words[0] + v13);
      v14 = (const double *)(v49.__r_.__value_.__r.__words[0] + 32);
      v15 = v12 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v16 = v14 - 4;
        v53 = vld2q_f64(v16);
        v54 = vld2q_f64(v14);
        v17 = v14 - 2;
        v18 = v14 + 2;
        v56 = vld2q_f64(v17);
        v58 = vld2q_f64(v18);
        v53.val[0] = vmulq_f64(vaddq_f64(v53.val[0], v56.val[0]), vsubq_f64(v53.val[1], v56.val[1]));
        v53.val[1] = vmulq_f64(vaddq_f64(v54.val[0], v58.val[0]), vsubq_f64(v54.val[1], v58.val[1]));
        v8 = v8 + v53.val[0].f64[0] + v53.val[0].f64[1] + v53.val[1].f64[0] + v53.val[1].f64[1];
        v14 += 8;
        v15 -= 4;
      }
      while (v15);
      if (v12 == (v12 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    else
    {
      v11 = (double *)v49.__r_.__value_.__r.__words[0];
    }
    do
    {
      v19 = *v9;
      v9 += 2;
      v8 = v8 + (*v11 + v19) * (v11[1] - v11[3]);
      v11 += 2;
    }
    while (v9 != (double *)v49.__r_.__value_.__l.__size_);
LABEL_18:
    v8 = v8 * 0.5;
LABEL_19:
    size = __p.__r_.__value_.__l.__size_;
    v21 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      v3 = v3 + v8 + 0.0;
      v42 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
        goto LABEL_41;
      goto LABEL_42;
    }
    v22 = 0.0;
    v23 = (double **)__p.__r_.__value_.__r.__words[0];
    do
    {
      v26 = *v23;
      v25 = v23[1];
      v27 = (char *)v25 - (char *)*v23;
      v28 = *v23 + 2;
      v29 = v27 < 0x40 || v28 == v25;
      v24 = 0.0;
      if (!v29)
      {
        v30 = v27 - 32;
        if (v30 >= 0x30)
        {
          v32 = (v30 >> 4) + 1;
          v33 = 2 * (v32 & 0x1FFFFFFFFFFFFFFCLL);
          v28 = (double *)((char *)v28 + v33 * 8);
          v31 = &v26[v33];
          v34 = v26 + 4;
          v35 = v32 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = v34 - 4;
            v55 = vld2q_f64(v36);
            v57 = vld2q_f64(v34);
            v37 = v34 - 2;
            v38 = v34 + 2;
            v59 = vld2q_f64(v37);
            v60 = vld2q_f64(v38);
            v55.val[0] = vmulq_f64(vaddq_f64(v55.val[0], v59.val[0]), vsubq_f64(v55.val[1], v59.val[1]));
            v55.val[1] = vmulq_f64(vaddq_f64(v57.val[0], v60.val[0]), vsubq_f64(v57.val[1], v60.val[1]));
            v24 = v24 + v55.val[0].f64[0] + v55.val[0].f64[1] + v55.val[1].f64[0] + v55.val[1].f64[1];
            v34 += 8;
            v35 -= 4;
          }
          while (v35);
          if (v32 == (v32 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_21;
        }
        else
        {
          v31 = *v23;
        }
        do
        {
          v39 = *v28;
          v28 += 2;
          v24 = v24 + (*v31 + v39) * (v31[1] - v31[3]);
          v31 += 2;
        }
        while (v28 != v25);
LABEL_21:
        v24 = v24 * 0.5;
      }
      v22 = v22 + v24;
      v23 += 3;
    }
    while (v23 != (double **)__p.__r_.__value_.__l.__size_);
    v3 = v3 + v8 + v22;
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_42;
    do
    {
      v41 = size - 24;
      v40 = *(void **)(size - 24);
      if (v40)
      {
        *(_QWORD *)(size - 16) = v40;
        operator delete(v40);
      }
      size = v41;
    }
    while (v41 != v21);
    v42 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_41:
    __p.__r_.__value_.__l.__size_ = v21;
    operator delete(v42);
    v7 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_42:
    if (v7)
    {
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
      operator delete(v7);
    }
LABEL_4:
    v1 += 72;
  }
  while (v1 != v2);
  if (v3 <= 0.0)
    goto LABEL_61;
  return v3;
}

void sub_1000722B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100072330(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_1000723A0((uint64_t *)a2, a1);
  sub_10009C2FC((double **)a2);
}

void sub_100072378(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v3;

  v3 = *(char **)(v1 + 24);
  if (v3)
    sub_100344DD8(v1, v3, (void **)(v1 + 24));
  sub_100344DB4(v1);
  _Unwind_Resume(a1);
}

void sub_1000723A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = a2[1];
  if (a2[2] != v2)
  {
    v5 = 0;
    v6 = (_QWORD *)a1[1];
    while (1)
    {
      v8 = *(_QWORD *)(v2 + 8 * v5);
      v9 = *(_QWORD *)(a2[4] + 8 * v5);
      v10 = a1[2];
      if ((unint64_t)v6 >= v10)
        break;
      *v6 = v8;
      v6[1] = v9;
      v7 = v6 + 2;
LABEL_4:
      a1[1] = (uint64_t)v7;
      ++v5;
      v2 = a2[1];
      v6 = v7;
      if (v5 >= (a2[2] - v2) >> 3)
        return;
    }
    v11 = (_QWORD *)*a1;
    v12 = ((uint64_t)v6 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_1000D02C0();
    v14 = v10 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_1000CDEB8();
      v16 = (char *)operator new(16 * v15);
      v17 = &v16[16 * v12];
      *(_QWORD *)v17 = v8;
      *((_QWORD *)v17 + 1) = v9;
      v18 = (uint64_t)v17;
      if (v6 == v11)
        goto LABEL_19;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(16 * v12);
      *(_QWORD *)v17 = v8;
      *((_QWORD *)v17 + 1) = v9;
      v18 = 16 * v12;
      if (v6 == v11)
      {
LABEL_19:
        v7 = v17 + 16;
        *a1 = v18;
        a1[1] = (uint64_t)(v17 + 16);
        a1[2] = (uint64_t)&v16[16 * v15];
        if (v6)
          operator delete(v6);
        goto LABEL_4;
      }
    }
    do
    {
      *(_OWORD *)(v18 - 16) = *((_OWORD *)v6 - 1);
      v18 -= 16;
      v6 -= 2;
    }
    while (v6 != v11);
    v6 = (_QWORD *)*a1;
    goto LABEL_19;
  }
}

_QWORD *sub_100072508(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;

  v4[0] = off_100400A58;
  v4[1] = a1;
  v4[2] = a2;
  v5 = v4;
  sub_1000725D8(a1, a2, (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_10007259C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000725D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 + 24);
  if (!v3)
    sub_10016CA74();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
}

void sub_100072650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  char **v9;
  uint64_t *v10;
  const std::runtime_error *v11;
  NSObject *v12;
  char *v13;
  std::runtime_error *exception;
  std::runtime_error *v15;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v11 = (const std::runtime_error *)__cxa_begin_catch(exception_object);
  if (qword_100417F08 == -1)
  {
    v12 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_100400970);
    v12 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      sub_10027A1C4(v10, (uint64_t)v9);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v15 = std::runtime_error::runtime_error(exception, v11);
      v15->__vftable = (std::runtime_error_vtbl *)&off_1004009A0;
    }
  }
  v13 = sub_10004BE10(v9);
  LODWORD(a9) = 136380675;
  *(_QWORD *)((char *)&a9 + 4) = v13;
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Protobuf parsing error encountered, deleting tile, %{private}s", (uint8_t *)&a9, 0xCu);
  goto LABEL_5;
}

void sub_100072740(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100072750(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x100072758);
  sub_1000CDD68(a1);
}

void sub_100072768(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  std::promise<void> *v3;
  _QWORD v4[2];
  _QWORD block[6];
  std::future<void> v6;
  std::promise<void> v7;

  v4[0] = a1;
  v4[1] = a2;
  v2 = *(id *)(a1 + 32);
  v3 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002034A0;
  block[3] = &unk_1003FC648;
  block[4] = v4;
  block[5] = &v7;
  dispatch_sync(v2, block);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);

}

void sub_100072810(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::future<void>::~future((std::future<void> *)(v2 - 32));
  std::promise<void>::~promise((std::promise<void> *)(v2 - 24));

  _Unwind_Resume(a1);
}

void sub_10007283C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100072850(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  _BYTE v11[96];

  *(_QWORD *)a1 = off_100402E38;
  v4 = (_QWORD *)(a1 + 56);
  sub_100072960(a1 + 8, a2);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    v5 = *(_QWORD *)(qword_10042EA58 + 16);
  sub_10006FE14(v5, (uint64_t)v11);
  sub_1000700CC((uint64_t)v11, v4);
  nullsub_25(v11);
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    v6 = *(_QWORD *)(qword_10042EA58 + 16);
  v7 = *(_DWORD *)(v6 + 16);
  v9 = *(_DWORD *)(v6 + 20);
  v10 = v7;
  sub_100072950((_DWORD *)(a1 + 72), &v10, &v9);
  return a1;
}

void sub_100072904(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1000E095C(v2);
  sub_10004ABA0(v1);
  _Unwind_Resume(a1);
}

void sub_100072920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  va_list va;

  va_start(va, a3);
  nullsub_25(va);
  sub_10004ABA0(v3);
  _Unwind_Resume(a1);
}

void sub_10007293C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10004ABA0(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100072950(_DWORD *result, _DWORD *a2, int *a3)
{
  int v3;

  v3 = *a3;
  *result = *a2;
  result[1] = v3;
  return result;
}

uint64_t sub_100072960(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100403B98;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  sub_1000729FC(a1, a2);
  return a1;
}

void sub_1000729CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1000729E8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000729FC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  int v10;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/venue.pb.cc", 2557);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
    LOBYTE(v4) = *(_BYTE *)(a2 + 40);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 40);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 40) |= 1u;
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      v7 = *(_QWORD *)(qword_10042EA58 + 16);
    sub_100072BB4(v6, v7);
    v4 = *(_DWORD *)(a2 + 40);
  }
  if ((v4 & 2) != 0)
  {
    v8 = *(const std::string **)(a2 + 24);
    *(_DWORD *)(a1 + 40) |= 2u;
    v9 = *(std::string **)(a1 + 24);
    if (v9 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v9, v8);
    v4 = *(_DWORD *)(a2 + 40);
  }
  if ((v4 & 4) != 0)
  {
    v10 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 40) |= 4u;
    *(_DWORD *)(a1 + 32) = v10;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100072B68()
{
  operator delete();
}

void sub_100072B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100072BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072BB4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  _BYTE v12[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/coordinates.pb.cc", 1251);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
    LOBYTE(v4) = *(_BYTE *)(a2 + 36);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 36);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_7;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(_DWORD *)(a1 + 20) = v7;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) |= 1u;
  *(_DWORD *)(a1 + 16) = v6;
  v4 = *(_DWORD *)(a2 + 36);
  if ((v4 & 2) != 0)
    goto LABEL_10;
LABEL_7:
  if ((v4 & 4) == 0)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
LABEL_11:
  *(_DWORD *)(a1 + 36) |= 4u;
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    operator new();
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    v9 = *(_QWORD *)(qword_10042EA78 + 24);
  sub_100072D5C(v8, v9);
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100072D0C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100072D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100072D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072D5C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v13[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v13, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/coordinates.pb.cc", 950);
    v5 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v12, v5);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
    LOBYTE(v4) = *(_BYTE *)(a2 + 48);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  else
  {
    LOBYTE(v4) = *(_BYTE *)(a2 + 48);
    if (!(_BYTE)v4)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 48) |= 1u;
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      operator new();
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      v7 = *(_QWORD *)(qword_10042EA70 + 16);
    sub_100072F18(v6, v7);
    v4 = *(_DWORD *)(a2 + 48);
  }
  if ((v4 & 2) == 0)
  {
    if ((v4 & 4) == 0)
      goto LABEL_12;
LABEL_16:
    v11 = *(_BYTE *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(_BYTE *)(a1 + 40) = v11;
    if ((*(_DWORD *)(a2 + 48) & 8) == 0)
      return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 2u;
  *(_QWORD *)(a1 + 24) = v10;
  v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) != 0)
    goto LABEL_16;
LABEL_12:
  if ((v4 & 8) != 0)
  {
LABEL_13:
    v8 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_QWORD *)(a1 + 32) = v8;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100072EC8()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100072EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100072F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _BYTE v10[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v10, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/coordinates.pb.cc", 630);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v9, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) != 0)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(_QWORD *)(a1 + 16) = v6;
      v5 = *(_DWORD *)(a2 + 36);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 36) |= 2u;
      *(_QWORD *)(a1 + 24) = v7;
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100072FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100072FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100072FF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1856) = a2;
  *(_DWORD *)(result + 1912) |= 0x200000u;
  return result;
}

double sub_100073010(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 + 8 != a2)
  {
    sub_100199588((_QWORD *)(a1 + 16), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_100199588((_QWORD *)(a1 + 40), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 64);
  return result;
}

_QWORD *sub_100073074(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v11 = v5;
    v5 = (_QWORD *)*v5;
    sub_100073738(v11 + 4);
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  while (v5);
LABEL_8:
  v6 = (void *)a1[2];
  a1[2] = 0;
  if (v6)
    operator delete(v6);
  v7 = (std::__shared_weak_count *)a1[1];
  if (!v7)
    return a1;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_10007319C(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  BOOL v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void (**v18)(char *);

  *(_QWORD *)a1 = off_1003F9698;
  v2 = *(void (****)(_QWORD))(a1 + 1888);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 1896);
    v4 = *(void **)(a1 + 1888);
    if (v3 != v2)
    {
      v5 = v3 - 103;
      do
      {
        (**v5)(v5);
        v6 = v5 == v2;
        v5 -= 103;
      }
      while (!v6);
      v4 = *(void **)(a1 + 1888);
    }
    *(_QWORD *)(a1 + 1896) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 1887) < 0)
  {
    operator delete(*(void **)(a1 + 1864));
    v7 = *(char **)(a1 + 1832);
    if (!v7)
    {
LABEL_10:
      v8 = *(char **)(a1 + 1800);
      if (!v8)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = *(char **)(a1 + 1832);
    if (!v7)
      goto LABEL_10;
  }
  v9 = *(char **)(a1 + 1840);
  v10 = v7;
  if (v9 != v7)
  {
    v11 = v9 - 112;
    v12 = v9 - 112;
    do
    {
      v13 = *(void (***)(char *))v12;
      v12 -= 112;
      (*v13)(v11);
      v6 = v11 == v7;
      v11 = v12;
    }
    while (!v6);
    v10 = *(char **)(a1 + 1832);
  }
  *(_QWORD *)(a1 + 1840) = v7;
  operator delete(v10);
  v8 = *(char **)(a1 + 1800);
  if (v8)
  {
LABEL_19:
    v14 = *(char **)(a1 + 1808);
    v15 = v8;
    if (v14 != v8)
    {
      v16 = v14 - 72;
      v17 = v14 - 72;
      do
      {
        v18 = *(void (***)(char *))v17;
        v17 -= 72;
        (*v18)(v16);
        v6 = v16 == v8;
        v16 = v17;
      }
      while (!v6);
      v15 = *(char **)(a1 + 1800);
    }
    *(_QWORD *)(a1 + 1808) = v8;
    operator delete(v15);
  }
LABEL_25:
  nullsub_22(a1 + 1624);
  sub_100073690(a1 + 1440);
  sub_100073478(a1 + 1056);
  *(_QWORD *)(a1 + 992) = off_1003F95F8;
  sub_1000733B4(a1 + 1024, *(_QWORD *)(a1 + 1032));
  sub_1000733B4(a1 + 1000, *(_QWORD *)(a1 + 1008));
  if (*(char *)(a1 + 983) < 0)
  {
    operator delete(*(void **)(a1 + 960));
    if ((*(char *)(a1 + 959) & 0x80000000) == 0)
    {
LABEL_27:
      if ((*(char *)(a1 + 927) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_34;
    }
  }
  else if ((*(char *)(a1 + 959) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(*(void **)(a1 + 936));
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
LABEL_28:
    sub_100073530(a1 + 80);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)(a1 + 904));
  sub_100073530(a1 + 80);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_36:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_37;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_36;
LABEL_30:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_37:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1000733B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000733B4(a1, *(_QWORD *)a2);
    sub_1000733B4(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

_QWORD *sub_10007342C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1003F9658;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100073478(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9DE8;
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  sub_1000734E4(a1 + 304);
  nullsub_22(a1 + 272);
  nullsub_22(a1 + 240);
  sub_1000736E0(a1 + 128);
  nullsub_21(a1 + 56);
  sub_1000734E4(a1 + 8);
  return a1;
}

uint64_t sub_1000734E4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = off_1003F9D88;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

uint64_t sub_100073530(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9618;
  if (*(char *)(a1 + 815) < 0)
  {
    operator delete(*(void **)(a1 + 792));
    if ((*(char *)(a1 + 791) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 767) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(char *)(a1 + 791) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 768));
  if ((*(char *)(a1 + 767) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 743) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*(void **)(a1 + 744));
  if ((*(char *)(a1 + 743) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 719) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(a1 + 720));
  if ((*(char *)(a1 + 719) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 695) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(a1 + 696));
  if ((*(char *)(a1 + 695) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 671) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(a1 + 672));
  if ((*(char *)(a1 + 671) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 647) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(*(void **)(a1 + 648));
  if ((*(char *)(a1 + 647) & 0x80000000) == 0)
  {
LABEL_9:
    sub_10007373C((_QWORD *)(a1 + 584));
    sub_10007368C(a1 + 80);
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 624));
  sub_10007373C((_QWORD *)(a1 + 584));
  sub_10007368C(a1 + 80);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_22:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_23;
  }
LABEL_21:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_22;
LABEL_11:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_23:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100073690(uint64_t a1)
{
  *(_QWORD *)a1 = off_1003F9E08;
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  nullsub_21(a1 + 56);
  sub_1000734E4(a1 + 8);
  return a1;
}

uint64_t sub_1000736E0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1003F9DA8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_10007373C(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  *a1 = off_1003F9778;
  v2 = (void (***)(_QWORD))a1[1];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      v5 = v3 - 7;
      v6 = v3 - 7;
      do
      {
        v7 = *v6;
        v6 -= 7;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_1000737B8(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;
  void *v10;

  *a1 = off_1003F9678;
  v2 = (void (***)(_QWORD))a1[10];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = v3 - 9;
      v6 = v3 - 9;
      do
      {
        v7 = *v6;
        v6 -= 9;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  a1[1] = off_1003F9658;
  v9 = (void *)a1[5];
  if (v9)
  {
    a1[6] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[2];
  if (v10)
  {
    a1[3] = v10;
    operator delete(v10);
  }
  return a1;
}

_QWORD *sub_100073860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 ***v18;
  NSObject *v19;
  char **v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  const std::string *v33;
  double v34;
  double Current;
  double v36;
  uint64_t v37;
  NSObject *v38;
  double v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  double v49;
  NSObject *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  double v54;
  float v55;
  char *v56;
  void *v57;
  char *v58;
  BOOL v59;
  uint64_t v60;
  const char *v61;
  NSObject *v62;
  os_log_type_t v63;
  double v64;
  NSObject *v65;
  std::__shared_weak_count *v66;
  char v67;
  _QWORD *v68;
  NSObject *v69;
  _BOOL4 v70;
  _BOOL4 v71;
  NSObject *v72;
  uint64_t v73;
  __n128 v74;
  double v75;
  double v76;
  _BOOL4 v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  int v82;
  NSObject *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  int v93;
  double v94;
  uint64_t *v95;
  uint64_t *v96;
  unsigned __int8 v97;
  int v98;
  uint64_t *v99;
  uint64_t *v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unsigned __int8 v105;
  NSObject *v106;
  uint64_t v107;
  int v108;
  const char *v109;
  size_t v110;
  size_t v111;
  __int128 *p_dst;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  int v120;
  const char *v121;
  size_t v122;
  const char *v123;
  std::runtime_error_vtbl *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  int v130;
  const char *v131;
  size_t v132;
  const char *v133;
  std::runtime_error_vtbl *v134;
  _BYTE *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  NSObject *v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  unint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  NSObject *v158;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  __int128 v181;
  double v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  double v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  double v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  double v204;
  uint64_t v205;
  __int128 *v206;
  uint64_t v207;
  uint64_t v208;
  _BYTE *v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *i;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  void *v221;
  _QWORD *v222;
  _QWORD *v223;
  void *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t *j;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t *v239;
  uint64_t *k;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::runtime_error_vtbl *v245;
  const char *imp;
  std::runtime_error_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  _QWORD *result;
  __int128 *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  std::mutex *v262;
  std::mutex *v263;
  uint64_t *v264;
  _QWORD *v265;
  _QWORD *v266;
  void *v267;
  char *v268;
  double v269;
  std::runtime_error v270;
  uint64_t v271;
  uint64_t v272;
  double v273;
  char v274;
  double v275;
  char v276;
  std::runtime_error v277;
  int64_t v278;
  std::runtime_error v279;
  int64_t v280;
  double v281[2];
  void *v282[5];
  void *__p;
  char *v284;
  uint64_t v285;
  int v286;
  std::string v287;
  _QWORD v288[3];
  char v289;
  void *v290;
  uint64_t v291[2];
  uint64_t (**v292)();
  uint64_t (**v293)();
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t (**v297)();
  uint64_t v298;
  uint64_t v299;
  char v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  __int128 v304;
  __int128 v305;
  int v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  uint64_t (**v318)();
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  unsigned int v326;
  double v327;
  double v328;
  double v329;
  char v330;
  __int16 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t (**v336)();
  uint64_t v337;
  uint64_t v338;
  char v339;
  double v340;
  uint64_t (**v341)();
  uint64_t v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  int v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  int v350;
  __int128 v351;
  _BYTE v352[64];
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  std::__shared_weak_count *v357;
  _QWORD v358[37];
  uint64_t v359;
  __int128 __dst;
  int64_t v361;
  _OWORD v362[2];
  _BYTE buf[32];
  __int16 v364;
  uint64_t v365;
  __int16 v366;
  uint64_t v367;
  __int16 v368;
  uint64_t v369;
  __int16 v370;
  int v371;
  __int16 v372;
  void *v373;
  __int16 v374;
  void *v375;
  _BYTE v376[10];
  __int16 v377;
  uint64_t v378;
  __int16 v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  int v383;
  unint64_t v384;

  v359 = a2;
  sub_1000AD878(a1);
  v7 = sub_100078270();
  v8 = v7;
  v9 = atomic_load((unsigned __int8 *)v7 + 20);
  v264 = (uint64_t *)a1;
  if ((v9 & 1) == 0 && !*((_BYTE *)v7 + 16))
  {
    *((_BYTE *)v7 + 17) = sub_1000AC110((uint64_t)v7, (_BYTE *)v7 + 9);
    *((_BYTE *)v8 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v8 + 20);
  }
  v10 = *((unsigned __int8 *)v8 + 17);
  v11 = (uint64_t *)(a1 + 1544);
  sub_1000784D8(*(uint64_t **)(a1 + 176), (uint64_t *)(a1 + 1544), (uint64_t)v358);
  v12 = sub_100078144((uint64_t)v358);
  v13 = *(std::__shared_weak_count **)(v12 + 8);
  v356 = *(char **)v12;
  v357 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = sub_100078144((uint64_t)v358);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(&v354, v16, v17);
  v18 = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 64))(v354);
  if (sub_1000781C4((const void ***)&v356, v18))
  {
    if (qword_100417ED8 == -1)
    {
      v19 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
      goto LABEL_10;
    }
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v19 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
    {
LABEL_10:
      v20 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 64))(v354);
      v21 = sub_10004BE10(v20);
      v22 = sub_10004BE10(&v356);
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Mismatch between floor keys: (%{private}s vs %{private}s)", buf, 0x16u);
    }
  }
LABEL_11:
  v292 = off_1003F97F8;
  v293 = off_1003F9A68;
  v295 = 0;
  v294 = 0;
  v296 &= 0xFCu;
  v299 = 0;
  v297 = off_1003F9A88;
  v298 = 0;
  v300 &= 0xFCu;
  v302 = 0;
  v301 = 0;
  v304 = 0u;
  v305 = 0u;
  v303 = 0;
  v306 = 0;
  v315 = 0u;
  v316 = 0u;
  v307 = 0u;
  v308 = 0u;
  v309 = 0u;
  v310 = 0u;
  v311 = 0u;
  v312 = 0u;
  v313 = 0u;
  v314 = 0u;
  v318 = off_1003F97B8;
  v319 = 0u;
  v320 = 0u;
  v321 = 0u;
  v322 = 0u;
  v323 = 0u;
  v324 = 0u;
  v325 = 0u;
  v326 = 0;
  v329 = 0.0;
  v327 = 0.0;
  v328 = 0.0;
  v330 &= 0xC0u;
  v331 = 0;
  v332 = 0u;
  v333 = 0u;
  v334 = 0u;
  v335 = 0;
  v336 = off_1003F9A88;
  v338 = 0;
  v337 = 0;
  v339 &= 0xFCu;
  v340 = 0.0;
  v341 = off_1003F97D8;
  v343 = 0;
  v342 = 0;
  v344 &= 0xF8u;
  v345 = 0;
  v346 = 0;
  v347 = 0u;
  v348 = 0u;
  v349 = 0u;
  v350 = 0;
  v351 = 0u;
  memset(v352, 0, 28);
  memset(&v352[32], 0, 32);
  v353 = v353 & 0xF000000000000000 | 0x10000000;
  v317 = 4;
  v23 = 0;
  switch(sub_100078154((uint64_t)v358))
  {
    case 0u:
      v24 = (std::__shared_weak_count *)v355;
      v291[0] = v354;
      v291[1] = v355;
      if (v355)
      {
        v25 = (unint64_t *)(v355 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      sub_10021B964(a1, v291, v359, (uint64_t)v358, (uint64_t)buf);
      sub_100077824((uint64_t)&v292, (uint64_t)buf);
      sub_100076820((uint64_t)buf);
      if (v24)
      {
        v27 = (unint64_t *)&v24->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v23 = *(_QWORD *)(sub_10007814C((uint64_t)v358) + 8);
      break;
    case 1u:
      sub_10021B898((uint64_t)buf, (uint64_t)&v356, v354);
      sub_100077824((uint64_t)&v292, (uint64_t)buf);
      sub_100076820((uint64_t)buf);
      *((_QWORD *)&v309 + 1) = *(_QWORD *)(sub_10007814C((uint64_t)v358) + 24);
      sub_10019D8D8((uint64_t)&v292, 1.0);
      *(_QWORD *)&v309 = *(_QWORD *)(sub_10007814C((uint64_t)v358) + 16);
      v30 = sub_10007814C((uint64_t)v358);
      *((_QWORD *)&v308 + 1) = sub_1000C23A4(v30);
      v23 = *(_QWORD *)(sub_10007814C((uint64_t)v358) + 8);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 72))(v354) != 0;
      sub_10019D978((uint64_t)&v292, 4 * v31);
      v32 = sub_10022BC24((uint64_t)v358);
      sub_10019DA0C((uint64_t)&v292, v32);
      v33 = (const std::string *)sub_100050DB0((uint64_t)&v356);
      sub_10019D8B4((uint64_t)&v292, v33);
      v29 = 1;
      goto LABEL_24;
    case 2u:
      sub_10007A94C((uint64_t)buf);
      sub_100077824((uint64_t)&v292, (uint64_t)buf);
      sub_100076820((uint64_t)buf);
      v29 = 2;
      goto LABEL_24;
    case 3u:
      sub_10021B898((uint64_t)buf, (uint64_t)&v356, v354);
      sub_100077824((uint64_t)&v292, (uint64_t)buf);
      sub_100076820((uint64_t)buf);
      *((_QWORD *)&v308 + 1) = 0;
      v29 = 3;
LABEL_24:
      LODWORD(v317) = v29;
      break;
    case 4u:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(buf, "getBestLocalizerState() always sets a valid YieldStatus. How did we get YIELD_DATA_MISSING?");
      std::runtime_error::runtime_error(&v270, (const std::string *)buf);
      v270.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)&v290);
      sub_1000F2F7C(&v270, (uint64_t)"boost::optional<PoseEstimate> LocalizerIoWrapper::forceNotifyObserver(nanoseconds, BOOL)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_io_wrapper.cpp", 1223, (uint64_t)&v290);
    default:
      break;
  }
  sub_10007AB88((uint64_t)&v292, v359);
  sub_1000782FC((uint64_t)v288);
  if (v289)
  {
    sub_10007AB74((uint64_t)&v292, *(double *)&v288[2]);
    sub_10007AB58((uint64_t)&v292, *(double *)&v288[1]);
    v34 = *(double *)v288;
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_10007AB74((uint64_t)&v292, Current);
    v36 = sub_10001BAC8();
    sub_10007AB58((uint64_t)&v292, v36);
    v34 = sub_10001BA08();
  }
  sub_10007AB44((uint64_t)&v292, v34);
  if (!(_DWORD)v317)
  {
    if ((v353 & 0x20000000000) != 0)
    {
      v43 = v340;
      if (v43 < sub_10026AAAC(*(_QWORD *)(a1 + 248)))
      {
        v44 = *(_QWORD *)(a1 + 248);
        if (v346 == 1)
          v45 = sub_10026AB48(v44);
        else
          v45 = sub_10026AB1C(v44);
        sub_10007A938(v45, (int64x2_t *)buf);
        v287 = *(std::string *)buf;
        if (qword_100417ED8 == -1)
        {
          v50 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          {
LABEL_49:
            v49 = sub_10026AAB8(*(_QWORD *)(a1 + 248));
LABEL_50:
            v39 = v49;
            v40 = *(_QWORD *)(a1 + 200);
            if (v40 < *(_QWORD *)(a1 + 208))
              goto LABEL_33;
            goto LABEL_51;
          }
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
          v50 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
            goto LABEL_49;
        }
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "YIELD_DEEP_INDOOR", buf, 2u);
        goto LABEL_49;
      }
    }
    v46 = *(_QWORD *)(a1 + 248);
    if (v346 == 1)
      v47 = sub_10026ABA0(v46);
    else
      v47 = sub_10026AB74(v46);
    sub_10007A938(v47, (int64x2_t *)buf);
    v287 = *(std::string *)buf;
    if (qword_100417ED8 == -1)
    {
      v48 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_44:
        v49 = sub_10026AAC8(*(_QWORD *)(a1 + 248));
        goto LABEL_50;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v48 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_44;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "YIELD_OK_NEAR_EDGE", buf, 2u);
    goto LABEL_44;
  }
  v37 = sub_100078190(*(_QWORD *)(a1 + 248));
  sub_10007A938(v37, (int64x2_t *)buf);
  v287 = *(std::string *)buf;
  if (qword_100417ED8 == -1)
  {
    v38 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    goto LABEL_31;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
  v38 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_31:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "NO_YIELD", buf, 2u);
  }
LABEL_32:
  v39 = NAN;
  v40 = *(_QWORD *)(a1 + 200);
  if (v40 < *(_QWORD *)(a1 + 208))
  {
LABEL_33:
    sub_1000768A0(v40, &v292);
    v41 = (char *)(v40 + 760);
    v42 = a1;
    *(_QWORD *)(a1 + 200) = v41;
    goto LABEL_52;
  }
LABEL_51:
  v41 = sub_10021EDA0((_QWORD *)(a1 + 192), (uint64_t)&v292);
  v42 = a1;
LABEL_52:
  *(_QWORD *)(v42 + 200) = v41;
  sub_10007ABA4((uint64_t *)(v42 + 184), 0x4E25B9EFD4E25B9FLL * ((uint64_t)&v41[-*(_QWORD *)(v42 + 192)] >> 3) - 1);
  v51 = *(_QWORD *)(v42 + 192);
  v282[4] = *(void **)(v42 + 184);
  __p = 0;
  v284 = 0;
  v285 = 0;
  sub_10021D9C8(&__p, v51, *(_QWORD *)(v42 + 200), 0x4E25B9EFD4E25B9FLL * ((*(_QWORD *)(v42 + 200) - v51) >> 3));
  v286 = *(_DWORD *)(v42 + 216);
  v53 = (char *)__p;
  v52 = v284;
  v54 = 0.0;
  if (__p != v284)
  {
    do
    {
      sub_1000768A0(buf, v53);
      if (((v384 >> 44) & (v383 == 0) & (v54 < v382)) != 0)
        v54 = v382;
      sub_100076820((uint64_t)buf);
      v53 += 760;
    }
    while (v53 != v52);
  }
  v55 = sub_100078164(*(_QWORD *)(v42 + 248));
  v56 = (char *)__p;
  if (__p)
  {
    v57 = __p;
    if (v284 != __p)
    {
      v58 = v284 - 760;
      do
      {
        (**(void (***)(char *))v58)(v58);
        v59 = v58 == v56;
        v58 -= 760;
      }
      while (!v59);
      v57 = __p;
    }
    v284 = v56;
    operator delete(v57);
  }
  if ((v353 & 0x100000000000) == 0 || (v346 == 2 ? (v59 = (_DWORD)v317 == 0) : (v59 = 1), v59))
  {
    if ((v353 & 0x8000000000) != 0 && HIDWORD(v335) == 2)
    {
      sub_10022C4B0(*(_QWORD *)(v42 + 176));
      if (qword_100417ED8 == -1)
      {
        v60 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_78;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v60 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_78;
      }
      *(_WORD *)buf = 0;
      v61 = "Reset DR because we are fusing with GPS";
      goto LABEL_76;
    }
    if ((v353 & 0x100000000000) != 0 && v346 != 2 && v54 < v55)
    {
      sub_10022C4B0(*(_QWORD *)(v42 + 176));
      if (qword_100417ED8 == -1)
      {
        v73 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_78;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v73 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_78;
      }
      *(_WORD *)buf = 0;
      v61 = "Reset DR because we have a non-DR pose and the compound confidence has not been high enough";
      v62 = v73;
      v63 = OS_LOG_TYPE_DEBUG;
      goto LABEL_77;
    }
  }
  else
  {
    sub_10022C4B0(*(_QWORD *)(v42 + 176));
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v60 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_78;
      goto LABEL_70;
    }
    v60 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
    {
LABEL_70:
      *(_WORD *)buf = 0;
      v61 = "Reset DR because DR is yield low";
LABEL_76:
      v62 = v60;
      v63 = OS_LOG_TYPE_INFO;
LABEL_77:
      _os_log_impl((void *)&_mh_execute_header, v62, v63, v61, buf, 2u);
    }
  }
LABEL_78:
  if ((v353 & 0x8000000000) != 0 && !HIDWORD(v335) && (v353 & 0x100000000000) != 0 && !v346 && !(_DWORD)v317)
  {
    v64 = *((double *)&v308 + 1);
    if (v64 >= sub_100078164(*(_QWORD *)(v42 + 248)))
    {
      sub_10022C360(*(uint64_t **)(v42 + 176));
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v65 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_87;
        goto LABEL_86;
      }
      v65 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_86:
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Seed DR because we are yielding the primary filter and the compound confidence is high enough", buf, 2u);
      }
    }
  }
LABEL_87:
  if ((v353 & 0x100000000000) != 0 && v346 == 1)
    v39 = sub_10026AAD8(*(_QWORD *)(v42 + 248));
  if (!a3 || !(_DWORD)v317)
  {
    *(std::string *)&buf[8] = v287;
    buf[0] = 1;
    v67 = sub_1000C2F24((uint64_t)buf);
    sub_1000CB818((uint64_t)&v292, v67);
    sub_1000CB850((uint64_t)&v292, v39);
    v68 = *(_QWORD **)(v42 + 2144);
    if (v68)
      sub_1000CB7F0((uint64_t)&v292, (v68[1] - *v68) >> 4);
    if (sub_1000C2C90((uint64_t *)(v42 + 680), v359, (uint64_t *)&v287))
    {
      if (qword_100417ED8 == -1)
      {
        v69 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_100;
        goto LABEL_99;
      }
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v69 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_99:
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = HIBYTE(v331);
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "we've reset the StrobeGps counters and are using new settings %d", buf, 8u);
      }
    }
LABEL_100:
    v70 = sub_1000BF954((uint64_t *)(v42 + 680), v359, *(_QWORD *)(v42 + 16) + v359);
    if (v10)
    {
      v71 = v70;
      if (qword_100417ED8 == -1)
      {
        v72 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_111;
        goto LABEL_103;
      }
      dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
      v72 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_103:
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v71;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = *((_QWORD *)&v313 + 1);
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "GPS assistance request = %d @ t=%lld", buf, 0x12u);
      }
    }
    else
    {
      LOBYTE(v71) = 0;
    }
LABEL_111:
    sub_1000CB834((uint64_t)&v292, v71);
    *(_BYTE *)(v42 + 2178) = v331;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t (***)()))(*(_QWORD *)v354 + 80))(v282, v354, &v293);
    v74.n128_f64[0] = sub_10019D8AC((uint64_t)&v292, (uint64_t)v282);
    v353 |= 2uLL;
    if ((*(unsigned __int8 (**)(uint64_t, __n128))(*(_QWORD *)v354 + 88))(v354, v74))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v354 + 88))(v354);
      sub_10019DA48((uint64_t)&v292, v75);
    }
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v354 + 96))(v354))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v354 + 96))(v354);
      sub_10019D928((uint64_t)&v292, v76);
    }
    v281[0] = 1.0 - *(double *)sub_10007814C((uint64_t)v358);
    v281[1] = *(double *)sub_10007814C((uint64_t)v358);
    v77 = sub_1000C869C((uint64_t)v281);
    v78 = v317;
    if (!(_DWORD)v317 || v77)
    {
LABEL_122:
      if (v78
        && *(_BYTE *)(v42 + 1968)
        && *(_QWORD *)(v42 + 1976) < v359
        && ((v353 & 0x20000000) == 0 || HIDWORD(v317)))
      {
        sub_1000CB820((uint64_t)&v292, 0);
        if (qword_100417ED8 == -1)
        {
          v84 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_130;
          goto LABEL_129;
        }
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v84 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
        {
LABEL_129:
          v85 = *(_QWORD *)(v42 + 1976);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = v359;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v85;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Too long since last YIELD_OK, force a YIELD_FAILURE_GIVE_UP at t=%{public}lld (> %{public}lld)", buf, 0x16u);
        }
      }
LABEL_130:
      v87 = *(_QWORD *)(v42 + 264);
      v86 = *(_QWORD *)(v42 + 272);
      if (v86 == v87)
      {
        v353 = v353 & 0xFFF7FFFFFFBFFFEFLL | (unint64_t)&_mh_execute_header;
        if (*(_BYTE *)(v42 + 2000))
          goto LABEL_159;
        goto LABEL_139;
      }
      v88 = *(_QWORD *)(v42 + 264);
      do
      {
        if (*(_DWORD *)(v88 + 4) == 1)
        {
          v89 = 1;
          goto LABEL_142;
        }
        v88 += 88;
      }
      while (v88 != v86);
      do
      {
        if (*(_DWORD *)(v87 + 4) != 2)
        {
          v89 = 3;
          goto LABEL_142;
        }
        v87 += 88;
      }
      while (v87 != v86);
      v89 = 2;
LABEL_142:
      sub_1000CB858((uint64_t)&v292, v89);
      v90 = *(_DWORD **)(v42 + 264);
      v91 = *(_DWORD **)(v42 + 272);
      if (v90 == v91)
      {
LABEL_150:
        v93 = 3;
      }
      else
      {
        v92 = *(_DWORD **)(v42 + 264);
        do
        {
          if (*v92 == 1)
          {
            v93 = 2;
            goto LABEL_152;
          }
          v92 += 22;
        }
        while (v92 != v91);
        while (*v90)
        {
          v90 += 22;
          if (v90 == v91)
            goto LABEL_150;
        }
        v93 = 1;
      }
LABEL_152:
      sub_1000CB83C((uint64_t)&v292, v93);
      if (v93 == 1)
      {
        v94 = 0.0;
      }
      else
      {
        if (v93 != 2)
        {
          sub_1000CB804((uint64_t)&v292, NAN);
          v353 &= ~0x400000uLL;
          goto LABEL_158;
        }
        v94 = 6.28318531;
      }
      sub_1000CB804((uint64_t)&v292, v94);
LABEL_158:
      sub_1000C9670((uint64_t)&v318, *(unsigned __int8 *)(*(_QWORD *)(v42 + 272) - 64));
      v353 |= (unint64_t)&_mh_execute_header;
      if (*(_BYTE *)(v42 + 2000))
      {
LABEL_159:
        v95 = sub_10007B778();
        v96 = v95;
        v97 = atomic_load((unsigned __int8 *)v95 + 26);
        if ((v97 & 1) == 0 && !*((_BYTE *)v95 + 16))
        {
          *((_DWORD *)v95 + 5) = sub_1000AAF28((uint64_t)v95, (unsigned int *)v95 + 3);
          *((_BYTE *)v96 + 16) = 1;
          atomic_store(1u, (unsigned __int8 *)v96 + 26);
          v42 = (uint64_t)v264;
        }
        v98 = *((_DWORD *)v96 + 5);
        v99 = sub_10007B778();
        v100 = v99;
        v101 = atomic_load((unsigned __int8 *)v99 + 26);
        if ((v101 & 1) == 0 && !*((_BYTE *)v99 + 16))
        {
          *((_DWORD *)v99 + 5) = sub_1000AAF28((uint64_t)v99, (unsigned int *)v99 + 3);
          *((_BYTE *)v100 + 16) = 1;
          atomic_store(1u, (unsigned __int8 *)v100 + 26);
          v42 = (uint64_t)v264;
        }
        v102 = *(_QWORD *)(v42 + 2008) - 1000000000 * *((int *)v100 + 5);
        *(_QWORD *)&v324 = exp(-0.693147181 / (double)v98 * ((double)(v359 - v102) / 1000000000.0));
        sub_1000CB7E8((uint64_t)&v292, v102);
LABEL_166:
        v353 |= 0x200000000uLL;
        if (*(_BYTE *)(v42 + 2016))
        {
          v103 = sub_1000C30D8();
          v104 = v103;
          v105 = atomic_load((unsigned __int8 *)v103 + 26);
          if ((v105 & 1) == 0 && !*((_BYTE *)v103 + 16))
          {
            *((_DWORD *)v103 + 5) = sub_1000AAF28((uint64_t)v103, (unsigned int *)v103 + 3);
            *((_BYTE *)v104 + 16) = 1;
            atomic_store(1u, (unsigned __int8 *)v104 + 26);
            v42 = (uint64_t)v264;
          }
          sub_1000CB7E0((uint64_t)&v292, *(_QWORD *)(v42 + 2024) - 1000000000 * *((int *)v104 + 5));
        }
        else
        {
          sub_1000CB7E0((uint64_t)&v292, 0x8000000000000000);
        }
        if ((v353 & 0x200000) == 0)
        {
          sub_100343B34(qword_100417ED8 == -1);
          result = (_QWORD *)abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_io_wrapper.cpp", 1440, "forceNotifyObserver");
          __break(1u);
          return result;
        }
        if (qword_100417ED8 == -1)
        {
          v106 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_236;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
          v106 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_236;
        }
        v107 = qword_10041AD70;
        if (!qword_10041AD70)
LABEL_181:
          sub_10018CB98("map::at:  key not found");
        while (1)
        {
          while (1)
          {
            v108 = *(_DWORD *)(v107 + 32);
            if ((int)v317 >= v108)
              break;
            v107 = *(_QWORD *)v107;
            if (!v107)
              goto LABEL_181;
          }
          if (v108 >= (int)v317)
            break;
          v107 = *(_QWORD *)(v107 + 8);
          if (!v107)
            goto LABEL_181;
        }
        v109 = *(const char **)(v107 + 40);
        v110 = strlen(v109);
        if (v110 > 0x7FFFFFFFFFFFFFF7)
          sub_1000CDE30();
        v111 = v110;
        if (v110 >= 0x17)
        {
          v113 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v110 | 7) != 0x17)
            v113 = v110 | 7;
          v114 = v113 + 1;
          p_dst = (__int128 *)operator new(v113 + 1);
          v361 = v114 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
          *((_QWORD *)&__dst + 1) = v111;
        }
        else
        {
          HIBYTE(v361) = v110;
          p_dst = &__dst;
          if (!v110)
          {
LABEL_190:
            *((_BYTE *)p_dst + v111) = 0;
            if (v361 >= 0)
              v115 = &__dst;
            else
              v115 = (__int128 *)__dst;
            v116 = v294;
            v117 = v295;
            v118 = sub_10004BE10(&v356);
            v119 = qword_10041ADD8;
            if (!qword_10041ADD8)
LABEL_199:
              sub_10018CB98("map::at:  key not found");
            while (1)
            {
              while (1)
              {
                v120 = *(_DWORD *)(v119 + 32);
                if (SHIDWORD(v335) >= v120)
                  break;
                v119 = *(_QWORD *)v119;
                if (!v119)
                  goto LABEL_199;
              }
              if (v120 >= SHIDWORD(v335))
                break;
              v119 = *(_QWORD *)(v119 + 8);
              if (!v119)
                goto LABEL_199;
            }
            v259 = v308;
            v260 = v316;
            v261 = v331;
            v262 = (std::mutex *)v118;
            v121 = *(const char **)(v119 + 40);
            v122 = strlen(v121);
            if (v122 > 0x7FFFFFFFFFFFFFF7)
              sub_1000CDE30();
            v123 = (const char *)v122;
            v257 = v115;
            v258 = v11;
            if (v122 >= 0x17)
            {
              v125 = a4;
              v126 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v122 | 7) != 0x17)
                v126 = v122 | 7;
              v127 = v126 + 1;
              v124 = (std::runtime_error_vtbl *)operator new(v126 + 1);
              v279.__imp_.__imp_ = v123;
              v280 = v127 | 0x8000000000000000;
              v279.__vftable = v124;
              a4 = v125;
            }
            else
            {
              HIBYTE(v280) = v122;
              v124 = (std::runtime_error_vtbl *)&v279;
              if (!v122)
              {
LABEL_208:
                v123[(_QWORD)v124] = 0;
                if (v280 >= 0)
                  v128 = &v279;
                else
                  v128 = v279.__vftable;
                v129 = qword_10041ADA8;
                if (!qword_10041ADA8)
LABEL_217:
                  sub_10018CB98("map::at:  key not found");
                while (1)
                {
                  while (1)
                  {
                    v130 = *(_DWORD *)(v129 + 32);
                    if (v346 >= v130)
                      break;
                    v129 = *(_QWORD *)v129;
                    if (!v129)
                      goto LABEL_217;
                  }
                  if (v130 >= v346)
                    break;
                  v129 = *(_QWORD *)(v129 + 8);
                  if (!v129)
                    goto LABEL_217;
                }
                v131 = *(const char **)(v129 + 40);
                v132 = strlen(v131);
                if (v132 > 0x7FFFFFFFFFFFFFF7)
                  sub_1000CDE30();
                v133 = (const char *)v132;
                if (v132 >= 0x17)
                {
                  v135 = a4;
                  v136 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v132 | 7) != 0x17)
                    v136 = v132 | 7;
                  v137 = v136 + 1;
                  v134 = (std::runtime_error_vtbl *)operator new(v136 + 1);
                  v277.__imp_.__imp_ = v133;
                  v278 = v137 | 0x8000000000000000;
                  v277.__vftable = v134;
                  a4 = v135;
                }
                else
                {
                  HIBYTE(v278) = v132;
                  v134 = (std::runtime_error_vtbl *)&v277;
                  if (!v132)
                  {
LABEL_226:
                    v133[(_QWORD)v134] = 0;
                    v138 = &v277;
                    if (v278 < 0)
                      v138 = v277.__vftable;
                    *(_DWORD *)buf = 136449027;
                    *(_QWORD *)&buf[4] = v257;
                    *(_WORD *)&buf[12] = 2049;
                    *(_QWORD *)&buf[14] = v116;
                    *(_WORD *)&buf[22] = 2049;
                    *(_QWORD *)&buf[24] = v117;
                    v364 = 2081;
                    v365 = (uint64_t)v262;
                    v366 = 2048;
                    v367 = v259;
                    v368 = 2048;
                    v369 = v260;
                    v370 = 1024;
                    v371 = v261;
                    v372 = 2082;
                    v373 = v128;
                    v374 = 2082;
                    v375 = v138;
                    *(_WORD *)v376 = 2049;
                    *(_QWORD *)&v376[2] = v298;
                    v377 = 2049;
                    v378 = v299;
                    v379 = 2048;
                    v380 = *((_QWORD *)&v313 + 1);
                    _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "%{public}s p = x,y: %{private}f,%{private}f %{private}s sigmaDist: %f m horizontalAccuracy: %f m strobe: %d yield-source: %{public}s yield-type: %{public}s, converted lat-lon: %{private}.10f, %{private}.10f t=%lld", buf, 0x76u);
                    if (SHIBYTE(v278) < 0)
                    {
                      operator delete(v277.__vftable);
                      v42 = (uint64_t)v264;
                      v11 = v258;
                      if ((SHIBYTE(v280) & 0x80000000) == 0)
                      {
LABEL_230:
                        if ((SHIBYTE(v361) & 0x80000000) == 0)
                          goto LABEL_231;
                        goto LABEL_235;
                      }
                    }
                    else
                    {
                      v42 = (uint64_t)v264;
                      v11 = v258;
                      if ((SHIBYTE(v280) & 0x80000000) == 0)
                        goto LABEL_230;
                    }
                    operator delete(v279.__vftable);
                    if ((SHIBYTE(v361) & 0x80000000) == 0)
                    {
LABEL_231:
                      if (qword_100417ED8 != -1)
                      {
LABEL_379:
                        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
                        v139 = qword_100417EE0;
                        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_247;
                        goto LABEL_237;
                      }
LABEL_236:
                      v139 = qword_100417EE0;
                      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_247;
LABEL_237:
                      v140 = *(_QWORD *)&v340;
                      if ((v353 & 0x20000000000) == 0)
                        v140 = 0x7FF4000000000000;
                      v141 = v345;
                      if ((v353 & 0x80000000000) == 0)
                        v141 = 0x7FF4000000000000;
                      v142 = *((_QWORD *)&v349 + 1);
                      if ((v353 & 0x4000000000000) == 0)
                        v142 = 0x7FF4000000000000;
                      if ((v353 & 0x2000000000000) != 0)
                        v143 = v349;
                      else
                        v143 = 0x7FF4000000000000;
                      *(_DWORD *)buf = 134218752;
                      *(_QWORD *)&buf[4] = v140;
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v141;
                      *(_WORD *)&buf[22] = 2048;
                      *(_QWORD *)&buf[24] = v142;
                      v364 = 2048;
                      v365 = v143;
                      _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "Polygon distances, signedDistToSurvey: %f m, signedDistToFloorplan: %f m, gpsSignedDistToSurvey: %f m, gpsSignedDistToFloorplan: %f m", buf, 0x2Au);
LABEL_247:
                      *(_QWORD *)&v319 = *((_QWORD *)&v308 + 1);
                      v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 72))(v354);
                      sub_100079D18(v11, v144, (uint64_t)&v270);
                      *((_QWORD *)&v319 + 1) = v270.__imp_.__imp_;
                      *(_QWORD *)&v320 = v272;
                      *((_QWORD *)&v320 + 1) = v271;
                      if (v274)
                        sub_10019D61C((uint64_t)&v318, v273);
                      sub_1000C2070(*(_QWORD *)(v42 + 1520), (uint64_t)&v279);
                      if ((_BYTE)v280)
                        sub_1000C962C((uint64_t)&v318, *(double *)&v279.__imp_.__imp_);
                      if (v276)
                        sub_10019D630((uint64_t)&v318, v275);
                      *((_QWORD *)&v321 + 1) = v23;
                      v145 = sub_1000BFB24((uint64_t)v358);
                      sub_1000C9640((uint64_t)&v318, v145);
                      v146 = sub_100078154((uint64_t)v358);
                      sub_1000C9654((uint64_t)&v318, v146);
                      *(double *)&v321 = *((double *)&v321 + 1)
                                       * *((double *)&v309 + 1)
                                       * *((double *)&v310 + 1)
                                       * *(double *)&v310;
                      v277.__vftable = 0;
                      v277.__imp_.__imp_ = 0;
                      v278 = 0;
                      v147 = sub_1000BFB60((uint64_t)v358);
                      v148 = sub_10007814C((uint64_t)v358);
                      v149 = sub_1000C23B0(v148);
                      sub_1000C9D14(v147, &v277, (uint64_t)&v267, v149);
                      if (qword_100417ED8 == -1)
                      {
                        v150 = qword_100417EE0;
                        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_260;
                      }
                      else
                      {
                        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
                        v150 = qword_100417EE0;
                        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_260;
                      }
                      v151 = nullsub_10(v358);
                      v152 = sub_1000C2288(v151);
                      sub_1000173C4(v152, (uint64_t *)&v267, &v277, v269);
                      if (buf[23] >= 0)
                        v153 = buf;
                      else
                        v153 = *(_BYTE **)buf;
                      LODWORD(__dst) = 136315138;
                      *(_QWORD *)((char *)&__dst + 4) = v153;
                      _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&__dst, 0xCu);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
LABEL_260:
                      sub_100199588(&v322, (char *)v267, v268, (v268 - (_BYTE *)v267) >> 3);
                      v154 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v322 + 1) - v322) >> 3);
                      if (*((_QWORD *)&v322 + 1) == (_QWORD)v322)
                        v155 = 0;
                      else
                        v155 = v154;
                      sub_1000BF1C0((double *)v322, *((double **)&v322 + 1), (uint64_t)buf, v155, 1);
                      *((_QWORD *)&v323 + 1) = v310;
                      v156 = sub_1000C2354((_QWORD *)(v42 + 2184));
                      sub_10007AB6C((uint64_t)&v318, v156);
                      v157 = sub_1000C237C(v42 + 2184);
                      sub_1000C9668((uint64_t)&v318, v157);
                      if (qword_100417ED8 == -1)
                      {
                        v158 = qword_100417EE0;
                        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_280;
                      }
                      else
                      {
                        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
                        v158 = qword_100417EE0;
                        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
                          goto LABEL_280;
                      }
                      sub_1000FC5A4((uint64_t)buf);
                      v159 = *(_QWORD *)&buf[16];
                      *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 24] = *(_DWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 24] & 0xFFFFFEFB | 4;
                      *(_QWORD *)((char *)&v364 + *(_QWORD *)(v159 - 24)) = 2;
                      sub_1000F0508(&buf[16], (uint64_t)"{", 1);
                      LOBYTE(v265) = 34;
                      v160 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v161 = sub_1000F0508(v160, (uint64_t)"prbPipelinedSaysYield", 21);
                      LOBYTE(v265) = 34;
                      v162 = sub_1000F0508(v161, (uint64_t)&v265, 1);
                      sub_1000F0508(v162, (uint64_t)": ", 2);
                      std::ostream::operator<<(*(double *)&v319);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v163 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v164 = sub_1000F0508(v163, (uint64_t)"prbCoarseIndoorSaysIndoor", 25);
                      LOBYTE(v265) = 34;
                      v165 = sub_1000F0508(v164, (uint64_t)&v265, 1);
                      sub_1000F0508(v165, (uint64_t)": ", 2);
                      std::ostream::operator<<(*((double *)&v319 + 1));
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v166 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v167 = sub_1000F0508(v166, (uint64_t)"prbWifiSaysIndoor", 17);
                      LOBYTE(v265) = 34;
                      v168 = sub_1000F0508(v167, (uint64_t)&v265, 1);
                      sub_1000F0508(v168, (uint64_t)": ", 2);
                      std::ostream::operator<<(*(double *)&v320);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v169 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v170 = sub_1000F0508(v169, (uint64_t)"prbGpsSaysIndoor", 16);
                      LOBYTE(v265) = 34;
                      v171 = sub_1000F0508(v170, (uint64_t)&v265, 1);
                      sub_1000F0508(v171, (uint64_t)": ", 2);
                      std::ostream::operator<<(*((double *)&v320 + 1));
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v172 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v173 = sub_1000F0508(v172, (uint64_t)"prbParticleFilterSaysYield", 26);
                      LOBYTE(v265) = 34;
                      v174 = sub_1000F0508(v173, (uint64_t)&v265, 1);
                      sub_1000F0508(v174, (uint64_t)": ", 2);
                      std::ostream::operator<<(*(double *)&v321);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v175 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v176 = sub_1000F0508(v175, (uint64_t)"prbOnFloors", 11);
                      LOBYTE(v265) = 34;
                      v177 = sub_1000F0508(v176, (uint64_t)&v265, 1);
                      sub_1000F0508(v177, (uint64_t)": ", 2);
                      std::ostream::operator<<(*((double *)&v321 + 1));
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v178 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v179 = sub_1000F0508(v178, (uint64_t)"prbOnFloor", 10);
                      LOBYTE(v265) = 34;
                      v180 = sub_1000F0508(v179, (uint64_t)&v265, 1);
                      sub_1000F0508(v180, (uint64_t)": [", 3);
                      v181 = v322;
                      if ((_QWORD)v322 != *((_QWORD *)&v322 + 1))
                      {
                        std::ostream::operator<<(*(double *)v322);
                        while ((_QWORD)v181 + 8 != *((_QWORD *)&v181 + 1))
                        {
                          v182 = *(double *)v181;
                          sub_1000F0508(&buf[16], (uint64_t)", ", 2);
                          std::ostream::operator<<(v182);
                        }
                      }
                      sub_1000F0508(&buf[16], (uint64_t)"],  ", 4);
                      LOBYTE(v265) = 34;
                      v183 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v184 = sub_1000F0508(v183, (uint64_t)"prbInlier", 9);
                      LOBYTE(v265) = 34;
                      v185 = sub_1000F0508(v184, (uint64_t)&v265, 1);
                      sub_1000F0508(v185, (uint64_t)": ", 2);
                      std::ostream::operator<<(*((double *)&v323 + 1));
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v186 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v187 = sub_1000F0508(v186, (uint64_t)"prbLocalizerIoWrapperSaysWifiOk", 31);
                      LOBYTE(v265) = 34;
                      v188 = sub_1000F0508(v187, (uint64_t)&v265, 1);
                      sub_1000F0508(v188, (uint64_t)": ", 2);
                      std::ostream::operator<<(*(double *)&v324);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v189 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v190 = sub_1000F0508(v189, (uint64_t)"motionUpdateSource", 18);
                      LOBYTE(v265) = 34;
                      v191 = sub_1000F0508(v190, (uint64_t)&v265, 1);
                      v192 = sub_1000F0508(v191, (uint64_t)": ", 2);
                      std::ostream::operator<<(v192, v326);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v193 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v194 = sub_1000F0508(v193, (uint64_t)"prbRawCLOutdoorServiceSaysIndoor", 32);
                      LOBYTE(v265) = 34;
                      v195 = sub_1000F0508(v194, (uint64_t)&v265, 1);
                      sub_1000F0508(v195, (uint64_t)": ", 2);
                      v196 = v328;
                      if ((v330 & 0x10) == 0)
                        v196 = NAN;
                      std::ostream::operator<<(v196);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v197 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v198 = sub_1000F0508(v197, (uint64_t)"prbCoarseIndoorSaysIndoorWifiAndGps", 35);
                      LOBYTE(v265) = 34;
                      v199 = sub_1000F0508(v198, (uint64_t)&v265, 1);
                      sub_1000F0508(v199, (uint64_t)": ", 2);
                      v200 = v329;
                      if ((v330 & 0x20) == 0)
                        v200 = NAN;
                      std::ostream::operator<<(v200);
                      sub_1000F0508(&buf[16], (uint64_t)",  ", 3);
                      LOBYTE(v265) = 34;
                      v201 = sub_1000F0508(&buf[16], (uint64_t)&v265, 1);
                      v202 = sub_1000F0508(v201, (uint64_t)"prbZAxisSaysIndoor", 18);
                      LOBYTE(v265) = 34;
                      v203 = sub_1000F0508(v202, (uint64_t)&v265, 1);
                      sub_1000F0508(v203, (uint64_t)": ", 2);
                      v204 = v327;
                      if ((v330 & 8) == 0)
                        v204 = NAN;
                      std::ostream::operator<<(v204);
                      sub_1000F0508(&buf[16], (uint64_t)" }", 2);
                      std::stringbuf::str(&buf[24]);
                      *(_QWORD *)&buf[16] = v205;
                      if (SBYTE1(v380) < 0)
                        operator delete(*(void **)v376);
                      std::streambuf::~streambuf(&buf[24]);
                      std::ios::~ios(&v381);
                      v206 = &__dst;
                      if (v361 < 0)
                        v206 = (__int128 *)__dst;
                      LODWORD(v362[0]) = 136446210;
                      *(_QWORD *)((char *)v362 + 4) = v206;
                      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)v362, 0xCu);
                      if (SHIBYTE(v361) < 0)
                        operator delete((void *)__dst);
LABEL_280:
                      if ((v353 & 0x8000000000) == 0 || HIDWORD(v335) != 4 || (_DWORD)v317)
                      {
LABEL_309:
                        if (*(_QWORD *)(v42 + 1832) != *(_QWORD *)(v42 + 1840))
                        {
                          sub_10022C5C4(*(_QWORD *)(v42 + 176), v11, v362);
                          sub_10022C728(*(_QWORD *)(v42 + 176), v11, &v265);
                          v212 = v42 + 2240;
                          sub_10019EA0C(v42 + 2240, v359);
                          sub_10007AB9C(v42 + 2240, *((double *)&v308 + 1));
                          v263 = (std::mutex *)(v42 + 1768);
                          std::mutex::lock((std::mutex *)(v42 + 1768));
                          v213 = *(uint64_t **)(v42 + 1832);
                          for (i = *(uint64_t **)(v42 + 1840); v213 != i; ++v213)
                          {
                            v215 = *v213;
                            *(_QWORD *)buf = off_1003F9A88;
                            *(_OWORD *)&buf[8] = 0uLL;
                            buf[24] &= 0xFCu;
                            v216 = v264[301];
                            if (v216)
                            {
                              sub_10025B800(v216, *((uint64_t *)&v313 + 1), (uint64_t)&__dst);
                              sub_100077D9C((uint64_t)buf, (uint64_t)&__dst);
                              nullsub_22(&__dst);
                            }
                            else
                            {
                              sub_1000504A8((uint64_t)buf, NAN);
                              sub_1000504A0((uint64_t)buf, NAN);
                            }
                            v217 = v264[268];
                            v218 = sub_1002204E4(v264[22]);
                            (*(void (**)(uint64_t, uint64_t (***)(), _OWORD *, _QWORD **, uint64_t *, uint64_t *, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t *))(*(_QWORD *)v215 + 16))(v215, &v292, v362, &v265, v264 + 28, v264 + 7, v217, v212, buf, v218, v264 + 192);
                            nullsub_22(buf);
                          }
                          std::mutex::unlock(v263);
                          v42 = (uint64_t)v264;
                          v219 = v265;
                          if (v265)
                          {
                            v220 = v266;
                            v221 = v265;
                            if (v266 != v265)
                            {
                              do
                                v220 = sub_1000788EC(v220 - 37);
                              while (v220 != v219);
                              v221 = v265;
                            }
                            v266 = v219;
                            operator delete(v221);
                          }
                          v222 = *(_QWORD **)&v362[0];
                          if (*(_QWORD *)&v362[0])
                          {
                            v223 = (_QWORD *)*((_QWORD *)&v362[0] + 1);
                            v224 = *(void **)&v362[0];
                            if (*((_QWORD *)&v362[0] + 1) != *(_QWORD *)&v362[0])
                            {
                              do
                                v223 = sub_1000788EC(v223 - 37);
                              while (v223 != v222);
                              v224 = *(void **)&v362[0];
                            }
                            *((_QWORD *)&v362[0] + 1) = v222;
                            operator delete(v224);
                          }
                        }
                        v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 56))(v354);
                        *(_OWORD *)buf = 0uLL;
                        if (v225)
                        {
                          v226 = operator new(0x798uLL);
                          v226[1] = 0;
                          v226[2] = 0;
                          *v226 = off_1003FE5D8;
                          v227 = sub_1000B53CC(v226 + 3, v225);
                          v228 = *(std::__shared_weak_count **)&buf[8];
                          *(_QWORD *)buf = v227;
                          *(_QWORD *)&buf[8] = v226;
                          if (v228)
                          {
                            v229 = (unint64_t *)&v228->__shared_owners_;
                            do
                              v230 = __ldaxr(v229);
                            while (__stlxr(v230 - 1, v229));
                            if (!v230)
                            {
                              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                              std::__shared_weak_count::__release_weak(v228);
                            }
                          }
                        }
                        std::mutex::lock((std::mutex *)(v42 + 1592));
                        v231 = *(uint64_t **)(v42 + 1656);
                        for (j = *(uint64_t **)(v42 + 1664); v231 != j; ++v231)
                        {
                          v233 = *v231;
                          v234 = v359;
                          v235 = nullsub_10(v358);
                          (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), uint64_t, _BYTE *))(*(_QWORD *)v233 + 16))(v233, v234, &v292, v235, buf);
                        }
                        std::mutex::unlock((std::mutex *)(v42 + 1592));
                        v236 = *(std::__shared_weak_count **)&buf[8];
                        if (*(_QWORD *)&buf[8])
                        {
                          v237 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                          do
                            v238 = __ldaxr(v237);
                          while (__stlxr(v238 - 1, v237));
                          if (!v238)
                          {
                            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                            std::__shared_weak_count::__release_weak(v236);
                          }
                        }
                        std::mutex::lock((std::mutex *)(v42 + 1680));
                        v239 = *(uint64_t **)(v42 + 1744);
                        for (k = *(uint64_t **)(v42 + 1752); v239 != k; ++v239)
                        {
                          v241 = *v239;
                          v242 = v359;
                          v243 = nullsub_10(v358);
                          (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), uint64_t))(*(_QWORD *)v241 + 32))(v241, v242, &v292, v243);
                        }
                        std::mutex::unlock((std::mutex *)(v42 + 1680));
                        if ((v353 & 0x8000000000) != 0 && HIDWORD(v335) == 4 && !(_DWORD)v317)
                        {
                          v244 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 56))(v354);
                          ((void (*)(uint64_t, uint64_t))loc_10021B5D8)(v42, v244);
                        }
                        *a4 = 0;
                        sub_1000768A0(a4 + 8, &v292);
                        *a4 = 1;
                        if (v267)
                        {
                          v268 = (char *)v267;
                          operator delete(v267);
                        }
                        v245 = v277.__vftable;
                        if (v277.__vftable)
                        {
                          imp = v277.__imp_.__imp_;
                          v247 = v277.__vftable;
                          if (v277.__imp_.__imp_ != (const char *)v277.__vftable)
                          {
                            do
                            {
                              v248 = (std::__shared_weak_count *)*((_QWORD *)imp - 1);
                              if (v248)
                              {
                                v249 = (unint64_t *)&v248->__shared_owners_;
                                do
                                  v250 = __ldaxr(v249);
                                while (__stlxr(v250 - 1, v249));
                                if (!v250)
                                {
                                  ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                                  std::__shared_weak_count::__release_weak(v248);
                                }
                              }
                              imp -= 16;
                            }
                            while (imp != (const char *)v245);
                            v247 = v277.__vftable;
                          }
                          v277.__imp_.__imp_ = (const char *)v245;
                          operator delete(v247);
                        }
                        nullsub_22(v282);
                        sub_100076820((uint64_t)&v292);
                        v66 = (std::__shared_weak_count *)v355;
                        if (!v355)
                          goto LABEL_362;
                        goto LABEL_358;
                      }
                      v207 = v42 + 1200;
                      if (*(_BYTE *)(v42 + 1352))
                      {
                        if (*(_BYTE *)(v42 + 1200))
                        {
                          if (*(_QWORD *)(v42 + 1368) <= *(_QWORD *)(v42 + 1216))
                            v208 = v42 + 1200;
                          else
                            v208 = v42 + 1352;
                          v209 = (_BYTE *)(v42 + 1048);
                          if (!*(_BYTE *)(v42 + 1048))
                          {
LABEL_289:
                            if (!*(_BYTE *)v208)
                              goto LABEL_309;
LABEL_296:
                            v210 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v354 + 56))(v354);
                            if (*(_BYTE *)(v42 + 1352))
                            {
                              if (*(_BYTE *)v207)
                              {
                                if (*(_QWORD *)(v42 + 1368) > *(_QWORD *)(v42 + 1216))
                                  v207 = v42 + 1352;
                                v211 = (_BYTE *)(v42 + 1048);
                                if (!*(_BYTE *)(v42 + 1048))
                                  goto LABEL_301;
LABEL_306:
                                if (*(_QWORD *)(v207 + 16) > *(_QWORD *)(v42 + 1064))
                                  v211 = (_BYTE *)v207;
                                goto LABEL_308;
                              }
                              v211 = (_BYTE *)(v42 + 1048);
                              v207 = v42 + 1352;
                              if (*(_BYTE *)(v42 + 1048))
                                goto LABEL_306;
                            }
                            else
                            {
                              v211 = (_BYTE *)(v42 + 1048);
                              if (!*(_BYTE *)v207)
                                goto LABEL_308;
                              if (*v211)
                                goto LABEL_306;
                            }
LABEL_301:
                            v211 = (_BYTE *)v207;
LABEL_308:
                            sub_100208CC0((_QWORD *)(v42 + 2416), (double *)&v292, v210, (uint64_t)(v211 + 8), &v359);
                            goto LABEL_309;
                          }
                        }
                        else
                        {
                          v209 = (_BYTE *)(v42 + 1048);
                          v208 = v42 + 1352;
                          if (!*(_BYTE *)(v42 + 1048))
                            goto LABEL_289;
                        }
                      }
                      else
                      {
                        v209 = (_BYTE *)(v42 + 1048);
                        v208 = v42 + 1200;
                        if (!*(_BYTE *)(v42 + 1200))
                          goto LABEL_295;
                        if (!*v209)
                          goto LABEL_289;
                      }
                      if (*(_QWORD *)(v208 + 16) > *(_QWORD *)(v42 + 1064))
                        v209 = (_BYTE *)v208;
LABEL_295:
                      if (!*v209)
                        goto LABEL_309;
                      goto LABEL_296;
                    }
LABEL_235:
                    operator delete((void *)__dst);
                    if (qword_100417ED8 != -1)
                      goto LABEL_379;
                    goto LABEL_236;
                  }
                }
                memmove(v134, v131, (size_t)v133);
                goto LABEL_226;
              }
            }
            memmove(v124, v121, (size_t)v123);
            goto LABEL_208;
          }
        }
        memmove(p_dst, v109, v111);
        goto LABEL_190;
      }
LABEL_139:
      sub_1000CB7E8((uint64_t)&v292, 0x8000000000000000);
      *(_QWORD *)&v324 = 0;
      goto LABEL_166;
    }
    v79 = sub_10007814C((uint64_t)v358);
    v80 = sub_10007814C((uint64_t)v358);
    v81 = sub_1000C23A4(v80);
    v82 = sub_1000C2F54(v79, v81);
    if (sub_1000C2F90(v82))
    {
      sub_1000CB820((uint64_t)&v292, 0);
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v83 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_121;
        goto LABEL_120;
      }
      v83 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_120:
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = *((_QWORD *)&v313 + 1);
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "YIELD_FAILURE_GIVE_UP at t=%lld", buf, 0xCu);
      }
    }
LABEL_121:
    v78 = v317;
    goto LABEL_122;
  }
  *a4 = 0;
  sub_100076820((uint64_t)&v292);
  v66 = (std::__shared_weak_count *)v355;
  if (v355)
  {
LABEL_358:
    v251 = (unint64_t *)&v66->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
LABEL_362:
  v253 = v357;
  if (v357)
  {
    v254 = (unint64_t *)&v357->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  return sub_1000788EC(v358);
}

void sub_1000766E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::runtime_error a52)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a52);
  if (a31 < 0)
    operator delete(a26);
  __cxa_end_catch();
  JUMPOUT(0x1000767F0);
}

void sub_100076790()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x1000767B4);
}

void sub_1000767A0()
{
  std::mutex *v0;

  std::mutex::unlock(v0);
  JUMPOUT(0x1000767ACLL);
}

uint64_t sub_100076820(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1003F97F8;
  if (*(char *)(a1 + 743) < 0)
    operator delete(*(void **)(a1 + 720));
  nullsub_22(a1 + 528);
  *(_QWORD *)(a1 + 304) = off_1003F97B8;
  v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(_QWORD *)(a1 + 368) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  nullsub_22(a1 + 40);
  nullsub_23(a1 + 8);
  return a1;
}

_QWORD *sub_1000768A4(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void *v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void (**v12)(_QWORD);
  BOOL v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  void *v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  void (**v19)(_QWORD);

  *a1 = off_1003F9CB8;
  v2 = (void *)a1[59];
  if (v2)
  {
    a1[60] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[56];
  if (v3)
  {
    a1[57] = v3;
    operator delete(v3);
  }
  nullsub_23(a1 + 52);
  nullsub_23(a1 + 48);
  v4 = a1[43];
  if (v4)
  {
    v5 = a1[44];
    v6 = (void *)a1[43];
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)a1[43];
    }
    a1[44] = v4;
    operator delete(v6);
  }
  nullsub_24(a1 + 37);
  nullsub_24(a1 + 31);
  nullsub_25(a1 + 17);
  nullsub_26(a1 + 8);
  v7 = (void (***)(_QWORD))a1[4];
  if (v7)
  {
    v8 = (void (***)(_QWORD))a1[5];
    v9 = (void *)a1[4];
    if (v8 != v7)
    {
      v10 = v8 - 5;
      v11 = v8 - 5;
      do
      {
        v12 = *v11;
        v11 -= 5;
        (*v12)(v10);
        v13 = v10 == v7;
        v10 = v11;
      }
      while (!v13);
      v9 = (void *)a1[4];
    }
    a1[5] = v7;
    operator delete(v9);
  }
  v14 = (void (***)(_QWORD))a1[1];
  if (v14)
  {
    v15 = (void (***)(_QWORD))a1[2];
    v16 = (void *)a1[1];
    if (v15 != v14)
    {
      v17 = v15 - 5;
      v18 = v15 - 5;
      do
      {
        v19 = *v18;
        v18 -= 5;
        (*v19)(v17);
        v13 = v17 == v14;
        v17 = v18;
      }
      while (!v13);
      v16 = (void *)a1[1];
    }
    a1[2] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_100076A14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = off_1003F9678;
  *(_QWORD *)(a1 + 8) = off_1003F9658;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) &= 0xF8u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) &= 0xFCu;
  if (a1 == a2)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  }
  else
  {
    sub_100199588(v4, *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
    sub_100199588((_QWORD *)(a1 + 40), *(char **)(a2 + 40), *(char **)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    sub_100199AE8((void **)(a1 + 80), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
  }
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

void sub_100076B10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  sub_1001972D8(v2);
  sub_10007342C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100076B2C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t *v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;

  *(_QWORD *)a1 = off_1003F9698;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 80) = off_1003F9618;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v10 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = off_1003F9CB8;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = off_1003F9A08;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 280) &= 0xFCu;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = off_1003F9AC8;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 312) = off_1003F9AA8;
  *(_QWORD *)(a1 + 320) = off_1003F9A68;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 344) &= 0xFCu;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a1 + 376) & 0xF8 | 4;
  *(_BYTE *)(a1 + 384) &= 0xF8u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = off_1003F9A28;
  *(_OWORD *)(a1 + 416) = xmmword_10038DC80;
  *(_OWORD *)(a1 + 432) = xmmword_10038DC90;
  *(_BYTE *)(a1 + 448) |= 0xFu;
  *(_QWORD *)(a1 + 456) = off_1003F9A28;
  *(_OWORD *)(a1 + 464) = xmmword_10038DC80;
  *(_OWORD *)(a1 + 480) = xmmword_10038DC90;
  *(_BYTE *)(a1 + 496) |= 0xFu;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 544) = off_1003F9A68;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_BYTE *)(a1 + 568) &= 0xFCu;
  *(_QWORD *)(a1 + 576) = off_1003F9A68;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_BYTE *)(a1 + 600) &= 0xFCu;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  v4 = *(_BYTE *)(a1 + 658);
  *(_WORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 658) = v4 & 0xFE;
  *(_QWORD *)(a1 + 664) = off_1003F9778;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_BYTE *)(a1 + 696) &= ~1u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_WORD *)(a1 + 896) &= 0xE000u;
  *(_QWORD *)(a1 + 920) = 0;
  v9 = (std::string *)(a1 + 904);
  *(_OWORD *)(a1 + 904) = 0u;
  v7 = (std::string *)(a1 + 960);
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 992) = off_1003F95F8;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_QWORD *)(a1 + 1000) = a1 + 1008;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_QWORD *)(a1 + 1024) = a1 + 1032;
  *(_BYTE *)(a1 + 1048) &= 0xFCu;
  *(_QWORD *)(a1 + 1056) = off_1003F9DE8;
  *(_QWORD *)(a1 + 1064) = off_1003F9D88;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_BYTE *)(a1 + 1104) &= 0xF8u;
  *(_QWORD *)(a1 + 1112) = off_1003F9AA8;
  *(_QWORD *)(a1 + 1120) = off_1003F9A68;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_BYTE *)(a1 + 1144) &= 0xFCu;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1176) = *(_BYTE *)(a1 + 1176) & 0xF8 | 4;
  *(_QWORD *)(a1 + 1184) = off_1003F9DA8;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_BYTE *)(a1 + 1256) &= 0xC0u;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1296) = off_1003F9A88;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_BYTE *)(a1 + 1320) &= 0xFCu;
  *(_QWORD *)(a1 + 1328) = off_1003F9A88;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_BYTE *)(a1 + 1352) &= 0xFCu;
  *(_QWORD *)(a1 + 1360) = off_1003F9D88;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_BYTE *)(a1 + 1400) &= 0xF8u;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_WORD *)(a1 + 1432) &= 0xF800u;
  *(_QWORD *)(a1 + 1440) = off_1003F9E08;
  *(_QWORD *)(a1 + 1448) = off_1003F9D88;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_BYTE *)(a1 + 1488) &= 0xF8u;
  *(_QWORD *)(a1 + 1496) = off_1003F9AA8;
  *(_QWORD *)(a1 + 1504) = off_1003F9A68;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_BYTE *)(a1 + 1528) &= 0xFCu;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_BYTE *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1560) = *(_BYTE *)(a1 + 1560) & 0xF8 | 4;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_BYTE *)(a1 + 1592) &= 0xF8u;
  v8 = a1 + 1624;
  *(_QWORD *)(a1 + 1624) = off_1003F9A88;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_BYTE *)(a1 + 1648) &= 0xFCu;
  *(_QWORD *)(a1 + 1656) = off_1003F9638;
  *(_QWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_BYTE *)(a1 + 1720) &= 0x80u;
  *(_QWORD *)(a1 + 1728) = off_1003F9638;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_BYTE *)(a1 + 1792) &= 0x80u;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1832) = 0u;
  v6 = (uint64_t *)(a1 + 1888);
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_DWORD *)(a1 + 1912) &= 0xFE000000;
  *(_OWORD *)(a1 + 1864) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v10, (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_100077628(a1 + 80, a2 + 80);
  std::string::operator=(v9, (const std::string *)(a2 + 904));
  *(_BYTE *)(a1 + 928) = *(_BYTE *)(a2 + 928);
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=(v7, (const std::string *)(a2 + 960));
  *(_BYTE *)(a1 + 984) = *(_BYTE *)(a2 + 984);
  if (a1 != a2)
  {
    sub_1000772D4((uint64_t *)(a1 + 1000), *(_QWORD **)(a2 + 1000), (_QWORD *)(a2 + 1008));
    sub_1000772D4((uint64_t *)(a1 + 1024), *(_QWORD **)(a2 + 1024), (_QWORD *)(a2 + 1032));
  }
  *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
  sub_10007774C(a1 + 1056, a2 + 1056);
  sub_1000780C0(a1 + 1440, a2 + 1440);
  *(_QWORD *)(a1 + 1600) = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a1 + 1608) = *(_QWORD *)(a2 + 1608);
  *(_DWORD *)(a1 + 1616) = *(_DWORD *)(a2 + 1616);
  sub_100077D9C(v8, a2 + 1624);
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  *(_OWORD *)(a1 + 1680) = *(_OWORD *)(a2 + 1680);
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(_QWORD *)(a1 + 1712) = *(_QWORD *)(a2 + 1712);
  *(_BYTE *)(a1 + 1720) = *(_BYTE *)(a2 + 1720);
  *(_QWORD *)(a1 + 1736) = *(_QWORD *)(a2 + 1736);
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(_OWORD *)(a1 + 1760) = *(_OWORD *)(a2 + 1760);
  *(_OWORD *)(a1 + 1776) = *(_OWORD *)(a2 + 1776);
  *(_BYTE *)(a1 + 1792) = *(_BYTE *)(a2 + 1792);
  if (a1 == a2)
  {
    *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
  }
  else
  {
    sub_100199AE8((void **)(a1 + 1800), *(_QWORD *)(a2 + 1800), *(_QWORD *)(a2 + 1808), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 1808) - *(_QWORD *)(a2 + 1800)) >> 3));
    *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
    sub_10019A3C8((uint64_t *)(a1 + 1832), *(_QWORD *)(a2 + 1832), *(_QWORD *)(a2 + 1840), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 1840) - *(_QWORD *)(a2 + 1832)) >> 4));
  }
  *(_DWORD *)(a1 + 1856) = *(_DWORD *)(a2 + 1856);
  *(_BYTE *)(a1 + 1860) = *(_BYTE *)(a2 + 1860);
  std::string::operator=((std::string *)(a1 + 1864), (const std::string *)(a2 + 1864));
  if (a1 != a2)
    sub_10019A760(v6, *(_QWORD *)(a2 + 1888), *(_QWORD *)(a2 + 1896), 0xDAB7EC1DD3431B57 * ((uint64_t)(*(_QWORD *)(a2 + 1896) - *(_QWORD *)(a2 + 1888)) >> 3));
  *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  return a1;
}

void sub_1000771D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, _QWORD *a11, _QWORD *a12, void **a13, uint64_t a14, void **a15, void **a16)
{
  char *v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  void **v24;

  sub_1001977C0(a12);
  if (v16[1887] < 0)
    operator delete(*v17);
  sub_100197830(v21);
  sub_1001972D8(v24);
  nullsub_22(a14);
  sub_100073690(v23);
  sub_100073478(v18);
  sub_100195A0C(a11);
  if (v16[983] < 0)
  {
    operator delete(*a13);
    if ((v16[959] & 0x80000000) == 0)
    {
LABEL_5:
      if ((v16[927] & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((v16[959] & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v22);
  if ((v16[927] & 0x80000000) == 0)
  {
LABEL_6:
    sub_100073530(v20);
    if ((v16[79] & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*a15);
  sub_100073530(v20);
  if ((v16[79] & 0x80000000) == 0)
  {
LABEL_7:
    if ((v16[55] & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*v19);
  if ((v16[55] & 0x80000000) == 0)
  {
LABEL_8:
    if ((v16[31] & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*a16);
  if ((v16[31] & 0x80000000) == 0)
LABEL_9:
    _Unwind_Resume(a1);
LABEL_15:
  operator delete(*a10);
  _Unwind_Resume(a1);
}

void sub_1000772D4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  size_t v18;
  const void *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *i;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = (uint64_t **)(a1 + 1);
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v9 = *(_QWORD *)(v6 + 8);
    else
      v9 = v6;
    v40 = (uint64_t)a1;
    v42 = v9;
    if (!v9)
    {
      v35 = 0;
      goto LABEL_65;
    }
    v10 = *(_QWORD **)(v9 + 16);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v39 = (_QWORD *)v10[1];
          if (!v39)
            break;
          do
          {
            v10 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
    }
    v41 = (uint64_t)v10;
    if (a2 == a3)
    {
      v34 = a1;
      sub_1000733B4((uint64_t)a1, v9);
      if (!v10)
        goto LABEL_66;
      goto LABEL_62;
    }
    v12 = a2;
    while (1)
    {
      std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v12 + 4));
      std::string::operator=((std::string *)(v9 + 56), (const std::string *)(v12 + 7));
      v13 = (uint64_t *)v42;
      v14 = *v8;
      v15 = (uint64_t **)(v5 + 8);
      v16 = (uint64_t **)(v5 + 8);
      if (!*v8)
        break;
      v17 = *(char *)(v42 + 55);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(v42 + 55);
      else
        v18 = *(_QWORD *)(v42 + 40);
      if (v17 >= 0)
        v19 = (const void *)(v42 + 32);
      else
        v19 = *(const void **)(v42 + 32);
      do
      {
        while (1)
        {
          v15 = (uint64_t **)v14;
          v22 = (const void *)v14[4];
          v20 = v14 + 4;
          v21 = v22;
          v23 = *((char *)v20 + 23);
          if (v23 >= 0)
            v24 = *((unsigned __int8 *)v20 + 23);
          else
            v24 = v20[1];
          if (v23 >= 0)
            v25 = v20;
          else
            v25 = v21;
          if (v24 >= v18)
            v26 = v18;
          else
            v26 = v24;
          v27 = memcmp(v19, v25, v26);
          v28 = v18 < v24;
          if (v27)
            v28 = v27 < 0;
          if (!v28)
            break;
          v14 = *v15;
          v16 = v15;
          if (!*v15)
            goto LABEL_34;
        }
        v14 = v15[1];
      }
      while (v14);
      v16 = v15 + 1;
      *(_QWORD *)v42 = 0;
      *(_QWORD *)(v42 + 8) = 0;
      *(_QWORD *)(v42 + 16) = v15;
      v15[1] = (uint64_t *)v42;
      v29 = **(_QWORD **)v5;
      if (v29)
        goto LABEL_35;
LABEL_36:
      sub_1000E05F4(*(uint64_t **)(v5 + 8), v13);
      ++*(_QWORD *)(v5 + 16);
      v9 = v41;
      v42 = v41;
      if (v41)
      {
        v10 = *(_QWORD **)(v41 + 16);
        if (v10)
        {
          v30 = (_QWORD *)*v10;
          if (*v10 == v41)
          {
            *v10 = 0;
            while (1)
            {
              v33 = (_QWORD *)v10[1];
              if (!v33)
                break;
              do
              {
                v10 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
          }
          else
          {
            for (v10[1] = 0; v30; v30 = (_QWORD *)v10[1])
            {
              do
              {
                v10 = v30;
                v30 = (_QWORD *)*v30;
              }
              while (v30);
            }
          }
        }
        v41 = (uint64_t)v10;
        v31 = (_QWORD *)v12[1];
        if (v31)
        {
          do
          {
LABEL_45:
            v4 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
          goto LABEL_49;
        }
      }
      else
      {
        v10 = 0;
        v31 = (_QWORD *)v12[1];
        if (v31)
          goto LABEL_45;
      }
      do
      {
        v4 = (_QWORD *)v12[2];
        v32 = *v4 == (_QWORD)v12;
        v12 = v4;
      }
      while (!v32);
LABEL_49:
      if (v9)
      {
        v12 = v4;
        if (v4 != a3)
          continue;
      }
      v34 = (uint64_t *)v40;
      sub_1000733B4(v40, v9);
      if (!v10)
        goto LABEL_66;
LABEL_62:
      for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
        v10 = i;
      a1 = v34;
      v35 = (uint64_t)v10;
LABEL_65:
      sub_1000733B4((uint64_t)a1, v35);
      goto LABEL_66;
    }
LABEL_34:
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_QWORD *)(v42 + 16) = v15;
    *v16 = (uint64_t *)v42;
    v29 = **(_QWORD **)v5;
    if (!v29)
      goto LABEL_36;
LABEL_35:
    *(_QWORD *)v5 = v29;
    v13 = *v16;
    goto LABEL_36;
  }
LABEL_66:
  if (v4 != a3)
  {
    do
    {
      sub_100173300(v5, (uint64_t)(v4 + 4));
      v37 = (_QWORD *)v4[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v4[2];
          v32 = *v38 == (_QWORD)v4;
          v4 = v38;
        }
        while (!v32);
      }
      v4 = v38;
    }
    while (v38 != a3);
  }
}

void sub_100077614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001732AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100077628(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  sub_100077E88(a1 + 80, a2 + 80);
  sub_1000776F0(a1 + 584, a2 + 584);
  std::string::operator=((std::string *)(a1 + 624), (const std::string *)(a2 + 624));
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  std::string::operator=((std::string *)(a1 + 696), (const std::string *)(a2 + 696));
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  std::string::operator=((std::string *)(a1 + 768), (const std::string *)(a2 + 768));
  std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 792));
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  return a1;
}

uint64_t sub_1000776F0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    sub_10019CD34((void **)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_10007774C(uint64_t a1, uint64_t a2)
{
  sub_1000777E4(a1 + 8, a2 + 8);
  sub_100078110(a1 + 56, a2 + 56);
  sub_100078064(a1 + 128, a2 + 128);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  sub_100077D9C(a1 + 240, a2 + 240);
  sub_100077D9C(a1 + 272, a2 + 272);
  sub_1000777E4(a1 + 304, a2 + 304);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  return a1;
}

uint64_t sub_1000777E4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sub_100077824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100077D9C(a1 + 8, a2 + 8);
  sub_100077D9C(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  if (a1 != a2)
    sub_100199588((_QWORD *)(a1 + 360), *(char **)(a2 + 360), *(char **)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  v4 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v4;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  sub_100077D9C(a1 + 528, a2 + 528);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  return a1;
}

uint64_t sub_100077A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1003F97F8;
  *(_QWORD *)(a1 + 8) = off_1003F9A68;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) &= 0xFCu;
  *(_QWORD *)(a1 + 40) = off_1003F9A88;
  v4 = a1 + 40;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) &= 0xFCu;
  *(_QWORD *)(a1 + 104) = 0;
  v5 = (std::string *)(a1 + 104);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 304) = off_1003F97B8;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_BYTE *)(a1 + 456) &= 0xC0u;
  v6 = a1 + 528;
  *(_QWORD *)(a1 + 528) = off_1003F9A88;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_BYTE *)(a1 + 552) &= 0xFCu;
  *(_QWORD *)(a1 + 568) = off_1003F97D8;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) &= 0xF8u;
  v7 = (std::string *)(a1 + 720);
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a1 + 752) & 0xF000000000000000 | 0x10000000;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_100077D9C(a1 + 8, a2 + 8);
  sub_100077D9C(v4, a2 + 40);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  std::string::operator=(v5, (const std::string *)(a2 + 104));
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  if (a1 != a2)
    sub_100199588((_QWORD *)(a1 + 360), *(char **)(a2 + 360), *(char **)(a2 + 368), (uint64_t)(*(_QWORD *)(a2 + 368) - *(_QWORD *)(a2 + 360)) >> 3);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_WORD *)(a1 + 464) = *(_WORD *)(a2 + 464);
  v8 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v8;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  sub_100077D9C(v6, a2 + 528);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  std::string::operator=(v7, (const std::string *)(a2 + 720));
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
  return a1;
}

void sub_100077D5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 743) < 0)
    operator delete(*v4);
  sub_100342428(v1 + 528, (_QWORD *)(v1 + 304), v1, (void **)(v1 + 104));
  nullsub_22(v3);
  nullsub_23(v2);
  _Unwind_Resume(a1);
}

__n128 sub_100077D9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t sub_100077DB0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003F9658;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 64) &= 0xF8u;
  if (a1 != a2)
  {
    sub_100199588((_QWORD *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_100199588((_QWORD *)(a1 + 32), *(char **)(a2 + 32), *(char **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void sub_100077E4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100077E88(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  if (a1 != a2)
  {
    sub_1001A91DC((void **)(a1 + 8), *(_QWORD *)(a2 + 8), *(const std::string **)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    sub_1001A9530((char *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100078040(a1 + 64, a2 + 64);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  sub_100077FFC(a1 + 136, a2 + 136);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  sub_100077FE0(a1 + 248, a2 + 248);
  sub_100077FE0(a1 + 296, a2 + 296);
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    sub_100077D9C(a1 + 384, a2 + 384);
    sub_100077D9C(a1 + 416, a2 + 416);
  }
  else
  {
    sub_100173A88(a1 + 344, *(std::string **)(a2 + 344), *(std::string **)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 3));
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    sub_100077D9C(a1 + 384, a2 + 384);
    sub_100077D9C(a1 + 416, a2 + 416);
    sub_100199588((_QWORD *)(a1 + 448), *(char **)(a2 + 448), *(char **)(a2 + 456), (uint64_t)(*(_QWORD *)(a2 + 456) - *(_QWORD *)(a2 + 448)) >> 3);
    sub_1001A7ED4((_QWORD *)(a1 + 472), *(char **)(a2 + 472), *(char **)(a2 + 480), (uint64_t)(*(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472)) >> 2);
  }
  v4 = *(_WORD *)(a2 + 496);
  *(_BYTE *)(a1 + 498) = *(_BYTE *)(a2 + 498);
  *(_WORD *)(a1 + 496) = v4;
  return a1;
}

__n128 sub_100077FE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return result;
}

double sub_100077FFC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return result;
}

__n128 sub_100078040(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

uint64_t sub_100078064(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    sub_100199588((_QWORD *)(a1 + 8), *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t sub_1000780C0(uint64_t a1, uint64_t a2)
{
  sub_1000777E4(a1 + 8, a2 + 8);
  sub_100078110(a1 + 56, a2 + 56);
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

double sub_100078110(uint64_t a1, uint64_t a2)
{
  double result;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

uint64_t sub_100078144(uint64_t a1)
{
  return a1 + 224;
}

uint64_t sub_10007814C(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_100078154(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

float sub_100078164(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 40);
}

uint64_t sub_100078190(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 264);
  return *(_QWORD *)(v1 + 48);
}

uint64_t sub_1000781BC(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_1000781C4(const void ***a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  else
    v5 = (unsigned __int8 *)(*a1)[1];
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 1;
  if (v7 >= 0)
    v8 = *a2;
  else
    v8 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v8, (size_t)(*a1)[1]) != 0;
  if (!*((_BYTE *)*a1 + 23))
    return 0;
  v9 = v4 - 1;
  do
  {
    v11 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v10 = v11;
    v12 = *(unsigned __int8 *)v8;
    v8 = (unsigned __int8 **)((char *)v8 + 1);
    result = v10 != v12;
  }
  while (v10 == v12 && v9-- != 0);
  return result;
}

uint64_t *sub_100078270()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A5A0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A5A0))
    return &qword_10041A668;
  qword_10041A668 = (uint64_t)sub_10016E2C8();
  unk_10041A670 = v2;
  byte_10041A678 = 0;
  byte_10041A67A = 0;
  byte_10041A67C = 0;
  __cxa_guard_release(&qword_10041A5A0);
  return &qword_10041A668;
}

void sub_1000782E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A5A0);
  _Unwind_Resume(a1);
}

void sub_1000782FC(uint64_t a1@<X8>)
{
  NSObject *v2;
  uint8_t v9[16];
  uint64_t v10[2];
  unint64_t v11;
  unint64_t v12;

  v12 = 0;
  v11 = 0;
  if (mach_get_times(&v12, &v11, v10))
  {
    if (qword_100417ED8 == -1)
    {
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
      {
LABEL_5:
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)a1 = _Q0;
        *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
        *(_QWORD *)(a1 + 24) = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FBF10);
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
    }
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "TCONV,mach_get_times failed", v9, 2u);
    goto LABEL_5;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 24) = 0;
  *(double *)(a1 + 16) = sub_10007AD94(v10);
  *(double *)(a1 + 8) = sub_10007841C(v12);
  *(double *)a1 = sub_10007841C(v11);
  *(_BYTE *)(a1 + 24) = 1;
}

double sub_10007841C(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_10041A058;
  if (*(double *)&qword_10041A058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_10041A058 = v2;
  }
  return v2 * (double)a1;
}

_QWORD *sub_1000784D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  std::string v14;
  int v15;
  _BYTE v16[24];
  std::runtime_error buf;

  if (a1[1] == a1[2])
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v14, "The caller is requesting configuration state while uninitialized.");
    std::runtime_error::runtime_error(&buf, &v14);
    buf.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
    sub_10018D04C((uint64_t)v16);
    sub_1000EF6D4(&buf, (uint64_t)"Converged ParticleFilterLocalizer::getBestLocalizerState(const ScoredLocations &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_filter_localizer.cpp", 899, (uint64_t)v16);
  }
  if ((sub_10007A15C(a1[35]) & 1) == 0 && sub_100258E50((uint64_t)a2))
    goto LABEL_15;
  sub_100078C70((uint64_t)a1, a1[1], a2, 0, (uint64_t)&v14);
  if (!v15)
    goto LABEL_12;
  v6 = a1[4];
  if (!v6 || !*(_BYTE *)(sub_100050DB0(v6) + 120))
  {
    if (a1[2] - a1[1] == 72)
    {
LABEL_9:
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
        v7 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_12;
        goto LABEL_11;
      }
      v7 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "No particle filters can yield.", (uint8_t *)&buf, 2u);
      }
LABEL_12:
      sub_10007A188(a3, (uint64_t)&v14);
      return sub_1000788EC(&v14);
    }
    sub_1000788EC(&v14);
LABEL_15:
    v9 = a1[1];
    if (0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3) < 2)
    {
LABEL_22:
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v14, "The above for loop always returns. How did we get here?");
      std::runtime_error::runtime_error(&buf, &v14);
      buf.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
      sub_10018D04C((uint64_t)v13);
      sub_1000F2F7C(&buf, (uint64_t)"Converged ParticleFilterLocalizer::getBestLocalizerState(const ScoredLocations &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_filter_localizer.cpp", 932, (uint64_t)v13);
    }
    v10 = 1;
    v11 = 72;
    while (1)
    {
      sub_100078C70((uint64_t)a1, v9 + v11, a2, 1, (uint64_t)&v14);
      if (!v15)
        goto LABEL_12;
      v12 = a1[4];
      if (v12 && *(_BYTE *)(sub_100050DB0(v12) + 120))
        break;
      if (v10 == -1 - 0x71C71C71C71C71C7 * ((a1[2] - a1[1]) >> 3))
        goto LABEL_9;
      sub_1000788EC(&v14);
      v9 = a1[1];
      ++v10;
      v11 += 72;
      if (v10 >= 0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3))
        goto LABEL_22;
    }
  }
  sub_100078C70((uint64_t)a1, a1[4], a2, 2, a3);
  return sub_1000788EC(&v14);
}

void sub_1000787DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)(v18 - 104);
  if (v20)
  {
    *(_QWORD *)(v18 - 96) = v20;
    operator delete(v20);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 80));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000788D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000788EC((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1000788EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (std::__shared_weak_count *)a1[29];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_100078A24((uint64_t)(a1 + 22));
    v5 = (_QWORD *)a1[19];
    if (!v5)
      goto LABEL_8;
  }
  else
  {
LABEL_5:
    sub_100078A24((uint64_t)(a1 + 22));
    v5 = (_QWORD *)a1[19];
    if (!v5)
      goto LABEL_8;
  }
  do
  {
    v11 = v5;
    v5 = (_QWORD *)*v5;
    v12 = (std::__shared_weak_count *)v11[3];
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    operator delete(v11);
  }
  while (v5);
LABEL_8:
  v6 = (void *)a1[17];
  a1[17] = 0;
  if (v6)
    operator delete(v6);
  sub_100078BB8(a1 + 3);
  v7 = (std::__shared_weak_count *)a1[1];
  if (!v7)
    return a1;
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
    return a1;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_100078A24(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[4];
      if (v7)
      {
        v8 = v2[5];
        v5 = (void *)v2[4];
        if (v8 != v7)
        {
          do
          {
            v9 = *(std::__shared_weak_count **)(v8 - 8);
            if (v9)
            {
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v11 = __ldaxr(p_shared_owners);
              while (__stlxr(v11 - 1, p_shared_owners));
              if (!v11)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
            v8 -= 16;
          }
          while (v8 != v7);
          v5 = (void *)v2[4];
        }
        v2[5] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_100078AF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v5 = (_QWORD *)a1[7];
  if (v5)
  {
    do
    {
      v8 = (_QWORD *)*v5;
      v9 = (_QWORD *)v5[5];
      if (v9)
      {
        do
        {
          v10 = (_QWORD *)*v9;
          operator delete(v9);
          v9 = v10;
        }
        while (v10);
      }
      v11 = (void *)v5[3];
      v5[3] = 0;
      if (v11)
        operator delete(v11);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = (void *)a1[5];
  a1[5] = 0;
  if (v6)
    operator delete(v6);
  return sub_10022D694((uint64_t)a1);
}

void sub_100078BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 80;
      }
      while (v3 != v1);
      v8 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 32) = v1;
      operator delete(v8);
    }
  }
}

uint64_t sub_100078C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;
  void *v11;
  void *__p[2];
  char v13;

  sub_100078D94(*(_QWORD *)(a1 + 280));
  sub_100078D84(*(_QWORD *)(a1 + 280));
  result = sub_100078DA4(a5, a2, a3, a4, a1 + 376);
  if (*(_DWORD *)(a5 + 240) == 4)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v13 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v11);
  }
  return result;
}

void sub_100078D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000788EC(v14);
    _Unwind_Resume(a1);
  }
  sub_1000788EC(v14);
  _Unwind_Resume(a1);
}

double sub_100078D84(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 248);
}

double sub_100078D94(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 252);
}

uint64_t sub_100078DA4(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  double v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const void ***v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  NSObject *v26;
  int v27;
  _BOOL4 v29;
  _DWORD v30[2];

  v10 = sub_100079278((_QWORD *)a1, a2);
  v11 = (uint64_t)(v10 + 3);
  sub_10007919C(v10, (uint64_t)(v10 + 3));
  sub_1000799B8(a1 + 136, v11);
  sub_100079AD0((_QWORD *)(a1 + 136), a1 + 224);
  v12 = vdupq_n_s64(0x7FF4000000000000uLL);
  *(int64x2_t *)(a1 + 248) = v12;
  *(_DWORD *)(a1 + 240) = 4;
  *(_DWORD *)(a1 + 244) = a4;
  *(int64x2_t *)(a1 + 264) = v12;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  if (sub_1000790EC((const void ***)(a1 + 224), (unsigned __int8 ***)&qword_10041AD40))
  {
    v13 = sub_100050DB0(a2);
    v14 = sub_1000799BC((_QWORD *)(a1 + 136), v13, a3, 0);
    v15 = 0;
    *(double *)(a1 + 248) = v14;
    *(_QWORD *)(a1 + 256) = v16;
    *(_QWORD *)(a1 + 264) = v17;
    *(_QWORD *)(a1 + 272) = v18;
    *(_DWORD *)(a1 + 240) = 2;
    if (!*(_BYTE *)(a1 + 288))
      return a1;
LABEL_14:
    if ((v15 & 1) == 0)
    {
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003FEBB8);
        v26 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          return a1;
        goto LABEL_17;
      }
      v26 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_17:
        v27 = *(_DWORD *)(a1 + 240);
        v30[0] = 67109120;
        v30[1] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Yield status is %d but forcing it to YIELD_OK", (uint8_t *)v30, 8u);
        return a1;
      }
    }
    return a1;
  }
  v15 = *(_BYTE *)(sub_100050DB0(a2) + 120);
  if (!v15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_DWORD *)(a1 + 240) = 3;
    if (!*(_BYTE *)(a1 + 288))
      return a1;
    goto LABEL_14;
  }
  v19 = *(_QWORD **)a5;
  v20 = *(_QWORD **)(a5 + 8);
  if (*(_QWORD **)a5 == v20)
    goto LABEL_12;
  while (1)
  {
    v21 = (const void ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 64))(*v19);
    if ((sub_1000790EC(v21, (unsigned __int8 ***)(a1 + 224)) & 1) != 0)
      break;
    v19 += 2;
    if (v19 == v20)
    {
      v19 = v20;
      break;
    }
  }
  if (v19 == *(_QWORD **)(a5 + 8))
  {
LABEL_12:
    v15 = 0;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 284) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 72))(*v19);
  *(_BYTE *)(a1 + 280) = 1;
  v22 = sub_100050DB0(a2);
  *(double *)(a1 + 248) = sub_1000799BC((_QWORD *)(a1 + 136), v22, a3, *(_DWORD *)(a1 + 284));
  *(_QWORD *)(a1 + 256) = v23;
  *(double *)(a1 + 264) = v24;
  *(double *)(a1 + 272) = v25;
  if (*(_DWORD *)(a1 + 244) == 2)
  {
    *(_DWORD *)(a1 + 240) = 0;
    return a1;
  }
  v29 = 1.0 - v24 > v24 * v25 && v24 * v25 < 0.5;
  v15 = !v29;
  *(_DWORD *)(a1 + 240) = v29;
  if (*(_BYTE *)(a1 + 288))
    goto LABEL_14;
  return a1;
}

void sub_100079078(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100195804(v4);
  sub_10022BB8C(v3);
  sub_100078BB8(v2);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000790EC(const void ***a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  else
    v5 = (unsigned __int8 *)(*a1)[1];
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v8 = *a2;
  else
    v8 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v8, (size_t)(*a1)[1]) == 0;
  if (!*((_BYTE *)*a1 + 23))
    return 1;
  v9 = v4 - 1;
  do
  {
    v11 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v10 = v11;
    v13 = *(unsigned __int8 *)v8;
    v8 = (unsigned __int8 **)((char *)v8 + 1);
    v12 = v13;
    v15 = v9-- != 0;
    result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

uint64_t sub_10007919C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000795C4(a2, *a1, a1[2]);
}

_QWORD *sub_1000791AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_100050DB0(a2);
  v5 = (char *)operator new(0x30uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  *(_QWORD *)v5 = off_1003FC2B0;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  sub_1001E3558((__n128 **)v5 + 3, *(__n128 **)(v4 + 8), *(__n128 **)(v4 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 4));
  *a1 = v5 + 24;
  a1[1] = v5;
  a1[2] = sub_100079270(a2);
  return a1;
}

void sub_100079244(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_100079258(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100079270(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_10007927C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  double v18;
  double v19;
  unint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  double *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  _OWORD *v33;
  double *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int *v42;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  v40 = a1 + 40;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a3;
  v4 = *a2;
  v5 = a2[1];
  v6 = -INFINITY;
  if (*a2 != v5)
  {
    while (1)
    {
      v41 = *(_QWORD *)(v4 + 56);
      v42 = (int *)&v41;
      v8 = sub_100230B10(a1, &v41, (uint64_t)&unk_100395958, (_QWORD **)&v42);
      v9 = v8;
      v10 = *((_QWORD *)v8 + 7);
      if (v10 >= *((_QWORD *)v8 + 8))
      {
        v16 = sub_100230E74((void **)v8 + 6, (__n128 *)v4);
      }
      else
      {
        sub_10003FADC(*((__n128 **)v8 + 7), (__n128 *)v4);
        v11 = *(_OWORD *)(v4 + 16);
        v12 = *(_OWORD *)(v4 + 32);
        *(_WORD *)(v10 + 48) = *(_WORD *)(v4 + 48);
        *(_OWORD *)(v10 + 16) = v11;
        *(_OWORD *)(v10 + 32) = v12;
        *(_QWORD *)(v10 + 56) = *(_QWORD *)(v4 + 56);
        v13 = *(_QWORD *)(v4 + 64);
        *(_QWORD *)(v10 + 64) = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        *(_QWORD *)(v10 + 72) = *(_QWORD *)(v4 + 72);
        v16 = (char *)(v10 + 80);
        *((_QWORD *)v9 + 7) = v10 + 80;
      }
      *((_QWORD *)v9 + 7) = v16;
      v42 = (int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 56))(v41) + 1616);
      v17 = sub_100231104(v40, v42, (uint64_t)&unk_100395958, &v42);
      sub_100231444((uint64_t)(v17 + 24), &v41, &v41);
      v18 = sub_100047C20(v4);
      v19 = v18;
      v21 = (double *)*((_QWORD *)v9 + 4);
      v20 = *((_QWORD *)v9 + 5);
      if ((unint64_t)v21 >= v20)
        break;
      *v21 = v18;
      v7 = (uint64_t)(v21 + 1);
LABEL_4:
      *((_QWORD *)v9 + 4) = v7;
      if (v6 < v19)
        v6 = v19;
      v4 += 80;
      if (v4 == v5)
        goto LABEL_33;
    }
    v22 = (double *)*((_QWORD *)v9 + 3);
    v23 = v21 - v22;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_1000D02C0();
    v25 = v20 - (_QWORD)v22;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        sub_1000CDEB8();
      v27 = operator new(8 * v26);
      v28 = (double *)&v27[8 * v23];
      *v28 = v19;
      v7 = (uint64_t)(v28 + 1);
      if (v21 == v22)
        goto LABEL_31;
    }
    else
    {
      v27 = 0;
      v28 = (double *)(8 * v23);
      *(double *)(8 * v23) = v18;
      v7 = 8 * v23 + 8;
      if (v21 == v22)
      {
LABEL_31:
        *((_QWORD *)v9 + 3) = v28;
        *((_QWORD *)v9 + 4) = v7;
        *((_QWORD *)v9 + 5) = &v27[8 * v26];
        if (v22)
          operator delete(v22);
        goto LABEL_4;
      }
    }
    v29 = (char *)(v21 - 1) - (char *)v22;
    if (v29 < 0x58)
      goto LABEL_41;
    if ((unint64_t)((char *)v22 - v27) < 0x20)
      goto LABEL_41;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v21[v31 / 0xFFFFFFFFFFFFFFF8];
    v28 = (double *)((char *)v28 - v31);
    v33 = &v27[8 * v23 - 16];
    v34 = v21 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *v33 = v36;
      v33 -= 2;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v21 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v37 = *((_QWORD *)v21-- - 1);
        *((_QWORD *)v28-- - 1) = v37;
      }
      while (v21 != v22);
    }
    goto LABEL_31;
  }
LABEL_33:
  for (i = a1 + 16; ; sub_100303410((float64x2_t **)(i + 24), v6))
  {
    i = *(_QWORD *)i;
    if (!i)
      break;
  }
  return a1;
}

void sub_100079584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 56) = v13;
  sub_1000FE50C(a10);
  sub_10022D774(a11);
  sub_10022D694(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1000795C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double i;
  double v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  void *__p[2];
  __int128 v38;
  int v39;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  v4 = *(uint64_t ***)(a2 + 16);
  if (!v4)
    return a1;
  do
  {
    while (2)
    {
      v5 = (*(uint64_t (**)(uint64_t *))(*v4[2] + 64))(v4[2]);
      v6 = (double *)v4[3];
      v7 = (double *)v4[4];
      for (i = 0.0; v6 != v7; i = i + v9)
        v9 = *v6++;
      v39 = 0;
      v39 = *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v4[2] + 56))(v4[2]) + 1616);
      __p[0] = *(void **)&i;
      LODWORD(__p[1]) = v39;
      sub_1002CC5E8(a1, (uint64_t ***)v5, (const void **)v5, __p);
      *(double *)(a1 + 80) = i + *(double *)(a1 + 80);
      v10 = *(_QWORD *)(a1 + 48);
      if (v10)
      {
        v11 = v39;
        v12 = v39;
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v13.i16[0] = vaddlv_u8(v13);
        if (v13.u32[0] > 1uLL)
        {
          v14 = v39;
          if (v10 <= v39)
            v14 = v39 % v10;
        }
        else
        {
          v14 = (v10 - 1) & v39;
        }
        v15 = *(uint64_t ***)(*v3 + 8 * v14);
        if (v15)
        {
          v16 = *v15;
          if (v16)
          {
            if (v13.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v39)
                {
                  if (*((_DWORD *)v16 + 4) == v39)
                    goto LABEL_38;
                }
                else if ((v18 & (v10 - 1)) != v14)
                {
                  goto LABEL_26;
                }
                v16 = (uint64_t *)*v16;
                if (!v16)
                  goto LABEL_26;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v39)
              {
                if (*((_DWORD *)v16 + 4) == v39)
                  goto LABEL_38;
              }
              else
              {
                if (v17 >= v10)
                  v17 %= v10;
                if (v17 != v14)
                  break;
              }
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_26:
      *(_OWORD *)__p = 0u;
      v38 = 0u;
      sub_1002CC950((uint64_t)v3, &v39, &v39, (uint64_t)__p);
      v19 = (char *)__p[1];
      if (__p[1])
      {
        v20 = (char *)v38;
        v21 = __p[1];
        if ((void *)v38 != __p[1])
        {
          do
          {
            v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldaxr(p_shared_owners);
              while (__stlxr(v24 - 1, p_shared_owners));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v20 -= 16;
          }
          while (v20 != v19);
          v21 = __p[1];
        }
        *(_QWORD *)&v38 = v19;
        operator delete(v21);
      }
      v11 = v39;
      v10 = *(_QWORD *)(a1 + 48);
      v12 = v39;
LABEL_38:
      if (!v10)
        goto LABEL_64;
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = v12;
        if (v10 <= v12)
          v26 = v12 % v10;
      }
      else
      {
        v26 = (v10 - 1) & v12;
      }
      v27 = *(uint64_t ***)(*v3 + 8 * v26);
      if (!v27 || (v28 = *v27) == 0)
LABEL_64:
        sub_10018CB98("unordered_map::at: key not found");
      if (v25.u32[0] < 2uLL)
      {
        v29 = v10 - 1;
        while (1)
        {
          v31 = v28[1];
          if (v31 == v12)
          {
            if (*((_DWORD *)v28 + 4) == v11)
              goto LABEL_58;
          }
          else if ((v31 & v29) != v26)
          {
            goto LABEL_64;
          }
          v28 = (uint64_t *)*v28;
          if (!v28)
            goto LABEL_64;
        }
      }
      while (1)
      {
        v30 = v28[1];
        if (v30 == v12)
          break;
        if (v30 >= v10)
          v30 %= v10;
        if (v30 != v26)
          goto LABEL_64;
LABEL_48:
        v28 = (uint64_t *)*v28;
        if (!v28)
          goto LABEL_64;
      }
      if (*((_DWORD *)v28 + 4) != v11)
        goto LABEL_48;
LABEL_58:
      *((double *)v28 + 3) = i + *((double *)v28 + 3);
      v32 = (_QWORD *)v28[5];
      if ((unint64_t)v32 >= v28[6])
      {
        v28[5] = (uint64_t)sub_1001E3C34((uint64_t)(v28 + 4), (_QWORD *)v5);
        v4 = (uint64_t **)*v4;
        if (!v4)
          return a1;
        continue;
      }
      break;
    }
    *v32 = *(_QWORD *)v5;
    v33 = *(_QWORD *)(v5 + 8);
    v32[1] = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v28[5] = (uint64_t)(v32 + 2);
    v4 = (uint64_t **)*v4;
  }
  while (v4);
  return a1;
}

void sub_100079968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100078A24(v2);
  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

double sub_1000799BC(_QWORD *a1, uint64_t a2, uint64_t *a3, int a4)
{
  const void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v11;
  std::__shared_weak_count *v12;

  sub_100079D18(a3, a4, (uint64_t)&v11);
  v6 = v11;
  sub_100079C90(a2);
  sub_100079AD0(a1, (uint64_t)&v11);
  sub_10007A028((uint64_t)a1, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1.0 - *(double *)&v6;
}

void sub_100079ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100195804((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100079AD0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  double *v3;
  uint64_t *v5;
  double v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  const void ***v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = (double *)a1[7];
  if (!v3)
    goto LABEL_27;
  v5 = 0;
  v6 = -INFINITY;
  do
  {
    if (v3[3] > v6 && v3[3] > 0.0)
    {
      v5 = (uint64_t *)(v3 + 3);
      v6 = v3[3];
    }
    v3 = *(double **)v3;
  }
  while (v3);
  if (v5)
  {
    v7 = *(_QWORD *)algn_10041AD48;
    *(_QWORD *)a2 = qword_10041AD40;
    *(_QWORD *)(a2 + 8) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v5[1];
    v11 = v5[2];
    if (v10 != v11)
    {
      v12 = NAN;
      do
      {
        v13 = sub_1000A9C6C(a1, (uint64_t ***)v10);
        if (!v13)
          sub_10018CB98("unordered_map::at: key not found");
        v14 = *((double *)v13 + 4);
        v15 = sub_1000790EC((const void ***)a2, (unsigned __int8 ***)&qword_10041AD40);
        if (v14 > v12)
          v16 = 1;
        else
          v16 = v15;
        if (v16 == 1)
        {
          v18 = *(uint64_t ***)v10;
          v17 = *(_QWORD *)(v10 + 8);
          if (v17)
          {
            v19 = (unint64_t *)(v17 + 8);
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = *(std::__shared_weak_count **)(a2 + 8);
          *(_QWORD *)a2 = v18;
          *(_QWORD *)(a2 + 8) = v17;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v12 = v14;
        }
        v10 += 16;
      }
      while (v10 != v11);
    }
  }
  else
  {
LABEL_27:
    v24 = *(_QWORD *)algn_10041AD48;
    *(_QWORD *)a2 = qword_10041AD40;
    *(_QWORD *)(a2 + 8) = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
}

void sub_100079C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100195804(v1);
  _Unwind_Resume(a1);
}

void sub_100079C7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100195804(v1);
  _Unwind_Resume(a1);
}

long double sub_100079C90(uint64_t a1)
{
  uint64_t *v1;
  double v2;
  double v3;
  _BYTE v5[16];

  v1 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    return 1.0;
  v2 = sub_100047C20(a1 + 32);
  sub_10023FC48(v1, (uint64_t)v5);
  v3 = sub_100047C20((uint64_t)v5);
  return 1.0 / (exp(-(v2 - v3)) + 1.0);
}

void sub_100079D18(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  double *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v4 = *a1;
  if (a1[1] == *a1)
  {
    v7 = 0;
LABEL_34:
    *(_OWORD *)a3 = xmmword_100394050;
    *(_OWORD *)(a3 + 16) = xmmword_100394050;
    *(_OWORD *)(a3 + 32) = xmmword_100394050;
    *(_OWORD *)(a3 + 48) = xmmword_100394050;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 80) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    *(_BYTE *)(a3 + 128) = 0;
    *(_BYTE *)(a3 + 136) = 0;
    *(_BYTE *)(a3 + 152) = 0;
    if (!v7)
      return;
LABEL_35:
    operator delete(v7);
    return;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    if (sub_100086528(*(_QWORD *)(v4 + 8 * v10)) != a2)
      goto LABEL_4;
    v18 = (_OWORD *)(a1[3] + 160 * v10);
    if (v9 < v8)
    {
      v11 = v18[1];
      *(_OWORD *)v9 = *v18;
      *((_OWORD *)v9 + 1) = v11;
      v12 = v18[2];
      v13 = v18[3];
      v14 = v18[5];
      *((_OWORD *)v9 + 4) = v18[4];
      *((_OWORD *)v9 + 5) = v14;
      *((_OWORD *)v9 + 2) = v12;
      *((_OWORD *)v9 + 3) = v13;
      v15 = v18[6];
      v16 = v18[7];
      v17 = v18[9];
      *((_OWORD *)v9 + 8) = v18[8];
      *((_OWORD *)v9 + 9) = v17;
      *((_OWORD *)v9 + 6) = v15;
      *((_OWORD *)v9 + 7) = v16;
      v9 += 160;
      goto LABEL_4;
    }
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5) + 1;
    if (v19 > 0x199999999999999)
      sub_1000D02C0();
    if (0x999999999999999ALL * ((v8 - v7) >> 5) > v19)
      v19 = 0x999999999999999ALL * ((v8 - v7) >> 5);
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 5) >= 0xCCCCCCCCCCCCCCLL)
      v20 = 0x199999999999999;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 > 0x199999999999999)
        sub_1000CDEB8();
      v21 = (char *)operator new(160 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[32 * ((v9 - v7) >> 5)];
    v23 = v18[1];
    *(_OWORD *)v22 = *v18;
    *((_OWORD *)v22 + 1) = v23;
    v24 = v18[2];
    v25 = v18[3];
    v26 = v18[5];
    *((_OWORD *)v22 + 4) = v18[4];
    *((_OWORD *)v22 + 5) = v26;
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = v25;
    v27 = v18[6];
    v28 = v18[7];
    v29 = v18[9];
    *((_OWORD *)v22 + 8) = v18[8];
    *((_OWORD *)v22 + 9) = v29;
    *((_OWORD *)v22 + 6) = v27;
    *((_OWORD *)v22 + 7) = v28;
    if (v9 == v7)
    {
      v38 = &v21[32 * ((v9 - v7) >> 5)];
      v8 = &v21[160 * v20];
      v9 = v22 + 160;
      if (!v7)
        goto LABEL_22;
    }
    else
    {
      v30 = &v21[32 * ((v9 - v7) >> 5)];
      do
      {
        v31 = *((_OWORD *)v9 - 9);
        *((_OWORD *)v30 - 10) = *((_OWORD *)v9 - 10);
        *((_OWORD *)v30 - 9) = v31;
        v32 = *((_OWORD *)v9 - 8);
        v33 = *((_OWORD *)v9 - 7);
        v34 = *((_OWORD *)v9 - 5);
        *((_OWORD *)v30 - 6) = *((_OWORD *)v9 - 6);
        *((_OWORD *)v30 - 5) = v34;
        *((_OWORD *)v30 - 8) = v32;
        *((_OWORD *)v30 - 7) = v33;
        v35 = *((_OWORD *)v9 - 4);
        v36 = *((_OWORD *)v9 - 3);
        v37 = *((_OWORD *)v9 - 1);
        v38 = v30 - 160;
        *((_OWORD *)v30 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v30 - 1) = v37;
        *((_OWORD *)v30 - 4) = v35;
        *((_OWORD *)v30 - 3) = v36;
        v9 -= 160;
        v30 -= 160;
      }
      while (v9 != v7);
      v8 = &v21[160 * v20];
      v9 = v22 + 160;
      if (!v7)
        goto LABEL_22;
    }
    operator delete(v7);
LABEL_22:
    v7 = v38;
LABEL_4:
    ++v10;
    v4 = *a1;
  }
  while (v10 < (a1[1] - *a1) >> 3);
  if (v7 == v9)
    goto LABEL_34;
  v39 = v7 + 160;
  v40 = (double *)v7;
  if (v7 + 160 != v9)
  {
    v40 = (double *)v7;
    do
    {
      if (v40[1] < *((double *)v39 + 1))
        v40 = (double *)v39;
      v39 += 160;
    }
    while (v39 != v9);
  }
  v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v40;
  *(_OWORD *)(a3 + 16) = v41;
  v42 = *((_OWORD *)v40 + 2);
  v43 = *((_OWORD *)v40 + 3);
  v44 = *((_OWORD *)v40 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v40 + 4);
  *(_OWORD *)(a3 + 80) = v44;
  *(_OWORD *)(a3 + 32) = v42;
  *(_OWORD *)(a3 + 48) = v43;
  v45 = *((_OWORD *)v40 + 6);
  v46 = *((_OWORD *)v40 + 7);
  v47 = *((_OWORD *)v40 + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)v40 + 8);
  *(_OWORD *)(a3 + 144) = v47;
  *(_OWORD *)(a3 + 96) = v45;
  *(_OWORD *)(a3 + 112) = v46;
  if (v7)
    goto LABEL_35;
}

void sub_100079FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10007A028(uint64_t a1, const void ***a2)
{
  char v4;
  double result;
  const void ***v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  double **v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = sub_1000790EC(a2, (unsigned __int8 ***)&qword_10041AD40);
  result = 0.0;
  if ((v4 & 1) == 0)
  {
    v6 = sub_1000A9C6C((_QWORD *)a1, (uint64_t ***)a2);
    if (!v6)
      goto LABEL_25;
    v7 = *(int8x8_t *)(a1 + 48);
    if (!*(_QWORD *)&v7)
      goto LABEL_25;
    v8 = *((int *)v6 + 10);
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = *((int *)v6 + 10);
      if (*(_QWORD *)&v7 <= v8)
        v10 = v8 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v8;
    }
    v11 = *(double ***)(*(_QWORD *)(a1 + 40) + 8 * v10);
    if (!v11 || (v12 = *v11) == 0)
LABEL_25:
      sub_10018CB98("unordered_map::at: key not found");
    if (v9.u32[0] < 2uLL)
    {
      v13 = *(_QWORD *)&v7 - 1;
      while (1)
      {
        v15 = *((_QWORD *)v12 + 1);
        if (v15 == v8)
        {
          if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
            return v12[3] / *(double *)(a1 + 80);
        }
        else if ((v15 & v13) != v10)
        {
          goto LABEL_25;
        }
        v12 = *(double **)v12;
        if (!v12)
          goto LABEL_25;
      }
    }
    while (1)
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v14 == v8)
      {
        if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
          return v12[3] / *(double *)(a1 + 80);
      }
      else
      {
        if (v14 >= *(_QWORD *)&v7)
          v14 %= *(_QWORD *)&v7;
        if (v14 != v10)
          goto LABEL_25;
      }
      v12 = *(double **)v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_10007A15C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 80);
  return *(unsigned __int8 *)(v1 + 36);
}

uint64_t sub_10007A188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_10007A604(a1 + 24, (uint64_t *)(a2 + 24));
  sub_10007A3DC(a1 + 136, a2 + 136);
  sub_10007A29C(a1 + 176, a2 + 176);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v7 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)(a2 + 240);
  v11 = *(_OWORD *)(a2 + 256);
  v12 = *(_OWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 272) = v12;
  *(_OWORD *)(a1 + 240) = v10;
  return a1;
}

void sub_10007A248(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v5;
  void *v6;

  v5 = *(void ***)(v1 + 152);
  if (v5)
    sub_100343E24(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    operator delete(v6);
  sub_100078BB8(v2);
  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

void sub_10007A288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A29C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_10022E3C8(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_10007A3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100078A24(v1);
  _Unwind_Resume(a1);
}

void sub_10007A3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100078A24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A3DC(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(uint64_t ****)(a2 + 16); i; i = (uint64_t ***)*i)
    sub_10022E06C(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10007A4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_10007A508(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000F7AE8(v1);
  _Unwind_Resume(a1);
}

void sub_10007A51C()
{
  operator new();
}

void sub_10007A56C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_10007A578(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double sub_10007A58C@<D0>(uint64_t a1@<X0>, const void ***a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _BYTE v7[8];
  __int128 v8;

  if (sub_1000790EC(a2, (unsigned __int8 ***)&qword_10041AD40))
    sub_10007A51C();
  sub_1000B1E3C(a1, (uint64_t ***)a2, (uint64_t)v7);
  result = *(double *)&v8;
  *a3 = v8;
  return result;
}

uint64_t sub_10007A604(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = sub_10007A7F8(a1, (uint64_t)a2);
  sub_10007A6B8(v4 + 40, (uint64_t)(a2 + 5));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1001900A4((char *)(a1 + 80), a2[10], a2[11], 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 3));
  *(_QWORD *)(a1 + 104) = a2[13];
  return a1;
}

void sub_10007A674(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void *v5;

  v4 = *(void ***)(v1 + 56);
  if (v4)
    sub_100343E78(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    sub_10022D694(v1);
    _Unwind_Resume(a1);
  }
  sub_10022D694(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A6B8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_10022D7F4(a1, i + 4, i + 4);
  return a1;
}

void sub_10007A7D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022D774(v1);
  _Unwind_Resume(a1);
}

void sub_10007A7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022D774(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A7F8(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_100005DD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10022D15C(a1, i + 2, i + 2);
  return a1;
}

void sub_10007A910(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022D694(v1);
  _Unwind_Resume(a1);
}

void sub_10007A924(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10022D694(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_10007A938@<Q0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *a2 = result;
  a2[1].i64[0] = a1;
  return result;
}

int64x2_t sub_10007A94C@<Q0>(uint64_t a1@<X8>)
{
  _OWORD *v2;
  const std::string *v3;
  int64x2_t v4;
  int64x2_t result;

  *(_QWORD *)a1 = off_1003F97F8;
  *(_QWORD *)(a1 + 8) = off_1003F9A68;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) &= 0xFCu;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = off_1003F9A88;
  *(_BYTE *)(a1 + 64) &= 0xFCu;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 304) = off_1003F97B8;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 456) &= 0xC0u;
  *(_WORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = off_1003F9A88;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) &= 0xFCu;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = off_1003F97D8;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 592) &= 0xF8u;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  v2 = (_OWORD *)(a1 + 616);
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *(_DWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_QWORD *)(a1 + 752) = *(_QWORD *)(a1 + 752) & 0xF000000000000000 | 0x10000000;
  *(_QWORD *)(a1 + 296) = 4;
  v3 = (const std::string *)sub_100050DB0((uint64_t)&qword_10041AD40);
  std::string::operator=((std::string *)(a1 + 104), v3);
  v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 152) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(int64x2_t *)(a1 + 48) = v4;
  sub_10007AB6C(a1, NAN);
  sub_10007AB9C(a1, NAN);
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 200) = result;
  *(int64x2_t *)(a1 + 216) = result;
  *(_QWORD *)(a1 + 232) = 0x7FF8000000000000;
  return result;
}

void sub_10007AB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100076820(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10007AB44(uint64_t result, double a2)
{
  *(double *)(result + 680) = a2;
  *(_QWORD *)(result + 752) |= 0x20000000000000uLL;
  return result;
}

uint64_t sub_10007AB58(uint64_t result, double a2)
{
  *(double *)(result + 672) = a2;
  *(_QWORD *)(result + 752) |= 0x10000000000000uLL;
  return result;
}

uint64_t sub_10007AB6C(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

uint64_t sub_10007AB74(uint64_t result, double a2)
{
  *(double *)(result + 688) = a2;
  *(_QWORD *)(result + 752) |= 0x40000000000000uLL;
  return result;
}

uint64_t sub_10007AB88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 240) = a2;
  *(_QWORD *)(result + 752) |= 0x200000uLL;
  return result;
}

uint64_t sub_10007AB9C(uint64_t result, double a2)
{
  *(double *)(result + 72) = a2;
  return result;
}

void sub_10007ABA4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  BOOL v14;
  char *v15;
  void *v16;
  char *v17;
  void *__p;
  char *v19;
  uint64_t v20;

  v3 = a1[1];
  v4 = a1[2] - v3;
  if (v4 == 760)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    v5 = v4 / 760;
    if (v5 <= a2)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        if (v6 != a2)
        {
          v7 = *(_QWORD *)(v3 + 760 * a2 + 240);
          v8 = *a1;
          v9 = (_QWORD *)(v3 + 240 + 760 * v6);
          while (v8 < v7 - *v9)
          {
            v9 += 95;
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            if (a2 == v6)
              goto LABEL_6;
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    __p = 0;
    v19 = 0;
    v20 = 0;
    sub_10021EF74(&__p, v3, v3 + 760 * v6, v6);
    if (v6)
    {
      v10 = v3 + 760 * v6;
      v11 = a1[2];
      if (v10 != v11)
      {
        v12 = 760 * v6;
        do
        {
          sub_100077824(v3, v3 + v12);
          v3 += 760;
        }
        while (v3 + v12 != v11);
        v10 = a1[2];
      }
      if (v10 != v3)
      {
        v13 = (void (***)(_QWORD))(v10 - 760);
        do
        {
          (**v13)(v13);
          v14 = v13 == (void (***)(_QWORD))v3;
          v13 -= 95;
        }
        while (!v14);
      }
      a1[2] = v3;
    }
    v15 = (char *)__p;
    if (__p)
    {
      v16 = __p;
      if (v19 != __p)
      {
        v17 = v19 - 760;
        do
        {
          (**(void (***)(char *))v17)(v17);
          v14 = v17 == v15;
          v17 -= 760;
        }
        while (!v14);
        v16 = __p;
      }
      v19 = v15;
      operator delete(v16);
    }
  }
}

void sub_10007AD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a10)
    sub_100343CA8(&a10, a10);
  _Unwind_Resume(exception_object);
}

double sub_10007AD94(uint64_t *a1)
{
  return (double)a1[1] / 1000000000.0 + (double)*a1 - kCFAbsoluteTimeIntervalSince1970;
}

void sub_10007ADC8(int64x2_t *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  double v11;
  NSObject *v12;
  double v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned __int8 v20;
  double v21;
  NSObject *v22;
  double v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned __int8 v30;
  uint8_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned __int8 v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  int v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  int v52;
  std::string::size_type v53;
  std::string::size_type size;
  void *v55;
  uint64_t v56;
  int v57;
  _QWORD v58[2];
  std::string v59;
  void *v60;
  char *v61;
  void *v62;
  void *v63;
  std::string v64;
  void *v65;
  void *v66;
  uint8_t buf[16];
  int64_t v68;
  __int128 __p;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;

  if (a3 && *(_BYTE *)(a3 + 48) && *(_DWORD *)(a3 + 52))
    return;
  if (!a1[136].i8[0])
  {
    v13 = 0.0;
    goto LABEL_13;
  }
  v8 = sub_10007B778();
  v9 = v8;
  v10 = atomic_load((unsigned __int8 *)v8 + 26);
  if ((v10 & 1) == 0 && !*((_BYTE *)v8 + 16))
  {
    *((_DWORD *)v8 + 5) = sub_1000AAF28((uint64_t)v8, (unsigned int *)v8 + 3);
    *((_BYTE *)v9 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v9 + 26);
  }
  v11 = (double)(uint64_t)(a2 - a1[124].i64[1] + 1000000000 * *((int *)v9 + 5));
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
    v12 = qword_100417EE0;
    v13 = v11 / 1000000000.0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      goto LABEL_11;
    goto LABEL_10;
  }
  v12 = qword_100417EE0;
  v13 = v11 / 1000000000.0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_10:
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Got a scan after %f seconds", buf, 0xCu);
  }
LABEL_11:
  a1[136].i8[0] = 0;
LABEL_13:
  v14 = sub_10007B778();
  v15 = v14;
  v16 = atomic_load((unsigned __int8 *)v14 + 26);
  if ((v16 & 1) != 0 || *((_BYTE *)v14 + 16))
  {
    v17 = a2 + 1000000000 * *((int *)v14 + 5);
    if (a1[124].i8[0])
      goto LABEL_16;
LABEL_46:
    a1[124].i8[0] = 1;
    a1[124].i64[1] = v17;
    if (*a4 != a4[1])
    {
LABEL_17:
      if (!a1[136].i8[1])
        goto LABEL_37;
      v18 = sub_10007B778();
      v19 = v18;
      v20 = atomic_load((unsigned __int8 *)v18 + 26);
      if ((v20 & 1) == 0 && !*((_BYTE *)v18 + 16))
      {
        *((_DWORD *)v18 + 5) = sub_1000AAF28((uint64_t)v18, (unsigned int *)v18 + 3);
        *((_BYTE *)v19 + 16) = 1;
        atomic_store(1u, (unsigned __int8 *)v19 + 26);
      }
      v21 = (double)(uint64_t)(a2 - a1[125].i64[1] + 1000000000 * *((int *)v19 + 5));
      if (qword_100417ED8 == -1)
      {
        v22 = qword_100417EE0;
        v23 = v21 / 1000000000.0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
          goto LABEL_24;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FE1F0);
        v22 = qword_100417EE0;
        v23 = v21 / 1000000000.0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        {
LABEL_24:
          a1[136].i8[1] = 0;
          if (v23 - v13 >= 20.0)
          {
            std::to_string(&v59, (uint64_t)(v23 - v13));
            v24 = std::string::insert(&v59, 0, "Non-empty scan after ");
            v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v64.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            v26 = std::string::append(&v64, "s");
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v68 = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)buf = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            v28 = sub_10031598C();
            v29 = v28;
            v30 = atomic_load((unsigned __int8 *)v28 + 20);
            if ((v30 & 1) == 0 && !*((_BYTE *)v28 + 16))
            {
              *((_BYTE *)v28 + 17) = sub_1000AC110((uint64_t)v28, (_BYTE *)v28 + 9);
              *((_BYTE *)v29 + 16) = 1;
              atomic_store(1u, (unsigned __int8 *)v29 + 20);
            }
            if (v68 >= 0)
              v31 = buf;
            else
              v31 = *(uint8_t **)buf;
            sub_10021689C(*((unsigned __int8 *)v29 + 17), 3u, (uint64_t)"Got a non-empty scan", (uint64_t)v31, 5000000000);
            if (SHIBYTE(v68) < 0)
              operator delete(*(void **)buf);
          }
LABEL_37:
          v32 = sub_10007B778();
          v33 = v32;
          v34 = atomic_load((unsigned __int8 *)v32 + 26);
          if ((v34 & 1) != 0 || *((_BYTE *)v32 + 16))
          {
            v35 = a2 + 1000000000 * *((int *)v32 + 5);
            if (a1[125].i8[0])
              goto LABEL_41;
          }
          else
          {
            *((_DWORD *)v32 + 5) = sub_1000AAF28((uint64_t)v32, (unsigned int *)v32 + 3);
            *((_BYTE *)v33 + 16) = 1;
            atomic_store(1u, (unsigned __int8 *)v33 + 26);
            v35 = a2 + 1000000000 * *((int *)v33 + 5);
            if (a1[125].i8[0])
            {
LABEL_41:
              a1[125].i64[1] = v35;
              sub_10007B804(a4, (uint64_t *)buf);
              v36 = a1[8].i64[0];
              v58[0] = a1[7].i64[1];
              v58[1] = v36;
              if (v36)
              {
                v37 = (unint64_t *)(v36 + 8);
                do
                  v38 = __ldxr(v37);
                while (__stxr(v38 + 1, v37));
              }
              sub_1000428F8((uint64_t)a1, (uint64_t *)buf, a3, a2, v58);
            }
          }
          a1[125].i8[0] = 1;
          goto LABEL_41;
        }
      }
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Got a non-empty scan after %f", buf, 0xCu);
      goto LABEL_24;
    }
    goto LABEL_47;
  }
  *((_DWORD *)v14 + 5) = sub_1000AAF28((uint64_t)v14, (unsigned int *)v14 + 3);
  *((_BYTE *)v15 + 16) = 1;
  atomic_store(1u, (unsigned __int8 *)v15 + 26);
  v17 = a2 + 1000000000 * *((int *)v15 + 5);
  if (!a1[124].i8[0])
    goto LABEL_46;
LABEL_16:
  a1[124].i64[1] = v17;
  if (*a4 != a4[1])
    goto LABEL_17;
LABEL_47:
  sub_10023291C(a1[7].i64[1], a2);
  memset(buf, 0, sizeof(buf));
  v68 = 0;
  sub_100219130(&v64, buf, a4, a2);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  sub_100043C90(&v60, (uint64_t *)&v64);
  sub_100045E90((uint64_t)buf, (uint64_t)&v60, 0, 0.0);
  v39 = a1[14].u64[1];
  if (v39 >= a1[15].i64[0])
  {
    v41 = sub_10021E6C8(a1 + 14, (uint64_t)buf);
    v42 = (void *)__p;
    a1[14].i64[1] = (uint64_t)v41;
    if (v42)
    {
      *((_QWORD *)&__p + 1) = v42;
      operator delete(v42);
    }
  }
  else
  {
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = 0;
    *(_QWORD *)v39 = 0;
    *(_QWORD *)(v39 + 8) = 0;
    *(_OWORD *)v39 = *(_OWORD *)buf;
    *(_QWORD *)(v39 + 16) = v68;
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)(v39 + 32) = 0;
    *(_QWORD *)(v39 + 40) = 0;
    *(_OWORD *)(v39 + 24) = __p;
    *(_QWORD *)(v39 + 40) = v70;
    v68 = 0;
    __p = 0uLL;
    v70 = 0;
    *(_QWORD *)(v39 + 48) = v71;
    v40 = v72;
    *(_BYTE *)(v39 + 64) = v73;
    *(_QWORD *)(v39 + 56) = v40;
    a1[14].i64[1] = v39 + 72;
  }
  v43 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v44 = *(_QWORD *)&buf[8];
    v45 = *(void **)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      do
      {
        v47 = *(_DWORD *)(v44 - 176);
        if (v47 == v47 >> 31)
        {
          if (*(_BYTE *)(v44 - 128))
            *(_BYTE *)(v44 - 128) = 0;
        }
        else
        {
          v46 = *(_QWORD *)(v44 - 168);
          if (v47 < 0)
          {
            if (v46)
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          }
          else
          {
            (*(void (**)(uint64_t))v46)(v44 - 168);
          }
        }
        v44 -= 208;
      }
      while (v44 != v43);
      v45 = *(void **)buf;
    }
    *(_QWORD *)&buf[8] = v43;
    operator delete(v45);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  v48 = (char *)v60;
  if (v60)
  {
    v49 = v61;
    v50 = v60;
    if (v61 != v60)
    {
      do
      {
        v52 = *((_DWORD *)v49 - 44);
        if (v52 == v52 >> 31)
        {
          if (*(v49 - 128))
            *(v49 - 128) = 0;
        }
        else
        {
          v51 = *((_QWORD *)v49 - 21);
          if (v52 < 0)
          {
            if (v51)
              (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
          }
          else
          {
            (*(void (**)(char *))v51)(v49 - 168);
          }
        }
        v49 -= 208;
      }
      while (v49 != v48);
      v50 = v60;
    }
    v61 = v48;
    operator delete(v50);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  v53 = v64.__r_.__value_.__r.__words[0];
  if (v64.__r_.__value_.__r.__words[0])
  {
    size = v64.__r_.__value_.__l.__size_;
    v55 = (void *)v64.__r_.__value_.__r.__words[0];
    if (v64.__r_.__value_.__l.__size_ != v64.__r_.__value_.__r.__words[0])
    {
      do
      {
        v57 = *(_DWORD *)(size - 176);
        if (v57 == v57 >> 31)
        {
          if (*(_BYTE *)(size - 128))
            *(_BYTE *)(size - 128) = 0;
        }
        else
        {
          v56 = *(_QWORD *)(size - 168);
          if (v57 < 0)
          {
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          }
          else
          {
            (*(void (**)(std::string::size_type))v56)(size - 168);
          }
        }
        size -= 208;
      }
      while (size != v53);
      v55 = (void *)v64.__r_.__value_.__r.__words[0];
    }
    v64.__r_.__value_.__l.__size_ = v53;
    operator delete(v55);
  }
}

void sub_10007B608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x10007B0D0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10007B778()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A5B0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A5B0))
    return &qword_10041A740;
  qword_10041A740 = (uint64_t)sub_10016E330();
  unk_10041A748 = v2;
  byte_10041A750 = 0;
  byte_10041A758 = 0;
  byte_10041A75A = 0;
  __cxa_guard_release(&qword_10041A5B0);
  return &qword_10041A740;
}

void sub_10007B7EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A5B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_10007B804@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  __int128 v19;
  _QWORD *v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  int v43;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *result;
  v5 = result[1];
  if (*result != v5)
  {
    while (1)
    {
      v6 = *(_DWORD *)v4;
      v7 = *(_DWORD *)v4;
      if (*(int *)v4 >> 31 != *(_DWORD *)v4)
      {
        v42 = *(_QWORD *)(v4 + 16);
        v43 = *(_DWORD *)(v4 + 24);
        v7 = v6 >> 31;
      }
      v8 = *(unsigned __int8 *)(v4 + 40);
      if (*(_BYTE *)(v4 + 40))
        v2 = *(_DWORD *)(v4 + 44);
      v9 = *(_QWORD *)(v4 + 8);
      v10 = v7 ^ v6;
      v11 = *(_QWORD *)(v4 + 32);
      v26 = *(_OWORD *)(v4 + 48);
      v27 = *(_OWORD *)(v4 + 64);
      v28 = *(_DWORD *)(v4 + 80);
      *(_QWORD *)&v30 = v9;
      if (v10 >> 31 != v10)
        break;
      v12 = 0;
      v29 = 0;
      *(_QWORD *)&v34 = v9;
      LODWORD(v33) = 0;
      v36 = v11;
      v37 = 0;
      if (v8)
        goto LABEL_13;
LABEL_14:
      v39 = v26;
      v40 = v27;
      v41 = v28;
      v32 = 0;
      v13 = a2[1];
      if (v13 >= a2[2])
      {
        result = (uint64_t *)sub_100234078(a2, (uint64_t)&v29);
        a2[1] = (uint64_t)result;
        v18 = v32;
        if (v32 != v32 >> 31)
          goto LABEL_31;
        goto LABEL_4;
      }
      v14 = (_QWORD *)(v13 + 8);
      if (v12 >> 31 == v12)
      {
        v15 = 0;
        *v14 = v9;
        *(_DWORD *)v13 = 0;
        v16 = 0;
LABEL_24:
        v20 = (_QWORD *)(v13 + 48);
        v21 = (int)v33;
        v22 = (int)v33 >> 31;
        if ((int)v33 >> 31 == (_DWORD)v33)
        {
          *v20 = v34;
          v22 = v21;
        }
        else
        {
          v23 = v34;
          *(_DWORD *)(v13 + 64) = v35;
          *(_OWORD *)v20 = v23;
        }
        *(_DWORD *)(v13 + 40) = v22 ^ v21;
        *(_QWORD *)(v13 + 72) = v36;
        *(_BYTE *)(v13 + 80) = 0;
        if (v37)
        {
          *(_DWORD *)(v13 + 84) = v38;
          *(_BYTE *)(v13 + 80) = 1;
        }
        v24 = v39;
        v25 = v40;
        *(_DWORD *)(v13 + 120) = v41;
        *(_OWORD *)(v13 + 104) = v25;
        *(_OWORD *)(v13 + 88) = v24;
        goto LABEL_30;
      }
      v19 = v30;
      *(_DWORD *)(v13 + 24) = v31;
      *(_OWORD *)v14 = v19;
      v15 = v32;
      *(_DWORD *)v13 = (v12 >> 31) ^ v12;
      v16 = v15 >> 31;
      if (v15 >> 31 == v15)
        goto LABEL_24;
      if (v15 >= 0)
        v17 = &v33;
      else
        v17 = v33;
      sub_1001A4778(v13 + 40, (uint64_t)v17);
      v15 = v32;
      v16 = v32 >> 31;
LABEL_30:
      *(_DWORD *)(v13 + 32) = v16 ^ v15;
      result = (uint64_t *)(v13 + 208);
      a2[1] = v13 + 208;
      a2[1] = v13 + 208;
      v18 = v32;
      if (v32 != v32 >> 31)
      {
LABEL_31:
        result = v33;
        if (v18 < 0)
        {
          if (v33)
            result = (uint64_t *)(*(uint64_t (**)(void))(*v33 + 8))();
        }
        else
        {
          result = (uint64_t *)((uint64_t (*)(_QWORD **))*v33)(&v33);
        }
      }
LABEL_4:
      v4 += 88;
      if (v4 == v5)
        return result;
    }
    *((_QWORD *)&v30 + 1) = v42;
    v31 = v43;
    v12 = (v10 >> 31) ^ v10;
    v29 = v12;
    *(_QWORD *)&v34 = v9;
    *((_QWORD *)&v34 + 1) = v42;
    v35 = v43;
    LODWORD(v33) = v12;
    v36 = v11;
    v37 = 0;
    if (!v8)
      goto LABEL_14;
LABEL_13:
    v38 = v2;
    v37 = 1;
    goto LABEL_14;
  }
  return result;
}

void sub_10007BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  *(_QWORD *)(v9 + 8) = v10;
  sub_10021AE8C((uint64_t)va);
  sub_10021908C((void **)v9);
  _Unwind_Resume(a1);
}

void sub_10007BB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void **v9;
  va_list va;

  va_start(va, a9);
  sub_10021AE8C((uint64_t)va);
  sub_10021908C(v9);
  _Unwind_Resume(a1);
}

void sub_10007BB30(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (***v28)(uint64_t);
  void (**v29)(uint64_t);
  BOOL v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *__p;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  void *v49[2];
  uint64_t v50;
  char v51;
  void *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1000BDE58((char **)a3, 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 7));
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      sub_10008930C(&v48, v6 + 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(&v46, a2, &v48);
      v8 = (std::__shared_weak_count *)v49[0];
      if (v49[0])
      {
        v9 = (unint64_t *)((char *)v49[0] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (sub_10007C4C8(v6))
      {
        v11 = sub_1002D35D0(&v46);
        sub_100267EB0((uint64_t)&v48, v11);
      }
      else
      {
        sub_1000946C0(&v46, (uint64_t)&__p);
        LOBYTE(v48) = 0;
        v12 = __p;
        v13 = v38;
        __p = 0;
        v38 = 0;
        v52 = v12;
        v53 = v13;
        v14 = v39;
        v54 = v39;
        v55 = v40;
        v56 = v41;
        if (v40)
        {
          v15 = v39[1];
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v15 >= v13)
              v15 %= v13;
          }
          else
          {
            v15 &= v13 - 1;
          }
          v14 = 0;
          *((_QWORD *)v12 + v15) = &v54;
          v39 = 0;
          v40 = 0;
        }
        v57 = v42;
        v16 = v43;
        v43 = 0;
        v42 = 0uLL;
        v59 = v44;
        v58 = v16;
        v60 = v45;
        v45 = 0;
        v44 = 0uLL;
        v51 = 1;
        if (v14)
        {
          do
          {
            v17 = (_QWORD *)*v14;
            operator delete(v14);
            v14 = v17;
          }
          while (v17);
        }
        v18 = __p;
        __p = 0;
        if (v18)
          operator delete(v18);
      }
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 >= *(_QWORD *)(a3 + 16))
      {
        *(_QWORD *)(a3 + 8) = sub_1002686BC((uint64_t *)a3, (uint64_t)&v48);
        if (v51)
          goto LABEL_36;
      }
      else
      {
        *(_BYTE *)v19 = 0;
        if ((_BYTE)v48)
        {
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v49;
          *(_QWORD *)(v19 + 24) = v50;
          v49[0] = 0;
          v49[1] = 0;
          v50 = 0;
          *(_BYTE *)v19 = 1;
        }
        *(_BYTE *)(v19 + 32) = 0;
        if (v51)
        {
          v20 = v52;
          v52 = 0;
          *(_QWORD *)(v19 + 40) = v20;
          *(_QWORD *)(v19 + 48) = v53;
          v53 = 0;
          v21 = v54;
          *(_QWORD *)(v19 + 56) = v54;
          v22 = v55;
          *(_QWORD *)(v19 + 64) = v55;
          *(_DWORD *)(v19 + 72) = v56;
          if (v22)
          {
            v23 = v21[1];
            v24 = *(_QWORD *)(v19 + 48);
            if ((v24 & (v24 - 1)) != 0)
            {
              if (v23 >= v24)
                v23 %= v24;
            }
            else
            {
              v23 &= v24 - 1;
            }
            v20[v23] = v19 + 56;
            v54 = 0;
            v55 = 0;
          }
          *(_QWORD *)(v19 + 96) = 0;
          *(_QWORD *)(v19 + 104) = 0;
          *(_QWORD *)(v19 + 80) = 0;
          *(_QWORD *)(v19 + 88) = 0;
          *(_OWORD *)(v19 + 80) = v57;
          *(_QWORD *)(v19 + 96) = v58;
          v57 = 0uLL;
          v58 = 0;
          *(_QWORD *)(v19 + 112) = 0;
          *(_QWORD *)(v19 + 120) = 0;
          *(_OWORD *)(v19 + 104) = v59;
          *(_QWORD *)(v19 + 120) = v60;
          v59 = 0uLL;
          v60 = 0;
          *(_BYTE *)(v19 + 32) = 1;
        }
        *(_QWORD *)(a3 + 8) = v19 + 128;
        if (v51)
        {
LABEL_36:
          v25 = v59;
          if ((_QWORD)v59)
          {
            v26 = (void *)v59;
            if (*((_QWORD *)&v59 + 1) != (_QWORD)v59)
            {
              v27 = *((_QWORD *)&v59 + 1) - 40;
              v28 = (void (***)(uint64_t))(*((_QWORD *)&v59 + 1) - 40);
              do
              {
                v29 = *v28;
                v28 -= 5;
                (*v29)(v27);
                v30 = v27 == v25;
                v27 = (uint64_t)v28;
              }
              while (!v30);
              v26 = (void *)v59;
            }
            *((_QWORD *)&v59 + 1) = v25;
            operator delete(v26);
          }
          if ((_QWORD)v57)
          {
            *((_QWORD *)&v57 + 1) = v57;
            operator delete((void *)v57);
          }
          v31 = v54;
          if (v54)
          {
            do
            {
              v32 = (_QWORD *)*v31;
              operator delete(v31);
              v31 = v32;
            }
            while (v32);
          }
          v33 = v52;
          v52 = 0;
          if (v33)
            operator delete(v33);
          v51 = 0;
          if (!(_BYTE)v48)
            goto LABEL_52;
LABEL_50:
          if (v49[0])
          {
            v49[1] = v49[0];
            operator delete(v49[0]);
          }
          goto LABEL_52;
        }
      }
      if ((_BYTE)v48)
        goto LABEL_50;
LABEL_52:
      v34 = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v6 += 1920;
    }
    while (v6 != v7);
  }
}

void sub_10007BF7C(_Unwind_Exception *a1)
{
  void **v1;

  sub_1002681B4(v1);
  _Unwind_Resume(a1);
}

void sub_10007BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void **v27;

  sub_100268168((uint64_t)&a27);
  sub_1000E095C((uint64_t)&a25);
  sub_1002681B4(v27);
  _Unwind_Resume(a1);
}

void sub_10007BFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void **v27;

  sub_100195804((uint64_t)&a27);
  sub_1002681B4(v27);
  _Unwind_Resume(a1);
}

void sub_10007BFD0(_Unwind_Exception *a1)
{
  void **v1;

  sub_1002681B4(v1);
  _Unwind_Resume(a1);
}

void sub_10007BFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void **v17;
  va_list va;

  va_start(va, a17);
  sub_1000E095C((uint64_t)va);
  sub_1002681B4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C004(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10007C010(uint64_t a1, uint64_t a2)
{
  sub_10007C018(*(_QWORD *)(a1 + 8), a2);
}

void sub_10007C018(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_10007C188(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_10007C1F4((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_10007C1E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_10007C1F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_10007C2E0(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x10007C23CLL);
}

void sub_10007C31C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

void sub_10007C37C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_10007C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C444(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

BOOL sub_10007C4C8(uint64_t a1)
{
  return sub_100086528(a1) == 1;
}

void sub_10007CC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

void sub_10007CD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_10007CDC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10007CD8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007CD9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007CDB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10007CDC0(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;

  if (*(_QWORD *)a1)
  {
    if (qword_100417ED8 == -1)
    {
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1004073A8);
      v2 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_7;
    }
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v5 = 136315138;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Ending OSTransaction for %s", (uint8_t *)&v5, 0xCu);
  }
LABEL_7:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));

  return a1;
}

uint64_t sub_10007CED4(uint64_t a1, const char *a2)
{
  void *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v11;
  const char *v12;

  *(_QWORD *)a1 = os_transaction_create(a2);
  v4 = (void *)(a1 + 8);
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v4 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v4;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 31) = v5;
  if (v5)
LABEL_8:
    memmove(v4, a2, v6);
  *((_BYTE *)v4 + v6) = 0;
  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1004073A8);
    v9 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      return a1;
    goto LABEL_11;
  }
  v9 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
  {
LABEL_11:
    v11 = 136315138;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting OSTransaction for %s", (uint8_t *)&v11, 0xCu);
  }
  return a1;
}

void sub_10007D054(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000CDD68(a1);
}

void sub_10007D4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  sub_1000F7B78((uint64_t)&a28);

  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v31 - 112));

  _Unwind_Resume(a1);
}

void sub_10007D794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10007D834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007DAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100195804((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10007DAE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007DAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007DE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100195804((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10007DE4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007DE5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_10007DE70(uint64_t a1)
{
  float v1;
  void *v3;
  void *v4[2];
  char v5;
  std::string __p;

  v1 = *(float *)(a1 + 16);
  if (v1 == -1.0)
  {
    sub_1000D5048(v4, "");
    sub_1001E11D8("numOfDaysBeforeIndoorTileRedownload is uninitilized", &__p);
    sub_100174738((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v5 < 0)
      operator delete(v4[0]);
    sub_1000F2AE4((uint64_t)&v3);
  }
  return v1;
}

void sub_10007DF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10007DFA0(uint64_t a1, uint64_t a2, char **a3, double a4)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  int v26;
  _BYTE v27[18];
  uint64_t v28;
  void *__p[2];
  char v30;
  std::__shared_weak_count *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(_QWORD *)a1 + 48))(&v28, a1, a3);
  if (!(_BYTE)v28)
  {
    if (qword_100417F08 == -1)
    {
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    v26 = 136380675;
    *(_QWORD *)v27 = sub_10004BE10(a3);
    v13 = "#shouldPrefetchMetadata, true, data for locationId unavailable, %{private}s";
    goto LABEL_14;
  }
  if (!sub_10008C390((uint64_t)__p))
  {
    if (qword_100417F08 == -1)
    {
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v12 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    v26 = 136380675;
    *(_QWORD *)v27 = sub_10004BE10(a3);
    v13 = "#shouldPrefetchMetadata, true, metadata for %{private}s is missing";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v26, 0xCu);
    v14 = 1;
    if (!(_BYTE)v28)
      return v14;
    goto LABEL_45;
  }
  if (!sub_10008C3AC((uint64_t)__p))
    goto LABEL_24;
  v7 = sub_10008C3AC((uint64_t)__p);
  v9 = v8;
  v11 = sub_10008C390((uint64_t)__p);
  if (v7 && v11)
  {
    if (v9 == v10)
      goto LABEL_24;
  }
  else if (v7 != !v11)
  {
    goto LABEL_24;
  }
  sub_10008CFF0((uint64_t)__p, (uint64_t)&v26);
  v15 = *(_QWORD *)&v27[4];
  sub_10008D014((uint64_t)__p, (uint64_t)&v26);
  v16 = *(_QWORD *)&v27[4];
  if (v15 < *(uint64_t *)&v27[4])
  {
    if (qword_100417F08 == -1)
    {
      v17 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v17 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_44;
    }
    v26 = 134218240;
    *(_QWORD *)v27 = v15;
    *(_WORD *)&v27[8] = 2048;
    *(_QWORD *)&v27[10] = v16;
    v18 = "#shouldPrefetchMetadata, true, metadata modification earlier than tile, %lld < %lld";
    goto LABEL_28;
  }
  if (qword_100417F08 == -1)
  {
    v19 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_24;
    goto LABEL_23;
  }
  dispatch_once(&qword_100417F08, &stru_100400970);
  v19 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_23:
    v26 = 134218240;
    *(_QWORD *)v27 = v15;
    *(_WORD *)&v27[8] = 2048;
    *(_QWORD *)&v27[10] = v16;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, no decision, tiles modifications earlier than metadata, %lld >= %lld", (uint8_t *)&v26, 0x16u);
  }
LABEL_24:
  sub_10007E628((uint64_t)__p, (uint64_t)&v26);
  v20 = a2 - *(_QWORD *)&v27[4];
  if (a4 * 8.64e10 < (double)(a2 - *(_QWORD *)&v27[4]))
  {
    if (qword_100417F08 == -1)
    {
      v17 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_27:
        v26 = 134218240;
        *(_QWORD *)v27 = v20 / 1000000;
        *(_WORD *)&v27[8] = 2048;
        *(_QWORD *)&v27[10] = (uint64_t)(a4 * 86400.0);
        v18 = "#shouldPrefetchMetadata, true, metadata older than limit, %lld > %lld";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&v26, 0x16u);
        v14 = 1;
        if (!(_BYTE)v28)
          return v14;
        goto LABEL_45;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v17 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_27;
    }
LABEL_44:
    v14 = 1;
    if (!(_BYTE)v28)
      return v14;
    goto LABEL_45;
  }
  if (qword_100417F08 == -1)
  {
    v21 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_33;
    goto LABEL_32;
  }
  dispatch_once(&qword_100417F08, &stru_100400970);
  v21 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_32:
    v26 = 134218240;
    *(_QWORD *)v27 = v20 / 1000000;
    *(_WORD *)&v27[8] = 2048;
    *(_QWORD *)&v27[10] = (uint64_t)(a4 * 86400.0);
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, false, metadata age less than limit, %lld <= %lld", (uint8_t *)&v26, 0x16u);
  }
LABEL_33:
  v14 = 0;
  if (!(_BYTE)v28)
    return v14;
LABEL_45:
  if (v35)
    v35 = 0;
  if (v34)
    v34 = 0;
  if (v33)
    v33 = 0;
  if (v32)
    v32 = 0;
  v22 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v30 & 0x80000000) == 0)
        return v14;
      goto LABEL_58;
    }
  }
  if (v30 < 0)
LABEL_58:
    operator delete(__p[0]);
  return v14;
}

void sub_10007E570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E628@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 64))
  {
    v2 = *(_QWORD *)(result + 80);
    if (*(_BYTE *)(result + 88))
    {
      if (v2 <= *(_QWORD *)(result + 104))
        v2 = *(_QWORD *)(result + 104);
    }
    *(_QWORD *)(a2 + 8) = v2;
    *(_BYTE *)a2 = 1;
  }
  else if (*(_BYTE *)(result + 88))
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 104);
    *(_BYTE *)a2 = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

BOOL sub_10007E678(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v18;
  _BYTE v19[14];
  __int16 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  std::__shared_weak_count *v29;
  char v30;
  char v31;
  char v32;
  char v33;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(_QWORD *)a1 + 48))(&v26, a1, a3);
  if (!(_BYTE)v26)
  {
    if (qword_100417F08 == -1)
    {
      v10 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:
        v18 = 136380675;
        *(_QWORD *)v19 = sub_10004BE10(a3);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#prefetchDbShouldPrefetchTile, true, no resource info, %{private}s", (uint8_t *)&v18, 0xCu);
        v7 = 1;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v10 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
    }
    v7 = 1;
    goto LABEL_28;
  }
  v4 = sub_10008E4EC((uint64_t)__p);
  v24 = 0;
  if (*(_BYTE *)v4)
  {
    v25 = *(_OWORD *)(v4 + 8);
    v24 = 1;
  }
  v5 = sub_10008E4E4((uint64_t)__p);
  v22 = 0;
  if (!*(_BYTE *)v5 || (v23 = *(_OWORD *)(v5 + 8), v22 = 1, !v24))
  {
    if (qword_100417F08 == -1)
    {
      v8 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_13:
        if (v24)
          v9 = "true";
        else
          v9 = "false";
        v18 = 136315138;
        *(_QWORD *)v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, %s, based on cfgVersionInfo availability", (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v8 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
    }
    v7 = v24 != 0;
    goto LABEL_28;
  }
  if (sub_10007F0E0(&v25, &v23))
  {
    if (qword_100417F08 == -1)
    {
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      {
LABEL_10:
        v7 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
        goto LABEL_10;
    }
    v18 = 136380675;
    *(_QWORD *)v19 = sub_10004BE10(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#prefetchDbShouldPrefetchTile, false, metadata version matches tile version, %{private}s", (uint8_t *)&v18, 0xCu);
    goto LABEL_10;
  }
  v11 = sub_100280E28((uint64_t)&v25);
  v12 = sub_100280E28((uint64_t)&v23);
  v7 = v12 < v11;
  if (qword_100417F08 == -1)
  {
    v13 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_28;
    goto LABEL_23;
  }
  dispatch_once(&qword_100417F08, &stru_100400970);
  v13 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_23:
    v18 = 67109632;
    *(_DWORD *)v19 = v12 < v11;
    *(_WORD *)&v19[4] = 2048;
    *(_QWORD *)&v19[6] = v11;
    v20 = 2048;
    v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#shouldPrefetchMetadata, %d, comparing metadata timestamp, %lld, tile timestamp, %lld", (uint8_t *)&v18, 0x1Cu);
  }
LABEL_28:
  if ((_BYTE)v26)
  {
    if (v33)
      v33 = 0;
    if (v32)
      v32 = 0;
    if (v31)
      v31 = 0;
    if (v30)
      v30 = 0;
    v14 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if ((v28 & 0x80000000) == 0)
          return v7;
        goto LABEL_42;
      }
    }
    if (v28 < 0)
LABEL_42:
      operator delete(__p[0]);
  }
  return v7;
}

void sub_10007EAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1001E63D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007EB48(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a2;
  v2 = *(id *)(a1 + 32);
  operator new();
}

void sub_10007ECB8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v6;

  do
    v6 = __ldaxr(v3);
  while (__stlxr(v6 - 1, v3));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  sub_10007ED24((uint64_t *)(v4 - 56));

  _Unwind_Resume(a1);
}

void sub_10007ED10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_10007ED24(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_10007EE10(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x10007ED6CLL);
}

void sub_10007EE4C(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

void sub_10007EEAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v9.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v9);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(a1 + 16));
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    if (*(_BYTE *)(a1 + 144))
    {
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 152);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 168);
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      v5 = *(_OWORD *)(a1 + 176);
      v6 = *(_OWORD *)(a1 + 192);
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_OWORD *)(a2 + 32) = v5;
      *(_OWORD *)(a2 + 48) = v6;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 208);
      *(_BYTE *)(a2 + 72) = 0;
      if (*(_BYTE *)(a1 + 216))
      {
        *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 224);
        *(_BYTE *)(a2 + 72) = 1;
      }
      *(_BYTE *)(a2 + 96) = 0;
      if (*(_BYTE *)(a1 + 240))
      {
        *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 248);
        *(_BYTE *)(a2 + 96) = 1;
      }
      *(_BYTE *)(a2 + 120) = 0;
      if (*(_BYTE *)(a1 + 264))
      {
        *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 272);
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 136) = 0;
      if (*(_BYTE *)(a1 + 280))
      {
        *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 288);
        *(_BYTE *)(a2 + 136) = 1;
      }
      *(_BYTE *)a2 = 1;
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_10007EFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F018(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0 && *(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a1 + 280))
      *(_BYTE *)(a1 + 280) = 0;
    if (*(_BYTE *)(a1 + 264))
      *(_BYTE *)(a1 + 264) = 0;
    if (*(_BYTE *)(a1 + 240))
      *(_BYTE *)(a1 + 240) = 0;
    if (*(_BYTE *)(a1 + 216))
      *(_BYTE *)(a1 + 216) = 0;
    v2 = *(std::__shared_weak_count **)(a1 + 184);
    if (!v2)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 175) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
LABEL_15:
      if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      {
LABEL_17:
        *(_BYTE *)(a1 + 144) = 0;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      }
    }
    operator delete(*(void **)(a1 + 152));
    goto LABEL_17;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_10007F0D8(uint64_t a1, uint64_t a2)
{
  sub_10007EB48(*(_QWORD *)(a1 + 8), a2);
}

BOOL sub_10007F0E0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_10007F2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F2FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007F324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007F338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007F8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10007FA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22[16];
  unsigned __int8 v23[8];
  uint64_t v24;
  unsigned __int8 v25[24];
  unsigned __int8 v26[24];
  _DWORD buf[3];
  __int16 v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  if (qword_100417F08 == -1)
  {
    v6 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_10;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_100400970);
    v6 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_10;
  }
  v7 = sub_10004F6AC(a3);
  if (*(char *)(v7 + 23) >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)v7;
  v9 = nullsub_10(a3);
  if (*(char *)(v9 + 23) >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)v9;
  buf[0] = 136381187;
  *(_QWORD *)&buf[1] = v8;
  v28 = 2081;
  v29 = v10;
  v30 = 0;
  v31 = 8;
  v32 = a2;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting the relevancy for %{private}s %{private}s to %lld", (uint8_t *)buf, 0x20u);
LABEL_10:
  v11 = sub_10004F6AC(a3);
  if (*(char *)(v11 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)v11, *(_QWORD *)(v11 + 8));
  }
  else
  {
    v12 = *(_OWORD *)v11;
    v21 = *(_QWORD *)(v11 + 16);
    *(_OWORD *)__p = v12;
  }
  v13 = nullsub_10(a3);
  sub_10008930C(&v18, v13);
  v14 = sub_10008FD28(a3);
  v26[0] = 0;
  v25[0] = 0;
  v24 = a2;
  v23[0] = 1;
  v22[0] = 0;
  sub_1000807FC((uint64_t *)__p, &v18, v14, v26, v25, v23, v22, (uint64_t)buf);
  if (v22[0])
    v22[0] = 0;
  if (v23[0])
    v23[0] = 0;
  if (v25[0])
    v25[0] = 0;
  if (v26[0])
    v26[0] = 0;
  v15 = v19;
  if (!v19)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
LABEL_27:
      sub_100080934(*(_QWORD *)(a1 + 8), (uint64_t)buf);
  }
  else
  {
LABEL_25:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  goto LABEL_27;
}

void sub_10007FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10027950C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10007FD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a18)
  {
    a18 = 0;
    if (!a20)
    {
LABEL_3:
      if (!a22)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!a20)
  {
    goto LABEL_3;
  }
  a20 = 0;
  if (!a22)
  {
LABEL_4:
    if (!a25)
    {
LABEL_10:
      sub_100195804((uint64_t)&a9);
      if (a16 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
LABEL_9:
    a25 = 0;
    goto LABEL_10;
  }
LABEL_8:
  a22 = 0;
  if (!a25)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_10007FE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_10007FE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10007FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000800EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000803A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100080444(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  uint64_t v21;
  unsigned __int8 v22[8];
  uint64_t v23;
  unsigned __int8 v24[8];
  uint64_t v25;
  unsigned __int8 v26[24];
  unsigned __int8 v27[24];
  _DWORD buf[3];
  __int16 v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;

  v3 = *a3;
  if (*a3 != a3[1])
  {
    v5 = result;
    if (qword_100417F08 == -1)
    {
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_11;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_100400970);
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_11;
    }
    v7 = sub_10004F6AC(v3);
    if (*(char *)(v7 + 23) >= 0)
      v8 = v7;
    else
      v8 = *(_QWORD *)v7;
    v9 = nullsub_10(v3);
    if (*(char *)(v9 + 23) >= 0)
      v10 = v9;
    else
      v10 = *(_QWORD *)v9;
    buf[0] = 136381187;
    *(_QWORD *)&buf[1] = v8;
    v29 = 2081;
    v30 = v10;
    v31 = 1;
    v32 = 8;
    v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Setting the last_visitied for %{private}s %{private}s to %{private}lld", (uint8_t *)buf, 0x20u);
LABEL_11:
    v11 = sub_10004F6AC(v3);
    if (*(char *)(v11 + 23) < 0)
    {
      sub_10006CED8(__p, *(void **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      v21 = *(_QWORD *)(v11 + 16);
      *(_OWORD *)__p = v12;
    }
    v13 = nullsub_10(v3);
    sub_10008930C(&v18, v13);
    v14 = sub_10008FD28(v3);
    v27[0] = 0;
    v26[0] = 0;
    v25 = a2;
    v24[0] = 1;
    v23 = a2;
    v22[0] = 1;
    sub_1000807FC((uint64_t *)__p, &v18, v14, v27, v26, v24, v22, (uint64_t)buf);
    if (v22[0])
      v22[0] = 0;
    if (v24[0])
      v24[0] = 0;
    if (v26[0])
      v26[0] = 0;
    if (v27[0])
      v27[0] = 0;
    v15 = v19;
    if (!v19)
      goto LABEL_26;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
LABEL_28:
        sub_100080934(*(_QWORD *)(v5 + 8), (uint64_t)buf);
    }
    else
    {
LABEL_26:
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_28;
    }
    operator delete(__p[0]);
    goto LABEL_28;
  }
  return result;
}

void sub_10008075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10027950C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_100080770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a20)
  {
    a20 = 0;
    if (!a22)
    {
LABEL_3:
      if (!a24)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if (!a22)
  {
    goto LABEL_3;
  }
  a22 = 0;
  if (!a24)
  {
LABEL_4:
    if (!a27)
    {
LABEL_10:
      sub_100195804((uint64_t)&a11);
      if (a18 < 0)
      {
        operator delete(__p);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    a27 = 0;
    goto LABEL_10;
  }
LABEL_8:
  a24 = 0;
  if (!a27)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t *sub_1000807FC@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[15];

  v10 = *result;
  *(_QWORD *)v21 = result[1];
  *(_QWORD *)&v21[7] = *(uint64_t *)((char *)result + 15);
  v11 = *((_BYTE *)result + 23);
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  v12 = *a4;
  if (*a4)
    v20 = *(_OWORD *)(a4 + 8);
  v13 = *a5;
  if (*a5)
    v19 = *(_OWORD *)(a5 + 8);
  v14 = *a6;
  if (*a6)
  {
    v8 = *((_QWORD *)a6 + 1);
    v15 = *a7;
    if (!*a7)
      goto LABEL_9;
    goto LABEL_7;
  }
  v15 = *a7;
  if (*a7)
LABEL_7:
    v9 = *((_QWORD *)a7 + 1);
LABEL_9:
  *(_QWORD *)a8 = v10;
  *(_QWORD *)(a8 + 8) = *(_QWORD *)v21;
  *(_QWORD *)(a8 + 15) = *(_QWORD *)&v21[7];
  *(_BYTE *)(a8 + 23) = v11;
  v16 = a2[1];
  *(_QWORD *)(a8 + 24) = *a2;
  *(_QWORD *)(a8 + 32) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a8 + 40) = 0;
  *(_DWORD *)(a8 + 56) = a3;
  *(_BYTE *)(a8 + 64) = 0;
  if (v12)
  {
    *(_OWORD *)(a8 + 72) = v20;
    *(_BYTE *)(a8 + 64) = 1;
  }
  *(_BYTE *)(a8 + 88) = 0;
  if (v13)
  {
    *(_OWORD *)(a8 + 96) = v19;
    *(_BYTE *)(a8 + 88) = 1;
  }
  *(_BYTE *)(a8 + 112) = 0;
  if (v14)
  {
    *(_QWORD *)(a8 + 120) = v8;
    *(_BYTE *)(a8 + 112) = 1;
  }
  *(_BYTE *)(a8 + 128) = 0;
  if (v15)
  {
    *(_QWORD *)(a8 + 136) = v9;
    *(_BYTE *)(a8 + 128) = 1;
  }
  return result;
}

void sub_100080934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  char **v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD buf[3];
  __int16 v17;
  unint64_t v18;

  v4 = sub_10004F6AC(a2);
  v5 = sub_100050DB0(v4);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)v5;
  else
    v7 = *(uint64_t **)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = sub_1000CFA7C((uint64_t)buf, v7, v8);
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v10 = (id)qword_100417F10;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = (char **)sub_10004F6AC(a2);
    v12 = sub_10004BE10(v11);
    buf[0] = 136380931;
    *(_QWORD *)&buf[1] = v12;
    v17 = 2048;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Insert or update resource %{private}s (%lu)", (uint8_t *)buf, 0x16u);
  }

  v14 = a1;
  v15 = a2;
  v13 = *(id *)(a1 + 32);
  operator new();
}

void sub_100080C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v8;
  va_list va;

  va_start(va, a4);
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  sub_100080CC8((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t *sub_100080CC8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::logic_error *exception;
  std::logic_error *v8;
  std::future_error v9;
  std::exception_ptr v10;
  std::error_code v11;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v10.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v10);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v11.__cat_ = std::future_category();
      *(_QWORD *)&v11.__val_ = 4;
      std::future_error::future_error(&v9, v11);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v8 = std::logic_error::logic_error(exception, &v9);
      v8[1] = (std::logic_error)v9.__ec_;
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_100080DB4(void *a1, std::__assoc_sub_state *a2, std::future_error *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__assoc_sub_state *a10, uint64_t a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::future_error::~future_error((std::future_error *)&a11);
  JUMPOUT(0x100080D10);
}

void sub_100080DF0(uint64_t a1)
{
  std::exception_ptr *v2;

  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  operator delete();
}

void sub_100080E50(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_100080EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100080F14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_100080F20(sqlite3 **a1@<X0>, const char *a2@<X2>, const char *a3@<X3>, sqlite3_int64 a4@<X4>, int a5@<W5>, sqlite3_blob **a6@<X8>)
{
  int v9;
  int *v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  _QWORD v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::runtime_error v29;
  std::string v30;
  sqlite3_blob *ppBlob;

  ppBlob = 0;
  v9 = sqlite3_blob_open(*a1, "main", a2, a3, a4, a5, &ppBlob);
  sub_10008B9C4(v9, *a1);
  if (v9)
  {
    v10 = __error();
    sub_10025FF8C(*v10, &v30);
    __cxa_allocate_exception(0x40uLL);
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v25.__r_.__value_.__r.__words[1] = xmmword_100382C20;
    strcpy(v25.__r_.__value_.__l.__data_, "Failed to open blob in ");
    v11 = std::string::append(&v25, a3);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v23, " w/ ");
    if ((v24 & 0x80u) == 0)
      v13 = (const std::string::value_type *)v23;
    else
      v13 = (const std::string::value_type *)v23[0];
    if ((v24 & 0x80u) == 0)
      v14 = v24;
    else
      v14 = v23[1];
    v15 = std::string::append(&v26, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
    else
      __dst = v30;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v27, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v29, &v28);
    v29.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v29, (uint64_t)"blob db::resources::handle::openBlob(const char *, const char *, const char *, int64_t, int) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 310, (uint64_t)v21);
  }
  *a6 = ppBlob;
}

void sub_1000811A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  int v52;
  void *v53;
  uint64_t v54;

  sub_1001F26E8((std::runtime_error *)(v54 - 160));
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error((std::runtime_error *)(v54 - 176));
  if (*(char *)(v54 - 185) < 0)
  {
    operator delete(*(void **)(v54 - 208));
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a52 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a21);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a47);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a28);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_8:
    if (a39 < 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a40);
  if (a39 < 0)
  {
LABEL_9:
    operator delete(a34);
    if ((v52 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v54 - 73) < 0)
        operator delete(*(void **)(v54 - 96));
      _Unwind_Resume(a1);
    }
LABEL_17:
    __cxa_free_exception(v53);
    goto LABEL_18;
  }
LABEL_16:
  if (!v52)
    goto LABEL_18;
  goto LABEL_17;
}

uint64_t sub_100081318(uint64_t a1, sqlite3_blob *a2)
{
  *(_QWORD *)a1 = &off_1003FFF28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = sqlite3_blob_bytes(a2);
  *(_DWORD *)(a1 + 20) = 0;
  return a1;
}

void sub_100081350(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStream *v1;

  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100081364(uint64_t *a1)
{
  _QWORD *v2;
  void *v4;
  void *v5[2];
  char v6;
  std::string __p;

  v2 = operator new(0xE8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = off_100402848;
  *a1 = sub_1000814D8((uint64_t)(v2 + 3));
  a1[1] = (uint64_t)v2;
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromZeroCopyStream() & 1) == 0)
  {
    sub_1000D5048(v5, "");
    sub_1002240C8("Failed to parse input stream", &__p);
    sub_100174738((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    sub_1000F2AE4((uint64_t)&v4);
  }
  return a1;
}

void sub_100081464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000E095C(v20);
    _Unwind_Resume(a1);
  }
  sub_1000E095C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1000814D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403AE8;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0x200000000;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0x100000001;
  *(_DWORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_10008155C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100081574(uint64_t a1, char **a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  unsigned int v17;
  sqlite3_stmt *v18;
  sqlite3_stmt *i;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  int *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  int *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v47;
  void *__p[2];
  std::string::size_type v49;
  std::string v50;
  std::string v51;
  _BYTE v52[24];
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::runtime_error v57;
  std::string __dst;
  std::string v59;
  _BYTE v60[28];
  __int16 v61;
  const char *v62;
  __int16 v63;
  const char *v64;

  std::operator+<char>("SELECT ", &qword_100419F80);
  v4 = std::string::append(&__dst, " FROM ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v50, "venues");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v51, " WHERE ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v10 = (const std::string::value_type *)&qword_100419F50;
  else
    v10 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v11 = byte_100419F67;
  else
    v11 = *(_QWORD *)&byte_100419F58;
  v12 = std::string::append(&v59, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v60[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)v60 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append((std::string *)v60, " = ?;");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v49 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v60[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v60);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_30:
    operator delete(v50.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_31:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_29:
  operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_12:
  sub_100085FFC(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  v16 = (uint64_t *)sub_100050DB0((uint64_t)a2);
  sub_100085A00(&pStmt, 1, v16);
  v17 = 0;
  v18 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    while (1)
    {
      v20 = sqlite3_step(i);
      v21 = v20;
      if (v20 == 100)
        break;
      if (v20 == 101)
      {
        v22 = sqlite3_reset(pStmt);
        sub_10008B9C4(v22, db);
        if (v22)
        {
          v38 = __error();
          sub_10025FF8C(*v38, &__dst);
          __cxa_allocate_exception(0x40uLL);
          *((_BYTE *)&v54.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v54, " w/ ");
          v39 = std::string::insert(&v54, 0, "Failed to execute query");
          v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v55.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            sub_10006CED8(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v53 = __dst;
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &v53;
          else
            v41 = (std::string *)v53.__r_.__value_.__r.__words[0];
          if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
          else
            size = v53.__r_.__value_.__l.__size_;
          v43 = std::string::append(&v55, (const std::string::value_type *)v41, size);
          v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(&v57, &v56);
          v57.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
          sub_10018D04C((uint64_t)v52);
          sub_1001F2298(&v57, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v52);
        }
        sub_10008581C((uint64_t)&pStmt);

        if (SHIBYTE(v49) < 0)
          operator delete(__p[0]);
        return v17;
      }
      if (v20 == 19)
      {
        if (qword_100417F08 == -1)
        {
          v30 = qword_100417F10;
          if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
            goto LABEL_45;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v30 = qword_100417F10;
          if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          {
LABEL_45:
            *(_WORD *)v60 = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Query constraint violation", v60, 2u);
          }
        }
        __cxa_allocate_exception(0x40uLL);
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        *(_OWORD *)&v51.__r_.__value_.__r.__words[1] = xmmword_100392530;
        strcpy(v51.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
        std::runtime_error::runtime_error((std::runtime_error *)&v56, &v51);
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
        sub_10018D04C((uint64_t)&v50);
        sub_1001F9F6C((std::runtime_error *)&v56, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v50);
      }
      sub_10008B9C4(v20, db);
      if (v21)
      {
        v31 = __error();
        sub_10025FF8C(*v31, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((_BYTE *)&v54.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v54, " w/ ");
        v32 = std::string::insert(&v54, 0, "Failed sqlite3_step");
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_10006CED8(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v53 = __dst;
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v53;
        else
          v34 = (std::string *)v53.__r_.__value_.__r.__words[0];
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        else
          v35 = v53.__r_.__value_.__l.__size_;
        v36 = std::string::append(&v55, (const std::string::value_type *)v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v57, &v56);
        v57.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
        sub_10018D04C((uint64_t)v52);
        sub_1001F2298(&v57, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:523:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v52);
      }
LABEL_14:
      i = pStmt;
    }
    if (v17)
      break;
    if (sqlite3_column_type(v18, 0) == 5)
    {
      v17 = 1;
      goto LABEL_14;
    }
    sqlite3_column_int64(v18, 0);
    v17 = 1;
  }
  if (qword_100417F08 != -1)
    dispatch_once(&qword_100417F08, &stru_1003FC628);
  v24 = (id)qword_100417F10;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
  {
    v25 = sub_10004BE10(a2);
    *(_QWORD *)v60 = 68289795;
    *(_WORD *)&v60[8] = 2082;
    *(_QWORD *)&v60[10] = "";
    *(_WORD *)&v60[18] = 2081;
    *(_QWORD *)&v60[20] = v25;
    v61 = 2082;
    v62 = "assert";
    v63 = 2081;
    v64 = "!result";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Multiple matches for resource\", \"resource\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v60, 0x30u);
  }

  if (qword_100417F08 == -1)
  {
    v26 = (id)qword_100417F10;
    if (os_signpost_enabled(v26))
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v26 = (id)qword_100417F10;
    if (os_signpost_enabled(v26))
    {
LABEL_38:
      v27 = sub_10004BE10(a2);
      *(_QWORD *)v60 = 68289795;
      *(_WORD *)&v60[8] = 2082;
      *(_QWORD *)&v60[10] = "";
      *(_WORD *)&v60[18] = 2081;
      *(_QWORD *)&v60[20] = v27;
      v61 = 2082;
      v62 = "assert";
      v63 = 2081;
      v64 = "!result";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Multiple matches for resource", "{\"msg%{public}.0s\":\"Multiple matches for resource\", \"resource\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v60, 0x30u);
    }
  }

  if (qword_100417F08 == -1)
  {
    v28 = (id)qword_100417F10;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v28 = (id)qword_100417F10;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
LABEL_41:
      v29 = sub_10004BE10(a2);
      sub_100342EE8((uint64_t)v29, (uint64_t)v60);
    }
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 525, "operator()");
  __break(1u);
  return result;
}

void sub_1000824EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  std::runtime_error a75;
  char a76;
  std::runtime_error *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;

  std::runtime_error::~runtime_error(v76);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a26 & 0x80000000) == 0)
  {
LABEL_3:
    if (a47 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a21);
  if (a47 < 0)
  {
LABEL_4:
    operator delete(a42);
    if ((a40 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a40 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v78 - 208) = v77;
    if (*(char *)(v78 - 177) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a35);
  *(_QWORD *)(v78 - 208) = v77;
  if (*(char *)(v78 - 177) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v78 - 200));
    if ((a53 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a53 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v78 - 160) = &off_1003EDD90;
    v80 = *(_QWORD *)(v78 - 152);
    if (!v80)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a48);
  *(_QWORD *)(v78 - 160) = &off_1003EDD90;
  v80 = *(_QWORD *)(v78 - 152);
  if (!v80)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 32))(v80))
    *(_QWORD *)(v78 - 152) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 176));
  if (a58)
  {
    a59 = (uint64_t)a58;
    operator delete(a58);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 248));
  if (a76 < 0)
    operator delete(a75.__vftable);
  if (a66 < 0)
    operator delete(a61);
  if (a74 < 0)
    operator delete(a73);
  if (a72 < 0)
    operator delete(a67);
  __cxa_free_exception(v76);
  if (*(char *)(v78 - 209) < 0)
    operator delete(*(void **)(v78 - 232));
  sub_1001E5DA8((uint64_t)&a12);
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

sqlite3_int64 sub_100082B28(uint64_t a1, uint64_t a2)
{
  sqlite3_int64 v3;
  sqlite3 **v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::runtime_error v14;
  uint64_t *v15;
  int v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *i;
  int v19;
  int v20;
  int v21;
  NSObject *v23;
  int *v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  int *v31;
  std::string *v32;
  __int128 v33;
  const std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  _BYTE v39[24];
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v42;
  std::string v43;
  std::string v44;
  _BYTE v45[24];
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::runtime_error v50;
  std::string __dst;
  std::string v52;
  std::runtime_error buf;
  std::string::size_type v54;

  v3 = (sqlite3_int64)&v44;
  v4 = *(sqlite3 ***)(a1 + 40);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__dst, "SELECT rowid FROM ");
  v5 = std::string::append(&__dst, "venues");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v43, " WHERE ");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v9 = (const std::string::value_type *)&qword_100419F50;
  else
    v9 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v10 = byte_100419F67;
  else
    v10 = *(_QWORD *)&byte_100419F58;
  v11 = std::string::append(&v44, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v52, " = ?;");
  v14 = *(std::runtime_error *)&v13->__r_.__value_.__l.__data_;
  v54 = v13->__r_.__value_.__r.__words[2];
  buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100085FFC(v4, (uint64_t)&buf, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v54) < 0)
  {
    operator delete(buf.__vftable);
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_27;
    }
  }
  else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v52.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_28:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_27:
  operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_11:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_29;
LABEL_12:
  v15 = (uint64_t *)sub_100050DB0(a2);
  sub_100085A00(&pStmt, 1, v15);
  v16 = 0;
  v17 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    while (1)
    {
      v19 = sqlite3_step(i);
      v20 = v19;
      if (v19 != 100)
        break;
      if (sqlite3_column_type(v17, 0) == 5)
      {
        v16 = 1;
        goto LABEL_14;
      }
      v3 = sqlite3_column_int64(v17, 0);
      v16 = 1;
      i = pStmt;
    }
    if (v19 == 101)
      break;
    if (v19 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v23 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_32;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v23 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_32:
          LOWORD(buf.__vftable) = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v44.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v49, &v44);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v43);
      sub_1001F9F6C((std::runtime_error *)&v49, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v43);
    }
    sub_10008B9C4(v19, db);
    if (v20)
    {
      v24 = __error();
      sub_10025FF8C(*v24, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v47.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v47, " w/ ");
      v25 = std::string::insert(&v47, 0, "Failed sqlite3_step");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v46, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v46 = __dst;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v46;
      else
        v27 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        size = v46.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v48, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v50, &v49);
      v50.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v45);
      sub_1001F2298(&v50, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v45);
    }
LABEL_14:
    ;
  }
  v21 = sqlite3_reset(pStmt);
  sub_10008B9C4(v21, db);
  if (v21)
  {
    v31 = __error();
    sub_10025FF8C(*v31, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v47.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v47, " w/ ");
    v32 = std::string::insert(&v47, 0, "Failed to execute query");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v46, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v46 = __dst;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v46;
    else
      v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      v36 = v46.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v48, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v50, &v49);
    v50.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v45);
    sub_1001F2298(&v50, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1346:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v45);
  }
  if (!v16)
  {
    __cxa_allocate_exception(0x40uLL);
    v34 = (const std::string *)sub_100050DB0(a2);
    std::runtime_error::runtime_error(&buf, v34);
    buf.__vftable = (std::runtime_error_vtbl *)&off_1003FD288;
    sub_10018D04C((uint64_t)v39);
    sub_1001F1EAC(&buf, (uint64_t)"int64_t SqlPrivacyDb::onQueueRowIdForVenueData(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 1351, (uint64_t)v39);
  }
  sub_10008581C((uint64_t)&pStmt);

  return v3;
}

void sub_100083888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  std::runtime_error a73;
  char a74;
  std::runtime_error *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;

  std::runtime_error::~runtime_error(v74);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if (a42 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a16);
  if (a42 < 0)
  {
LABEL_4:
    operator delete(a37);
    if ((a35 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a35 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v76 - 192) = v75;
    if (*(char *)(v76 - 161) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a30);
  *(_QWORD *)(v76 - 192) = v75;
  if (*(char *)(v76 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v76 - 184));
    if ((a48 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v76 - 144) = &off_1003EDD90;
    v78 = *(_QWORD *)(v76 - 136);
    if (!v78)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a43);
  *(_QWORD *)(v76 - 144) = &off_1003EDD90;
  v78 = *(_QWORD *)(v76 - 136);
  if (!v78)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 32))(v78))
    *(_QWORD *)(v76 - 136) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 160));
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v76 - 240));
  if (a74 < 0)
  {
    operator delete(a73.__vftable);
    if (a61 < 0)
    {
LABEL_21:
      operator delete(a56);
      if ((a72 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if (a61 < 0)
  {
    goto LABEL_21;
  }
  if ((a72 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a67 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a68);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v74);
    if (*(char *)(v76 - 201) < 0)
      operator delete(*(void **)(v76 - 224));
    sub_1001E5DA8((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a62);
  goto LABEL_27;
}

sqlite3 **sub_100083EBC(uint64_t a1, uint64_t a2)
{
  sqlite3 **v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  uint64_t *v46;
  int v47;
  sqlite3_stmt *v48;
  sqlite3_stmt *i;
  int v50;
  int v51;
  int v52;
  NSObject *v54;
  int *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  std::string::size_type size;
  std::string *v60;
  __int128 v61;
  int *v62;
  std::string *v63;
  __int128 v64;
  const std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  _BYTE v70[24];
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string __dst;
  std::string v91;
  uint8_t buf[16];
  std::string::size_type v93;

  v3 = *(sqlite3 ***)(a1 + 40);
  *((_BYTE *)&v71.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v71, "SELECT ");
  v4 = std::string::append(&v71, "tile_data");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v72, ".rowid FROM ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v73, "tile_data");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v74, " JOIN ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v75, "venues");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v76, " ON ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v80, "tile_data");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v82, ".");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v20 = (const std::string::value_type *)&qword_100419F80;
  else
    v20 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v21 = byte_100419F97;
  else
    v21 = *(_QWORD *)&byte_100419F88;
  v22 = std::string::append(&v84, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v85, " = ");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = std::string::append(&v86, "venues");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v87, ".");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v30 = (const std::string::value_type *)&qword_100419F80;
  else
    v30 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v31 = byte_100419F97;
  else
    v31 = *(_QWORD *)&byte_100419F88;
  v32 = std::string::append(&v88, v30, v31);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  v34 = std::string::append(&v89, " WHERE ");
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = std::string::append(&__dst, "venues");
  v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  v38 = std::string::append(&v81, ".");
  v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F67 >= 0)
    v40 = (const std::string::value_type *)&qword_100419F50;
  else
    v40 = (const std::string::value_type *)qword_100419F50;
  if (byte_100419F67 >= 0)
    v41 = byte_100419F67;
  else
    v41 = *(_QWORD *)&byte_100419F58;
  v42 = std::string::append(&v83, v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v44 = std::string::append(&v91, " = ?");
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v93 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)buf = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  sub_100085FFC(v3, (uint64_t)buf, 0, (uint64_t)&pStmt);
  if (SHIBYTE(v93) < 0)
  {
    operator delete(*(void **)buf);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v83.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  operator delete(v81.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v89.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v88.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  operator delete(v87.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v85.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v80.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v76.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
LABEL_68:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_69:
    operator delete(v71.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
LABEL_67:
  operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_68;
LABEL_37:
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_69;
LABEL_38:
  v46 = (uint64_t *)sub_100050DB0(a2);
  sub_100085A00(&pStmt, 1, v46);
  v47 = 0;
  v48 = pStmt;
  for (i = pStmt; ; i = pStmt)
  {
    while (1)
    {
      v50 = sqlite3_step(i);
      v51 = v50;
      if (v50 != 100)
        break;
      if (sqlite3_column_type(v48, 0) == 5)
      {
        v47 = 1;
        goto LABEL_40;
      }
      v3 = (sqlite3 **)sqlite3_column_int64(v48, 0);
      v47 = 1;
      i = pStmt;
    }
    if (v50 == 101)
      break;
    if (v50 == 19)
    {
      if (qword_100417F08 == -1)
      {
        v54 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          goto LABEL_72;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v54 = qword_100417F10;
        if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        {
LABEL_72:
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Query constraint violation", buf, 2u);
        }
      }
      __cxa_allocate_exception(0x40uLL);
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_100392530;
      strcpy(v83.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
      std::runtime_error::runtime_error((std::runtime_error *)&v89, &v83);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
      sub_10018D04C((uint64_t)&v81);
      sub_1001F9F6C((std::runtime_error *)&v89, (uint64_t)"auto db::resources::statement<1, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14) &&)::(anonymous class)::operator()() const [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v81);
    }
    sub_10008B9C4(v50, db);
    if (v51)
    {
      v55 = __error();
      sub_10025FF8C(*v55, &__dst);
      __cxa_allocate_exception(0x40uLL);
      *((_BYTE *)&v87.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v87, " w/ ");
      v56 = std::string::insert(&v87, 0, "Failed sqlite3_step");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&v86, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v86 = __dst;
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v86;
      else
        v58 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      else
        size = v86.__r_.__value_.__l.__size_;
      v60 = std::string::append(&v88, (const std::string::value_type *)v58, size);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error((std::runtime_error *)&v76, &v89);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
      sub_10018D04C((uint64_t)&v85);
      sub_1001F2298((std::runtime_error *)&v76, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v85);
    }
LABEL_40:
    ;
  }
  v52 = sqlite3_reset(pStmt);
  sub_10008B9C4(v52, db);
  if (v52)
  {
    v62 = __error();
    sub_10025FF8C(*v62, &__dst);
    __cxa_allocate_exception(0x40uLL);
    *((_BYTE *)&v87.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v87, " w/ ");
    v63 = std::string::insert(&v87, 0, "Failed to execute query");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&v86, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v86 = __dst;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v86;
    else
      v66 = (std::string *)v86.__r_.__value_.__r.__words[0];
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    else
      v67 = v86.__r_.__value_.__l.__size_;
    v68 = std::string::append(&v88, (const std::string::value_type *)v66, v67);
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error((std::runtime_error *)&v76, &v89);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
    sub_10018D04C((uint64_t)&v85);
    sub_1001F2298((std::runtime_error *)&v76, (uint64_t)"void db::resources::statement<1, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:1329:14), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v85);
  }
  if (!v47)
  {
    __cxa_allocate_exception(0x40uLL);
    v65 = (const std::string *)sub_100050DB0(a2);
    std::runtime_error::runtime_error((std::runtime_error *)buf, v65);
    *(_QWORD *)buf = &off_1003FD170;
    sub_10018D04C((uint64_t)v70);
    sub_1001F1B70((std::runtime_error *)buf, (uint64_t)"int64_t SqlPrivacyDb::onQueueRowIdForTileData(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 1334, (uint64_t)v70);
  }
  sub_10008581C((uint64_t)&pStmt);

  return v3;
}

void sub_100084FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,std::runtime_error a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a71;
  uint64_t a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  std::runtime_error *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;

  std::runtime_error::~runtime_error(v78);
  if (a49 < 0)
  {
    operator delete(__p);
    if ((a41 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a41 & 0x80000000) == 0)
  {
LABEL_3:
    if (a63 < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a36);
  if (a63 < 0)
  {
LABEL_4:
    operator delete(a58);
    if ((a55 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a55 & 0x80000000) == 0)
  {
LABEL_5:
    *(_QWORD *)(v80 - 192) = v79;
    if (*(char *)(v80 - 161) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a50);
  *(_QWORD *)(v80 - 192) = v79;
  if (*(char *)(v80 - 161) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v80 - 184));
    if ((a69 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((a69 & 0x80000000) == 0)
  {
LABEL_7:
    *(_QWORD *)(v80 - 144) = &off_1003EDD90;
    v82 = *(_QWORD *)(v80 - 136);
    if (!v82)
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a64);
  *(_QWORD *)(v80 - 144) = &off_1003EDD90;
  v82 = *(_QWORD *)(v80 - 136);
  if (!v82)
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 32))(v82))
    *(_QWORD *)(v80 - 136) = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 160));
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  std::runtime_error::~runtime_error(&a31);
  if (*(char *)(v80 - 233) < 0)
  {
    operator delete(*(void **)(v80 - 256));
    if (a74 < 0)
    {
LABEL_21:
      operator delete(a73);
      if ((a78 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if (a74 < 0)
  {
    goto LABEL_21;
  }
  if ((a78 & 0x80000000) == 0)
  {
LABEL_22:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_27:
    __cxa_free_exception(v78);
    if (*(char *)(v80 - 201) < 0)
      operator delete(*(void **)(v80 - 224));
    sub_1001E5DA8((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
LABEL_23:
  operator delete(a75);
  goto LABEL_27;
}

void sub_10008581C(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_1000859D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100085A00(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  sqlite3_stmt *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_dst;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  _BYTE v26[24];
  std::string __dst;
  _QWORD v28[2];
  unsigned __int8 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::runtime_error v36;
  std::string v37;

  v3 = a3;
  v6 = *a1;
  v7 = *((char *)a3 + 23);
  v8 = *((_DWORD *)a3 + 2);
  if (v7 >= 0)
  {
    v9 = v7;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    v9 = v8;
  }
  v10 = sqlite3_bind_text(v6, a2, (const char *)a3, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_10008B9C4(v10, a1[1]);
  if (v10)
  {
    v11 = __error();
    sub_10025FF8C(*v11, &v37);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>("Failed to bind ", v3);
    v12 = std::string::append(&v31, " to ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a2);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v30;
    else
      v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v32, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v28, " w/ ");
    if ((v29 & 0x80u) == 0)
      v18 = (const std::string::value_type *)v28;
    else
      v18 = (const std::string::value_type *)v28[0];
    if ((v29 & 0x80u) == 0)
      v19 = v29;
    else
      v19 = v28[1];
    v20 = std::string::append(&v33, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      __dst = v37;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v23 = __dst.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v34, (const std::string::value_type *)p_dst, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v36, &v35);
    v36.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v26);
    sub_1001F2298(&v36, (uint64_t)"void db::resources::statement<1, 1>::bind(int, const std::string &) [nCols = 1, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v26);
  }
}

void sub_100085D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  int v76;
  void *v77;
  uint64_t v78;
  void *v80;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v78 - 152));
    v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0)
          goto LABEL_24;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v76 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0)
            operator delete(*(void **)(v78 - 88));
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v77);
        goto LABEL_35;
      }
LABEL_33:
      if (!v76)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v78 - 152));
  v80 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_100085FFC(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 1UL, nQueries = 1UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_100086300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001E5DA8(v68);

            _Unwind_Resume(a1);
          }
          sub_1001E5DA8(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t sub_100086528(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  std::string *v11;
  int v12;
  uint64_t v13;
  char *v14;
  std::string::size_type v15;
  std::string *v16;
  unint64_t v17;
  std::string::value_type *v18;
  __int128 *v19;
  std::string::size_type *v20;
  unint64_t v21;
  __int128 v22;
  std::string::value_type v23;
  void *v25[2];
  uint64_t v26;
  uint8_t buf[8];
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30[8];
  void *__p;
  void *v32;
  char v33;
  int v34;
  char *v35;
  char v36;
  int v37;
  std::string v38;
  std::string v39;
  std::string v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  _BYTE v47[6];
  char v48;
  _BYTE *v49;
  char *v50;

  if (!a1)
  {
    if (qword_100417ED8 == -1)
    {
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return 0;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF630);
      v8 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        return 0;
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Trying to get context of nullptr, using indoor", buf, 2u);
    return 0;
  }
  if ((*(_BYTE *)(a1 + 1914) & 0x20) != 0)
  {
    v9 = *(_DWORD *)(a1 + 1856);
    if (v9 != 1)
    {
      if (v9 == 2)
        return 1;
      sub_1000FC5A4((uint64_t)buf);
      sub_1001978EC(&v29, a1);
      v10 = *(_DWORD *)(a1 + 1856);
      std::stringbuf::str(v30);
      v33 = 0;
      LOBYTE(v32) = 0;
      memset(&v38, 0, sizeof(v38));
      std::string::assign(&v38, "We got something other than Indoor/Regional in LocationContext field (");
      v11 = &v39;
      memset(&v39, 0, sizeof(v39));
      v49 = v47;
      v50 = &v48;
      if (v10 >= 0)
        v12 = v10;
      else
        v12 = -v10;
      v34 = v12;
      v35 = &v48;
      v36 = 48;
      v37 = 48;
      v13 = sub_10000EDD4((uint64_t)&v34);
      v14 = (char *)v13;
      if (v10 < 0)
      {
        *(_BYTE *)(v13 - 1) = 45;
        v14 = (char *)(v13 - 1);
        v49 = (_BYTE *)(v13 - 1);
        v50 = &v48;
        v15 = (std::string::size_type)(&v48 - v13 + 1);
        if (v15 >= 0x17)
        {
LABEL_22:
          std::string::__grow_by(&v39, 0x16uLL, v15 - 22, 0, 0, 0, 0);
          v39.__r_.__value_.__l.__size_ = 0;
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v11 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if (v14 == &v48)
            goto LABEL_25;
          goto LABEL_28;
        }
      }
      else
      {
        v49 = (_BYTE *)v13;
        v50 = &v48;
        v15 = (std::string::size_type)(&v48 - v13);
        if ((unint64_t)(&v48 - v13) >= 0x17)
          goto LABEL_22;
      }
      if (v14 == &v48)
      {
LABEL_25:
        v16 = v11;
        goto LABEL_36;
      }
LABEL_28:
      v17 = &v46 - v14 + 23;
      if (v17 < 0x20 || (unint64_t)((char *)v11 - v14) < 0x20)
      {
        v16 = v11;
        v18 = v14;
      }
      else
      {
        v16 = (std::string *)((char *)v11 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v18 = &v14[v17 & 0xFFFFFFFFFFFFFFE0];
        v19 = (__int128 *)(v14 + 16);
        v20 = &v11->__r_.__value_.__r.__words[2];
        v21 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v22 = *v19;
          *((_OWORD *)v20 - 1) = *(v19 - 1);
          *(_OWORD *)v20 = v22;
          v19 += 2;
          v20 += 4;
          v21 -= 32;
        }
        while (v21);
        if (v17 == (v17 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_36;
      }
      do
      {
        v23 = *v18++;
        v16->__r_.__value_.__s.__data_[0] = v23;
        v16 = (std::string *)((char *)v16 + 1);
      }
      while (v18 != &v48);
LABEL_36:
      v16->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        v39.__r_.__value_.__l.__size_ = v15;
      else
        *((_BYTE *)&v39.__r_.__value_.__s + 23) = v15 & 0x7F;
      memset(&v40, 0, sizeof(v40));
      std::string::assign(&v40, ") for this locationId: ");
      if (*(char *)(a1 + 31) < 0)
      {
        sub_10006CED8(&v41, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
      }
      else
      {
        v41 = *(_OWORD *)(a1 + 8);
        v42 = *(_QWORD *)(a1 + 24);
      }
      memset(&v43, 0, sizeof(v43));
      std::string::assign(&v43, ". Memory corruption?\n");
      if (SHIBYTE(v26) < 0)
      {
        sub_10006CED8(&v44, v25[0], (unint64_t)v25[1]);
      }
      else
      {
        v44 = *(_OWORD *)v25;
        v45 = v26;
      }
      sub_100174738((uint64_t)&v32, (uint64_t)&v38, 6);
      if (SHIBYTE(v45) < 0)
      {
        operator delete((void *)v44);
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_47:
          if ((SHIBYTE(v42) & 0x80000000) == 0)
            goto LABEL_48;
          goto LABEL_55;
        }
      }
      else if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(v43.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
      {
LABEL_48:
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_49;
        goto LABEL_56;
      }
LABEL_55:
      operator delete((void *)v41);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_49:
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_50;
        goto LABEL_57;
      }
LABEL_56:
      operator delete(v40.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_50:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_51;
        goto LABEL_58;
      }
LABEL_57:
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_51:
        if ((v33 & 0x80000000) == 0)
          goto LABEL_52;
LABEL_59:
        operator delete(v32);
LABEL_52:
        sub_1000F2AE4((uint64_t)&__p);
      }
LABEL_58:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((v33 & 0x80000000) == 0)
        goto LABEL_52;
      goto LABEL_59;
    }
    return 0;
  }
  sub_10008930C(buf, a1 + 8);
  v2 = sub_100050DB0((uint64_t)buf);
  if (*(char *)(v2 + 23) >= 0)
    v3 = (unsigned __int8 *)v2;
  else
    v3 = *(unsigned __int8 **)v2;
  v4 = *v3 == 82;
  v5 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_100086A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v63;

  while (1)
  {
    if (*(char *)(v62 - 1) < 0)
      operator delete(*(void **)(v62 - 24));
    v62 -= 24;
    if (v62 == v63 - 256)
    {
      if (a62 < 0)
        operator delete(__p);
      if (a15 < 0)
        operator delete(a10);
      sub_1000FC6DC((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
}

void sub_100086B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100195804((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100086B2C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6;
  const std::string *v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::size_type size;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  sqlite3_stmt *v66;
  int v67;
  int v68;
  std::string::size_type v69;
  char v70;
  char v71;
  time_t v72;
  sqlite3_int64 v73;
  char v74;
  time_t v75;
  sqlite3_int64 v76;
  int v77;
  time_t v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  int v88;
  NSObject *v89;
  int v90;
  _BYTE *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  NSObject *v100;
  NSObject *v101;
  NSObject *v102;
  int v103;
  NSObject *v104;
  NSObject *v105;
  int *v106;
  std::string *v107;
  __int128 v108;
  NSObject *v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  int *v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  std::string::size_type v118;
  std::string *v119;
  __int128 v120;
  _OWORD *v121;
  _OWORD *v122;
  _BYTE *v123;
  uint64_t v124;
  _BYTE *v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  __int128 __p;
  std::string::size_type v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  _BYTE v148[40];
  __int128 v149;
  int v150;
  char v151;
  __int128 v152;
  char v153;
  __int128 v154;
  char v155;
  uint64_t v156;
  unsigned __int8 v157;
  uint64_t v158;
  std::string __dst;

  memset(&v136, 0, sizeof(v136));
  memset(&v135, 0, sizeof(v135));
  if (a2 == 1)
  {
    v10 = (const std::string *)&qword_100419F50;
    std::string::operator=(&v136, (const std::string *)&qword_100419F80);
  }
  else
  {
    if (a2)
      goto LABEL_6;
    std::string::operator=(&v136, (const std::string *)&qword_100419F50);
    v10 = (const std::string *)&qword_100419F80;
  }
  std::string::operator=(&v135, v10);
LABEL_6:
  std::operator+<char>("SELECT ", &v136);
  v11 = std::string::append(&v127, ", ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F7F >= 0)
    v13 = (const std::string::value_type *)&qword_100419F68;
  else
    v13 = (const std::string::value_type *)qword_100419F68;
  if (byte_100419F7F >= 0)
    v14 = byte_100419F7F;
  else
    v14 = *(_QWORD *)&byte_100419F70;
  v15 = std::string::append(&v128, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v129, ", ");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A00F >= 0)
    v19 = (const std::string::value_type *)&qword_100419FF8;
  else
    v19 = (const std::string::value_type *)qword_100419FF8;
  if (byte_10041A00F >= 0)
    v20 = byte_10041A00F;
  else
    v20 = unk_10041A000;
  v21 = std::string::append(&v130, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v131, ", ");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FC7 >= 0)
    v25 = (const std::string::value_type *)&xmmword_100419FB0;
  else
    v25 = (const std::string::value_type *)xmmword_100419FB0;
  if (byte_100419FC7 >= 0)
    v26 = byte_100419FC7;
  else
    v26 = *((_QWORD *)&xmmword_100419FB0 + 1);
  v27 = std::string::append(&v132, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append(&v137, ", ");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (byte_10041A027 >= 0)
    v31 = (const std::string::value_type *)&xmmword_10041A010;
  else
    v31 = (const std::string::value_type *)xmmword_10041A010;
  if (byte_10041A027 >= 0)
    v32 = byte_10041A027;
  else
    v32 = *((_QWORD *)&xmmword_10041A010 + 1);
  v33 = std::string::append(&v138, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v139.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v139, ", ");
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v140.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FDF >= 0)
    v37 = (const std::string::value_type *)&qword_100419FC8;
  else
    v37 = (const std::string::value_type *)qword_100419FC8;
  if (byte_100419FDF >= 0)
    v38 = byte_100419FDF;
  else
    v38 = *(_QWORD *)&dword_100419FD0;
  v39 = std::string::append(&v140, v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v145.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v145, ", ");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FF7 >= 0)
    v43 = (const std::string::value_type *)&qword_100419FE0;
  else
    v43 = (const std::string::value_type *)qword_100419FE0;
  if (byte_100419FF7 >= 0)
    v44 = byte_100419FF7;
  else
    v44 = qword_100419FE8;
  v45 = std::string::append(&v146, v43, v44);
  v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  v47 = std::string::append(&v141, ", ");
  v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419FAF >= 0)
    v49 = (const std::string::value_type *)&qword_100419F98;
  else
    v49 = (const std::string::value_type *)qword_100419F98;
  if (byte_100419FAF >= 0)
    v50 = byte_100419FAF;
  else
    v50 = unk_100419FA0;
  v51 = std::string::append(&v147, v49, v50);
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  v53 = std::string::append(&__dst, " FROM ");
  v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v54;
  v53->__r_.__value_.__l.__size_ = 0;
  v53->__r_.__value_.__r.__words[2] = 0;
  v53->__r_.__value_.__r.__words[0] = 0;
  v55 = std::string::append(&v143, "venues");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v144, " WHERE ");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v142.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &v135;
  else
    v59 = (std::string *)v135.__r_.__value_.__r.__words[0];
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  else
    size = v135.__r_.__value_.__l.__size_;
  v61 = std::string::append(&v142, (const std::string::value_type *)v59, size);
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  *(_QWORD *)&v148[16] = *((_QWORD *)&v61->__r_.__value_.__l + 2);
  *(_OWORD *)v148 = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  v63 = std::string::append((std::string *)v148, " = ?;");
  v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v134 = v63->__r_.__value_.__r.__words[2];
  __p = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if ((v148[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v148);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_180;
    }
  }
  else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_57:
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_181;
  }
LABEL_180:
  operator delete(v144.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_58:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_182;
  }
LABEL_181:
  operator delete(v143.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_59:
    if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_183;
  }
LABEL_182:
  operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_184;
  }
LABEL_183:
  operator delete(v147.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_185;
  }
LABEL_184:
  operator delete(v141.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_186;
  }
LABEL_185:
  operator delete(v146.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_187;
  }
LABEL_186:
  operator delete(v145.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_188;
  }
LABEL_187:
  operator delete(v140.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_65:
    if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_189;
  }
LABEL_188:
  operator delete(v139.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
    goto LABEL_190;
  }
LABEL_189:
  operator delete(v138.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_191;
  }
LABEL_190:
  operator delete(v137.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_192;
  }
LABEL_191:
  operator delete(v132.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    goto LABEL_193;
  }
LABEL_192:
  operator delete(v131.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_194;
  }
LABEL_193:
  operator delete(v130.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
LABEL_195:
    operator delete(v128.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
LABEL_196:
    operator delete(v127.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_194:
  operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_195;
LABEL_72:
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_196;
LABEL_73:
  *a5 = 0;
  sub_100089650(*(sqlite3 ***)(a1 + 40), (uint64_t)&__p, 0, (uint64_t)&v132);
  v65 = *(_QWORD *)(a3 + 24);
  if (!v65)
    sub_10016CA74();
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v65 + 48))(v65, &v132);
  v66 = (sqlite3_stmt *)v132.__r_.__value_.__r.__words[0];
  v128.__r_.__value_.__r.__words[0] = v132.__r_.__value_.__r.__words[0];
  v124 = (uint64_t)(a5 + 8);
  v123 = a5 + 48;
  v121 = a5 + 104;
  v122 = a5 + 80;
  v126 = a5;
  while (1)
  {
    v67 = sqlite3_step(v66);
    v68 = v67;
    if (v67 != 100)
    {
      if (v67 != 101)
      {
        if (v67 != 19)
        {
          sub_10008B9C4(v67, (sqlite3 *)v132.__r_.__value_.__l.__size_);
          if (v68)
          {
            v106 = __error();
            sub_10025FF8C(*v106, &__dst);
            __cxa_allocate_exception(0x40uLL);
            *((_BYTE *)&v146.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v146, " w/ ");
            v107 = std::string::insert(&v146, 0, "Failed sqlite3_step");
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            v141.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              sub_10006CED8(&v145, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              v145 = __dst;
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &v145;
            else
              v110 = (std::string *)v145.__r_.__value_.__r.__words[0];
            if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v111 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
            else
              v111 = v145.__r_.__value_.__l.__size_;
            v112 = std::string::append(&v141, (const std::string::value_type *)v110, v111);
            v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
            v147.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v113;
            v112->__r_.__value_.__l.__size_ = 0;
            v112->__r_.__value_.__r.__words[2] = 0;
            v112->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error((std::runtime_error *)&v131, &v147);
            v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
            sub_10018D04C((uint64_t)&v140);
            sub_1001F2298((std::runtime_error *)&v131, (uint64_t)"void db::resources::statement<8, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)&v140);
          }
          goto LABEL_75;
        }
        if (qword_100417F08 == -1)
        {
          v109 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
            goto LABEL_224;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v109 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          {
LABEL_224:
            __cxa_allocate_exception(0x40uLL);
            v144.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
            *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = xmmword_100392530;
            strcpy(v144.__r_.__value_.__l.__data_, "Constraint violation stepping through statement");
            std::runtime_error::runtime_error((std::runtime_error *)&v147, &v144);
            v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCEA8;
            sub_10018D04C((uint64_t)&v143);
            sub_1001F9F6C((std::runtime_error *)&v147, (uint64_t)"auto db::resources::statement<8, 1>::run((lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19) &&)::(anonymous class)::operator()() const [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 486, (uint64_t)&v143);
          }
        }
        *(_WORD *)v148 = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, "Query constraint violation", v148, 2u);
        goto LABEL_224;
      }
      v99 = sqlite3_reset((sqlite3_stmt *)v132.__r_.__value_.__l.__data_);
      sub_10008B9C4(v99, (sqlite3 *)v132.__r_.__value_.__l.__size_);
      if (v99)
      {
        v114 = __error();
        sub_10025FF8C(*v114, &__dst);
        __cxa_allocate_exception(0x40uLL);
        *((_BYTE *)&v146.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v146, " w/ ");
        v115 = std::string::insert(&v146, 0, "Failed to execute query");
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v141.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          sub_10006CED8(&v145, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        else
          v145 = __dst;
        if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = &v145;
        else
          v117 = (std::string *)v145.__r_.__value_.__r.__words[0];
        if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v118 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
        else
          v118 = v145.__r_.__value_.__l.__size_;
        v119 = std::string::append(&v141, (const std::string::value_type *)v117, v118);
        v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v120;
        v119->__r_.__value_.__l.__size_ = 0;
        v119->__r_.__value_.__r.__words[2] = 0;
        v119->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error((std::runtime_error *)&v131, &v147);
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1003FCB38;
        sub_10018D04C((uint64_t)&v140);
        sub_1001F2298((std::runtime_error *)&v131, (uint64_t)"void db::resources::statement<8, 1>::run(Cb &&, ConstraintHandler &&) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:597:19), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h:485:43)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)&v140);
      }
      sub_100089358((uint64_t)&v132);

      if (SHIBYTE(v134) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_176:
          if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
          goto LABEL_199;
        }
      }
      else if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_176;
      }
      operator delete(v135.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_199:
      operator delete(v136.__r_.__value_.__l.__data_);
      return;
    }
    sub_1002056B0((sqlite3_stmt **)&v128, (uint64_t)v148);
    v145.__r_.__value_.__r.__words[0] = *(_QWORD *)&v148[16];
    v69 = *(_QWORD *)&v148[8];
    *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = *(_QWORD *)&v148[23];
    v70 = v148[31];
    if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2) == 5
      || sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 3) == 5)
    {
      break;
    }
    if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2) != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2);
      v72 = sqlite3_column_int64((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2);
      rep = std::chrono::system_clock::from_time_t(v72).__d_.__rep_;
    }
    sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 3);
    v73 = sqlite3_column_int64((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 3);
    sub_1000892C0(v148, v73, rep);
    v71 = 0;
    *(_OWORD *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(_OWORD *)v148;
LABEL_91:
    if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4) == 5
      || sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 5) == 5)
    {
      if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4) != 5
        && sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 5) != 5
        || sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4) == 5
        && sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 5) == 5)
      {
        v74 = 1;
        goto LABEL_101;
      }
      if (qword_100417F08 == -1)
      {
        v104 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
          goto LABEL_212;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v104 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
          goto LABEL_212;
      }
      *(_QWORD *)v148 = 68289539;
      *(_WORD *)&v148[8] = 2082;
      *(_QWORD *)&v148[10] = "";
      *(_WORD *)&v148[18] = 2082;
      *(_QWORD *)&v148[20] = "assert";
      *(_WORD *)&v148[28] = 2081;
      *(_QWORD *)&v148[30] = "results.isNull<4>() && results.isNull<5>()";
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
      if (qword_100417F08 != -1)
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v105 = qword_100417F10;
        if (os_signpost_enabled((os_log_t)qword_100417F10))
        {
LABEL_213:
          *(_QWORD *)v148 = 68289539;
          *(_WORD *)&v148[8] = 2082;
          *(_QWORD *)&v148[10] = "";
          *(_WORD *)&v148[18] = 2082;
          *(_QWORD *)&v148[20] = "assert";
          *(_WORD *)&v148[28] = 2081;
          *(_QWORD *)&v148[30] = "results.isNull<4>() && results.isNull<5>()";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tile version/refresh timestamp is missing", "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
          if (qword_100417F08 != -1)
            dispatch_once(&qword_100417F08, &stru_1003FC628);
        }
LABEL_215:
        v102 = (id)qword_100417F10;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
        {
          *(_QWORD *)v148 = 68289539;
          *(_WORD *)&v148[8] = 2082;
          *(_QWORD *)&v148[10] = "";
          *(_WORD *)&v148[18] = 2082;
          *(_QWORD *)&v148[20] = "assert";
          *(_WORD *)&v148[28] = 2081;
          *(_QWORD *)&v148[30] = "results.isNull<4>() && results.isNull<5>()";
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Tile version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
        }
        v103 = 616;
        goto LABEL_218;
      }
LABEL_212:
      v105 = qword_100417F10;
      if (os_signpost_enabled((os_log_t)qword_100417F10))
        goto LABEL_213;
      goto LABEL_215;
    }
    if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4) != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4);
      v75 = sqlite3_column_int64((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 4);
      rep = std::chrono::system_clock::from_time_t(v75).__d_.__rep_;
    }
    sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 5);
    v76 = sqlite3_column_int64((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 5);
    sub_1000892C0(v148, v76, rep);
    v74 = 0;
    *(_OWORD *)((char *)v147.__r_.__value_.__r.__words + 7) = *(_OWORD *)v148;
LABEL_101:
    v77 = sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 6);
    if (v77 != 5)
    {
      sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 6);
      v78 = sqlite3_column_int64((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 6);
      v6 = std::chrono::system_clock::from_time_t(v78).__d_.__rep_;
    }
    sub_1000892C8(&v141);
    v79 = *(_QWORD *)(a4 + 24);
    if (!v79)
      sub_10016CA74();
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v79 + 48))(v148, v79, &v128);
    rep = *(_QWORD *)v148;
    v80 = *(_OWORD *)&v148[8];
    *(_OWORD *)&v148[8] = 0uLL;
    v81 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v80;
    if (!v81)
      goto LABEL_108;
    p_shared_owners = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      v84 = *(std::__shared_weak_count **)&v148[16];
      if (!*(_QWORD *)&v148[16])
        goto LABEL_114;
    }
    else
    {
LABEL_108:
      v84 = *(std::__shared_weak_count **)&v148[16];
      if (!*(_QWORD *)&v148[16])
        goto LABEL_114;
    }
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
LABEL_114:
    if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 7) == 5)
    {
      v87 = 0;
      v142.__r_.__value_.__r.__words[0] = v69;
      v142.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v142.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v142.__r_.__value_.__s + 23) = v70;
      v145.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = 0;
      goto LABEL_118;
    }
    v88 = sqlite3_column_int((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 7);
    v87 = v88;
    v142.__r_.__value_.__r.__words[0] = v69;
    v142.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v142.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&v142.__r_.__value_.__s + 23) = v70;
    v145.__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)v145.__r_.__value_.__r.__words + 7) = 0;
    if (v88 != 1)
    {
      if (v88 == 2)
        goto LABEL_121;
LABEL_118:
      if (qword_100417F08 == -1)
      {
        v89 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          goto LABEL_121;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FC628);
        v89 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        {
LABEL_121:
          v90 = 1;
          v144.__r_.__value_.__s.__data_[0] = 0;
          v91 = v126;
          if ((v71 & 1) != 0)
            goto LABEL_123;
LABEL_122:
          *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)__dst.__r_.__value_.__r.__words + 7);
          v144.__r_.__value_.__s.__data_[0] = 1;
          goto LABEL_123;
        }
      }
      LODWORD(v146.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v146.__r_.__value_.__r.__words[0]) = v87;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "location context is an unknown value, %d, will gracefully fail by assuming this is a regional tile. please file a radar", (uint8_t *)&v146, 8u);
      goto LABEL_121;
    }
    v90 = 0;
    v144.__r_.__value_.__s.__data_[0] = 0;
    v91 = v126;
    if ((v71 & 1) == 0)
      goto LABEL_122;
LABEL_123:
    v143.__r_.__value_.__s.__data_[0] = 0;
    if ((v74 & 1) != 0)
    {
      v146.__r_.__value_.__s.__data_[0] = 0;
      if (v77 == 5)
        goto LABEL_126;
LABEL_125:
      v146.__r_.__value_.__l.__size_ = v6;
      v146.__r_.__value_.__s.__data_[0] = 1;
      goto LABEL_126;
    }
    *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v147.__r_.__value_.__r.__words + 7);
    v143.__r_.__value_.__s.__data_[0] = 1;
    v146.__r_.__value_.__s.__data_[0] = 0;
    if (v77 != 5)
      goto LABEL_125;
LABEL_126:
    sub_10008953C((uint64_t)v148, rep, (uint64_t *)&v142, &v141, v90, (unsigned __int8 *)&v144, (unsigned __int8 *)&v143, (unsigned __int8 *)&v146);
    if (*v91)
    {
      sub_1002057B8(v124, (__int128 *)v148);
      if (!v157)
        goto LABEL_129;
LABEL_128:
      v157 = 0;
      goto LABEL_129;
    }
    *(_OWORD *)v124 = *(_OWORD *)v148;
    *(_QWORD *)(v124 + 16) = *(_QWORD *)&v148[16];
    memset(v148, 0, 24);
    *((_OWORD *)v91 + 2) = *(_OWORD *)&v148[24];
    *(_QWORD *)&v148[24] = 0;
    *(_QWORD *)&v148[32] = 0;
    *(_OWORD *)v123 = v149;
    *((_DWORD *)v123 + 4) = v150;
    v91[72] = 0;
    if (v151)
    {
      *v122 = v152;
      v91[72] = 1;
    }
    v91[96] = 0;
    if (v153)
    {
      *v121 = v154;
      v91[96] = 1;
    }
    v91[120] = 0;
    if (v155)
    {
      *((_QWORD *)v91 + 16) = v156;
      v91[120] = 1;
    }
    v91[136] = 0;
    v96 = v157;
    if (v157)
    {
      *((_QWORD *)v91 + 18) = v158;
      v91[136] = 1;
    }
    *v91 = 1;
    if (v96)
      goto LABEL_128;
LABEL_129:
    if (v155)
      v155 = 0;
    if (v153)
      v153 = 0;
    if (v151)
      v151 = 0;
    v92 = *(std::__shared_weak_count **)&v148[32];
    if (!*(_QWORD *)&v148[32])
      goto LABEL_139;
    v93 = (unint64_t *)(*(_QWORD *)&v148[32] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      if ((v148[23] & 0x80000000) != 0)
      {
LABEL_167:
        operator delete(*(void **)v148);
        if (!v146.__r_.__value_.__s.__data_[0])
          goto LABEL_142;
LABEL_141:
        v146.__r_.__value_.__s.__data_[0] = 0;
        goto LABEL_142;
      }
    }
    else
    {
LABEL_139:
      if ((v148[23] & 0x80000000) != 0)
        goto LABEL_167;
    }
    if (v146.__r_.__value_.__s.__data_[0])
      goto LABEL_141;
LABEL_142:
    if (v143.__r_.__value_.__s.__data_[0])
      v143.__r_.__value_.__s.__data_[0] = 0;
    if (v144.__r_.__value_.__s.__data_[0])
      v144.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v142.__r_.__value_.__l.__data_);
      v95 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      if (!v141.__r_.__value_.__l.__size_)
        goto LABEL_75;
    }
    else
    {
      v95 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      if (!v141.__r_.__value_.__l.__size_)
        goto LABEL_75;
    }
    v97 = (unint64_t *)&v95->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
LABEL_75:
    v66 = (sqlite3_stmt *)v132.__r_.__value_.__r.__words[0];
  }
  if (sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2) != 5
    && sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 3) != 5
    || sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 2) == 5
    && sqlite3_column_type((sqlite3_stmt *)v128.__r_.__value_.__l.__data_, 3) == 5)
  {
    v71 = 1;
    goto LABEL_91;
  }
  if (qword_100417F08 == -1)
  {
    v100 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
      goto LABEL_202;
LABEL_203:
    v101 = qword_100417F10;
    if (os_signpost_enabled((os_log_t)qword_100417F10))
      goto LABEL_204;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v100 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
      goto LABEL_203;
LABEL_202:
    *(_QWORD *)v148 = 68289539;
    *(_WORD *)&v148[8] = 2082;
    *(_QWORD *)&v148[10] = "";
    *(_WORD *)&v148[18] = 2082;
    *(_QWORD *)&v148[20] = "assert";
    *(_WORD *)&v148[28] = 2081;
    *(_QWORD *)&v148[30] = "results.isNull<2>() && results.isNull<3>()";
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
    if (qword_100417F08 == -1)
      goto LABEL_203;
    dispatch_once(&qword_100417F08, &stru_1003FC628);
    v101 = qword_100417F10;
    if (os_signpost_enabled((os_log_t)qword_100417F10))
    {
LABEL_204:
      *(_QWORD *)v148 = 68289539;
      *(_WORD *)&v148[8] = 2082;
      *(_QWORD *)&v148[10] = "";
      *(_WORD *)&v148[18] = 2082;
      *(_QWORD *)&v148[20] = "assert";
      *(_WORD *)&v148[28] = 2081;
      *(_QWORD *)&v148[30] = "results.isNull<2>() && results.isNull<3>()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Metadata version/refresh timestamp is missing", "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
      if (qword_100417F08 != -1)
        dispatch_once(&qword_100417F08, &stru_1003FC628);
    }
  }
  v102 = (id)qword_100417F10;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
  {
    *(_QWORD *)v148 = 68289539;
    *(_WORD *)&v148[8] = 2082;
    *(_QWORD *)&v148[10] = "";
    *(_WORD *)&v148[18] = 2082;
    *(_QWORD *)&v148[20] = "assert";
    *(_WORD *)&v148[28] = 2081;
    *(_QWORD *)&v148[30] = "results.isNull<2>() && results.isNull<3>()";
    _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Metadata version/refresh timestamp is missing\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v148, 0x26u);
  }
  v103 = 607;
LABEL_218:

  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", v103, "operator()");
  __break(1u);
}

void sub_1000888F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,std::runtime_error a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  std::runtime_error *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v81;
  void *v82;

  std::runtime_error::~runtime_error(v76);
  STACK[0x280] = v78;
  if (SLOBYTE(STACK[0x29F]) < 0)
  {
    operator delete((void *)STACK[0x288]);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a74 & 0x80000000) == 0)
  {
LABEL_3:
    STACK[0x2A0] = v77;
    if (SLOBYTE(STACK[0x2BF]) < 0)
      goto LABEL_4;
    goto LABEL_11;
  }
  operator delete(a73);
  STACK[0x2A0] = v77;
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x2A8]);
    if ((a76 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  if ((a76 & 0x80000000) == 0)
  {
LABEL_5:
    STACK[0x260] = (unint64_t)off_1003FC7C0;
    if (SLOBYTE(STACK[0x27F]) < 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a75);
  STACK[0x260] = (unint64_t)off_1003FC7C0;
  if (SLOBYTE(STACK[0x27F]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x268]);
    if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  if ((SLOBYTE(STACK[0x217]) & 0x80000000) == 0)
  {
LABEL_7:
    STACK[0x330] = (unint64_t)&off_1003EDD90;
    v81 = STACK[0x338];
    if (!STACK[0x338])
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_14:
  operator delete((void *)STACK[0x200]);
  STACK[0x330] = (unint64_t)&off_1003EDD90;
  v81 = STACK[0x338];
  if (!STACK[0x338])
    goto LABEL_17;
LABEL_15:
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v81 + 32))(v81))
    STACK[0x338] = 0;
LABEL_17:
  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x320]);
  v82 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v82;
    operator delete(v82);
  }
  std::runtime_error::~runtime_error(&a47);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  __cxa_free_exception(v76);
  if (*(char *)(v79 - 105) < 0)
    operator delete(*(void **)(v79 - 128));
  sub_1001E63A0((uint64_t)&a50);
  sub_1001E63D0(a30);
  if (a59 < 0)
    operator delete(a54);
  if (a66 < 0)
    operator delete(a61);
  if (a72 < 0)
  {
    operator delete(a67);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1000892AC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

_QWORD *sub_1000892C0(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

_QWORD *sub_1000892C8(_QWORD *a1)
{
  const char *v3;

  v3 = "";
  sub_10019586C(&v3, a1);
  return a1;
}

_QWORD *sub_10008930C(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  const char *v5;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v5 = v3;
  sub_10019586C(&v5, a1);
  return a1;
}

void sub_100089358(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_100089514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008953C(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[15];

  v9 = *a3;
  *(_QWORD *)v19 = a3[1];
  *(_QWORD *)&v19[7] = *(uint64_t *)((char *)a3 + 15);
  v10 = *((_BYTE *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v11 = *a6;
  if (*a6)
    v18 = *(_OWORD *)(a6 + 8);
  v12 = *a7;
  if (*a7)
    v17 = *(_OWORD *)(a7 + 8);
  v13 = *a8;
  if (*a8)
    v8 = *((_QWORD *)a8 + 1);
  *(_QWORD *)result = v9;
  *(_QWORD *)(result + 8) = *(_QWORD *)v19;
  *(_QWORD *)(result + 15) = *(_QWORD *)&v19[7];
  *(_BYTE *)(result + 23) = v10;
  v14 = a4[1];
  *(_QWORD *)(result + 24) = *a4;
  *(_QWORD *)(result + 32) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 56) = a5;
  *(_BYTE *)(result + 64) = 0;
  if (v11)
  {
    *(_OWORD *)(result + 72) = v18;
    *(_BYTE *)(result + 64) = 1;
  }
  *(_BYTE *)(result + 88) = 0;
  if (v12)
  {
    *(_OWORD *)(result + 96) = v17;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_BYTE *)(result + 112) = 0;
  if (v13)
  {
    *(_QWORD *)(result + 120) = v8;
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 128) = 0;
  return result;
}

void sub_100089650(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 8UL, nQueries = 1UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_100089954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001E63A0(v68);

            _Unwind_Resume(a1);
          }
          sub_1001E63A0(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_100089B7C(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  sqlite3_stmt *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_dst;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  _BYTE v26[24];
  std::string __dst;
  _QWORD v28[2];
  unsigned __int8 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::runtime_error v36;
  std::string v37;

  v3 = a3;
  v6 = *a1;
  v7 = *((char *)a3 + 23);
  v8 = *((_DWORD *)a3 + 2);
  if (v7 >= 0)
  {
    v9 = v7;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    v9 = v8;
  }
  v10 = sqlite3_bind_text(v6, a2, (const char *)a3, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_10008B9C4(v10, a1[1]);
  if (v10)
  {
    v11 = __error();
    sub_10025FF8C(*v11, &v37);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>("Failed to bind ", v3);
    v12 = std::string::append(&v31, " to ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a2);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v30;
    else
      v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v32, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v28, " w/ ");
    if ((v29 & 0x80u) == 0)
      v18 = (const std::string::value_type *)v28;
    else
      v18 = (const std::string::value_type *)v28[0];
    if ((v29 & 0x80u) == 0)
      v19 = v29;
    else
      v19 = v28[1];
    v20 = std::string::append(&v33, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      __dst = v37;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v23 = __dst.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v34, (const std::string::value_type *)p_dst, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v36, &v35);
    v36.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v26);
    sub_1001F2298(&v36, (uint64_t)"void db::resources::statement<8, 1>::bind(int, const std::string &) [nCols = 8, nQueries = 1, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v26);
  }
}

void sub_100089EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  int v76;
  void *v77;
  uint64_t v78;
  void *v80;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v78 - 152));
    v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0)
          goto LABEL_24;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v76 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0)
            operator delete(*(void **)(v78 - 88));
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v77);
        goto LABEL_35;
      }
LABEL_33:
      if (!v76)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v78 - 152));
  v80 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t *sub_10008A178(uint64_t *a1)
{
  _QWORD *v2;
  void *v4;
  void *v5[2];
  char v6;
  std::string __p;

  v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = off_100402D98;
  *a1 = sub_10008A2EC((uint64_t)(v2 + 3));
  a1[1] = (uint64_t)v2;
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromZeroCopyStream() & 1) == 0)
  {
    sub_1000D5048(v5, "");
    sub_10023DBCC("Failed to parse TileHeader", &__p);
    sub_100174738((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    sub_1000F2AE4((uint64_t)&v4);
  }
  return a1;
}

void sub_10008A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000E095C(v20);
    _Unwind_Resume(a1);
  }
  sub_1000E095C(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10008A2EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403670;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_10008A33C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10008A354(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  int v22;
  time_t v23;
  sqlite3_int64 v24;
  time_t v25;
  sqlite3_int64 v26;
  uint64_t v27;
  time_t v28;
  time_t v29;
  int v30;
  int v31;
  int v32;
  NSObject *v33;
  char **v34;
  uint64_t v35;
  NSObject *v36;
  char **v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int *v47;
  std::string *v48;
  __int128 v49;
  int *v50;
  std::string *v51;
  __int128 v52;
  int *v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v66;
  __int128 v67;
  sqlite3_stmt *pStmt;
  sqlite3 *db;
  id v70;
  void *__p[2];
  std::string::size_type v72;
  std::string v73;
  std::string v74;
  std::string v75;
  _BYTE v76[24];
  std::string __dst;
  std::string v78;
  std::string v79;
  std::string v80;
  std::runtime_error v81;
  std::string v82;
  std::string v83;

  *((_BYTE *)&v80.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&v80, "INSERT OR ABORT INTO ");
  v4 = std::string::append(&v80, "venues");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v82, " VALUES (?, ?, (SELECT IFNULL(MAX(");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v73.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (byte_100419F97 >= 0)
    v8 = (const std::string::value_type *)&qword_100419F80;
  else
    v8 = (const std::string::value_type *)qword_100419F80;
  if (byte_100419F97 >= 0)
    v9 = byte_100419F97;
  else
    v9 = *(_QWORD *)&byte_100419F88;
  v10 = std::string::append(&v73, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v74.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v74, "), 0) + 1 FROM ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v75, "venues");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v83, "), ?, ?, ?, ?, ?, ?, ?, NULL);");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v72 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v74.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_22:
    operator delete(v82.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_23:
    operator delete(v80.__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
LABEL_21:
  operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
LABEL_12:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_23;
LABEL_13:
  sub_10008EAF8(*(sqlite3 ***)(a1 + 40), (uint64_t)__p, 0, (uint64_t)&pStmt);
  v18 = sub_10004F6AC(a2);
  v19 = (uint64_t *)sub_100050DB0(v18);
  sub_10008C3C8(&pStmt, 1, v19);
  v20 = (uint64_t *)nullsub_10(a2);
  sub_10008C3C8(&pStmt, 2, v20);
  v21 = sub_10008D00C(a2);
  if (v21)
    v22 = 2 * (v21 == 1);
  else
    v22 = 1;
  sub_10008D214(&pStmt, 3, v22);
  sub_10008CFF0(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    v23 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008C9C4(&pStmt, 4, v23);
  }
  else
  {
    sub_10008B490(&pStmt, 4);
  }
  if (sub_10008C390(a2))
    sub_10008C9C4(&pStmt, 5, v24);
  else
    sub_10008B490(&pStmt, 5);
  sub_10008D014(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    v25 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008C9C4(&pStmt, 6, v25);
  }
  else
  {
    sub_10008B490(&pStmt, 6);
  }
  if (sub_10008C3AC(a2))
    sub_10008C9C4(&pStmt, 7, v26);
  else
    sub_10008B490(&pStmt, 7);
  v27 = sub_10008E4DC(a2);
  if (*(_BYTE *)v27)
  {
    v83.__r_.__value_.__r.__words[0] = *(_QWORD *)(v27 + 8);
    v28 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v83);
    sub_10008C9C4(&pStmt, 8, v28);
  }
  else
  {
    sub_10008B490(&pStmt, 8);
  }
  sub_10008E4F4(a2, (uint64_t)&v83);
  if (v83.__r_.__value_.__s.__data_[0])
  {
    v75.__r_.__value_.__r.__words[0] = v83.__r_.__value_.__l.__size_;
    v29 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v75);
    sub_10008C9C4(&pStmt, 9, v29);
  }
  else
  {
    sub_10008B490(&pStmt, 9);
  }
  while (1)
  {
    while (1)
    {
      do
      {
        v30 = sqlite3_step(pStmt);
        v31 = v30;
      }
      while (v30 == 100);
      if (v30 == 101)
        break;
      if (v30 == 19)
      {
        if (qword_100417F08 == -1)
        {
          v33 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
            goto LABEL_51;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FC628);
          v33 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
          {
LABEL_51:
            if (sqlite3_reset(pStmt) != 19)
            {
              sub_10008B9C4(v31, db);
              v53 = __error();
              sub_10025FF8C(*v53, &v82);
              __cxa_allocate_exception(0x40uLL);
              sub_1000D5048(&v78, " w/ ");
              v54 = std::string::insert(&v78, 0, "Failed sqlite3_step");
              v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v79.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                sub_10006CED8(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
              else
                __dst = v82;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_dst = &__dst;
              else
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              else
                size = __dst.__r_.__value_.__l.__size_;
              v66 = std::string::append(&v79, (const std::string::value_type *)p_dst, size);
              v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
              v80.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v67;
              v66->__r_.__value_.__l.__size_ = 0;
              v66->__r_.__value_.__r.__words[2] = 0;
              v66->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(&v81, &v80);
              v81.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
              sub_10018D04C((uint64_t)v76);
              sub_1001F2298(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 508, (uint64_t)v76);
            }
            goto LABEL_52;
          }
        }
        LOWORD(v83.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Query constraint violation", (uint8_t *)&v83, 2u);
        goto LABEL_51;
      }
      sub_10008B9C4(v30, db);
      if (v31)
      {
        v47 = __error();
        sub_10025FF8C(*v47, &v82);
        __cxa_allocate_exception(0x40uLL);
        sub_1000D5048(&v78, " w/ ");
        v48 = std::string::insert(&v78, 0, "Failed sqlite3_step");
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          sub_10006CED8(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
        else
          __dst = v82;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &__dst;
        else
          v56 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v57 = __dst.__r_.__value_.__l.__size_;
        v58 = std::string::append(&v79, (const std::string::value_type *)v56, v57);
        v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(&v81, &v80);
        v81.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
        sub_10018D04C((uint64_t)v76);
        sub_1001F2298(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 512, (uint64_t)v76);
      }
    }
    v32 = sqlite3_reset(pStmt);
    sub_10008B9C4(v32, db);
    if (v32)
    {
      v50 = __error();
      sub_10025FF8C(*v50, &v82);
      __cxa_allocate_exception(0x40uLL);
      sub_1000D5048(&v78, " w/ ");
      v51 = std::string::insert(&v78, 0, "Failed to execute query");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        sub_10006CED8(&__dst, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
      else
        __dst = v82;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &__dst;
      else
        v60 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v61 = __dst.__r_.__value_.__l.__size_;
      v62 = std::string::append(&v79, (const std::string::value_type *)v60, v61);
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v81, &v80);
      v81.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
      sub_10018D04C((uint64_t)v76);
      sub_1001F2298(&v81, (uint64_t)"void db::resources::statement<0, 9>::run(Cb &&, ConstraintHandler &&) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, Cb = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:23), ConstraintHandler = (lambda at /Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm:704:29)]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 518, (uint64_t)v76);
    }
LABEL_52:
    v34 = (char **)sub_10004F6AC(a2);
    if (sub_100081574(a1, v34))
      break;
    if (qword_100417F08 == -1)
    {
      v36 = (id)qword_100417F10;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        goto LABEL_40;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v36 = (id)qword_100417F10;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        goto LABEL_40;
    }
    v37 = (char **)sub_10004F6AC(a2);
    v38 = sub_10004BE10(v37);
    v39 = sub_10004F6AC(a2);
    v40 = sub_100050DB0(v39);
    v41 = *(char *)(v40 + 23);
    if (v41 >= 0)
      v42 = (uint64_t *)v40;
    else
      v42 = *(uint64_t **)v40;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(v40 + 23);
    else
      v43 = *(_QWORD *)(v40 + 8);
    v44 = sub_1000CFA7C((uint64_t)&v75, v42, v43);
    LODWORD(v83.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    WORD2(v83.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v83.__r_.__value_.__r.__words[1] + 6) = v44;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Failed to insert resource %{private}s (%lu). Retrying", (uint8_t *)&v83, 0x16u);
LABEL_40:

  }
  v45 = v35;
  sub_10008D030((uint64_t)&pStmt);

  if (SHIBYTE(v72) < 0)
    operator delete(__p[0]);
  return v45;
}

void sub_10008B044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t a68;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *v76;
  int v77;
  uint64_t v78;
  void *v80;

  if (a33 < 0)
  {
    operator delete(a28);
    if (a26 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (a47 < 0)
      {
LABEL_7:
        operator delete(a42);
        if ((a40 & 0x80000000) == 0)
          goto LABEL_8;
        goto LABEL_13;
      }
LABEL_12:
      if ((a40 & 0x80000000) == 0)
      {
LABEL_8:
        if (a61 < 0)
          goto LABEL_9;
        goto LABEL_14;
      }
LABEL_13:
      operator delete(a35);
      if (a61 < 0)
      {
LABEL_9:
        operator delete(a56);
        if ((a54 & 0x80000000) == 0)
          goto LABEL_10;
        goto LABEL_15;
      }
LABEL_14:
      if ((a54 & 0x80000000) == 0)
      {
LABEL_10:
        sub_1001F26E8((std::runtime_error *)(v78 - 176));
        v80 = a67;
        if (!a67)
        {
LABEL_17:
          std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 224));
          if (*(char *)(v78 - 233) < 0)
          {
            operator delete(*(void **)(v78 - 256));
            if (a72 < 0)
            {
LABEL_21:
              operator delete(a70);
              if ((a76 & 0x80000000) == 0)
                goto LABEL_22;
              goto LABEL_26;
            }
          }
          else if (a72 < 0)
          {
            goto LABEL_21;
          }
          if ((a76 & 0x80000000) == 0)
          {
LABEL_22:
            if (a74 < 0)
              goto LABEL_23;
            goto LABEL_27;
          }
LABEL_26:
          operator delete(a75);
          if (a74 < 0)
          {
LABEL_23:
            operator delete(a73);
            if ((v77 & 1) == 0)
            {
LABEL_29:
              if (*(char *)(v78 - 185) < 0)
                operator delete(*(void **)(v78 - 208));
              sub_1001E6480((uint64_t)&a12);
              if (a20 < 0)
                operator delete(a15);
              _Unwind_Resume(a1);
            }
LABEL_28:
            __cxa_free_exception(v76);
            goto LABEL_29;
          }
LABEL_27:
          if (!v77)
            goto LABEL_29;
          goto LABEL_28;
        }
LABEL_16:
        a68 = (uint64_t)v80;
        operator delete(v80);
        goto LABEL_17;
      }
LABEL_15:
      operator delete(a49);
      sub_1001F26E8((std::runtime_error *)(v78 - 176));
      v80 = a67;
      if (!a67)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_3;
  }
  if (a47 < 0)
    goto LABEL_7;
  goto LABEL_12;
}

void sub_10008B490(sqlite3_stmt **a1, int a2)
{
  int v4;
  int *v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  _BYTE v16[24];
  std::string __dst;
  _QWORD v18[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::runtime_error v24;
  std::string v25;

  v4 = sqlite3_bind_null(*a1, a2);
  sub_10008B9C4(v4, a1[1]);
  if (v4)
  {
    v5 = __error();
    sub_10025FF8C(*v5, &v25);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v20, a2);
    v6 = std::string::insert(&v20, 0, "Failed to bind null to ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v18, " w/ ");
    if ((v19 & 0x80u) == 0)
      v8 = (const std::string::value_type *)v18;
    else
      v8 = (const std::string::value_type *)v18[0];
    if ((v19 & 0x80u) == 0)
      v9 = v19;
    else
      v9 = v18[1];
    v10 = std::string::append(&v21, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      __dst = v25;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v22, (const std::string::value_type *)p_dst, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v24, &v23);
    v24.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v16);
    sub_1001F2298(&v24, (uint64_t)"void db::resources::statement<0, 9>::bind(int, std::nullptr_t) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 433, (uint64_t)v16);
  }
}

void sub_10008B758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;
  void *v76;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v74 - 152));
    v76 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 168));
      if (*(char *)(v74 - 169) < 0)
      {
        operator delete(*(void **)(v74 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v74 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_26;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v74 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a67 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v74 - 224));
      if ((a67 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v74 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_28;
      }
LABEL_27:
      operator delete(a62);
      if ((*(char *)(v74 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if (a72 < 0)
          goto LABEL_22;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v74 - 256));
      if (a72 < 0)
      {
LABEL_22:
        operator delete(a68);
        if ((v73 & 1) == 0)
        {
LABEL_31:
          if (*(char *)(v74 - 65) < 0)
            operator delete(*(void **)(v74 - 88));
          _Unwind_Resume(a1);
        }
LABEL_30:
        __cxa_free_exception(v72);
        goto LABEL_31;
      }
LABEL_29:
      if (!v73)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_15:
    operator delete(v76);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v74 - 152));
  v76 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_10008B9C4(char a1, sqlite3 *db)
{
  const char *v3;
  const char *v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  size_t v9;
  size_t v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  std::error_code *v17;
  void *v18;
  const std::__fs::filesystem::path *v19;
  std::error_code *v20;
  NSObject *v21;
  void *v22;
  int v23;
  int *v24;
  char *v25;
  int v26;
  size_t v27;
  unint64_t v28;
  void **p_dst;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  const std::__fs::filesystem::path *v33;
  std::error_code *v34;
  NSObject *v35;
  void **p_data;
  int v37;
  int *v38;
  char *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  const std::__fs::filesystem::path *v47;
  std::error_code *v48;
  NSObject *v49;
  void *v50;
  int v51;
  int *v52;
  char *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *p_p;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  const std::__fs::filesystem::path *v61;
  NSObject *v62;
  void *v63;
  int v64;
  int *v65;
  char *v66;
  void *v67;
  size_t v68;
  int64_t v69;
  void *__p;
  size_t v71;
  int64_t v72;
  void *v73;
  size_t v74;
  int64_t v75;
  std::__fs::filesystem::path *__dst;
  size_t v77;
  int64_t v78;
  uint8_t buf[4];
  _BYTE v80[10];
  int v81;
  __int16 v82;
  char *v83;

  if (a1 == 11)
  {
    if (!db)
    {
      if (qword_100417F08 == -1)
      {
        v12 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
          return;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FF920);
        v12 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
          return;
      }
      *(_WORD *)buf = 0;
      v13 = "null sqlite3 handle for corrupt database, we can't take any action";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, v13, buf, 2u);
      return;
    }
    v3 = sqlite3_db_filename(db, "main");
    if (v3)
    {
      v4 = v3;
      v5 = sqlite3_close(db);
      if (!v5)
        goto LABEL_8;
      v6 = v5;
      if (qword_100417F08 == -1)
      {
        v7 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          goto LABEL_8;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FF920);
        v7 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        {
LABEL_8:
          v9 = strlen(v4);
          if (v9 > 0x7FFFFFFFFFFFFFF7)
            sub_1000CDE30();
          v10 = v9;
          if (v9 >= 0x17)
          {
            v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17)
              v14 = v9 | 7;
            v15 = v14 + 1;
            v11 = operator new(v14 + 1);
            v68 = v10;
            v69 = v15 | 0x8000000000000000;
            v67 = v11;
          }
          else
          {
            HIBYTE(v69) = v9;
            v11 = &v67;
            if (!v9)
            {
LABEL_23:
              *((_BYTE *)v11 + v10) = 0;
              if (qword_100417F08 == -1)
              {
                v16 = qword_100417F10;
                if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_28;
              }
              else
              {
                dispatch_once(&qword_100417F08, &stru_1003FF920);
                v16 = qword_100417F10;
                if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_28;
              }
              v18 = &v67;
              if (v69 < 0)
                v18 = v67;
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)v80 = v18;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Deleting database and ancillary files at path, %{public}s", buf, 0xCu);
LABEL_28:
              if (v69 >= 0)
                v19 = (const std::__fs::filesystem::path *)&v67;
              else
                v19 = (const std::__fs::filesystem::path *)v67;
              if (remove(v19, v17))
              {
                if (qword_100417F08 == -1)
                {
                  v21 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
                    goto LABEL_38;
                }
                else
                {
                  dispatch_once(&qword_100417F08, &stru_1003FF920);
                  v21 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
                    goto LABEL_38;
                }
                if (v69 >= 0)
                  v22 = &v67;
                else
                  v22 = v67;
                v23 = *__error();
                v24 = __error();
                v25 = strerror(*v24);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)v80 = v22;
                *(_WORD *)&v80[8] = 1026;
                v81 = v23;
                v82 = 2082;
                v83 = v25;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "could not remove file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_38:
              v26 = SHIBYTE(v69);
              if (v69 >= 0)
                v27 = HIBYTE(v69);
              else
                v27 = v68;
              v28 = v27 + 8;
              if (v27 + 8 > 0x7FFFFFFFFFFFFFF7)
                sub_1000CDE30();
              if (v28 >= 0x17)
              {
                v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17)
                  v30 = v28 | 7;
                v31 = v30 + 1;
                p_dst = (void **)operator new(v30 + 1);
                v77 = v27 + 8;
                v78 = v31 | 0x8000000000000000;
                __dst = (std::__fs::filesystem::path *)p_dst;
              }
              else
              {
                v77 = 0;
                v78 = 0;
                __dst = 0;
                p_dst = (void **)&__dst;
                HIBYTE(v78) = v27 + 8;
                if (!v27)
                  goto LABEL_52;
              }
              if (v26 >= 0)
                v32 = &v67;
              else
                v32 = v67;
              memmove(p_dst, v32, v27);
LABEL_52:
              strcpy((char *)p_dst + v27, "-journal");
              if (v78 >= 0)
                v33 = (const std::__fs::filesystem::path *)&__dst;
              else
                v33 = __dst;
              if (remove(v33, v20))
              {
                if (qword_100417F08 == -1)
                {
                  v35 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_62;
                }
                else
                {
                  dispatch_once(&qword_100417F08, &stru_1003FF920);
                  v35 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_62;
                }
                if (v78 >= 0)
                  p_data = (void **)&__dst;
                else
                  p_data = (void **)&__dst->__pn_.__r_.__value_.__l.__data_;
                v37 = *__error();
                v38 = __error();
                v39 = strerror(*v38);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)v80 = p_data;
                *(_WORD *)&v80[8] = 1026;
                v81 = v37;
                v82 = 2082;
                v83 = v39;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_62:
              v40 = SHIBYTE(v69);
              if (v69 >= 0)
                v41 = HIBYTE(v69);
              else
                v41 = v68;
              v42 = v41 + 4;
              if (v41 + 4 > 0x7FFFFFFFFFFFFFF7)
                sub_1000CDE30();
              if (v42 >= 0x17)
              {
                v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v44 = v42 | 7;
                v45 = v44 + 1;
                v43 = operator new(v44 + 1);
                v74 = v41 + 4;
                v75 = v45 | 0x8000000000000000;
                v73 = v43;
              }
              else
              {
                v74 = 0;
                v75 = 0;
                v73 = 0;
                v43 = &v73;
                HIBYTE(v75) = v41 + 4;
                if (!v41)
                  goto LABEL_76;
              }
              if (v40 >= 0)
                v46 = &v67;
              else
                v46 = v67;
              memmove(v43, v46, v41);
LABEL_76:
              strcpy((char *)v43 + v41, "-wal");
              if (v75 >= 0)
                v47 = (const std::__fs::filesystem::path *)&v73;
              else
                v47 = (const std::__fs::filesystem::path *)v73;
              if (remove(v47, v34))
              {
                if (qword_100417F08 == -1)
                {
                  v49 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_86;
                }
                else
                {
                  dispatch_once(&qword_100417F08, &stru_1003FF920);
                  v49 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_86;
                }
                if (v75 >= 0)
                  v50 = &v73;
                else
                  v50 = v73;
                v51 = *__error();
                v52 = __error();
                v53 = strerror(*v52);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)v80 = v50;
                *(_WORD *)&v80[8] = 1026;
                v81 = v51;
                v82 = 2082;
                v83 = v53;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_86:
              v54 = SHIBYTE(v69);
              if (v69 >= 0)
                v55 = HIBYTE(v69);
              else
                v55 = v68;
              v56 = v55 + 4;
              if (v55 + 4 > 0x7FFFFFFFFFFFFFF7)
                sub_1000CDE30();
              if (v56 >= 0x17)
              {
                v58 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v56 | 7) != 0x17)
                  v58 = v56 | 7;
                v59 = v58 + 1;
                p_p = operator new(v58 + 1);
                v71 = v55 + 4;
                v72 = v59 | 0x8000000000000000;
                __p = p_p;
              }
              else
              {
                v71 = 0;
                v72 = 0;
                __p = 0;
                p_p = &__p;
                HIBYTE(v72) = v55 + 4;
                if (!v55)
                  goto LABEL_100;
              }
              if (v54 >= 0)
                v60 = &v67;
              else
                v60 = v67;
              memmove(p_p, v60, v55);
LABEL_100:
              strcpy((char *)p_p + v55, "-shm");
              if (v72 >= 0)
                v61 = (const std::__fs::filesystem::path *)&__p;
              else
                v61 = (const std::__fs::filesystem::path *)__p;
              if (remove(v61, v48))
              {
                if (qword_100417F08 == -1)
                {
                  v62 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_110;
                }
                else
                {
                  dispatch_once(&qword_100417F08, &stru_1003FF920);
                  v62 = qword_100417F10;
                  if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_110;
                }
                if (v72 >= 0)
                  v63 = &__p;
                else
                  v63 = __p;
                v64 = *__error();
                v65 = __error();
                v66 = strerror(*v65);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)v80 = v63;
                *(_WORD *)&v80[8] = 1026;
                v81 = v64;
                v82 = 2082;
                v83 = v66;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#warning, could not unlink file, path, %{public}s, errno, %{public}d, error, %{public}s", buf, 0x1Cu);
              }
LABEL_110:
              if (SHIBYTE(v72) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v75) & 0x80000000) == 0)
                {
LABEL_112:
                  if ((SHIBYTE(v78) & 0x80000000) == 0)
                    goto LABEL_113;
                  goto LABEL_118;
                }
              }
              else if ((SHIBYTE(v75) & 0x80000000) == 0)
              {
                goto LABEL_112;
              }
              operator delete(v73);
              if ((SHIBYTE(v78) & 0x80000000) == 0)
              {
LABEL_113:
                if ((SHIBYTE(v69) & 0x80000000) == 0)
                  goto LABEL_114;
LABEL_119:
                operator delete(v67);
LABEL_114:
                off_100418BE0();
              }
LABEL_118:
              operator delete(__dst);
              if ((SHIBYTE(v69) & 0x80000000) == 0)
                goto LABEL_114;
              goto LABEL_119;
            }
          }
          memmove(v11, v4, v10);
          goto LABEL_23;
        }
      }
      v8 = *__error();
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v80 = v6;
      *(_WORD *)&v80[4] = 1026;
      *(_DWORD *)&v80[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to successfully close db handle, rc, %{public}d, errno, %{public}d", buf, 0xEu);
      goto LABEL_8;
    }
    if (qword_100417F08 == -1)
    {
      v12 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
      {
LABEL_17:
        *(_WORD *)buf = 0;
        v13 = "null filepath for corrupt databse, we can't take any action";
        goto LABEL_18;
      }
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v12 = qword_100417F10;
      if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
        goto LABEL_17;
    }
  }
}

void sub_10008C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a14 & 0x80000000) == 0)
LABEL_10:
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  operator delete(a27);
  if ((a14 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

BOOL sub_10008C390(uint64_t a1)
{
  return *(_BYTE *)(a1 + 64) != 0;
}

BOOL sub_10008C3AC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 88) != 0;
}

void sub_10008C3C8(sqlite3_stmt **a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  sqlite3_stmt *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_dst;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  _BYTE v26[24];
  std::string __dst;
  _QWORD v28[2];
  unsigned __int8 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::runtime_error v36;
  std::string v37;

  v3 = a3;
  v6 = *a1;
  v7 = *((char *)a3 + 23);
  v8 = *((_DWORD *)a3 + 2);
  if (v7 >= 0)
  {
    v9 = v7;
  }
  else
  {
    a3 = (uint64_t *)*a3;
    v9 = v8;
  }
  v10 = sqlite3_bind_text(v6, a2, (const char *)a3, v9, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sub_10008B9C4(v10, a1[1]);
  if (v10)
  {
    v11 = __error();
    sub_10025FF8C(*v11, &v37);
    __cxa_allocate_exception(0x40uLL);
    std::operator+<char>("Failed to bind ", v3);
    v12 = std::string::append(&v31, " to ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a2);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v30;
    else
      v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v32, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v28, " w/ ");
    if ((v29 & 0x80u) == 0)
      v18 = (const std::string::value_type *)v28;
    else
      v18 = (const std::string::value_type *)v28[0];
    if ((v29 & 0x80u) == 0)
      v19 = v29;
    else
      v19 = v28[1];
    v20 = std::string::append(&v33, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      __dst = v37;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v23 = __dst.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v34, (const std::string::value_type *)p_dst, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v36, &v35);
    v36.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v26);
    sub_1001F2298(&v36, (uint64_t)"void db::resources::statement<0, 9>::bind(int, const std::string &) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 448, (uint64_t)v26);
  }
}

void sub_10008C700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  int v76;
  void *v77;
  uint64_t v78;
  void *v80;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v78 - 152));
    v80 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v78 - 168));
      if (*(char *)(v78 - 169) < 0)
      {
        operator delete(*(void **)(v78 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v78 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_28;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v78 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v78 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v78 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(a61);
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(*(void **)(v78 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(a67);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_23:
        if (a74 < 0)
          goto LABEL_24;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_24:
        operator delete(a73);
        if ((v76 & 1) == 0)
        {
LABEL_35:
          if (*(char *)(v78 - 65) < 0)
            operator delete(*(void **)(v78 - 88));
          _Unwind_Resume(a1);
        }
LABEL_34:
        __cxa_free_exception(v77);
        goto LABEL_35;
      }
LABEL_33:
      if (!v76)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_15:
    operator delete(v80);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v78 - 152));
  v80 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_10008C9C4(sqlite3_stmt **a1, int a2, sqlite3_int64 a3)
{
  int v6;
  int *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *p_dst;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  _BYTE v24[24];
  std::string __dst;
  _QWORD v26[2];
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::runtime_error v35;
  std::string v36;

  v6 = sqlite3_bind_int64(*a1, a2, a3);
  sub_10008B9C4(v6, a1[1]);
  if (v6)
  {
    v7 = __error();
    sub_10025FF8C(*v7, &v36);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v29, a3);
    v8 = std::string::insert(&v29, 0, "Failed to bind ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v30, " to ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, a2);
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v28;
    else
      v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    else
      size = v28.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v31, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v26, " w/ ");
    if ((v27 & 0x80u) == 0)
      v16 = (const std::string::value_type *)v26;
    else
      v16 = (const std::string::value_type *)v26[0];
    if ((v27 & 0x80u) == 0)
      v17 = v27;
    else
      v17 = v26[1];
    v18 = std::string::append(&v32, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      __dst = v36;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v21 = __dst.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v33, (const std::string::value_type *)p_dst, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v35, &v34);
    v35.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v24);
    sub_1001F2298(&v35, (uint64_t)"void db::resources::statement<0, 9>::bind(int, int64_t) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 417, (uint64_t)v24);
  }
}

void sub_10008CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  int v78;
  void *v79;
  uint64_t v80;
  void *v82;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v80 - 152));
    v82 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v80 - 168));
      if (*(char *)(v80 - 169) < 0)
      {
        operator delete(*(void **)(v80 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v80 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_29;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v80 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a66 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(*(void **)(v80 - 224));
      if ((a66 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v80 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_31;
      }
LABEL_30:
      operator delete(a61);
      if ((*(char *)(v80 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if ((a72 & 0x80000000) == 0)
          goto LABEL_22;
        goto LABEL_32;
      }
LABEL_31:
      operator delete(*(void **)(v80 - 256));
      if ((a72 & 0x80000000) == 0)
      {
LABEL_22:
        if ((a78 & 0x80000000) == 0)
          goto LABEL_23;
        goto LABEL_33;
      }
LABEL_32:
      operator delete(a67);
      if ((a78 & 0x80000000) == 0)
      {
LABEL_23:
        if ((a76 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_34;
      }
LABEL_33:
      operator delete(a77);
      if ((a76 & 0x80000000) == 0)
      {
LABEL_24:
        if (a74 < 0)
          goto LABEL_25;
        goto LABEL_35;
      }
LABEL_34:
      operator delete(a75);
      if (a74 < 0)
      {
LABEL_25:
        operator delete(a73);
        if ((v78 & 1) == 0)
        {
LABEL_37:
          if (*(char *)(v80 - 65) < 0)
            operator delete(*(void **)(v80 - 88));
          _Unwind_Resume(a1);
        }
LABEL_36:
        __cxa_free_exception(v79);
        goto LABEL_37;
      }
LABEL_35:
      if (!v78)
        goto LABEL_37;
      goto LABEL_36;
    }
LABEL_15:
    operator delete(v82);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v80 - 152));
  v82 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t sub_10008CFF0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 64);
  if (v2)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 80);
    v2 = 1;
  }
  *(_BYTE *)a2 = v2;
  return result;
}

uint64_t sub_10008D00C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_10008D014@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 88);
  if (v2)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 104);
    v2 = 1;
  }
  *(_BYTE *)a2 = v2;
  return result;
}

void sub_10008D030(uint64_t a1)
{
  sqlite3_stmt *v2;
  const char *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void **__dst;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v2 = *(sqlite3_stmt **)a1;
  if (!v2)
    return;
  v3 = sqlite3_sql(v2);
  if (v3)
    v4 = v3;
  else
    v4 = "<unknown query>";
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    __dst = p_dst;
    v14 = v9 | 0x8000000000000000;
    goto LABEL_12;
  }
  HIBYTE(v14) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_12:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = sqlite3_finalize(*(sqlite3_stmt **)a1);
  if (v10)
  {
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FC628);
      v11 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      goto LABEL_16;
    }
    v11 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_DWORD *)buf = 67240192;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to finalize with %{public}d", buf, 8u);
    }
  }
LABEL_17:
  *(_QWORD *)a1 = 0;
  v12 = *(void **)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst);
}

void sub_10008D1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008D214(sqlite3_stmt **a1, int a2, int a3)
{
  int v5;
  int *v6;
  std::string *v7;
  __int128 v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  _BYTE v17[24];
  std::string __dst;
  _QWORD v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::runtime_error v25;
  std::string v26;

  v5 = sqlite3_bind_int(*a1, a2, a3);
  sub_10008B9C4(v5, a1[1]);
  if (v5)
  {
    v6 = __error();
    sub_10025FF8C(*v6, &v26);
    __cxa_allocate_exception(0x40uLL);
    std::to_string(&v21, a2);
    v7 = std::string::insert(&v21, 0, "Failed to bind parameter ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1000D5048(v19, " w/ ");
    if ((v20 & 0x80u) == 0)
      v9 = (const std::string::value_type *)v19;
    else
      v9 = (const std::string::value_type *)v19[0];
    if ((v20 & 0x80u) == 0)
      v10 = v20;
    else
      v10 = v19[1];
    v11 = std::string::append(&v22, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
    else
      __dst = v26;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v23, (const std::string::value_type *)p_dst, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v25, &v24);
    v25.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v17);
    sub_1001F2298(&v25, (uint64_t)"void db::resources::statement<0, 9>::bind(int, int) [nCols = 0, nQueries = 9, ColumnNumberType = unsigned long, runtime_binding = false]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 409, (uint64_t)v17);
  }
}

void sub_10008D4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;
  void *v76;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v74 - 152));
    v76 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v74 - 168));
      if (*(char *)(v74 - 169) < 0)
      {
        operator delete(*(void **)(v74 - 192));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v74 - 201) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_26;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v74 - 201) & 0x80000000) == 0)
      {
LABEL_19:
        if ((a67 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v74 - 224));
      if ((a67 & 0x80000000) == 0)
      {
LABEL_20:
        if ((*(char *)(v74 - 233) & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_28;
      }
LABEL_27:
      operator delete(a62);
      if ((*(char *)(v74 - 233) & 0x80000000) == 0)
      {
LABEL_21:
        if (a72 < 0)
          goto LABEL_22;
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v74 - 256));
      if (a72 < 0)
      {
LABEL_22:
        operator delete(a68);
        if ((v73 & 1) == 0)
        {
LABEL_31:
          if (*(char *)(v74 - 65) < 0)
            operator delete(*(void **)(v74 - 88));
          _Unwind_Resume(a1);
        }
LABEL_30:
        __cxa_free_exception(v72);
        goto LABEL_31;
      }
LABEL_29:
      if (!v73)
        goto LABEL_31;
      goto LABEL_30;
    }
LABEL_15:
    operator delete(v76);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v74 - 152));
  v76 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_10008D748(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)();
  uint64_t v5;
  void **p_p;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  const std::chrono::system_clock::time_point *v14;
  time_t v15;
  int v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  time_t v30;
  int v31;
  size_t v32;
  unint64_t v33;
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  char *v45;
  std::string *v46;
  __int128 v47;
  unint64_t v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  void **v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  char *v66;
  void **v67;
  void **i;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  id v72;
  NSObject *v73;
  char **v74;
  char *v75;
  id v76;
  NSObject *v77;
  char **v78;
  char *v79;
  id v80;
  NSObject *v81;
  char **v82;
  char *v83;
  void *v84[2];
  unsigned __int8 v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string __dst;
  uint64_t (***v91)();
  void *v92[2];
  int64_t v93;
  void *__p;
  _BYTE v95[30];
  __int16 v96;
  const char *v97;
  char v98[8];
  void *v99[2];
  char v100;
  std::__shared_weak_count *v101;
  char v102;
  char v103;
  char v104;
  char v105;
  uint64_t (**v106)();
  char *v107;
  unint64_t v108;
  void **v109;

  __p = off_1003FD300;
  *(_QWORD *)v95 = sub_10004F6AC(a2);
  *(_QWORD *)&v95[16] = &__p;
  v106 = off_1003FD390;
  v107 = *(char **)v95;
  v109 = (void **)&v106;
  sub_100086B2C(a1, 1, (uint64_t)&__p, (uint64_t)&v106, v98);
  v4 = (uint64_t (***)())v109;
  if (v109 == (void **)&v106)
  {
    v5 = 4;
    v4 = &v106;
  }
  else
  {
    if (!v109)
      goto LABEL_6;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_6:
  p_p = *(void ***)&v95[16];
  if (*(void ***)&v95[16] == &__p)
  {
    v7 = 4;
    p_p = &__p;
  }
  else
  {
    if (!*(_QWORD *)&v95[16])
      goto LABEL_11;
    v7 = 5;
  }
  (*((void (**)(void))*p_p + v7))();
LABEL_11:
  if (!v98[0])
  {
    v72 = sub_1001E487C();
    v73 = objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
    {
      v74 = (char **)sub_10004F6AC(a2);
      v75 = sub_10004BE10(v74);
      __p = (void *)68289795;
      *(_WORD *)v95 = 2082;
      *(_QWORD *)&v95[2] = "";
      *(_WORD *)&v95[10] = 2081;
      *(_QWORD *)&v95[12] = v75;
      *(_WORD *)&v95[20] = 2082;
      *(_QWORD *)&v95[22] = "assert";
      v96 = 2081;
      v97 = "current.is_initialized()";
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"couldn't find resource in db\", \"locationId\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x30u);
    }

    v76 = sub_1001E487C();
    v77 = objc_claimAutoreleasedReturnValue(v76);
    if (os_signpost_enabled(v77))
    {
      v78 = (char **)sub_10004F6AC(a2);
      v79 = sub_10004BE10(v78);
      __p = (void *)68289795;
      *(_WORD *)v95 = 2082;
      *(_QWORD *)&v95[2] = "";
      *(_WORD *)&v95[10] = 2081;
      *(_QWORD *)&v95[12] = v79;
      *(_WORD *)&v95[20] = 2082;
      *(_QWORD *)&v95[22] = "assert";
      v96 = 2081;
      v97 = "current.is_initialized()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "couldn't find resource in db", "{\"msg%{public}.0s\":\"couldn't find resource in db\", \"locationId\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x30u);
    }

    v80 = sub_1001E487C();
    v81 = objc_claimAutoreleasedReturnValue(v80);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
    {
      v82 = (char **)sub_10004F6AC(a2);
      v83 = sub_10004BE10(v82);
      sub_100342F48((uint64_t)v83, (uint64_t)&__p);
    }

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sql_privacy_db.mm", 726, "onQueueUpdateVenue");
    __break(1u);
    return;
  }
  __p = 0;
  *(_QWORD *)v95 = 0;
  *(_QWORD *)&v95[8] = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v91 = &v106;
  v8 = (_BYTE *)sub_10008E4EC(a2);
  v9 = (_BYTE *)sub_10008E4EC((uint64_t)v99);
  sub_1001E64B0((uint64_t *)&v91, (const void **)&xmmword_100419FB0, (const void **)&qword_100419FF8, v8, v9);
  v10 = (_BYTE *)sub_10008E4E4(a2);
  v11 = (_BYTE *)sub_10008E4E4((uint64_t)v99);
  sub_1001E64B0((uint64_t *)&v91, (const void **)&qword_100419FC8, (const void **)&xmmword_10041A010, v10, v11);
  if (*(_BYTE *)sub_10008E4DC(a2))
  {
    v12 = sub_10008E4DC(a2);
    v13 = sub_10008E4DC((uint64_t)v99);
    if (*(_BYTE *)v12 && *(_BYTE *)v13)
    {
      if (*(_QWORD *)(v12 + 8) == *(_QWORD *)(v13 + 8))
        goto LABEL_45;
    }
    else if ((*(_BYTE *)v12 != 0) != (*(_BYTE *)v13 == 0))
    {
      goto LABEL_45;
    }
    v14 = (const std::chrono::system_clock::time_point *)sub_10008E4DC(a2);
    v15 = std::chrono::system_clock::to_time_t(v14 + 1);
    v16 = byte_100419FF7;
    if (byte_100419FF7 >= 0)
      v17 = byte_100419FF7;
    else
      v17 = qword_100419FE8;
    v18 = v17 + 1;
    if (v17 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_1000CDE30();
    v19 = v15;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v17 + 1;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17 + 1;
      if (!v17)
        goto LABEL_32;
    }
    if (v16 >= 0)
      v23 = &qword_100419FE0;
    else
      v23 = (uint64_t *)qword_100419FE0;
    memmove(p_dst, v23, v17);
LABEL_32:
    *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v17) = 61;
    std::to_string(&v89, v19);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v89;
    else
      v24 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      size = v89.__r_.__value_.__l.__size_;
    v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v93 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)v92 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = v107;
    if ((unint64_t)v107 < v108)
    {
      v29 = *(_OWORD *)v92;
      *((_QWORD *)v107 + 2) = v93;
      *v28 = v29;
      v92[1] = 0;
      v93 = 0;
      v92[0] = 0;
      v107 = (char *)v28 + 24;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_40;
LABEL_44:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
LABEL_41:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_45;
    }
    v107 = sub_1001697DC((void **)&v106, (uint64_t)v92);
    if (SHIBYTE(v93) < 0)
    {
      operator delete(v92[0]);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
    }
    else if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
LABEL_40:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_41;
  }
LABEL_45:
  sub_10008E4F4(a2, (uint64_t)v92);
  if (!LOBYTE(v92[0]))
    goto LABEL_74;
  sub_10008E4F4(a2, (uint64_t)v92);
  v30 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&v92[1]);
  v31 = byte_10041A03F;
  if (byte_10041A03F >= 0)
    v32 = byte_10041A03F;
  else
    v32 = qword_10041A030;
  v33 = v32 + 1;
  if (v32 + 1 > 0x7FFFFFFFFFFFFFF7)
    sub_1000CDE30();
  v34 = v30;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = (std::string *)operator new(v36 + 1);
    __dst.__r_.__value_.__l.__size_ = v32 + 1;
    __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    v35 = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 + 1;
    if (!v32)
      goto LABEL_60;
  }
  if (v31 >= 0)
    v38 = &qword_10041A028;
  else
    v38 = (uint64_t *)qword_10041A028;
  memmove(v35, v38, v32);
LABEL_60:
  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v32) = 61;
  std::to_string(&v89, v34);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v89;
  else
    v39 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v40 = v89.__r_.__value_.__l.__size_;
  v41 = std::string::append(&__dst, (const std::string::value_type *)v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v93 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)v92 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = v107;
  if ((unint64_t)v107 >= v108)
  {
    v107 = sub_1001697DC((void **)&v106, (uint64_t)v92);
    if (SHIBYTE(v93) < 0)
    {
      operator delete(v92[0]);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_73;
    }
    else if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_73;
    }
LABEL_68:
    operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_69;
LABEL_74:
    v45 = (char *)v106;
    if (v106 == (uint64_t (**)())v107)
      goto LABEL_107;
LABEL_75:
    std::operator+<char>(" WHERE ", &qword_100419F80);
    v46 = std::string::append(&v89, "=");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = sub_10008E9D0((uint64_t)v99);
    std::to_string(&v88, v48);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v88;
    else
      v49 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      v50 = v88.__r_.__value_.__l.__size_;
    v51 = std::string::append(&__dst, (const std::string::value_type *)v49, v50);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v93 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)v92 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_83:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_84;
LABEL_139:
        operator delete(v89.__r_.__value_.__l.__data_);
LABEL_84:
        *((_BYTE *)&v86.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v86, "UPDATE ");
        v53 = std::string::append(&v86, "venues");
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        v55 = std::string::append(&v87, " SET ");
        v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        sub_10008E9D8(", ", (char *)&v106, (uint64_t)v84);
        if ((v85 & 0x80u) == 0)
          v57 = v84;
        else
          v57 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v58 = v85;
        else
          v58 = (std::string::size_type)v84[1];
        v59 = std::string::append(&v88, (const std::string::value_type *)v57, v58);
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        if (v93 >= 0)
          v61 = v92;
        else
          v61 = (void **)v92[0];
        if (v93 >= 0)
          v62 = HIBYTE(v93);
        else
          v62 = (std::string::size_type)v92[1];
        v63 = std::string::append(&v89, (const std::string::value_type *)v61, v62);
        v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v89.__r_.__value_.__l.__data_);
          if (((char)v85 & 0x80000000) == 0)
          {
LABEL_98:
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_99;
            goto LABEL_142;
          }
        }
        else if (((char)v85 & 0x80000000) == 0)
        {
          goto LABEL_98;
        }
        operator delete(v84[0]);
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_99:
          if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_100;
          goto LABEL_143;
        }
LABEL_142:
        operator delete(v88.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_101;
LABEL_144:
          operator delete(v86.__r_.__value_.__l.__data_);
LABEL_101:
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v65 = &__dst;
          else
            v65 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          sub_10008E514(*(sqlite3 ***)(a1 + 40), (const char *)v65, "Failed to update location");
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v93) & 0x80000000) == 0)
              goto LABEL_106;
          }
          else if ((SHIBYTE(v93) & 0x80000000) == 0)
          {
LABEL_106:
            v45 = (char *)v106;
            goto LABEL_107;
          }
          operator delete(v92[0]);
          goto LABEL_106;
        }
LABEL_143:
        operator delete(v87.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_101;
        goto LABEL_144;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_139;
  }
  v44 = *(_OWORD *)v92;
  *((_QWORD *)v107 + 2) = v93;
  *v43 = v44;
  v92[1] = 0;
  v93 = 0;
  v92[0] = 0;
  v107 = (char *)v43 + 24;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_68;
LABEL_73:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_74;
LABEL_69:
  operator delete(__dst.__r_.__value_.__l.__data_);
  v45 = (char *)v106;
  if (v106 != (uint64_t (**)())v107)
    goto LABEL_75;
LABEL_107:
  if (v45)
  {
    v66 = v107;
    if (v107 == v45)
    {
      v107 = v45;
      operator delete(v45);
      v67 = (void **)__p;
      if (!__p)
        goto LABEL_121;
    }
    else
    {
      do
      {
        if (*(v66 - 1) < 0)
          operator delete(*((void **)v66 - 3));
        v66 -= 24;
      }
      while (v66 != v45);
      v107 = v45;
      operator delete(v106);
      v67 = (void **)__p;
      if (!__p)
        goto LABEL_121;
    }
    for (i = *(void ***)v95; i != v67; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v67);
  }
LABEL_121:
  if (!v98[0])
    return;
  if (v105)
    v105 = 0;
  if (v104)
    v104 = 0;
  if (v103)
    v103 = 0;
  if (v102)
    v102 = 0;
  v69 = v101;
  if (!v101)
    goto LABEL_134;
  p_shared_owners = (unint64_t *)&v101->__shared_owners_;
  do
    v71 = __ldaxr(p_shared_owners);
  while (__stlxr(v71 - 1, p_shared_owners));
  if (v71)
  {
LABEL_134:
    if ((v100 & 0x80000000) == 0)
      return;
    goto LABEL_135;
  }
  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
  std::__shared_weak_count::__release_weak(v69);
  if (v100 < 0)
LABEL_135:
    operator delete(v99[0]);
}

void sub_10008E204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (a46 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_5:
      operator delete(a27);
      if ((a39 & 0x80000000) == 0)
      {
LABEL_9:
        sub_1000FE50C((void **)(v54 - 120));
        sub_1000FE50C(&a48);
        sub_1001E63D0((uint64_t)&a54);
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a34);
      goto LABEL_9;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_5;
  }
  if ((a39 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_10008E48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_1001E63D0((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_10008E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  sub_1001E63D0((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E4DC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_10008E4E4(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_10008E4EC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_10008E4F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)(result + 128))
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 136);
    *(_BYTE *)a2 = 1;
  }
  return result;
}

void sub_10008E514(sqlite3 **a1, const char *a2, const std::string::value_type *a3)
{
  int v5;
  int *v6;
  std::string *v7;
  __int128 v8;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  _BYTE v13[24];
  std::string __dst;
  std::string v15;
  std::string v16;
  std::string v17;
  std::runtime_error v18;
  std::string v19;
  char *errmsg;

  errmsg = 0;
  v5 = sqlite3_exec(*a1, a2, 0, 0, &errmsg);
  sub_10008B9C4(v5, *a1);
  if (v5)
  {
    v6 = __error();
    sub_10025FF8C(*v6, &v19);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v15, " w/ ");
    v7 = std::string::insert(&v15, 0, a3);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    else
      __dst = v19;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)p_dst, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v18, &v17);
    v18.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v13);
    sub_1001F2298(&v18, (uint64_t)"void db::resources::handle::exec(const char *, const char *) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 609, (uint64_t)v13);
  }
  sqlite3_free(errmsg);
}

void sub_10008E79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  int v66;
  void *v67;
  uint64_t v68;
  void *v70;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a34 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a29);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a47 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a22);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    sub_1001F26E8((std::runtime_error *)(v68 - 160));
    v70 = a52;
    if (!a52)
    {
LABEL_16:
      std::runtime_error::~runtime_error((std::runtime_error *)(v68 - 176));
      if (*(char *)(v68 - 185) < 0)
      {
        operator delete(*(void **)(v68 - 208));
        if ((a60 & 0x80000000) == 0)
        {
LABEL_18:
          if ((*(char *)(v68 - 217) & 0x80000000) == 0)
            goto LABEL_19;
          goto LABEL_24;
        }
      }
      else if ((a60 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(a55);
      if ((*(char *)(v68 - 217) & 0x80000000) == 0)
      {
LABEL_19:
        if (a66 < 0)
          goto LABEL_20;
        goto LABEL_25;
      }
LABEL_24:
      operator delete(*(void **)(v68 - 240));
      if (a66 < 0)
      {
LABEL_20:
        operator delete(a61);
        if ((v66 & 1) == 0)
        {
LABEL_27:
          if (*(char *)(v68 - 73) < 0)
            operator delete(*(void **)(v68 - 96));
          sqlite3_free(*(void **)(v68 - 72));
          _Unwind_Resume(a1);
        }
LABEL_26:
        __cxa_free_exception(v67);
        goto LABEL_27;
      }
LABEL_25:
      if (!v66)
        goto LABEL_27;
      goto LABEL_26;
    }
LABEL_15:
    operator delete(v70);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a35);
  sub_1001F26E8((std::runtime_error *)(v68 - 160));
  v70 = a52;
  if (!a52)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t sub_10008E9D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

char *sub_10008E9D8@<X0>(char *__s@<X1>, char *result@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  std::string::size_type v19;

  v5 = *(_QWORD *)result;
  v6 = *((_QWORD *)result + 1);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v5 == v6)
    goto LABEL_10;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = *(_QWORD *)v5;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  for (result = sub_10009B080((std::string *)a3, a3, v8, (std::string::value_type *)(v8 + v9), v9);
        ;
        result = sub_10009B080((std::string *)a3, v16, v18, (std::string::value_type *)(v18 + v19), v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6)
      break;
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    v12 = v11 + v10;
    v13 = strlen(__s);
    sub_10009B520((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    v16 = v15 + v14;
    v17 = *(char *)(v5 + 23);
    if (v17 >= 0)
      v18 = v5;
    else
      v18 = *(_QWORD *)v5;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v5 + 23);
    else
      v19 = *(_QWORD *)(v5 + 8);
  }
  return result;
}

void sub_10008EAD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_10008EAF8(sqlite3 **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int *v14;
  std::string *v15;
  __int128 v16;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  _BYTE v21[24];
  std::string __dst;
  std::string v23;
  std::string v24;
  std::string v25;
  std::runtime_error v26;
  std::string v27;
  os_activity_scope_state_s state;

  v8 = a3;
  v9 = v8;
  if (v8)
    os_activity_scope_enter(v8, &state);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  objc_storeStrong((id *)(a4 + 16), a3);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const char *)a2;
  else
    v11 = *(const char **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_DWORD *)(a2 + 8);
  v13 = sqlite3_prepare_v2(*a1, v11, v12, (sqlite3_stmt **)a4, 0);
  sub_10008B9C4(v13, *a1);
  if (v13)
  {
    v14 = __error();
    sub_10025FF8C(*v14, &v27);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v23, " w/ ");
    v15 = std::string::insert(&v23, 0, "Failed to prepare query");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __dst = v27;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v24, (const std::string::value_type *)p_dst, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v26, &v25);
    v26.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v21);
    sub_1001F2298(&v26, (uint64_t)"statement<nCols, nQueries, ColumnNumberType> db::resources::handle::prepare(const std::string &, __strong os_activity_t) const [nCols = 0UL, nQueries = 9UL, ColumnNumberType = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.h", 633, (uint64_t)v21);
  }
  *(_QWORD *)(a4 + 8) = *a1;
  if (v9)
    os_activity_scope_leave(&state);

}

void sub_10008EDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *v67;
  uint64_t v68;
  void *v69;
  int v70;
  uint64_t v71;
  void *v73;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a23);
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    sub_1001F26E8((std::runtime_error *)(v71 - 184));
    v73 = a47;
    if (!a47)
    {
LABEL_14:
      std::runtime_error::~runtime_error((std::runtime_error *)(v71 - 200));
      if (*(char *)(v71 - 201) < 0)
      {
        operator delete(*(void **)(v71 - 224));
        if ((a55 & 0x80000000) == 0)
        {
LABEL_16:
          if ((a67 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if ((a55 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(a50);
      if ((a67 & 0x80000000) == 0)
      {
LABEL_17:
        if (a61 < 0)
          goto LABEL_18;
        goto LABEL_23;
      }
LABEL_22:
      operator delete(a62);
      if (a61 < 0)
      {
LABEL_18:
        operator delete(a56);
        if ((v70 & 1) == 0)
        {
LABEL_25:
          if (*(char *)(v71 - 97) < 0)
          {
            operator delete(*(void **)(v71 - 120));
            sub_1001E6480(v68);

            _Unwind_Resume(a1);
          }
          sub_1001E6480(v68);

          _Unwind_Resume(a1);
        }
LABEL_24:
        __cxa_free_exception(v69);
        goto LABEL_25;
      }
LABEL_23:
      if (!v70)
        goto LABEL_25;
      goto LABEL_24;
    }
LABEL_13:
    operator delete(v73);
    goto LABEL_14;
  }
LABEL_12:
  operator delete(a37);
  sub_1001F26E8((std::runtime_error *)(v71 - 184));
  v73 = a47;
  if (!a47)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_10008F024(uint64_t a1, char **a2, sqlite3_blob **a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  void *v10[6];
  _BYTE v11[16];
  int v12;
  uint8_t v13[4];
  char *v14;
  uint8_t buf[4];
  char *v16;

  if (qword_100417F08 == -1)
  {
    v6 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417F08, &stru_1004017D8);
  v6 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_DWORD *)buf = 136315138;
    v16 = sub_10004BE10(a2);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "building offset map and inserting into map, locationId=%s", buf, 0xCu);
  }
LABEL_4:
  sub_100081318((uint64_t)v11, *a3);
  v7 = v12;
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)buf, (wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11, -1);
  sub_100095258((uint64_t)buf, v7, (uint64_t)v10);
  if (qword_100417F08 == -1)
  {
    v8 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_7;
    goto LABEL_6;
  }
  dispatch_once(&qword_100417F08, &stru_1004017D8);
  v8 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_6:
    v9 = sub_10004BE10(a2);
    *(_DWORD *)v13 = 136315138;
    v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "inserting offset map, locationId=%s", v13, 0xCu);
  }
LABEL_7:
  sub_10008F264(a1, (uint64_t ***)a2, a2, (uint64_t)v10);
  if (v10[5])
    operator delete(v10[3]);
  if (v10[2])
    operator delete(v10[0]);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)buf);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)v11);
}

void sub_10008F21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_1002BA930((uint64_t)va);
  wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor::~CopyingInputStreamAdaptor((wireless_diagnostics::google::protobuf::io::CopyingInputStreamAdaptor *)va2);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)va1);
  _Unwind_Resume(a1);
}

void sub_10008F24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream((wireless_diagnostics::google::protobuf::io::CopyingInputStream *)va);
  _Unwind_Resume(a1);
}

char *sub_10008F264(uint64_t a1, uint64_t ***a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v9 = sub_1000B40D8((uint64_t)v37, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v18 = (char *)operator new(0x50uLL);
  v14 = v18;
  v37[0] = v18;
  v37[1] = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = a3[1];
  *((_QWORD *)v18 + 2) = *a3;
  *((_QWORD *)v18 + 3) = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *((_QWORD *)v18 + 4) = *(_QWORD *)a4;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *((_QWORD *)v18 + 7) = *(_QWORD *)(a4 + 24);
  *((_OWORD *)v18 + 4) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v38 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v11 && (float)(v23 * (float)v11) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v25)
    {
LABEL_29:
      *(_QWORD *)v14 = *v25;
LABEL_64:
      *v25 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v34 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v25)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v34 & v10;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v34 & v10));
      if (v25)
        goto LABEL_29;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v24 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_10008F5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002BACCC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10008FC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_10032A568(&a38);

  _Unwind_Resume(a1);
}

uint64_t sub_10008FD28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

__n128 sub_10008FD38(uint64_t a1, __int128 *a2, __n128 *a3, int a4)
{
  __int128 v4;
  __n128 result;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  result = *a3;
  *(_QWORD *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  *(_DWORD *)(a1 + 48) = a4;
  return result;
}

uint64_t sub_10008FD7C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v10;
  char *v11;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v32;
  int v33;
  BOOL v34;
  int v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t result;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  unint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v49;
  int v50;
  int v51;
  _BYTE *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v57;
  int v58;
  int v59;
  _BYTE *v60;
  void *v61;
  _BYTE *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v67;
  int v68;
  int v69;
  _BYTE *v70;
  int v71;
  signed int v72;
  unsigned int v73;

  v6 = (unsigned int *)(a1 + 24);
  v7 = (unsigned int *)(a1 + 28);
  v8 = (unsigned int *)(a1 + 32);
  v9 = (unsigned int *)(a1 + 36);
  v10 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (2)
  {
    v11 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_41;
        *(_DWORD *)(a1 + 80) |= 1u;
        v14 = *(_QWORD *)(a1 + 16);
        if (!v14)
          operator new();
        v73 = 0;
        v15 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v15 >= *((_QWORD *)this + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v73))return 0;
        }
        else
        {
          v73 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        v28 = *((_DWORD *)this + 14);
        v29 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v28 + 1;
        if (v28 >= v29)
          return 0;
        v30 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v73);
        if (!sub_100091030(v14, this, v31, v32) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v30);
        v33 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v33, 1);
        v35 = v33 - 1;
        if (v35 < 0 == v34)
          *((_DWORD *)this + 14) = v35;
        v36 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v36 >= v16 || *v36 != 16)
          continue;
        v17 = v36 + 1;
        *((_QWORD *)this + 1) = v17;
        if ((unint64_t)v17 >= v16)
          goto LABEL_57;
LABEL_54:
        if ((*v17 & 0x80000000) == 0)
        {
          *v6 = *v17;
          v37 = v17 + 1;
          *((_QWORD *)this + 1) = v37;
          *(_DWORD *)(a1 + 80) |= 2u;
          if ((unint64_t)v37 < v16)
            goto LABEL_59;
          continue;
        }
LABEL_57:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
        if (!(_DWORD)result)
          return result;
        v37 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        *(_DWORD *)(a1 + 80) |= 2u;
        if ((unint64_t)v37 >= v16)
          continue;
LABEL_59:
        if (*v37 != 24)
          continue;
        v18 = v37 + 1;
        *((_QWORD *)this + 1) = v18;
        if ((unint64_t)v18 >= v16)
          goto LABEL_64;
LABEL_61:
        if ((*v18 & 0x80000000) == 0)
        {
          *v7 = *v18;
          v39 = v18 + 1;
          *((_QWORD *)this + 1) = v39;
          *(_DWORD *)(a1 + 80) |= 4u;
          if ((unint64_t)v39 < v16)
            goto LABEL_66;
          continue;
        }
LABEL_64:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!(_DWORD)result)
          return result;
        v39 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        *(_DWORD *)(a1 + 80) |= 4u;
        if ((unint64_t)v39 >= v16)
          continue;
LABEL_66:
        if (*v39 != 32)
          continue;
        v19 = v39 + 1;
        *((_QWORD *)this + 1) = v19;
        if ((unint64_t)v19 >= v16)
          goto LABEL_71;
LABEL_68:
        if ((*v19 & 0x80000000) == 0)
        {
          *v8 = *v19;
          v40 = v19 + 1;
          *((_QWORD *)this + 1) = v40;
          *(_DWORD *)(a1 + 80) |= 8u;
          if ((unint64_t)v40 < v16)
            goto LABEL_73;
          continue;
        }
LABEL_71:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v8);
        if (!(_DWORD)result)
          return result;
        v40 = (_BYTE *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        *(_DWORD *)(a1 + 80) |= 8u;
        if ((unint64_t)v40 >= v16)
          continue;
LABEL_73:
        if (*v40 != 40)
          continue;
        v20 = v40 + 1;
        *((_QWORD *)this + 1) = v20;
        if ((unint64_t)v20 >= v16)
          goto LABEL_78;
LABEL_75:
        if ((*v20 & 0x80000000) == 0)
        {
          *v9 = *v20;
          v41 = v20 + 1;
          *((_QWORD *)this + 1) = v41;
          v42 = *(_DWORD *)(a1 + 80) | 0x10;
          *(_DWORD *)(a1 + 80) = v42;
          if ((unint64_t)v41 < v16)
            goto LABEL_80;
          continue;
        }
LABEL_78:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
        if (!(_DWORD)result)
          return result;
        v41 = (_BYTE *)*((_QWORD *)this + 1);
        v43 = *((_QWORD *)this + 2);
        v42 = *(_DWORD *)(a1 + 80) | 0x10;
        *(_DWORD *)(a1 + 80) = v42;
        if ((unint64_t)v41 >= v43)
          continue;
LABEL_80:
        if (*v41 != 50)
          continue;
        *((_QWORD *)this + 1) = v41 + 1;
        *(_DWORD *)(a1 + 80) = v42 | 0x20;
        v21 = *(_QWORD *)(a1 + 40);
        if (!v21)
LABEL_82:
          operator new();
LABEL_83:
        v73 = 0;
        v44 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v44 >= *((_QWORD *)this + 2) || *v44 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v73))return 0;
        }
        else
        {
          v73 = *v44;
          *((_QWORD *)this + 1) = v44 + 1;
        }
        v45 = *((_DWORD *)this + 14);
        v46 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v45 + 1;
        if (v45 >= v46)
          return 0;
        v47 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v73);
        if (!sub_100090718(v21, this, v48, v49) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v47);
        v50 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v50, 1);
        v51 = v50 - 1;
        if (v51 < 0 == v34)
          *((_DWORD *)this + 14) = v51;
        v52 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 != 58)
          continue;
        *((_QWORD *)this + 1) = v52 + 1;
        *(_DWORD *)(a1 + 80) |= 0x40u;
        v22 = *(_QWORD *)(a1 + 48);
        if (!v22)
LABEL_95:
          operator new();
LABEL_32:
        v73 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v73))return 0;
        }
        else
        {
          v73 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v73);
        if (!sub_100090718(v22, this, v56, v57) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v58 = *((_DWORD *)this + 14);
        v34 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 == v34)
          *((_DWORD *)this + 14) = v59;
        v60 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v60 >= *((_QWORD *)this + 2) || *v60 != 66)
          continue;
        *((_QWORD *)this + 1) = v60 + 1;
LABEL_107:
        *(_DWORD *)(a1 + 80) |= 0x80u;
        v61 = *(void **)(a1 + 56);
        if (v61 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v61);
        if (!(_DWORD)result)
          return result;
        v62 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v62 >= *((_QWORD *)this + 2) || *v62 != 74)
          continue;
        *((_QWORD *)this + 1) = v62 + 1;
        *(_DWORD *)(a1 + 80) |= 0x100u;
        v24 = *(_DWORD **)(a1 + 64);
        if (!v24)
LABEL_113:
          operator new();
LABEL_38:
        v73 = 0;
        v25 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v25 >= *((_QWORD *)this + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v73))return 0;
        }
        else
        {
          v73 = *v25;
          *((_QWORD *)this + 1) = v25 + 1;
        }
        v63 = *((_DWORD *)this + 14);
        v64 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v63 + 1;
        if (v63 < v64)
        {
          v65 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v73);
          if (sub_1002E0A84(v24, this, v66, v67))
          {
            if (*((_BYTE *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v65);
              v68 = *((_DWORD *)this + 14);
              v34 = __OFSUB__(v68, 1);
              v69 = v68 - 1;
              if (v69 < 0 == v34)
                *((_DWORD *)this + 14) = v69;
              v70 = (_BYTE *)*((_QWORD *)this + 1);
              v26 = *((_QWORD *)this + 2);
              if ((unint64_t)v70 < v26 && *v70 == 80)
              {
                v27 = v70 + 1;
                *((_QWORD *)this + 1) = v27;
LABEL_125:
                v73 = 0;
                if ((unint64_t)v27 >= v26 || (v71 = *v27, v71 < 0))
                {
                  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v73);
                  if (!(_DWORD)result)
                    return result;
                  v72 = v73;
                  if (sub_1002E499C(v73))
                    goto LABEL_128;
LABEL_132:
                  wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v10, 10, v72);
                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2))
                    goto LABEL_133;
                }
                else
                {
                  v72 = *v27;
                  *((_QWORD *)this + 1) = v27 + 1;
                  if (!sub_1002E499C(v71))
                    goto LABEL_132;
LABEL_128:
                  *(_DWORD *)(a1 + 80) |= 0x200u;
                  *(_DWORD *)(a1 + 72) = v72;
                  if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2))
                  {
LABEL_133:
                    if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
                    {
                      *((_DWORD *)this + 8) = 0;
                      result = 1;
                      *((_BYTE *)this + 36) = 1;
                      return result;
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 2u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v17 >= v16)
          goto LABEL_57;
        goto LABEL_54;
      case 3u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v18 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v18 >= v16)
          goto LABEL_64;
        goto LABEL_61;
      case 4u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v19 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v19 >= v16)
          goto LABEL_71;
        goto LABEL_68;
      case 5u:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v20 = (char *)*((_QWORD *)this + 1);
        v16 = *((_QWORD *)this + 2);
        if ((unint64_t)v20 >= v16)
          goto LABEL_78;
        goto LABEL_75;
      case 6u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_41;
        *(_DWORD *)(a1 + 80) |= 0x20u;
        v21 = *(_QWORD *)(a1 + 40);
        if (!v21)
          goto LABEL_82;
        goto LABEL_83;
      case 7u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_41;
        *(_DWORD *)(a1 + 80) |= 0x40u;
        v22 = *(_QWORD *)(a1 + 48);
        if (v22)
          goto LABEL_32;
        goto LABEL_95;
      case 8u:
        v13 = TagFallback & 7;
        if (v13 == 2)
          goto LABEL_107;
        goto LABEL_41;
      case 9u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_41;
        *(_DWORD *)(a1 + 80) |= 0x100u;
        v24 = *(_DWORD **)(a1 + 64);
        if (v24)
          goto LABEL_38;
        goto LABEL_113;
      case 0xAu:
        v13 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_41;
        v27 = (char *)*((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        goto LABEL_125;
      default:
        v13 = TagFallback & 7;
LABEL_41:
        if (v13 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v10, a4) & 1) == 0)return 0;
        continue;
    }
  }
}

void sub_10009069C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_1000906C4()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100090718(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = (unsigned int *)(a1 + 32);
  v7 = a1 + 8;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v8 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
            *((_DWORD *)this + 8) = (_DWORD)TagFallback;
            *((_QWORD *)this + 1) = v8 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v10 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v11 = TagFallback & 7;
          if (v11 != 1)
            goto LABEL_27;
          v20 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0)
            return 0;
          *(_QWORD *)(a1 + 16) = v20;
          *(_DWORD *)(a1 + 40) |= 1u;
          v14 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 17)
          {
            *((_QWORD *)this + 1) = v14 + 1;
            goto LABEL_19;
          }
        }
        if (v10 != 2)
          break;
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_27;
LABEL_19:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v20) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v20;
        *(_DWORD *)(a1 + 40) |= 2u;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 < v12 && *v15 == 24)
        {
          v13 = v15 + 1;
          *((_QWORD *)this + 1) = v13;
          if ((unint64_t)v13 < v12)
            goto LABEL_23;
LABEL_30:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v19 = *((_QWORD *)this + 1);
          v18 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 40) |= 4u;
          if (v19 == v18)
            goto LABEL_32;
        }
      }
      if (v10 != 3)
        break;
      v11 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_27;
      v13 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)v13 >= v12)
        goto LABEL_30;
LABEL_23:
      if ((char)*v13 < 0)
        goto LABEL_30;
      *v6 = *v13;
      v16 = (char *)(v13 + 1);
      *((_QWORD *)this + 1) = v16;
      *(_DWORD *)(a1 + 40) |= 4u;
      if (v16 == (char *)v12)
      {
LABEL_32:
        if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    v11 = TagFallback & 7;
LABEL_27:
    if (v11 == 4)
      return 1;
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) != 0);
  return 0;
}

uint64_t sub_100090944(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v7;
  unsigned int v8;
  char *v14;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t result;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v45;
  int v46;
  int v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v55;
  int v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62[2];

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 16);
  v7 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 40);
  v8 = a1 + 8;
  __asm { FMOV            V9.2S, #1.0 }
  while (1)
  {
LABEL_2:
    v14 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v14 < *((_QWORD *)this + 2) && (*v14 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v14;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v14 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v16 = TagFallback & 7;
        if (v16 != 2)
          goto LABEL_42;
        v17 = *(_DWORD *)(a1 + 28);
        v18 = *(int *)(a1 + 24);
        if ((int)v18 >= v17)
          goto LABEL_11;
        break;
      case 2u:
        v16 = TagFallback & 7;
        if (v16 != 2)
          goto LABEL_42;
        *(_DWORD *)(a1 + 92) |= 4u;
        v31 = *(_QWORD *)(a1 + 64);
        if (!v31)
          goto LABEL_29;
        goto LABEL_30;
      case 3u:
        v16 = TagFallback & 7;
        if (v16 != 2)
          goto LABEL_42;
        *(_DWORD *)(a1 + 92) |= 8u;
        v33 = *(void **)(a1 + 72);
        if (v33 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          goto LABEL_35;
        goto LABEL_56;
      case 4u:
        v16 = TagFallback & 7;
        if (v16 != 2)
          goto LABEL_42;
        v35 = *(_DWORD *)(a1 + 52);
        v36 = *(int *)(a1 + 48);
        if ((int)v36 < v35)
          goto LABEL_39;
        goto LABEL_64;
      case 0x10u:
        v16 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_42;
        v40 = (char *)*((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        *(_QWORD *)v62 = 0;
        if ((unint64_t)v40 >= v39)
          goto LABEL_85;
        goto LABEL_82;
      default:
        v16 = TagFallback & 7;
LABEL_42:
        if (v16 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v8, a4) & 1) == 0)
          return 0;
        continue;
    }
    while (1)
    {
      v19 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 24) = v18 + 1;
      v20 = *(_QWORD *)(v19 + 8 * v18);
      v62[0] = 0;
      v21 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v62))return 0;
      }
      else
      {
        v62[0] = *v21;
        *((_QWORD *)this + 1) = v21 + 1;
      }
      v22 = *((_DWORD *)this + 14);
      v23 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v22 + 1;
      if (v22 >= v23)
        return 0;
      v24 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v62[0]);
      if (!sub_100091030(v20, this, v25, v26) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v24);
      v27 = *((_DWORD *)this + 14);
      _VF = __OFSUB__(v27, 1);
      v28 = v27 - 1;
      if (v28 < 0 == _VF)
        *((_DWORD *)this + 14) = v28;
      v29 = (unsigned __int8 *)*((_QWORD *)this + 1);
      if ((unint64_t)v29 >= *((_QWORD *)this + 2))
        goto LABEL_2;
      v30 = *v29;
      if (v30 != 10)
        break;
      *((_QWORD *)this + 1) = v29 + 1;
      v17 = *(_DWORD *)(a1 + 28);
      v18 = *(int *)(a1 + 24);
      if ((int)v18 >= v17)
      {
LABEL_11:
        if (v17 == *(_DWORD *)(a1 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v17 + 1);
          v17 = *(_DWORD *)(a1 + 28);
        }
        *(_DWORD *)(a1 + 28) = v17 + 1;
        operator new();
      }
    }
    if (v30 == 18)
    {
      *((_QWORD *)this + 1) = v29 + 1;
      *(_DWORD *)(a1 + 92) |= 4u;
      v31 = *(_QWORD *)(a1 + 64);
      if (!v31)
LABEL_29:
        operator new();
LABEL_30:
      v62[0] = 0;
      v32 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v62))return 0;
      }
      else
      {
        v62[0] = *v32;
        *((_QWORD *)this + 1) = v32 + 1;
      }
      v41 = *((_DWORD *)this + 14);
      v42 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v41 + 1;
      if (v41 >= v42)
        return 0;
      v43 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v62[0]);
      if (!sub_10009158C(v31, this, v44, v45) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v43);
      v46 = *((_DWORD *)this + 14);
      _VF = __OFSUB__(v46, 1);
      v47 = v46 - 1;
      if (v47 < 0 == _VF)
        *((_DWORD *)this + 14) = v47;
      v48 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v48 < *((_QWORD *)this + 2) && *v48 == 26)
      {
        *((_QWORD *)this + 1) = v48 + 1;
        *(_DWORD *)(a1 + 92) |= 8u;
        v33 = *(void **)(a1 + 72);
        if (v33 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
LABEL_56:
          operator new();
LABEL_35:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v33);
        if (!(_DWORD)result)
          return result;
        v49 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if ((unint64_t)v49 < *((_QWORD *)this + 2) && *v49 == 34)
        {
          do
          {
            *((_QWORD *)this + 1) = v49 + 1;
            v35 = *(_DWORD *)(a1 + 52);
            v36 = *(int *)(a1 + 48);
            if ((int)v36 >= v35)
            {
LABEL_64:
              if (v35 == *(_DWORD *)(a1 + 56))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v35 + 1);
                v35 = *(_DWORD *)(a1 + 52);
              }
              *(_DWORD *)(a1 + 52) = v35 + 1;
              operator new();
            }
LABEL_39:
            v37 = *(_QWORD *)(a1 + 40);
            *(_DWORD *)(a1 + 48) = v36 + 1;
            v38 = *(_DWORD **)(v37 + 8 * v36);
            v62[0] = 0;
            v50 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v50 >= *((_QWORD *)this + 2) || *v50 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v62))return 0;
            }
            else
            {
              v62[0] = *v50;
              *((_QWORD *)this + 1) = v50 + 1;
            }
            v51 = *((_DWORD *)this + 14);
            v52 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v51 + 1;
            if (v51 >= v52)
              return 0;
            v53 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v62[0]);
            if (!sub_10009126C(v38, this, v54, v55) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v53);
            v56 = *((_DWORD *)this + 14);
            _VF = __OFSUB__(v56, 1);
            v57 = v56 - 1;
            if (v57 < 0 == _VF)
              *((_DWORD *)this + 14) = v57;
            v49 = (unsigned __int8 *)*((_QWORD *)this + 1);
            v39 = *((_QWORD *)this + 2);
          }
          while ((unint64_t)v49 < v39 && *v49 == 34);
          if ((int)v39 - (int)v49 < 2 || *v49 != 128 || v49[1] != 1)
            continue;
          v40 = (char *)(v49 + 2);
          *((_QWORD *)this + 1) = v40;
          *(_QWORD *)v62 = 0;
          if ((unint64_t)v40 < v39)
          {
LABEL_82:
            v58 = *v40;
            if ((v58 & 0x80000000) == 0)
            {
              v59 = v40 + 1;
              *((_QWORD *)this + 1) = v59;
              *(_QWORD *)(a1 + 80) = v58;
              *(_DWORD *)(a1 + 92) |= 0x10u;
              if (v59 != (char *)v39)
                continue;
LABEL_87:
              if (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
              {
                *((_DWORD *)this + 8) = 0;
                result = 1;
                *((_BYTE *)this + 36) = 1;
                return result;
              }
              continue;
            }
          }
LABEL_85:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v62);
          if (!(_DWORD)result)
            return result;
          v61 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          *(_QWORD *)(a1 + 80) = *(_QWORD *)v62;
          *(_DWORD *)(a1 + 92) |= 0x10u;
          if (v61 != v60)
            continue;
          goto LABEL_87;
        }
      }
    }
  }
}

void sub_100090FBC()
{
  operator delete();
}

void sub_100090FE0()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100091008()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100091030(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  void *v10;
  uint64_t result;
  char *v12;
  signed int v13;
  _BYTE *v14;
  unsigned int v15;

  v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *(_DWORD *)(a1 + 32) |= 2u;
          v10 = *(void **)(a1 + 16);
          if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            goto LABEL_11;
          goto LABEL_12;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_23:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)return 0;
    }
    v9 = TagFallback & 7;
    if ((TagFallback & 7) != 0)
      goto LABEL_23;
    v15 = 0;
    v12 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 < 0)
    {
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v15);
      if (!(_DWORD)result)
        return result;
      v13 = v15;
      if (v15 - 1 <= 1)
      {
LABEL_21:
        *(_DWORD *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + 24) = v13;
        goto LABEL_29;
      }
    }
    else
    {
      v13 = *v12;
      *((_QWORD *)this + 1) = v12 + 1;
      if ((v13 - 1) <= 1)
        goto LABEL_21;
    }
    wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 1, v13);
LABEL_29:
    v14 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v14 < *((_QWORD *)this + 2) && *v14 == 18)
    {
      *((_QWORD *)this + 1) = v14 + 1;
      *(_DWORD *)(a1 + 32) |= 2u;
      v10 = *(void **)(a1 + 16);
      if (v10 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
LABEL_11:
        operator new();
LABEL_12:
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v10);
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_10009126C(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  char *v16;
  uint64_t result;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;

  v6 = (_DWORD)a1 + 8;
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 5)
          goto LABEL_25;
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[4] = v20;
        a1[9] |= 1u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 21)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 5)
          goto LABEL_25;
LABEL_15:
        v20 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v20) & 1) == 0)
          return 0;
        a1[5] = v20;
        a1[9] |= 2u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 != 24)
          continue;
        v13 = v12 + 1;
        *((_QWORD *)this + 1) = v13;
LABEL_21:
        v20 = 0;
        if ((unint64_t)v13 >= v11 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v14 = v20;
          v15 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v14 = *v13;
          v15 = v13 + 1;
          *((_QWORD *)this + 1) = v15;
        }
        a1[6] = -(v14 & 1) ^ (v14 >> 1);
        a1[9] |= 4u;
        if ((unint64_t)v15 >= v11 || *v15 != 32)
          continue;
        v16 = v15 + 1;
        *((_QWORD *)this + 1) = v16;
        v20 = 0;
        if ((unint64_t)v16 >= v11)
          goto LABEL_37;
LABEL_35:
        if (*v16 < 0)
        {
LABEL_37:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v20);
          if (!(_DWORD)result)
            return result;
          v18 = v20;
          v19 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v18 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)this + 1) = v19;
        }
        a1[7] = -(v18 & 1) ^ (v18 >> 1);
        a1[9] |= 8u;
        if (v19 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
          continue;
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_21;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_25;
        v16 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        v20 = 0;
        if ((unint64_t)v16 >= v11)
          goto LABEL_37;
        goto LABEL_35;
      default:
        v9 = TagFallback & 7;
LABEL_25:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

uint64_t sub_10009152C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403B98;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_100091578(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009158C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;
  signed int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v24;
  int v25;
  BOOL v26;
  int v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;

  v6 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  do
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v7 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
            {
              TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
              *((_DWORD *)this + 8) = (_DWORD)TagFallback;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            else
            {
              TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
              *((_DWORD *)this + 8) = (_DWORD)TagFallback;
              *((_QWORD *)this + 1) = v7 + 1;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            v9 = TagFallback >> 3;
            if (TagFallback >> 3 != 1)
              break;
            v10 = TagFallback & 7;
            if (v10 != 2)
              goto LABEL_31;
            *(_DWORD *)(a1 + 40) |= 1u;
            v13 = *(_QWORD *)(a1 + 16);
            if (!v13)
              operator new();
            v30 = 0;
            v14 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v30))return 0;
            }
            else
            {
              v30 = *v14;
              *((_QWORD *)this + 1) = v14 + 1;
            }
            v20 = *((_DWORD *)this + 14);
            v21 = *((_DWORD *)this + 15);
            *((_DWORD *)this + 14) = v20 + 1;
            if (v20 >= v21)
              return 0;
            v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v30);
            if (!sub_100092CAC(v13, this, v23, v24) || !*((_BYTE *)this + 36))
              return 0;
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
            v25 = *((_DWORD *)this + 14);
            v26 = __OFSUB__(v25, 1);
            v27 = v25 - 1;
            if (v27 < 0 == v26)
              *((_DWORD *)this + 14) = v27;
            v28 = (_BYTE *)*((_QWORD *)this + 1);
            if ((unint64_t)v28 < *((_QWORD *)this + 2) && *v28 == 18)
            {
              *((_QWORD *)this + 1) = v28 + 1;
              *(_DWORD *)(a1 + 40) |= 2u;
              v15 = *(void **)(a1 + 24);
              if (v15 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
LABEL_21:
                operator new();
              goto LABEL_22;
            }
          }
          if (v9 != 2)
            break;
          v10 = TagFallback & 7;
          if (v10 != 2)
            goto LABEL_31;
          *(_DWORD *)(a1 + 40) |= 2u;
          v15 = *(void **)(a1 + 24);
          if (v15 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
            goto LABEL_21;
LABEL_22:
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes(this, v15);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v17 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v17 && *v18 == 24)
          {
            v12 = v18 + 1;
            *((_QWORD *)this + 1) = v12;
            v29 = 0;
            if ((unint64_t)v12 >= v17)
              goto LABEL_34;
LABEL_26:
            if ((char)*v12 < 0)
              goto LABEL_34;
            v19 = *v12;
            *((_QWORD *)this + 1) = v12 + 1;
            if ((v19 - 1) > 1)
              goto LABEL_36;
LABEL_28:
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 32) = v19;
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2))
              goto LABEL_37;
          }
        }
        if (v9 != 3)
        {
          v10 = TagFallback & 7;
          goto LABEL_31;
        }
        v10 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
          break;
LABEL_31:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)return 0;
      }
      v12 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v11 = *((_QWORD *)this + 2);
      v29 = 0;
      if ((unint64_t)v12 < v11)
        goto LABEL_26;
LABEL_34:
      result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v29);
      if (!(_DWORD)result)
        return result;
      v19 = v29;
      if (v29 - 1 <= 1)
        goto LABEL_28;
LABEL_36:
      wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v6, 3, v19);
    }
    while (*((_QWORD *)this + 1) != *((_QWORD *)this + 2));
LABEL_37:
    ;
  }
  while (!*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

void sub_1000918DC()
{
  operator delete();
}

uint64_t sub_100091900(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v7;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v11;
  void *v12;
  uint64_t result;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  int v48;
  _BYTE *v49;
  int v50;
  unint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v57;
  int v58;
  BOOL v59;
  int v60;
  _BYTE *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v66;
  int v67;
  int v68;
  _BYTE *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v74;
  int v75;
  int v76;
  _BYTE *v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v82;
  int v83;
  int v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned __int8 *v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  _BYTE *v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v104;
  int v105;
  int v106;
  _BYTE *v107;
  signed int v108;
  _BYTE *v109;
  signed int v110;
  _BYTE *v111;
  char *v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v117;
  int v118;
  int v119;
  int v120;
  _BYTE *v121;
  signed int v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v130;
  int v131;
  int v132;
  unsigned __int8 *v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v139;
  int v140;
  int v141;
  unsigned __int8 *v142;
  unsigned int v143[2];

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 80);
  v7 = (wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8);
  v8 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 112);
  while (1)
  {
LABEL_2:
    v9 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v9 < *((_QWORD *)this + 2) && (*v9 & 0x80000000) == 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = (_DWORD)TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 1u;
        v12 = *(void **)(a1 + 16);
        if (v12 == &wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString(this, v12);
        if (!(_DWORD)result)
          return result;
        v15 = (_BYTE *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        if ((unint64_t)v15 >= v14 || *v15 != 16)
          continue;
        v16 = v15 + 1;
        *((_QWORD *)this + 1) = v16;
LABEL_24:
        v143[0] = 0;
        if ((unint64_t)v16 >= v14 || (v21 = *v16, v21 < 0))
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)this + 1);
          v14 = *((_QWORD *)this + 2);
          *(_DWORD *)(a1 + 56) = v143[0];
          *(_DWORD *)(a1 + 200) |= 2u;
          if ((unint64_t)v22 >= v14)
            continue;
        }
        else
        {
          v22 = v16 + 1;
          *((_QWORD *)this + 1) = v22;
          *(_DWORD *)(a1 + 56) = v21;
          *(_DWORD *)(a1 + 200) |= 2u;
          if ((unint64_t)v22 >= v14)
            continue;
        }
        if (*v22 != 24)
          continue;
        v23 = v22 + 1;
        *((_QWORD *)this + 1) = v23;
        *(_QWORD *)v143 = 0;
        if ((unint64_t)v23 >= v14)
          goto LABEL_96;
LABEL_93:
        v48 = *v23;
        if (v48 < 0)
        {
LABEL_96:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)v143);
          if (!(_DWORD)result)
            return result;
          v49 = (_BYTE *)*((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)v143;
          v50 = *(_DWORD *)(a1 + 200) | 4;
          *(_DWORD *)(a1 + 200) = v50;
          if ((unint64_t)v49 >= v51)
            continue;
        }
        else
        {
          v49 = v23 + 1;
          *((_QWORD *)this + 1) = v49;
          *(_QWORD *)(a1 + 24) = v48;
          v50 = *(_DWORD *)(a1 + 200) | 4;
          *(_DWORD *)(a1 + 200) = v50;
          if ((unint64_t)v49 >= v14)
            continue;
        }
        if (*v49 != 34)
          continue;
        *((_QWORD *)this + 1) = v49 + 1;
        *(_DWORD *)(a1 + 200) = v50 | 8;
        v24 = *(_QWORD *)(a1 + 32);
        if (!v24)
LABEL_100:
          operator new();
LABEL_101:
        v143[0] = 0;
        v52 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v52 >= *((_QWORD *)this + 2) || *v52 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v52;
          *((_QWORD *)this + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)this + 14);
        v54 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_100093F18(v24, this, v56, v57) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v55);
        v58 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v58, 1);
        v60 = v58 - 1;
        if (v60 < 0 == v59)
          *((_DWORD *)this + 14) = v60;
        v61 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v61 >= *((_QWORD *)this + 2) || *v61 != 42)
          continue;
        *((_QWORD *)this + 1) = v61 + 1;
        *(_DWORD *)(a1 + 200) |= 0x10u;
        v25 = *(_QWORD *)(a1 + 40);
        if (!v25)
LABEL_113:
          operator new();
LABEL_36:
        v143[0] = 0;
        v26 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v26;
          *((_QWORD *)this + 1) = v26 + 1;
        }
        v62 = *((_DWORD *)this + 14);
        v63 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v62 + 1;
        if (v62 >= v63)
          return 0;
        v64 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_100093BC0(v25, this, v65, v66) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v64);
        v67 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v67, 1);
        v68 = v67 - 1;
        if (v68 < 0 == v59)
          *((_DWORD *)this + 14) = v68;
        v69 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v69 >= *((_QWORD *)this + 2) || *v69 != 50)
          continue;
        *((_QWORD *)this + 1) = v69 + 1;
        *(_DWORD *)(a1 + 200) |= 0x20u;
        v27 = *(_QWORD *)(a1 + 48);
        if (!v27)
LABEL_125:
          operator new();
LABEL_40:
        v143[0] = 0;
        v28 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v28 >= *((_QWORD *)this + 2) || *v28 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v28;
          *((_QWORD *)this + 1) = v28 + 1;
        }
        v70 = *((_DWORD *)this + 14);
        v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71)
          return 0;
        v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_100092CAC(v27, this, v73, v74) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        v75 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v75, 1);
        v76 = v75 - 1;
        if (v76 < 0 == v59)
          *((_DWORD *)this + 14) = v76;
        v77 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v77 >= *((_QWORD *)this + 2) || *v77 != 58)
          continue;
        *((_QWORD *)this + 1) = v77 + 1;
        *(_DWORD *)(a1 + 200) |= 0x40u;
        v29 = *(_QWORD *)(a1 + 64);
        if (!v29)
LABEL_137:
          operator new();
LABEL_44:
        v143[0] = 0;
        v30 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v30;
          *((_QWORD *)this + 1) = v30 + 1;
        }
        v78 = *((_DWORD *)this + 14);
        v79 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v78 + 1;
        if (v78 >= v79)
          return 0;
        v80 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_100093964(v29, this, v81, v82) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v80);
        v83 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v83, 1);
        v84 = v83 - 1;
        if (v84 < 0 == v59)
          *((_DWORD *)this + 14) = v84;
        v85 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v85 >= *((_QWORD *)this + 2) || *v85 != 66)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v85 + 1;
          v31 = *(_DWORD *)(a1 + 92);
          v32 = *(int *)(a1 + 88);
          if ((int)v32 >= v31)
          {
LABEL_154:
            if (v31 == *(_DWORD *)(a1 + 96))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v31 + 1);
              v31 = *(_DWORD *)(a1 + 92);
            }
            *(_DWORD *)(a1 + 92) = v31 + 1;
            operator new();
          }
LABEL_48:
          v33 = *(_QWORD *)(a1 + 80);
          *(_DWORD *)(a1 + 88) = v32 + 1;
          v34 = *(_QWORD *)(v33 + 8 * v32);
          v143[0] = 0;
          v88 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v88 >= *((_QWORD *)this + 2) || *v88 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
          }
          else
          {
            v143[0] = *v88;
            *((_QWORD *)this + 1) = v88 + 1;
          }
          v89 = *((_DWORD *)this + 14);
          v90 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v89 + 1;
          if (v89 >= v90)
            return 0;
          v91 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
          if (!sub_100093518(v34, this, v92, v93) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v91);
          v94 = *((_DWORD *)this + 14);
          v59 = __OFSUB__(v94, 1);
          v95 = v94 - 1;
          if (v95 < 0 == v59)
            *((_DWORD *)this + 14) = v95;
          v85 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v85 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v96 = *v85;
        }
        while (v96 == 66);
        if (v96 != 73)
          continue;
        *((_QWORD *)this + 1) = v85 + 1;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
LABEL_170:
        *(_QWORD *)(a1 + 104) = *(_QWORD *)v143;
        v97 = *(_DWORD *)(a1 + 200) | 0x200;
        *(_DWORD *)(a1 + 200) = v97;
        v98 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v98 >= *((_QWORD *)this + 2) || *v98 != 82)
          continue;
        *((_QWORD *)this + 1) = v98 + 1;
        *(_DWORD *)(a1 + 200) = v97 | 0x80;
        v35 = *(_QWORD *)(a1 + 72);
        if (!v35)
LABEL_173:
          operator new();
LABEL_174:
        v143[0] = 0;
        v99 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v99 >= *((_QWORD *)this + 2) || *v99 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v99;
          *((_QWORD *)this + 1) = v99 + 1;
        }
        v100 = *((_DWORD *)this + 14);
        v101 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v100 + 1;
        if (v100 >= v101)
          return 0;
        v102 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_100093964(v35, this, v103, v104) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v102);
        v105 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v105, 1);
        v106 = v105 - 1;
        if (v106 < 0 == v59)
          *((_DWORD *)this + 14) = v106;
        v107 = (_BYTE *)*((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        if ((unint64_t)v107 >= v36 || *v107 != 88)
          continue;
        v37 = v107 + 1;
        *((_QWORD *)this + 1) = v37;
LABEL_186:
        v143[0] = 0;
        if ((unint64_t)v37 >= v36 || *v37 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143);
          if (!(_DWORD)result)
            return result;
          v108 = v143[0];
          if (v143[0] - 1 < 5)
          {
LABEL_193:
            *(_DWORD *)(a1 + 200) |= 0x400u;
            *(_DWORD *)(a1 + 60) = v108;
            v109 = (_BYTE *)*((_QWORD *)this + 1);
            v38 = *((_QWORD *)this + 2);
            if ((unint64_t)v109 >= v38)
              continue;
            goto LABEL_194;
          }
        }
        else
        {
          v108 = *v37;
          *((_QWORD *)this + 1) = v37 + 1;
          if ((v108 - 1) < 5)
            goto LABEL_193;
        }
        if (v108 == 101)
          goto LABEL_193;
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 11, v108);
        v109 = (_BYTE *)*((_QWORD *)this + 1);
        v38 = *((_QWORD *)this + 2);
        if ((unint64_t)v109 >= v38)
          continue;
LABEL_194:
        if (*v109 != 96)
          continue;
        v39 = v109 + 1;
        *((_QWORD *)this + 1) = v39;
LABEL_196:
        v143[0] = 0;
        if ((unint64_t)v39 >= v38 || *v39 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143);
          if (!(_DWORD)result)
            return result;
          v110 = v143[0];
          if (v143[0] - 1 <= 1)
          {
LABEL_199:
            *(_DWORD *)(a1 + 200) |= 0x800u;
            *(_DWORD *)(a1 + 136) = v110;
            goto LABEL_203;
          }
        }
        else
        {
          v110 = *v39;
          *((_QWORD *)this + 1) = v39 + 1;
          if ((v110 - 1) <= 1)
            goto LABEL_199;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 12, v110);
LABEL_203:
        v111 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v111 >= *((_QWORD *)this + 2) || *v111 != 106)
          continue;
        do
        {
          *((_QWORD *)this + 1) = v111 + 1;
          v40 = *(_DWORD *)(a1 + 124);
          v41 = *(int *)(a1 + 120);
          if ((int)v41 >= v40)
          {
LABEL_209:
            if (v40 == *(_DWORD *)(a1 + 128))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v40 + 1);
              v40 = *(_DWORD *)(a1 + 124);
            }
            *(_DWORD *)(a1 + 124) = v40 + 1;
            operator new();
          }
LABEL_61:
          v42 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)(a1 + 120) = v41 + 1;
          v43 = *(_QWORD *)(v42 + 8 * v41);
          v143[0] = 0;
          v112 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v112 >= *((_QWORD *)this + 2) || *v112 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
          }
          else
          {
            v143[0] = *v112;
            *((_QWORD *)this + 1) = v112 + 1;
          }
          v113 = *((_DWORD *)this + 14);
          v114 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v113 + 1;
          if (v113 >= v114)
            return 0;
          v115 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
          if (!sub_1000940C0(v43, this, v116, v117) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v115);
          v118 = *((_DWORD *)this + 14);
          v59 = __OFSUB__(v118, 1);
          v119 = v118 - 1;
          if (v119 < 0 == v59)
            *((_DWORD *)this + 14) = v119;
          v111 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v111 >= *((_QWORD *)this + 2))
            goto LABEL_2;
          v120 = *v111;
        }
        while (v120 == 106);
        if (v120 != 113)
          continue;
        *((_QWORD *)this + 1) = v111 + 1;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
LABEL_225:
        *(_QWORD *)(a1 + 144) = *(_QWORD *)v143;
        *(_DWORD *)(a1 + 200) |= 0x2000u;
        v121 = (_BYTE *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        if ((unint64_t)v121 >= v17 || *v121 != 120)
          continue;
        v18 = v121 + 1;
        *((_QWORD *)this + 1) = v18;
LABEL_228:
        v143[0] = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143);
          if (!(_DWORD)result)
            return result;
          v122 = v143[0];
          if (v143[0] - 1 <= 1)
          {
LABEL_231:
            *(_DWORD *)(a1 + 200) |= 0x4000u;
            *(_DWORD *)(a1 + 140) = v122;
            goto LABEL_235;
          }
        }
        else
        {
          v122 = *v18;
          *((_QWORD *)this + 1) = v18 + 1;
          if ((v122 - 1) <= 1)
            goto LABEL_231;
        }
        wireless_diagnostics::google::protobuf::UnknownFieldSet::AddVarint(v7, 15, v122);
LABEL_235:
        v123 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v123 < 2 || *v123 != 129 || v123[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v123 + 2;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
LABEL_239:
        *(_QWORD *)(a1 + 152) = *(_QWORD *)v143;
        v124 = *(_DWORD *)(a1 + 200) | 0x8000;
        *(_DWORD *)(a1 + 200) = v124;
        v125 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v125 < 2 || *v125 != 138 || v125[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v125 + 2;
        *(_DWORD *)(a1 + 200) = v124 | 0x10000;
        v19 = *(_QWORD *)(a1 + 160);
        if (!v19)
LABEL_243:
          operator new();
LABEL_19:
        v143[0] = 0;
        v20 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v20 >= *((_QWORD *)this + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v20;
          *((_QWORD *)this + 1) = v20 + 1;
        }
        v126 = *((_DWORD *)this + 14);
        v127 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v126 + 1;
        if (v126 >= v127)
          return 0;
        v128 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_1002D8618(v19, this, v129, v130) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v128);
        v131 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v131, 1);
        v132 = v131 - 1;
        if (v132 < 0 == v59)
          *((_DWORD *)this + 14) = v132;
        v133 = (unsigned __int8 *)*((_QWORD *)this + 1);
        if (*((_DWORD *)this + 4) - (int)v133 <= 1 || *v133 != 146 || v133[1] != 1)
          continue;
        *((_QWORD *)this + 1) = v133 + 2;
        *(_DWORD *)(a1 + 200) |= 0x20000u;
        v44 = *(_QWORD *)(a1 + 168);
        if (!v44)
LABEL_70:
          operator new();
LABEL_255:
        v143[0] = 0;
        v134 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v134 >= *((_QWORD *)this + 2) || *v134 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143))return 0;
        }
        else
        {
          v143[0] = *v134;
          *((_QWORD *)this + 1) = v134 + 1;
        }
        v135 = *((_DWORD *)this + 14);
        v136 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v135 + 1;
        if (v135 >= v136)
          return 0;
        v137 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v143[0]);
        if (!sub_1002D8618(v44, this, v138, v139) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v137);
        v140 = *((_DWORD *)this + 14);
        v59 = __OFSUB__(v140, 1);
        v141 = v140 - 1;
        if (v141 < 0 == v59)
          *((_DWORD *)this + 14) = v141;
        v142 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v45 = *((_QWORD *)this + 2);
        if ((int)v45 - (int)v142 <= 1 || *v142 != 152 || v142[1] != 1)
          continue;
        v46 = v142 + 2;
        *((_QWORD *)this + 1) = v46;
        v143[0] = 0;
        if ((unint64_t)v46 >= v45)
          goto LABEL_151;
LABEL_268:
        if ((char)*v46 < 0)
        {
LABEL_151:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v143);
          if (!(_DWORD)result)
            return result;
          v86 = v143[0];
          v87 = (unsigned __int8 *)*((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
        }
        else
        {
          v86 = *v46;
          v87 = v46 + 1;
          *((_QWORD *)this + 1) = v87;
        }
        *(_BYTE *)(a1 + 192) = v86 != 0;
        *(_DWORD *)(a1 + 200) |= 0x40000u;
        if ((int)v45 - (int)v87 >= 2 && *v87 == 161 && v87[1] == 1)
        {
          *((_QWORD *)this + 1) = v87 + 2;
          *(_QWORD *)v143 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
LABEL_76:
          *(_QWORD *)(a1 + 176) = *(_QWORD *)v143;
          *(_DWORD *)(a1 + 200) |= 0x80000u;
          v47 = (unsigned __int8 *)*((_QWORD *)this + 1);
          if (*((_DWORD *)this + 4) - (int)v47 >= 2 && *v47 == 169 && v47[1] == 1)
          {
            *((_QWORD *)this + 1) = v47 + 2;
LABEL_81:
            *(_QWORD *)v143 = 0;
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
            *(_QWORD *)(a1 + 184) = *(_QWORD *)v143;
            *(_DWORD *)(a1 + 200) |= 0x100000u;
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v16 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        goto LABEL_24;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v23 = (char *)*((_QWORD *)this + 1);
        v14 = *((_QWORD *)this + 2);
        *(_QWORD *)v143 = 0;
        if ((unint64_t)v23 >= v14)
          goto LABEL_96;
        goto LABEL_93;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 8u;
        v24 = *(_QWORD *)(a1 + 32);
        if (!v24)
          goto LABEL_100;
        goto LABEL_101;
      case 5u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x10u;
        v25 = *(_QWORD *)(a1 + 40);
        if (v25)
          goto LABEL_36;
        goto LABEL_113;
      case 6u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x20u;
        v27 = *(_QWORD *)(a1 + 48);
        if (v27)
          goto LABEL_40;
        goto LABEL_125;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x40u;
        v29 = *(_QWORD *)(a1 + 64);
        if (v29)
          goto LABEL_44;
        goto LABEL_137;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        v31 = *(_DWORD *)(a1 + 92);
        v32 = *(int *)(a1 + 88);
        if ((int)v32 < v31)
          goto LABEL_48;
        goto LABEL_154;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_86;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
        goto LABEL_170;
      case 0xAu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x80u;
        v35 = *(_QWORD *)(a1 + 72);
        if (!v35)
          goto LABEL_173;
        goto LABEL_174;
      case 0xBu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v37 = (char *)*((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        goto LABEL_186;
      case 0xCu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v39 = (char *)*((_QWORD *)this + 1);
        v38 = *((_QWORD *)this + 2);
        goto LABEL_196;
      case 0xDu:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        v40 = *(_DWORD *)(a1 + 124);
        v41 = *(int *)(a1 + 120);
        if ((int)v41 < v40)
          goto LABEL_61;
        goto LABEL_209;
      case 0xEu:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_86;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
        goto LABEL_225;
      case 0xFu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = *((_QWORD *)this + 2);
        goto LABEL_228;
      case 0x10u:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_86;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) == 0)return 0;
        goto LABEL_239;
      case 0x11u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x10000u;
        v19 = *(_QWORD *)(a1 + 160);
        if (v19)
          goto LABEL_19;
        goto LABEL_243;
      case 0x12u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_86;
        *(_DWORD *)(a1 + 200) |= 0x20000u;
        v44 = *(_QWORD *)(a1 + 168);
        if (!v44)
          goto LABEL_70;
        goto LABEL_255;
      case 0x13u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_86;
        v46 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v45 = *((_QWORD *)this + 2);
        v143[0] = 0;
        if ((unint64_t)v46 >= v45)
          goto LABEL_151;
        goto LABEL_268;
      case 0x14u:
        v11 = TagFallback & 7;
        if (v11 != 1)
          goto LABEL_86;
        *(_QWORD *)v143 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v143) & 1) != 0)goto LABEL_76;
        return 0;
      case 0x15u:
        v11 = TagFallback & 7;
        if (v11 == 1)
          goto LABEL_81;
        goto LABEL_86;
      default:
        v11 = TagFallback & 7;
LABEL_86:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)return 0;
        continue;
    }
  }
}

void sub_100092B50()
{
  operator delete();
}

void sub_100092B78()
{
  operator delete();
}

void sub_100092B9C()
{
  operator delete();
}

void sub_100092BC0()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100092BEC()
{
  operator delete();
}

void sub_100092C10()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

void sub_100092C38()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

_QWORD *sub_100092C60(_QWORD *a1)
{
  *a1 = off_100403ED0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_100092C98(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100092CAC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t result;
  _BYTE *v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;

  v6 = (unsigned int *)(a1 + 16);
  v7 = (unsigned int *)(a1 + 20);
  v8 = a1 + 8;
  while (1)
  {
    do
    {
      do
      {
        while (1)
        {
          while (1)
          {
            v9 = (char *)*((_QWORD *)this + 1);
            if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
            {
              TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
              *((_DWORD *)this + 8) = (_DWORD)TagFallback;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            else
            {
              TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
              *((_DWORD *)this + 8) = (_DWORD)TagFallback;
              *((_QWORD *)this + 1) = v9 + 1;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            v11 = TagFallback >> 3;
            if (TagFallback >> 3 != 1)
              break;
            v12 = TagFallback & 7;
            if ((TagFallback & 7) != 0)
              goto LABEL_23;
            v16 = (char *)*((_QWORD *)this + 1);
            v15 = *((_QWORD *)this + 2);
            if ((unint64_t)v16 >= v15 || *v16 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
              if (!(_DWORD)result)
                return result;
              v17 = (_BYTE *)*((_QWORD *)this + 1);
              v15 = *((_QWORD *)this + 2);
              *(_DWORD *)(a1 + 36) |= 1u;
              if ((unint64_t)v17 < v15)
                goto LABEL_28;
            }
            else
            {
              *v6 = *v16;
              v17 = v16 + 1;
              *((_QWORD *)this + 1) = v17;
              *(_DWORD *)(a1 + 36) |= 1u;
              if ((unint64_t)v17 < v15)
              {
LABEL_28:
                if (*v17 == 16)
                {
                  v18 = v17 + 1;
                  *((_QWORD *)this + 1) = v18;
                  if ((unint64_t)v18 >= v15)
                    goto LABEL_33;
LABEL_30:
                  if ((char)*v18 < 0)
                    goto LABEL_33;
                  *v7 = *v18;
                  v20 = v18 + 1;
                  *((_QWORD *)this + 1) = v20;
                  v21 = *(_DWORD *)(a1 + 36) | 2;
                  *(_DWORD *)(a1 + 36) = v21;
                  if ((unint64_t)v20 < v15)
                    goto LABEL_35;
                }
              }
            }
          }
          if (v11 == 2)
            break;
          if (v11 == 3)
          {
            v12 = TagFallback & 7;
            if (v12 == 2)
            {
              *(_DWORD *)(a1 + 36) |= 4u;
              v13 = *(_QWORD *)(a1 + 24);
              if (!v13)
                goto LABEL_37;
              goto LABEL_12;
            }
          }
          else
          {
            v12 = TagFallback & 7;
          }
LABEL_23:
          if (v12 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v8, a4) & 1) == 0)
            return 0;
        }
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_23;
        v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v18 < v15)
          goto LABEL_30;
LABEL_33:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v21 = *(_DWORD *)(a1 + 36) | 2;
        *(_DWORD *)(a1 + 36) = v21;
      }
      while ((unint64_t)v20 >= v22);
LABEL_35:
      ;
    }
    while (*v20 != 26);
    *((_QWORD *)this + 1) = v20 + 1;
    *(_DWORD *)(a1 + 36) = v21 | 4;
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13)
LABEL_37:
      operator new();
LABEL_12:
    v31 = 0;
    v14 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v31))
        return 0;
    }
    else
    {
      v31 = *v14;
      *((_QWORD *)this + 1) = v14 + 1;
    }
    v23 = *((_DWORD *)this + 14);
    v24 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 14) = v23 + 1;
    if (v23 >= v24)
      return 0;
    v25 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v31);
    if (!sub_100093000(v13, this, v26, v27) || !*((_BYTE *)this + 36))
      return 0;
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v25);
    v28 = *((_DWORD *)this + 14);
    v29 = __OFSUB__(v28, 1);
    v30 = v28 - 1;
    if (v30 < 0 == v29)
      *((_DWORD *)this + 14) = v30;
    if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
      && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
    {
      *((_DWORD *)this + 8) = 0;
      result = 1;
      *((_BYTE *)this + 36) = 1;
      return result;
    }
  }
}

void sub_100092FD8()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100093000(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t result;
  unsigned int v27[2];

  v6 = a1 + 8;
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 2)
          goto LABEL_22;
        *(_DWORD *)(a1 + 48) |= 1u;
        v10 = *(_QWORD *)(a1 + 16);
        if (!v10)
          operator new();
        v27[0] = 0;
        v11 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27))return 0;
        }
        else
        {
          v27[0] = *v11;
          *((_QWORD *)this + 1) = v11 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27[0]);
        if (!sub_100093370(v10, this, v17, v18) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v19 = *((_DWORD *)this + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)this + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v22 >= *((_QWORD *)this + 2) || *v22 != 17)
          continue;
        *((_QWORD *)this + 1) = v22 + 1;
        *(_QWORD *)v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) == 0)return 0;
        goto LABEL_34;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_22;
        *(_QWORD *)v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) == 0)return 0;
LABEL_34:
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v27;
        *(_DWORD *)(a1 + 48) |= 2u;
        v23 = (_BYTE *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        if ((unint64_t)v23 >= v12 || *v23 != 24)
          continue;
        v13 = v23 + 1;
        *((_QWORD *)this + 1) = v13;
        v27[0] = 0;
        if ((unint64_t)v13 >= v12)
          goto LABEL_39;
LABEL_37:
        if (*v13 < 0)
        {
LABEL_39:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v27);
          if (!(_DWORD)result)
            return result;
          v24 = v27[0];
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v12 = *((_QWORD *)this + 2);
        }
        else
        {
          v24 = *v13;
          v25 = v13 + 1;
          *((_QWORD *)this + 1) = v25;
        }
        *(_BYTE *)(a1 + 40) = v24 != 0;
        *(_DWORD *)(a1 + 48) |= 4u;
        if ((unint64_t)v25 >= v12 || *v25 != 33)
          continue;
        *((_QWORD *)this + 1) = v25 + 1;
LABEL_44:
        *(_QWORD *)v27 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v27) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)v27;
          *(_DWORD *)(a1 + 48) |= 8u;
          if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            result = 1;
            *((_BYTE *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v13 = (char *)*((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
        v27[0] = 0;
        if ((unint64_t)v13 >= v12)
          goto LABEL_39;
        goto LABEL_37;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_22;
        goto LABEL_44;
      default:
        v9 = TagFallback & 7;
LABEL_22:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_100093348()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100093370(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v9 = TagFallback & 7;
        if (v9 == 1)
        {
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          goto LABEL_17;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_22:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v9 = TagFallback & 7;
    if (v9 != 1)
      goto LABEL_22;
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 36) |= 1u;
    v10 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 17)
    {
      *((_QWORD *)this + 1) = v10 + 1;
      v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
        return 0;
LABEL_17:
      *(_QWORD *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 36) |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100093518(uint64_t a1, wireless_diagnostics::google::protobuf::io::CodedInputStream *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  char *v9;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v11;
  int v12;
  char *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t result;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  unint64_t v33;

  v6 = (uint64_t *)(a1 + 40);
  v7 = (uint64_t *)(a1 + 16);
  v8 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v9 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v9;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v9 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v11 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v12 = TagFallback & 7;
        if (v12 == 1)
        {
          result = sub_100141980(1, 0xAu, this, v7);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v19)
          {
LABEL_45:
            if (*v18 == 18)
            {
              v15 = v18 + 1;
              *((_QWORD *)this + 1) = v15;
              v32 = 0;
              if ((unint64_t)v15 >= v19)
                goto LABEL_49;
              goto LABEL_47;
            }
          }
        }
        else
        {
          if (v12 != 2)
            goto LABEL_23;
          v32 = 0;
          v13 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
            v14 = v32;
          }
          else
          {
            v14 = *v13;
            v32 = v14;
            *((_QWORD *)this + 1) = v13 + 1;
          }
          v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v14);
          while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
          {
            v33 = 0;
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0;
            v22 = v33;
            v23 = *(_DWORD *)(a1 + 24);
            if (v23 == *(_DWORD *)(a1 + 28))
            {
              if (2 * v23 <= v23 + 1)
                v24 = v23 + 1;
              else
                v24 = 2 * v23;
              if (v24 <= 4)
                v24 = 4;
              *(_DWORD *)(a1 + 28) = v24;
              operator new[]();
            }
            v21 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 24) = v23 + 1;
            *(_QWORD *)(v21 + 8 * v23) = v22;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v20);
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v19 = *((_QWORD *)this + 2);
          if ((unint64_t)v18 < v19)
            goto LABEL_45;
        }
      }
      if (v11 != 2)
        break;
      v12 = TagFallback & 7;
      if (v12 == 1)
      {
        result = sub_100141980(1, 0x12u, this, v6);
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
      }
      if (v12 != 2)
        goto LABEL_23;
      v15 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v16 = *((_QWORD *)this + 2);
      v32 = 0;
      if ((unint64_t)v15 >= v16)
      {
LABEL_49:
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0;
        v25 = v32;
        goto LABEL_51;
      }
LABEL_47:
      if ((char)*v15 < 0)
        goto LABEL_49;
      v25 = *v15;
      v32 = v25;
      *((_QWORD *)this + 1) = v15 + 1;
LABEL_51:
      v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v25);
      while ((int)wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
      {
        v33 = 0;
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33))return 0;
        v28 = v33;
        v29 = *(_DWORD *)(a1 + 48);
        if (v29 == *(_DWORD *)(a1 + 52))
        {
          if (2 * v29 <= v29 + 1)
            v30 = v29 + 1;
          else
            v30 = 2 * v29;
          if (v30 <= 4)
            v30 = 4;
          *(_DWORD *)(a1 + 52) = v30;
          operator new[]();
        }
        v27 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 48) = v29 + 1;
        *(_QWORD *)(v27 + 8 * v29) = v28;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
LABEL_63:
      v31 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v31 < *((_QWORD *)this + 2) && *v31 == 25)
      {
        *((_QWORD *)this + 1) = v31 + 1;
        v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0)
          return 0;
LABEL_66:
        *(_QWORD *)(a1 + 64) = v33;
        *(_DWORD *)(a1 + 76) |= 4u;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (v11 == 3)
    {
      v12 = TagFallback & 7;
      if (v12 == 1)
      {
        v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v33) & 1) == 0)
          return 0;
        goto LABEL_66;
      }
    }
    else
    {
      v12 = TagFallback & 7;
    }
LABEL_23:
    if (v12 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v8, a4) & 1) == 0)
      return 0;
  }
}

uint64_t sub_100093964(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t result;
  unint64_t v14;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
          *((_DWORD *)this + 8) = (_DWORD)TagFallback;
          *((_QWORD *)this + 1) = v7 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v9 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v10 = TagFallback & 7;
        if (v10 != 1)
          goto LABEL_28;
        v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 44) |= 1u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 17)
        {
          *((_QWORD *)this + 1) = v11 + 1;
          goto LABEL_19;
        }
      }
      if (v9 == 2)
        break;
      if (v9 == 3)
      {
        v10 = TagFallback & 7;
        if (v10 == 1)
        {
          v14 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
            return 0;
          goto LABEL_23;
        }
      }
      else
      {
        v10 = TagFallback & 7;
      }
LABEL_28:
      if (v10 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v10 = TagFallback & 7;
    if (v10 != 1)
      goto LABEL_28;
LABEL_19:
    v14 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 24) = v14;
    *(_DWORD *)(a1 + 44) |= 2u;
    v12 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v12 < *((_QWORD *)this + 2) && *v12 == 25)
    {
      *((_QWORD *)this + 1) = v12 + 1;
      v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0)
        return 0;
LABEL_23:
      *(_QWORD *)(a1 + 32) = v14;
      *(_DWORD *)(a1 + 44) |= 4u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_100093B6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100402EB0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

void sub_100093BAC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100093BC0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t result;
  unint64_t v16;

  v6 = a1 + 8;
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_40;
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 68) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 17)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        v9 = TagFallback & 7;
        if (v9 != 1)
          goto LABEL_40;
LABEL_15:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 24) = v16;
        *(_DWORD *)(a1 + 68) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v11 >= *((_QWORD *)this + 2) || *v11 != 25)
          continue;
        *((_QWORD *)this + 1) = v11 + 1;
LABEL_20:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 32) = v16;
        *(_DWORD *)(a1 + 68) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v12 >= *((_QWORD *)this + 2) || *v12 != 33)
          continue;
        *((_QWORD *)this + 1) = v12 + 1;
LABEL_25:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 40) = v16;
        *(_DWORD *)(a1 + 68) |= 8u;
        v13 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 != 41)
          continue;
        *((_QWORD *)this + 1) = v13 + 1;
LABEL_30:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 48) = v16;
        *(_DWORD *)(a1 + 68) |= 0x10u;
        v14 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v14 >= *((_QWORD *)this + 2) || *v14 != 49)
          continue;
        *((_QWORD *)this + 1) = v14 + 1;
LABEL_35:
        v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v16) & 1) == 0)
          return 0;
        *(_QWORD *)(a1 + 56) = v16;
        *(_DWORD *)(a1 + 68) |= 0x20u;
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        break;
      case 3u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_20;
        goto LABEL_40;
      case 4u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_25;
        goto LABEL_40;
      case 5u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_30;
        goto LABEL_40;
      case 6u:
        v9 = TagFallback & 7;
        if (v9 == 1)
          goto LABEL_35;
        goto LABEL_40;
      default:
        v9 = TagFallback & 7;
LABEL_40:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

_QWORD *sub_100093ECC(_QWORD *a1)
{
  *a1 = off_100403CC0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_100093F04(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100093F18(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  unsigned int v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  _BYTE *v10;
  uint64_t result;
  unint64_t v12;

  v6 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 == 1)
        break;
      if (TagFallback >> 3 == 2)
      {
        v9 = TagFallback & 7;
        if (v9 == 1)
        {
          v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
            return 0;
          goto LABEL_17;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_22:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v6, a4) & 1) == 0)
        return 0;
    }
    v9 = TagFallback & 7;
    if (v9 != 1)
      goto LABEL_22;
    v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
      return 0;
    *(_QWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 36) |= 1u;
    v10 = (_BYTE *)*((_QWORD *)this + 1);
    if ((unint64_t)v10 < *((_QWORD *)this + 2) && *v10 == 17)
    {
      *((_QWORD *)this + 1) = v10 + 1;
      v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0)
        return 0;
LABEL_17:
      *(_QWORD *)(a1 + 24) = v12;
      *(_DWORD *)(a1 + 36) |= 2u;
      if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  result = 1;
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t sub_1000940C0(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormat *this, uint64_t a3, wireless_diagnostics::google::protobuf::UnknownFieldSet *a4)
{
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unsigned int v7;
  char *v8;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v31;
  int v32;
  int v33;
  _BYTE *v34;
  uint64_t result;
  unsigned int v36;
  unsigned int v37;

  v6 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24);
  v7 = a1 + 8;
  while (1)
  {
    while (1)
    {
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v8;
        *((_DWORD *)this + 8) = (_DWORD)TagFallback;
        *((_QWORD *)this + 1) = v8 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v10 = TagFallback & 7;
      if (v10 != 2)
        goto LABEL_19;
      *(_DWORD *)(a1 + 52) |= 1u;
      v15 = *(_QWORD *)(a1 + 16);
      if (!v15)
        operator new();
      v36 = 0;
      v16 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v16 >= *((_QWORD *)this + 2) || *v16 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v36))return 0;
      }
      else
      {
        v36 = *v16;
        *((_QWORD *)this + 1) = v16 + 1;
      }
      v17 = *((_DWORD *)this + 14);
      v18 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v17 + 1;
      if (v17 >= v18)
        return 0;
      v19 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v36);
      if (!sub_100093518(v15, this, v20, v21) || !*((_BYTE *)this + 36))
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v19);
      v22 = *((_DWORD *)this + 14);
      v23 = __OFSUB__(v22, 1);
      v24 = v22 - 1;
      if (v24 < 0 == v23)
        *((_DWORD *)this + 14) = v24;
      v25 = (_BYTE *)*((_QWORD *)this + 1);
      if ((unint64_t)v25 < *((_QWORD *)this + 2) && *v25 == 18)
      {
        do
        {
          *((_QWORD *)this + 1) = v25 + 1;
          v11 = *(_DWORD *)(a1 + 36);
          v12 = *(int *)(a1 + 32);
          if ((int)v12 >= v11)
            goto LABEL_31;
LABEL_11:
          v13 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 32) = v12 + 1;
          v14 = *(_QWORD *)(v13 + 8 * v12);
          v37 = 0;
          v26 = (char *)*((_QWORD *)this + 1);
          if ((unint64_t)v26 >= *((_QWORD *)this + 2) || *v26 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37))return 0;
          }
          else
          {
            v37 = *v26;
            *((_QWORD *)this + 1) = v26 + 1;
          }
          v27 = *((_DWORD *)this + 14);
          v28 = *((_DWORD *)this + 15);
          *((_DWORD *)this + 14) = v27 + 1;
          if (v27 >= v28)
            return 0;
          v29 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
          if (!sub_100093518(v14, this, v30, v31) || !*((_BYTE *)this + 36))
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v29);
          v32 = *((_DWORD *)this + 14);
          v23 = __OFSUB__(v32, 1);
          v33 = v32 - 1;
          if (v33 < 0 == v23)
            *((_DWORD *)this + 14) = v33;
          v25 = (_BYTE *)*((_QWORD *)this + 1);
          v34 = (_BYTE *)*((_QWORD *)this + 2);
        }
        while (v25 < v34 && *v25 == 18);
        if (v25 == v34 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v10 = TagFallback & 7;
      if (v10 == 2)
      {
        v11 = *(_DWORD *)(a1 + 36);
        v12 = *(int *)(a1 + 32);
        if ((int)v12 < v11)
          goto LABEL_11;
LABEL_31:
        if (v11 == *(_DWORD *)(a1 + 40))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v11 + 1);
          v11 = *(_DWORD *)(a1 + 36);
        }
        *(_DWORD *)(a1 + 36) = v11 + 1;
        operator new();
      }
    }
    else
    {
      v10 = TagFallback & 7;
    }
LABEL_19:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormat::SkipField(this, TagFallback, v7, a4) & 1) == 0)
      return 0;
  }
}

void sub_10009441C()
{
  wireless_diagnostics::google::protobuf::Message *v0;

  wireless_diagnostics::google::protobuf::Message::~Message(v0);
  operator delete();
}

uint64_t sub_100094448(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = *(_QWORD **)(a1 + 272);
  while (v2)
  {
    v13 = v2;
    v2 = (_QWORD *)*v2;
    v14 = (std::__shared_weak_count *)v13[3];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(v13);
  }
  v3 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 232);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      sub_1000945CC(v4 + 2);
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v6)
    operator delete(v6);
  sub_10002F3EC((_QWORD *)(a1 + 128));
  if (*(_QWORD *)(a1 + 120))
    operator delete(*(void **)(a1 + 104));
  if (*(_QWORD *)(a1 + 96))
    operator delete(*(void **)(a1 + 80));
  v7 = *(_QWORD **)(a1 + 56);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
    operator delete(v9);
  v10 = *(_QWORD **)(a1 + 16);
  while (v10)
  {
    v17 = v10;
    v10 = (_QWORD *)*v10;
    sub_100073738(v17 + 4);
    v18 = (std::__shared_weak_count *)v17[3];
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    operator delete(v17);
  }
  v11 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
    operator delete(v11);
  return a1;
}

_QWORD *sub_1000945CC(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v2 = (void (***)(_QWORD))a1[10];
  if (v2)
  {
    v3 = (void (***)(_QWORD))a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      v5 = v3 - 5;
      v6 = v3 - 5;
      do
      {
        v7 = *v6;
        v6 -= 5;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)a1[4];
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)a1[2];
  a1[2] = 0;
  if (v12)
    operator delete(v12);
  v13 = (std::__shared_weak_count *)a1[1];
  if (!v13)
    return a1;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  return a1;
}

void sub_1000946C0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  void (***v21)(char *);
  void (**v22)(char *);
  BOOL v23;
  char *v24;
  void *v25;
  char *v26;
  void (***v27)(char *);
  void (**v28)(char *);
  void *__p;
  char *v30;
  unint64_t v31;
  void *v32[2];
  unint64_t v33;
  void *v34;
  char *v35;
  unint64_t v36;
  void *v37[2];
  unint64_t v38;
  void *v39;
  void *v40[2];
  char v41;
  std::string v42;

  v37[1] = 0;
  v38 = 0;
  v37[0] = 0;
  v4 = *a1;
  v5 = *(int *)(*a1 + 24);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(uint64_t **)(v4 + 16);
    v8 = 8 * v5;
    do
    {
      while (1)
      {
        v9 = *v7;
        if ((unint64_t)v6 < v38)
          break;
        v6 = (void *)sub_1002D6004((uint64_t *)v37, v9);
        v37[1] = v6;
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_6;
      }
      v6 = (void *)(sub_10009558C((uint64_t)v6, v9) + 32);
      v37[1] = v6;
      ++v7;
      v8 -= 8;
    }
    while (v8);
LABEL_6:
    v4 = *a1;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v10 = *(int *)(v4 + 48);
  v11 = *(_DWORD *)(v4 + 24);
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 != v11)
    {
      sub_1000D5048(v40, "");
      sub_10022B678("These should be parallel arrays", &v42);
      sub_100174738((uint64_t)v40, (uint64_t)&v42, 1);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (v41 < 0)
        operator delete(v40[0]);
      sub_1000F2AE4((uint64_t)&v39);
    }
    v12 = *(uint64_t **)(v4 + 40);
    v13 = &v12[v10];
    v14 = (unint64_t)v35;
    do
    {
      v15 = *v12;
      if (v14 >= v36)
      {
        v14 = sub_1002D636C(&v34, v15);
      }
      else
      {
        sub_100094A58(v14, v15);
        v14 += 40;
      }
      v35 = (char *)v14;
      ++v12;
    }
    while (v12 != v13);
  }
  else if (v11 < 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v16 = 0;
    do
    {
      if (v14 >= v36)
      {
        v14 = sub_1002D6164(&v34);
      }
      else
      {
        sub_1000C4498(v14);
        v14 += 40;
      }
      v35 = (char *)v14;
      ++v16;
    }
    while (v16 < *(_DWORD *)(*a1 + 24));
  }
  *(_OWORD *)v32 = *(_OWORD *)v37;
  v17 = v38;
  v37[1] = 0;
  v38 = 0;
  __p = v34;
  v30 = (char *)v14;
  v31 = v36;
  v36 = 0;
  v37[0] = 0;
  v33 = v17;
  v34 = 0;
  v35 = 0;
  sub_100094C40(a2, (uint64_t)v32, (uint64_t)&__p);
  v18 = (char *)__p;
  if (__p)
  {
    v19 = __p;
    if (v30 != __p)
    {
      v20 = v30 - 40;
      v21 = (void (***)(char *))(v30 - 40);
      do
      {
        v22 = *v21;
        v21 -= 5;
        (*v22)(v20);
        v23 = v20 == v18;
        v20 = (char *)v21;
      }
      while (!v23);
      v19 = __p;
    }
    v30 = v18;
    operator delete(v19);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  v24 = (char *)v34;
  if (v34)
  {
    v25 = v34;
    if (v35 != v34)
    {
      v26 = v35 - 40;
      v27 = (void (***)(char *))(v35 - 40);
      do
      {
        v28 = *v27;
        v27 -= 5;
        (*v28)(v26);
        v23 = v26 == v24;
        v26 = (char *)v27;
      }
      while (!v23);
      v25 = v34;
    }
    v35 = v24;
    operator delete(v25);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void sub_1000949C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  sub_1002D299C(&a16);
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100094A58(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1004031A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 16) = _D0;
  *(_OWORD *)(a1 + 24) = xmmword_100398F30;
  sub_100094AEC((_DWORD *)a1, a2);
  return a1;
}

void sub_100094ABC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100094AD8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100094AEC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;
  char v11;
  _BYTE v12[48];

  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v12, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/radiomap.pb.cc", 1258);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v11, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 36);
  if (!(_BYTE)v5)
    return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 16);
    a1[9] |= 1u;
    a1[4] = v8;
    v5 = *(_DWORD *)(a2 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
LABEL_12:
      v10 = *(_DWORD *)(a2 + 24);
      a1[9] |= 4u;
      a1[6] = v10;
      if ((*(_DWORD *)(a2 + 36) & 8) == 0)
        return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = *(_DWORD *)(a2 + 20);
  a1[9] |= 2u;
  a1[5] = v9;
  v5 = *(_DWORD *)(a2 + 36);
  if ((v5 & 4) != 0)
    goto LABEL_12;
LABEL_7:
  if ((v5 & 8) != 0)
  {
LABEL_8:
    v6 = *(_DWORD *)(a2 + 28);
    a1[9] |= 8u;
    a1[7] = v6;
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 2), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100094BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100094BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100094C10(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004031A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100094C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  int v16;
  int v17;
  __int128 v18;
  int v19;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 5;
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    do
    {
      v9 = *(_QWORD *)(a1 + 40);
      if (v6 >= (*(_QWORD *)(a1 + 48) - v9) >> 5)
        sub_1001E2FA0();
      v10 = (int *)(v9 + v5);
      v12 = v9 + v5 + 8;
      v11 = *(_DWORD *)(v9 + v5);
      if (v11 == v11 >> 31)
      {
        *(_QWORD *)&v18 = *(_QWORD *)v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        v19 = *(_DWORD *)(v12 + 16);
        v18 = v14;
        v13 = *v10;
        v11 = v13 >> 31;
      }
      v16 = v6;
      v17 = v13 ^ v11;
      sub_100094DE4(a1, (uint64_t)&v17, &v17, &v16);
      ++v6;
      v5 += 32;
    }
    while (v8 != v6);
  }
  return a1;
}

void sub_100094DB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  sub_1002D299C(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v5;
    operator delete(v5);
  }
  sub_10022CAC0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100094DE4(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v47;
  char *v48;

  v48 = &v47;
  v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  else
  {
    v10 = sub_10022CC84((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v4 = v10;
    if (v10 >= v11)
      v4 = v10 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v10;
  }
  v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v13)
  {
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      v15 = *(_DWORD *)a2;
      v16 = (v15 >> 31) ^ v15;
      v17 = v15 >> 31 == v15;
      v18 = *(_QWORD *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
                return v14;
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              v22 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
                return v14;
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      if (v17)
      {
        while (1)
        {
          v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
              return v14;
          }
          else
          {
            if (v24 >= v11)
              v24 %= v11;
            if (v24 != v4)
              goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      do
      {
        v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            v26 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
              return v14;
          }
        }
        else
        {
          if (v25 >= v11)
            v25 %= v11;
          if (v25 != v4)
            break;
        }
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  v28 = operator new(0x38uLL);
  v14 = v28;
  *v28 = 0;
  v28[1] = v10;
  v29 = v28 + 3;
  v32 = *a3;
  v31 = a3 + 2;
  v30 = v32;
  v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    *v29 = *(_QWORD *)v31;
    v33 = v30;
  }
  else
  {
    *(_OWORD *)v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 10) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  *((_DWORD *)v28 + 12) = *a4;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    v10 = v4;
  }
  else
  {
    v36 = 1;
    if (v11 >= 3)
      v36 = (v11 & (v11 - 1)) != 0;
    v37 = v36 | (2 * v11);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_74;
    if (prime < v11)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v11)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v10 %= v11;
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  v43 = *(_QWORD *)a1;
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v44)
  {
    *v14 = *v44;
LABEL_97:
    *v44 = v14;
    goto LABEL_98;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v43 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    v45 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100095244(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100095258(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD v23[3];
  int v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[16];
  void *__p[2];
  __int128 v29;
  _BYTE v30[32];

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FF160);
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "building byte offset map for ApRadioMaps", buf, 2u);
  }
LABEL_4:
  *(_OWORD *)__p = 0u;
  v29 = 0u;
  *(_OWORD *)buf = 0u;
  v7 = sub_1000966BC();
  v8 = v7;
  v9 = atomic_load((unsigned __int8 *)v7 + 20);
  if ((v9 & 1) == 0 && !*((_BYTE *)v7 + 16))
  {
    *((_BYTE *)v7 + 17) = sub_1000AC110((uint64_t)v7, (_BYTE *)v7 + 9);
    *((_BYTE *)v8 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v8 + 20);
  }
  v10 = *((unsigned __int8 *)v8 + 17);
  v11 = sub_100096748();
  v12 = v11;
  v13 = atomic_load((unsigned __int8 *)v11 + 20);
  if ((v13 & 1) == 0 && !*((_BYTE *)v11 + 16))
  {
    *((_BYTE *)v11 + 17) = sub_1000AC110((uint64_t)v11, (_BYTE *)v11 + 9);
    *((_BYTE *)v12 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v12 + 20);
  }
  v14 = *((unsigned __int8 *)v12 + 17);
  while ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) != a2)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    sub_1000958F4(a1, &v25);
    v16 = sub_100095C10((uint64_t)&v25);
    sub_100095D5C((uint64_t)v23, v16);
    if (v14)
      v17 = v24 == 2;
    else
      v17 = 0;
    v18 = v17;
    v19 = v24 != 1 || v10 == 0;
    if (!v19 || v18)
    {
      sub_100095F18(v15);
      sub_10009558C((uint64_t)v30, (uint64_t)v23);
      sub_100243218((uint64_t)buf, (uint64_t)v30, v15);
    }
    sub_100095CE8(v23);
    v20 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  sub_10009689C(a3, (uint64_t *)buf, (uint64_t *)&__p[1]);
  if (__p[1])
  {
    *(void **)&v29 = __p[1];
    operator delete(__p[1]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1000954DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100095358);
  }
  _Unwind_Resume(a1);
}

void sub_100095520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100243314((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100095570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1000E095C((uint64_t)va);
  sub_100243314((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10009558C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int128 v10;
  int v11;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_DWORD *)a1 = 0;
  v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 2)
  {
    sub_10030B03C(*(const void ***)(a2 + 16), &v10);
    v7 = *(_DWORD *)a1;
    if (v7 == v7 >> 31)
    {
      if (v7 == 1)
      {
        *(_QWORD *)v3 = v10;
      }
      else
      {
        v8 = *((_QWORD *)&v10 + 1);
        *(_QWORD *)(a1 + 8) = v10;
        *(_QWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a1 + 24) = v11;
        *(_DWORD *)a1 = 1;
      }
    }
    else
    {
      *(_OWORD *)v3 = v10;
      *(_DWORD *)(v3 + 16) = v11;
    }
  }
  else if (v4 == 1)
  {
    v5 = sub_1000956E4(*(const void ***)(a2 + 16));
    v6 = *(_DWORD *)a1;
    if (v6 == v6 >> 31 || !v6)
    {
      *(_QWORD *)v3 = v5;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v5;
      *(_DWORD *)a1 = 0;
    }
  }
  return a1;
}

unint64_t sub_1000956E4(const void **a1)
{
  int v1;
  const void *v2;
  size_t v3;
  unsigned int v5;
  unsigned __int16 v6;
  const void *v7;
  void *__p;
  void *v9[2];
  char v10;
  std::string v11;
  std::string v12;
  std::string v13;

  v1 = *((char *)a1 + 23);
  if ((v1 & 0x80000000) == 0)
  {
    v7 = (const void *)*((unsigned __int8 *)a1 + 23);
    if (v1 == 6)
    {
      LOBYTE(v1) = 6;
      goto LABEL_5;
    }
LABEL_12:
    sub_1000D5048(v9, "");
    sub_100227118("WiFi mac address was", &v11);
    sub_1001E2B30(&v7, &v12);
    sub_10023DBCC(" bytes, should have been 6", &v13);
    sub_100174738((uint64_t)v9, (uint64_t)&v11, 3);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v10 & 0x80000000) == 0)
        goto LABEL_16;
LABEL_20:
      operator delete(v9[0]);
LABEL_16:
      sub_1000F2AE4((uint64_t)&__p);
    }
LABEL_19:
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_20;
  }
  v7 = a1[1];
  if (v7 != (const void *)6)
    goto LABEL_12;
LABEL_5:
  v6 = 0;
  v5 = 0;
  if ((v1 & 0x80u) == 0)
    v2 = a1;
  else
    v2 = *a1;
  if ((v1 & 0x80u) == 0)
    v3 = v1;
  else
    v3 = (size_t)a1[1];
  memcpy(&v5, v2, v3);
  return bswap64(v5 | ((unint64_t)v6 << 32)) >> 16;
}

void sub_100095884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000958C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void **v17;

  while (1)
  {
    if (*((char *)v17 - 1) < 0)
      operator delete(*(v17 - 3));
    v17 -= 3;
    if (v17 == (void **)&a17)
      JUMPOUT(0x1000958A4);
  }
}

void sub_1000958F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  int v4;
  std::runtime_error_vtbl *v5;
  char v6;
  int v7;
  char v8;
  _BYTE v9[24];
  std::runtime_error v10;
  _BYTE v11[24];
  std::runtime_error v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v14 = a1;
  v15 = 0;
  v16 = 0;
  memset(v17, 0, 14);
  v18 = xmmword_100382F50;
  v19 = 0;
  v20 = wireless_diagnostics::google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v21 = 0;
  v22 = 0;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::Refresh((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  v13 = 0;
  if ((unint64_t)v15 >= v16 || *v15 < 0)
  {
    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, &v13))
    {
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v12, "error deserialzing ap rssi map");
      v12.__vftable = (std::runtime_error_vtbl *)&off_1004009A0;
      sub_10018D04C((uint64_t)v11);
      sub_1002D3B98(&v12, (uint64_t)"static ApRssiMap purpleslam::ApRssiMap::newFromZeroCopyInputStream(google::protobuf::io::ZeroCopyInputStream *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/radiomap.cpp", 325, (uint64_t)v11);
    }
    v3 = v13;
  }
  else
  {
    v3 = *v15;
    v13 = v3;
    ++v15;
  }
  v4 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v3);
  v5 = (std::runtime_error_vtbl *)operator new(0x70uLL);
  v5->~runtime_error_0 = 0;
  v5->what = 0;
  v5->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))off_100402DE8;
  sub_100095C38((uint64_t)&v5[1]);
  v12.__vftable = v5 + 1;
  v12.__imp_.__imp_ = (const char *)v5;
  v6 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromCodedStream((wireless_diagnostics::google::protobuf::MessageLite *)&v5[1], (wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
  v7 = BYTE4(v17[1]);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14, v4);
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  if ((v8 & 1) == 0)
  {
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v10, "error deserialzing ap rssi map");
    v10.__vftable = (std::runtime_error_vtbl *)&off_1004009A0;
    sub_10018D04C((uint64_t)v9);
    sub_1002D3B98(&v10, (uint64_t)"static ApRssiMap purpleslam::ApRssiMap::newFromZeroCopyInputStream(google::protobuf::io::ZeroCopyInputStream *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/radiomap.cpp", 338, (uint64_t)v9);
  }
  *a2 = v5 + 1;
  a2[1] = v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&v14);
}

void sub_100095AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_100095B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, char a20)
{
  void *v20;

  std::runtime_error::~runtime_error(&a18);
  __cxa_free_exception(v20);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_100095B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a13);
  sub_1000E095C((uint64_t)&a17);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a20);
  _Unwind_Resume(a1);
}

void sub_100095BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)&a21);
  _Unwind_Resume(a1);
}

void sub_100095BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)va);
  _Unwind_Resume(a1);
}

void sub_100095BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  wireless_diagnostics::google::protobuf::io::CodedInputStream::~CodedInputStream((wireless_diagnostics::google::protobuf::io::CodedInputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100095C04(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100095C10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!result)
    return *(_QWORD *)(qword_10042EA20 + 16);
  return result;
}

uint64_t sub_100095C38(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004035C0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_100095C90(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100095CA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004030F0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100095CE8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100403040;
  v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

uint64_t sub_100095D5C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100403040;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  *(_QWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(_DWORD *)(a1 + 32) = 0;
  sub_100095DF8(a1, a2);
  return a1;
}

void sub_100095DC8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;
  wireless_diagnostics::google::protobuf::UnknownFieldSet *v2;

  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_100095DE4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::Message *v1;

  wireless_diagnostics::google::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100095DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  char v10;
  _BYTE v11[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v11, 3, "/Library/Caches/com.apple.xbs/Sources/purpleslam/protobuf/gen/radiomap.pb.cc", 656);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v10, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(_DWORD *)(a1 + 24) = v6;
      v5 = *(_DWORD *)(a2 + 32);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *(const std::string **)(a2 + 16);
      *(_DWORD *)(a1 + 32) |= 2u;
      v8 = *(std::string **)(a1 + 16);
      if (v8 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
        operator new();
      std::string::operator=(v8, v7);
    }
  }
  return wireless_diagnostics::google::protobuf::UnknownFieldSet::MergeFrom((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8), (const wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a2 + 8));
}

void sub_100095EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100095F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

int64_t sub_100095F18(int64_t result)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (result > 0x7FFFFFFF);
  if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
  return result;
}

void sub_100095F9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t j;
  uint64_t v10;

  *(_QWORD *)a1 = off_100403670;
  v2 = *(_QWORD *)(a1 + 72);
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if (qword_10042EA28 != a1)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *(_DWORD *)(a1 + 52);
  if (v5 >= 1)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (*(_QWORD *)(a1 + 40))
    operator delete[]();
  v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 1)
  {
    for (j = 0; j < v8; ++j)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * j);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v8 = *(_DWORD *)(a1 + 28);
      }
    }
  }
  if (*(_QWORD *)(a1 + 16))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_1000960EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100403040;
  v2 = a1[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100096174(uint64_t a1)
{
  *(_QWORD *)a1 = off_1004031A0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000961B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;

  *a1 = off_100403B98;
  v2 = a1[3];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_10042EA58 != a1)
  {
    v4 = a1[2];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100096264(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  int v5;
  uint64_t j;
  uint64_t v7;

  *(_QWORD *)a1 = off_100403AE8;
  sub_1000963D4((_QWORD *)a1);
  v2 = *(_DWORD *)(a1 + 124);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 124);
      }
    }
  }
  if (*(_QWORD *)(a1 + 112))
    operator delete[]();
  v5 = *(_DWORD *)(a1 + 92);
  if (v5 >= 1)
  {
    for (j = 0; j < v5; ++j)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * j);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v5 = *(_DWORD *)(a1 + 92);
      }
    }
  }
  if (*(_QWORD *)(a1 + 80))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
}

void sub_100096354(_QWORD *a1)
{
  *a1 = off_1004038D8;
  if (a1[5])
    operator delete[]();
  if (a1[2])
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

_QWORD *sub_1000963D4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  v2 = result[2];
  if ((_UNKNOWN *)v2 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete();
  }
  if ((_QWORD *)qword_10042EA50 != result)
  {
    v4 = result[4];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[6];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[9];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[20];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (_QWORD *)v1[21];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1000964D4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100403ED0;
  if ((_QWORD *)qword_10042EA78 != a1)
  {
    v2 = a1[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100096540(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100403E20;
  if ((_QWORD *)qword_10042EA70 != a1)
  {
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 1));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000965AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403D70;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_1000965F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403A38;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100096634(uint64_t a1)
{
  *(_QWORD *)a1 = off_100402EB0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

void sub_100096678(uint64_t a1)
{
  *(_QWORD *)a1 = off_100403CC0;
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t *sub_1000966BC()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A570);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A570))
    return &qword_10041A5F0;
  qword_10041A5F0 = (uint64_t)sub_10016E238();
  unk_10041A5F8 = v2;
  byte_10041A600 = 0;
  byte_10041A602 = 0;
  byte_10041A604 = 0;
  __cxa_guard_release(&qword_10041A570);
  return &qword_10041A5F0;
}

void sub_100096730(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A570);
  _Unwind_Resume(a1);
}

uint64_t *sub_100096748()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_10041A568);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_10041A568))
    return &qword_10041A5D8;
  qword_10041A5D8 = (uint64_t)sub_10016E228();
  unk_10041A5E0 = v2;
  byte_10041A5E8 = 0;
  byte_10041A5EA = 0;
  byte_10041A5EC = 0;
  __cxa_guard_release(&qword_10041A568);
  return &qword_10041A5D8;
}

void sub_1000967BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10041A568);
  _Unwind_Resume(a1);
}

void sub_1000967D4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;

  *(_QWORD *)a1 = off_100403988;
  if (qword_10042EA40 != a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(a1 + 36);
      }
    }
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete[]();
  wireless_diagnostics::google::protobuf::UnknownFieldSet::~UnknownFieldSet((wireless_diagnostics::google::protobuf::UnknownFieldSet *)(a1 + 8));
  wireless_diagnostics::google::protobuf::Message::~Message((wireless_diagnostics::google::protobuf::Message *)a1);
  operator delete();
}

uint64_t sub_10009689C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint8_t *v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v31;
  uint8_t buf[24];

  v6 = (uint8_t *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v7 = *a2;
  v8 = (char *)a2[1];
  if ((char *)v7 != v8)
  {
    sub_100096CA8(v7, v8, (uint64_t)buf, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-v7] >> 1)), 1);
    v9 = (int *)*a2;
    v10 = a2[1];
    memset(buf, 0, sizeof(buf));
    v12 = v10 - (_QWORD)v9;
    v11 = v12 == 0;
    v13 = v12 >> 1;
    if (v11)
      *(_QWORD *)&buf[8] = 0xCCCCCCCCCCCCCCCDLL * v13;
    else
      sub_10009734C((char **)buf, 0, 0xCCCCCCCCCCCCCCCDLL * v13, v9, &v31);
    if (buf == (uint8_t *)a1)
    {
      if (*(_QWORD *)&buf[16])
        operator delete(*(void **)buf);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      if (*(_QWORD *)a1)
        operator delete(*(void **)a1);
      *(_QWORD *)a1 = *(_QWORD *)buf;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)&buf[8];
    }
    v14 = *(_QWORD *)(a1 + 16);
    if (!v14)
    {
LABEL_19:
      if (qword_100417ED8 == -1)
      {
        v20 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_22:
          a2[1] = *a2;
          goto LABEL_23;
        }
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FF160);
        v20 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_22;
      }
      v21 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "constructed in-memory map of wifi aprssimap byte offsets, number of entries, %zu", buf, 0xCu);
      goto LABEL_22;
    }
    v15 = *(_QWORD *)(a1 + 8);
    if (v15)
    {
      if (v15 >= v14)
        goto LABEL_19;
      if (v15 >= 0xCCCCCCCCCCCCCCDLL)
        sub_100245110((uint64_t)"get_next_capacity, allocator's max size reached");
      v16 = operator new(10 * v15);
      v17 = v16;
      v18 = *(void **)a1;
      if (*(_QWORD *)a1 && (v19 = *(_QWORD *)(a1 + 8)) != 0)
      {
        memmove(v16, *(const void **)a1, 10 * v19);
      }
      else if (!v18)
      {
        goto LABEL_18;
      }
    }
    else
    {
      v17 = 0;
      v18 = *(void **)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_18:
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 16) = v15;
        goto LABEL_19;
      }
    }
    operator delete(v18);
    goto LABEL_18;
  }
LABEL_23:
  v22 = (int *)a3[1];
  if ((int *)*a3 != v22)
  {
    sub_10024518C(*a3, v22, (uint64_t)buf, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v22 - *a3) >> 3)), 1);
    v23 = (_DWORD *)*a3;
    v24 = a3[1];
    memset(buf, 0, sizeof(buf));
    v25 = v24 - (_QWORD)v23;
    v11 = v25 == 0;
    v26 = v25 >> 3;
    if (v11)
      *(_QWORD *)&buf[8] = 0xCCCCCCCCCCCCCCCDLL * v26;
    else
      sub_100249B0C(buf, 0, 0xCCCCCCCCCCCCCCCDLL * v26, v23, &v31);
    if (buf == v6)
    {
      if (*(_QWORD *)&buf[16])
        operator delete(*(void **)buf);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
      v27 = *(void **)(a1 + 24);
      if (v27)
        operator delete(v27);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)buf;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&buf[8];
    }
    sub_100249DA0((char **)v6);
    if (qword_100417ED8 == -1)
    {
      v28 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_34:
        a3[1] = *a3;
        return a1;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF160);
      v28 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_34;
    }
    v29 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "constructed in-memory map of iBeacon aprssimap byte offsets , number of entries, %zu", buf, 0xCu);
    goto LABEL_34;
  }
  return a1;
}

void sub_100096C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  void **v14;

  if (a13)
  {
    operator delete(__p);
    if (!*(_QWORD *)(v13 + 40))
    {
LABEL_3:
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!*(_QWORD *)(v13 + 40))
  {
    goto LABEL_3;
  }
  operator delete(*v14);
  if (!*(_QWORD *)(v13 + 16))
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100096CA8(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char v24;
  BOOL v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  __int16 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  BOOL v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  signed int v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unint64_t v61;
  unint64_t v62;
  signed int v63;
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = (char *)v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = (unsigned int *)v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9) >> 1);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v26 = a2 - 10;
        v27 = *(unsigned int *)v9 | ((unint64_t)*((unsigned __int16 *)v9 + 2) << 32);
        v28 = *(unsigned int *)(a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
        if (v27 > v28 || v28 <= v27 && *((_DWORD *)a2 - 1) < *(_DWORD *)(v9 + 6))
        {
          v71 = *((_WORD *)v9 + 4);
          v68 = *(_QWORD *)v9;
          v29 = *(_QWORD *)v26;
          *((_WORD *)v9 + 4) = *((_WORD *)a2 - 1);
          *(_QWORD *)v9 = v29;
          *(_QWORD *)v26 = v68;
          *((_WORD *)a2 - 1) = v71;
        }
        return result;
      case 3uLL:
        return sub_100244124((unsigned int *)v9, (unsigned int *)(v9 + 10), (unsigned int *)(a2 - 10));
      case 4uLL:
        v30 = (uint64_t *)(v9 + 10);
        v31 = (uint64_t *)(v9 + 20);
        result = sub_100244124((unsigned int *)v9, (unsigned int *)(v9 + 10), (unsigned int *)v9 + 5);
        v32 = a2 - 10;
        v33 = *((unsigned int *)v9 + 5) | ((unint64_t)*((unsigned __int16 *)v9 + 12) << 32);
        v34 = *(unsigned int *)(a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
        if (v33 > v34 || v34 <= v33 && *((_DWORD *)a2 - 1) < *(_DWORD *)(v9 + 26))
        {
          v35 = *((_WORD *)v9 + 14);
          v36 = *v31;
          v37 = *((_WORD *)a2 - 1);
          *v31 = *(_QWORD *)v32;
          *((_WORD *)v9 + 14) = v37;
          *(_QWORD *)v32 = v36;
          *((_WORD *)a2 - 1) = v35;
          v38 = *(unsigned int *)(v9 + 10) | ((unint64_t)*((unsigned __int16 *)v9 + 7) << 32);
          v39 = *((unsigned int *)v9 + 5) | ((unint64_t)*((unsigned __int16 *)v9 + 12) << 32);
          if (v38 > v39 || v39 <= v38 && *(_DWORD *)(v9 + 26) < *((_DWORD *)v9 + 4))
          {
            v40 = *((_WORD *)v9 + 9);
            v41 = *v30;
            *v30 = *v31;
            *((_WORD *)v9 + 9) = *((_WORD *)v9 + 14);
            *v31 = v41;
            *((_WORD *)v9 + 14) = v40;
            v42 = *(unsigned int *)v9 | ((unint64_t)*((unsigned __int16 *)v9 + 2) << 32);
            v43 = *(unsigned int *)(v9 + 10) | ((unint64_t)*((unsigned __int16 *)v9 + 7) << 32);
            if (v42 > v43 || v43 <= v42 && *((_DWORD *)v9 + 4) < *(_DWORD *)(v9 + 6))
            {
              v72 = *((_WORD *)v9 + 4);
              v69 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v30;
              *((_WORD *)v9 + 4) = *((_WORD *)v9 + 9);
              *v30 = v69;
              *((_WORD *)v9 + 9) = v72;
            }
          }
        }
        return result;
      case 5uLL:
        return sub_100244A54((unsigned int *)v9, (unsigned int *)(v9 + 10), (unsigned int *)v9 + 5, (unsigned int *)(v9 + 30), (unsigned int *)(a2 - 10));
      default:
        if (v12 > 239)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
            {
              v57 = (v13 - 2) >> 1;
              v58 = v57 + 1;
              v59 = (unsigned int *)&v9[10 * v57];
              do
              {
                sub_100244D38((uint64_t)v9, a3, v13, v59);
                v59 = (unsigned int *)((char *)v59 - 10);
                --v58;
              }
              while (v58);
              return (uint64_t)sub_100244EF4(v9, a2);
            }
            return result;
          }
          v14 = v13 >> 1;
          v15 = (unsigned int *)&v9[10 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x501)
          {
            sub_100244124(v15, (unsigned int *)v9, (unsigned int *)(a2 - 10));
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_100244124((unsigned int *)v9, v15, (unsigned int *)(a2 - 10));
            v16 = 10 * v14;
            v17 = (unsigned int *)&v9[10 * v14 - 10];
            sub_100244124((unsigned int *)(v9 + 10), v17, (unsigned int *)a2 - 5);
            v18 = (unsigned int *)(v9 + 20);
            v19 = (unsigned int *)&v9[v16 + 10];
            sub_100244124(v18, v19, (unsigned int *)(a2 - 30));
            sub_100244124(v17, v15, v19);
            v70 = *((_WORD *)v8 + 4);
            v67 = *(_QWORD *)v8;
            v20 = *(_QWORD *)v15;
            *((_WORD *)v8 + 4) = *((_WORD *)v15 + 4);
            *(_QWORD *)v8 = v20;
            *((_WORD *)v15 + 4) = v70;
            *(_QWORD *)v15 = v67;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v21 = *v8 | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 32);
          v22 = *(unsigned int *)((char *)v8 - 10) | ((unint64_t)*((unsigned __int16 *)v8 - 3) << 32);
          if (v21 <= v22 && (v22 > v21 || (int)*(v8 - 1) >= *(int *)((char *)v8 + 6)))
          {
            result = (uint64_t)sub_100244334(v8, (unsigned int *)a2);
            v9 = (char *)result;
            goto LABEL_19;
          }
LABEL_14:
          v23 = (unsigned int *)sub_1002444DC(v8, (unint64_t)a2);
          if ((v24 & 1) == 0)
            goto LABEL_17;
          v25 = sub_100244680(v8, v23);
          v9 = (char *)v23 + 10;
          result = sub_100244680((unsigned int *)((char *)v23 + 10), (unsigned int *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_17:
            result = sub_100096CA8(v8, v23, a3, -v11, a5 & 1);
            v9 = (char *)v23 + 10;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (char *)v23;
          if (v25)
            return result;
          goto LABEL_2;
        }
        v44 = v9 + 10;
        v46 = v9 == a2 || v44 == a2;
        if ((a5 & 1) != 0)
        {
          if (v46)
            return result;
          v47 = 0;
          v48 = v9;
LABEL_45:
          v50 = v48;
          v48 = v44;
          v51 = *(unsigned int *)v50 | ((unint64_t)*((unsigned __int16 *)v50 + 2) << 32);
          v52 = *(unsigned int *)(v50 + 10) | ((unint64_t)*((unsigned __int16 *)v50 + 7) << 32);
          if (v51 <= v52)
          {
            if (v52 > v51)
              goto LABEL_44;
            v53 = *((_DWORD *)v50 + 4);
            if (v53 >= *(_DWORD *)(v50 + 6))
              goto LABEL_44;
          }
          else
          {
            v53 = *((_DWORD *)v50 + 4);
          }
          *(_QWORD *)v48 = *(_QWORD *)v50;
          *((_WORD *)v48 + 4) = *((_WORD *)v50 + 4);
          v49 = v9;
          if (v50 == v9)
            goto LABEL_43;
          v54 = v47;
          while (1)
          {
            v55 = &v9[v54];
            v56 = *(unsigned int *)&v9[v54 - 10] | ((unint64_t)*(unsigned __int16 *)&v9[v54 - 6] << 32);
            if (v56 <= v52)
            {
              if (v52 > v56)
              {
                v49 = &v9[v54];
LABEL_43:
                *(_DWORD *)v49 = v52;
                *((_WORD *)v49 + 2) = WORD2(v52);
                *(_DWORD *)(v49 + 6) = v53;
LABEL_44:
                v44 = v48 + 10;
                v47 += 10;
                if (v48 + 10 == a2)
                  return result;
                goto LABEL_45;
              }
              if (v53 >= *(_DWORD *)&v9[v54 - 4])
              {
                v49 = v50;
                goto LABEL_43;
              }
            }
            v50 -= 10;
            *(_QWORD *)v55 = *(_QWORD *)&v9[v54 - 10];
            *((_WORD *)v55 + 4) = *(_WORD *)&v9[v54 - 2];
            v54 -= 10;
            if (!v54)
            {
              v49 = v9;
              goto LABEL_43;
            }
          }
        }
        if (!v46)
        {
          while (1)
          {
            v60 = v8;
            v8 = (unsigned int *)v44;
            v61 = *v60 | ((unint64_t)*((unsigned __int16 *)v60 + 2) << 32);
            v62 = *(unsigned int *)((char *)v60 + 10) | ((unint64_t)*((unsigned __int16 *)v60 + 7) << 32);
            if (v61 > v62)
              break;
            if (v62 <= v61)
            {
              v63 = v60[4];
              if (v63 < *(int *)((char *)v60 + 6))
                goto LABEL_75;
            }
LABEL_70:
            v44 = (char *)v8 + 10;
            if ((char *)v8 + 10 == a2)
              return result;
          }
          v63 = v60[4];
          do
          {
            do
            {
LABEL_75:
              v64 = v60;
              *(_QWORD *)((char *)v60 + 10) = *(_QWORD *)v60;
              *((_WORD *)v60 + 9) = *((_WORD *)v60 + 4);
              v65 = *(unsigned int *)((char *)v60 - 10);
              v60 = (unsigned int *)((char *)v60 - 10);
              v66 = v65 | ((unint64_t)*((unsigned __int16 *)v64 - 3) << 32);
            }
            while (v66 > v62);
          }
          while (v62 <= v66 && v63 < (int)*(v64 - 1));
          *v64 = v62;
          *((_WORD *)v64 + 2) = WORD2(v62);
          *(unsigned int *)((char *)v64 + 6) = v63;
          goto LABEL_70;
        }
        return result;
    }
  }
}

void sub_10009734C(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;

  v6 = a1[1];
  v7 = (unint64_t)a1[2];
  if (0xCCCCCCCCCCCCCCCLL - v7 < (unint64_t)&v6[a3 - v7])
    goto LABEL_25;
  v9 = v7 >> 61;
  v10 = 8 * v7;
  if (v9 > 4)
    v11 = -1;
  else
    v11 = v10;
  v12 = v10 / 5;
  if (v9)
    v12 = v11;
  v13 = (unint64_t)&v6[a3];
  if (v12 >= 0xCCCCCCCCCCCCCCCLL)
    v12 = 0xCCCCCCCCCCCCCCCLL;
  v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0xCCCCCCCCCCCCCCCLL)
LABEL_25:
    sub_100245110((uint64_t)"get_next_capacity, allocator's max size reached");
  v18 = *a1;
  v19 = (char *)operator new(10 * v14);
  v20 = v19;
  v22 = *a1;
  v21 = a1[1];
  v23 = v19;
  if (*a1)
  {
    v23 = v19;
    if (v22 != a2)
    {
      memmove(v19, v22, a2 - v22);
      v23 = &v20[a2 - v22];
    }
  }
  if (a3)
  {
    v24 = a3;
    v25 = v23;
    do
    {
      v26 = *a4;
      *((_WORD *)v25 + 2) = *((_WORD *)a4 + 2);
      *(_DWORD *)v25 = v26;
      *(_DWORD *)(v25 + 6) = *(int *)((char *)a4 + 6);
      v25 += 10;
      a4 = (int *)((char *)a4 + 10);
      --v24;
    }
    while (v24);
  }
  if (a2)
  {
    v27 = &v22[10 * (_QWORD)v21];
    if (v27 != a2)
      memmove(&v23[10 * a3], a2, v27 - a2);
  }
  if (v22)
  {
    operator delete(v22);
    v21 = a1[1];
  }
  *a1 = v20;
  a1[1] = &v21[a3];
  a1[2] = (char *)v14;
  *a5 = &v20[a2 - v18];
}

void sub_100099224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *a52)
{
  uint64_t v52;

  sub_10009DC84(v52 - 240);

  _Unwind_Resume(a1);
}

void sub_100099528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

