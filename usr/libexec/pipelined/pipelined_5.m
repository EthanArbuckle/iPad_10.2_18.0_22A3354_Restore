uint64_t *sub_1002503B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

uint64_t sub_100250778()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002507D4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100250830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  BOOL v19;
  int v21;
  int v22;
  int v23;
  int v24;
  void *v25[2];
  void *__p[2];
  char v27;

  *(_QWORD *)a1 = off_1003FF540;
  v6 = a1 + 8;
  v24 = sub_1001D201C(a2);
  v23 = sub_1002D41AC(a2);
  v22 = sub_1002D41B8(a2);
  v21 = sub_1002D41C4(a2);
  sub_100072950(__p, &v22, &v21);
  sub_10026C888(v6, &v24, &v23, __p);
  *(double *)(a1 + 24) = sub_10023E0A4(a3, a2);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = sub_1000F7018(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 56), *(void **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    v11 = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)(a1 + 56) = v11;
  }
  *(_QWORD *)(a1 + 80) = 0;
  v12 = sub_1000966BC();
  v13 = v12;
  v14 = atomic_load((unsigned __int8 *)v12 + 20);
  if ((v14 & 1) != 0 || *((_BYTE *)v12 + 16))
  {
    if (*((_BYTE *)v12 + 17))
      goto LABEL_12;
  }
  else
  {
    v15 = sub_1000AC110((uint64_t)v12, (_BYTE *)v12 + 9);
    *((_BYTE *)v13 + 17) = v15;
    *((_BYTE *)v13 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v13 + 20);
    if (v15)
      goto LABEL_12;
  }
  if (*(_DWORD *)(sub_100095C10(a2) + 24) == 1)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v27 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v25);
  }
LABEL_12:
  v16 = sub_100096748();
  v17 = v16;
  v18 = atomic_load((unsigned __int8 *)v16 + 20);
  if ((v18 & 1) != 0 || *((_BYTE *)v16 + 16))
  {
    if (*((_BYTE *)v16 + 17))
      return a1;
  }
  else
  {
    v19 = sub_1000AC110((uint64_t)v16, (_BYTE *)v16 + 9);
    *((_BYTE *)v17 + 17) = v19;
    *((_BYTE *)v17 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v17 + 20);
    if (v19)
      return a1;
  }
  if (*(_DWORD *)(sub_100095C10(a2) + 24) == 2)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v27 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v25);
  }
  return a1;
}

void sub_100250A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 79) < 0)
  {
    operator delete(*v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100250B0C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1003FF540;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10025876C(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_100250B6C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1003FF540;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10025876C(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  operator delete();
}

BOOL sub_100250BCC(uint64_t a1)
{
  int **v1;
  _BOOL8 result;
  unint64_t *v4;
  int v5;
  int v6;
  NSObject *v7;
  _DWORD v8[2];

  v1 = (int **)(a1 + 80);
  if (*(_QWORD *)(a1 + 80))
    return 1;
  v4 = (unint64_t *)(a1 + 56);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v5 = sub_10026DED8((unsigned __int8 *)(a1 + 56), (unsigned __int8 *)*(unsigned __int8 *)(a1 + 79), v1);
    if (v5)
      goto LABEL_6;
LABEL_10:
    if (*(char *)(a1 + 79) < 0)
    {
      **(_BYTE **)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 79) = 0;
    }
    sub_100250D2C(v4);
    *(double *)(a1 + 88) = sub_10026F8B0(*(_QWORD *)(a1 + 80));
    return 1;
  }
  v5 = sub_10026DED8(*(unsigned __int8 **)(a1 + 56), *(unsigned __int8 **)(a1 + 64), v1);
  if (!v5)
    goto LABEL_10;
LABEL_6:
  v6 = v5;
  if (qword_100417ED8 == -1)
  {
    v7 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_8:
      v8[0] = 67109120;
      v8[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Couldn't deserialize rssi data: %d", (uint8_t *)v8, 8u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1003FF5B0);
    v7 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_8;
  }
  return result;
}

void sub_100250D2C(unint64_t *__dst)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unsigned __int8 *v6;
  char v7;
  unint64_t v8;
  void *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *((unsigned __int8 *)__dst + 23);
  if ((*((char *)__dst + 23) & 0x80000000) == 0)
  {
    if (v2 < 0x17)
      return;
    v3 = v2 | 7;
    if ((v2 | 7) == 0x17)
    {
      v4 = v2 & 0xF8;
      if (v4 <= 0xE)
      {
        v5 = v4 + 9;
        v6 = (unsigned __int8 *)*__dst;
        v7 = 1;
        v8 = *((unsigned __int8 *)__dst + 23);
        v9 = __dst;
        v10 = 1;
        v11 = v2 + 1;
LABEL_21:
        memmove(v9, v6, v11);
LABEL_22:
        if (v10)
        {
          operator delete(v6);
          if ((v7 & 1) != 0)
            goto LABEL_24;
        }
        else if ((v7 & 1) != 0)
        {
LABEL_24:
          *((_BYTE *)__dst + 23) = v8 & 0x7F;
          return;
        }
        __dst[1] = v8;
        __dst[2] = v5 | 0x8000000000000000;
        *__dst = (unint64_t)v9;
        return;
      }
      v3 = v4 + 8;
    }
    v8 = *((unsigned __int8 *)__dst + 23);
    v5 = v3 + 1;
    goto LABEL_17;
  }
  v12 = __dst[1];
  if (v12 < 0x17)
  {
    if ((__dst[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x17)
      return;
    v13 = 22;
    goto LABEL_13;
  }
  v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v13 = v12 | 7;
  if (v13 != (__dst[2] & 0x7FFFFFFFFFFFFFFFLL) - 1)
  {
    if (v13 >= 0x17)
    {
      v8 = __dst[1];
      v5 = v13 + 1;
LABEL_17:
      v9 = operator new(v5);
      v7 = 0;
      if ((v2 & 0x80) == 0)
      {
        v10 = 0;
        v6 = (unsigned __int8 *)__dst;
        v11 = v2 + 1;
        goto LABEL_21;
      }
      v12 = __dst[1];
LABEL_20:
      v6 = (unsigned __int8 *)*__dst;
      v10 = 1;
      v11 = v12 + 1;
      if (v12 == -1)
        goto LABEL_22;
      goto LABEL_21;
    }
LABEL_13:
    v5 = v13 + 1;
    v7 = 1;
    v8 = __dst[1];
    v9 = __dst;
    goto LABEL_20;
  }
}

void sub_100250ED8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x100250E90);
}

BOOL sub_100250EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  _BOOL8 result;
  int v8;
  int v9;
  int v10;
  double v11;
  __n64 v12;
  double v13;

  v5 = sub_10026C88C((_DWORD *)(a1 + 8), a2);
  if (v5 == -1)
    return 0;
  v6 = v5;
  result = sub_100250BCC(a1);
  if (result)
  {
    v8 = *(_DWORD *)(a1 + 20);
    v9 = v6 / v8;
    v10 = v6 % v8;
    v11 = sub_10026F810(*(_DWORD **)(a1 + 80), v10, v9);
    v12.n64_u64[0] = sub_10026F86C(*(_DWORD **)(a1 + 80), v10, v9).n64_u64[0];
    result = v12.n64_f64[0] > 0.0;
    if (a3)
    {
      v13 = NAN;
      if (v12.n64_f64[0] > 0.0)
        v13 = v11;
      *(double *)(a3 + 8) = v13;
      *(double *)(a3 + 16) = v12.n64_f64[0];
    }
  }
  return result;
}

BOOL sub_100250FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  double v29;
  int v30;
  double v31;
  int v32;
  double v33;

  result = sub_100250BCC(a1);
  if (result)
  {
    sub_1001D3E20(a2, (_DWORD *)(a1 + 8), &v27);
    v7 = *((double *)&v27 + 1);
    v8 = 0.0;
    if (*((double *)&v27 + 1) == 0.0 || (_DWORD)v27 == -1)
    {
      v9 = 0.0;
      v10 = 0.0;
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 20);
      v16 = (int)v27 / v15;
      v17 = (int)v27 % v15;
      v9 = 0.0;
      v10 = 0.0;
      if (sub_10026F86C(*(_DWORD **)(a1 + 80), (int)v27 % v15, (int)v27 / v15).n64_f64[0] != 0.0)
      {
        v9 = v7 * sub_10026F810(*(_DWORD **)(a1 + 80), v17, v16) + 0.0;
        v10 = v7 * sub_10026F86C(*(_DWORD **)(a1 + 80), v17, v16).n64_f64[0] + 0.0;
        v8 = v7 + 0.0;
      }
    }
    v11 = v29;
    if (v29 != 0.0 && v28 != -1)
    {
      v18 = *(_DWORD *)(a1 + 20);
      v19 = v28 / v18;
      v20 = v28 % v18;
      if (sub_10026F86C(*(_DWORD **)(a1 + 80), v28 % v18, v28 / v18).n64_f64[0] != 0.0)
      {
        v9 = v9 + v11 * sub_10026F810(*(_DWORD **)(a1 + 80), v20, v19);
        v10 = v10 + v11 * sub_10026F86C(*(_DWORD **)(a1 + 80), v20, v19).n64_f64[0];
        v8 = v8 + v11;
      }
    }
    v12 = v31;
    if (v31 != 0.0 && v30 != -1)
    {
      v21 = *(_DWORD *)(a1 + 20);
      v22 = v30 / v21;
      v23 = v30 % v21;
      if (sub_10026F86C(*(_DWORD **)(a1 + 80), v30 % v21, v30 / v21).n64_f64[0] != 0.0)
      {
        v9 = v9 + v12 * sub_10026F810(*(_DWORD **)(a1 + 80), v23, v22);
        v10 = v10 + v12 * sub_10026F86C(*(_DWORD **)(a1 + 80), v23, v22).n64_f64[0];
        v8 = v8 + v12;
      }
    }
    v13 = v33;
    if (v33 != 0.0 && v32 != -1)
    {
      v24 = *(_DWORD *)(a1 + 20);
      v25 = v32 / v24;
      v26 = v32 % v24;
      if (sub_10026F86C(*(_DWORD **)(a1 + 80), v32 % v24, v32 / v24).n64_f64[0] != 0.0)
      {
        v9 = v9 + v13 * sub_10026F810(*(_DWORD **)(a1 + 80), v26, v25);
        v10 = v10 + v13 * sub_10026F86C(*(_DWORD **)(a1 + 80), v26, v25).n64_f64[0];
        v8 = v8 + v13;
      }
    }
    result = v8 > 0.0;
    if (a3)
    {
      if (v8 <= 0.0)
      {
        *(_QWORD *)(a3 + 8) = 0x7FF4000000000000;
        v14 = 0.0;
      }
      else
      {
        *(double *)(a3 + 8) = v9 / v8;
        v14 = v10 / v8;
      }
      *(double *)(a3 + 16) = v14;
    }
  }
  return result;
}

float sub_1002511F0(uint64_t a1, int a2)
{
  sub_100250BCC(a1);
  return sub_10026F810(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20));
}

float sub_10025122C(uint64_t a1, int a2)
{
  sub_100250BCC(a1);
  return sub_10026F86C(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20)).n64_f64[0];
}

uint64_t sub_100251268(uint64_t a1)
{
  return a1 + 24;
}

void sub_100251270(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_10025129C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002512F8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100251354()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002513B0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10025140C(uint64_t a1@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t **v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  int8x8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  __int128 v41;
  int v42;
  unsigned int v43;

  *a3 = 0;
  a3[1] = 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  a3[2] = 0;
  v39 = v5;
  v38 = v5 + 40 * v6;
  sub_100256E6C(&v39, &v38, a2, (uint64_t *)&v40);
  v7 = v40;
  v8 = (_DWORD *)v41;
  if (v40 != (_DWORD *)v41)
  {
    v9 = 0;
    v37 = (int8x8_t *)(a1 + 48);
    while (1)
    {
      v12 = v7 + 2;
      v11 = *v7;
      v13 = (int)*v7 >> 31;
      if (v11 >> 31 == v11)
      {
        *(_QWORD *)&v41 = *v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        v42 = v7[6];
        v41 = v14;
      }
      v15 = v13 ^ v11;
      v16 = v7[8];
      LODWORD(v40) = v15;
      v43 = v16;
      v17 = sub_1002588D4(v37, &v43);
      v18 = v17;
      v19 = (unint64_t)a3[2];
      if ((unint64_t)v9 < v19)
      {
        *(_QWORD *)v9 = v17;
        v10 = (uint64_t)(v9 + 8);
        goto LABEL_4;
      }
      v20 = *a3;
      v21 = v9 - *a3;
      v22 = v21 >> 3;
      v23 = (v21 >> 3) + 1;
      if (v23 >> 61)
        sub_1000D02C0();
      v24 = v19 - (_QWORD)v20;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
          sub_1000CDEB8();
        v26 = operator new(8 * v25);
        v27 = (uint64_t **)&v26[8 * v22];
        *v27 = v18;
        v10 = (uint64_t)(v27 + 1);
        if (v9 == v20)
        {
LABEL_18:
          *a3 = (char *)v27;
          a3[1] = (char *)v10;
          a3[2] = &v26[8 * v25];
          if (!v9)
            goto LABEL_4;
LABEL_25:
          operator delete(v9);
          goto LABEL_4;
        }
      }
      else
      {
        v26 = 0;
        v27 = (uint64_t **)(8 * v22);
        *(_QWORD *)(8 * v22) = v18;
        v10 = 8 * v22 + 8;
        if (v9 == v20)
          goto LABEL_18;
      }
      v28 = v9 - 8 - v20;
      if (v28 < 0x168)
      {
        v29 = v9;
        goto LABEL_23;
      }
      if (&v26[v21 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[v21 - 8])
        break;
      if (&v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
      {
        v29 = v9;
        goto LABEL_23;
      }
      if ((unint64_t)(v9 - v26 - v21) < 0x20)
      {
        v29 = v9;
        goto LABEL_23;
      }
      v31 = (v28 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v9[-v32];
      v27 = (uint64_t **)((char *)v27 - v32);
      v33 = &v26[8 * v22 - 16];
      v34 = (__int128 *)(v9 - 16);
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *v34;
        *(v33 - 1) = *(v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
LABEL_24:
      v9 = *a3;
      *a3 = (char *)v27;
      a3[1] = (char *)v10;
      a3[2] = &v26[8 * v25];
      if (v9)
        goto LABEL_25;
LABEL_4:
      a3[1] = (char *)v10;
      v7 += 10;
      v9 = (char *)v10;
      if (v7 == v8)
        return;
    }
    v29 = v9;
    do
    {
LABEL_23:
      v30 = (uint64_t *)*((_QWORD *)v29 - 1);
      v29 -= 8;
      *--v27 = v30;
    }
    while (v29 != v20);
    goto LABEL_24;
  }
}

void sub_1002516D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002516F8(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100251724(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t result;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;

  v6 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  v7 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
  if (v6 > v7
    || v7 <= v6
    && (v8 = sub_1000BC3F8((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)),
        v7 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32),
        v8))
  {
    v9 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v7 <= v9 && (v9 > v7 || !sub_1000BC3F8((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6))))
    {
      v23 = *((_WORD *)a1 + 4);
      v24 = *(_QWORD *)a1;
      v25 = *((_WORD *)a2 + 4);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_WORD *)a1 + 4) = v25;
      *(_QWORD *)a2 = v24;
      *((_WORD *)a2 + 4) = v23;
      v26 = v24 | ((unint64_t)WORD2(v24) << 32);
      v27 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v26 > v27 || v27 <= v26 && sub_1000BC3F8((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)))
      {
        v28 = *((_WORD *)a2 + 4);
        v29 = *(_QWORD *)a2;
        v30 = *((_WORD *)a3 + 4);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *((_WORD *)a2 + 4) = v30;
        *(_QWORD *)a3 = v29;
        *((_WORD *)a3 + 4) = v28;
        return 2;
      }
      return 1;
    }
    v10 = *((_WORD *)a1 + 4);
    v11 = *(_QWORD *)a1;
    v12 = *((_WORD *)a3 + 4);
    *(_QWORD *)a1 = *(_QWORD *)a3;
    *((_WORD *)a1 + 4) = v12;
    *(_QWORD *)a3 = v11;
    *((_WORD *)a3 + 4) = v10;
    return 1;
  }
  else
  {
    v14 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v7 > v14)
      goto LABEL_8;
    if (v14 > v7)
      return 0;
    result = sub_1000BC3F8((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6));
    if ((_DWORD)result)
    {
LABEL_8:
      v15 = *((_WORD *)a2 + 4);
      v16 = *(_QWORD *)a2;
      v17 = *((_WORD *)a3 + 4);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_WORD *)a2 + 4) = v17;
      *(_QWORD *)a3 = v16;
      *((_WORD *)a3 + 4) = v15;
      v18 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v19 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v18 > v19 || v19 <= v18 && sub_1000BC3F8((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)))
      {
        v20 = *((_WORD *)a1 + 4);
        v21 = *(_QWORD *)a1;
        v22 = *((_WORD *)a2 + 4);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_WORD *)a1 + 4) = v22;
        *(_QWORD *)a2 = v21;
        *((_WORD *)a2 + 4) = v20;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

unsigned int *sub_10025196C(uint64_t *a1, unsigned int *a2)
{
  unsigned int *v2;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t i;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;

  v2 = a2;
  v26 = *a1;
  v27 = *((_WORD *)a1 + 4);
  v4 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
  v5 = v26 & 0xFFFFFFFFFFFFLL;
  if (v4 <= (v26 & 0xFFFFFFFFFFFFuLL))
  {
    if (v5 > v4 || !sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), a2 - 1))
    {
      v6 = (unsigned int *)((char *)a1 + 10);
      if ((char *)a1 + 10 < (char *)v2)
      {
        do
        {
          v9 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
          v10 = v26 | ((unint64_t)WORD2(v26) << 32);
          if (v9 > v10 || v10 <= v9 && sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6)))
            break;
          v6 = (unsigned int *)((char *)v6 + 10);
        }
        while (v6 < v2);
      }
      goto LABEL_17;
    }
    v5 = v26 | ((unint64_t)WORD2(v26) << 32);
  }
  v6 = (unsigned int *)((char *)a1 + 10);
  for (i = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
        i <= v5;
        i = v8 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32))
  {
    if (v5 <= i)
    {
      if (sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6)))
        break;
      v5 = v26 | ((unint64_t)WORD2(v26) << 32);
    }
    v8 = *(unsigned int *)((char *)v6 + 10);
    v6 = (unsigned int *)((char *)v6 + 10);
  }
LABEL_17:
  if (v6 < v2)
  {
    do
    {
      do
      {
        v2 = (unsigned int *)((char *)v2 - 10);
        v11 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
        v12 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      while (v11 > v12);
    }
    while (v12 <= v11 && sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v2 + 6)));
  }
  while (v6 < v2)
  {
    v13 = *(_QWORD *)v6;
    v29 = *((_WORD *)v6 + 4);
    v28 = v13;
    v14 = *(_QWORD *)v2;
    *((_WORD *)v6 + 4) = *((_WORD *)v2 + 4);
    *(_QWORD *)v6 = v14;
    v15 = v28;
    *((_WORD *)v2 + 4) = v29;
    *(_QWORD *)v2 = v15;
    v16 = *(unsigned int *)((char *)v6 + 10);
    v6 = (unsigned int *)((char *)v6 + 10);
    v17 = v16 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    v18 = v26 | ((unint64_t)WORD2(v26) << 32);
    while (v17 <= v18)
    {
      if (v18 <= v17)
      {
        if (sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6)))
          goto LABEL_30;
        v18 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      v19 = *(unsigned int *)((char *)v6 + 10);
      v6 = (unsigned int *)((char *)v6 + 10);
      v17 = v19 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    }
    do
    {
      do
      {
LABEL_30:
        v2 = (unsigned int *)((char *)v2 - 10);
        v20 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
        v21 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      while (v20 > v21);
    }
    while (v21 <= v20 && sub_1000BC3F8((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v2 + 6)));
  }
  v22 = (uint64_t *)((char *)v6 - 10);
  if ((uint64_t *)((char *)v6 - 10) != a1)
  {
    v23 = *v22;
    *((_WORD *)a1 + 4) = *((_WORD *)v6 - 1);
    *a1 = v23;
  }
  v24 = v26;
  *((_WORD *)v6 - 1) = v27;
  *v22 = v24;
  return v6;
}

char *sub_100251C08(char *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;

  v4 = 0;
  v30 = *(_QWORD *)a1;
  v31 = *((_WORD *)a1 + 4);
  while (1)
  {
    v5 = v30 | ((unint64_t)WORD2(v30) << 32);
    v6 = *(unsigned int *)&a1[v4 + 10] | ((unint64_t)*(unsigned __int16 *)&a1[v4 + 14] << 32);
    if (v5 <= v6 && (v6 > v5 || !sub_1000BC3F8(&a1[v4 + 16], (uint64_t *)((char *)&v30 + 6))))
      break;
    v4 += 10;
  }
  v7 = &a1[v4];
  v8 = (unint64_t)&a1[v4 + 10];
  if (v4)
  {
    v10 = *(_DWORD *)(a2 - 10);
    a2 -= 10;
    v9 = v10;
    v11 = v30 | ((unint64_t)WORD2(v30) << 32);
    while (1)
    {
      v13 = v9 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
      if (v11 > v13)
        break;
      if (v13 <= v11)
      {
        if (sub_1000BC3F8((_DWORD *)(a2 + 6), (uint64_t *)((char *)&v30 + 6)))
          break;
        v11 = v30 | ((unint64_t)WORD2(v30) << 32);
      }
      v12 = *(_DWORD *)(a2 - 10);
      a2 -= 10;
      v9 = v12;
    }
  }
  else
  {
LABEL_19:
    if (v8 < a2)
    {
      do
      {
        v14 = *(_DWORD *)(a2 - 10);
        a2 -= 10;
        v15 = v30 | ((unint64_t)WORD2(v30) << 32);
        v16 = v14 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32);
        if (v15 > v16)
          break;
        if (v16 > v15)
          goto LABEL_19;
        v17 = sub_1000BC3F8((_DWORD *)(a2 + 6), (uint64_t *)((char *)&v30 + 6));
        if (v8 >= a2)
          break;
      }
      while (!v17);
    }
  }
  if (v8 < a2)
  {
    v18 = &a1[v4 + 10];
    v19 = a2;
    do
    {
      v20 = *(_QWORD *)v18;
      v33 = *((_WORD *)v18 + 4);
      v32 = v20;
      v21 = *(_QWORD *)v19;
      *((_WORD *)v18 + 4) = *(_WORD *)(v19 + 8);
      *(_QWORD *)v18 = v21;
      v22 = v32;
      *(_WORD *)(v19 + 8) = v33;
      *(_QWORD *)v19 = v22;
      while (1)
      {
        do
        {
          v18 += 10;
          v23 = v30 | ((unint64_t)WORD2(v30) << 32);
          v24 = *(unsigned int *)v18 | ((unint64_t)*((unsigned __int16 *)v18 + 2) << 32);
        }
        while (v23 > v24);
        if (v24 > v23)
          break;
        if (!sub_1000BC3F8(v18 + 6, (uint64_t *)((char *)&v30 + 6)))
          goto LABEL_27;
      }
      do
      {
LABEL_28:
        v25 = *(_DWORD *)(v19 - 10);
        v19 -= 10;
        v26 = v25 | ((unint64_t)*(unsigned __int16 *)(v19 + 4) << 32);
        if (v23 > v26)
          goto LABEL_22;
      }
      while (v26 > v23);
      if (!sub_1000BC3F8((_DWORD *)(v19 + 6), (uint64_t *)((char *)&v30 + 6)))
      {
LABEL_27:
        v23 = v30 | ((unint64_t)WORD2(v30) << 32);
        goto LABEL_28;
      }
LABEL_22:
      ;
    }
    while ((unint64_t)v18 < v19);
    v7 = v18 - 10;
  }
  if (v7 != a1)
  {
    v27 = *(_QWORD *)v7;
    *((_WORD *)a1 + 4) = *((_WORD *)v7 + 4);
    *(_QWORD *)a1 = v27;
  }
  v28 = v30;
  *((_WORD *)v7 + 4) = v31;
  *(_QWORD *)v7 = v28;
  return v7;
}

BOOL sub_100251E48(unsigned int *a1, unsigned int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_QWORD *)((char *)a2 - 10);
      v7 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v8 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v7 > v8)
        goto LABEL_5;
      if (v8 <= v7)
      {
        if (!sub_1000BC3F8(a2 - 1, (unsigned int *)((char *)a1 + 6)))
          return 1;
LABEL_5:
        v9 = *((_WORD *)a1 + 4);
        v10 = *(_QWORD *)a1;
        v11 = *((_WORD *)a2 - 1);
        *(_QWORD *)a1 = *v6;
        *((_WORD *)a1 + 4) = v11;
        *v6 = v10;
        *((_WORD *)a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_100251724(a1, (unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a2 - 10));
      return 1;
    case 4uLL:
      sub_1002520DC(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a2 - 10));
      return 1;
    case 5uLL:
      sub_10025223C(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a1 + 30), (unsigned int *)((char *)a2 - 10));
      return 1;
    default:
      v12 = a1 + 5;
      sub_100251724(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      v13 = (unsigned int *)((char *)a1 + 30);
      if ((unsigned int *)((char *)a1 + 30) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (2)
  {
    v18 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
    v19 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
    if (v18 <= v19
      && (v19 > v18 || !sub_1000BC3F8((unsigned int *)((char *)v13 + 6), (unsigned int *)((char *)v12 + 6))))
    {
      goto LABEL_10;
    }
    v23 = *(_QWORD *)v13;
    v24 = *((_WORD *)v13 + 4);
    *(_QWORD *)v13 = *(_QWORD *)v12;
    *((_WORD *)v13 + 4) = *((_WORD *)v12 + 4);
    v16 = (uint64_t)a1;
    if (v12 == a1)
      goto LABEL_9;
    v20 = v14;
    while (1)
    {
      v21 = *(unsigned int *)((char *)a1 + v20 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v20 + 14) << 32);
      v22 = v23 | ((unint64_t)WORD2(v23) << 32);
      if (v21 > v22)
        goto LABEL_16;
      if (v22 > v21)
        break;
      if (!sub_1000BC3F8((uint64_t *)((char *)&v23 + 6), (unsigned int *)((char *)a1 + v20 + 16)))
      {
        v16 = (uint64_t)a1 + v20 + 20;
        goto LABEL_9;
      }
LABEL_16:
      v12 = (unsigned int *)((char *)v12 - 10);
      *(_QWORD *)((char *)a1 + v20 + 20) = *(_QWORD *)((char *)a1 + v20 + 10);
      *(_WORD *)((char *)a1 + v20 + 28) = *(_WORD *)((char *)a1 + v20 + 18);
      v20 -= 10;
      if (v20 == -20)
      {
        v16 = (uint64_t)a1;
        goto LABEL_9;
      }
    }
    v16 = (uint64_t)v12;
LABEL_9:
    v17 = v23;
    *(_WORD *)(v16 + 8) = v24;
    *(_QWORD *)v16 = v17;
    if (++v15 == 8)
      return (unsigned int *)((char *)v13 + 10) == a2;
LABEL_10:
    v12 = v13;
    v14 += 10;
    v13 = (unsigned int *)((char *)v13 + 10);
    if (v13 != a2)
      continue;
    return 1;
  }
}

uint64_t sub_1002520DC(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;

  result = sub_100251724(a1, a2, a3);
  v9 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
  v10 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  if (v9 > v10
    || v10 <= v9
    && (result = sub_1000BC3F8((unsigned int *)((char *)a4 + 6), (unsigned int *)((char *)a3 + 6)), (_DWORD)result))
  {
    v11 = *((_WORD *)a3 + 4);
    v12 = *(_QWORD *)a3;
    v13 = *((_WORD *)a4 + 4);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_WORD *)a3 + 4) = v13;
    *(_QWORD *)a4 = v12;
    *((_WORD *)a4 + 4) = v11;
    v14 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
    v15 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    if (v14 > v15
      || v15 <= v14
      && (result = sub_1000BC3F8((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)), (_DWORD)result))
    {
      v16 = *((_WORD *)a2 + 4);
      v17 = *(_QWORD *)a2;
      v18 = *((_WORD *)a3 + 4);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_WORD *)a2 + 4) = v18;
      *(_QWORD *)a3 = v17;
      *((_WORD *)a3 + 4) = v16;
      v19 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      v20 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      if (v19 > v20
        || v20 <= v19
        && (result = sub_1000BC3F8((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)), (_DWORD)result))
      {
        v21 = *((_WORD *)a1 + 4);
        v22 = *(_QWORD *)a1;
        v23 = *((_WORD *)a2 + 4);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_WORD *)a1 + 4) = v23;
        *(_QWORD *)a2 = v22;
        *((_WORD *)a2 + 4) = v21;
      }
    }
  }
  return result;
}

uint64_t sub_10025223C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;

  result = sub_1002520DC(a1, a2, a3, a4);
  v11 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  v12 = *a5 | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 32);
  if (v11 > v12
    || v12 <= v11
    && (result = sub_1000BC3F8((unsigned int *)((char *)a5 + 6), (unsigned int *)((char *)a4 + 6)), (_DWORD)result))
  {
    v13 = *((_WORD *)a4 + 4);
    v14 = *(_QWORD *)a4;
    v15 = *((_WORD *)a5 + 4);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_WORD *)a4 + 4) = v15;
    *(_QWORD *)a5 = v14;
    *((_WORD *)a5 + 4) = v13;
    v16 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
    v17 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
    if (v16 > v17
      || v17 <= v16
      && (result = sub_1000BC3F8((unsigned int *)((char *)a4 + 6), (unsigned int *)((char *)a3 + 6)), (_DWORD)result))
    {
      v18 = *((_WORD *)a3 + 4);
      v19 = *(_QWORD *)a3;
      v20 = *((_WORD *)a4 + 4);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *((_WORD *)a3 + 4) = v20;
      *(_QWORD *)a4 = v19;
      *((_WORD *)a4 + 4) = v18;
      v21 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
      v22 = *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32);
      if (v21 > v22
        || v22 <= v21
        && (result = sub_1000BC3F8((unsigned int *)((char *)a3 + 6), (unsigned int *)((char *)a2 + 6)), (_DWORD)result))
      {
        v23 = *((_WORD *)a2 + 4);
        v24 = *(_QWORD *)a2;
        v25 = *((_WORD *)a3 + 4);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *((_WORD *)a2 + 4) = v25;
        *(_QWORD *)a3 = v24;
        *((_WORD *)a3 + 4) = v23;
        v26 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
        v27 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32);
        if (v26 > v27
          || v27 <= v26
          && (result = sub_1000BC3F8((unsigned int *)((char *)a2 + 6), (unsigned int *)((char *)a1 + 6)), (_DWORD)result))
        {
          v28 = *((_WORD *)a1 + 4);
          v29 = *(_QWORD *)a1;
          v30 = *((_WORD *)a2 + 4);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_WORD *)a1 + 4) = v30;
          *(_QWORD *)a2 = v29;
          *((_WORD *)a2 + 4) = v28;
        }
      }
    }
  }
  return result;
}

BOOL sub_10025240C(_BOOL8 result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v8;
  int64_t v9;
  int64_t v11;
  unsigned int *v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int16 v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v30 = v4;
    v31 = v5;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 1)))
    {
      v11 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 1)) | 1;
      v12 = (unsigned int *)(result + 10 * v11);
      v13 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2;
      if (v13 < a3)
      {
        v14 = *(unsigned int *)((char *)v12 + 10) | ((unint64_t)*((unsigned __int16 *)v12 + 7) << 32);
        v15 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
        if (v14 > v15 || v15 <= v14 && (result = sub_1000BC3F8((_DWORD *)(result + 10 * v11 + 6), v12 + 4)))
        {
          v12 = (unsigned int *)((char *)v12 + 10);
          v11 = v13;
        }
      }
      v16 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
      v17 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
      if (v16 <= v17
        && (v17 > v16 || !(result = sub_1000BC3F8((unsigned int *)((char *)v12 + 6), (unsigned int *)((char *)a4 + 6)))))
      {
        v28 = *(_QWORD *)a4;
        v29 = *((_WORD *)a4 + 4);
        v18 = *((_WORD *)v12 + 4);
        *(_QWORD *)a4 = *(_QWORD *)v12;
        *((_WORD *)a4 + 4) = v18;
        if (v9 >= v11)
        {
          while (1)
          {
            v22 = 2 * v11;
            v11 = (2 * v11) | 1;
            v19 = (unsigned int *)(v8 + 10 * v11);
            v23 = v22 + 2;
            if (v22 + 2 < a3)
            {
              v24 = *(unsigned int *)((char *)v19 + 10) | ((unint64_t)*((unsigned __int16 *)v19 + 7) << 32);
              v25 = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
              if (v24 > v25 || v25 <= v24 && (result = sub_1000BC3F8((_DWORD *)(v8 + 10 * v11 + 6), v19 + 4)))
              {
                v19 = (unsigned int *)((char *)v19 + 10);
                v11 = v23;
              }
            }
            v26 = v28 | ((unint64_t)WORD2(v28) << 32);
            v27 = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
            if (v26 > v27)
              break;
            if (v27 <= v26)
            {
              result = sub_1000BC3F8((unsigned int *)((char *)v19 + 6), (uint64_t *)((char *)&v28 + 6));
              if (result)
                break;
            }
            v21 = *(_QWORD *)v19;
            *((_WORD *)v12 + 4) = *((_WORD *)v19 + 4);
            *(_QWORD *)v12 = v21;
            v12 = v19;
            if (v9 < v11)
              goto LABEL_13;
          }
        }
        v19 = v12;
LABEL_13:
        v20 = v28;
        *((_WORD *)v19 + 4) = v29;
        *(_QWORD *)v19 = v20;
      }
    }
  }
  return result;
}

char *sub_100252630(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t v9;
  int64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  if (a4 >= 2)
  {
    v39 = v4;
    v40 = v5;
    v8 = result;
    v9 = 0;
    v35 = *(_QWORD *)result;
    v36 = *((_WORD *)result + 4);
    v10 = (unint64_t)(a4 - 2) >> 1;
    v11 = (unsigned int *)result;
    do
    {
      v13 = v11;
      v14 = v9 + 1;
      v11 = (unsigned int *)((char *)v11 + 10 * v9 + 10);
      v15 = 2 * v9;
      v9 = (2 * v9) | 1;
      v16 = v15 + 2;
      if (v15 + 2 < a4)
      {
        v17 = *(unsigned int *)((char *)v11 + 10) | ((unint64_t)*((unsigned __int16 *)v11 + 7) << 32);
        v18 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
        if (v17 > v18
          || v18 <= v17
          && (result = (char *)sub_1000BC3F8((unsigned int *)((char *)v13 + 10 * v14 + 6), v11 + 4), (_DWORD)result))
        {
          v11 = (unsigned int *)((char *)v11 + 10);
          v9 = v16;
        }
      }
      v12 = *(_QWORD *)v11;
      *((_WORD *)v13 + 4) = *((_WORD *)v11 + 4);
      *(_QWORD *)v13 = v12;
    }
    while (v9 <= v10);
    v19 = (uint64_t *)(a2 - 10);
    if (v11 == (unsigned int *)(a2 - 10))
    {
      v29 = v35;
      v30 = v36;
    }
    else
    {
      v20 = *v19;
      *((_WORD *)v11 + 4) = *(_WORD *)(a2 - 2);
      *(_QWORD *)v11 = v20;
      *v19 = v35;
      *(_WORD *)(a2 - 2) = v36;
      v21 = (char *)v11 - v8 + 10;
      if (v21 < 11)
        return result;
      v22 = v21 / 0xAuLL - 2;
      v23 = v22 >> 1;
      v24 = &v8[10 * (v22 >> 1)];
      v25 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
      v26 = *(unsigned int *)v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
      if (v25 <= v26)
      {
        if (v26 > v25)
          return result;
        result = (char *)sub_1000BC3F8(&v8[10 * v23 + 6], (unsigned int *)((char *)v11 + 6));
        if (!(_DWORD)result)
          return result;
      }
      v27 = *(_QWORD *)v11;
      v38 = *((_WORD *)v11 + 4);
      v37 = v27;
      v28 = *(_QWORD *)v24;
      *((_WORD *)v11 + 4) = *((_WORD *)v24 + 4);
      *(_QWORD *)v11 = v28;
      if (v22 >= 2)
      {
        while (1)
        {
          v32 = v23 - 1;
          v23 = (v23 - 1) >> 1;
          v11 = (unsigned int *)&v8[10 * v23];
          v33 = v37 | ((unint64_t)WORD2(v37) << 32);
          v34 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
          if (v33 <= v34)
          {
            if (v34 > v33)
              break;
            result = (char *)sub_1000BC3F8(&v8[10 * v23 + 6], (uint64_t *)((char *)&v37 + 6));
            if (!(_DWORD)result)
              break;
          }
          v31 = *(_QWORD *)v11;
          *((_WORD *)v24 + 4) = *((_WORD *)v11 + 4);
          *(_QWORD *)v24 = v31;
          v24 = &v8[10 * v23];
          if (v32 <= 1)
            goto LABEL_15;
        }
      }
      v11 = (unsigned int *)v24;
LABEL_15:
      v29 = v37;
      v30 = v38;
    }
    *((_WORD *)v11 + 4) = v30;
    *(_QWORD *)v11 = v29;
  }
  return result;
}

uint64_t sub_100252894(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int *v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  unint64_t v41;
  __int128 v43;
  int v44;
  int *v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t v50;
  int v51;

  v7 = result;
LABEL_2:
  v8 = a2 - 10;
  v9 = (int *)v7;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v7 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_100252F24(a3, (uint64_t)(a2 - 10), (_DWORD *)v7);
        if (!(_DWORD)result)
          return result;
        v32 = *(_DWORD *)v7;
        v33 = *(int *)v7 >> 31;
        v35 = (_QWORD *)(v7 + 8);
        v34 = *(_QWORD *)(v7 + 8);
        if (v33 == *(_DWORD *)v7)
        {
          v36 = *v8;
          if (v32 == *v8)
          {
            v37 = 0;
            *v35 = *((_QWORD *)a2 - 4);
            goto LABEL_59;
          }
          v37 = 0;
        }
        else
        {
          v50 = *(_QWORD *)(v7 + 16);
          v51 = *(_DWORD *)(v7 + 24);
          v37 = v33 ^ v32;
          v36 = *v8;
          if (v32 == *v8)
          {
            v43 = *((_OWORD *)a2 - 2);
            *(_DWORD *)(v7 + 24) = *(a2 - 4);
            *(_OWORD *)v35 = v43;
            goto LABEL_59;
          }
        }
        v44 = v36 ^ (v36 >> 31);
        v45 = a2 - 8;
        if (v44)
        {
          v46 = *(_OWORD *)v45;
          *(_DWORD *)(v7 + 24) = *(a2 - 4);
          *(_OWORD *)v35 = v46;
          *(_DWORD *)v7 = v44;
        }
        else
        {
          *(_QWORD *)(v7 + 8) = *(_QWORD *)v45;
          *(_DWORD *)v7 = 0;
        }
LABEL_59:
        v47 = v37 >> 31;
        if (*v8 == v37)
        {
          *((_QWORD *)a2 - 4) = v34;
          if (v47 != v37)
          {
            *((_QWORD *)a2 - 3) = v50;
            *(a2 - 4) = v51;
          }
        }
        else
        {
          *((_QWORD *)a2 - 4) = v34;
          if (v47 != v37)
          {
            *((_QWORD *)a2 - 3) = v50;
            *(a2 - 4) = v51;
            *(a2 - 10) = v47 ^ v37;
          }
          else
          {
            *v8 = 0;
          }
        }
        v48 = *(_DWORD *)(v7 + 32);
        *(_DWORD *)(v7 + 32) = *(a2 - 2);
        *(a2 - 2) = v48;
        return result;
      case 3uLL:
        return sub_1002539B4((int *)v7, v7 + 40, (uint64_t)(a2 - 10), a3);
      case 4uLL:
        return sub_100255C6C(v7, v7 + 40, v7 + 80, (uint64_t)(a2 - 10), a3);
      case 5uLL:
        return sub_1002560A8(v7, v7 + 40, v7 + 80, v7 + 120, (uint64_t)(a2 - 10), a3);
      default:
        if (v12 <= 959)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1002530F4((int *)v7, a2, a3);
          else
            return (uint64_t)sub_1002534A4((unsigned __int8 *)v7, (unsigned __int8 *)a2, a3);
        }
        if (v10 != 1)
        {
          v14 = v13 >> 1;
          v15 = v7 + 40 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1401)
          {
            sub_1002539B4((int *)v15, v7, (uint64_t)(a2 - 10), a3);
            if ((a5 & 1) != 0)
              goto LABEL_28;
            goto LABEL_27;
          }
          sub_1002539B4((int *)v7, v15, (uint64_t)(a2 - 10), a3);
          sub_1002539B4((int *)(v7 + 40), 40 * v14 + v7 - 40, (uint64_t)(a2 - 20), a3);
          sub_1002539B4((int *)(v7 + 80), v7 + 40 + 40 * v14, (uint64_t)(a2 - 30), a3);
          sub_1002539B4((int *)(40 * v14 + v7 - 40), v15, v7 + 40 + 40 * v14, a3);
          v16 = *(_DWORD *)v7;
          v17 = *(int *)v7 >> 31;
          v19 = (_QWORD *)(v7 + 8);
          v18 = *(_QWORD *)(v7 + 8);
          if (v17 == *(_DWORD *)v7)
          {
            v20 = *(_DWORD *)v15;
            if (v16 == *(_DWORD *)v15)
            {
              v21 = 0;
              *v19 = *(_QWORD *)(v15 + 8);
              goto LABEL_15;
            }
            v21 = 0;
          }
          else
          {
            v50 = *(_QWORD *)(v7 + 16);
            v51 = *(_DWORD *)(v7 + 24);
            v21 = v17 ^ v16;
            v20 = *(_DWORD *)v15;
            if (v16 == *(_DWORD *)v15)
            {
              v22 = *(_OWORD *)(v15 + 8);
              *(_DWORD *)(v7 + 24) = *(_DWORD *)(v15 + 24);
              *(_OWORD *)v19 = v22;
LABEL_15:
              v23 = v21 >> 31;
              if (*(_DWORD *)v15 != v21)
                goto LABEL_21;
              goto LABEL_16;
            }
          }
          v24 = v20 ^ (v20 >> 31);
          v25 = (__int128 *)(v15 + 8);
          if (v24)
          {
            v26 = *v25;
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v15 + 24);
            *(_OWORD *)v19 = v26;
            *(_DWORD *)v7 = v24;
            v23 = v21 >> 31;
            if (*(_DWORD *)v15 != v21)
              goto LABEL_21;
          }
          else
          {
            *(_QWORD *)(v7 + 8) = *(_QWORD *)v25;
            *(_DWORD *)v7 = 0;
            v23 = v21 >> 31;
            if (*(_DWORD *)v15 != v21)
            {
LABEL_21:
              *(_QWORD *)(v15 + 8) = v18;
              if (v23 != v21)
              {
                *(_DWORD *)(v15 + 24) = v51;
                *(_QWORD *)(v15 + 16) = v50;
                *(_DWORD *)v15 = v23 ^ v21;
              }
              else
              {
                *(_DWORD *)v15 = 0;
              }
              goto LABEL_26;
            }
          }
LABEL_16:
          *(_QWORD *)(v15 + 8) = v18;
          if (v23 != v21)
          {
            *(_DWORD *)(v15 + 24) = v51;
            *(_QWORD *)(v15 + 16) = v50;
          }
LABEL_26:
          v27 = v7 + 40 * v14;
          v28 = *(_DWORD *)(v7 + 32);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v27 + 32);
          *(_DWORD *)(v27 + 32) = v28;
          if ((a5 & 1) != 0)
            goto LABEL_28;
LABEL_27:
          if (!sub_100252F24(a3, v7 - 40, (_DWORD *)v7))
          {
            result = (uint64_t)sub_100254078(v7, (unint64_t)a2, a3);
            v9 = (int *)result;
            goto LABEL_33;
          }
LABEL_28:
          v29 = sub_100254A34((int *)v7, (unint64_t)a2, a3);
          if ((v30 & 1) == 0)
            goto LABEL_31;
          v31 = sub_1002557EC(v7, v29, a3);
          v9 = v29 + 10;
          result = sub_1002557EC((uint64_t)(v29 + 10), a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v31)
              continue;
LABEL_31:
            result = sub_100252894(v7, v29, a3, -v11, a5 & 1);
            v9 = v29 + 10;
LABEL_33:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v29;
          if (v31)
            return result;
          goto LABEL_2;
        }
        if ((int *)v7 != a2)
        {
          v38 = (v13 - 2) >> 1;
          v39 = v38 + 1;
          v40 = (int *)(v7 + 40 * v38);
          do
          {
            sub_100256604(v7, a3, v13, v40);
            v40 -= 10;
            --v39;
          }
          while (v39);
          v41 = v12 / 0x28uLL;
          do
          {
            result = sub_1002568E4(v7, (uint64_t)a2, a3, v41);
            a2 -= 10;
          }
          while (v41-- > 2);
        }
        return result;
    }
  }
}

BOOL sub_100252F24(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  __int128 v19;
  int v20;

  v6 = (unsigned __int8 *)(a3 + 2);
  v5 = *a3;
  v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(_QWORD *)&v19 = *(_QWORD *)v6;
    v7 = v5;
  }
  else
  {
    v19 = *(_OWORD *)v6;
    v20 = a3[6];
  }
  v8 = v7 ^ v5;
  v18 = v8;
  v10 = (_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)a2;
  v11 = *(int *)a2 >> 31;
  v12 = v8 >> 31;
  if (v11 == *(_DWORD *)a2)
  {
    if (v12 == v8 && *v10 >= (unint64_t)v19)
    {
      v11 = *(_DWORD *)a2;
      goto LABEL_13;
    }
    return 1;
  }
  if (v12 != v8)
  {
    if (sub_1001D7688((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19))
      return 1;
    v9 = *(_DWORD *)a2;
    v11 = *(int *)a2 >> 31;
  }
  if (v11 != v9)
  {
    v16 = *(_OWORD *)v10;
    v17 = *(_DWORD *)(a2 + 24);
    v14 = v11 ^ v9;
    v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31)
      goto LABEL_14;
LABEL_18:
    if (v15 != v14 && sub_1001D7688(v6, (unsigned __int8 *)&v16))
      return 0;
    return sub_1000BC3F8((_DWORD *)(a2 + 32), a3 + 8);
  }
LABEL_13:
  *(_QWORD *)&v16 = *v10;
  v14 = v11 ^ v9;
  v15 = v14 >> 31;
  if (*a3 != (int)*a3 >> 31)
    goto LABEL_18;
LABEL_14:
  if (v15 != v14 || *(_QWORD *)v6 < (unint64_t)v16)
    return 0;
  return sub_1000BC3F8((_DWORD *)(a2 + 32), a3 + 8);
}

int *sub_1002530F4(int *result, int *a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t i;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int *v30;
  int v31;
  int v32;
  _QWORD *v33;
  int v34;
  int v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  int v44;
  __int128 v45;
  int v46;

  if (result == a2)
    return result;
  v3 = result;
  v4 = (uint64_t)(result + 10);
  if (result + 10 == a2)
    return result;
  v5 = 0;
  v6 = result;
  while (2)
  {
    v7 = (int *)v4;
    result = (int *)sub_100252F24(a3, v4, v6);
    if (!(_DWORD)result)
      goto LABEL_6;
    v8 = *v7;
    v9 = *v7 >> 31;
    v10 = v6 + 12;
    if (v8 >> 31 == v8)
    {
      *(_QWORD *)&v38 = *v10;
      v9 = v8;
    }
    else
    {
      v38 = *(_OWORD *)v10;
      v39 = v6[16];
    }
    v37 = v9 ^ v8;
    v40 = v6[18];
    for (i = v5; ; i -= 40)
    {
      v12 = (int *)((char *)v3 + i);
      v13 = *(int *)((char *)v3 + i);
      if (v8 != v13)
        break;
      v14 = v12 + 2;
      v15 = v12 + 12;
      if (v8 == v8 >> 31)
      {
        *v15 = *v14;
        v16 = (char *)v3 + i;
        *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
        if (!i)
          goto LABEL_46;
      }
      else
      {
        *(_OWORD *)v15 = *(_OWORD *)v14;
        v12[16] = v12[6];
        v16 = (char *)v3 + i;
        *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
        if (!i)
          goto LABEL_46;
      }
LABEL_23:
      v20 = *((_DWORD *)v16 - 10);
      v21 = v20 >> 31;
      v22 = v16 - 32;
      if (v20 >> 31 == v20)
      {
        *(_QWORD *)&v45 = *(_QWORD *)v22;
        v21 = v20;
      }
      else
      {
        v45 = *(_OWORD *)v22;
        v46 = *((_DWORD *)v16 - 4);
      }
      v23 = v21 ^ v20;
      v44 = v23;
      v24 = v37;
      v25 = v37 >> 31;
      v26 = v23 >> 31;
      if (v37 >> 31 == v37)
      {
        if (v26 != v23)
          goto LABEL_12;
        v27 = v38;
        if ((unint64_t)v38 < (unint64_t)v45)
          goto LABEL_12;
LABEL_35:
        *(_QWORD *)&v42 = v27;
        v28 = 0;
        v41 = 0;
        v29 = 0;
        if (*((_DWORD *)v16 - 10) != *((int *)v16 - 10) >> 31)
          goto LABEL_40;
        goto LABEL_36;
      }
      if (v26 != v23)
      {
        result = (int *)sub_1001D7688((unsigned __int8 *)&v38, (unsigned __int8 *)&v45);
        if ((result & 1) != 0)
          goto LABEL_12;
        v24 = v37;
        v25 = v37 >> 31;
      }
      if (v25 == v24)
      {
        v27 = v38;
        goto LABEL_35;
      }
      v42 = v38;
      v43 = v39;
      v28 = v25 ^ v24;
      v41 = v28;
      v29 = v28 >> 31;
      if (*((_DWORD *)v16 - 10) != *((int *)v16 - 10) >> 31)
      {
LABEL_40:
        if (v29 != v28)
        {
          result = (int *)sub_1001D7688((unsigned __int8 *)v16 - 32, (unsigned __int8 *)&v42);
          if ((result & 1) != 0)
          {
LABEL_43:
            v30 = (int *)((char *)v3 + i);
            v31 = *(int *)((char *)v3 + i);
            v32 = v37;
            if (v31 == v37)
              goto LABEL_44;
LABEL_47:
            v34 = v32 ^ (v32 >> 31);
            if (v34)
            {
              *(_OWORD *)(v30 + 2) = v38;
              v30[6] = v39;
              *v30 = v34;
            }
            else
            {
              *((_QWORD *)v30 + 1) = v38;
              *v30 = 0;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_42;
      }
LABEL_36:
      if (v29 != v28 || *(_QWORD *)v22 < (unint64_t)v42)
        goto LABEL_43;
LABEL_42:
      result = (int *)sub_1000BC3F8(&v40, (int *)((char *)v3 + i - 8));
      if (!(_DWORD)result)
        goto LABEL_43;
LABEL_12:
      v8 = *v12;
    }
    v17 = v13 ^ (v13 >> 31);
    v18 = v12 + 2;
    v19 = v12 + 12;
    if (v17)
    {
      *v19 = *v18;
      v12[16] = v12[6];
      v12[10] = v17;
      v16 = (char *)v3 + i;
      *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
      if (!i)
        goto LABEL_46;
      goto LABEL_23;
    }
    *(_QWORD *)v19 = *(_QWORD *)v18;
    v12[10] = 0;
    v16 = (char *)v3 + i;
    *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
    if (i)
      goto LABEL_23;
LABEL_46:
    v30 = v3;
    v31 = *v3;
    v32 = v37;
    if (*v3 != v37)
      goto LABEL_47;
LABEL_44:
    v33 = v30 + 2;
    if (v31 == v31 >> 31)
    {
      *v33 = v38;
    }
    else
    {
      *(_OWORD *)v33 = v38;
      v30[6] = v39;
    }
LABEL_5:
    v30[8] = v40;
LABEL_6:
    v4 = (uint64_t)(v7 + 10);
    v5 += 40;
    v6 = v7;
    if (v7 + 10 != a2)
      continue;
    return result;
  }
}

unsigned __int8 *sub_1002534A4(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  int v40;

  if (result == a2)
    return result;
  v4 = result;
  v5 = (uint64_t)(result + 40);
  if (result + 40 == a2)
    return result;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  while (2)
  {
    v9 = (int *)v5;
    result = (unsigned __int8 *)sub_100252F24(a3, v5, v4);
    if (!(_DWORD)result)
      goto LABEL_6;
    v10 = *v9;
    v11 = *v9 >> 31;
    v12 = v4 + 48;
    if (v10 >> 31 == v10)
    {
      *(_QWORD *)&v35 = *v12;
      v11 = *v9;
    }
    else
    {
      v35 = *(_OWORD *)v12;
      v36 = *((_DWORD *)v4 + 16);
    }
    v34 = v11 ^ v10;
    v37 = *((_DWORD *)v4 + 18);
    while (1)
    {
      if (v10 == *(_DWORD *)v4)
      {
        v13 = v4 + 8;
        v14 = v4 + 48;
        if (v10 == v10 >> 31)
        {
          *v14 = *v13;
        }
        else
        {
          *(_OWORD *)v14 = *(_OWORD *)v13;
          *((_DWORD *)v4 + 16) = *((_DWORD *)v4 + 6);
        }
      }
      else
      {
        v15 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
        if (v15)
        {
          *((_OWORD *)v4 + 3) = *(_OWORD *)(v4 + 8);
          *((_DWORD *)v4 + 16) = *((_DWORD *)v4 + 6);
          *((_DWORD *)v4 + 10) = v15;
        }
        else
        {
          *((_QWORD *)v4 + 6) = *((_QWORD *)v4 + 1);
          *((_DWORD *)v4 + 10) = 0;
        }
      }
      *((_DWORD *)v4 + 18) = *((_DWORD *)v4 + 8);
      v16 = *((_DWORD *)v4 - 10);
      v17 = v16 >> 31;
      v18 = v16;
      if (v16 >> 31 != v16)
      {
        LODWORD(v33) = *(v4 - 23);
        HIDWORD(v33) = *(v4 - 24);
        LODWORD(v32) = *(v4 - 21);
        HIDWORD(v32) = *(v4 - 22);
        LODWORD(v31) = *(v4 - 19);
        HIDWORD(v31) = *(v4 - 20);
        LODWORD(v30) = *(v4 - 17);
        HIDWORD(v30) = *(v4 - 18);
        v6 = *(v4 - 16);
        v7 = *(v4 - 15);
        v8 = *(v4 - 14);
        v18 = v16 >> 31;
        v3 = *(v4 - 13);
      }
      result = v4 - 32;
      v19 = *((_QWORD *)v4 - 4);
      v20 = v18 ^ v16;
      v21 = v34 >> 31;
      v22 = (v18 ^ v16) >> 31;
      if (v34 >> 31 == v34)
      {
        if (v22 != v20 || (unint64_t)v35 < v19)
          goto LABEL_12;
        *(_QWORD *)&v39 = v35;
        v23 = 0;
        v38 = 0;
        v24 = 0;
        if (v17 != v16)
          goto LABEL_26;
      }
      else
      {
        if (v22 != v20)
        {
          if (v35 < *((_QWORD *)v4 - 4))
            goto LABEL_12;
          if (v35 <= *((_QWORD *)v4 - 4))
          {
            if (BYTE1(v35) < BYTE1(v19))
              goto LABEL_12;
            if (BYTE1(v35) <= BYTE1(v19))
            {
              if (BYTE2(v35) < BYTE2(v19))
                goto LABEL_12;
              if (BYTE2(v35) <= BYTE2(v19))
              {
                if (BYTE3(v35) < BYTE3(v19))
                  goto LABEL_12;
                if (BYTE3(v35) <= BYTE3(v19))
                {
                  if (BYTE4(v35) < BYTE4(v19))
                    goto LABEL_12;
                  if (BYTE4(v35) <= BYTE4(v19))
                  {
                    if (BYTE5(v35) < BYTE5(v19))
                      goto LABEL_12;
                    if (BYTE5(v35) <= BYTE5(v19))
                    {
                      if (BYTE6(v35) < BYTE6(v19))
                        goto LABEL_12;
                      if (BYTE6(v35) <= BYTE6(v19))
                      {
                        v25 = HIBYTE(v19);
                        if (BYTE7(v35) < v25
                          || BYTE7(v35) <= v25
                          && (BYTE8(v35) < HIDWORD(v33)
                           || HIDWORD(v33) >= BYTE8(v35)
                           && (BYTE9(v35) < v33
                            || v33 >= BYTE9(v35)
                            && (BYTE10(v35) < HIDWORD(v32)
                             || HIDWORD(v32) >= BYTE10(v35)
                             && (BYTE11(v35) < v32
                              || v32 >= BYTE11(v35)
                              && (BYTE12(v35) < HIDWORD(v31)
                               || HIDWORD(v31) >= BYTE12(v35)
                               && (BYTE13(v35) < v31
                                || v31 >= BYTE13(v35)
                                && (BYTE14(v35) < HIDWORD(v30)
                                 || HIDWORD(v30) >= BYTE14(v35)
                                 && (HIBYTE(v35) < v30
                                  || v30 >= HIBYTE(v35)
                                  && (v36 < v6
                                   || v6 >= v36
                                   && (BYTE1(v36) < v7
                                    || v7 >= BYTE1(v36)
                                    && (BYTE2(v36) < v8 || v8 >= BYTE2(v36) && HIBYTE(v36) < v3))))))))))))
                        {
                          goto LABEL_12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v39 = v35;
        v40 = v36;
        v23 = v21 ^ v34;
        v38 = v21 ^ v34;
        v24 = (v21 ^ v34) >> 31;
        if (v17 != v16)
        {
LABEL_26:
          if (v24 != v23)
          {
            result = (unsigned __int8 *)sub_1001D7688(result, (unsigned __int8 *)&v39);
            if ((result & 1) != 0)
              break;
          }
          goto LABEL_35;
        }
      }
      if (v24 != v23 || *(_QWORD *)result < (unint64_t)v39)
        break;
LABEL_35:
      result = (unsigned __int8 *)sub_1000BC3F8(&v37, (_DWORD *)v4 - 2);
      if (!(_DWORD)result)
        break;
LABEL_12:
      v10 = *(_DWORD *)v4;
      v4 -= 40;
    }
    if (*(_DWORD *)v4 == v34)
    {
      v26 = v4 + 8;
      if (*(_DWORD *)v4 == *(int *)v4 >> 31)
      {
        *v26 = v35;
      }
      else
      {
        *((_DWORD *)v4 + 6) = v36;
        *(_OWORD *)v26 = v35;
      }
    }
    else
    {
      v27 = v34 ^ (v34 >> 31);
      if (v27)
      {
        *((_DWORD *)v4 + 6) = v36;
        *(_OWORD *)(v4 + 8) = v35;
        *(_DWORD *)v4 = v27;
      }
      else
      {
        *((_QWORD *)v4 + 1) = v35;
        *(_DWORD *)v4 = 0;
      }
    }
    *((_DWORD *)v4 + 8) = v37;
LABEL_6:
    v5 = (uint64_t)(v9 + 10);
    v4 = (unsigned __int8 *)v9;
    if (v9 + 10 != (int *)a2)
      continue;
    return result;
  }
}

uint64_t sub_1002539B4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  __int128 *v36;
  __int128 v37;
  int v38;
  __int128 *v39;
  __int128 v40;
  int v41;
  __int128 *v42;
  __int128 v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 *v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  int v71;

  v8 = sub_100252F24(a4, a2, a1);
  result = sub_100252F24(a4, a3, (_DWORD *)a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v17 = *(_DWORD *)a2;
    v18 = *(int *)a2 >> 31;
    v20 = (_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 8);
    if (v18 == *(_DWORD *)a2)
    {
      v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        v22 = 0;
        *v20 = *(_QWORD *)(a3 + 8);
        v23 = 0;
        if (*(_DWORD *)a3)
          goto LABEL_22;
        goto LABEL_36;
      }
      v22 = 0;
    }
    else
    {
      v70 = *(_QWORD *)(a2 + 16);
      v71 = *(_DWORD *)(a2 + 24);
      v22 = v18 ^ v17;
      v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        v32 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v20 = v32;
        v23 = v22 >> 31;
        if (*(_DWORD *)a3 != v22)
          goto LABEL_22;
        goto LABEL_36;
      }
    }
    v38 = v21 ^ (v21 >> 31);
    v39 = (__int128 *)(a3 + 8);
    if (v38)
    {
      v40 = *v39;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v20 = v40;
      *(_DWORD *)a2 = v38;
      v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
        goto LABEL_22;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *(_QWORD *)v39;
      *(_DWORD *)a2 = 0;
      v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
      {
LABEL_22:
        *(_QWORD *)(a3 + 8) = v19;
        if (v23 != v22)
        {
          *(_QWORD *)(a3 + 16) = v70;
          *(_DWORD *)(a3 + 24) = v71;
          *(_DWORD *)a3 = v23 ^ v22;
        }
        else
        {
          *(_DWORD *)a3 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_36:
    *(_QWORD *)(a3 + 8) = v19;
    if (v23 != v22)
    {
      *(_QWORD *)(a3 + 16) = v70;
      *(_DWORD *)(a3 + 24) = v71;
    }
LABEL_46:
    v45 = (int *)(a2 + 32);
    v46 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = v46;
    if (!sub_100252F24(a4, a2, a1))
      return 1;
    v47 = *a1;
    v48 = *a1 >> 31;
    v50 = a1 + 2;
    v49 = *((_QWORD *)a1 + 1);
    if (v48 == *a1)
    {
      v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        v52 = 0;
        *v50 = *v20;
        v53 = 0;
        if (*(_DWORD *)a2)
          goto LABEL_53;
LABEL_75:
        *v20 = v49;
        if (v53 != v52)
        {
          *(_QWORD *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          v44 = a1 + 8;
          goto LABEL_86;
        }
LABEL_76:
        v44 = a1 + 8;
LABEL_86:
        result = 2;
        goto LABEL_87;
      }
      v52 = 0;
    }
    else
    {
      v70 = *((_QWORD *)a1 + 2);
      v71 = a1[6];
      v52 = v48 ^ v47;
      v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        v54 = *(_OWORD *)v20;
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)v50 = v54;
        v53 = v52 >> 31;
        if (*(_DWORD *)a2 == v52)
          goto LABEL_75;
        goto LABEL_53;
      }
    }
    v64 = v51 ^ (v51 >> 31);
    if (!v64)
    {
      *((_QWORD *)a1 + 1) = *v20;
      *a1 = 0;
      v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52)
        goto LABEL_53;
      goto LABEL_75;
    }
    v65 = *(_OWORD *)v20;
    a1[6] = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v50 = v65;
    *a1 = v64;
    v53 = v52 >> 31;
    if (*(_DWORD *)a2 == v52)
      goto LABEL_75;
LABEL_53:
    *v20 = v49;
    if (v53 == v52)
    {
      *(_DWORD *)a2 = 0;
      v44 = a1 + 8;
      goto LABEL_86;
    }
    *(_QWORD *)(a2 + 16) = v70;
    *(_DWORD *)(a2 + 24) = v71;
    *(_DWORD *)a2 = v53 ^ v52;
    goto LABEL_76;
  }
  v10 = a1 + 2;
  if (!(_DWORD)result)
  {
    v24 = *a1;
    v25 = *a1 >> 31;
    v26 = *((_QWORD *)a1 + 1);
    if (v25 == *a1)
    {
      v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        v28 = 0;
        *v10 = *(_QWORD *)(a2 + 8);
        v29 = 0;
        if (*(_DWORD *)a2)
          goto LABEL_26;
        goto LABEL_41;
      }
      v28 = 0;
    }
    else
    {
      v70 = *((_QWORD *)a1 + 2);
      v71 = a1[6];
      v28 = v25 ^ v24;
      v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        v33 = *(_OWORD *)(a2 + 8);
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)v10 = v33;
        v29 = v28 >> 31;
        if (*(_DWORD *)a2 != v28)
          goto LABEL_26;
        goto LABEL_41;
      }
    }
    v41 = v27 ^ (v27 >> 31);
    v42 = (__int128 *)(a2 + 8);
    if (v41)
    {
      v43 = *v42;
      a1[6] = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v10 = v43;
      *a1 = v41;
      v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
        goto LABEL_26;
    }
    else
    {
      *((_QWORD *)a1 + 1) = *(_QWORD *)v42;
      *a1 = 0;
      v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
      {
LABEL_26:
        *(_QWORD *)(a2 + 8) = v26;
        v34 = v29 ^ v28;
        if (v34)
        {
          *(_QWORD *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          *(_DWORD *)a2 = v34;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_56;
      }
    }
LABEL_41:
    *(_QWORD *)(a2 + 8) = v26;
    if (v29 != v28)
    {
      *(_QWORD *)(a2 + 16) = v70;
      *(_DWORD *)(a2 + 24) = v71;
    }
LABEL_56:
    v44 = (int *)(a2 + 32);
    v55 = a1[8];
    a1[8] = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v55;
    if (sub_100252F24(a4, a3, (_DWORD *)a2))
    {
      v56 = *(_DWORD *)a2;
      v57 = *(int *)a2 >> 31;
      v59 = (_QWORD *)(a2 + 8);
      v58 = *(_QWORD *)(a2 + 8);
      if (v57 == *(_DWORD *)a2)
      {
        v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          v61 = 0;
          *v59 = *(_QWORD *)(a3 + 8);
          v62 = 0;
          if (*(_DWORD *)a3)
            goto LABEL_64;
          goto LABEL_80;
        }
        v61 = 0;
      }
      else
      {
        v70 = *(_QWORD *)(a2 + 16);
        v71 = *(_DWORD *)(a2 + 24);
        v61 = v57 ^ v56;
        v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          v63 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)v59 = v63;
          v62 = v61 >> 31;
          if (*(_DWORD *)a3 != v61)
            goto LABEL_64;
          goto LABEL_80;
        }
      }
      v66 = v60 ^ (v60 >> 31);
      v67 = (__int128 *)(a3 + 8);
      if (v66)
      {
        v68 = *v67;
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v59 = v68;
        *(_DWORD *)a2 = v66;
        v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
          goto LABEL_64;
      }
      else
      {
        *(_QWORD *)(a2 + 8) = *(_QWORD *)v67;
        *(_DWORD *)a2 = 0;
        v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
        {
LABEL_64:
          *(_QWORD *)(a3 + 8) = v58;
          if (v62 != v61)
          {
            *(_QWORD *)(a3 + 16) = v70;
            *(_DWORD *)(a3 + 24) = v71;
            *(_DWORD *)a3 = v62 ^ v61;
          }
          else
          {
            *(_DWORD *)a3 = 0;
          }
LABEL_85:
          v45 = (int *)(a3 + 32);
          goto LABEL_86;
        }
      }
LABEL_80:
      *(_QWORD *)(a3 + 8) = v58;
      if (v62 != v61)
      {
        *(_QWORD *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_85;
    }
    return 1;
  }
  v11 = *a1;
  v12 = *a1 >> 31;
  v13 = *((_QWORD *)a1 + 1);
  if (v12 == *a1)
  {
    v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      v15 = 0;
      *v10 = *(_QWORD *)(a3 + 8);
      v16 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_18;
LABEL_31:
      *(_QWORD *)(a3 + 8) = v13;
      if (v16 != v15)
      {
        *(_QWORD *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_44;
    }
    v15 = 0;
  }
  else
  {
    v70 = *((_QWORD *)a1 + 2);
    v71 = a1[6];
    v15 = v12 ^ v11;
    v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      v30 = *(_OWORD *)(a3 + 8);
      a1[6] = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v10 = v30;
      v16 = v15 >> 31;
      if (*(_DWORD *)a3 != v15)
        goto LABEL_18;
      goto LABEL_31;
    }
  }
  v35 = v14 ^ (v14 >> 31);
  v36 = (__int128 *)(a3 + 8);
  if (v35)
  {
    v37 = *v36;
    a1[6] = *(_DWORD *)(a3 + 24);
    *(_OWORD *)v10 = v37;
    *a1 = v35;
    v16 = v15 >> 31;
    if (*(_DWORD *)a3 != v15)
      goto LABEL_18;
    goto LABEL_31;
  }
  *((_QWORD *)a1 + 1) = *(_QWORD *)v36;
  *a1 = 0;
  v16 = v15 >> 31;
  if (*(_DWORD *)a3 == v15)
    goto LABEL_31;
LABEL_18:
  *(_QWORD *)(a3 + 8) = v13;
  v31 = v16 ^ v15;
  if (v31)
  {
    *(_QWORD *)(a3 + 16) = v70;
    *(_DWORD *)(a3 + 24) = v71;
    *(_DWORD *)a3 = v31;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
LABEL_44:
  v44 = a1 + 8;
  v45 = (int *)(a3 + 32);
  result = 1;
LABEL_87:
  v69 = *v44;
  *v44 = *v45;
  *v45 = v69;
  return result;
}

int *sub_100254078(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  int *v11;
  int *v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  int v29;
  _DWORD *i;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v49;
  int v50;
  unint64_t v51;
  int *v52;
  int *v53;
  int v54;
  int *v55;
  __int128 v56;
  __int128 v57;
  int v58;
  int *v59;
  int v60;
  int *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v65;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  int v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  int v83;

  v4 = a2;
  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)a1;
  v7 = *(int *)a1 >> 31;
  v65 = a1 + 8;
  if (v5 >> 31 == v5)
  {
    *(_QWORD *)&v78 = *v6;
    v7 = v5;
  }
  else
  {
    v78 = *(_OWORD *)v6;
    v79 = *(_DWORD *)(a1 + 24);
  }
  v8 = v7 ^ v5;
  v9 = *(_DWORD *)(a1 + 32);
  v10 = &v77;
  v77 = v8;
  v80 = v9;
  if (sub_100252F24(a3, (uint64_t)&v77, (_DWORD *)(a2 - 40)))
  {
    v11 = (int *)a1;
    do
      v11 += 10;
    while (!sub_100252F24(a3, (uint64_t)&v77, v11));
  }
  else
  {
    v12 = (int *)(a1 + 40);
    do
    {
      v11 = v12;
      if ((unint64_t)v12 >= v4)
        break;
      v13 = sub_100252F24(a3, (uint64_t)&v77, v12);
      v12 = v11 + 10;
    }
    while (!v13);
  }
  if ((unint64_t)v11 < v4)
  {
    do
      v4 -= 40;
    while (sub_100252F24(a3, (uint64_t)&v77, (_DWORD *)v4));
  }
  if ((unint64_t)v11 < v4)
  {
    v72 = 0;
    v73 = 0;
    v70 = 0;
    v71 = 0;
    v68 = 0;
    v69 = 0;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *v11;
      v19 = *v11 >> 31;
      v21 = v11 + 2;
      v20 = *((_QWORD *)v11 + 1);
      if (v19 == *v11)
      {
        v22 = *(_DWORD *)v4;
        if (v18 == *(_DWORD *)v4)
        {
          v23 = 0;
          *v21 = *(_QWORD *)(v4 + 8);
          v24 = 0;
          if (!*(_DWORD *)v4)
            goto LABEL_26;
          goto LABEL_29;
        }
        v23 = 0;
      }
      else
      {
        v81 = *((_QWORD *)v11 + 2);
        LODWORD(v82) = v11[6];
        v23 = v19 ^ v18;
        v22 = *(_DWORD *)v4;
        if (v18 == *(_DWORD *)v4)
        {
          v25 = *(_OWORD *)(v4 + 8);
          v11[6] = *(_DWORD *)(v4 + 24);
          *(_OWORD *)v21 = v25;
          v24 = v23 >> 31;
          if (*(_DWORD *)v4 == v23)
            goto LABEL_26;
          goto LABEL_29;
        }
      }
      v26 = v22 ^ (v22 >> 31);
      v27 = (__int128 *)(v4 + 8);
      if (v26)
      {
        v28 = *v27;
        v11[6] = *(_DWORD *)(v4 + 24);
        *(_OWORD *)v21 = v28;
        *v11 = v26;
        v24 = v23 >> 31;
        if (*(_DWORD *)v4 == v23)
          goto LABEL_26;
      }
      else
      {
        *((_QWORD *)v11 + 1) = *(_QWORD *)v27;
        *v11 = 0;
        v24 = v23 >> 31;
        if (*(_DWORD *)v4 == v23)
        {
LABEL_26:
          *(_QWORD *)(v4 + 8) = v20;
          if (v24 != v23)
          {
            *(_QWORD *)(v4 + 16) = v81;
            *(_DWORD *)(v4 + 24) = v82;
          }
          goto LABEL_32;
        }
      }
LABEL_29:
      *(_QWORD *)(v4 + 8) = v20;
      if (v24 != v23)
      {
        *(_QWORD *)(v4 + 16) = v81;
        *(_DWORD *)(v4 + 24) = v82;
        *(_DWORD *)v4 = v24 ^ v23;
      }
      else
      {
        *(_DWORD *)v4 = 0;
      }
LABEL_32:
      v29 = v11[8];
      v11[8] = *(_DWORD *)(v4 + 32);
      *(_DWORD *)(v4 + 32) = v29;
      for (i = v11 + 18; ; i += 10)
      {
        v31 = *(i - 8);
        v32 = v31 >> 31;
        v33 = v31;
        if (v31 >> 31 != v31)
        {
          HIDWORD(v72) = *((unsigned __int8 *)i - 15);
          LODWORD(v73) = *((unsigned __int8 *)i - 16);
          HIDWORD(v71) = *((unsigned __int8 *)i - 13);
          LODWORD(v72) = *((unsigned __int8 *)i - 14);
          HIDWORD(v70) = *((unsigned __int8 *)i - 11);
          LODWORD(v71) = *((unsigned __int8 *)i - 12);
          HIDWORD(v69) = *((unsigned __int8 *)i - 9);
          LODWORD(v70) = *((unsigned __int8 *)i - 10);
          HIDWORD(v68) = *((unsigned __int8 *)i - 7);
          LODWORD(v69) = *((unsigned __int8 *)i - 8);
          LODWORD(v68) = *((unsigned __int8 *)i - 6);
          v33 = v31 >> 31;
          v67 = *((_BYTE *)i - 5);
        }
        v34 = *((_QWORD *)i - 3);
        v35 = v33 ^ v31;
        v36 = v77 >> 31;
        v37 = (v33 ^ v31) >> 31;
        if (v77 >> 31 == v77)
          break;
        if (v37 != v35
          && (v78 < *((_QWORD *)i - 3)
           || v78 <= *((_QWORD *)i - 3)
           && (BYTE1(v78) < BYTE1(v34)
            || BYTE1(v78) <= BYTE1(v34)
            && (BYTE2(v78) < BYTE2(v34)
             || BYTE2(v78) <= BYTE2(v34)
             && (BYTE3(v78) < BYTE3(v34)
              || BYTE3(v78) <= BYTE3(v34)
              && (BYTE4(v78) < BYTE4(v34)
               || BYTE4(v78) <= BYTE4(v34)
               && (BYTE5(v78) < BYTE5(v34)
                || BYTE5(v78) <= BYTE5(v34)
                && (BYTE6(v78) < BYTE6(v34)
                 || BYTE6(v78) <= BYTE6(v34)
                 && (BYTE7(v78) < HIBYTE(v34)
                  || BYTE7(v78) <= HIBYTE(v34)
                  && (BYTE8(v78) < v73
                   || v73 >= BYTE8(v78)
                   && (BYTE9(v78) < HIDWORD(v72)
                    || HIDWORD(v72) >= BYTE9(v78)
                    && (BYTE10(v78) < v72
                     || v72 >= BYTE10(v78)
                     && (BYTE11(v78) < HIDWORD(v71)
                      || HIDWORD(v71) >= BYTE11(v78)
                      && (BYTE12(v78) < v71
                       || v71 >= BYTE12(v78)
                       && (BYTE13(v78) < HIDWORD(v70)
                        || HIDWORD(v70) >= BYTE13(v78)
                        && (BYTE14(v78) < v70
                         || v70 >= BYTE14(v78)
                         && (HIBYTE(v78) < HIDWORD(v69)
                          || HIDWORD(v69) >= HIBYTE(v78)
                          && (v79 < v69
                           || v69 >= v79
                           && (BYTE1(v79) < HIDWORD(v68)
                            || HIDWORD(v68) >= BYTE1(v79)
                            && (BYTE2(v79) < v68
                             || v68 >= BYTE2(v79) && HIBYTE(v79) < v67))))))))))))))))))))
        {
          goto LABEL_90;
        }
        v82 = v78;
        v83 = v79;
        v39 = v36 ^ v77;
        LODWORD(v81) = v36 ^ v77;
        v40 = (v36 ^ v77) >> 31;
        if (v32 == v31)
        {
LABEL_87:
          if (v40 != v39 || v34 < (unint64_t)v82)
            continue;
          goto LABEL_89;
        }
LABEL_43:
        if (v40 != v39 && sub_1001D7688((unsigned __int8 *)i - 24, (unsigned __int8 *)&v82))
          continue;
LABEL_89:
        if (sub_1000BC3F8(&v80, i))
          goto LABEL_90;
      }
      if (v37 == v35 && (unint64_t)v78 >= v34)
      {
        *(_QWORD *)&v82 = v78;
        v39 = 0;
        LODWORD(v81) = 0;
        v40 = 0;
        if (v32 == v31)
          goto LABEL_87;
        goto LABEL_43;
      }
LABEL_90:
      v11 = i - 8;
      while (1)
      {
        while (1)
        {
          v4 -= 40;
          v41 = (unsigned __int8 *)(v4 + 8);
          v42 = *(_DWORD *)v4;
          v43 = *(_DWORD *)v4;
          if (*(int *)v4 >> 31 != *(_DWORD *)v4)
          {
            LODWORD(v76) = *(unsigned __int8 *)(v4 + 17);
            HIDWORD(v76) = *(unsigned __int8 *)(v4 + 16);
            LODWORD(v75) = *(unsigned __int8 *)(v4 + 19);
            HIDWORD(v75) = *(unsigned __int8 *)(v4 + 18);
            LODWORD(v74) = *(unsigned __int8 *)(v4 + 21);
            HIDWORD(v74) = *(unsigned __int8 *)(v4 + 20);
            HIDWORD(v73) = *(unsigned __int8 *)(v4 + 22);
            v14 = *(unsigned __int8 *)(v4 + 23);
            v15 = *(unsigned __int8 *)(v4 + 24);
            v16 = *(unsigned __int8 *)(v4 + 25);
            v17 = *(unsigned __int8 *)(v4 + 26);
            v43 = v42 >> 31;
            LOBYTE(v10) = *(_BYTE *)(v4 + 27);
          }
          v44 = *(_QWORD *)v41;
          v45 = v43 ^ v42;
          v46 = v77 >> 31;
          v47 = v45 >> 31;
          if (v77 >> 31 != v77)
            break;
          if (v47 == v45 && (unint64_t)v78 >= v44)
          {
            *(_QWORD *)&v82 = v78;
            v49 = 0;
            LODWORD(v81) = 0;
            v50 = 0;
            if (*(_DWORD *)v4 == *(int *)v4 >> 31)
              goto LABEL_107;
LABEL_100:
            if (v50 != v49 && sub_1001D7688(v41, (unsigned __int8 *)&v82))
              goto LABEL_15;
LABEL_109:
            if (!sub_1000BC3F8(&v80, (_DWORD *)(v4 + 32)))
              goto LABEL_15;
          }
        }
        if (v47 == v45)
          break;
        if (v78 >= *(_QWORD *)v41)
        {
          if (v78 > *(_QWORD *)v41)
            break;
          if (BYTE1(v78) >= BYTE1(v44))
          {
            if (BYTE1(v78) > BYTE1(v44))
              break;
            if (BYTE2(v78) >= BYTE2(v44))
            {
              if (BYTE2(v78) > BYTE2(v44))
                break;
              if (BYTE3(v78) >= BYTE3(v44))
              {
                if (BYTE3(v78) > BYTE3(v44))
                  break;
                if (BYTE4(v78) >= BYTE4(v44))
                {
                  if (BYTE4(v78) > BYTE4(v44))
                    break;
                  if (BYTE5(v78) >= BYTE5(v44))
                  {
                    if (BYTE5(v78) > BYTE5(v44))
                      break;
                    if (BYTE6(v78) >= BYTE6(v44))
                    {
                      if (BYTE6(v78) > BYTE6(v44))
                        break;
                      v51 = HIBYTE(v44);
                      if (BYTE7(v78) >= v51
                        && (BYTE7(v78) > v51
                         || BYTE8(v78) >= HIDWORD(v76)
                         && (HIDWORD(v76) < BYTE8(v78)
                          || BYTE9(v78) >= v76
                          && (v76 < BYTE9(v78)
                           || BYTE10(v78) >= HIDWORD(v75)
                           && (HIDWORD(v75) < BYTE10(v78)
                            || BYTE11(v78) >= v75
                            && (v75 < BYTE11(v78)
                             || BYTE12(v78) >= HIDWORD(v74)
                             && (HIDWORD(v74) < BYTE12(v78)
                              || BYTE13(v78) >= v74
                              && (v74 < BYTE13(v78)
                               || BYTE14(v78) >= HIDWORD(v73)
                               && (HIDWORD(v73) < BYTE14(v78)
                                || HIBYTE(v78) >= v14
                                && (v14 < HIBYTE(v78)
                                 || v79 >= v15
                                 && (v15 < v79
                                  || BYTE1(v79) >= v16
                                  && (v16 < BYTE1(v79)
                                   || BYTE2(v79) >= v17
                                   && (v17 < BYTE2(v79) || HIBYTE(v79) >= v10)))))))))))))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v82 = v78;
      v83 = v79;
      v49 = v46 ^ v77;
      LODWORD(v81) = v46 ^ v77;
      v50 = (v46 ^ v77) >> 31;
      if (*(_DWORD *)v4 != *(int *)v4 >> 31)
        goto LABEL_100;
LABEL_107:
      if (v50 == v49 && *(_QWORD *)v41 >= (unint64_t)v82)
        goto LABEL_109;
LABEL_15:
      ;
    }
    while ((unint64_t)v11 < v4);
  }
  v52 = v11 - 10;
  if (v11 - 10 != (int *)a1)
  {
    if (*(_DWORD *)a1 == *v52)
    {
      v53 = v11 - 8;
      if (*(_DWORD *)a1 == *(int *)a1 >> 31)
      {
        *(_QWORD *)v65 = *(_QWORD *)v53;
      }
      else
      {
        v57 = *(_OWORD *)v53;
        *(_DWORD *)(v65 + 16) = *(v11 - 4);
        *(_OWORD *)v65 = v57;
      }
    }
    else
    {
      v54 = *v52 ^ (*v52 >> 31);
      v55 = v11 - 8;
      if (v54)
      {
        v56 = *(_OWORD *)v55;
        *(_DWORD *)(v65 + 16) = *(v11 - 4);
        *(_OWORD *)v65 = v56;
        *(_DWORD *)a1 = v54;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v55;
        *(_DWORD *)a1 = 0;
      }
    }
    *(_DWORD *)(a1 + 32) = *(v11 - 2);
  }
  v58 = *v52;
  if (*v52 == v77)
  {
    v59 = v11 - 8;
    if (v58 == v58 >> 31)
    {
      *(_QWORD *)v59 = v78;
    }
    else
    {
      v63 = v78;
      *(v11 - 4) = v79;
      *(_OWORD *)v59 = v63;
    }
  }
  else
  {
    v60 = v77 ^ (v77 >> 31);
    v61 = v11 - 8;
    if (v60)
    {
      v62 = v78;
      *(v11 - 4) = v79;
      *(_OWORD *)v61 = v62;
      *v52 = v60;
    }
    else
    {
      *(_QWORD *)v61 = v78;
      *v52 = 0;
    }
  }
  *(v11 - 2) = v80;
  return v11;
}

int *sub_100254A34(int *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 *v35;
  __int128 v36;
  int v37;
  _DWORD *i;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int *result;
  int *v96;
  int v97;
  int v98;
  int *v99;
  int *v100;
  int v101;
  int *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  int v106;
  int *v107;
  __int128 v108;
  _DWORD *v109;
  int *v110;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned __int8 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  __int128 v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;

  v6 = a1 + 2;
  v5 = *a1;
  v7 = *a1 >> 31;
  v109 = a1 + 2;
  if (v5 >> 31 == v5)
  {
    *(_QWORD *)&v137 = *v6;
    v7 = v5;
  }
  else
  {
    v137 = *(_OWORD *)v6;
    v138 = a1[6];
  }
  v9 = 0;
  v10 = v7 ^ v5;
  v11 = a1[8];
  v136 = v10;
  v139 = v11;
  do
  {
    v12 = sub_100252F24(a3, (uint64_t)&a1[v9 + 10], &v136);
    v9 += 10;
  }
  while (v12);
  v110 = &a1[v9];
  v13 = a2;
  if (v9 == 10)
  {
    do
    {
      if ((unint64_t)v110 >= v13)
        break;
      v16 = v13 - 40;
      v17 = sub_100252F24(a3, v13 - 40, &v136);
      v13 = v16;
    }
    while (!v17);
  }
  else
  {
    do
    {
      v14 = v13 - 40;
      v15 = sub_100252F24(a3, v13 - 40, &v136);
      v13 = v14;
    }
    while (!v15);
  }
  if ((unint64_t)v110 >= v13)
  {
    v25 = v110;
    result = v110 - 10;
    v96 = a1;
    if (v110 - 10 != a1)
      goto LABEL_224;
LABEL_220:
    v97 = *result;
    v98 = v136;
    if (*result != v136)
      goto LABEL_233;
    goto LABEL_221;
  }
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v18 = 0;
  v19 = 0;
  v134 = 0;
  v135 = 0;
  v133 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v125 = 0;
  v123 = 0;
  v124 = 0;
  v121 = 0;
  v122 = 0;
  v120 = 0;
  v24 = v13;
  v25 = v110;
  do
  {
    v26 = *v25;
    v27 = *v25 >> 31;
    v29 = v25 + 2;
    v28 = *((_QWORD *)v25 + 1);
    if (v27 == *v25)
    {
      v30 = *(_DWORD *)v24;
      if (v26 == *(_DWORD *)v24)
      {
        v31 = 0;
        *v29 = *(_QWORD *)(v24 + 8);
        v32 = 0;
        if (*(_DWORD *)v24)
          goto LABEL_27;
        goto LABEL_24;
      }
      v31 = 0;
    }
    else
    {
      v140 = *((_QWORD *)v25 + 2);
      v141 = v25[6];
      v31 = v27 ^ v26;
      v30 = *(_DWORD *)v24;
      if (v26 == *(_DWORD *)v24)
      {
        v33 = *(_OWORD *)(v24 + 8);
        v25[6] = *(_DWORD *)(v24 + 24);
        *(_OWORD *)v29 = v33;
        v32 = v31 >> 31;
        if (*(_DWORD *)v24 != v31)
          goto LABEL_27;
        goto LABEL_24;
      }
    }
    v34 = v30 ^ (v30 >> 31);
    v35 = (__int128 *)(v24 + 8);
    if (v34)
    {
      v36 = *v35;
      v25[6] = *(_DWORD *)(v24 + 24);
      *(_OWORD *)v29 = v36;
      *v25 = v34;
      v32 = v31 >> 31;
      if (*(_DWORD *)v24 != v31)
        goto LABEL_27;
    }
    else
    {
      *((_QWORD *)v25 + 1) = *(_QWORD *)v35;
      *v25 = 0;
      v32 = v31 >> 31;
      if (*(_DWORD *)v24 != v31)
      {
LABEL_27:
        *(_QWORD *)(v24 + 8) = v28;
        if (v32 != v31)
        {
          *(_QWORD *)(v24 + 16) = v140;
          *(_DWORD *)(v24 + 24) = v141;
          *(_DWORD *)v24 = v32 ^ v31;
        }
        else
        {
          *(_DWORD *)v24 = 0;
        }
        goto LABEL_30;
      }
    }
LABEL_24:
    *(_QWORD *)(v24 + 8) = v28;
    if (v32 != v31)
    {
      *(_QWORD *)(v24 + 16) = v140;
      *(_DWORD *)(v24 + 24) = v141;
    }
LABEL_30:
    v37 = v25[8];
    v25[8] = *(_DWORD *)(v24 + 32);
    *(_DWORD *)(v24 + 32) = v37;
    for (i = v25 + 18; ; i += 10)
    {
      v39 = v136 >> 31;
      if (v136 >> 31 == v136)
      {
        v40 = v136;
      }
      else
      {
        v18 = BYTE8(v137);
        v19 = BYTE9(v137);
        HIDWORD(v135) = BYTE10(v137);
        LODWORD(v135) = BYTE11(v137);
        HIDWORD(v134) = BYTE12(v137);
        LODWORD(v134) = BYTE13(v137);
        v133 = BYTE14(v137);
        v20 = HIBYTE(v137);
        v21 = v138;
        v22 = BYTE1(v138);
        v23 = BYTE2(v138);
        v40 = v136 >> 31;
        v3 = HIBYTE(v138);
      }
      v41 = BYTE7(v137);
      v42 = v40 ^ v136;
      v43 = *(i - 8);
      v44 = v42 >> 31;
      if (v43 >> 31 == v43)
      {
        if (v44 != v42)
          continue;
        v45 = *((_QWORD *)i - 3);
        if (v45 < (unint64_t)v137)
          continue;
        v46 = 0;
        v47 = 0;
        if (v39 != v136)
          goto LABEL_39;
      }
      else
      {
        if (v44 != v42)
        {
          v48 = *((unsigned __int8 *)i - 24);
          if (v48 < v137)
            continue;
          if (v48 <= v137)
          {
            v49 = *((unsigned __int8 *)i - 23);
            if (v49 < BYTE1(v137))
              continue;
            if (v49 <= BYTE1(v137))
            {
              v50 = *((unsigned __int8 *)i - 22);
              if (v50 < BYTE2(v137))
                continue;
              if (v50 <= BYTE2(v137))
              {
                v51 = *((unsigned __int8 *)i - 21);
                if (v51 < BYTE3(v137))
                  continue;
                if (v51 <= BYTE3(v137))
                {
                  v52 = *((unsigned __int8 *)i - 20);
                  if (v52 < BYTE4(v137))
                    continue;
                  if (v52 <= BYTE4(v137))
                  {
                    v53 = *((unsigned __int8 *)i - 19);
                    if (v53 < BYTE5(v137))
                      continue;
                    if (v53 <= BYTE5(v137))
                    {
                      v54 = *((unsigned __int8 *)i - 18);
                      if (v54 < BYTE6(v137))
                        continue;
                      if (v54 <= BYTE6(v137))
                      {
                        v55 = *((unsigned __int8 *)i - 17);
                        if (v55 < v41)
                          continue;
                        if (v55 <= v41)
                        {
                          v56 = *((unsigned __int8 *)i - 16);
                          if (v56 < v18)
                            continue;
                          if (v18 >= v56)
                          {
                            v57 = *((unsigned __int8 *)i - 15);
                            if (v57 < v19)
                              continue;
                            if (v19 >= v57)
                            {
                              v58 = *((unsigned __int8 *)i - 14);
                              if (v58 < HIDWORD(v135))
                                continue;
                              if (HIDWORD(v135) >= v58)
                              {
                                v59 = *((unsigned __int8 *)i - 13);
                                if (v59 < v135)
                                  continue;
                                if (v135 >= v59)
                                {
                                  v60 = *((unsigned __int8 *)i - 12);
                                  if (v60 < HIDWORD(v134))
                                    continue;
                                  if (HIDWORD(v134) >= v60)
                                  {
                                    v61 = *((unsigned __int8 *)i - 11);
                                    if (v61 < v134)
                                      continue;
                                    if (v134 >= v61)
                                    {
                                      v62 = *((unsigned __int8 *)i - 10);
                                      if (v62 < v133)
                                        continue;
                                      if (v133 >= v62)
                                      {
                                        v63 = *((unsigned __int8 *)i - 9);
                                        if (v63 < v20)
                                          continue;
                                        if (v20 >= v63)
                                        {
                                          v64 = *((unsigned __int8 *)i - 8);
                                          if (v64 < v21)
                                            continue;
                                          if (v21 >= v64)
                                          {
                                            v65 = *((unsigned __int8 *)i - 7);
                                            if (v65 < v22)
                                              continue;
                                            if (v22 >= v65)
                                            {
                                              v66 = *((unsigned __int8 *)i - 6);
                                              if (v66 < v23
                                                || v23 >= v66 && *((unsigned __int8 *)i - 5) < v3)
                                              {
                                                continue;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v45 = *((_QWORD *)i - 3);
        LODWORD(v132) = *((unsigned __int8 *)i - 15);
        HIDWORD(v132) = *((unsigned __int8 *)i - 16);
        HIDWORD(v130) = *((unsigned __int8 *)i - 13);
        v131 = *((unsigned __int8 *)i - 14);
        HIDWORD(v129) = *((unsigned __int8 *)i - 11);
        LODWORD(v130) = *((unsigned __int8 *)i - 12);
        HIDWORD(v128) = *((unsigned __int8 *)i - 9);
        LODWORD(v129) = *((unsigned __int8 *)i - 10);
        HIDWORD(v127) = *((unsigned __int8 *)i - 7);
        LODWORD(v128) = *((unsigned __int8 *)i - 8);
        v126 = *((_BYTE *)i - 5);
        LODWORD(v127) = *((unsigned __int8 *)i - 6);
        v46 = (v43 >> 31) ^ v43;
        v47 = v46 >> 31;
        if (v39 != v136)
        {
LABEL_39:
          if (v47 != v46
            && (v45 > v137
             || v45 >= v137
             && (BYTE1(v45) > BYTE1(v137)
              || BYTE1(v45) >= BYTE1(v137)
              && (BYTE2(v45) > BYTE2(v137)
               || BYTE2(v45) >= BYTE2(v137)
               && (BYTE3(v45) > BYTE3(v137)
                || BYTE3(v45) >= BYTE3(v137)
                && (BYTE4(v45) > BYTE4(v137)
                 || BYTE4(v45) >= BYTE4(v137)
                 && (BYTE5(v45) > BYTE5(v137)
                  || BYTE5(v45) >= BYTE5(v137)
                  && (BYTE6(v45) > BYTE6(v137)
                   || BYTE6(v45) >= BYTE6(v137)
                   && (HIBYTE(v45) > v41
                    || HIBYTE(v45) >= v41
                    && (BYTE8(v137) < HIDWORD(v132)
                     || HIDWORD(v132) >= BYTE8(v137)
                     && (BYTE9(v137) < v132
                      || v132 >= BYTE9(v137)
                      && (BYTE10(v137) < v131
                       || v131 >= BYTE10(v137)
                       && (BYTE11(v137) < HIDWORD(v130)
                        || HIDWORD(v130) >= BYTE11(v137)
                        && (BYTE12(v137) < v130
                         || v130 >= BYTE12(v137)
                         && (BYTE13(v137) < HIDWORD(v129)
                          || HIDWORD(v129) >= BYTE13(v137)
                          && (BYTE14(v137) < v129
                           || v129 >= BYTE14(v137)
                           && (HIBYTE(v137) < HIDWORD(v128)
                            || HIDWORD(v128) >= HIBYTE(v137)
                            && (v138 < v128
                             || v128 >= v138
                             && (BYTE1(v138) < HIDWORD(v127)
                              || HIDWORD(v127) >= BYTE1(v138)
                              && (BYTE2(v138) < v127
                               || v127 >= BYTE2(v138) && HIBYTE(v138) < v126))))))))))))))))))))
          {
            break;
          }
          goto LABEL_84;
        }
      }
      if (v47 != v46 || (unint64_t)v137 < v45)
        break;
LABEL_84:
      if (!sub_1000BC3F8(i, &v139))
        break;
    }
    v25 = i - 8;
    while (1)
    {
      while (1)
      {
        v24 -= 40;
        v67 = v136 >> 31;
        v68 = v136;
        if (v136 >> 31 != v136)
        {
          HIDWORD(v124) = BYTE9(v137);
          v125 = BYTE8(v137);
          HIDWORD(v123) = BYTE11(v137);
          LODWORD(v124) = BYTE10(v137);
          HIDWORD(v122) = BYTE13(v137);
          LODWORD(v123) = BYTE12(v137);
          HIDWORD(v121) = HIBYTE(v137);
          LODWORD(v122) = BYTE14(v137);
          HIDWORD(v120) = BYTE1(v138);
          LODWORD(v121) = v138;
          v68 = v136 >> 31;
          v119 = HIBYTE(v138);
          LODWORD(v120) = BYTE2(v138);
        }
        v69 = BYTE7(v137);
        v70 = v68 ^ v136;
        v71 = *(int *)v24 >> 31;
        v72 = (v68 ^ v136) >> 31;
        if (v71 != *(_DWORD *)v24)
          break;
        if (v72 != v70)
          goto LABEL_13;
        v73 = *(_QWORD *)(v24 + 8);
        if (v73 < (unint64_t)v137)
          goto LABEL_13;
        v74 = 0;
        v75 = 0;
        if (v67 != v136)
          goto LABEL_133;
LABEL_215:
        if (v75 == v74 && (unint64_t)v137 >= v73)
          goto LABEL_217;
      }
      if (v72 != v70)
      {
        v76 = *(unsigned __int8 *)(v24 + 8);
        if (v76 < v137)
          break;
        if (v76 <= v137)
        {
          v77 = *(unsigned __int8 *)(v24 + 9);
          if (v77 < BYTE1(v137))
            break;
          if (v77 <= BYTE1(v137))
          {
            v78 = *(unsigned __int8 *)(v24 + 10);
            if (v78 < BYTE2(v137))
              break;
            if (v78 <= BYTE2(v137))
            {
              v79 = *(unsigned __int8 *)(v24 + 11);
              if (v79 < BYTE3(v137))
                break;
              if (v79 <= BYTE3(v137))
              {
                v80 = *(unsigned __int8 *)(v24 + 12);
                if (v80 < BYTE4(v137))
                  break;
                if (v80 <= BYTE4(v137))
                {
                  v81 = *(unsigned __int8 *)(v24 + 13);
                  if (v81 < BYTE5(v137))
                    break;
                  if (v81 <= BYTE5(v137))
                  {
                    v82 = *(unsigned __int8 *)(v24 + 14);
                    if (v82 < BYTE6(v137))
                      break;
                    if (v82 <= BYTE6(v137))
                    {
                      v83 = *(unsigned __int8 *)(v24 + 15);
                      if (v83 < v69)
                        break;
                      if (v83 <= v69)
                      {
                        v84 = *(unsigned __int8 *)(v24 + 16);
                        if (v84 < v125)
                          break;
                        if (v125 >= v84)
                        {
                          v85 = *(unsigned __int8 *)(v24 + 17);
                          if (v85 < HIDWORD(v124))
                            break;
                          if (HIDWORD(v124) >= v85)
                          {
                            v86 = *(unsigned __int8 *)(v24 + 18);
                            if (v86 < v124)
                              break;
                            if (v124 >= v86)
                            {
                              v87 = *(unsigned __int8 *)(v24 + 19);
                              if (v87 < HIDWORD(v123))
                                break;
                              if (HIDWORD(v123) >= v87)
                              {
                                v88 = *(unsigned __int8 *)(v24 + 20);
                                if (v88 < v123)
                                  break;
                                if (v123 >= v88)
                                {
                                  v89 = *(unsigned __int8 *)(v24 + 21);
                                  if (v89 < HIDWORD(v122))
                                    break;
                                  if (HIDWORD(v122) >= v89)
                                  {
                                    v90 = *(unsigned __int8 *)(v24 + 22);
                                    if (v90 < v122)
                                      break;
                                    if (v122 >= v90)
                                    {
                                      v91 = *(unsigned __int8 *)(v24 + 23);
                                      if (v91 < HIDWORD(v121))
                                        break;
                                      if (HIDWORD(v121) >= v91)
                                      {
                                        v92 = *(unsigned __int8 *)(v24 + 24);
                                        if (v92 < v121)
                                          break;
                                        if (v121 >= v92)
                                        {
                                          v93 = *(unsigned __int8 *)(v24 + 25);
                                          if (v93 < HIDWORD(v120))
                                            break;
                                          if (HIDWORD(v120) >= v93)
                                          {
                                            v94 = *(unsigned __int8 *)(v24 + 26);
                                            if (v94 < v120
                                              || v120 >= v94
                                              && *(unsigned __int8 *)(v24 + 27) < v119)
                                            {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v73 = *(_QWORD *)(v24 + 8);
      HIDWORD(v117) = *(unsigned __int8 *)(v24 + 17);
      v118 = *(unsigned __int8 *)(v24 + 16);
      HIDWORD(v116) = *(unsigned __int8 *)(v24 + 19);
      LODWORD(v117) = *(unsigned __int8 *)(v24 + 18);
      HIDWORD(v115) = *(unsigned __int8 *)(v24 + 21);
      LODWORD(v116) = *(unsigned __int8 *)(v24 + 20);
      HIDWORD(v114) = *(unsigned __int8 *)(v24 + 23);
      LODWORD(v115) = *(unsigned __int8 *)(v24 + 22);
      HIDWORD(v113) = *(unsigned __int8 *)(v24 + 25);
      LODWORD(v114) = *(unsigned __int8 *)(v24 + 24);
      v112 = *(_BYTE *)(v24 + 27);
      LODWORD(v113) = *(unsigned __int8 *)(v24 + 26);
      v74 = v71 ^ *(_DWORD *)v24;
      v75 = v74 >> 31;
      if (v67 == v136)
        goto LABEL_215;
LABEL_133:
      if (v75 == v74
        || v73 <= v137
        && (v73 < v137
         || BYTE1(v73) <= BYTE1(v137)
         && (BYTE1(v73) < BYTE1(v137)
          || BYTE2(v73) <= BYTE2(v137)
          && (BYTE2(v73) < BYTE2(v137)
           || BYTE3(v73) <= BYTE3(v137)
           && (BYTE3(v73) < BYTE3(v137)
            || BYTE4(v73) <= BYTE4(v137)
            && (BYTE4(v73) < BYTE4(v137)
             || BYTE5(v73) <= BYTE5(v137)
             && (BYTE5(v73) < BYTE5(v137)
              || BYTE6(v73) <= BYTE6(v137)
              && (BYTE6(v73) < BYTE6(v137)
               || HIBYTE(v73) <= v69
               && (HIBYTE(v73) < v69
                || BYTE8(v137) >= v118
                && (v118 < BYTE8(v137)
                 || BYTE9(v137) >= HIDWORD(v117)
                 && (HIDWORD(v117) < BYTE9(v137)
                  || BYTE10(v137) >= v117
                  && (v117 < BYTE10(v137)
                   || BYTE11(v137) >= HIDWORD(v116)
                   && (HIDWORD(v116) < BYTE11(v137)
                    || BYTE12(v137) >= v116
                    && (v116 < BYTE12(v137)
                     || BYTE13(v137) >= HIDWORD(v115)
                     && (HIDWORD(v115) < BYTE13(v137)
                      || BYTE14(v137) >= v115
                      && (v115 < BYTE14(v137)
                       || HIBYTE(v137) >= HIDWORD(v114)
                       && (HIDWORD(v114) < HIBYTE(v137)
                        || v138 >= v114
                        && (v114 < v138
                         || BYTE1(v138) >= HIDWORD(v113)
                         && (HIDWORD(v113) < BYTE1(v138)
                          || BYTE2(v138) >= v113
                          && (v113 < BYTE2(v138) || HIBYTE(v138) >= v112))))))))))))))))))))
      {
LABEL_217:
        if (sub_1000BC3F8((_DWORD *)(v24 + 32), &v139))
          break;
      }
    }
LABEL_13:
    ;
  }
  while ((unint64_t)v25 < v24);
  v96 = a1;
  result = v25 - 10;
  if (v25 - 10 == a1)
    goto LABEL_220;
LABEL_224:
  if (*v96 == *result)
  {
    v100 = v25 - 8;
    if (*v96 == *v96 >> 31)
    {
      *(_QWORD *)v109 = *(_QWORD *)v100;
    }
    else
    {
      v105 = *(_OWORD *)v100;
      v109[4] = *(v25 - 4);
      *(_OWORD *)v109 = v105;
    }
  }
  else
  {
    v101 = *result ^ (*result >> 31);
    v102 = v25 - 8;
    if (v101)
    {
      v103 = *(_OWORD *)v102;
      v109[4] = *(v25 - 4);
      *(_OWORD *)v109 = v103;
      *v96 = v101;
    }
    else
    {
      *((_QWORD *)v96 + 1) = *(_QWORD *)v102;
      *v96 = 0;
    }
  }
  v96[8] = *(v25 - 2);
  v97 = *result;
  v98 = v136;
  if (*result != v136)
  {
LABEL_233:
    v106 = v98 ^ (v98 >> 31);
    v107 = v25 - 8;
    if (v106)
    {
      v108 = v137;
      *(v25 - 4) = v138;
      *(_OWORD *)v107 = v108;
      *result = v106;
    }
    else
    {
      *(_QWORD *)v107 = v137;
      *result = 0;
    }
    goto LABEL_236;
  }
LABEL_221:
  v99 = v25 - 8;
  if (v97 == v97 >> 31)
  {
    *(_QWORD *)v99 = v137;
  }
  else
  {
    v104 = v137;
    *(v25 - 4) = v138;
    *(_OWORD *)v99 = v104;
  }
LABEL_236:
  *(v25 - 2) = v139;
  return result;
}

BOOL sub_1002557EC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  __int128 v40;
  int v41;
  __int128 *v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 10;
      if (!sub_100252F24(a3, (uint64_t)(a2 - 10), (_DWORD *)a1))
        return 1;
      v9 = *(_DWORD *)a1;
      v10 = *(int *)a1 >> 31;
      v12 = (_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 8);
      if (v10 == *(_DWORD *)a1)
      {
        v13 = *v8;
        if (v9 == *v8)
        {
          v14 = 0;
          *v12 = *((_QWORD *)a2 - 4);
          v15 = 0;
          if (*v8)
            goto LABEL_48;
          goto LABEL_45;
        }
        v14 = 0;
      }
      else
      {
        v45 = *(_QWORD *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        v14 = v10 ^ v9;
        v13 = *v8;
        if (v9 == *v8)
        {
          v40 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(a1 + 24) = *(a2 - 4);
          *(_OWORD *)v12 = v40;
          v15 = v14 >> 31;
          if (*v8 != v14)
          {
LABEL_48:
            *((_QWORD *)a2 - 4) = v11;
            if (v15 != v14)
            {
              *((_QWORD *)a2 - 3) = v45;
              *(a2 - 4) = v46;
              *(a2 - 10) = v15 ^ v14;
            }
            else
            {
              *v8 = 0;
            }
LABEL_51:
            v44 = *(_DWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = *(a2 - 2);
            *(a2 - 2) = v44;
            return 1;
          }
LABEL_45:
          *((_QWORD *)a2 - 4) = v11;
          if (v15 != v14)
          {
            *((_QWORD *)a2 - 3) = v45;
            *(a2 - 4) = v46;
          }
          goto LABEL_51;
        }
      }
      v41 = v13 ^ (v13 >> 31);
      v42 = (__int128 *)(a2 - 8);
      if (v41)
      {
        v43 = *v42;
        *(_DWORD *)(a1 + 24) = *(a2 - 4);
        *(_OWORD *)v12 = v43;
        *(_DWORD *)a1 = v41;
        v15 = v14 >> 31;
        if (*v8 != v14)
          goto LABEL_48;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v42;
        *(_DWORD *)a1 = 0;
        v15 = v14 >> 31;
        if (*v8 != v14)
          goto LABEL_48;
      }
      goto LABEL_45;
    case 3uLL:
      sub_1002539B4((int *)a1, a1 + 40, (uint64_t)(a2 - 10), a3);
      return 1;
    case 4uLL:
      sub_100255C6C(a1, a1 + 40, a1 + 80, (uint64_t)(a2 - 10), a3);
      return 1;
    case 5uLL:
      sub_1002560A8(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)(a2 - 10), a3);
      return 1;
    default:
      v16 = (_DWORD *)(a1 + 80);
      sub_1002539B4((int *)a1, a1 + 40, a1 + 80, a3);
      v17 = (_DWORD *)(a1 + 120);
      if ((_DWORD *)(a1 + 120) == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      while (2)
      {
        if (!sub_100252F24(a3, (uint64_t)v17, v16))
          goto LABEL_11;
        v21 = v17 + 2;
        v20 = *v17;
        v22 = (int)*v17 >> 31;
        if (v20 >> 31 == v20)
        {
          *(_QWORD *)&v46 = *v21;
          v22 = v20;
        }
        else
        {
          v46 = *(_OWORD *)v21;
          v47 = v17[6];
        }
        v23 = v22 ^ v20;
        v24 = v17[8];
        LODWORD(v45) = v23;
        v48 = v24;
        v25 = v18;
        while (2)
        {
          v26 = (_DWORD *)(a1 + v25);
          v27 = *(_DWORD *)(a1 + v25 + 120);
          v28 = *(_DWORD *)(a1 + v25 + 80);
          if (v27 == v28)
          {
            v29 = v26 + 22;
            v30 = v26 + 32;
            if (v27 == v27 >> 31)
            {
              *(_QWORD *)v30 = *(_QWORD *)v29;
              v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80)
                goto LABEL_31;
            }
            else
            {
              *(_OWORD *)v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80)
                goto LABEL_31;
            }
LABEL_27:
            v25 -= 40;
            if (!sub_100252F24(a3, (uint64_t)&v45, (_DWORD *)(v31 + 40)))
            {
              v35 = a1 + v25 + 120;
              v36 = *(_DWORD *)v35;
              v37 = v45;
              if (*(_DWORD *)v35 != (_DWORD)v45)
                goto LABEL_29;
LABEL_32:
              v39 = (_QWORD *)(v35 + 8);
              if (v36 == v36 >> 31)
              {
                *v39 = v46;
              }
              else
              {
                *(_OWORD *)v39 = v46;
                *(_DWORD *)(v35 + 24) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        v32 = v28 ^ (v28 >> 31);
        v33 = v26 + 22;
        v34 = v26 + 32;
        if (v32)
        {
          *v34 = *v33;
          v26[36] = v26[26];
          v26[30] = v32;
          v31 = a1 + v25;
          *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
          if (v25 == -80)
            goto LABEL_31;
          goto LABEL_27;
        }
        *(_QWORD *)v34 = *(_QWORD *)v33;
        v26[30] = 0;
        v31 = a1 + v25;
        *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
        if (v25 != -80)
          goto LABEL_27;
LABEL_31:
        v35 = a1;
        v36 = *(_DWORD *)a1;
        v37 = v45;
        if (*(_DWORD *)a1 == (_DWORD)v45)
          goto LABEL_32;
LABEL_29:
        v38 = v37 ^ (v37 >> 31);
        if (v38)
        {
          *(_OWORD *)(v35 + 8) = v46;
          *(_DWORD *)(v35 + 24) = v47;
          *(_DWORD *)v35 = v38;
        }
        else
        {
          *(_QWORD *)(v35 + 8) = v46;
          *(_DWORD *)v35 = 0;
        }
LABEL_10:
        *(_DWORD *)(v35 + 32) = v48;
        if (++v19 == 8)
          return v17 + 10 == a2;
LABEL_11:
        v16 = v17;
        v18 += 40;
        v17 += 10;
        if (v17 != a2)
          continue;
        return 1;
      }
  }
}

BOOL sub_100255C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 *v20;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;

  sub_1002539B4((int *)a1, a2, a3, a5);
  result = sub_100252F24(a5, a4, (_DWORD *)a3);
  if (result)
  {
    v11 = *(_DWORD *)a3;
    v12 = *(int *)a3 >> 31;
    v14 = (_QWORD *)(a3 + 8);
    v13 = *(_QWORD *)(a3 + 8);
    if (v12 == *(_DWORD *)a3)
    {
      v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        v16 = 0;
        *v14 = *(_QWORD *)(a4 + 8);
        v17 = 0;
        if (*(_DWORD *)a4)
          goto LABEL_15;
        goto LABEL_12;
      }
      v16 = 0;
    }
    else
    {
      v45 = *(_QWORD *)(a3 + 16);
      v46 = *(_DWORD *)(a3 + 24);
      v16 = v12 ^ v11;
      v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        v18 = *(_OWORD *)(a4 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
        *(_OWORD *)v14 = v18;
        v17 = v16 >> 31;
        if (*(_DWORD *)a4 != v16)
        {
LABEL_15:
          *(_QWORD *)(a4 + 8) = v13;
          if (v17 != v16)
          {
            *(_QWORD *)(a4 + 16) = v45;
            *(_DWORD *)(a4 + 24) = v46;
            *(_DWORD *)a4 = v17 ^ v16;
          }
          else
          {
            *(_DWORD *)a4 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(_QWORD *)(a4 + 8) = v13;
        if (v17 != v16)
        {
          *(_QWORD *)(a4 + 16) = v45;
          *(_DWORD *)(a4 + 24) = v46;
        }
LABEL_18:
        v22 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
        *(_DWORD *)(a4 + 32) = v22;
        result = sub_100252F24(a5, a3, (_DWORD *)a2);
        if (!result)
          return result;
        v23 = *(_DWORD *)a2;
        v24 = *(int *)a2 >> 31;
        v26 = (_QWORD *)(a2 + 8);
        v25 = *(_QWORD *)(a2 + 8);
        if (v24 == *(_DWORD *)a2)
        {
          v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            v28 = 0;
            *v26 = *v14;
            v29 = 0;
            if (*(_DWORD *)a3)
              goto LABEL_32;
            goto LABEL_29;
          }
          v28 = 0;
        }
        else
        {
          v45 = *(_QWORD *)(a2 + 16);
          v46 = *(_DWORD *)(a2 + 24);
          v28 = v24 ^ v23;
          v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            v30 = *(_OWORD *)v14;
            *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
            *(_OWORD *)v26 = v30;
            v29 = v28 >> 31;
            if (*(_DWORD *)a3 != v28)
            {
LABEL_32:
              *v14 = v25;
              if (v29 != v28)
              {
                *(_QWORD *)(a3 + 16) = v45;
                *(_DWORD *)(a3 + 24) = v46;
                *(_DWORD *)a3 = v29 ^ v28;
              }
              else
              {
                *(_DWORD *)a3 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *v14 = v25;
            if (v29 != v28)
            {
              *(_QWORD *)(a3 + 16) = v45;
              *(_DWORD *)(a3 + 24) = v46;
            }
LABEL_35:
            v33 = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
            *(_DWORD *)(a3 + 32) = v33;
            result = sub_100252F24(a5, a2, (_DWORD *)a1);
            if (!result)
              return result;
            v34 = *(_DWORD *)a1;
            v35 = *(int *)a1 >> 31;
            v37 = (_QWORD *)(a1 + 8);
            v36 = *(_QWORD *)(a1 + 8);
            if (v35 == *(_DWORD *)a1)
            {
              v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                v39 = 0;
                *v37 = *v26;
                v40 = 0;
                if (*(_DWORD *)a2)
                  goto LABEL_49;
                goto LABEL_46;
              }
              v39 = 0;
            }
            else
            {
              v45 = *(_QWORD *)(a1 + 16);
              v46 = *(_DWORD *)(a1 + 24);
              v39 = v35 ^ v34;
              v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                v41 = *(_OWORD *)v26;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                *(_OWORD *)v37 = v41;
                v40 = v39 >> 31;
                if (*(_DWORD *)a2 != v39)
                {
LABEL_49:
                  *v26 = v36;
                  if (v40 != v39)
                  {
                    *(_QWORD *)(a2 + 16) = v45;
                    *(_DWORD *)(a2 + 24) = v46;
                    *(_DWORD *)a2 = v40 ^ v39;
                  }
                  else
                  {
                    *(_DWORD *)a2 = 0;
                  }
LABEL_52:
                  v44 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                  *(_DWORD *)(a2 + 32) = v44;
                  return result;
                }
LABEL_46:
                *v26 = v36;
                if (v40 != v39)
                {
                  *(_QWORD *)(a2 + 16) = v45;
                  *(_DWORD *)(a2 + 24) = v46;
                }
                goto LABEL_52;
              }
            }
            v42 = v38 ^ (v38 >> 31);
            if (v42)
            {
              v43 = *(_OWORD *)v26;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_OWORD *)v37 = v43;
              *(_DWORD *)a1 = v42;
              v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39)
                goto LABEL_49;
            }
            else
            {
              *(_QWORD *)(a1 + 8) = *v26;
              *(_DWORD *)a1 = 0;
              v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39)
                goto LABEL_49;
            }
            goto LABEL_46;
          }
        }
        v31 = v27 ^ (v27 >> 31);
        if (v31)
        {
          v32 = *(_OWORD *)v14;
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)v26 = v32;
          *(_DWORD *)a2 = v31;
          v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28)
            goto LABEL_32;
        }
        else
        {
          *(_QWORD *)(a2 + 8) = *v14;
          *(_DWORD *)a2 = 0;
          v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28)
            goto LABEL_32;
        }
        goto LABEL_29;
      }
    }
    v19 = v15 ^ (v15 >> 31);
    v20 = (__int128 *)(a4 + 8);
    if (v19)
    {
      v21 = *v20;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)v14 = v21;
      *(_DWORD *)a3 = v19;
      v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = *(_QWORD *)v20;
      *(_DWORD *)a3 = 0;
      v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  return result;
}

BOOL sub_1002560A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 result;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 *v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;

  sub_100255C6C(a1, a2, a3, a4, a6);
  result = sub_100252F24(a6, a5, (_DWORD *)a4);
  if (!result)
    return result;
  v13 = *(_DWORD *)a4;
  v14 = *(int *)a4 >> 31;
  v16 = (_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(a4 + 8);
  if (v14 == *(_DWORD *)a4)
  {
    v17 = *(_DWORD *)a5;
    if (v13 == *(_DWORD *)a5)
    {
      v18 = 0;
      *v16 = *(_QWORD *)(a5 + 8);
      v19 = 0;
      if (*(_DWORD *)a5)
        goto LABEL_15;
      goto LABEL_12;
    }
    v18 = 0;
LABEL_10:
    v21 = v17 ^ (v17 >> 31);
    v22 = (__int128 *)(a5 + 8);
    if (v21)
    {
      v23 = *v22;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)v16 = v23;
      *(_DWORD *)a4 = v21;
      v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a4 + 8) = *(_QWORD *)v22;
      *(_DWORD *)a4 = 0;
      v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18)
        goto LABEL_15;
    }
    goto LABEL_12;
  }
  v58 = *(_QWORD *)(a4 + 16);
  v59 = *(_DWORD *)(a4 + 24);
  v18 = v14 ^ v13;
  v17 = *(_DWORD *)a5;
  if (v13 != *(_DWORD *)a5)
    goto LABEL_10;
  v20 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)v16 = v20;
  v19 = v18 >> 31;
  if (*(_DWORD *)a5 != v18)
  {
LABEL_15:
    *(_QWORD *)(a5 + 8) = v15;
    if (v19 != v18)
    {
      *(_QWORD *)(a5 + 16) = v58;
      *(_DWORD *)(a5 + 24) = v59;
      *(_DWORD *)a5 = v19 ^ v18;
    }
    else
    {
      *(_DWORD *)a5 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(_QWORD *)(a5 + 8) = v15;
  if (v19 != v18)
  {
    *(_QWORD *)(a5 + 16) = v58;
    *(_DWORD *)(a5 + 24) = v59;
  }
LABEL_18:
  v24 = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v24;
  result = sub_100252F24(a6, a4, (_DWORD *)a3);
  if (!result)
    return result;
  v25 = *(_DWORD *)a3;
  v26 = *(int *)a3 >> 31;
  v28 = (_QWORD *)(a3 + 8);
  v27 = *(_QWORD *)(a3 + 8);
  if (v26 == *(_DWORD *)a3)
  {
    v29 = *(_DWORD *)a4;
    if (v25 == *(_DWORD *)a4)
    {
      v30 = 0;
      *v28 = *v16;
      v31 = 0;
      if (*(_DWORD *)a4)
        goto LABEL_32;
      goto LABEL_29;
    }
    v30 = 0;
LABEL_27:
    v33 = v29 ^ (v29 >> 31);
    if (v33)
    {
      v34 = *(_OWORD *)v16;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)v28 = v34;
      *(_DWORD *)a3 = v33;
      v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = *v16;
      *(_DWORD *)a3 = 0;
      v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30)
        goto LABEL_32;
    }
    goto LABEL_29;
  }
  v58 = *(_QWORD *)(a3 + 16);
  v59 = *(_DWORD *)(a3 + 24);
  v30 = v26 ^ v25;
  v29 = *(_DWORD *)a4;
  if (v25 != *(_DWORD *)a4)
    goto LABEL_27;
  v32 = *(_OWORD *)v16;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)v28 = v32;
  v31 = v30 >> 31;
  if (*(_DWORD *)a4 != v30)
  {
LABEL_32:
    *v16 = v27;
    if (v31 != v30)
    {
      *(_QWORD *)(a4 + 16) = v58;
      *(_DWORD *)(a4 + 24) = v59;
      *(_DWORD *)a4 = v31 ^ v30;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *v16 = v27;
  if (v31 != v30)
  {
    *(_QWORD *)(a4 + 16) = v58;
    *(_DWORD *)(a4 + 24) = v59;
  }
LABEL_35:
  v35 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = v35;
  result = sub_100252F24(a6, a3, (_DWORD *)a2);
  if (!result)
    return result;
  v36 = *(_DWORD *)a2;
  v37 = *(int *)a2 >> 31;
  v39 = (_QWORD *)(a2 + 8);
  v38 = *(_QWORD *)(a2 + 8);
  if (v37 == *(_DWORD *)a2)
  {
    v40 = *(_DWORD *)a3;
    if (v36 == *(_DWORD *)a3)
    {
      v41 = 0;
      *v39 = *v28;
      v42 = 0;
      if (*(_DWORD *)a3)
        goto LABEL_49;
      goto LABEL_46;
    }
    v41 = 0;
LABEL_44:
    v44 = v40 ^ (v40 >> 31);
    if (v44)
    {
      v45 = *(_OWORD *)v28;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)v39 = v45;
      *(_DWORD *)a2 = v44;
      v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41)
        goto LABEL_49;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = *v28;
      *(_DWORD *)a2 = 0;
      v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41)
        goto LABEL_49;
    }
    goto LABEL_46;
  }
  v58 = *(_QWORD *)(a2 + 16);
  v59 = *(_DWORD *)(a2 + 24);
  v41 = v37 ^ v36;
  v40 = *(_DWORD *)a3;
  if (v36 != *(_DWORD *)a3)
    goto LABEL_44;
  v43 = *(_OWORD *)v28;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)v39 = v43;
  v42 = v41 >> 31;
  if (*(_DWORD *)a3 != v41)
  {
LABEL_49:
    *v28 = v38;
    if (v42 != v41)
    {
      *(_QWORD *)(a3 + 16) = v58;
      *(_DWORD *)(a3 + 24) = v59;
      *(_DWORD *)a3 = v42 ^ v41;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_52;
  }
LABEL_46:
  *v28 = v38;
  if (v42 != v41)
  {
    *(_QWORD *)(a3 + 16) = v58;
    *(_DWORD *)(a3 + 24) = v59;
  }
LABEL_52:
  v46 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = v46;
  result = sub_100252F24(a6, a2, (_DWORD *)a1);
  if (!result)
    return result;
  v47 = *(_DWORD *)a1;
  v48 = *(int *)a1 >> 31;
  v50 = (_QWORD *)(a1 + 8);
  v49 = *(_QWORD *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v52 = 0;
      *v50 = *v39;
      goto LABEL_62;
    }
    v52 = 0;
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 16);
    v59 = *(_DWORD *)(a1 + 24);
    v52 = v48 ^ v47;
    v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      v53 = *(_OWORD *)v39;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)v50 = v53;
      goto LABEL_62;
    }
  }
  v54 = v51 ^ (v51 >> 31);
  if (v54)
  {
    v55 = *(_OWORD *)v39;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)v50 = v55;
    *(_DWORD *)a1 = v54;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *v39;
    *(_DWORD *)a1 = 0;
  }
LABEL_62:
  v56 = v52 >> 31;
  if (*(_DWORD *)a2 == v52)
  {
    *v39 = v49;
    if (v56 != v52)
    {
      *(_QWORD *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
    }
  }
  else
  {
    *v39 = v49;
    if (v56 != v52)
    {
      *(_QWORD *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
      *(_DWORD *)a2 = v56 ^ v52;
    }
    else
    {
      *(_DWORD *)a2 = 0;
    }
  }
  v57 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v57;
  return result;
}

BOOL sub_100256604(_BOOL8 result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  int *v5;
  _BOOL8 v6;
  int64_t v7;
  int64_t v10;
  _DWORD *v11;
  int64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
      v11 = (_DWORD *)(result + 40 * v10);
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v12 < a3 && sub_100252F24(a2, result + 40 * v10, v11 + 10))
      {
        v11 += 10;
        v10 = v12;
      }
      result = sub_100252F24(a2, (uint64_t)v11, v5);
      if (!result)
      {
        v14 = v5 + 2;
        v13 = *v5;
        v15 = *v5 >> 31;
        if (v13 >> 31 == v13)
        {
          *(_QWORD *)&v31 = *v14;
          v15 = v13;
        }
        else
        {
          v31 = *(_OWORD *)v14;
          v32 = v5[6];
        }
        v16 = v15 ^ v13;
        v17 = v5[8];
        v30 = v16;
        v33 = v17;
        do
        {
          v18 = v11;
          if (*v5 == *v11)
          {
            v19 = v11 + 2;
            v20 = v5 + 2;
            if (*v5 == *v5 >> 31)
            {
              *v20 = *v19;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
            else
            {
              v24 = *(_OWORD *)v19;
              v5[6] = v11[6];
              *(_OWORD *)v20 = v24;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
          }
          else
          {
            v21 = *v11 ^ ((int)*v11 >> 31);
            v22 = (__int128 *)(v11 + 2);
            if (v21)
            {
              v23 = *v22;
              v5[6] = v11[6];
              *(_OWORD *)(v5 + 2) = v23;
              *v5 = v21;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
            else
            {
              *((_QWORD *)v5 + 1) = *(_QWORD *)v22;
              *v5 = 0;
              v5[8] = v11[8];
              if (v7 < v10)
                break;
            }
          }
          v25 = (2 * v10) | 1;
          v11 = (_DWORD *)(v6 + 40 * v25);
          v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            v10 = v25;
          }
          else if (sub_100252F24(a2, v6 + 40 * v25, v11 + 10))
          {
            v11 += 10;
          }
          else
          {
            v10 = v25;
          }
          result = sub_100252F24(a2, (uint64_t)v11, &v30);
          v5 = v18;
        }
        while (!result);
        if (*v18 == v30)
        {
          v26 = v18 + 2;
          if (*v18 == *v18 >> 31)
          {
            *v26 = v31;
          }
          else
          {
            v29 = v31;
            v18[6] = v32;
            *(_OWORD *)v26 = v29;
          }
        }
        else
        {
          v27 = v30 ^ (v30 >> 31);
          if (v27)
          {
            v28 = v31;
            v18[6] = v32;
            *(_OWORD *)(v18 + 2) = v28;
            *v18 = v27;
          }
          else
          {
            *((_QWORD *)v18 + 1) = v31;
            *v18 = 0;
          }
        }
        v18[8] = v33;
      }
    }
  }
  return result;
}

uint64_t sub_1002568E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  __int128 *v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  _BOOL8 v32;
  int v33;
  _BOOL8 v34;
  int v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  int v40;

  if (a4 >= 2)
  {
    v6 = *(_DWORD *)result;
    v7 = *(_DWORD *)result;
    if (*(int *)result >> 31 != *(_DWORD *)result)
    {
      v39 = *(_QWORD *)(result + 16);
      v40 = *(_DWORD *)(result + 24);
      v7 = v6 >> 31;
    }
    v35 = v7;
    v8 = 0;
    v36 = *(_QWORD *)(result + 8);
    v38 = *(_DWORD *)(result + 32);
    v9 = (unint64_t)(a4 - 2) >> 1;
    v34 = result;
    v10 = result;
    do
    {
      v12 = v10;
      v10 += 40 * v8 + 40;
      v13 = 2 * v8;
      v8 = (2 * v8) | 1;
      v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        result = sub_100252F24(a3, v10, (_DWORD *)(v10 + 40));
        if ((_DWORD)result)
        {
          v10 += 40;
          v8 = v14;
        }
      }
      if (*(_DWORD *)v12 == *(_DWORD *)v10)
      {
        v15 = (_QWORD *)(v10 + 8);
        v16 = (_QWORD *)(v12 + 8);
        if (*(_DWORD *)v12 == *(int *)v12 >> 31)
        {
          *v16 = *v15;
        }
        else
        {
          v11 = *(_OWORD *)v15;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)v16 = v11;
        }
      }
      else
      {
        v17 = *(_DWORD *)v10 ^ (*(int *)v10 >> 31);
        v18 = (__int128 *)(v10 + 8);
        if (v17)
        {
          v19 = *v18;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)(v12 + 8) = v19;
          *(_DWORD *)v12 = v17;
        }
        else
        {
          *(_QWORD *)(v12 + 8) = *(_QWORD *)v18;
          *(_DWORD *)v12 = 0;
        }
      }
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v10 + 32);
    }
    while (v8 <= v9);
    v20 = v35 ^ v6;
    v21 = *(_DWORD *)v10;
    if (v10 == a2 - 40)
    {
      v25 = v20 >> 31;
      if (v21 == v20)
      {
        *(_QWORD *)(v10 + 8) = v36;
        if (v25 != v20)
        {
          *(_QWORD *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
        }
      }
      else
      {
        v29 = v25 ^ v20;
        *(_QWORD *)(v10 + 8) = v36;
        if (v29)
        {
          *(_QWORD *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
          *(_DWORD *)v10 = v29;
        }
        else
        {
          *(_DWORD *)v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = v38;
    }
    else
    {
      v22 = *(_DWORD *)(a2 - 40);
      if (v21 == v22)
      {
        v23 = (_QWORD *)(a2 - 32);
        v24 = (_QWORD *)(v10 + 8);
        if (v21 == v21 >> 31)
        {
          *v24 = *v23;
        }
        else
        {
          v30 = *(_OWORD *)v23;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)v24 = v30;
        }
      }
      else
      {
        v26 = v22 ^ (v22 >> 31);
        v27 = (__int128 *)(a2 - 32);
        if (v26)
        {
          v28 = *v27;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)(v10 + 8) = v28;
          *(_DWORD *)v10 = v26;
        }
        else
        {
          *(_QWORD *)(v10 + 8) = *(_QWORD *)v27;
          *(_DWORD *)v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a2 - 8);
      v31 = v20 >> 31;
      if (*(_DWORD *)(a2 - 40) == v20)
      {
        v32 = v34;
        *(_QWORD *)(a2 - 32) = v36;
        if (v31 != v20)
        {
          *(_QWORD *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
        }
      }
      else
      {
        v33 = v31 ^ v20;
        v32 = v34;
        *(_QWORD *)(a2 - 32) = v36;
        if (v33)
        {
          *(_QWORD *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
          *(_DWORD *)(a2 - 40) = v33;
        }
        else
        {
          *(_DWORD *)(a2 - 40) = 0;
        }
      }
      *(_DWORD *)(a2 - 8) = v38;
      return sub_100256C3C(v32, v10 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - v32) >> 3));
    }
  }
  return result;
}

BOOL sub_100256C3C(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  unint64_t v7;
  _DWORD *v8;
  int *v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;

  if (a4 >= 2)
  {
    v6 = result;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = (_DWORD *)(result + 40 * v7);
    v9 = (int *)(a2 - 40);
    result = sub_100252F24(a3, (uint64_t)v8, (_DWORD *)(a2 - 40));
    if (result)
    {
      v10 = *(_DWORD *)(a2 - 40);
      v11 = v10 >> 31;
      v12 = (_QWORD *)(a2 - 32);
      if (v10 >> 31 == v10)
      {
        *(_QWORD *)&v25 = *v12;
        v11 = v10;
      }
      else
      {
        v25 = *(_OWORD *)v12;
        v26 = *(_DWORD *)(a2 - 16);
      }
      v13 = v11 ^ v10;
      v14 = *(_DWORD *)(a2 - 8);
      v24 = v13;
      v27 = v14;
      do
      {
        v15 = v8;
        if (*v9 == *v8)
        {
          v16 = v8 + 2;
          v17 = v9 + 2;
          if (*v9 == *v9 >> 31)
          {
            *v17 = *v16;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
          else
          {
            v21 = *(_OWORD *)v16;
            v9[6] = v8[6];
            *(_OWORD *)v17 = v21;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
        }
        else
        {
          v18 = *v8 ^ ((int)*v8 >> 31);
          v19 = (__int128 *)(v8 + 2);
          if (v18)
          {
            v20 = *v19;
            v9[6] = v8[6];
            *(_OWORD *)(v9 + 2) = v20;
            *v9 = v18;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
          else
          {
            *((_QWORD *)v9 + 1) = *(_QWORD *)v19;
            *v9 = 0;
            v9[8] = v8[8];
            if (!v7)
              break;
          }
        }
        v7 = (v7 - 1) >> 1;
        v8 = (_DWORD *)(v6 + 40 * v7);
        result = sub_100252F24(a3, (uint64_t)v8, &v24);
        v9 = v15;
      }
      while (result);
      if (*v15 == v24)
      {
        v22 = v15 + 2;
        if (*v15 == *v15 >> 31)
        {
          *v22 = v25;
        }
        else
        {
          *(_OWORD *)v22 = v25;
          v15[6] = v26;
        }
      }
      else
      {
        v23 = v24 ^ (v24 >> 31);
        if (v23)
        {
          *(_OWORD *)(v15 + 2) = v25;
          v15[6] = v26;
          *v15 = v23;
        }
        else
        {
          *((_QWORD *)v15 + 1) = v25;
          *v15 = 0;
        }
      }
      v15[8] = v27;
    }
  }
  return result;
}

void sub_100256E6C(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int *v36;
  int v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  uint64_t *v44;
  __int128 v45;
  int v46;

  v4 = *a2;
  if (*a2 == *a1)
  {
    v22 = *a2;
    goto LABEL_39;
  }
  v44 = a4;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - *a1) >> 3);
  v9 = (unsigned __int8 *)(a3 + 2);
  while (1)
  {
    v11 = *a3;
    v12 = *a3 >> 31;
    if (v11 >> 31 == v11)
    {
      *(_QWORD *)&v45 = *(_QWORD *)v9;
      v12 = v11;
    }
    else
    {
      v45 = *(_OWORD *)v9;
      v46 = *((_DWORD *)v9 + 4);
    }
    v10 = v8 >> 1;
    v13 = *a1 + 40 * (v8 >> 1);
    v14 = v12 ^ v11;
    v15 = (_QWORD *)(v13 + 8);
    v16 = v14 >> 31;
    if (*(_DWORD *)v13 == *(int *)v13 >> 31)
    {
      if (v16 != v14 || *v15 < (unint64_t)v45)
        goto LABEL_3;
    }
    else if (v16 != v14 && sub_1001D7688((unsigned __int8 *)(v13 + 8), (unsigned __int8 *)&v45))
    {
LABEL_3:
      *a1 = v13 + 40;
      v10 = v8 + ~v10;
      goto LABEL_4;
    }
    v17 = *(_DWORD *)v13;
    v18 = *(int *)v13 >> 31;
    if (v18 == *(_DWORD *)v13)
    {
      *(_QWORD *)&v45 = *v15;
      v19 = 0;
      v20 = 0;
      if (*a3 == *a3 >> 31)
        break;
      goto LABEL_16;
    }
    v21 = *(_OWORD *)v15;
    v46 = *(_DWORD *)(v13 + 24);
    v45 = v21;
    v19 = v18 ^ v17;
    v20 = v19 >> 31;
    if (*a3 == *a3 >> 31)
      break;
LABEL_16:
    if (v20 == v19 || !sub_1001D7688(v9, (unsigned __int8 *)&v45))
      goto LABEL_22;
LABEL_4:
    v8 = v10;
    if (!v10)
    {
      v4 = *a1;
      v22 = *a1;
      goto LABEL_37;
    }
  }
  if (v20 != v19 || *(_QWORD *)v9 < (unint64_t)v45)
    goto LABEL_4;
LABEL_22:
  v22 = *a1 + 40 * v8;
  *a2 = v22;
  v4 = *a1;
  if (v13 == *a1)
  {
    v4 = v13;
    v32 = v13 + 40;
    v33 = v22 - (v13 + 40);
    if (v22 == v13 + 40)
      goto LABEL_37;
    goto LABEL_43;
  }
  v23 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a1) >> 3);
  do
  {
    v25 = *a3;
    v26 = *a3 >> 31;
    if (v25 >> 31 == v25)
    {
      *(_QWORD *)&v45 = *(_QWORD *)v9;
      v26 = v25;
    }
    else
    {
      v45 = *(_OWORD *)v9;
      v46 = *((_DWORD *)v9 + 4);
    }
    v24 = v23 >> 1;
    v27 = v26 ^ v25;
    v28 = (_DWORD *)(v4 + 40 * (v23 >> 1));
    v30 = *v28;
    v29 = (unsigned __int8 *)(v28 + 2);
    v31 = v27 >> 31;
    if (v30 == v30 >> 31)
    {
      if (v31 != v27 || *(_QWORD *)v29 < (unint64_t)v45)
        goto LABEL_24;
    }
    else if (v31 != v27 && sub_1001D7688(v29, (unsigned __int8 *)&v45))
    {
LABEL_24:
      v4 += 40 * (v23 >> 1) + 40;
      v24 = v23 + ~v24;
    }
    v23 = v24;
  }
  while (v24);
  v22 = *a2;
  v32 = v13 + 40;
  v33 = *a2 - (v13 + 40);
  if (*a2 != v13 + 40)
  {
LABEL_43:
    v34 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3);
    v22 = v32;
    do
    {
      v35 = v34 >> 1;
      v36 = (int *)(v22 + 40 * (v34 >> 1));
      v39 = *v36;
      v38 = v36 + 2;
      v37 = v39;
      v40 = v39 >> 31;
      if (v39 >> 31 == v39)
      {
        *(_QWORD *)&v45 = *(_QWORD *)v38;
        v41 = 0;
        v42 = 0;
        if (*a3 != *a3 >> 31)
          goto LABEL_48;
      }
      else
      {
        v43 = *(_OWORD *)v38;
        v46 = v38[4];
        v45 = v43;
        v41 = v40 ^ v37;
        v42 = v41 >> 31;
        if (*a3 != *a3 >> 31)
        {
LABEL_48:
          if (v42 != v41 && sub_1001D7688(v9, (unsigned __int8 *)&v45))
            goto LABEL_45;
          goto LABEL_44;
        }
      }
      if (v42 != v41 || *(_QWORD *)v9 < (unint64_t)v45)
        goto LABEL_45;
LABEL_44:
      v22 += 40 * (v34 >> 1) + 40;
      v35 = v34 + ~v35;
LABEL_45:
      v34 = v35;
    }
    while (v35);
  }
LABEL_37:
  a4 = v44;
LABEL_39:
  *a4 = v4;
  a4[1] = v22;
}

uint64_t sub_100257240()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025729C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1002573DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002573F0(uint64_t a1)
{
  void (**v1)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 8));
  if (v1)
    v1[2]();

}

void sub_100257434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002574BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002574FC()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

uint64_t sub_100257510(unsigned __int8 *a1, uint64_t a2, int **a3)
{
  int *v5;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int *v32;
  int *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  char v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  __int16 v105;
  int v106;
  int v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL4 v123;
  int v124;
  unsigned __int8 *v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  int v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unint64_t v142;
  int v143;
  int v144;
  unsigned __int8 *v145;
  int v146;
  unsigned __int8 *v147;
  _BOOL4 v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned __int8 *v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unint64_t v156;
  unsigned int v157;
  int v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  unsigned __int8 *v165;
  unint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t __len;
  int v175;
  int *v176;
  unsigned int v177;
  unsigned __int8 *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD v182[12];
  uint64_t v183;

  v5 = 0;
  v183 = 0;
  result = 1;
  memset(v182, 0, sizeof(v182));
  if (!a1 || !a2 || (v5 = 0, v179 = (unint64_t)&a1[a2], result = setjmp((int *)v182 + 1), (_DWORD)result))
  {
LABEL_4:
    *a3 = v5;
    return result;
  }
  if (LODWORD(v182[0]))
    return 5;
  if ((unint64_t)a1 >= v179)
    goto LABEL_182;
  v178 = a1 + 1;
  if ((*a1 & 0x80) == 0)
    return 5;
  v8 = (unint64_t)*a1 << 57 >> 60;
  v9 = (*a1 << 25) >> 28;
  if (v9 <= 3)
  {
    v10 = (unint64_t)*a1 << 61;
    v11 = 3;
  }
  else
  {
    if ((unint64_t)v178 >= v179)
      goto LABEL_182;
    v178 = a1 + 2;
    v10 = (((unint64_t)a1[1] << 53) & 0x1FFFFFFFFFFFFFFFLL) + ((unint64_t)*a1 << 61);
    v11 = 11;
    if (v8 > 0xB)
    {
      if ((unint64_t)(a1 + 2) >= v179)
        goto LABEL_182;
      v178 = a1 + 3;
      v10 = (((unint64_t)a1[2] << 45) & 0x1FFFFFFFFFFFFFLL)
          + (((unint64_t)a1[1] << 53) & 0x1FFFFFFFFFFFFFFFLL)
          + ((unint64_t)*a1 << 61);
      v11 = 19;
    }
  }
  v12 = v10;
  v13 = v11 - ((*a1 << 25) >> 28);
  if (v13 >= (*a1 << 25) >> 28)
  {
    v17 = v10 << v8;
LABEL_22:
    v19 = v13;
    goto LABEL_23;
  }
  v14 = v178;
  if ((unint64_t)v178 >= v179)
    goto LABEL_182;
  v15 = (unint64_t)++v178;
  v16 = ((unint64_t)*v14 << 56 >> (v11 - v8)) + (v10 << v8);
  v17 = v16;
  v18 = v13 + 8;
  v19 = v13 + 8;
  if (v13 + 8 < v8)
  {
    if (v15 >= v179)
      goto LABEL_182;
    v178 = v14 + 2;
    LODWORD(v13) = v13 + 16;
    v17 = ((unint64_t)v14[1] << 56 >> v18) + v16;
    goto LABEL_22;
  }
LABEL_23:
  v20 = v19 - ((*a1 << 25) >> 28);
  if (v20 > 1)
  {
    v22 = v17 << v8;
    v23 = v19 - ((*a1 << 25) >> 28);
  }
  else
  {
    v21 = v178;
    if ((unint64_t)v178 >= v179)
      goto LABEL_182;
    ++v178;
    v22 = ((unint64_t)*v21 << 56 >> v20) + (v17 << v8);
    v23 = v20 + 8;
  }
  v24 = v23 - 2;
  if (v23 - 2 > 7)
  {
    v26 = 4 * v22;
    goto LABEL_31;
  }
  v25 = v178;
  if ((unint64_t)v178 >= v179)
LABEL_182:
    longjmp((int *)v182 + 1, 3);
  ++v178;
  v26 = ((unint64_t)*v25 << 56 >> (v23 - 2)) + 4 * v22;
  v24 = v23 + 6;
LABEL_31:
  v27 = v12 >> -(char)v8;
  LODWORD(v182[0]) = v24 - 8;
  result = 8;
  if (v27 >= 2)
  {
    v28 = v17 >> (64 - v8);
    if (v28 >= 2)
    {
      v29 = v27;
      v30 = v28;
      v31 = v28 * v27;
      if ((v28 * v27) <= 0x100000)
      {
        v175 = v28;
        v177 = v27;
        __len = 2 * (v28 * v27);
        v32 = (int *)malloc_type_malloc(__len + 20, 0x7D204DCuLL);
        if (!v32)
        {
          result = 7;
          *a3 = 0;
          return result;
        }
        v33 = v32;
        v34 = v22 >> 62;
        v5 = v32;
        *v32 = v29;
        v32[1] = v30;
        v32[3] = v34;
        v32[4] = HIBYTE(v26);
        v32[2] = v9;
        if (v31)
          memset_pattern16(v32 + 5, &unk_1003953E0, __len);
        v35 = v178;
        if (LODWORD(v182[0]))
        {
          v36 = v178;
          v37 = v26 << 9;
          v180 = v26 << 9;
          v38 = --LODWORD(v182[0]);
          if (((v26 << 8) & 0x8000000000000000) == 0)
            goto LABEL_68;
        }
        else
        {
          if ((unint64_t)v178 >= v179)
            goto LABEL_181;
          ++v178;
          v39 = (v26 << 8) + ((unint64_t)*v35 << 56);
          v36 = v35 + 1;
          v37 = 2 * v39;
          v180 = 2 * v39;
          v38 = 7;
          LODWORD(v182[0]) = 7;
          if ((v39 & 0x8000000000000000) == 0)
          {
LABEL_68:
            sub_100258568(v5);
            v64 = v177;
            v65 = v178;
            v66 = v180;
            v67 = LODWORD(v182[0]);
            v176 = v33 + 5;
            v68 = 0;
LABEL_70:
            v69 = v65;
            v70 = v68 * v64;
            v71 = (uint64_t)v176 + 2 * v177 * (v68 - 1);
            v72 = 0;
            v73 = v67;
            v74 = v67;
            v75 = v66;
            v76 = v66;
            v77 = v69;
LABEL_73:
            v79 = v73;
            v80 = v69;
            if (!*((_WORD *)v33 + (v70 + v72) + 10))
            {
              v67 = v74;
              v78 = v69;
              goto LABEL_72;
            }
            if (v72)
            {
              v81 = *((unsigned __int16 *)v176 + v177 * v68 + v72 - 1);
              if (v68)
                goto LABEL_76;
            }
            else
            {
              v81 = 0;
              if (v68)
              {
LABEL_76:
                v82 = *(unsigned __int16 *)(v71 + 2 * v72);
                if (v81)
                  v83 = v81;
                else
                  v83 = *(unsigned __int16 *)(v71 + 2 * v72);
                if (v81 && *(_WORD *)(v71 + 2 * v72))
                {
                  if (v83 - v82 >= 0)
                    v84 = v83 - v82;
                  else
                    v84 = v82 - v83;
                  v85 = v82 + v83;
                  if (v85 < 2)
                    goto LABEL_102;
                  goto LABEL_111;
                }
                if (v72 + 1 >= (unint64_t)v177)
                {
                  v87 = 0;
                  if (!v72)
                  {
LABEL_93:
                    v88 = v87;
LABEL_97:
                    v86 = v83;
                    if (v88)
                    {
                      if (v83 - v88 >= 0)
                        v84 = v83 - v88;
                      else
                        v84 = v88 - v83;
                      v85 = v88 + v83;
                      if (v85 < 2)
                      {
LABEL_102:
                        v89 = v80;
                        v90 = v77;
                        v91 = v77;
                        v92 = v75;
                        v93 = v79;
                        v94 = 0;
                        while (1)
                        {
                          v95 = v92;
                          v96 = v91;
                          if (v93)
                          {
                            v97 = v93;
                            v98 = v89;
                            v99 = v90;
                          }
                          else
                          {
                            if ((unint64_t)v91 >= v179)
                              goto LABEL_181;
                            v95 = v92 + ((unint64_t)*v91 << 56);
                            v97 = 8;
                            v99 = ++v91;
                            v98 = v96 + 1;
                          }
                          v100 = v95;
                          v101 = v99;
                          v102 = 2 * v95;
                          v103 = v102;
                          v104 = v97 - 1;
                          if (v100 < 0)
                            break;
                          ++v94;
                          v89 = v98;
                          v90 = v101;
                          v92 = v102;
                          v93 = v97 - 1;
                          if (v94 == 256)
                          {
                            v105 = 256;
                            goto LABEL_122;
                          }
                        }
                        v105 = v94;
                        if (v94)
                        {
LABEL_122:
                          if (v97 <= 2)
                          {
                            if ((unint64_t)v101 >= v179)
                              goto LABEL_181;
                            v103 = ((unint64_t)*v101 << 56 >> (v97 - 1)) + v102;
                            v104 = v97 + 7;
                            v98 = ++v101;
                          }
                          v127 = v101;
                          v79 = v104 - 2;
                          LOWORD(v128) = (4 * v105) | (v103 >> 62);
                          v75 = 4 * v103;
                          v120 = v98;
                          goto LABEL_126;
                        }
                        if (v97 == 1)
                        {
                          if ((unint64_t)v101 >= v179)
                            goto LABEL_181;
                          v169 = v102 + ((unint64_t)*v101 << 56);
                          v127 = v101 + 1;
                          v120 = v101 + 1;
                          v168 = 2 * v169;
                          v75 = 2 * v169;
                          v79 = 7;
                          if ((v169 & 0x8000000000000000) == 0)
                            goto LABEL_163;
                        }
                        else
                        {
                          v120 = v98;
                          v127 = v101;
                          v168 = 2 * v103;
                          v75 = 2 * v103;
                          v79 = v104 - 1;
                          if ((v103 & 0x8000000000000000) == 0)
                          {
LABEL_163:
                            LOWORD(v128) = 1;
LABEL_126:
                            v125 = v127;
                            goto LABEL_149;
                          }
                        }
                        if (!(_DWORD)v79)
                        {
                          if ((unint64_t)v127 >= v179)
                            goto LABEL_181;
                          v75 = v168 + ((unint64_t)*v127 << 56);
                          LODWORD(v79) = 8;
                          v120 = ++v127;
                        }
                        v170 = v75;
                        v171 = 2 * v75;
                        v75 *= 2;
                        v79 = (v79 - 1);
                        if (v170 < 0)
                        {
                          if (!(_DWORD)v79)
                          {
                            if ((unint64_t)v127 >= v179)
                              goto LABEL_181;
                            v75 = v171 + ((unint64_t)*v127 << 56);
                            LODWORD(v79) = 8;
                            v120 = ++v127;
                          }
                          v128 = ~(v75 >> 63) & 3;
                          v79 = (v79 - 1);
                          v75 *= 2;
                        }
                        else
                        {
                          LOWORD(v128) = 2;
                        }
                        goto LABEL_126;
                      }
LABEL_111:
                      if (v84 < 2)
                      {
                        v108 = v80;
                        v109 = v77;
                        v110 = v77;
                        v111 = v75;
                        v112 = v79;
                        v113 = 0;
                        while (1)
                        {
                          v114 = v111;
                          v115 = v110;
                          if (v112)
                          {
                            v116 = v108;
                            v117 = v109;
                          }
                          else
                          {
                            if ((unint64_t)v110 >= v179)
                              goto LABEL_181;
                            v114 = v111 + ((unint64_t)*v110 << 56);
                            v112 = 8;
                            v117 = ++v110;
                            v116 = v115 + 1;
                          }
                          v118 = v114;
                          v119 = v117;
                          v120 = v116;
                          v121 = 2 * v118;
                          v122 = (v112 - 1);
                          if (v118 < 0)
                            break;
                          ++v113;
                          v108 = v120;
                          v109 = v119;
                          v111 = 2 * v118;
                          --v112;
                          if (v113 == 256)
                          {
                            v123 = (v84 & 1) == 0;
                            v124 = 256;
                            v125 = v119;
                            v126 = 2 * v118;
                            if ((_DWORD)v122)
                              goto LABEL_142;
LABEL_140:
                            if ((unint64_t)v125 < v179)
                            {
                              v126 += (unint64_t)*v125 << 56;
                              LODWORD(v122) = 8;
                              v120 = ++v125;
                              goto LABEL_142;
                            }
LABEL_181:
                            longjmp((int *)v182 + 1, 3);
                          }
                        }
                        v152 = v119;
                        v146 = v113;
                        v147 = v152;
                        v148 = (v84 & 1) == 0;
                        if (!(v146 | v84 & 1))
                          goto LABEL_147;
LABEL_139:
                        v125 = v147;
                        v123 = v148;
                        v124 = v146;
                        v126 = v121;
                        if (!(_DWORD)v122)
                          goto LABEL_140;
LABEL_142:
                        v149 = v124 + !v123;
                        if (v126 < 0)
                          v149 = -v124;
                        v150 = (v122 - 1);
                        v121 = 2 * v126;
                        v151 = v149 + (v85 >> 1);
                        if (v151 >= 0)
                          goto LABEL_148;
                        v172 = 4;
                        goto LABEL_175;
                      }
                      if (v84 < 9)
                      {
                        v129 = v80;
                        v130 = v77;
                        v131 = v77;
                        v132 = v75;
                        v133 = v79;
                        v134 = 0;
                        do
                        {
                          v135 = v132;
                          v136 = v131;
                          if (v133)
                          {
                            v137 = v133;
                            v138 = v129;
                            v139 = v130;
                          }
                          else
                          {
                            if ((unint64_t)v131 >= v179)
                              goto LABEL_181;
                            v135 = v132 + ((unint64_t)*v131 << 56);
                            v137 = 8;
                            v139 = ++v131;
                            v138 = v136 + 1;
                          }
                          v140 = v135;
                          v141 = v139;
                          v142 = 2 * v140;
                          v143 = v137 - 1;
                          if (v140 < 0)
                            break;
                          ++v134;
                          v129 = v138;
                          v130 = v141;
                          v132 = 2 * v140;
                          v133 = v143;
                        }
                        while (v134 != 256);
                        if (!v143)
                        {
                          if ((unint64_t)v141 >= v179)
                            goto LABEL_181;
                          v142 = 2 * v140 + ((unint64_t)*v141 << 56);
                          v143 = 8;
                          v138 = ++v141;
                        }
                        v120 = v138;
                        v181 = 2 * v142;
                        v144 = (2 * v134) | (v142 >> 63);
                        v122 = (v143 - 1);
                        v121 = v181;
                        v145 = v141;
                        v146 = v144;
                        v147 = v145;
                        v148 = (v84 & 1) == 0;
                        if (v144 | v84 & 1)
                          goto LABEL_139;
                        goto LABEL_147;
                      }
                      v153 = v80;
                      v154 = v77;
                      v155 = v77;
                      v156 = v75;
                      v157 = v79;
                      v158 = 0;
                      while (1)
                      {
                        v165 = v155;
                        if (v157)
                        {
                          v159 = v153;
                          v160 = v154;
                          v161 = v157;
                          v162 = 2 * v156;
                          v163 = 2 * v156;
                          v164 = v157 - 1;
                          if ((v156 & 0x8000000000000000) != 0)
                            goto LABEL_156;
                        }
                        else
                        {
                          if ((unint64_t)v155 >= v179)
                            goto LABEL_181;
                          v166 = v156 + ((unint64_t)*v155 << 56);
                          v161 = 8;
                          v160 = ++v155;
                          v159 = v165 + 1;
                          v162 = 2 * v166;
                          v163 = 2 * v166;
                          v164 = 7;
                          if ((v166 & 0x8000000000000000) != 0)
                          {
LABEL_156:
                            if (v161 <= 2)
                            {
                              if ((unint64_t)v160 >= v179)
                                goto LABEL_181;
                              v163 = ((unint64_t)*v160++ << 56 >> v164) + v162;
                              v159 = v160;
                              v164 = v161 + 7;
                            }
                            v167 = v160;
                            v146 = (4 * v158) | (v163 >> 62);
                            v122 = (v164 - 2);
                            v121 = 4 * v163;
                            v120 = v159;
                            v147 = v167;
                            v148 = (v84 & 1) == 0;
                            if (v146 | v84 & 1)
                              goto LABEL_139;
LABEL_147:
                            v150 = v122;
                            v125 = v147;
                            v151 = v85 >> 1;
LABEL_148:
                            LOWORD(v128) = v151;
                            v79 = v150;
                            v75 = v121;
LABEL_149:
                            v76 = v75;
                            v67 = v79;
                            *((_WORD *)v176 + v177 * v68 + v72) = v128;
                            v78 = v120;
                            v77 = v125;
LABEL_72:
                            v73 = v79;
                            ++v72;
                            v74 = v67;
                            v69 = v78;
                            if (v72 != v177)
                              goto LABEL_73;
                            v66 = v76;
                            ++v68;
                            v65 = v78;
                            v64 = v177;
                            if (v68 != v175)
                              goto LABEL_70;
                            if (v78 - a1 == a2)
                            {
                              result = 0;
                              goto LABEL_4;
                            }
                            v172 = 2;
LABEL_175:
                            v173 = v172;
                            free(v5);
                            v5 = 0;
                            result = v173;
                            goto LABEL_4;
                          }
                        }
                        ++v158;
                        v153 = v159;
                        v154 = v160;
                        v156 = v163;
                        v157 = v164;
                        if (v158 == 256)
                          goto LABEL_156;
                      }
                    }
LABEL_110:
                    v106 = v86;
                    v107 = v86;
                    v84 = 0;
                    v85 = v106 + v107;
                    if (v85 < 2)
                      goto LABEL_102;
                    goto LABEL_111;
                  }
                }
                else
                {
                  if (v83)
                  {
                    v87 = *(unsigned __int16 *)(v71 + 2 * (v72 + 1));
                  }
                  else
                  {
                    v83 = *(unsigned __int16 *)(v71 + 2 * (v72 + 1));
                    v87 = 0;
                  }
                  if (!v72)
                    goto LABEL_93;
                }
                v88 = v87;
                if (!v87)
                {
                  v86 = *(unsigned __int16 *)(v71 + 2 * (v72 - 1));
                  v88 = v86;
                  if (!v83)
                    goto LABEL_110;
                }
                goto LABEL_97;
              }
            }
            v86 = v81;
            goto LABEL_110;
          }
        }
        v40 = v38;
        v41 = v5[2];
        if (v38 < v41)
        {
          v42 = v37;
          v43 = v36;
          v44 = v40;
          do
          {
            if ((unint64_t)v43 >= v179)
              goto LABEL_181;
            v42 += (unint64_t)*v43 << 56 >> v44;
            v37 = v42;
            v36 = ++v43;
            v40 = v44 + 8;
            v44 += 8;
          }
          while (v44 < v41);
        }
        v45 = v40;
        v46 = v37;
        v47 = v37 << v41;
        v48 = v45 - v41;
        v49 = v48;
        v50 = v5[2];
        if (v48 < v50)
        {
          v51 = v47;
          v52 = v36;
          do
          {
            if ((unint64_t)v52 >= v179)
              goto LABEL_181;
            v51 += (unint64_t)*v52 << 56 >> v48;
            v48 += 8;
            v47 = v51;
            v36 = ++v52;
            v49 = v48;
          }
          while (v48 < v50);
        }
        v53 = v47 >> -(char)v50;
        v54 = v47 << v50;
        if ((v53 & 0x80000000) != 0
          || (v55 = v36, v56 = v46 >> -(char)v5[2], v57 = v49 - v5[2], v58 = v54, v59 = v53, v60 = 0, v59 >= v5[1])
          || (v56 & 0x80000000) != 0
          || (int)v56 >= *v5)
        {
          longjmp((int *)v182 + 1, 6);
        }
        *((_WORD *)v33 + (int)v56 + *v5 * v59 + 10) = 2;
        if (v57 > 1)
        {
          v61 = v57;
        }
        else
        {
          if ((unint64_t)v36 >= v179)
            goto LABEL_181;
          v58 = ((unint64_t)*v36 << 56 >> v57) + v54;
          v55 = v36 + 1;
          v61 = v57 + 8;
        }
        v62 = v58 >> 62;
        v63 = 4 * v58;
        if (v58 >> 62 == 3)
        {
          v60 = 1;
        }
        else if ((_DWORD)v62 == 1)
        {
          v60 = -1;
        }
        else if (!(_DWORD)v62)
        {
          if (v61 - 2 <= 1)
          {
            if ((unint64_t)v55 >= v179)
              goto LABEL_181;
            v63 = ((unint64_t)*v55 << 56 >> (v61 - 2)) + 4 * v58;
          }
          __asm { BR              X4 }
        }
        __asm { BR              X3 }
      }
    }
  }
  return result;
}

int *sub_100258568(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  char *v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *result;
  if ((int)v1 >= 1)
  {
    v2 = result[1];
    if ((int)v2 >= 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = *result;
      v6 = 2 * v1;
      while (1)
      {
        if (v3)
        {
          if (v3 == (_DWORD)v1 - 1)
          {
            v7 = (_WORD *)result + v3 + 10;
            v8 = v2;
            v9 = v4;
            do
            {
              if (*v7 == 1)
              {
                *v7 = 0;
                v9 = 1;
              }
              v7 = (_WORD *)((char *)v7 + v6);
              --v8;
            }
            while (v8);
          }
          else
          {
            v12 = (char *)result + 2 * v3;
            v14 = *((unsigned __int16 *)v12 + 10);
            v13 = v12 + 20;
            if (v14 == 1)
            {
              *v13 = 0;
              v4 = 1;
            }
            if ((_DWORD)v2 == 1)
            {
              v9 = v4;
            }
            else
            {
              v15 = 2 * (v1 + v3) + 18;
              v16 = result;
              v17 = v2 - 1;
              v18 = (v2 - 1) - 1;
              v9 = v4;
              do
              {
                if (*(_WORD *)((char *)v16 + v15 + 2) == 1
                  && (!v18
                   || !*(_WORD *)((char *)v16 + v15)
                   || !*(_WORD *)((char *)v16 + v15 + 4)
                   || !*((_WORD *)v16 + v3 + 10)
                   || !*((_WORD *)&v16[v1 + 5] + v3)))
                {
                  *(_WORD *)((char *)v16 + v15 + 2) = 0;
                  v9 = 1;
                }
                --v18;
                v16 = (int *)((char *)v16 + v6);
                --v17;
              }
              while (v17);
            }
          }
        }
        else
        {
          v10 = v2;
          v11 = result + 5;
          v9 = v4;
          do
          {
            if (*v11 == 1)
            {
              *v11 = 0;
              v9 = 1;
            }
            v11 = (_WORD *)((char *)v11 + v6);
            --v10;
          }
          while (v10);
        }
        ++v3;
        v4 = v9;
        if (v3 == v5)
        {
          v3 = 0;
          v4 = 0;
          if (!(_DWORD)v9)
            break;
        }
      }
    }
  }
  return result;
}

double sub_1002586EC(_DWORD *a1, int a2, int a3)
{
  int v3;

  v3 = 0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2)
  {
    if (a1[1] <= a3)
      v3 = 0;
    else
      v3 = *((unsigned __int16 *)a1 + a2 + *a1 * a3 + 10);
  }
  return dbl_1003953C0[a1[3]] * (double)(v3 - a1[4]);
}

double sub_100258748(uint64_t a1)
{
  return dbl_1003953C0[*(int *)(a1 + 12)] * (double)-*(_DWORD *)(a1 + 16);
}

void sub_10025876C(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t sub_100258778(uint64_t a1, uint64_t ***a2)
{
  const void ***v2;
  void *v4;
  void *v5[2];
  char v6;
  std::string __p;

  v2 = sub_1000A9C6C((_QWORD *)(a1 + 8), a2);
  if (!v2)
  {
    sub_1000D5048(v5, "");
    sub_100258B30("Missing entry for string location id", &__p);
    sub_100174738((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    sub_1000F2AE4((uint64_t)&v4);
  }
  return *((unsigned int *)v2 + 8);
}

void sub_100258848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025888C(uint64_t a1, uint64_t ***a2)
{
  if (sub_1000A9C6C((_QWORD *)(a1 + 8), a2))
    return sub_100258778(a1, a2);
  else
    return sub_1000A9AA8(a1, (uint64_t)a2);
}

uint64_t *sub_1002588D4(int8x8_t *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p;
  void *v13[2];
  char v14;
  std::string v15;

  v2 = a1[7];
  if (!*(_QWORD *)&v2)
    goto LABEL_21;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)&a1[6] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_21:
    sub_1000D5048(v13, "");
    sub_100232628("No valid string representation for location id", &v15);
    sub_100174738((uint64_t)v13, (uint64_t)&v15, 1);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v13[0]);
LABEL_23:
    sub_1000F2AE4((uint64_t)&__p);
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
          return v7 + 3;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      goto LABEL_21;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_21;
  }
  if (*((_DWORD *)v7 + 4) != (_DWORD)v3)
    goto LABEL_11;
  return v7 + 3;
}

void sub_100258A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100258AB4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

std::string *sub_100258B30@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100258B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100258B7C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100258BD8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100258C34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_100258C40(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (*(char *)(v5 + 23) < 0)
  {
    v7 = v5;
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  result = sub_10023E8DC(v5, v6, v4, v4 + a2);
  *(_DWORD *)(a1 + 8) += a2;
  return result;
}

uint64_t sub_100258C90(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  if (*(char *)(v3 + 23) < 0)
    return sub_10023E8DC(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), v2, v2 + a2);
  else
    return sub_10023E8DC(v3, *(unsigned __int8 *)(v3 + 23), v2, v2 + a2);
}

uint64_t sub_100258CD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) += a2;
  return result;
}

BOOL sub_100258CE8(int *a1)
{
  unint64_t v1;

  v1 = a1[2];
  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
    return v1 < 8 * *(_QWORD *)(*(_QWORD *)a1 + 8);
  else
    return v1 < 8 * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 23);
}

uint64_t sub_100258D18(int *a1)
{
  uint64_t v1;

  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
    v1 = 8 * *(_QWORD *)(*(_QWORD *)a1 + 8);
  else
    v1 = 8 * *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
  return v1 - a1[2];
}

uint64_t sub_100258D4C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100258DA8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

BOOL sub_100258E04(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v1 = sub_100050DB0(a1);
  if (*(char *)(v1 + 23) >= 0)
    v2 = (unsigned __int8 *)v1;
  else
    v2 = *(unsigned __int8 **)v1;
  return *v2 == 82;
}

BOOL sub_100258E34(uint64_t a1)
{
  return sub_100086528(a1) == 0;
}

BOOL sub_100258E50(uint64_t a1)
{
  return sub_1000B24A4(a1) != 0;
}

BOOL sub_100258E6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 80;
  do
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 - 24) + 72))(*(_QWORD *)(v2 - 24));
    if (v3)
      v4 = v2 == v1;
    else
      v4 = 1;
    v2 += 80;
  }
  while (!v4);
  return v3 != 0;
}

void sub_100258ECC(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100258EF8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100258F54()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100258FB0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8[4];
  void *__p[3];
  void *v10[2];
  __int128 v11;
  int v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (!*(_BYTE *)(a1 + 8))
  {
    sub_1000D5048(&v14, "");
    sub_100170980("The previous floor should be defined.", (std::string *)v10);
    sub_100174738((uint64_t)&v14, (uint64_t)v10, 1);
    if (SBYTE7(v11) < 0)
      operator delete(v10[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v14);
    sub_1000F2AE4((uint64_t)v8);
  }
  v4 = *(_BYTE **)a1;
  if (!*(_QWORD *)a1)
  {
    sub_1000D5048(&v14, "");
    sub_100258B30("The previous mode should be defined.", (std::string *)v10);
    sub_100174738((uint64_t)&v14, (uint64_t)v10, 1);
    if (SBYTE7(v11) < 0)
      operator delete(v10[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v14);
    sub_1000F2AE4((uint64_t)v8);
  }
  LOBYTE(v14) = 0;
  if (*v4)
  {
    sub_100236870((uint64_t)&v15, (uint64_t)(v4 + 8));
    LOBYTE(v14) = 1;
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    v12 = 1065353216;
    v13 = 0;
    v5 = sub_100270038(&v15);
    sub_10026FF40(__p, v5);
    sub_1001D550C((uint64_t)v10, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 48), (uint64_t)v8);
    v6 = v8[1];
    *(_QWORD *)sub_100270048(__p, 0) = v6;
    v7 = v8[2];
    *(_QWORD *)sub_100270048(__p, 1) = v7;
    sub_10025A938((unint64_t *)&v15, (unint64_t *)__p);
    sub_100234984(*(_BYTE **)a1, (uint64_t)&v15);
    nullsub_23(v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_1000C91C4((uint64_t)v10);
    if ((_BYTE)v14)
    {
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
    }
  }
}

void sub_100259200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100259254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_1000C91C4((uint64_t)va);
  sub_1002345E8(v9 - 128);
  _Unwind_Resume(a1);
}

void sub_100259270(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  nullsub_23(va);
  JUMPOUT(0x10025927CLL);
}

uint64_t sub_1002592A4(uint64_t a1, uint64_t a2)
{
  const void ***v3;
  unsigned __int8 ***v4;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 8)
    || !*(_QWORD *)a1
    || (v3 = (const void ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16)),
        v4 = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 64))(*(_QWORD *)(a2 + 48)),
        result = sub_1000781C4(v3, v4),
        (_DWORD)result))
  {
    operator new();
  }
  return result;
}

void sub_100259364()
{
  operator delete();
}

void sub_100259388(uint64_t a1, uint64_t a2)
{
  const void ***v4;
  unsigned __int8 ***v5;

  if (!*(_BYTE *)(a1 + 8) || !*(_QWORD *)a1)
    operator new();
  v4 = (const void ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
  v5 = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 64))(*(_QWORD *)(a2 + 48));
  if (sub_1000781C4(v4, v5))
    sub_100258FB0(a1, a2);
}

void sub_100259460()
{
  operator delete();
}

void sub_100259484(_BYTE **a1, uint64_t a2)
{
  const void ***v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16[2];
  void *v17[2];
  char v18;
  std::string __p;

  v4 = (const void ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 64))(*(_QWORD *)(a2 + 48));
  if ((sub_1000790EC(v4, (unsigned __int8 ***)&qword_10041AD40) & 1) != 0)
    return;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 72))(*(_QWORD *)(a2 + 48)) == 1)
  {
    sub_100259388((uint64_t)a1, a2);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 72))(*(_QWORD *)(a2 + 48)) == 1)
      goto LABEL_7;
  }
  else
  {
    sub_1002592A4((uint64_t)a1, a2);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 72))(*(_QWORD *)(a2 + 48)) == 1)
    {
LABEL_7:
      if (!*a1)
      {
        sub_1000D5048(v17, "");
        sub_10015BE2C("Because the first call to receiveModeEstimate must have triggered the above if block which should have instantiated a new ParticleMode()", &__p);
        sub_100174738((uint64_t)v17, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v18 < 0)
          operator delete(v17[0]);
        sub_1000F2AE4((uint64_t)v16);
      }
      sub_100234970((uint64_t)*a1);
      sub_10025976C(2, *a1, (uint64_t *)a2, (uint64_t)(a1 + 4));
      goto LABEL_10;
    }
  }
  v5 = *((_DWORD *)a1 + 26);
  if (v5 == 2)
    goto LABEL_7;
  sub_10025976C(v5, *a1, (uint64_t *)a2, (uint64_t)(a1 + 4));
LABEL_10:
  if (sub_100236720((uint64_t)*a1))
  {
    sub_1000D5048(v17, "");
    sub_100218440("The primary estimate should never have a logpdf", &__p);
    sub_100174738((uint64_t)v17, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(v17[0]);
    sub_1000F2AE4((uint64_t)v16);
  }
  v6 = *(_BYTE **)(a2 + 48);
  if (*((_BYTE *)a1 + 8))
  {
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (std::__shared_weak_count *)a1[3];
    a1[2] = v6;
    a1[3] = (_BYTE *)v7;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    a1[2] = v6;
    v13 = *(_QWORD *)(a2 + 56);
    a1[3] = (_BYTE *)v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *((_BYTE *)a1 + 8) = 1;
  }
}

void sub_100259720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025976C(int a1, _BYTE *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _BYTE v19[24];
  std::string v20;
  std::runtime_error v21;
  void *v22[2];
  void *__p;
  void *v24;
  void *v25[3];
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  sub_100234C30((uint64_t)a2, a3[8], a3, v25);
  if (a1 && a1 != 2)
  {
    if (a1 != 1)
    {
      __cxa_allocate_exception(0x40uLL);
      LODWORD(v22[0]) = a1;
      v18 = sub_10023EFE0((uint64_t)&qword_10041AE60, (int *)v22);
      sub_1000D5048(&v20, (char *)*v18);
      std::runtime_error::runtime_error(&v21, &v20);
      v21.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
      sub_10018D04C((uint64_t)v19);
      sub_1000EF6D4(&v21, (uint64_t)"static void MultiModeTracker::updateKalmanModeWithNewParticleState(ModeEstimator, ParticleMode *, const ModeParticleSet &, const MultiphoneSpec &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/multi_mode_tracker.cpp", 302, (uint64_t)v19);
    }
    if (!sub_1002D0E2C((uint64_t)v25))
    {
      v8 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 56) + 40))(*(_QWORD *)(*a3 + 56));
      v9 = *v8;
      v10 = (std::__shared_weak_count *)v8[1];
      v29 = *v8;
      v30 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      if (v9)
      {
        v13 = (*(double (**)(uint64_t))(*(_QWORD *)v9 + 120))(v9);
        v14 = sub_100270038(v25);
        sub_1002BEE9C((uint64_t)v22, v14);
        v15 = v13 * v13 / 12.0;
        *(double *)sub_1002BEF4C((uint64_t)v22, 0, 0) = v15;
        *(double *)sub_1002BEF4C((uint64_t)v22, 1uLL, 1uLL) = v15;
        sub_10025AE6C(&v26, v22);
        if (__p)
        {
          v24 = __p;
          operator delete(__p);
        }
      }
      if (v10)
      {
        v16 = (unint64_t *)&v10->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  sub_100234984(a2, (uint64_t)v25);
  sub_10025A28C((uint64_t)a2, (uint64_t)a3, a4);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_100259994(void *__p, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char __pa, std::runtime_error a10, std::string *a11, uint64_t a12, uint64_t a13, char a14)
{
  __break(1u);
}

void sub_100259AA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;

  v23 = *(void **)(v22 - 104);
  if (v23)
  {
    *(_QWORD *)(v22 - 96) = v23;
    operator delete(v23);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v22 - 80));
  if (a22 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x100259B14);
}

void sub_100259B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  if (__p)
    operator delete(__p);
  sub_1000E095C(v22 - 104);
  sub_1002363FC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_100259B70(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  _BYTE v9[24];
  std::runtime_error v10;
  std::string v11;
  void *__p[2];
  char v13;
  std::string v14;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 72))(*(_QWORD *)(a2 + 48)) != 1)
  {
    v4 = *(_DWORD *)(a1 + 104);
    if (v4 && v4 != 2)
    {
      if (v4 != 1)
      {
        __cxa_allocate_exception(0x40uLL);
        LODWORD(v14.__r_.__value_.__l.__data_) = v4;
        v8 = sub_10023EFE0((uint64_t)&qword_10041AE60, (int *)&v14);
        sub_1000D5048(&v11, (char *)*v8);
        std::runtime_error::runtime_error(&v10, &v11);
        v10.__vftable = (std::runtime_error_vtbl *)&off_1003EF600;
        sub_10018D04C((uint64_t)v9);
        sub_1000EF6D4(&v10, (uint64_t)"void MultiModeTracker::searchForAlternativeMode(const ModeParticleSet &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/multi_mode_tracker.cpp", 146, (uint64_t)v9);
      }
      sub_100259F20(a1, *(_QWORD *)a1, a2, &v14);
      if (v14.__r_.__value_.__r.__words[0])
      {
        v7 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v14.__r_.__value_.__r.__words[0];
        if (v7)
        {
          sub_10025ADA0(v7);
          operator delete();
        }
      }
    }
  }
  result = sub_100236720(*(_QWORD *)a1);
  if ((_DWORD)result)
  {
    sub_1000D5048(__p, "");
    sub_100218440("The primary estimate should never have a logpdf", &v14);
    sub_100174738((uint64_t)__p, (uint64_t)&v14, 1);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (v13 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v11);
  }
  return result;
}

void sub_100259D44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::runtime_error a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __break(1u);
}

void sub_100259E80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a15);
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  __cxa_end_catch();
  JUMPOUT(0x100259EF4);
}

void sub_100259F04(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1000CDD68(a1);
  _Unwind_Resume(a1);
}

void sub_100259F20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  double v9;
  NSObject *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *p_p;
  char *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  void *v20;
  std::string __p;
  std::string v22;
  void *v23[3];
  uint8_t buf[4];
  std::string *v25;
  __int16 v26;
  std::string *v27;
  char v28[8];
  void *v29[5];
  void *v30;
  void *v31;
  char v32;
  void *v33;
  void *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;

  if (sub_100234B6C(a2) == 0.0)
  {
    *a4 = 0;
    return;
  }
  sub_100235418(a2, (__n128 **)a3, a1 + 32, v23);
  sub_1002347EC(v28, *(_QWORD *)(a1 + 112), v23);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 72))(*(_QWORD *)(a3 + 48)) == 1)
    v8 = 2;
  else
    v8 = *(_DWORD *)(a1 + 104);
  sub_10025976C(v8, v28, (uint64_t *)a3, a1 + 32);
  v9 = sub_100234B6C(a2);
  if (v9 < sub_100234B6C((uint64_t)v28))
  {
    if (qword_100417ED8 == -1)
    {
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_18;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF670);
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_18;
    }
    sub_10025AB40((double **)(a2 + 8), &v22);
    v11 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
    v12 = v22.__r_.__value_.__r.__words[0];
    sub_10025AB40((double **)v29, &__p);
    v13 = &v22;
    if (v11 < 0)
      v13 = (std::string *)v12;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v25 = v13;
    v26 = 2080;
    v27 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "WARNING: Abandon current mode %s, an alternative mode %s has formed that is globally more concentrated!", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
LABEL_18:
    operator new();
  }
  *a4 = 0;
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  v15 = (char *)v35;
  if (v35)
  {
    v16 = v36;
    v17 = v35;
    if (v36 != v35)
    {
      v18 = v36;
      do
      {
        v20 = (void *)*((_QWORD *)v18 - 3);
        v18 -= 24;
        v19 = v20;
        if (v20)
        {
          *((_QWORD *)v16 - 2) = v19;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = v35;
    }
    v36 = v15;
    operator delete(v17);
  }
  if (v32)
  {
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
    v32 = 0;
  }
  if (v28[0])
  {
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
}

void sub_10025A218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a18 < 0)
    operator delete(__p);
  sub_10025ADA0((uint64_t)&a25);
  if (!a19)
    _Unwind_Resume(a1);
  operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_10025A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  uint8_t v8[16];

  sub_1002349C0(a1, 2.0);
  v6 = sub_100235638(a1, a2, a3);
  sub_10007AB9C(a1, v6);
  if (sub_100234B5C(a1))
  {
    if (qword_100417ED8 == -1)
    {
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        sub_100234970(a1);
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FF670);
      v7 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_INFO))
        goto LABEL_5;
    }
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WARNING: Inliers did not have enough weight to maintain the current mode. Resetting mode estimator!", v8, 2u);
    goto LABEL_5;
  }
}

double sub_10025A374@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100236100(*a1, a2);
}

void sub_10025A37C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  size_t v14;
  double v15;
  double v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double v47;
  size_t v48;
  __n128 *v49;
  __n128 *v50;
  void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __n128 *v58;
  __n128 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __n128 *v64;
  __n128 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  void *__p;
  char *v72;
  char *v73;
  void *v74;
  __n128 *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  char *v80;
  void *v81;
  __n128 *v82;

  v4 = (uint64_t)a1;
  v6 = a2[1];
  v77 = *a2;
  v78 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_100230578(a1, &v77, (uint64_t)&v79);
  v9 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  __p = 0;
  v72 = 0;
  v73 = 0;
  sub_1002414C8((char **)&v74, 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (_BYTE *)v81) >> 4));
  v13 = (__n128 *)v81;
  v12 = v82;
  if (v82 == v81)
  {
    v48 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (_BYTE *)v81) >> 4);
    v16 = 0.0;
    v15 = 0.0;
    v13 = v82;
    v49 = (__n128 *)v74;
    v50 = v75;
    if (v75 == v74)
      goto LABEL_44;
    goto LABEL_45;
  }
  v70 = v4;
  v14 = 0;
  v15 = 0.0;
  v16 = 0.0;
  do
  {
    v17 = &v13[5 * v14];
    if (v17[3].n128_u8[0])
      goto LABEL_40;
    v18 = v75;
    if ((unint64_t)v75 >= v76)
    {
      v25 = (__n128 *)sub_10025B034(&v74, v17);
    }
    else
    {
      sub_10003FADC(v75, v17);
      v19 = &v13[5 * v14];
      v20 = v19[1];
      v21 = v19[2];
      v18[3].n128_u16[0] = v19[3].n128_u16[0];
      v18[1] = v20;
      v18[2] = v21;
      v18[3].n128_u64[1] = v19[3].n128_u64[1];
      v22 = v19[4].n128_u64[0];
      v18[4].n128_u64[0] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v18[4].n128_u64[1] = v13[5 * v14 + 4].n128_u64[1];
      v25 = v18 + 5;
    }
    v75 = v25;
    v26 = v79;
    v27 = v72;
    if (v72 >= v73)
    {
      v29 = (char *)__p;
      v30 = v72 - (_BYTE *)__p;
      v31 = (v72 - (_BYTE *)__p) >> 3;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61)
        sub_1000D02C0();
      v33 = v73 - (_BYTE *)__p;
      if ((v73 - (_BYTE *)__p) >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 61)
          sub_1000CDEB8();
        v35 = (char *)operator new(8 * v34);
        v36 = &v35[8 * v31];
        *(_QWORD *)v36 = v26[v14];
        v28 = (uint64_t)(v36 + 8);
        if (v27 == v29)
          goto LABEL_37;
      }
      else
      {
        v35 = 0;
        v36 = (char *)(8 * v31);
        *(_QWORD *)(8 * v31) = *((_QWORD *)v79 + v14);
        v28 = 8 * v31 + 8;
        if (v27 == v29)
        {
LABEL_37:
          __p = v36;
          v72 = (char *)v28;
          v73 = &v35[8 * v34];
          if (v29)
            operator delete(v29);
          goto LABEL_39;
        }
      }
      v37 = v27 - 8 - v29;
      if (v37 < 0x58)
        goto LABEL_83;
      if ((unint64_t)(v27 - &v35[v30]) < 0x20)
        goto LABEL_83;
      v38 = (v37 >> 3) + 1;
      v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
      v40 = &v27[-v39];
      v36 -= v39;
      v41 = &v35[8 * v31 - 16];
      v42 = v27 - 16;
      v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(_OWORD *)v42;
        *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
        *(_OWORD *)v41 = v44;
        v41 -= 32;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      v27 = v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_83:
        do
        {
          v45 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v36 - 1) = v45;
          v36 -= 8;
        }
        while (v27 != v29);
      }
      goto LABEL_37;
    }
    *(_QWORD *)v72 = *((_QWORD *)v79 + v14);
    v28 = (uint64_t)(v27 + 8);
LABEL_39:
    v72 = (char *)v28;
    v46 = sub_100047C20((uint64_t)v81 + 80 * v14);
    v15 = v15 + exp(v46);
    v13 = (__n128 *)v81;
LABEL_40:
    v47 = sub_100047C20((uint64_t)&v13[5 * v14]);
    v16 = v16 + exp(v47);
    ++v14;
    v13 = (__n128 *)v81;
    v12 = v82;
    v48 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v82 - (_BYTE *)v81) >> 4);
  }
  while (v14 < v48);
  v4 = v70;
  v49 = (__n128 *)v74;
  v50 = v75;
  if (v75 == v74)
  {
LABEL_44:
    sub_100226034((char **)&v74, v13, v12, v48);
    sub_100199588(&__p, (char *)v79, v80, (v80 - (_BYTE *)v79) >> 3);
    v49 = (__n128 *)v74;
    v50 = v75;
    v15 = v16;
  }
LABEL_45:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1001E3558((__n128 **)a3, v49, v50, 0xCCCCCCCCCCCCCCCDLL * (v50 - v49));
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v51 = __p;
  v52 = v72 - (_BYTE *)__p;
  if (v72 != __p)
  {
    if (v52 < 0)
      sub_1000D02C0();
    v53 = (char *)operator new(v72 - (_BYTE *)__p);
    *(_QWORD *)(a3 + 24) = v53;
    *(_QWORD *)(a3 + 32) = v53;
    v54 = &v53[8 * (v52 >> 3)];
    *(_QWORD *)(a3 + 40) = v54;
    memcpy(v53, v51, v52);
    *(_QWORD *)(a3 + 32) = v54;
  }
  v55 = a2[1];
  *(_QWORD *)(a3 + 48) = *a2;
  *(_QWORD *)(a3 + 56) = v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  *(_QWORD *)(a3 + 64) = sub_100230570(v4);
  *(double *)(a3 + 72) = v15 / v16;
  if (__p)
  {
    v72 = (char *)__p;
    operator delete(__p);
  }
  v58 = (__n128 *)v74;
  if (v74)
  {
    v59 = v75;
    v60 = v74;
    if (v75 != v74)
    {
      do
      {
        v61 = (std::__shared_weak_count *)v59[-1].n128_u64[0];
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v59 -= 5;
      }
      while (v59 != v58);
      v60 = v74;
    }
    v75 = v58;
    operator delete(v60);
  }
  v64 = (__n128 *)v81;
  if (v81)
  {
    v65 = v82;
    v66 = v81;
    if (v82 != v81)
    {
      do
      {
        v67 = (std::__shared_weak_count *)v65[-1].n128_u64[0];
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v65 -= 5;
      }
      while (v65 != v64);
      v66 = v81;
    }
    v82 = v64;
    operator delete(v66);
  }
  if (v79)
  {
    v80 = (char *)v79;
    operator delete(v79);
  }
}

void sub_10025A8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v23;

  sub_1000E095C(v21);
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 32) = v23;
    operator delete(v23);
  }
  sub_10022044C((void **)v19);
  if (__p)
    operator delete(__p);
  sub_10022044C(&a14);
  sub_1002304C8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t *sub_10025A938(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  float64x2_t *v12;
  float64x2_t *v13;
  unint64_t v14;
  float64x2_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  double *v19;
  double v20;
  void *v22[2];
  void *__p[2];
  char v24;

  v4 = sub_100270038(a2);
  if (v4 != sub_100270038(a1))
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v24 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)v22);
  }
  v5 = *a1;
  v6 = a1[1];
  v7 = v6 - *a1;
  if (a2[1] - *a2 != v7)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v24 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v22);
  }
  if (v6 != v5)
  {
    v8 = v7 >> 3;
    v9 = *a2;
    if (v8 <= 1)
      v8 = 1;
    if (v8 < 6 || (v5 < v9 + 8 * v8 ? (v10 = v9 >= v5 + 8 * v8) : (v10 = 1), !v10))
    {
      v11 = 0;
LABEL_17:
      v16 = v8 - v11;
      v17 = 8 * v11;
      v18 = (double *)(v9 + v17);
      v19 = (double *)(v5 + v17);
      do
      {
        v20 = *v18++;
        *v19 = v20 + *v19;
        ++v19;
        --v16;
      }
      while (v16);
      return a1;
    }
    v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (float64x2_t *)(v9 + 16);
    v13 = (float64x2_t *)(v5 + 16);
    v14 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = vaddq_f64(*v12, *v13);
      v13[-1] = vaddq_f64(v12[-1], v13[-1]);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v8 != v11)
      goto LABEL_17;
  }
  return a1;
}

void sub_10025AAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10025AB14(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10025AB40(double **a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  void *v17[2];
  char v18;

  if (sub_1002D0E2C((uint64_t)a1))
  {
    v18 = 4;
    strcpy((char *)v17, "null");
  }
  else
  {
    sub_1002BF83C((uint64_t)(a1 + 3));
  }
  sub_1002702E4(a1, (uint64_t)&v13);
  v4 = std::string::insert(&v13, 0, "MultivariateGaussian(mean:");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v14, ", cov:");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0)
    v8 = (const std::string::value_type *)v17;
  else
    v8 = (const std::string::value_type *)v17[0];
  if (v18 >= 0)
    v9 = v18;
  else
    v9 = (std::string::size_type)v17[1];
  v10 = std::string::append(&v15, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v16, ")");
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v18 & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v17[0]);
    return;
  }
LABEL_19:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (v18 < 0)
    goto LABEL_20;
}

void sub_10025ACDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v28 - 17) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v28 - 17) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025ADA0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 120);
    v5 = *(void **)(a1 + 112);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 120);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 112);
    }
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v5);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = *(void **)(a1 + 88);
    if (v9)
    {
      *(_QWORD *)(a1 + 96) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 80) = 0;
  }
  if (*(_BYTE *)a1)
  {
    v10 = *(void **)(a1 + 48);
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = v10;
      operator delete(v10);
    }
    v11 = *(void **)(a1 + 8);
    if (v11)
    {
      *(_QWORD *)(a1 + 16) = v11;
      operator delete(v11);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

_QWORD *sub_10025AE6C(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  float64x2_t *v8;
  float64x2_t *v9;
  unint64_t v10;
  float64x2_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  void *v17[2];
  void *__p[2];
  char v19;

  if (a2[1] != result[1])
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v19 < 0)
      operator delete(__p[0]);
    sub_10015C2DC((uint64_t)v17);
  }
  v2 = result[2];
  v3 = result[3];
  if (a2[3] - a2[2] != v3 - v2)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v19 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v17);
  }
  if (v3 != v2)
  {
    v4 = (uint64_t)(v3 - v2) >> 3;
    v5 = a2[2];
    if (v4 <= 1)
      v4 = 1;
    if (v4 < 6 || (v2 < v5 + 8 * v4 ? (v6 = v5 >= v2 + 8 * v4) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_17:
      v12 = v4 - v7;
      v13 = 8 * v7;
      v14 = (double *)(v5 + v13);
      v15 = (double *)(v2 + v13);
      do
      {
        v16 = *v14++;
        *v15 = v16 + *v15;
        ++v15;
        --v12;
      }
      while (v12);
      return result;
    }
    v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v8 = (float64x2_t *)(v5 + 16);
    v9 = (float64x2_t *)(v2 + 16);
    v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11 = vaddq_f64(*v8, *v9);
      v9[-1] = vaddq_f64(v8[-1], v9[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7)
      goto LABEL_17;
  }
  return result;
}

void sub_10025B014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_10025B034(void **a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  __n128 v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  char *v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 *v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  __n128 *v29;
  __n128 *v30;
  char *v31;

  v3 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_1000D02C0();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      sub_1000CDEB8();
    v7 = operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v29 = (__n128 *)&v7[10 * v3];
  v31 = (char *)&v7[10 * v6];
  sub_10003FADC(v29, a2);
  v8 = a2[2];
  v29[1] = a2[1];
  v29[2] = v8;
  v29[3].n128_u16[0] = a2[3].n128_u16[0];
  v9 = a2[4].n128_u64[0];
  v29[3].n128_u64[1] = a2[3].n128_u64[1];
  v29[4].n128_u64[0] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  v12 = (char *)&v7[10 * v3];
  v13 = (char *)&v29[5];
  v15 = (__n128 *)*a1;
  v14 = (__n128 *)a1[1];
  if (v14 == *a1)
  {
    v24 = (__n128 *)a1[1];
  }
  else
  {
    v16 = v29;
    do
    {
      v17 = v14 - 5;
      sub_10003FADC(v16 - 5, v14 - 5);
      v19 = v14[-4];
      v20 = v14[-3];
      v16[-2].n128_u16[0] = v14[-2].n128_u16[0];
      v16[-4] = v19;
      v16[-3] = v20;
      v16[-2].n128_u64[1] = v14[-2].n128_u64[1];
      v21 = v14[-1].n128_u64[0];
      v16[-1].n128_u64[0] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v16[-1].n128_u64[1] = v14[-1].n128_u64[1];
      v16 = (__n128 *)v18;
      v14 -= 5;
    }
    while (v17 != v15);
    v24 = (__n128 *)*a1;
    v14 = (__n128 *)a1[1];
    v12 = v18;
    v13 = (char *)&v29[5];
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v31;
  if (v14 == v24)
  {
    if (v14)
LABEL_25:
      operator delete(v14);
  }
  else
  {
    do
    {
      v30 = v14 - 5;
      v26 = (std::__shared_weak_count *)v14[-1].n128_u64[0];
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v14 -= 5;
    }
    while (v30 != v24);
    v14 = v24;
    if (v24)
      goto LABEL_25;
  }
  return v13;
}

void sub_10025B288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002243F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025B2C4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025B320()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10025B37C(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _BYTE v22[392];

  if (!*(_QWORD *)(a2 + 24))
  {
    v14 = a1[5];
    v13 = a1[6];
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(std::__shared_weak_count **)(a2 + 32);
    *(_QWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v13;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[4];
  v20 = a1[3];
  v21 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_10022CB08((uint64_t)v22, a2);
  (*(void (**)(uint64_t, uint64_t *, _BYTE *, double))(*(_QWORD *)v6 + 24))(v6, &v20, v22, a3);
  sub_1000BA0F0((uint64_t)v22);
  v10 = v21;
  if (v21)
  {
    v11 = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_10025B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000BA0F0((uint64_t)&a11);
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025B500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025B514(uint64_t *a1, uint64_t a2)
{
  sub_10022484C(*a1, a2);
}

uint64_t sub_10025B51C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_10025B544()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025B5A0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025B5FC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *a2);
}

uint64_t sub_10025B610(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_10025B620(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  void *v25[2];
  uint64_t v26;
  __int128 __p;
  uint64_t v28;

  v5 = *(char **)(*(_QWORD *)a1 + 56);
  v4 = *(char **)(*(_QWORD *)a1 + 64);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v8 = *(char **)(*(_QWORD *)a1 + 64);
  }
  else
  {
    v7 = v6 >> 3;
    v8 = *(char **)(*(_QWORD *)a1 + 56);
    do
    {
      v9 = v7 >> 1;
      v10 = (uint64_t *)&v8[8 * (v7 >> 1)];
      v12 = *v10;
      v11 = (char *)(v10 + 1);
      v7 += ~(v7 >> 1);
      if (v12 < a2)
        v8 = v11;
      else
        v7 = v9;
    }
    while (v7);
  }
  v13 = v8 - v5;
  v14 = (unint64_t)v13 >> 3;
  if ((int)((unint64_t)v13 >> 3) <= 1)
    LODWORD(v14) = 1;
  v15 = (v14 - 1);
  v16 = (int)(v13 >> 3);
  v17 = (v6 >> 3) - 1;
  v18 = v4 == v8;
  if (v4 == v8)
    v19 = v17;
  else
    v19 = v15;
  if (!v18)
    v17 = v16;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  v21 = (__int128 *)(v20 + 24 * v19);
  v22 = (__int128 *)(v20 + 24 * v17);
  if (*((char *)v21 + 23) < 0)
  {
    sub_10006CED8(v25, *(void **)v21, *((_QWORD *)v21 + 1));
    if ((*((char *)v22 + 23) & 0x80000000) == 0)
      goto LABEL_18;
  }
  else
  {
    v23 = *v21;
    v26 = *((_QWORD *)v21 + 2);
    *(_OWORD *)v25 = v23;
    if ((*((char *)v22 + 23) & 0x80000000) == 0)
    {
LABEL_18:
      v24 = *v22;
      v28 = *((_QWORD *)v22 + 2);
      __p = v24;
      goto LABEL_21;
    }
  }
  sub_10006CED8(&__p, *(void **)v22, *((_QWORD *)v22 + 1));
LABEL_21:
  sub_10008930C(a3, (uint64_t)v25);
  sub_10008930C(a3 + 2, (uint64_t)&__p);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(v25[0]);
    return;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v26) < 0)
    goto LABEL_25;
}

void sub_10025B784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10025B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      sub_1000F7B78((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_1000F7B78((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025B800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v32[5];
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v6 = *(_QWORD **)a1;
  v8 = (char *)v6[7];
  v7 = (char *)v6[8];
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v11 = (char *)v6[8];
  }
  else
  {
    v10 = v9 >> 3;
    v11 = (char *)v6[7];
    do
    {
      v12 = v10 >> 1;
      v13 = (uint64_t *)&v11[8 * (v10 >> 1)];
      v15 = *v13;
      v14 = (char *)(v13 + 1);
      v10 += ~(v10 >> 1);
      if (v15 < a2)
        v11 = v14;
      else
        v10 = v12;
    }
    while (v10);
  }
  v16 = (unint64_t)(v11 - v8) >> 3;
  if ((int)v16 <= 1)
    LODWORD(v16) = 1;
  v17 = (v16 - 1);
  v18 = (v9 >> 3) - 1;
  if (v7 == v11)
    v19 = v18;
  else
    v19 = v17;
  v20 = v6[14];
  if (0xAAAAAAAAAAAAAAABLL * ((v6[15] - v20) >> 3) <= v19)
    sub_1001E2FA0();
  v21 = *(_QWORD *)(a1 + 176);
  sub_10008930C(&v35, v20 + 24 * v19);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v21 + 16))(v32, v21, &v35);
  v22 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(&v35, *(_QWORD *)(a1 + 8), a2);
  sub_100159BA4((uint64_t)v32, (uint64_t)&v35, a3);
  nullsub_23(&v35);
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return nullsub_22(v32);
}

void sub_10025B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  nullsub_23(&a17);
  sub_10015A328((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025B9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10015A328((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100195804((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025BA10()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025BA6C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10025BAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned __int128 v33;
  double v34[4];
  _BYTE v35[32];
  unint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[24];
  char v39;

  if (qword_100417ED8 == -1)
  {
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FF880);
  v7 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v8 = a4[1] - *a4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "UniformGeneratorBase::setParticleState, for #outputParticles=%zu", buf, 0xCu);
  }
LABEL_4:
  v36 = 0;
  v37 = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  *(_QWORD *)buf = off_1003F9A68;
  v39 = 0;
  v9 = *a4;
  v10 = a4[1];
  if (*a4 == v10)
  {
    nullsub_23(buf);
  }
  else
  {
    do
    {
      v12 = (uint64_t *)sub_100272D98(*(uint64_t **)(a3 + 40), a2, 1);
      v14 = *v12;
      v13 = (std::__shared_weak_count *)v12[1];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = v37;
      v36 = v14;
      v37 = v13;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v36;
      v34[0] = (*(double (**)(unint64_t))(*(_QWORD *)v36 + 24))(v36);
      v34[1] = v21;
      v34[2] = v22;
      v34[3] = v23;
      sub_100303E34(v34, a2, (uint64_t)v35);
      sub_100077D9C((uint64_t)buf, (uint64_t)v35);
      nullsub_23(v35);
      v24 = *v9;
      v33 = __PAIR128__((unint64_t)v37, v20);
      if (v37)
      {
        v25 = (unint64_t *)&v37->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      sub_100223E98(v24, (__int128 *)&v33);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v11 = *v9++;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&buf[8];
      *(_BYTE *)(v11 + 48) = 0;
    }
    while (v9 != v10);
    v30 = v37;
    nullsub_23(buf);
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
}

void sub_10025BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  sub_1000E095C((uint64_t)&a9);
  nullsub_23(&a21);
  sub_1000E095C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_10025BD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  nullsub_23((uint64_t *)va);
  nullsub_23(va2);
  sub_1000E095C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10025BDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  nullsub_23(va1);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025BDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  NSObject *v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  double v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *i;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t *v48;
  uint64_t *v49;
  long double v50;
  uint64_t *v51;
  double v52;
  double v53;
  __n128 **v54;
  __n128 **v55;
  int j;
  double v57;
  double v58;
  double v59;
  __double2 v60;
  __n128 *v61;
  __n128 *v62;
  __n128 v63;
  __n128 v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 *v68;
  uint64_t v69;
  double (*v70)(uint64_t, double, double);
  double v71;
  double v72;
  double v73;
  double v74;
  __double2 v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  __double2 v82;
  double v83;
  double v84;
  double v85;
  double v86;
  __double2 v87;
  double v88;
  double v89;
  double v90;
  double v91;
  __double2 v92;
  double v93;
  double v94;
  double v95;
  double v96;
  __double2 v97;
  double v98;
  __n128 *v99;
  __n128 *v100;
  uint64_t v101;
  unint64_t v102;
  double *n128_f64;
  double v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  __n128 *v112;
  uint64_t v113;
  double v114;
  int64_t v115;
  __n128 *v117;
  uint64_t v118;
  __n128 v119;
  __n128 v120;
  unsigned __int16 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  __n128 *v133;
  __n128 v134;
  __n128 v135;
  __int128 v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  __n128 *v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  double v150;
  __n128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  double v160;
  __n128 v161;
  __int128 v162;
  __int128 v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  __n128 v170;
  __n128 v171;
  __n128 v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t *v181;
  _QWORD *v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t *k;
  uint64_t v192;
  double v193;
  double v194;
  uint64_t *v195;
  uint64_t *v196;
  __n128 v197;
  long double v198;
  double v199;
  uint64_t *v200;
  unint64_t v201;
  double v202;
  double v203;
  BOOL v204;
  double v205;
  double v206;
  __n128 *v207;
  __n128 *v208;
  void *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  char *v213;
  char *v214;
  void *v215;
  uint64_t v216;
  int v217;
  char *v218;
  char *v219;
  void *v220;
  uint64_t v221;
  int v222;
  uint64_t **v223;
  void *v225[3];
  void *v226;
  __n128 *v227;
  unint64_t v228;
  void *v229;
  char *v230;
  void *__p;
  void *v232;
  void *v233;
  char *v234;
  void *v235;
  void *v236;
  void *v237;
  char *v238;
  char *v239;
  void *v240;
  char *v241;
  void *v242;
  void *v243;
  void *v244[2];
  __n128 v245;
  __n128 v246;
  __n128 v247;
  unsigned __int16 v248;
  __n128 v249;
  unint64_t v250;
  __n128 buf;
  __n128 v252;
  __int128 v253;
  __int16 v254;
  __int128 v255;
  uint64_t v256;

  if (qword_100417ED8 != -1)
  {
    dispatch_once(&qword_100417ED8, &stru_1003FF880);
    v7 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v8 = a4[1] - *a4;
    buf.n128_u32[0] = 134217984;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WifiHistoryWeight::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
LABEL_4:
  v223 = a4;
  sub_1002752DC(a3, &v240);
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v9 = v240;
  if (v241 != v240)
  {
    v10 = 0;
    do
    {
      v11 = v238;
      if (v238 >= v239)
      {
        v13 = (char *)v237;
        v14 = v238 - (_BYTE *)v237;
        v15 = (v238 - (_BYTE *)v237) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_1000D02C0();
        v17 = v239 - (_BYTE *)v237;
        if ((v239 - (_BYTE *)v237) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            sub_1000CDEB8();
          v19 = (char *)operator new(8 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = 0x3F947AE147AE147BLL;
        v12 = v20 + 8;
        if (v11 != v13)
        {
          v21 = v11 - 8 - v13;
          if (v21 < 0x58)
            goto LABEL_243;
          if ((unint64_t)(v11 - &v19[v14]) < 0x20)
            goto LABEL_243;
          v22 = (v21 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v24 = &v11[-v23];
          v20 -= v23;
          v25 = &v19[8 * v15 - 16];
          v26 = v11 - 16;
          v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *(_OWORD *)v26;
            *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
            *(_OWORD *)v25 = v28;
            v25 -= 32;
            v26 -= 32;
            v27 -= 4;
          }
          while (v27);
          v11 = v24;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_243:
            do
            {
              v29 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v20 - 1) = v29;
              v20 -= 8;
            }
            while (v11 != v13);
          }
        }
        v237 = v20;
        v238 = v12;
        v239 = &v19[8 * v18];
        if (v13)
        {
          operator delete(v13);
          v9 = v240;
        }
      }
      else
      {
        *(_QWORD *)v238 = 0x3F947AE147AE147BLL;
        v12 = v11 + 8;
      }
      v238 = v12;
      v30 = v9[52 * v10 + 8];
      if (v30 == v30 >> 31)
      {
        v31 = *(double *)&v9[52 * v10 + 18];
      }
      else
      {
        v32 = (char *)&v9[52 * v10];
        v35 = (char *)*((_QWORD *)v32 + 5);
        v33 = v32 + 40;
        v34 = v35;
        if (v30 >= 0)
          v36 = v33;
        else
          v36 = v34;
        v31 = (double)*((int *)v36 + 23);
      }
      if (sub_10021930C(v31))
        *((_QWORD *)v242 + v10) = 0;
      ++v10;
      v9 = v240;
    }
    while (v10 < 0x4EC4EC4EC4EC4EC5 * ((v241 - (_BYTE *)v240) >> 4));
  }
  sub_100043C90(&v229, (uint64_t *)&v240);
  sub_100045E90((uint64_t)&v233, (uint64_t)&v229, 0, 1.0);
  if (__p)
  {
    v232 = __p;
    operator delete(__p);
  }
  v37 = (char *)v229;
  if (v229)
  {
    v38 = v230;
    v39 = v229;
    if (v230 != v229)
    {
      do
      {
        v41 = *((_DWORD *)v38 - 44);
        if (v41 == v41 >> 31)
        {
          if (*(v38 - 128))
            *(v38 - 128) = 0;
        }
        else
        {
          v40 = *((_QWORD *)v38 - 21);
          if (v41 < 0)
          {
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
          else
          {
            (*(void (**)(char *))v40)(v38 - 168);
          }
        }
        v38 -= 208;
      }
      while (v38 != v37);
      v39 = v229;
    }
    v230 = v37;
    operator delete(v39);
  }
  v226 = 0;
  v227 = 0;
  v228 = 0;
  v42 = *v223;
  v43 = v223[1];
  if (*v223 != v43)
  {
    for (i = v42 + 1; i != v43; ++i)
    {
      v45 = *i;
      v46 = sub_100047C20(*v42);
      if (v46 > sub_100047C20(v45))
        v42 = i;
    }
  }
  v47 = sub_100047C20(*v42);
  v49 = *v223;
  v48 = v223[1];
  v50 = 0.0;
  if (v47 == -INFINITY)
  {
    v51 = *v223;
  }
  else
  {
    v51 = v223[1];
    if (v49 != v48)
    {
      do
      {
        v52 = sub_100047C20(*v49);
        v50 = v50 + exp(v52 - v47);
        ++v49;
      }
      while (v49 != v48);
      v51 = *v223;
      v48 = v223[1];
    }
  }
  v53 = log(v50);
  sub_1002414C8((char **)&v226, (((char *)v48 - (char *)v51) >> 1) + v48 - v51);
  v54 = (__n128 **)*v223;
  v55 = (__n128 **)v223[1];
  if (*v223 == (uint64_t *)v55)
    goto LABEL_82;
  while (2)
  {
    for (j = 0; j != 5; ++j)
    {
      v61 = *v54;
      v62 = v227;
      if ((unint64_t)v227 >= v228)
      {
        v68 = (__n128 *)sub_1002318E4(&v226, *v54);
        v227 = v68;
        if (!j)
          continue;
      }
      else
      {
        sub_10003FADC(v227, *v54);
        v63 = v61[1];
        v64 = v61[2];
        v62[3].n128_u16[0] = v61[3].n128_u16[0];
        v62[1] = v63;
        v62[2] = v64;
        v62[3].n128_u64[1] = v61[3].n128_u64[1];
        v65 = v61[4].n128_u64[0];
        v62[4].n128_u64[0] = v65;
        if (v65)
        {
          v66 = (unint64_t *)(v65 + 8);
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v62[4].n128_u64[1] = v61[4].n128_u64[1];
        v68 = v62 + 5;
        v227 = v62 + 5;
        if (!j)
          continue;
      }
      v68[-3].n128_f64[1] = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24))(a2, -2.0, 2.0)
                          + v68[-3].n128_f64[1];
      v69 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v68[-2].n128_u64[1] + 16))(v68[-2].n128_u64[1]);
      v70 = *(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24);
      if (!v69)
      {
        v98 = v70(a2, 0.0, 20.0);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
        v57 = v98 + 5.0;
        v58 = v68[-4].n128_f64[0];
        v60 = __sincos_stret(v59);
        v76 = v58 + v57 * v60.__cosval;
        v77 = v68[-4].n128_f64[1] + v57 * v60.__sinval;
LABEL_65:
        v68[-4].n128_f64[0] = v76;
        v68[-4].n128_f64[1] = v77;
        continue;
      }
      v71 = v70(a2, 0.0, 20.0);
      v72 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v73 = v71 + 5.0;
      v74 = v68[-4].n128_f64[0];
      v75 = __sincos_stret(v72);
      v76 = v74 + v73 * v75.__cosval;
      v77 = v68[-4].n128_f64[1] + v73 * v75.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(_QWORD *)v69 + 16))(v69, v76, v77))
        goto LABEL_65;
      v78 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24))(a2, 0.0, 20.0);
      v79 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v80 = v78 + 5.0;
      v81 = v68[-4].n128_f64[0];
      v82 = __sincos_stret(v79);
      v76 = v81 + v80 * v82.__cosval;
      v77 = v68[-4].n128_f64[1] + v80 * v82.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(_QWORD *)v69 + 16))(v69, v76, v77))
        goto LABEL_65;
      v83 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24))(a2, 0.0, 20.0);
      v84 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v85 = v83 + 5.0;
      v86 = v68[-4].n128_f64[0];
      v87 = __sincos_stret(v84);
      v76 = v86 + v85 * v87.__cosval;
      v77 = v68[-4].n128_f64[1] + v85 * v87.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(_QWORD *)v69 + 16))(v69, v76, v77))
        goto LABEL_65;
      v88 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24))(a2, 0.0, 20.0);
      v89 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v90 = v88 + 5.0;
      v91 = v68[-4].n128_f64[0];
      v92 = __sincos_stret(v89);
      v76 = v91 + v90 * v92.__cosval;
      v77 = v68[-4].n128_f64[1] + v90 * v92.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(_QWORD *)v69 + 16))(v69, v76, v77))
        goto LABEL_65;
      v93 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 24))(a2, 0.0, 20.0);
      v94 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v95 = v93 + 5.0;
      v96 = v68[-4].n128_f64[0];
      v97 = __sincos_stret(v94);
      v76 = v96 + v95 * v97.__cosval;
      v77 = v68[-4].n128_f64[1] + v95 * v97.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(_QWORD *)v69 + 16))(v69, v76, v77))
        goto LABEL_65;
    }
    if (++v54 != v55)
      continue;
    break;
  }
LABEL_82:
  sub_100047118((double *)(a1 + 8), (uint64_t *)&v226, &v237, (double *)&v233, (uint64_t *)v225);
  v100 = (__n128 *)v226;
  v99 = v227;
  if (v227 == v226)
  {
    v100 = v227;
    v106 = (char *)v223[1] - (char *)*v223;
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v227 - (_BYTE *)v226) >> 4) >= v106 >> 3)
      goto LABEL_88;
LABEL_154:
    sub_1000D5048(&v245, "");
    sub_10015D524("Didn't generate enough hypotheses for output!", (std::string *)&buf);
    sub_100174738((uint64_t)&v245, (uint64_t)&buf, 1);
    if (v252.n128_i8[7] < 0)
      operator delete((void *)buf.n128_u64[0]);
    if (v246.n128_i8[7] < 0)
      operator delete((void *)v245.n128_u64[0]);
    sub_1000F2AE4((uint64_t)v244);
  }
  v101 = 0;
  v102 = 0;
  do
  {
    if (fabs(*((double *)v225[0] + v102)) == INFINITY)
      *((_QWORD *)v225[0] + v102) = 0xC202A05F20000000;
    n128_f64 = v100[v101].n128_f64;
    v104 = sub_100047C20((uint64_t)n128_f64);
    sub_100047C28(n128_f64, *((double *)v225[0] + v102++) - v104);
    v100 = (__n128 *)v226;
    v99 = v227;
    v105 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v227 - (_BYTE *)v226) >> 4);
    v101 += 5;
  }
  while (v102 < v105);
  v106 = (char *)v223[1] - (char *)*v223;
  if (v105 < v106 >> 3)
    goto LABEL_154;
LABEL_88:
  v107 = v106 << 29;
  if (v106 << 29)
  {
    v108 = (int)(v106 >> 3);
    if (v107 >= 0x100000001)
    {
      v109 = (unint64_t)(v108 - 2) >> 1;
      v110 = v109 + 1;
      v111 = (uint64_t)&v100[5 * v109];
      do
      {
        sub_10025F728((uint64_t)v100, (int)(v106 >> 3), v111);
        v111 -= 80;
        --v110;
      }
      while (v110);
    }
    v112 = &v100[5 * (int)((unint64_t)v106 >> 3)];
    if (v112 != v99)
    {
      v113 = (uint64_t)&v100[5 * (int)((unint64_t)v106 >> 3)];
      do
      {
        v114 = sub_100047C20(v113);
        if (v114 > sub_100047C20((uint64_t)v100))
        {
          sub_100227564(v113, (uint64_t)v100);
          sub_10025F728((uint64_t)v100, v108, (uint64_t)v100);
        }
        v113 += 80;
      }
      while ((__n128 *)v113 != v99);
    }
    if (v107 >= 0x100000001)
    {
      v115 = 80 * v108 / 0x50uLL;
      do
      {
        v117 = v112;
        sub_10003FADC(&v245, v100);
        v118 = 0;
        v119 = v100[1];
        v120 = v100[2];
        v121 = v100[3].n128_u16[0];
        v249 = *(__n128 *)((char *)v100 + 56);
        v248 = v121;
        v100[3].n128_u64[1] = 0;
        v100[4].n128_u64[0] = 0;
        v250 = v100[4].n128_u64[1];
        v122 = (uint64_t)v100;
        v246 = v119;
        v247 = v120;
        do
        {
          v123 = v122;
          v122 += 80 * v118 + 80;
          v124 = 2 * v118;
          v118 = (2 * v118) | 1;
          v125 = v124 + 2;
          if (v124 + 2 < v115)
          {
            v126 = sub_100047C20(v122);
            if (v126 > sub_100047C20(v122 + 80))
            {
              v122 += 80;
              v118 = v125;
            }
          }
          sub_10003FADC((__n128 *)v123, (__n128 *)v122);
          v127 = *(_OWORD *)(v122 + 16);
          v128 = *(_OWORD *)(v122 + 32);
          *(_WORD *)(v123 + 48) = *(_WORD *)(v122 + 48);
          *(_OWORD *)(v123 + 16) = v127;
          *(_OWORD *)(v123 + 32) = v128;
          v129 = *(_OWORD *)(v122 + 56);
          *(_QWORD *)(v122 + 56) = 0;
          *(_QWORD *)(v122 + 64) = 0;
          v130 = *(std::__shared_weak_count **)(v123 + 64);
          *(_OWORD *)(v123 + 56) = v129;
          if (v130)
          {
            p_shared_owners = (unint64_t *)&v130->__shared_owners_;
            do
              v132 = __ldaxr(p_shared_owners);
            while (__stlxr(v132 - 1, p_shared_owners));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          *(_QWORD *)(v123 + 72) = *(_QWORD *)(v122 + 72);
        }
        while (v118 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
        v133 = (__n128 *)(v122 + 16);
        v112 -= 5;
        if ((__n128 *)v122 == &v117[-5])
        {
          sub_10003FADC((__n128 *)v122, &v245);
          v170 = v246;
          v171 = v247;
          *(_WORD *)(v122 + 48) = v248;
          *v133 = v170;
          *(__n128 *)(v122 + 32) = v171;
          v172 = v249;
          v249 = 0uLL;
          v173 = *(std::__shared_weak_count **)(v122 + 64);
          *(__n128 *)(v122 + 56) = v172;
          if (v173)
          {
            v174 = (unint64_t *)&v173->__shared_owners_;
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          *(_QWORD *)(v122 + 72) = v250;
          goto LABEL_146;
        }
        sub_10003FADC((__n128 *)v122, v117 - 5);
        v134 = v117[-4];
        v135 = v117[-3];
        *(_WORD *)(v122 + 48) = v117[-2].n128_u16[0];
        *v133 = v134;
        *(__n128 *)(v122 + 32) = v135;
        v136 = *(__int128 *)((char *)&v117[-2] + 8);
        v117[-2].n128_u64[1] = 0;
        v117[-1].n128_u64[0] = 0;
        v137 = *(std::__shared_weak_count **)(v122 + 64);
        *(_OWORD *)(v122 + 56) = v136;
        if (v137)
        {
          v138 = (unint64_t *)&v137->__shared_owners_;
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        *(_QWORD *)(v122 + 72) = v117[-1].n128_u64[1];
        sub_10003FADC(v117 - 5, &v245);
        v140 = v117 - 4;
        v141 = v246;
        v142 = v247;
        v140[2].n128_u16[0] = v248;
        *v140 = v141;
        v140[1] = v142;
        v143 = v249;
        v249 = 0uLL;
        v144 = (std::__shared_weak_count *)v117[-1].n128_u64[0];
        *(__n128 *)((char *)v117 - 24) = v143;
        if (!v144)
          goto LABEL_120;
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
          v117[-1].n128_u64[1] = v250;
          v147 = v122 + 80 - (_QWORD)v100;
          if (v147 >= 81)
          {
LABEL_121:
            v148 = (v147 / 0x50uLL - 2) >> 1;
            v149 = (uint64_t)&v100[5 * v148];
            v150 = sub_100047C20(v149);
            if (v150 > sub_100047C20(v122))
            {
              sub_10003FADC(&buf, (__n128 *)v122);
              v151 = *v133;
              v152 = *(_OWORD *)(v122 + 32);
              v254 = *(_WORD *)(v122 + 48);
              v252 = v151;
              v253 = v152;
              v255 = *(_OWORD *)(v122 + 56);
              *(_QWORD *)(v122 + 56) = 0;
              *(_QWORD *)(v122 + 64) = 0;
              v256 = *(_QWORD *)(v122 + 72);
              do
              {
                v153 = v149;
                sub_10003FADC((__n128 *)v122, (__n128 *)v149);
                v154 = *(_OWORD *)(v149 + 16);
                v155 = *(_OWORD *)(v149 + 32);
                *(_WORD *)(v122 + 48) = *(_WORD *)(v149 + 48);
                *(_OWORD *)(v122 + 16) = v154;
                *(_OWORD *)(v122 + 32) = v155;
                v156 = *(_OWORD *)(v149 + 56);
                *(_QWORD *)(v149 + 56) = 0;
                *(_QWORD *)(v149 + 64) = 0;
                v157 = *(std::__shared_weak_count **)(v122 + 64);
                *(_OWORD *)(v122 + 56) = v156;
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                *(_QWORD *)(v122 + 72) = *(_QWORD *)(v153 + 72);
                if (!v148)
                  break;
                v148 = (v148 - 1) >> 1;
                v149 = (uint64_t)&v100[5 * v148];
                v160 = sub_100047C20(v149);
                v122 = v153;
              }
              while (v160 > sub_100047C20((uint64_t)&buf));
              sub_10003FADC((__n128 *)v153, &buf);
              v161 = v252;
              v162 = v253;
              *(_WORD *)(v153 + 48) = v254;
              *(__n128 *)(v153 + 16) = v161;
              *(_OWORD *)(v153 + 32) = v162;
              v163 = v255;
              v255 = 0uLL;
              v164 = *(std::__shared_weak_count **)(v153 + 64);
              *(_OWORD *)(v153 + 56) = v163;
              if (v164)
              {
                v165 = (unint64_t *)&v164->__shared_owners_;
                do
                  v166 = __ldaxr(v165);
                while (__stlxr(v166 - 1, v165));
                if (!v166)
                {
                  ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                  std::__shared_weak_count::__release_weak(v164);
                }
              }
              v167 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
              *(_QWORD *)(v153 + 72) = v256;
              if (v167)
              {
                v168 = (unint64_t *)&v167->__shared_owners_;
                do
                  v169 = __ldaxr(v168);
                while (__stlxr(v169 - 1, v168));
                if (!v169)
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
              }
            }
          }
        }
        else
        {
LABEL_120:
          v117[-1].n128_u64[1] = v250;
          v147 = v122 + 80 - (_QWORD)v100;
          if (v147 >= 81)
            goto LABEL_121;
        }
LABEL_146:
        v176 = (std::__shared_weak_count *)v249.n128_u64[1];
        if (v249.n128_u64[1])
        {
          v177 = (unint64_t *)(v249.n128_u64[1] + 8);
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
      }
      while (v115-- > 2);
    }
  }
  v179 = v223[1];
  if (v179 != *v223)
  {
    v180 = 0;
    v179 = *v223;
    do
    {
      v182 = v226;
      v183 = v179[v180];
      sub_10003FADC((__n128 *)v183, (__n128 *)v226 + 5 * v180);
      v184 = (char *)&v182[10 * v180];
      v185 = *((_OWORD *)v184 + 1);
      v186 = *((_OWORD *)v184 + 2);
      *(_WORD *)(v183 + 48) = *((_WORD *)v184 + 24);
      *(_OWORD *)(v183 + 16) = v185;
      *(_OWORD *)(v183 + 32) = v186;
      v187 = *(_OWORD *)(v184 + 56);
      *((_QWORD *)v184 + 7) = 0;
      *((_QWORD *)v184 + 8) = 0;
      v188 = *(std::__shared_weak_count **)(v183 + 64);
      *(_OWORD *)(v183 + 56) = v187;
      if (v188)
      {
        v189 = (unint64_t *)&v188->__shared_owners_;
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      *(_QWORD *)(v183 + 72) = v182[10 * v180++ + 9];
      v179 = *v223;
      v181 = v223[1];
    }
    while (v180 < v181 - *v223);
    if (v179 != v181)
    {
      for (k = v179 + 1; k != v181; ++k)
      {
        v192 = *k;
        v193 = sub_100047C20(*v179);
        if (v193 > sub_100047C20(v192))
          v179 = k;
      }
    }
  }
  v194 = sub_100047C20(*v179);
  v196 = *v223;
  v195 = v223[1];
  v197.n128_u64[0] = 0xFFF0000000000000;
  if (v194 == -INFINITY)
  {
    v197.n128_f64[0] = log(0.0);
    if (v195 == v196)
      goto LABEL_191;
  }
  else
  {
    if (v196 == v195)
      goto LABEL_191;
    v198 = 0.0;
    do
    {
      v199 = sub_100047C20(*v196);
      v198 = v198 + exp(v199 - v194);
      ++v196;
    }
    while (v196 != v195);
    v196 = *v223;
    v200 = v223[1];
    v197.n128_f64[0] = log(v198);
    if (v200 == v196)
      goto LABEL_191;
  }
  v201 = 0;
  v202 = v47 + v53;
  v203 = v202 - (v194 + v197.n128_f64[0]);
  v204 = COERCE__INT64(fabs(v203)) < 0x7FF0000000000000;
  do
  {
    if (v204)
    {
      v205 = v203;
    }
    else
    {
      v206 = sub_100047C20(v196[v201]);
      v196 = *v223;
      v205 = v202 - log((double)(unint64_t)(v223[1] - *v223)) - v206;
    }
    sub_100047C28((double *)v196[v201], v205);
    v197.n128_f64[0] = sub_100047C20((*v223)[v201]);
    if ((v197.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
    {
      sub_1000D5048(&v245, "");
      sub_10025FA04("Should be no NaNs", (std::string *)&buf);
      sub_100174738((uint64_t)&v245, (uint64_t)&buf, 1);
      if (v252.n128_i8[7] < 0)
        operator delete((void *)buf.n128_u64[0]);
      if (v246.n128_i8[7] < 0)
        operator delete((void *)v245.n128_u64[0]);
      sub_1000F2AE4((uint64_t)v244);
    }
    ++v201;
    v196 = *v223;
  }
  while (v201 < v223[1] - *v223);
LABEL_191:
  if (v225[0])
  {
    v225[1] = v225[0];
    operator delete(v225[0]);
  }
  v207 = (__n128 *)v226;
  if (v226)
  {
    v208 = v227;
    v209 = v226;
    if (v227 != v226)
    {
      do
      {
        v210 = (std::__shared_weak_count *)v208[-1].n128_u64[0];
        if (v210)
        {
          v211 = (unint64_t *)&v210->__shared_owners_;
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v210->__on_zero_shared)(v210, v197);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
        v208 -= 5;
      }
      while (v208 != v207);
      v209 = v226;
    }
    v227 = v207;
    operator delete(v209);
  }
  if (v235)
  {
    v236 = v235;
    operator delete(v235);
  }
  v213 = (char *)v233;
  if (v233)
  {
    v214 = v234;
    v215 = v233;
    if (v234 != v233)
    {
      do
      {
        v217 = *((_DWORD *)v214 - 44);
        if (v217 == v217 >> 31)
        {
          if (*(v214 - 128))
            *(v214 - 128) = 0;
        }
        else
        {
          v216 = *((_QWORD *)v214 - 21);
          if (v217 < 0)
          {
            if (v216)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v216 + 8))(v216, v197);
          }
          else
          {
            (*(void (**)(char *))v216)(v214 - 168);
          }
        }
        v214 -= 208;
      }
      while (v214 != v213);
      v215 = v233;
    }
    v234 = v213;
    operator delete(v215);
  }
  if (v237)
  {
    v238 = (char *)v237;
    operator delete(v237);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  v218 = (char *)v240;
  if (v240)
  {
    v219 = v241;
    v220 = v240;
    if (v241 != v240)
    {
      do
      {
        v222 = *((_DWORD *)v219 - 44);
        if (v222 == v222 >> 31)
        {
          if (*(v219 - 128))
            *(v219 - 128) = 0;
        }
        else
        {
          v221 = *((_QWORD *)v219 - 21);
          if (v222 < 0)
          {
            if (v221)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v221 + 8))(v221, v197);
          }
          else
          {
            (*(void (**)(char *))v221)(v219 - 168);
          }
        }
        v219 -= 208;
      }
      while (v219 != v218);
      v220 = v240;
    }
    v241 = v218;
    operator delete(v220);
  }
}

void sub_10025D0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  int v59;

  if (a53 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_10022044C(&a19);
  sub_1002191E8(&a29);
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
    v54 = a44;
    if (!a44)
    {
LABEL_7:
      v55 = a41;
      if (!a41)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v54 = a44;
    if (!a44)
      goto LABEL_7;
  }
  a45 = (uint64_t)v54;
  operator delete(v54);
  v55 = a41;
  if (!a41)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_11:
  v56 = a42;
  v57 = v55;
  if ((void *)a42 != v55)
  {
    do
    {
      v59 = *(_DWORD *)(v56 - 176);
      if (v59 == v59 >> 31)
      {
        if (*(_BYTE *)(v56 - 128))
          *(_BYTE *)(v56 - 128) = 0;
      }
      else
      {
        v58 = *(_QWORD *)(v56 - 168);
        if (v59 < 0)
        {
          if (v58)
            (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        }
        else
        {
          (*(void (**)(uint64_t))v58)(v56 - 168);
        }
      }
      v56 -= 208;
    }
    while ((void *)v56 != v55);
    v57 = a41;
  }
  a42 = (uint64_t)v55;
  operator delete(v57);
  _Unwind_Resume(a1);
}

void sub_10025D324(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int64x2_t *a5)
{
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char **v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  char *v60;
  char *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  __n128 v102;
  _QWORD *v103;
  void *v104;
  _QWORD *v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v113;
  uint64_t (**v114)();
  double v115;
  double v116;
  char v117;
  void *__p;
  char *v119;
  uint64_t v120;
  uint64_t (**v121)();
  __int128 v122;
  char v123;
  void *v124[2];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 buf;
  __int128 v129;
  int v130;

  if (qword_100417ED8 != -1)
    dispatch_once(&qword_100417ED8, &stru_1003FF880);
  v7 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
    v8 = (uint64_t)(a4[1] - *a4) >> 3;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WifiBoundsGeneratorBase::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
  buf = 0u;
  v129 = 0u;
  v130 = 1065353216;
  v9 = (_QWORD *)*a4;
  v10 = (_QWORD *)a4[1];
  if ((_QWORD *)*a4 == v10)
  {
    v11 = 0;
    goto LABEL_31;
  }
  do
  {
    v13 = (_QWORD *)sub_100272D98(*(uint64_t **)(a3 + 40), a2, *(unsigned __int8 *)(a1 + 64));
    v14 = sub_10025DCF4((uint64_t *)&buf, v13);
    v15 = (char **)v14;
    v17 = (char *)v14[1];
    v16 = v14[2];
    if ((unint64_t)v17 < v16)
    {
      *(_QWORD *)v17 = *v9;
      v12 = (uint64_t)(v17 + 8);
      goto LABEL_8;
    }
    v18 = (char *)*v14;
    v19 = (uint64_t)&v17[-*v14];
    v20 = v19 >> 3;
    v21 = (v19 >> 3) + 1;
    if (v21 >> 61)
      sub_1000D02C0();
    v22 = v16 - (_QWORD)v18;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        sub_1000CDEB8();
      v24 = operator new(8 * v23);
      v25 = &v24[8 * v20];
      *(_QWORD *)v25 = *v9;
      v12 = (uint64_t)(v25 + 8);
      if (v17 == v18)
      {
LABEL_28:
        *v15 = v25;
        v15[1] = (char *)v12;
        v15[2] = &v24[8 * v23];
        if (!v17)
          goto LABEL_8;
LABEL_29:
        operator delete(v17);
        goto LABEL_8;
      }
    }
    else
    {
      v24 = 0;
      v25 = (char *)(8 * v20);
      *(_QWORD *)(8 * v20) = *v9;
      v12 = 8 * v20 + 8;
      if (v17 == v18)
        goto LABEL_28;
    }
    v26 = v17 - 8 - v18;
    if (v26 < 0x58)
      goto LABEL_154;
    if ((unint64_t)(v17 - &v24[v19]) < 0x20)
      goto LABEL_154;
    v27 = (v26 >> 3) + 1;
    v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    v29 = &v17[-v28];
    v25 -= v28;
    v30 = &v24[8 * v20 - 16];
    v31 = (__int128 *)(v17 - 16);
    v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 2;
      v32 -= 4;
    }
    while (v32);
    v17 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_154:
      do
      {
        v34 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v25 - 1) = v34;
        v25 -= 8;
      }
      while (v17 != v18);
    }
    v17 = *v15;
    *v15 = v25;
    v15[1] = (char *)v12;
    v15[2] = &v24[8 * v23];
    if (v17)
      goto LABEL_29;
LABEL_8:
    v15[1] = (char *)v12;
    ++v9;
  }
  while (v9 != v10);
  v11 = (uint64_t **)v129;
LABEL_31:
  v122 = 0uLL;
  v121 = off_1003F9A68;
  v123 &= 0xFCu;
  if (v11)
  {
    while (2)
    {
      v119 = 0;
      v120 = 0;
      __p = 0;
      if (*(_QWORD *)(*(uint64_t (**)(uint64_t *))(*v11[2] + 40))(v11[2]))
      {
        v36 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v11[2] + 40))(v11[2]);
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v36 + 56))(v124, *v36, a3 + 352);
        v37 = v124[0];
        v38 = v124[1];
        *(_QWORD *)&v127 = 0;
        v126 = 0uLL;
        if (v124[0] == v124[1])
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          do
          {
            if (*v37)
            {
              if ((unint64_t)v39 >= (unint64_t)v127)
              {
                v44 = (_QWORD *)v126;
                v45 = (uint64_t)((uint64_t)v39 - v126) >> 4;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 60)
                  sub_1000D02C0();
                v47 = v127 - v126;
                if ((uint64_t)(v127 - v126) >> 3 > v46)
                  v46 = v47 >> 3;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
                  v48 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48 >> 60)
                  sub_1000CDEB8();
                v49 = (char *)operator new(16 * v48);
                v50 = &v49[16 * v45];
                v51 = *(_OWORD *)v37;
                *(_OWORD *)v50 = *(_OWORD *)v37;
                if (*((_QWORD *)&v51 + 1))
                {
                  v52 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
                  do
                    v53 = __ldxr(v52);
                  while (__stxr(v53 + 1, v52));
                  v39 = (_QWORD *)*((_QWORD *)&v126 + 1);
                }
                v54 = &v49[16 * v48];
                v40 = v50 + 16;
                if (v39 == v44)
                {
                  *(_QWORD *)&v126 = v50;
                  *((_QWORD *)&v126 + 1) = v50 + 16;
                  *(_QWORD *)&v127 = &v49[16 * v48];
                }
                else
                {
                  do
                  {
                    v55 = *((_OWORD *)v39 - 1);
                    v39 -= 2;
                    *((_OWORD *)v50 - 1) = v55;
                    v50 -= 16;
                    *v39 = 0;
                    v39[1] = 0;
                  }
                  while (v39 != v44);
                  v56 = (_QWORD *)*((_QWORD *)&v126 + 1);
                  v44 = (_QWORD *)v126;
                  *(_QWORD *)&v126 = v50;
                  *((_QWORD *)&v126 + 1) = v40;
                  *(_QWORD *)&v127 = v54;
                  while (v56 != v44)
                  {
                    v57 = (std::__shared_weak_count *)*(v56 - 1);
                    if (v57)
                    {
                      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                      do
                        v59 = __ldaxr(p_shared_owners);
                      while (__stlxr(v59 - 1, p_shared_owners));
                      if (!v59)
                      {
                        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                        std::__shared_weak_count::__release_weak(v57);
                      }
                    }
                    v56 -= 2;
                  }
                }
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *v39 = *v37;
                v41 = v37[1];
                v39[1] = v41;
                if (v41)
                {
                  v42 = (unint64_t *)(v41 + 8);
                  do
                    v43 = __ldxr(v42);
                  while (__stxr(v43 + 1, v42));
                }
                v40 = v39 + 2;
              }
              *((_QWORD *)&v126 + 1) = v40;
              v39 = v40;
            }
            v37 += 2;
          }
          while (v37 != v38);
          v60 = (char *)__p;
          if (__p)
          {
            v61 = v119;
            v62 = __p;
            if (v119 != __p)
            {
              do
              {
                v63 = (std::__shared_weak_count *)*((_QWORD *)v61 - 1);
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v61 -= 16;
              }
              while (v61 != v60);
              v62 = __p;
            }
            v119 = v60;
            operator delete(v62);
            v39 = (_QWORD *)*((_QWORD *)&v126 + 1);
          }
        }
        __p = (void *)v126;
        v119 = (char *)v39;
        v120 = v127;
        *(_QWORD *)&v127 = 0;
        v126 = 0uLL;
        v66 = (char *)v124[0];
        if (v124[0])
        {
          v67 = (char *)v124[1];
          v68 = v124[0];
          if (v124[1] != v124[0])
          {
            do
            {
              v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              v67 -= 16;
            }
            while (v67 != v66);
            v68 = v124[0];
          }
          v124[1] = v66;
          operator delete(v68);
        }
      }
      else
      {
        __p = 0;
        v119 = 0;
        v120 = 0;
      }
      v72 = v11[4];
      v73 = v11[5];
LABEL_98:
      if (v72 == v73)
      {
        v35 = (char *)__p;
        if (__p)
        {
          v98 = v119;
          if (v119 != __p)
          {
            do
            {
              v99 = (std::__shared_weak_count *)*((_QWORD *)v98 - 1);
              if (v99)
              {
                v100 = (unint64_t *)&v99->__shared_owners_;
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 - 1, v100));
                if (!v101)
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              v98 -= 16;
            }
            while (v98 != v35);
            v35 = (char *)__p;
          }
          operator delete(v35);
        }
        v11 = (uint64_t **)*v11;
        if (!v11)
          goto LABEL_136;
        continue;
      }
      break;
    }
    v76 = (char *)__p;
    v75 = v119;
    if (__p == v119)
    {
      *(_QWORD *)&v126 = (*(double (**)(uint64_t *))(*v11[2] + 24))(v11[2]);
      *((_QWORD *)&v126 + 1) = v88;
      *(_QWORD *)&v127 = v89;
      *((_QWORD *)&v127 + 1) = v90;
      sub_100303E34((double *)&v126, a2, (uint64_t)v124);
      sub_100077D9C((uint64_t)&v121, (uint64_t)v124);
      nullsub_23(v124);
      v91 = *v72;
      v92 = v11[3];
      *(_QWORD *)&v113 = v11[2];
      *((_QWORD *)&v113 + 1) = v92;
      if (v92)
        goto LABEL_120;
    }
    else
    {
      v77 = (*(uint64_t (**)(uint64_t *))(*v11[2] + 16))(v11[2]);
      v78 = *(float *)(a1 + 48);
      v80 = *(unsigned int *)(a1 + 40);
      v79 = *(unsigned int *)(a1 + 44);
      v126 = xmmword_10039A5F8;
      v127 = unk_10039A608;
      v81 = (v75 - v76) >> 4;
      if (v81 >= v79)
        v82 = v79;
      else
        v82 = (v75 - v76) >> 4;
      if (v82)
      {
        v83 = 1;
        do
        {
          v84 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 88))(a2, v81);
          v85 = (_OWORD *)(*(uint64_t (**)(_QWORD *))(**(_QWORD **)&v76[16 * v84] + 32))(*(_QWORD **)&v76[16 * v84]);
          v86 = v85[1];
          *(_OWORD *)v124 = *v85;
          v125 = v86;
          if (sub_100303880((double *)v124, (double *)&v126))
            sub_100303664((double *)&v126, (double *)v124);
        }
        while ((*(float (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) >= v78 && v83++ < v82);
      }
      v114 = off_1003F9A68;
      v115 = 0.0;
      v116 = 0.0;
      v117 &= 0xFCu;
      if ((_DWORD)v80)
      {
        while (1)
        {
          sub_100303E34((double *)&v126, a2, (uint64_t)v124);
          sub_100077D9C((uint64_t)&v114, (uint64_t)v124);
          nullsub_23(v124);
          if (((*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v77 + 16))(v77, v115, v116) & 1) != 0)
            break;
          if (!--v80)
            goto LABEL_115;
        }
        sub_1002CEA8C((uint64_t)a5);
      }
      else
      {
LABEL_115:
        sub_1002CEA9C(a5);
      }
      sub_100077D9C((uint64_t)&v121, (uint64_t)&v114);
      nullsub_23(&v114);
      v91 = *v72;
      v92 = v11[3];
      *(_QWORD *)&v113 = v11[2];
      *((_QWORD *)&v113 + 1) = v92;
      if (v92)
      {
LABEL_120:
        v93 = (unint64_t *)(v92 + 1);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
    }
    sub_100223E98(v91, &v113);
    v95 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v96 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v74 = *v72++;
    *(_OWORD *)(v74 + 16) = v122;
    *(_BYTE *)(v74 + 48) = 0;
    goto LABEL_98;
  }
LABEL_136:
  v102 = nullsub_23(&v121);
  v103 = (_QWORD *)v129;
  while (v103)
  {
    v105 = v103;
    v103 = (_QWORD *)*v103;
    v106 = (void *)v105[4];
    if (v106)
    {
      v105[5] = v106;
      operator delete(v106);
    }
    v107 = (std::__shared_weak_count *)v105[3];
    if (v107)
    {
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v107->__on_zero_shared)(v107, v102);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    operator delete(v105);
  }
  v104 = (void *)buf;
  *(_QWORD *)&buf = 0;
  if (v104)
    operator delete(v104);
}

void sub_10025DC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10025E200(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_10025DC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, void *);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_1000F7D3C((void **)va);
  nullsub_23(va1);
  sub_10025E200(v12 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_10025DCF4(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t ***v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  char v48;

  v5 = (uint64_t ***)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  v6 = sub_1000B40D8((uint64_t)&v48, v5);
  v7 = v6;
  v8 = a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v6 >= v8)
        v2 = v6 % v8;
    }
    else
    {
      v2 = (v8 - 1) & v6;
    }
    v10 = *(_QWORD ***)(*a1 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        v12 = *a2;
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v11[1];
            if (v14 == v6)
            {
              if (v11[2] == v12)
                return v11 + 4;
            }
            else if ((v14 & (v8 - 1)) != v2)
            {
              goto LABEL_22;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v11[1];
          if (v13 == v6)
          {
            if (v11[2] == v12)
              return v11 + 4;
          }
          else
          {
            if (v13 >= v8)
              v13 %= v8;
            if (v13 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v16 = operator new(0x38uLL);
  v11 = v16;
  *v16 = 0;
  v16[1] = v7;
  v17 = a2[1];
  v16[2] = *a2;
  v16[3] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v16[4] = 0;
  v16[5] = 0;
  v16[6] = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v8 || (float)(v21 * (float)v8) < v20)
  {
    v24 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v24 = 0;
    v25 = (2 * v8) | !v24;
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v8 = a1[1];
    if (prime > v8)
    {
LABEL_39:
      if (prime >> 61)
        sub_1000CDEB8();
      v28 = operator new(8 * prime);
      v29 = (void *)*a1;
      *a1 = (uint64_t)v28;
      if (v29)
        operator delete(v29);
      v30 = 0;
      a1[1] = prime;
      do
        *(_QWORD *)(*a1 + 8 * v30++) = 0;
      while (prime != v30);
      v31 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_71;
      v32 = v31[1];
      v33 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v34 = v32 & v33;
        *(_QWORD *)(*a1 + 8 * v34) = v15;
        for (i = (_QWORD *)*v31; *v31; i = (_QWORD *)*v31)
        {
          v36 = i[1] & v33;
          if (v36 == v34)
          {
            v31 = i;
          }
          else if (*(_QWORD *)(*a1 + 8 * v36))
          {
            *v31 = *i;
            v37 = 8 * v36;
            *i = **(_QWORD **)(*a1 + v37);
            **(_QWORD **)(*a1 + v37) = i;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v36) = v31;
            v31 = i;
            v34 = v36;
          }
        }
        goto LABEL_71;
      }
      if (v32 >= prime)
        v32 %= prime;
      *(_QWORD *)(*a1 + 8 * v32) = v15;
      v41 = (_QWORD *)*v31;
      if (!*v31)
      {
LABEL_71:
        v8 = prime;
        v44 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_72;
        goto LABEL_87;
      }
      while (1)
      {
        v43 = v41[1];
        if (v43 >= prime)
          v43 %= prime;
        if (v43 == v32)
          goto LABEL_65;
        if (*(_QWORD *)(*a1 + 8 * v43))
        {
          *v31 = *v41;
          v42 = 8 * v43;
          *v41 = **(_QWORD **)(*a1 + v42);
          **(_QWORD **)(*a1 + v42) = v41;
          v41 = v31;
LABEL_65:
          v31 = v41;
          v41 = (_QWORD *)*v41;
          if (!v41)
            goto LABEL_71;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v43) = v31;
          v31 = v41;
          v41 = (_QWORD *)*v41;
          v32 = v43;
          if (!v41)
            goto LABEL_71;
        }
      }
    }
    if (prime < v8)
    {
      v38 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < v8)
      {
        if (!prime)
        {
          v45 = (void *)*a1;
          *a1 = 0;
          if (v45)
            operator delete(v45);
          v8 = 0;
          a1[1] = 0;
          v44 = -1;
          goto LABEL_87;
        }
        goto LABEL_39;
      }
      v8 = a1[1];
    }
    v44 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_72:
      if (v7 >= v8)
      {
        v2 = v7 % v8;
        v22 = *a1;
        v23 = *(_QWORD **)(*a1 + 8 * (v7 % v8));
        if (v23)
          goto LABEL_28;
      }
      else
      {
        v2 = v7;
        v22 = *a1;
        v23 = *(_QWORD **)(*a1 + 8 * v7);
        if (v23)
          goto LABEL_28;
      }
      goto LABEL_88;
    }
LABEL_87:
    v2 = v44 & v7;
    v22 = *a1;
    v23 = *(_QWORD **)(*a1 + 8 * (v44 & v7));
    if (v23)
      goto LABEL_28;
    goto LABEL_88;
  }
  v22 = *a1;
  v23 = *(_QWORD **)(*a1 + 8 * v2);
  if (v23)
  {
LABEL_28:
    *v11 = *v23;
LABEL_94:
    *v23 = v11;
    goto LABEL_95;
  }
LABEL_88:
  *v11 = *v15;
  *v15 = v11;
  *(_QWORD *)(v22 + 8 * v2) = v15;
  if (*v11)
  {
    v46 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v46 >= v8)
        v46 %= v8;
    }
    else
    {
      v46 &= v8 - 1;
    }
    v23 = (_QWORD *)(*a1 + 8 * v46);
    goto LABEL_94;
  }
LABEL_95:
  ++a1[3];
  return v11 + 4;
}

void sub_10025E1D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  sub_1003442A0(v1 + 3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025E200(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (void *)v5[4];
    if (v6)
    {
      v5[5] = v6;
      operator delete(v6);
    }
    v7 = (std::__shared_weak_count *)v5[3];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_10025E2A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t v11;

  v5 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v5 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3, a4, a5))
  {
    v11 = *v5++;
  }
  return result;
}

void sub_10025E30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  double v9;
  double v10;
  double v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  double v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if (*(_BYTE *)(a3 + 80) && (sub_1000C7EA4(a3 + 88) & 1) == 0 && (*(_WORD *)(a3 + 280) & 0x8080) == 0x8080)
  {
    v7 = *a4;
    v8 = a4[1];
    while (v7 != v8)
    {
      v9 = sub_10015BF30(*(double *)(a3 + 248));
      v10 = *(double *)(a3 + 192);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*v7 + 56) + 48))(&v19);
      v11 = sub_10015C2A4((uint64_t)&v19, v10);
      *(double *)(*v7 + 32) = v11
                            + (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 64))(a2, 0.0, v9);
      v12 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      ++v7;
    }
  }
  else
  {
    v15 = *a4;
    for (i = a4[1]; v15 != i; *(double *)(v18 + 32) = v17)
    {
      v17 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      v18 = *v15++;
    }
  }
}

void sub_10025E450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10025E464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD **v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v68;
  _QWORD v69[3];
  uint64_t (**v70)();
  __int128 v71;
  char v72;
  void *v73[2];
  uint64_t v74;
  void *__p;
  char *v76;
  void *v77[2];
  void *v78[2];
  int v79;
  __int128 buf;
  uint64_t v81;
  std::__shared_weak_count *v82;

  if (qword_100417ED8 == -1)
  {
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FF880);
  v8 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v9 = (a4[1] - *a4) >> 3;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Multiphone::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
LABEL_4:
  *(_OWORD *)v77 = 0u;
  *(_OWORD *)v78 = 0u;
  v79 = 1065353216;
  v10 = *a4;
  v68 = a4[1];
  if (*a4 == v68)
    goto LABEL_72;
  do
  {
    v12 = sub_10025DCF4((uint64_t *)v77, (_QWORD *)(*(_QWORD *)v10 + 56));
    v13 = (char **)v12;
    v15 = (char *)v12[1];
    v14 = v12[2];
    if ((unint64_t)v15 < v14)
    {
      *(_QWORD *)v15 = *(_QWORD *)v10;
      v11 = (uint64_t)(v15 + 8);
      goto LABEL_7;
    }
    v16 = (char *)*v12;
    v17 = (uint64_t)&v15[-*v12];
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      sub_1000D02C0();
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_1000CDEB8();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = *(_QWORD *)v10;
      v11 = (uint64_t)(v23 + 8);
      if (v15 == v16)
      {
LABEL_18:
        *v13 = v23;
        v13[1] = (char *)v11;
        v13[2] = &v22[8 * v21];
        if (v15)
          goto LABEL_28;
        goto LABEL_7;
      }
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v18);
      *(_QWORD *)(8 * v18) = *(_QWORD *)v10;
      v11 = 8 * v18 + 8;
      if (v15 == v16)
        goto LABEL_18;
    }
    v24 = v15 - 8 - v16;
    if (v24 < 0x58)
      goto LABEL_89;
    if ((unint64_t)(v15 - &v22[v17]) < 0x20)
      goto LABEL_89;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v15[-v26];
    v23 -= v26;
    v28 = &v22[8 * v18 - 16];
    v29 = v15 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v15 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_89:
      do
      {
        v32 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v23 - 1) = v32;
        v23 -= 8;
      }
      while (v15 != v16);
    }
    v15 = *v13;
    *v13 = v23;
    v13[1] = (char *)v11;
    v13[2] = &v22[8 * v21];
    if (v15)
LABEL_28:
      operator delete(v15);
LABEL_7:
    v13[1] = (char *)v11;
    v10 += 8;
  }
  while (v10 != v68);
  v33 = (_QWORD **)v78[0];
  if (!v78[0])
    goto LABEL_72;
  v34 = a1 + 8;
  while (2)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a3 + 64) + 16))(&__p);
    v36 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33[2] + 40))(v33[2]);
    (*(void (**)(__int128 *__return_ptr, _QWORD, void **))(*(_QWORD *)*v36 + 48))(&buf, *v36, &__p);
    *(_OWORD *)v73 = buf;
    v74 = v81;
    v38 = v33[4];
    v37 = v33[5];
    if (v38 == v37)
    {
      v39 = (char *)buf;
      if ((_QWORD)buf)
        goto LABEL_50;
      goto LABEL_60;
    }
    while (2)
    {
      v70 = off_1003F9A68;
      v71 = 0uLL;
      v72 &= 0xFCu;
      v71 = *(_OWORD *)(*v38 + 16);
      v40 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v33[2] + 40))(v33[2]);
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t (***)()))(*(_QWORD *)*v40 + 16))(&buf, *v40, &v70);
      v69[0] = sub_1002707A0(v34, (uint64_t)&buf, (uint64_t *)v73, &__p);
      v69[1] = v41;
      v69[2] = v42;
      sub_100270BA0(v34, (uint64_t)v69, a2, a2, a5);
      *(_QWORD *)(*v38 + 40) = v43;
      v44 = v82;
      if (!v82)
        goto LABEL_42;
      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v47 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
LABEL_43:
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
LABEL_42:
        v47 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
          goto LABEL_43;
      }
      nullsub_23(&v70);
      if (++v38 != v37)
        continue;
      break;
    }
    v39 = (char *)v73[0];
    if (v73[0])
    {
LABEL_50:
      v50 = (char *)v73[1];
      v51 = v39;
      if (v73[1] != v39)
      {
        do
        {
          v52 = (std::__shared_weak_count *)*((_QWORD *)v50 - 1);
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v50 -= 16;
        }
        while (v50 != v39);
        v51 = (char *)v73[0];
      }
      v73[1] = v39;
      operator delete(v51);
    }
LABEL_60:
    v55 = (char *)__p;
    if (__p)
    {
      v56 = v76;
      v35 = __p;
      if (v76 != __p)
      {
        do
        {
          v58 = *((_DWORD *)v56 - 44);
          if (v58 == v58 >> 31)
          {
            if (*(v56 - 128))
              *(v56 - 128) = 0;
          }
          else
          {
            v57 = *((_QWORD *)v56 - 21);
            if (v58 < 0)
            {
              if (v57)
                (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
            }
            else
            {
              (*(void (**)(char *))v57)(v56 - 168);
            }
          }
          v56 -= 208;
        }
        while (v56 != v55);
        v35 = __p;
      }
      v76 = v55;
      operator delete(v35);
    }
    v33 = (_QWORD **)*v33;
    if (v33)
      continue;
    break;
  }
  v59 = v78[0];
  if (v78[0])
  {
    do
    {
      v61 = v59;
      v59 = (_QWORD *)*v59;
      v62 = (void *)v61[4];
      if (v62)
      {
        v61[5] = v62;
        operator delete(v62);
      }
      v63 = (std::__shared_weak_count *)v61[3];
      if (v63)
      {
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      operator delete(v61);
    }
    while (v59);
  }
LABEL_72:
  v60 = v77[0];
  v77[0] = 0;
  if (v60)
    operator delete(v60);
}

void sub_10025EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10025E200((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10025E200((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_10021908C((void **)va);
  sub_10025E200((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10025EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_10025E200((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025EA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  va_list va2;
  uint64_t v20;
  uint64_t v21;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, void *);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, void *);
  v20 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  sub_1001D3250(v7 - 160);
  nullsub_23((uint64_t *)va);
  sub_1000F7D3C((void **)va1);
  sub_10021908C((void **)va2);
  sub_10025E200((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_10025EAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, int64x2_t *a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  __double2 v31;
  uint64_t *v32;
  unsigned int v33;
  void *v34;
  char v36;
  double v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  __n128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  double v66;
  double v67;
  double v68;
  float64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  char *v73;
  char *v74;
  __n128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __n128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v86;
  uint64_t *v87;
  __int128 v88;
  double v89[4];
  char v90[8];
  float64x2_t v91;
  uint64_t v92;
  float64x2_t v93;
  __int128 v94;
  void *__p;
  char *v96;
  unint64_t v97;
  uint64_t (**v98)();
  double v99;
  double v100;
  char v101;
  void *v102[2];
  _BYTE v103[32];
  _BYTE v104[1920];
  char v105[8];
  double v106;
  double v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  __int128 v111;
  int v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  std::string v115;
  uint64_t v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  unsigned __int16 v123;

  if (!*(_BYTE *)(a3 + 80))
  {
    sub_1000D5048(v110, "");
    sub_10025FA50("Trying to inject particles from a non-existent external (GPS-like) measurement!", &v115);
    sub_100174738((uint64_t)v110, (uint64_t)&v115, 1);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    if (SBYTE7(v111) < 0)
      operator delete(v110[0]);
    sub_1000F2AE4((uint64_t)v102);
  }
  sub_1001A3BF0(&v115, a3 + 88);
  sub_10015ECCC(a3, (uint64_t)&v115, &v108);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 56))(v108);
  sub_1000B53CC(v104, v9);
  sub_100159F88((uint64_t)v104, v110);
  sub_1001A23D4((uint64_t)v103, (uint64_t)&v116);
  sub_100159CBC((uint64_t)v110, (uint64_t)v103, (uint64_t)v102);
  sub_100159E28((uint64_t)v102, (uint64_t)v105);
  nullsub_22(v103);
  v10 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v113;
  if (v113)
  {
    v14 = (unint64_t *)&v113->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  nullsub_22(v110);
  sub_100073738(v104);
  if (v119 <= 0.0)
    v16 = v117;
  else
    v16 = v119 * 0.577230025;
  v17 = v121;
  if (v120 <= 0.0)
    v18 = v117;
  else
    v18 = v120 * 0.577230025;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v108 + 48))(v110);
  v19 = sub_10015C2A4((uint64_t)v110, v17);
  v20 = (std::__shared_weak_count *)v110[1];
  if (v110[1])
  {
    v21 = (unint64_t *)((char *)v110[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 40))(v108);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  if (sub_1000C7EA4((uint64_t)&v115))
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 96))(v25);
    sub_10006F668(v110, v28);
    v16 = sub_10015EC98((uint64_t)v110, v16);
    v18 = sub_10015EC98((uint64_t)v110, v18);
    sub_10004AA70((uint64_t)v110);
  }
  v86 = v24;
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 104))(v25);
  sub_10006F668(v102, v29);
  v30 = sub_10015EC98((uint64_t)v102, v19);
  v31 = __sincos_stret(v30);
  v111 = 0u;
  *(_OWORD *)v110 = 0u;
  v112 = 1065353216;
  LOBYTE(v113) = 0;
  v32 = *a4;
  v87 = a4[1];
  if (*a4 == v87)
    goto LABEL_85;
  while (2)
  {
    v33 = 0;
    do
    {
      v98 = off_1003F9A68;
      v99 = 0.0;
      v100 = 0.0;
      v101 &= 0xFCu;
      v37 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 64))(a2, 0.0, v16);
      v38 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 64))(a2, 0.0, v18);
      v99 = v38 * -v31.__sinval + v31.__cosval * v37 + v106;
      v100 = v31.__cosval * v38 + v31.__sinval * v37 + v107;
      v96 = 0;
      v97 = 0;
      __p = 0;
      v39 = **(_QWORD **)(a3 + 40);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) == v39)
        goto LABEL_73;
      v40 = 0;
      do
      {
        v41 = *(_OWORD *)(v39 + 16 * v40);
        v94 = v41;
        if (*((_QWORD *)&v41 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        sub_1001D550C((uint64_t)v110, v108, v41, (uint64_t)&v92);
        sub_1001A2040((uint64_t)v90, (uint64_t)&v98);
        v91 = vaddq_f64(v93, v91);
        v89[0] = (*(double (**)(_QWORD))(*(_QWORD *)v94 + 24))(v94);
        v89[1] = v44;
        v89[2] = v45;
        v89[3] = v46;
        if (sub_1003039E4(v89, (uint64_t)v90))
        {
          v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v94 + 16))(v94);
          if (((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(_QWORD *)v47 + 16))(v47, v91.f64[0], v91.f64[1]) & 1) != 0)
          {
            sub_1002CEA8C((uint64_t)a5);
            v48 = v96;
            if ((unint64_t)v96 >= v97)
            {
              v52 = sub_10025FA9C((uint64_t *)&__p, &v94, (uint64_t)v90);
            }
            else
            {
              *(_QWORD *)v96 = v94;
              v49 = *((_QWORD *)&v94 + 1);
              *((_QWORD *)v48 + 1) = *((_QWORD *)&v94 + 1);
              if (v49)
              {
                v50 = (unint64_t *)(v49 + 8);
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
              }
              sub_1001A2040((uint64_t)(v48 + 16), (uint64_t)v90);
              v52 = v48 + 48;
            }
            v96 = v52;
          }
        }
        nullsub_23(v90);
        v53 = nullsub_23(&v92);
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        if (*((_QWORD *)&v94 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v54->__on_zero_shared)(v54, v53);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        ++v40;
        v39 = **(_QWORD **)(a3 + 40);
      }
      while (v40 < (*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) - v39) >> 4);
      if (__p == v96)
      {
LABEL_73:
        sub_1002CEA9C(a5);
        v72 = 1;
        v73 = (char *)__p;
        if (!__p)
          goto LABEL_34;
        goto LABEL_77;
      }
      v57 = (*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)a2 + 80))(a2, -1431655765 * ((unint64_t)(v96 - (_BYTE *)__p) >> 4), v53);
      if (0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)__p) >> 4) <= v57)
        sub_1001E2FA0();
      v58 = (char *)__p + 48 * v57;
      v59 = *v32;
      *(_OWORD *)(*v32 + 16) = *(_OWORD *)(v58 + 24);
      *(_QWORD *)&v88 = *(_QWORD *)v58;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)&v88 + 1) = v60;
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      sub_100223E98(v59, &v88);
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (!*((_QWORD *)&v88 + 1))
        goto LABEL_67;
      v64 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        if ((~v123 & 0x8080) != 0)
          goto LABEL_76;
      }
      else
      {
LABEL_67:
        if ((~v123 & 0x8080) != 0)
          goto LABEL_76;
      }
      v66 = sub_10015BF30(v122);
      v67 = v118;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v58 + 48))(&v92);
      v68 = sub_10015C2A4((uint64_t)&v92, v67);
      *(double *)(*v32 + 32) = v68
                             + (*(double (**)(uint64_t, double, double))(*(_QWORD *)a2 + 64))(a2, 0.0, v66);
      v69 = v93.f64[0];
      if (*(_QWORD *)&v93.f64[0])
      {
        v70 = (unint64_t *)(*(_QWORD *)&v93.f64[0] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(float64_t))(**(_QWORD **)&v69 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v69));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v69);
        }
      }
LABEL_76:
      v72 = 0;
      *(_BYTE *)(*v32 + 48) = 0;
      v73 = (char *)__p;
      if (!__p)
        goto LABEL_34;
LABEL_77:
      v74 = v96;
      v34 = v73;
      if (v96 != v73)
      {
        do
        {
          v75 = nullsub_23(v74 - 32);
          v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 5);
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v76->__on_zero_shared)(v76, v75);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v74 -= 48;
        }
        while (v74 != v73);
        v34 = __p;
      }
      v96 = v73;
      operator delete(v34);
LABEL_34:
      nullsub_23(&v98);
      if (v33++ >= 4)
        v36 = 0;
      else
        v36 = v72;
    }
    while ((v36 & 1) != 0);
    if (++v32 != v87)
      continue;
    break;
  }
LABEL_85:
  sub_1000C91C4((uint64_t)v110);
  sub_10004AA70((uint64_t)v102);
  if (v86)
  {
    v79 = (unint64_t *)&v86->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v81 = nullsub_23(v105);
  v82 = v109;
  if (v109)
  {
    v83 = (unint64_t *)&v109->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v82->__on_zero_shared)(v82, v81);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return sub_10000CF0C((uint64_t)&v115);
}

void sub_10025F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10025F490()
{
  JUMPOUT(0x10025F4ACLL);
}

_QWORD *sub_10025F614(_QWORD *a1)
{
  *a1 = off_1003FF6C8;
  sub_10003F88C((uint64_t)(a1 + 1));
  return a1;
}

_QWORD *sub_10025F644(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1003FF7C0;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_10025F6CC(_QWORD *a1)
{
  *a1 = off_1003FF718;
  sub_10003F88C((uint64_t)(a1 + 1));
  return a1;
}

void sub_10025F6FC(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10025F728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int64_t v6;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  __int128 v39;
  uint64_t v40;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a3 - a1) >> 4)))
    {
      v8 = (0x999999999999999ALL * ((a3 - a1) >> 4)) | 1;
      v9 = a1 + 80 * v8;
      v10 = 0x999999999999999ALL * ((a3 - a1) >> 4) + 2;
      if (v10 < a2)
      {
        v11 = sub_100047C20(a1 + 80 * v8);
        if (v11 > sub_100047C20(v9 + 80))
        {
          v9 += 80;
          v8 = v10;
        }
      }
      v12 = sub_100047C20(v9);
      if (v12 <= sub_100047C20(v4))
      {
        sub_10003FADC(&v35, (__n128 *)v4);
        v13 = *(_OWORD *)(v4 + 16);
        v14 = *(_OWORD *)(v4 + 32);
        v15 = *(_WORD *)(v4 + 48);
        v39 = *(_OWORD *)(v4 + 56);
        v38 = v15;
        *(_QWORD *)(v4 + 56) = 0;
        *(_QWORD *)(v4 + 64) = 0;
        v40 = *(_QWORD *)(v4 + 72);
        v36 = v13;
        v37 = v14;
        do
        {
          v16 = v9;
          sub_10003FADC((__n128 *)v4, (__n128 *)v9);
          v17 = *(_OWORD *)(v9 + 16);
          v18 = *(_OWORD *)(v9 + 32);
          *(_WORD *)(v4 + 48) = *(_WORD *)(v9 + 48);
          *(_OWORD *)(v4 + 16) = v17;
          *(_OWORD *)(v4 + 32) = v18;
          v19 = *(_OWORD *)(v9 + 56);
          *(_QWORD *)(v9 + 56) = 0;
          *(_QWORD *)(v9 + 64) = 0;
          v20 = *(std::__shared_weak_count **)(v4 + 64);
          *(_OWORD *)(v4 + 56) = v19;
          if (v20)
          {
            p_shared_owners = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          *(_QWORD *)(v4 + 72) = *(_QWORD *)(v16 + 72);
          if (v6 < v8)
            break;
          v23 = (2 * v8) | 1;
          v9 = a1 + 80 * v23;
          v8 = 2 * v8 + 2;
          if (v8 >= a2)
          {
            v8 = v23;
          }
          else
          {
            v24 = sub_100047C20(a1 + 80 * v23);
            if (v24 <= sub_100047C20(v9 + 80))
              v8 = v23;
            else
              v9 += 80;
          }
          v25 = sub_100047C20(v9);
          v4 = v16;
        }
        while (v25 <= sub_100047C20((uint64_t)&v35));
        sub_10003FADC((__n128 *)v16, &v35);
        v26 = v36;
        v27 = v37;
        *(_WORD *)(v16 + 48) = v38;
        *(_OWORD *)(v16 + 16) = v26;
        *(_OWORD *)(v16 + 32) = v27;
        v28 = v39;
        v39 = 0uLL;
        v29 = *(std::__shared_weak_count **)(v16 + 64);
        *(_OWORD *)(v16 + 56) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
        *(_QWORD *)(v16 + 72) = v40;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
    }
  }
}

void sub_10025F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100223A74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100223A74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100223A74((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10025FA04@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10025FA34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10025FA50@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10025FA80(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_10025FA9C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1000CDEB8();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v21 = &v9[48 * v4];
  v23 = &v9[48 * v8];
  v10 = a2[1];
  *(_QWORD *)v21 = *a2;
  *((_QWORD *)v21 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_1001A2040((uint64_t)&v9[48 * v4 + 16], a3);
  sub_10025FD68((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, (uint64_t)v21, (uint64_t)v21);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v15;
  a1[1] = (uint64_t)(v21 + 48);
  a1[2] = (uint64_t)v23;
  if (v14 == v13)
  {
    if (v13)
LABEL_16:
      operator delete(v13);
  }
  else
  {
    do
    {
      v22 = v14 - 48;
      v17 = nullsub_23(v14 - 32);
      v18 = (std::__shared_weak_count *)*((_QWORD *)v14 - 5);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v14 -= 48;
    }
    while (v22 != v13);
    if (v13)
      goto LABEL_16;
  }
  return v21 + 48;
}

void sub_10025FC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025FCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025FC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_10025FCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025FCD4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  __n128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = nullsub_23(i - 32);
    v5 = *(std::__shared_weak_count **)(i - 40);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v4);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10025FD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = a7;
  v15 = a6;
  v16 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 48);
      v9 -= 48;
      *(_QWORD *)(v7 - 48) = v10;
      v11 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 40) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      sub_1001A2040(v7 - 32, a3 - 32);
      v7 = v16 - 48;
      v16 -= 48;
      a3 = v9;
    }
    while (v9 != a5);
    return v15;
  }
  return a6;
}

void sub_10025FE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *(_QWORD *)(v9 - 40);
  if (v11)
    sub_1003442D4(v11);
  sub_10025FE3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025FE3C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      nullsub_23(v3 + 16);
      v5 = *(std::__shared_weak_count **)(v3 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v3 += 48;
    }
  }
  return a1;
}

void sub_10025FECC()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

uint64_t sub_10025FED4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10025FF30()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10025FF8C(int a1@<W0>, std::string *a2@<X8>)
{
  char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string __p;
  std::string __dst;
  std::string v21;
  std::string v22;
  std::string v23;

  v4 = strerror(a1);
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = std::string::insert(&__dst, 0, "ERRNO: ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v21, " (");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v23, ")");
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_100260190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *sub_100260254@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v2;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (a1 > 1545)
  {
    if (a1 > 3593)
    {
      if (a1 <= 5385)
      {
        if (a1 <= 4105)
        {
          if (a1 == 3594)
          {
            v2 = "I/O error within the xCheckReservedLock method on the sqlite3_io_methods object";
            return std::string::assign(a2, v2);
          }
          if (a1 == 3850)
          {
            v2 = "I/O error in the advisory file locking logic";
            return std::string::assign(a2, v2);
          }
        }
        else
        {
          switch(a1)
          {
            case 4106:
              v2 = "I/O error within the xClose method on the sqlite3_io_methods object";
              return std::string::assign(a2, v2);
            case 4618:
              v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to open a new share"
                   "d memory segment";
              return std::string::assign(a2, v2);
            case 4874:
              v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to resize an existi"
                   "ng shared memory segment";
              return std::string::assign(a2, v2);
          }
        }
      }
      else if (a1 > 6153)
      {
        switch(a1)
        {
          case 6154:
            v2 = "I/O error within the xFetch or xUnfetch methods on the sqlite3_io_methods object while trying to map or"
                 " unmap part of the database file into the process address space";
            return std::string::assign(a2, v2);
          case 6410:
            v2 = "the VFS is unable to determine a suitable directory in which to place temporary files";
            return std::string::assign(a2, v2);
          case 6922:
            v2 = "a file relevant to the call was invalidated by a dispatch vnode source event";
            return std::string::assign(a2, v2);
        }
      }
      else
      {
        switch(a1)
        {
          case 5386:
            v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to map a shared memor"
                 "y segment into the process address space";
            return std::string::assign(a2, v2);
          case 5642:
            v2 = "I/O error within the xRead or xWrite methods on the sqlite3_io_methods object while trying to seek a fi"
                 "le descriptor to the beginning point of the file where the read or write is to occur";
            return std::string::assign(a2, v2);
          case 5898:
            v2 = "the xDelete method on the sqlite3_vfs object failed because the file being deleted does not exist";
            return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 <= 2066)
    {
      if (a1 <= 1801)
      {
        if (a1 == 1546)
        {
          v2 = "I/O error in the VFS layer while trying to truncate a file to a smaller size";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1555)
        {
          v2 = "PRIMARY KEY constraint failed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        switch(a1)
        {
          case 1802:
            v2 = "I/O error in the VFS layer while trying to invoke fstat() (or the equivalent) on a file in order to det"
                 "ermine information such as the file size or access permissions";
            return std::string::assign(a2, v2);
          case 1811:
            v2 = "a RAISE function within a trigger fired, causing the SQL statement to abort";
            return std::string::assign(a2, v2);
          case 2058:
            v2 = "an I/O error within xUnlock method on the sqlite3_io_methods object";
            return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 2578)
    {
      switch(a1)
      {
        case 2579:
          v2 = "a rowid is not unique";
          return std::string::assign(a2, v2);
        case 3082:
          v2 = "an operation could not be completed due to the inability to allocate sufficient memory";
          return std::string::assign(a2, v2);
        case 3338:
          v2 = "I/O error within the xAccess method on the sqlite3_vfs object";
          return std::string::assign(a2, v2);
      }
    }
    else
    {
      switch(a1)
      {
        case 2067:
          v2 = "UNIQUE constraint failed";
          return std::string::assign(a2, v2);
        case 2314:
          v2 = "I/O error within xLock method on the sqlite3_io_methods object while trying to obtain a read lock";
          return std::string::assign(a2, v2);
        case 2570:
          v2 = "I/O error within xDelete method on the sqlite3_vfs object";
          return std::string::assign(a2, v2);
      }
    }
LABEL_83:
    v2 = "unhandled message. please check documentation";
    return std::string::assign(a2, v2);
  }
  if (a1 > 775)
  {
    if (a1 > 1031)
    {
      if (a1 > 1289)
      {
        if (a1 == 1290)
        {
          v2 = "I/O error in the VFS layer while trying to invoke fsync() on a directory. The unix VFS attempts to fsync("
               ") directories after creating or deleting certain files to ensure that those files will still appear in th"
               "e filesystem following a power loss or system crash. This error code indicates a problem attempting to pe"
               "rform that fsync()";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1299)
        {
          v2 = "NOT NULL constraint failed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 1032)
        {
          v2 = "database cannot be modified because the database file has been moved since it was opened";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1034)
        {
          v2 = "I/O error in the VFS layer while trying to flush previously written content out of OS and/or disk-control"
               " buffers and into persistent storage";
          return std::string::assign(a2, v2);
        }
      }
      goto LABEL_83;
    }
    switch(a1)
    {
      case 776:
        v2 = "database cannot be opened because it has a hot journal that needs to be rolled back but cannot because the "
             "database is readonly";
        break;
      case 778:
        v2 = "I/O error in the VFS layer while trying to write into a file on disk. This error might result from a hardwa"
             "re malfunction or because a filesystem came unmounted while the file was open. This error should not occur "
             "if the filesystem is full as there is a separate error code (SQLITE_FULL) for that purpose";
        break;
      case 782:
        v2 = "file open operation failed because the operating system was unable to convert the filename into a full pathname";
        break;
      case 787:
        v2 = "foreign key constraint failed";
        break;
      default:
        goto LABEL_83;
    }
  }
  else
  {
    v2 = "operation could not continue because another process is busy recovering a WAL mode database file following a crash";
    switch(a1)
    {
      case 261:
        return std::string::assign(a2, v2);
      case 262:
        v2 = "locking conflict has occurred due to contention with a different database connection that happens to hold a"
             " shared cache with the database connection to which the error was returned";
        break;
      case 263:
      case 265:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
        goto LABEL_83;
      case 264:
        v2 = "WAL mode database cannot be opened because the database file needs to be recovered and recovery requires wr"
             "ite access but only read access is available";
        break;
      case 266:
        v2 = "I/O error in the VFS layer while trying to read from a file on disk. This error might result from a hardwar"
             "e malfunction or because a filesystem came unmounted while the file was open.";
        break;
      case 267:
        v2 = "content in the virtual table may be corrupt";
        break;
      case 275:
        v2 = "CHECK constraint failed";
        break;
      case 283:
        v2 = "WAL mode database file is recovered";
        break;
      default:
        switch(a1)
        {
          case 516:
            v2 = "statement aborted because the transaction that was active when the SQL statement first started was rolled back";
            break;
          case 517:
            v2 = "database connection tried to promote a read transaction into a write transaction but finds that another"
                 " database connection has already written to the database and thus invalidated prior reads";
            break;
          case 520:
            v2 = "SQLite is unable to obtain a read lock on a WAL mode database because the shared-memory file associated"
                 " with that database is read-only";
            break;
          case 522:
            v2 = "read attempt in the VFS layer was unable to obtain as many bytes as was requested. This might be due to"
                 " a truncated file";
            break;
          case 526:
            v2 = "a file open operation failed because the file is really a directory";
            break;
          case 531:
            v2 = "a commit hook callback returned non-zero that thus caused the SQL statement to be rolled back";
            break;
          default:
            goto LABEL_83;
        }
        break;
    }
  }
  return std::string::assign(a2, v2);
}

void sub_10026064C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100260668()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  if (qword_100417F08 != -1)
    goto LABEL_9;
  while (1)
  {
    v0 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_FAULT))
      goto LABEL_4;
    *(_DWORD *)buf = 68289539;
    v4 = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "assert";
    v9 = 2081;
    v10 = "0";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v1 = qword_100417F10;
      if (!os_signpost_enabled((os_log_t)qword_100417F10))
        goto LABEL_6;
    }
    else
    {
LABEL_4:
      v1 = qword_100417F10;
      if (!os_signpost_enabled((os_log_t)qword_100417F10))
        goto LABEL_6;
    }
    *(_DWORD *)buf = 68289539;
    v4 = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2082;
    v8 = "assert";
    v9 = 2081;
    v10 = "0";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "corrupt database, will now abort", "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_100417F08 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v2 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
        goto LABEL_8;
LABEL_7:
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      goto LABEL_8;
    }
LABEL_6:
    v2 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_INFO))
      goto LABEL_7;
LABEL_8:
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 19, "corrupt_db_abort");
LABEL_9:
    dispatch_once(&qword_100417F08, &stru_1003FF920);
  }
}

void sub_1002608AC(sqlite3 **a1)
{
  int v2;
  NSObject *v3;
  int *v4;
  std::string *v5;
  __int128 v6;
  std::string *p_dst;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  _BYTE v11[24];
  std::string __dst;
  std::string v13;
  std::string v14;
  std::string v15;
  std::runtime_error v16;
  std::string v17;
  int pnCkpt[2];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  *(_QWORD *)pnCkpt = 0;
  v2 = sqlite3_wal_checkpoint_v2(*a1, 0, 0, &pnCkpt[1], pnCkpt);
  sub_10008B9C4(v2, *a1);
  if (v2)
  {
    v4 = __error();
    sub_10025FF8C(*v4, &v17);
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v13, " w/ ");
    v5 = std::string::insert(&v13, 0, "Checkpoint failed.");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      sub_10006CED8(&__dst, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    else
      __dst = v17;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v14, (const std::string::value_type *)p_dst, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v16, &v15);
    v16.__vftable = (std::runtime_error_vtbl *)&off_1003FCB38;
    sub_10018D04C((uint64_t)v11);
    sub_1001F2298(&v16, (uint64_t)"void db::resources::handle::checkpoint()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 290, (uint64_t)v11);
  }
  if (qword_100417F08 == -1)
  {
    v3 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      return;
    goto LABEL_4;
  }
  dispatch_once(&qword_100417F08, &stru_1003FF920);
  v3 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    *(_DWORD *)buf = 67109376;
    v20 = pnCkpt[1];
    v21 = 1024;
    v22 = pnCkpt[0];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Checkpoint succeeded w/ %d frames logged and %d frames checkpointed", buf, 0xEu);
  }
}

void sub_100260BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  int v61;
  uint64_t v62;
  void *v64;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    sub_1001F26E8((std::runtime_error *)(v62 - 144));
    v64 = a40;
    if (!a40)
    {
LABEL_12:
      std::runtime_error::~runtime_error((std::runtime_error *)(v62 - 192));
      if (*(char *)(v62 - 201) < 0)
      {
        operator delete(*(void **)(v62 - 224));
        if ((a48 & 0x80000000) == 0)
        {
LABEL_14:
          if ((a60 & 0x80000000) == 0)
            goto LABEL_15;
          goto LABEL_20;
        }
      }
      else if ((a48 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(a43);
      if ((a60 & 0x80000000) == 0)
      {
LABEL_15:
        if (a54 < 0)
          goto LABEL_16;
        goto LABEL_21;
      }
LABEL_20:
      operator delete(a55);
      if (a54 < 0)
      {
LABEL_16:
        operator delete(a49);
        if ((v61 & 1) == 0)
        {
LABEL_23:
          if (*(char *)(v62 - 153) < 0)
          {
            operator delete(*(void **)(v62 - 176));
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_22:
        __cxa_free_exception(v60);
        goto LABEL_23;
      }
LABEL_21:
      if (!v61)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_11:
    operator delete(v64);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a23);
  sub_1001F26E8((std::runtime_error *)(v62 - 144));
  v64 = a40;
  if (!a40)
    goto LABEL_12;
  goto LABEL_11;
}

const char *sub_100260D94(sqlite3 **a1, const char *a2)
{
  return sqlite3_db_filename(*a1, a2);
}

uint64_t sub_100260DA4(uint64_t a1, __int128 *a2, sqlite3 **a3, dispatch_object_t object)
{
  __int128 v5;
  NSObject *v6;
  void **v9;
  _QWORD v10[5];
  void *__p[2];
  char v12;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = object;
  *(_WORD *)(a1 + 72) = 0;
  if (object)
  {
    dispatch_retain(object);
    v6 = *(NSObject **)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    v10[2] = sub_100260FA8;
    v10[3] = &unk_1003FF8A0;
    v10[4] = a1;
    __p[0] = v10;
    sub_100261E60(v6, (uint64_t)__p);
    return a1;
  }
  std::operator+<char>("SAVEPOINT ", a1);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  sub_10008E514(a3, (const char *)v9, "Failed to create new savepoint");
  if ((v12 & 0x80000000) == 0)
    return a1;
  operator delete(__p[0]);
  return a1;
}

void sub_100260EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  if (a19 < 0)
    operator delete(__p);
  v21 = *(_QWORD **)(v19 + 56);
  if (v21 == (_QWORD *)(v19 + 32))
  {
    v22 = 4;
    v21 = (_QWORD *)(v19 + 32);
  }
  else
  {
    if (!v21)
    {
      if (*(char *)(v19 + 23) < 0)
        goto LABEL_10;
      goto LABEL_7;
    }
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
  if (*(char *)(v19 + 23) < 0)
  {
LABEL_10:
    operator delete(*(void **)v19);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100260F20(uint64_t a1, uint64_t a2, sqlite3 **a3, NSObject *a4)
{
  void *__p[2];
  uint64_t v7;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_100260DA4(a1, (__int128 *)__p, a3, a4);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_100260F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100260FA8(uint64_t a1)
{
  uint64_t v1;
  sqlite3 **v2;
  const char *p_p;
  void *__p;
  char v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(sqlite3 ***)(v1 + 24);
  std::operator+<char>("SAVEPOINT ", v1);
  if (v5 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  sub_10008E514(v2, p_p, "Failed to create new savepoint");
  if (v5 < 0)
    operator delete(__p);
}

void sub_100261024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100261040(uint64_t a1)
{
  void (*v2)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  std::exception_ptr v8;
  std::exception_ptr v9;
  uint64_t v10[4];
  uint8_t buf[8];
  _QWORD v12[3];
  uint8_t v13[8];

  v10[0] = 0;
  *(_QWORD *)buf = (char *)off_1003FFBB0 + 1;
  v12[0] = a1;
  sub_100263524((uint64_t *)buf, v10);
  if (*(_QWORD *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      v2 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v2)
        v2(v12, v12, 2);
    }
  }
  if (*(_QWORD *)(a1 + 24) && !*(_BYTE *)(a1 + 73) && !*(_BYTE *)(a1 + 72))
  {
    if (qword_100417F08 == -1)
    {
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v6 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      {
LABEL_14:
        std::current_exception();
        if (*(_QWORD *)buf)
        {
          std::exception_ptr::exception_ptr(&v9, (const std::exception_ptr *)buf);
          v8.__ptr_ = &v9;
          std::rethrow_exception(v8);
          __break(1u);
          return;
        }
        if (qword_100417F08 == -1)
        {
          v7 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
            goto LABEL_18;
        }
        else
        {
          dispatch_once(&qword_100417F08, &stru_1003FF920);
          v7 = qword_100417F10;
          if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          {
LABEL_18:
            sub_1002614F4(a1);
            std::exception_ptr::~exception_ptr((std::exception_ptr *)buf);
            sub_100261FB8(v10);
            v3 = (_QWORD *)(a1 + 32);
            v4 = *(_QWORD **)(a1 + 56);
            if (v4 != (_QWORD *)(a1 + 32))
              goto LABEL_9;
LABEL_19:
            v5 = 4;
            v4 = v3;
            goto LABEL_20;
          }
        }
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Forgot to commit transaction?", v13, 2u);
        goto LABEL_18;
      }
    }
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "transaction not completed", buf, 2u);
    goto LABEL_14;
  }
  sub_100261FB8(v10);
  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4 == (_QWORD *)(a1 + 32))
    goto LABEL_19;
LABEL_9:
  if (!v4)
    goto LABEL_21;
  v5 = 5;
LABEL_20:
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_21:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100261298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  int v31;

  if (!a2)
    _Unwind_Resume(exception_object);
  std::exception_ptr::~exception_ptr(&a10);
  v20 = __cxa_begin_catch(exception_object);
  if (a2 != 2)
  {
    sub_100344304();
    sub_1002614F4(v15);
    __cxa_end_catch();
LABEL_25:
    JUMPOUT(0x1002611A8);
  }
  v21 = (int *)sub_1002616A0(v20);
  v22 = v21;
  if (v21)
  {
    v23 = *(_QWORD *)(v16 + 3848);
    if (*v21 == 13)
    {
      if (v23 == -1)
      {
        v24 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          goto LABEL_16;
      }
      else
      {
        dispatch_once(&qword_100417F08, &stru_1003FF920);
        v24 = qword_100417F10;
        if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
          goto LABEL_16;
      }
      *(_WORD *)(v17 - 48) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Ignoring rollback exception because the only reasonable case is low-disk in which case it's because of a higher-level error anyway", (uint8_t *)(v17 - 48), 2u);
LABEL_16:
      __cxa_end_catch();
      goto LABEL_25;
    }
    if (v23 != -1)
    {
      dispatch_once(&qword_100417F08, &stru_1003FF920);
      v30 = qword_100417F10;
      if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      goto LABEL_13;
    }
    v30 = qword_100417F10;
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      v31 = *v22;
      *(_DWORD *)(v17 - 48) = 67109120;
      *(_DWORD *)(v17 - 44) = v31;
      v26 = "Rolling back due to sql failure %d";
      v27 = (uint8_t *)(v17 - 48);
      v28 = v30;
      v29 = 8;
      goto LABEL_14;
    }
LABEL_15:
    sub_1002614F4(v15);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v16 + 3848) == -1)
  {
    v25 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FF920);
    v25 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
  }
  *(_WORD *)(v17 - 48) = 0;
  v26 = "Rolling back due to unknown kind of failure";
  v27 = (uint8_t *)(v17 - 48);
  v28 = v25;
  v29 = 2;
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v26, v27, v29);
  goto LABEL_15;
}

void sub_1002614E4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1002614ECLL);
  JUMPOUT(0x1002614B0);
}

uint64_t sub_1002614F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD v5[8];

  v2 = *(NSObject **)(a1 + 64);
  if (!v2)
  {
    sub_100261B78(a1);
    result = *(_QWORD *)(a1 + 56);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100261B70;
  v5[3] = &unk_1003FF8E0;
  v5[4] = a1;
  v4 = v5;
  sub_100261E60(v2, (uint64_t)&v4);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_1002615C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  int v9;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (qword_100417F08 != -1)
      sub_10034438C();
    if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      sub_10018CCC4((int)&__p);
    if (!v9)
    {
      __cxa_end_catch();
      JUMPOUT(0x100261590);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1002616A0(const void *a1)
{
  _QWORD *result;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _UNKNOWN **v11;
  uint64_t v12;
  unsigned int *v13;

  if (result)
  {
    v2 = result[1];
    if (!v2)
      return 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _UNKNOWN ***))(*(_QWORD *)v2 + 8))(&v12, v2, &v11);
    v4 = v12;
    v3 = v13;
    if (v13)
    {
      v5 = v13 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v8 = v3 + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    if (v4)
      return (_QWORD *)(v4 + 8);
    else
      return 0;
  }
  return result;
}

void sub_100261780(uint64_t *a1)
{
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;

  v2 = a1[8];
  if (v2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 0x40000000;
    v3[2] = sub_1002617F4;
    v3[3] = &unk_1003FF8C0;
    v3[4] = a1;
    v4 = v3;
    sub_100261E60(v2, (uint64_t)&v4);
  }
  else
  {
    sub_1002617FC(a1);
  }
}

void sub_1002617F4(uint64_t a1)
{
  sub_1002617FC(*(uint64_t **)(a1 + 32));
}

void sub_1002617FC(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  sqlite3 **v11;
  std::string *v12;
  void *__p[2];
  _BYTE buf[12];
  __int16 v15;
  std::string *v16;
  char v17;
  std::string __dst;

  if (*((_BYTE *)a1 + 72))
  {
    sub_1000D5048(buf, "");
    sub_100242D34("Cannot commit - already rolled back", &__dst);
    sub_100174738((uint64_t)buf, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_1000F2AE4((uint64_t)__p);
  }
  if (*((_BYTE *)a1 + 73))
  {
    sub_1000D5048(buf, "");
    sub_10016A234("Cannot commit - already committed", &__dst);
    sub_100174738((uint64_t)buf, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_1000F2AE4((uint64_t)__p);
  }
  if (qword_100417F08 == -1)
  {
    v2 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_19;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_1003FF920);
    v2 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_19;
  }
  v3 = a1;
  if (*((char *)a1 + 23) < 0)
    v3 = (uint64_t *)*a1;
  v4 = sqlite3_db_filename(*(sqlite3 **)a1[3], "main");
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1000CDE30();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_15;
  }
  memmove(p_dst, v4, v6);
LABEL_15:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = v3;
  v15 = 2080;
  v16 = v10;
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Committing transaction %s into %s", buf, 0x16u);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_19:
  v11 = (sqlite3 **)a1[3];
  std::operator+<char>("RELEASE SAVEPOINT ", a1);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &__dst;
  else
    v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  sub_10008E514(v11, (const char *)v12, "Failed to release savepoint without rollback");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *((_BYTE *)a1 + 73) = 1;
}

void sub_100261B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100261B70(uint64_t a1)
{
  sub_100261B78(*(_QWORD *)(a1 + 32));
}

void sub_100261B78(uint64_t a1)
{
  NSObject *v2;
  sqlite3 **v3;
  std::string *p_buf;
  sqlite3 **v5;
  std::string *v6;
  void *v7[2];
  void *__p[2];
  char v9;
  std::string buf;

  if (*(_BYTE *)(a1 + 73))
  {
    sub_1000D5048(__p, "");
    sub_100242D34("Cannot rollback - already committed", &buf);
    sub_100174738((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v9 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v7);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    sub_1000D5048(__p, "");
    sub_100242D34("Cannot rollback - already cancelled", &buf);
    sub_100174738((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v9 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v7);
  }
  if (qword_100417F08 == -1)
  {
    v2 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
      goto LABEL_6;
    goto LABEL_5;
  }
  dispatch_once(&qword_100417F08, &stru_1003FF920);
  v2 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Rolling back transaction", (uint8_t *)&buf, 2u);
  }
LABEL_6:
  v3 = *(sqlite3 ***)(a1 + 24);
  std::operator+<char>("ROLLBACK TO SAVEPOINT ", a1);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  sub_10008E514(v3, (const char *)p_buf, "Failed to rollback savepoint");
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v5 = *(sqlite3 ***)(a1 + 24);
  std::operator+<char>("RELEASE SAVEPOINT ", a1);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &buf;
  else
    v6 = (std::string *)buf.__r_.__value_.__r.__words[0];
  sub_10008E514(v5, (const char *)v6, "Failed to release savepoint after rollback");
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 72) = 1;
}

void sub_100261DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    sub_1000CDD68(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100261E34(id a1)
{
  qword_100417F10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_100261E60(NSObject *a1, uint64_t a2)
{
  std::promise<void> *v4;
  _QWORD v5[6];
  std::future<void> v6;
  std::promise<void> v7;

  v4 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v4);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100261F28;
  v5[3] = &unk_1003FF940;
  v5[4] = a2;
  v5[5] = &v7;
  dispatch_sync(a1, v5);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);
}

void sub_100261EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::future<void> a15)
{
  uint64_t v15;

  std::future<void>::~future(&a15);
  std::promise<void>::~promise((std::promise<void> *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_100261F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::promise<void>::~promise((std::promise<void> *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100261F28(uint64_t a1)
{
  (*(void (**)(void))(**(_QWORD **)(a1 + 32) + 16))();
  std::promise<void>::set_value(*(std::promise<void> **)(a1 + 40));
}

void sub_100261F64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  std::promise<void> *v15;
  std::exception_ptr v16;
  std::exception_ptr v17[5];

  __cxa_begin_catch(a1);
  v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_100261F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_100261FB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t (*v3)();
  void (*v4)(uint64_t *, uint64_t *, uint64_t);
  std::runtime_error v6;

  v2 = *a1;
  v3 = nullsub_178;
  if (!*a1)
    v3 = 0;
  if (v3)
  {
    if (!v2)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&off_1003FFA48;
      sub_100262084(&v6);
    }
    (*(void (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
    v2 = *a1;
  }
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v4)
        v4(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void sub_100262068(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  sub_1000CDD68(a1);
}

void sub_100262084(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002620D8((uint64_t)exception, a1);
}

void sub_1002620C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002620D8(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1003FF9D0;
  *(_QWORD *)(a1 + 8) = off_1003FFA00;
  *(_QWORD *)(a1 + 24) = off_1003FFA28;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_100262134(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_10026218C()
{
  operator new();
}

void sub_100262264()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_100262290(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1002622AC(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100262500((uint64_t)exception, a1);
}

void sub_1002622E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002622FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete();
}

void sub_100262364(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_1002623B4(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_100262420(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100262470(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1002624DC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_100262500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1003FFA48;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1003FF9D0;
  *(_QWORD *)(a1 + 8) = off_1003FFA00;
  *(_QWORD *)(a1 + 24) = off_1003FFA28;
  return a1;
}

void sub_1002625AC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002625C0()
{
  operator new();
}

void sub_1002627D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10016314C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002627FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100262818(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100262830()
{
  operator new();
}

void sub_100262874()
{
  operator delete();
}

void sub_100262888(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"P13tag_sql_rowid" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_100262AC8((_QWORD *)(a1 + 8));
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_100262A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100262AC8(_QWORD *a1)
{
  void (__cdecl **v2)(std::ostringstream *__hidden);
  uint64_t v3;
  std::ios_base *v4;
  void (__cdecl **v6)(std::ostringstream *__hidden);
  _QWORD v7[8];
  void *__p[2];
  __int128 v9;
  int v10;
  void (__cdecl **v11)(std::ostringstream *__hidden);

  v6 = v2;
  *(_QWORD *)((char *)&v7[-1] + (_QWORD)*(v2 - 3)) = v3;
  v4 = (std::ios_base *)((char *)&v7[-1] + (_QWORD)*(v6 - 3));
  std::ios_base::init(v4, v7);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v7);
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 16;
  std::ostream::operator<<(&v6, *a1);
  std::stringbuf::str(v7);
  if (SBYTE7(v9) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v7);
  return std::ios::~ios(&v11);
}

void sub_100262C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::ostream::~ostream(va, v3 + 8);
  std::ios::~ios(v2);
  _Unwind_Resume(a1);
}

void sub_100262C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_100262C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F0484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100262C48()
{
  operator new();
}

void sub_100262E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100262EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100262E70(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100262E8C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100262EA0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_100262F20()
{
  operator delete();
}

uint64_t sub_100262F34(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_100262F4C()
{
  return 0;
}

uint64_t sub_100262F54()
{
  return 0;
}

uint64_t sub_100262F5C()
{
  return 0;
}

void sub_100262F68()
{
  operator new();
}

void sub_100262FB0()
{
  operator delete();
}

void sub_100262FC4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::const_iterator v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  sub_1000F020C((const char *)((unint64_t)"P18tag_sql_blob_flags" & 0x7FFFFFFFFFFFFFFFLL), &v13);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v13;
  else
    v4.__i_ = (std::__wrap_iter<const char *>::iterator_type)v13.__r_.__value_.__r.__words[0];
  std::string::insert(&v13, v4, 91);
  v14 = v13;
  memset(&v13, 0, sizeof(v13));
  v5 = std::string::append(&v14, "] = ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  sub_1001F4254((unsigned int *)(a1 + 8));
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (std::string::size_type)__p[1];
  v9 = std::string::append(&v15, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v16, 10);
  *a2 = v16;
  memset(&v16, 0, sizeof(v16));
  if ((char)v12 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
}

void sub_100263140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100263204()
{
  operator new();
}

void sub_10026340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100263460((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100263430(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_10026344C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100263460(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void sub_1002634E0()
{
  operator delete();
}

uint64_t sub_1002634F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_10026350C()
{
  return 0;
}

uint64_t sub_100263514()
{
  return 0;
}

uint64_t sub_10026351C()
{
  return 0;
}

uint64_t *sub_100263524(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v5;
  _BYTE v6[24];

  if (a2 != result)
  {
    v3 = (uint64_t)result;
    v5 = 0;
    sub_100263680((uint64_t)&v5, result);
    sub_100263680(v3, a2);
    result = (uint64_t *)sub_100263680((uint64_t)a2, &v5);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        v4 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          return (uint64_t *)v4(v6, v6, 2);
      }
    }
  }
  return result;
}

void sub_1002635AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026373C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002635C0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN2db9resources11transactionD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN2db9resources11transactionD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

void sub_10026366C(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(*(_QWORD *)a1 + 64);
  if (v1)
    dispatch_release(v1);
}

uint64_t sub_100263680(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_100263718(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_100263728(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_10026373C(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_10026378C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002637E8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100263844(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  std::string *v10;
  char *v11;
  __int128 *v12;
  std::string::size_type *v13;
  unint64_t v14;
  __int128 v15;
  std::string::value_type v16;
  _QWORD v17[2];
  char v18;
  int v19;
  char v20;
  _BYTE v21[6];
  _BYTE v22[7];
  _BYTE *v23;
  _BYTE *v24;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v23 = v21;
  v24 = v22;
  v3 = *a1;
  if (*a1 >= 0)
    v4 = *a1;
  else
    v4 = -v3;
  v17[0] = v4;
  v17[1] = v22;
  v18 = 48;
  v19 = 48;
  v5 = sub_100173F80((uint64_t)v17);
  v6 = (_BYTE *)v5;
  if ((v3 & 0x8000000000000000) == 0)
  {
    v23 = (_BYTE *)v5;
    v24 = v22;
    v7 = (unint64_t)&v22[-v5];
    v8 = a2;
    if ((unint64_t)&v22[-v5] < 0x17)
      goto LABEL_6;
LABEL_14:
    std::string::__grow_by(a2, 0x16uLL, v7 - 22, 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v6 != v22)
      goto LABEL_7;
LABEL_18:
    v10 = v8;
    goto LABEL_21;
  }
  *(_BYTE *)(v5 - 1) = 45;
  v6 = (_BYTE *)(v5 - 1);
  v23 = (_BYTE *)(v5 - 1);
  v24 = v22;
  v7 = (unint64_t)&v22[-v5 + 1];
  v8 = a2;
  if (v7 >= 0x17)
    goto LABEL_14;
LABEL_6:
  if (v6 == v22)
    goto LABEL_18;
LABEL_7:
  v9 = &v20 - v6 + 41;
  if (v9 < 0x20 || (unint64_t)((char *)v8 - v6) < 0x20)
  {
    v10 = v8;
    v11 = v6;
  }
  else
  {
    v10 = (std::string *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    v11 = &v6[v9 & 0xFFFFFFFFFFFFFFE0];
    v12 = (__int128 *)(v6 + 16);
    v13 = &v8->__r_.__value_.__r.__words[2];
    v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *((_OWORD *)v13 - 1) = *(v12 - 1);
      *(_OWORD *)v13 = v15;
      v12 += 2;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_21;
  }
  do
  {
    v16 = *v11++;
    v10->__r_.__value_.__s.__data_[0] = v16;
    v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11 != v22);
LABEL_21:
  v10->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = v7;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
}

void sub_100263A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100263A1C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263A4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100263A68()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100263AC4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_100263B20(uint64_t a1)
{
  double v2;
  _QWORD *v3;
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double *v9;

  v2 = *(double *)(a1 + 96);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v2 - *(double *)sub_100270048((_QWORD *)(a1 + 8), 1);
  v5 = (double *)sub_1002BEF4C(a1 + 32, 1uLL, 1uLL);
  v6 = sub_100263BD0(v4 / sqrt(*v5));
  v7 = -*(double *)(a1 + 96);
  v8 = v7 - *(double *)sub_100270048(v3, 1);
  v9 = (double *)sub_1002BEF4C(a1 + 32, 1uLL, 1uLL);
  return v6 - sub_100263BD0(v8 / sqrt(*v9));
}

double sub_100263BD0(double a1)
{
  if (a1 >= 0.0)
    return 1.0 / (exp(a1 * 0.7988 * (a1 * 0.04417 * a1 + 1.0) * -2.0) + 1.0);
  else
    return 1.0 - sub_100263BD0(-a1);
}

std::string *sub_100263C44@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263C74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100263C90@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100263CDC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263D0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100263D28()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100263D84()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

std::string *sub_100263DE0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100263E2C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100263E5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100263E78()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100263ED4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100263F30(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  _BOOL4 v24;
  double v25;
  int v26;
  NSObject *v27;
  int v28;
  NSObject *v29;
  int v30;
  int v31;
  _BYTE v32[10];
  uint64_t v33;
  __int16 v34;
  int v35;

  if (qword_100417ED8 == -1)
  {
    v6 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417ED8, &stru_1003FFBF0);
  v6 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v31 = 134218496;
    *(_QWORD *)v32 = v7;
    *(_WORD *)&v32[8] = 2048;
    v33 = v8;
    v34 = 1024;
    v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received an altitude event at %lld with relative altitude %f m when localizer is at floor level %d", (uint8_t *)&v31, 0x1Cu);
  }
LABEL_4:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a1 + 100);
  if (v10 >= 2)
  {
    if (v10 == 3)
    {
      *(_DWORD *)(a1 + 96) = a3;
      *(_DWORD *)(a1 + 100) = 2;
    }
    v15 = *(_QWORD *)(a1 + 64);
    if (v15 >= *(_QWORD *)(a1 + 72))
    {
      v16 = sub_100264C04((_QWORD *)(a1 + 56), a2);
    }
    else
    {
      sub_1001A1538(*(_QWORD *)(a1 + 64), a2);
      v16 = v15 + 56;
      *(_QWORD *)(a1 + 64) = v15 + 56;
    }
    *(_QWORD *)(a1 + 64) = v16;
    sub_100264A1C((uint64_t *)(a1 + 48), 0x6DB6DB6DB6DB6DB7 * ((v16 - *(_QWORD *)(a1 + 56)) >> 3) - 1);
    sub_10026443C((_QWORD *)a1);
    v18 = v17;
    sub_100264734((_QWORD *)a1);
    if (*(_DWORD *)(a1 + 80) != 2 || (v20 = v18 - v19, fabs(v20) <= *(double *)(a1 + 32)))
    {
      if (*(_DWORD *)(a1 + 96) == a3)
        return;
      if (qword_100417ED8 == -1)
      {
        v22 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_33;
      }
      else
      {
        dispatch_once(&qword_100417ED8, &stru_1003FFBF0);
        v22 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_33;
      }
      v23 = *(_DWORD *)(a1 + 96);
      v24 = *(_DWORD *)(a1 + 80) == 2;
      v31 = 67109632;
      *(_DWORD *)v32 = v23;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = a3;
      LOWORD(v33) = 1024;
      *(_DWORD *)((char *)&v33 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Floor switched from %d to %d, but before we detected any floor in altitude_history; is time window full: %d",
        (uint8_t *)&v31,
        0x14u);
      goto LABEL_33;
    }
    if (qword_100417ED8 == -1)
    {
      v21 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_17:
        *(_DWORD *)(a1 + 100) = v20 < 0.0;
        return;
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FFBF0);
      v21 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_17;
    }
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Detected floor transition", (uint8_t *)&v31, 2u);
    goto LABEL_17;
  }
  sub_10026443C((_QWORD *)a1);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 64);
  if (v13 >= *(_QWORD *)(a1 + 72))
  {
    v14 = sub_100264C04((_QWORD *)(a1 + 56), a2);
  }
  else
  {
    sub_1001A1538(*(_QWORD *)(a1 + 64), a2);
    v14 = v13 + 56;
    *(_QWORD *)(a1 + 64) = v13 + 56;
  }
  *(_QWORD *)(a1 + 64) = v14;
  sub_100264A1C((uint64_t *)(a1 + 48), 0x6DB6DB6DB6DB6DB7 * ((v14 - *(_QWORD *)(a1 + 56)) >> 3) - 1);
  sub_10026443C((_QWORD *)a1);
  v26 = *(_DWORD *)(a1 + 96);
  if (vabdd_f64(v12, v25) <= *(double *)(a1 + 40))
  {
    if (v26 == a3)
    {
      if (qword_100417ED8 != -1)
      {
        dispatch_once(&qword_100417ED8, &stru_1003FFBF0);
        v29 = qword_100417EE0;
        if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
          goto LABEL_33;
        goto LABEL_32;
      }
      v29 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_32:
        v30 = *(_DWORD *)(a1 + 100);
        v31 = 67109376;
        *(_DWORD *)v32 = v30;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Detected a transition %d ends! But we haven't switched floor (%d) yet!", (uint8_t *)&v31, 0xEu);
      }
    }
LABEL_33:
    sub_1002645AC(a1, v9, a3);
    return;
  }
  if (v26 != a3)
  {
    if (qword_100417ED8 == -1)
    {
      v27 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_28:
        v28 = *(_DWORD *)(a1 + 96);
        v31 = 67109376;
        *(_DWORD *)v32 = v28;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = a3;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Floor switched from %d to %d during a detected transition", (uint8_t *)&v31, 0xEu);
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1003FFBF0);
      v27 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        goto LABEL_28;
    }
  }
}

void sub_100264428(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_100264430(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_10026443C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  double v5;
  void *v6;
  void *v7[2];
  char v8;
  std::string __p;

  v1 = result[7];
  v2 = result[8];
  if (v1 != v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v2 - 40) - result[1];
    v5 = 0.0;
    while (*(_QWORD *)(v2 - 40) >= v4)
    {
      v5 = v5 + *(double *)(v2 - 32);
      --v3;
      v2 -= 56;
      if (v2 == v1)
        return result;
    }
    if (!v3)
    {
      sub_1000D5048(v7, "");
      sub_100265024("At this point, there must be at least one altitude event in ahead window!", &__p);
      sub_100174738((uint64_t)v7, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v8 < 0)
        operator delete(v7[0]);
      sub_1000F2AE4((uint64_t)&v6);
    }
  }
  return result;
}

void sub_100264568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002645AC(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  void *v6;
  char *v7;
  void (***v8)(char *);
  void (**v9)(char *);
  BOOL v10;
  void *__p;
  char *v12;
  void *v13;
  void *v14[2];
  char v15;
  std::string v16;

  sub_1002648A0(a1 + 48, a2 - *(_QWORD *)(a1 + 8), &__p);
  v5 = (char *)__p;
  if (__p)
  {
    v6 = __p;
    if (v12 != __p)
    {
      v7 = v12 - 56;
      v8 = (void (***)(char *))(v12 - 56);
      do
      {
        v9 = *v8;
        v8 -= 7;
        (*v9)(v7);
        v10 = v7 == v5;
        v7 = (char *)v8;
      }
      while (!v10);
      v6 = __p;
    }
    v12 = v5;
    operator delete(v6);
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_1000D5048(v14, "");
    sub_100264FD8("We should have cleared all the measurements not in the ahead window, time window should not be full!", &v16);
    sub_100174738((uint64_t)v14, (uint64_t)&v16, 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[0]);
    sub_1000F2AE4((uint64_t)&v13);
  }
  *(_DWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 100) = 2;
}

void sub_1002646F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100264734(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  double v5;
  void *v6;
  void *v7[2];
  char v8;
  std::string __p;

  v1 = result[7];
  v2 = result[8];
  if (v1 != v2)
  {
    v3 = 0;
    v4 = *result + *(_QWORD *)(v1 + 16);
    v5 = 0.0;
    while (v4 >= *(_QWORD *)(v1 + 16))
    {
      v5 = v5 + *(double *)(v1 + 24);
      v1 += 56;
      --v3;
      if (v1 == v2)
        return result;
    }
    if (!v3)
    {
      sub_1000D5048(v7, "");
      sub_100265024("At this point, there must be at least one altitude event in ahead window!", &__p);
      sub_100174738((uint64_t)v7, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v8 < 0)
        operator delete(v7[0]);
      sub_1000F2AE4((uint64_t)&v6);
    }
  }
  return result;
}

void sub_10026485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002648A0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(_QWORD, __n128);
  void (***v16)(_QWORD, __n128);
  void (**v17)(_QWORD, __n128);
  BOOL v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16) - v4;
  if (v5)
  {
    v7 = 0;
    v8 = v5 / 56;
    if (v8 <= 1)
      v8 = 1;
    v9 = (uint64_t *)(v4 + 16);
    while (1)
    {
      v10 = *v9;
      v9 += 7;
      if (v10 >= a2)
        break;
      if (v8 == ++v7)
      {
        v7 = v8;
        goto LABEL_9;
      }
    }
    if (!v7)
      goto LABEL_18;
LABEL_9:
    *(_DWORD *)(a1 + 32) = 0;
    a3[1] = 0;
    a3[2] = 0;
    v11 = v4 + 56 * v7;
    *a3 = 0;
    sub_100264E2C(a3, v4, v11, v7);
    v13 = *(_QWORD *)(a1 + 16);
    if (v11 != v13)
    {
      v14 = 56 * v7;
      do
      {
        v12 = sub_1001A157C(v4, v4 + v14);
        v4 += 56;
      }
      while (v4 + v14 != v13);
      v11 = *(_QWORD *)(a1 + 16);
    }
    if (v11 != v4)
    {
      v15 = (void (***)(_QWORD, __n128))(v11 - 56);
      v16 = (void (***)(_QWORD, __n128))(v11 - 56);
      do
      {
        v17 = *v16;
        v16 -= 7;
        (*v17)(v15, v12);
        v18 = v15 == (void (***)(_QWORD, __n128))v4;
        v15 = v16;
      }
      while (!v18);
    }
    *(_QWORD *)(a1 + 16) = v4;
  }
  else
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1002649D4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_1003443B0((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

void sub_1002649F0(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100264A1C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (***v15)(_QWORD, __n128);
  void (***v16)(_QWORD, __n128);
  void (**v17)(_QWORD, __n128);
  BOOL v18;
  char *v19;
  void *v20;
  char *v21;
  void (***v22)(char *);
  void (**v23)(char *);
  void *__p;
  char *v25;
  uint64_t v26;

  v3 = a1[1];
  v4 = a1[2] - v3;
  if (v4 == 56)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    v5 = v4 / 56;
    if (v5 <= a2)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        if (v6 != a2)
        {
          v7 = *(_QWORD *)(v3 + 56 * a2 + 16);
          v8 = *a1;
          v9 = (uint64_t *)(v3 + 16 + 56 * v6);
          while (1)
          {
            v10 = *v9;
            v9 += 7;
            if (v8 >= v7 - v10)
              break;
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            if (a2 == v6)
              goto LABEL_6;
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    __p = 0;
    v25 = 0;
    v26 = 0;
    sub_100264E2C(&__p, v3, v3 + 56 * v6, v6);
    if (v6)
    {
      v12 = v3 + 56 * v6;
      v13 = a1[2];
      if (v12 != v13)
      {
        v14 = 56 * v6;
        do
        {
          v11 = sub_1001A157C(v3, v3 + v14);
          v3 += 56;
        }
        while (v3 + v14 != v13);
        v12 = a1[2];
      }
      if (v12 != v3)
      {
        v15 = (void (***)(_QWORD, __n128))(v12 - 56);
        v16 = (void (***)(_QWORD, __n128))(v12 - 56);
        do
        {
          v17 = *v16;
          v16 -= 7;
          (*v17)(v15, v11);
          v18 = v15 == (void (***)(_QWORD, __n128))v3;
          v15 = v16;
        }
        while (!v18);
      }
      a1[2] = v3;
    }
    v19 = (char *)__p;
    if (__p)
    {
      v20 = __p;
      if (v25 != __p)
      {
        v21 = v25 - 56;
        v22 = (void (***)(char *))(v25 - 56);
        do
        {
          v23 = *v22;
          v22 -= 7;
          (*v23)(v21);
          v18 = v21 == v19;
          v21 = (char *)v22;
        }
        while (!v18);
        v20 = __p;
      }
      v25 = v19;
      operator delete(v20);
    }
  }
}

void sub_100264BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1003443F8((uint64_t)&a10, a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100264C04(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_1000D02C0();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      sub_1000CDEB8();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[56 * v3];
  *((_QWORD *)&v19 + 1) = &v7[56 * v6];
  sub_1001A1538(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_1001A1538(v8 + v18, v8 + i))
    v8 -= 56;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 56;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 56;
    v14 = v11 - 56;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 56;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 56;
}

void sub_100264D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100264DD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100264DD8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100264E2C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x492492492492493)
      sub_1000D02C0();
    v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        sub_1001A1538((uint64_t)&v8[v9], a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_100264EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100264F38(&a9);
  _Unwind_Resume(a1);
}

void sub_100264F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 56)
    (**(void (***)(uint64_t))(v10 - 56 + v11))(v10 - 56 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_100264F38(&a9);
  _Unwind_Resume(a1);
}

void ***sub_100264F38(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 56;
        v7 = v4 - 56;
        do
        {
          v8 = *(void (***)(char *))v7;
          v7 -= 56;
          (*v8)(v6);
          v9 = v6 == v3;
          v6 = v7;
        }
        while (!v9);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *sub_100264FD8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100265008(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_100265024@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100265054(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100265070()
{
  uint64_t v0;
  uint64_t (***v1)(uint64_t);

  return (**v1)(v0);
}

uint64_t sub_100265080(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100265098()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002650F4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_100265150(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (_QWORD *)a1[8];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)a1[3];
  while (v5)
  {
    v8 = v5;
    v5 = (_QWORD *)*v5;
    v9 = (std::__shared_weak_count *)v8[3];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v8);
  }
  v6 = (void *)a1[1];
  a1[1] = 0;
  if (v6)
    operator delete(v6);
  return a1;
}

void sub_100265208(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v3;
  *(_QWORD *)(a1 + 112) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100265280(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>)
{
  int v24;
  int v25;
  _BYTE v28[40];
  void *v29;
  void *v30[2];
  char v31;
  std::string __p;

  if (sub_10007C4C8((uint64_t)a2))
  {
    sub_1000D5048(v30, "");
    sub_10023B010("This function should not be used on regional locations.", &__p);
    sub_100174738((uint64_t)v30, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v31 < 0)
      operator delete(v30[0]);
    sub_10015C2DC((uint64_t)&v29);
  }
  v24 = *(_DWORD *)(a1 + 184);
  if (v24 == 1)
  {
    a10 = a2[209];
    a11 = a2[208];
    a12 = a2[218];
    a13 = a2[217];
  }
  v25 = *(_DWORD *)(a1 + 120);
  sub_100094A58((uint64_t)v28, a1 + 200);
  sub_100273C14((uint64_t)a2, a3, a4, (uint64_t *)(a1 + 104), a5, a6, a7, v25, a9, a10, a11, a12, a13, v24, (uint64_t)v28, a8);
  sub_100094C10((uint64_t)v28);
}

void sub_10026541C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100265474(_QWORD *a1)
{
  sub_1000C6828(a1);
  operator delete();
}

void sub_100265498(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

_QWORD *sub_1002654C4(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v47;
  char *v48;

  v48 = &v47;
  v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  else
  {
    v10 = sub_10022CC84((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_58;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v4 = v10;
    if (v10 >= v11)
      v4 = v10 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v10;
  }
  v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v13)
  {
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      v15 = *(_DWORD *)a2;
      v16 = (v15 >> 31) ^ v15;
      v17 = v15 >> 31 == v15;
      v18 = *(_QWORD *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
                return v14;
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_58;
          }
        }
        while (1)
        {
          v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              v22 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
                return v14;
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      if (v17)
      {
        while (1)
        {
          v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18)
              return v14;
          }
          else
          {
            if (v24 >= v11)
              v24 %= v11;
            if (v24 != v4)
              goto LABEL_58;
          }
          v14 = (_QWORD *)*v14;
          if (!v14)
            goto LABEL_58;
        }
      }
      do
      {
        v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            v26 = v14[3] == *(_QWORD *)v9 && v14[4] == *(_QWORD *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16))
              return v14;
          }
        }
        else
        {
          if (v25 >= v11)
            v25 %= v11;
          if (v25 != v4)
            break;
        }
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  v28 = operator new(0x38uLL);
  v14 = v28;
  *v28 = 0;
  v28[1] = v10;
  v29 = v28 + 3;
  v32 = *a3;
  v31 = a3 + 2;
  v30 = v32;
  v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    *v29 = *(_QWORD *)v31;
    v33 = v30;
  }
  else
  {
    *(_OWORD *)v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 10) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  *((_DWORD *)v28 + 12) = *a4;
  v34 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    v10 = v4;
  }
  else
  {
    v36 = 1;
    if (v11 >= 3)
      v36 = (v11 & (v11 - 1)) != 0;
    v37 = v36 | (2 * v11);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_74;
    if (prime < v11)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v11)
LABEL_74:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v10 %= v11;
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  v43 = *(_QWORD *)a1;
  v44 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v44)
  {
    *v14 = *v44;
LABEL_97:
    *v44 = v14;
    goto LABEL_98;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v43 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    v45 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11)
        v45 %= v11;
    }
    else
    {
      v45 &= v11 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100265924(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10026593C()
{
  operator delete();
}

__n128 sub_100265950(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1003FFCC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100265988(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1003FFCC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002659A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8option"
                     "alI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEnt"
                     "ryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5b"
                                "oost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31"
                                "OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARS"
                                "essionStateEP13YieldTraceLogE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_100265A10()
{
}

uint64_t *sub_100265A1C(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  const void *v14;
  const void *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    do
    {
      while (1)
      {
        v12 = (uint64_t **)v7;
        v15 = (const void *)v7[4];
        v13 = v7 + 4;
        v14 = v15;
        v16 = *((char *)v13 + 23);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v13 + 23);
        else
          v17 = v13[1];
        if (v16 >= 0)
          v18 = v13;
        else
          v18 = v14;
        if (v17 >= v10)
          v19 = v10;
        else
          v19 = v17;
        v20 = memcmp(v11, v18, v19);
        v21 = v10 < v17;
        if (v20)
          v21 = v20 < 0;
        if (!v21)
          break;
        v7 = *v12;
        v8 = v12;
        if (!*v12)
          goto LABEL_26;
      }
      v22 = memcmp(v18, v11, v19);
      v23 = v17 < v10;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        return (uint64_t *)v12;
      v7 = v12[1];
    }
    while (v7);
    v8 = v12 + 1;
LABEL_26:
    v24 = (uint64_t *)operator new(0xD0uLL);
    v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v12 = a1 + 1;
    v24 = (uint64_t *)operator new(0xD0uLL);
    v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_10006CED8(v25, *(void **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)v25 = *(_OWORD *)a3;
  v25[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  sub_10019E9E4((uint64_t)(v24 + 7), a4);
  *v24 = 0;
  v24[1] = 0;
  v24[2] = (uint64_t)v12;
  *v8 = v24;
  v26 = (uint64_t *)**a1;
  v27 = v24;
  if (v26)
  {
    *a1 = v26;
    v27 = *v8;
  }
  sub_1000E05F4(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v24;
}

void sub_100265BCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100265BE0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[55] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100265C04()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100265C60()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100265CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a2, v4, a1 + 48);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, 0);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 1);
  }
  return result;
}

_QWORD *sub_100265D44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  void *v6;
  void *__p[2];
  char v8;
  _BYTE v9[24];
  _BYTE *v10;
  std::string v11;

  if (!*(_BYTE *)(a1 + 40))
  {
    sub_1000D5048(__p, "");
    sub_100266BBC("localizeOn not called yet.  Localizer not available to add finalizer actions", &v11);
    sub_100174738((uint64_t)__p, (uint64_t)&v11, 1);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (v8 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v6);
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v10 = v9;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v9);
    }
    else
    {
      v10 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 80))(v2, v9);
  result = v10;
  if (v10 == v9)
  {
    v5 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_100265EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100265F40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

void sub_100265F50(uint64_t a1, uint64_t a2)
{
  sub_1001E41F0(*(_QWORD *)(a1 + 24), a2);
}

void sub_100265F58(uint64_t a1, uint64_t a2)
{
  sub_1001E41F8(*(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100265F60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_100265F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;

  v7 = *(unsigned __int8 *)(a1 + 40);
  v6 = a1 + 40;
  if (v7)
  {
    sub_1002661CC(v6, (uint64_t *)a3);
    if (qword_100417ED8 == -1)
      goto LABEL_3;
LABEL_13:
    dispatch_once(&qword_100417ED8, &stru_1003FFE00);
    v8 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
      return sub_1001E4080(*(_QWORD *)(a1 + 24), a2, a3);
    goto LABEL_4;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 56) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_1000B347C(a1 + 64, a3 + 16);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a3 + 56);
  v13 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a3 + 72);
  *(_BYTE *)(a1 + 40) = 1;
  if (qword_100417ED8 != -1)
    goto LABEL_13;
LABEL_3:
  v8 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    v16 = 134349056;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "changeSelectedLocations at timestamp %{public}lld", (uint8_t *)&v16, 0xCu);
  }
  return sub_1001E4080(*(_QWORD *)(a1 + 24), a2, a3);
}

void sub_1002660F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3)
    sub_100344444(v3);
  _Unwind_Resume(exception_object);
}

void sub_100266118(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      sub_100073738(v3 + 4);
      v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void sub_10026619C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.locationd.Pipeline", "Generic");
  v2 = (void *)qword_100417EE0;
  qword_100417EE0 = (uint64_t)v1;

}

void sub_1002661CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (uint64_t *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  if (!v9)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_8:
    if (v8 == a2)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v8 != a2)
  {
LABEL_9:
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
    sub_1002662F4((_QWORD *)(a1 + 24), (_QWORD *)a2[4], 0);
  }
LABEL_10:
  v13 = a2[7];
  v12 = a2[8];
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v12;
  if (!v16)
    goto LABEL_17;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 72);
  }
  else
  {
LABEL_17:
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 72);
  }
}

void sub_1002662F4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v6 = a1[1];
  if (!v6)
    goto LABEL_17;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v10 = a2[2];
      v9 = a2[3];
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)v8 + 3);
      *((_QWORD *)v8 + 2) = v10;
      *((_QWORD *)v8 + 3) = v9;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      sub_10006A90C((uint64_t)v8 + 32, (uint64_t)(a2 + 4));
      v16 = *(void **)v8;
      sub_100266480(a1, (const void **)v8);
      a2 = (_QWORD *)*a2;
      v8 = v16;
      if (!v16)
        goto LABEL_17;
    }
    do
    {
      v17 = v8;
      v8 = *(void **)v8;
      sub_100073738(v17 + 4);
      v18 = (std::__shared_weak_count *)v17[3];
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      operator delete(v17);
    }
    while (v8);
  }
  else
  {
LABEL_17:
    while (a2 != a3)
    {
      sub_1002665BC(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_100266450(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_100266118(v1, v2);
  __cxa_rethrow();
}

void sub_10026646C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

const void **sub_100266480(_QWORD *a1, const void **a2)
{
  unsigned __int8 ***v4;
  unint64_t v5;
  const void ***v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  char v12;

  v4 = (unsigned __int8 ***)(a2 + 2);
  v5 = sub_1000B40D8((uint64_t)&v12, (uint64_t ***)a2 + 2);
  a2[1] = (const void *)v5;
  v6 = sub_100266614((uint64_t)a1, v5, v4);
  v7 = (int8x8_t)a1[1];
  v8 = (unint64_t)a2[1];
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = (const void *)a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v10 = *((_QWORD *)*a2 + 1);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  *v6 = a2;
  if (*a2)
  {
    v10 = *((_QWORD *)*a2 + 1);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

const void **sub_1002665BC(_QWORD *a1, _QWORD *a2)
{
  const void **v4;

  sub_100266AC4((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100266480(a1, v4);
}

void sub_1002665F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p)
{
  _QWORD *v11;

  v11 = __p;
  __p = 0;
  if (v11)
    sub_100344480((uint64_t)&__p, v11);
  _Unwind_Resume(exception_object);
}

const void ***sub_100266614(uint64_t a1, unint64_t a2, unsigned __int8 ***a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  size_t prime;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  uint8x8_t v20;
  const void ***v21;
  const void ***v22;
  int v23;
  unint64_t v24;
  const void **v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v12 = 1;
    if (v6 >= 3)
      v12 = (v6 & (v6 - 1)) != 0;
    v13 = v12 | (2 * v6);
    v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14)
      prime = v14;
    else
      prime = v13;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime <= v6)
    {
      if (prime >= v6)
        goto LABEL_28;
      v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v16);
        if (prime <= v19)
          prime = v19;
        if (prime >= v6)
        {
LABEL_28:
          v6 = *(_QWORD *)(a1 + 8);
          v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
          v20.i16[0] = vaddlv_u8(v20);
          v10 = v20.u32[0];
          if (v20.u32[0] <= 1uLL)
            goto LABEL_4;
          goto LABEL_29;
        }
      }
      else
      {
        v18 = 1 << -(char)__clz(v16 - 1);
        if (v16 >= 2)
          v16 = v18;
        if (prime <= v16)
          prime = v16;
        if (prime >= v6)
          goto LABEL_28;
      }
    }
    sub_100266894(a1, prime);
    goto LABEL_28;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  v11 = a2;
  if (v6 <= a2)
    v11 = a2 % v6;
LABEL_31:
  v21 = *(const void ****)(*(_QWORD *)a1 + 8 * v11);
  if (v21)
  {
    v22 = (const void ***)*v21;
    if (*v21)
    {
      if (v10 >= 2)
      {
        v27 = 0;
        do
        {
          v28 = (unint64_t)v22[1];
          v29 = v28;
          if (v28 >= v6)
            v29 = v28 % v6;
          if (v29 != v11)
            break;
          if (v28 == a2)
          {
            v30 = sub_1000790EC(v22 + 2, a3);
            if ((v27 & (v30 ^ 1) & 1) != 0)
              return v21;
          }
          else
          {
            v30 = 0;
            if ((v27 & 1) != 0)
              return v21;
          }
          v27 |= v30;
          v21 = (const void ***)*v21;
          v22 = (const void ***)*v21;
        }
        while (*v21);
      }
      else
      {
        v23 = 0;
        v24 = v6 - 1;
        do
        {
          v25 = v22[1];
          if (((unint64_t)v25 & v24) != v11)
            break;
          if (v25 == (const void **)a2)
          {
            v26 = sub_1000790EC(v22 + 2, a3);
            if ((v23 & (v26 ^ 1) & 1) != 0)
              return v21;
          }
          else
          {
            v26 = 0;
            if ((v23 & 1) != 0)
              return v21;
          }
          v23 |= v26;
          v21 = (const void ***)*v21;
          v22 = (const void ***)*v21;
        }
        while (*v21);
      }
    }
  }
  return v21;
}

void sub_100266894(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void ***v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  unsigned __int8 ***v14;
  const void ***v15;
  int v16;
  const void ***v17;
  void *v18;
  const void ***v19;
  unint64_t v20;
  const void **v21;
  const void ***v22;
  int v23;
  const void ***v24;

  if (a2)
  {
    if (a2 >> 61)
      sub_1000CDEB8();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = a1 + 16;
    v8 = *(const void ****)(a1 + 16);
    if (v8)
    {
      v9 = (unint64_t)v8[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v7;
        while (1)
        {
          v19 = (const void ***)*v8;
          if (!*v8)
            break;
          v20 = (unint64_t)v19[1];
          if (v20 >= a2)
            v20 %= a2;
          if (v20 == v9)
          {
            v8 = (const void ***)*v8;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v20))
          {
            v21 = *v19;
            if (*v19)
            {
              v22 = (const void ***)*v8;
              while (1)
              {
                v23 = sub_1000790EC(v19 + 2, (unsigned __int8 ***)v21 + 2);
                v24 = (const void ***)*v22;
                if (!v23)
                  break;
                v21 = *v24;
                v22 = (const void ***)*v22;
                if (!*v24)
                  goto LABEL_44;
              }
              v21 = *v22;
              v24 = v22;
            }
            else
            {
              v24 = (const void ***)*v8;
            }
LABEL_44:
            *v8 = v21;
            *v24 = **(const void ****)(*(_QWORD *)a1 + 8 * v20);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v20) = v19;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v8;
            v8 = v19;
            v9 = v20;
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v7;
        while (1)
        {
          v12 = *v8;
          if (!*v8)
            break;
          v13 = (unint64_t)v12[1] & v10;
          if (v13 == v11)
          {
            v8 = (const void ***)*v8;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = (unsigned __int8 ***)*v12;
            if (*v12)
            {
              v15 = (const void ***)*v8;
              while (1)
              {
                v16 = sub_1000790EC((const void ***)v12 + 2, v14 + 2);
                v17 = (const void ***)*v15;
                if (!v16)
                  break;
                v14 = (unsigned __int8 ***)*v17;
                v15 = (const void ***)*v15;
                if (!*v17)
                  goto LABEL_22;
              }
              v14 = (unsigned __int8 ***)*v15;
              v17 = v15;
            }
            else
            {
              v17 = (const void ***)*v8;
            }
LABEL_22:
            *v8 = (const void **)v14;
            *v17 = **(const void ****)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v8;
            v8 = (const void ***)v12;
            v11 = v13;
          }
        }
      }
    }
  }
  else
  {
    v18 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v18)
      operator delete(v18);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unint64_t sub_100266AC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t ***v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t result;
  char v13;

  v5 = a1 + 16;
  v6 = operator new(0x7A0uLL);
  v7 = v6;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v8 = a2[1];
  v6[2] = *a2;
  v9 = (uint64_t ***)(v6 + 2);
  *v6 = 0;
  v6[1] = 0;
  v6[3] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_1000B53CC(v6 + 4, a2 + 2);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_1000B40D8((uint64_t)&v13, v9);
  v7[1] = result;
  return result;
}

void sub_100266B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E4710(v1);
  _Unwind_Resume(a1);
}

void sub_100266B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1001E4710(v1);
  _Unwind_Resume(a1);
}

std::string *sub_100266BBC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100266BEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100266C08()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100266C64()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100266CC0()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_100266CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  __n128 v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) - **(_QWORD **)(a3 + 8) >= 0x20uLL)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(double *)(a1 + 32);
    v8 = (uint64_t *)(a2 + 56);
    v9 = *(_QWORD *)(a3 + 24);
    v10 = *(_DWORD *)(v9 + 8);
    v11 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 56))(*(_QWORD *)(a2 + 56)) + 1616);
    v12 = *(_DWORD *)(v9 + 12);
    if (v12)
      v13 = 0;
    else
      v13 = v11 <= v10;
    if ((v13 || (v12 == 1 ? (v14 = v11 < v10) : (v14 = 1), !v14))
      && (*(double (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) < v7
      && (v15.n128_u64[0] = *(_QWORD *)(a2 + 16),
          sub_100273020(*(_QWORD **)(a3 + 8), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 56), *(_QWORD *)(a3 + 24), 0, *(unsigned __int8 *)(a2 + 49), *(_QWORD *)(a3 + 16), (uint64_t)&v30, v15, *(double *)(a2 + 24)), (_BYTE)v30))
    {
      v16.n128_f64[0] = sub_100266F20(a2, v8, &v31, *(_QWORD *)(a3 + 16));
      if ((_BYTE)v30)
      {
        v17 = v32;
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
            v20 = v17;
LABEL_29:
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
    else
    {
      v21 = 40;
      if (!*(_BYTE *)(a2 + 49))
        v21 = 24;
      v22 = *(double *)(a1 + v21);
      if ((*(double (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) < v22)
      {
        v23 = sub_100273574(*(uint64_t **)(a3 + 8), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 56), 0, *(unsigned __int8 *)(a2 + 49), *(_QWORD *)(a3 + 16), *(double *)(a2 + 16), *(double *)(a2 + 24));
        v24 = v23[1];
        v30 = *v23;
        v31 = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27.n128_f64[0] = sub_100266F20(a2, v8, &v30, *(_QWORD *)(a3 + 16));
        if (v24)
        {
          v28 = (unint64_t *)(v24 + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v24 + 16))(v24, v27);
            v20 = (std::__shared_weak_count *)v24;
            goto LABEL_29;
          }
        }
      }
    }
  }
}

void sub_100266EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1001E93AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100266F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_100266F20(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double result;
  __int128 v17;
  uint64_t (**v18)();
  float64x2_t v19;
  char v20;
  _BYTE v21[8];
  float64x2_t v22;

  if (*a2 != *a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
    sub_1001D550C(a4, *a2, *a3, (uint64_t)v21);
    v18 = off_1003F9A68;
    v20 = 0;
    v19 = vaddq_f64(*(float64x2_t *)(a1 + 16), v22);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) && *(_BYTE *)(a1 + 49)
      || (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3),
          ((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(_QWORD *)v9 + 16))(v9, v19.f64[0], v19.f64[1]) & 1) != 0))
    {
      *(float64x2_t *)(a1 + 16) = v19;
      v10 = a3[1];
      *(_QWORD *)&v17 = *a3;
      *((_QWORD *)&v17 + 1) = v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      sub_100223E98(a1, &v17);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
      if (*((_QWORD *)&v17 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    nullsub_23(&v18);
    *(_QWORD *)&result = nullsub_23(v21).n128_u64[0];
  }
  return result;
}

void sub_100267080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1000E095C((uint64_t)&a9);
  nullsub_23(&a11);
  nullsub_23(&a15);
  _Unwind_Resume(a1);
}

void sub_1002670A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  nullsub_23((uint64_t *)va);
  nullsub_23(va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002670C4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_1003FFE58;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_1002670D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  const void **v18;
  std::__shared_weak_count *v19;
  unsigned __int8 **v20;
  std::__shared_weak_count *v21;

  sub_10025B620(*(_QWORD *)(a1 + 8), *a3, &v18);
  if (sub_1000790EC(&v18, &v20))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, const void ***))(**(_QWORD **)(a1 + 16) + 16))(&v16, *(_QWORD *)(a1 + 16), &v18);
    v6.n128_f64[0] = sub_100266F20(a2, (uint64_t *)(a2 + 56), &v16, a3[2]);
    v7 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = v21;
  if (v21)
  {
    v11 = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100267218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_10015FE50((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100267234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10015FE50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100267248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10015FE50((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10026725C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = off_1003FFE30;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1002672D4()
{
  operator delete();
}

uint64_t sub_1002672E8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100267344()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_1002673A0(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002673CC()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100267428()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100267484(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  const void ***v12;
  unsigned __int8 ***v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  _BYTE v50[32];
  __int128 v51;
  _BYTE v52[48];
  __int128 v53;
  double v54[4];
  char v55[8];
  float64x2_t v56;
  char *v57;
  char *v58;
  unint64_t v59;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 16))(*(_QWORD *)(a3 + 56));
  if (((*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v8 + 16))(v8, *(double *)(a2 + 8), *(double *)(a2 + 16)) & 1) != 0)
  {
    *(_BYTE *)a4 = 0;
    return;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10)
  {
    v24 = 0;
    goto LABEL_27;
  }
  do
  {
    v12 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 64))(*v9);
    v13 = (unsigned __int8 ***)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 64))(*(_QWORD *)(a3 + 56));
    if ((sub_1000790EC(v12, v13) & 1) == 0)
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 72))(*v9);
      if (v14 == (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 72))(*(_QWORD *)(a3 + 56)))
      {
        if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 56))(*(_QWORD *)(a3 + 56))
          || (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 56))(*(_QWORD *)(a3 + 56)) + 1913) & 0x40) == 0
          || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 56))(*v9)
          || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 56))(*v9) + 1913) & 0x40) == 0
          || (v15 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 56) + 56))(*(_QWORD *)(a3 + 56))
                              + 1616),
              v15 == *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 56))(*v9) + 1616)))
        {
          sub_1001D550C((uint64_t)(a1 + 5), *(_QWORD *)(a3 + 56), *v9, (uint64_t)v52);
          sub_1001A2040((uint64_t)v55, a2);
          v56 = vaddq_f64(*(float64x2_t *)&v52[8], v56);
          v54[0] = (*(double (**)(uint64_t))(*(_QWORD *)*v9 + 24))(*v9);
          v54[1] = v16;
          v54[2] = v17;
          v54[3] = v18;
          if (sub_1003039E4(v54, (uint64_t)v55))
          {
            v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 16))(*v9);
            if (((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(_QWORD *)v19 + 16))(v19, v56.f64[0], v56.f64[1]) & 1) != 0)
            {
              v20 = v58;
              if ((unint64_t)v58 >= v59)
              {
                v11 = sub_100267BC0((uint64_t *)&v57, v9, (uint64_t)v55);
              }
              else
              {
                *(_QWORD *)v58 = *v9;
                v21 = v9[1];
                *((_QWORD *)v20 + 1) = v21;
                if (v21)
                {
                  v22 = (unint64_t *)(v21 + 8);
                  do
                    v23 = __ldxr(v22);
                  while (__stxr(v23 + 1, v22));
                }
                sub_1001A2040((uint64_t)(v20 + 16), (uint64_t)v55);
                v11 = v20 + 48;
              }
              v58 = v11;
            }
          }
          nullsub_23(v55);
          nullsub_23(v52);
        }
      }
    }
    v9 += 2;
  }
  while (v9 != v10);
  v25 = (uint64_t)v57;
  v24 = (uint64_t)v58;
  if (v57 == v58)
  {
LABEL_27:
    *(_BYTE *)a4 = 0;
    if (!v24)
      return;
    goto LABEL_53;
  }
  if (v58 - v57 == 48)
  {
    v26 = 0;
  }
  else
  {
    v26 = (*(uint64_t (**)(uint64_t *, _QWORD))(*a1[3] + 80))(a1[3], -1431655765 * ((unint64_t)(v58 - v57) >> 4));
    v25 = (uint64_t)v57;
  }
  v27 = v26;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v58[-v25] >> 4) <= v26)
    sub_1001E2FA0();
  v28 = v25 + 48 * v26;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v28 + 24);
  *(_QWORD *)&v53 = *(_QWORD *)v28;
  v29 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)&v53 + 1) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  sub_100223E98(a3, &v53);
  v32 = v25 + 48 * v27 + 16;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(_QWORD *)&v51 = *(_QWORD *)v28;
  v36 = *(_QWORD *)(v28 + 8);
  *((_QWORD *)&v51 + 1) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  sub_1001A2040((uint64_t)v50, v32);
  *(_OWORD *)v52 = v51;
  v51 = 0uLL;
  sub_1001A2040((uint64_t)&v52[16], (uint64_t)v50);
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)v52;
  *(_OWORD *)v52 = 0uLL;
  sub_1001A2040(a4 + 24, (uint64_t)&v52[16]);
  *(_BYTE *)a4 = 1;
  nullsub_23(&v52[16]);
  v39 = *(std::__shared_weak_count **)&v52[8];
  if (*(_QWORD *)&v52[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v52[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  nullsub_23(v50);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v24 = (uint64_t)v57;
  if (v57)
  {
LABEL_53:
    v45 = v58;
    v46 = (void *)v24;
    if (v58 != (char *)v24)
    {
      do
      {
        nullsub_23(v45 - 32);
        v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 5);
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v45 -= 48;
      }
      while (v45 != (char *)v24);
      v46 = v57;
    }
    v58 = (char *)v24;
    operator delete(v46);
  }
}

void sub_100267978(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100267B20((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_10026798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(v15 + 16))
    sub_1003444E0();
  sub_100267AB0((uint64_t)&a15);
  nullsub_23(&a9);
  sub_1000E095C((uint64_t)&a13);
  sub_100267B20((void **)(v16 - 104));
  _Unwind_Resume(a1);
}

void sub_100267A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  sub_1000E095C((uint64_t)va);
  sub_100267B20((void **)(v14 - 104));
  _Unwind_Resume(a1);
}

void sub_100267A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100267B20((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_100267A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  if (*(_QWORD *)(v7 + 8))
    sub_1003444E0();
  *(_QWORD *)(v8 - 96) = v7;
  nullsub_23(v8 - 136);
  nullsub_23(va);
  sub_100267B20((void **)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_100267A9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100267B20((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_100267AB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_23(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void **sub_100267B20(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = nullsub_23(v3 - 32);
        v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 5);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_100267BC0(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1000CDEB8();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v20 = &v9[48 * v4];
  v22 = &v9[48 * v8];
  v10 = a2[1];
  *(_QWORD *)v20 = *a2;
  *((_QWORD *)v20 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  sub_1001A2040((uint64_t)&v9[48 * v4 + 16], a3);
  sub_10025FD68((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, (uint64_t)v20, (uint64_t)v20);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v15;
  a1[1] = (uint64_t)(v20 + 48);
  a1[2] = (uint64_t)v22;
  if (v14 == v13)
  {
    if (v13)
LABEL_16:
      operator delete(v13);
  }
  else
  {
    do
    {
      v21 = v14 - 48;
      nullsub_23(v14 - 32);
      v17 = (std::__shared_weak_count *)*((_QWORD *)v14 - 5);
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v14 -= 48;
    }
    while (v21 != v13);
    if (v13)
      goto LABEL_16;
  }
  return v20 + 48;
}

void sub_100267D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10025FCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100267DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_10025FCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100267DF8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100267E54()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100267EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  _QWORD *v9;
  int v10;
  int v11;
  __int128 v12;
  void **v13;
  void *v14;
  char *v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  __int128 v22;
  int v23;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v3 = *(int *)(a2 + 8);
  if (!(_DWORD)v3)
  {
    v7 = 0;
LABEL_15:
    v16 = v20;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v16;
    *(_BYTE *)a1 = 1;
    return a1;
  }
  if ((v3 & 0x80000000) != 0)
    sub_1000D02C0();
  v18 = (char *)operator new(32 * v3);
  v19 = v18;
  v20 = &v18[32 * v3];
  v5 = *(uint64_t **)a2;
  v6 = 8 * v3;
  do
  {
    while (1)
    {
      sub_10009558C((uint64_t)&v21, *v5);
      v8 = (int *)v19;
      if (v19 < v20)
        break;
      v7 = (char *)sub_1001D7E30((void **)&v18, &v21);
      v19 = v7;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_10;
    }
    v9 = v19 + 8;
    v10 = v21;
    v11 = v21 >> 31;
    if (v21 >> 31 == v21)
    {
      *v9 = v22;
      v11 = v10;
    }
    else
    {
      v12 = v22;
      *((_DWORD *)v19 + 6) = v23;
      *(_OWORD *)v9 = v12;
    }
    *v8 = v11 ^ v10;
    v7 = (char *)(v8 + 8);
    v19 = v7;
    ++v5;
    v6 -= 8;
  }
  while (v6);
LABEL_10:
  v13 = (void **)(a1 + 8);
  if (!*(_BYTE *)a1)
    goto LABEL_15;
  v14 = *v13;
  if (*v13)
  {
    *(_QWORD *)(a1 + 16) = v14;
    operator delete(v14);
    *v13 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v7 = v19;
  }
  v15 = v20;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v15;
  return a1;
}

void sub_100268048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _BYTE *v10;
  _BYTE *v11;

  if (__p)
    operator delete(__p);
  sub_10026808C(v11);
  if (*v10)
    sub_10034450C((uint64_t)v10);
  _Unwind_Resume(a1);
}

_BYTE *sub_10026808C(_BYTE *a1)
{
  if (*a1)
    sub_10006A864((uint64_t)a1);
  return a1;
}

uint64_t sub_1002680C0(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  v2 = *(void (****)(_QWORD))(a1 + 64);
  if (v2)
  {
    v3 = *(void (****)(_QWORD))(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      v5 = v3 - 5;
      v6 = v3 - 5;
      do
      {
        v7 = *v6;
        v6 -= 5;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v9 = *(void **)(a1 + 40);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    operator delete(v9);
  }
  v10 = *(_QWORD **)(a1 + 16);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
    operator delete(v12);
  return a1;
}

uint64_t sub_100268168(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;

  v3 = *(unsigned __int8 *)(a1 + 32);
  v2 = a1 + 32;
  if (v3)
    sub_10006A864(v2);
  if (*(_BYTE *)a1)
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(_QWORD *)(a1 + 16) = v4;
      operator delete(v4);
    }
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void **sub_1002681B4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 96;
        if (*(v3 - 96))
          sub_10006A864((uint64_t)(v3 - 96));
        if (*(v3 - 128))
        {
          v6 = (void *)*((_QWORD *)v3 - 15);
          if (v6)
          {
            *((_QWORD *)v3 - 14) = v6;
            operator delete(v6);
          }
          *(v3 - 128) = 0;
        }
        v3 -= 128;
      }
      while (v5 - 32 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100268248(uint64_t a1)
{
  sub_10002F3EC((_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 40))
    operator delete(*(void **)(a1 + 24));
  if (*(_QWORD *)(a1 + 16))
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100268290(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1000945CC(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_1002682EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

const void ***sub_1002682F4(uint64_t a1, uint64_t a2)
{
  const void ***v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  void *v9[2];
  void *v10[2];
  char v11;
  std::string __p;

  if (sub_10007C4C8(a2))
  {
    sub_1000D5048(v10, "");
    sub_100242D34("No Coarse Indoor AP data for wifi2.", &__p);
    sub_100174738((uint64_t)v10, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    sub_10015C2DC((uint64_t)v9);
  }
  sub_10008930C(&__p, a2 + 8);
  v4 = sub_1000A9C6C((_QWORD *)(a1 + 216), (uint64_t ***)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!v4)
  {
    sub_1000D5048(v10, "");
    sub_10017B9FC("No Coarse Indoor Data for this location.", &__p);
    sub_100174738((uint64_t)v10, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    sub_1000F2AE4((uint64_t)v9);
  }
  return v4 + 4;
}

void sub_100268490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002684F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  const void ***v5;
  const void ***v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t **v11;
  std::__shared_weak_count *v12;

  v4 = (_QWORD *)(a1 + 256);
  sub_10008930C(&v11, a2 + 8);
  v5 = sub_1000A9C6C(v4, &v11);
  v6 = v5;
  v7 = v12;
  if (!v12)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    if (v5)
    {
LABEL_6:
      v10 = *((_OWORD *)v6 + 3);
      *(_OWORD *)a3 = *((_OWORD *)v6 + 2);
      *(_OWORD *)(a3 + 16) = v10;
      *(_BYTE *)(a3 + 32) = 1;
      return;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 32) = 0;
}

void sub_1002685AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100195804((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1002685C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  *(_BYTE *)a2 = 0;
  if (*(_BYTE *)a3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    result = *(__n128 *)(a3 + 8);
    *(__n128 *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)a2 = 1;
  }
  *(_BYTE *)(a2 + 32) = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v4 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a2 + 40) = v4;
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    v5 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a2 + 56) = v5;
    v6 = *(_QWORD *)(a3 + 64);
    *(_QWORD *)(a2 + 64) = v6;
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 8);
      v8 = *(_QWORD *)(a2 + 48);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8)
          v7 %= v8;
      }
      else
      {
        v7 &= v8 - 1;
      }
      *(_QWORD *)(v4 + 8 * v7) = a2 + 56;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
    }
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(a3 + 96);
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    result = *(__n128 *)(a3 + 104);
    *(__n128 *)(a2 + 104) = result;
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    *(_BYTE *)(a2 + 32) = 1;
  }
  return result;
}

uint64_t sub_1002686BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;

  v3 = (a1[1] - *a1) >> 7;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57)
    sub_1000D02C0();
  v6 = a1[2] - *a1;
  if (v6 >> 6 > v4)
    v4 = v6 >> 6;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80)
    v7 = 0x1FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 57)
      sub_1000CDEB8();
    v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (uint64_t)&v8[128 * v3];
  v10 = &v8[128 * v7];
  sub_1002685C0((uint64_t)(a1 + 2), v9, a2);
  v11 = v9 + 128;
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (!v12)
      return v11;
    goto LABEL_24;
  }
  do
  {
    v9 -= 128;
    v12 -= 128;
    sub_1002685C0((uint64_t)(a1 + 2), v9, (uint64_t)v12);
  }
  while (v12 != v13);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = (uint64_t)v10;
  if (v12 != v14)
  {
    do
    {
      v15 = v12 - 96;
      if (*(v12 - 96))
        sub_10006A864((uint64_t)(v12 - 96));
      if (*(v12 - 128))
      {
        v16 = (void *)*((_QWORD *)v12 - 15);
        if (v16)
        {
          *((_QWORD *)v12 - 14) = v16;
          operator delete(v16);
        }
        *(v12 - 128) = 0;
      }
      v12 -= 128;
    }
    while (v15 - 32 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_24:
    operator delete(v12);
  return v11;
}

const void ***sub_100268824(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  __int128 v6;
  const void ***v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char v14;

  __p = operator new(0x40uLL);
  *(_QWORD *)__p = 0;
  *((_QWORD *)__p + 1) = 0;
  sub_10008930C((_QWORD *)__p + 2, a2);
  v6 = a3[1];
  *((_OWORD *)__p + 2) = *a3;
  *((_OWORD *)__p + 3) = v6;
  *((_QWORD *)__p + 1) = sub_1000B40D8((uint64_t)&v14, (uint64_t ***)__p + 2);
  v7 = sub_10006A618(a1, (uint64_t)__p);
  if ((v8 & 1) == 0 && __p)
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)__p + 3);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(__p);
  }
  return v7;
}

void sub_100268920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100268934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **sub_100268948(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  const void ***v11;
  const void **v12;
  unint64_t v13;
  unint64_t v14;
  const void ***v15;
  const void **v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  float v21;
  float v22;
  uint64_t v23;
  const void ***v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v36[2];
  char v37;

  v7 = sub_1000B40D8((uint64_t)v36, a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(const void ****)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = (unint64_t)v12[1];
            if (v14 == v8)
            {
              if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v12 = (const void **)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if ((sub_1000790EC((const void ***)v12 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (const void **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (const void ***)(a1 + 16);
  v16 = (const void **)operator new(0x40uLL);
  v12 = v16;
  v36[0] = v16;
  v36[1] = a1 + 16;
  *v16 = 0;
  v16[1] = (const void *)v8;
  v17 = *(unint64_t **)(a3 + 8);
  v16[2] = *(const void **)a3;
  v16[3] = v17;
  if (v17)
  {
    v18 = v17 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v16 + 3) = v20;
  v37 = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(const void ****)(*(_QWORD *)a1 + 8 * v3);
    if (v24)
    {
LABEL_29:
      *v12 = *v24;
LABEL_64:
      *v24 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v25 = 1;
    if (v9 >= 3)
      v25 = (v9 & (v9 - 1)) != 0;
    v26 = v25 | (2 * v9);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v33 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v23 = *(_QWORD *)a1;
        v24 = *(const void ****)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v24)
          goto LABEL_29;
      }
      else
      {
        v3 = v8;
        v23 = *(_QWORD *)a1;
        v24 = *(const void ****)(*(_QWORD *)a1 + 8 * v8);
        if (v24)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v33 & v8;
      v23 = *(_QWORD *)a1;
      v24 = *(const void ****)(*(_QWORD *)a1 + 8 * (v33 & v8));
      if (v24)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v23 + 8 * v3) = v15;
  if (*v12)
  {
    v34 = *((_QWORD *)*v12 + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v24 = (const void ***)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_100268C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100268CA4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  const void ***v9;
  uint64_t **v10;
  const void ***v11;
  uint64_t *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t *v17;
  char *__p;

  v6 = a1 + 1;
  __p = (char *)operator new(0x48uLL);
  sub_10008930C((_QWORD *)__p + 4, a2);
  *((_OWORD *)__p + 3) = *(_OWORD *)a3;
  *((_QWORD *)__p + 8) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v7 = (uint64_t *)__p;
  v8 = *v6;
  if (!*v6)
  {
    v10 = v6;
LABEL_21:
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v6 = v7;
    v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      v7 = *v6;
    }
    sub_1000E05F4(a1[1], v7);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  v9 = (const void ***)(__p + 32);
  while (1)
  {
    while (1)
    {
      v10 = (uint64_t **)v8;
      v11 = (const void ***)(v8 + 4);
      if (!sub_10006A214(v9, (const void ***)v8 + 4))
        break;
      v8 = *v10;
      v6 = v10;
      if (!*v10)
      {
        v6 = v10;
        v7 = (uint64_t *)__p;
        goto LABEL_21;
      }
    }
    if (!sub_10006A214(v11, v9))
      break;
    v6 = v10 + 1;
    v8 = v10[1];
    if (!v8)
    {
      v7 = (uint64_t *)__p;
      goto LABEL_21;
    }
  }
  v12 = *v6;
  v7 = (uint64_t *)__p;
  if (!*v6)
    goto LABEL_21;
  if (__p)
  {
    v13 = (void *)*((_QWORD *)__p + 6);
    if (v13)
    {
      *((_QWORD *)__p + 7) = v13;
      operator delete(v13);
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)__p + 5);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    operator delete(__p);
  }
  return (char *)v12;
}

void sub_100268E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100268E74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100268E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100268E74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100268E74(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[6];
      if (v3)
      {
        v2[7] = v3;
        operator delete(v3);
      }
      v4 = (std::__shared_weak_count *)v2[5];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

const void ***sub_100268F00(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  const void ***v4;
  char v5;
  _QWORD *v6;
  void *__p;
  char v9;

  sub_10006A744((uint64_t)a1, a2, a3, (uint64_t)&__p);
  v4 = sub_10006A618(a1, (uint64_t)__p);
  if ((v5 & 1) == 0)
  {
    v6 = __p;
    __p = 0;
    if (v6)
    {
      if (v9)
        sub_1000945CC(v6 + 2);
      operator delete(v6);
    }
  }
  return v4;
}

void sub_100268F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12)
      sub_1000945CC(__p + 2);
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100268FA8(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1000945CC(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_100268FEC(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  char *v13;
  int v14;
  __int128 *v15;

  v5 = sub_10008930C(a1, a2);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v6 = *a3;
  v7 = a3[1];
  v8 = v7 - *a3;
  if (v8)
  {
    if (v8 < 0)
      sub_1000D02C0();
    v9 = (char *)operator new(v8);
    v10 = 0;
    a1[2] = v9;
    a1[3] = v9;
    a1[4] = &v9[32 * (v8 >> 5)];
    do
    {
      while (1)
      {
        v12 = (int *)&v9[v10];
        v13 = &v9[v10 + 8];
        v15 = (__int128 *)(v6 + v10 + 8);
        v14 = *(_DWORD *)(v6 + v10);
        if (v14 >> 31 == v14)
          break;
        v11 = *v15;
        *(_DWORD *)&v9[v10 + 24] = *(_DWORD *)(v6 + v10 + 24);
        *(_OWORD *)v13 = v11;
        *v12 = (v14 >> 31) ^ v14;
        v10 += 32;
        if (v6 + v10 == v7)
          goto LABEL_7;
      }
      *(_QWORD *)v13 = *(_QWORD *)v15;
      *v12 = 0;
      v10 += 32;
    }
    while (v6 + v10 != v7);
LABEL_7:
    a1[3] = &v9[v10];
  }
  return a1;
}

void sub_1002690DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  sub_100195804(v1);
  _Unwind_Resume(a1);
}

const void **sub_100269100(uint64_t a1, uint64_t ***a2, uint64_t a3, const void ***a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  const void ***v12;
  const void **v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  const void ***v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v8 = sub_1000B40D8((uint64_t)v37, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = (unint64_t)v13[1];
            if (v15 == v9)
            {
              if ((sub_1000790EC((const void ***)v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v13 = (const void **)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if ((sub_1000790EC((const void ***)v13 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (const void **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v16 = (const void ***)(a1 + 16);
  v17 = (const void **)operator new(0x38uLL);
  v13 = v17;
  v37[0] = v17;
  v37[1] = a1 + 16;
  *v17 = 0;
  v17[1] = (const void *)v9;
  v18 = *a4;
  v17[2] = **a4;
  v19 = (unint64_t *)v18[1];
  v17[3] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v17[4] = 0;
  v17[5] = 0;
  v17[6] = 0;
  v38 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v10 && (float)(v23 * (float)v10) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v25)
    {
LABEL_29:
      *v13 = *v25;
LABEL_64:
      *v25 = v13;
      goto LABEL_65;
    }
  }
  else
  {
    v26 = 1;
    if (v10 >= 3)
      v26 = (v10 & (v10 - 1)) != 0;
    v27 = v26 | (2 * v10);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v34 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v4 = v9;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v9);
        if (v25)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v34 & v9;
      v24 = *(_QWORD *)a1;
      v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v34 & v9));
      if (v25)
        goto LABEL_29;
    }
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*v13)
  {
    v35 = *((_QWORD *)*v13 + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10)
        v35 %= v10;
    }
    else
    {
      v35 &= v10 - 1;
    }
    v25 = (const void ***)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_100269464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_10023DD68(v11, v10);
  _Unwind_Resume(a1);
}

const void **sub_100269480(uint64_t a1, uint64_t ***a2, const void **a3, const void **a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void ***v13;
  const void **v14;
  unint64_t v15;
  unint64_t v16;
  const void ***v17;
  const void **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  const void ***v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v9 = sub_1000B40D8((uint64_t)v37, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (const void **)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if ((sub_1000790EC((const void ***)v14 + 2, (unsigned __int8 ***)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (const void ***)(a1 + 16);
  v18 = (const void **)operator new(0x28uLL);
  v14 = v18;
  v37[0] = v18;
  v37[1] = a1 + 16;
  *v18 = 0;
  v18[1] = (const void *)v10;
  v19 = (unint64_t *)a3[1];
  v18[2] = *a3;
  v18[3] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v18[4] = *a4;
  v38 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v11 && (float)(v23 * (float)v11) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v4);
    if (v25)
    {
LABEL_29:
      *v14 = *v25;
LABEL_64:
      *v25 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_40:
        sub_100005DD8(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v34 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v25)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v24 = *(_QWORD *)a1;
        v25 = *(const void ****)(*(_QWORD *)a1 + 8 * v10);
        if (v25)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v34 & v10;
      v24 = *(_QWORD *)a1;
      v25 = *(const void ****)(*(_QWORD *)a1 + 8 * (v34 & v10));
      if (v25)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v24 + 8 * v4) = v17;
  if (*v14)
  {
    v35 = *((_QWORD *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v25 = (const void ***)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1002697D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100213954((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002697E8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100269844()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

__n128 sub_1002698A0(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result;

  a1->n128_u64[0] = (unint64_t)off_1003FFF00;
  a1->n128_u64[1] = a3;
  result = *a2;
  a1[2].n128_u64[0] = a2[1].n128_u64[0];
  a1[1] = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[2].n128_u32[2] = 0;
  return result;
}

BOOL sub_1002698CC(uint64_t a1, const void *a2, int a3)
{
  int v5;
  NSObject *v6;
  int v7;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v5 = sqlite3_blob_write(*(sqlite3_blob **)(a1 + 8), a2, a3, *(_DWORD *)(a1 + 40));
  if (!v5)
  {
    *(_DWORD *)(a1 + 40) += a3;
    return v5 == 0;
  }
  if (qword_100417F08 != -1)
  {
    dispatch_once(&qword_100417F08, &stru_1003FFF98);
    v6 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
      return v5 == 0;
    goto LABEL_4;
  }
  v6 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_ERROR))
  {
LABEL_4:
    v7 = *(_DWORD *)(a1 + 40);
    v9[0] = 67109632;
    v9[1] = a3;
    v10 = 1024;
    v11 = v7;
    v12 = 1024;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to write blob of size %d at offset %d: %d", (uint8_t *)v9, 0x14u);
  }
  return v5 == 0;
}

uint64_t sub_1002699F8(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  if ((int)(v3 + a2) <= v2)
    v4 = a2;
  else
    v4 = (v2 - v3);
  *(_DWORD *)(a1 + 20) = v4 + v3;
  return v4;
}

void sub_100269A1C(void **this)
{
  wireless_diagnostics::google::protobuf::io::CopyingOutputStream *v1;

  v1 = (wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this);
}

void sub_100269A5C(void **this)
{
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this);
  operator delete();
}

void sub_100269AA4(wireless_diagnostics::google::protobuf::io::CopyingInputStream *a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream(a1);
  operator delete();
}

void sub_100269AC8(id a1)
{
  qword_100417F10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

uint64_t sub_100269AF4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100269B50()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_100269BAC()
{
  operator new();
}

void sub_100269C84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  operator delete();
}

void sub_100269CD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100400078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100269CE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100400078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100269D10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1004000C8;
  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 159) & 0x80000000) == 0)
        return sub_10000A2A0(a1);
LABEL_9:
      operator delete(*(void **)(a1 + 136));
      return sub_10000A2A0(a1);
    }
  }
  if (*(char *)(a1 + 159) < 0)
    goto LABEL_9;
  return sub_10000A2A0(a1);
}

void sub_100269D9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1004000C8;
  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_7:
      sub_10000A2A0(a1);
      operator delete();
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 136));
  goto LABEL_7;
}

uint64_t *sub_100269E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 __p;
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[9];
  _OWORD v97[18];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[9];
  _OWORD v103[18];
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  uint64_t v109;

  v109 = a2;
  sub_10027FB4C(v108, *a3);
  a1 += 136;
  sub_1000F7C70(a1, (uint64_t)v108, (uint64_t)&v65);
  sub_1000F7DD4(a1, (uint64_t)&v34);
  v7 = v65;
  v8 = v66;
  v65 = 0u;
  v66 = 0u;
  v96[0] = v7;
  v96[1] = v8;
  v9 = v67;
  v10 = v68;
  v67 = 0u;
  v68 = 0u;
  v96[2] = v9;
  v96[3] = v10;
  v11 = v69;
  v12 = v70;
  v69 = 0u;
  v70 = 0u;
  v96[4] = v11;
  v96[5] = v12;
  v13 = v71;
  v14 = v72;
  v71 = 0u;
  v72 = 0u;
  v96[6] = v13;
  v96[7] = v14;
  v96[8] = v73;
  v97[0] = v74;
  v73 = 0u;
  v74 = 0u;
  v97[1] = v75;
  v97[2] = v76;
  v75 = 0u;
  v76 = 0u;
  v97[3] = v77;
  v97[4] = v78;
  v77 = 0u;
  v78 = 0u;
  v97[5] = v79;
  v97[6] = v80;
  v79 = 0u;
  v80 = 0u;
  v97[7] = v81;
  v97[8] = v82;
  v81 = 0u;
  v82 = 0u;
  v97[9] = v83;
  v97[10] = v84;
  v83 = 0u;
  v84 = 0u;
  v97[11] = v85;
  v97[12] = v86;
  v85 = 0u;
  v86 = 0u;
  v97[13] = v87;
  v97[14] = v88;
  v87 = 0u;
  v88 = 0u;
  v97[15] = v89;
  v97[16] = v90;
  v89 = 0u;
  v90 = 0u;
  v97[17] = v91;
  v91 = 0u;
  v99 = __p;
  v98 = v92;
  v100 = v94;
  __p = 0u;
  v94 = 0;
  v15 = v34;
  v16 = v35;
  v34 = 0u;
  v35 = 0u;
  v102[0] = v15;
  v102[1] = v16;
  v17 = v36;
  v18 = v37;
  v36 = 0u;
  v37 = 0u;
  v102[2] = v17;
  v102[3] = v18;
  v19 = v38;
  v20 = v39;
  v38 = 0u;
  v39 = 0u;
  v102[4] = v19;
  v102[5] = v20;
  v21 = v40;
  v22 = v41;
  v40 = 0u;
  v41 = 0u;
  v102[6] = v21;
  v102[7] = v22;
  v23 = v43;
  v102[8] = v42;
  v101 = v95;
  v104 = v61;
  v42 = 0u;
  v43 = 0u;
  v24 = v45;
  v103[0] = v23;
  v103[1] = v44;
  v44 = 0u;
  v45 = 0u;
  v25 = v47;
  v103[2] = v24;
  v103[3] = v46;
  v46 = 0u;
  v47 = 0u;
  v26 = v49;
  v103[4] = v25;
  v103[5] = v48;
  v48 = 0u;
  v49 = 0u;
  v27 = v51;
  v103[6] = v26;
  v103[7] = v50;
  v50 = 0u;
  v51 = 0u;
  v28 = v53;
  v103[8] = v27;
  v103[9] = v52;
  v52 = 0u;
  v53 = 0u;
  v29 = v55;
  v103[10] = v28;
  v103[11] = v54;
  v54 = 0u;
  v55 = 0u;
  v30 = v57;
  v103[12] = v29;
  v103[13] = v56;
  v56 = 0u;
  v57 = 0u;
  v31 = v59;
  v103[14] = v30;
  v103[15] = v58;
  v58 = 0u;
  v59 = 0u;
  v103[16] = v31;
  v103[17] = v60;
  v60 = 0u;
  v106 = v63;
  *(_OWORD *)v105 = v62;
  v62 = 0u;
  v63 = 0;
  v107 = v64;
  sub_1000FE64C(&v43);
  sub_1000FEB40((uint64_t *)&v34);
  if (SHIBYTE(v94) < 0)
    operator delete((void *)__p);
  sub_1000FE64C(&v74);
  sub_1000FEB40((uint64_t *)&v65);
  v32 = operator new(0x78uLL);
  v32[1] = 0;
  v32[2] = 0;
  *v32 = off_100400078;
  sub_10026A240((uint64_t)&v65, (uint64_t)(v32 + 3), (uint64_t *)v96, &v109, (uint64_t)a3);
  *a4 = v32 + 3;
  a4[1] = v32;
  if (SHIBYTE(v106) < 0)
  {
    operator delete(v105[0]);
    sub_1000FE64C(v103);
    sub_1000FEB40((uint64_t *)v102);
    if ((SHIBYTE(v100) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    operator delete((void *)v99);
    goto LABEL_5;
  }
  sub_1000FE64C(v103);
  sub_1000FEB40((uint64_t *)v102);
  if (SHIBYTE(v100) < 0)
    goto LABEL_7;
LABEL_5:
  sub_1000FE64C(v97);
  return sub_1000FEB40((uint64_t *)v96);
}

void sub_10026A168(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  sub_10026A1B4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_10026A188(_Unwind_Exception *a1)
{
  sub_10026A1B4((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_10026A19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  sub_1000FD248((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t *sub_10026A1B4(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 472);
  if (*(char *)(a1 + 935) < 0)
  {
    operator delete(*(void **)(a1 + 912));
    sub_1000FE64C((_QWORD *)(a1 + 616));
    sub_1000FEB40(v2);
    if ((*(char *)(a1 + 463) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 440));
    sub_1000FE64C((_QWORD *)(a1 + 144));
    return sub_1000FEB40((uint64_t *)a1);
  }
  sub_1000FE64C((_QWORD *)(a1 + 616));
  sub_1000FEB40(v2);
  if (*(char *)(a1 + 463) < 0)
    goto LABEL_6;
LABEL_3:
  sub_1000FE64C((_QWORD *)(a1 + 144));
  return sub_1000FEB40((uint64_t *)a1);
}

uint64_t *sub_10026A240(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  __n128 v9;
  uint64_t v11[18];
  void *v12[39];
  char v13;
  uint64_t v14[18];
  void *v15[39];
  char v16;

  sub_100222150((uint64_t)v11, a3);
  v9 = sub_100222150((uint64_t)v14, a3 + 59);
  sub_10026FA50(a2, v11, *a4, a5, v9);
  if (v16 < 0)
    operator delete(v15[37]);
  sub_1000FE64C(v15);
  sub_1000FEB40(v14);
  if (v13 < 0)
    operator delete(v12[37]);
  sub_1000FE64C(v12);
  return sub_1000FEB40(v11);
}

void sub_10026A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026A1B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A30C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026A368()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10026A3C4()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_10026A3D8(int *a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  std::string *v10;
  char *v11;
  __int128 *v12;
  std::string::size_type *v13;
  unint64_t v14;
  __int128 v15;
  std::string::value_type v16;
  int v17;
  char *v18;
  char v19;
  int v20;
  char v21;
  _BYTE v22[6];
  char v23;
  _BYTE *v24;
  char *v25;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v24 = v22;
  v25 = &v23;
  v3 = *a1;
  if (*a1 >= 0)
    v4 = *a1;
  else
    v4 = -v3;
  v17 = v4;
  v18 = &v23;
  v19 = 48;
  v20 = 48;
  v5 = sub_10000EDD4((uint64_t)&v17);
  v6 = (char *)v5;
  if ((v3 & 0x80000000) == 0)
  {
    v24 = (_BYTE *)v5;
    v25 = &v23;
    v7 = (unint64_t)(&v23 - v5);
    v8 = a2;
    if ((unint64_t)(&v23 - v5) < 0x17)
      goto LABEL_6;
LABEL_14:
    std::string::__grow_by(a2, 0x16uLL, v7 - 22, 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v6 != &v23)
      goto LABEL_7;
LABEL_18:
    v10 = v8;
    goto LABEL_21;
  }
  *(_BYTE *)(v5 - 1) = 45;
  v6 = (char *)(v5 - 1);
  v24 = (_BYTE *)(v5 - 1);
  v25 = &v23;
  v7 = (unint64_t)(&v23 - v5 + 1);
  v8 = a2;
  if (v7 >= 0x17)
    goto LABEL_14;
LABEL_6:
  if (v6 == &v23)
    goto LABEL_18;
LABEL_7:
  v9 = &v21 - v6 + 23;
  if (v9 < 0x20 || (unint64_t)((char *)v8 - v6) < 0x20)
  {
    v10 = v8;
    v11 = v6;
  }
  else
  {
    v10 = (std::string *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    v11 = &v6[v9 & 0xFFFFFFFFFFFFFFE0];
    v12 = (__int128 *)(v6 + 16);
    v13 = &v8->__r_.__value_.__r.__words[2];
    v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *((_OWORD *)v13 - 1) = *(v12 - 1);
      *(_OWORD *)v13 = v15;
      v12 += 2;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_21;
  }
  do
  {
    v16 = *v11++;
    v10->__r_.__value_.__s.__data_[0] = v16;
    v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11 != &v23);
LABEL_21:
  v10->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = v7;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
}

void sub_10026A598(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026A5B4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026A610()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10026A66C()
{
  sub_10009EEB4();
}

uint64_t sub_10026A6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float *v5;

  v5 = *(float **)(*(_QWORD *)(a1 + 8) + 240);
  if (!v5)
    v5 = *(float **)(qword_10041B018 + 240);
  return sub_100049158(a2, a3, (float)(v5[4] + v5[4]), v5[5], v5[6], v5[7]);
}

double sub_10026A6F4()
{
  return 0.0593040887;
}

uint64_t sub_10026A700(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 193);
}

uint64_t sub_10026A70C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(unsigned __int8 *)(v1 + 24);
}

double sub_10026A738(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(float *)(v1 + 16);
}

double sub_10026A76C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(float *)(v1 + 32);
}

double sub_10026A7A0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(float *)(v1 + 36);
}

float sub_10026A7D4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(float *)(v1 + 20);
}

float sub_10026A800(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(float *)(v1 + 28);
}

uint64_t sub_10026A82C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(unsigned __int8 *)(v1 + 26);
}

uint64_t sub_10026A858(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 232);
  return *(unsigned __int8 *)(v1 + 27);
}

float sub_10026A884(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 272);
  return *(float *)(v1 + 28);
}

uint64_t sub_10026A8B0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 272);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 272);
  return *(unsigned __int8 *)(v1 + 32);
}

float sub_10026A8DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 16);
}

float sub_10026A908(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 20);
}

float sub_10026A934(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 36);
}

float sub_10026A960(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 52);
}

float sub_10026A98C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 208);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 208);
  return *(float *)(v1 + 48);
}

float sub_10026A9B8(uint64_t a1, double a2)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 228) * a2;
}

float sub_10026A9D0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 48);
  return *(float *)(v1 + 24);
}

uint64_t sub_10026A9FC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 48);
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

float sub_10026AA38(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 48);
  return *(float *)(v1 + 20);
}

uint64_t sub_10026AA64(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 88);
  return (uint64_t)(*(float *)(v1 + 20) * 1000000000.0);
}

float sub_10026AAA0(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 196);
}

float sub_10026AAAC(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 120);
}

double sub_10026AAB8(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 124);
}

double sub_10026AAC8(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 128);
}

double sub_10026AAD8(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 132);
}

double sub_10026AAE8(uint64_t a1)
{
  return *(float *)(*(_QWORD *)(a1 + 8) + 224);
}

uint64_t sub_10026AAF8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 256);
  if (!result)
    return *(_QWORD *)(qword_10041B018 + 256);
  return result;
}

uint64_t sub_10026AB1C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 264);
  return *(_QWORD *)(v1 + 16);
}

uint64_t sub_10026AB48(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 264);
  return *(_QWORD *)(v1 + 24);
}

uint64_t sub_10026AB74(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 264);
  return *(_QWORD *)(v1 + 32);
}

uint64_t sub_10026ABA0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 264);
  if (!v1)
    v1 = *(_QWORD *)(qword_10041B018 + 264);
  return *(_QWORD *)(v1 + 40);
}

void sub_10026ABCC(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_10026ABF8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026AC28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10026AC44(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_10026AC78()
{
  sub_10026AD5C();
}

uint64_t sub_10026AC8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  v1 = *a1;
  sub_10026AEB0(*a1);
  return v1;
}

uint64_t sub_10026ACAC@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X8>)
{
  return sub_10026AF30(a1, a2);
}

uint64_t sub_10026ACC4@<X0>(double *a1@<X8>)
{
  double v1;
  double v2;
  double v3;

  v1 = *a1;
  sub_10026B030(*a1);
  v2 = ceil(v1);
  v3 = floor(v1);
  if (v1 >= 0.0)
    return v3;
  return v2;
}

void sub_10026ACF8(_DWORD *a1@<X8>)
{
  std::bad_cast *exception;
  std::bad_cast *v2;

  if ((*a1 & 0x80000000) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v2 = sub_10016A694(exception);
  }
  JUMPOUT(0x10026AC98);
}

void sub_10026AD24()
{
  sub_10026B0B8();
}

void sub_10026AD40()
{
  sub_10026B20C();
}

void sub_10026AD5C()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6A0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(boost::none_t) const [T = unsigned int]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_10026AE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026AE68);
}

void sub_10026AE9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026AEB0(uint64_t result)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (result > 0xFFFFFFFFLL);
  if (result < 0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
  return result;
}

uint64_t sub_10026AF30(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v9;
  std::bad_cast v10;
  unsigned int *v11;
  void *v12;
  unsigned __int8 *v13;

  v9 = 0;
  v2 = a2[23];
  v3 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  else
    v3 = a2;
  if (!v2)
    goto LABEL_13;
  v4 = &v3[v2];
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    ++v3;
  LOBYTE(v10.__vftable) = 0;
  HIDWORD(v10.__vftable) = 1;
  v11 = &v9;
  v12 = v3;
  v13 = v4;
  v6 = sub_10016A844((uint64_t)&v10);
  if (v5 == 45)
  {
    v7 = -v9;
    v9 = -v9;
    if ((v6 & 1) != 0)
      return v7;
LABEL_13:
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v10);
  }
  if (!v6)
    goto LABEL_13;
  return v9;
}

void sub_10026B01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::bad_cast a11)
{
  std::bad_cast::~bad_cast(&a11);
  _Unwind_Resume(a1);
}

void sub_10026B030(double a1)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (a1 >= 4294967300.0);
  if (a1 <= -1.0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
}

void sub_10026B0B8()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(const F &) const [T = unsigned int, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10026B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026B1C4);
}

void sub_10026B1F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026B20C()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(const F &) const [T = unsigned int, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10026B2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026B328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026B318);
}

void sub_10026B34C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026B360(int *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  std::string *v5;
  unint64_t v6;
  std::string *v7;
  char *v8;
  __int128 *v9;
  std::string::size_type *v10;
  unint64_t v11;
  __int128 v12;
  std::string::value_type v13;
  int v14;
  _BYTE *v15;
  char v16;
  int v17;
  _BYTE v19[6];
  _BYTE v20[2];
  _BYTE *v21;
  _BYTE *v22;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v21 = v19;
  v22 = v20;
  v14 = *a1;
  v15 = v20;
  v16 = 48;
  v17 = 48;
  v3 = sub_10000EDD4((uint64_t)&v14);
  v21 = (_BYTE *)v3;
  v22 = v20;
  v4 = &v20[-v3];
  v5 = a2;
  if ((unint64_t)&v20[-v3] >= 0x17)
  {
    std::string::__grow_by(a2, 0x16uLL, (std::string::size_type)(v4 - 22), 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((_BYTE *)v3 == v20)
  {
    v7 = v5;
  }
  else
  {
    v6 = (unint64_t)&v19[-v3 + 22];
    if (v6 < 0x20 || (unint64_t)v5 - v3 < 0x20)
    {
      v7 = v5;
      v8 = (char *)v3;
    }
    else
    {
      v7 = (std::string *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v8 = (char *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
      v9 = (__int128 *)(v3 + 16);
      v10 = &v5->__r_.__value_.__r.__words[2];
      v11 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = *v9;
        *((_OWORD *)v10 - 1) = *(v9 - 1);
        *(_OWORD *)v10 = v12;
        v9 += 2;
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_15;
    }
    do
    {
      v13 = *v8++;
      v7->__r_.__value_.__s.__data_[0] = v13;
      v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8 != v20);
  }
LABEL_15:
  v7->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  else
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v4 & 0x7F;
}

void sub_10026B4F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10026B50C(uint64_t a1)
{
  __asm { BR              X11 }
}

void sub_10026B53C()
{
  sub_10026B5FC();
}

uint64_t sub_10026B54C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  std::bad_cast *exception;
  std::bad_cast *v3;

  result = *a1;
  if (*a1 < 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A694(exception);
  }
  return result;
}

uint64_t sub_10026B5B8@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X8>)
{
  return sub_10026B750(a1, a2);
}

void sub_10026B5CC()
{
  sub_10026BDA0();
}

void sub_10026B5E4()
{
  sub_10026BEF4();
}

void sub_10026B5FC()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6A0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(boost::none_t) const [T = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_10026B6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026B708);
}

void sub_10026B73C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B750(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  std::bad_cast v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  v9 = 0;
  v2 = a2[23];
  v3 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  else
    v3 = a2;
  if (!v2)
    goto LABEL_13;
  v4 = &v3[v2];
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    ++v3;
  LOBYTE(v10.__vftable) = 0;
  v11 = 1;
  v12 = &v9;
  v13 = v3;
  v14 = v4;
  v6 = sub_10026B84C((uint64_t)&v10);
  if (v5 == 45)
  {
    v7 = -v9;
    v9 = -v9;
    if ((v6 & 1) != 0)
      return v7;
LABEL_13:
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
    sub_1000F9804((uint64_t)&v10);
  }
  if (!v6)
    goto LABEL_13;
  return v9;
}

void sub_10026B838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  std::bad_cast::~bad_cast(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B84C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  const std::locale *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  char *v22;
  unsigned __int8 v23;
  _BYTE *p_p;
  char v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  std::locale v49;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v1 - 1;
  v2 = *(_QWORD **)(a1 + 16);
  *v2 = 0;
  if (*(_QWORD *)(a1 + 24) > (unint64_t)(v1 - 1))
    return 0;
  v3 = *(unsigned __int8 *)(v1 - 1);
  if ((v3 - 58) < 0xFFFFFFF6)
    return 0;
  *v2 = (v3 - 48);
  *(_QWORD *)(a1 + 32) = v1 - 2;
  std::locale::locale(&v49);
  v6 = std::locale::classic();
  if (std::locale::operator==(&v49, v6))
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      v12 = *(_BYTE *)a1 != 0;
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 8);
        v12 |= v15 > 0x1999999999999999;
        *(_BYTE *)a1 = v12 & 1;
        v16 = 10 * v15;
        *(_QWORD *)(a1 + 8) = 10 * v15;
        v17 = *v8;
        if ((v17 - 58) < 0xF6u)
          break;
        v18 = v17 - 48;
        v19 = v16 * (v17 - 48);
        if ((_DWORD)v18)
        {
          if ((v12 & 1) != 0)
            break;
          if (!is_mul_ok(v18, v16))
            break;
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
          if (__CFADD__(v19, *v13))
            break;
        }
        else
        {
          v13 = *(_QWORD **)(a1 + 16);
          v14 = *v13;
        }
        *v13 = v14 + v19;
        *(_QWORD *)(a1 + 32) = --v8;
        if ((unint64_t)v8 < v7)
          goto LABEL_6;
      }
      v9 = 0;
    }
    else
    {
LABEL_6:
      v9 = 1;
    }
    goto LABEL_66;
  }
  v10 = std::locale::use_facet(&v49, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v10->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v48 < 0)
  {
    v11 = v47;
    if (!v47 || *(char *)__p <= 0)
    {
LABEL_27:
      v26 = *(_QWORD *)(a1 + 24);
      v27 = *(char **)(a1 + 32);
      if ((unint64_t)v27 >= v26)
      {
        v38 = *(_BYTE *)a1 != 0;
        while (1)
        {
          v41 = *(_QWORD *)(a1 + 8);
          v38 |= v41 > 0x1999999999999999;
          *(_BYTE *)a1 = v38 & 1;
          v42 = 10 * v41;
          *(_QWORD *)(a1 + 8) = 10 * v41;
          v43 = *v27;
          if ((v43 - 58) < 0xF6u)
            break;
          v44 = v43 - 48;
          v45 = v42 * (v43 - 48);
          if ((_DWORD)v44)
          {
            if ((v38 & 1) != 0)
              break;
            if (!is_mul_ok(v44, v42))
              break;
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
            if (__CFADD__(v45, *v39))
              break;
          }
          else
          {
            v39 = *(_QWORD **)(a1 + 16);
            v40 = *v39;
          }
          *v39 = v40 + v45;
          *(_QWORD *)(a1 + 32) = --v27;
          if ((unint64_t)v27 < v26)
            goto LABEL_28;
        }
LABEL_64:
        v9 = 0;
        if (((char)v48 & 0x80000000) == 0)
          goto LABEL_66;
        goto LABEL_65;
      }
      goto LABEL_28;
    }
  }
  else
  {
    v11 = v48;
    if (!v48 || (char)__p <= 0)
      goto LABEL_27;
  }
  v20 = ((uint64_t (*)(const std::locale::facet *))v10->__vftable[1].~facet_0)(v10);
  v21 = *(char **)(a1 + 24);
  v22 = *(char **)(a1 + 32);
  if (v22 >= v21)
  {
    v23 = 0;
    p_p = __p;
    if ((v48 & 0x80u) == 0)
      p_p = &__p;
    v25 = *p_p - 1;
    while (1)
    {
      while (v25)
      {
        v30 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)a1)
          v31 = 1;
        else
          v31 = v30 > 0x1999999999999999;
        v32 = v31;
        *(_BYTE *)a1 = v32;
        v33 = 10 * v30;
        *(_QWORD *)(a1 + 8) = 10 * v30;
        v34 = *v22;
        if ((v34 - 58) < 0xF6u)
          goto LABEL_64;
        v35 = v34 - 48;
        v36 = v33 * (v34 - 48);
        if ((_DWORD)v35)
        {
          if ((v32 & 1) != 0)
            goto LABEL_64;
          if (!is_mul_ok(v35, v33))
            goto LABEL_64;
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
          if (__CFADD__(v36, *v28))
            goto LABEL_64;
        }
        else
        {
          v28 = *(_QWORD **)(a1 + 16);
          v29 = *v28;
        }
        *v28 = v29 + v36;
        --v25;
        *(_QWORD *)(a1 + 32) = --v22;
        if (v22 < v21)
          goto LABEL_28;
      }
      if (*v22 != v20)
        break;
      if (v22 == v21)
        goto LABEL_64;
      if (v11 - 1 > (unint64_t)v23)
        ++v23;
      if ((v48 & 0x80u) == 0)
        v37 = &__p;
      else
        v37 = __p;
      v25 = v37[v23];
      *(_QWORD *)(a1 + 32) = --v22;
      if (v22 < v21)
        goto LABEL_28;
    }
    v9 = sub_10026BC60(a1);
    if (((char)v48 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_28:
  v9 = 1;
  if ((char)v48 < 0)
LABEL_65:
    operator delete(__p);
LABEL_66:
  std::locale::~locale(&v49);
  return v9;
}

void sub_10026BC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10026BC60(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v4 |= v7 > 0x1999999999999999;
    *(_BYTE *)a1 = v4 & 1;
    v8 = 10 * v7;
    *(_QWORD *)(a1 + 8) = 10 * v7;
    v9 = *v2;
    if ((v9 - 58) < 0xF6u)
      break;
    v10 = v9 - 48;
    v11 = v8 * (v9 - 48);
    if ((_DWORD)v10)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (!is_mul_ok(v10, v8))
        return 0;
      v5 = *(_QWORD **)(a1 + 16);
      v6 = *v5;
      if (__CFADD__(v11, *v5))
        return 0;
    }
    else
    {
      v5 = *(_QWORD **)(a1 + 16);
      v6 = *v5;
    }
    *v5 = v6 + v11;
    *(_QWORD *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

void sub_10026BD18(double a1)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (a1 >= 1.84467441e19);
  if (a1 <= -1.0)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
}

void sub_10026BDA0()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(const F &) const [T = unsigned long, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10026BE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026BEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026BEACLL);
}

void sub_10026BEE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026BEF4()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_10038A6B0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_1003EF830;
  sub_10018D04C((uint64_t)v0);
  sub_1000F2F7C(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(const F &) const [T = unsigned long, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10026BFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026C010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026C000);
}

void sub_10026C034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_10026C048@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026C078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026C094()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026C0F0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_10026C14C(double *a1, uint64_t a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0.0;
  if (v5 != 0.0)
  {
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + -0.5;
    v8 = log(fabs(v7) * -2.0 + 1.0);
    if (fabs(v8) != INFINITY)
      v6 = v8 * (v5 / -1.41421356 * (double)((v7 > 0.0) - (v7 < 0.0)));
  }
  return v4 * a3 + v6;
}

double sub_10026C1F8(double *a1, double a2)
{
  return *a1 * a2;
}

BOOL sub_10026C204(double *a1)
{
  uint64_t v1;
  int v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;

  v1 = *(unsigned __int8 *)a1;
  if (!*(_BYTE *)a1)
    return v1;
  v2 = (_BYTE)a1[11] & 0x21;
  if (((_BYTE)a1[11] & 0x40) == 0)
  {
    v1 = 0;
    if (!*((_BYTE *)a1 + 96) || v2 != 33)
      return v1;
    if ((~*((unsigned __int8 *)a1 + 184) & 0x21) == 0)
    {
      v3 = a1[9];
      v4 = a1[21];
      v5 = 0.0;
      if (v3 != v4)
        v5 = (a1[5] - a1[17]) / (v3 - v4);
      return v5 > 0.0;
    }
    return 0;
  }
  if (v2 == 33 && *((_BYTE *)a1 + 96) != 0 && (~*((unsigned __int8 *)a1 + 184) & 0x21) == 0)
  {
    v7 = a1[9];
    v8 = a1[21];
    if (v7 == v8 || (a1[5] - a1[17]) / (v7 - v8) == 0.0)
      return 0;
  }
  v5 = 1.0 / a1[10];
  return v5 > 0.0;
}

double sub_10026C2D8(uint64_t a1)
{
  double result;
  double v2;
  double v3;

  result = 0.0;
  if (*(_BYTE *)a1)
  {
    if ((*(_BYTE *)(a1 + 88) & 0x40) != 0)
    {
      return 1.0 / *(double *)(a1 + 80);
    }
    else if (*(_BYTE *)(a1 + 96)
           && (*(_BYTE *)(a1 + 88) & 0x21) == 0x21
           && (~*(unsigned __int8 *)(a1 + 184) & 0x21) == 0)
    {
      v2 = *(double *)(a1 + 72);
      v3 = *(double *)(a1 + 168);
      if (v2 != v3)
        return (*(double *)(a1 + 40) - *(double *)(a1 + 136)) / (v2 - v3);
    }
  }
  return result;
}

void sub_10026C34C(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;

  if (!a1[96])
  {
    v4 = (uint64_t)(a1 + 8);
    if (!*a1)
      goto LABEL_9;
    sub_1001A0F8C((uint64_t)(a1 + 104), v4);
    a1[96] = 1;
    v4 = (uint64_t)(a1 + 8);
    if (!*a1)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (*a1)
  {
    sub_1001A0FE0((uint64_t)(a1 + 104), (uint64_t)(a1 + 8));
    v4 = (uint64_t)(a1 + 8);
    if (!*a1)
      goto LABEL_9;
LABEL_7:
    sub_1001A0FE0(v4, a2);
    return;
  }
  nullsub_108(a1 + 104);
  a1[96] = 0;
  v4 = (uint64_t)(a1 + 8);
  if (*a1)
    goto LABEL_7;
LABEL_9:
  sub_1001A0F8C(v4, a2);
  *a1 = 1;
}

uint64_t sub_10026C3FC(uint64_t a1, _DWORD *a2, _DWORD *a3, double *a4)
{
  _DWORD *v5;
  _BYTE v7[24];
  std::string v8;
  std::runtime_error v9;

  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *a3;
  sub_100303340((_QWORD *)(a1 + 8), a4);
  if (!*(_DWORD *)(a1 + 12) || !*v5)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000D5048(&v8, "Malformed inner grid cells! What's going on here?");
    std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_100400330;
    sub_10018D04C((uint64_t)v7);
    sub_10026C54C(&v9, (uint64_t)"InnerGridCells::IndexOffset::IndexOffset(COLS, ROWS, const ArrayDims &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/math/inner_grid_cells.cpp", 19, (uint64_t)v7);
  }
  return a1;
}

void sub_10026C4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026C54C(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_1004002E8;
  v13 = off_100400310;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_100400330;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_100400248;
  v18[0] = off_100400280;
  v21 = &off_1004002B8;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_10026C9C0();
}

void sub_10026C798(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_10026C7AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10026C7C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10026C810(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_10026C834(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_10026C88C(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v4;
  int v5;

  v2 = *(_DWORD *)(a2 + 20) - a1[1];
  v5 = *(_DWORD *)(a2 + 16) - *a1;
  v4 = v2;
  return sub_10030334C(a1 + 2, &v5, &v4);
}

uint64_t sub_10026C8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100400330;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_100400248;
  *(_QWORD *)(a1 + 16) = off_100400280;
  *(_QWORD *)(a1 + 56) = &off_1004002B8;
  return a1;
}

void sub_10026C95C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_10026C970(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10026C9C0()
{
  operator new();
}

void sub_10026CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026CBFC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_10026CC18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10026CC2C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10026CC7C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10026CCE0()
{
  operator new();
}

void sub_10026CDB4()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_10026CDF0(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_10026C8C8((uint64_t)exception, a1);
}

void sub_10026CE2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026CE40(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10026CE90(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10026CEF4()
{
  sub_10026CCE0();
}

void sub_10026CF04(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10026C8C8((uint64_t)exception, v1);
}

void sub_10026CF48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10026CF5C(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_10026CFB4(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_10026D020(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10026D084(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10026D0D4(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10026D138(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_10026D15C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026D1B8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

__n128 sub_10026D214(uint64_t a1, int a2, __n128 *a3)
{
  __n128 result;

  *(_DWORD *)a1 = a2;
  result = *a3;
  *(__n128 *)(a1 + 8) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t sub_10026D228(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 24;
}

uint64_t sub_10026D234()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026D290()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026D2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  BOOL v19;
  int v21;
  int v22;
  int v23;
  int v24;
  void *v25[2];
  void *__p[2];
  char v27;

  *(_QWORD *)a1 = off_100400358;
  v6 = a1 + 8;
  v24 = sub_1001D201C(a2);
  v23 = sub_1002D41AC(a2);
  v22 = sub_1002D41B8(a2);
  v21 = sub_1002D41C4(a2);
  sub_100072950(__p, &v22, &v21);
  sub_10026C888(v6, &v24, &v23, __p);
  *(double *)(a1 + 24) = sub_10023E0A4(a3, a2);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = sub_1000F7018(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_10006CED8((_BYTE *)(a1 + 56), *(void **)v10, *(_QWORD *)(v10 + 8));
  }
  else
  {
    v11 = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)(a1 + 56) = v11;
  }
  *(_QWORD *)(a1 + 80) = 0;
  v12 = sub_1000966BC();
  v13 = v12;
  v14 = atomic_load((unsigned __int8 *)v12 + 20);
  if ((v14 & 1) != 0 || *((_BYTE *)v12 + 16))
  {
    if (*((_BYTE *)v12 + 17))
      goto LABEL_12;
  }
  else
  {
    v15 = sub_1000AC110((uint64_t)v12, (_BYTE *)v12 + 9);
    *((_BYTE *)v13 + 17) = v15;
    *((_BYTE *)v13 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v13 + 20);
    if (v15)
      goto LABEL_12;
  }
  if (*(_DWORD *)(sub_100095C10(a2) + 24) == 1)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v27 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v25);
  }
LABEL_12:
  v16 = sub_100096748();
  v17 = v16;
  v18 = atomic_load((unsigned __int8 *)v16 + 20);
  if ((v18 & 1) != 0 || *((_BYTE *)v16 + 16))
  {
    if (*((_BYTE *)v16 + 17))
      return a1;
  }
  else
  {
    v19 = sub_1000AC110((uint64_t)v16, (_BYTE *)v16 + 9);
    *((_BYTE *)v17 + 17) = v19;
    *((_BYTE *)v17 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v17 + 20);
    if (v19)
      return a1;
  }
  if (*(_DWORD *)(sub_100095C10(a2) + 24) == 2)
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v27 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v25);
  }
  return a1;
}

void sub_10026D544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void **v17;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 79) < 0)
  {
    operator delete(*v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026D5C8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_100400358;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10025876C(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void sub_10026D628(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_100400358;
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10025876C(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  operator delete();
}

BOOL sub_10026D688(uint64_t a1)
{
  int **v1;
  _BOOL8 result;
  int v4;
  int v5;
  NSObject *v6;
  _DWORD v7[2];

  v1 = (int **)(a1 + 80);
  if (*(_QWORD *)(a1 + 80))
    return 1;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v4 = sub_100257510((unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 79), v1);
    if (v4)
      goto LABEL_6;
LABEL_10:
    *(double *)(a1 + 88) = sub_100258748(*(_QWORD *)(a1 + 80));
    return 1;
  }
  v4 = sub_100257510(*(unsigned __int8 **)(a1 + 56), *(_QWORD *)(a1 + 64), v1);
  if (!v4)
    goto LABEL_10;
LABEL_6:
  v5 = v4;
  if (qword_100417ED8 == -1)
  {
    v6 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_8:
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Couldn't deserialize rssi data: %d", (uint8_t *)v7, 8u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_1004003C8);
    v6 = qword_100417EE0;
    result = os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_8;
  }
  return result;
}

BOOL sub_10026D7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  _BOOL8 result;
  double v8;
  int32x2_t v9;
  int64x2_t v10;

  v5 = sub_10026C88C((_DWORD *)(a1 + 8), a2);
  if (v5 == -1)
    return 0;
  v6 = v5;
  result = sub_10026D688(a1);
  if (result)
  {
    v8 = sub_1002586EC(*(_DWORD **)(a1 + 80), v6 % *(_DWORD *)(a1 + 20), v6 / *(_DWORD *)(a1 + 20));
    result = v8 != *(double *)(a1 + 88);
    if (a3)
    {
      v9 = vdup_n_s32(result);
      v10.i64[0] = v9.u32[0];
      v10.i64[1] = v9.u32[1];
      __asm { FMOV            V2.2D, #1.0 }
      *(double *)_Q2.i64 = v8;
      *(int8x16_t *)(a3 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v10, 0x3FuLL)), _Q2, (int8x16_t)xmmword_100395E30);
    }
  }
  return result;
}

void sub_10026D85C()
{
  _BYTE v0[24];
  std::string v1;
  std::runtime_error v2;

  __cxa_allocate_exception(0x40uLL);
  *((_BYTE *)&v1.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v1, "Not ported");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100400330;
  sub_10018D04C((uint64_t)v0);
  sub_10026C54C(&v2, (uint64_t)"virtual BOOL RadiozapNoCertaintyRssiMap::getMapCellBilinear(const HybridCellIndexBilinear &, RssiMapCell *) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/rssi/radiozap_no_certainty_rssi_map.cpp", 108, (uint64_t)v0);
}

void sub_10026D900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void sub_10026D968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10026D958);
}

float sub_10026D98C(uint64_t a1, int a2)
{
  sub_10026D688(a1);
  return sub_1002586EC(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20));
}

float sub_10026D9C8(uint64_t a1, int a2)
{
  BOOL v4;
  float result;

  sub_10026D688(a1);
  v4 = sub_1002586EC(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20)) == *(double *)(a1 + 88);
  result = 1.0;
  if (v4)
    return 0.0;
  return result;
}

uint64_t sub_10026DA14(uint64_t a1)
{
  return a1 + 24;
}

void sub_10026DA1C(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_10026DA48()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026DAA4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double **sub_10026DB00(double **a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  double *v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v33;
  uint64_t v34;
  void *__p[3];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = a3[1] - *a3;
  if (v8)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    if (v9 >> 61)
      sub_1000D02C0();
    v10 = (double *)operator new(0x6666666666666668 * (v8 >> 4));
    v11 = &v10[v9];
    *a1 = v10;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  sub_10026FF40(__p, 0);
  v12 = *a3;
  v13 = a3[1];
  if (v12 != v13)
  {
    v14 = v10;
    v33 = a2;
    v34 = a4;
    do
    {
      while (1)
      {
        sub_100223B40(v12, a4, (uint64_t)__p);
        v15 = (*(double (**)(_QWORD, void **))(*(_QWORD *)*a2 + 24))(*a2, __p);
        v16 = v15;
        if (v14 >= v11)
          break;
        *v14++ = v15;
        a1[1] = v14;
        v12 += 80;
        if (v12 == v13)
          goto LABEL_37;
      }
      v17 = v14 - v10;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_1000D02C0();
      if (((char *)v11 - (char *)v10) >> 2 > v18)
        v18 = ((char *)v11 - (char *)v10) >> 2;
      if ((unint64_t)((char *)v11 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        if (v19 >> 61)
          sub_1000CDEB8();
        v20 = operator new(8 * v19);
        v21 = (double *)&v20[8 * v17];
        *v21 = v16;
        v22 = (uint64_t)(v21 + 1);
        if (v14 == v10)
          goto LABEL_23;
      }
      else
      {
        v20 = 0;
        v21 = (double *)(8 * v17);
        *(double *)(8 * v17) = v15;
        v22 = 8 * v17 + 8;
        if (v14 == v10)
          goto LABEL_23;
      }
      v23 = (char *)(v14 - 1) - (char *)v10;
      if (v23 >= 0x168)
      {
        if (&v20[(char *)v14 - (char *)v10 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[(char *)v14 - (char *)v10 - 8])
        {
          v24 = v14;
        }
        else if ((double *)((char *)v14 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1)
        {
          v24 = v14;
        }
        else if ((unint64_t)((char *)v10 - v20) >= 0x20)
        {
          v26 = (v23 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v24 = &v14[v27 / 0xFFFFFFFFFFFFFFF8];
          v21 = (double *)((char *)v21 - v27);
          v28 = &v20[8 * v17 - 16];
          v29 = v14 - 2;
          v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            *v28 = v31;
            v28 -= 2;
            v29 -= 4;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_23;
        }
        else
        {
          v24 = v14;
        }
      }
      else
      {
        v24 = v14;
      }
      do
      {
        v25 = *((_QWORD *)v24-- - 1);
        *((_QWORD *)v21-- - 1) = v25;
      }
      while (v24 != v10);
LABEL_23:
      v11 = (double *)&v20[8 * v19];
      *a1 = v21;
      a1[1] = (double *)v22;
      a1[2] = v11;
      if (v10)
        operator delete(v10);
      v10 = v21;
      a2 = v33;
      a4 = v34;
      a1[1] = (double *)v22;
      v12 += 80;
      v14 = (double *)v22;
    }
    while (v12 != v13);
  }
LABEL_37:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10026DDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (!*(_QWORD *)v13)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026DE20()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026DE7C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026DED8(unsigned __int8 *a1, unsigned __int8 *a2, int **a3)
{
  int *v5;
  uint64_t result;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  unsigned int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  __int16 v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  uint64_t v149;
  _BOOL4 v150;
  int v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  int v169;
  unsigned __int8 *v170;
  int v171;
  unsigned __int8 *v172;
  int v173;
  _BOOL4 v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  uint64_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unint64_t v182;
  unsigned int v183;
  int v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unint64_t v187;
  unsigned int v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unsigned int v193;
  unsigned __int8 *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  unint64_t v219;
  const char *v220;
  unsigned __int128 v221;
  int8x16_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int *v226;
  const char *v227;
  unint64_t v228;
  int8x8_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned __int8 *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  unint64_t v239;
  uint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  unsigned __int8 *v248;
  unsigned __int8 *v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  int v256;
  int v257;
  int *v258;
  uint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  int v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unsigned int v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  int v275;
  unsigned int v276;
  int v277;
  int v278;
  unsigned __int8 *v279;
  unint64_t v280;
  uint64_t v281;
  _OWORD v282[12];
  uint64_t v283;

  v5 = 0;
  v283 = 0;
  memset(v282, 0, sizeof(v282));
  result = 1;
  if (!a1 || !a2)
    goto LABEL_5;
  v8 = 0;
  v279 = a1;
  v280 = (unint64_t)&a2[(_QWORD)a1];
  v281 = 0;
  result = setjmp((int *)v282 + 1);
  if ((_DWORD)result)
    goto LABEL_4;
  v9 = v282[0];
  if (LODWORD(v282[0]))
  {
    v10 = 2 * v281;
    v281 *= 2;
    v11 = --LODWORD(v282[0]);
    if (v9 <= 4)
    {
      v12 = v279;
      if ((unint64_t)v279 >= v280)
        goto LABEL_303;
      ++v279;
      v10 += (unint64_t)*v12 << 56 >> (v9 - 1);
      v11 = v9 + 7;
    }
    v15 = v10;
    v16 = v11;
  }
  else
  {
    v13 = v279;
    if ((unint64_t)v279 >= v280)
      goto LABEL_303;
    ++v279;
    v14 = v281 + ((unint64_t)*v13 << 56);
    if (v14 < 0)
    {
      v5 = 0;
      result = 5;
      goto LABEL_5;
    }
    v15 = 2 * v14;
    v16 = 7;
  }
  v17 = v15;
  v18 = v15 >> 60;
  v19 = v18;
  v20 = 16 * v17;
  v281 = 16 * v17;
  LODWORD(v282[0]) = v16 - 4;
  if (v16 - 4 >= v18)
  {
    v24 = 16 * v17;
    v25 = v16 - 4;
  }
  else
  {
    v21 = v279;
    if ((unint64_t)v279 >= v280)
      goto LABEL_303;
    v22 = ++v279;
    v23 = ((unint64_t)*v21 << 56 >> (v16 - 4)) + v20;
    v24 = v23;
    v281 = v23;
    v25 = v16 + 4;
    LODWORD(v282[0]) = v16 + 4;
    if ((unint64_t)(v16 - 4) + 8 < v18)
    {
      if ((unint64_t)v22 >= v280)
        goto LABEL_303;
      v279 = v21 + 2;
      v24 = ((unint64_t)v21[1] << 56 >> (v16 + 4)) + v23;
      v25 = v16 + 12;
    }
  }
  v281 = v24 << v18;
  v26 = (v25 - v18);
  LODWORD(v282[0]) = v26;
  if (v26 >= v18)
  {
    v30 = v24 << v18;
LABEL_27:
    v31 = v26;
    goto LABEL_28;
  }
  v27 = v279;
  if ((unint64_t)v279 >= v280)
    goto LABEL_303;
  v28 = ++v279;
  v29 = ((unint64_t)*v27 << 56 >> (v25 - v18)) + (v24 << v18);
  v30 = v29;
  v281 = v29;
  v31 = v26 + 8;
  LODWORD(v282[0]) = v26 + 8;
  if (v26 + 8 < v18)
  {
    if ((unint64_t)v28 >= v280)
      goto LABEL_303;
    v279 = v27 + 2;
    v281 = ((unint64_t)v27[1] << 56 >> (v26 + 8)) + v29;
    LODWORD(v26) = v26 + 16;
    LODWORD(v282[0]) = v26;
    v30 = v281;
    goto LABEL_27;
  }
LABEL_28:
  v281 = v30 << v18;
  v32 = v31 - v18;
  LODWORD(v282[0]) = v31 - v18;
  if ((v31 - v18) > 1)
  {
    v34 = v30 << v18;
    v35 = v31 - v18;
  }
  else
  {
    v33 = v279;
    if ((unint64_t)v279 >= v280)
      goto LABEL_303;
    ++v279;
    v34 = ((unint64_t)*v33 << 56 >> v32) + (v30 << v18);
    v35 = v32 + 8;
  }
  v281 = 4 * v34;
  LODWORD(v282[0]) = v35 - 2;
  v36 = v35 - 2;
  if ((v35 - 2) <= 7)
  {
    v37 = v279;
    if ((unint64_t)v279 < v280)
    {
      ++v279;
      v38 = ((unint64_t)*v37 << 56 >> (v35 - 2)) + 4 * v34;
      v36 = v35 + 6;
      goto LABEL_36;
    }
LABEL_303:
    longjmp((int *)v282 + 1, 3);
  }
  v38 = 4 * v34;
LABEL_36:
  v39 = v24 >> -(char)v18;
  v281 = v38 << 8;
  LODWORD(v282[0]) = v36 - 8;
  result = 9;
  if (v39 < 2)
  {
    v5 = 0;
    goto LABEL_5;
  }
  v40 = v30 >> (64 - v18);
  v5 = 0;
  if (v40 >= 2)
  {
    v41 = v39;
    v42 = v40;
    v43 = (v40 * v39);
    if (v43 > 0x100000)
    {
      v5 = 0;
      result = 9;
      goto LABEL_5;
    }
    v275 = v40;
    v276 = v39;
    v44 = malloc_type_calloc(4 * (v40 * v39) + 20, 1uLL, 0x3BD89D28uLL);
    if (!v44)
    {
      v5 = 0;
      result = 7;
      goto LABEL_5;
    }
    v45 = v44;
    v46 = v34 >> 62;
    v8 = v44;
    *v44 = v41;
    v44[1] = v42;
    v44[3] = v46;
    v44[4] = HIBYTE(v38);
    v44[2] = v19;
    if ((_DWORD)v43)
    {
      if ((_DWORD)v43 == 1)
      {
        v47 = 0;
LABEL_49:
        v50 = v43 - v47;
        v51 = (char *)&v44[v47 + 5] + 3;
        do
        {
          *v51 = 1;
          v51 += 4;
          --v50;
        }
        while (v50);
        goto LABEL_51;
      }
      v47 = v43 & 0xFFFFFFFE;
      v48 = (char *)v44 + 27;
      v49 = v47;
      do
      {
        *(v48 - 4) = 1;
        *v48 = 1;
        v48 += 8;
        v49 -= 2;
      }
      while (v49);
      if ((v43 & 0xFFFFFFFE) != v43)
        goto LABEL_49;
    }
LABEL_51:
    v52 = v281;
    v53 = v279;
    if (LODWORD(v282[0]))
    {
      v54 = v279;
      v55 = 2 * v281;
      v281 *= 2;
      v56 = --LODWORD(v282[0]);
      if ((v52 & 0x8000000000000000) == 0)
      {
LABEL_82:
        sub_10026F6A8(v8);
        v90 = v45 + 5;
        v91 = v279;
        v92 = v281;
        v93 = LODWORD(v282[0]);
        v94 = 0;
        while (1)
        {
          v95 = &v90[v276 * v94];
          v96 = &v90[v276 * (v94 - 1)];
          v97 = v280;
          v98 = 0;
          v99 = v93;
          v100 = v93;
          v101 = v92;
          v102 = v92;
          v103 = v91;
          v104 = v91;
          do
          {
            v117 = v103;
            v112 = v101;
            v110 = v99;
            v116 = v104;
            v119 = &v95[v98];
            if (*((_BYTE *)v119 + 3))
            {
              if (v98)
              {
                v120 = LOWORD(v95[v98 - 1]);
                if (!v94)
                  goto LABEL_125;
              }
              else
              {
                v120 = 0;
                if (!v94)
                  goto LABEL_125;
              }
              v121 = LOWORD(v96[v98]);
              if (v120)
                v122 = v120;
              else
                v122 = LOWORD(v96[v98]);
              if (v120 && LOWORD(v96[v98]))
              {
                v123 = v122 - v121;
                if (v122 - v121 < 0)
                  v123 = v121 - v122;
                v124 = v121 + v122;
                if (v124 < 2)
                  goto LABEL_117;
LABEL_126:
                if (v123 >= 2)
                {
                  if (v123 >= 9)
                  {
                    v179 = v104;
                    v180 = v117;
                    v181 = v117;
                    v182 = v101;
                    v183 = v110;
                    v184 = 0;
                    do
                    {
                      if (v183)
                      {
                        v185 = v179;
                        v186 = v180;
                        v187 = v182;
                        v188 = v183;
                      }
                      else
                      {
                        if ((unint64_t)v181 >= v280)
                          goto LABEL_302;
                        v279 = v181 + 1;
                        v189 = v182 + ((unint64_t)*v181 << 56);
                        v186 = ++v181;
                        v185 = v279;
                        v187 = v189;
                        v188 = 8;
                      }
                      v190 = v187;
                      v191 = 2 * v187;
                      v192 = 2 * v187;
                      v281 = 2 * v187;
                      v193 = v188 - 1;
                      LODWORD(v282[0]) = v188 - 1;
                      if ((v190 & 0x8000000000000000) != 0)
                        break;
                      ++v184;
                      v179 = v185;
                      v180 = v186;
                      v182 = v192;
                      v183 = v188 - 1;
                    }
                    while (v184 != 256);
                    if (v188 <= 2)
                    {
                      if ((unint64_t)v186 >= v97)
                        goto LABEL_302;
                      v279 = v186 + 1;
                      v192 = ((unint64_t)*v186 << 56 >> v193) + v191;
                      v193 = v188 + 7;
                      ++v186;
                      v185 = v279;
                    }
                    v194 = v186;
                    v281 = 4 * v192;
                    v195 = v193 - 2;
                    LODWORD(v282[0]) = v195;
                    v171 = (4 * v184) | (v192 >> 62);
                    v149 = v195;
                    v148 = 4 * v192;
                    v113 = v185;
                    v172 = v194;
                    v196 = v123 & 1;
                    v174 = v196 == 0;
                    if (!(v171 | v196))
                      goto LABEL_154;
                  }
                  else
                  {
                    v154 = v104;
                    v155 = v117;
                    v156 = v117;
                    v157 = v112;
                    v158 = v110;
                    v159 = 0;
                    do
                    {
                      v160 = v157;
                      if (v158)
                      {
                        v161 = v158;
                        v162 = v154;
                        v163 = v155;
                      }
                      else
                      {
                        if ((unint64_t)v156 >= v280)
                          goto LABEL_302;
                        v279 = v156 + 1;
                        v160 = v157 + ((unint64_t)*v156 << 56);
                        v161 = 8;
                        v163 = ++v156;
                        v162 = v279;
                      }
                      v164 = v160;
                      v165 = v163;
                      v166 = 2 * v164;
                      v167 = 2 * v164;
                      v281 = 2 * v164;
                      v168 = v161 - 1;
                      LODWORD(v282[0]) = v168;
                      if (v164 < 0)
                        break;
                      ++v159;
                      v154 = v162;
                      v155 = v165;
                      v157 = 2 * v164;
                      v158 = v168;
                    }
                    while (v159 != 256);
                    if (!v168)
                    {
                      if ((unint64_t)v165 >= v97)
                        goto LABEL_302;
                      v279 = v165 + 1;
                      v167 = v166 + ((unint64_t)*v165 << 56);
                      v168 = 8;
                      ++v165;
                      v162 = v279;
                    }
                    v113 = v162;
                    v281 = 2 * v167;
                    LODWORD(v282[0]) = v168 - 1;
                    v169 = (2 * v159) | (v167 >> 63);
                    v149 = (v168 - 1);
                    v148 = v281;
                    v170 = v165;
                    v171 = v169;
                    v172 = v170;
                    v173 = v123 & 1;
                    v174 = v173 == 0;
                    if (!(v171 | v173))
                      goto LABEL_154;
                  }
                }
                else
                {
                  v138 = v117;
                  v139 = v117;
                  v140 = v112;
                  v141 = v110;
                  v142 = 0;
                  while (1)
                  {
                    v143 = v140;
                    if (v141)
                    {
                      v144 = v104;
                      v145 = v138;
                    }
                    else
                    {
                      if ((unint64_t)v139 >= v280)
                        goto LABEL_302;
                      v279 = v139 + 1;
                      v143 = v140 + ((unint64_t)*v139 << 56);
                      v141 = 8;
                      v145 = ++v139;
                      v144 = v279;
                    }
                    v146 = v143;
                    v147 = v145;
                    v113 = v144;
                    v148 = 2 * v146;
                    v281 = 2 * v146;
                    v149 = (v141 - 1);
                    LODWORD(v282[0]) = v141 - 1;
                    if (v146 < 0)
                      break;
                    ++v142;
                    v104 = v113;
                    v138 = v147;
                    v140 = 2 * v146;
                    --v141;
                    if (v142 == 256)
                    {
                      v150 = (v123 & 1) == 0;
                      v151 = 256;
                      v152 = v147;
                      v153 = 2 * v146;
                      if ((_DWORD)v149)
                        goto LABEL_169;
LABEL_167:
                      if ((unint64_t)v152 < v97)
                      {
                        v279 = v152 + 1;
                        v153 += (unint64_t)*v152 << 56;
                        LODWORD(v149) = 8;
                        ++v152;
                        v113 = v279;
                        goto LABEL_169;
                      }
LABEL_302:
                      longjmp((int *)v282 + 1, 3);
                    }
                  }
                  v175 = v147;
                  v171 = v142;
                  v172 = v175;
                  v176 = v123 & 1;
                  v174 = v176 == 0;
                  if (!(v171 | v176))
                  {
LABEL_154:
                    v177 = 0;
                    v178 = v149;
                    v152 = v172;
                    goto LABEL_173;
                  }
                }
                v152 = v172;
                v150 = v174;
                v151 = v171;
                v153 = v148;
                if (!(_DWORD)v149)
                  goto LABEL_167;
LABEL_169:
                v197 = 2 * v153;
                v281 = 2 * v153;
                LODWORD(v282[0]) = v149 - 1;
                v198 = v151 + !v150;
                if (v153 < 0)
                  v199 = -v151;
                else
                  v199 = v198;
                v178 = (v149 - 1);
                v148 = v197;
                v177 = v199;
LABEL_173:
                v111 = v177 + (v124 >> 1);
                if (v111 < 0)
                {
                  v205 = 4;
                  goto LABEL_190;
                }
                v110 = v178;
                v112 = v148;
                v114 = v152;
LABEL_87:
                v115 = v111;
LABEL_88:
                v102 = v112;
                v100 = v110;
                *(_WORD *)v119 = v115;
                v116 = v113;
                v117 = v114;
                goto LABEL_89;
              }
              if (v98 + 1 >= (unint64_t)v276)
              {
                v125 = 0;
                if (!v98)
                  goto LABEL_109;
              }
              else
              {
                if (v122)
                {
                  v125 = LOWORD(v96[(v98 + 1)]);
                }
                else
                {
                  v122 = LOWORD(v96[(v98 + 1)]);
                  v125 = 0;
                }
                if (!v98)
                {
LABEL_109:
                  v126 = v125;
LABEL_113:
                  v120 = v122;
                  if (!v126)
                    goto LABEL_125;
                  v123 = v122 - v126;
                  if (v122 - v126 < 0)
                    v123 = v126 - v122;
                  v124 = v126 + v122;
                  if (v124 >= 2)
                    goto LABEL_126;
                  goto LABEL_117;
                }
              }
              v126 = v125;
              if (v125)
                goto LABEL_113;
              v120 = LOWORD(v96[(v98 - 1)]);
              v126 = v120;
              if (v122)
                goto LABEL_113;
LABEL_125:
              v123 = 0;
              v124 = 2 * v120;
              if ((2 * v120) >= 2)
                goto LABEL_126;
LABEL_117:
              v127 = v117;
              v128 = v117;
              v129 = v112;
              v130 = v110;
              v131 = 0;
              while (1)
              {
                v132 = v129;
                if (v130)
                {
                  v133 = v130;
                  v108 = v104;
                  v134 = v127;
                }
                else
                {
                  if ((unint64_t)v128 >= v280)
                    goto LABEL_302;
                  v279 = v128 + 1;
                  v132 = v129 + ((unint64_t)*v128 << 56);
                  v133 = 8;
                  v134 = ++v128;
                  v108 = v279;
                }
                v135 = v132;
                v107 = v134;
                v136 = 2 * v132;
                v105 = v136;
                v281 = v136;
                v106 = v133 - 1;
                LODWORD(v282[0]) = v133 - 1;
                if (v135 < 0)
                  break;
                ++v131;
                v104 = v108;
                v127 = v107;
                v129 = v136;
                v130 = v133 - 1;
                if (v131 == 256)
                {
                  v137 = 256;
                  goto LABEL_137;
                }
              }
              v137 = v131;
              if (v131)
              {
LABEL_137:
                if (v133 <= 2)
                {
                  if ((unint64_t)v107 >= v97)
                    goto LABEL_302;
                  v279 = v107 + 1;
                  v105 = ((unint64_t)*v107 << 56 >> (v133 - 1)) + v136;
                  v106 = v133 + 7;
                  ++v107;
                  v108 = v279;
                }
                v109 = v107;
                v281 = 4 * v105;
                v110 = v106 - 2;
                LODWORD(v282[0]) = v106 - 2;
                LOWORD(v111) = (4 * v137) | (v105 >> 62);
                v112 = 4 * v105;
                v113 = v108;
                v114 = v109;
                goto LABEL_87;
              }
              if (v133 == 1)
              {
                if ((unint64_t)v107 >= v97)
                  goto LABEL_302;
                v279 = v107 + 1;
                v201 = v136 + ((unint64_t)*v107 << 56);
                v114 = v107 + 1;
                v113 = v107 + 1;
                v200 = 2 * v201;
                v112 = 2 * v201;
                v281 = 2 * v201;
                v110 = 7;
                LODWORD(v282[0]) = 7;
                if ((v201 & 0x8000000000000000) == 0)
                  goto LABEL_177;
              }
              else
              {
                v113 = v108;
                v114 = v107;
                v200 = 2 * v136;
                v112 = 2 * v105;
                v281 = 2 * v105;
                v110 = v106 - 1;
                LODWORD(v282[0]) = v106 - 1;
                if ((v105 & 0x8000000000000000) == 0)
                {
LABEL_177:
                  v115 = 1;
                  goto LABEL_88;
                }
              }
              if (!(_DWORD)v110)
              {
                if ((unint64_t)v114 >= v97)
                  goto LABEL_302;
                v279 = v114 + 1;
                v112 = v200 + ((unint64_t)*v114 << 56);
                LODWORD(v110) = 8;
                ++v114;
                v113 = v279;
              }
              v202 = v112;
              v203 = 2 * v112;
              v112 = v203;
              v281 = v203;
              v110 = (v110 - 1);
              LODWORD(v282[0]) = v110;
              if (v202 < 0)
              {
                if (!(_DWORD)v110)
                {
                  if ((unint64_t)v114 >= v97)
                    goto LABEL_302;
                  v279 = v114 + 1;
                  v112 = v203 + ((unint64_t)*v114 << 56);
                  LODWORD(v110) = 8;
                  ++v114;
                  v113 = v279;
                }
                v281 = 2 * v112;
                LODWORD(v282[0]) = v110 - 1;
                v204 = ~(v112 >> 63) & 3;
                v110 = (v110 - 1);
                v112 *= 2;
                v115 = v204;
              }
              else
              {
                v115 = 2;
              }
              goto LABEL_88;
            }
LABEL_89:
            v118 = v117;
            v91 = v116;
            ++v98;
            v104 = v116;
            v99 = v110;
            v101 = v112;
            v103 = v118;
          }
          while (v98 != v276);
          v92 = v102;
          v93 = v100;
          if (++v94 == v275)
          {
            v207 = sub_10026F61C(&v279, 2u);
            if (v207 != 1)
            {
              if (v207)
              {
                v205 = 5;
                goto LABEL_190;
              }
              v208 = v276 & 0xF;
              if ((v276 & 0xF) == 0)
                v208 = 16;
              v209 = 8;
              if ((v276 & 7) != 0)
                v209 = v276 & 7;
              v210 = v276 - v209;
              v211 = (char *)v45 + 42;
              v212 = 4 * v276;
              v213 = v209 - v276;
              v214 = v8;
              v215 = 0;
              while (2)
              {
                if (v276 < 9uLL)
                {
                  v216 = 0;
LABEL_259:
                  v230 = v276 - v216;
                  v231 = v216;
                  do
                  {
                    if (HIBYTE(v214[v231 + 5]))
                      BYTE2(v214[v231 + 5]) = 7;
                    ++v231;
                    --v230;
                  }
                  while (v230);
                  ++v215;
                  v211 += v212;
                  v214 = (int *)((char *)v214 + v212);
                  if (v215 == v275)
                    goto LABEL_299;
                  continue;
                }
                break;
              }
              if (v276 < 0x11uLL)
              {
                v217 = 0;
                goto LABEL_239;
              }
              v218 = v211;
              v219 = v276 - v208;
              while (1)
              {
                v220 = v218 - 19;
                v221 = (unsigned __int128)vld4q_s8(v220);
                v222 = vtstq_s8((int8x16_t)v221, (int8x16_t)v221);
                if ((v222.i8[0] & 1) != 0)
                {
                  *(v218 - 20) = 7;
                  if ((v222.i8[1] & 1) == 0)
                    goto LABEL_207;
                }
                else if ((v222.i8[1] & 1) == 0)
                {
LABEL_207:
                  if ((v222.i8[2] & 1) != 0)
                    goto LABEL_208;
                  goto LABEL_224;
                }
                *(v218 - 16) = 7;
                if ((v222.i8[2] & 1) != 0)
                {
LABEL_208:
                  *(v218 - 12) = 7;
                  if ((v222.i8[3] & 1) == 0)
                    goto LABEL_209;
                  goto LABEL_225;
                }
LABEL_224:
                if ((v222.i8[3] & 1) == 0)
                {
LABEL_209:
                  if ((v222.i8[4] & 1) != 0)
                    goto LABEL_210;
                  goto LABEL_226;
                }
LABEL_225:
                *(v218 - 8) = 7;
                if ((v222.i8[4] & 1) != 0)
                {
LABEL_210:
                  *(v218 - 4) = 7;
                  if ((v222.i8[5] & 1) == 0)
                    goto LABEL_211;
                  goto LABEL_227;
                }
LABEL_226:
                if ((v222.i8[5] & 1) == 0)
                {
LABEL_211:
                  if ((v222.i8[6] & 1) != 0)
                    goto LABEL_212;
                  goto LABEL_228;
                }
LABEL_227:
                *v218 = 7;
                if ((v222.i8[6] & 1) != 0)
                {
LABEL_212:
                  v218[4] = 7;
                  if ((v222.i8[7] & 1) == 0)
                    goto LABEL_213;
                  goto LABEL_229;
                }
LABEL_228:
                if ((v222.i8[7] & 1) == 0)
                {
LABEL_213:
                  if ((v222.i8[8] & 1) != 0)
                    goto LABEL_214;
                  goto LABEL_230;
                }
LABEL_229:
                v218[8] = 7;
                if ((v222.i8[8] & 1) != 0)
                {
LABEL_214:
                  v218[12] = 7;
                  if ((v222.i8[9] & 1) == 0)
                    goto LABEL_215;
                  goto LABEL_231;
                }
LABEL_230:
                if ((v222.i8[9] & 1) == 0)
                {
LABEL_215:
                  if ((v222.i8[10] & 1) != 0)
                    goto LABEL_216;
                  goto LABEL_232;
                }
LABEL_231:
                v218[16] = 7;
                if ((v222.i8[10] & 1) != 0)
                {
LABEL_216:
                  v218[20] = 7;
                  if ((v222.i8[11] & 1) == 0)
                    goto LABEL_217;
                  goto LABEL_233;
                }
LABEL_232:
                if ((v222.i8[11] & 1) == 0)
                {
LABEL_217:
                  if ((v222.i8[12] & 1) != 0)
                    goto LABEL_218;
                  goto LABEL_234;
                }
LABEL_233:
                v218[24] = 7;
                if ((v222.i8[12] & 1) != 0)
                {
LABEL_218:
                  v218[28] = 7;
                  if ((v222.i8[13] & 1) == 0)
                    goto LABEL_219;
                  goto LABEL_235;
                }
LABEL_234:
                if ((v222.i8[13] & 1) == 0)
                {
LABEL_219:
                  if ((v222.i8[14] & 1) != 0)
                    goto LABEL_220;
                  goto LABEL_236;
                }
LABEL_235:
                v218[32] = 7;
                if ((v222.i8[14] & 1) != 0)
                {
LABEL_220:
                  v218[36] = 7;
                  if ((v222.i8[15] & 1) != 0)
                    goto LABEL_237;
                  goto LABEL_204;
                }
LABEL_236:
                if ((v222.i8[15] & 1) != 0)
LABEL_237:
                  v218[40] = 7;
LABEL_204:
                v218 += 64;
                v219 -= 16;
                if (!v219)
                {
                  v217 = v276 - v208;
                  v216 = v217;
                  if (v208 < 9)
                    goto LABEL_259;
LABEL_239:
                  v223 = v217;
                  v224 = v217;
                  v225 = v213 + v223;
                  v226 = v214;
                  while (2)
                  {
                    v227 = (char *)&v226[v224 + 5] + 3;
                    v228 = (unint64_t)vld4_s8(v227);
                    v229 = vtst_s8((int8x8_t)v228, (int8x8_t)v228);
                    if ((v229.i8[0] & 1) != 0)
                    {
                      BYTE2(v226[v224 + 5]) = 7;
                      if ((v229.i8[1] & 1) == 0)
                        goto LABEL_243;
LABEL_251:
                      BYTE2(v226[v224 + 6]) = 7;
                      if ((v229.i8[2] & 1) == 0)
                        goto LABEL_252;
LABEL_244:
                      BYTE2(v226[v224 + 7]) = 7;
                      if ((v229.i8[3] & 1) == 0)
                        goto LABEL_245;
LABEL_253:
                      BYTE2(v226[v224 + 8]) = 7;
                      if ((v229.i8[4] & 1) == 0)
                        goto LABEL_254;
LABEL_246:
                      BYTE2(v226[v224 + 9]) = 7;
                      if ((v229.i8[5] & 1) == 0)
                        goto LABEL_247;
LABEL_255:
                      BYTE2(v226[v224 + 10]) = 7;
                      if ((v229.i8[6] & 1) == 0)
                        goto LABEL_256;
LABEL_248:
                      BYTE2(v226[v224 + 11]) = 7;
                      if ((v229.i8[7] & 1) != 0)
                        goto LABEL_257;
                    }
                    else
                    {
                      if ((v229.i8[1] & 1) != 0)
                        goto LABEL_251;
LABEL_243:
                      if ((v229.i8[2] & 1) != 0)
                        goto LABEL_244;
LABEL_252:
                      if ((v229.i8[3] & 1) != 0)
                        goto LABEL_253;
LABEL_245:
                      if ((v229.i8[4] & 1) != 0)
                        goto LABEL_246;
LABEL_254:
                      if ((v229.i8[5] & 1) != 0)
                        goto LABEL_255;
LABEL_247:
                      if ((v229.i8[6] & 1) != 0)
                        goto LABEL_248;
LABEL_256:
                      if ((v229.i8[7] & 1) != 0)
LABEL_257:
                        BYTE2(v226[v224 + 12]) = 7;
                    }
                    v226 += 8;
                    v225 += 8;
                    if (!v225)
                    {
                      v216 = v210;
                      goto LABEL_259;
                    }
                    continue;
                  }
                }
              }
            }
            v232 = v279;
            v233 = v281;
            v234 = LODWORD(v282[0]);
            v235 = (unsigned __int8 *)v45 + 23;
            v277 = 7;
            v278 = 2;
            v236 = 0;
            v237 = 0;
            while (2)
            {
              v238 = v237;
              v239 = v280;
              v240 = v276;
              v241 = v235;
              v242 = v234;
              v243 = v234;
              v244 = v233;
              v245 = v233;
              v246 = v232;
              v247 = v232;
LABEL_271:
              v253 = v246;
              v252 = v242;
              v248 = v238;
              v255 = v241;
              v257 = *v241;
              v241 += 4;
              v256 = v257;
              if (v257)
              {
                if (v256 == 2)
                  v258 = &v278;
                else
                  v258 = &v277;
                if ((int)v238 > 0)
                  goto LABEL_269;
                if ((_DWORD)v252)
                {
                  v259 = 2 * v244;
                  v260 = 2 * v244;
                  v281 = 2 * v244;
                  v261 = v252 - 1;
                  LODWORD(v282[0]) = v252 - 1;
                  if ((v244 & 0x8000000000000000) == 0)
                  {
                    if (v252 <= 3)
                    {
                      if ((unint64_t)v246 >= v239)
                        goto LABEL_302;
                      v279 = v246 + 1;
                      v260 = ((unint64_t)*v246 << 56 >> v261) + v259;
                      v261 = v252 + 7;
                      v253 = v246 + 1;
                      v247 = v246 + 1;
                    }
                    goto LABEL_283;
                  }
                  if ((_DWORD)v252 == 1)
                  {
                    if ((unint64_t)v246 >= v239)
                      goto LABEL_302;
                    v279 = v246 + 1;
                    v267 = v259 + ((unint64_t)*v246 << 56);
                    v264 = 8;
                    v265 = v279;
                    v266 = v279;
                  }
                  else
                  {
                    v266 = v247;
                    v265 = v246;
                    v267 = v260;
                    v264 = v261;
                  }
LABEL_288:
                  v268 = v267;
                  v269 = 2 * v267;
                  v270 = v269;
                  v281 = v269;
                  v271 = v264 - 1;
                  v272 = v264 - 1;
                  LODWORD(v282[0]) = v264 - 1;
                  if ((v268 & 0x8000000000000000) != 0)
                  {
                    if (v271 <= 5)
                    {
                      if ((unint64_t)v265 >= v239)
                        goto LABEL_302;
                      v279 = v265 + 1;
                      v274 = ((unint64_t)*v265++ << 56 >> v272) + v269;
                      v266 = v279;
                      v270 = v274;
                      v272 = v264 + 7;
                    }
                    v248 = v265;
                    v249 = v266;
                    v244 = v270 << 6;
                    v281 = v270 << 6;
                    v245 = v270 << 6;
                    v250 = (v272 - 6);
                    LODWORD(v282[0]) = v250;
                    v251 = (v270 >> 58) + 5;
                  }
                  else
                  {
                    if (v271 <= 1)
                    {
                      if ((unint64_t)v265 >= v239)
                        goto LABEL_302;
                      v279 = v265 + 1;
                      v273 = ((unint64_t)*v265++ << 56 >> v272) + v269;
                      v266 = v279;
                      v270 = v273;
                      v272 = v264 + 7;
                    }
                    v248 = v265;
                    v249 = v266;
                    v244 = 4 * v270;
                    v281 = 4 * v270;
                    v245 = 4 * v270;
                    v250 = (v272 - 2);
                    LODWORD(v282[0]) = v250;
                    v251 = (v270 >> 62) + 1;
                  }
                  v252 = v250;
                  v243 = v250;
                  v247 = v249;
                  v253 = v248;
                  LODWORD(v248) = v251;
LABEL_269:
                  v248 = (unsigned __int8 *)((_DWORD)v248 - 1);
                  *(v255 - 1) = *v258;
                }
                else
                {
                  if ((unint64_t)v246 >= v239)
                    goto LABEL_302;
                  v279 = v246 + 1;
                  v262 = (uint64_t)(v244 + ((unint64_t)*v246 << 56)) < 0;
                  v263 = 2 * (v244 + ((unint64_t)*v246 << 56));
                  v264 = 7;
                  v265 = v279;
                  v247 = v279;
                  v253 = v279;
                  v266 = v279;
                  v260 = v263;
                  v267 = v263;
                  v261 = 7;
                  if (v262)
                    goto LABEL_288;
LABEL_283:
                  v281 = 8 * v260;
                  LODWORD(v282[0]) = v261 - 3;
                  *(v255 - 1) = v260 >> 61;
                  *v258 = v260 >> 61;
                  v252 = (v261 - 3);
                  v243 = v252;
                  v244 = 8 * v260;
                  v245 = 8 * v260;
                }
              }
              v254 = v248;
              v242 = v252;
              v246 = v253;
              v238 = v248;
              if (!--v240)
              {
                v232 = v247;
                v233 = v245;
                v234 = v243;
                ++v236;
                v235 += 4 * v276;
                v237 = v254;
                if (v236 == v275)
                {
                  if ((_DWORD)v254)
                  {
                    v205 = 8;
                    goto LABEL_190;
                  }
LABEL_299:
                  if ((unsigned __int8 *)(v279 - a1) == a2)
                  {
                    result = 0;
LABEL_4:
                    v5 = v8;
                  }
                  else
                  {
                    v205 = 2;
LABEL_190:
                    v206 = v205;
                    free(v8);
                    v5 = 0;
                    result = v206;
                  }
                  goto LABEL_5;
                }
                continue;
              }
              goto LABEL_271;
            }
          }
        }
      }
    }
    else
    {
      if ((unint64_t)v279 >= v280)
        goto LABEL_302;
      ++v279;
      v57 = v281 + ((unint64_t)*v53 << 56);
      v54 = v53 + 1;
      v55 = 2 * v57;
      v281 = 2 * v57;
      v56 = 7;
      LODWORD(v282[0]) = 7;
      if ((v57 & 0x8000000000000000) == 0)
        goto LABEL_82;
    }
    v58 = v56;
    v59 = v8[2];
    if (v56 < v59)
    {
      v60 = v55;
      v61 = v54;
      v62 = v58;
      do
      {
        if ((unint64_t)v61 >= v280)
          goto LABEL_302;
        v279 = v61 + 1;
        v60 += (unint64_t)*v61 << 56 >> v62;
        v281 = v60;
        LODWORD(v282[0]) = v62 + 8;
        v55 = v60;
        v54 = ++v61;
        v58 = v62 + 8;
        v62 += 8;
      }
      while (v62 < v59);
    }
    v63 = v58;
    v64 = v55;
    v65 = v59;
    v66 = v55 << v59;
    v281 = v66;
    v67 = v63 - v59;
    LODWORD(v282[0]) = v67;
    v68 = v67;
    v69 = v8[2];
    if (v67 < v69)
    {
      v70 = v66;
      v71 = v54;
      do
      {
        if ((unint64_t)v71 >= v280)
          goto LABEL_302;
        v279 = v71 + 1;
        v70 += (unint64_t)*v71 << 56 >> v67;
        v281 = v70;
        LODWORD(v282[0]) = v67 + 8;
        v67 += 8;
        v66 = v70;
        v54 = ++v71;
        v68 = v67;
      }
      while (v67 < v69);
    }
    v72 = v69;
    v73 = v66 >> -(char)v69;
    v74 = v66 << v69;
    v281 = v74;
    v75 = v68 - v72;
    LODWORD(v282[0]) = v75;
    if ((v73 & 0x80000000) != 0
      || (v76 = v54, v77 = v64 >> -v65, v78 = v75, v79 = v280, v80 = v74, v81 = v73, v82 = 0, v81 >= v8[1])
      || (v77 & 0x80000000) != 0
      || (int)v77 >= *v8)
    {
      longjmp((int *)v282 + 1, 6);
    }
    HIBYTE(v45[(int)v77 + 5 + *v8 * v81]) = 2;
    if (v78 > 1)
    {
      v83 = v78;
    }
    else
    {
      if ((unint64_t)v54 >= v79)
        goto LABEL_302;
      v279 = v54 + 1;
      v80 = ((unint64_t)*v54 << 56 >> v78) + v74;
      v76 = v54 + 1;
      v83 = v78 + 8;
    }
    v84 = v80;
    v85 = v76;
    v86 = v84 >> 62;
    v87 = 4 * v84;
    v88 = v87;
    v281 = v87;
    v89 = v83 - 2;
    LODWORD(v282[0]) = v83 - 2;
    switch((_DWORD)v86)
    {
      case 3:
        v82 = 1;
        break;
      case 1:
        v82 = -1;
        break;
      case 0:
        if (v83 - 2 <= 1)
        {
          if ((unint64_t)v85 >= v79)
            goto LABEL_302;
          v279 = v85 + 1;
          v88 = ((unint64_t)*v85 << 56 >> v89) + v87;
          v89 = v83 + 6;
        }
        v281 = 4 * v88;
        LODWORD(v282[0]) = v89 - 2;
        __asm { BR              X4 }
        break;
    }
    __asm { BR              X3 }
  }
LABEL_5:
  *a3 = v5;
  return result;
}

unint64_t sub_10026F61C(unsigned __int8 **a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;

  v2 = *((_DWORD *)a1 + 6);
  if (v2 >= a2)
  {
    v5 = (unint64_t)a1[2];
  }
  else
  {
    v4 = *a1;
    v3 = (unint64_t)a1[1];
    do
    {
      if ((unint64_t)v4 >= v3)
        longjmp((int *)a1 + 7, 3);
      *a1 = v4 + 1;
      v5 = (unint64_t)&a1[2][(unint64_t)*v4 << 56 >> v2];
      a1[2] = (unsigned __int8 *)v5;
      v2 += 8;
      *((_DWORD *)a1 + 6) = v2;
      ++v4;
    }
    while (v2 < a2);
  }
  a1[2] = (unsigned __int8 *)(v5 << a2);
  *((_DWORD *)a1 + 6) = v2 - a2;
  return v5 >> -(char)a2;
}

int *sub_10026F6A8(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int *v13;
  _BYTE *v14;
  int v15;
  char *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *result;
  if ((int)v1 >= 1)
  {
    v2 = result[1];
    if ((int)v2 >= 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = *result;
      v6 = (char *)result + 23;
      v7 = 4 * v1;
      while (1)
      {
        if (v3)
        {
          if (v3 == (_DWORD)v1 - 1)
          {
            v8 = &v6[4 * v3];
            v9 = v2;
            v10 = v4;
            do
            {
              if (*v8 == 1)
              {
                *v8 = 0;
                v10 = 1;
              }
              v8 += v7;
              --v9;
            }
            while (v9);
          }
          else
          {
            v13 = &result[v3];
            v15 = *((unsigned __int8 *)v13 + 23);
            v14 = (char *)v13 + 23;
            if (v15 == 1)
            {
              *v14 = 0;
              v4 = 1;
            }
            if ((_DWORD)v2 == 1)
            {
              v10 = v4;
            }
            else
            {
              v16 = &v6[4 * v3];
              v17 = (char *)&result[v1 + 6 + v3] + 3;
              v18 = v2 - 1;
              v19 = (v2 - 1) - 1;
              v10 = v4;
              do
              {
                if (*(v17 - 4) == 1 && (!v19 || !*(v17 - 8) || !*v17 || !*v16 || !v16[8 * v1]))
                {
                  *(v17 - 4) = 0;
                  v10 = 1;
                }
                --v19;
                v16 += v7;
                v17 += v7;
                --v18;
              }
              while (v18);
            }
          }
        }
        else
        {
          v11 = v2;
          v12 = (char *)result + 23;
          v10 = v4;
          do
          {
            if (*v12 == 1)
            {
              *v12 = 0;
              v10 = 1;
            }
            v12 += v7;
            --v11;
          }
          while (v11);
        }
        ++v3;
        v4 = v10;
        if (v3 == v5)
        {
          v3 = 0;
          v4 = 0;
          if (!(_DWORD)v10)
            break;
        }
      }
    }
  }
  return result;
}

double sub_10026F810(_DWORD *a1, int a2, int a3)
{
  int v3;

  v3 = 0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2)
  {
    if (a1[1] <= a3)
      v3 = 0;
    else
      v3 = LOWORD(a1[a2 + 5 + *a1 * a3]);
  }
  return dbl_100395E70[a1[3]] * (double)(v3 - a1[4]);
}

__n64 sub_10026F86C(_DWORD *a1, int a2, int a3)
{
  __n64 result;

  result.n64_f64[0] = 0.0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2 && a1[1] > a3)
  {
    result.n64_u8[0] = BYTE2(a1[a2 + 5 + *a1 * a3]);
    result.n64_f64[0] = (double)result.n64_u64[0] * 0.142857143;
  }
  return result;
}

double sub_10026F8B0(uint64_t a1)
{
  return dbl_100395E70[*(int *)(a1 + 12)] * (double)-*(_DWORD *)(a1 + 16);
}

void sub_10026F8D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10000577C(a1, a3);
}

void sub_10026F988(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::thread **v2;

  sub_10026F9E4(v2);
  sub_10004D464(v1);
  _Unwind_Resume(a1);
}

void sub_10026F9A4()
{
  operator delete();
}

void sub_10026F9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10004D464(v1);
  _Unwind_Resume(a1);
}

std::thread **sub_10026F9E4(std::thread **result)
{
  std::thread *v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (v1[2].__t_)
      std::thread::join(v1 + 2);
    std::thread::~thread(v1 + 2);
    operator delete();
  }
  return result;
}

uint64_t sub_10026FA54(uint64_t a1)
{
  return sub_1000179E4(a1 - 8);
}

void sub_10026FA5C(uint64_t a1)
{
  sub_1000179E4(a1);
  operator delete();
}

void sub_10026FA80(uint64_t a1)
{
  sub_1000179E4(a1 - 8);
  operator delete();
}

void sub_10026FAA8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5[55];
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(uint64_t **)(a1 + 88);
  if (v4)
  {
    sub_100222150((uint64_t)v5, v4);
    sub_100222150((uint64_t)&v6, v4 + 59);
    sub_100221F48(v3, a2, v5);
  }
  sub_100008000(*(_QWORD *)(a1 + 80), a2);
}

void sub_10026FB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026A1B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026FB8C(uint64_t a1)
{
  uint64_t v2;
  int **v3;

  v2 = *(_QWORD *)(a1 + 88);
  if (!v2)
    return sub_1001E433C(a1);
  v3 = (int **)sub_1002C6184(v2);
  return sub_10005D4C0(*v3);
}

void sub_10026FBD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (*(_QWORD *)(a1 + 88))
  {
    v3 = (_QWORD *)sub_1002C6184(*(_QWORD *)(a1 + 88));
    v4 = v3[1];
    *(_QWORD *)(a2 + 8) = *v3;
    *(_QWORD *)(a2 + 16) = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    *(_BYTE *)a2 = 1;
  }
  else
  {
    sub_1001E43E8(a1, a2);
  }
}

void sub_10026FC34(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = (uint64_t *)(a2 + 472);
    if (*(char *)(a2 + 935) < 0)
    {
      operator delete(*(void **)(a2 + 912));
      sub_1000FE64C((_QWORD *)(a2 + 616));
      sub_1000FEB40(v3);
      if ((*(char *)(a2 + 463) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else
    {
      sub_1000FE64C((_QWORD *)(a2 + 616));
      sub_1000FEB40(v3);
      if ((*(char *)(a2 + 463) & 0x80000000) == 0)
        goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 440));
LABEL_4:
    sub_1000FE64C((_QWORD *)(a2 + 144));
    sub_1000FEB40((uint64_t *)a2);
    operator delete();
  }
}

uint64_t sub_10026FCC8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026FD24()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void sub_10026FD80()
{
  objc_autoreleasePoolPop(objc_autoreleasePoolPush());
}

void sub_10026FD94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  double v7;
  double v8;
  char v9;
  _QWORD v10[8];

  if (*(double *)(a2 + 8) >= 0.5 && *(_BYTE *)(a1 + 49) || !*(_BYTE *)(a1 + 64))
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    v5 = *(_QWORD *)(qword_10041A998 + 16);
  v6 = (_QWORD *)sub_1000C51A8((uint64_t)v10, v5);
  v7 = *(double *)&v10[6];
  sub_100019B18(v6);
  if (*(_BYTE *)(a1 + 48))
  {
    v8 = *(double *)(a1 + 32);
    if (v8 >= v7)
      v8 = v7;
    if (v8 < *(double *)(a1 + 24))
      v8 = *(double *)(a1 + 24);
    *(double *)a3 = v8;
    *(double *)(a3 + 8) = 1.0 - v8;
    v9 = 1;
  }
  else
  {
LABEL_12:
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v9;
}

uint64_t sub_10026FE88()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10026FEE4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_10026FF40(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      sub_1000D02C0();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_10026FFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **sub_10026FFD4(void **a1, uint64_t a2)
{
  void *v3;
  _BYTE *v4;
  char *v5;
  size_t v7;

  if (a1 == (void **)a2)
    return a1;
  v3 = *a1;
  v4 = *(_BYTE **)a2;
  v5 = *(char **)(a2 + 8);
  v7 = (v5 - v4) >> 3;
  if (v7 == ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3)
  {
    memcpy(v3, v4, v5 - v4);
    return a1;
  }
  sub_100199588(a1, v4, v5, v7);
  return a1;
}

uint64_t sub_100270038(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

uint64_t sub_100270048(_QWORD *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

double sub_100270054(uint64_t a1)
{
  double __C;

  __C = 0.0;
  vDSP_svesqD(*(const double **)a1, 1, &__C, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  return __C;
}

void sub_100270090(__CLPK_doublereal **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *__p;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  __p = *(void **)a2;
  v6 = *(_OWORD *)(a2 + 8);
  v4 = ((_QWORD)v6 - (_QWORD)__p) >> 3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_10027012C(a1, v4, (uint64_t)&__p, 1, (uint64_t)&v7);
  *(_OWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = v8;
  if (__p)
    operator delete(__p);
}

void sub_100270114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_10027012C@<Q0>(__CLPK_doublereal **a1@<X0>, __CLPK_integer a2@<W1>, uint64_t a3@<X2>, __CLPK_integer a4@<W3>, uint64_t a5@<X8>)
{
  __n128 result;
  __CLPK_integer __info;
  __CLPK_integer __nrhs;
  __CLPK_integer __ldb;
  void *__p;
  void *v12[2];
  char v13;
  std::string v14;
  std::string v15;

  __nrhs = a4;
  __ldb = a2;
  __info = 0;
  dtptrs_("L", "N", "N", &__ldb, &__nrhs, *a1, *(__CLPK_doublereal **)a3, &__ldb, &__info);
  if (__info)
  {
    sub_1000D5048(v12, "");
    sub_100270578("Invalid value passed to LAPACK during DTPTRS step. info = ", &v14);
    sub_10026A3D8(&__info, &v15);
    sub_100174738((uint64_t)v12, (uint64_t)&v14, 2);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v13 & 0x80000000) == 0)
          goto LABEL_6;
LABEL_9:
        operator delete(v12[0]);
LABEL_6:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_9;
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a5 = *(_OWORD *)a3;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  return result;
}

void sub_100270288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002702E4(double **a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double *v3[4];

  v2 = a1[1];
  v3[0] = *a1;
  v3[1] = (double *)&std::to_string;
  v3[2] = v2;
  v3[3] = (double *)&std::to_string;
  sub_100270320(",", v3, a2);
}

void sub_100270320(char *__s@<X1>, double **a2@<X0>, uint64_t a3@<X8>)
{
  double *v5;
  double *v6;
  double *v7;
  std::string::value_type *p_p;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::value_type *v20;
  std::string::size_type v21;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v5 != v7)
  {
    ((void (*)(void **__return_ptr, double))v6)(&__p, *v5);
    if ((v24 & 0x80u) == 0)
      p_p = (std::string::value_type *)&__p;
    else
      p_p = (std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v9 = v24;
    else
      v9 = v23;
    sub_10009B080((std::string *)a3, a3, (unint64_t)p_p, &p_p[v9], v9);
    if ((char)v24 < 0)
      operator delete(__p);
    ++v5;
  }
  for (; v5 != v7; ++v5)
  {
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    v12 = v11 + v10;
    v13 = strlen(__s);
    v14 = sub_10009B520((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    v15 = *(unsigned __int8 *)(a3 + 23);
    v16 = *(_QWORD *)a3;
    v17 = *(_QWORD *)(a3 + 8);
    ((void (*)(void **__return_ptr, char *, double))v6)(&__p, v14, *v5);
    if ((v15 & 0x80u) == 0)
      v18 = a3;
    else
      v18 = v16;
    if ((v15 & 0x80u) == 0)
      v19 = v15;
    else
      v19 = v17;
    if ((v24 & 0x80u) == 0)
      v20 = (std::string::value_type *)&__p;
    else
      v20 = (std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v21 = v24;
    else
      v21 = v23;
    sub_10009B080((std::string *)a3, v18 + v19, (unint64_t)v20, &v20[v21], v21);
    if ((char)v24 < 0)
      operator delete(__p);
  }
}

void sub_100270484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002704DC(_QWORD *a1, double **a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;

  sub_10021E988(a2);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_1000F0508(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_10027055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_100270578@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002705A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002705C4()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100270620()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

double sub_10027067C(double **a1)
{
  double *v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v9;
  void *__p[2];
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  do
  {
    v6 = v1[3];
    if (v6 <= 0.0)
    {
      sub_1000D5048(__p, "");
      sub_100174738((uint64_t)__p, 0, 0);
      if (v11 < 0)
        operator delete(__p[0]);
      sub_1000F2AE4((uint64_t)&v9);
    }
    v7 = v1[2] - *v1;
    v4 = v4 + __exp10(v7 / -10.0) * v6;
    v3 = v3 + v7 * v6;
    v5 = v5 + v6;
    v1 += 5;
  }
  while (v1 != v2);
  return v3;
}

void sub_100270784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1002707A0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  double *v23;
  void *v24;
  double *v25;
  void *v27;
  double *v28;
  unint64_t v29;
  void *v30[2];
  void *__p[2];
  char v32;
  std::string v33;
  char v34;

  v7 = *a3;
  v8 = a3[1];
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a4[1] - *a4) >> 4) != (v8 - *a3) >> 4)
  {
    sub_1000D5048(__p, "");
    sub_10024E3EC("Number of scans must match number of AP RSSI maps", &v33);
    sub_100174738((uint64_t)__p, (uint64_t)&v33, 1);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)v30);
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = 0uLL;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1003F9C58;
  v34 = 0;
  if (v8 != v7)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v13 = *(_QWORD *)(v7 + v10);
      if (!v13
        || !(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v13 + 16))(v13, a2, &v33))
      {
        goto LABEL_6;
      }
      if (*(double *)&v33.__r_.__value_.__r.__words[2] <= 0.0)
      {
        sub_1000D5048(__p, "");
        sub_100174738((uint64_t)__p, 0, 0);
        if (v32 < 0)
          operator delete(__p[0]);
        sub_1000F2AE4((uint64_t)v30);
      }
      v14 = *a4 + v9;
      v15 = *(_DWORD *)(v14 + 32);
      if (v15 == v15 >> 31)
      {
        v16 = *(double *)(v14 + 72);
        __p[0] = *(void **)&v16;
        v17 = v28;
        if ((unint64_t)v28 < v29)
          goto LABEL_16;
      }
      else
      {
        v20 = *(_QWORD *)(v14 + 40);
        v18 = v14 + 40;
        v19 = v20;
        if (v15 < 0)
          v18 = v19;
        v16 = (double)*(int *)(v18 + 92);
        *(double *)__p = v16;
        v17 = v28;
        if ((unint64_t)v28 < v29)
        {
LABEL_16:
          *v17 = v16;
          sub_1001A6798((uint64_t)(v17 + 1), (uint64_t)&v33);
          v12 = (char *)(v17 + 5);
          goto LABEL_5;
        }
      }
      v12 = sub_10027200C(&v27, __p, (uint64_t)&v33);
LABEL_5:
      v28 = (double *)v12;
LABEL_6:
      ++v11;
      v7 = *a3;
      v10 += 16;
      v9 += 208;
    }
    while (v11 < (a3[1] - *a3) >> 4);
  }
  v21 = sub_10027067C((double **)&v27);
  nullsub_110(&v33);
  v22 = (double *)v27;
  if (v27)
  {
    v23 = v28;
    v24 = v27;
    if (v28 != v27)
    {
      do
      {
        v25 = v23 - 5;
        nullsub_110(v23 - 4);
        v23 = v25;
      }
      while (v25 != v22);
      v24 = v27;
    }
    v28 = v22;
    operator delete(v24);
  }
  return v21;
}

void sub_100270A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100270ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0)
  {
    operator delete(__p);
    nullsub_110(&a21);
    sub_100270B3C((void **)&a9);
    _Unwind_Resume(a1);
  }
  nullsub_110(&a21);
  sub_100270B3C((void **)&a9);
  _Unwind_Resume(a1);
}

void **sub_100270B3C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        nullsub_110(v3 - 32);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_100270BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *__p[2];
  void *v29[2];
  char v30;
  std::bad_cast v31;
  void *v32;
  _UNKNOWN **v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;

  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      if ((a3 || *(double *)(a2 + 8) > 0.0) && a3)
        goto LABEL_5;
      return;
    case 1:
      v18 = *(double *)(a2 + 8);
      v19 = *(double *)(a2 + 16);
      v26 = v19;
      v27 = v18;
      if (!a3)
        return;
      if (v18 <= 0.0)
        goto LABEL_5;
      v20 = v18 / v19;
      __exp10(v18 / v19 / 10.0);
      v25 = NAN;
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_83;
      v21 = 0;
      while (2)
      {
        v25 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        v24 = __exp10(v25 / 10.0);
        v22 = v27 * (log(v24 / v20) + 1.0) - v24 * v26;
        if (v22 > 0.00000011920929)
        {
          v30 = 0;
          LOBYTE(v29[0]) = 0;
          memset(&v34, 0, sizeof(v34));
          std::string::assign(&v34, "We set our sampling area too low! But since it's the mode that should be impossible. w=");
          memset(&v35, 0, sizeof(v35));
          if ((sub_10016EED0(&v27, &v35) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
            sub_1000F9804((uint64_t)&v31);
          }
          memset(&v36, 0, sizeof(v36));
          std::string::assign(&v36, " s=");
          memset(&v37, 0, sizeof(v37));
          if ((sub_10016EED0(&v26, &v37) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
            sub_1000F9804((uint64_t)&v31);
          }
          memset(&v38, 0, sizeof(v38));
          std::string::assign(&v38, " r_dB=");
          memset(&v39, 0, sizeof(v39));
          if ((sub_10016EED0(&v25, &v39) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
            sub_1000F9804((uint64_t)&v31);
          }
          memset(&v40, 0, sizeof(v40));
          std::string::assign(&v40, " r_rat=");
          memset(&v41, 0, sizeof(v41));
          if ((sub_10016EED0(&v24, &v41) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
            sub_1000F9804((uint64_t)&v31);
          }
          sub_100174738((uint64_t)v29, (uint64_t)&v34, 8);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_60:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_61;
              goto LABEL_70;
            }
          }
          else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_60;
          }
          operator delete(v40.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_61:
            if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_62;
            goto LABEL_71;
          }
LABEL_70:
          operator delete(v39.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_62:
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_63;
            goto LABEL_72;
          }
LABEL_71:
          operator delete(v38.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_63:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_64;
            goto LABEL_73;
          }
LABEL_72:
          operator delete(v37.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_64:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_65;
            goto LABEL_74;
          }
LABEL_73:
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_65:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_75;
          }
LABEL_74:
          operator delete(v35.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_66:
            if ((v30 & 0x80000000) == 0)
              goto LABEL_67;
LABEL_76:
            operator delete(v29[0]);
LABEL_67:
            sub_1000F2AE4((uint64_t)__p);
          }
LABEL_75:
          operator delete(v34.__r_.__value_.__l.__data_);
          if ((v30 & 0x80000000) == 0)
            goto LABEL_67;
          goto LABEL_76;
        }
        if (v22 < 0.0)
        {
          v23 = (*(double (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
          if (log(v23) >= v22)
          {
            if ((unint64_t)++v21 >= *(_QWORD *)(a1 + 32))
              goto LABEL_83;
            continue;
          }
        }
        break;
      }
      sub_1002CEAB4((uint64_t)a5);
      return;
    case 2:
      v10 = *(double *)(a2 + 8);
      v9 = *(double *)(a2 + 16);
      v26 = v9;
      v27 = v10;
      if (!a3 && v10 <= 0.0)
        return;
      v11 = 0.0;
      if (v10 > 0.0)
        v11 = log10(v10 / v9) * 10.0;
      v25 = v11;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if (a3)
          (*(void (**)(uint64_t, double, double))(*(_QWORD *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        return;
      }
      v30 = 0;
      LOBYTE(v29[0]) = 0;
      memset(&v34, 0, sizeof(v34));
      std::string::assign(&v34, "Finite modeGain only w=");
      memset(&v35, 0, sizeof(v35));
      if ((sub_10016EED0(&v27, &v35) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      memset(&v36, 0, sizeof(v36));
      std::string::assign(&v36, " s=");
      memset(&v37, 0, sizeof(v37));
      if ((sub_10016EED0(&v26, &v37) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      memset(&v38, 0, sizeof(v38));
      std::string::assign(&v38, " but ");
      memset(&v39, 0, sizeof(v39));
      if ((sub_10016EED0(&v25, &v39) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      sub_100174738((uint64_t)v29, (uint64_t)&v34, 6);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v39.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_93:
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_94;
          goto LABEL_101;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_95;
        goto LABEL_102;
      }
LABEL_101:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_95:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_96;
        goto LABEL_103;
      }
LABEL_102:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_96:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_97;
        goto LABEL_104;
      }
LABEL_103:
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_97:
        if ((v30 & 0x80000000) == 0)
          goto LABEL_98;
LABEL_105:
        operator delete(v29[0]);
LABEL_98:
        sub_1000F2AE4((uint64_t)__p);
      }
LABEL_104:
      operator delete(v34.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0)
        goto LABEL_98;
      goto LABEL_105;
    case 3:
      v12 = *(double *)(a2 + 8);
      v13 = *(double *)(a2 + 16);
      v26 = v13;
      v27 = v12;
      if (!a3)
      {
        if (v12 > 0.0)
          log10(v13 / v12);
        return;
      }
      if (v12 <= 0.0)
      {
LABEL_5:
        (*(void (**)(uint64_t, double, double))(*(_QWORD *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        return;
      }
      v25 = NAN;
      if (!*(_QWORD *)(a1 + 32))
      {
LABEL_83:
        sub_1002CEAC4(a5);
        return;
      }
      v14 = 0;
      v15 = v12 / v13;
      while (1)
      {
        v25 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        v24 = __exp10(v25 / 10.0);
        v16 = v27 * (log(v24 / v15) + 1.0) - v24 * v26;
        if (v16 > 0.00000011920929)
          break;
        if (v16 >= 0.0 || (v17 = (*(double (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4), log(v17) < v16))
        {
          sub_1002CEAB4((uint64_t)a5);
          return;
        }
        if ((unint64_t)++v14 >= *(_QWORD *)(a1 + 32))
          goto LABEL_83;
      }
      v30 = 0;
      LOBYTE(v29[0]) = 0;
      memset(&v34, 0, sizeof(v34));
      std::string::assign(&v34, "We set our sampling area too low! But since it's the mode that should be impossible. w=");
      memset(&v35, 0, sizeof(v35));
      if ((sub_10016EED0(&v27, &v35) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      memset(&v36, 0, sizeof(v36));
      std::string::assign(&v36, " s=");
      memset(&v37, 0, sizeof(v37));
      if ((sub_10016EED0(&v26, &v37) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      memset(&v38, 0, sizeof(v38));
      std::string::assign(&v38, " r_dB=");
      memset(&v39, 0, sizeof(v39));
      if ((sub_10016EED0(&v25, &v39) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      memset(&v40, 0, sizeof(v40));
      std::string::assign(&v40, " r_rat=");
      memset(&v41, 0, sizeof(v41));
      if ((sub_10016EED0(&v24, &v41) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_1003EFFF0;
        sub_1000F9804((uint64_t)&v31);
      }
      sub_100174738((uint64_t)v29, (uint64_t)&v34, 8);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_28:
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_29;
          goto LABEL_38;
        }
      }
      else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v40.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_30;
        goto LABEL_39;
      }
LABEL_38:
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_40;
      }
LABEL_39:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
        goto LABEL_41;
      }
LABEL_40:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_33;
        goto LABEL_42;
      }
LABEL_41:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_33:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_43;
      }
LABEL_42:
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        if ((v30 & 0x80000000) == 0)
          goto LABEL_35;
LABEL_44:
        operator delete(v29[0]);
LABEL_35:
        sub_1000F2AE4((uint64_t)__p);
      }
LABEL_43:
      operator delete(v34.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_44;
    default:
      return;
  }
}

void sub_100271B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100271FB4(uint64_t a1, uint64_t a2)
{
  (*(double (**)(uint64_t, double))(*(_QWORD *)a2 + 24))(a2, -*(double *)(a1 + 40));
}

char *sub_10027200C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v19;
  __int128 v20;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_1000D02C0();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1000CDEB8();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v19 = &v9[40 * v4];
  *((_QWORD *)&v20 + 1) = &v9[40 * v8];
  *(_QWORD *)v19 = *a2;
  sub_1001A6798((uint64_t)(v19 + 8), a3);
  v11 = (char *)*a1;
  v10 = a1[1];
  for (i = 48; ; i -= 40)
  {
    v13 = v10 + i;
    if ((char *)(v10 + i - 48) == v11)
      break;
    *(_QWORD *)&v19[i - 88] = *(_QWORD *)(v13 - 88);
    v14 = (uint64_t)&v19[i - 80];
    sub_1001A6798(v14, v13 - 80);
  }
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v19[i - 48];
  *(_QWORD *)&v20 = v19 + 40;
  *(_OWORD *)(a1 + 1) = v20;
  if (v15 != v16)
  {
    do
    {
      v17 = v15 - 40;
      nullsub_110(v15 - 32);
      v15 = v17;
    }
    while (v17 != v16);
  }
  if (v16)
    operator delete(v16);
  return v19 + 40;
}

void sub_100272190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1002721C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002721C8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    nullsub_110(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10027221C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100272278()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002722D4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  sub_10004AAA0(a1 + 24, *(_QWORD **)(a1 + 32));
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_100272330(uint64_t *a1, uint64_t **a2, uint64_t **a3, double **a4)
{
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  double *v26;
  double *v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  double *v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  double *v53;
  double *v54;
  double v55;
  double *v56;
  double v57;
  double *v58;
  double v59;
  double *v60;
  uint64_t v61;
  _QWORD *v62;
  double *v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  double *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  char *v76;
  double *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  double *v81;
  double *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t *v95;
  void *v96;
  _BYTE v97[24];
  double *v98;
  std::__shared_weak_count *v99;
  void *__p;
  double *v101;
  double *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  double *v110;
  double *v111;
  char *v112;
  char *v113;

  v8 = a2[1];
  v9 = 126 - 2 * __clz(((char *)v8 - (char *)*a2) >> 4);
  v103 = *a2;
  v7 = v103;
  v104 = v8;
  v10 = (uint64_t)a2[2];
  v105 = v10;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v8 == v7)
    v11 = 0;
  else
    v11 = v9;
  sub_1000B0B7C(v7, v8, v11, 1);
  *a1 = (uint64_t)v7;
  a1[1] = (uint64_t)v8;
  a1[2] = v10;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  v12 = (std::__shared_weak_count *)a4[1];
  v98 = *a4;
  v99 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_100272C30((uint64_t)a1, (uint64_t)v97);
  v15 = (_QWORD *)*a1;
  v16 = (_QWORD *)a1[1];
  v101 = 0;
  v102 = 0;
  __p = 0;
  v95 = a1;
  if (v15 != v16)
  {
    while (1)
    {
      v48 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 40))(*v15);
      (*(void (**)(char **__return_ptr, _QWORD, uint64_t **))(*(_QWORD *)*v48 + 48))(&v112, *v48, a3);
      v49 = *v48;
      v106 = COERCE_VOID_((*(double (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15));
      v107 = v50;
      v108 = v51;
      v109 = v52;
      (*(void (**)(double **__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v49 + 152))(&v110, v49, &v106, 0);
      v53 = v110;
      v54 = v111;
      v55 = 0.0;
      if (v110 == v111)
      {
        v58 = v110;
      }
      else
      {
        v56 = v98;
        do
        {
          sub_10004618C((uint64_t)v97, a3, &v106);
          v57 = sub_10023B600(v56, v48, v53, &v106, (double *)a3, (uint64_t)&v112, 0.0);
          if (v106)
          {
            v107 = v106;
            operator delete(v106);
          }
          v55 = v55 + exp(v57);
          v53 += 7;
        }
        while (v53 != v54);
        v53 = v110;
        v58 = v111;
      }
      v59 = v55 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * (v58 - v53));
      v60 = v101;
      if (v101 < v102)
      {
        *v101 = v59;
        v61 = (uint64_t)(v60 + 1);
        goto LABEL_82;
      }
      v62 = v16;
      v63 = (double *)__p;
      v64 = (char *)v101 - (_BYTE *)__p;
      v65 = ((char *)v101 - (_BYTE *)__p) >> 3;
      v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61)
        sub_1000D02C0();
      v67 = (char *)v102 - (_BYTE *)__p;
      if (((char *)v102 - (_BYTE *)__p) >> 2 > v66)
        v66 = v67 >> 2;
      v68 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v66;
      if (v68)
      {
        if (v68 >> 61)
          sub_1000CDEB8();
        v69 = (char *)operator new(8 * v68);
        v70 = (double *)&v69[8 * v65];
        *v70 = v59;
        v61 = (uint64_t)(v70 + 1);
        if (v60 == v63)
        {
LABEL_74:
          v16 = v62;
          a1 = v95;
          goto LABEL_80;
        }
      }
      else
      {
        v69 = 0;
        v70 = (double *)(8 * v65);
        *(double *)(8 * v65) = v59;
        v61 = 8 * v65 + 8;
        if (v60 == v63)
          goto LABEL_74;
      }
      v71 = (char *)(v60 - 1) - (char *)v63;
      if (v71 < 0x58)
        break;
      v72 = (char *)v60 - &v69[v64];
      v16 = v62;
      a1 = v95;
      if (v72 < 0x20)
        goto LABEL_79;
      v73 = (v71 >> 3) + 1;
      v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
      v75 = &v60[v74 / 0xFFFFFFFFFFFFFFF8];
      v70 = (double *)((char *)v70 - v74);
      v76 = &v69[8 * v65 - 16];
      v77 = v60 - 2;
      v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v79 = *(_OWORD *)v77;
        *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
        *(_OWORD *)v76 = v79;
        v76 -= 32;
        v77 -= 4;
        v78 -= 4;
      }
      while (v78);
      v60 = v75;
      if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_79;
LABEL_80:
      __p = v70;
      v102 = (double *)&v69[8 * v68];
      if (v63)
      {
        operator delete(v63);
        v53 = v110;
      }
LABEL_82:
      v101 = (double *)v61;
      if (v53)
      {
        v81 = v111;
        v82 = v53;
        if (v111 == v53)
        {
LABEL_98:
          v111 = v53;
          operator delete(v82);
          goto LABEL_99;
        }
        while (2)
        {
          v83 = (std::__shared_weak_count *)*((_QWORD *)v81 - 3);
          if (!v83)
            goto LABEL_90;
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
            v86 = (std::__shared_weak_count *)*((_QWORD *)v81 - 6);
            if (v86)
            {
LABEL_91:
              v87 = (unint64_t *)&v86->__shared_owners_;
              do
                v88 = __ldaxr(v87);
              while (__stlxr(v88 - 1, v87));
              if (!v88)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
          }
          else
          {
LABEL_90:
            v86 = (std::__shared_weak_count *)*((_QWORD *)v81 - 6);
            if (v86)
              goto LABEL_91;
          }
          v81 -= 7;
          if (v81 == v53)
          {
            v82 = v110;
            goto LABEL_98;
          }
          continue;
        }
      }
LABEL_99:
      v89 = v112;
      if (v112)
      {
        v90 = v113;
        v47 = v112;
        if (v113 != v112)
        {
          do
          {
            v91 = (std::__shared_weak_count *)*((_QWORD *)v90 - 1);
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v90 -= 16;
          }
          while (v90 != v89);
          v47 = v112;
        }
        v113 = v89;
        operator delete(v47);
      }
      v15 += 2;
      if (v15 == v16)
        goto LABEL_8;
    }
    v16 = v62;
    a1 = v95;
    do
    {
LABEL_79:
      v80 = *((_QWORD *)v60-- - 1);
      *((_QWORD *)v70-- - 1) = v80;
    }
    while (v60 != v63);
    goto LABEL_80;
  }
LABEL_8:
  sub_1000B08EC(a1 + 3, &__p);
  if (__p)
  {
    v101 = (double *)__p;
    operator delete(__p);
  }
  v17 = v99;
  if (v99)
  {
    v18 = (unint64_t *)&v99->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = nullsub_10(a1 + 3);
  v96 = 0;
  v22 = *(const void **)v20;
  v21 = *(_QWORD *)(v20 + 8);
  v23 = v21 - *(_QWORD *)v20;
  if (v21 != *(_QWORD *)v20)
  {
    if ((v23 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v96 = operator new(v21 - *(_QWORD *)v20);
    memcpy(v96, v22, v23);
  }
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v24 = *a1;
  if (a1[1] != *a1)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    while (1)
    {
      while (1)
      {
        v31 = *((double *)v96 + v30);
        v32 = v31
            * (*(double (**)(_QWORD))(**(_QWORD **)(v24 + 16 * v30) + 32))(*(_QWORD *)(v24 + 16 * v30));
        if ((unint64_t)v26 >= v29)
          break;
        *v26++ = v32;
        ++v30;
        v24 = *a1;
        if (v30 >= (a1[1] - *a1) >> 4)
          goto LABEL_108;
      }
      v33 = v26 - v28;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
      {
        v106 = v27;
        v107 = v26;
        v108 = v25;
        sub_1000D02C0();
      }
      if ((uint64_t)(v29 - (_QWORD)v28) >> 2 > v34)
        v34 = (uint64_t)(v29 - (_QWORD)v28) >> 2;
      if (v29 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
      {
        if (v35 >> 61)
        {
          v106 = v27;
          v107 = v26;
          v108 = v25;
          sub_1000CDEB8();
        }
        v36 = operator new(8 * v35);
        v27 = (double *)&v36[8 * v33];
        *v27 = v32;
        v37 = (uint64_t)(v27 + 1);
        if (v26 == v28)
          goto LABEL_36;
      }
      else
      {
        v36 = 0;
        v27 = (double *)(8 * v33);
        *(double *)(8 * v33) = v32;
        v37 = 8 * v33 + 8;
        if (v26 == v28)
          goto LABEL_36;
      }
      v38 = (char *)(v26 - 1) - (char *)v28;
      if (v38 >= 0x168)
      {
        if (&v36[(char *)v26 - (char *)v28 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[(char *)v26 - (char *)v28 - 8])
        {
          v39 = v26;
        }
        else if ((double *)((char *)v26 - (v38 & 0xFFFFFFFFFFFFFFF8) - 8) > v26 - 1)
        {
          v39 = v26;
        }
        else if ((unint64_t)((char *)v28 - v36) >= 0x20)
        {
          v41 = (v38 >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v26[v42 / 0xFFFFFFFFFFFFFFF8];
          v27 = (double *)((char *)v27 - v42);
          v43 = &v36[8 * v33 - 16];
          v44 = v26 - 2;
          v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *v43 = v46;
            v43 -= 2;
            v44 -= 4;
            v45 -= 4;
          }
          while (v45);
          if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_36;
        }
        else
        {
          v39 = v26;
        }
      }
      else
      {
        v39 = v26;
      }
      do
      {
        v40 = *((_QWORD *)v39-- - 1);
        *((_QWORD *)v27-- - 1) = v40;
      }
      while (v39 != v28);
LABEL_36:
      v25 = &v36[8 * v35];
      if (v28)
        operator delete(v28);
      v28 = v27;
      v29 = (unint64_t)v25;
      v26 = (double *)v37;
      ++v30;
      v24 = *a1;
      if (v30 >= (a1[1] - *a1) >> 4)
      {
LABEL_108:
        v106 = v27;
        v107 = v26;
        v108 = v25;
        break;
      }
    }
  }
  sub_1000B08EC(a1 + 15, &v106);
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v96)
    operator delete(v96);
  sub_1000B27CC(a1 + 27, a1);
  return a1;
}

void sub_100272AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;

  sub_1002722D4(v28);
  sub_1002722D4(v29);
  sub_1000F7D3C(a11);
  _Unwind_Resume(a1);
}

void sub_100272BD4()
{
  JUMPOUT(0x100272C00);
}

void sub_100272BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void **v27;
  uint64_t v28;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100275CC8((void **)(v28 - 152));
  sub_1000F7D3C((void **)(v28 - 128));
  if (a20)
  {
    a21 = a20;
    operator delete(a20);
  }
  sub_1000E095C((uint64_t)&a18);
  sub_1000F7D3C(v27);
  _Unwind_Resume(a1);
}

void sub_100272C30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  __int128 *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  _QWORD *v18;
  unint64_t v19;

  __p = 0;
  v18 = 0;
  v19 = 0;
  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  while (v3 != v4)
  {
    v6 = (__int128 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 40))(*v3);
    if (*(_QWORD *)v6 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v6 + 40))(*(_QWORD *)v6) & 1) == 0)
    {
      v7 = v18;
      if ((unint64_t)v18 >= v19)
      {
        v5 = sub_1001E3DB8((uint64_t)&__p, v6);
      }
      else
      {
        *v18 = *(_QWORD *)v6;
        v8 = *((_QWORD *)v6 + 1);
        v7[1] = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v5 = v7 + 2;
      }
      v18 = v5;
    }
    v3 += 2;
  }
  sub_100048124((uint64_t **)&__p, a2);
  v11 = __p;
  if (__p)
  {
    v12 = v18;
    v13 = __p;
    if (v18 != __p)
    {
      do
      {
        v14 = (std::__shared_weak_count *)*(v12 - 1);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 2;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v18 = v11;
    operator delete(v13);
  }
}

void sub_100272D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F7D3C((void **)va);
  _Unwind_Resume(a1);
}

void sub_100272D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000F7D3C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100272D98(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  std::string::size_type v13;
  void *__p;
  void *v15[2];
  char v16;
  std::string buf;
  std::string v18;

  v4 = 3;
  if (a3)
    v4 = 15;
  v5 = (uint64_t)&a1[v4];
  v6 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = sub_100276908(v5, v6);
  v13 = v7;
  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
  {
    sub_1000D5048(v15, "");
    sub_100276664("Empty location choices for injection; something must be wrong! choice: ", &buf);
    sub_1001E2B30(&v13, &v18);
    sub_100174738((uint64_t)v15, (uint64_t)&buf, 2);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_9;
LABEL_19:
        operator delete(v15[0]);
LABEL_9:
        sub_1000F2AE4((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
  if (v7 < (v9 - v8) >> 4)
    return v8 + 16 * v7;
  if (qword_100417ED8 == -1)
  {
    v11 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
      goto LABEL_13;
    goto LABEL_12;
  }
  dispatch_once(&qword_100417ED8, &stru_100400570);
  v11 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
  {
LABEL_12:
    v12 = (a1[1] - *a1) >> 4;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v12;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    *(double *)&v18.__r_.__value_.__l.__data_ = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "OOB index error; choice: %{public}zu, size of choices: %{public}zu, rand float: %{public}f",
      (uint8_t *)&buf,
      0x20u);
  }
LABEL_13:
  result = *a1;
  if (a1[1] == *a1)
    sub_1001E2FA0();
  return result;
}

void sub_100272FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100273020(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, __n128 a9@<Q0>, double a10@<D1>)
{
  double v13;
  unsigned int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  void *v58;
  void *v59[2];
  char v60;
  std::string __p;
  __int16 v62;
  int v63;

  v13 = a9.n128_f64[0];
  v18 = *(_DWORD *)(a4 + 12);
  if (v18 >= 2)
  {
    sub_1000D5048(v59, "");
    sub_1001E0F98("You should only call this function if a floor transition happened!", &__p);
    sub_100174738((uint64_t)v59, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v60 < 0)
      operator delete(v59[0]);
    sub_1000F2AE4((uint64_t)&v58);
  }
  *(_BYTE *)a8 = 0;
  v19 = *(_DWORD *)(a4 + 8);
  if (v18)
  {
    v20 = a1 + 28;
    v21 = (_QWORD *)a1[28];
    if (v21)
    {
      v22 = a1 + 28;
      v23 = a1[28];
      do
      {
        v24 = *(_DWORD *)(v23 + 32);
        v25 = v24 < v19;
        if (v24 >= v19)
          v26 = (uint64_t *)v23;
        else
          v26 = (uint64_t *)(v23 + 8);
        if (!v25)
          v22 = (_QWORD *)v23;
        v23 = *v26;
      }
      while (*v26);
      if (v22 != v20)
      {
        v27 = v22[5];
        if (v27)
        {
          v28 = v27 - 1;
LABEL_42:
          v36 = *(_QWORD *)(a1[27] + 40);
          goto LABEL_43;
        }
        if (qword_100417ED8 == -1)
        {
          v38 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            return;
        }
        else
        {
          dispatch_once(&qword_100417ED8, &stru_100400570);
          v38 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            return;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
        v39 = "Failed to find a floor with floor number < %d";
LABEL_34:
        v40 = v38;
        v41 = 8;
LABEL_59:
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, v39, (uint8_t *)&__p, v41);
        return;
      }
      do
      {
        v29 = v21;
        v21 = (_QWORD *)v21[1];
      }
      while (v21);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v20[2];
        v42 = *v29 == (_QWORD)v20;
        v20 = v29;
      }
      while (v42);
    }
    v28 = v29[5];
    goto LABEL_42;
  }
  v30 = a1[28];
  if (!v30)
    goto LABEL_28;
  v31 = a1 + 28;
  v32 = a1[28];
  do
  {
    v33 = *(_DWORD *)(v32 + 32);
    v34 = v19 < v33;
    if (v19 >= v33)
      v35 = (uint64_t *)(v32 + 8);
    else
      v35 = (uint64_t *)v32;
    if (v34)
      v31 = (_QWORD *)v32;
    v32 = *v35;
  }
  while (*v35);
  if (v31 == a1 + 28)
  {
LABEL_28:
    if (qword_100417ED8 == -1)
    {
      v38 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100400570);
      v38 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
    v39 = "Failed to find a floor with floor number > %d";
    goto LABEL_34;
  }
  v36 = v31[5];
  do
  {
    v37 = v30;
    v30 = *(_QWORD *)(v30 + 8);
  }
  while (v30);
  v28 = *(_QWORD *)(v37 + 40);
LABEL_43:
  v43 = 3;
  if (a5)
    v43 = 15;
  v44 = sub_100276938((uint64_t)&a1[v43], v36, v28, a2, a9);
  if (v44 >= (uint64_t)(a1[1] - *a1) >> 4)
    sub_1001E2FA0();
  v45 = (uint64_t *)(*a1 + 16 * v44);
  v46 = *v45;
  sub_1001D550C(a7, a3, *v45, (uint64_t)&__p);
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
  if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47) & a6) == 1)
  {
    nullsub_23(&__p);
LABEL_50:
    v51 = *(_OWORD *)v45;
    *(_OWORD *)(a8 + 8) = *(_OWORD *)v45;
    if (*((_QWORD *)&v51 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v50 = 1;
    *(_BYTE *)a8 = 1;
    goto LABEL_54;
  }
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
  v49 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v48 + 16))(v48, *(double *)&__p.__r_.__value_.__l.__size_ + v13, *(double *)&__p.__r_.__value_.__r.__words[2] + a10);
  nullsub_23(&__p);
  if ((v49 & 1) != 0)
    goto LABEL_50;
  v50 = 0;
LABEL_54:
  if (qword_100417ED8 == -1)
  {
    v54 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      return;
    goto LABEL_56;
  }
  dispatch_once(&qword_100417ED8, &stru_100400570);
  v54 = qword_100417EE0;
  if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_56:
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v45 + 56))(*v45);
    v56 = (_QWORD *)(v55 + 8);
    if (*(char *)(v55 + 31) < 0)
      v56 = (_QWORD *)*v56;
    v57 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v45 + 56))(*v45) + 1616);
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v56;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v57;
    v62 = 1024;
    v63 = v50;
    v39 = "Transitioning from %d, find a floor %{private}s with %d with walkability = %d";
    v40 = v54;
    v41 = 30;
    goto LABEL_59;
  }
}

void sub_1002734F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100273534(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001E93AC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100273574(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, double a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  float v17;
  unint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  const void ***v22;
  unsigned __int8 ***v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  double v48;
  double v49;

  v15 = 3;
  if (a4)
    v15 = 15;
  v16 = (uint64_t)&a1[v15];
  v17 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v18 = sub_100276908(v16, v17);
  if (v18 >= (a1[1] - *a1) >> 4)
    sub_1001E2FA0();
  v19 = (uint64_t *)(*a1 + 16 * v18);
  v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v19 + 56))(*v19) + 1616);
  v21 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3) + 1616);
  if (v20 == v21)
  {
    v22 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v19 + 64))(*v19);
    v23 = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
    if (sub_1000781C4(v22, v23))
    {
      v24 = *v19;
      sub_1001D550C(a6, a3, *v19, (uint64_t)&v47);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25) & a5) == 1)
      {
        nullsub_23(&v47);
        return v19;
      }
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
      v30 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v29 + 16))(v29, v48 + a7, v49 + a8);
      nullsub_23(&v47);
      if ((v30 & 1) != 0)
        return v19;
    }
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, 2) != 0;
    v27 = a1 + 28;
    v28 = a1[28];
    if (!v28)
      return v19;
  }
  else
  {
    v26 = v20 > v21;
    v27 = a1 + 28;
    v28 = a1[28];
    if (!v28)
      return v19;
  }
  v31 = v27;
  do
  {
    v32 = *(_DWORD *)(v28 + 32);
    v33 = v32 < v21;
    if (v32 >= v21)
      v34 = (uint64_t *)v28;
    else
      v34 = (uint64_t *)(v28 + 8);
    if (!v33)
      v31 = (_QWORD *)v28;
    v28 = *v34;
  }
  while (*v34);
  if (v31 != v27 && v21 >= *((_DWORD *)v31 + 8))
  {
    if (v26)
    {
      v35 = (_QWORD *)v31[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v31[2];
          v37 = *v36 == (_QWORD)v31;
          v31 = v36;
        }
        while (!v37);
      }
    }
    else
    {
      v36 = v31;
    }
    if (v36 != v27)
    {
      v38 = v36[5] - !v26;
      if (v26)
        v39 = 1;
      else
        v39 = -1;
      while (1)
      {
        v40 = *a1;
        if (v38 >= (a1[1] - *a1) >> 4)
          break;
        v41 = v38;
        v42 = *(_QWORD *)(v40 + 16 * v38);
        sub_1001D550C(a6, a3, v42, (uint64_t)&v47);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43) & a5 & 1) != 0)
        {
          nullsub_23(&v47);
          return (uint64_t *)(v40 + 16 * v41);
        }
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
        v45 = (*(uint64_t (**)(uint64_t, double, double))(*(_QWORD *)v44 + 16))(v44, v48 + a7, v49 + a8) & 1;
        nullsub_23(&v47);
        v38 = (int)v41 + v39;
        if (v45)
          return (uint64_t *)(v40 + 16 * v41);
      }
    }
  }
  return v19;
}

void sub_100273888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_23(&a9);
  _Unwind_Resume(a1);
}

void sub_10027389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_23(&a9);
  _Unwind_Resume(a1);
}

void sub_1002738B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_23(&a9);
  _Unwind_Resume(a1);
}

void sub_1002738C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_23(&a9);
  _Unwind_Resume(a1);
}

void sub_1002738D8(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100400648;
  v13 = off_100400670;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_100400690;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_1004005A8;
  v18[0] = off_1004005E0;
  v21 = &off_100400618;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_100275EC8();
}

void sub_100273B24(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_100273B38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_100273B50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_100273B9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_100273BC0(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100273C14(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, int a14, uint64_t a15, _QWORD *a16)
{
  uint64_t *v23;
  uint64_t *v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t *v33;
  unsigned __int8 v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  double v45;
  double v46;
  NSObject *v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v85;
  double v87;
  __int128 v88;
  char v89;
  char v90[8];
  double v91;
  uint64_t v92;
  _BYTE v93[32];
  _BYTE v94[32];
  _BYTE v95[1665];
  __int128 v96;
  char v97;
  int64x2_t v98;
  _BYTE v99[40];
  uint8_t v100[40];
  uint8_t buf[4];
  uint64_t v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  _BYTE v108[18];
  __int16 v109;
  _BYTE v110[10];
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;

  v23 = sub_1000966BC();
  v24 = v23;
  v25 = atomic_load((unsigned __int8 *)v23 + 20);
  if ((v25 & 1) == 0 && !*((_BYTE *)v23 + 16))
  {
    *((_BYTE *)v23 + 17) = sub_1000AC110((uint64_t)v23, (_BYTE *)v23 + 9);
    *((_BYTE *)v24 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v24 + 20);
    v27 = a15;
    v26 = a16;
    v28 = a14;
    if (*((_BYTE *)v24 + 17))
      goto LABEL_4;
LABEL_6:
    v87 = 0.5;
    v31 = 0.5;
    goto LABEL_7;
  }
  v27 = a15;
  v26 = a16;
  v28 = a14;
  if (!*((_BYTE *)v23 + 17))
    goto LABEL_6;
LABEL_4:
  sub_100094A58((uint64_t)v100, v27);
  v29 = sub_10027448C(a1, a2, a4, a8, v28, (uint64_t)v100, v26, a10, a11);
  v87 = v30;
  v31 = v29;
  sub_100094C10((uint64_t)v100);
LABEL_7:
  v32 = sub_100096748();
  v33 = v32;
  v34 = atomic_load((unsigned __int8 *)v32 + 20);
  if ((v34 & 1) == 0 && !*((_BYTE *)v32 + 16))
  {
    v38 = sub_1000AC110((uint64_t)v32, (_BYTE *)v32 + 9);
    *((_BYTE *)v33 + 17) = v38;
    *((_BYTE *)v33 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v33 + 20);
    if (v38)
      goto LABEL_10;
LABEL_12:
    v85 = 0.5;
    v37 = 0.5;
    goto LABEL_13;
  }
  if (!*((_BYTE *)v32 + 17))
    goto LABEL_12;
LABEL_10:
  sub_100094A58((uint64_t)v99, v27);
  v35 = sub_10027448C(a1, a3, a4, a8, v28, (uint64_t)v99, v26, a12, a13);
  v85 = v36;
  v37 = v35;
  sub_100094C10((uint64_t)v99);
LABEL_13:
  v98 = vdupq_n_s64(0x7FF4000000000000uLL);
  if (a8 == 2 || !*(_BYTE *)a5)
  {
    __asm { FMOV            V0.2D, #0.5 }
    v98 = _Q0;
    goto LABEL_34;
  }
  sub_1000B53CC(v95, a1);
  sub_100159F88((uint64_t)v95, buf);
  sub_1001A23D4((uint64_t)v94, a5 + 40);
  sub_100159CBC((uint64_t)buf, (uint64_t)v94, (uint64_t)&v96);
  sub_100159E28((uint64_t)&v96, (uint64_t)v90);
  nullsub_22(v94);
  v39 = *(std::__shared_weak_count **)&v110[2];
  if (*(_QWORD *)&v110[2])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v110[2] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *(std::__shared_weak_count **)&v108[6];
  if (*(_QWORD *)&v108[6])
  {
    v43 = (unint64_t *)(*(_QWORD *)&v108[6] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  nullsub_22(buf);
  sub_100073738(v95);
  sub_1001A2040((uint64_t)v93, (uint64_t)v90);
  v45 = sub_100316980(a1, (uint64_t)v93, 1, 1);
  nullsub_23(v93);
  v46 = *(double *)(a5 + 104);
  if (qword_100417ED8 == -1)
  {
    v47 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_27:
      v48 = *(_QWORD *)(a5 + 48);
      v49 = *(double *)(a5 + 56);
      v50 = a1 + 8;
      if (*(char *)(a1 + 31) < 0)
        v50 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 134284803;
      v102 = v48;
      v103 = 2049;
      v104 = v49;
      v105 = 2048;
      v106 = v91;
      v107 = 2048;
      *(_QWORD *)v108 = v92;
      *(_WORD *)&v108[8] = 2048;
      *(double *)&v108[10] = v45;
      v109 = 2081;
      *(_QWORD *)v110 = v50;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "lat,lng %{private}.8f,%{private}.8f is x,y %f,%f is %f m outside of %{private}s", buf, 0x3Eu);
    }
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400570);
    v47 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
  }
  v51 = sub_1000F6FDC(v45, v46);
  if (v26)
    sub_10019E8DC((uint64_t)v26, v45);
  *(double *)v98.i64 = 1.0 - v51;
  *(double *)&v98.i64[1] = v51;
  nullsub_23(v90);
LABEL_34:
  sub_1002684F0(*a4, a1, (uint64_t)v90);
  sub_100278214(*a6, (uint64_t)v90, (uint64_t)&v96);
  sub_10026FD94(*a7, (uint64_t)&v98, (uint64_t)&v88);
  v57 = a12;
  v58 = v31;
  v59 = v31 * v37 * *(double *)&v98.i64[1];
  v60 = v87 * v85 * *(double *)v98.i64;
  v61 = v59 / (v59 + v60);
  v62 = v60 / (v59 + v60);
  v63 = v62;
  v64 = v61;
  if (v97)
  {
    v65 = *(double *)(*a6 + 16);
    v66 = *(double *)(*a6 + 24);
    if (v62 > v65)
      v65 = v62;
    v67 = 1.0 / v65 + -1.0;
    if (*(double *)&v96 > v66)
      v66 = *(double *)&v96;
    *(double *)&v96 = v66;
    *((double *)&v96 + 1) = 1.0 - v66;
    v63 = 1.0 / (v67 * (1.0 - v66) / v66 + 1.0);
    v64 = 1.0 - v63;
  }
  if (v89)
  {
    v68 = *(double *)(*a7 + 16);
    v69 = *(double *)(*a7 + 24);
    if (v63 > v68)
      v68 = v63;
    v70 = 1.0 / v68 + -1.0;
    if (*(double *)&v88 > v69)
      v69 = *(double *)&v88;
    *(double *)&v88 = v69;
    *((double *)&v88 + 1) = 1.0 - v69;
    v63 = 1.0 / (v70 * (1.0 - v69) / v69 + 1.0);
    v64 = 1.0 - v63;
  }
  if (qword_100417ED8 == -1)
  {
    v71 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_55;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400570);
    v71 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_55;
  }
  v74 = *(_QWORD *)(a1 + 8);
  v73 = a1 + 8;
  v72 = v74;
  if (*(char *)(v73 + 23) >= 0)
    v72 = v73;
  v75 = *((_QWORD *)&v96 + 1);
  v76 = 0x7FF4000000000000;
  if (!v97)
    v75 = 0x7FF4000000000000;
  if (v89)
    v76 = *((_QWORD *)&v88 + 1);
  *(_DWORD *)buf = 136384259;
  v102 = v72;
  v103 = 2049;
  v104 = v64;
  v105 = 2049;
  v106 = v63;
  v107 = 2048;
  *(double *)v108 = a10;
  *(_WORD *)&v108[8] = 2048;
  *(double *)&v108[10] = a11;
  v109 = 2048;
  *(double *)v110 = v57;
  *(_WORD *)&v110[8] = 2048;
  v111 = a13;
  v112 = 2048;
  v113 = v58;
  v114 = 2048;
  v115 = v87;
  v116 = 2048;
  v117 = v37;
  v118 = 2048;
  v119 = v85;
  v120 = 2049;
  v121 = v98.i64[1];
  v122 = 2049;
  v123 = v98.i64[0];
  v124 = 2050;
  v125 = v75;
  v126 = 2050;
  v127 = v76;
  _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "id %{private}s p('xIn')= %{private}f p('xOut')=%{private}f indoorSurveyMinWiFi=%f indoorSurveyMeanWiFi=%f indoorSurveyMinBeacon=%f indoorSurveyMeanBeacon=%f p(z_w|'xIn')=%f p(z_w|'xOut')=%f p(z_b|'xIn')=%f p(z_b|'xOut')=%f p('xIn'|z_g)=%{private}f p('xOut'|z_g)=%{private}f p('xIn'|z_z)=%{public}f p('xIn'|z_oe)=%{public}f", buf, 0x98u);
LABEL_55:
  v77 = v58;
  v78 = v87 + v58;
  v79 = v77 / v78;
  if (v26)
  {
    sub_1000C9668((uint64_t)v26, v77 / v78);
    sub_10019E8F0((uint64_t)v26, *(double *)&v98.i64[1]);
    sub_10019E8D4((uint64_t)v26, a10);
    sub_10007AB6C((uint64_t)v26, a11);
  }
  *(double *)a9 = v63;
  *(double *)(a9 + 8) = v64;
  *(int64x2_t *)(a9 + 16) = v98;
  *(double *)(a9 + 32) = v87 / v78;
  *(double *)(a9 + 40) = v79;
  *(double *)(a9 + 48) = v85 / (v85 + v37);
  *(double *)(a9 + 56) = v37 / (v85 + v37);
  *(_OWORD *)(a9 + 64) = v96;
  *(_BYTE *)(a9 + 80) = v97;
  *(_OWORD *)(a9 + 88) = v88;
  *(_BYTE *)(a9 + 104) = v89;
  sub_1000C2070(*a7, a9 + 112);
  *(double *)(a9 + 136) = v62;
  *(double *)(a9 + 144) = v61;
  *(_BYTE *)(a9 + 152) = 1;
}

void sub_100274378(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x100273DB0);
  }
  _Unwind_Resume(a1);
}

double sub_10027448C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, _QWORD *a7, double a8, double a9)
{
  double v9;
  const void ***v17;
  _QWORD *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  uint64_t v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *__p[2];
  void *v49[2];
  char v50;
  std::string buf;
  void *v52;
  __int16 v53;
  double v54;
  __int16 v55;
  _BYTE v56[18];
  __int16 v57;
  double v58;
  _BYTE v59[10];
  __int16 v60;
  double v61;
  __int16 v62;
  _BYTE v63[10];
  double v64;
  char v65;

  v46 = a9;
  v47 = a8;
  v17 = sub_1002682F4(*a3, a1);
  v18 = (_QWORD *)sub_10005D8AC(*a3);
  v45 = sub_1002D36F8(v17, a2, v18, a6, 0, a7);
  if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sub_1000D5048(v49, "");
    sub_100276664("Invalid cumulative coarse indoor weight: %f; this value must be finite!", &buf);
    sub_10016EE34(&v45, (std::string *)&v52);
    sub_100174738((uint64_t)v49, (uint64_t)&buf, 2);
    if ((v56[3] & 0x80000000) != 0)
    {
      operator delete(v52);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_38:
        if ((v50 & 0x80000000) == 0)
          goto LABEL_39;
LABEL_42:
        operator delete(v49[0]);
LABEL_39:
        sub_1000F2AE4((uint64_t)__p);
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v50 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_42;
  }
  if (a5 == 1)
  {
    v27 = exp(v45 - v47);
    if (v27 == INFINITY)
      v9 = 1.0;
    else
      v9 = v27;
    if (v27 == INFINITY)
      v28 = 0.0;
    else
      v28 = 1.0;
    if (qword_100417ED8 == -1)
    {
      v29 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return v9;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_100400570);
      v29 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return v9;
    }
    v32 = *(_QWORD *)(a1 + 8);
    v31 = a1 + 8;
    v30 = v32;
    if (*(char *)(v31 + 23) >= 0)
      v30 = v31;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316419;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v45;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v52 = *(void **)&v47;
    v53 = 2048;
    v54 = v9;
    v55 = 2048;
    *(double *)v56 = v28;
    *(_WORD *)&v56[8] = 2048;
    *(double *)&v56[10] = v9 / (v9 + v28);
    v33 = "id %s: scanCount=%{private}f 50%%indoorProbWeight=%f indoorOutdoorOdds=%f:%f indoorProbThroughLogistic=%f";
    v34 = v29;
    v35 = 62;
    goto LABEL_34;
  }
  if (!a5)
  {
    v9 = 0.5 / v46;
    v44 = v46 * (0.5 / v46);
    if (fabs(v44 + -0.5) < 0.000001)
    {
      v19 = v9 * v47;
      v20 = v46 - v47;
      v21 = v9 * (v46 - v47);
      v42 = v21;
      v43 = v9 * v47;
      if (fabs(v9 * v47 + v21 + -0.5) < 0.000001)
      {
        v22 = v19 + v21 * 0.5;
        if (fabs(v22 + 1.0 - v22 + -1.0) >= 0.000001)
        {
          sub_1000D5048(v49, "");
          sub_10023D100("The outdoor PDF area should be 1! (First)", &buf);
          sub_100174738((uint64_t)v49, (uint64_t)&buf, 1);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v50 < 0)
            operator delete(v49[0]);
          sub_1000F2AE4((uint64_t)__p);
        }
        v23 = v9 + (1.0 - v22 + 1.0 - v22) / v47;
        v24 = -(v23 - v9) / v47;
        v25 = -v9 / v20;
        if (fabs(v19+ v20 * (v25 * v47 - v25 * v46 - (v25 * v46 - v25 * v46)) * 0.5+ v47 * (v23 + v24 * 0.0 - (v23 + v24 * v47)) * 0.5+ -1.0) >= 0.00001)
        {
          sub_1000D5048(v49, "");
          sub_100227518("The outdoor PDF area should be 1! (Second)", &buf);
          sub_100174738((uint64_t)v49, (uint64_t)&buf, 1);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v50 < 0)
            operator delete(v49[0]);
          sub_1000F2AE4((uint64_t)__p);
        }
        v26 = 0.5;
        if (a4 == 1)
        {
          v9 = 0.5;
        }
        else if (v45 >= v47)
        {
          if (v45 > v46 || v47 > v45)
            v26 = 0.0;
          else
            v26 = v25 * v45 - v25 * v46;
        }
        else
        {
          v26 = v23 + v24 * v45;
        }
        if (qword_100417ED8 != -1)
        {
          dispatch_once(&qword_100417ED8, &stru_100400570);
          v37 = qword_100417EE0;
          if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
            return v9;
          goto LABEL_31;
        }
        v37 = qword_100417EE0;
        if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_31:
          v40 = *(_QWORD *)(a1 + 8);
          v39 = a1 + 8;
          v38 = v40;
          if (*(char *)(v39 + 23) >= 0)
            v38 = v39;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136383235;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v45;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          v52 = *(void **)&v47;
          v53 = 2048;
          v54 = v46;
          v55 = 2048;
          *(double *)v56 = v9;
          *(_WORD *)&v56[8] = 2048;
          *(double *)&v56[10] = v26;
          v57 = 2048;
          v58 = v44;
          *(_WORD *)v59 = 2048;
          *(double *)&v59[2] = v24;
          v60 = 2048;
          v61 = v23;
          v62 = 2048;
          *(double *)v63 = v25;
          *(_WORD *)&v63[8] = 2048;
          v64 = -(v25 * v46);
          v33 = "id %{private}s: scanCount= %{private}f indoorSurveyMin= %f indoorSurveyMean= %f p(z_w|'xIn')= %f p(z_w|'"
                "xOut')= %f indoorUniformPDFValueBelowMean= %f outdoorPDFSlopeBelowMin= %f outdoorPDFYInterceptBelowMin=%"
                "f outdoorPDFSlopeBetweenMinAndMean=%f outdoorPDFYIntereceptBetweenMinAndMean=%f";
          v34 = v37;
          v35 = 112;
LABEL_34:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)&buf, v35);
          return v9;
        }
        return v9;
      }
      sub_1000D5048(v49, "");
      sub_1002766FC("The indoor PDF area below the mean should be 0.5! (1) indoorOnTileMean: %f, indoorOnTileMin: %f, indoorUinformPDFAreaBelowMin: %f, indoorUniformPDFAreaAboveMin: %f", &buf);
      sub_10016EE34(&v46, (std::string *)&v52);
      sub_10016EE34(&v47, (std::string *)&v56[4]);
      sub_10016EE34(&v43, (std::string *)v59);
      sub_10016EE34(&v42, (std::string *)&v63[2]);
      sub_100174738((uint64_t)v49, (uint64_t)&buf, 5);
      if (v65 < 0)
      {
        operator delete(*(void **)&v63[2]);
        if ((v63[1] & 0x80000000) == 0)
        {
LABEL_53:
          if ((SHIBYTE(v58) & 0x80000000) == 0)
            goto LABEL_54;
          goto LABEL_77;
        }
      }
      else if ((v63[1] & 0x80000000) == 0)
      {
        goto LABEL_53;
      }
      operator delete(*(void **)v59);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_54:
        if ((v56[3] & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_78;
      }
LABEL_77:
      operator delete(*(void **)&v56[4]);
      if ((v56[3] & 0x80000000) == 0)
      {
LABEL_55:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_56;
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v52);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if ((v50 & 0x80000000) == 0)
          goto LABEL_57;
LABEL_80:
        operator delete(v49[0]);
LABEL_57:
        sub_1000F2AE4((uint64_t)__p);
      }
LABEL_79:
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v50 & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_80;
    }
    sub_1000D5048(v49, "");
    sub_1002766B0("The indoor PDF area below the mean should be 0.5! (0) indoorOnTileMean: %f, indoorOnTileMin: %f, indoorUniformPDFAreaBelowMean: %f", &buf);
    sub_10016EE34(&v46, (std::string *)&v52);
    sub_10016EE34(&v47, (std::string *)&v56[4]);
    sub_10016EE34(&v44, (std::string *)v59);
    sub_100174738((uint64_t)v49, (uint64_t)&buf, 4);
    if ((v63[1] & 0x80000000) != 0)
    {
      operator delete(*(void **)v59);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v56[3] & 0x80000000) == 0)
          goto LABEL_46;
        goto LABEL_72;
      }
    }
    else if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(*(void **)&v56[4]);
    if ((v56[3] & 0x80000000) == 0)
    {
LABEL_46:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v52);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if ((v50 & 0x80000000) == 0)
        goto LABEL_48;
LABEL_74:
      operator delete(v49[0]);
LABEL_48:
      sub_1000F2AE4((uint64_t)__p);
    }
LABEL_73:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v50 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_74;
  }
  return v9;
}

void sub_100274C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100274D70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double v19;
  double v20;
  NSObject *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  _BYTE v33[32];
  _BYTE v34[1920];
  _BYTE v35[24];
  char v36[8];
  double v37;
  uint64_t v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  _BYTE v46[18];
  __int16 v47;
  _BYTE v48[10];
  uint64_t v49;

  v8 = sub_100315874();
  v9 = v8;
  v10 = atomic_load((unsigned __int8 *)v8 + 20);
  if ((v10 & 1) != 0 || *((_BYTE *)v8 + 16))
  {
    v11 = a2;
    if (!(*((unsigned __int8 *)v9 + 17) | *(unsigned __int8 *)(a1 + 1860)))
      goto LABEL_4;
LABEL_25:
    v12 = sub_10021A440(v11);
    if (*(_BYTE *)v12)
      goto LABEL_5;
LABEL_26:
    v25 = 0.0;
    v26 = 1.0;
    if (!a3)
      goto LABEL_28;
    goto LABEL_27;
  }
  v27 = sub_1000AC110((uint64_t)v8, (_BYTE *)v8 + 9);
  *((_BYTE *)v9 + 17) = v27;
  *((_BYTE *)v9 + 16) = 1;
  atomic_store(1u, (unsigned __int8 *)v9 + 20);
  v11 = a2;
  if (v27 | *(unsigned __int8 *)(a1 + 1860))
    goto LABEL_25;
LABEL_4:
  v12 = (uint64_t)sub_10021A3C8(v11);
  if (!*(_BYTE *)v12)
    goto LABEL_26;
LABEL_5:
  sub_1000B53CC(v34, a1);
  sub_100159F88((uint64_t)v34, buf);
  sub_1001A23D4((uint64_t)v33, v12 + 40);
  sub_100159CBC((uint64_t)buf, (uint64_t)v33, (uint64_t)v35);
  sub_100159E28((uint64_t)v35, (uint64_t)v36);
  nullsub_22(v33);
  v13 = *(std::__shared_weak_count **)&v48[2];
  if (*(_QWORD *)&v48[2])
  {
    v14 = (unint64_t *)(*(_QWORD *)&v48[2] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&v46[6];
  if (*(_QWORD *)&v46[6])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v46[6] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  nullsub_22(buf);
  sub_100073738(v34);
  sub_1001A2040((uint64_t)v32, (uint64_t)v36);
  v19 = sub_100317888((_QWORD *)a1, (uint64_t)v32, 1, 1, 1, 0.0);
  nullsub_23(v32);
  v20 = *(double *)(v12 + 104);
  if (qword_100417ED8 == -1)
  {
    v21 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400570);
    v21 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
  }
  v22 = *(_QWORD *)(v12 + 48);
  v23 = *(double *)(v12 + 56);
  v24 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    v24 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)buf = 134284803;
  v40 = v22;
  v41 = 2049;
  v42 = v23;
  v43 = 2048;
  v44 = v37;
  v45 = 2048;
  *(_QWORD *)v46 = v38;
  *(_WORD *)&v46[8] = 2048;
  *(double *)&v46[10] = v19;
  v47 = 2081;
  *(_QWORD *)v48 = v24;
  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "lat,lng (%{private}f, %{private}f) is x,y (%f,%f) is %f m outside of %{private}s", buf, 0x3Eu);
LABEL_20:
  v25 = sub_1000F6FDC(v19, v20);
  if (a3)
    sub_10019E8DC(a3, v19);
  v26 = 1.0 - v25;
  nullsub_23(v36);
  if (a3)
LABEL_27:
    sub_10019E8F0(a3, v25);
LABEL_28:
  if (qword_100417ED8 == -1)
  {
    v28 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_33;
  }
  else
  {
    dispatch_once(&qword_100417ED8, &stru_100400570);
    v28 = qword_100417EE0;
    if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
      goto LABEL_33;
  }
  v31 = *(_QWORD *)(a1 + 8);
  v30 = a1 + 8;
  v29 = v31;
  if (*(char *)(v30 + 23) >= 0)
    v29 = v30;
  *(_DWORD *)buf = 136382211;
  v40 = v29;
  v41 = 2049;
  v42 = v25;
  v43 = 2049;
  v44 = v26;
  v45 = 2049;
  *(double *)v46 = v25;
  *(_WORD *)&v46[8] = 2049;
  *(double *)&v46[10] = v26;
  v47 = 2050;
  *(_QWORD *)v48 = 0x7FF4000000000000;
  *(_WORD *)&v48[8] = 2050;
  v49 = 0x7FF4000000000000;
  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "id %{private}s p('xIn')= %{private}f p('xOut')=%{private}f p('xIn'|z_g)=%{private}f p('xOut'|z_g)=%{private}f p('xIn'|z_z)=%{public}f p('xIn'|z_oe)=%{public}f", buf, 0x48u);
LABEL_33:
  *(double *)a4 = v26;
  *(double *)(a4 + 8) = v25;
  *(double *)(a4 + 16) = v26;
  *(double *)(a4 + 24) = v25;
  *(_OWORD *)(a4 + 32) = xmmword_100396010;
  *(_OWORD *)(a4 + 48) = xmmword_100396010;
  *(_QWORD *)(a4 + 64) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  *(_BYTE *)(a4 + 128) = 0;
  *(double *)(a4 + 136) = v26;
  *(double *)(a4 + 144) = v25;
  *(_BYTE *)(a4 + 152) = 1;
}

void sub_1002751C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100274FF0);
  }
  _Unwind_Resume(exception_object);
}

void sub_100275264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  nullsub_22((uint64_t *)va);
  sub_10015A328(v6 - 176);
  sub_100073738(va1);
  _Unwind_Resume(a1);
}

char **sub_100275288(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 88)
    {
      if (*(i - 48))
        *(i - 48) = 0;
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002752DC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  char *v17;
  void *__p;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char *v23;
  void *v24;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 288))
  {
    sub_100043C90(a2, (uint64_t *)(a1 + 296));
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 64) + 16))(&v24);
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v4 = v25 - (_QWORD)v24;
    if (v25 != (_QWORD)v24)
    {
      v5 = v4 / 208;
      if ((unint64_t)(v4 / 208) >> 61)
        sub_1000D02C0();
      v21 = operator new(8 * v5);
      v23 = (char *)v21 + 8 * v5;
      memset_pattern16(v21, &unk_100394090, 8 * v5);
      v22 = v23;
    }
    sub_10004525C(&v16, (uint64_t)&v21, (uint64_t *)&v24, *(_QWORD *)(a1 + 56));
    if (*(_BYTE *)(a1 + 288))
    {
      if ((void **)(a1 + 296) != &v16)
      {
        sub_100232970((uint64_t *)(a1 + 296), (uint64_t)v16, (uint64_t)v17, 0x4EC4EC4EC4EC4EC5 * ((v17 - (_BYTE *)v16) >> 4));
        sub_100199588((_QWORD *)(a1 + 320), (char *)__p, v19, (v19 - (_BYTE *)__p) >> 3);
      }
      *(_QWORD *)(a1 + 344) = v20;
    }
    else
    {
      sub_100043C90((_QWORD *)(a1 + 296), (uint64_t *)&v16);
      *(_BYTE *)(a1 + 288) = 1;
    }
    sub_100043C90(a2, (uint64_t *)(a1 + 296));
    if (__p)
    {
      v19 = (char *)__p;
      operator delete(__p);
    }
    v6 = (char *)v16;
    if (v16)
    {
      v7 = v17;
      v8 = v16;
      if (v17 != v16)
      {
        do
        {
          v10 = *((_DWORD *)v7 - 44);
          if (v10 == v10 >> 31)
          {
            if (*(v7 - 128))
              *(v7 - 128) = 0;
          }
          else
          {
            v9 = *((_QWORD *)v7 - 21);
            if (v10 < 0)
            {
              if (v9)
                (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            }
            else
            {
              (*(void (**)(char *))v9)(v7 - 168);
            }
          }
          v7 -= 208;
        }
        while (v7 != v6);
        v8 = v16;
      }
      v17 = v6;
      operator delete(v8);
    }
    if (v21)
    {
      v22 = v21;
      operator delete(v21);
    }
    v11 = (uint64_t)v24;
    if (v24)
    {
      v12 = v25;
      v13 = v24;
      if ((void *)v25 != v24)
      {
        do
        {
          v15 = *(_DWORD *)(v12 - 176);
          if (v15 == v15 >> 31)
          {
            if (*(_BYTE *)(v12 - 128))
              *(_BYTE *)(v12 - 128) = 0;
          }
          else
          {
            v14 = *(_QWORD *)(v12 - 168);
            if (v15 < 0)
            {
              if (v14)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            }
            else
            {
              (*(void (**)(uint64_t))v14)(v12 - 168);
            }
          }
          v12 -= 208;
        }
        while (v12 != v11);
        v13 = v24;
      }
      v25 = v11;
      operator delete(v13);
    }
  }
}

void sub_100275560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
    operator delete(__p);
  sub_10021908C((void **)(v18 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_10027559C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  sub_100275B9C(a1, a2, a3, a4);
  v10 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a5 + 56))(*a5) + 1616);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 56))(*a4);
  if (v10 < *(_DWORD *)(result + 1616))
  {
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 56))(*a4) + 1616);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3);
    if (v14 < *(_DWORD *)(result + 1616))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3) + 1616);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
      if (v17 < *(_DWORD *)(result + 1616))
      {
        v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2) + 1616);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
        if (v20 < *(_DWORD *)(result + 1616))
        {
          v21 = *a1;
          *a1 = *a2;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10027571C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2) + 1616);
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1) + 1616);
  v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3) + 1616);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
  v10 = *(_DWORD *)(result + 1616);
  if (v6 < v7)
  {
    v11 = *a1;
    if (v8 >= v10)
    {
      *a1 = *a2;
      *a2 = v11;
      v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3) + 1616);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
      if (v20 >= *(_DWORD *)(result + 1616))
        return result;
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v12 = a3 + 1;
      v13 = a2 + 1;
    }
    else
    {
      *a1 = *a3;
      *a3 = v11;
      v12 = a3 + 1;
      v13 = a1 + 1;
    }
    v16 = v12;
    goto LABEL_10;
  }
  if (v8 < v10)
  {
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    v16 = a2 + 1;
    v15 = a2[1];
    a2[1] = a3[1];
    a3[1] = v15;
    v17 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2) + 1616);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
    if (v17 < *(_DWORD *)(result + 1616))
    {
      v18 = *a1;
      *a1 = *a2;
      v13 = a1 + 1;
      *a2 = v18;
LABEL_10:
      v22 = *v13;
      *v13 = *v16;
      *v16 = v22;
    }
  }
  return result;
}

BOOL sub_1002758B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(a2 - 2) + 56))(*(a2 - 2)) + 1616);
      if (v6 >= *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1) + 1616))
        return 1;
      v7 = *a1;
      *a1 = *(a2 - 2);
      *(a2 - 2) = v7;
      v8 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v8;
      return 1;
    case 3:
      sub_10027571C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_100275B9C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_10027559C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      sub_10027571C(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v10 + 56))(*v10) + 1616);
    if (v12 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v9 + 56))(*v9) + 1616))
    {
      v28 = *(_OWORD *)v10;
      *v10 = 0;
      v10[1] = 0;
      v13 = v10;
      while (1)
      {
        v14 = v13;
        v13 = v9;
        v15 = *(_OWORD *)v9;
        *v9 = 0;
        v9[1] = 0;
        v16 = (std::__shared_weak_count *)v14[1];
        *(_OWORD *)v14 = v15;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v19 = v28;
        if (v13 == a1)
          break;
        v9 = v13 - 2;
        v20 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 56))(v28) + 1616);
        if (v20 >= *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v13 - 2) + 56))(*(v13 - 2)) + 1616))
        {
          v21 = *((_QWORD *)&v28 + 1);
          v29 = 0uLL;
          v22 = (std::__shared_weak_count *)v13[1];
          *v13 = v19;
          v13[1] = v21;
          if (!v22)
            goto LABEL_24;
          goto LABEL_20;
        }
      }
      v23 = *((_QWORD *)&v28 + 1);
      v29 = 0uLL;
      v22 = (std::__shared_weak_count *)a1[1];
      *a1 = v19;
      a1[1] = v23;
      if (!v22)
        goto LABEL_24;
LABEL_20:
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
LABEL_24:
      if (*((_QWORD *)&v29 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v29 + 1) + 16))(*((_QWORD *)&v29 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v29 + 1));
        }
      }
      if (++v11 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

void sub_100275B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000E095C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100275B9C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  sub_10027571C(a1, a2, a3);
  v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 56))(*a4) + 1616);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3);
  if (v8 < *(_DWORD *)(result + 1616))
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 56))(*a3) + 1616);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2);
    if (v12 < *(_DWORD *)(result + 1616))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 56))(*a2) + 1616);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 56))(*a1);
      if (v15 < *(_DWORD *)(result + 1616))
      {
        v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

void **sub_100275CC8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 6);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_100275DA4(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100275DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100400690;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_1004005A8;
  *(_QWORD *)(a1 + 16) = off_1004005E0;
  *(_QWORD *)(a1 + 56) = &off_100400618;
  return a1;
}

void sub_100275E64(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_100275E78(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100275EC8()
{
  operator new();
}

void sub_1002760E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100276104(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100276120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100276134(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_100276184(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_1002761E8()
{
  operator new();
}

void sub_1002762BC()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_1002762F8(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_100275DD0((uint64_t)exception, a1);
}

void sub_100276334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100276348(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100276398(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_1002763FC()
{
  sub_1002761E8();
}

void sub_10027640C(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100275DD0((uint64_t)exception, v1);
}

void sub_100276450(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100276464(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_1002764BC(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_100276528(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10027658C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002765DC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_100276640(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

std::string *sub_100276664@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100276694(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1002766B0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002766E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1002766FC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10027672C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_100276748(__n128 *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __n128 result;
  unint64_t v12;

  v4 = (void **)&a1->n128_u64[1];
  v5 = a1->n128_i64[1];
  if (v5)
  {
    v6 = a1[1].n128_i64[0];
    v7 = (void *)a1->n128_u64[1];
    if (v6 != v5)
    {
      do
      {
        v9 = *(_DWORD *)(v6 - 176);
        if (v9 == v9 >> 31)
        {
          if (*(_BYTE *)(v6 - 128))
            *(_BYTE *)(v6 - 128) = 0;
        }
        else
        {
          v8 = *(_QWORD *)(v6 - 168);
          if (v9 < 0)
          {
            if (v8)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          }
          else
          {
            (*(void (**)(uint64_t))v8)(v6 - 168);
          }
        }
        v6 -= 208;
      }
      while (v6 != v5);
      v7 = *v4;
    }
    a1[1].n128_u64[0] = v5;
    operator delete(v7);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(__n128 *)((char *)a1 + 8) = *(__n128 *)a2;
  a1[1].n128_u64[1] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = (void *)a1[2].n128_u64[0];
  if (v10)
  {
    a1[2].n128_u64[1] = (unint64_t)v10;
    operator delete(v10);
    a1[2].n128_u64[0] = 0;
    a1[2].n128_u64[1] = 0;
    a1[3].n128_u64[0] = 0;
  }
  result = *(__n128 *)(a2 + 24);
  a1[2] = result;
  v12 = *(_QWORD *)(a2 + 48);
  a1[3].n128_u64[0] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  a1[3].n128_u64[1] = v12;
  return result;
}

uint64_t sub_100276850()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002768AC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100276908(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t *v6;

  v4 = *(_QWORD *)(a1 + 32);
  v2 = a1 + 32;
  v3 = v4;
  if (v4)
  {
    v5 = a2;
    do
    {
      v6 = (uint64_t *)(v3 + 8);
      if (*(double *)(v3 + 32) >= v5)
      {
        v6 = (uint64_t *)v3;
        v2 = v3;
      }
      v3 = *v6;
    }
    while (*v6);
  }
  return *(_QWORD *)(v2 + 40);
}

uint64_t sub_100276938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t *v13;

  v6 = *(_QWORD *)(a1 + 72);
  if (a2)
  {
    a5.n128_u64[0] = *(_QWORD *)(v6 + 8 * a2 - 8);
    a5.n128_f32[0] = a5.n128_f64[0];
  }
  else
  {
    a5.n128_u32[0] = 0;
  }
  v7 = *(double *)(v6 + 8 * a3);
  (*(void (**)(uint64_t, __n128, float))(*(_QWORD *)a4 + 40))(a4, a5, v7);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = a1 + 32;
  v9 = v11;
  if (v11)
  {
    v12 = v8;
    do
    {
      v13 = (uint64_t *)(v9 + 8);
      if (*(double *)(v9 + 32) >= v12)
      {
        v13 = (uint64_t *)v9;
        v10 = v9;
      }
      v9 = *v13;
    }
    while (*v13);
  }
  return *(_QWORD *)(v10 + 40);
}

uint64_t sub_1002769B8()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100276A14()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void **sub_100276A70(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;
        v5 = v6;
        if (v6)
          operator delete(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100276AD8(uint64_t a1)
{
  sub_10004AAA0(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

double sub_100276B00(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 64) + 64);
}

int32x2_t sub_100276B0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v11;
  void *__p[2];
  char v13;

  if (!*(_QWORD *)(a1 + 64))
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v13 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v11);
  }
  v4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a3 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a3 + 32) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 152);
  return sub_1001D3220(a3, a2);
}

void sub_100276BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100276C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1001D3250(v1);
  _Unwind_Resume(a1);
}

double sub_100276C24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  void *v6;
  void *__p[2];
  char v8;

  if (!*(_QWORD *)(a1 + 64))
  {
    sub_1000D5048(__p, "");
    sub_100174738((uint64_t)__p, 0, 0);
    if (v8 < 0)
      operator delete(__p[0]);
    sub_1000F2AE4((uint64_t)&v6);
  }
  v4 = (unsigned int *)sub_1001D3800(a3, (uint64_t *)(a1 + 64));
  return sub_1001D3D48(v4, a2);
}

void sub_100276CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100276CE0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1001D3A8C(v1);
  _Unwind_Resume(a1);
}

void sub_100276CF4(uint64_t a1@<X0>, int **a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  int *v7;
  unint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  __int128 v14;
  void *__p;
  void *v16;
  _DWORD *i;
  void *v18;
  void *v19[2];
  char v20;
  std::string v21;

  __p = 0;
  v16 = 0;
  i = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * (((char *)v7 - (char *)*a2) >> 4);
    if (v8 >> 59)
      sub_1000D02C0();
    v9 = operator new(0xD89D89D89D89D8A0 * (((char *)v7 - (char *)*a2) >> 4));
    __p = v9;
    v16 = v9;
    for (i = &v9[8 * v8]; v6 != v7; v6 += 52)
    {
      while (v9 >= i)
      {
        v9 = sub_1001D7E30(&__p, v6);
        v16 = v9;
        v6 += 52;
        if (v6 == v7)
          goto LABEL_12;
      }
      v10 = v9 + 2;
      v12 = v6 + 2;
      v11 = *v6;
      if (v11 == v11 >> 31)
      {
        *v10 = *v12;
        v13 = v11;
      }
      else
      {
        v14 = *(_OWORD *)v12;
        v9[6] = v6[6];
        *(_OWORD *)v10 = v14;
        v13 = *v6;
        v11 = *v6 >> 31;
      }
      *v9 = v13 ^ v11;
      v9 += 8;
      v16 = v9;
    }
  }
LABEL_12:
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &__p);
  if (0x4EC4EC4EC4EC4EC5 * (((char *)a2[1] - (char *)*a2) >> 4) != (uint64_t)(a3[1] - *a3) >> 4)
  {
    sub_1000D5048(v19, "");
    sub_100270578("Number of results returned does not match number of inputs", &v21);
    sub_100174738((uint64_t)v19, (uint64_t)&v21, 1);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (v20 < 0)
      operator delete(v19[0]);
    sub_1000F2AE4((uint64_t)&v18);
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_100276F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void **v24;

  if (a18 < 0)
    operator delete(__p);
  sub_1000F7D3C(v24);
  if (a10)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_100276F70(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  void *v7[2];
  char v8;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 8);
  sub_10027780C(&__p, *(_QWORD **)(a2 + 16), 0);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)(a2 + 24) != (uint64_t)(a3[1] - *a3) >> 4)
  {
    sub_1000D5048(v7, "");
    sub_100270578("Number of results returned does not match number of inputs", &__p);
    sub_100174738((uint64_t)v7, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8 < 0)
      operator delete(v7[0]);
    sub_1000F2AE4((uint64_t)&v6);
  }
}

void sub_10027708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void **v20;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000F7D3C(v20);
    _Unwind_Resume(a1);
  }
  sub_1000F7D3C(v20);
  _Unwind_Resume(a1);
}

void sub_1002770E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100277110(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 24))(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1002771F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_100277244(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  double **v6;
  BOOL v8;
  double *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  int i;
  std::__shared_weak_count *v17;
  int v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int j;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  double v43[4];
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  _DWORD v50[2];

  v6 = (double **)a1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = sub_100303ECC(a2, (double *)(a1 + 80));
  v9 = v6[8];
  v6 += 8;
  v10 = sub_100160238(v9);
  v11 = sub_100160104(*v6);
  LODWORD(v44) = v10;
  LODWORD(v43[0]) = v11;
  sub_100072950(v50, &v44, (int *)v43);
  v13 = v50[0];
  v12 = v50[1];
  sub_100071CF8(&v44, v6);
  v46 = 0;
  if (a3)
  {
    if (a3 != 1)
      goto LABEL_36;
    v14 = 0;
    if (!v13)
      goto LABEL_36;
  }
  else
  {
    v14 = v13 - 1;
    v13 = -1;
    a3 = -1;
    if (v14 == -1)
      goto LABEL_36;
  }
  if (v12 >= 1)
  {
    if (v8)
    {
      v15 = a4[1];
      do
      {
        for (i = 0; i != v12; ++i)
        {
          while (1)
          {
            v46 = __PAIR64__(v14, i);
            *(double *)&v49 = (double)i;
            *((double *)&v49 + 1) = (double)v14;
            if (v15 < a4[2])
              break;
            v15 = sub_100277930(a4, (uint64_t)&v44);
            a4[1] = v15;
            if (++i == v12)
              goto LABEL_9;
          }
          *(_QWORD *)v15 = v44;
          v17 = v45;
          *(_QWORD *)(v15 + 8) = v45;
          v18 = v14;
          v19 = i;
          if (v17)
          {
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v21 = __ldxr(p_shared_owners);
            while (__stxr(v21 + 1, p_shared_owners));
            v19 = v46;
            v18 = HIDWORD(v46);
          }
          *(_DWORD *)(v15 + 16) = v19;
          *(_DWORD *)(v15 + 20) = v18;
          *(_QWORD *)(v15 + 24) = v47;
          v22 = v48;
          *(_QWORD *)(v15 + 32) = v48;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          *(_OWORD *)(v15 + 40) = v49;
          v15 += 56;
          a4[1] = v15;
        }
LABEL_9:
        v14 += a3;
      }
      while (v14 != v13);
    }
    else
    {
      do
      {
        for (j = 0; j != v12; ++j)
        {
          v46 = __PAIR64__(v14, j);
          *(double *)&v49 = (double)j;
          *((double *)&v49 + 1) = (double)v14;
          v43[0] = sub_10015C9DC(&v44);
          v43[1] = v27;
          v43[2] = v28;
          v43[3] = v29;
          if (sub_100303880(v43, a2))
          {
            v30 = a4[1];
            if (v30 >= a4[2])
            {
              v26 = sub_100277930(a4, (uint64_t)&v44);
            }
            else
            {
              *(_QWORD *)v30 = v44;
              v31 = v45;
              *(_QWORD *)(v30 + 8) = v45;
              if (v31)
              {
                v32 = (unint64_t *)&v31->__shared_owners_;
                do
                  v33 = __ldxr(v32);
                while (__stxr(v33 + 1, v32));
              }
              *(_QWORD *)(v30 + 16) = v46;
              *(_QWORD *)(v30 + 24) = v47;
              v34 = v48;
              *(_QWORD *)(v30 + 32) = v48;
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
              }
              *(_OWORD *)(v30 + 40) = v49;
              v26 = v30 + 56;
            }
            a4[1] = v26;
          }
        }
        v14 += a3;
      }
      while (v14 != v13);
    }
  }
LABEL_36:
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v45;
  if (v45)
  {
    v41 = (unint64_t *)&v45->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_100277548(_Unwind_Exception *a1)
{
  void **v1;

  sub_100275CC8(v1);
  _Unwind_Resume(a1);
}

void sub_10027755C(_Unwind_Exception *a1)
{
  void **v1;

  sub_100275CC8(v1);
  _Unwind_Resume(a1);
}

void sub_100277570(_Unwind_Exception *a1)
{
  void **v1;

  sub_100275CC8(v1);
  _Unwind_Resume(a1);
}

void sub_100277584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void **v5;
  va_list va;

  va_start(va, a5);
  sub_1001D3250((uint64_t)va);
  sub_100275CC8(v5);
  _Unwind_Resume(a1);
}

void sub_1002775A8(uint64_t a1)
{
  sub_10004A8DC(a1);
  operator delete();
}

__n128 sub_1002775CC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 24);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_1002775E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

double sub_1002775E8(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

double sub_1002775F0(uint64_t a1)
{
  return *(double *)(a1 + 184);
}

uint64_t sub_1002775F8(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_100277600(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_100277608(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_100277610(uint64_t a1)
{
  return *(_QWORD *)(a1 + 352);
}

uint64_t sub_10027761C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 368);
}

int *sub_100277628(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v5)
        return sub_100068888((int *)a1);
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_100068888((int *)a1);
}

void sub_1002776A8(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a2;
  v4 = a1[1];
  v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    v7 = (_QWORD *)(*a1 + 8 * (v4 >> 6));
    v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        v9 = (64 - v8);
        if (v9 >= a2)
          v10 = a2;
        else
          v10 = v9;
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        v3 = a2 - v10;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        memset(v7, 255, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        v13 = (64 - v8);
        if (v13 >= a2)
          v14 = a2;
        else
          v14 = v13;
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        v3 = a2 - v14;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        bzero(v7, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

_QWORD *sub_10027780C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  char *v13;
  __int128 *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v5 = a2;
    v6 = 0;
    v7 = -1;
    v8 = a2;
    do
    {
      v8 = (_QWORD *)*v8;
      ++v7;
      v6 += 32;
    }
    while (v8 != a3);
    if (v7 >= 0x7FFFFFFFFFFFFFFLL)
      sub_1000D02C0();
    v9 = (char *)operator new(v6);
    v10 = 0;
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v6];
    do
    {
      while (1)
      {
        v12 = (int *)&v9[v10];
        v13 = &v9[v10 + 8];
        v14 = (__int128 *)(v5 + 3);
        if (*((_DWORD *)v5 + 4) == *((int *)v5 + 4) >> 31)
          break;
        v11 = *v14;
        *(_DWORD *)&v9[v10 + 24] = *((_DWORD *)v5 + 10);
        *(_OWORD *)v13 = v11;
        *v12 = *((_DWORD *)v5 + 4) ^ (*((int *)v5 + 4) >> 31);
        v5 = (_QWORD *)*v5;
        v10 += 32;
        if (v5 == a3)
          goto LABEL_9;
      }
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *v12 = 0;
      v5 = (_QWORD *)*v5;
      v10 += 32;
    }
    while (v5 != a3);
LABEL_9:
    a1[1] = &v9[v10];
  }
  return a1;
}

void sub_100277914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100277930(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    sub_1000D02C0();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  if (!v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = 56 * v3;
    *(_QWORD *)v9 = *(_QWORD *)a2;
    *(_QWORD *)(v9 + 8) = v8;
    if (!v8)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (v6 > 0x492492492492492)
    sub_1000CDEB8();
  v7 = (char *)operator new(56 * v6);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = (uint64_t)&v7[56 * v3];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)(v9 + 8) = v8;
  if (v8)
  {
LABEL_12:
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_14:
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  v12 = &v7[56 * v3];
  v13 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v12 + 4) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = &v7[56 * v6];
  *(_OWORD *)&v7[56 * v3 + 40] = *(_OWORD *)(a2 + 40);
  v17 = v9 + 56;
  v18 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v17;
    a1[2] = (uint64_t)v16;
    if (!v19)
      return v17;
    goto LABEL_36;
  }
  v20 = 0;
  do
  {
    v21 = v9 + v20;
    v22 = &v19[v20];
    *(_OWORD *)(v21 - 56) = *(_OWORD *)&v19[v20 - 56];
    *((_QWORD *)v22 - 7) = 0;
    *((_QWORD *)v22 - 6) = 0;
    *(_QWORD *)(v21 - 40) = *(_QWORD *)&v19[v20 - 40];
    *(_OWORD *)(v21 - 32) = *(_OWORD *)&v19[v20 - 32];
    *((_QWORD *)v22 - 4) = 0;
    *((_QWORD *)v22 - 3) = 0;
    *(_OWORD *)(v21 - 16) = *(_OWORD *)&v19[v20 - 16];
    v20 -= 56;
  }
  while (&v19[v20] != v18);
  v23 = (char *)*a1;
  v19 = (char *)a1[1];
  *a1 = v9 + v20;
  a1[1] = v17;
  a1[2] = (uint64_t)v16;
  if (v19 != v23)
  {
    while (1)
    {
      v24 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
      if (!v24)
        goto LABEL_27;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        v27 = (std::__shared_weak_count *)*((_QWORD *)v19 - 6);
        if (v27)
        {
LABEL_28:
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      else
      {
LABEL_27:
        v27 = (std::__shared_weak_count *)*((_QWORD *)v19 - 6);
        if (v27)
          goto LABEL_28;
      }
      v19 -= 56;
      if (v19 == v23)
      {
        v19 = v23;
        break;
      }
    }
  }
  if (v19)
LABEL_36:
    operator delete(v19);
  return v17;
}

uint64_t sub_100277B98()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100277BF4()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100277C50()
{
  qword_10041A0B8 = 0;
  unk_10041A0C0 = 0;
  qword_10041A0C8 = 0;
  __cxa_atexit((void (*)(void *))sub_100276A70, &qword_10041A0B8, (void *)&_mh_execute_header);
  qword_10041A0D8 = 0;
  qword_10041A0D0 = (uint64_t)&qword_10041A0D8;
  qword_10041A0E0 = 0;
  return __cxa_atexit((void (*)(void *))sub_100276AD8, &qword_10041A0D0, (void *)&_mh_execute_header);
}

void sub_100277CB4(uint64_t a1, uint64_t a2)
{
  int v4;
  double v5;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;

  if (*(_DWORD *)(a2 + 48) != 4)
  {
    if (qword_100417ED8 == -1)
    {
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        return;
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1004007A0);
      v10 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        return;
    }
    v11 = *(_DWORD *)(a2 + 48);
    v14 = 67240192;
    LODWORD(v15) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unsupported location type %{public}d passed in", (uint8_t *)&v14, 8u);
    return;
  }
  v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x80) != 0)
  {
    v5 = *(double *)(a2 + 64);
    if (v5 > 0.0 && v5 <= 8.0)
    {
      if (*(_BYTE *)(a1 + 56))
      {
        sub_100007738((_QWORD *)(a1 + 64));
        *(_BYTE *)(a1 + 56) = 0;
      }
      sub_1002785A8((uint64_t *)(a1 + 224), 0, 0, 0);
      v12 = a1 + 64;
      if (*(_BYTE *)(a1 + 56))
      {
        sub_100159914(v12, a2);
      }
      else
      {
        sub_100157C2C(v12, a2);
        *(_BYTE *)(a1 + 56) = 1;
      }
      return;
    }
  }
  if (!*(_BYTE *)(a1 + 56))
    return;
  if ((v4 & 0x20) == 0)
  {
    if (qword_100417ED8 == -1)
    {
      v7 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
      {
LABEL_12:
        v8 = *(_QWORD *)(a2 + 16);
        if (!v8)
          v8 = *(_QWORD *)(qword_10041AB60 + 16);
        v9 = *(_QWORD *)(v8 + 16);
        v14 = 134349056;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Missing altitude field for WiFi fix at %{public}f; this should never happen.",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    else
    {
      dispatch_once(&qword_100417ED8, &stru_1004007A0);
      v7 = qword_100417EE0;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
        goto LABEL_12;
    }
    if (*(_BYTE *)(a1 + 56))
    {
      sub_100007738((_QWORD *)(a1 + 64));
      *(_BYTE *)(a1 + 56) = 0;
    }
    sub_1002785A8((uint64_t *)(a1 + 224), 0, 0, 0);
    return;
  }
  v13 = *(_QWORD *)(a1 + 232);
  if (v13 >= *(_QWORD *)(a1 + 240))
  {
    *(_QWORD *)(a1 + 232) = sub_100278398((_QWORD *)(a1 + 224), a2);
    if (!sub_100277FD0(a1))
      return;
  }
  else
  {
    sub_100157C2C(*(_QWORD *)(a1 + 232), a2);
    *(_QWORD *)(a1 + 232) = v13 + 160;
    *(_QWORD *)(a1 + 232) = v13 + 160;
    if (!sub_100277FD0(a1))
      return;
  }
  if (*(_BYTE *)(a1 + 56))
  {
    sub_100007738((_QWORD *)(a1 + 64));
    *(_BYTE *)(a1 + 56) = 0;
  }
  sub_1002785A8((uint64_t *)(a1 + 224), 0, 0, 0);
}

void sub_100277FC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 232) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_100277FD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  unint64_t v5;
  double v6;
  double v7;
  _BOOL8 v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  double v24;

  if (!*(_BYTE *)(a1 + 56))
    return 0;
  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  if (v2 == v3)
    return 0;
  v4 = 0.0;
  do
  {
    sub_100157C2C((uint64_t)&v15, v2);
    v4 = v4 + v24;
    sub_100007738(&v15);
    v2 += 160;
  }
  while (v2 != v3);
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 5);
  v6 = (double)v5;
  v7 = sqrt(*(double *)(a1 + 128) * *(double *)(a1 + 128) / (double)v5);
  v8 = 1;
  if (v7 > 0.0)
  {
    v9 = v4 / v6;
    v10 = sub_100263BD0(-vabdd_f64(v4 / v6, *(double *)(a1 + 120)) / v7);
    v11 = *(double *)(a1 + 32) * 0.5;
    v8 = v10 < v11;
    if (qword_100417ED8 != -1)
    {
      dispatch_once(&qword_100417ED8, &stru_1004007A0);
      v12 = qword_100417EE0;
      if (!os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
        return v8;
      goto LABEL_8;
    }
    v12 = qword_100417EE0;
    if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      v13 = *(_QWORD *)(a1 + 120);
      LODWORD(v15) = 67241216;
      HIDWORD(v15) = v10 < v11;
      v16 = 2050;
      v17 = v5;
      v18 = 2050;
      v19 = v9;
      v20 = 2050;
      v21 = v7;
      v22 = 2050;
      v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "reject null hypothesis, %{public}d, # of samples, %{public}lu, sample mean, %{public}f, sample std, %{public}f, last qualified altitude, %{public}f", (uint8_t *)&v15, 0x30u);
    }
  }
  return v8;
}

uint64_t *sub_1002781BC(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;

  if (*(_DWORD *)(a2 + 12) <= 1u)
  {
    v2 = result;
    if (*((_BYTE *)result + 56))
    {
      sub_100007738(result + 8);
      *((_BYTE *)v2 + 56) = 0;
      return sub_1002785A8(v2 + 28, 0, 0, 0);
    }
  }
  return result;
}

void sub_100278214(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v4;
  double v5;
  NSObject *v6;
  double v7;
  double v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;

  if (*(_BYTE *)(a1 + 40))
    v4 = *(_BYTE *)(a2 + 32) == 0;
  else
    v4 = 1;
  if (v4 || !*(_BYTE *)(a1 + 56))
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  else
  {
    v5 = *(double *)(a1 + 128);
    if (v5 >= 0.0)
    {
      v10 = *(double *)(a2 + 8);
      v11 = *(double *)(a1 + 120);
      v12 = *(double *)a2 + v10 * -0.5;
      v13 = *(double *)a2 + v10 * 0.5;
      v14 = -1.0;
      if (v11 <= *(double *)a2)
        v13 = v12;
      else
        v14 = 1.0;
      v8 = sub_100263BD0(-(v14 * (v11 - v13)) / v5);
      v7 = 1.0 - v8;
    }
    else
    {
      if (qword_100417ED8 != -1)
        dispatch_once(&qword_100417ED8, &stru_1004007A0);
      v6 = qword_100417EE0;
      v7 = 0.5;
      if (os_log_type_enabled((os_log_t)qword_100417EE0, OS_LOG_TYPE_FAULT))
      {
        v15 = 134349056;
        v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Altitude estimate uncertainty is less than zero: %{public}f. Use uniform prior to continue", (uint8_t *)&v15, 0xCu);
      }
      v8 = 0.5;
    }
    *(double *)a3 = v7;
    *(double *)(a3 + 8) = v8;
    v9 = 1;
  }
  *(_BYTE *)(a3 + 16) = v9;
}

void sub_10027836C(id a1)
{
  qword_100417EE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_100278398(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  void (**v15)(char *);
  BOOL v16;
  uint64_t v18;
  __int128 v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999)
    sub_1000D02C0();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x199999999999999)
      sub_1000CDEB8();
    v7 = (char *)operator new(160 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = (uint64_t)&v7[160 * v3];
  *((_QWORD *)&v19 + 1) = &v7[160 * v6];
  sub_100157C2C(v18, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_100157C2C(v8 + v18, v8 + i))
    v8 -= 160;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  *a1 = v18 + v8;
  *(_QWORD *)&v19 = v18 + 160;
  *(_OWORD *)(a1 + 1) = v19;
  if (v11 != v12)
  {
    v13 = v11 - 160;
    v14 = v11 - 160;
    do
    {
      v15 = *(void (***)(char *))v14;
      v14 -= 160;
      (*v15)(v13);
      v16 = v13 == v12;
      v13 = v14;
    }
    while (!v16);
  }
  if (v12)
    operator delete(v12);
  return v18 + 160;
}

void sub_100278508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100278554((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100278554(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 160);
    *(_QWORD *)(a1 + 16) = i - 160;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1002785A8(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (***v28)(_QWORD);
  uint64_t (***v29)(_QWORD);
  uint64_t (**v30)(_QWORD);

  v6 = a2;
  v7 = (uint64_t)result;
  v8 = result[2];
  v9 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v9)
    {
      v10 = result[1];
      v11 = (void *)*result;
      if (v10 != v9)
      {
        v12 = (void (***)(_QWORD))(v10 - 160);
        v13 = (void (***)(_QWORD))(v10 - 160);
        do
        {
          v14 = *v13;
          v13 -= 20;
          (*v14)(v12);
          v15 = v12 == (void (***)(_QWORD))v9;
          v12 = v13;
        }
        while (!v15);
        v11 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999)
      goto LABEL_41;
    v16 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    v17 = 2 * v16;
    if (2 * v16 <= __sz)
      v17 = __sz;
    v18 = v16 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v17;
    if (v18 > 0x199999999999999)
LABEL_41:
      sub_1000D02C0();
    v19 = 20 * v18;
    result = (uint64_t *)operator new(160 * v18);
    v20 = result;
    *(_QWORD *)v7 = result;
    *(_QWORD *)(v7 + 8) = result;
    *(_QWORD *)(v7 + 16) = &result[v19];
    if (v6 != a3)
    {
      v21 = 0;
      do
      {
        result = (uint64_t *)sub_100157C2C((uint64_t)&v20[v21 / 8], v6 + v21);
        v21 += 160;
      }
      while (v6 + v21 != a3);
      v20 = (uint64_t *)((char *)v20 + v21);
    }
    *(_QWORD *)(v7 + 8) = v20;
    return result;
  }
  v22 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v9) >> 5) >= __sz)
  {
    if (a2 == a3)
    {
      v27 = *result;
      if (v22 == v9)
      {
LABEL_40:
        *(_QWORD *)(v7 + 8) = v27;
        return result;
      }
    }
    else
    {
      v27 = *result;
      do
      {
        result = (uint64_t *)sub_100159914(v9, v6);
        v6 += 160;
        v9 += 160;
        v27 += 160;
      }
      while (v6 != a3);
      v22 = *(_QWORD *)(v7 + 8);
      if (v22 == v27)
        goto LABEL_40;
    }
    v28 = (uint64_t (***)(_QWORD))(v22 - 160);
    v29 = (uint64_t (***)(_QWORD))(v22 - 160);
    do
    {
      v30 = *v29;
      v29 -= 20;
      result = (uint64_t *)(*v30)(v28);
      v15 = v28 == (uint64_t (***)(_QWORD))v27;
      v28 = v29;
    }
    while (!v15);
    goto LABEL_40;
  }
  v23 = a2 + 32 * ((v22 - v9) >> 5);
  if (v22 != v9)
  {
    v24 = 32 * ((v22 - v9) >> 5);
    do
    {
      result = (uint64_t *)sub_100159914(v9, v6);
      v6 += 160;
      v9 += 160;
      v24 -= 160;
    }
    while (v24);
    v9 = *(_QWORD *)(v7 + 8);
  }
  v25 = v9;
  if (v23 != a3)
  {
    v26 = 0;
    do
    {
      result = (uint64_t *)sub_100157C2C(v9 + v26, v23 + v26);
      v26 += 160;
    }
    while (v23 + v26 != a3);
    v25 = v9 + v26;
  }
  *(_QWORD *)(v7 + 8) = v25;
  return result;
}

uint64_t sub_10027887C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_1002788D8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t *sub_100278934(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1000CB118();
    operator delete();
  }
  return a1;
}

void sub_100278978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1004007D0;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v2)
        goto LABEL_4;
      goto LABEL_5;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
LABEL_4:
    sub_1000CB118();
    operator delete();
  }
LABEL_5:
  operator delete();
}

void sub_100278A10(uint64_t a1, uint64_t a2)
{
  sub_1001E61BC(*(_QWORD *)(a1 + 8), a2);
}

void sub_100278A18(uint64_t a1)
{
  sub_1001E9C08(*(_QWORD *)(a1 + 8));
}

void sub_100278A78(uint64_t a1)
{
  sub_1001EC700(*(_QWORD *)(a1 + 8));
}

void sub_100278A80(uint64_t a1)
{
  sub_1001F1188(*(_QWORD *)(a1 + 8));
}

void sub_100278A88(uint64_t a1)
{
  sub_1001F1540(*(_QWORD *)(a1 + 8));
}

void sub_100278A90(uint64_t a1)
{
  sub_1001E9B54(*(_QWORD *)(a1 + 8));
}

void sub_100278A98(uint64_t a1)
{
  sub_1001E9C08(*(_QWORD *)(a1 + 8));
}

void sub_100279030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29)
{
  if (__p)
    operator delete(__p);
  a29 = &a24;
  sub_1002067A8((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_100279090(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint8_t buf[4];
  uint64_t v7;

  if (qword_100417F08 == -1)
  {
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_4;
    goto LABEL_3;
  }
  dispatch_once(&qword_100417F08, &stru_100400970);
  v4 = qword_100417F10;
  if (os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
    *(_DWORD *)buf = 134349056;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileEvict, exec, floors, %{public}zu", buf, 0xCu);
  }
LABEL_4:
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
    sub_1001E68BC(*(_QWORD *)(a1 + 8), **(_QWORD **)a2);
}

void sub_1002791F4(uint64_t a1, uint64_t a2)
{
  sub_1001F1364(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_1002791FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x28uLL);
  *v8 = off_1004009C8;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v12 = v8;
  sub_1000725D8(a1, a2, (uint64_t)v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_1002792CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  void **v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
    {
      sub_1000F7D3C(v13);
      _Unwind_Resume(a1);
    }
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  sub_1000F7D3C(v13);
  _Unwind_Resume(a1);
}

_QWORD *sub_100279320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;

  v6 = operator new(0x20uLL);
  *v6 = off_100400AD8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  v10 = v6;
  sub_1000725D8(a1, a2, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1002793DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_100279418(uint64_t a1, uint64_t a2)
{
  sub_1001E9410(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_10027950C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 128))
    *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a1 + 64))
    *(_BYTE *)(a1 + 64) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else
  {
LABEL_13:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_1002795BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD *v15;
  char v16;
  _BYTE v17[80];

  v13 = a2;
  v7 = nullsub_10(a3);
  if (*(char *)(v7 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v8 = *(_OWORD *)v7;
    v12 = *(_QWORD *)(v7 + 16);
    *(_OWORD *)__p = v8;
  }
  sub_1001E60B0("cfg_prefetch_import", *(_QWORD *)(a1 + 8), (uint64_t)v17);
  v16 = 0;
  v15 = 0;
  v9 = operator new(0x28uLL);
  *v9 = off_100400B58;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = &v16;
  v9[4] = &v13;
  v15 = v9;
  sub_1002797E0(a1, v10, (const void **)__p, (uint64_t)v14);
}

void sub_100279778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a19;
  if (a19 == v23)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_1001E93AC((uint64_t)&a20);
  sub_10026177C(&a23);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002797E0(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v6;
  uint8_t v7[32];
  void *__p[2];

  sub_10031A338(a1 + 16, a3, (uint64_t)v7);
  v6 = *(_QWORD *)(a4 + 24);
  if (v6)
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v6 + 48))(__p, v6, v7);
    sub_100080934(*(_QWORD *)(a1 + 8), (uint64_t)__p);
  }
  sub_10016CA74();
}

void sub_100279A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_10027950C((uint64_t)va1);
  sub_10031A7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100279A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10031A7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100279A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _QWORD *v17;
  char v18;
  char v19;
  _BYTE v20[80];

  v14 = a4;
  v15 = a2;
  v8 = nullsub_10(a3);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_10006CED8(__p, *(void **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v13 = *(_QWORD *)(v8 + 16);
    *(_OWORD *)__p = v9;
  }
  sub_1001E60B0("tile_prefetch_import", *(_QWORD *)(a1 + 8), (uint64_t)v20);
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v10 = operator new(0x40uLL);
  *v10 = off_100400FE0;
  v10[1] = a3;
  v10[2] = a5;
  v10[3] = a1;
  v10[4] = &v14;
  v10[5] = &v19;
  v10[6] = &v18;
  v10[7] = &v15;
  v17 = v10;
  sub_1002797E0(a1, v11, (const void **)__p, (uint64_t)v16);
}

void sub_100279D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  sub_100277628((uint64_t)&a10);
  sub_100279DB8((uint64_t)&a28);
  sub_1001E93AC(v28 - 160);
  sub_10026177C(v28 - 136);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100279DB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)a1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_100068888((int *)(a1 + 8));
    *(_BYTE *)a1 = 0;
  }
  return a1;
}

void sub_100279E3C(uint64_t a1)
{
  sub_1001E9C08(*(_QWORD *)(a1 + 8));
}

void sub_10027A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (__p)
    operator delete(__p);
  a19 = &a16;
  sub_1002067A8((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_10027A0FC()
{
  _BYTE v0[24];
  std::runtime_error v1;

  __cxa_allocate_exception(0x40uLL);
  sub_10018D04C((uint64_t)v0);
  sub_10023643C(&v1, (uint64_t)"virtual RssiMutualInformation SqliteTileDb::readExperimentalMutualInformation(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_tile_db.cpp", 539, (uint64_t)v0);
}

void sub_10027A170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  if (__p)
    operator delete(__p);
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

void sub_10027A194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  void *v13;

  std::runtime_error::~runtime_error(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_10027A1B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10027A1C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v5[10];

  sub_1001E60B0("remove_corrupt_tile", a1[1], (uint64_t)v5);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2);
  sub_100261780(v5);
  return sub_10026177C(v5);
}

void sub_10027A254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10026177C(va);
  _Unwind_Resume(a1);
}

void sub_10027A268(uint64_t a1, uint64_t a2)
{
  sub_1001EDA78(*(_QWORD *)(a1 + 8), a2);
}

void sub_10027A468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10027A488(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t buf[16];

  if (qword_100417F08 == -1)
  {
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&qword_100417F08, &stru_100400970);
    v4 = qword_100417F10;
    if (!os_log_type_enabled((os_log_t)qword_100417F10, OS_LOG_TYPE_DEFAULT))
LABEL_4:
      sub_10027A268(a1, a2);
  }
  *(_WORD *)buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileEvict, prefetchFinishedAllDownloads, evictPrefetchBeyondLimit", buf, 2u);
  goto LABEL_4;
}

void sub_10027A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string::size_type size;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14[2];
  char v15;
  std::string __p;
  std::__shared_weak_count *v17;
  std::string __dst;
  uint64_t v19;
  std::__shared_weak_count *v20;

  sub_1002D26AC(a2, (uint64_t)&v19);
  if ((sub_1002D35A8((uint64_t)&v19) & 1) == 0)
    sub_1002D35B8(&v19, a3);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__dst, "metadata");
  if (*(char *)(a4 + 23) < 0)
    sub_10006CED8(&__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  sub_1000675EC(&__p, (uint64_t)&__dst);
  sub_1002D3198(&v19, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_8:
  sub_1002D44C8(&__p, a2, 1);
  v15 = 4;
  strcpy((char *)v14, "tile");
  if (*(char *)(a4 + 23) < 0)
    sub_10006CED8(&__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __dst = *(std::string *)a4;
  sub_1000675EC(&__dst, (uint64_t)v14);
  sub_1002D4504((uint64_t)&__p, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_15:
      v7 = v17;
      if (!v17)
        goto LABEL_23;
      goto LABEL_19;
    }
  }
  else if ((v15 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v14[0]);
  v7 = v17;
  if (!v17)
    goto LABEL_23;
LABEL_19:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_23:
  size = __p.__r_.__value_.__l.__size_;
  __p.__r_.__value_.__l.__size_ = 0;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  sub_100068888((int *)&__p);
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_10027A77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  sub_100277628((uint64_t)&a16);
  sub_1000E095C(v27 - 48);
  _Unwind_Resume(a1);
}

void sub_10027A7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10027A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      sub_1000E095C(v27 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  sub_1000E095C(v27 - 48);
  _Unwind_Resume(a1);
}

void sub_10027A838(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000E095C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_10027A850(id a1)
{
  qword_100417F00 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Daemon");
}

void sub_10027A87C(id a1)
{
  qword_100417F10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_10027A8A8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_10027A8D0()
{
  operator delete();
}

__n128 sub_10027A8E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_1004009C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10027A924(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1004009C8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10027A94C(_QWORD *a1)
{
  sub_1001F171C(*(_QWORD *)(a1[1] + 8), a1[2], a1[3]);
}

uint64_t sub_10027AA18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9all"
                                "ocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027AA84()
{
}

void sub_10027AA94()
{
  operator delete();
}

__n128 sub_10027AAA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_100400A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10027AAE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100400A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10027AB00(uint64_t a1)
{
  sub_100072768(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_10027AB0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027AB78()
{
}

void sub_10027AB88()
{
  operator delete();
}

__n128 sub_10027AB9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_100400AD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_10027ABDC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100400AD8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_10027AC04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;

  v1 = a1[2];
  v2 = *(_QWORD *)(a1[1] + 8);
  v3 = (_QWORD *)a1[3];
  v4 = (_QWORD *)v3[3];
  if (v4)
  {
    if (v4 == v3)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _BYTE *))(*v3 + 24))(v3, v7);
    }
    else
    {
      v8 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*v4 + 16))(v3[3]);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_1001F18FC(v2, v1, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_10027ACF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*(_QWORD *)a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027AD40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10pur"
                                "pleslam9ApRssiMapEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027ADAC()
{
}

void sub_10027ADBC()
{
  operator delete();
}

__n128 sub_10027ADD0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = off_100400B58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10027AE10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_100400B58;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10027AE38(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  std::string __dst;

  v1 = nullsub_10(*(_QWORD *)(a1 + 8));
  sub_10008930C(&__dst, v1);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v2 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v5 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  strcpy((char *)operator new(0x19uLL), "cannot extract metadata");
  sub_10030DC08();
}

void sub_10027B5FC(void *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, std::string *a9, std::runtime_error a10, std::runtime_error a11, __int128 __p, int a13, __int16 a14, char a15, char a16, std::runtime_error a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t __pa,int __p_8,__int16 __p_12,char __p_14,char __p_15,uint64_t a28,uint64_t buf,int a30,__int16 a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t bufa,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  __break(1u);
  JUMPOUT(0x10027C20CLL);
}

void sub_10027C23C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void (__cdecl **a36)(std::stringbuf *__hidden this),uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;

  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a20);
  if (a19 < 0)
    operator delete(a14);
  *(uint64_t *)((char *)&a33
  a35 = v53;
  if (a49 < 0)
    operator delete(a44);
  std::streambuf::~streambuf(&a36);
  std::ios::~ios(&a52);
  if (*(char *)(v52 - 105) < 0)
    operator delete(*(void **)(v52 - 128));
  if (*(char *)(v52 - 73) < 0)
    operator delete(*(void **)(v52 - 96));
  __cxa_end_catch();
  JUMPOUT(0x10027C344);
}

uint64_t sub_10027C3BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durat"
                     "ionIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clock"
                                "ENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4p"
                                "athERK17TileStorageLimitsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027C428()
{
}

void sub_10027C434(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100400DB0;
  v13 = off_100400DD8;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_100400DF8;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_100400D10;
  v18[0] = off_100400D48;
  v21 = &off_100400D80;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_10027C94C();
}

void sub_10027C680(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_10027C694(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10027C6AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10027C6F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_10027C71C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10027C774()
{
  operator delete();
}

_QWORD *sub_10027C788()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100400C78;
  return result;
}

void sub_10027C7AC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100400C78;
}

void sub_10027C7C4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 6776419;
}

uint64_t sub_10027C7DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8dur"
                     "ationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageL"
                     "imitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clo"
                                "ckENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem"
                                "4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027C848()
{
}

uint64_t sub_10027C854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100400DF8;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_100400D10;
  *(_QWORD *)(a1 + 16) = off_100400D48;
  *(_QWORD *)(a1 + 56) = &off_100400D80;
  return a1;
}

void sub_10027C8E8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_10027C8FC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10027C94C()
{
  operator new();
}

void sub_10027CB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027CB88(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_10027CBA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10027CBB8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10027CC08(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10027CC6C()
{
  operator new();
}

void sub_10027CD40()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_10027CD7C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_10027C854((uint64_t)exception, a1);
}

void sub_10027CDB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10027CDCC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10027CE1C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10027CE80()
{
  sub_10027CC6C();
}

void sub_10027CE90(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10027C854((uint64_t)exception, v1);
}

void sub_10027CED4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10027CEE8(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_10027CF40(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_10027CFAC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10027D010(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10027D060(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10027D0C4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

void sub_10027D0E8(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v9;
  size_t v10;
  void *v11;
  std::runtime_error v12;
  uint64_t (**v13)();
  uint64_t v14;
  __int128 v15;
  int v16;
  std::runtime_error v17;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint64_t (**v21)();

  std::runtime_error::runtime_error(&v12, a1);
  v14 = 0;
  v15 = 0uLL;
  v16 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100400F50;
  v13 = off_100400F78;
  v21 = (uint64_t (**)())&off_1003EDEA0;
  std::runtime_error::runtime_error(&v17, &v12);
  v17.__vftable = (std::runtime_error_vtbl *)&off_100400F98;
  v18[0] = &off_1003EDD90;
  v18[1] = v14;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  v19 = v15;
  v20 = v16;
  v17.__vftable = (std::runtime_error_vtbl *)off_100400EB0;
  v18[0] = off_100400EE8;
  v21 = &off_100400F20;
  sub_1000CE34C((uint64_t)v18, (uint64_t)&v13);
  *(_QWORD *)&v19 = a2;
  *((_QWORD *)&v19 + 1) = a3;
  v20 = a4;
  v9 = *(const void **)a5;
  v10 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1000D02C0();
    v11 = operator new(v10);
    memcpy(v11, v9, v10);
  }
  sub_10027D51C();
}

void sub_10027D334(void *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  sub_1000CDD68(a1);
}

void sub_10027D348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10027D360(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a21 = v22 + 16;
  if (a22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a22 + 32))(a22))
    {
      a22 = 0;
      std::runtime_error::~runtime_error(&a20);
      sub_1000CDD68(a1);
    }
  }
  std::runtime_error::~runtime_error(&a20);
  sub_1000CDD68(a1);
}

void sub_10027D3AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1000CDD68(a1);
  operator delete(__p);
  sub_1000CDD68(a1);
}

void sub_10027D3D0(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

uint64_t sub_10027D424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &off_1003EDEA0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100400F98;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1003EDD90;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = off_100400EB0;
  *(_QWORD *)(a1 + 16) = off_100400EE8;
  *(_QWORD *)(a1 + 56) = &off_100400F20;
  return a1;
}

void sub_10027D4B8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_10027D4CC(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10027D51C()
{
  operator new();
}

void sub_10027D734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000EFE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027D758(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_10027D774(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_10027D788(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

void sub_10027D7D8(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10027D83C()
{
  operator new();
}

void sub_10027D910()
{
  std::runtime_error *v0;

  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_10027D94C(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_10027D424((uint64_t)exception, a1);
}

void sub_10027D988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10027D99C(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10027D9EC(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10027DA50()
{
  sub_10027D83C();
}

void sub_10027DA60(_QWORD *a1)
{
  uint64_t v1;
  void *exception;

  v1 = (uint64_t)a1 + *(_QWORD *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10027D424((uint64_t)exception, v1);
}

void sub_10027DAA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10027DAB8(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    v1[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(v1);
}

void sub_10027DB10(_QWORD *a1)
{
  std::runtime_error *v1;
  const char *imp;

  v1 = (std::runtime_error *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = v1[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);
  operator delete();
}

void sub_10027DB7C(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);
  operator delete();
}

void sub_10027DBE0(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_10027DC30(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete();
}

void sub_10027DC94(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  operator delete();
}

uint64_t sub_10027DCB8(uint64_t **a1, std::string *a2)
{
  std::ios_base *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  char *v18;
  __int128 *v19;
  std::string::size_type *v20;
  unint64_t v21;
  __int128 v22;
  std::string::value_type v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  __int128 v30;
  uint64_t v31;
  void (__cdecl **v32)(std::ostream *__hidden);
  std::ios_base v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;

  v31 = 0;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  std::streambuf::basic_streambuf(&v25);
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  LODWORD(v31) = 24;
  *(_QWORD *)&v27 = 0;
  v26 = 0uLL;
  *(_QWORD *)&v25 = off_1003EFE30;
  std::ios_base::init(&v33, &v25);
  v34 = 0;
  v35 = -1;
  v37 = &v36;
  v38 = (char *)&v36 + 2;
  v4 = (std::ios_base *)((char *)&v32 + (_QWORD)*(v32 - 3));
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  v5 = sub_100023E4C(&v32, a1);
  v6 = *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32);
  v7 = *(_QWORD *)((char *)&v33.__rdstate_ + (_QWORD)*(v32 - 3));
  v8 = *(_QWORD *)(v7 + 40);
  v37 = (uint64_t *)v8;
  v9 = *(char **)(v7 + 48);
  v38 = v9;
  if ((v6 & 5) == 0)
  {
    v11 = (unint64_t)&v9[-v8];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = a2->__r_.__value_.__r.__words[2];
      v14 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v14 >= v11)
      {
        v16 = HIBYTE(v15);
LABEL_10:
        if ((v16 & 0x80u) == 0)
          v12 = a2;
        else
          v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_13:
        if ((char *)v8 == v9)
        {
          v17 = v12;
          goto LABEL_23;
        }
        if (v11 < 0x20 || (unint64_t)v12 - v8 < 0x20)
        {
          v17 = v12;
          v18 = (char *)v8;
        }
        else
        {
          v17 = (std::string *)((char *)v12 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v18 = (char *)(v8 + (v11 & 0xFFFFFFFFFFFFFFE0));
          v19 = (__int128 *)(v8 + 16);
          v20 = &v12->__r_.__value_.__r.__words[2];
          v21 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v22 = *v19;
            *((_OWORD *)v20 - 1) = *(v19 - 1);
            *(_OWORD *)v20 = v22;
            v19 += 2;
            v20 += 4;
            v21 -= 32;
          }
          while (v21);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v17->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
              a2->__r_.__value_.__l.__size_ = v11;
            else
              *((_BYTE *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
            v10 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          v23 = *v18++;
          v17->__r_.__value_.__s.__data_[0] = v23;
          v17 = (std::string *)((char *)v17 + 1);
        }
        while (v18 != v9);
        goto LABEL_23;
      }
      size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v12 = a2;
      if (v11 <= 0x16)
        goto LABEL_13;
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      v14 = 22;
    }
    std::string::__grow_by(a2, v14, v11 - v14, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v16) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  v10 = 0;
LABEL_27:
  std::ostream::~ostream(&v32);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(&v25);
  return v10;
}

void sub_10027DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000F8D34((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10027DF58(void *a1)
{
  uint64_t v1;

  std::ios::~ios(v1);
  sub_1000CDD68(a1);
}

void sub_10027DF74()
{
  operator delete();
}

__n128 sub_10027DF88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = off_100400FE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_10027DFD8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = off_100400FE0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10027E010(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *size;
  unint64_t *v5;
  unint64_t v6;
  std::string __dst;

  v1 = nullsub_10(*(_QWORD *)(a1 + 8));
  sub_10008930C(&__dst, v1);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v2 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v5 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  strcpy((char *)operator new(0x20uLL), "cannot extract tile data");
  sub_10030DC08();
}

void sub_10027E8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, std::string *a19, std::runtime_error a20,std::string *__dst,uint64_t a22,std::runtime_error __dsta,int __dst_16,__int16 __dst_20,char __dst_22,char __dst_23,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t buf,int a35,__int16 a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t bufa,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__pa,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t *v57;
  uint64_t v58;

  if (a2)
  {
    while (1)
    {
      if (*((char *)v57 - 1) < 0)
        operator delete((void *)*(v57 - 3));
      v57 -= 3;
      if (v57 == &bufa)
      {
        if (*(char *)(v58 - 105) < 0)
          operator delete(*(void **)(v58 - 128));
        __cxa_begin_catch(exception_object);
        sub_10016A398();
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027F620(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationI"
                     "xNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1"
                                "_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4path"
                                "ERK17TileStorageLimitsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027F68C()
{
}

void sub_10027F69C()
{
  operator delete();
}

_QWORD *sub_10027F6B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_100401050;
  return result;
}

void sub_10027F6D4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_100401050;
}

void sub_10027F6EC(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "tilep");
}

uint64_t sub_10027F70C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8duratio"
                     "nIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimi"
                     "tsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockEN"
                                "S1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pa"
                                "thERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

_UNKNOWN **sub_10027F778()
{
}

void sub_10027F784(unsigned __int8 *a1, uint64_t a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v4 = (int *)(a1 + 8);
  if (v5)
  {
    sub_1001795B0(v4, (int *)a2);
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v7 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 16);
    v8 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
    *((_OWORD *)a1 + 2) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    sub_100068AD4(v4, (_DWORD *)a2);
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)a1 + 2) = v12;
    *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 16);
    *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *a1 = 1;
  }
}

char *sub_10027F864(int a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  char *v13;

  v4 = __dst;
  v13 = __dst;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10006CED8(v4, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      *((_QWORD *)v4 + 3) = *((_QWORD *)v6 + 3);
      v8 = *((_QWORD *)v6 + 4);
      *((_QWORD *)v4 + 4) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(__int128 *)((char *)v6 + 40);
      *((_DWORD *)v4 + 14) = *((_DWORD *)v6 + 14);
      *(_OWORD *)(v4 + 40) = v11;
      v4[64] = 0;
      if (*((_BYTE *)v6 + 64))
      {
        *(_OWORD *)(v4 + 72) = *(__int128 *)((char *)v6 + 72);
        v4[64] = 1;
      }
      v4[88] = 0;
      if (*((_BYTE *)v6 + 88))
      {
        *((_OWORD *)v4 + 6) = v6[6];
        v4[88] = 1;
      }
      v4[112] = 0;
      if (*((_BYTE *)v6 + 112))
      {
        *((_QWORD *)v4 + 15) = *((_QWORD *)v6 + 15);
        v4[112] = 1;
      }
      v4[128] = 0;
      if (*((_BYTE *)v6 + 128))
      {
        *((_QWORD *)v4 + 17) = *((_QWORD *)v6 + 17);
        v4[128] = 1;
      }
      v6 += 9;
      v4 = v13 + 144;
      v13 += 144;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_10027F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10027F9B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027F9B4(uint64_t a1)
{
  void ***v2;
  void ***v3;
  void **v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(void ****)(a1 + 8);
    v2 = *(void ****)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        while (1)
        {
          if (*((_BYTE *)v4 - 16))
            *((_BYTE *)v4 - 16) = 0;
          if (*((_BYTE *)v4 - 32))
            *((_BYTE *)v4 - 32) = 0;
          if (*((_BYTE *)v4 - 56))
            *((_BYTE *)v4 - 56) = 0;
          if (*((_BYTE *)v4 - 80))
            *((_BYTE *)v4 - 80) = 0;
          v7 = (std::__shared_weak_count *)*(v4 - 14);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v6 = v4 - 18;
          if (*((char *)v4 - 121) < 0)
            break;
          v4 -= 18;
          if (v6 == v5)
            return a1;
        }
        operator delete(*v6);
        v4 -= 18;
      }
      while (v6 != v5);
    }
  }
  return a1;
}

uint64_t sub_10027FA94()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10027FAF0()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

_QWORD *sub_10027FB4C(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1004010E0;
  a1[1] = sub_10026AA64(a2);
  return a1;
}

void sub_10027FB88()
{
  operator delete();
}

uint64_t sub_10027FB9C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_10027FBF8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

void **sub_10027FC54(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        nullsub_49(v3 - 32);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_10027FCB8(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  double v7;
  double v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20[2];
  uint64_t v21;
  __int128 v22;
  void *__p;
  char *v24;
  uint64_t v25;

  if (*(double *)a1 <= a3)
    v6 = *(double *)a1;
  else
    v6 = a3;
  v7 = v6;
  __p = 0;
  v24 = 0;
  v25 = 0;
  sub_100280934(&__p, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  sub_1002BD080(a2);
  if (__p != v24 && v7 > 0.0)
  {
    sub_10027FEE0(a1, (uint64_t **)&__p, v7);
    sub_1002BD098((uint64_t **)&__p, (uint64_t)v20, v7 * v8);
    v9 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v10 = *(char **)(a2 + 8);
      v11 = *(char **)a2;
      if (v10 != v9)
      {
        do
        {
          v12 = v10 - 40;
          nullsub_49(v10 - 32);
          v10 = v12;
        }
        while (v12 != v9);
        v11 = *(char **)a2;
      }
      *(_QWORD *)(a2 + 8) = v9;
      operator delete(v11);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v20;
    *(_QWORD *)(a2 + 16) = v21;
    *(_OWORD *)(a2 + 24) = v22;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != v14)
  {
    do
    {
      v15 = v13 - 40;
      nullsub_49(v13 - 32);
      v13 = v15;
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 16) = v14;
  *(double *)a1 = a3;
  v16 = (char *)__p;
  if (__p)
  {
    v17 = v24;
    v18 = __p;
    if (v24 != __p)
    {
      do
      {
        v19 = v17 - 40;
        nullsub_49(v17 - 32);
        v17 = v19;
      }
      while (v19 != v16);
      v18 = __p;
    }
    v24 = v16;
    operator delete(v18);
  }
}

void sub_10027FE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void **v23;

  if (a23 < 0)
    operator delete(__p);
  sub_10027FC54(v23);
  sub_10027FC54(&a15);
  _Unwind_Resume(a1);
}

void sub_10027FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_10027FC54((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027FEE0(uint64_t result, uint64_t **a2, double a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  double v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[32];

  if (a3 != 0.0)
  {
    v4 = *a2;
    v5 = a2[1];
    if (*a2 != v5)
    {
      v6 = result;
      v7 = (_QWORD *)(result + 32);
      do
      {
        v19 = *v4;
        sub_1001A06D0((uint64_t)v20, (uint64_t)(v4 + 1));
        *(_QWORD *)&v18 = sub_1002424E0(&v19);
        *((double *)&v18 + 1) = a3;
        sub_100051B30(v7, &v18);
        result = nullsub_49(v20);
        v4 += 5;
      }
      while (v4 != v5);
      v9 = *(_QWORD *)(v6 + 40);
      v8 = *(_QWORD *)(v6 + 48);
      if (v9 != v8)
      {
        v10 = v8 - v9 - 16;
        if (v10 < 0x10)
        {
          v11 = 0.0;
          v12 = *(_QWORD *)(v6 + 40);
          do
          {
LABEL_12:
            v11 = v11 + *(double *)(v12 + 8);
            v12 += 16;
          }
          while (v12 != v8);
          return result;
        }
        v13 = (v10 >> 4) + 1;
        v12 = v9 + 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
        v14 = (double *)(v9 + 24);
        v11 = 0.0;
        v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v16 = *(v14 - 2);
          v17 = *v14;
          v14 += 4;
          v11 = v11 + v16 + v17;
          v15 -= 2;
        }
        while (v15);
        if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_12;
      }
    }
  }
  return result;
}

void sub_10028000C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_49(v1);
  _Unwind_Resume(a1);
}

void sub_100280020(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  sub_10024D874(a3, &v14);
  sub_10022C848(a4);
  v16 = v8;
  v9 = a1[17];
  if (v9 >= a1[18])
  {
    v10 = sub_100280728(a1 + 16, &v16, v14);
  }
  else
  {
    sub_10024234C((_QWORD *)a1[17], v8, v14);
    v10 = (char *)(v9 + 40);
    a1[17] = v9 + 40;
  }
  a1[17] = v10;
  a1[14] = *(_QWORD *)(a2 + 32);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_100280120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 136) = v3;
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100280138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000E095C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028014C(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *a5, int a6, _QWORD *a7, uint64_t a8)
{
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *__p;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3);
  sub_10004F6B4(&v30, a2);
  v16 = sub_10024D87C(a3, &v30);
  sub_10027FCB8(a1 + 120, (uint64_t)&__p, v16);
  if (a6)
    v29 = 0x3FF0000000000000;
  v17 = *(_QWORD *)(a2 + 32);
  v18 = a7[3];
  if (!v18)
    goto LABEL_6;
  if ((_QWORD *)v18 != a7)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_6:
    v32 = (_QWORD *)v18;
    goto LABEL_8;
  }
  v32 = v31;
  (*(void (**)(_QWORD *, _QWORD *))(*a7 + 24))(a7, v31);
LABEL_8:
  v19 = sub_10028034C(a1, v17, (uint64_t)&__p, a3, a4, a5, v31, a8);
  v20 = v32;
  if (v32 == v31)
  {
    v21 = 4;
    v20 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_13:
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 32);
  v22 = (char *)__p;
  if (__p)
  {
    v23 = v28;
    v24 = __p;
    if (v28 != __p)
    {
      do
      {
        v25 = v23 - 40;
        nullsub_49(v23 - 32);
        v23 = v25;
      }
      while (v25 != v22);
      v24 = __p;
    }
    v28 = v22;
    operator delete(v24);
  }
  return v19;
}

void sub_1002802F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10027FC54((void **)va);
  _Unwind_Resume(a1);
}

void sub_100280308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_10027FC54(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10028034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(_QWORD, uint64_t, uint64_t *, uint64_t, uint64_t), _BYTE *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  void *v24[2];
  char v25;
  void *v26;
  void *__p;
  char v28;
  _BYTE v29[24];
  _BYTE *v30;
  std::string v31;

  if (*(double *)(a3 + 32) == 0.0 || !sub_10022C5A4((uint64_t)a5))
    return 0;
  sub_10024D828(a4, a3);
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
    sub_1000D5048(v24, "");
    sub_100174738((uint64_t)v24, 0, 0);
    if (v25 < 0)
      operator delete(v24[0]);
    sub_1000F2AE4((uint64_t)&v31);
  }
  sub_1000B6E04(a4, a2, (uint64_t)v24);
  if (!sub_1000B5690(v24))
  {
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = 0uLL;
    v16 = a7[3];
    if (v16)
    {
      if ((_QWORD *)v16 == a7)
      {
        v30 = v29;
        (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v29);
LABEL_12:
        sub_1000B841C(a6, a2, (uint64_t)&v31, (uint64_t)v29, a5, a8);
        v19 = v30;
        if (v30 == v29)
        {
          v20 = 4;
          v19 = v29;
        }
        else
        {
          if (!v30)
          {
LABEL_17:
            size = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
            if (v31.__r_.__value_.__l.__size_)
            {
              v22 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            v28 = 0;
            LOBYTE(__p) = 0;
            memset(&v31, 0, sizeof(v31));
            std::string::assign(&v31, "Need the following code here: pfilter->updateHeadingNonuniformTimestep(headingMotion, currentUpdateWalkingState);");
            sub_100174738((uint64_t)&__p, (uint64_t)&v31, 1);
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            if (v28 < 0)
              operator delete(__p);
            sub_1000F2AE4((uint64_t)&v26);
          }
          v20 = 5;
        }
        (*(void (**)(void))(*v19 + 8 * v20))();
        goto LABEL_17;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
    v30 = (_BYTE *)v16;
    goto LABEL_12;
  }
  v17 = sub_10022C894(a5, a3);
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(double *)(a3 + 32) > *(double *)(a1 + 104))
    {
      if (a1 + 72 != a3)
        sub_100280AC4(a1 + 72, *(uint64_t **)a3, *(uint64_t **)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 24);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    sub_100280934((_QWORD *)(a1 + 72), *(_QWORD *)a3, *(_QWORD *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 24);
    *(_BYTE *)(a1 + 64) = 1;
  }
  return v17;
}

void sub_100280640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 73) < 0)
  {
    operator delete(*(void **)(v25 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002806DC(uint64_t result)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(result + 40);
  return result;
}

double sub_1002806E8(uint64_t a1)
{
  double *v1;
  double *v2;
  double *v3;
  double v5;
  double *v6;
  double v7;
  double v8;

  v1 = *(double **)(a1 + 40);
  v2 = *(double **)(a1 + 48);
  v3 = v1 + 1;
  if (v1 != v2 && v3 != v2)
  {
    v5 = *v1;
    v6 = v1 + 1;
    do
    {
      v7 = *v6++;
      v8 = v7;
      if (v5 < v7)
      {
        v5 = v8;
        v1 = v3;
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  return *v1;
}

char *sub_100280728(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v19;
  __int128 v20;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_1000D02C0();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1000CDEB8();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v19 = &v9[40 * v4];
  *((_QWORD *)&v20 + 1) = &v9[40 * v8];
  sub_10024234C(v19, *a2, a3);
  v11 = (char *)*a1;
  v10 = a1[1];
  for (i = 48; ; i -= 40)
  {
    v13 = v10 + i;
    if ((char *)(v10 + i - 48) == v11)
      break;
    *(_QWORD *)&v19[i - 88] = *(_QWORD *)(v13 - 88);
    v14 = (uint64_t)&v19[i - 80];
    sub_1001A06D0(v14, v13 - 80);
  }
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = &v19[i - 48];
  *(_QWORD *)&v20 = v19 + 40;
  *(_OWORD *)(a1 + 1) = v20;
  if (v15 != v16)
  {
    do
    {
      v17 = v15 - 40;
      nullsub_49(v15 - 32);
      v15 = v17;
    }
    while (v17 != v16);
  }
  if (v16)
    operator delete(v16);
  return v19 + 40;
}

void sub_1002808A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1002808E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002808E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    nullsub_49(i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100280934(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x666666666666667)
      sub_1000D02C0();
    v8 = (char *)operator new(40 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        *(_QWORD *)&v8[v9] = *(_QWORD *)(a2 + v9);
        sub_1001A06D0((uint64_t)&v8[v9 + 8], a2 + v9 + 8);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1002809F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100280A3C(&a9);
  _Unwind_Resume(a1);
}

void sub_100280A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 40)
    nullsub_49(v10 - 32 + v11);
  *(_QWORD *)(v9 + 8) = v10;
  sub_100280A3C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_100280A3C(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = v4 - 40;
          nullsub_49(v4 - 32);
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_100280AC4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = *(_QWORD **)(a1 + 8);
      v11 = *(_QWORD **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = v10 - 5;
          nullsub_49(v10 - 4);
          v10 = v12;
        }
        while (v12 != v9);
        v11 = *(_QWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_35;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= a4)
      v14 = a4;
    v15 = v13 >= 0x333333333333333 ? 0x666666666666666 : v14;
    if (v15 > 0x666666666666666)
LABEL_35:
      sub_1000D02C0();
    v16 = 5 * v15;
    v17 = operator new(40 * v15);
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = &v17[v16];
    if (v6 != a3)
    {
      v18 = 0;
      do
      {
        v17[v18] = v6[v18];
        sub_1001A06D0((uint64_t)&v17[v18 + 1], (uint64_t)&v6[v18 + 1]);
        v18 += 5;
      }
      while (&v6[v18] != a3);
      *(_QWORD *)(a1 + 8) = &v17[v18];
      return;
    }
LABEL_32:
    *(_QWORD *)(a1 + 8) = v17;
    return;
  }
  v19 = *(_QWORD **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (v19 - v9) >= a4)
  {
    if (a2 == a3)
    {
      v17 = *(_QWORD **)a1;
      if (v19 == v9)
        goto LABEL_32;
    }
    else
    {
      v17 = *(_QWORD **)a1;
      do
      {
        v26 = (uint64_t)(v6 + 1);
        v27 = *v6;
        v6 += 5;
        v28 = (uint64_t)(v9 + 1);
        *v9 = v27;
        v9 += 5;
        sub_100077D9C(v28, v26);
        v17 += 5;
      }
      while (v6 != a3);
      v19 = *(_QWORD **)(a1 + 8);
      if (v19 == v17)
        goto LABEL_32;
    }
    do
    {
      v29 = v19 - 5;
      nullsub_49(v19 - 4);
      v19 = v29;
    }
    while (v29 != v17);
    goto LABEL_32;
  }
  v20 = &a2[v19 - v9];
  if (v19 != v9)
  {
    do
    {
      v21 = (uint64_t)(v6 + 1);
      v22 = *v6;
      v6 += 5;
      v23 = (uint64_t)(v9 + 1);
      *v9 = v22;
      v9 += 5;
      sub_100077D9C(v23, v21);
    }
    while (v6 != v20);
    v9 = *(_QWORD **)(a1 + 8);
  }
  v24 = v9;
  if (v20 != a3)
  {
    v25 = 0;
    do
    {
      v9[v25] = v20[v25];
      sub_1001A06D0((uint64_t)&v9[v25 + 1], (uint64_t)&v20[v25 + 1]);
      v25 += 5;
    }
    while (&v20[v25] != a3);
    v24 = &v9[v25];
  }
  *(_QWORD *)(a1 + 8) = v24;
}

void sub_100280D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 40)
    nullsub_49(v2 - 32 + v3);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100280D70()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100280DCC()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100280E28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_100280E30(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[15];

  v10 = *a3;
  *(_QWORD *)v22 = a3[1];
  *(_QWORD *)&v22[7] = *(uint64_t *)((char *)a3 + 15);
  v11 = *((_BYTE *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v12 = *a6;
  if (*a6)
    v21 = *(_OWORD *)(a6 + 8);
  v13 = a9;
  v14 = *a7;
  if (*a7)
    v20 = *(_OWORD *)(a7 + 8);
  v15 = *a8;
  if (*a8)
  {
    v9 = *((_QWORD *)a8 + 1);
    v16 = *a9;
    if (!*a9)
      goto LABEL_9;
    goto LABEL_7;
  }
  v16 = *a9;
  if (*a9)
LABEL_7:
    v13 = (unsigned __int8 *)*((_QWORD *)a9 + 1);
LABEL_9:
  *(_QWORD *)result = v10;
  *(_QWORD *)(result + 8) = *(_QWORD *)v22;
  *(_QWORD *)(result + 15) = *(_QWORD *)&v22[7];
  *(_BYTE *)(result + 23) = v11;
  v17 = a4[1];
  *(_QWORD *)(result + 24) = *a4;
  *(_QWORD *)(result + 32) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 56) = a5;
  *(_BYTE *)(result + 64) = 0;
  if (v12)
  {
    *(_OWORD *)(result + 72) = v21;
    *(_BYTE *)(result + 64) = 1;
  }
  *(_BYTE *)(result + 88) = 0;
  if (v14)
  {
    *(_OWORD *)(result + 96) = v20;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_BYTE *)(result + 112) = 0;
  if (v15)
  {
    *(_QWORD *)(result + 120) = v9;
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 128) = 0;
  if (v16)
  {
    *(_QWORD *)(result + 136) = v13;
    *(_BYTE *)(result + 128) = 1;
  }
  return result;
}

uint64_t sub_100280F6C()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100280FC8()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100281024(uint64_t result, int a2)
{
  *(_QWORD *)result = off_100401110;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_100281038(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100401178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100281048(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100401178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100281078(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10028108C()
{
  operator delete();
}

uint64_t sub_1002810A0()
{
  return 2;
}

uint64_t sub_1002810A8()
{
  return 2;
}

uint64_t sub_1002810B0()
{
  return 0;
}

uint64_t sub_1002810B8()
{
  return 0;
}

uint64_t sub_1002810C0()
{
  return 0;
}

uint64_t sub_1002810C8()
{
  return 0;
}

uint64_t sub_1002810D0()
{
  return 0;
}

void sub_1002810D8()
{
  operator new();
}

void sub_100281164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100048DC0((uint64_t)&a9);
  operator delete();
}

void sub_100281198()
{
  operator new();
}

void sub_10028126C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1003444E0();
  operator delete();
}

_QWORD *sub_10028129C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_1003F4C00;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_100048DC0((uint64_t)(a1 + 1));
    return a1;
  }
  else
  {
LABEL_5:
    sub_100048DC0((uint64_t)(a1 + 1));
    return a1;
  }
}

void sub_100281320(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_1003F4C00;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_100048DC0((uint64_t)(a1 + 1));
  operator delete();
}

uint64_t sub_10028139C()
{
  return 0;
}

void sub_1002813A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100401290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002813B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100401290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002813E8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1002813F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004012E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100281408(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004012E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100281438()
{
  operator delete();
}

uint64_t sub_10028144C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) | 0x100;
}

uint64_t sub_10028146C()
{
  return 0;
}

void sub_100281474()
{
  operator new();
}

void sub_100281588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1000E095C((uint64_t)&a9);
  sub_1000E095C((uint64_t)&a11);
  operator delete();
}

void sub_1002815BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004013B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002815CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004013B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002815FC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_100281610()
{
  operator delete();
}

uint64_t sub_100281624()
{
  return 5;
}

uint64_t sub_10028162C()
{
  return 2;
}

uint64_t sub_100281634(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) | 0x100;
}

uint64_t sub_100281654()
{
  return 0;
}

uint64_t sub_10028165C()
{
  return 0;
}

uint64_t sub_100281664()
{
  return 0;
}

uint64_t sub_10028166C()
{
  return 1;
}

void sub_100281674()
{
  sub_100281474();
}

void sub_1002816C0()
{
  operator new();
}

void sub_100281794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_1003444E0();
  operator delete();
}

void sub_1002817C4()
{
  operator new();
}

void sub_1002819CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1001D4AD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002819F0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_100281A0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100281A20()
{
  uint64_t result;

  if ((byte_100417F40 & 1) == 0)
  {
    byte_100417F40 = 1;
    sub_1000CD6A4(qword_100417F30);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F30, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100281A7C()
{
  uint64_t result;

  if ((byte_100417F58 & 1) == 0)
  {
    byte_100417F58 = 1;
    sub_1000CD9E0(qword_100417F48);
    return __cxa_atexit((void (*)(void *))sub_1000CD964, qword_100417F48, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100281AD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void **v48;
  void **v49;
  uint64_t v50;
  _BYTE v52[32];
  _BYTE v53[32];
  char v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t (**v57)();
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[32];
  _BYTE v62[32];

  *(_QWORD *)a4 = off_1003F9658;
  *(_OWORD *)(a4 + 8) = 0u;
  v49 = (void **)(a4 + 8);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_BYTE *)(a4 + 64) &= 0xF8u;
  *(_QWORD *)(a4 + 56) = a3[7];
  v5 = a3[1];
  if (a3[2] != v5)
  {
    v7 = 0;
    v50 = result + 72;
    v48 = (void **)(a4 + 32);
    while (1)
    {
      v57 = off_1003F9A68;
      v58 = 0;
      v59 = 0;
      v60 &= 0xFCu;
      v58 = *(_QWORD *)(v5 + 8 * v7);
      v59 = *(_QWORD *)(a3[4] + 8 * v7);
      sub_1001A2040((uint64_t)v52, (uint64_t)&v57);
      sub_100159BA4(a2, (uint64_t)v52, (uint64_t)v53);
      sub_1001A23D4((uint64_t)v61, (uint64_t)v53);
      sub_100159CBC(v50, (uint64_t)v61, (uint64_t)v62);
      sub_100159E28((uint64_t)v62, (uint64_t)v54);
      nullsub_22(v61);
      nullsub_22(v53);
      nullsub_23(v52);
      v10 = *(char **)(a4 + 16);
      v9 = *(_QWORD *)(a4 + 24);
      if ((unint64_t)v10 < v9)
      {
        *(_QWORD *)v10 = v55;
        v11 = (uint64_t)(v10 + 8);
        goto LABEL_26;
      }
      v12 = (char *)*v49;
      v13 = v10 - (_BYTE *)*v49;
      v14 = v13 >> 3;
      v15 = (v13 >> 3) + 1;
      if (v15 >> 61)
        goto LABEL_48;
      v16 = v9 - (_QWORD)v12;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
      if (v17)
        break;
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      *(_QWORD *)(8 * v14) = v55;
      v11 = 8 * v14 + 8;
      if (v10 != v12)
        goto LABEL_18;
LABEL_24:
      *(_QWORD *)(a4 + 8) = v19;
      *(_QWORD *)(a4 + 16) = v11;
      *(_QWORD *)(a4 + 24) = &v18[8 * v17];
      if (v12)
        operator delete(v12);
LABEL_26:
      *(_QWORD *)(a4 + 16) = v11;
      v30 = *(char **)(a4 + 40);
      v29 = *(_QWORD *)(a4 + 48);
      if ((unint64_t)v30 >= v29)
      {
        v31 = (char *)*v48;
        v32 = v30 - (_BYTE *)*v48;
        v33 = v32 >> 3;
        v34 = (v32 >> 3) + 1;
        if (v34 >> 61)
LABEL_48:
          sub_1000D02C0();
        v35 = v29 - (_QWORD)v31;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 61)
LABEL_47:
            sub_1000CDEB8();
          v37 = operator new(8 * v36);
          v38 = &v37[8 * v33];
          *v38 = v56;
          v8 = (uint64_t)(v38 + 1);
          if (v30 == v31)
            goto LABEL_44;
LABEL_38:
          v39 = v30 - 8 - v31;
          if (v39 < 0x58)
            goto LABEL_51;
          if ((unint64_t)(v30 - &v37[v32]) < 0x20)
            goto LABEL_51;
          v40 = (v39 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v42 = &v30[-v41];
          v38 = (_QWORD *)((char *)v38 - v41);
          v43 = &v37[8 * v33 - 16];
          v44 = v30 - 16;
          v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *v43 = v46;
            v43 -= 2;
            v44 -= 32;
            v45 -= 4;
          }
          while (v45);
          v30 = v42;
          if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_51:
            do
            {
              v47 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v38 = v47;
            }
            while (v30 != v31);
          }
        }
        else
        {
          v37 = 0;
          v38 = (_QWORD *)(8 * v33);
          *(_QWORD *)(8 * v33) = v56;
          v8 = 8 * v33 + 8;
          if (v30 != v31)
            goto LABEL_38;
        }
LABEL_44:
        *(_QWORD *)(a4 + 32) = v38;
        *(_QWORD *)(a4 + 40) = v8;
        *(_QWORD *)(a4 + 48) = &v37[8 * v36];
        if (v31)
          operator delete(v31);
        goto LABEL_4;
      }
      *(_QWORD *)v30 = v56;
      v8 = (uint64_t)(v30 + 8);
LABEL_4:
      *(_QWORD *)(a4 + 40) = v8;
      nullsub_23(v54);
      result = nullsub_23(&v57);
      ++v7;
      v5 = a3[1];
      if (v7 >= (a3[2] - v5) >> 3)
        return result;
    }
    if (v17 >> 61)
      goto LABEL_47;
    v18 = operator new(8 * v17);
    v19 = &v18[8 * v14];
    *v19 = v55;
    v11 = (uint64_t)(v19 + 1);
    if (v10 == v12)
      goto LABEL_24;
LABEL_18:
    v20 = v10 - 8 - v12;
    if (v20 < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_52;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v10[-v22];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v10 - 16;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    v10 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v28 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *--v19 = v28;
      }
      while (v10 != v12);
    }
    goto LABEL_24;
  }
  return result;
}

void sub_100281EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  nullsub_23(&a23);
  nullsub_23(&a27);
  sub_10007342C(v27);
  _Unwind_Resume(a1);
}

double sub_100281F58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *i;
  _QWORD *v5;
  _QWORD *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  BOOL v13;
  BOOL v14;
  double **v15;
  double **v16;
  double *v17;
  double *v18;
  BOOL v19;
  BOOL v20;
  double *v21;
  double *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  double *v32;
  double *v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  __int128 v64;
  char v65[8];
  __int128 v66;
  int8x16_t __p;
  uint64_t v68;
  _QWORD v69[3];
  void (**v70)(std::exception *__hidden);

  v3 = a1 + 72;
  sub_1001A23D4((uint64_t)&__p, a2);
  sub_100159CBC(v3, (uint64_t)&__p, (uint64_t)v69);
  sub_100159E28((uint64_t)v69, (uint64_t)v65);
  nullsub_22(&__p);
  v64 = v66;
  for (i = *(_QWORD **)(a1 + 40); ; i += 6)
  {
    if (i == *(_QWORD **)(a1 + 48))
    {
      v69[0] = &off_1003FBE28;
      __p.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
      __p.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::geom"
                            "etry::model::multi_polygon<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>>]";
      v68 = 54;
      sub_1001D0450((uint64_t)v69, &__p);
    }
    if (*i != i[1])
      break;
    v5 = (_QWORD *)i[3];
    v6 = (_QWORD *)i[4];
    if (v5 != v6)
    {
      while (*v5 == v5[1])
      {
        v5 += 3;
        if (v5 == v6)
          goto LABEL_2;
      }
      break;
    }
LABEL_2:
    ;
  }
  if ((sub_100283054((double *)&v64, (uint64_t *)(a1 + 40)) & 0x80000000) != 0)
  {
    v7 = sub_100282C80((double *)&v64, (uint64_t **)(a1 + 40));
    v8 = 0.0;
    if (v7 > 0.0)
      goto LABEL_76;
  }
  else
  {
    v7 = 0.0;
  }
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 != v10)
  {
    v8 = v7;
    while (1)
    {
      v11 = *(double **)v9;
      v12 = *(double **)(v9 + 8);
      if ((unint64_t)v12 - *(_QWORD *)v9 >= 0x40)
      {
        __p.i32[0] = 0;
        __p.i8[4] = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            v13 = sub_10005B9D0((double *)&v64, v11, v11 + 2, (uint64_t)&__p);
            v14 = v11 + 4 != v12 && v13;
            v11 += 2;
          }
          while (v14);
          if (!__p.i8[4] && __p.i32[0])
            break;
        }
      }
LABEL_14:
      v9 += 48;
      if (v9 == v10)
        goto LABEL_76;
    }
    v16 = *(double ***)(v9 + 24);
    v15 = *(double ***)(v9 + 32);
    while (v16 != v15)
    {
      v17 = *v16;
      v18 = v16[1];
      if ((unint64_t)((char *)v18 - (char *)*v16) >= 0x40)
      {
        __p.i32[0] = 0;
        __p.i8[4] = 0;
        if (v17 + 2 != v18)
        {
          do
          {
            v19 = sub_10005B9D0((double *)&v64, v17, v17 + 2, (uint64_t)&__p);
            v20 = v17 + 4 != v18 && v19;
            v17 += 2;
          }
          while (v20);
          if (__p.i8[4] || __p.i32[0])
            goto LABEL_14;
          v15 = *(double ***)(v9 + 32);
        }
      }
      v16 += 3;
    }
    v22 = *(double **)v9;
    v21 = *(double **)(v9 + 8);
    __p = 0uLL;
    v68 = 0;
    v23 = (char *)v21 - (char *)v22;
    if (v21 != v22)
    {
      if (v23 < 0)
        sub_1000D02C0();
      __p.i64[0] = (uint64_t)operator new((char *)v21 - (char *)v22);
      __p.i64[1] = __p.i64[0];
      v24 = __p.i64[0] + 16 * (v23 >> 4);
      v68 = v24;
      memmove((void *)__p.i64[0], v22, v23);
      __p.i64[1] = v24;
    }
    v8 = sub_100283A38((double *)&v64, (double **)&__p);
    if (__p.i64[0])
    {
      __p.i64[1] = __p.i64[0];
      operator delete((void *)__p.i64[0]);
    }
    v25 = *(_QWORD *)(v9 + 24);
    v26 = *(_QWORD *)(v9 + 32);
    while (1)
    {
      if (v25 == v26)
        goto LABEL_14;
      v30 = *(_BYTE **)v25;
      v29 = *(_BYTE **)(v25 + 8);
      memset(v69, 0, sizeof(v69));
      v31 = v29 - v30;
      if (v29 == v30)
      {
        v70 = &off_1003FBE28;
        __p.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode."
                              "app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sd"
                              "k/usr/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
        __p.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::ge"
                              "ometry::model::linestring<boost::geometry::model::d2::point_xy<double>>]";
        v68 = 54;
        sub_1001D0450((uint64_t)&v70, &__p);
      }
      if (v31 < 0)
        sub_1000D02C0();
      v32 = (double *)operator new(v29 - v30);
      memmove(v32, v30, v31);
      v33 = v32;
      v34 = v32;
      if (v31 != 16)
        break;
LABEL_70:
      v54 = v33[1];
      v55 = v34[1];
      v56 = *v33 - *v34;
      v57 = v54 - v55;
      v58 = *(double *)&v64 - *v34;
      v59 = (*((double *)&v64 + 1) - v55) * (v54 - v55) + v58 * v56;
      if (v59 <= 0.0)
      {
        v27 = v58 * v58 + 0.0 + (*((double *)&v64 + 1) - v55) * (*((double *)&v64 + 1) - v55);
      }
      else
      {
        v60 = v57 * v57 + v56 * v56;
        if (v60 <= v59)
        {
          v61 = *((double *)&v64 + 1) - v54;
          v62 = *(double *)&v64 - *v33;
        }
        else
        {
          v61 = *((double *)&v64 + 1) - (v55 + v57 * (v59 / v60));
          v62 = *(double *)&v64 - (*v34 + v56 * (v59 / v60));
        }
        v27 = v62 * v62 + 0.0 + v61 * v61;
      }
      v28 = sqrt(v27);
      if (v28 < v8)
        v8 = v28;
      operator delete(v32);
      v25 += 24;
    }
    v35 = v32[2];
    v36 = v32[3];
    v37 = v32[1];
    v38 = v35 - *v32;
    v39 = v36 - v37;
    v40 = *(double *)&v64 - *v32;
    v41 = (*((double *)&v64 + 1) - v37) * (v36 - v37) + v40 * v38;
    if (v41 <= 0.0)
    {
      v43 = v40 * v40 + 0.0 + (*((double *)&v64 + 1) - v37) * (*((double *)&v64 + 1) - v37);
      v34 = v32;
      if (v31 == 32)
        goto LABEL_68;
    }
    else
    {
      v42 = v39 * v39 + v38 * v38;
      if (v42 <= v41)
      {
        v43 = (*(double *)&v64 - v35) * (*(double *)&v64 - v35)
            + 0.0
            + (*((double *)&v64 + 1) - v36) * (*((double *)&v64 + 1) - v36);
        v34 = v32;
        if (v31 == 32)
        {
LABEL_68:
          v33 = v34 + 2;
          goto LABEL_70;
        }
      }
      else
      {
        v43 = (*(double *)&v64 - (*v32 + v38 * (v41 / v42))) * (*(double *)&v64 - (*v32 + v38 * (v41 / v42)))
            + 0.0
            + (*((double *)&v64 + 1) - (v37 + v39 * (v41 / v42))) * (*((double *)&v64 + 1) - (v37 + v39 * (v41 / v42)));
        v34 = v32;
        if (v31 == 32)
          goto LABEL_68;
      }
    }
    v44 = v32 + 5;
    v45 = 16 * (v31 >> 4) - 32;
    v34 = v32;
    while (1)
    {
      v46 = *(v44 - 3);
      v47 = *(v44 - 1);
      v48 = *(v44 - 2);
      v49 = v47 - v46;
      v50 = *v44 - v48;
      v51 = (*((double *)&v64 + 1) - v48) * v50 + (*(double *)&v64 - v46) * (v47 - v46);
      if (v51 <= 0.0)
      {
        v53 = (*(double *)&v64 - v46) * (*(double *)&v64 - v46)
            + 0.0
            + (*((double *)&v64 + 1) - v48) * (*((double *)&v64 + 1) - v48);
        if (v53 == 0.0)
          goto LABEL_69;
      }
      else
      {
        v52 = v50 * v50 + v49 * v49;
        if (v52 <= v51)
        {
          v53 = (*(double *)&v64 - v47) * (*(double *)&v64 - v47)
              + 0.0
              + (*((double *)&v64 + 1) - *v44) * (*((double *)&v64 + 1) - *v44);
          if (v53 == 0.0)
          {
LABEL_69:
            v34 = v44 - 3;
            v33 = v44 - 1;
            goto LABEL_70;
          }
        }
        else
        {
          v53 = (*(double *)&v64 - (v46 + v49 * (v51 / v52))) * (*(double *)&v64 - (v46 + v49 * (v51 / v52)))
              + 0.0
              + (*((double *)&v64 + 1) - (v48 + v50 * (v51 / v52)))
              * (*((double *)&v64 + 1) - (v48 + v50 * (v51 / v52)));
          if (v53 == 0.0)
            goto LABEL_69;
        }
      }
      if (v53 < v43)
      {
        v43 = v53;
        v34 = v44 - 3;
      }
      v44 += 2;
      v45 -= 16;
      if (!v45)
        goto LABEL_68;
    }
  }
  v8 = v7;
LABEL_76:
  nullsub_23(v65);
  return v8;
}

void sub_1002824B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    nullsub_23(&a11);
    _Unwind_Resume(a1);
  }
  nullsub_23(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1002825A0(uint64_t a1, _QWORD *a2)
{
  uint64_t ***v3;
  _BOOL8 result;
  const void ***v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 1;
  v3 = (uint64_t ***)(a1 + 16);
  while (1)
  {
    v3 = (uint64_t ***)*v3;
    result = v3 != 0;
    if (!v3)
      break;
    v5 = sub_1000A9C6C(a2, v3 + 2);
    if (!v5 || (sub_1000790EC((const void ***)v3 + 2, (unsigned __int8 ***)v5 + 2) & 1) == 0)
      return 1;
  }
  return result;
}

void sub_100282610(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  double v39;
  double v40;
  char *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  void *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[1920];
  _QWORD v59[5];
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  _QWORD v62[5];
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  void *v65[3];
  void *v66;
  char *v67;
  void *__p;
  uint64_t *v69;
  uint64_t v70;
  _BYTE v71[1927];
  __int128 v72;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v26 = v4;
      v4 = (_QWORD *)*v4;
      v27 = (std::__shared_weak_count *)v26[3];
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      operator delete(v26);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    do
    {
      v18 = *(_QWORD *)(v8 - 24);
      if (v18)
      {
        v19 = *(_QWORD *)(v8 - 16);
        v20 = *(void **)(v8 - 24);
        if (v19 != v18)
        {
          v21 = *(_QWORD *)(v8 - 16);
          do
          {
            v23 = *(void **)(v21 - 24);
            v21 -= 24;
            v22 = v23;
            if (v23)
            {
              *(_QWORD *)(v19 - 16) = v22;
              operator delete(v22);
            }
            v19 = v21;
          }
          while (v21 != v18);
          v20 = *(void **)(v8 - 24);
        }
        *(_QWORD *)(v8 - 16) = v18;
        operator delete(v20);
      }
      v24 = v8 - 48;
      v25 = *(void **)(v8 - 48);
      if (v25)
      {
        *(_QWORD *)(v8 - 40) = v25;
        operator delete(v25);
      }
      v8 -= 48;
    }
    while (v24 != v7);
  }
  *(_QWORD *)(a1 + 48) = v7;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
    return;
  do
  {
    sub_1002846C4((_QWORD *)a1, v9 + 8);
    v9 += 1920;
  }
  while (v9 != v10);
  sub_1000B53CC(v71, *a2);
  sub_100159F88((uint64_t)v71, v62);
  sub_1001D5840((unsigned __int8 *)(a1 + 64), (uint64_t)v62);
  v11 = v64;
  if (v64)
  {
    v12 = (unint64_t *)&v64->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v63;
  if (v63)
  {
    v15 = (unint64_t *)&v63->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nullsub_22(v62);
  sub_100073738(v71);
  v17 = *a2;
  v57 = a2[1];
  if (*a2 == v57)
    return;
  while (2)
  {
    v30 = *(_QWORD **)(v17 + 1800);
    v31 = *(_QWORD **)(v17 + 1808);
    while (v30 != v31)
    {
      v69 = 0;
      __p = 0;
      v70 = 0;
      sub_1000B53CC(v58, v17);
      sub_100159F88((uint64_t)v58, v59);
      sub_100281AD8(a1, (uint64_t)v59, v30, (uint64_t)v62);
      sub_100072330(v62, (uint64_t)v65);
      sub_10007342C(v62);
      v33 = v61;
      if (!v61)
        goto LABEL_49;
      v34 = (unint64_t *)&v61->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v36 = v60;
        if (!v60)
          goto LABEL_55;
      }
      else
      {
LABEL_49:
        v36 = v60;
        if (!v60)
          goto LABEL_55;
      }
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
LABEL_55:
      nullsub_22(v59);
      sub_100073738(v58);
      sub_1002847D4((uint64_t)v65, a1 + 40, (uint64_t)v62, v39, v40);
      sub_100284FA0((uint64_t)v65, (uint64_t *)(a1 + 40), v62, (uint64_t)&__p, &v72, v59);
      if ((void **)(a1 + 40) != &__p)
        sub_100283B7C((char **)(a1 + 40), (uint64_t *)__p, v69, 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (_BYTE *)__p) >> 4));
      v41 = (char *)v66;
      if (v66)
      {
        v42 = v67;
        v43 = v66;
        if (v67 != v66)
        {
          v44 = v67;
          do
          {
            v46 = (void *)*((_QWORD *)v44 - 3);
            v44 -= 24;
            v45 = v46;
            if (v46)
            {
              *((_QWORD *)v42 - 2) = v45;
              operator delete(v45);
            }
            v42 = v44;
          }
          while (v44 != v41);
          v43 = v66;
        }
        v67 = v41;
        operator delete(v43);
      }
      if (v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      v47 = (uint64_t *)__p;
      if (__p)
      {
        v48 = v69;
        v32 = __p;
        if (v69 != __p)
        {
          do
          {
            v49 = *(v48 - 3);
            if (v49)
            {
              v50 = *(v48 - 2);
              v51 = (void *)*(v48 - 3);
              if (v50 != v49)
              {
                v52 = *(v48 - 2);
                do
                {
                  v54 = *(void **)(v52 - 24);
                  v52 -= 24;
                  v53 = v54;
                  if (v54)
                  {
                    *(_QWORD *)(v50 - 16) = v53;
                    operator delete(v53);
                  }
                  v50 = v52;
                }
                while (v52 != v49);
                v51 = (void *)*(v48 - 3);
              }
              *(v48 - 2) = v49;
              operator delete(v51);
            }
            v55 = v48 - 6;
            v56 = (void *)*(v48 - 6);
            if (v56)
            {
              *(v48 - 5) = (uint64_t)v56;
              operator delete(v56);
            }
            v48 -= 6;
          }
          while (v55 != v47);
          v32 = __p;
        }
        v69 = v47;
        operator delete(v32);
      }
      v30 += 9;
    }
    v17 += 1920;
    if (v17 != v57)
      continue;
    break;
  }
}

void sub_100282A98(_Unwind_Exception *a1)
{
  sub_10015A328((uint64_t)&STACK[0x7D0]);
  sub_100073738(&STACK[0x860]);
  _Unwind_Resume(a1);
}

void sub_100282AB4(_Unwind_Exception *a1)
{
  sub_100073738(&STACK[0x860]);
  _Unwind_Resume(a1);
}

void sub_100282AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10007342C(&STACK[0x7D0]);
  sub_10015A328((uint64_t)&STACK[0x790]);
  sub_100073738(va);
  sub_100282BB8((void **)&STACK[0x848]);
  _Unwind_Resume(a1);
}

void sub_100282B04(_Unwind_Exception *a1)
{
  sub_100282BB8((void **)&STACK[0x848]);
  _Unwind_Resume(a1);
}

void sub_100282B18(_Unwind_Exception *a1)
{
  sub_100282B34((uint64_t)&STACK[0x818]);
  sub_100282BB8((void **)&STACK[0x848]);
  _Unwind_Resume(a1);
}

uint64_t sub_100282B34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      v5 = *(_QWORD *)(a1 + 32);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void **sub_100282BB8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            v8 = *((_QWORD *)v3 - 2);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v6 - 16) = v9;
                operator delete(v9);
              }
              v6 = v8;
            }
            while (v8 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v11 = v3 - 48;
        v12 = (void *)*((_QWORD *)v3 - 6);
        if (v12)
        {
          *((_QWORD *)v3 - 5) = v12;
          operator delete(v12);
        }
        v3 -= 48;
      }
      while (v11 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_100282C80(double *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  char v49;
  uint64_t v50;
  _QWORD v51[3];
  char v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[31];
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  char v70;
  _QWORD v71[5];
  BOOL v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  BOOL v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  BOOL v80;

  v50 = 0;
  v4 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_56;
  }
  while (1)
  {
    v15 = *v4;
    v18 = v4[1];
    v10 = (_QWORD *)v4[3];
    v7 = (_QWORD *)v4[4];
    if (v10 != v7)
      break;
    v16 = v18 - v15;
    if ((unint64_t)(v18 - v15) <= 0x1F)
      v17 = 0;
    else
      v17 = -1;
    if (v15 != v18 + 16 * v17)
    {
      v28 = 0;
      v25 = 0;
      v29 = 0;
      v30 = 0;
      v7 = (_QWORD *)v4[3];
      v6 = v7;
      goto LABEL_40;
    }
LABEL_7:
    v4 += 6;
    if (v4 == v3)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v4 = v3;
      goto LABEL_56;
    }
  }
  v19 = (_QWORD *)v4[3];
  while (1)
  {
    v20 = v19[1];
    v21 = (unint64_t)(v20 - *v19) <= 0x1F ? 0 : -1;
    if (*v19 != v20 + 16 * v21)
      break;
    v19 += 3;
    if (v19 == v7)
    {
      v19 = (_QWORD *)v4[4];
      break;
    }
  }
  v16 = v18 - v15;
  if ((unint64_t)(v18 - v15) <= 0x1F)
    v22 = 0;
  else
    v22 = -1;
  if (v15 == v18 + 16 * v22 && v19 == v7)
    goto LABEL_7;
  v6 = (_QWORD *)v4[3];
  while (1)
  {
    v25 = *v6;
    v24 = v6[1];
    v26 = v24 - *v6;
    v27 = v26 <= 0x1F ? 0 : -1;
    if (v25 != v24 + 16 * v27)
      break;
    v6 += 3;
    if (v6 == v7)
    {
      v25 = 0;
      v28 = 0;
      v6 = (_QWORD *)v4[4];
      goto LABEL_33;
    }
  }
  v28 = v26 < 0x20;
LABEL_33:
  while (1)
  {
    v30 = *v10;
    v31 = v10[1];
    v32 = v31 - *v10;
    v33 = v32 <= 0x1F ? 0 : -1;
    if (v30 != v31 + 16 * v33)
      break;
    v10 += 3;
    if (v10 == v7)
    {
      v29 = 0;
      v30 = 0;
      v10 = (_QWORD *)v4[4];
      goto LABEL_40;
    }
  }
  v29 = v32 < 0x20;
LABEL_40:
  v5 = v16 < 0x20;
  if (v16 <= 0x1F)
    v34 = 0;
  else
    v34 = -1;
  v14 = v18 + 16 * v34;
  if (v6 == v7)
    v8 = 0;
  else
    v8 = v25;
  v9 = v6 != v7 && v28;
  if (v10 == v7)
    v11 = 0;
  else
    v11 = v30;
  v12 = v10 != v7 && v29;
  v13 = v5;
LABEL_56:
  HIBYTE(v71[0]) = 0;
  v55 = v71[0];
  v60 = 0;
  v56 = 0u;
  v57 = *(_OWORD *)v59;
  v58 = *(unint64_t *)&v59[16];
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v66 = 0;
  v65 = 0;
  v67 = 0;
  v68 = 0;
  v70 = 0;
  v69 = 0;
  memset(v59, 0, sizeof(v59));
  v71[0] = v4;
  v71[1] = v3;
  v71[2] = v15;
  v71[3] = v5;
  v71[4] = v14;
  v72 = v13;
  v73 = v6;
  v74 = v7;
  v75 = v8;
  v76 = v9;
  v77 = v10;
  v78 = v7;
  v79 = v11;
  v80 = v12;
  v51[0] = v3;
  v51[1] = v3;
  v51[2] = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  sub_1002831D4(a1, (uint64_t)v71, v51, (uint64_t)&v49, (uint64_t)v59, (double *)&v50);
  v35 = *(double **)&v59[16];
  if (*(_QWORD *)&v59[16] == v61)
  {
    v35 = v69;
    if (v70)
      v36 = v69;
    else
      v36 = v69 + 2;
  }
  else
  {
    v36 = (double *)(*(_QWORD *)&v59[16] + 16 * (v59[24] == 0));
  }
  v37 = v35[1];
  v38 = v36[1];
  v39 = *a1;
  v40 = a1[1];
  v41 = *v36 - *v35;
  v42 = v38 - v37;
  v43 = *a1 - *v35;
  v44 = (v38 - v37) * (v40 - v37) + v43 * v41;
  if (v44 <= 0.0)
  {
    v47 = v43 * v43 + 0.0 + (v40 - v37) * (v40 - v37);
  }
  else
  {
    v45 = v42 * v42 + v41 * v41;
    if (v45 <= v44)
    {
      v47 = (v39 - *v36) * (v39 - *v36) + 0.0 + (v40 - v38) * (v40 - v38);
    }
    else
    {
      v46 = v39 - (*v35 + v41 * (v44 / v45));
      v47 = v46 * v46 + 0.0 + (v40 - (v37 + v42 * (v44 / v45))) * (v40 - (v37 + v42 * (v44 / v45)));
    }
  }
  return sqrt(v47);
}

uint64_t sub_100283054(double *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  double **v9;
  double **v10;
  double *v11;
  double *v12;
  double *v13;
  int v15;
  char v16;

  v2 = *a2;
  if (*a2 == a2[1])
    return 0xFFFFFFFFLL;
  while (1)
  {
    v6 = *(double **)v2;
    v7 = *(double **)(v2 + 8);
    if ((unint64_t)v7 - *(_QWORD *)v2 >= 0x40)
    {
      v15 = 0;
      v16 = 0;
      if (v6 + 2 == v7)
      {
        v5 = 0xFFFFFFFFLL;
        goto LABEL_4;
      }
      do
      {
        if (!sub_10005B9D0(a1, v6, v6 + 2, (uint64_t)&v15))
          break;
        v8 = v6 + 4;
        v6 += 2;
      }
      while (v8 != v7);
      if (v15)
        v5 = 1;
      else
        v5 = 0xFFFFFFFFLL;
      if (v16)
      {
        v5 = 0;
LABEL_4:
        if ((v5 & 0x80000000) == 0)
          return v5;
        goto LABEL_5;
      }
      if (v15)
        break;
    }
LABEL_5:
    v2 += 48;
    if (v2 == a2[1])
      return 0xFFFFFFFFLL;
  }
  v10 = *(double ***)(v2 + 24);
  v9 = *(double ***)(v2 + 32);
  if (v10 != v9)
  {
    while (1)
    {
      v11 = *v10;
      v12 = v10[1];
      if ((unint64_t)((char *)v12 - (char *)*v10) >= 0x40)
      {
        v15 = 0;
        v16 = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            if (!sub_10005B9D0(a1, v11, v11 + 2, (uint64_t)&v15))
              break;
            v13 = v11 + 4;
            v11 += 2;
          }
          while (v13 != v12);
          if (v16)
            return 0;
          if (v15)
            goto LABEL_5;
          v9 = *(double ***)(v2 + 32);
        }
      }
      v10 += 3;
      if (v10 == v9)
        goto LABEL_4;
    }
  }
  return 1;
}

double *sub_1002831D4(double *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, double *a6)
{
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *result;
  double *v26;
  double **v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  double **v43;
  double *v44;
  char v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double *v62;
  uint64_t v63;
  double *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  double **v75;
  double **v76;
  double **v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  BOOL v87;
  double *v88;
  double *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double **v93;
  double *v94;
  double *v95;
  unint64_t v96;
  uint64_t v97;

  *(_QWORD *)a5 = *(_QWORD *)a2;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v11;
    *(_QWORD *)(a5 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a5 + 56) = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56))
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a5 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a5 + 64) = v12;
    }
    *(_QWORD *)(a5 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a5 + 88) = *(_QWORD *)(a2 + 88);
    if (*(_QWORD *)(a2 + 80) != *(_QWORD *)(a2 + 88))
    {
      v13 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a5 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a5 + 96) = v13;
    }
  }
  v14 = *(double **)(a5 + 16);
  if (v14 == *(double **)(a5 + 32))
  {
    v14 = *(double **)(a5 + 96);
    if (*(_BYTE *)(a5 + 104))
      v15 = *(double **)(a5 + 96);
    else
      v15 = v14 + 2;
  }
  else
  {
    v15 = &v14[2 * (*(_BYTE *)(a5 + 24) == 0)];
  }
  v16 = v14[1];
  v17 = v15[1];
  v18 = *a1;
  v19 = a1[1];
  v20 = *v15 - *v14;
  v21 = v17 - v16;
  v22 = *a1 - *v14;
  v23 = (v17 - v16) * (v19 - v16) + v22 * v20;
  if (v23 <= 0.0)
  {
    *a6 = v22 * v22 + 0.0 + (v19 - v16) * (v19 - v16);
    result = *(double **)(a2 + 16);
    v26 = *(double **)(a2 + 32);
    if (result == v26)
      goto LABEL_18;
  }
  else
  {
    v24 = v21 * v21 + v20 * v20;
    if (v24 <= v23)
    {
      *a6 = (v18 - *v15) * (v18 - *v15) + 0.0 + (v19 - v17) * (v19 - v17);
      result = *(double **)(a2 + 16);
      v26 = *(double **)(a2 + 32);
      if (result == v26)
        goto LABEL_18;
    }
    else
    {
      *a6 = (v18 - (*v14 + v20 * (v23 / v24))) * (v18 - (*v14 + v20 * (v23 / v24)))
          + 0.0
          + (v19 - (v16 + v21 * (v23 / v24))) * (v19 - (v16 + v21 * (v23 / v24)));
      result = *(double **)(a2 + 16);
      v26 = *(double **)(a2 + 32);
      if (result == v26)
      {
LABEL_18:
        v28 = *(_QWORD *)(a2 + 96) + 16;
        *(_QWORD *)(a2 + 96) = v28;
        v27 = *(double ***)(a2 + 80);
        v29 = v27[1];
        if ((unint64_t)((char *)v29 - (char *)*v27) <= 0x1F)
          v30 = 0;
        else
          v30 = -1;
        if ((double *)v28 == &v29[2 * v30])
        {
          v27 += 3;
          *(_QWORD *)(a2 + 80) = v27;
          v93 = *(double ***)(a2 + 88);
          if (v27 != v93)
          {
            while (1)
            {
              v94 = *v27;
              v95 = v27[1];
              v96 = (char *)v95 - (char *)*v27;
              v97 = v96 <= 0x1F ? 0 : -1;
              if (v94 != &v95[2 * v97])
                break;
              v27 += 3;
              *(_QWORD *)(a2 + 80) = v27;
              if (v27 == v93)
              {
                v27 = v93;
                goto LABEL_22;
              }
            }
            *(_QWORD *)(a2 + 96) = v94;
            *(_BYTE *)(a2 + 104) = v96 < 0x20;
          }
        }
        goto LABEL_22;
      }
    }
  }
  result += 2;
  *(_QWORD *)(a2 + 16) = result;
  v27 = *(double ***)(a2 + 80);
LABEL_22:
  v31 = *(_QWORD **)a2;
  v32 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if ((unint64_t)(v32 - **(_QWORD **)a2) <= 0x1F)
    v33 = 0;
  else
    v33 = -1;
  v34 = result == (double *)(v32 + 16 * v33) && v27 == *(double ***)(*(_QWORD *)a2 + 32);
  if (v34 && (v27 == *(double ***)(a2 + 88) || !*(_QWORD *)(a2 + 96)))
  {
    *(_QWORD *)a2 = v31 + 6;
    sub_1002838B8(a2);
    v31 = *(_QWORD **)a2;
    result = *(double **)(a2 + 16);
    v26 = *(double **)(a2 + 32);
    v27 = *(double ***)(a2 + 80);
  }
  v35 = *(_QWORD **)(a2 + 8);
  v36 = *(_QWORD *)(a2 + 24);
  v37 = v36 >> 8;
  v38 = *(_BYTE *)(a2 + 40);
  v40 = *(uint64_t **)(a2 + 48);
  v39 = *(uint64_t **)(a2 + 56);
  v41 = *(_QWORD *)(a2 + 64);
  v42 = *(_BYTE *)(a2 + 72);
  v43 = *(double ***)(a2 + 88);
  v44 = *(double **)(a2 + 96);
  v45 = *(_BYTE *)(a2 + 104);
LABEL_35:
  while (v31 != (_QWORD *)*a3
       || v31 != v35 && (result != (double *)a3[2] || v27 != (double **)a3[10] || v27 != v43 && v44 != (double *)a3[12]))
  {
    v46 = v44 + 2;
    if (v45)
      v47 = v44;
    else
      v47 = v44 + 2;
    if ((_BYTE)v36)
      v48 = result;
    else
      v48 = result + 2;
    if (result == v26)
      v49 = v44;
    else
      v49 = result;
    if (result != v26)
      v47 = v48;
    v50 = v49[1];
    v51 = v47[1];
    v52 = *a1;
    v53 = a1[1];
    v54 = *v47 - *v49;
    v55 = v51 - v50;
    v56 = *a1 - *v49;
    v57 = (v51 - v50) * (v53 - v50) + v56 * v54;
    if (v57 <= 0.0)
    {
      v59 = v56 * v56 + 0.0 + (v53 - v50) * (v53 - v50);
      if (v59 == 0.0)
        goto LABEL_140;
    }
    else
    {
      v58 = v55 * v55 + v54 * v54;
      if (v58 <= v57)
      {
        v59 = (v52 - *v47) * (v52 - *v47) + 0.0 + (v53 - v51) * (v53 - v51);
        if (v59 == 0.0)
          goto LABEL_140;
      }
      else
      {
        v59 = (v52 - (*v49 + v54 * (v57 / v58))) * (v52 - (*v49 + v54 * (v57 / v58)))
            + 0.0
            + (v53 - (v50 + v55 * (v57 / v58))) * (v53 - (v50 + v55 * (v57 / v58)));
        if (v59 == 0.0)
          goto LABEL_140;
      }
    }
    if (*(_QWORD *)&v59 >> 52 <= 0x7FEuLL)
    {
      v60 = fabs(v59);
      v61 = 2.22044605e-16;
      if (v60 >= 1.0)
        v61 = v60 * 2.22044605e-16;
      if (v60 <= v61)
      {
LABEL_140:
        *a6 = v59;
        *(_QWORD *)a5 = v31;
        *(_QWORD *)(a5 + 8) = v35;
        if (v31 != v35)
        {
          *(_QWORD *)(a5 + 16) = result;
          *(_QWORD *)(a5 + 24) = v36 | (v37 << 8);
          *(_QWORD *)(a5 + 32) = v26;
          *(_BYTE *)(a5 + 40) = v38;
          *(_QWORD *)(a5 + 48) = v40;
          *(_QWORD *)(a5 + 56) = v39;
          if (v40 != v39)
          {
            *(_QWORD *)(a5 + 64) = v41;
            *(_BYTE *)(a5 + 72) = v42;
          }
          *(_QWORD *)(a5 + 80) = v27;
          *(_QWORD *)(a5 + 88) = v43;
          if (v27 != v43)
          {
            *(_QWORD *)(a5 + 96) = v44;
            *(_BYTE *)(a5 + 104) = v45;
          }
        }
        return result;
      }
    }
    if (v59 < *a6)
    {
      *a6 = v59;
      *(_QWORD *)a5 = v31;
      *(_QWORD *)(a5 + 8) = v35;
      if (v31 != v35)
      {
        *(_QWORD *)(a5 + 16) = result;
        *(_QWORD *)(a5 + 24) = v36 | (v37 << 8);
        *(_QWORD *)(a5 + 32) = v26;
        *(_BYTE *)(a5 + 40) = v38;
        *(_QWORD *)(a5 + 48) = v40;
        *(_QWORD *)(a5 + 56) = v39;
        if (v40 != v39)
        {
          *(_QWORD *)(a5 + 64) = v41;
          *(_BYTE *)(a5 + 72) = v42;
        }
        *(_QWORD *)(a5 + 80) = v27;
        *(_QWORD *)(a5 + 88) = v43;
        if (v27 != v43)
        {
          *(_QWORD *)(a5 + 96) = v44;
          *(_BYTE *)(a5 + 104) = v45;
        }
      }
    }
    if (result == v26)
    {
      v62 = v27[1];
      if ((unint64_t)((char *)v62 - (char *)*v27) <= 0x1F)
        v63 = 0;
      else
        v63 = -1;
      if (v46 == &v62[2 * v63])
      {
        while (1)
        {
          v27 += 3;
          if (v27 == v43)
            break;
          v44 = *v27;
          v64 = v27[1];
          v65 = (char *)v64 - (char *)*v27;
          if (v65 <= 0x1F)
            v66 = 0;
          else
            v66 = -1;
          if (v44 != &v64[2 * v66])
          {
            v45 = v65 < 0x20;
            goto LABEL_83;
          }
        }
        v44 = v46;
        v27 = v43;
      }
      else
      {
        v44 = v46;
      }
LABEL_83:
      result = v26;
    }
    else
    {
      result += 2;
    }
    v67 = v31[1];
    if ((unint64_t)(v67 - *v31) <= 0x1F)
      v68 = 0;
    else
      v68 = -1;
    v69 = result == (double *)(v67 + 16 * v68) && v27 == (double **)v31[4];
    if (!v69 || v27 != v43 && v44)
      continue;
    v70 = v31 + 6;
    v31 = v35;
    if (v70 == v35)
      continue;
    v31 = v70;
    while (1)
    {
      v73 = (double *)*v31;
      v74 = v31[1];
      v75 = (double **)v31[3];
      v76 = (double **)v31[4];
      if (v75 != v76)
        break;
      v71 = v74 - (_QWORD)v73;
      if ((unint64_t)(v74 - (_QWORD)v73) <= 0x1F)
        v72 = 0;
      else
        v72 = -1;
      if (v73 != (double *)(v74 + 16 * v72))
      {
        v86 = 0;
        v83 = 0;
        v87 = 0;
        v88 = 0;
        v76 = (double **)v31[3];
        v40 = (uint64_t *)v76;
        goto LABEL_132;
      }
LABEL_100:
      v31 += 6;
      if (v31 == v35)
      {
        v31 = v35;
        goto LABEL_35;
      }
    }
    v77 = (double **)v31[3];
    while (1)
    {
      v78 = v77[1];
      v79 = (unint64_t)((char *)v78 - (char *)*v77) <= 0x1F ? 0 : -1;
      if (*v77 != &v78[2 * v79])
        break;
      v77 += 3;
      if (v77 == v76)
      {
        v77 = (double **)v31[4];
        break;
      }
    }
    v71 = v74 - (_QWORD)v73;
    if ((unint64_t)(v74 - (_QWORD)v73) <= 0x1F)
      v80 = 0;
    else
      v80 = -1;
    if (v73 == (double *)(v74 + 16 * v80) && v77 == v76)
      goto LABEL_100;
    v40 = (uint64_t *)v31[3];
    while (1)
    {
      v83 = *v40;
      v82 = v40[1];
      v84 = v82 - *v40;
      v85 = v84 <= 0x1F ? 0 : -1;
      if (v83 != v82 + 16 * v85)
        break;
      v40 += 3;
      if (v40 == (uint64_t *)v76)
      {
        v83 = 0;
        v86 = 0;
        v40 = (uint64_t *)v31[4];
        goto LABEL_125;
      }
    }
    v86 = v84 < 0x20;
LABEL_125:
    while (1)
    {
      v88 = *v75;
      v89 = v75[1];
      v90 = (char *)v89 - (char *)*v75;
      v91 = v90 <= 0x1F ? 0 : -1;
      if (v88 != &v89[2 * v91])
        break;
      v75 += 3;
      if (v75 == v76)
      {
        v87 = 0;
        v88 = 0;
        v75 = (double **)v31[4];
        goto LABEL_132;
      }
    }
    v87 = v90 < 0x20;
LABEL_132:
    v37 = 0;
    v38 = v71 < 0x20;
    if (v71 <= 0x1F)
      v92 = 0;
    else
      v92 = -1;
    v26 = (double *)(v74 + 16 * v92);
    if (v40 != (uint64_t *)v76)
    {
      v42 = v86;
      v41 = v83;
    }
    if (v75 != v76)
    {
      v44 = v88;
      v45 = v87;
    }
    v43 = v76;
    v27 = v75;
    v39 = (uint64_t *)v76;
    result = (double *)*v31;
    LOBYTE(v36) = v71 < 0x20;
  }
  return result;
}

uint64_t sub_1002838B8(uint64_t result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;

  v2 = *(uint64_t **)result;
  v1 = *(uint64_t **)(result + 8);
  while (v2 != v1)
  {
    v5 = *v2;
    v4 = v2[1];
    v7 = (uint64_t *)v2[3];
    v6 = (uint64_t *)v2[4];
    if (v7 == v6)
    {
      if ((unint64_t)(v4 - v5) <= 0x1F)
        v3 = 0;
      else
        v3 = -1;
      if (v5 != v4 + 16 * v3)
        goto LABEL_31;
    }
    else
    {
      v8 = (uint64_t *)v2[3];
      while (1)
      {
        v9 = v8[1];
        v10 = (unint64_t)(v9 - *v8) <= 0x1F ? 0 : -1;
        if (*v8 != v9 + 16 * v10)
          break;
        v8 += 3;
        if (v8 == v6)
        {
          v8 = (uint64_t *)v2[4];
          break;
        }
      }
      if ((unint64_t)(v4 - v5) <= 0x1F)
        v11 = 0;
      else
        v11 = -1;
      if (v5 != v4 + 16 * v11 || v8 != v6)
      {
        if (v7 == v6)
        {
LABEL_31:
          v18 = 0;
          v14 = 0;
          v19 = 0;
          v20 = 0;
          v13 = v7;
        }
        else
        {
          v13 = (uint64_t *)v2[3];
          while (1)
          {
            v14 = *v13;
            v15 = v13[1];
            v16 = v15 - *v13;
            v17 = v16 <= 0x1F ? 0 : -1;
            if (v14 != v15 + 16 * v17)
              break;
            v13 += 3;
            if (v13 == v6)
            {
              v14 = 0;
              v18 = 0;
              v13 = v6;
              goto LABEL_33;
            }
          }
          v18 = v16 < 0x20;
LABEL_33:
          while (1)
          {
            v20 = *v7;
            v21 = v7[1];
            v22 = v21 - *v7;
            v23 = v22 <= 0x1F ? 0 : -1;
            if (v20 != v21 + 16 * v23)
              break;
            v7 += 3;
            if (v7 == v6)
            {
              v19 = 0;
              v20 = 0;
              v7 = v6;
              goto LABEL_40;
            }
          }
          v19 = v22 < 0x20;
        }
LABEL_40:
        v24 = (unint64_t)(v4 - v5) < 0x20;
        if ((unint64_t)(v4 - v5) <= 0x1F)
          v25 = 0;
        else
          v25 = -1;
        *(_QWORD *)(result + 16) = v5;
        *(_QWORD *)(result + 24) = v24;
        *(_QWORD *)(result + 32) = v4 + 16 * v25;
        *(_BYTE *)(result + 40) = v24;
        *(_QWORD *)(result + 48) = v13;
        *(_QWORD *)(result + 56) = v6;
        if (v13 != v6)
        {
          *(_QWORD *)(result + 64) = v14;
          *(_BYTE *)(result + 72) = v18;
        }
        *(_QWORD *)(result + 80) = v7;
        *(_QWORD *)(result + 88) = v6;
        if (v7 != v6)
        {
          *(_QWORD *)(result + 96) = v20;
          *(_BYTE *)(result + 104) = v19;
        }
        return result;
      }
    }
    v2 += 6;
    *(_QWORD *)result = v2;
  }
  return result;
}

double sub_100283A38(double *a1, double **a2)
{
  double *v3;
  double *v4;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int8x16_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (**v22)(std::exception *__hidden);

  v3 = *a2;
  v4 = a2[1];
  if (v3 == v4)
  {
    v22 = &off_1003FBE28;
    v18.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/lo"
                          "cal/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
    v18.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::geomet"
                          "ry::model::linestring<boost::geometry::model::d2::point_xy<double>>]";
    v19 = 54;
    sub_1001D0450((uint64_t)&v22, &v18);
  }
  v21 = 0;
  v18.i64[0] = 0;
  v22 = 0;
  sub_10005BD78(a1, v3, v4, (uint64_t)&v20, (double **)&v18, (double **)&v22, (double *)&v21);
  v6 = *((double *)v22 + 1);
  v7 = *a1;
  v8 = a1[1];
  v9 = *(double *)(v18.i64[0] + 8);
  v10 = *(double *)v22 - *(double *)v18.i64[0];
  v11 = v6 - v9;
  v12 = *a1 - *(double *)v18.i64[0];
  v13 = (v8 - v9) * (v6 - v9) + v12 * v10;
  if (v13 <= 0.0)
    return sqrt(v12 * v12 + 0.0 + (v8 - v9) * (v8 - v9));
  v14 = v11 * v11 + v10 * v10;
  if (v14 <= v13)
  {
    v15 = v8 - v6;
    v16 = v7 - *(double *)v22;
  }
  else
  {
    v15 = v8 - (v9 + v11 * (v13 / v14));
    v16 = v7 - (*(double *)v18.i64[0] + v10 * (v13 / v14));
  }
  return sqrt(v16 * v16 + 0.0 + v15 * v15);
}

void sub_100283B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception::~exception((std::exception *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_100283B7C(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char *v25;
  void *v26;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_100283E38((void **)a1);
    if (a4 > 0x555555555555555)
      goto LABEL_39;
    v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v10;
    if (v11 > 0x555555555555555)
LABEL_39:
      sub_1000D02C0();
    v12 = 48 * v11;
    v13 = (char *)operator new(48 * v11);
    *a1 = v13;
    a1[1] = v13;
    a1[2] = &v13[v12];
    v14 = (char *)sub_100283F04(v8, v6, a3, v13);
LABEL_23:
    a1[1] = v14;
    return;
  }
  v15 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) < a4)
  {
    v16 = &a2[2 * ((v15 - v9) >> 4)];
    if (v15 != v9)
    {
      v17 = 16 * ((v15 - v9) >> 4);
      do
      {
        if (v6 != (uint64_t *)v9)
        {
          sub_10028430C(v9, (char *)*v6, (char *)v6[1], (v6[1] - *v6) >> 4);
          sub_100284450((uint64_t)(v9 + 24), (char **)v6[3], v6[4], 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3));
        }
        v6 += 6;
        v9 += 48;
        v17 -= 48;
      }
      while (v17);
      v9 = a1[1];
    }
    v14 = (char *)sub_100283F04(v8, v16, a3, v9);
    goto LABEL_23;
  }
  if (a2 != a3)
  {
    v18 = *a1;
    do
    {
      if (v6 != (uint64_t *)v9)
      {
        sub_10028430C(v9, (char *)*v6, (char *)v6[1], (v6[1] - *v6) >> 4);
        sub_100284450((uint64_t)(v9 + 24), (char **)v6[3], v6[4], 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3));
      }
      v6 += 6;
      v9 += 48;
      v18 += 48;
    }
    while (v6 != a3);
    v15 = a1[1];
    if (v15 == v18)
      goto LABEL_27;
    goto LABEL_29;
  }
  v18 = *a1;
  if (v15 != v9)
  {
    do
    {
LABEL_29:
      v19 = *((_QWORD *)v15 - 3);
      if (v19)
      {
        v20 = *((_QWORD *)v15 - 2);
        v21 = (void *)*((_QWORD *)v15 - 3);
        if (v20 != v19)
        {
          v22 = *((_QWORD *)v15 - 2);
          do
          {
            v24 = *(void **)(v22 - 24);
            v22 -= 24;
            v23 = v24;
            if (v24)
            {
              *(_QWORD *)(v20 - 16) = v23;
              operator delete(v23);
            }
            v20 = v22;
          }
          while (v22 != v19);
          v21 = (void *)*((_QWORD *)v15 - 3);
        }
        *((_QWORD *)v15 - 2) = v19;
        operator delete(v21);
      }
      v25 = v15 - 48;
      v26 = (void *)*((_QWORD *)v15 - 6);
      if (v26)
      {
        *((_QWORD *)v15 - 5) = v26;
        operator delete(v26);
      }
      v15 -= 48;
    }
    while (v25 != v18);
  }
LABEL_27:
  a1[1] = v18;
}

void sub_100283E28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100283E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100283E38(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 3);
        if (v5)
        {
          v6 = *((_QWORD *)v3 - 2);
          v7 = (void *)*((_QWORD *)v3 - 3);
          if (v6 != v5)
          {
            v8 = *((_QWORD *)v3 - 2);
            do
            {
              v10 = *(void **)(v8 - 24);
              v8 -= 24;
              v9 = v10;
              if (v10)
              {
                *(_QWORD *)(v6 - 16) = v9;
                operator delete(v9);
              }
              v6 = v8;
            }
            while (v8 != v5);
            v7 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v7);
        }
        v11 = v3 - 48;
        v12 = (void *)*((_QWORD *)v3 - 6);
        if (v12)
        {
          *((_QWORD *)v3 - 5) = v12;
          operator delete(v12);
        }
        v3 -= 48;
      }
      while (v11 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_100283F04(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _QWORD *v14;

  v4 = a4;
  v14 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v8 = (_BYTE *)*(v6 - 3);
      v7 = (_BYTE *)*(v6 - 2);
      v9 = v6 - 3;
      v10 = v7 - v8;
      if (v7 != v8)
      {
        if (v10 < 0)
          sub_1000D02C0();
        v11 = (char *)operator new(v7 - v8);
        *v4 = v11;
        v4[1] = v11;
        v12 = &v11[16 * (v10 >> 4)];
        v4[2] = v12;
        memcpy(v11, v8, v10);
        v4[1] = v12;
      }
      sub_1002840CC(v4 + 3, v6);
      v4 = v14 + 6;
      v14 += 6;
      v6 += 6;
    }
    while (v9 + 6 != a3);
  }
  return v4;
}

void sub_100283FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_100284010((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100284010(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        v7 = *(_QWORD *)(v4 - 24);
        if (v7)
        {
          v8 = *(_QWORD *)(v4 - 16);
          v9 = *(void **)(v4 - 24);
          if (v8 != v7)
          {
            v10 = *(_QWORD *)(v4 - 16);
            do
            {
              v12 = *(void **)(v10 - 24);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *(_QWORD *)(v8 - 16) = v11;
                operator delete(v11);
              }
              v8 = v10;
            }
            while (v10 != v7);
            v9 = *(void **)(v4 - 24);
          }
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v9);
        }
        v13 = v4 - 48;
        v14 = *(void **)(v4 - 48);
        if (v14)
        {
          *(_QWORD *)(v4 - 40) = v14;
          operator delete(v14);
        }
        v4 -= 48;
      }
      while (v13 != v5);
    }
  }
  return a1;
}

_QWORD *sub_1002840CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      sub_1000D02C0();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1002841A0(v3, v4, v5, v8);
  }
  return a1;
}

void sub_100284174(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
    sub_100344578((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002841A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1000D02C0();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_100284268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002842A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10028427C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1002842A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002842A0(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *sub_10028430C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_1000D02C0();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_100284450(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_1000D02C0();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_1002841A0(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_10028430C(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_1002841A0(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_10028430C(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_1002846B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002846BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

const void ***sub_1002846C4(_QWORD *a1, uint64_t a2)
{
  const void ***v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t ***__p;
  char v11;

  __p = (uint64_t ***)operator new(0x20uLL);
  *__p = 0;
  __p[1] = 0;
  sub_10008930C(__p + 2, a2);
  __p[1] = (uint64_t **)sub_1000B40D8((uint64_t)&v11, __p + 2);
  v4 = sub_10006A618(a1, (uint64_t)__p);
  if ((v5 & 1) == 0 && __p)
  {
    v6 = (std::__shared_weak_count *)__p[3];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(__p);
  }
  return v4;
}

void sub_1002847AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002847C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100213954((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int64x2_t sub_1002847D4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double *v8;
  double *v9;
  _BOOL4 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  BOOL v46;
  double v47;
  int64x2_t result;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;

  v9 = *(double **)a1;
  v8 = *(double **)(a1 + 8);
  if (*(double **)a1 != v8)
  {
    v10 = 0;
    v11 = *(_QWORD **)a2;
    v12 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v12)
      goto LABEL_34;
LABEL_11:
    v18 = v11;
    while (*v18 == v18[1])
    {
      v19 = (_QWORD *)v18[3];
      v20 = (_QWORD *)v18[4];
      if (v19 != v20)
      {
        while (*v19 == v19[1])
        {
          v19 += 3;
          if (v19 == v20)
            goto LABEL_12;
        }
        break;
      }
LABEL_12:
      v18 += 6;
      if (v18 == v12)
        goto LABEL_34;
    }
    if (v10)
    {
      sub_100284BE4(v11, v12, v49.f64);
      goto LABEL_68;
    }
    if (v9 == v8)
    {
      sub_100284DCC((_QWORD *)(a1 + 24), &v49);
      v11 = *(_QWORD **)a2;
      v12 = *(_QWORD **)(a2 + 8);
    }
    else
    {
      v21 = *v9;
      v22 = v9[1];
      v49.f64[0] = v21;
      v49.f64[1] = v22;
      v50 = v21;
      v51 = v22;
      v23 = v9 + 2;
      if (v9 + 2 != v8)
      {
        v24 = v21;
        v25 = v22;
        do
        {
          v26 = *v23;
          if (*v23 < v21)
          {
            v49.f64[0] = *v23;
            v21 = v26;
            if (v26 <= v24)
            {
LABEL_26:
              v27 = v23[1];
              if (v27 >= v22)
                goto LABEL_27;
              goto LABEL_31;
            }
          }
          else if (v26 <= v24)
          {
            goto LABEL_26;
          }
          v50 = v26;
          v24 = v26;
          v27 = v23[1];
          if (v27 >= v22)
          {
LABEL_27:
            if (v27 > v25)
              goto LABEL_32;
            goto LABEL_23;
          }
LABEL_31:
          v49.f64[1] = v27;
          v22 = v27;
          if (v27 > v25)
          {
LABEL_32:
            v51 = v27;
            v25 = v27;
          }
LABEL_23:
          v23 += 2;
        }
        while (v23 != v8);
      }
    }
    sub_100284BE4(v11, v12, &v52);
    v36 = v49.f64[0];
    if (v52 < v49.f64[0])
    {
      v49.f64[0] = v52;
      v36 = v52;
      v37 = v53;
      v38 = v50;
      if (v52 <= v50)
      {
LABEL_52:
        v39 = v49.f64[1];
        if (v37 >= v49.f64[1])
          goto LABEL_53;
        goto LABEL_61;
      }
    }
    else
    {
      v37 = v53;
      v38 = v50;
      if (v52 <= v50)
        goto LABEL_52;
    }
    v50 = v52;
    v38 = v52;
    v39 = v49.f64[1];
    if (v37 >= v49.f64[1])
    {
LABEL_53:
      v40 = v54;
      v41 = v51;
      if (v37 <= v51)
        goto LABEL_54;
      goto LABEL_62;
    }
LABEL_61:
    v49.f64[1] = v37;
    v39 = v37;
    v40 = v54;
    v41 = v51;
    if (v37 <= v51)
    {
LABEL_54:
      if (v40 >= v36)
        goto LABEL_55;
      goto LABEL_63;
    }
LABEL_62:
    v51 = v37;
    v41 = v37;
    if (v40 >= v36)
    {
LABEL_55:
      v42 = v55;
      if (v40 <= v38)
        goto LABEL_56;
      goto LABEL_64;
    }
LABEL_63:
    v49.f64[0] = v40;
    v42 = v55;
    if (v40 <= v38)
    {
LABEL_56:
      if (v42 >= v39)
        goto LABEL_57;
      goto LABEL_65;
    }
LABEL_64:
    v50 = v40;
    if (v42 >= v39)
    {
LABEL_57:
      if (v42 <= v41)
        goto LABEL_68;
      goto LABEL_66;
    }
LABEL_65:
    v49.f64[1] = v42;
    if (v42 <= v41)
      goto LABEL_68;
LABEL_66:
    v51 = v42;
    goto LABEL_68;
  }
  v13 = *(uint64_t **)(a1 + 24);
  v14 = *(uint64_t **)(a1 + 32);
  if (v13 == v14)
  {
    v10 = 1;
    v11 = *(_QWORD **)a2;
    v12 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v12)
      goto LABEL_34;
    goto LABEL_11;
  }
  do
  {
    v15 = *v13;
    v16 = v13[1];
    v13 += 3;
    v17 = v15 == v16;
    v10 = v15 == v16;
    v17 = !v17 || v13 == v14;
  }
  while (!v17);
  v11 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v12)
    goto LABEL_11;
LABEL_34:
  if (v10)
  {
    v28 = 0.0;
    goto LABEL_80;
  }
  if (v9 == v8)
  {
    sub_100284DCC((_QWORD *)(a1 + 24), &v49);
  }
  else
  {
    v29 = *v9;
    v30 = v9[1];
    v49.f64[0] = v29;
    v49.f64[1] = v30;
    v50 = v29;
    v51 = v30;
    v31 = v9 + 2;
    if (v9 + 2 != v8)
    {
      v32 = v29;
      v33 = v30;
      do
      {
        v34 = *v31;
        if (*v31 < v29)
        {
          v49.f64[0] = *v31;
          v29 = v34;
          if (v34 <= v32)
          {
LABEL_42:
            v35 = v31[1];
            if (v35 >= v30)
              goto LABEL_43;
            goto LABEL_47;
          }
        }
        else if (v34 <= v32)
        {
          goto LABEL_42;
        }
        v50 = v34;
        v32 = v34;
        v35 = v31[1];
        if (v35 >= v30)
        {
LABEL_43:
          if (v35 > v33)
            goto LABEL_48;
          goto LABEL_39;
        }
LABEL_47:
        v49.f64[1] = v35;
        v30 = v35;
        if (v35 > v33)
        {
LABEL_48:
          v51 = v35;
          v33 = v35;
        }
LABEL_39:
        v31 += 2;
      }
      while (v31 != v8);
    }
  }
LABEL_68:
  a5 = v49.f64[1];
  a4 = v49.f64[0];
  v43 = vabdd_f64(v51, v49.f64[1]);
  v44 = vabdd_f64(v50, v49.f64[0]);
  if (v43 >= v44)
    v44 = v43;
  v28 = 1.0;
  if (v44 != 0.0)
  {
    v45 = 2.22044605e-16;
    if (v44 >= 1.0)
      v45 = v44 * 2.22044605e-16;
    v46 = v44 <= v45 && *(_QWORD *)&v44 >> 52 < 0x7FFuLL;
    if (v44 < 10000000.0 && !v46 && *(_QWORD *)&v44 >> 52 < 0x7FFuLL)
    {
      v47 = 10000000.0 / v44 + 0.5;
      sub_100284F14(v47);
      v28 = (double)(uint64_t)floor(v47);
      a5 = v49.f64[1];
      a4 = v49.f64[0];
    }
  }
LABEL_80:
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  result = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  *(int64x2_t *)(a3 + 16) = result;
  *(double *)(a3 + 32) = v28;
  return result;
}

_QWORD *sub_100284BE4(_QWORD *result, _QWORD *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  _QWORD *v9;
  int v10;
  int64x2_t v11;
  int64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _QWORD *v26;
  _QWORD *v27;
  int64x2_t v28;
  int64x2_t v29;
  float64x2_t v30;
  int64x2_t v31;

  if (result == a2)
    goto LABEL_50;
  v9 = result;
  v10 = 0;
  v11 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v12 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v28 = v12;
  v29 = v11;
  do
  {
    v19 = (double *)*v9;
    v18 = (double *)v9[1];
    if ((double *)*v9 != v18)
    {
      v30 = (float64x2_t)v11;
      v31 = v12;
      v20 = *v19;
      v21 = v19[1];
      v30.f64[0] = *v19;
      v30.f64[1] = v21;
      v22 = *v19;
      v31.i64[0] = *(uint64_t *)v19;
      v23 = v19[1];
      *(double *)&v31.i64[1] = v23;
      while (1)
      {
        v19 += 2;
        if (v19 == v18)
          goto LABEL_4;
        v24 = *v19;
        if (*v19 < v20)
        {
          v30.f64[0] = *v19;
          v20 = v24;
          if (v24 > v22)
            goto LABEL_40;
LABEL_36:
          v25 = v19[1];
          if (v25 < v21)
            goto LABEL_41;
LABEL_37:
          if (v25 > v23)
          {
LABEL_42:
            *(double *)&v31.i64[1] = v25;
            v23 = v25;
          }
        }
        else
        {
          if (v24 <= v22)
            goto LABEL_36;
LABEL_40:
          *(double *)v31.i64 = v24;
          v22 = v24;
          v25 = v19[1];
          if (v25 >= v21)
            goto LABEL_37;
LABEL_41:
          v30.f64[1] = v25;
          v21 = v25;
          if (v25 > v23)
            goto LABEL_42;
        }
      }
    }
    v26 = (_QWORD *)v9[3];
    v27 = (_QWORD *)v9[4];
    result = v9 + 3;
    if (v26 != v27)
    {
      while (*v26 == v26[1])
      {
        v26 += 3;
        if (v26 == v27)
        {
          v12 = v28;
          v11 = v29;
          goto LABEL_30;
        }
      }
      result = sub_100284DCC(result, &v30);
      v12 = v28;
      v11 = v29;
LABEL_4:
      v13 = v30.f64[0];
      if (v10)
      {
        if (v30.f64[0] >= v6)
          v14 = v6;
        else
          v14 = v30.f64[0];
        if (v30.f64[0] <= v4)
          v15 = v4;
        else
          v15 = v30.f64[0];
        if (v30.f64[1] >= v3)
          v16 = v3;
        else
          v16 = v30.f64[1];
        if (v30.f64[1] <= v5)
          v17 = v5;
        else
          v17 = v30.f64[1];
        if (*(double *)v31.i64 >= v14)
          v13 = v14;
        else
          v13 = *(double *)v31.i64;
        if (*(double *)v31.i64 <= v15)
          v4 = v15;
        else
          v4 = *(double *)v31.i64;
        if (*(double *)&v31.i64[1] >= v16)
          v3 = v16;
        else
          v3 = *(double *)&v31.i64[1];
        if (*(double *)&v31.i64[1] > v17)
          v5 = *(double *)&v31.i64[1];
        else
          v5 = v17;
      }
      else
      {
        v3 = v30.f64[1];
        v4 = *(double *)v31.i64;
        v10 = 1;
        v5 = *(double *)&v31.i64[1];
      }
      v6 = v13;
    }
LABEL_30:
    v9 += 6;
  }
  while (v9 != a2);
  if (v10)
  {
    *a3 = v6;
    a3[1] = v3;
    a3[2] = v4;
    a3[3] = v5;
    return result;
  }
LABEL_50:
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((int64x2_t *)a3 + 1) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  return result;
}

_QWORD *sub_100284DCC(_QWORD *result, float64x2_t *a2)
{
  float64x2_t **v2;
  float64x2_t **v3;
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t **v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  double v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int8x16_t v21;
  unint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  float64x2_t *v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  int8x16_t v31;
  int8x16_t v32;

  v2 = (float64x2_t **)result[1];
  if ((float64x2_t **)*result == v2)
  {
LABEL_5:
    v7 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v8 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  }
  else
  {
    v3 = (float64x2_t **)(*result + 24);
    while (1)
    {
      v4 = *(v3 - 3);
      v5 = *(v3 - 2);
      v6 = v3 - 3;
      if (v4 != v5)
        break;
      v3 += 3;
      if (v6 + 3 == v2)
        goto LABEL_5;
    }
    v10 = *v4;
    v9 = v4 + 1;
    v11 = v10;
    v7 = v10;
    if (v9 == v5)
    {
      v8 = v11;
    }
    else
    {
      v12 = v11;
      v8 = v11;
      do
      {
        v13 = *v9++;
        v14 = (int8x16_t)vcgtq_f64(v11, v13);
        v7 = (float64x2_t)vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)v7);
        v11 = (float64x2_t)vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)v11);
        v15 = (int8x16_t)vcgtq_f64(v13, v12);
        v8 = (float64x2_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v8);
        v12 = (float64x2_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v12);
      }
      while (v9 != v5);
    }
    while (v3 != v2)
    {
      v23 = *v3;
      v24 = v3[1];
      if (*v3 != v24)
      {
        v26 = *v23;
        v25 = v23 + 1;
        v27 = v26;
        v28 = v26;
        if (v25 == v24)
        {
          v16 = v27;
        }
        else
        {
          v29 = v27;
          v16 = v27;
          do
          {
            v30 = *v25++;
            v31 = (int8x16_t)vcgtq_f64(v29, v30);
            v32 = (int8x16_t)vcgtq_f64(v30, v27);
            v16 = (float64x2_t)vbslq_s8(v31, (int8x16_t)v30, (int8x16_t)v16);
            v29 = (float64x2_t)vbslq_s8(v31, (int8x16_t)v30, (int8x16_t)v29);
            v28 = (float64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v28);
            v27 = (float64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v27);
          }
          while (v25 != v24);
        }
        if ((vmovn_s64(vcgtq_f64(v16, v8)).u8[0] & 1) != 0)
          v17 = v16.f64[0];
        else
          v17 = v8.f64[0];
        v18.f64[0] = v28.f64[0];
        v18.f64[1] = v16.f64[1];
        v8.f64[0] = v17;
        v19 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v8), (int8x16_t)v18, (int8x16_t)v8);
        v20 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v16), (int8x16_t)v16, (int8x16_t)v7);
        v21.i64[0] = *(_QWORD *)&v19.f64[0];
        v21.i64[1] = *(_QWORD *)&v28.f64[1];
        v7 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v20, v28), (int8x16_t)v28, (int8x16_t)v20);
        if ((vmovn_s64(vcgtq_f64(v28, v19)).i32[1] & 1) != 0)
          v22 = -1;
        else
          v22 = 0;
        v8 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v22), v21, (int8x16_t)v19);
      }
      v3 += 3;
    }
  }
  *a2 = v7;
  a2[1] = v8;
  return result;
}

void sub_100284F14(double a1)
{
  int v1;
  std::bad_cast *exception;
  std::bad_cast *v3;
  std::bad_cast *v4;
  std::bad_cast *v5;

  v1 = 2 * (a1 >= 9.22337204e18);
  if (a1 <= -9.22337204e18)
    v1 = 1;
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_10016A6B8(exception);
  }
  if (v1 == 1)
  {
    v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    v5 = sub_10016A694(v4);
  }
}

uint64_t sub_100284FA0(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, _OWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *i;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  double **v27;
  uint64_t *v29;
  double *v30;
  double *v31;
  unint64_t v32;
  double *v33;
  double v34;
  unint64_t v36;
  double v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  const double *v41;
  uint64_t v42;
  const double *v43;
  const double *v44;
  const double *v45;
  double v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t *v55;
  void *v56;
  _QWORD *v57;
  uint64_t **v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t *v65;
  double **v66;
  void **v67;
  void **v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  __int128 v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD **v82;
  _QWORD *v83[2];
  _QWORD **v84;
  _QWORD *v85[2];
  char v86;
  __int128 __p;
  __int128 v88;
  __int128 v89;
  _QWORD v90[3];
  uint64_t *v91;
  _QWORD *v92[2];
  _OWORD v93[2];
  float64x2x2_t v94;
  float64x2x2_t v95;
  float64x2x2_t v96;
  float64x2x2_t v97;

  v8 = a4;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v13 = *(uint64_t **)(a1 + 24);
    v14 = *(uint64_t **)(a1 + 32);
    if (v13 == v14)
    {
      v12 = 1;
    }
    else
    {
      do
      {
        v15 = *v13;
        v16 = v13[1];
        v13 += 3;
        v17 = v15 == v16;
        v12 = v15 == v16;
        v17 = !v17 || v13 == v14;
      }
      while (!v17);
    }
  }
  else
  {
    v12 = 0;
  }
  for (i = (_QWORD *)*a2; ; i += 6)
  {
    if (i == (_QWORD *)a2[1])
    {
      if (v12)
        return v8;
      return sub_100285884((double **)a1, (uint64_t)a2, a4, a5);
    }
    if (*i != i[1])
      goto LABEL_19;
    v19 = (_QWORD *)i[3];
    v20 = (_QWORD *)i[4];
    if (v19 != v20)
      break;
LABEL_12:
    ;
  }
  while (*v19 == v19[1])
  {
    v19 += 3;
    if (v19 == v20)
      goto LABEL_12;
  }
LABEL_19:
  if (v12)
    return sub_100285884((double **)a1, (uint64_t)a2, a4, a5);
  v88 = 0u;
  v89 = 0u;
  __p = 0u;
  sub_100288238(0, a1, 1, a2, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86);
  if (*((_QWORD *)&v89 + 1))
  {
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
      sub_100291540(a1, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86, 0, 0);
    v21 = a2[1] - *a2;
    if (0xAAAAAAAAAAAAAAABLL * (v21 >> 4) > 1 || v21 == 48 && *(_QWORD *)(*a2 + 32) != *(_QWORD *)(*a2 + 24))
      sub_100294D54(a2, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86, 1, 0);
  }
  v85[0] = 0;
  v85[1] = 0;
  v83[1] = 0;
  v84 = v85;
  v82 = v83;
  v83[0] = 0;
  sub_100285A38(&__p, &v84, (uint64_t *)a1, a2, (uint64_t)a3);
  v80 = 0u;
  v81 = 0u;
  v79 = 0u;
  sub_100285FDC(a1, (uint64_t)a2, (uint64_t)a5, a3, &__p, &v79, (uint64_t)&v82, (uint64_t)&v84, a6);
  sub_100286178((char *)&v82, &__p, (uint64_t)&v84);
  v77 = 0;
  v78 = 0;
  v76 = &v77;
  v92[0] = 0;
  v92[1] = 0;
  v90[0] = 0;
  v90[1] = -1;
  v90[2] = -1;
  v91 = (uint64_t *)v92;
  sub_1002B53C8(a1, (uint64_t)a2, (uint64_t)v90, &v91);
  v22 = *a2;
  if (*a2 != a2[1])
  {
    v23 = 0;
    do
    {
      *(_QWORD *)&v93[0] = 1;
      *((_QWORD *)&v93[0] + 1) = v23;
      *(_QWORD *)&v93[1] = -1;
      sub_1002B5A88(v22, a1, (uint64_t)v93, &v91);
      ++v23;
      v22 += 48;
    }
    while (v22 != a2[1]);
  }
  sub_1002B5758((double **)a1, (double ***)a2, (uint64_t)&v82, &v91, (uint64_t)&v76, (uint64_t)a5);
  v73 = a1;
  v74 = a2;
  sub_1002B64F4((uint64_t)&v91, v92[0]);
  v24 = *((_QWORD *)&v79 + 1);
  v25 = v80;
  v26 = (_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * ((unint64_t)v81 / 0xAA));
  if ((_QWORD)v80 == *((_QWORD *)&v79 + 1))
    v27 = 0;
  else
    v27 = (double **)(*v26 + 24 * ((unint64_t)v81 % 0xAA));
  v29 = 0;
  while (v25 != v24)
  {
    if (v27 == (double **)(*(_QWORD *)(v24 + 8 * ((*((_QWORD *)&v81 + 1) + (_QWORD)v81) / 0xAAuLL))
                          + 24 * ((*((_QWORD *)&v81 + 1) + (_QWORD)v81) % 0xAAuLL)))
      goto LABEL_92;
LABEL_41:
    memset((char *)v93 + 6, 255, 24);
    v30 = *v27;
    v31 = v27[1];
    v32 = (char *)v31 - (char *)*v27;
    v33 = *v27 + 2;
    v34 = 0.0;
    if (v32 >= 0x40 && v33 != v31)
    {
      v36 = v32 - 32;
      if (v36 < 0x30)
      {
        v37 = 0.0;
        v38 = *v27;
        goto LABEL_50;
      }
      v39 = (v36 >> 4) + 1;
      v40 = 2 * (v39 & 0x1FFFFFFFFFFFFFFCLL);
      v33 = (double *)((char *)v33 + v40 * 8);
      v38 = &v30[v40];
      v41 = v30 + 4;
      v37 = 0.0;
      v42 = v39 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v43 = v41 - 4;
        v94 = vld2q_f64(v43);
        v95 = vld2q_f64(v41);
        v44 = v41 - 2;
        v45 = v41 + 2;
        v96 = vld2q_f64(v44);
        v97 = vld2q_f64(v45);
        v94.val[0] = vmulq_f64(vaddq_f64(v94.val[0], v96.val[0]), vsubq_f64(v94.val[1], v96.val[1]));
        v94.val[1] = vmulq_f64(vaddq_f64(v95.val[0], v97.val[0]), vsubq_f64(v95.val[1], v97.val[1]));
        v37 = v37 + v94.val[0].f64[0] + v94.val[0].f64[1] + v94.val[1].f64[0] + v94.val[1].f64[1];
        v41 += 8;
        v42 -= 4;
      }
      while (v42);
      if (v39 != (v39 & 0x1FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_50:
          v46 = *v33;
          v33 += 2;
          v37 = v37 + (*v38 + v46) * (v38[1] - v38[3]);
          v38 += 2;
        }
        while (v33 != v31);
      }
      v34 = v37 * 0.5;
    }
    if (v30 != v31)
      v75 = *(_OWORD *)v30;
    v47 = v30 != v31;
    v48 = v77;
    v49 = &v77;
    v50 = &v77;
    if (v77)
    {
      while (1)
      {
        v50 = (uint64_t **)v48;
        v52 = v48[4];
        if (v52 != 2)
          break;
        v53 = v50[5];
        if (v29 == v53)
        {
          v51 = v50[6];
          if (((unint64_t)v51 & 0x8000000000000000) == 0)
            goto LABEL_57;
          if (v51 == (uint64_t *)-1)
          {
            v54 = (char *)v50;
            goto LABEL_70;
          }
LABEL_65:
          v48 = v50[1];
          if (!v48)
          {
            v49 = v50 + 1;
            goto LABEL_67;
          }
        }
        else
        {
          if ((uint64_t)v29 >= (uint64_t)v53)
            goto LABEL_65;
LABEL_57:
          v48 = *v50;
          v49 = v50;
          if (!*v50)
            goto LABEL_67;
        }
      }
      if (v52 <= 2)
        goto LABEL_65;
      goto LABEL_57;
    }
LABEL_67:
    v54 = (char *)operator new(0x98uLL);
    *((_QWORD *)v54 + 4) = 2;
    *((_QWORD *)v54 + 5) = v29;
    *((_QWORD *)v54 + 6) = -1;
    v54[56] = 0;
    *((_QWORD *)v54 + 10) = 0;
    *((_WORD *)v54 + 44) = 0;
    *((_QWORD *)v54 + 12) = -1;
    *((_QWORD *)v54 + 13) = -1;
    *((_QWORD *)v54 + 14) = -1;
    *((_QWORD *)v54 + 15) = 0xBFF0000000000000;
    *((_QWORD *)v54 + 17) = 0;
    *((_QWORD *)v54 + 18) = 0;
    *((_QWORD *)v54 + 16) = 0;
    *(_QWORD *)v54 = 0;
    *((_QWORD *)v54 + 1) = 0;
    *((_QWORD *)v54 + 2) = v50;
    *v49 = (uint64_t *)v54;
    v55 = (uint64_t *)v54;
    if (*v76)
    {
      v76 = (uint64_t **)*v76;
      v55 = *v49;
    }
    sub_1000E05F4(v77, v55);
    ++v78;
LABEL_70:
    v57 = v54 + 128;
    v56 = (void *)*((_QWORD *)v54 + 16);
    v54[56] = v47;
    *((_OWORD *)v54 + 4) = v75;
    *((double *)v54 + 10) = v34;
    *((_WORD *)v54 + 44) = 0;
    *(_OWORD *)(v54 + 90) = v93[0];
    *(_OWORD *)(v54 + 104) = *(_OWORD *)((char *)v93 + 14);
    *((_QWORD *)v54 + 15) = 0xBFF0000000000000;
    if (v56)
    {
      *((_QWORD *)v54 + 17) = v56;
      operator delete(v56);
      *v57 = 0;
      *((_QWORD *)v54 + 17) = 0;
      *((_QWORD *)v54 + 18) = 0;
    }
    *v57 = 0;
    *((_QWORD *)v54 + 17) = 0;
    *((_QWORD *)v54 + 18) = 0;
    v58 = &v77;
    v59 = &v77;
    v60 = v77;
    if (v77)
    {
      while (1)
      {
        v59 = (uint64_t **)v60;
        v62 = v60[4];
        if (v62 != 2)
          break;
        v63 = v59[5];
        if (v29 == v63)
        {
          v61 = v59[6];
          if (((unint64_t)v61 & 0x8000000000000000) == 0)
            goto LABEL_75;
          if (v61 == (uint64_t *)-1)
          {
            *((_BYTE *)v59 + 88) = 0;
            v27 += 3;
            if ((double **)((char *)v27 - *v26) == (double **)4080)
              goto LABEL_88;
            goto LABEL_36;
          }
LABEL_83:
          v60 = v59[1];
          if (!v60)
          {
            v58 = v59 + 1;
            goto LABEL_85;
          }
        }
        else
        {
          if ((uint64_t)v29 >= (uint64_t)v63)
            goto LABEL_83;
LABEL_75:
          v60 = *v59;
          v58 = v59;
          if (!*v59)
            goto LABEL_85;
        }
      }
      if (v62 <= 2)
        goto LABEL_83;
      goto LABEL_75;
    }
LABEL_85:
    v64 = operator new(0x98uLL);
    v64[4] = 2;
    v64[5] = v29;
    v64[6] = -1;
    *((_BYTE *)v64 + 56) = 0;
    v64[10] = 0;
    *((_WORD *)v64 + 44) = 0;
    v64[12] = -1;
    v64[13] = -1;
    v64[14] = -1;
    v64[15] = 0xBFF0000000000000;
    v64[17] = 0;
    v64[18] = 0;
    v64[16] = 0;
    *v64 = 0;
    v64[1] = 0;
    v64[2] = v59;
    *v58 = v64;
    v65 = v64;
    if (*v76)
    {
      v76 = (uint64_t **)*v76;
      v65 = *v58;
    }
    sub_1000E05F4(v77, v65);
    ++v78;
    *((_BYTE *)v64 + 88) = 0;
    v27 += 3;
    if ((double **)((char *)v27 - *v26) == (double **)4080)
    {
LABEL_88:
      v66 = (double **)v26[1];
      ++v26;
      v27 = v66;
    }
LABEL_36:
    v29 = (uint64_t *)((char *)v29 + 1);
    v24 = *((_QWORD *)&v79 + 1);
    v25 = v80;
  }
  if (v27)
    goto LABEL_41;
LABEL_92:
  sub_100286EFC(v73, v74, &v79, (uint64_t)&v76, a5);
  v8 = sub_100287890(&v76, v73, v74, &v79, v8, (uint64_t)a5, 0);
  sub_1002B64F4((uint64_t)&v76, v77);
  sub_1002BA3A4((uint64_t)&v79);
  sub_10004AAA0((uint64_t)&v82, v83[0]);
  sub_1002BA530((uint64_t)&v84, v85[0]);
  v67 = (void **)*((_QWORD *)&__p + 1);
  v68 = (void **)v88;
  *((_QWORD *)&v89 + 1) = 0;
  v69 = v88 - *((_QWORD *)&__p + 1);
  if ((_QWORD)v88 - *((_QWORD *)&__p + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v67);
      v68 = (void **)v88;
      v67 = (void **)(*((_QWORD *)&__p + 1) + 8);
      *((_QWORD *)&__p + 1) = v67;
      v69 = v88 - (_QWORD)v67;
    }
    while ((_QWORD)v88 - (_QWORD)v67 > 0x10uLL);
  }
  v70 = v69 >> 3;
  if (v70 == 1)
  {
    v71 = 8;
LABEL_98:
    *(_QWORD *)&v89 = v71;
  }
  else if (v70 == 2)
  {
    v71 = 16;
    goto LABEL_98;
  }
  if (v67 != v68)
  {
    do
    {
      v72 = *v67++;
      operator delete(v72);
    }
    while (v67 != v68);
    if ((_QWORD)v88 != *((_QWORD *)&__p + 1))
      *(_QWORD *)&v88 = v88 + ((*((_QWORD *)&__p + 1) - v88 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)__p)
    operator delete((void *)__p);
  return v8;
}

void sub_100285800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31,_QWORD *a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_10004AAA0((uint64_t)&a28, a29);
  sub_1002BA530((uint64_t)&a31, a32);
  sub_1002BA57C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_100285884(double **a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  double **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD *v16[2];
  _QWORD **v17;
  _QWORD *v18[2];
  _QWORD v19[3];
  uint64_t *v20;
  _QWORD *v21[2];

  v18[0] = 0;
  v18[1] = 0;
  v16[1] = 0;
  v17 = v18;
  v15 = v16;
  v16[0] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20 = (uint64_t *)v21;
  v19[0] = 0;
  v19[1] = -1;
  v19[2] = -1;
  sub_1002B53C8((uint64_t)a1, a2, (uint64_t)v19, &v20);
  v8 = *(double ***)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v9 = 0;
    do
    {
      *(_QWORD *)&v12 = 1;
      *((_QWORD *)&v12 + 1) = v9;
      *(_QWORD *)&v13 = -1;
      sub_1002B5A88((uint64_t)v8, (uint64_t)a1, (uint64_t)&v12, &v20);
      ++v9;
      v8 += 6;
    }
    while (v8 != *(double ***)(a2 + 8));
  }
  sub_1002B5758(a1, (double ***)a2, (uint64_t)&v17, &v20, (uint64_t)&v15, (uint64_t)a4);
  sub_1002B64F4((uint64_t)&v20, v21[0]);
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  sub_100286EFC((uint64_t)a1, (_QWORD *)a2, &v12, (uint64_t)&v15, a4);
  v10 = sub_100287890(&v15, (uint64_t)a1, (_QWORD *)a2, &v12, a3, (uint64_t)a4, 0);
  sub_1002BA3A4((uint64_t)&v12);
  sub_1002B64F4((uint64_t)&v15, v16[0]);
  sub_10004AAA0((uint64_t)&v17, v18[0]);
  return v10;
}

void sub_1002859F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_1002BA3A4((uint64_t)&a9);
  sub_1002B64F4((uint64_t)&a15, a16);
  sub_10004AAA0((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100285A38(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  __n128 v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double v49;
  double v50;
  double *v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  uint64_t *v55;
  _QWORD *v56[2];
  _QWORD v57[5];

  sub_100298598(a1, a3, a4);
  v11 = sub_100298D84(a1, (uint64_t)a2, a5, v10);
  v12 = a1[4];
  v13 = a1[1];
  v14 = a1[2];
  v15 = (_QWORD *)(v13 + 8 * (v12 >> 4));
  v53 = v11;
  if (v14 == v13)
    v16 = 0;
  else
    v16 = *v15 + 376 * (a1[4] & 0xFLL);
  v17 = 0;
  v18 = (_QWORD *)(v13 + 8 * (v12 >> 4));
LABEL_5:
  v19 = v16 - 6016;
  while (v14 != v13)
  {
    if (v16 == *(_QWORD *)(v13 + (((a1[5] + v12) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 376 * ((*((_DWORD *)a1 + 10) + (_DWORD)v12) & 0xF))
    {
      v23 = *v15 + 376 * (v12 & 0xF);
      goto LABEL_34;
    }
LABEL_12:
    v20 = *(_DWORD *)(v16 + 40);
    if (v20 == 3)
    {
      if (*(_DWORD *)(v16 + 208) == 3)
        goto LABEL_6;
    }
    else if (v20 == 2)
    {
      if (*(_DWORD *)(v16 + 208) == 2)
        goto LABEL_6;
    }
    else if (!v20 && !*(_DWORD *)(v16 + 208))
    {
LABEL_6:
      *(_BYTE *)(v16 + 32) = 1;
      *(_QWORD *)(v16 + 24) = -1;
      goto LABEL_7;
    }
    if (*(_QWORD *)(v16 + 48) == *(_QWORD *)(v16 + 216) && *(uint64_t *)(v16 + 24) <= 0)
    {
      if (v20 != 1 || *(_DWORD *)(v16 + 208) != 1)
        goto LABEL_6;
      v21 = *(_BYTE *)(v16 + 32);
      if (!v21)
        goto LABEL_30;
    }
    else if (!*(_BYTE *)(v16 + 32))
    {
      v21 = v20 == 4 && *(_DWORD *)(v16 + 208) == 4;
LABEL_30:
      v17 |= v21;
    }
LABEL_7:
    v16 += 376;
    v19 += 376;
    if (*v18 == v19)
    {
      v22 = v18[1];
      ++v18;
      v16 = v22;
      goto LABEL_5;
    }
  }
  if (v16)
    goto LABEL_12;
  v23 = 0;
LABEL_34:
  while (v14 != v13)
  {
    v24 = a1[5] + a1[4];
    if (v23 == *(_QWORD *)(v13 + ((v24 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v24 & 0xF))
      goto LABEL_44;
LABEL_38:
    if (!*(_BYTE *)(v23 + 32) && *(_QWORD *)(v23 + 48) == *(_QWORD *)(v23 + 216) && sub_10029D2E0(v23, (uint64_t)a3, a4))
      *(_BYTE *)(v23 + 32) = 1;
    v23 += 376;
    if (v23 - *v15 == 6016)
    {
      v25 = v15[1];
      ++v15;
      v23 = v25;
    }
    v13 = a1[1];
    v14 = a1[2];
  }
  if (v23)
    goto LABEL_38;
LABEL_44:
  v56[0] = 0;
  v56[1] = 0;
  v55 = (uint64_t *)v56;
  sub_100299034(a1, &v55);
  v26 = v55;
  if (v55 != (uint64_t *)v56)
  {
    do
    {
      v27 = v26[7];
      v28 = (__int128 *)v26[8];
      v29 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v28 - v27) >> 3));
      v57[0] = a1;
      v57[1] = a3;
      v57[2] = a4;
      v57[3] = a5;
      v57[4] = &v54;
      if (v28 == (__int128 *)v27)
        v30 = 0;
      else
        v30 = v29;
      sub_10029D448(v27, v28, (uint64_t)v57, v30, 1);
      v31 = (uint64_t *)v26[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (uint64_t *)v26[2];
          v33 = *v32 == (_QWORD)v26;
          v26 = v32;
        }
        while (!v33);
      }
      v26 = v32;
    }
    while (v32 != (uint64_t *)v56);
  }
  if (v53)
  {
    sub_100299554(a2, (uint64_t)a1, 1, a3, a4);
    sub_100299AAC((uint64_t)a1, (uint64_t)a2);
  }
  v34 = v55;
  if (v55 != (uint64_t *)v56)
  {
    do
    {
      sub_100299D0C(v34 + 7, (uint64_t)a1, 1);
      v40 = (uint64_t *)v34[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (uint64_t *)v34[2];
          v33 = *v41 == (_QWORD)v34;
          v34 = v41;
        }
        while (!v33);
      }
      v34 = v41;
    }
    while (v41 != (uint64_t *)v56);
  }
  if ((v17 & 1) != 0)
  {
    v35 = a1[4];
    v36 = a1[1];
    v37 = a1[2];
    v38 = (_QWORD *)(v36 + 8 * (v35 >> 4));
    if (v37 == v36)
      v39 = 0;
    else
      v39 = *v38 + 376 * (a1[4] & 0xFLL);
    v42 = a1[5] + v35;
    v43 = v42 >> 4;
    v44 = v42 & 0xF;
    while (2)
    {
      v45 = v39 - 6016;
LABEL_73:
      if (v37 == v36)
      {
        if (!v39)
          break;
      }
      else if (v39 == *(_QWORD *)(v36 + 8 * v43) + 376 * v44)
      {
        break;
      }
      if (*(double *)(v39 + 112) == 0.0 && *(double *)(v39 + 280) == 0.0)
      {
        v46 = *(_QWORD *)(v39 + 136);
        if (v46 == -1)
        {
          v46 = *(_QWORD *)(v39 + 128);
          v47 = *(_QWORD *)(v39 + 304);
          if (v47 == -1)
            goto LABEL_84;
LABEL_81:
          if ((v46 & 0x8000000000000000) == 0)
          {
LABEL_85:
            if ((v47 & 0x8000000000000000) == 0 && v46 != v47)
            {
              v48 = (double *)(*(_QWORD *)(v36 + (((v46 + v35) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * (((_DWORD)v46 + (_DWORD)v35) & 0xF));
              v49 = *(double *)v39;
              v50 = *(double *)(v39 + 8);
              *(double *)(v39 + 112) = (v50 - v48[1]) * (v50 - v48[1])
                                     + (*(double *)v39 - *v48) * (*(double *)v39 - *v48);
              v51 = (double *)(*(_QWORD *)(v36 + (((v47 + v35) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * (((_DWORD)v47 + (_DWORD)v35) & 0xF));
              *(double *)(v39 + 280) = (v50 - v51[1]) * (v50 - v51[1]) + (v49 - *v51) * (v49 - *v51);
            }
          }
        }
        else
        {
          v47 = *(_QWORD *)(v39 + 304);
          if (v47 != -1)
            goto LABEL_81;
LABEL_84:
          v47 = *(_QWORD *)(v39 + 296);
          if ((v46 & 0x8000000000000000) == 0)
            goto LABEL_85;
        }
      }
      v39 += 376;
      v45 += 376;
      if (*v38 == v45)
      {
        v52 = v38[1];
        ++v38;
        v39 = v52;
        continue;
      }
      goto LABEL_73;
    }
  }
  sub_1002A23E4((uint64_t)&v55, v56[0]);
}

void sub_100285F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1002A23E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_100285F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1002A23E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_100285F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1002A23E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_100285FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1002A23E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_100285FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1002A23E4((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_100285FDC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  _QWORD v26[15];
  uint64_t v27[4];
  _QWORD **v28;
  _QWORD *v29[2];
  _QWORD **v30;
  _QWORD *v31[5];

  v27[0] = a1;
  v27[1] = a2;
  v27[2] = (uint64_t)a5;
  v27[3] = a8;
  v28 = v29;
  v29[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = 0;
  v30 = v31;
  v31[2] = a4;
  v31[3] = a9;
  sub_1002A2434(v27);
  v17 = a5[1];
  if (a5[2] != v17)
  {
    v18 = a5[4];
    v19 = (uint64_t *)(v17 + 8 * (v18 >> 4));
    v20 = *v19;
    v21 = *v19 + 376 * (v18 & 0xF);
    v22 = *(_QWORD *)(v17 + (((a5[5] + v18) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*((_DWORD *)a5 + 10) + (_DWORD)v18) & 0xF);
    while (v21 != v22)
    {
      *(_DWORD *)(v21 + 200) = 0;
      *(_WORD *)(v21 + 204) = 0;
      *(_DWORD *)(v21 + 368) = 0;
      *(_WORD *)(v21 + 372) = 0;
      v21 += 376;
      if (v21 - v20 == 6016)
      {
        v23 = v19[1];
        ++v19;
        v20 = v23;
        v21 = v23;
      }
    }
  }
  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a5;
  v26[3] = a8;
  v26[4] = a4;
  v26[6] = a9;
  v26[7] = a1;
  v26[8] = a2;
  v26[9] = a5;
  v26[10] = a7;
  v26[11] = a8;
  v26[12] = a3;
  v26[13] = a4;
  v26[14] = a9;
  v25 = a6[5];
  v24 = 257;
  sub_1002A2AA4((uint64_t)v26, a6, &v25, &v24);
  sub_1002A3DC4((uint64_t)&v30, v31[0]);
  sub_1002A3D78((uint64_t)&v28, v29[0]);
}

void sub_100286150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_1002A2BBC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100286164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_1002A2BBC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

char *sub_100286178(char *result, _QWORD *a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  BOOL v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char *v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v113;
  _QWORD *v114;
  _DWORD *v115;
  __int128 v116;
  uint64_t v117;
  __int128 *v118;

  v3 = (uint64_t **)result;
  v4 = a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(v4 + 8 * (a2[4] >> 4));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = *v6 + 376 * (a2[4] & 0xFLL);
  v8 = (uint64_t **)(result + 8);
  v114 = (_QWORD *)(a3 + 8);
  while (1)
  {
    v113 = v6;
    if (v5 != v4)
    {
      v9 = a2[5] + a2[4];
      if (v7 == *(_QWORD *)(v4 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v9 & 0xF))
        return result;
      goto LABEL_10;
    }
    if (!v7)
      return result;
LABEL_10:
    v10 = *(_QWORD *)(v7 + 48) != *(_QWORD *)(v7 + 216) || *(_BYTE *)(v7 + 32) == 0;
    if (!v10)
      goto LABEL_259;
    v11 = 0;
    v12 = 0;
    v13 = v7 + 40;
    v115 = (_DWORD *)(v7 + 40);
    while (2)
    {
      v15 = *(_QWORD *)(v13 + 8);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)&v116 = v15;
      *((_QWORD *)&v116 + 1) = v14;
      v117 = v16;
      if (*(_QWORD *)(v7 + 48) != *(_QWORD *)(v7 + 216) && *(_QWORD *)(v13 + 112))
      {
        v17 = *v8;
        v18 = v3 + 1;
        result = (char *)(v3 + 1);
        if (!*v8)
        {
LABEL_37:
          v22 = result;
          result = (char *)operator new(0x40uLL);
          *((_OWORD *)result + 2) = v116;
          *((_QWORD *)result + 6) = v117;
          *((_WORD *)result + 28) = 0;
          result[58] = 0;
          *(_QWORD *)result = 0;
          *((_QWORD *)result + 1) = 0;
          *((_QWORD *)result + 2) = v22;
          *v18 = (uint64_t *)result;
          v23 = (uint64_t *)**v3;
          v24 = (uint64_t *)result;
          if (v23)
          {
            *v3 = v23;
            v24 = *v18;
          }
          v25 = *v8;
          v10 = v24 == *v8;
          *((_BYTE *)v24 + 24) = v10;
          if (!v10)
          {
            do
            {
              v26 = v24[2];
              if (*(_BYTE *)(v26 + 24))
                break;
              v27 = *(uint64_t **)(v26 + 16);
              v28 = *v27;
              if (*v27 == v26)
              {
                v31 = v27[1];
                if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
                {
                  if (*(uint64_t **)v26 == v24)
                  {
                    *(_BYTE *)(v26 + 24) = 1;
                    *((_BYTE *)v27 + 24) = 0;
                    v35 = *(_QWORD *)(v26 + 8);
                    *v27 = v35;
                    if (v35)
                      goto LABEL_54;
                  }
                  else
                  {
                    v33 = *(uint64_t **)(v26 + 8);
                    v34 = *v33;
                    *(_QWORD *)(v26 + 8) = *v33;
                    if (v34)
                    {
                      *(_QWORD *)(v34 + 16) = v26;
                      v27 = *(uint64_t **)(v26 + 16);
                    }
                    v33[2] = (uint64_t)v27;
                    *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                    *v33 = v26;
                    *(_QWORD *)(v26 + 16) = v33;
                    v27 = (uint64_t *)v33[2];
                    v26 = *v27;
                    *((_BYTE *)v33 + 24) = 1;
                    *((_BYTE *)v27 + 24) = 0;
                    v35 = *(_QWORD *)(v26 + 8);
                    *v27 = v35;
                    if (v35)
LABEL_54:
                      *(_QWORD *)(v35 + 16) = v27;
                  }
                  *(_QWORD *)(v26 + 16) = v27[2];
                  *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                  *(_QWORD *)(v26 + 8) = v27;
LABEL_228:
                  v27[2] = v26;
                  break;
                }
              }
              else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
              {
                if (*(uint64_t **)v26 == v24)
                {
                  v111 = v24[1];
                  *(_QWORD *)v26 = v111;
                  if (v111)
                  {
                    *(_QWORD *)(v111 + 16) = v26;
                    v27 = *(uint64_t **)(v26 + 16);
                  }
                  v24[2] = (uint64_t)v27;
                  *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v24;
                  v24[1] = v26;
                  *(_QWORD *)(v26 + 16) = v24;
                  v27 = (uint64_t *)v24[2];
                  *((_BYTE *)v24 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v26 = v27[1];
                  v106 = *(char **)v26;
                  v27[1] = *(_QWORD *)v26;
                  if (v106)
LABEL_226:
                    *((_QWORD *)v106 + 2) = v27;
                }
                else
                {
                  *(_BYTE *)(v26 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v26 = v27[1];
                  v106 = *(char **)v26;
                  v27[1] = *(_QWORD *)v26;
                  if (v106)
                    goto LABEL_226;
                }
                *(_QWORD *)(v26 + 16) = v27[2];
                *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                *(_QWORD *)v26 = v27;
                goto LABEL_228;
              }
              *(_BYTE *)(v26 + 24) = 1;
              v24 = v27;
              *((_BYTE *)v27 + 24) = v27 == v25;
              *v29 = 1;
            }
            while (v27 != v25);
          }
          v3[2] = (uint64_t *)((char *)v3[2] + 1);
          goto LABEL_18;
        }
        while (1)
        {
          result = (char *)v17;
          v19 = v17[4];
          if (v15 == v19)
          {
            v20 = *((_QWORD *)result + 5);
            if (v14 == v20)
            {
              v21 = *((_QWORD *)result + 6);
              if (v16 < v21)
                goto LABEL_24;
              if (v21 >= v16)
                goto LABEL_18;
            }
            else
            {
              if (v14 < v20)
              {
LABEL_24:
                v17 = *(uint64_t **)result;
                v18 = (uint64_t **)result;
                if (!*(_QWORD *)result)
                  goto LABEL_37;
                continue;
              }
              if (v20 >= v14)
                goto LABEL_18;
            }
          }
          else
          {
            if (v15 < v19)
              goto LABEL_24;
            if (v19 >= v15)
              goto LABEL_18;
          }
          v17 = (uint64_t *)*((_QWORD *)result + 1);
          if (!v17)
          {
            v18 = (uint64_t **)(result + 8);
            goto LABEL_37;
          }
        }
      }
      if (*v115 != 3 && *(_DWORD *)(v7 + 208) != 3)
        goto LABEL_99;
      v36 = *v8;
      v37 = v3 + 1;
      result = (char *)(v3 + 1);
      if (!*v8)
        goto LABEL_73;
      do
      {
        while (1)
        {
          result = (char *)v36;
          v38 = v36[4];
          if (v15 != v38)
            break;
          v39 = *((_QWORD *)result + 5);
          if (v14 != v39)
          {
            if (v14 < v39)
              goto LABEL_60;
            if (v39 >= v14)
              goto LABEL_98;
            goto LABEL_71;
          }
          v40 = *((_QWORD *)result + 6);
          if (v16 >= v40)
          {
            if (v40 >= v16)
              goto LABEL_98;
            goto LABEL_71;
          }
LABEL_60:
          v36 = *(uint64_t **)result;
          v37 = (uint64_t **)result;
          if (!*(_QWORD *)result)
            goto LABEL_73;
        }
        if (v15 < v38)
          goto LABEL_60;
        if (v38 >= v15)
          goto LABEL_98;
LABEL_71:
        v36 = (uint64_t *)*((_QWORD *)result + 1);
      }
      while (v36);
      v37 = (uint64_t **)(result + 8);
LABEL_73:
      v41 = result;
      result = (char *)operator new(0x40uLL);
      *((_OWORD *)result + 2) = v116;
      *((_QWORD *)result + 6) = v117;
      *((_WORD *)result + 28) = 0;
      result[58] = 0;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = v41;
      *v37 = (uint64_t *)result;
      v42 = (uint64_t *)**v3;
      v43 = (uint64_t *)result;
      if (v42)
      {
        *v3 = v42;
        v43 = *v37;
      }
      v44 = *v8;
      v10 = v43 == *v8;
      *((_BYTE *)v43 + 24) = v10;
      if (!v10)
      {
        do
        {
          v45 = v43[2];
          if (*(_BYTE *)(v45 + 24))
            break;
          v46 = *(uint64_t **)(v45 + 16);
          v47 = *v46;
          if (*v46 == v45)
          {
            v50 = v46[1];
            if (!v50 || (v51 = *(unsigned __int8 *)(v50 + 24), v48 = (_BYTE *)(v50 + 24), v51))
            {
              if (*(uint64_t **)v45 == v43)
              {
                *(_BYTE *)(v45 + 24) = 1;
                *((_BYTE *)v46 + 24) = 0;
                v54 = *(_QWORD *)(v45 + 8);
                *v46 = v54;
                if (v54)
                  goto LABEL_90;
              }
              else
              {
                v52 = *(uint64_t **)(v45 + 8);
                v53 = *v52;
                *(_QWORD *)(v45 + 8) = *v52;
                if (v53)
                {
                  *(_QWORD *)(v53 + 16) = v45;
                  v46 = *(uint64_t **)(v45 + 16);
                }
                v52[2] = (uint64_t)v46;
                *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8 * (**(_QWORD **)(v45 + 16) != v45)) = v52;
                *v52 = v45;
                *(_QWORD *)(v45 + 16) = v52;
                v46 = (uint64_t *)v52[2];
                v45 = *v46;
                *((_BYTE *)v52 + 24) = 1;
                *((_BYTE *)v46 + 24) = 0;
                v54 = *(_QWORD *)(v45 + 8);
                *v46 = v54;
                if (v54)
LABEL_90:
                  *(_QWORD *)(v54 + 16) = v46;
              }
              *(_QWORD *)(v45 + 16) = v46[2];
              *(_QWORD *)(v46[2] + 8 * (*(_QWORD *)v46[2] != (_QWORD)v46)) = v45;
              *(_QWORD *)(v45 + 8) = v46;
LABEL_96:
              v46[2] = v45;
              break;
            }
          }
          else if (!v47 || (v49 = *(unsigned __int8 *)(v47 + 24), v48 = (_BYTE *)(v47 + 24), v49))
          {
            if (*(uint64_t **)v45 == v43)
            {
              v110 = v43[1];
              *(_QWORD *)v45 = v110;
              if (v110)
              {
                *(_QWORD *)(v110 + 16) = v45;
                v46 = *(uint64_t **)(v45 + 16);
              }
              v43[2] = (uint64_t)v46;
              *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8 * (**(_QWORD **)(v45 + 16) != v45)) = v43;
              v43[1] = v45;
              *(_QWORD *)(v45 + 16) = v43;
              v46 = (uint64_t *)v43[2];
              *((_BYTE *)v43 + 24) = 1;
              *((_BYTE *)v46 + 24) = 0;
              v45 = v46[1];
              v55 = *(char **)v45;
              v46[1] = *(_QWORD *)v45;
              if (v55)
LABEL_94:
                *((_QWORD *)v55 + 2) = v46;
            }
            else
            {
              *(_BYTE *)(v45 + 24) = 1;
              *((_BYTE *)v46 + 24) = 0;
              v45 = v46[1];
              v55 = *(char **)v45;
              v46[1] = *(_QWORD *)v45;
              if (v55)
                goto LABEL_94;
            }
            *(_QWORD *)(v45 + 16) = v46[2];
            *(_QWORD *)(v46[2] + 8 * (*(_QWORD *)v46[2] != (_QWORD)v46)) = v45;
            *(_QWORD *)v45 = v46;
            goto LABEL_96;
          }
          *(_BYTE *)(v45 + 24) = 1;
          v43 = v46;
          *((_BYTE *)v46 + 24) = v46 == v44;
          *v48 = 1;
        }
        while (v46 != v44);
      }
      v3[2] = (uint64_t *)((char *)v3[2] + 1);
LABEL_98:
      result[57] = 1;
LABEL_99:
      v56 = *v8;
      v57 = v3 + 1;
      v58 = v3 + 1;
      if (!*v8)
        goto LABEL_114;
      while (2)
      {
        while (2)
        {
          v58 = (uint64_t **)v56;
          v59 = v56[4];
          if (v15 == v59)
          {
            v60 = (uint64_t)v58[5];
            if (*((_QWORD *)&v116 + 1) == v60)
            {
              v61 = v58[6];
              if (v117 >= (uint64_t)v61)
              {
                if ((uint64_t)v61 >= v117)
                  goto LABEL_133;
                goto LABEL_112;
              }
            }
            else if (*((uint64_t *)&v116 + 1) >= v60)
            {
              if (v60 < *((uint64_t *)&v116 + 1))
                goto LABEL_112;
LABEL_133:
              if (*((_BYTE *)v58 + 56))
                goto LABEL_19;
              v74 = *v8;
              v75 = v3 + 1;
              v76 = v3 + 1;
              if (*v8)
                goto LABEL_144;
LABEL_156:
              result = (char *)operator new(0x40uLL);
              *((_OWORD *)result + 2) = v116;
              *((_QWORD *)result + 6) = v117;
              *((_WORD *)result + 28) = 0;
              result[58] = 0;
              *(_QWORD *)result = 0;
              *((_QWORD *)result + 1) = 0;
              *((_QWORD *)result + 2) = v76;
              *v75 = (uint64_t *)result;
              v81 = (uint64_t *)**v3;
              if (v81)
              {
                *v3 = v81;
                result = (char *)*v75;
              }
              v82 = *v8;
              v10 = result == (char *)*v8;
              result[24] = v10;
              if (!v10)
              {
                do
                {
                  v83 = *((_QWORD *)result + 2);
                  if (*(_BYTE *)(v83 + 24))
                    break;
                  v84 = *(uint64_t **)(v83 + 16);
                  v85 = *v84;
                  if (*v84 == v83)
                  {
                    v88 = v84[1];
                    if (!v88 || (v89 = *(unsigned __int8 *)(v88 + 24), v86 = (_BYTE *)(v88 + 24), v89))
                    {
                      if (*(char **)v83 == result)
                      {
                        *(_BYTE *)(v83 + 24) = 1;
                        *((_BYTE *)v84 + 24) = 0;
                        v92 = *(_QWORD *)(v83 + 8);
                        *v84 = v92;
                        if (v92)
                          goto LABEL_173;
                      }
                      else
                      {
                        v90 = *(uint64_t **)(v83 + 8);
                        v91 = *v90;
                        *(_QWORD *)(v83 + 8) = *v90;
                        if (v91)
                        {
                          *(_QWORD *)(v91 + 16) = v83;
                          v84 = *(uint64_t **)(v83 + 16);
                        }
                        v90[2] = (uint64_t)v84;
                        *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = v90;
                        *v90 = v83;
                        *(_QWORD *)(v83 + 16) = v90;
                        v84 = (uint64_t *)v90[2];
                        v83 = *v84;
                        *((_BYTE *)v90 + 24) = 1;
                        *((_BYTE *)v84 + 24) = 0;
                        v92 = *(_QWORD *)(v83 + 8);
                        *v84 = v92;
                        if (v92)
LABEL_173:
                          *(_QWORD *)(v92 + 16) = v84;
                      }
                      *(_QWORD *)(v83 + 16) = v84[2];
                      *(_QWORD *)(v84[2] + 8 * (*(_QWORD *)v84[2] != (_QWORD)v84)) = v83;
                      *(_QWORD *)(v83 + 8) = v84;
LABEL_182:
                      v84[2] = v83;
                      break;
                    }
                  }
                  else if (!v85 || (v87 = *(unsigned __int8 *)(v85 + 24), v86 = (_BYTE *)(v85 + 24), v87))
                  {
                    if (*(char **)v83 == result)
                    {
                      v109 = *((_QWORD *)result + 1);
                      *(_QWORD *)v83 = v109;
                      if (v109)
                      {
                        *(_QWORD *)(v109 + 16) = v83;
                        v84 = *(uint64_t **)(v83 + 16);
                      }
                      *((_QWORD *)result + 2) = v84;
                      *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = result;
                      *((_QWORD *)result + 1) = v83;
                      *(_QWORD *)(v83 + 16) = result;
                      v84 = (uint64_t *)*((_QWORD *)result + 2);
                      result[24] = 1;
                      *((_BYTE *)v84 + 24) = 0;
                      v83 = v84[1];
                      v93 = *(char **)v83;
                      v84[1] = *(_QWORD *)v83;
                      if (v93)
LABEL_180:
                        *((_QWORD *)v93 + 2) = v84;
                    }
                    else
                    {
                      result = (char *)*((_QWORD *)result + 2);
                      *(_BYTE *)(v83 + 24) = 1;
                      *((_BYTE *)v84 + 24) = 0;
                      v83 = v84[1];
                      v93 = *(char **)v83;
                      v84[1] = *(_QWORD *)v83;
                      if (v93)
                        goto LABEL_180;
                    }
                    *(_QWORD *)(v83 + 16) = v84[2];
                    *(_QWORD *)(v84[2] + 8 * (*(_QWORD *)v84[2] != (_QWORD)v84)) = v83;
                    *(_QWORD *)v83 = v84;
                    goto LABEL_182;
                  }
                  *(_BYTE *)(v83 + 24) = 1;
                  result = (char *)v84;
                  *((_BYTE *)v84 + 24) = v84 == v82;
                  *v86 = 1;
                }
                while (v84 != v82);
              }
              v3[2] = (uint64_t *)((char *)v3[2] + 1);
              if ((v11 & 1) != 0)
                goto LABEL_184;
LABEL_190:
              v95 = *(_QWORD *)(v7 + 24);
              if (v95 >= 1)
              {
                v96 = (_QWORD *)*v114;
                if (*v114)
                {
                  v97 = v114;
                  do
                  {
                    v98 = v96[4];
                    v99 = v98 < v95;
                    if (v98 >= v95)
                      v100 = v96;
                    else
                      v100 = v96 + 1;
                    if (!v99)
                      v97 = v96;
                    v96 = (_QWORD *)*v100;
                  }
                  while (*v100);
                  if (v97 != v114)
                  {
                    if (v97[4] <= v95)
                    {
                      v101 = (_QWORD *)v97[5];
                      if (v101 != v97 + 6)
                      {
                        v12 = 0;
                        do
                        {
                          v102 = *(_QWORD *)(a2[1] + (((v101[4] + a2[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
                               + 376 * ((*((_DWORD *)v101 + 8) + a2[4]) & 0xF);
                          if (*(_DWORD *)(v102 + 40) == 3 || *(_DWORD *)(v102 + 208) == 3)
                            v12 = 1;
                          v103 = (_QWORD *)v101[1];
                          if (v103)
                          {
                            do
                            {
                              v104 = v103;
                              v103 = (_QWORD *)*v103;
                            }
                            while (v103);
                          }
                          else
                          {
                            do
                            {
                              v104 = (_QWORD *)v101[2];
                              v10 = *v104 == (_QWORD)v101;
                              v101 = v104;
                            }
                            while (!v10);
                          }
                          v101 = v104;
                        }
                        while (v104 != v97 + 6);
                        goto LABEL_184;
                      }
                    }
                    goto LABEL_213;
                  }
                  v11 = 1;
                  if (*(_DWORD *)v13 == 2 && *(_BYTE *)(v7 + 33) == 0)
                    goto LABEL_218;
                }
                else
                {
LABEL_213:
                  v11 = 1;
                  if (*(_DWORD *)v13 == 2 && *(_BYTE *)(v7 + 33) == 0)
                    goto LABEL_218;
                }
LABEL_189:
                v12 = 0;
                goto LABEL_19;
              }
              v11 = 0;
              if (!v12)
                goto LABEL_185;
              goto LABEL_17;
            }
            goto LABEL_101;
          }
          if (v15 < v59)
          {
LABEL_101:
            v56 = *v58;
            v57 = v58;
            if (!*v58)
              goto LABEL_114;
            continue;
          }
          break;
        }
        if (v59 >= v15)
          goto LABEL_133;
LABEL_112:
        v56 = v58[1];
        if (v56)
          continue;
        break;
      }
      v57 = v58 + 1;
LABEL_114:
      result = (char *)operator new(0x40uLL);
      *((_OWORD *)result + 2) = v116;
      *((_QWORD *)result + 6) = v117;
      *((_WORD *)result + 28) = 0;
      result[58] = 0;
      *(_QWORD *)result = 0;
      *((_QWORD *)result + 1) = 0;
      *((_QWORD *)result + 2) = v58;
      *v57 = (uint64_t *)result;
      v62 = (uint64_t *)**v3;
      if (v62)
      {
        *v3 = v62;
        result = (char *)*v57;
      }
      v63 = *v8;
      v10 = result == (char *)*v8;
      result[24] = v10;
      if (!v10)
      {
        do
        {
          v64 = *((_QWORD *)result + 2);
          if (*(_BYTE *)(v64 + 24))
            break;
          v65 = *(uint64_t **)(v64 + 16);
          v66 = *v65;
          if (*v65 == v64)
          {
            v69 = v65[1];
            if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), v67 = (_BYTE *)(v69 + 24), v70))
            {
              if (*(char **)v64 == result)
              {
                *(_BYTE *)(v64 + 24) = 1;
                *((_BYTE *)v65 + 24) = 0;
                v73 = *(_QWORD *)(v64 + 8);
                *v65 = v73;
                if (v73)
                  goto LABEL_131;
              }
              else
              {
                v71 = *(uint64_t **)(v64 + 8);
                v72 = *v71;
                *(_QWORD *)(v64 + 8) = *v71;
                if (v72)
                {
                  *(_QWORD *)(v72 + 16) = v64;
                  v65 = *(uint64_t **)(v64 + 16);
                }
                v71[2] = (uint64_t)v65;
                *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v71;
                *v71 = v64;
                *(_QWORD *)(v64 + 16) = v71;
                v65 = (uint64_t *)v71[2];
                v64 = *v65;
                *((_BYTE *)v71 + 24) = 1;
                *((_BYTE *)v65 + 24) = 0;
                v73 = *(_QWORD *)(v64 + 8);
                *v65 = v73;
                if (v73)
LABEL_131:
                  *(_QWORD *)(v73 + 16) = v65;
              }
              *(_QWORD *)(v64 + 16) = v65[2];
              *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
              *(_QWORD *)(v64 + 8) = v65;
LABEL_140:
              v65[2] = v64;
              break;
            }
          }
          else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), v67 = (_BYTE *)(v66 + 24), v68))
          {
            if (*(char **)v64 == result)
            {
              v107 = *((_QWORD *)result + 1);
              *(_QWORD *)v64 = v107;
              if (v107)
              {
                *(_QWORD *)(v107 + 16) = v64;
                v65 = *(uint64_t **)(v64 + 16);
              }
              *((_QWORD *)result + 2) = v65;
              *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = result;
              *((_QWORD *)result + 1) = v64;
              *(_QWORD *)(v64 + 16) = result;
              v65 = (uint64_t *)*((_QWORD *)result + 2);
              result[24] = 1;
              *((_BYTE *)v65 + 24) = 0;
              v64 = v65[1];
              v77 = *(char **)v64;
              v65[1] = *(_QWORD *)v64;
              if (v77)
LABEL_138:
                *((_QWORD *)v77 + 2) = v65;
            }
            else
            {
              result = (char *)*((_QWORD *)result + 2);
              *(_BYTE *)(v64 + 24) = 1;
              *((_BYTE *)v65 + 24) = 0;
              v64 = v65[1];
              v77 = *(char **)v64;
              v65[1] = *(_QWORD *)v64;
              if (v77)
                goto LABEL_138;
            }
            *(_QWORD *)(v64 + 16) = v65[2];
            *(_QWORD *)(v65[2] + 8 * (*(_QWORD *)v65[2] != (_QWORD)v65)) = v64;
            *(_QWORD *)v64 = v65;
            goto LABEL_140;
          }
          *(_BYTE *)(v64 + 24) = 1;
          result = (char *)v65;
          *((_BYTE *)v65 + 24) = v65 == v63;
          *v67 = 1;
        }
        while (v65 != v63);
      }
      v3[2] = (uint64_t *)((char *)v3[2] + 1);
      v74 = *v8;
      v75 = v3 + 1;
      v76 = v3 + 1;
      if (!*v8)
        goto LABEL_156;
LABEL_144:
      while (2)
      {
        while (2)
        {
          v76 = (uint64_t **)v74;
          v78 = v74[4];
          if (v15 != v78)
          {
            if (v15 < v78)
              goto LABEL_143;
            if (v78 >= v15)
              goto LABEL_175;
            goto LABEL_154;
          }
          v79 = (uint64_t)v76[5];
          if (*((_QWORD *)&v116 + 1) == v79)
          {
            v80 = v76[6];
            if (v117 < (uint64_t)v80)
              goto LABEL_143;
            if ((uint64_t)v80 >= v117)
              goto LABEL_175;
LABEL_154:
            v74 = v76[1];
            if (!v74)
            {
              v75 = v76 + 1;
              goto LABEL_156;
            }
            continue;
          }
          break;
        }
        if (*((uint64_t *)&v116 + 1) < v79)
        {
LABEL_143:
          v74 = *v76;
          v75 = v76;
          if (!*v76)
            goto LABEL_156;
          continue;
        }
        break;
      }
      if (v79 < *((uint64_t *)&v116 + 1))
        goto LABEL_154;
LABEL_175:
      if (*((_BYTE *)v76 + 57))
        goto LABEL_19;
      if ((v11 & 1) == 0)
        goto LABEL_190;
LABEL_184:
      v11 = 1;
      if (v12)
        goto LABEL_17;
LABEL_185:
      if (*(_DWORD *)v13 != 2 || *(_BYTE *)(v7 + 33) != 0)
        goto LABEL_189;
LABEL_218:
      if (*v115 != 2 || *(_DWORD *)(v7 + 208) != 2)
      {
        v12 = 0;
        goto LABEL_17;
      }
      v12 = 0;
      if (*(_QWORD *)(v7 + 48) != *(_QWORD *)(v7 + 216))
      {
LABEL_17:
        v118 = &v116;
        result = (char *)sub_1002AA7B0(v3, (uint64_t *)&v116, (uint64_t)&unk_100395958, &v118);
LABEL_18:
        result[57] = 1;
      }
LABEL_19:
      v13 += 168;
      if (v13 != v7 + 376)
        continue;
      break;
    }
LABEL_259:
    v7 += 376;
    v6 = v113;
    if (v7 - *v113 == 6016)
    {
      v6 = v113 + 1;
      v7 = v113[1];
    }
    v4 = a2[1];
    v5 = a2[2];
  }
}

void sub_100286EFC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _OWORD *a5)
{
  uint64_t **v6;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  double *v45;
  double *v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double *v51;
  uint64_t v52;
  char *v53;
  double *v54;
  double *v55;
  double *v56;
  double *v57;
  double v58;
  double v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t *v71;
  uint64_t *v72;
  BOOL v73;
  char v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t **v78;
  char *v79;
  char *v80;
  uint64_t **v81;
  uint64_t v82;
  void **v83;
  __int128 v84;
  uint64_t *v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  __int128 v95;
  char *v96;
  uint64_t *v97;
  __int128 v98;
  uint64_t *v99;
  uint64_t *v100;
  char v101;
  __int128 *v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t *v106;
  __int128 v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  __int128 v115;
  char *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t *v119;
  uint64_t *v120;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  _OWORD *v125;
  char v126;
  void *__p;
  char *v128;
  char *v129;
  char *v130;

  v6 = (uint64_t **)a4;
  v10 = *(_QWORD *)(a4 + 16);
  __p = 0;
  v128 = 0;
  v129 = 0;
  if (v10)
  {
    if (v10 >= 0x38E38E38E38E38FLL)
      sub_1000D02C0();
    v11 = (char *)operator new(72 * v10);
    __p = v11;
    v129 = &v11[72 * v10];
    v12 = v11;
    do
    {
      *(_QWORD *)v12 = -1;
      *((_QWORD *)v12 + 1) = -1;
      *((_QWORD *)v12 + 2) = -1;
      *((_QWORD *)v12 + 3) = 0;
      *((_QWORD *)v12 + 4) = 0;
      v12 += 72;
    }
    while (v12 != &v11[72 * v10]);
    v128 = &v11[72 * v10];
    v14 = v6 + 1;
    v13 = *v6;
    if (*v6 == (uint64_t *)(v6 + 1))
      goto LABEL_112;
  }
  else
  {
    v11 = 0;
    v14 = (uint64_t **)(a4 + 8);
    v13 = *(uint64_t **)a4;
    if (*(_QWORD *)a4 == a4 + 8)
    {
      v74 = 1;
      goto LABEL_116;
    }
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = *((double *)v13 + 10);
    v19 = -v18;
    if (!*((_BYTE *)v13 + 88))
      v19 = *((double *)v13 + 10);
    v20 = &v11[72 * v17];
    v21 = *((_OWORD *)v13 + 2);
    *((_QWORD *)v20 + 2) = v13[6];
    *(_OWORD *)v20 = v21;
    *((double *)v20 + 3) = v19;
    *((double *)v20 + 4) = fabs(v18);
    v22 = v123;
    *(_OWORD *)(v20 + 56) = v124;
    *(_OWORD *)(v20 + 40) = v22;
    v11 = (char *)__p;
    v23 = v13[4];
    if (!v23)
    {
      v42 = v13[6];
      if (v42 >= 0)
        v43 = *(_QWORD *)(a1 + 24) + 24 * v42;
      else
        v43 = a1;
      v44 = (char *)__p + 72 * v17;
      *(int64x2_t *)(v44 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v45 = (double *)(v44 + 56);
      *((int64x2_t *)v45 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v46 = v45 - 2;
      v48 = *(double **)v43;
      v47 = *(double **)(v43 + 8);
      if (v48 == v47)
        goto LABEL_65;
      v36 = *v48;
      *v46 = *v48;
      v37 = v48[1];
      *(v45 - 1) = v37;
      v38 = *v48;
      *v45 = *v48;
      v39 = v48[1];
      v45[1] = v39;
      while (1)
      {
        v48 += 2;
        if (v48 == v47)
          goto LABEL_66;
        v49 = *v48;
        if (*v48 < v36)
        {
          *v46 = v49;
          v36 = v49;
          if (v49 > v38)
            goto LABEL_45;
LABEL_41:
          v50 = v48[1];
          if (v50 < v37)
            goto LABEL_46;
LABEL_42:
          if (v50 > v39)
          {
LABEL_47:
            v45[1] = v50;
            v39 = v50;
          }
        }
        else
        {
          if (v49 <= v38)
            goto LABEL_41;
LABEL_45:
          *v45 = v49;
          v38 = v49;
          v50 = v48[1];
          if (v50 >= v37)
            goto LABEL_42;
LABEL_46:
          *(v45 - 1) = v50;
          v37 = v50;
          if (v50 > v39)
            goto LABEL_47;
        }
      }
    }
    if (v23 != 1)
    {
      if (v23 != 2)
      {
        v51 = (double *)((char *)__p + 72 * v17);
        v36 = v51[5];
        v37 = v51[6];
        v38 = v51[7];
        v39 = v51[8];
        goto LABEL_66;
      }
      v24 = a3[4];
      v25 = a3[1];
      v26 = (_QWORD *)(v25 + 8 * (v24 / 0xAA));
      if (a3[2] == v25)
      {
        v27 = 0;
        v28 = v13[5];
        if (!v28)
          goto LABEL_53;
      }
      else
      {
        v27 = *v26 + 24 * (v24 % 0xAA);
        v28 = v13[5];
        if (!v28)
          goto LABEL_53;
      }
      v52 = v28 - 0x5555555555555555 * ((uint64_t)(v27 - *v26) >> 3);
      if (v52 < 1)
        v27 = v26[-((169 - v52) / 0xAAuLL)] + 24 * (170 * ((169 - v52) / 0xAAuLL) - (169 - v52)) + 4056;
      else
        v27 = v26[v52 / 0xAAuLL] + 24 * (v52 % 0xAAuLL);
LABEL_53:
      v53 = (char *)__p + 72 * v17;
      *(int64x2_t *)(v53 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      v54 = (double *)(v53 + 56);
      *((int64x2_t *)v54 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v55 = v54 - 2;
      v57 = *(double **)v27;
      v56 = *(double **)(v27 + 8);
      if (v57 != v56)
      {
        v36 = *v57;
        *v55 = *v57;
        v37 = v57[1];
        *(v54 - 1) = v37;
        v38 = *v57;
        *v54 = *v57;
        v39 = v57[1];
        v54[1] = v39;
        while (1)
        {
          v57 += 2;
          if (v57 == v56)
            goto LABEL_66;
          v58 = *v57;
          if (*v57 < v36)
          {
            *v55 = v58;
            v36 = v58;
            if (v58 > v38)
              goto LABEL_62;
LABEL_58:
            v59 = v57[1];
            if (v59 < v37)
              goto LABEL_63;
LABEL_59:
            if (v59 > v39)
            {
LABEL_64:
              v54[1] = v59;
              v39 = v59;
            }
          }
          else
          {
            if (v58 <= v38)
              goto LABEL_58;
LABEL_62:
            *v54 = v58;
            v38 = v58;
            v59 = v57[1];
            if (v59 >= v37)
              goto LABEL_59;
LABEL_63:
            *(v54 - 1) = v59;
            v37 = v59;
            if (v59 > v39)
              goto LABEL_64;
          }
        }
      }
      goto LABEL_65;
    }
    v29 = v13[6];
    if (v29 >= 0)
      v30 = *(_QWORD *)(*a2 + 48 * v13[5] + 24) + 24 * v29;
    else
      v30 = *a2 + 48 * v13[5];
    v31 = (char *)__p + 72 * v17;
    *(int64x2_t *)(v31 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v32 = (double *)(v31 + 56);
    *((int64x2_t *)v32 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v33 = v32 - 2;
    v35 = *(double **)v30;
    v34 = *(double **)(v30 + 8);
    if (v35 != v34)
    {
      v36 = *v35;
      *v33 = *v35;
      v37 = v35[1];
      *(v32 - 1) = v37;
      v38 = *v35;
      *v32 = *v35;
      v39 = v35[1];
      v32[1] = v39;
      while (1)
      {
        v35 += 2;
        if (v35 == v34)
          goto LABEL_66;
        v40 = *v35;
        if (*v35 < v36)
        {
          *v33 = v40;
          v36 = v40;
          if (v40 > v38)
            goto LABEL_30;
LABEL_26:
          v41 = v35[1];
          if (v41 < v37)
            goto LABEL_31;
LABEL_27:
          if (v41 > v39)
          {
LABEL_32:
            v32[1] = v41;
            v39 = v41;
          }
        }
        else
        {
          if (v40 <= v38)
            goto LABEL_26;
LABEL_30:
          *v32 = v40;
          v38 = v40;
          v41 = v35[1];
          if (v41 >= v37)
            goto LABEL_27;
LABEL_31:
          *(v32 - 1) = v41;
          v37 = v41;
          if (v41 > v39)
            goto LABEL_32;
        }
      }
    }
LABEL_65:
    v37 = 1.79769313e308;
    v39 = -1.79769313e308;
    v38 = -1.79769313e308;
    v36 = 1.79769313e308;
LABEL_66:
    v60 = (double *)&v11[72 * v17];
    v61 = fabs(v36);
    if (v61 >= 1.0)
      v62 = v61 * 2.22044605e-16;
    else
      v62 = 2.22044605e-16;
    v63 = v36 - v62;
    v64 = fabs(v37);
    if (v64 >= 1.0)
      v65 = v64 * 2.22044605e-16;
    else
      v65 = 2.22044605e-16;
    v60[5] = v63;
    v60[6] = v37 - v65;
    v66 = fabs(v38);
    if (v66 >= 1.0)
      v67 = v66 * 2.22044605e-16;
    else
      v67 = 2.22044605e-16;
    v68 = v38 + v67;
    v69 = fabs(v39);
    if (v69 >= 1.0)
      v70 = v69 * 2.22044605e-16;
    else
      v70 = 2.22044605e-16;
    v60[7] = v68;
    v60[8] = v39 + v70;
    if (v60[3] > 0.0)
    {
      v16 = v17;
      ++v15;
    }
    v71 = (uint64_t *)v13[1];
    if (v71)
    {
      do
      {
        v72 = v71;
        v71 = (uint64_t *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        v72 = (uint64_t *)v13[2];
        v73 = *v72 == (_QWORD)v13;
        v13 = v72;
      }
      while (!v73);
    }
    ++v17;
    v13 = v72;
  }
  while (v72 != (uint64_t *)v14);
  if (v15 == v10)
  {
    v74 = 1;
    v75 = (char *)__p;
    if (!__p)
      goto LABEL_116;
LABEL_115:
    v128 = v75;
    operator delete(v75);
    goto LABEL_116;
  }
  if (v15 == 1)
  {
    v76 = &v11[72 * v16];
    v77 = *(_OWORD *)v76;
    *(_QWORD *)&v124 = *((_QWORD *)v76 + 2);
    v123 = v77;
    v130 = (char *)&v123;
    v78 = sub_1002B66BC(v6, (uint64_t *)&v123, (uint64_t)&unk_100395958, (_OWORD **)&v130);
    v80 = (char *)__p;
    v79 = v128;
    if (__p != v128)
    {
      v81 = v78;
      v82 = 0;
      v83 = (void **)(v78 + 16);
      do
      {
        if (v82 != v16)
        {
          v130 = v80;
          v86 = sub_1002B66BC((uint64_t **)a4, (uint64_t *)v80, (uint64_t)&unk_100395958, (_OWORD **)&v130);
          *((_OWORD *)v86 + 6) = v123;
          v86[14] = (uint64_t *)v124;
          v88 = v81[17];
          v87 = (unint64_t)v81[18];
          if ((unint64_t)v88 < v87)
          {
            v84 = *(_OWORD *)v80;
            v88[2] = *((_QWORD *)v80 + 2);
            *(_OWORD *)v88 = v84;
            v85 = v88 + 3;
          }
          else
          {
            v89 = (uint64_t *)*v83;
            v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (_BYTE *)*v83) >> 3);
            v91 = v90 + 1;
            if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1000D02C0();
            v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - (_QWORD)v89) >> 3);
            if (2 * v92 > v91)
              v91 = 2 * v92;
            if (v92 >= 0x555555555555555)
              v93 = 0xAAAAAAAAAAAAAAALL;
            else
              v93 = v91;
            if (v93)
            {
              if (v93 > 0xAAAAAAAAAAAAAAALL)
                sub_1000CDEB8();
              v94 = (char *)operator new(24 * v93);
            }
            else
            {
              v94 = 0;
            }
            v95 = *(_OWORD *)v80;
            v96 = &v94[24 * v90];
            *((_QWORD *)v96 + 2) = *((_QWORD *)v80 + 2);
            *(_OWORD *)v96 = v95;
            v97 = (uint64_t *)v96;
            if (v88 != v89)
            {
              do
              {
                v98 = *(_OWORD *)(v88 - 3);
                *(v97 - 1) = *(v88 - 1);
                *(_OWORD *)(v97 - 3) = v98;
                v97 -= 3;
                v88 -= 3;
              }
              while (v88 != v89);
              v88 = (uint64_t *)*v83;
            }
            v99 = (uint64_t *)&v94[24 * v93];
            v85 = (uint64_t *)(v96 + 24);
            v81[16] = v97;
            v81[17] = (uint64_t *)(v96 + 24);
            v81[18] = v99;
            if (v88)
              operator delete(v88);
          }
          v81[17] = v85;
          v79 = v128;
        }
        v80 += 72;
        ++v82;
      }
      while (v80 != v79);
    }
    v74 = 1;
    v6 = (uint64_t **)a4;
    v75 = (char *)__p;
    if (__p)
      goto LABEL_115;
    goto LABEL_116;
  }
LABEL_112:
  *(_QWORD *)&v123 = a1;
  *((_QWORD *)&v123 + 1) = a2;
  *(_QWORD *)&v124 = a3;
  *((_QWORD *)&v124 + 1) = v6;
  v125 = a5;
  v126 = 0;
  v130 = (char *)a5;
  v122 = a5;
  sub_1002B6818((double **)&__p, (uint64_t)&v123, (uint64_t)&v130, (uint64_t)&v122, 0x10uLL);
  v74 = 0;
  v75 = (char *)__p;
  if (__p)
    goto LABEL_115;
LABEL_116:
  v100 = *v6;
  if (*v6 == (uint64_t *)v14)
    v101 = 1;
  else
    v101 = v74;
  if ((v101 & 1) == 0)
  {
    do
    {
      if ((v100[12] & 0x8000000000000000) == 0)
      {
        v102 = (__int128 *)(v100 + 4);
        *(_QWORD *)&v123 = v100 + 12;
        v103 = sub_1002B66BC(v6, v100 + 12, (uint64_t)&unk_100395958, (_OWORD **)&v123);
        v104 = v103;
        v106 = v103[17];
        v105 = v103[18];
        if (v106 >= v105)
        {
          v109 = v103 + 16;
          v110 = v103[16];
          v111 = 0xAAAAAAAAAAAAAAABLL * (v106 - v110) + 1;
          if (v111 > 0xAAAAAAAAAAAAAAALL)
            sub_1000D02C0();
          v112 = 0xAAAAAAAAAAAAAAABLL * (v105 - v110);
          if (2 * v112 > v111)
            v111 = 2 * v112;
          if (v112 >= 0x555555555555555)
            v113 = 0xAAAAAAAAAAAAAAALL;
          else
            v113 = v111;
          if (v113)
          {
            if (v113 > 0xAAAAAAAAAAAAAAALL)
              sub_1000CDEB8();
            v114 = (char *)operator new(24 * v113);
          }
          else
          {
            v114 = 0;
          }
          v115 = *v102;
          v116 = &v114[8 * (v106 - v110)];
          *((_QWORD *)v116 + 2) = v100[6];
          *(_OWORD *)v116 = v115;
          v117 = (uint64_t *)v116;
          if (v106 != v110)
          {
            do
            {
              v118 = *(_OWORD *)(v106 - 3);
              *(v117 - 1) = *(v106 - 1);
              *(_OWORD *)(v117 - 3) = v118;
              v117 -= 3;
              v106 -= 3;
            }
            while (v106 != v110);
            v106 = *v109;
          }
          v108 = (uint64_t *)(v116 + 24);
          v104[16] = v117;
          v104[17] = (uint64_t *)(v116 + 24);
          v104[18] = (uint64_t *)&v114[24 * v113];
          v6 = (uint64_t **)a4;
          if (v106)
            operator delete(v106);
        }
        else
        {
          v107 = *v102;
          v106[2] = v100[6];
          *(_OWORD *)v106 = v107;
          v108 = v106 + 3;
        }
        v104[17] = v108;
      }
      v119 = (uint64_t *)v100[1];
      if (v119)
      {
        do
        {
          v120 = v119;
          v119 = (uint64_t *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (uint64_t *)v100[2];
          v73 = *v120 == (_QWORD)v100;
          v100 = v120;
        }
        while (!v73);
      }
      v100 = v120;
    }
    while (v120 != (uint64_t *)v14);
  }
}

void sub_100287864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100287890(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  __int128 v24;
  BOOL v25;
  uint64_t *v26;
  _QWORD *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  const double *v39;
  const double *v40;
  const double *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double *v46;
  unint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  char **v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  void *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const double *v88;
  uint64_t v89;
  const double *v90;
  const double *v91;
  const double *v92;
  double v93;
  double **v94;
  double v95;
  double *v96;
  double *v97;
  unint64_t v98;
  double *v99;
  BOOL v100;
  unint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  const double *v105;
  uint64_t v106;
  const double *v107;
  const double *v108;
  const double *v109;
  double v110;
  double v111;
  char *v112;
  char *v113;
  char *v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  _QWORD *v118;
  double v119;
  double v120;
  uint64_t v121;
  int v123;
  int8x16_t v125;
  uint64_t v126;
  void (**v127)(std::exception *__hidden);
  void *v128[2];
  void *__p[2];
  __int128 v130;
  float64x2x2_t v131;
  float64x2x2_t v132;
  float64x2x2_t v133;
  float64x2x2_t v134;
  float64x2x2_t v135;
  float64x2x2_t v136;
  float64x2x2_t v137;
  float64x2x2_t v138;
  float64x2x3_t v139;
  float64x2x3_t v140;

  v8 = a1 + 1;
  v9 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    while (*((_BYTE *)v9 + 89) || v9[12] != -1)
    {
LABEL_143:
      v117 = (_QWORD *)v9[1];
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = (_QWORD *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (_QWORD *)v9[2];
          v28 = *v118 == (_QWORD)v9;
          v9 = v118;
        }
        while (!v28);
      }
      v9 = v118;
      if (v118 == v8)
        return a5;
    }
    *(_OWORD *)__p = 0u;
    v130 = 0u;
    *(_OWORD *)v128 = 0u;
    v14 = v9[4];
    v13 = v9[5];
    v15 = *((unsigned __int8 *)v9 + 88);
    if (v14 != 2)
    {
      v16 = v9[6];
      if (v14 == 1)
      {
        v18 = *a3 + 48 * v13;
        if (v16 >= 0)
          v17 = *(_QWORD *)(v18 + 24) + 24 * v16;
        else
          v17 = v18;
        if (v128 == (void **)v17)
          goto LABEL_23;
      }
      else
      {
        if (v14)
          goto LABEL_29;
        if (v16 >= 0)
          v17 = *(_QWORD *)(a2 + 24) + 24 * v16;
        else
          v17 = a2;
        if (v128 == (void **)v17)
        {
LABEL_23:
          if (v15)
          {
            if (v128[0] != v128[1])
            {
              v22 = (char *)v128[1] - 16;
              if ((char *)v128[1] - 16 > v128[0])
              {
                v23 = (char *)v128[0] + 16;
                do
                {
                  v24 = *((_OWORD *)v23 - 1);
                  *((_OWORD *)v23 - 1) = *(_OWORD *)v22;
                  *(_OWORD *)v22 = v24;
                  v22 -= 16;
                  v25 = v23 >= v22;
                  v23 += 16;
                }
                while (!v25);
              }
            }
          }
LABEL_29:
          v26 = (uint64_t *)v9[16];
          v27 = (_QWORD *)*v8;
          v28 = v26 == (uint64_t *)v9[17] || v27 == 0;
          if (!v28)
          {
            while (1)
            {
              if (v27)
              {
                v50 = *v26;
                v49 = v26[1];
                v51 = v8;
                v52 = v26[2];
                do
                {
                  v56 = v27[4];
                  v57 = v56 < v50;
                  if (v56 == v50)
                  {
                    v58 = v27[5];
                    v57 = v58 < v49;
                    if (v58 == v49)
                      v57 = v27[6] < v52;
                  }
                  v53 = v57;
                  v54 = v53 == 0;
                  if (v53)
                    v55 = v27 + 1;
                  else
                    v55 = v27;
                  if (v54)
                    v51 = v27;
                  v27 = (_QWORD *)*v55;
                }
                while (*v55);
                if (v51 != v8)
                {
                  v59 = v51[4];
                  v60 = v50 < v59;
                  if (v50 == v59)
                  {
                    v61 = v51[5];
                    v60 = v49 < v61;
                    if (v49 == v61)
                      v60 = v52 < v51[6];
                  }
                  if (!v60 && !*((_BYTE *)v51 + 89))
                    break;
                }
              }
LABEL_68:
              v26 += 3;
              if (v26 == (uint64_t *)v9[17])
                goto LABEL_34;
              v27 = (_QWORD *)*v8;
            }
            v62 = *((unsigned __int8 *)v51 + 88);
            if (v50 != 2)
            {
              if (v50 == 1)
              {
                v64 = *a3 + 48 * v49;
                if (v52 >= 0)
                  v63 = (char **)(*(_QWORD *)(v64 + 24) + 24 * v52);
                else
                  v63 = (char **)v64;
                if ((unint64_t)(v63[1] - *v63) < 0x31)
                  goto LABEL_68;
              }
              else
              {
                if (v50)
                  goto LABEL_68;
                v63 = (char **)(v52 >= 0 ? *(_QWORD *)(a2 + 24) + 24 * v52 : a2);
                if ((unint64_t)(v63[1] - *v63) < 0x31)
                  goto LABEL_68;
              }
LABEL_86:
              v69 = (char *)__p[1];
              v68 = (char *)v130;
              if ((_QWORD)v130 - (unint64_t)__p[1] == -24)
              {
                v123 = *((unsigned __int8 *)v51 + 88);
                v70 = a4;
                v71 = a3;
                v72 = a7;
                v73 = a5;
                if ((void *)v130 != __p[1])
                {
                  v74 = (char *)v130;
                  do
                  {
                    v76 = (void *)*((_QWORD *)v74 - 3);
                    v74 -= 24;
                    v75 = v76;
                    if (v76)
                    {
                      *((_QWORD *)v68 - 2) = v75;
                      operator delete(v75);
                    }
                    v68 = v74;
                  }
                  while (v74 != v69);
                }
                *(_QWORD *)&v130 = v69;
                a5 = v73;
                a7 = v72;
                a3 = v71;
                a4 = v70;
                v62 = v123;
                v77 = v69 - 24;
                if (v69 - 24 != (char *)v63)
LABEL_95:
                  sub_10028430C(v77, *v63, v63[1], (v63[1] - *v63) >> 4);
              }
              else
              {
                sub_1002B99B8((uint64_t)&__p[1], 1uLL);
                v77 = (char *)(v130 - 24);
                if ((char **)(v130 - 24) != v63)
                  goto LABEL_95;
              }
              if (v62)
              {
                v78 = *(_QWORD *)(v130 - 24);
                v79 = *(_QWORD *)(v130 - 16);
                v80 = (_OWORD *)(v79 - 16);
                if (v78 != v79 && (unint64_t)v80 > v78)
                {
                  v82 = v78 + 16;
                  do
                  {
                    v83 = *(_OWORD *)(v82 - 16);
                    *(_OWORD *)(v82 - 16) = *v80;
                    *v80-- = v83;
                    v25 = v82 >= (unint64_t)v80;
                    v82 += 16;
                  }
                  while (!v25);
                }
              }
              goto LABEL_68;
            }
            v65 = a4[4];
            v66 = a4[1];
            v67 = (_QWORD *)(v66 + 8 * (v65 / 0xAA));
            if (a4[2] == v66)
            {
              v63 = 0;
              if (!v49)
              {
LABEL_85:
                if ((unint64_t)(v63[1] - *v63) < 0x31)
                  goto LABEL_68;
                goto LABEL_86;
              }
            }
            else
            {
              v63 = (char **)(*v67 + 24 * (v65 % 0xAA));
              if (!v49)
                goto LABEL_85;
            }
            v84 = v49 - 0x5555555555555555 * (((uint64_t)v63 - *v67) >> 3);
            if (v84 < 1)
            {
              v85 = 169 - v84;
              v63 = (char **)(v67[-(v85 / 0xAA)] + 24 * (170 * (v85 / 0xAA) - v85) + 4056);
              if (*(_QWORD *)(v67[-(v85 / 0xAA)] + 24 * (170 * (v85 / 0xAA) - v85) + 4064) - (_QWORD)*v63 < 0x31uLL)
                goto LABEL_68;
            }
            else
            {
              v63 = (char **)(v67[v84 / 0xAAuLL] + 24 * (v84 % 0xAAuLL));
              if ((unint64_t)(v63[1] - *v63) < 0x31)
                goto LABEL_68;
            }
            goto LABEL_86;
          }
LABEL_34:
          v29 = (char *)v128[1] - (char *)v128[0];
          v30 = ((char *)v128[1] - (char *)v128[0]) >> 4;
          v31 = (char *)__p[1];
          if (__p[1] != (void *)v130)
          {
            v32 = v130 - (unint64_t)__p[1] - 24;
            v33 = (uint64_t *)__p[1];
            if (v32 >= 0x60)
            {
              v34 = v32 / 0x18 + 1;
              v35 = v34 & 3;
              if ((v34 & 3) == 0)
                v35 = 4;
              v36 = v34 - v35;
              v33 = (uint64_t *)((char *)__p[1] + 24 * v36);
              v37 = 0uLL;
              v38 = (int64x2_t)(unint64_t)(((char *)v128[1] - (char *)v128[0]) >> 4);
              v39 = (const double *)__p[1];
              do
              {
                v40 = v39 + 12;
                v139 = vld3q_f64(v39);
                v41 = v39 + 6;
                v38 = vsraq_n_s64(v38, vsubq_s64((int64x2_t)v139.val[1], (int64x2_t)v139.val[0]), 4uLL);
                v140 = vld3q_f64(v41);
                v37 = vsraq_n_s64(v37, vsubq_s64((int64x2_t)v140.val[1], (int64x2_t)v140.val[0]), 4uLL);
                v39 = v40;
                v36 -= 4;
              }
              while (v36);
              v30 = vaddvq_s64(vaddq_s64(v37, v38));
            }
            do
            {
              v42 = *v33;
              v43 = v33[1];
              v33 += 3;
              v30 += (v43 - v42) >> 4;
            }
            while (v33 != (uint64_t *)v130);
          }
          if (v30 < 4)
          {
LABEL_133:
            if (v31)
            {
              v112 = (char *)v130;
              v113 = v31;
              if ((char *)v130 != v31)
              {
                v114 = (char *)v130;
                do
                {
                  v116 = (void *)*((_QWORD *)v114 - 3);
                  v114 -= 24;
                  v115 = v116;
                  if (v116)
                  {
                    *((_QWORD *)v112 - 2) = v115;
                    operator delete(v115);
                  }
                  v112 = v114;
                }
                while (v114 != v31);
                v113 = (char *)__p[1];
              }
              *(_QWORD *)&v130 = v31;
              operator delete(v113);
            }
            if (v128[0])
            {
              v128[1] = v128[0];
              operator delete(v128[0]);
            }
            goto LABEL_143;
          }
          v44 = 0.0;
          v45 = 0.0;
          if (v29 < 0x40 || (v46 = (double *)((char *)v128[0] + 16), (char *)v128[0] + 16 == v128[1]))
          {
LABEL_117:
            if (__p[1] != (void *)v130)
            {
              v44 = 0.0;
              v94 = (double **)__p[1];
              while (2)
              {
                v97 = *v94;
                v96 = v94[1];
                v98 = (char *)v96 - (char *)*v94;
                v99 = *v94 + 2;
                v100 = v98 < 0x40 || v99 == v96;
                v95 = 0.0;
                if (v100)
                  goto LABEL_120;
                v101 = v98 - 32;
                if (v101 < 0x30)
                {
                  v102 = *v94;
                  goto LABEL_130;
                }
                v103 = (v101 >> 4) + 1;
                v104 = 2 * (v103 & 0x1FFFFFFFFFFFFFFCLL);
                v99 = (double *)((char *)v99 + v104 * 8);
                v102 = &v97[v104];
                v105 = v97 + 4;
                v106 = v103 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v107 = v105 - 4;
                  v132 = vld2q_f64(v107);
                  v134 = vld2q_f64(v105);
                  v108 = v105 - 2;
                  v109 = v105 + 2;
                  v137 = vld2q_f64(v108);
                  v138 = vld2q_f64(v109);
                  v132.val[0] = vmulq_f64(vaddq_f64(v132.val[0], v137.val[0]), vsubq_f64(v132.val[1], v137.val[1]));
                  v132.val[1] = vmulq_f64(vaddq_f64(v134.val[0], v138.val[0]), vsubq_f64(v134.val[1], v138.val[1]));
                  v95 = v95 + v132.val[0].f64[0] + v132.val[0].f64[1] + v132.val[1].f64[0] + v132.val[1].f64[1];
                  v105 += 8;
                  v106 -= 4;
                }
                while (v106);
                if (v103 != (v103 & 0x1FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_130:
                    v110 = *v99;
                    v99 += 2;
                    v95 = v95 + (*v102 + v110) * (v102[1] - v102[3]);
                    v102 += 2;
                  }
                  while (v99 != v96);
                }
                v95 = v95 * 0.5;
LABEL_120:
                v44 = v44 + v95;
                v94 += 3;
                if (v94 == (double **)v130)
                  break;
                continue;
              }
            }
            v111 = v45 + v44;
            if (v111 != 0.0)
            {
              if ((*(_QWORD *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_154;
              v119 = fabs(v111);
              v120 = 2.22044605e-16;
              if (v119 >= 1.0)
                v120 = v119 * 2.22044605e-16;
              if (v119 > v120)
              {
LABEL_154:
                if ((_DWORD)a7 == 1 || v111 > 0.0)
                {
                  v125.i64[0] = a5;
                  sub_1002B9874((void ***)&v125, v128);
                  v31 = (char *)__p[1];
                }
                else if ((_DWORD)a7 == 2)
                {
                  v127 = &off_100401758;
                  v125.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.0.Internal.sdk/usr/local/include/boost/geometry/algorithms/detail/over"
                                         "lay/add_rings.hpp";
                  v125.i64[1] = (uint64_t)"OutputIterator boost::geometry::detail::overlay::add_rings(const SelectionMap &"
                                         ", const Geometry1 &, const Geometry2 &, const RingCollection &, OutputIterator,"
                                         " const Strategy &, add_rings_error_handling) [GeometryOut = boost::geometry::mo"
                                         "del::polygon<boost::geometry::model::d2::point_xy<double>>, SelectionMap = std:"
                                         ":map<boost::geometry::ring_identifier, boost::geometry::detail::overlay::ring_p"
                                         "roperties<boost::geometry::model::d2::point_xy<double>, double>>, Geometry1 = b"
                                         "oost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>, G"
                                         "eometry2 = boost::geometry::model::multi_polygon<boost::geometry::model::polygo"
                                         "n<boost::geometry::model::d2::point_xy<double>>>, RingCollection = std::deque<b"
                                         "oost::geometry::model::ring<boost::geometry::model::d2::point_xy<double>>>, Out"
                                         "putIterator = boost::geometry::range::back_insert_iterator<boost::geometry::mod"
                                         "el::multi_polygon<boost::geometry::model::polygon<boost::geometry::model::d2::p"
                                         "oint_xy<double>>>>, Strategy = boost::geometry::strategies::relate::cartesian<>]";
                  v126 = 157;
                  sub_1002B9958((uint64_t)&v127, &v125);
                }
              }
            }
            goto LABEL_133;
          }
          v47 = v29 - 32;
          if (v47 >= 0x30)
          {
            v86 = (v47 >> 4) + 1;
            v87 = 16 * (v86 & 0x1FFFFFFFFFFFFFFCLL);
            v46 = (double *)((char *)v46 + v87);
            v48 = (double *)((char *)v128[0] + v87);
            v88 = (const double *)((char *)v128[0] + 32);
            v89 = v86 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v90 = v88 - 4;
              v131 = vld2q_f64(v90);
              v133 = vld2q_f64(v88);
              v91 = v88 - 2;
              v92 = v88 + 2;
              v135 = vld2q_f64(v91);
              v136 = vld2q_f64(v92);
              v131.val[0] = vmulq_f64(vaddq_f64(v131.val[0], v135.val[0]), vsubq_f64(v131.val[1], v135.val[1]));
              v131.val[1] = vmulq_f64(vaddq_f64(v133.val[0], v136.val[0]), vsubq_f64(v133.val[1], v136.val[1]));
              v45 = v45 + v131.val[0].f64[0] + v131.val[0].f64[1] + v131.val[1].f64[0] + v131.val[1].f64[1];
              v88 += 8;
              v89 -= 4;
            }
            while (v89);
            if (v86 == (v86 & 0x1FFFFFFFFFFFFFFCLL))
              goto LABEL_116;
          }
          else
          {
            v48 = (double *)v128[0];
          }
          do
          {
            v93 = *v46;
            v46 += 2;
            v45 = v45 + (*v48 + v93) * (v48[1] - v48[3]);
            v48 += 2;
          }
          while (v46 != v128[1]);
LABEL_116:
          v45 = v45 * 0.5;
          goto LABEL_117;
        }
      }
LABEL_22:
      sub_10028430C(v128, *(char **)v17, *(char **)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 4);
      goto LABEL_23;
    }
    v19 = a4[4];
    v20 = a4[1];
    v21 = (_QWORD *)(v20 + 8 * (v19 / 0xAA));
    if (a4[2] == v20)
    {
      v17 = 0;
      if (!v13)
      {
LABEL_21:
        if (v128 == (void **)v17)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    else
    {
      v17 = *v21 + 24 * (v19 % 0xAA);
      if (!v13)
        goto LABEL_21;
    }
    v121 = v13 - 0x5555555555555555 * ((v17 - *v21) >> 3);
    if (v121 < 1)
    {
      v17 = v21[-((169 - v121) / 0xAAuLL)] + 24 * (170 * ((169 - v121) / 0xAAuLL) - (169 - v121)) + 4056;
      if (v128 == (void **)v17)
        goto LABEL_23;
    }
    else
    {
      v17 = v21[v121 / 0xAAuLL] + 24 * (v121 % 0xAAuLL);
      if (v128 == (void **)v17)
        goto LABEL_23;
    }
    goto LABEL_22;
  }
  return a5;
}

void sub_1002881E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100282B34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002881F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception a16, char a17)
{
  std::exception::~exception(&a16);
  sub_100282B34((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_100288210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100282B34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100288224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100282B34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100288238(int a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v16;
  double *v17;
  double **v18;
  double **v19;
  uint64_t v20;
  double *v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double **v27;
  double **v28;
  uint64_t v29;
  double *v30;
  double *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  __p = 0;
  v46 = 0;
  v47 = 0;
  v16 = *(double **)a2;
  v17 = *(double **)(a2 + 8);
  if ((unint64_t)((char *)v17 - (char *)v16) >= 0x20)
  {
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = -1;
    v39 = -1;
    sub_1002884D4(&v48, v16, v17, a6, a5, &v38, 0xAuLL);
  }
  v33 = a1;
  v34 = a3;
  v19 = *(double ***)(a2 + 24);
  v18 = *(double ***)(a2 + 32);
  if (v19 != v18)
  {
    v20 = 0;
    do
    {
      v21 = *v19;
      v22 = v19[1];
      if ((unint64_t)((char *)v22 - (char *)*v19) >= 0x20)
      {
        v38 = xmmword_100382A50;
        v39 = v20;
        sub_1002884D4(&v48, v21, v22, a6, a5, &v38, 0xAuLL);
        v18 = *(double ***)(a2 + 32);
      }
      ++v20;
      v19 += 3;
    }
    while (v19 != v18);
  }
  v32 = a7;
  v35 = a8;
  v46 = 0;
  v23 = *a4;
  if (*a4 != a4[1])
  {
    v24 = 0;
    do
    {
      v25 = *(double **)v23;
      v26 = *(double **)(v23 + 8);
      if ((unint64_t)v26 - *(_QWORD *)v23 >= 0x20)
      {
        *(_QWORD *)&v38 = 1;
        *((_QWORD *)&v38 + 1) = v24;
        v39 = -1;
        sub_1002884D4(&__p, v25, v26, a6, a5, &v38, 0xAuLL);
      }
      v28 = *(double ***)(v23 + 24);
      v27 = *(double ***)(v23 + 32);
      if (v28 != v27)
      {
        v29 = 0;
        do
        {
          v30 = *v28;
          v31 = v28[1];
          if ((unint64_t)((char *)v31 - (char *)*v28) >= 0x20)
          {
            *(_QWORD *)&v38 = 1;
            *((_QWORD *)&v38 + 1) = v24;
            v39 = v29;
            sub_1002884D4(&__p, v30, v31, a6, a5, &v38, 0xAuLL);
            v27 = *(double ***)(v23 + 32);
          }
          ++v29;
          v28 += 3;
        }
        while (v28 != v27);
      }
      v23 += 48;
      ++v24;
    }
    while (v23 != a4[1]);
  }
  LODWORD(v38) = v33;
  *((_QWORD *)&v38 + 1) = a2;
  LODWORD(v39) = v34;
  v40 = a4;
  v41 = a5;
  v42 = a6;
  v43 = v32;
  v44 = v35;
  v36 = a5;
  v37 = a5;
  sub_100288D08((uint64_t *)&v48, (uint64_t *)&__p, (uint64_t)&v38, (uint64_t)&v37, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v36, 0x10uLL);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_100288488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v27 = *(void **)(v25 - 112);
    if (!v27)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v27 = *(void **)(v25 - 112);
    if (!v27)
      goto LABEL_3;
  }
  *(_QWORD *)(v25 - 104) = v27;
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

void sub_1002884D4(void **a1, double *a2, double *a3, uint64_t a4, uint64_t a5, __int128 *a6, unint64_t a7)
{
  uint64_t v7;
  void **v9;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE *v97;
  unint64_t v98;
  void **v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  double *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  uint64_t v123;
  double *v124;
  __int128 v125;
  uint64_t v126;

  v7 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return;
  v9 = a1;
  *((_QWORD *)&v125 + 1) = -1;
  v126 = -1;
  *(_QWORD *)&v125 = -1;
  v12 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v13 = (double)*(uint64_t *)(a4 + 24) + (a2[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v13 >= 0.0)
    v14 = 0.5;
  else
    v14 = -0.5;
  v15 = v13 + v14;
  sub_100284F14(v13 + v14);
  v105 = a4;
  v16 = (double)*(uint64_t *)(a4 + 16) + (*a2 - *(double *)a4) * *(double *)(a4 + 32);
  if (v16 >= 0.0)
    v17 = 0.5;
  else
    v17 = -0.5;
  v18 = v16 + v17;
  sub_100284F14(v16 + v17);
  v19 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v81 = v9[1];
    goto LABEL_124;
  }
  v20 = a2;
  v98 = v12;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v112 = 0;
  v122 = 0;
  v107 = v7 >> 4;
  v26 = ceil(v18);
  v27 = floor(v18);
  if (v18 >= 0.0)
    v26 = v27;
  v28 = (uint64_t)v26;
  v29 = ceil(v15);
  v30 = floor(v15);
  if (v15 >= 0.0)
    v29 = v30;
  v115 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v109 = a3;
  v110 = -1;
  v116 = 1;
  v117 = 0;
  v32 = (uint64_t)v29;
  v33 = -1;
  v111 = -1;
  v114 = 0x7FFFFFFFFFFFFFFFLL;
  v34 = 0x8000000000000000;
  v35 = v105;
  v99 = v9;
  do
  {
    v113 = v33;
    v118 = v23;
    v120 = v24;
    v123 = v21;
    v40 = v19;
    v41 = (double)*(uint64_t *)(v35 + 24) + (v20[3] - *(double *)(v35 + 8)) * *(double *)(v35 + 32);
    if (v41 >= 0.0)
      v42 = 0.5;
    else
      v42 = -0.5;
    v43 = v41 + v42;
    sub_100284F14(v41 + v42);
    v44 = ceil(v43);
    v45 = floor(v43);
    if (v43 >= 0.0)
      v44 = v45;
    v46 = (uint64_t)v44;
    v124 = v40;
    v47 = (double)*(uint64_t *)(v35 + 16) + (*v40 - *(double *)v35) * *(double *)(v35 + 32);
    if (v47 >= 0.0)
      v48 = 0.5;
    else
      v48 = -0.5;
    v49 = v47 + v48;
    sub_100284F14(v47 + v48);
    v50 = ceil(v49);
    v51 = floor(v49);
    if (v49 >= 0.0)
      v50 = v51;
    v52 = (uint64_t)v50;
    if (v28 <= (uint64_t)v50)
      v53 = 0;
    else
      v53 = -1;
    if (v28 < (uint64_t)v50)
      v53 = 1;
    if (v32 <= v46)
      v54 = 0;
    else
      v54 = -1;
    if (v32 < v46)
      v54 = 1;
    v55 = v28 == v52 && v32 == v46;
    if (v55)
      v56 = -99;
    else
      v56 = v54;
    if (v55)
      v57 = -99;
    else
      v57 = 0;
    v58 = v55;
    if (v53)
      v59 = v54;
    else
      v59 = v56;
    if (v53)
      v60 = v53;
    else
      v60 = v57;
    if (v53)
      v61 = 0;
    else
      v61 = v58;
    if (v25)
    {
      v24 = v120;
      v23 = v118;
      if (v60 == v120 && (_DWORD)v59 == (_DWORD)v118 && v25 <= a7)
      {
        v32 = v114;
        v28 = v115;
        v20 = v124;
        v37 = v123;
        goto LABEL_18;
      }
      v64 = (char *)v9[1];
      if (v122)
      {
        v65 = (unint64_t)v9[2];
        if ((unint64_t)v64 < v65)
        {
LABEL_81:
          *(_QWORD *)v64 = v120 | (unint64_t)(v118 << 32);
          *(_OWORD *)(v64 + 8) = v125;
          *((_QWORD *)v64 + 3) = v126;
          *((_QWORD *)v64 + 4) = v115;
          *((_QWORD *)v64 + 5) = v114;
          *((_QWORD *)v64 + 6) = v34;
          *((_QWORD *)v64 + 7) = v31;
          *((_QWORD *)v64 + 8) = v110;
          *((_QWORD *)v64 + 9) = v113;
          *((_QWORD *)v64 + 10) = v25;
          *((_QWORD *)v64 + 11) = v112;
          v64[96] = v122;
          *((_QWORD *)v64 + 13) = v111;
          v64[112] = v117;
          v66 = v64 + 120;
          v64[113] = 0;
LABEL_100:
          v36 = 0;
          v9[1] = v66;
          v35 = v105;
          goto LABEL_15;
        }
      }
      else
      {
        v98 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - (_BYTE *)*v9) >> 3);
        v65 = (unint64_t)v9[2];
        if ((unint64_t)v64 < v65)
          goto LABEL_81;
      }
      v104 = v22;
      v67 = (char *)*v9;
      v68 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - (_BYTE *)*v9) >> 3);
      v69 = v68 + 1;
      if (v68 + 1 > 0x222222222222222)
        sub_1000D02C0();
      v70 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v65 - (_QWORD)v67) >> 3);
      if (2 * v70 > v69)
        v69 = 2 * v70;
      if (v70 >= 0x111111111111111)
        v69 = 0x222222222222222;
      v102 = v59;
      v103 = v61;
      v101 = v60;
      v100 = v69;
      if (v69)
      {
        if (v69 > 0x222222222222222)
          goto LABEL_129;
        v71 = (char *)operator new(120 * v69);
        v24 = v120;
        v23 = v118;
      }
      else
      {
        v71 = 0;
      }
      v72 = &v71[120 * v68];
      *(_QWORD *)v72 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v72 + 8) = v125;
      *((_QWORD *)v72 + 3) = v126;
      *((_QWORD *)v72 + 4) = v115;
      *((_QWORD *)v72 + 5) = v114;
      *((_QWORD *)v72 + 6) = v34;
      *((_QWORD *)v72 + 7) = v31;
      *((_QWORD *)v72 + 8) = v110;
      *((_QWORD *)v72 + 9) = v113;
      *((_QWORD *)v72 + 10) = v25;
      *((_QWORD *)v72 + 11) = v112;
      v72[96] = v122;
      *((_QWORD *)v72 + 13) = v111;
      v72[112] = v117;
      v72[113] = 0;
      v73 = v72;
      if (v64 == v67)
      {
        v9 = v99;
      }
      else
      {
        v9 = v99;
        do
        {
          v74 = *(_OWORD *)(v64 - 120);
          v75 = *(_OWORD *)(v64 - 104);
          v76 = *(_OWORD *)(v64 - 88);
          *(_OWORD *)(v73 - 72) = *(_OWORD *)(v64 - 72);
          *(_OWORD *)(v73 - 88) = v76;
          *(_OWORD *)(v73 - 104) = v75;
          *(_OWORD *)(v73 - 120) = v74;
          v77 = *(_OWORD *)(v64 - 56);
          v78 = *(_OWORD *)(v64 - 40);
          v79 = *(_OWORD *)(v64 - 24);
          *((_WORD *)v73 - 4) = *((_WORD *)v64 - 4);
          *(_OWORD *)(v73 - 24) = v79;
          *(_OWORD *)(v73 - 40) = v78;
          *(_OWORD *)(v73 - 56) = v77;
          v73 -= 120;
          v64 -= 120;
        }
        while (v64 != v67);
        v64 = (char *)*v99;
      }
      v66 = v72 + 120;
      *v9 = v73;
      v9[1] = v72 + 120;
      v9[2] = &v71[120 * v100];
      v22 = v104;
      if (v64)
        operator delete(v64);
      v59 = v102;
      v61 = v103;
      v60 = v101;
      goto LABEL_100;
    }
    v36 = v117;
LABEL_15:
    v25 = 0;
    v125 = *a6;
    if (!(v61 & 1 | ((v116 & 1) == 0)))
      v36 = 1;
    v116 &= v61;
    v117 = v36;
    v34 = v28;
    v31 = v32;
    v37 = v123;
    v126 = *((_QWORD *)a6 + 2);
    v122 = v61;
    v111 = v123;
    v112 = v107;
    v110 = v22;
    v24 = v60;
    v23 = v59;
    v20 = v124;
LABEL_18:
    if (v28 >= v52)
      v38 = v52;
    else
      v38 = v28;
    if (v34 <= v52)
      v34 = v52;
    if (v32 >= v46)
      v39 = v46;
    else
      v39 = v32;
    v114 = v39;
    v115 = v38;
    if (v31 <= v46)
      v31 = v46;
    ++v22;
    ++v25;
    v21 = v37 + (v61 ^ 1u);
    v19 = v20 + 2;
    v33 = v22;
    v32 = v46;
    v28 = v52;
  }
  while (v20 + 2 != v109);
  v80 = v22;
  v81 = v9[1];
  if (v25)
  {
    v12 = v98;
    if (v122)
    {
      v82 = (unint64_t)v9[2];
      if ((unint64_t)v81 < v82)
        goto LABEL_104;
LABEL_108:
      v84 = *v9;
      v85 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (_BYTE *)*v9) >> 3);
      v86 = v85 + 1;
      if (v85 + 1 > 0x222222222222222)
        sub_1000D02C0();
      v87 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v82 - (_QWORD)v84) >> 3);
      if (2 * v87 > v86)
        v86 = 2 * v87;
      if (v87 >= 0x111111111111111)
        v88 = 0x222222222222222;
      else
        v88 = v86;
      if (v88)
      {
        v119 = v23;
        v121 = v24;
        if (v88 > 0x222222222222222)
LABEL_129:
          sub_1000CDEB8();
        v89 = (char *)operator new(120 * v88);
        v24 = v121;
        v23 = v119;
      }
      else
      {
        v89 = 0;
      }
      v90 = &v89[120 * v85];
      *(_QWORD *)v90 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v90 + 8) = v125;
      *((_QWORD *)v90 + 3) = v126;
      *((_QWORD *)v90 + 4) = v115;
      *((_QWORD *)v90 + 5) = v114;
      *((_QWORD *)v90 + 6) = v34;
      *((_QWORD *)v90 + 7) = v31;
      *((_QWORD *)v90 + 8) = v110;
      *((_QWORD *)v90 + 9) = v80;
      *((_QWORD *)v90 + 10) = v25;
      *((_QWORD *)v90 + 11) = v112;
      v90[96] = v122;
      *((_QWORD *)v90 + 13) = v111;
      v90[112] = v117;
      v83 = v90 + 120;
      v90[113] = 0;
      if (v81 != v84)
      {
        do
        {
          v91 = *(_OWORD *)(v81 - 15);
          v92 = *(_OWORD *)(v81 - 13);
          v93 = *(_OWORD *)(v81 - 11);
          *(_OWORD *)(v90 - 72) = *(_OWORD *)(v81 - 9);
          *(_OWORD *)(v90 - 88) = v93;
          *(_OWORD *)(v90 - 104) = v92;
          *(_OWORD *)(v90 - 120) = v91;
          v94 = *(_OWORD *)(v81 - 7);
          v95 = *(_OWORD *)(v81 - 5);
          v96 = *(_OWORD *)(v81 - 3);
          *((_WORD *)v90 - 4) = *((_WORD *)v81 - 4);
          *(_OWORD *)(v90 - 24) = v96;
          *(_OWORD *)(v90 - 40) = v95;
          *(_OWORD *)(v90 - 56) = v94;
          v90 -= 120;
          v81 -= 15;
        }
        while (v81 != v84);
        v81 = *v9;
      }
      *v9 = v90;
      v9[1] = v83;
      v9[2] = &v89[120 * v88];
      if (v81)
        operator delete(v81);
    }
    else
    {
      v12 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (_BYTE *)*v9) >> 3);
      v82 = (unint64_t)v9[2];
      if ((unint64_t)v81 >= v82)
        goto LABEL_108;
LABEL_104:
      *v81 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v81 + 1) = v125;
      v81[3] = v126;
      v81[4] = v38;
      v81[5] = v114;
      v81[6] = v34;
      v81[7] = v31;
      v81[8] = v110;
      v81[9] = v80;
      v81[10] = v25;
      v81[11] = v112;
      *((_BYTE *)v81 + 96) = v122;
      v81[13] = v111;
      *((_BYTE *)v81 + 112) = v117;
      v83 = v81 + 15;
      *((_BYTE *)v81 + 113) = 0;
    }
    v9[1] = v83;
    v81 = v83;
  }
  else
  {
    v12 = v98;
  }
LABEL_124:
  v97 = *v9;
  if (v12 < 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (_BYTE *)*v9) >> 3) && !v97[120 * v12 + 96])
    v97[120 * v12 + 113] = 1;
}

uint64_t sub_100288D08(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v23[2];
  void *__p;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char v30;

  v12 = *a1;
  v11 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v11 - *a1) >> 3) <= a8 || 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3) <= a8)
  {
    if (v12 != v11)
    {
      v19 = a2[1];
      if (*a2 != v19)
      {
        do
        {
          v20 = *a2;
          if (*a2 != v19)
          {
            while (1)
            {
              if (*(_QWORD *)(v12 + 48) >= *(_QWORD *)(v20 + 32)
                && *(_QWORD *)(v12 + 32) <= *(_QWORD *)(v20 + 48)
                && *(_QWORD *)(v12 + 56) >= *(_QWORD *)(v20 + 40)
                && *(_QWORD *)(v12 + 40) <= *(_QWORD *)(v20 + 56))
              {
                if (!sub_10028B39C(*(_DWORD *)a3, *(double ***)(a3 + 8), (int *)v12, *(_DWORD *)(a3 + 16), *(_QWORD **)(a3 + 24), (int *)v20, 0, 0, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_QWORD **)(a3 + 48)))return 0;
                v19 = a2[1];
              }
              v20 += 120;
              if (v20 == v19)
              {
                v11 = a1[1];
                break;
              }
            }
          }
          v12 += 120;
        }
        while (v12 != v11);
      }
    }
    return 1;
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    __p = 0;
    v25 = 0;
    v26 = 0;
    v23[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0x8000000000000000);
    sub_100288F48(a1, (uint64_t *)v23, (char **)&v27);
    sub_100288F48(a2, (uint64_t *)v23, (char **)&__p);
    v18 = sub_1002891DC(v23, &v27, &__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v30);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
  }
  return v18;
}

void sub_100288F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v23 = a21;
    if (!a21)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v23 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_100288F48(_QWORD *a1, uint64_t *a2, char **a3)
{
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  for (i = (_QWORD *)*a1; i != (_QWORD *)a1[1]; i += 15)
  {
    v8 = i[4];
    v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      v9 = v8;
      v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        v11 = i[5];
        v12 = a2[1];
        if (v11 >= v12)
          goto LABEL_8;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = a2[2];
      if (v8 <= v10)
        goto LABEL_7;
    }
    a2[2] = v8;
    v10 = v8;
    v11 = i[5];
    v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      v13 = a2[3];
      if (v11 <= v13)
        goto LABEL_9;
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    v12 = v11;
    v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      v14 = i[6];
      if (v14 >= v9)
        goto LABEL_10;
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    v13 = v11;
    v14 = i[6];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10)
        goto LABEL_11;
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      v15 = i[7];
      if (v15 >= v12)
        goto LABEL_12;
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    v15 = i[7];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13)
        goto LABEL_13;
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      v17 = a3[1];
      v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16)
        goto LABEL_23;
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    v17 = a3[1];
    v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      v18 = *a3;
      v19 = v17 - *a3;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        sub_1000D02C0();
      v22 = v16 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_1000CDEB8();
        v24 = operator new(8 * v23);
        v25 = &v24[8 * v20];
        *(_QWORD *)v25 = i;
        v7 = (uint64_t)(v25 + 8);
        if (v17 == v18)
          goto LABEL_41;
LABEL_34:
        v26 = v17 - 8 - v18;
        if (v26 < 0x58)
          goto LABEL_48;
        if ((unint64_t)(v17 - &v24[v19]) < 0x20)
          goto LABEL_48;
        v27 = (v26 >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v17[-v28];
        v25 -= v28;
        v30 = &v24[8 * v20 - 16];
        v31 = v17 - 16;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        v17 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v34 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v25 - 1) = v34;
            v25 -= 8;
          }
          while (v17 != v18);
        }
        v17 = *a3;
      }
      else
      {
        v24 = 0;
        v25 = (char *)(8 * v20);
        *(_QWORD *)(8 * v20) = i;
        v7 = 8 * v20 + 8;
        if (v17 != v18)
          goto LABEL_34;
      }
LABEL_41:
      *a3 = v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17)
        operator delete(v17);
      goto LABEL_4;
    }
LABEL_3:
    *(_QWORD *)v17 = i;
    v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_1002891DC(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  char *v87;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int64x2_t v110;
  int64x2_t v111;
  void *__p;
  char *v113;
  uint64_t v114;
  void *v115;
  char *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  __int128 v130[2];
  __int128 v131;
  __int128 v132;

  v17 = *a1;
  v18 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v131 = *(_OWORD *)a1;
  v132 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  *((_QWORD *)&v130[0] + 1) = *((_QWORD *)&v22 + 1);
  v130[1] = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v132 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  *(_QWORD *)&v130[0] = v132;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  __p = 0;
  v113 = 0;
  v114 = 0;
  sub_100289FEC(&v131, v130, a2, &v127, (char **)&v124, (char **)&v121);
  sub_100289FEC(&v131, v130, a3, &v118, (char **)&v115, (char **)&__p);
  v27 = (char *)v121;
  v26 = v122;
  if (v121 == v122)
    goto LABEL_129;
  v29 = (char *)__p;
  v28 = v113;
  if (a5 > (v122 - (_BYTE *)v121) >> 3 || a4 > 0x63 || (v113 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v113)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48)
              && *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40)
              && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56))
            {
              if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v45, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v46, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
              v28 = v113;
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v122;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v111 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v111.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v110.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v111.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v110.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v111.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v110.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v111.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v122);
  while (v29 != v113)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v111.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v110.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v111.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v110.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v111.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v110.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v111.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_10028A58C((__int128 *)v110.i8, &v121, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_236;
LABEL_66:
  v48 = v119;
  if (a5 > (v119 - (_BYTE *)v118) >> 3)
  {
    v50 = (char *)v121;
    v49 = v122;
    goto LABEL_69;
  }
  v50 = (char *)v121;
  v49 = v122;
  if (a5 <= (v116 - (_BYTE *)v115) >> 3 && a4 <= 0x63 && (v122 - (_BYTE *)v121) >> 3 >= a5)
  {
    v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v111 = vdupq_n_s64(0x8000000000000000);
    if (v121 != v122)
    {
      v60 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = 0x8000000000000000;
      v62 = 0x8000000000000000;
      v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v64 = *(_QWORD **)v50;
        v65 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            v66 = v64[5];
            if (v66 < v60)
              goto LABEL_111;
            goto LABEL_119;
          }
        }
        else
        {
          v110.i64[0] = *(_QWORD *)(*(_QWORD *)v50 + 32);
          v63 = v65;
          if (v65 <= v62)
            goto LABEL_110;
        }
        v111.i64[0] = v65;
        v62 = v65;
        v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v110.i64[1] = v66;
          v60 = v66;
          if (v66 <= v61)
            goto LABEL_112;
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          v67 = v64[6];
          if (v67 < v63)
            goto LABEL_113;
          goto LABEL_121;
        }
LABEL_120:
        v111.i64[1] = v66;
        v61 = v66;
        v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v110.i64[0] = v67;
          v63 = v67;
          if (v67 <= v62)
            goto LABEL_114;
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          v68 = v64[7];
          if (v68 < v60)
            goto LABEL_115;
          goto LABEL_123;
        }
LABEL_122:
        v111.i64[0] = v67;
        v62 = v67;
        v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v110.i64[1] = v68;
          v60 = v68;
          if (v68 > v61)
            goto LABEL_124;
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v111.i64[1] = v68;
          v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v122);
    }
    if (sub_10028A58C((__int128 *)v110.i8, &v121, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_10028A58C((__int128 *)v110.i8, &v121, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_129;
    }
LABEL_236:
    v103 = 0;
    v104 = (char *)__p;
    if (!__p)
      goto LABEL_238;
LABEL_237:
    v113 = v104;
    operator delete(v104);
    goto LABEL_238;
  }
LABEL_69:
  if (v118 == v119 || v50 == v49)
  {
    if (v50 == v49)
      goto LABEL_129;
  }
  else
  {
    do
    {
      v52 = (char *)v118;
      if (v118 != v48)
      {
        do
        {
          v53 = *(_QWORD *)v50;
          v54 = *(_QWORD *)v52;
          if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32)
            && *(_QWORD *)(v53 + 32) <= *(_QWORD *)(v54 + 48)
            && *(_QWORD *)(v53 + 56) >= *(_QWORD *)(v54 + 40)
            && *(_QWORD *)(v53 + 40) <= *(_QWORD *)(v54 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v53, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v54, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v48 = v119;
          }
          v52 += 8;
        }
        while (v52 != v48);
        v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
    v50 = (char *)v121;
    if (v121 == v49)
      goto LABEL_129;
  }
  v51 = v116;
  if (v115 != v116)
  {
    do
    {
      v56 = (char *)v115;
      if (v115 != v51)
      {
        do
        {
          v57 = *(_QWORD *)v50;
          v58 = *(_QWORD *)v56;
          if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
            && *(_QWORD *)(v57 + 32) <= *(_QWORD *)(v58 + 48)
            && *(_QWORD *)(v57 + 56) >= *(_QWORD *)(v58 + 40)
            && *(_QWORD *)(v57 + 40) <= *(_QWORD *)(v58 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v57, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v58, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v51 = v116;
          }
          v56 += 8;
        }
        while (v56 != v51);
        v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
  }
LABEL_129:
  v70 = (char *)__p;
  v69 = v113;
  if (__p == v113)
    goto LABEL_174;
  v72 = (char *)v127;
  v71 = v128;
  if (a5 > (v128 - (_BYTE *)v127) >> 3
    || a5 > (v125 - (_BYTE *)v124) >> 3
    || a4 > 0x63
    || (v113 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v72 != v71)
    {
      v82 = (char *)__p;
      if (__p != v69)
      {
        do
        {
          v83 = *(_QWORD *)v72;
          v84 = *(_QWORD *)v82;
          if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v82 + 32)
            && *(_QWORD *)(v83 + 32) <= *(_QWORD *)(v84 + 48)
            && *(_QWORD *)(v83 + 56) >= *(_QWORD *)(v84 + 40)
            && *(_QWORD *)(v83 + 40) <= *(_QWORD *)(v84 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v83, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v84, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v69 = v113;
          }
          v82 += 8;
        }
        while (v82 != v69);
        v71 = v128;
      }
      v72 += 8;
    }
    v87 = (char *)v124;
    v86 = v125;
    if (v124 != v125 && __p != v69)
    {
      do
      {
        v91 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            v92 = *(_QWORD *)v87;
            v93 = *(_QWORD *)v91;
            if (*(_QWORD *)(*(_QWORD *)v87 + 48) >= *(_QWORD *)(*(_QWORD *)v91 + 32)
              && *(_QWORD *)(v92 + 32) <= *(_QWORD *)(v93 + 48)
              && *(_QWORD *)(v92 + 56) >= *(_QWORD *)(v93 + 40)
              && *(_QWORD *)(v92 + 40) <= *(_QWORD *)(v93 + 56))
            {
              if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v92, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v93, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
              v69 = v113;
            }
            v91 += 8;
          }
          while (v91 != v69);
          v86 = v125;
        }
        v87 += 8;
      }
      while (v87 != v86);
    }
    goto LABEL_174;
  }
  v73 = 0x7FFFFFFFFFFFFFFFLL;
  v74 = 0x8000000000000000;
  v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v111 = vdupq_n_s64(0x8000000000000000);
  v75 = 0x8000000000000000;
  v76 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v77 = *(_QWORD **)v70;
    v78 = *(_QWORD *)(*(_QWORD *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 > v75)
        goto LABEL_146;
LABEL_138:
      v79 = v77[5];
      if (v79 < v73)
        goto LABEL_139;
LABEL_147:
      if (v79 > v74)
        goto LABEL_148;
LABEL_140:
      v80 = v77[6];
      if (v80 < v76)
        goto LABEL_141;
LABEL_149:
      if (v80 > v75)
        goto LABEL_150;
LABEL_142:
      v81 = v77[7];
      if (v81 < v73)
        goto LABEL_143;
LABEL_151:
      if (v81 > v74)
      {
LABEL_152:
        v111.i64[1] = v81;
        v74 = v81;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v70 + 32);
      v76 = v78;
      if (v78 <= v75)
        goto LABEL_138;
LABEL_146:
      v111.i64[0] = v78;
      v75 = v78;
      v79 = v77[5];
      if (v79 >= v73)
        goto LABEL_147;
LABEL_139:
      v110.i64[1] = v79;
      v73 = v79;
      if (v79 <= v74)
        goto LABEL_140;
LABEL_148:
      v111.i64[1] = v79;
      v74 = v79;
      v80 = v77[6];
      if (v80 >= v76)
        goto LABEL_149;
LABEL_141:
      v110.i64[0] = v80;
      v76 = v80;
      if (v80 <= v75)
        goto LABEL_142;
LABEL_150:
      v111.i64[0] = v80;
      v75 = v80;
      v81 = v77[7];
      if (v81 >= v73)
        goto LABEL_151;
LABEL_143:
      v110.i64[1] = v81;
      v73 = v81;
      if (v81 > v74)
        goto LABEL_152;
    }
    v70 += 8;
    if (v70 != v113)
      continue;
    break;
  }
  if (!sub_10028A58C((__int128 *)v110.i8, &v127, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_10028A58C((__int128 *)v110.i8, &v124, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
LABEL_174:
  v90 = (char *)v127;
  v89 = v128;
  if (a5 > (v128 - (_BYTE *)v127) >> 3 || a4 > 0x63 || (v119 - (_BYTE *)v118) >> 3 < a5)
  {
    if (v127 != v128)
    {
      v95 = v119;
      if (v118 != v119)
      {
        do
        {
          v98 = (char *)v118;
          if (v118 != v95)
          {
            do
            {
              v99 = *(_QWORD *)v90;
              v100 = *(_QWORD *)v98;
              if (*(_QWORD *)(*(_QWORD *)v90 + 48) >= *(_QWORD *)(*(_QWORD *)v98 + 32)
                && *(_QWORD *)(v99 + 32) <= *(_QWORD *)(v100 + 48)
                && *(_QWORD *)(v99 + 56) >= *(_QWORD *)(v100 + 40)
                && *(_QWORD *)(v99 + 40) <= *(_QWORD *)(v100 + 56))
              {
                if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v99, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v100, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
                v95 = v119;
              }
              v98 += 8;
            }
            while (v98 != v95);
            v89 = v128;
          }
          v90 += 8;
        }
        while (v90 != v89);
      }
    }
  }
  else if ((sub_10028A58C(&v131, &v127, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  v97 = (char *)v124;
  v96 = v125;
  if (a5 > (v125 - (_BYTE *)v124) >> 3 || a4 > 0x63 || (v116 - (_BYTE *)v115) >> 3 < a5)
  {
    if (v124 != v125)
    {
      v102 = v116;
      if (v115 != v116)
      {
        do
        {
          v105 = (char *)v115;
          if (v115 != v102)
          {
            do
            {
              v106 = *(_QWORD *)v97;
              v107 = *(_QWORD *)v105;
              if (*(_QWORD *)(*(_QWORD *)v97 + 48) >= *(_QWORD *)(*(_QWORD *)v105 + 32)
                && *(_QWORD *)(v106 + 32) <= *(_QWORD *)(v107 + 48)
                && *(_QWORD *)(v106 + 56) >= *(_QWORD *)(v107 + 40)
                && *(_QWORD *)(v106 + 40) <= *(_QWORD *)(v107 + 56))
              {
                if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v106, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v107, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
                v102 = v116;
              }
              v105 += 8;
            }
            while (v105 != v102);
            v96 = v125;
          }
          v97 += 8;
        }
        while (v97 != v96);
      }
    }
  }
  else if ((sub_10028A58C(v130, &v124, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  v103 = 1;
  v104 = (char *)__p;
  if (__p)
    goto LABEL_237;
LABEL_238:
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = (char *)v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = (char *)v127;
    operator delete(v127);
  }
  return v103;
}

void sub_100289F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100289FEC(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4, char **a5, char **a6)
{
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  _BOOL4 v13;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v30;
  unint64_t v31;
  char *v32;
  char **v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  char *v70;
  unint64_t v71;
  char **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v83;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v6 = *a3;
  if (*a3 != a3[1])
  {
    v8 = a4;
    v9 = a3;
    v83 = result;
    do
    {
      v11 = *(_QWORD **)v6;
      v12 = *(_QWORD *)(*(_QWORD *)v6 + 32);
      if (result[2] >= v12 && *result <= v11[6])
      {
        v13 = result[3] >= v11[5] && result[1] <= v11[7];
        if (a2[2] < v12)
        {
LABEL_17:
          if (!v13)
            goto LABEL_4;
          goto LABEL_18;
        }
      }
      else
      {
        v13 = 0;
        if (a2[2] < v12)
          goto LABEL_17;
      }
      if (*a2 > v11[6])
        goto LABEL_17;
      v30 = a2[3] < v11[5] || a2[1] > v11[7];
      if (v13 && !v30)
      {
        v32 = a6[1];
        v31 = (unint64_t)a6[2];
        if ((unint64_t)v32 >= v31)
        {
          v46 = *a6;
          v47 = v32 - *a6;
          v48 = v47 >> 3;
          v49 = (v47 >> 3) + 1;
          if (v49 >> 61)
            sub_1000D02C0();
          v50 = v31 - (_QWORD)v46;
          if (v50 >> 2 > v49)
            v49 = v50 >> 2;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          v86 = v49;
          if (v49)
          {
            if (v49 >> 61)
              goto LABEL_99;
            v51 = operator new(8 * v49);
            v52 = &v51[8 * v48];
            *(_QWORD *)v52 = v11;
            v53 = (uint64_t)(v52 + 8);
            if (v32 != v46)
            {
LABEL_62:
              v54 = v32 - 8 - v46;
              if (v54 < 0x58)
              {
                v8 = a4;
                goto LABEL_71;
              }
              v55 = v32 - &v51[v47];
              v8 = a4;
              if (v55 < 0x20)
                goto LABEL_104;
              v56 = (v54 >> 3) + 1;
              v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              v58 = &v32[-v57];
              v52 -= v57;
              v59 = &v51[8 * v48 - 16];
              v60 = v32 - 16;
              v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v62 = *(_OWORD *)v60;
                *(v59 - 1) = *((_OWORD *)v60 - 1);
                *v59 = v62;
                v59 -= 2;
                v60 -= 32;
                v61 -= 4;
              }
              while (v61);
              v32 = v58;
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_104:
                do
                {
LABEL_71:
                  v63 = *((_QWORD *)v32 - 1);
                  v32 -= 8;
                  *((_QWORD *)v52 - 1) = v63;
                  v52 -= 8;
                }
                while (v32 != v46);
              }
              v32 = *a6;
              *a6 = v52;
              a6[1] = (char *)v53;
              a6[2] = &v51[8 * v86];
              if (v32)
LABEL_73:
                operator delete(v32);
LABEL_74:
              result = v83;
              a6[1] = (char *)v53;
              goto LABEL_4;
            }
          }
          else
          {
            v51 = 0;
            v52 = (char *)(8 * v48);
            *(_QWORD *)(8 * v48) = v11;
            v53 = 8 * v48 + 8;
            if (v32 != v46)
              goto LABEL_62;
          }
          v8 = a4;
          *a6 = v52;
          a6[1] = (char *)v53;
          a6[2] = &v51[8 * v86];
          if (v32)
            goto LABEL_73;
          goto LABEL_74;
        }
        *(_QWORD *)v32 = v11;
        a6[1] = v32 + 8;
        goto LABEL_4;
      }
      if (!v13)
      {
        if (!v30)
        {
          v33 = a5;
          v35 = a5[1];
          v34 = (unint64_t)a5[2];
          if ((unint64_t)v35 < v34)
          {
            *(_QWORD *)v35 = v11;
            v36 = (uint64_t)(v35 + 8);
LABEL_96:
            v33[1] = (char *)v36;
            goto LABEL_4;
          }
          v64 = *a5;
          v65 = v35 - *a5;
          v66 = v65 >> 3;
          v67 = (v65 >> 3) + 1;
          if (v67 >> 61)
            sub_1000D02C0();
          v68 = v34 - (_QWORD)v64;
          if (v68 >> 2 > v67)
            v67 = v68 >> 2;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          v87 = v67;
          if (v67)
          {
            if (v67 >> 61)
LABEL_99:
              sub_1000CDEB8();
            v69 = operator new(8 * v67);
            v70 = &v69[8 * v66];
            *(_QWORD *)v70 = v11;
            v36 = (uint64_t)(v70 + 8);
            if (v35 != v64)
            {
LABEL_83:
              v71 = v35 - 8 - v64;
              if (v71 < 0x58)
              {
                v8 = a4;
                goto LABEL_92;
              }
              v73 = v35 - &v69[v65];
              v8 = a4;
              if (v73 < 0x20)
                goto LABEL_105;
              v74 = (v71 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v76 = &v35[-v75];
              v70 -= v75;
              v77 = &v69[8 * v66 - 16];
              v78 = v35 - 16;
              v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *(_OWORD *)v78;
                *(v77 - 1) = *((_OWORD *)v78 - 1);
                *v77 = v80;
                v77 -= 2;
                v78 -= 32;
                v79 -= 4;
              }
              while (v79);
              v35 = v76;
              if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_105:
                do
                {
LABEL_92:
                  v81 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *((_QWORD *)v70 - 1) = v81;
                  v70 -= 8;
                }
                while (v35 != v64);
              }
              v72 = a5;
              v35 = *a5;
              *a5 = v70;
              a5[1] = (char *)v36;
              a5[2] = &v69[8 * v87];
              if (v35)
              {
LABEL_94:
                operator delete(v35);
                v33 = a5;
                goto LABEL_95;
              }
LABEL_87:
              v33 = v72;
LABEL_95:
              result = v83;
              goto LABEL_96;
            }
          }
          else
          {
            v69 = 0;
            v70 = (char *)(8 * v66);
            *(_QWORD *)(8 * v66) = v11;
            v36 = 8 * v66 + 8;
            if (v35 != v64)
              goto LABEL_83;
          }
          v72 = a5;
          v8 = a4;
          *a5 = v70;
          a5[1] = (char *)v36;
          a5[2] = &v69[8 * v87];
          if (v35)
            goto LABEL_94;
          goto LABEL_87;
        }
        goto LABEL_4;
      }
LABEL_18:
      v16 = (char *)v8[1];
      v15 = v8[2];
      if ((unint64_t)v16 >= v15)
      {
        v17 = a2;
        v18 = v9;
        v19 = a6;
        v20 = (char *)*v8;
        v21 = (uint64_t)&v16[-*v8];
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          sub_1000D02C0();
        v24 = v15 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        v85 = v23;
        if (v23)
        {
          if (v23 >> 61)
            goto LABEL_99;
          v25 = operator new(8 * v23);
          v26 = &v25[8 * v22];
          *v26 = v11;
          v27 = (uint64_t)(v26 + 1);
          if (v16 != v20)
          {
LABEL_27:
            v28 = v16 - 8 - v20;
            if (v28 < 0x58)
            {
              a6 = v19;
              v9 = v18;
              a2 = v17;
              goto LABEL_50;
            }
            v37 = v16 - &v25[v21];
            a6 = v19;
            v9 = v18;
            a2 = v17;
            if (v37 < 0x20)
              goto LABEL_106;
            v38 = (v28 >> 3) + 1;
            v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v16[-v39];
            v26 = (_QWORD *)((char *)v26 - v39);
            v41 = &v25[8 * v22 - 16];
            v42 = v16 - 16;
            v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 32;
              v43 -= 4;
            }
            while (v43);
            v16 = v40;
            if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_106:
              do
              {
LABEL_50:
                v45 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v26 = v45;
              }
              while (v16 != v20);
            }
            v8 = a4;
            v16 = (char *)*a4;
            *a4 = v26;
            a4[1] = v27;
            a4[2] = &v25[8 * v85];
            if (v16)
LABEL_52:
              operator delete(v16);
LABEL_53:
            result = v83;
            v8[1] = v27;
            goto LABEL_4;
          }
        }
        else
        {
          v25 = 0;
          v26 = (_QWORD *)(8 * v22);
          *(_QWORD *)(8 * v22) = v11;
          v27 = 8 * v22 + 8;
          if (v16 != v20)
            goto LABEL_27;
        }
        a6 = v19;
        v9 = v18;
        v8 = a4;
        a2 = v17;
        *a4 = v26;
        a4[1] = v27;
        a4[2] = &v25[8 * v85];
        if (v16)
          goto LABEL_52;
        goto LABEL_53;
      }
      *(_QWORD *)v16 = v11;
      v8[1] = v16 + 8;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v9[1]);
  }
  return result;
}

uint64_t sub_10028A58C(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  char *v87;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  int64x2_t v110;
  int64x2_t v111;
  void *__p;
  char *v113;
  uint64_t v114;
  void *v115;
  char *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  _QWORD v130[2];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v131 = a1[1];
  v132 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v130[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v133 = v18;
  v134 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v130[1] = v134;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  __p = 0;
  v113 = 0;
  v114 = 0;
  sub_100289FEC(&v132, v130, a2, &v127, (char **)&v124, (char **)&v121);
  sub_100289FEC(&v132, v130, a3, &v118, (char **)&v115, (char **)&__p);
  v27 = (char *)v121;
  v26 = v122;
  if (v121 == v122)
    goto LABEL_129;
  v29 = (char *)__p;
  v28 = v113;
  if (a5 > (v122 - (_BYTE *)v121) >> 3 || a4 > 0x63 || (v113 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v113)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48)
              && *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40)
              && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56))
            {
              if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v45, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v46, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
              v28 = v113;
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v122;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v111 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v111.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v110.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v111.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v110.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v111.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v110.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v111.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v122);
  while (v29 != v113)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v111.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v110.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v111.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v110.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v111.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v110.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v111.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002891DC(&v110, &v121, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_236;
LABEL_66:
  v48 = v119;
  if (a5 > (v119 - (_BYTE *)v118) >> 3)
  {
    v50 = (char *)v121;
    v49 = v122;
    goto LABEL_69;
  }
  v50 = (char *)v121;
  v49 = v122;
  if (a5 <= (v116 - (_BYTE *)v115) >> 3 && a4 <= 0x63 && (v122 - (_BYTE *)v121) >> 3 >= a5)
  {
    v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v111 = vdupq_n_s64(0x8000000000000000);
    if (v121 != v122)
    {
      v60 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = 0x8000000000000000;
      v62 = 0x8000000000000000;
      v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v64 = *(_QWORD **)v50;
        v65 = *(_QWORD *)(*(_QWORD *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            v66 = v64[5];
            if (v66 < v60)
              goto LABEL_111;
            goto LABEL_119;
          }
        }
        else
        {
          v110.i64[0] = *(_QWORD *)(*(_QWORD *)v50 + 32);
          v63 = v65;
          if (v65 <= v62)
            goto LABEL_110;
        }
        v111.i64[0] = v65;
        v62 = v65;
        v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v110.i64[1] = v66;
          v60 = v66;
          if (v66 <= v61)
            goto LABEL_112;
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          v67 = v64[6];
          if (v67 < v63)
            goto LABEL_113;
          goto LABEL_121;
        }
LABEL_120:
        v111.i64[1] = v66;
        v61 = v66;
        v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v110.i64[0] = v67;
          v63 = v67;
          if (v67 <= v62)
            goto LABEL_114;
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          v68 = v64[7];
          if (v68 < v60)
            goto LABEL_115;
          goto LABEL_123;
        }
LABEL_122:
        v111.i64[0] = v67;
        v62 = v67;
        v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v110.i64[1] = v68;
          v60 = v68;
          if (v68 > v61)
            goto LABEL_124;
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v111.i64[1] = v68;
          v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v122);
    }
    if (sub_1002891DC(&v110, &v121, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002891DC(&v110, &v121, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_129;
    }
LABEL_236:
    v103 = 0;
    v104 = (char *)__p;
    if (!__p)
      goto LABEL_238;
LABEL_237:
    v113 = v104;
    operator delete(v104);
    goto LABEL_238;
  }
LABEL_69:
  if (v118 == v119 || v50 == v49)
  {
    if (v50 == v49)
      goto LABEL_129;
  }
  else
  {
    do
    {
      v52 = (char *)v118;
      if (v118 != v48)
      {
        do
        {
          v53 = *(_QWORD *)v50;
          v54 = *(_QWORD *)v52;
          if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v52 + 32)
            && *(_QWORD *)(v53 + 32) <= *(_QWORD *)(v54 + 48)
            && *(_QWORD *)(v53 + 56) >= *(_QWORD *)(v54 + 40)
            && *(_QWORD *)(v53 + 40) <= *(_QWORD *)(v54 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v53, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v54, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v48 = v119;
          }
          v52 += 8;
        }
        while (v52 != v48);
        v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
    v50 = (char *)v121;
    if (v121 == v49)
      goto LABEL_129;
  }
  v51 = v116;
  if (v115 != v116)
  {
    do
    {
      v56 = (char *)v115;
      if (v115 != v51)
      {
        do
        {
          v57 = *(_QWORD *)v50;
          v58 = *(_QWORD *)v56;
          if (*(_QWORD *)(*(_QWORD *)v50 + 48) >= *(_QWORD *)(*(_QWORD *)v56 + 32)
            && *(_QWORD *)(v57 + 32) <= *(_QWORD *)(v58 + 48)
            && *(_QWORD *)(v57 + 56) >= *(_QWORD *)(v58 + 40)
            && *(_QWORD *)(v57 + 40) <= *(_QWORD *)(v58 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v57, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v58, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v51 = v116;
          }
          v56 += 8;
        }
        while (v56 != v51);
        v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
  }
LABEL_129:
  v70 = (char *)__p;
  v69 = v113;
  if (__p == v113)
    goto LABEL_174;
  v72 = (char *)v127;
  v71 = v128;
  if (a5 > (v128 - (_BYTE *)v127) >> 3
    || a5 > (v125 - (_BYTE *)v124) >> 3
    || a4 > 0x63
    || (v113 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v72 != v71)
    {
      v82 = (char *)__p;
      if (__p != v69)
      {
        do
        {
          v83 = *(_QWORD *)v72;
          v84 = *(_QWORD *)v82;
          if (*(_QWORD *)(*(_QWORD *)v72 + 48) >= *(_QWORD *)(*(_QWORD *)v82 + 32)
            && *(_QWORD *)(v83 + 32) <= *(_QWORD *)(v84 + 48)
            && *(_QWORD *)(v83 + 56) >= *(_QWORD *)(v84 + 40)
            && *(_QWORD *)(v83 + 40) <= *(_QWORD *)(v84 + 56))
          {
            if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v83, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v84, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
            v69 = v113;
          }
          v82 += 8;
        }
        while (v82 != v69);
        v71 = v128;
      }
      v72 += 8;
    }
    v87 = (char *)v124;
    v86 = v125;
    if (v124 != v125 && __p != v69)
    {
      do
      {
        v91 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            v92 = *(_QWORD *)v87;
            v93 = *(_QWORD *)v91;
            if (*(_QWORD *)(*(_QWORD *)v87 + 48) >= *(_QWORD *)(*(_QWORD *)v91 + 32)
              && *(_QWORD *)(v92 + 32) <= *(_QWORD *)(v93 + 48)
              && *(_QWORD *)(v92 + 56) >= *(_QWORD *)(v93 + 40)
              && *(_QWORD *)(v92 + 40) <= *(_QWORD *)(v93 + 56))
            {
              if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v92, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v93, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
              v69 = v113;
            }
            v91 += 8;
          }
          while (v91 != v69);
          v86 = v125;
        }
        v87 += 8;
      }
      while (v87 != v86);
    }
    goto LABEL_174;
  }
  v73 = 0x7FFFFFFFFFFFFFFFLL;
  v74 = 0x8000000000000000;
  v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v111 = vdupq_n_s64(0x8000000000000000);
  v75 = 0x8000000000000000;
  v76 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v77 = *(_QWORD **)v70;
    v78 = *(_QWORD *)(*(_QWORD *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 > v75)
        goto LABEL_146;
LABEL_138:
      v79 = v77[5];
      if (v79 < v73)
        goto LABEL_139;
LABEL_147:
      if (v79 > v74)
        goto LABEL_148;
LABEL_140:
      v80 = v77[6];
      if (v80 < v76)
        goto LABEL_141;
LABEL_149:
      if (v80 > v75)
        goto LABEL_150;
LABEL_142:
      v81 = v77[7];
      if (v81 < v73)
        goto LABEL_143;
LABEL_151:
      if (v81 > v74)
      {
LABEL_152:
        v111.i64[1] = v81;
        v74 = v81;
      }
    }
    else
    {
      v110.i64[0] = *(_QWORD *)(*(_QWORD *)v70 + 32);
      v76 = v78;
      if (v78 <= v75)
        goto LABEL_138;
LABEL_146:
      v111.i64[0] = v78;
      v75 = v78;
      v79 = v77[5];
      if (v79 >= v73)
        goto LABEL_147;
LABEL_139:
      v110.i64[1] = v79;
      v73 = v79;
      if (v79 <= v74)
        goto LABEL_140;
LABEL_148:
      v111.i64[1] = v79;
      v74 = v79;
      v80 = v77[6];
      if (v80 >= v76)
        goto LABEL_149;
LABEL_141:
      v110.i64[0] = v80;
      v76 = v80;
      if (v80 <= v75)
        goto LABEL_142;
LABEL_150:
      v111.i64[0] = v80;
      v75 = v80;
      v81 = v77[7];
      if (v81 >= v73)
        goto LABEL_151;
LABEL_143:
      v110.i64[1] = v81;
      v73 = v81;
      if (v81 > v74)
        goto LABEL_152;
    }
    v70 += 8;
    if (v70 != v113)
      continue;
    break;
  }
  if (!sub_1002891DC(&v110, &v127, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002891DC(&v110, &v124, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
LABEL_174:
  v90 = (char *)v127;
  v89 = v128;
  if (a5 > (v128 - (_BYTE *)v127) >> 3 || a4 > 0x63 || (v119 - (_BYTE *)v118) >> 3 < a5)
  {
    if (v127 != v128)
    {
      v95 = v119;
      if (v118 != v119)
      {
        do
        {
          v98 = (char *)v118;
          if (v118 != v95)
          {
            do
            {
              v99 = *(_QWORD *)v90;
              v100 = *(_QWORD *)v98;
              if (*(_QWORD *)(*(_QWORD *)v90 + 48) >= *(_QWORD *)(*(_QWORD *)v98 + 32)
                && *(_QWORD *)(v99 + 32) <= *(_QWORD *)(v100 + 48)
                && *(_QWORD *)(v99 + 56) >= *(_QWORD *)(v100 + 40)
                && *(_QWORD *)(v99 + 40) <= *(_QWORD *)(v100 + 56))
              {
                if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v99, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v100, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
                v95 = v119;
              }
              v98 += 8;
            }
            while (v98 != v95);
            v89 = v128;
          }
          v90 += 8;
        }
        while (v90 != v89);
      }
    }
  }
  else if ((sub_1002891DC(&v132, &v127, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  v97 = (char *)v124;
  v96 = v125;
  if (a5 > (v125 - (_BYTE *)v124) >> 3 || a4 > 0x63 || (v116 - (_BYTE *)v115) >> 3 < a5)
  {
    if (v124 != v125)
    {
      v102 = v116;
      if (v115 != v116)
      {
        do
        {
          v105 = (char *)v115;
          if (v115 != v102)
          {
            do
            {
              v106 = *(_QWORD *)v97;
              v107 = *(_QWORD *)v105;
              if (*(_QWORD *)(*(_QWORD *)v97 + 48) >= *(_QWORD *)(*(_QWORD *)v105 + 32)
                && *(_QWORD *)(v106 + 32) <= *(_QWORD *)(v107 + 48)
                && *(_QWORD *)(v106 + 56) >= *(_QWORD *)(v107 + 40)
                && *(_QWORD *)(v106 + 40) <= *(_QWORD *)(v107 + 56))
              {
                if (!sub_10028B39C(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v106, *(_DWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), (int *)v107, 0, 0, *(_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 40), *(_QWORD **)(a6 + 48)))goto LABEL_236;
                v102 = v116;
              }
              v105 += 8;
            }
            while (v105 != v102);
            v96 = v125;
          }
          v97 += 8;
        }
        while (v97 != v96);
      }
    }
  }
  else if ((sub_1002891DC(v130, &v124, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  v103 = 1;
  v104 = (char *)__p;
  if (__p)
    goto LABEL_237;
LABEL_238:
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = (char *)v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = (char *)v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = (char *)v127;
    operator delete(v127);
  }
  return v103;
}

void sub_10028B2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028B39C(int a1, double **a2, int *a3, int a4, _QWORD *a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  double **v12;
  double *v13;
  uint64_t v14;
  double **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  int v26;
  double *v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double *v39;
  double *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double v81;
  double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  std::bad_cast *exception;
  std::bad_cast *v105;
  std::bad_cast *v106;
  std::bad_cast *v107;
  double *v108;
  int v109;
  double *v110;
  uint64_t v113;
  double *v114;
  double *v115;
  double *v116;
  double *v117;
  double *v118;
  int v119;
  double *v122;
  double *v123;
  uint64_t v126;
  double *v127;
  char v128[16];
  int v129;
  char v130;
  uint64_t v131;
  __int16 v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  __int16 v174;
  _QWORD v175[7];
  char v176;
  char v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _QWORD v181[7];
  char v182;
  char v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  if ((!*((_BYTE *)a3 + 96) || (unint64_t)(*((_QWORD *)a3 + 10) + 1) >= *((_QWORD *)a3 + 11))
    && (!*((_BYTE *)a6 + 96) || (unint64_t)(*((_QWORD *)a6 + 10) + 1) >= *((_QWORD *)a6 + 11)))
  {
    v11 = *((_QWORD *)a3 + 3);
    if (v11 >= 0)
      v12 = (double **)&a2[3][3 * v11];
    else
      v12 = a2;
    v13 = *v12;
    v114 = v12[1];
    v115 = *v12;
    v14 = *((_QWORD *)a6 + 3);
    v15 = (double **)(*a5 + 48 * *((_QWORD *)a6 + 2));
    if (v14 >= 0)
      v15 = (double **)&v15[3][3 * v14];
    v122 = *v15;
    v118 = v15[1];
    v16 = *a3;
    v109 = *a6;
    v17 = *((_QWORD *)a3 + 13);
    v18 = *((_QWORD *)a3 + 8);
    v19 = *((_QWORD *)a3 + 9);
    v20 = &v13[2 * v18];
    v113 = v17;
    if (v18 != v19)
    {
      v88 = 0;
      v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      v90 = v127;
      v91 = *((_QWORD *)a3 + 8);
      v92 = v127;
      while (1)
      {
        v93 = v18;
        v20 = v90;
        v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0)
          v95 = 0.5;
        else
          v95 = -0.5;
        sub_100284F14(v94 + v95);
        v96 = v92[2];
        v92 += 2;
        v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0)
          v98 = 0.5;
        else
          v98 = -0.5;
        v99 = v97 + v98;
        sub_100284F14(v97 + v98);
        v100 = ceil(v99);
        v101 = floor(v99);
        if (v99 >= 0.0)
          v100 = v101;
        v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          v18 = v93;
          if (*((_QWORD *)a6 + 4) <= v102)
          {
            v113 = v17;
            v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            v20 = v127;
            v18 = v93;
            break;
          }
          v18 = v93;
          if (*((_QWORD *)a6 + 6) >= v102)
          {
            v113 += v88;
            v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        v90 = v92;
        v89 -= 16;
        if (!v89)
          return 1;
      }
    }
    v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      v22 = v20 + 2;
      v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114)
        v23 = v20 + 2;
      v24 = v23 + 2;
      v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114)
        v25 = v24;
      v117 = v25;
      v26 = -v16;
      v119 = -v109;
      v108 = v21;
      while (1)
      {
        v126 = v18;
        v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0)
          v30 = 0.5;
        else
          v30 = -0.5;
        sub_100284F14(v29 + v30);
        v116 = v20;
        v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0)
          v32 = 0.5;
        else
          v32 = -0.5;
        v33 = v31 + v32;
        sub_100284F14(v31 + v32);
        v34 = ceil(v33);
        v35 = floor(v33);
        if (v33 >= 0.0)
          v34 = v35;
        v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (*((_QWORD *)a6 + 4) > v36)
            return 1;
        }
        else
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (v26 == -1 && *((_QWORD *)a6 + 6) < v36)
            return 1;
        }
        v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        v182 = 1;
        v183 = 0;
        v42 = *(_OWORD *)(a10 + 16);
        v184 = *(_OWORD *)a10;
        v185 = v42;
        v186 = *(_QWORD *)(a10 + 32);
        v44 = v37[8];
        v43 = v37[9];
        v45 = v37[13];
        if (v44 == v43)
        {
LABEL_35:
          v46 = &v39[2 * v44];
          goto LABEL_36;
        }
        v71 = 0;
        v72 = *(double *)(a10 + 32);
        v73 = 16 * v43 - 16 * v44;
        v46 = &v39[2 * v44];
        v74 = v37[13];
        v75 = v37[8];
        while (1)
        {
          v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0)
            v77 = 0.5;
          else
            v77 = -0.5;
          v78 = v76 + v77;
          v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18)
            v79 = 1;
          if (v79 == 2)
            goto LABEL_131;
          if (v79 == 1)
            goto LABEL_132;
          v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0)
            v81 = 0.5;
          else
            v81 = -0.5;
          v82 = v80 + v81;
          v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18)
            v83 = 1;
          if (v83 == 2)
          {
LABEL_131:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            v105 = sub_10016A6B8(exception);
          }
          if (v83 == 1)
          {
LABEL_132:
            v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            v107 = sub_10016A694(v106);
          }
          v84 = ceil(v82);
          v85 = floor(v82);
          v86 = v82 >= 0.0 ? v85 : v84;
          v87 = (uint64_t)v86;
          if (v109 == 1)
            break;
          if (v109 != -1)
            goto LABEL_35;
          if (*((_QWORD *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_36;
          }
LABEL_89:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73)
            goto LABEL_111;
        }
        if (*((_QWORD *)a3 + 4) > v87)
          goto LABEL_89;
        v45 = v74;
        v44 = v75;
LABEL_36:
        v123 = &v39[2 * v43];
        if (v46 != v123)
          break;
LABEL_111:
        ++v113;
LABEL_18:
        v20 = v116 + 2;
        v18 = v38 + 1;
        v27 = v117 + 2;
        if (v117 + 2 == v114)
          v27 = &v115[2 * (v117 != v115)];
        v117 = v27;
        v28 = v22 == v21;
        v22 += 2;
        v26 = -v16;
        if (v28)
          return 1;
      }
      v110 = v22;
      v47 = v46 + 2;
      v48 = v118;
      if (v46 + 2 == v118)
        v47 = &v39[2 * (v46 != v39)];
      v49 = v47 + 2;
      v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118)
        v51 = v50;
      else
        v51 = v49;
      v52 = ++v113 - v45;
      while (1)
      {
        v53 = *(double *)(a10 + 32);
        v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0)
          v55 = 0.5;
        else
          v55 = -0.5;
        v56 = v54 + v55;
        v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18)
          v57 = 1;
        if (v57 == 2)
          goto LABEL_131;
        if (v57 == 1)
          goto LABEL_132;
        v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0)
          v59 = 0.5;
        else
          v59 = -0.5;
        v60 = v58 + v59;
        v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18)
          v61 = 1;
        if (v61 == 2)
          goto LABEL_131;
        if (v61 == 1)
          goto LABEL_132;
        v62 = ceil(v60);
        v63 = floor(v60);
        if (v60 >= 0.0)
          v64 = v63;
        else
          v64 = v62;
        v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65)
            goto LABEL_17;
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_17;
        }
        v66 = v41[2];
        if (a1 == a4)
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v38 >= v44)
                    goto LABEL_75;
                  goto LABEL_74;
                }
LABEL_82:
                if (!v52)
                  goto LABEL_75;
                if (!v38)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v41[11] - 2 <= v44)
                    goto LABEL_75;
                  goto LABEL_74;
                }
              }
              else if (a8)
              {
                goto LABEL_82;
              }
              v68 = v41[3];
              v69 = v41[2];
              goto LABEL_74;
            }
            v69 = v41[2];
          }
        }
        else
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
        }
LABEL_74:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        v176 = 0;
        v177 = 0;
        v70 = *(_OWORD *)(a10 + 16);
        v178 = *(_OWORD *)a10;
        v179 = v70;
        v180 = *(_QWORD *)(a10 + 32);
        v129 = 0;
        v130 = 0;
        v131 = -1;
        v132 = 0;
        v133 = 0;
        v139 = 1;
        v140 = 0;
        v141 = 0;
        v142 = -1;
        v143 = -1;
        v144 = -1;
        v145 = 257;
        v146 = 0;
        v147 = 0;
        v148 = -1;
        v149 = -1;
        v150 = -1;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v160 = 1;
        v161 = 0;
        v162 = 0;
        v163 = -1;
        v164 = -1;
        v165 = -1;
        v166 = 257;
        v167 = 0;
        v168 = 0;
        v169 = -1;
        v170 = -1;
        v171 = -1;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        v134 = a1;
        v135 = v66;
        v136 = v67;
        v137 = v38;
        v138 = xmmword_1003970F0;
        v155 = a4;
        v156 = v69;
        v157 = v68;
        v158 = v44;
        v159 = xmmword_1003970F0;
        sub_10028BCBC((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        v37 = a6;
        v38 = v126;
        v48 = v118;
        v39 = v122;
        v41 = a3;
LABEL_75:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48)
          v51 = &v39[2 * (v51 != v39)];
        else
          v51 += 2;
        --v52;
        if (v46 == v123)
        {
LABEL_17:
          v21 = v108;
          v22 = v110;
          goto LABEL_18;
        }
      }
    }
  }
  return 1;
}

_QWORD *sub_10028BCBC(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[376];
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  char v31;
  _QWORD v32[6];
  char v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _BYTE v36[40];
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _DWORD v41[7];
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  double *v48[2];
  __int128 *v49[2];

  v47 = a6;
  v25[0] = a1;
  v25[1] = a2;
  v11 = sub_10028D8E0((uint64_t)&v26, a1, a2, a5);
  v30[0] = a1;
  v30[1] = a5;
  v30[2] = v11;
  v30[3] = &v27;
  v31 = 0;
  v32[0] = a2;
  v32[1] = a5;
  v32[2] = &v28;
  v32[3] = &v29;
  v33 = 0;
  v34[1] = v30;
  v34[2] = v32;
  v35[1] = v32;
  v35[2] = v30;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(double **)(a2 + 16);
  v14 = *(double **)(a2 + 24);
  v49[0] = *(__int128 **)(a1 + 16);
  v49[1] = (__int128 *)v12;
  v48[0] = v13;
  v48[1] = v14;
  *(_OWORD *)&v24[32] = xmmword_100393CB0;
  *(_QWORD *)&v24[48] = 0;
  *(_QWORD *)&v24[56] = 0;
  *(_QWORD *)&v24[64] = 1;
  *(_QWORD *)&v24[72] = 0;
  *(double *)v24 = *(double *)v12 - *(double *)v49[0];
  *(double *)&v24[16] = *v14 - *v13;
  *(double *)&v24[8] = *(double *)(v12 + 8) - *((double *)v49[0] + 1);
  *(double *)&v24[24] = v14[1] - v13[1];
  sub_10028DDD8((uint64_t)v24, v49, v48, (uint64_t)v30, (uint64_t)v32, (uint64_t)v36);
  v45 = a4;
  v46 = a5;
  if (LOBYTE(v41[0]) != 100)
  {
    memcpy(v24, a3, sizeof(v24));
    switch(LOBYTE(v41[0]))
    {
      case 'c':
        if (!BYTE1(v41[0]))
        {
          if (v43)
          {
            sub_10028CF68(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
          }
          else
          {
            sub_10028D680(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
            *(_DWORD *)&v24[16] = 5;
          }
          goto LABEL_19;
        }
        sub_10028D208(a1, a2, (__int128 *)v24, (uint64_t)&v47, (uint64_t)v25, (uint64_t)v34);
        return v47;
      case 'i':
        *(_OWORD *)v24 = *(_OWORD *)&v36[8];
        *(_QWORD *)&v24[104] = v38;
        *(_OWORD *)&v24[88] = v37;
        *(_QWORD *)&v24[272] = v40;
        *(_OWORD *)&v24[256] = v39;
        v15 = v47;
        v16 = v47[2];
        v17 = v47[1];
        v18 = 2 * (v16 - v17) - 1;
        *(_DWORD *)&v24[16] = 2;
        if (v16 == v17)
          v18 = 0;
        v19 = v42 == 1;
        *(_DWORD *)&v24[168 * (v42 != 1) + 40] = 1;
        *(_DWORD *)&v24[168 * v19 + 40] = 2;
        v20 = v15[5] + v15[4];
        if (v18 == v20)
          goto LABEL_22;
        goto LABEL_23;
      case 'm':
        if (v44 == 1)
          sub_10028C090(a1, a2, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v34);
        else
          sub_10028C4AC(a2, a1, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v35);
        goto LABEL_19;
      case 't':
        sub_10028C8CC(a1, a2, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v34);
        goto LABEL_19;
      default:
        if (LOBYTE(v41[0]) != 101 || BYTE1(v41[0]))
          return v47;
        sub_10028D680(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
LABEL_19:
        v15 = v47;
        v21 = v47[2];
        v17 = v47[1];
        v22 = 2 * (v21 - v17) - 1;
        if (v21 == v17)
          v22 = 0;
        v20 = v47[5] + v47[4];
        if (v22 == v20)
        {
LABEL_22:
          sub_100290D9C((uint64_t)v15);
          v17 = v15[1];
          v20 = v15[5] + v15[4];
        }
LABEL_23:
        memcpy((void *)(*(_QWORD *)(v17 + ((v20 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v20 & 0xF)), v24, 0x178uLL);
        ++v15[5];
        break;
    }
  }
  return v47;
}

void sub_10028C090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  double v41;

  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v9 = a5[10];
    if (v9 == 1)
      goto LABEL_4;
  }
  else if (v8 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 104) = 0x412E848000000000;
    v9 = a5[10];
    if (v9 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 272) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v10 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    v9 = a5[10];
    if (v9 == 1)
      goto LABEL_4;
  }
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 272) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 272) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v11;
  }
LABEL_11:
  v12 = a5[7];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v41 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v41);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (!(v12 + v18))
      goto LABEL_21;
  }
  else
  {
    v25 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v25 <= v41 * 2.22044605e-16)
    {
LABEL_12:
      v18 = 0;
      if (v12)
        goto LABEL_13;
LABEL_21:
      v26 = a3 + 40;
      *(_DWORD *)(v26 + 168 * (v18 != -1)) = 1;
      *(_DWORD *)(v26 + 168 * (v18 == -1)) = 2;
      return;
    }
    if (!(v12 + v18))
      goto LABEL_21;
  }
LABEL_13:
  v19 = *(_QWORD *)(a6 + 16);
  v20 = *(uint64_t **)(v19 + 16);
  v21 = *(uint64_t **)(v19 + 24);
  v22 = (uint64_t *)sub_10028ED14(v19);
  v41 = 1.0;
  v23 = sub_10028EE24(v20, v21, v22, &v41);
  if (v23 == 0.0)
  {
LABEL_14:
    v24 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
  }
  else
  {
    v27 = fabs(v23);
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
    if (v27 <= v41 * 2.22044605e-16)
      goto LABEL_14;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_10028ED14(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v41 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v41);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v41 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v24 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 208) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v24 == -1)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 208) = v35;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v24)
  {
    v36 = (v24 == 1) ^ (v33 == 0);
    if (v33 * v12 == -1)
    {
      v37 = sub_100291358(a6);
      if (sub_1002913F0(a6) * v37 == 1 && sub_1002914A8(a6) * v33 == -1)
        v36 ^= 1u;
    }
    v38 = a3 + 40;
    *(_DWORD *)(v38 + 168 * v36) = 1;
    *(_DWORD *)(v38 + 168 * (v36 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else
  {
    if (v12 == v24)
    {
      v39 = 4;
      *(_DWORD *)(a3 + 40) = 4;
    }
    else
    {
      if (v24 == 1)
        v40 = 2;
      else
        v40 = 1;
      *(_DWORD *)(a3 + 40) = v40;
      v39 = 3;
    }
    *(_DWORD *)(a3 + 208) = v39;
  }
}

void sub_10028C4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  double v40;

  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 272) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 104) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 272) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 272) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v11;
  }
LABEL_11:
  v12 = a5[5];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v40 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v40);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v40 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 40;
    *(_DWORD *)(v20 + 168 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 168 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_10028ED14(v21);
  v40 = 1.0;
  v25 = sub_10028EE24(v22, v23, v24, &v40);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v40 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_10028ED14(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v40 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v40);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v40 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 208) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 40) = v35;
    *(_DWORD *)(a3 + 208) = 1;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 == -1)
    {
      v37 = sub_100291358(a6);
      if (sub_1002913F0(a6) * v37 == 1 && sub_1002914A8(a6) * v33 == -1)
        v36 ^= 1u;
    }
    v38 = a3 + 40;
    *(_DWORD *)(v38 + 168 * v36) = 1;
    *(_DWORD *)(v38 + 168 * (v36 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 208) = 4;
  }
  else
  {
    if (v26 == 1)
      v39 = 2;
    else
      v39 = 1;
    *(_DWORD *)(a3 + 208) = v39;
    *(_DWORD *)(a3 + 40) = 3;
  }
}

void sub_10028C8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  double v38;
  int v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  double v54;
  int v55;
  double v56;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  BOOL v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  double v80;

  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 104) = 0x412E848000000000;
    v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 272) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v11;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 272) = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 272) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v12;
  }
LABEL_11:
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_22;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v80 * 2.22044605e-16)
      goto LABEL_12;
  }
LABEL_22:
  v20 = a5[7];
  v21 = *(_QWORD *)(a6 + 8);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v80 = 1.0;
  v25 = sub_10028EE24(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    v26 = 0;
    goto LABEL_33;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v26 * v20 != -1)
      goto LABEL_33;
LABEL_24:
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *(uint64_t **)(v27 + 24);
    v30 = (uint64_t *)sub_10028ED14(v27);
    v80 = 1.0;
    v31 = sub_10028EE24(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0)
          v32 = 1;
        else
          v32 = -1;
        if (v32 != v20)
          goto LABEL_139;
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 40) = 3;
          v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1)
            v42 = 1;
          else
            v42 = 2;
          *(_DWORD *)(a3 + 40) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          v69 = *(_QWORD *)(a6 + 16);
          v70 = *(uint64_t **)(v69 + 24);
          v71 = (uint64_t *)sub_10028ED14(v69);
          v72 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
          v80 = 1.0;
          v73 = sub_10028EE24(v70, v71, v72, &v80);
          if (v73 == 0.0)
            goto LABEL_141;
          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
          }
          else
          {
            v75 = fabs(v73);
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
            if (v75 <= v80 * 2.22044605e-16)
              goto LABEL_141;
          }
          if (v76 == v26)
          {
            if (v26 == 1)
              v78 = 1;
            else
              v78 = 2;
            *(_DWORD *)(a3 + 40) = v78;
            if (v26 == 1)
              v42 = 2;
            else
              v42 = 1;
            goto LABEL_165;
          }
        }
        v74 = v26 == 1;
        if (v26 == 1)
          v79 = 2;
        else
          v79 = 1;
        *(_DWORD *)(a3 + 40) = v79;
LABEL_170:
        if (v74)
          v62 = 1;
        else
          v62 = 2;
        goto LABEL_173;
      }
      v41 = fabs(v31);
      if (v31 > 0.0)
        v32 = 1;
      else
        v32 = -1;
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20)
          goto LABEL_139;
        goto LABEL_52;
      }
    }
    v32 = 0;
    if (v20)
      goto LABEL_139;
    goto LABEL_52;
  }
  v33 = fabs(v25);
  if (v25 > 0.0)
    v26 = 1;
  else
    v26 = -1;
  if (v33 <= v80 * 2.22044605e-16)
    goto LABEL_23;
  if (v26 * v20 == -1)
    goto LABEL_24;
LABEL_33:
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(uint64_t **)(v34 + 24);
  v36 = (uint64_t *)sub_10028ED14(v34);
  v37 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v38 = sub_10028EE24(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    v39 = 0;
    goto LABEL_61;
  }
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
  }
  else
  {
    v40 = fabs(v38);
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
    if (v40 <= v80 * 2.22044605e-16)
      goto LABEL_34;
  }
LABEL_61:
  v43 = *(_QWORD *)(a6 + 8);
  v44 = *(uint64_t **)(v43 + 16);
  v45 = *(uint64_t **)(v43 + 24);
  v46 = (uint64_t *)sub_10028ED14(v43);
  v80 = 1.0;
  v47 = sub_10028EE24(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_72;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > v80 * 2.22044605e-16)
      goto LABEL_72;
  }
  v48 = 0;
LABEL_72:
  v50 = *(_QWORD *)(a6 + 16);
  v51 = *(uint64_t **)(v50 + 16);
  v52 = *(uint64_t **)(v50 + 24);
  v53 = (uint64_t *)sub_10028ED14(v50);
  v80 = 1.0;
  v54 = sub_10028EE24(v51, v52, v53, &v80);
  if (v54 == 0.0)
    goto LABEL_73;
  if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0)
      v55 = 1;
    else
      v55 = -1;
    goto LABEL_83;
  }
  v56 = fabs(v54);
  v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16)
LABEL_73:
    v55 = 0;
LABEL_83:
  if (v26)
    v57 = 1;
  else
    v57 = v55 * v20 == 1;
  v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39)
      v59 = 1;
    else
      v59 = v58;
    if ((v59 & 1) != 0)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 40) = 3;
        if (v55 == 1)
          v66 = 2;
        else
          v66 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v66;
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1)
          v60 = 1;
        else
          v60 = 2;
        *(_DWORD *)(a3 + 40) = v60;
        if (v55 == 1)
          v61 = 2;
        else
          v61 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v61;
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        v67 = v55 == 1;
        if (v55 == 1)
          v68 = 2;
        else
          v68 = 1;
        *(_DWORD *)(a3 + 40) = v68;
        if (v67)
          v42 = 1;
        else
          v42 = 2;
LABEL_165:
        *(_DWORD *)(a3 + 208) = v42;
        *(_BYTE *)(a3 + 20) = 1;
        return;
      }
      if (v18 != -v55)
        return;
      if (v55 == 1)
        v77 = 2;
      else
        v77 = 1;
      *(_DWORD *)(a3 + 40) = v77;
      *(_DWORD *)(a3 + 208) = v77;
      if (v58)
      {
        v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(_BYTE *)(a3 + 20) = 1;
      return;
    }
LABEL_141:
    v62 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 208) = v62;
    return;
  }
  if (v55 == 1)
    v63 = 2;
  else
    v63 = 1;
  *(_DWORD *)(a3 + 40) = v63;
  if (v26 == 1 || v20 == 1)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v65 = 3;
  *(_DWORD *)(a3 + 208) = v65;
  if ((v58 & 1) == 0)
    goto LABEL_121;
}

double sub_10028CF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double result;
  double v42;

  v12 = sub_10028FED4((double *)(a4 + 64), (double *)(a4 + 120));
  v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 16) = 5;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v12 + 8);
  v14 = *(_QWORD *)(v13 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(a3 + 104) = v14;
  v15 = *(_QWORD *)(v13 + 80);
  *(_OWORD *)(a3 + 256) = *(_OWORD *)(v13 + 64);
  *(_QWORD *)(a3 + 272) = v15;
  v16 = *(_DWORD *)(a5 + 36);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(uint64_t **)(v17 + 16);
  v19 = *(uint64_t **)(v17 + 24);
  v20 = (uint64_t *)sub_10028ED14(v17);
  v42 = 1.0;
  v21 = sub_10028EE24(v18, v19, v20, &v42);
  if (v21 != 0.0)
  {
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      goto LABEL_3;
    }
    v39 = fabs(v21);
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v39 > v42 * 2.22044605e-16)
      goto LABEL_3;
  }
  v22 = 0;
LABEL_3:
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(uint64_t **)(v23 + 16);
  v25 = *(uint64_t **)(v23 + 24);
  v26 = (uint64_t *)sub_10028ED14(v23);
  v42 = 1.0;
  v27 = sub_10028EE24(v24, v25, v26, &v42);
  if (v27 == 0.0)
    goto LABEL_4;
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v27 > 0.0)
      v28 = 1;
    else
      v28 = -1;
    goto LABEL_5;
  }
  v40 = fabs(v27);
  v28 = v27 > 0.0 ? 1 : -1;
  if (v40 <= v42 * 2.22044605e-16)
LABEL_4:
    v28 = 0;
LABEL_5:
  if (v16 == 1)
    v29 = v22;
  else
    v29 = v28;
  v30 = v29 * v16;
  if (v30 == 1)
    v31 = 1;
  else
    v31 = 2;
  if (v30 == 1)
    v32 = 2;
  else
    v32 = 1;
  if (v30)
  {
    v33 = v32;
  }
  else
  {
    v31 = 4;
    v33 = 4;
  }
  *(_DWORD *)(a3 + 40) = v31;
  *(_DWORD *)(a3 + 208) = v33;
  if (v22)
  {
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(*(_QWORD *)(a1 + 24) + 8))
                          * (v35 - *(double *)(*(_QWORD *)(a1 + 24) + 8))
                          + (*(double *)a3 - **(double **)(a1 + 24)) * (*(double *)a3 - **(double **)(a1 + 24));
    if (v28)
    {
LABEL_19:
      v36 = *(double **)(a2 + 24);
      v37 = *v36;
      v38 = v36[1];
      goto LABEL_38;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      sub_10028DB80(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(_QWORD *)(a1 + 32);
      *(_BYTE *)(a1 + 80) = 1;
    }
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(a1 + 72)) * (v35 - *(double *)(a1 + 72))
                          + (*(double *)a3 - *(double *)(a1 + 64)) * (*(double *)a3 - *(double *)(a1 + 64));
    if (v28)
      goto LABEL_19;
  }
  if (!*(_BYTE *)(a2 + 80))
  {
    sub_10028DB80(a2, *(double **)(a2 + 24), a2 + 32);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)*(_QWORD *)(a2 + 32);
    *(_BYTE *)(a2 + 80) = 1;
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
  }
  v37 = *(double *)(a2 + 64);
  v38 = *(double *)(a2 + 72);
LABEL_38:
  result = (v35 - v38) * (v35 - v38) + (v34 - v37) * (v34 - v37);
  *(double *)(a3 + 280) = result;
  return result;
}

__n128 sub_10028D208(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  double v69;
  __int128 v70;
  __int128 v71;
  __n128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[36];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[36];
  __int128 v88;
  int v89;
  __int128 v90;

  v90 = *a3;
  v88 = *(__int128 *)((char *)a3 + 20);
  v89 = *((_DWORD *)a3 + 9);
  v9 = *(__int128 *)((char *)a3 + 60);
  v10 = *(__int128 *)((char *)a3 + 92);
  *(_OWORD *)v87 = *(__int128 *)((char *)a3 + 76);
  *(_OWORD *)&v87[16] = v10;
  *(_DWORD *)&v87[32] = *((_DWORD *)a3 + 27);
  v85 = *(__int128 *)((char *)a3 + 44);
  v86 = v9;
  v11 = a3[8];
  v79 = a3[7];
  v80 = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = a3[12];
  v83 = a3[11];
  v84 = v14;
  v81 = v12;
  v82 = v13;
  v15 = *(__int128 *)((char *)a3 + 212);
  v16 = *(__int128 *)((char *)a3 + 228);
  v17 = *(__int128 *)((char *)a3 + 244);
  v18 = *(__int128 *)((char *)a3 + 260);
  *(_DWORD *)&v78[32] = *((_DWORD *)a3 + 69);
  *(_OWORD *)v78 = v17;
  *(_OWORD *)&v78[16] = v18;
  v76 = v15;
  v77 = v16;
  v19 = *(__int128 *)((char *)a3 + 296);
  v70 = *(__int128 *)((char *)a3 + 280);
  v71 = v19;
  result = *(__n128 *)((char *)a3 + 312);
  v21 = *(__int128 *)((char *)a3 + 328);
  v22 = *(__int128 *)((char *)a3 + 360);
  v74 = *(__int128 *)((char *)a3 + 344);
  v75 = v22;
  v72 = result;
  v73 = v21;
  v23 = *(_DWORD *)(a5 + 496);
  if (*(_DWORD *)(a5 + 492) == 1)
  {
    v24 = *(_QWORD *)(a6 + 8);
    v25 = *(uint64_t **)(v24 + 16);
    v26 = *(uint64_t **)(v24 + 24);
    v27 = (uint64_t *)sub_10028ED14(v24);
    v69 = 1.0;
    result.n128_f64[0] = sub_10028EE24(v25, v26, v27, &v69);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v69 * 2.22044605e-16))
    {
      if (result.n128_f64[0] <= 0.0)
        v28 = 1;
      else
        v28 = 2;
      v29 = *(_QWORD **)a4;
      v30 = *(_QWORD *)(*(_QWORD *)a4 + 16);
      v31 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v90 = *(_OWORD *)(a5 + 328);
      *(_OWORD *)&v87[12] = *(_OWORD *)(a5 + 400);
      *(_QWORD *)&v87[28] = *(_QWORD *)(a5 + 416);
      *(_OWORD *)&v78[12] = *(_OWORD *)(a5 + 424);
      *(_QWORD *)&v78[28] = *(_QWORD *)(a5 + 440);
      if (v30 == v31)
        v32 = 0;
      else
        v32 = 2 * (v30 - v31) - 1;
      v33 = v29[5] + v29[4];
      if (v32 == v33)
      {
        sub_100290D9C((uint64_t)v29);
        v31 = v29[1];
        v33 = v29[5] + v29[4];
      }
      v34 = *(_QWORD *)(v31 + ((v33 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v33 & 0xF);
      *(_OWORD *)v34 = v90;
      *(_DWORD *)(v34 + 16) = 5;
      *(_OWORD *)(v34 + 20) = v88;
      *(_DWORD *)(v34 + 36) = v89;
      *(_DWORD *)(v34 + 40) = v28;
      v35 = v85;
      *(_OWORD *)(v34 + 60) = v86;
      v36 = *(_OWORD *)&v87[16];
      *(_OWORD *)(v34 + 76) = *(_OWORD *)v87;
      *(_OWORD *)(v34 + 92) = v36;
      *(_DWORD *)(v34 + 108) = *(_DWORD *)&v87[32];
      *(_OWORD *)(v34 + 44) = v35;
      v37 = v80;
      *(_OWORD *)(v34 + 112) = v79;
      *(_OWORD *)(v34 + 128) = v37;
      v38 = v84;
      *(_OWORD *)(v34 + 176) = v83;
      *(_OWORD *)(v34 + 192) = v38;
      v39 = v82;
      *(_OWORD *)(v34 + 144) = v81;
      *(_OWORD *)(v34 + 160) = v39;
      *(_DWORD *)(v34 + 208) = 3;
      v40 = v76;
      *(_OWORD *)(v34 + 228) = v77;
      v41 = *(_OWORD *)&v78[16];
      *(_OWORD *)(v34 + 244) = *(_OWORD *)v78;
      *(_OWORD *)(v34 + 260) = v41;
      *(_DWORD *)(v34 + 276) = *(_DWORD *)&v78[32];
      *(_OWORD *)(v34 + 212) = v40;
      v34 += 280;
      v42 = v71;
      *(_OWORD *)v34 = v70;
      *(_OWORD *)(v34 + 16) = v42;
      result = v72;
      v43 = v73;
      v44 = v75;
      *(_OWORD *)(v34 + 64) = v74;
      *(_OWORD *)(v34 + 80) = v44;
      *(__n128 *)(v34 + 32) = result;
      *(_OWORD *)(v34 + 48) = v43;
      ++v29[5];
    }
  }
  if (v23 == 1)
  {
    v45 = *(_QWORD *)(a6 + 16);
    v46 = *(uint64_t **)(v45 + 16);
    v47 = *(uint64_t **)(v45 + 24);
    v48 = (uint64_t *)sub_10028ED14(v45);
    v69 = 1.0;
    result.n128_f64[0] = sub_10028EE24(v46, v47, v48, &v69);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v69 * 2.22044605e-16))
    {
      v49 = a5 + 304;
      if (result.n128_f64[0] <= 0.0)
        v50 = 1;
      else
        v50 = 2;
      v51 = *(_QWORD **)a4;
      v52 = v51[2];
      v53 = v51[1];
      v90 = *(_OWORD *)(v49 + 8);
      v54 = *(_OWORD *)(v49 + 40);
      *(_QWORD *)&v87[28] = *(_QWORD *)(v49 + 56);
      *(_OWORD *)&v87[12] = v54;
      v55 = *(_OWORD *)(v49 + 64);
      *(_QWORD *)&v78[28] = *(_QWORD *)(v49 + 80);
      *(_OWORD *)&v78[12] = v55;
      if (v52 == v53)
        v56 = 0;
      else
        v56 = 2 * (v52 - v53) - 1;
      v57 = v51[5] + v51[4];
      if (v56 == v57)
      {
        sub_100290D9C((uint64_t)v51);
        v53 = v51[1];
        v57 = v51[5] + v51[4];
      }
      v58 = *(_QWORD *)(v53 + ((v57 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v57 & 0xF);
      *(_OWORD *)v58 = v90;
      *(_DWORD *)(v58 + 16) = 5;
      *(_OWORD *)(v58 + 20) = v88;
      *(_DWORD *)(v58 + 36) = v89;
      *(_DWORD *)(v58 + 40) = 3;
      v59 = v85;
      *(_OWORD *)(v58 + 60) = v86;
      v60 = *(_OWORD *)&v87[16];
      *(_OWORD *)(v58 + 76) = *(_OWORD *)v87;
      *(_OWORD *)(v58 + 92) = v60;
      *(_DWORD *)(v58 + 108) = *(_DWORD *)&v87[32];
      *(_OWORD *)(v58 + 44) = v59;
      v61 = v80;
      *(_OWORD *)(v58 + 112) = v79;
      *(_OWORD *)(v58 + 128) = v61;
      v62 = v84;
      *(_OWORD *)(v58 + 176) = v83;
      *(_OWORD *)(v58 + 192) = v62;
      v63 = v82;
      *(_OWORD *)(v58 + 144) = v81;
      *(_OWORD *)(v58 + 160) = v63;
      *(_DWORD *)(v58 + 208) = v50;
      v64 = v76;
      *(_OWORD *)(v58 + 228) = v77;
      v65 = *(_OWORD *)&v78[16];
      *(_OWORD *)(v58 + 244) = *(_OWORD *)v78;
      *(_OWORD *)(v58 + 260) = v65;
      *(_DWORD *)(v58 + 276) = *(_DWORD *)&v78[32];
      *(_OWORD *)(v58 + 212) = v64;
      v58 += 280;
      v66 = v71;
      *(_OWORD *)v58 = v70;
      *(_OWORD *)(v58 + 16) = v66;
      result = v72;
      v67 = v73;
      v68 = v75;
      *(_OWORD *)(v58 + 64) = v74;
      *(_OWORD *)(v58 + 80) = v68;
      *(__n128 *)(v58 + 32) = result;
      *(_OWORD *)(v58 + 48) = v67;
      ++v51[5];
    }
  }
  return result;
}

void sub_10028D680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;

  v9 = sub_10028FED4((double *)(a4 + 64), (double *)(a4 + 120));
  v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 16) = 6;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v9 + 8);
  v11 = *(_QWORD *)(v10 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(a3 + 104) = v11;
  v12 = *(_QWORD *)(v10 + 80);
  *(_OWORD *)(a3 + 256) = *(_OWORD *)(v10 + 64);
  *(_QWORD *)(a3 + 272) = v12;
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (uint64_t *)sub_10028ED14(v13);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v38 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v38 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v20 = *(_QWORD *)(a6 + 8);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *(uint64_t **)(v20 + 24);
  v23 = (uint64_t *)sub_10028ED14(v20);
  v38 = 1.0;
  v24 = sub_10028EE24(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    v25 = 0;
    goto LABEL_23;
  }
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
  }
  else
  {
    v26 = fabs(v24);
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v26 <= v38 * 2.22044605e-16)
      goto LABEL_13;
  }
LABEL_23:
  v28 = *(_QWORD *)(a6 + 8);
  v27 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 16);
  v30 = *(uint64_t **)(v28 + 24);
  v31 = (uint64_t *)sub_10028ED14(v27);
  v38 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    v33 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 > v38 * 2.22044605e-16)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (v32 > 0.0)
    v33 = 1;
  else
    v33 = -1;
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1)
      v36 = v25 == -1;
    else
      v36 = v18 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 40) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 208) = v35;
}

uint64_t sub_10028D8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 120) = 0;
  v8 = *(double **)(a2 + 16);
  v9 = (double)*(uint64_t *)(a4 + 24) + (v8[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v9 >= 0.0)
    v10 = 0.5;
  else
    v10 = -0.5;
  v11 = v9 + v10;
  sub_100284F14(v9 + v10);
  v12 = ceil(v11);
  v13 = floor(v11);
  if (v11 >= 0.0)
    v12 = v13;
  *(_QWORD *)(a1 + 8) = (uint64_t)v12;
  v14 = (double)*(uint64_t *)(a4 + 16) + (*v8 - *(double *)a4) * *(double *)(a4 + 32);
  if (v14 >= 0.0)
    v15 = 0.5;
  else
    v15 = -0.5;
  v16 = v14 + v15;
  sub_100284F14(v14 + v15);
  v17 = ceil(v16);
  v18 = floor(v16);
  if (v16 >= 0.0)
    v17 = v18;
  *(_QWORD *)a1 = (uint64_t)v17;
  v19 = *(double **)(a2 + 24);
  v20 = (double)*(uint64_t *)(a4 + 24) + (v19[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v20 >= 0.0)
    v21 = 0.5;
  else
    v21 = -0.5;
  v22 = v20 + v21;
  sub_100284F14(v20 + v21);
  v23 = ceil(v22);
  v24 = floor(v22);
  if (v22 >= 0.0)
    v23 = v24;
  *(_QWORD *)(a1 + 24) = (uint64_t)v23;
  v25 = (double)*(uint64_t *)(a4 + 16) + (*v19 - *(double *)a4) * *(double *)(a4 + 32);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_100284F14(v25 + v26);
  v28 = ceil(v27);
  v29 = floor(v27);
  if (v27 >= 0.0)
    v28 = v29;
  *(_QWORD *)(a1 + 16) = (uint64_t)v28;
  v30 = *(double **)(a3 + 16);
  v31 = (double)*(uint64_t *)(a4 + 24) + (v30[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v31 >= 0.0)
    v32 = 0.5;
  else
    v32 = -0.5;
  v33 = v31 + v32;
  sub_100284F14(v31 + v32);
  v34 = ceil(v33);
  v35 = floor(v33);
  if (v33 >= 0.0)
    v34 = v35;
  *(_QWORD *)(a1 + 40) = (uint64_t)v34;
  v36 = (double)*(uint64_t *)(a4 + 16) + (*v30 - *(double *)a4) * *(double *)(a4 + 32);
  if (v36 >= 0.0)
    v37 = 0.5;
  else
    v37 = -0.5;
  v38 = v36 + v37;
  sub_100284F14(v36 + v37);
  v39 = ceil(v38);
  v40 = floor(v38);
  if (v38 >= 0.0)
    v39 = v40;
  *(_QWORD *)(a1 + 32) = (uint64_t)v39;
  v41 = *(double **)(a3 + 24);
  v42 = (double)*(uint64_t *)(a4 + 24) + (v41[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v42 >= 0.0)
    v43 = 0.5;
  else
    v43 = -0.5;
  v44 = v42 + v43;
  sub_100284F14(v42 + v43);
  v45 = ceil(v44);
  v46 = floor(v44);
  if (v44 >= 0.0)
    v45 = v46;
  *(_QWORD *)(a1 + 56) = (uint64_t)v45;
  v47 = (double)*(uint64_t *)(a4 + 16) + (*v41 - *(double *)a4) * *(double *)(a4 + 32);
  if (v47 >= 0.0)
    v48 = 0.5;
  else
    v48 = -0.5;
  v49 = v47 + v48;
  sub_100284F14(v47 + v48);
  v50 = ceil(v49);
  v51 = floor(v49);
  if (v49 >= 0.0)
    v50 = v51;
  *(_QWORD *)(a1 + 48) = (uint64_t)v50;
  return a1;
}

void sub_10028DB80(uint64_t a1, double *a2, uint64_t a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v31;
  double *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double *v45;
  double *v46;

  v6 = (double)*(uint64_t *)(a1 + 112) + (a2[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v6 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  v8 = v6 + v7;
  sub_100284F14(v6 + v7);
  v9 = ceil(v8);
  v10 = floor(v8);
  if (v8 >= 0.0)
    v9 = v10;
  v11 = (uint64_t)v9;
  v12 = (double)*(uint64_t *)(a1 + 104) + (*a2 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v12 >= 0.0)
    v13 = 0.5;
  else
    v13 = -0.5;
  v14 = v12 + v13;
  sub_100284F14(v12 + v13);
  v15 = ceil(v14);
  v16 = floor(v14);
  if (v14 >= 0.0)
    v15 = v16;
  v17 = (uint64_t)v15;
  v18 = *(double **)a3;
  v19 = (double)*(uint64_t *)(a1 + 112)
      + (*(double *)(*(_QWORD *)a3 + 8) - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v19 >= 0.0)
    v20 = 0.5;
  else
    v20 = -0.5;
  v21 = v19 + v20;
  sub_100284F14(v19 + v20);
  v22 = ceil(v21);
  v23 = floor(v21);
  if (v21 >= 0.0)
    v24 = v23;
  else
    v24 = v22;
  v25 = (double)*(uint64_t *)(a1 + 104) + (*v18 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_100284F14(v25 + v26);
  v28 = ceil(v27);
  v29 = floor(v27);
  if (v27 >= 0.0)
    v28 = v29;
  if (v17 == (uint64_t)v28 && v11 == (uint64_t)v24)
  {
    v31 = -1;
    do
    {
      if ((unint64_t)++v31 >= *(_QWORD *)(*(_QWORD *)a1 + 88))
        break;
      v45 = *(double **)a3;
      v32 = (double *)(*(_QWORD *)a3 + 16);
      *(_QWORD *)a3 = v32;
      if (v32 == *(double **)(a3 + 16))
      {
        v46 = *(double **)(a3 + 8);
        *(_QWORD *)a3 = v46;
        if (*(_BYTE *)(a3 + 24))
        {
          v32 = v46 + 2;
          *(_QWORD *)a3 = v46 + 2;
          if (v45 == v46)
          {
            *(_QWORD *)a3 = v46;
            v32 = v45;
          }
        }
        else
        {
          v32 = v46;
        }
      }
      v33 = (double)*(uint64_t *)(a1 + 112) + (v32[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
      if (v33 >= 0.0)
        v34 = 0.5;
      else
        v34 = -0.5;
      v35 = v33 + v34;
      sub_100284F14(v33 + v34);
      v36 = ceil(v35);
      v37 = floor(v35);
      if (v35 >= 0.0)
        v38 = v37;
      else
        v38 = v36;
      v39 = (double)*(uint64_t *)(a1 + 104) + (*v32 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
      if (v39 >= 0.0)
        v40 = 0.5;
      else
        v40 = -0.5;
      v41 = v39 + v40;
      sub_100284F14(v39 + v40);
      v42 = ceil(v41);
      v43 = floor(v41);
      if (v41 >= 0.0)
        v42 = v43;
    }
    while (v17 == (uint64_t)v42 && v11 == (uint64_t)v38);
  }
}

double sub_10028DDD8@<D0>(uint64_t a1@<X0>, __int128 **a2@<X1>, double **a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  double v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  __int128 v37;
  __int128 *v38;
  double result;
  __int128 v40;
  double v41;
  double v42;
  int v43;
  double v44;
  double v45;
  double v46;
  int v47;
  double v48;
  int v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  int v74;
  int v75;
  int v76;
  double **v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  char v84;
  int v85;
  BOOL v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  int v92;
  _BYTE v94[64];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v9 = *(uint64_t **)(a4 + 16);
  v8 = *(uint64_t **)(a4 + 24);
  v11 = *(uint64_t **)(a5 + 16);
  v10 = *(uint64_t **)(a5 + 24);
  v13 = *v9;
  v12 = v9[1];
  v15 = *v8;
  v14 = v8[1];
  v17 = *v9 == *v8 && v12 == v14;
  v19 = *v11;
  v18 = v11[1];
  v21 = *v10;
  v20 = v10[1];
  v23 = *v11 == *v10 && v18 == v20;
  if (v17 && v23)
  {
    v34 = (_QWORD *)(a6 + 56);
    v35 = (_QWORD *)(a6 + 112);
    if (v13 == v19 && v12 == v18)
    {
      *v34 = 0;
      *(_QWORD *)(a6 + 64) = 0;
      *v35 = 0;
      *(_QWORD *)(a6 + 120) = 0;
      v38 = *a2;
      memset(&v94[2], 0, 40);
      *(_QWORD *)a6 = 1;
      *(_OWORD *)(a6 + 8) = *v38;
      *(_OWORD *)(a6 + 40) = xmmword_100393CB0;
      *(_OWORD *)(a6 + 96) = xmmword_100393CB0;
      *(_OWORD *)(a6 + 180) = *(_OWORD *)&v94[26];
      result = *(double *)&v94[16];
      v40 = *(_OWORD *)v94;
      *(_OWORD *)(a6 + 170) = *(_OWORD *)&v94[16];
      *(_QWORD *)(a6 + 72) = 1;
      *(_QWORD *)(a6 + 80) = 0;
      *(_BYTE *)(a6 + 88) = 0;
      *(_QWORD *)(a6 + 128) = 1;
      *(_QWORD *)(a6 + 136) = 0;
      *(_BYTE *)(a6 + 144) = 0;
      *(_WORD *)(a6 + 152) = 48;
      *(_OWORD *)(a6 + 154) = v40;
      return result;
    }
    memset(&v94[2], 0, 32);
    *(_OWORD *)(a6 + 40) = xmmword_100393CB0;
    *(_OWORD *)(a6 + 96) = xmmword_100393CB0;
    v37 = *(_OWORD *)&v94[16];
    *(_OWORD *)(a6 + 154) = *(_OWORD *)v94;
    *v34 = 0;
    *(_QWORD *)(a6 + 64) = 0;
    *v35 = 0;
    *(_QWORD *)(a6 + 120) = 0;
    goto LABEL_100;
  }
  if (v13 >= v15)
    v25 = *v8;
  else
    v25 = *v9;
  if (v13 <= v15)
    v13 = *v8;
  if (v19 >= v21)
    v26 = *v10;
  else
    v26 = *v11;
  if (v19 <= v21)
    v19 = *v10;
  if (v13 < v26 || v19 < v25)
    goto LABEL_99;
  if (v12 >= v14)
    v28 = v8[1];
  else
    v28 = v9[1];
  if (v12 > v14)
    v14 = v9[1];
  if (v18 >= v20)
    v29 = v10[1];
  else
    v29 = v11[1];
  if (v18 > v20)
    v20 = v11[1];
  if (v14 < v29 || v20 < v28)
  {
LABEL_99:
    memset(&v94[2], 0, 32);
    *(_OWORD *)(a6 + 40) = xmmword_100393CB0;
    *(_OWORD *)(a6 + 96) = xmmword_100393CB0;
    v37 = *(_OWORD *)&v94[16];
    *(_OWORD *)(a6 + 154) = *(_OWORD *)v94;
    *(_QWORD *)(a6 + 56) = 0;
    *(_QWORD *)(a6 + 64) = 0;
    *(_QWORD *)(a6 + 112) = 0;
    *(_QWORD *)(a6 + 120) = 0;
LABEL_100:
    *(_QWORD *)&v94[34] = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 72) = 1;
    *(_QWORD *)(a6 + 80) = 0;
    *(_BYTE *)(a6 + 88) = 0;
    *(_QWORD *)(a6 + 128) = 1;
    *(_QWORD *)(a6 + 136) = 0;
    *(_BYTE *)(a6 + 144) = 0;
    *(_WORD *)(a6 + 152) = 100;
    *(_OWORD *)(a6 + 170) = v37;
    result = *(double *)&v94[26];
    *(_OWORD *)(a6 + 180) = *(_OWORD *)&v94[26];
    return result;
  }
  *(_QWORD *)v94 = 0x3FF0000000000000;
  v32 = sub_10028EE24(v11, v10, v9, (double *)v94);
  if (v32 == 0.0)
    goto LABEL_47;
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v41 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v41 <= *(double *)v94 * 2.22044605e-16)
LABEL_47:
      v33 = 0;
  }
  *(_QWORD *)v94 = 0x3FF0000000000000;
  v42 = sub_10028EE24(v11, v10, v8, (double *)v94);
  if (v42 == 0.0)
  {
LABEL_64:
    v43 = 0;
    goto LABEL_74;
  }
  if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v42 > 0.0)
      v43 = 1;
    else
      v43 = -1;
  }
  else
  {
    v44 = fabs(v42);
    if (v42 > 0.0)
      v43 = 1;
    else
      v43 = -1;
    if (v44 <= *(double *)v94 * 2.22044605e-16)
      goto LABEL_64;
  }
LABEL_74:
  if (v43 * v33 == 1)
    goto LABEL_99;
  v92 = v43;
  *(_QWORD *)v94 = 0x3FF0000000000000;
  v45 = sub_10028EE24(v9, v8, v11, (double *)v94);
  if (v45 == 0.0)
  {
LABEL_76:
    v91 = 0;
    goto LABEL_87;
  }
  if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v45 > 0.0)
      v47 = 1;
    else
      v47 = -1;
  }
  else
  {
    v46 = fabs(v45);
    if (v45 > 0.0)
      v47 = 1;
    else
      v47 = -1;
    if (v46 <= *(double *)v94 * 2.22044605e-16)
      goto LABEL_76;
  }
  v91 = v47;
LABEL_87:
  *(_QWORD *)v94 = 0x3FF0000000000000;
  v48 = sub_10028EE24(v9, v8, v10, (double *)v94);
  if (v48 == 0.0)
  {
LABEL_88:
    v49 = 0;
    goto LABEL_98;
  }
  if ((*(_QWORD *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v48 > 0.0)
      v49 = 1;
    else
      v49 = -1;
  }
  else
  {
    v50 = fabs(v48);
    if (v48 > 0.0)
      v49 = 1;
    else
      v49 = -1;
    if (v50 <= *(double *)v94 * 2.22044605e-16)
      goto LABEL_88;
  }
LABEL_98:
  if (v49 * v91 == 1)
    goto LABEL_99;
  v52 = *v9;
  v51 = v9[1];
  v53 = *v8 - *v9;
  v54 = v10[1];
  v55 = *v11;
  v56 = v11[1];
  v57 = *v10 - *v11;
  v58 = v8[1] - v51;
  v59 = v54 - v56;
  if (v92 | v33 | v91 | v49)
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = v59 * v53 - v58 * v57;
    if (v64)
    {
      v65 = v58 * v57 - v59 * v53;
      if (v65)
      {
        v66 = (v51 - v56) * v57 + v59 * (v55 - v52);
        v67 = v58 * (v52 - v55) + (v56 - v51) * v53;
        *(_QWORD *)(a1 + 32) = v66;
        *(_QWORD *)(a1 + 40) = v64;
        if (v64 < 0)
        {
          v66 = -v66;
          v64 = -v64;
          *(_QWORD *)(a1 + 32) = v66;
          *(_QWORD *)(a1 + 40) = v64;
        }
        *(double *)(a1 + 48) = (double)v66 * 1000000.0 / (double)v64;
        *(_QWORD *)(a1 + 56) = v67;
        *(_QWORD *)(a1 + 64) = v65;
        if (v65 < 0)
        {
          v67 = -v67;
          v65 = -v65;
          *(_QWORD *)(a1 + 56) = v67;
          *(_QWORD *)(a1 + 64) = v65;
        }
        *(double *)(a1 + 72) = (double)v67 * 1000000.0 / (double)v65;
        v63 = v49;
        v62 = v91;
        v61 = v92;
        v60 = v33;
LABEL_137:
        v74 = v63;
        v75 = v61;
        *(_OWORD *)&v94[40] = xmmword_100393CB0;
        *(_QWORD *)&v94[56] = 0;
        *(_QWORD *)&v95 = 0;
        *((_QWORD *)&v95 + 1) = 1;
        *(_QWORD *)&v96 = 0;
        BYTE8(v96) = 0;
        v97 = xmmword_100393CB0;
        v98 = 0uLL;
        v99 = 1uLL;
        LOBYTE(v100) = 0;
        *(_QWORD *)v94 = 1;
        v76 = v60;
        v77 = (double **)a2;
        v78 = v62;
        sub_1002908B0(a1, (double *)&v94[8], v77, a3);
        BYTE8(v96) = 1;
        *(_OWORD *)&v94[40] = *(_OWORD *)(a1 + 32);
        *(_QWORD *)&v94[56] = *(_QWORD *)(a1 + 48);
        v95 = *(_OWORD *)(a1 + 56);
        *(_QWORD *)&v96 = *(_QWORD *)(a1 + 72);
        if (!(v76 | v78))
        {
          v80 = v74;
          v81 = -1;
          if (v74 == 1)
            v82 = -1;
          else
            v82 = 1;
          if (v74 == 1)
            v83 = 1;
          else
            v83 = -1;
          v84 = 102;
          v85 = -1;
          v79 = v75;
          goto LABEL_189;
        }
        v79 = v75;
        v80 = v74;
        if (!(v75 | v74))
        {
          if (v78 == 1)
            v82 = -1;
          else
            v82 = 1;
          if (v78 == 1)
            v83 = 1;
          else
            v83 = -1;
          v81 = 1;
          v84 = 116;
          v85 = 1;
          goto LABEL_189;
        }
        if (v75 | v78)
        {
          if (v76 | v74)
          {
            if (v78)
            {
              if (v76)
              {
                if (v74)
                {
                  if (v75)
                  {
                    v81 = -1;
                    if (v74 == 1)
                      v82 = -1;
                    else
                      v82 = 1;
                    if (v74 == 1)
                      v83 = 1;
                    else
                      v83 = -1;
                    v84 = 105;
                    v85 = -1;
                    goto LABEL_189;
                  }
                  v85 = 0;
                  if (v74 == 1)
                    v82 = 1;
                  else
                    v82 = -1;
                  v81 = 1;
                }
                else
                {
                  v81 = 0;
                  if (v75 == 1)
                    v82 = 1;
                  else
                    v82 = -1;
                  v85 = 1;
                }
                v84 = 109;
LABEL_178:
                v83 = v82;
LABEL_189:
                v87 = v98;
                *(_OWORD *)(a6 + 96) = v97;
                *(_OWORD *)(a6 + 112) = v87;
                *(_OWORD *)(a6 + 128) = v99;
                *(_QWORD *)(a6 + 144) = v100;
                v88 = *(_OWORD *)&v94[48];
                *(_OWORD *)(a6 + 32) = *(_OWORD *)&v94[32];
                *(_OWORD *)(a6 + 48) = v88;
                v89 = v96;
                *(_OWORD *)(a6 + 64) = v95;
                *(_OWORD *)(a6 + 80) = v89;
                result = *(double *)v94;
                v90 = *(_OWORD *)&v94[16];
                *(_OWORD *)a6 = *(_OWORD *)v94;
                *(_OWORD *)(a6 + 16) = v90;
                *(_BYTE *)(a6 + 152) = v84;
                *(_BYTE *)(a6 + 153) = 0;
                *(_DWORD *)(a6 + 156) = v81;
                *(_DWORD *)(a6 + 160) = v85;
                *(_DWORD *)(a6 + 164) = v82;
                *(_DWORD *)(a6 + 168) = v83;
                *(_DWORD *)(a6 + 172) = v76;
                *(_DWORD *)(a6 + 176) = v79;
                *(_DWORD *)(a6 + 180) = v78;
                *(_DWORD *)(a6 + 184) = v80;
                *(_DWORD *)(a6 + 188) = v81;
                *(_DWORD *)(a6 + 192) = v85;
                return result;
              }
              v85 = 0;
              v86 = v74 == 1;
              v81 = -1;
              if (v74 == 1)
                v82 = -1;
              else
                v82 = 1;
            }
            else
            {
              v81 = 0;
              v86 = v74 == 1;
              v85 = -1;
              if (v74 == 1)
                v82 = -1;
              else
                v82 = 1;
            }
            if (v86)
              v83 = v74;
            else
              v83 = -1;
            v84 = 115;
            goto LABEL_189;
          }
          if (v78 == 1)
            v82 = 1;
          else
            v82 = -1;
          v85 = 1;
          v81 = -1;
        }
        else
        {
          if (v74 == 1)
            v82 = 1;
          else
            v82 = -1;
          v85 = -1;
          v81 = 1;
        }
        v84 = 97;
        goto LABEL_178;
      }
    }
  }
  else
  {
    v60 = v33;
    v61 = v92;
    v62 = v91;
    v63 = v49;
  }
  if (v53 >= 0)
    v68 = *v8 - *v9;
  else
    v68 = *v9 - *v8;
  if (v58 >= 0)
    v69 = v8[1] - v51;
  else
    v69 = v51 - v8[1];
  if (v57 >= 0)
    v70 = *v10 - *v11;
  else
    v70 = *v11 - *v10;
  if (v59 >= 0)
    v71 = v54 - v56;
  else
    v71 = v56 - v54;
  if (v17)
  {
    v72 = v70 >= (unint64_t)v71;
LABEL_135:
    v73 = v72 | 0x100;
    goto LABEL_136;
  }
  if (v23)
  {
    v72 = v68 >= v69;
    goto LABEL_135;
  }
  if (v70 < (uint64_t)v68)
    v68 = v70;
  if (v71 < (uint64_t)v69)
    v69 = v71;
  if (v68 != v69)
  {
    v72 = v68 > v69;
    goto LABEL_135;
  }
  if (v68)
    v73 = 257;
  else
    v73 = 1;
LABEL_136:
  if ((v73 & 0x100) == 0)
    goto LABEL_137;
  if ((v73 & 1) != 0)
    *(_QWORD *)&result = sub_10028E5D4(a2, (__int128 **)a3, v9, v8, v11, v10, v17, v23, a6).n128_u64[0];
  else
    *(_QWORD *)&result = sub_10028E974(a2, (__int128 **)a3, (uint64_t)v9, (uint64_t)v8, (uint64_t)v11, (uint64_t)v10, v17, v23, a6).n128_u64[0];
  return result;
}

__n128 sub_10028E5D4@<Q0>(__int128 **a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 result;
  __int128 v16;
  unsigned __int8 v17;
  uint64_t v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[7];
  _BYTE v36[7];
  _BYTE v37[42];
  __int128 v38;
  __int128 v39;

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_10028EF5C((uint64_t)a1, (uint64_t)a2, *a3, *a4, *a5, *a6, a9);
      return result;
    }
    v12 = *a5 - *a3;
    v13 = *a4 - *a3;
    if (v13 < 0)
    {
      v12 = *a3 - *a5;
      v13 = *a3 - *a4;
    }
    else if (!v13)
    {
      v14 = 0.0;
      if (v12 < 0)
        goto LABEL_23;
LABEL_19:
      if (v12 <= v13)
      {
        v38 = 0uLL;
        v19 = **a2;
        v20 = atomic_load((unsigned __int8 *)&qword_100418C00);
        if ((v20 & 1) == 0)
        {
          v32 = v13;
          v34 = a9;
          v28 = v12;
          v30 = v14;
          v26 = **a2;
          v24 = __cxa_guard_acquire(&qword_100418C00);
          v19 = v26;
          v14 = v30;
          v13 = v32;
          a9 = v34;
          v12 = v28;
          if (v24)
          {
            xmmword_100418BE8 = xmmword_100393CB0;
            qword_100418BF8 = 0;
            __cxa_guard_release(&qword_100418C00);
            v19 = v26;
            v14 = v30;
            v13 = v32;
            a9 = v34;
            v12 = v28;
          }
        }
        v21 = qword_100418BF8;
        memset(&v37[2], 0, 40);
        *(_QWORD *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v19;
        *(_OWORD *)(a9 + 24) = v39;
        *(_QWORD *)(a9 + 40) = v12;
        *(_QWORD *)(a9 + 48) = v13;
        *(double *)(a9 + 56) = v14;
        *(_OWORD *)(a9 + 64) = xmmword_100418BE8;
        *(_QWORD *)(a9 + 80) = v21;
        *(_BYTE *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v36;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v36[3];
        *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
        *(_OWORD *)(a9 + 112) = v38;
        *(_QWORD *)(a9 + 128) = 1;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v14 = (double)v12 * 1000000.0 / (double)v13;
    if (v12 < 0)
      goto LABEL_23;
    goto LABEL_19;
  }
  v9 = *a3 - *a5;
  v10 = *a6 - *a5;
  if (v10 < 0)
  {
    v9 = *a5 - *a3;
    v10 = *a5 - *a6;
LABEL_13:
    v11 = (double)v9 * 1000000.0 / (double)v10;
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_23:
    memset(&v37[2], 0, 32);
    *(_OWORD *)(a9 + 40) = xmmword_100393CB0;
    *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
    v22 = *(_OWORD *)&v37[16];
    *(_OWORD *)(a9 + 154) = *(_OWORD *)v37;
    *(_QWORD *)(a9 + 56) = 0;
    *(_QWORD *)(a9 + 64) = 0;
    *(_QWORD *)(a9 + 112) = 0;
    *(_QWORD *)(a9 + 120) = 0;
    *(_QWORD *)&v37[34] = 0;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 72) = 1;
    *(_QWORD *)(a9 + 80) = 0;
    *(_BYTE *)(a9 + 88) = 0;
    *(_QWORD *)(a9 + 128) = 1;
    *(_QWORD *)(a9 + 136) = 0;
    *(_BYTE *)(a9 + 144) = 0;
    *(_WORD *)(a9 + 152) = 100;
    goto LABEL_24;
  }
  if (v10)
    goto LABEL_13;
  v11 = 0.0;
  if (v9 < 0)
    goto LABEL_23;
LABEL_14:
  if (v9 > v10)
    goto LABEL_23;
  v38 = 0uLL;
  v16 = **a1;
  v17 = atomic_load((unsigned __int8 *)&qword_100418C00);
  if ((v17 & 1) == 0)
  {
    v31 = v10;
    v33 = a9;
    v27 = v9;
    v29 = v11;
    v25 = **a1;
    v23 = __cxa_guard_acquire(&qword_100418C00);
    v16 = v25;
    v11 = v29;
    v10 = v31;
    a9 = v33;
    v9 = v27;
    if (v23)
    {
      xmmword_100418BE8 = xmmword_100393CB0;
      qword_100418BF8 = 0;
      __cxa_guard_release(&qword_100418C00);
      v16 = v25;
      v11 = v29;
      v10 = v31;
      a9 = v33;
      v9 = v27;
    }
  }
  v18 = qword_100418BF8;
  memset(&v37[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_OWORD *)(a9 + 8) = v16;
  *(_OWORD *)(a9 + 24) = v39;
  *(_OWORD *)(a9 + 40) = xmmword_100418BE8;
  *(_QWORD *)(a9 + 56) = v18;
  *(_QWORD *)(a9 + 64) = v9;
  *(_QWORD *)(a9 + 72) = v10;
  *(double *)(a9 + 80) = v11;
  *(_BYTE *)(a9 + 88) = 1;
  *(_DWORD *)(a9 + 89) = *(_DWORD *)v36;
  *(_DWORD *)(a9 + 92) = *(_DWORD *)&v36[3];
  *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
  *(_OWORD *)(a9 + 112) = v38;
  *(_QWORD *)(a9 + 128) = 1;
LABEL_22:
  *(_QWORD *)(a9 + 136) = 0;
  *(_BYTE *)(a9 + 144) = 0;
  *(_DWORD *)(a9 + 145) = *(_DWORD *)v35;
  *(_DWORD *)(a9 + 148) = *(_DWORD *)&v35[3];
  *(_WORD *)(a9 + 152) = 48;
  v22 = *(_OWORD *)&v37[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v37;
LABEL_24:
  *(_OWORD *)(a9 + 170) = v22;
  result = *(__n128 *)&v37[26];
  *(_OWORD *)(a9 + 180) = *(_OWORD *)&v37[26];
  return result;
}

__n128 sub_10028E974@<Q0>(__int128 **a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  __n128 result;
  __int128 v18;
  unsigned __int8 v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[7];
  _BYTE v38[7];
  _BYTE v39[42];
  __int128 v40;
  __int128 v41;

  if (!a7)
  {
    if (!a8)
    {
      result.n128_f64[0] = sub_10028EF5C((uint64_t)a1, (uint64_t)a2, *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(a5 + 8), *(_QWORD *)(a6 + 8), a9);
      return result;
    }
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(a5 + 8) - v13;
    v15 = *(_QWORD *)(a4 + 8) - v13;
    if (v15 < 0)
    {
      v14 = -v14;
      v15 = -v15;
    }
    else if (!v15)
    {
      v16 = 0.0;
      if (v14 < 0)
        goto LABEL_23;
LABEL_19:
      if (v14 <= v15)
      {
        v40 = 0uLL;
        v21 = **a2;
        v22 = atomic_load((unsigned __int8 *)&qword_100418C00);
        if ((v22 & 1) == 0)
        {
          v34 = v15;
          v36 = a9;
          v30 = v14;
          v32 = v16;
          v28 = **a2;
          v26 = __cxa_guard_acquire(&qword_100418C00);
          v21 = v28;
          v16 = v32;
          v15 = v34;
          a9 = v36;
          v14 = v30;
          if (v26)
          {
            xmmword_100418BE8 = xmmword_100393CB0;
            qword_100418BF8 = 0;
            __cxa_guard_release(&qword_100418C00);
            v21 = v28;
            v16 = v32;
            v15 = v34;
            a9 = v36;
            v14 = v30;
          }
        }
        v23 = qword_100418BF8;
        memset(&v39[2], 0, 40);
        *(_QWORD *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v21;
        *(_OWORD *)(a9 + 24) = v41;
        *(_QWORD *)(a9 + 40) = v14;
        *(_QWORD *)(a9 + 48) = v15;
        *(double *)(a9 + 56) = v16;
        *(_OWORD *)(a9 + 64) = xmmword_100418BE8;
        *(_QWORD *)(a9 + 80) = v23;
        *(_BYTE *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v38;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v38[3];
        *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
        *(_OWORD *)(a9 + 112) = v40;
        *(_QWORD *)(a9 + 128) = 1;
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    v16 = (double)v14 * 1000000.0 / (double)v15;
    if (v14 < 0)
      goto LABEL_23;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(a5 + 8);
  v10 = *(_QWORD *)(a3 + 8) - v9;
  v11 = *(_QWORD *)(a6 + 8) - v9;
  if (v11 < 0)
  {
    v10 = -v10;
    v11 = -v11;
LABEL_13:
    v12 = (double)v10 * 1000000.0 / (double)v11;
    if ((v10 & 0x8000000000000000) == 0)
      goto LABEL_14;
LABEL_23:
    memset(&v39[2], 0, 32);
    *(_OWORD *)(a9 + 40) = xmmword_100393CB0;
    *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
    v24 = *(_OWORD *)&v39[16];
    *(_OWORD *)(a9 + 154) = *(_OWORD *)v39;
    *(_QWORD *)(a9 + 56) = 0;
    *(_QWORD *)(a9 + 64) = 0;
    *(_QWORD *)(a9 + 112) = 0;
    *(_QWORD *)(a9 + 120) = 0;
    *(_QWORD *)&v39[34] = 0;
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 72) = 1;
    *(_QWORD *)(a9 + 80) = 0;
    *(_BYTE *)(a9 + 88) = 0;
    *(_QWORD *)(a9 + 128) = 1;
    *(_QWORD *)(a9 + 136) = 0;
    *(_BYTE *)(a9 + 144) = 0;
    *(_WORD *)(a9 + 152) = 100;
    goto LABEL_24;
  }
  if (v11)
    goto LABEL_13;
  v12 = 0.0;
  if (v10 < 0)
    goto LABEL_23;
LABEL_14:
  if (v10 > v11)
    goto LABEL_23;
  v40 = 0uLL;
  v18 = **a1;
  v19 = atomic_load((unsigned __int8 *)&qword_100418C00);
  if ((v19 & 1) == 0)
  {
    v33 = v11;
    v35 = a9;
    v29 = v10;
    v31 = v12;
    v27 = **a1;
    v25 = __cxa_guard_acquire(&qword_100418C00);
    v18 = v27;
    v12 = v31;
    v11 = v33;
    a9 = v35;
    v10 = v29;
    if (v25)
    {
      xmmword_100418BE8 = xmmword_100393CB0;
      qword_100418BF8 = 0;
      __cxa_guard_release(&qword_100418C00);
      v18 = v27;
      v12 = v31;
      v11 = v33;
      a9 = v35;
      v10 = v29;
    }
  }
  v20 = qword_100418BF8;
  memset(&v39[2], 0, 40);
  *(_QWORD *)a9 = 1;
  *(_OWORD *)(a9 + 8) = v18;
  *(_OWORD *)(a9 + 24) = v41;
  *(_OWORD *)(a9 + 40) = xmmword_100418BE8;
  *(_QWORD *)(a9 + 56) = v20;
  *(_QWORD *)(a9 + 64) = v10;
  *(_QWORD *)(a9 + 72) = v11;
  *(double *)(a9 + 80) = v12;
  *(_BYTE *)(a9 + 88) = 1;
  *(_DWORD *)(a9 + 89) = *(_DWORD *)v38;
  *(_DWORD *)(a9 + 92) = *(_DWORD *)&v38[3];
  *(_OWORD *)(a9 + 96) = xmmword_100393CB0;
  *(_OWORD *)(a9 + 112) = v40;
  *(_QWORD *)(a9 + 128) = 1;
LABEL_22:
  *(_QWORD *)(a9 + 136) = 0;
  *(_BYTE *)(a9 + 144) = 0;
  *(_DWORD *)(a9 + 145) = *(_DWORD *)v37;
  *(_DWORD *)(a9 + 148) = *(_DWORD *)&v37[3];
  *(_WORD *)(a9 + 152) = 48;
  v24 = *(_OWORD *)&v39[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v39;
LABEL_24:
  *(_OWORD *)(a9 + 170) = v24;
  result = *(__n128 *)&v39[26];
  *(_OWORD *)(a9 + 180) = *(_OWORD *)&v39[26];
  return result;
}

uint64_t sub_10028ED14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (!*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 80))
    {
      sub_10028DB80(*(_QWORD *)a1, *(double **)(v2 + 24), v2 + 32);
      *(_OWORD *)(v2 + 64) = *(_OWORD *)*(_QWORD *)(v2 + 32);
      *(_BYTE *)(v2 + 80) = 1;
    }
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (double)*(uint64_t *)(v3 + 24) + (*(double *)(v2 + 72) - *(double *)(v3 + 8)) * *(double *)(v3 + 32);
    if (v4 >= 0.0)
      v5 = 0.5;
    else
      v5 = -0.5;
    v6 = v4 + v5;
    sub_100284F14(v4 + v5);
    v7 = ceil(v6);
    v8 = floor(v6);
    if (v6 >= 0.0)
      v7 = v8;
    *(_QWORD *)(a1 + 40) = (uint64_t)v7;
    v9 = (double)*(uint64_t *)(v3 + 16) + (*(double *)(v2 + 64) - *(double *)v3) * *(double *)(v3 + 32);
    if (v9 >= 0.0)
      v10 = 0.5;
    else
      v10 = -0.5;
    v11 = v9 + v10;
    sub_100284F14(v9 + v10);
    v12 = ceil(v11);
    v13 = floor(v11);
    if (v11 >= 0.0)
      v12 = v13;
    *(_QWORD *)(a1 + 32) = (uint64_t)v12;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1 + 32;
}

double sub_10028EE24(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;
  double v19[2];
  double v20[2];
  double v21[2];
  double v22;
  double v23[2];
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];
  double v28[2];

  v4 = (double)a1[1];
  v21[0] = (double)*a1;
  v21[1] = v4;
  v5 = (double)*a2;
  v6 = (double)a2[1];
  v20[0] = v5;
  v20[1] = v6;
  v7 = (double)a3[1];
  v19[0] = (double)*a3;
  v19[1] = v7;
  v8 = v21[0] - v19[0];
  v28[0] = v21[0] - v19[0];
  v9 = v6 - v7;
  v27[0] = v6 - v7;
  v10 = v4 - v7;
  v26[0] = v4 - v7;
  v11 = v5 - v19[0];
  v25[0] = v5 - v19[0];
  v12 = vabdd_f64(v21[0], v19[0]);
  v13 = vabdd_f64(v6, v7);
  v14 = vabdd_f64(v4, v7);
  v15 = vabdd_f64(v5, v19[0]);
  if (v12 < v13)
    v12 = v13;
  if (v12 < v14)
    v12 = v14;
  if (v12 < v15)
    v12 = v15;
  if (v12 < 1.0)
    v12 = 1.0;
  *a4 = v12;
  v16 = v8 * v9;
  v24[0] = v8 * v9;
  v17 = v11 * v10;
  result = v8 * v9 - v11 * v10;
  v22 = fabs(v8 * v9) + fabs(v11 * v10);
  v23[0] = v11 * v10;
  if (vabdd_f64(v8 * v9, v11 * v10) < v22 * 3.33066907e-16 && (v16 <= 0.0 || v17 > 0.0) && (v16 >= 0.0 || v17 < 0.0))
    return sub_1001D0954(v21, v20, v19, v28, v27, v26, v25, v24, v23, &v22);
  return result;
}

double sub_10028EF5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  double *v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  double result;
  __int128 v30;
  __int128 v31;
  double v32;
  __int128 v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int64x2_t v38;
  double v39;
  _BYTE v40[42];

  v7 = a4 - a3;
  v8 = a4 - a3;
  v9 = a6 - a5;
  v10 = a6 - a5;
  v11 = a3 - a5;
  v38.i64[0] = a3 - a5;
  v38.i64[1] = a6 - a5;
  if (a6 - a5 < 0)
  {
    v11 = a5 - a3;
    v12 = a5 - a6;
    v38.i64[0] = a5 - a3;
    v38.i64[1] = a5 - a6;
LABEL_6:
    v39 = (double)v11 * 1000000.0 / (double)v12;
    v15 = a4 - a5;
    v35 = a4 - a5;
    v36 = a6 - a5;
    if (v10 < 0)
    {
      v15 = a5 - a4;
      v10 = a5 - a6;
      v35 = a5 - a4;
      v36 = a5 - a6;
    }
    v37 = (double)v15 * 1000000.0 / (double)v10;
    v13 = a5 - a3;
    *(_QWORD *)&v33 = a5 - a3;
    *((_QWORD *)&v33 + 1) = a4 - a3;
    if (v8 < 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  v12 = a6 - a5;
  if (v10)
    goto LABEL_6;
  v39 = 0.0;
  v35 = a4 - a5;
  v36 = 0;
  v37 = 0.0;
  v13 = a5 - a3;
  *(_QWORD *)&v33 = a5 - a3;
  *((_QWORD *)&v33 + 1) = a4 - a3;
  if (v8 < 0)
  {
LABEL_4:
    v13 = -v13;
    v14 = a3 - a4;
    *(_QWORD *)&v33 = v13;
    *((_QWORD *)&v33 + 1) = a3 - a4;
    goto LABEL_10;
  }
LABEL_9:
  v14 = a4 - a3;
  if (!v8)
  {
    v16 = &v34;
    v34 = 0.0;
    v31 = (unint64_t)(a6 - a3);
    v32 = 0.0;
    if (a3 == a5)
      goto LABEL_13;
LABEL_19:
    if (a6 == a3)
    {
      v18 = 3;
      if (a4 != a5)
        goto LABEL_62;
      goto LABEL_21;
    }
    if (a6 <= a5)
    {
      if (a3 <= a5)
      {
        if (a6 <= a3)
          v18 = 2;
        else
          v18 = 4;
        if (a4 != a5)
          goto LABEL_62;
LABEL_21:
        v20 = 3;
        v19 = 1;
        v21 = (char *)&v33 + 8;
        if (a6 != a3)
          goto LABEL_22;
        goto LABEL_15;
      }
    }
    else if (a3 >= a5)
    {
      if (a6 >= a3)
        v18 = 2;
      else
        v18 = 4;
      if (a4 != a5)
        goto LABEL_62;
      goto LABEL_21;
    }
    v18 = 0;
    if (a4 != a5)
      goto LABEL_62;
    goto LABEL_21;
  }
LABEL_10:
  v16 = &v34;
  v34 = (double)v13 * 1000000.0 / (double)v14;
  v17 = a6 - a3;
  *(_QWORD *)&v31 = a6 - a3;
  *((_QWORD *)&v31 + 1) = a4 - a3;
  if (v8 < 0)
  {
    v17 = a3 - a6;
    v8 = a3 - a4;
    *(_QWORD *)&v31 = a3 - a6;
    *((_QWORD *)&v31 + 1) = a3 - a4;
  }
  v32 = (double)v17 * 1000000.0 / (double)v8;
  if (a3 != a5)
    goto LABEL_19;
LABEL_13:
  v18 = 1;
  v19 = 1;
  v20 = 1;
  if (a4 == a3)
  {
    v21 = (char *)&v33 + 8;
    if (a6 == a3)
      goto LABEL_15;
LABEL_22:
    if (a6 == a4)
    {
      v22 = 3;
      if (v18 != 3)
        goto LABEL_16;
    }
    else
    {
      if (a4 <= a3)
      {
        if (a6 <= a3)
        {
          if (a6 >= a4)
            v22 = 2;
          else
            v22 = 4;
          if (v18 != 3)
            goto LABEL_16;
          goto LABEL_24;
        }
      }
      else if (a6 >= a3)
      {
        if (a6 <= a4)
          v22 = 2;
        else
          v22 = 4;
        if (v18 != 3)
          goto LABEL_16;
        goto LABEL_24;
      }
      v22 = 0;
      if (v18 != 3)
        goto LABEL_16;
    }
LABEL_24:
    v38 = vdupq_n_s64(1uLL);
    v39 = 1000000.0;
    *(_QWORD *)&v31 = 0;
    v23 = (char *)&v31 + 8;
    v24 = &v32;
    goto LABEL_25;
  }
LABEL_62:
  if (a4 != a6)
  {
    if (a6 <= a5)
    {
      if (a4 <= a5)
      {
        if (a4 >= a6)
          v19 = 2;
        else
          v19 = 4;
        if (a3 != a5)
          goto LABEL_78;
LABEL_64:
        v20 = 1;
        v21 = (char *)&v33 + 8;
        if (a6 != a3)
          goto LABEL_22;
        goto LABEL_15;
      }
    }
    else if (a4 >= a5)
    {
      if (a4 <= a6)
        v19 = 2;
      else
        v19 = 4;
      if (a3 != a5)
        goto LABEL_78;
      goto LABEL_64;
    }
    v19 = 0;
    if (a3 != a5)
      goto LABEL_78;
    goto LABEL_64;
  }
  v19 = 3;
  if (a3 == a5)
    goto LABEL_64;
LABEL_78:
  if (a4 > a3)
  {
    if (a5 >= a3)
    {
      if (a4 >= a5)
        v20 = 2;
      else
        v20 = 4;
      v21 = (char *)&v33 + 8;
      if (a6 != a3)
        goto LABEL_22;
      goto LABEL_15;
    }
LABEL_86:
    v20 = 0;
    v21 = (char *)&v33 + 8;
    if (a6 != a3)
      goto LABEL_22;
    goto LABEL_15;
  }
  if (a5 > a3)
    goto LABEL_86;
  if (a4 <= a5)
    v20 = 2;
  else
    v20 = 4;
  v21 = (char *)&v33 + 8;
  if (a6 != a3)
    goto LABEL_22;
LABEL_15:
  v22 = 1;
  if (v18 == 3)
    goto LABEL_24;
LABEL_16:
  if (v18 != 1)
    goto LABEL_26;
  v38 = (int64x2_t)xmmword_100393CB0;
  v39 = 0.0;
  *(_QWORD *)&v33 = 0;
  v23 = (char *)&v33 + 8;
  v24 = &v34;
LABEL_25:
  *(_QWORD *)v23 = 1;
  *v24 = 0.0;
LABEL_26:
  if (v19 == 3)
  {
    v35 = 1;
    v36 = 1;
    v37 = 1000000.0;
    *(_QWORD *)&v31 = 1;
    v21 = (char *)&v31 + 8;
    v16 = &v32;
    goto LABEL_30;
  }
  if (v19 == 1)
  {
    v35 = 0;
    v36 = 1;
    v37 = 0.0;
    *(_QWORD *)&v33 = 1;
LABEL_30:
    *(_QWORD *)v21 = 1;
    *v16 = 1000000.0;
    goto LABEL_31;
  }
  if (!(v19 | v18) || v18 >= 4 && v19 >= 4)
  {
    memset(&v40[2], 0, 40);
    *(_OWORD *)(a7 + 40) = xmmword_100393CB0;
    *(_OWORD *)(a7 + 96) = xmmword_100393CB0;
    v30 = *(_OWORD *)&v40[16];
    *(_OWORD *)(a7 + 154) = *(_OWORD *)v40;
    *(_QWORD *)(a7 + 56) = 0;
    *(_QWORD *)(a7 + 64) = 0;
    *(_QWORD *)(a7 + 112) = 0;
    *(_QWORD *)(a7 + 120) = 0;
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 72) = 1;
    *(_QWORD *)(a7 + 80) = 0;
    *(_BYTE *)(a7 + 88) = 0;
    *(_QWORD *)(a7 + 128) = 1;
    *(_QWORD *)(a7 + 136) = 0;
    *(_BYTE *)(a7 + 144) = 0;
    *(_WORD *)(a7 + 152) = 100;
    *(_OWORD *)(a7 + 170) = v30;
    result = *(double *)&v40[26];
    *(_OWORD *)(a7 + 180) = *(_OWORD *)&v40[26];
    return result;
  }
LABEL_31:
  v25 = v7 <= 0;
  if (v7)
    v26 = -1;
  else
    v26 = 0;
  if (!v25)
    v26 = 1;
  v27 = v9 <= 0;
  if (v9)
    v28 = -1;
  else
    v28 = 0;
  if (!v27)
    v28 = 1;
  sub_10028F4CC(a1, a2, v26 != v28, v18, v19, v20, v22, (uint64_t)&v38, a7, (uint64_t)&v35, &v33, &v31);
  return result;
}

void sub_10028F4CC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int128 *a11, __int128 *a12)
{
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  unsigned int v22;
  int v23;
  int v25;
  unsigned int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  int v32;
  _BOOL4 v34;
  _BOOL4 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  _OWORD v43[9];
  uint64_t v44;
  _BYTE v45[34];

  if ((a5 & 0xFFFFFFFD) == 1)
    v16 = 0;
  else
    v16 = -1;
  v17 = (a4 - 4) < 0xFFFFFFFD;
  v18 = (a4 & 0xFFFFFFFD) != 1;
  v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC)
    v18 = 0;
  if (a5 == 2)
    v20 = 1;
  else
    v20 = v16;
  if (a5 == 2)
    v21 = v18;
  else
    v21 = (a4 - 4) < 0xFFFFFFFD;
  v22 = a5 - 1;
  if ((a5 & 0xFFFFFFFD) == 1)
    v23 = !v19;
  else
    v23 = v21;
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3)
    v25 = !v19;
  else
    v25 = v23 + 1;
  sub_10028F6DC(a1, a2, a4, a5, a6, a7, a8, (uint64_t)v43, a10, a11, a12);
  memset(&v45[2], 0, 32);
  v26 = a7 & 0xFFFFFFFD;
  v27 = (a6 - 4) < 0xFFFFFFFD;
  v28 = (a6 & 0xFFFFFFFD) != 1;
  v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC)
    v28 = 0;
  v30 = !v29;
  if (a7 != 2)
    v28 = (a6 - 4) < 0xFFFFFFFD;
  v31 = a7 - 1;
  if (v26 == 1)
    v32 = v30;
  else
    v32 = v28;
  if (v26 == 1 && v31 < 3)
    v30 = v32 + 1;
  v34 = v23 == 0;
  if (v22 < 3)
    v34 = v17;
  v35 = v32 == 0;
  if (v31 >= 3)
    v27 = v35;
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (a3)
    {
      if (v20)
        v36 = 102;
      else
        v36 = 116;
    }
    else
    {
      v36 = 97;
    }
  }
  else
  {
    v36 = 99;
    if (v25 == 2 && v30 == 2)
      v36 = 101;
  }
  v37 = v43[7];
  *(_OWORD *)(a9 + 96) = v43[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v43[8];
  v38 = v43[3];
  *(_OWORD *)(a9 + 32) = v43[2];
  *(_OWORD *)(a9 + 48) = v38;
  v39 = v43[5];
  *(_OWORD *)(a9 + 64) = v43[4];
  *(_OWORD *)(a9 + 80) = v39;
  v40 = v43[1];
  *(_OWORD *)a9 = v43[0];
  *(_OWORD *)(a9 + 16) = v40;
  v41 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v45;
  if (v26 == 1)
    v42 = 0;
  else
    v42 = -1;
  if (a7 == 2)
    v42 = 1;
  *(_QWORD *)(a9 + 144) = v44;
  *(_BYTE *)(a9 + 152) = v36;
  *(_BYTE *)(a9 + 153) = a3;
  *(_OWORD *)(a9 + 170) = v41;
  *(_WORD *)(a9 + 186) = *(_WORD *)&v45[32];
  *(_DWORD *)(a9 + 188) = v20;
  *(_DWORD *)(a9 + 192) = v42;
}

void sub_10028F6DC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, __int128 *a10, __int128 *a11)
{
  unsigned int v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  __int128 *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  char *v32;
  __int128 *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  unint64_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  unint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  double v103;
  __int128 v104;
  double v105;

  v12 = 0;
  *(_QWORD *)a8 = 0;
  v13 = xmmword_100393CB0;
  *(_OWORD *)(a8 + 40) = xmmword_100393CB0;
  v14 = (__int128 *)(a8 + 40);
  *(_QWORD *)(a8 + 56) = 0;
  *(_QWORD *)(a8 + 64) = 0;
  *(_QWORD *)(a8 + 72) = 1;
  *(_QWORD *)(a8 + 80) = 0;
  *(_BYTE *)(a8 + 88) = 0;
  *(_OWORD *)(a8 + 96) = xmmword_100393CB0;
  v15 = (__int128 *)(a8 + 96);
  *(_QWORD *)(a8 + 112) = 0;
  *(_QWORD *)(a8 + 120) = 0;
  *(_QWORD *)(a8 + 128) = 1;
  *(_QWORD *)(a8 + 136) = 0;
  *(_BYTE *)(a8 + 144) = 0;
  v102 = xmmword_100393CB0;
  v103 = 0.0;
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v104 + 1) = 1;
  v105 = 0.0;
  if ((a3 - 1) <= 2)
  {
    *(_OWORD *)(a8 + 8) = *(_OWORD *)*(_QWORD *)a1;
    v16 = atomic_load((unsigned __int8 *)&qword_100418C00);
    if ((v16 & 1) == 0)
    {
      v91 = a1;
      v95 = a2;
      v69 = a6;
      v88 = a4;
      v84 = a5;
      v85 = a7;
      v70 = __cxa_guard_acquire(&qword_100418C00);
      v13 = xmmword_100393CB0;
      a7 = v85;
      a5 = v84;
      a4 = v88;
      a6 = v69;
      v71 = v70;
      a1 = v91;
      a2 = v95;
      if (v71)
      {
        xmmword_100418BE8 = xmmword_100393CB0;
        qword_100418BF8 = 0;
        __cxa_guard_release(&qword_100418C00);
        v13 = xmmword_100393CB0;
        a7 = v85;
        a5 = v84;
        a4 = v88;
        a1 = v91;
        a2 = v95;
        a6 = v69;
      }
    }
    *v14 = xmmword_100418BE8;
    *((_QWORD *)v14 + 2) = qword_100418BF8;
    *(_BYTE *)(a8 + 88) = 1;
    *(_OWORD *)(a8 + 64) = *(_OWORD *)a7;
    *(_QWORD *)(a8 + 80) = *(_QWORD *)(a7 + 16);
    v17 = atomic_load((unsigned __int8 *)&qword_100418C00);
    if ((v17 & 1) == 0)
    {
      v92 = a1;
      v96 = a2;
      v72 = a6;
      v89 = a4;
      v73 = a5;
      v86 = v13;
      v74 = __cxa_guard_acquire(&qword_100418C00);
      v13 = v86;
      a5 = v73;
      a4 = v89;
      a6 = v72;
      v75 = v74;
      a1 = v92;
      a2 = v96;
      if (v75)
      {
        xmmword_100418BE8 = v86;
        qword_100418BF8 = 0;
        __cxa_guard_release(&qword_100418C00);
        v13 = v86;
        a5 = v73;
        a4 = v89;
        a1 = v92;
        a2 = v96;
        a6 = v72;
      }
    }
    v102 = xmmword_100418BE8;
    v103 = *(double *)&qword_100418BF8;
    v12 = 1;
    if (a5 != 2)
    {
LABEL_3:
      if ((a4 - 1) > 2)
        goto LABEL_14;
      goto LABEL_10;
    }
  }
  else if (a5 != 2)
  {
    goto LABEL_3;
  }
  v18 = a10;
  v19 = v12;
  *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(_QWORD *)a2;
  v20 = a8 + 56 * v12 + 40;
  v21 = atomic_load((unsigned __int8 *)&qword_100418C00);
  if ((v21 & 1) == 0)
  {
    v93 = a1;
    v97 = a2;
    v76 = a6;
    v90 = a4;
    v87 = v13;
    v77 = __cxa_guard_acquire(&qword_100418C00);
    v20 = a8 + 56 * v12 + 40;
    v18 = a10;
    v19 = v12;
    a4 = v90;
    a6 = v76;
    v78 = v77;
    a1 = v93;
    a2 = v97;
    if (v78)
    {
      xmmword_100418BE8 = v87;
      qword_100418BF8 = 0;
      __cxa_guard_release(&qword_100418C00);
      v20 = a8 + 56 * v12 + 40;
      v18 = a10;
      v19 = v12;
      a4 = v90;
      a1 = v93;
      a2 = v97;
      a6 = v76;
    }
  }
  v22 = a8 + 56 * v19;
  *(_BYTE *)(v22 + 88) = 1;
  v23 = *v18;
  *(_OWORD *)v20 = *v18;
  v24 = *((_QWORD *)v18 + 2);
  *(_QWORD *)(v20 + 16) = v24;
  *(_OWORD *)(v22 + 64) = xmmword_100418BE8;
  *(_QWORD *)(v22 + 80) = qword_100418BF8;
  v25 = (char *)&v102 + 24 * v19;
  *(_OWORD *)v25 = v23;
  *((_QWORD *)v25 + 2) = v24;
  ++v12;
  if ((a4 - 1) <= 2)
  {
LABEL_10:
    if (v12 <= 1)
    {
      v26 = a9;
      v27 = v12;
      *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(_QWORD *)(a1 + 8);
      v28 = a8 + 56 * v12 + 40;
      v29 = atomic_load((unsigned __int8 *)&qword_100418C20);
      if ((v29 & 1) == 0)
      {
        v98 = a2;
        v79 = a6;
        v80 = __cxa_guard_acquire(&qword_100418C20);
        v28 = a8 + 56 * v12 + 40;
        v27 = v12;
        v26 = a9;
        a6 = v79;
        a2 = v98;
        if (v80)
        {
          xmmword_100418C08 = (__int128)vdupq_n_s64(1uLL);
          qword_100418C18 = 0x412E848000000000;
          __cxa_guard_release(&qword_100418C20);
          v28 = a8 + 56 * v12 + 40;
          v27 = v12;
          v26 = a9;
          a6 = v79;
          a2 = v98;
        }
      }
      v30 = a8 + 56 * v27;
      *(_BYTE *)(v30 + 88) = 1;
      *(_OWORD *)v28 = xmmword_100418C08;
      *(_QWORD *)(v28 + 16) = qword_100418C18;
      *(_OWORD *)(v30 + 64) = *(_OWORD *)v26;
      *(_QWORD *)(v30 + 80) = *(_QWORD *)(v26 + 16);
      v31 = atomic_load((unsigned __int8 *)&qword_100418C20);
      if ((v31 & 1) == 0)
      {
        v94 = v27;
        v99 = a2;
        v81 = a6;
        v82 = __cxa_guard_acquire(&qword_100418C20);
        v27 = v94;
        a2 = v99;
        a6 = v81;
        if (v82)
        {
          xmmword_100418C08 = (__int128)vdupq_n_s64(1uLL);
          qword_100418C18 = 0x412E848000000000;
          __cxa_guard_release(&qword_100418C20);
          v27 = v94;
          a2 = v99;
          a6 = v81;
        }
      }
      v32 = (char *)&v102 + 24 * v27;
      *(_OWORD *)v32 = xmmword_100418C08;
      *((_QWORD *)v32 + 2) = qword_100418C18;
      ++v12;
    }
  }
LABEL_14:
  if (a6 == 2 && v12 <= 1)
  {
    v33 = a11;
    v34 = v12;
    *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(_QWORD *)(a2 + 8);
    v35 = a8 + 56 * v12 + 40;
    v36 = atomic_load((unsigned __int8 *)&qword_100418C20);
    if ((v36 & 1) == 0)
    {
      v83 = __cxa_guard_acquire(&qword_100418C20);
      v34 = v12;
      v35 = a8 + 56 * v12 + 40;
      v33 = a11;
      if (v83)
      {
        xmmword_100418C08 = (__int128)vdupq_n_s64(1uLL);
        qword_100418C18 = 0x412E848000000000;
        __cxa_guard_release(&qword_100418C20);
        v34 = v12;
        v35 = a8 + 56 * v12 + 40;
        v33 = a11;
      }
    }
    v37 = a8 + 56 * v34;
    *(_BYTE *)(v37 + 88) = 1;
    v38 = *v33;
    *(_OWORD *)v35 = *v33;
    v39 = *((_QWORD *)v33 + 2);
    *(_QWORD *)(v35 + 16) = v39;
    *(_OWORD *)(v37 + 64) = xmmword_100418C08;
    *(_QWORD *)(v37 + 80) = qword_100418C18;
    v40 = (char *)&v102 + 24 * v34;
    *(_OWORD *)v40 = v38;
    *((_QWORD *)v40 + 2) = v39;
    ++v12;
  }
  if (v12 != 2)
    goto LABEL_45;
  if (vabdd_f64(v105, v103) >= 50.0)
  {
    if (v105 >= v103)
      goto LABEL_45;
    goto LABEL_44;
  }
  v101 = v104;
  sub_1002900F4((int64_t)&v101);
  v100 = v102;
  sub_1002900F4((int64_t)&v100);
  v41 = *((_QWORD *)&v101 + 1);
  v42 = (uint64_t)v101 / *((_QWORD *)&v101 + 1);
  v43 = (uint64_t)v101 % *((_QWORD *)&v101 + 1);
  v44 = *((_QWORD *)&v100 + 1);
  v45 = (uint64_t)v100 / *((_QWORD *)&v100 + 1);
  v46 = (uint64_t)v100 % *((_QWORD *)&v100 + 1);
  if ((uint64_t)v101 % *((_QWORD *)&v101 + 1) < 0)
  {
    v47 = ((unint64_t)(*((_QWORD *)&v101 + 1) + v43) >> 63)
        + (((*((_QWORD *)&v101 + 1) + v43) & ~((*((_QWORD *)&v101 + 1) + v43) >> 63))
         - (((unint64_t)(*((_QWORD *)&v101 + 1) + v43) >> 63)
          + *((_QWORD *)&v101 + 1)
          + v43))
        / *((_QWORD *)&v101 + 1)
        + 1;
    if (v47 < 4)
      goto LABEL_63;
    v43 += (v47 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v101 + 1);
    v48 = 0uLL;
    v49 = (int64x2_t)(unint64_t)((uint64_t)v101 / *((_QWORD *)&v101 + 1));
    v50.i64[0] = -1;
    v50.i64[1] = -1;
    v51 = v47 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v49 = vaddq_s64(v49, v50);
      v48 = vaddq_s64(v48, v50);
      v51 -= 4;
    }
    while (v51);
    v42 = vaddvq_s64(vaddq_s64(v48, v49));
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        v43 += *((_QWORD *)&v101 + 1);
        --v42;
      }
      while (v43 < 0);
    }
  }
  if (v46 < 0)
  {
    v52 = ((unint64_t)(*((_QWORD *)&v100 + 1) + v46) >> 63)
        + (((*((_QWORD *)&v100 + 1) + v46) & ~((*((_QWORD *)&v100 + 1) + v46) >> 63))
         - (((unint64_t)(*((_QWORD *)&v100 + 1) + v46) >> 63)
          + *((_QWORD *)&v100 + 1)
          + v46))
        / *((_QWORD *)&v100 + 1)
        + 1;
    if (v52 < 4)
      goto LABEL_64;
    v46 += (v52 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v100 + 1);
    v53 = 0uLL;
    v54 = (int64x2_t)(unint64_t)((uint64_t)v100 / *((_QWORD *)&v100 + 1));
    v55.i64[0] = -1;
    v55.i64[1] = -1;
    v56 = v52 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v54 = vaddq_s64(v54, v55);
      v53 = vaddq_s64(v53, v55);
      v56 -= 4;
    }
    while (v56);
    v45 = vaddvq_s64(vaddq_s64(v53, v54));
    if (v52 != (v52 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_64:
      do
      {
        v46 += *((_QWORD *)&v100 + 1);
        --v45;
      }
      while (v46 < 0);
    }
  }
  v57 = v42 < v45;
  if (v42 != v45)
  {
LABEL_42:
    if (!v57)
      goto LABEL_45;
LABEL_44:
    v63 = *((_QWORD *)v14 + 6);
    v65 = v14[1];
    v64 = v14[2];
    v66 = *v14;
    v67 = *(_OWORD *)(a8 + 112);
    *v14 = *v15;
    v14[1] = v67;
    v14[2] = *(_OWORD *)(a8 + 128);
    *((_BYTE *)v14 + 48) = *(_BYTE *)(a8 + 144);
    *v15 = v66;
    *(_OWORD *)(a8 + 112) = v65;
    *(_OWORD *)(a8 + 128) = v64;
    *(_BYTE *)(a8 + 144) = v63;
    v68 = *(_OWORD *)(a8 + 8);
    *(_OWORD *)(a8 + 8) = *(_OWORD *)(a8 + 24);
    *(_OWORD *)(a8 + 24) = v68;
    goto LABEL_45;
  }
  v58 = 0;
  do
  {
    v59 = v43;
    v60 = v46;
    v58 ^= 1u;
    if (!v43 || !v46)
    {
      if (v43 != v46 && (v58 != 0) != (v43 != 0))
        goto LABEL_44;
      goto LABEL_45;
    }
    v61 = v41 / v43;
    v43 = v41 % v43;
    v62 = v44 / v46;
    v46 = v44 % v46;
    v44 = v60;
    v41 = v59;
  }
  while (v61 == v62);
  v57 = v61 < v62;
  if (!v58)
    goto LABEL_42;
  if (v61 > v62)
    goto LABEL_44;
LABEL_45:
  *(_QWORD *)a8 = v12;
}

BOOL sub_10028FED4(double *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 result;
  __int128 v27;
  __int128 v28;

  v2 = a1[2];
  v3 = a2[2];
  if (vabdd_f64(v2, v3) >= 50.0)
    return v2 < v3;
  v28 = *(_OWORD *)a1;
  sub_1002900F4((int64_t)&v28);
  v27 = *(_OWORD *)a2;
  sub_1002900F4((int64_t)&v27);
  v5 = *((_QWORD *)&v28 + 1);
  v6 = (uint64_t)v28 / *((_QWORD *)&v28 + 1);
  v7 = (uint64_t)v28 % *((_QWORD *)&v28 + 1);
  v8 = *((_QWORD *)&v27 + 1);
  v9 = (uint64_t)v27 / *((_QWORD *)&v27 + 1);
  v10 = (uint64_t)v27 % *((_QWORD *)&v27 + 1);
  if ((uint64_t)v28 % *((_QWORD *)&v28 + 1) < 0)
  {
    v11 = ((unint64_t)(*((_QWORD *)&v28 + 1) + v7) >> 63)
        + (((*((_QWORD *)&v28 + 1) + v7) & ~((*((_QWORD *)&v28 + 1) + v7) >> 63))
         - (((unint64_t)(*((_QWORD *)&v28 + 1) + v7) >> 63)
          + *((_QWORD *)&v28 + 1)
          + v7))
        / *((_QWORD *)&v28 + 1)
        + 1;
    if (v11 < 4)
      goto LABEL_29;
    v7 += (v11 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v28 + 1);
    v12 = 0uLL;
    v13 = (int64x2_t)(unint64_t)((uint64_t)v28 / *((_QWORD *)&v28 + 1));
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    v15 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13 = vaddq_s64(v13, v14);
      v12 = vaddq_s64(v12, v14);
      v15 -= 4;
    }
    while (v15);
    v6 = vaddvq_s64(vaddq_s64(v12, v13));
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        v7 += *((_QWORD *)&v28 + 1);
        --v6;
      }
      while (v7 < 0);
    }
  }
  if (v10 < 0)
  {
    v16 = ((unint64_t)(*((_QWORD *)&v27 + 1) + v10) >> 63)
        + (((*((_QWORD *)&v27 + 1) + v10) & ~((*((_QWORD *)&v27 + 1) + v10) >> 63))
         - (((unint64_t)(*((_QWORD *)&v27 + 1) + v10) >> 63)
          + *((_QWORD *)&v27 + 1)
          + v10))
        / *((_QWORD *)&v27 + 1)
        + 1;
    if (v16 < 4)
      goto LABEL_30;
    v10 += (v16 & 0xFFFFFFFFFFFFFFFCLL) * *((_QWORD *)&v27 + 1);
    v17 = 0uLL;
    v18 = (int64x2_t)(unint64_t)((uint64_t)v27 / *((_QWORD *)&v27 + 1));
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v18 = vaddq_s64(v18, v19);
      v17 = vaddq_s64(v17, v19);
      v20 -= 4;
    }
    while (v20);
    v9 = vaddvq_s64(vaddq_s64(v17, v18));
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v10 += *((_QWORD *)&v27 + 1);
        --v9;
      }
      while (v10 < 0);
    }
  }
  if (v6 != v9)
    return v6 < v9;
  v21 = 0;
  while (1)
  {
    v22 = v7;
    v23 = v10;
    v21 ^= 1u;
    if (!v7 || !v10)
      break;
    v24 = v5 / v7;
    v7 = v5 % v7;
    v25 = v8 / v10;
    v10 = v8 % v10;
    v8 = v23;
    v5 = v22;
    if (v24 != v25)
    {
      result = v24 > v25;
      if (!v21)
        return v24 < v25;
      return result;
    }
  }
  if (v7 == v10)
    return 0;
  else
    return (v21 != 0) ^ (v7 != 0);
}

int64_t sub_1002900F4(int64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  std::logic_error v7;

  v1 = (_QWORD *)(result + 8);
  if (!*(_QWORD *)(result + 8))
  {
    std::logic_error::logic_error(&v7, "bad rational: zero denominator");
    v7.__vftable = (std::logic_error_vtbl *)&off_100401558;
    v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/boost/rational.hpp";
    v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
    v6 = 892;
    sub_100290250(&v7, &v5);
  }
  v2 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    result = sub_1002902B0((int64_t *)result, (uint64_t *)(result + 8));
    v3 = *v2 / result;
    v4 = v2[1] / result;
    *v2 = v3;
    v2[1] = v4;
    if (v4 == 0x8000000000000000)
    {
      std::logic_error::logic_error(&v7, "bad rational: non-zero singular denominator");
      v7.__vftable = (std::logic_error_vtbl *)&off_100401558;
      v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/"
                           "local/include/boost/rational.hpp";
      v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
      v6 = 906;
      sub_100290250(&v7, &v5);
    }
    if (v4 < 0)
    {
      *v2 = -v3;
      *v1 = -v4;
    }
  }
  else
  {
    *v1 = 1;
  }
  return result;
}

void sub_100290228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::domain_error a13)
{
  std::domain_error::~domain_error(&a13);
  _Unwind_Resume(a1);
}

void sub_10029023C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::domain_error a13)
{
  std::domain_error::~domain_error(&a13);
  _Unwind_Resume(a1);
}

void sub_100290250(const std::logic_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002903CC((uint64_t)exception, a1, a2);
}

void sub_100290298(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1002902B0(int64_t *a1, uint64_t *a2)
{
  int64_t v2;
  unint64_t result;
  uint64_t v4;
  int64_t v5;
  unsigned int v6;
  int64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;

  v2 = *a1;
  if (*a1 == 0x8000000000000000)
  {
    v12 = (uint64_t)0x8000000000000000 % *a2;
    return sub_1002902B0(&v12);
  }
  else
  {
    v4 = *a2;
    if (*a2 == 0x8000000000000000)
    {
      v12 = (uint64_t)0x8000000000000000 % v2;
      return ((uint64_t (*)(void))sub_1002902B0)();
    }
    else
    {
      if (v2 < 0)
        v2 = -v2;
      if (v4 >= 0)
        v5 = *a2;
      else
        v5 = -v4;
      if (v2 >= v5)
        result = v5;
      else
        result = v2;
      if (v2 <= v5)
        v2 = v5;
      if (v2)
      {
        if (result)
        {
          v6 = __clz(__rbit64(v2));
          v7 = (unint64_t)v2 >> v6;
          v8 = __clz(__rbit64(result));
          v9 = result >> v8;
          if (v6 < v8)
            LOBYTE(v8) = v6;
          if ((unint64_t)v9 < 2)
          {
LABEL_28:
            if (v9 == 1)
              v7 = 1;
          }
          else
          {
            while (1)
            {
              v10 = v7 % v9;
              v7 = v9 - v7 % v9;
              if (!v10)
                break;
              v11 = v10 >> __clz(__rbit64(v10));
              v7 >>= __clz(__rbit64(v7));
              if (v11 >= v7)
                v9 = v7;
              else
                v9 = v11;
              if (v11 > v7)
                v7 = v11;
              if (v9 <= 1)
                goto LABEL_28;
            }
          }
          return v7 << v8;
        }
        else
        {
          return v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002903CC(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &off_1003EDEA0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1004014E0;
  *(_QWORD *)(a1 + 8) = off_100401510;
  *(_QWORD *)(a1 + 24) = off_100401538;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_100290434(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::domain_error::~domain_error((std::domain_error *)(a1 + 8));
  return a1;
}

void sub_10029048C()
{
  operator new();
}

void sub_10029055C()
{
  std::domain_error *v0;

  std::domain_error::~domain_error(v0);
  operator delete();
}

void sub_100290588(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1002905A4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002907F8((uint64_t)exception, a1);
}

void sub_1002905E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002905F4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 32) = 0;
  }
  std::domain_error::~domain_error((std::domain_error *)(a1 + 8));
  operator delete();
}

void sub_10029065C(std::domain_error *this)
{
  const char *imp;

  this[1].__vftable = (std::domain_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::domain_error::~domain_error(this);
}

void sub_1002906AC(std::domain_error *this)
{
  const char *imp;

  this[1].__vftable = (std::domain_error_vtbl *)&off_1003EDD90;
  imp = this[1].__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      this[1].__imp_.__imp_ = 0;
  }
  std::domain_error::~domain_error(this);
  operator delete();
}

void sub_100290718(std::domain_error *a1)
{
  const char *imp;

  a1->__vftable = (std::domain_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::domain_error::~domain_error(a1 - 1);
}

void sub_100290768(std::domain_error *a1)
{
  const char *imp;

  a1->__vftable = (std::domain_error_vtbl *)&off_1003EDD90;
  imp = a1->__imp_.__imp_;
  if (imp)
  {
    if ((*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
      a1->__imp_.__imp_ = 0;
  }
  std::domain_error::~domain_error(a1 - 1);
  operator delete();
}

void sub_1002907D4(std::domain_error *a1)
{
  std::domain_error::~domain_error(a1);
  operator delete();
}

uint64_t sub_1002907F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_1003EDEA0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_100401558;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &off_1003EDD90;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1004014E0;
  *(_QWORD *)(a1 + 8) = off_100401510;
  *(_QWORD *)(a1 + 24) = off_100401538;
  return a1;
}

void sub_10029089C(_Unwind_Exception *a1)
{
  std::domain_error *v1;

  std::domain_error::~domain_error(v1);
  _Unwind_Resume(a1);
}

double sub_1002908B0(uint64_t a1, double *a2, double **a3, double **a4)
{
  double **v4;
  double **v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double *v20;
  double result;
  double v22;
  double v23;
  double *v24;
  double *v25;
  double *v26;

  v4 = a4;
  v5 = a3;
  v8 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v9 = v7 * v7 + v8 * v8;
  v11 = *(double *)(a1 + 16);
  v10 = *(double *)(a1 + 24);
  v12 = v10 * v10 + v11 * v11;
  if (v9 >= v12)
    v13 = v7 * v7 + v8 * v8;
  else
    v13 = v10 * v10 + v11 * v11;
  if (v13 <= 0.0)
    goto LABEL_10;
  v14 = vabdd_f64(0.5, *(double *)(a1 + 72) / 1000000.0);
  v15 = v14 + v14;
  if (v15 > 1.0)
    v15 = 1.0;
  v16 = vabdd_f64(0.5, *(double *)(a1 + 48) / 1000000.0);
  v17 = v16 + v16;
  if (v17 > 1.0)
    v17 = 1.0;
  if (1.0 - v9 / v13 + v17 * 5.0 <= 1.0 - v12 / v13 + v15 * 5.0)
  {
    v22 = (double)*(uint64_t *)(a1 + 56);
    v23 = (double)*(uint64_t *)(a1 + 64);
    v24 = *a4;
    *a2 = v11 * v22 / v23 + **a4;
    result = v10 * v22 / v23 + v24[1];
    a2[1] = result;
    if (*(_QWORD *)(a1 + 40))
      return result;
  }
  else
  {
LABEL_10:
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (double)*(uint64_t *)(a1 + 32);
    v20 = *a3;
    *a2 = v8 * v19 / (double)v18 + **a3;
    result = v7 * v19 / (double)v18 + v20[1];
    a2[1] = result;
    if (v18)
      return result;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    if (!sub_100290A74(a2, a3))
    {
      if (!sub_100290C08(a2, v5))
      {
LABEL_18:
        if (sub_100290A74(a2, v4))
        {
LABEL_21:
          v26 = *v4;
          *a2 = **v4;
          result = v26[1];
          a2[1] = result;
          return result;
        }
        if (sub_100290C08(a2, v4))
        {
          ++v4;
          goto LABEL_21;
        }
        return result;
      }
      ++v5;
    }
    v25 = *v5;
    *a2 = **v5;
    a2[1] = v25[1];
    goto LABEL_18;
  }
  return result;
}

BOOL sub_100290A74(double *a1, double **a2)
{
  double v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v2 = *a1;
  v3 = a2[1];
  v4 = **a2;
  if (v4 < *v3)
  {
    if (v2 >= v4)
      goto LABEL_12;
    if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v5 = vabdd_f64(v4, v2);
      v6 = fabs(v4);
      v7 = fabs(v2);
      if (v6 >= v7)
        v7 = v6;
      goto LABEL_24;
    }
    return 1;
  }
  if (v4 <= *v3 || v4 >= v2)
    goto LABEL_12;
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  v5 = vabdd_f64(v2, v4);
  v7 = fabs(v2);
  v14 = fabs(v4);
  if (v7 < v14)
    v7 = v14;
LABEL_24:
  if (v7 >= 1.0)
    v15 = v7 * 2.22044605e-16;
  else
    v15 = 2.22044605e-16;
  if (v5 > v15)
    return 1;
LABEL_12:
  v9 = a1[1];
  v10 = (*a2)[1];
  v11 = v3[1];
  if (v10 >= v11)
  {
    if (v10 <= v11 || v10 >= v9)
      return 0;
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    v16 = vabdd_f64(v9, v10);
    v18 = fabs(v9);
    v19 = fabs(v10);
    if (v18 < v19)
      v18 = v19;
  }
  else
  {
    if (v9 >= v10)
      return 0;
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    v16 = vabdd_f64(v10, v9);
    v17 = fabs(v10);
    v18 = fabs(v9);
    if (v17 >= v18)
      v18 = v17;
  }
  if (v18 >= 1.0)
    v20 = v18 * 2.22044605e-16;
  else
    v20 = 2.22044605e-16;
  return v16 > v20;
}

BOOL sub_100290C08(double *a1, double **a2)
{
  double v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v2 = *a1;
  v3 = a2[1];
  v4 = *v3;
  v5 = **a2;
  if (*v3 < v5)
  {
    if (v2 >= v4)
      goto LABEL_12;
    if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v6 = vabdd_f64(v4, v2);
      v7 = fabs(v4);
      v8 = fabs(v2);
      if (v7 >= v8)
        v8 = v7;
      goto LABEL_24;
    }
    return 1;
  }
  if (*v3 <= v5 || v4 >= v2)
    goto LABEL_12;
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  v6 = vabdd_f64(v2, v4);
  v8 = fabs(v2);
  v15 = fabs(v4);
  if (v8 < v15)
    v8 = v15;
LABEL_24:
  if (v8 >= 1.0)
    v16 = v8 * 2.22044605e-16;
  else
    v16 = 2.22044605e-16;
  if (v6 > v16)
    return 1;
LABEL_12:
  v10 = a1[1];
  v11 = v3[1];
  v12 = (*a2)[1];
  if (v11 >= v12)
  {
    if (v11 <= v12 || v11 >= v10)
      return 0;
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    v17 = vabdd_f64(v10, v11);
    v19 = fabs(v10);
    v20 = fabs(v11);
    if (v19 < v20)
      v19 = v20;
  }
  else
  {
    if (v10 >= v11)
      return 0;
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    v17 = vabdd_f64(v11, v10);
    v18 = fabs(v11);
    v19 = fabs(v10);
    if (v18 >= v19)
      v19 = v18;
  }
  if (v19 >= 1.0)
    v21 = v19 * 2.22044605e-16;
  else
    v21 = 2.22044605e-16;
  return v17 > v21;
}

void sub_100290D9C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x10;
  v4 = v2 - 16;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1780uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1780uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1780uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1002912F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_100291314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100291328(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100291340(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100291358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(uint64_t **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  v5 = *(uint64_t **)(v2 + 24);
  v9 = 1.0;
  v6 = sub_10028EE24(v3, v4, v5, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_1002913F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(v2 + 24);
  v4 = (uint64_t *)sub_10028ED14(v2);
  v5 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 24);
  v9 = 1.0;
  v6 = sub_10028EE24(v3, v4, v5, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_1002914A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(uint64_t **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  v5 = *(uint64_t **)(v2 + 24);
  v9 = 1.0;
  v6 = sub_10028EE24(v3, v4, v5, &v9);
  if (v6 == 0.0)
    return 0;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v8 = fabs(v6);
    if (v6 > 0.0)
      result = 1;
    else
      result = 0xFFFFFFFFLL;
    if (v8 <= v9 * 2.22044605e-16)
      return 0;
  }
  return result;
}

uint64_t sub_100291540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  double *v14;
  double *v15;
  double **v16;
  double **v17;
  uint64_t v18;
  double *v19;
  double *v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  void *__p;
  void *v31;
  uint64_t v32;

  __p = 0;
  v31 = 0;
  v32 = 0;
  v14 = *(double **)a1;
  v15 = *(double **)(a1 + 8);
  if ((unint64_t)v15 - *(_QWORD *)a1 >= 0x20)
  {
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = -1;
    v25 = -1;
    sub_1002884D4(&__p, v14, v15, a3, a2, &v24, 0xAuLL);
  }
  v17 = *(double ***)(a1 + 24);
  v16 = *(double ***)(a1 + 32);
  if (v17 != v16)
  {
    v18 = 0;
    do
    {
      v19 = *v17;
      v20 = v17[1];
      if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
      {
        v24 = xmmword_100382A50;
        v25 = v18;
        sub_1002884D4(&__p, v19, v20, a3, a2, &v24, 0xAuLL);
        v16 = *(double ***)(a1 + 32);
      }
      ++v18;
      v17 += 3;
    }
    while (v17 != v16);
  }
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v22 = a2;
  v23 = a2;
  sub_1002916AC((uint64_t *)&__p, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22, 0x10uLL);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_100291688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002916AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *i;
  BOOL v16;
  BOOL v17;
  _OWORD v20[2];
  void *__p;
  void *v22;
  uint64_t v23;
  char v24;

  v8 = *a1;
  v7 = (_BYTE *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((_BYTE *)v8 != v7)
    {
      v13 = (_BYTE *)(v8 + 216);
      do
      {
        v14 = (_BYTE *)(v8 + 120);
        if ((_BYTE *)(v8 + 120) != v7)
        {
          for (i = v13; i - 96 != v7; i += 120)
          {
            if (*(_QWORD *)(v8 + 48) >= *((_QWORD *)i - 8) && *(_QWORD *)(v8 + 32) <= *((_QWORD *)i - 6))
            {
              v16 = *(_QWORD *)(v8 + 56) >= *((_QWORD *)i - 7) && *(_QWORD *)(v8 + 40) <= *((_QWORD *)i - 5);
              v17 = v16 && *(_BYTE *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a2 + 40), *(double ***)a2, (int *)v8, *(_DWORD *)(a2 + 40), *(double ***)a2, (int *)i - 24, 0, *(unsigned __int8 *)(a2 + 44), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD **)(a2 + 24)))return 0;
                v7 = (_BYTE *)a1[1];
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_100288F48(a1, (uint64_t *)v20, (char **)&__p);
  v12 = sub_100291874(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_100291858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100291874(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  int64x2_t v61;
  int64x2_t v62;
  void *__p;
  char *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  __int128 v72[2];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v14 = *a1;
  v15 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v16 = *a1;
  else
    v16 = v14 + 1;
  v17 = v16 >> 1;
  if (v15 >= 0)
    v18 = a1[2];
  else
    v18 = v15 + 1;
  v19 = v18 >> 1;
  v20 = *((_OWORD *)a1 + 1);
  v21 = v15 - 2 * v19 + v14 - 2 * v17;
  v73 = *(_OWORD *)a1;
  v75 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)&v72[0] + 1) = *((_QWORD *)&v73 + 1);
  v72[1] = v20;
  v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  v71 = 0;
  *(_QWORD *)&v72[0] = v74;
  v69 = 0;
  v70 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_100289FEC(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v23 = (char *)__p;
  v22 = v64;
  if (__p == v64)
    goto LABEL_32;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = 0x8000000000000000;
  v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v62 = vdupq_n_s64(0x8000000000000000);
  v26 = 0x8000000000000000;
  v27 = (char *)__p;
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v29 = *(_QWORD **)v27;
    v30 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        v31 = v29[5];
        if (v31 >= v24)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    v26 = v30;
    v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      v32 = v29[6];
      if (v32 >= v28)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    v25 = v31;
    v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      v33 = v29[7];
      if (v33 < v24)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    v26 = v32;
    v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      v24 = v33;
      if (v33 <= v25)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25)
      goto LABEL_9;
LABEL_26:
    v62.i64[1] = v33;
    v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_100291FD8((__int128 *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (i = v23 + 8; i != v22; i += 8)
      {
        v38 = *(_QWORD *)v23;
        v39 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v23 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
        {
          v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
          v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
          if (v41 && *(_BYTE *)(v39 + 96) == 0)
          {
            if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v39, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
            v22 = v64;
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_100291E68((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_100291E68((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v35 = (char *)v69;
    v34 = v70;
    if (a3 > 0x63 || (v70 - (_BYTE *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          v44 = v35;
          while (1)
          {
            v45 = *(_QWORD *)v43;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v43 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v46, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
                v34 = v70;
              }
            }
            v44 += 8;
            if (v44 == v34)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_100291FD8(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v51 = (char *)v66;
    v50 = v67;
    if (a3 > 0x63 || (v67 - (_BYTE *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        v52 = 1;
      }
      else
      {
        do
        {
          v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (j = v51; j != v50; j += 8)
            {
              v55 = *(_QWORD *)v53;
              v56 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
              {
                v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
                v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
                if (v58 && *(_BYTE *)(v56 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v56, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
                  v50 = v67;
                }
              }
            }
          }
          v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      v52 = sub_100291FD8(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v52 = 0;
  }
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_100291E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100291E68(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_1002935C0(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_100291FD8(__int128 *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *i;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *j;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  int64x2_t v60;
  int64x2_t v61;
  void *__p;
  char *v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v15 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 1);
  if (v16 >= 0)
    v17 = *((_QWORD *)a1 + 1);
  else
    v17 = v16 + 1;
  v18 = v17 >> 1;
  if (v14 >= 0)
    v19 = *((_QWORD *)a1 + 3);
  else
    v19 = v14 + 1;
  v20 = a1[1];
  v73 = *a1;
  v71[0] = v73;
  v72 = v20;
  v74 = v15;
  v75 = (v19 >> 1)
      + v18
      + ((int)(((_DWORD)v14
              - 2 * (v19 >> 1)
              + (_DWORD)v16
              - 2 * (_DWORD)v18
              + (((v14 - 2 * (v19 >> 1) + (_DWORD)v16 - 2 * (_DWORD)v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_100289FEC(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v22 = (char *)__p;
  v21 = v63;
  if (__p == v63)
    goto LABEL_32;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v61 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = (char *)__p;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        v30 = v28[5];
        if (v30 >= v23)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      v31 = v28[6];
      if (v31 >= v27)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      v32 = v28[7];
      if (v32 < v23)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      v23 = v32;
      if (v32 <= v24)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24)
      goto LABEL_9;
LABEL_26:
    v61.i64[1] = v32;
    v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_100291874(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (i = v22 + 8; i != v21; i += 8)
      {
        v37 = *(_QWORD *)v22;
        v38 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v22 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v37 + 32) <= *(_QWORD *)(v38 + 48))
        {
          v39 = *(_QWORD *)(v37 + 56) >= *(_QWORD *)(v38 + 40) && *(_QWORD *)(v37 + 40) <= *(_QWORD *)(v38 + 56);
          v40 = v39 && *(_BYTE *)(v37 + 96) == 0;
          if (v40 && *(_BYTE *)(v38 + 96) == 0)
          {
            if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v37, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
            v21 = v63;
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002925D0(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002925D0(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v34 = (char *)v68;
    v33 = v69;
    if (a3 > 0x63 || (v69 - (_BYTE *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          v43 = v34;
          while (1)
          {
            v44 = *(_QWORD *)v42;
            v45 = *(_QWORD *)v43;
            if (*(_QWORD *)(*(_QWORD *)v42 + 48) >= *(_QWORD *)(*(_QWORD *)v43 + 32)
              && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
            {
              v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
              v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
              if (v47 && *(_BYTE *)(v45 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v44, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
                v33 = v69;
              }
            }
            v43 += 8;
            if (v43 == v33)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_100291874(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v50 = (char *)v65;
    v49 = v66;
    if (a3 > 0x63 || (v66 - (_BYTE *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        v51 = 1;
      }
      else
      {
        do
        {
          v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (j = v50; j != v49; j += 8)
            {
              v54 = *(_QWORD *)v52;
              v55 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v54 + 32) <= *(_QWORD *)(v55 + 48))
              {
                v56 = *(_QWORD *)(v54 + 56) >= *(_QWORD *)(v55 + 40) && *(_QWORD *)(v54 + 40) <= *(_QWORD *)(v55 + 56);
                v57 = v56 && *(_BYTE *)(v54 + 96) == 0;
                if (v57 && *(_BYTE *)(v55 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v54, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24)))goto LABEL_98;
                  v49 = v66;
                }
              }
            }
          }
          v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      v51 = sub_100291874(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v51 = 0;
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_10029256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002925D0(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_100292740(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_100292740(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  _QWORD v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v17 = *a1;
  v18 = a1[2];
  if (*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v146 = *(_OWORD *)a1;
  v147 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  v144[1] = *((_QWORD *)&v22 + 1);
  v145 = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002935C0(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002935C0(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002935C0(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_1002935C0(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002935C0(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002935C0(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002935C0(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002934FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002935C0(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144[2];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v145 = a1[1];
  v146 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v144[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v147 = v18;
  v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_100292740(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_100292740(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_100292740(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_100292740(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100292740(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_100292740((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_100294440(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24)))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_100292740(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_10029437C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100294440(int a1, double **a2, int *a3, int a4, double **a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  double **v12;
  double *v13;
  uint64_t v14;
  double **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  int v26;
  double *v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double *v39;
  double *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double v81;
  double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  std::bad_cast *exception;
  std::bad_cast *v105;
  std::bad_cast *v106;
  std::bad_cast *v107;
  double *v108;
  int v109;
  double *v110;
  uint64_t v113;
  double *v114;
  double *v115;
  double *v116;
  double *v117;
  double *v118;
  int v119;
  double *v122;
  double *v123;
  uint64_t v126;
  double *v127;
  char v128[16];
  int v129;
  char v130;
  uint64_t v131;
  __int16 v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  __int16 v174;
  _QWORD v175[7];
  char v176;
  char v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _QWORD v181[7];
  char v182;
  char v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  if ((!*((_BYTE *)a3 + 96) || (unint64_t)(*((_QWORD *)a3 + 10) + 1) >= *((_QWORD *)a3 + 11))
    && (!*((_BYTE *)a6 + 96) || (unint64_t)(*((_QWORD *)a6 + 10) + 1) >= *((_QWORD *)a6 + 11)))
  {
    v11 = *((_QWORD *)a3 + 3);
    if (v11 >= 0)
      v12 = (double **)&a2[3][3 * v11];
    else
      v12 = a2;
    v13 = *v12;
    v114 = v12[1];
    v115 = *v12;
    v14 = *((_QWORD *)a6 + 3);
    if (v14 >= 0)
      v15 = (double **)&a5[3][3 * v14];
    else
      v15 = a5;
    v122 = *v15;
    v118 = v15[1];
    v16 = *a3;
    v109 = *a6;
    v17 = *((_QWORD *)a3 + 13);
    v18 = *((_QWORD *)a3 + 8);
    v19 = *((_QWORD *)a3 + 9);
    v20 = &v13[2 * v18];
    v113 = v17;
    if (v18 != v19)
    {
      v88 = 0;
      v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      v90 = v127;
      v91 = *((_QWORD *)a3 + 8);
      v92 = v127;
      while (1)
      {
        v93 = v18;
        v20 = v90;
        v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0)
          v95 = 0.5;
        else
          v95 = -0.5;
        sub_100284F14(v94 + v95);
        v96 = v92[2];
        v92 += 2;
        v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0)
          v98 = 0.5;
        else
          v98 = -0.5;
        v99 = v97 + v98;
        sub_100284F14(v97 + v98);
        v100 = ceil(v99);
        v101 = floor(v99);
        if (v99 >= 0.0)
          v100 = v101;
        v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          v18 = v93;
          if (*((_QWORD *)a6 + 4) <= v102)
          {
            v113 = v17;
            v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            v20 = v127;
            v18 = v93;
            break;
          }
          v18 = v93;
          if (*((_QWORD *)a6 + 6) >= v102)
          {
            v113 += v88;
            v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        v90 = v92;
        v89 -= 16;
        if (!v89)
          return 1;
      }
    }
    v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      v22 = v20 + 2;
      v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114)
        v23 = v20 + 2;
      v24 = v23 + 2;
      v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114)
        v25 = v24;
      v117 = v25;
      v26 = -v16;
      v119 = -v109;
      v108 = v21;
      while (1)
      {
        v126 = v18;
        v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0)
          v30 = 0.5;
        else
          v30 = -0.5;
        sub_100284F14(v29 + v30);
        v116 = v20;
        v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0)
          v32 = 0.5;
        else
          v32 = -0.5;
        v33 = v31 + v32;
        sub_100284F14(v31 + v32);
        v34 = ceil(v33);
        v35 = floor(v33);
        if (v33 >= 0.0)
          v34 = v35;
        v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (*((_QWORD *)a6 + 4) > v36)
            return 1;
        }
        else
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (v26 == -1 && *((_QWORD *)a6 + 6) < v36)
            return 1;
        }
        v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        v182 = 1;
        v183 = 0;
        v42 = *(_OWORD *)(a10 + 16);
        v184 = *(_OWORD *)a10;
        v185 = v42;
        v186 = *(_QWORD *)(a10 + 32);
        v44 = v37[8];
        v43 = v37[9];
        v45 = v37[13];
        if (v44 == v43)
        {
LABEL_36:
          v46 = &v39[2 * v44];
          goto LABEL_37;
        }
        v71 = 0;
        v72 = *(double *)(a10 + 32);
        v73 = 16 * v43 - 16 * v44;
        v46 = &v39[2 * v44];
        v74 = v37[13];
        v75 = v37[8];
        while (1)
        {
          v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0)
            v77 = 0.5;
          else
            v77 = -0.5;
          v78 = v76 + v77;
          v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18)
            v79 = 1;
          if (v79 == 2)
            goto LABEL_132;
          if (v79 == 1)
            goto LABEL_133;
          v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0)
            v81 = 0.5;
          else
            v81 = -0.5;
          v82 = v80 + v81;
          v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18)
            v83 = 1;
          if (v83 == 2)
          {
LABEL_132:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            v105 = sub_10016A6B8(exception);
          }
          if (v83 == 1)
          {
LABEL_133:
            v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            v107 = sub_10016A694(v106);
          }
          v84 = ceil(v82);
          v85 = floor(v82);
          v86 = v82 >= 0.0 ? v85 : v84;
          v87 = (uint64_t)v86;
          if (v109 == 1)
            break;
          if (v109 != -1)
            goto LABEL_36;
          if (*((_QWORD *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_37;
          }
LABEL_90:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73)
            goto LABEL_112;
        }
        if (*((_QWORD *)a3 + 4) > v87)
          goto LABEL_90;
        v45 = v74;
        v44 = v75;
LABEL_37:
        v123 = &v39[2 * v43];
        if (v46 != v123)
          break;
LABEL_112:
        ++v113;
LABEL_19:
        v20 = v116 + 2;
        v18 = v38 + 1;
        v27 = v117 + 2;
        if (v117 + 2 == v114)
          v27 = &v115[2 * (v117 != v115)];
        v117 = v27;
        v28 = v22 == v21;
        v22 += 2;
        v26 = -v16;
        if (v28)
          return 1;
      }
      v110 = v22;
      v47 = v46 + 2;
      v48 = v118;
      if (v46 + 2 == v118)
        v47 = &v39[2 * (v46 != v39)];
      v49 = v47 + 2;
      v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118)
        v51 = v50;
      else
        v51 = v49;
      v52 = ++v113 - v45;
      while (1)
      {
        v53 = *(double *)(a10 + 32);
        v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0)
          v55 = 0.5;
        else
          v55 = -0.5;
        v56 = v54 + v55;
        v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18)
          v57 = 1;
        if (v57 == 2)
          goto LABEL_132;
        if (v57 == 1)
          goto LABEL_133;
        v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0)
          v59 = 0.5;
        else
          v59 = -0.5;
        v60 = v58 + v59;
        v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18)
          v61 = 1;
        if (v61 == 2)
          goto LABEL_132;
        if (v61 == 1)
          goto LABEL_133;
        v62 = ceil(v60);
        v63 = floor(v60);
        if (v60 >= 0.0)
          v64 = v63;
        else
          v64 = v62;
        v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65)
            goto LABEL_18;
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_18;
        }
        v66 = v41[2];
        if (a1 == a4)
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v38 >= v44)
                    goto LABEL_76;
                  goto LABEL_75;
                }
LABEL_83:
                if (!v52)
                  goto LABEL_76;
                if (!v38)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v41[11] - 2 <= v44)
                    goto LABEL_76;
                  goto LABEL_75;
                }
              }
              else if (a8)
              {
                goto LABEL_83;
              }
              v68 = v41[3];
              v69 = v41[2];
              goto LABEL_75;
            }
            v69 = v41[2];
          }
        }
        else
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
        }
LABEL_75:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        v176 = 0;
        v177 = 0;
        v70 = *(_OWORD *)(a10 + 16);
        v178 = *(_OWORD *)a10;
        v179 = v70;
        v180 = *(_QWORD *)(a10 + 32);
        v129 = 0;
        v130 = 0;
        v131 = -1;
        v132 = 0;
        v133 = 0;
        v139 = 1;
        v140 = 0;
        v141 = 0;
        v142 = -1;
        v143 = -1;
        v144 = -1;
        v145 = 257;
        v146 = 0;
        v147 = 0;
        v148 = -1;
        v149 = -1;
        v150 = -1;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v160 = 1;
        v161 = 0;
        v162 = 0;
        v163 = -1;
        v164 = -1;
        v165 = -1;
        v166 = 257;
        v167 = 0;
        v168 = 0;
        v169 = -1;
        v170 = -1;
        v171 = -1;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        v134 = a1;
        v135 = v66;
        v136 = v67;
        v137 = v38;
        v138 = xmmword_1003970F0;
        v155 = a4;
        v156 = v69;
        v157 = v68;
        v158 = v44;
        v159 = xmmword_1003970F0;
        sub_10028BCBC((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        v37 = a6;
        v38 = v126;
        v48 = v118;
        v39 = v122;
        v41 = a3;
LABEL_76:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48)
          v51 = &v39[2 * (v51 != v39)];
        else
          v51 += 2;
        --v52;
        if (v46 == v123)
        {
LABEL_18:
          v21 = v108;
          v22 = v110;
          goto LABEL_19;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_100294D54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double **v16;
  double **v17;
  uint64_t v18;
  double *v19;
  double *v20;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  void *__p;
  void *v33;
  uint64_t v34;

  __p = 0;
  v33 = 0;
  v34 = 0;
  v12 = *a1;
  if (*a1 != a1[1])
  {
    v13 = 0;
    do
    {
      v14 = *(double **)v12;
      v15 = *(double **)(v12 + 8);
      if ((unint64_t)v15 - *(_QWORD *)v12 >= 0x20)
      {
        *(_QWORD *)&v26 = 0;
        *((_QWORD *)&v26 + 1) = v13;
        v27 = -1;
        sub_1002884D4(&__p, v14, v15, a3, a2, &v26, 0xAuLL);
      }
      v17 = *(double ***)(v12 + 24);
      v16 = *(double ***)(v12 + 32);
      if (v17 != v16)
      {
        v18 = 0;
        do
        {
          v19 = *v17;
          v20 = v17[1];
          if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
          {
            *(_QWORD *)&v26 = 0;
            *((_QWORD *)&v26 + 1) = v13;
            v27 = v18;
            sub_1002884D4(&__p, v19, v20, a3, a2, &v26, 0xAuLL);
            v16 = *(double ***)(v12 + 32);
          }
          ++v18;
          v17 += 3;
        }
        while (v17 != v16);
      }
      v12 += 48;
      ++v13;
    }
    while (v12 != a1[1]);
  }
  *(_QWORD *)&v26 = a1;
  *((_QWORD *)&v26 + 1) = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v24 = a2;
  v25 = a2;
  sub_100294EDC((uint64_t *)&__p, (_QWORD **)&v26, (uint64_t)&v25, (uint64_t)&v24, 0x10uLL);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_100294EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100294EDC(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *i;
  BOOL v16;
  BOOL v17;
  _OWORD v20[2];
  void *__p;
  void *v22;
  uint64_t v23;
  char v24;

  v8 = *a1;
  v7 = (_BYTE *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((_BYTE *)v8 != v7)
    {
      v13 = (_BYTE *)(v8 + 216);
      do
      {
        v14 = (_BYTE *)(v8 + 120);
        if ((_BYTE *)(v8 + 120) != v7)
        {
          for (i = v13; i - 96 != v7; i += 120)
          {
            if (*(_QWORD *)(v8 + 48) >= *((_QWORD *)i - 8) && *(_QWORD *)(v8 + 32) <= *((_QWORD *)i - 6))
            {
              v16 = *(_QWORD *)(v8 + 56) >= *((_QWORD *)i - 7) && *(_QWORD *)(v8 + 40) <= *((_QWORD *)i - 5);
              v17 = v16 && *(_BYTE *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a2 + 10), *a2, (int *)v8, *((_DWORD *)a2 + 10), *a2, (int *)i - 24, 0, *((unsigned __int8 *)a2 + 44), (uint64_t)a2[1], (uint64_t)a2[2], a2[3]))return 0;
                v7 = (_BYTE *)a1[1];
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_100288F48(a1, (uint64_t *)v20, (char **)&__p);
  v12 = sub_1002950A4(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_100295088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002950A4(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t a4, _QWORD **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  int64x2_t v61;
  int64x2_t v62;
  void *__p;
  char *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  __int128 v72[2];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v14 = *a1;
  v15 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v16 = *a1;
  else
    v16 = v14 + 1;
  v17 = v16 >> 1;
  if (v15 >= 0)
    v18 = a1[2];
  else
    v18 = v15 + 1;
  v19 = v18 >> 1;
  v20 = *((_OWORD *)a1 + 1);
  v21 = v15 - 2 * v19 + v14 - 2 * v17;
  v73 = *(_OWORD *)a1;
  v75 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)&v72[0] + 1) = *((_QWORD *)&v73 + 1);
  v72[1] = v20;
  v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  v71 = 0;
  *(_QWORD *)&v72[0] = v74;
  v69 = 0;
  v70 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_100289FEC(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v23 = (char *)__p;
  v22 = v64;
  if (__p == v64)
    goto LABEL_32;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = 0x8000000000000000;
  v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v62 = vdupq_n_s64(0x8000000000000000);
  v26 = 0x8000000000000000;
  v27 = (char *)__p;
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v29 = *(_QWORD **)v27;
    v30 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        v31 = v29[5];
        if (v31 >= v24)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    v26 = v30;
    v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      v32 = v29[6];
      if (v32 >= v28)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    v25 = v31;
    v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      v33 = v29[7];
      if (v33 < v24)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    v26 = v32;
    v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      v24 = v33;
      if (v33 <= v25)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25)
      goto LABEL_9;
LABEL_26:
    v62.i64[1] = v33;
    v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_100295808((__int128 *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (i = v23 + 8; i != v22; i += 8)
      {
        v38 = *(_QWORD *)v23;
        v39 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v23 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
        {
          v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
          v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
          if (v41 && *(_BYTE *)(v39 + 96) == 0)
          {
            if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v38, *((_DWORD *)a5 + 10), *a5, (int *)v39, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
            v22 = v64;
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_100295698((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_100295698((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v35 = (char *)v69;
    v34 = v70;
    if (a3 > 0x63 || (v70 - (_BYTE *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          v44 = v35;
          while (1)
          {
            v45 = *(_QWORD *)v43;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v43 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v45, *((_DWORD *)a5 + 10), *a5, (int *)v46, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
                v34 = v70;
              }
            }
            v44 += 8;
            if (v44 == v34)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_100295808(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v51 = (char *)v66;
    v50 = v67;
    if (a3 > 0x63 || (v67 - (_BYTE *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        v52 = 1;
      }
      else
      {
        do
        {
          v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (j = v51; j != v50; j += 8)
            {
              v55 = *(_QWORD *)v53;
              v56 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
              {
                v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
                v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
                if (v58 && *(_BYTE *)(v56 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v55, *((_DWORD *)a5 + 10), *a5, (int *)v56, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
                  v50 = v67;
                }
              }
            }
          }
          v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      v52 = sub_100295808(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v52 = 0;
  }
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_100295634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295698(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, _QWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_100296DF0(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]);
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_100295808(__int128 *a1, _QWORD *a2, unint64_t a3, unint64_t a4, _QWORD **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *i;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *j;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  int64x2_t v60;
  int64x2_t v61;
  void *__p;
  char *v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v15 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 1);
  if (v16 >= 0)
    v17 = *((_QWORD *)a1 + 1);
  else
    v17 = v16 + 1;
  v18 = v17 >> 1;
  if (v14 >= 0)
    v19 = *((_QWORD *)a1 + 3);
  else
    v19 = v14 + 1;
  v20 = a1[1];
  v73 = *a1;
  v71[0] = v73;
  v72 = v20;
  v74 = v15;
  v75 = (v19 >> 1)
      + v18
      + ((int)(((_DWORD)v14
              - 2 * (v19 >> 1)
              + (_DWORD)v16
              - 2 * (_DWORD)v18
              + (((v14 - 2 * (v19 >> 1) + (_DWORD)v16 - 2 * (_DWORD)v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_100289FEC(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v22 = (char *)__p;
  v21 = v63;
  if (__p == v63)
    goto LABEL_32;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v61 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = (char *)__p;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        v30 = v28[5];
        if (v30 >= v23)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      v31 = v28[6];
      if (v31 >= v27)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      v32 = v28[7];
      if (v32 < v23)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      v23 = v32;
      if (v32 <= v24)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24)
      goto LABEL_9;
LABEL_26:
    v61.i64[1] = v32;
    v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_1002950A4(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (i = v22 + 8; i != v21; i += 8)
      {
        v37 = *(_QWORD *)v22;
        v38 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v22 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v37 + 32) <= *(_QWORD *)(v38 + 48))
        {
          v39 = *(_QWORD *)(v37 + 56) >= *(_QWORD *)(v38 + 40) && *(_QWORD *)(v37 + 40) <= *(_QWORD *)(v38 + 56);
          v40 = v39 && *(_BYTE *)(v37 + 96) == 0;
          if (v40 && *(_BYTE *)(v38 + 96) == 0)
          {
            if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v37, *((_DWORD *)a5 + 10), *a5, (int *)v38, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
            v21 = v63;
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_100295E00(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_100295E00(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v34 = (char *)v68;
    v33 = v69;
    if (a3 > 0x63 || (v69 - (_BYTE *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          v43 = v34;
          while (1)
          {
            v44 = *(_QWORD *)v42;
            v45 = *(_QWORD *)v43;
            if (*(_QWORD *)(*(_QWORD *)v42 + 48) >= *(_QWORD *)(*(_QWORD *)v43 + 32)
              && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
            {
              v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
              v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
              if (v47 && *(_BYTE *)(v45 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v44, *((_DWORD *)a5 + 10), *a5, (int *)v45, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
                v33 = v69;
              }
            }
            v43 += 8;
            if (v43 == v33)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_1002950A4(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v50 = (char *)v65;
    v49 = v66;
    if (a3 > 0x63 || (v66 - (_BYTE *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        v51 = 1;
      }
      else
      {
        do
        {
          v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (j = v50; j != v49; j += 8)
            {
              v54 = *(_QWORD *)v52;
              v55 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v54 + 32) <= *(_QWORD *)(v55 + 48))
              {
                v56 = *(_QWORD *)(v54 + 56) >= *(_QWORD *)(v55 + 40) && *(_QWORD *)(v54 + 40) <= *(_QWORD *)(v55 + 56);
                v57 = v56 && *(_BYTE *)(v54 + 96) == 0;
                if (v57 && *(_BYTE *)(v55 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a5 + 10), *a5, (int *)v54, *((_DWORD *)a5 + 10), *a5, (int *)v55, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98;
                  v49 = v66;
                }
              }
            }
          }
          v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      v51 = sub_1002950A4(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v51 = 0;
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_100295D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100295E00(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, _QWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_100295F70(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]);
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_100295F70(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, _QWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  _QWORD v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v17 = *a1;
  v18 = a1[2];
  if (*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v146 = *(_OWORD *)a1;
  v147 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  v144[1] = *((_QWORD *)&v22 + 1);
  v145 = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_100296DF0(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_100296DF0(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_100296DF0(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_100296DF0(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100296DF0(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_100296DF0(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_100296DF0(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_100296D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100296DF0(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, _QWORD **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144[2];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v145 = a1[1];
  v146 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v144[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v147 = v18;
  v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_100295F70(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_100295F70(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_100295F70(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_100295F70(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_100295F70(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_100295F70((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_100297C70(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_100295F70(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_100297BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100297C70(int a1, _QWORD *a2, int *a3, int a4, _QWORD *a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;
  double **v12;
  double *v13;
  uint64_t v14;
  double **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  int v26;
  double *v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  double *v39;
  double *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  double v58;
  double v59;
  double v60;
  int v61;
  double v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  int v79;
  double v80;
  double v81;
  double v82;
  int v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double *v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  std::bad_cast *exception;
  std::bad_cast *v105;
  std::bad_cast *v106;
  std::bad_cast *v107;
  double *v108;
  int v109;
  double *v110;
  uint64_t v113;
  double *v114;
  double *v115;
  double *v116;
  double *v117;
  double *v118;
  int v119;
  double *v122;
  double *v123;
  uint64_t v126;
  double *v127;
  char v128[16];
  int v129;
  char v130;
  uint64_t v131;
  __int16 v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  int v173;
  __int16 v174;
  _QWORD v175[7];
  char v176;
  char v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  _QWORD v181[7];
  char v182;
  char v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  if ((!*((_BYTE *)a3 + 96) || (unint64_t)(*((_QWORD *)a3 + 10) + 1) >= *((_QWORD *)a3 + 11))
    && (!*((_BYTE *)a6 + 96) || (unint64_t)(*((_QWORD *)a6 + 10) + 1) >= *((_QWORD *)a6 + 11)))
  {
    v11 = *((_QWORD *)a3 + 3);
    v12 = (double **)(*a2 + 48 * *((_QWORD *)a3 + 2));
    if (v11 >= 0)
      v12 = (double **)&v12[3][3 * v11];
    v13 = *v12;
    v114 = v12[1];
    v115 = *v12;
    v14 = *((_QWORD *)a6 + 3);
    v15 = (double **)(*a5 + 48 * *((_QWORD *)a6 + 2));
    if (v14 >= 0)
      v15 = (double **)&v15[3][3 * v14];
    v122 = *v15;
    v118 = v15[1];
    v16 = *a3;
    v109 = *a6;
    v17 = *((_QWORD *)a3 + 13);
    v18 = *((_QWORD *)a3 + 8);
    v19 = *((_QWORD *)a3 + 9);
    v20 = &v13[2 * v18];
    v113 = v17;
    if (v18 != v19)
    {
      v88 = 0;
      v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      v90 = v127;
      v91 = *((_QWORD *)a3 + 8);
      v92 = v127;
      while (1)
      {
        v93 = v18;
        v20 = v90;
        v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0)
          v95 = 0.5;
        else
          v95 = -0.5;
        sub_100284F14(v94 + v95);
        v96 = v92[2];
        v92 += 2;
        v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0)
          v98 = 0.5;
        else
          v98 = -0.5;
        v99 = v97 + v98;
        sub_100284F14(v97 + v98);
        v100 = ceil(v99);
        v101 = floor(v99);
        if (v99 >= 0.0)
          v100 = v101;
        v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          v18 = v93;
          if (*((_QWORD *)a6 + 4) <= v102)
          {
            v113 = v17;
            v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            v20 = v127;
            v18 = v93;
            break;
          }
          v18 = v93;
          if (*((_QWORD *)a6 + 6) >= v102)
          {
            v113 += v88;
            v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        v90 = v92;
        v89 -= 16;
        if (!v89)
          return 1;
      }
    }
    v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      v22 = v20 + 2;
      v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114)
        v23 = v20 + 2;
      v24 = v23 + 2;
      v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114)
        v25 = v24;
      v117 = v25;
      v26 = -v16;
      v119 = -v109;
      v108 = v21;
      while (1)
      {
        v126 = v18;
        v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0)
          v30 = 0.5;
        else
          v30 = -0.5;
        sub_100284F14(v29 + v30);
        v116 = v20;
        v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0)
          v32 = 0.5;
        else
          v32 = -0.5;
        v33 = v31 + v32;
        sub_100284F14(v31 + v32);
        v34 = ceil(v33);
        v35 = floor(v33);
        if (v33 >= 0.0)
          v34 = v35;
        v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (*((_QWORD *)a6 + 4) > v36)
            return 1;
        }
        else
        {
          v37 = a6;
          v38 = v126;
          v39 = v122;
          v40 = v20;
          if (v26 == -1 && *((_QWORD *)a6 + 6) < v36)
            return 1;
        }
        v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        v182 = 1;
        v183 = 0;
        v42 = *(_OWORD *)(a10 + 16);
        v184 = *(_OWORD *)a10;
        v185 = v42;
        v186 = *(_QWORD *)(a10 + 32);
        v44 = v37[8];
        v43 = v37[9];
        v45 = v37[13];
        if (v44 == v43)
        {
LABEL_34:
          v46 = &v39[2 * v44];
          goto LABEL_35;
        }
        v71 = 0;
        v72 = *(double *)(a10 + 32);
        v73 = 16 * v43 - 16 * v44;
        v46 = &v39[2 * v44];
        v74 = v37[13];
        v75 = v37[8];
        while (1)
        {
          v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0)
            v77 = 0.5;
          else
            v77 = -0.5;
          v78 = v76 + v77;
          v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18)
            v79 = 1;
          if (v79 == 2)
            goto LABEL_130;
          if (v79 == 1)
            goto LABEL_131;
          v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0)
            v81 = 0.5;
          else
            v81 = -0.5;
          v82 = v80 + v81;
          v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18)
            v83 = 1;
          if (v83 == 2)
          {
LABEL_130:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            v105 = sub_10016A6B8(exception);
          }
          if (v83 == 1)
          {
LABEL_131:
            v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            v107 = sub_10016A694(v106);
          }
          v84 = ceil(v82);
          v85 = floor(v82);
          v86 = v82 >= 0.0 ? v85 : v84;
          v87 = (uint64_t)v86;
          if (v109 == 1)
            break;
          if (v109 != -1)
            goto LABEL_34;
          if (*((_QWORD *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_35;
          }
LABEL_88:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73)
            goto LABEL_110;
        }
        if (*((_QWORD *)a3 + 4) > v87)
          goto LABEL_88;
        v45 = v74;
        v44 = v75;
LABEL_35:
        v123 = &v39[2 * v43];
        if (v46 != v123)
          break;
LABEL_110:
        ++v113;
LABEL_17:
        v20 = v116 + 2;
        v18 = v38 + 1;
        v27 = v117 + 2;
        if (v117 + 2 == v114)
          v27 = &v115[2 * (v117 != v115)];
        v117 = v27;
        v28 = v22 == v21;
        v22 += 2;
        v26 = -v16;
        if (v28)
          return 1;
      }
      v110 = v22;
      v47 = v46 + 2;
      v48 = v118;
      if (v46 + 2 == v118)
        v47 = &v39[2 * (v46 != v39)];
      v49 = v47 + 2;
      v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118)
        v51 = v50;
      else
        v51 = v49;
      v52 = ++v113 - v45;
      while (1)
      {
        v53 = *(double *)(a10 + 32);
        v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0)
          v55 = 0.5;
        else
          v55 = -0.5;
        v56 = v54 + v55;
        v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18)
          v57 = 1;
        if (v57 == 2)
          goto LABEL_130;
        if (v57 == 1)
          goto LABEL_131;
        v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0)
          v59 = 0.5;
        else
          v59 = -0.5;
        v60 = v58 + v59;
        v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18)
          v61 = 1;
        if (v61 == 2)
          goto LABEL_130;
        if (v61 == 1)
          goto LABEL_131;
        v62 = ceil(v60);
        v63 = floor(v60);
        if (v60 >= 0.0)
          v64 = v63;
        else
          v64 = v62;
        v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65)
            goto LABEL_16;
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_16;
        }
        v66 = v41[2];
        if (a1 == a4)
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v38 >= v44)
                    goto LABEL_74;
                  goto LABEL_73;
                }
LABEL_81:
                if (!v52)
                  goto LABEL_74;
                if (!v38)
                {
                  v68 = v41[3];
                  v69 = v41[2];
                  if (v41[11] - 2 <= v44)
                    goto LABEL_74;
                  goto LABEL_73;
                }
              }
              else if (a8)
              {
                goto LABEL_81;
              }
              v68 = v41[3];
              v69 = v41[2];
              goto LABEL_73;
            }
            v69 = v41[2];
          }
        }
        else
        {
          v67 = v41[3];
          v69 = v37[2];
          v68 = v37[3];
        }
LABEL_73:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        v176 = 0;
        v177 = 0;
        v70 = *(_OWORD *)(a10 + 16);
        v178 = *(_OWORD *)a10;
        v179 = v70;
        v180 = *(_QWORD *)(a10 + 32);
        v129 = 0;
        v130 = 0;
        v131 = -1;
        v132 = 0;
        v133 = 0;
        v139 = 1;
        v140 = 0;
        v141 = 0;
        v142 = -1;
        v143 = -1;
        v144 = -1;
        v145 = 257;
        v146 = 0;
        v147 = 0;
        v148 = -1;
        v149 = -1;
        v150 = -1;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v160 = 1;
        v161 = 0;
        v162 = 0;
        v163 = -1;
        v164 = -1;
        v165 = -1;
        v166 = 257;
        v167 = 0;
        v168 = 0;
        v169 = -1;
        v170 = -1;
        v171 = -1;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        v134 = a1;
        v135 = v66;
        v136 = v67;
        v137 = v38;
        v138 = xmmword_1003970F0;
        v155 = a4;
        v156 = v69;
        v157 = v68;
        v158 = v44;
        v159 = xmmword_1003970F0;
        sub_10028BCBC((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        v37 = a6;
        v38 = v126;
        v48 = v118;
        v39 = v122;
        v41 = a3;
LABEL_74:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48)
          v51 = &v39[2 * (v51 != v39)];
        else
          v51 += 2;
        --v52;
        if (v46 == v123)
        {
LABEL_16:
          v21 = v108;
          v22 = v110;
          goto LABEL_17;
        }
      }
    }
  }
  return 1;
}

void sub_100298598(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD **v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v79;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;

  v3 = a1;
  v86 = 0;
  v87 = 0;
  v85 = &v86;
  v4 = a1[4];
  v5 = v4 >> 4;
  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    goto LABEL_125;
  v8 = (_QWORD *)(v6 + 8 * v5);
  v9 = *v8 + 376 * (a1[4] & 0xFLL);
  v10 = a1 + 5;
  v79 = *(_QWORD *)(v6 + (((a1[5] + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*((_DWORD *)a1 + 10) + (_DWORD)v4) & 0xF);
  if (v9 == v79)
    goto LABEL_73;
  v77 = a1 + 5;
  v11 = 0;
  do
  {
    v82 = v8;
    v83 = v9;
    if (*(_DWORD *)(v9 + 16) == 7)
    {
      v12 = v9 + 40;
      v84 = v9 + 376;
      while (1)
      {
        v14 = *(_QWORD *)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 24);
        v16 = &v86;
        v17 = &v86;
        v18 = v86;
        if (v86)
          break;
LABEL_18:
        v21 = operator new(0x48uLL);
        v22 = v21;
        v21[4] = v14;
        v21[5] = v15;
        v21[7] = 0;
        v21[8] = 0;
        v21[6] = 0;
        *v21 = 0;
        v21[1] = 0;
        v21[2] = v16;
        *v17 = v21;
        v23 = v21;
        if (*v85)
        {
          v85 = (_QWORD *)*v85;
          v23 = (_QWORD *)*v17;
        }
        v24 = v86;
        v59 = v23 == v86;
        *((_BYTE *)v23 + 24) = v23 == v86;
        if (!v59)
        {
          do
          {
            v25 = v23[2];
            if (*(_BYTE *)(v25 + 24))
              break;
            v26 = *(_QWORD **)(v25 + 16);
            v27 = *v26;
            if (*v26 == v25)
            {
              v30 = v26[1];
              if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
              {
                if (*(_QWORD **)v25 == v23)
                {
                  *(_BYTE *)(v25 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
                    goto LABEL_35;
                }
                else
                {
                  v32 = *(uint64_t **)(v25 + 8);
                  v33 = *v32;
                  *(_QWORD *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(_QWORD *)(v33 + 16) = v25;
                    v26 = *(_QWORD **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
                  *v32 = v25;
                  *(_QWORD *)(v25 + 16) = v32;
                  v26 = (_QWORD *)v32[2];
                  v25 = *v26;
                  *((_BYTE *)v32 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
LABEL_35:
                    *(_QWORD *)(v34 + 16) = v26;
                }
                *(_QWORD *)(v25 + 16) = v26[2];
                *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                *(_QWORD *)(v25 + 8) = v26;
LABEL_41:
                v26[2] = v25;
                break;
              }
            }
            else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
            {
              if (*(_QWORD **)v25 == v23)
              {
                v54 = v23[1];
                *(_QWORD *)v25 = v54;
                if (v54)
                {
                  *(_QWORD *)(v54 + 16) = v25;
                  v26 = *(_QWORD **)(v25 + 16);
                }
                v23[2] = v26;
                *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v23;
                v23[1] = v25;
                *(_QWORD *)(v25 + 16) = v23;
                v26 = (_QWORD *)v23[2];
                *((_BYTE *)v23 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(_QWORD **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
LABEL_39:
                  v35[2] = v26;
              }
              else
              {
                *(_BYTE *)(v25 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(_QWORD **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
                  goto LABEL_39;
              }
              *(_QWORD *)(v25 + 16) = v26[2];
              *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
              *(_QWORD *)v25 = v26;
              goto LABEL_41;
            }
            *(_BYTE *)(v25 + 24) = 1;
            v23 = v26;
            *((_BYTE *)v26 + 24) = v26 == v24;
            *v28 = 1;
          }
          while (v26 != v24);
        }
        ++v87;
        v37 = (char *)v21[7];
        v36 = (char *)v21[8];
        if (v37 >= v36)
          goto LABEL_43;
LABEL_7:
        *(_QWORD *)v37 = v11;
        v13 = (uint64_t)(v37 + 8);
LABEL_8:
        v22[7] = v13;
        v12 += 168;
        if (v12 == v84)
          goto LABEL_70;
      }
      while (1)
      {
        v16 = (_QWORD **)v18;
        v19 = v18[4];
        if (v14 < v19)
          goto LABEL_11;
        if (v19 < v14)
          goto LABEL_16;
        v20 = v16[5];
        if (v15 < (uint64_t)v20)
        {
LABEL_11:
          v18 = *v16;
          v17 = v16;
          if (!*v16)
            goto LABEL_18;
        }
        else
        {
          if ((uint64_t)v20 >= v15)
          {
            v22 = v16;
            v37 = (char *)v16[7];
            v36 = (char *)v16[8];
            if (v37 < v36)
              goto LABEL_7;
LABEL_43:
            v38 = (char *)v22[6];
            v39 = (v37 - v38) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              sub_1000D02C0();
            v41 = v36 - v38;
            if (v41 >> 2 > v40)
              v40 = v41 >> 2;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              if (v42 >> 61)
                sub_1000CDEB8();
              v43 = operator new(8 * v42);
              v44 = &v43[8 * v39];
              *v44 = v11;
              v13 = (uint64_t)(v44 + 1);
              if (v37 == v38)
              {
LABEL_60:
                v22[6] = v44;
                v22[7] = v13;
                v22[8] = &v43[8 * v42];
                if (v38)
                  operator delete(v38);
                goto LABEL_8;
              }
            }
            else
            {
              v43 = 0;
              v44 = (_QWORD *)(8 * v39);
              *(_QWORD *)(8 * v39) = v11;
              v13 = 8 * v39 + 8;
              if (v37 == v38)
                goto LABEL_60;
            }
            v45 = v37 - 8 - v38;
            if (v45 < 0x58)
              goto LABEL_130;
            if ((unint64_t)(v38 - v43) < 0x20)
              goto LABEL_130;
            v46 = (v45 >> 3) + 1;
            v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            v48 = &v37[-v47];
            v44 = (_QWORD *)((char *)v44 - v47);
            v49 = &v43[8 * v39 - 16];
            v50 = v37 - 16;
            v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 4;
            }
            while (v51);
            v37 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              do
              {
                v53 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *--v44 = v53;
              }
              while (v37 != v38);
            }
            goto LABEL_60;
          }
LABEL_16:
          v18 = v16[1];
          if (!v18)
          {
            v17 = v16 + 1;
            goto LABEL_18;
          }
        }
      }
    }
LABEL_70:
    v8 = v82;
    v9 = v83 + 376;
    if (v83 + 376 - *v82 == 6016)
    {
      v8 = v82 + 1;
      v9 = v82[1];
    }
    v3 = a1;
    ++v11;
  }
  while (v9 != v79);
  v4 = a1[4];
  v6 = a1[1];
  v7 = a1[2];
  v5 = v4 >> 4;
  v10 = v77;
LABEL_73:
  if (v7 != v6)
  {
    v55 = (_QWORD *)(v6 + 8 * v5);
    v56 = *v55 + 376 * (v4 & 0xF);
    v57 = *(_QWORD *)(v6 + (((*v10 + v4) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * ((*(_DWORD *)v10 + (_DWORD)v4) & 0xF);
    while (v56 != v57)
    {
      v58 = *(_DWORD *)(v56 + 16);
      v59 = v58 == 2 || v58 == 7;
      if (!v59)
      {
        v61 = v86;
        if (v86)
        {
          v63 = *(_QWORD *)(v56 + 56);
          v62 = *(_QWORD *)(v56 + 64);
          v64 = &v86;
          v65 = v86;
          do
          {
            v66 = v65[4];
            if (v66 < v63)
            {
              ++v65;
            }
            else if (v63 >= v66)
            {
              if (v65[5] < v62)
                ++v65;
              else
                v64 = (_QWORD **)v65;
            }
            else
            {
              v64 = (_QWORD **)v65;
            }
            v65 = (_QWORD *)*v65;
          }
          while (v65);
          if (v64 != &v86)
          {
            v67 = v64[4];
            if (v63 >= (uint64_t)v67 && ((uint64_t)v67 < v63 || v62 >= (uint64_t)v64[5]))
            {
              v68 = v64[6];
              v69 = v64[7];
              if (v68 != v69)
              {
                do
                {
                  if (sub_10029A0F4((_QWORD *)v56, (_QWORD *)(*(_QWORD *)(v3[1] + (((v3[4] + *v68) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v68) & 0xF)), a2, a3))
                  {
                    *(_BYTE *)(*(_QWORD *)(v3[1] + (((v3[4] + *v68) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v68) & 0xF)
                             + 32) = 1;
                  }
                  ++v68;
                }
                while (v68 != v69);
                v61 = v86;
              }
            }
          }
          if (v61)
          {
            v71 = *(_QWORD *)(v56 + 224);
            v70 = *(_QWORD *)(v56 + 232);
            v72 = &v86;
            do
            {
              v73 = v61[4];
              if (v73 < v71)
              {
                ++v61;
              }
              else if (v71 >= v73)
              {
                if (v61[5] < v70)
                  ++v61;
                else
                  v72 = (_QWORD **)v61;
              }
              else
              {
                v72 = (_QWORD **)v61;
              }
              v61 = (_QWORD *)*v61;
            }
            while (v61);
            if (v72 != &v86)
            {
              v74 = v72[4];
              if (v71 >= (uint64_t)v74 && ((uint64_t)v74 < v71 || v70 >= (uint64_t)v72[5]))
              {
                v75 = v72[6];
                v76 = v72[7];
                while (v75 != v76)
                {
                  if (sub_10029A0F4((_QWORD *)v56, (_QWORD *)(*(_QWORD *)(v3[1] + (((v3[4] + *v75) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v75) & 0xF)), a2, a3))
                  {
                    *(_BYTE *)(*(_QWORD *)(v3[1] + (((v3[4] + *v75) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v75) & 0xF)
                             + 32) = 1;
                  }
                  ++v75;
                }
              }
            }
          }
        }
      }
      v56 += 376;
      if (v56 - *v55 == 6016)
      {
        v60 = v55[1];
        ++v55;
        v56 = v60;
      }
    }
  }
LABEL_125:
  sub_10029A500((uint64_t)&v85, v86);
}

void sub_100298D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_10029A500((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100298D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_10029A500((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100298D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_10029A500((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100298D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  sub_10029A500((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

BOOL sub_100298D84(_QWORD *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;

  sub_10029A550(a1, (uint64_t **)a2, a3, a4);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = a1[4];
    v8 = a1[1];
    if (a1[2] != v8)
    {
      v9 = (uint64_t *)(v8 + 8 * (v7 >> 4));
      v10 = *v9;
      v11 = *v9 + 376 * (a1[4] & 0xFLL);
      v12 = *(_QWORD *)(v8 + (((a1[5] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)a1 + 10) + (_DWORD)v7) & 0xF);
      while (v11 != v12)
      {
        *(_QWORD *)(v11 + 24) = -1;
        v11 += 376;
        if (v11 - v10 == 6016)
        {
          v13 = v9[1];
          ++v9;
          v10 = v13;
          v11 = v13;
        }
      }
    }
    v16 = *(uint64_t **)a2;
    v15 = (uint64_t *)(a2 + 8);
    v14 = v16;
    if (v16 != v15)
    {
      v17 = v14;
      do
      {
        v18 = (uint64_t *)v17[5];
        if (v18 != v17 + 6)
        {
          v19 = v17[4];
          do
          {
            *(_QWORD *)(*(_QWORD *)(v8 + (((v18[4] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
                      + 376 * ((*((_DWORD *)v18 + 8) + (_DWORD)v7) & 0xF)
                      + 24) = v19;
            v20 = (uint64_t *)v18[1];
            if (v20)
            {
              do
              {
                v21 = v20;
                v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v21 = (uint64_t *)v18[2];
                v22 = *v21 == (_QWORD)v18;
                v18 = v21;
              }
              while (!v22);
            }
            v18 = v21;
          }
          while (v21 != v17 + 6);
        }
        v23 = (uint64_t *)v17[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t *)v17[2];
            v22 = *v24 == (_QWORD)v17;
            v17 = v24;
          }
          while (!v22);
        }
        v17 = v24;
      }
      while (v24 != v15);
      v25 = a1[4];
      v26 = a1[1];
      do
      {
        v27 = (uint64_t *)v14[5];
        v28 = v14 + 6;
        if (v27 != v14 + 6)
        {
          v29 = (uint64_t *)v14[5];
          while (1)
          {
            v30 = *(_QWORD *)(v26 + (((unint64_t)(v29[4] + v25) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*((_DWORD *)v29 + 8) + (_DWORD)v25) & 0xF);
            if (*(_DWORD *)(v30 + 40) == 1 && *(_DWORD *)(v30 + 208) == 1)
              break;
            v31 = (uint64_t *)v29[1];
            if (v31)
            {
              do
              {
                v32 = v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v32 = (uint64_t *)v29[2];
                v22 = *v32 == (_QWORD)v29;
                v29 = v32;
              }
              while (!v22);
            }
            v29 = v32;
            if (v32 == v28)
              goto LABEL_46;
          }
          do
          {
            *(_BYTE *)(*(_QWORD *)(v26 + (((unint64_t)(v27[4] + v25) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 376 * ((*((_DWORD *)v27 + 8) + (_DWORD)v25) & 0xF)
                     + 33) = 1;
            v33 = (uint64_t *)v27[1];
            if (v33)
            {
              do
              {
                v34 = v33;
                v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                v34 = (uint64_t *)v27[2];
                v22 = *v34 == (_QWORD)v27;
                v27 = v34;
              }
              while (!v22);
            }
            v27 = v34;
          }
          while (v34 != v28);
        }
LABEL_46:
        v35 = (uint64_t *)v14[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (uint64_t *)v14[2];
            v22 = *v36 == (_QWORD)v14;
            v14 = v36;
          }
          while (!v22);
        }
        v14 = v36;
      }
      while (v36 != v15);
    }
  }
  return v6 != 0;
}

void sub_100299034(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = a1[1];
  v4 = a1[2];
  v5 = (_QWORD *)(v3 + 8 * (a1[4] >> 4));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *v5 + 376 * (a1[4] & 0xFLL);
  v55 = 0;
  v7 = a2 + 1;
  while (v4 != v3)
  {
    v8 = a1[5] + a1[4];
    if (v6 == *(_QWORD *)(v3 + ((v8 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v8 & 0xF))
      return;
LABEL_10:
    v51 = v5;
    v52 = v6;
    if (!*(_BYTE *)(v6 + 32))
    {
      v9 = 0;
      v10 = (_QWORD *)(v6 + 40);
      v53 = (_QWORD *)(v6 + 376);
      v54 = v6 + 40;
      do
      {
        v12 = (uint64_t *)v10[1];
        v13 = (uint64_t *)v10[2];
        v14 = (uint64_t *)v10[3];
        v15 = v7;
        v16 = v7;
        v17 = *v7;
        v56 = v9;
        if (!*v7)
          goto LABEL_31;
        do
        {
          while (1)
          {
            v16 = (uint64_t **)v17;
            v18 = (uint64_t *)v17[4];
            if (v12 != v18)
              break;
            v19 = v16[5];
            if (v13 != v19)
            {
              if ((uint64_t)v13 < (uint64_t)v19)
                goto LABEL_18;
              if ((uint64_t)v19 >= (uint64_t)v13)
                goto LABEL_56;
              goto LABEL_29;
            }
            v20 = v16[6];
            if ((uint64_t)v14 >= (uint64_t)v20)
            {
              if ((uint64_t)v20 >= (uint64_t)v14)
                goto LABEL_56;
              goto LABEL_29;
            }
LABEL_18:
            v17 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_31;
          }
          if ((uint64_t)v12 < (uint64_t)v18)
            goto LABEL_18;
          if ((uint64_t)v18 >= (uint64_t)v12)
            goto LABEL_56;
LABEL_29:
          v17 = v16[1];
        }
        while (v17);
        v15 = v16 + 1;
LABEL_31:
        v21 = (uint64_t *)v16;
        v16 = (uint64_t **)operator new(0x50uLL);
        v16[4] = v12;
        v16[5] = v13;
        v16[6] = v14;
        v16[7] = 0;
        v16[8] = 0;
        v16[9] = 0;
        *v16 = 0;
        v16[1] = 0;
        v16[2] = v21;
        *v15 = (uint64_t *)v16;
        v22 = (uint64_t *)**a2;
        v23 = (uint64_t *)v16;
        if (v22)
        {
          *a2 = v22;
          v23 = *v15;
        }
        v24 = *v7;
        v25 = v23 == *v7;
        *((_BYTE *)v23 + 24) = v25;
        if (!v25)
        {
          do
          {
            v26 = v23[2];
            if (*(_BYTE *)(v26 + 24))
              break;
            v27 = *(uint64_t **)(v26 + 16);
            v28 = *v27;
            if (*v27 == v26)
            {
              v31 = v27[1];
              if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
              {
                if (*(uint64_t **)v26 == v23)
                {
                  *(_BYTE *)(v26 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v35 = *(_QWORD *)(v26 + 8);
                  *v27 = v35;
                  if (v35)
                    goto LABEL_48;
                }
                else
                {
                  v33 = *(uint64_t **)(v26 + 8);
                  v34 = *v33;
                  *(_QWORD *)(v26 + 8) = *v33;
                  if (v34)
                  {
                    *(_QWORD *)(v34 + 16) = v26;
                    v27 = *(uint64_t **)(v26 + 16);
                  }
                  v33[2] = (uint64_t)v27;
                  *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                  *v33 = v26;
                  *(_QWORD *)(v26 + 16) = v33;
                  v27 = (uint64_t *)v33[2];
                  v26 = *v27;
                  *((_BYTE *)v33 + 24) = 1;
                  *((_BYTE *)v27 + 24) = 0;
                  v35 = *(_QWORD *)(v26 + 8);
                  *v27 = v35;
                  if (v35)
LABEL_48:
                    *(_QWORD *)(v35 + 16) = v27;
                }
                *(_QWORD *)(v26 + 16) = v27[2];
                *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                *(_QWORD *)(v26 + 8) = v27;
LABEL_54:
                v27[2] = v26;
                break;
              }
            }
            else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
            {
              if (*(uint64_t **)v26 == v23)
              {
                v49 = v23[1];
                *(_QWORD *)v26 = v49;
                if (v49)
                {
                  *(_QWORD *)(v49 + 16) = v26;
                  v27 = *(uint64_t **)(v26 + 16);
                }
                v23[2] = (uint64_t)v27;
                *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v23;
                v23[1] = v26;
                *(_QWORD *)(v26 + 16) = v23;
                v27 = (uint64_t *)v23[2];
                *((_BYTE *)v23 + 24) = 1;
                *((_BYTE *)v27 + 24) = 0;
                v26 = v27[1];
                v36 = *(uint64_t **)v26;
                v27[1] = *(_QWORD *)v26;
                if (v36)
LABEL_52:
                  v36[2] = (uint64_t)v27;
              }
              else
              {
                *(_BYTE *)(v26 + 24) = 1;
                *((_BYTE *)v27 + 24) = 0;
                v26 = v27[1];
                v36 = *(uint64_t **)v26;
                v27[1] = *(_QWORD *)v26;
                if (v36)
                  goto LABEL_52;
              }
              *(_QWORD *)(v26 + 16) = v27[2];
              *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
              *(_QWORD *)v26 = v27;
              goto LABEL_54;
            }
            *(_BYTE *)(v26 + 24) = 1;
            v23 = v27;
            *((_BYTE *)v27 + 24) = v27 == v24;
            *v29 = 1;
          }
          while (v27 != v24);
        }
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v9 = v56;
LABEL_56:
        v37 = v54 - 168 * v9 + 176;
        v39 = (char *)v16[8];
        v38 = (unint64_t)v16[9];
        if ((unint64_t)v39 < v38)
        {
          *(_QWORD *)v39 = v55;
          *((_QWORD *)v39 + 1) = v9;
          v39[16] = 0;
          v11 = v39 + 40;
          *((_QWORD *)v39 + 3) = v37;
          *((_QWORD *)v39 + 4) = v10;
        }
        else
        {
          v40 = v16[7];
          v41 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (char *)v40) >> 3) + 1;
          if (v41 > 0x666666666666666)
            sub_1000D02C0();
          v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - (_QWORD)v40) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x333333333333333)
            v43 = 0x666666666666666;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 > 0x666666666666666)
              sub_1000CDEB8();
            v44 = (char *)operator new(40 * v43);
            v9 = v56;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * ((v39 - (char *)v40) >> 3)];
          *(_QWORD *)v45 = v55;
          *((_QWORD *)v45 + 1) = v9;
          v45[16] = 0;
          *((_QWORD *)v45 + 3) = v37;
          *((_QWORD *)v45 + 4) = v10;
          v46 = v45;
          if (v39 != (char *)v40)
          {
            do
            {
              v47 = *(_OWORD *)(v39 - 40);
              v48 = *(_OWORD *)(v39 - 24);
              *((_QWORD *)v46 - 1) = *((_QWORD *)v39 - 1);
              *(_OWORD *)(v46 - 24) = v48;
              *(_OWORD *)(v46 - 40) = v47;
              v46 -= 40;
              v39 -= 40;
            }
            while (v39 != (char *)v40);
            v39 = (char *)v16[7];
          }
          v11 = v45 + 40;
          v16[7] = (uint64_t *)v46;
          v16[8] = (uint64_t *)(v45 + 40);
          v16[9] = (uint64_t *)&v44[40 * v43];
          if (v39)
          {
            operator delete(v39);
            v9 = v56;
          }
        }
        v16[8] = (uint64_t *)v11;
        v10 += 21;
        ++v9;
      }
      while (v10 != v53);
    }
    v5 = v51;
    v6 = v52 + 376;
    if (v52 + 376 - *v51 == 6016)
    {
      v5 = v51 + 1;
      v6 = v51[1];
    }
    ++v55;
    v3 = a1[1];
    v4 = a1[2];
  }
  if (v6)
    goto LABEL_10;
}

void sub_100299554(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4, _QWORD *a5)
{
  _QWORD *v5;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  double *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 *v18;
  __n128 *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v58;
  __int128 v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[4];
  uint64_t v64;
  double *v65[3];
  double *v66[4];

  v5 = (_QWORD *)*a1;
  v58 = a1 + 1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63[2] = 0;
      v63[3] = 0;
      if (v5[7])
      {
        v9 = (_QWORD *)v5[5];
        if (v9 == v5 + 6)
        {
          v19 = 0;
          v18 = 0;
        }
        else
        {
          v10 = 1;
          do
          {
            v11 = v9[4];
            v12 = *(_QWORD *)(a2 + 32) + v11;
            v13 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8));
            v14 = v12 & 0xF;
            v15 = (double *)(v13 + 376 * v14);
            if ((v10 & 1) != 0)
              v59 = *(_OWORD *)v15;
            sub_10029F104(&v60, (double *)(v13 + 376 * v14), (uint64_t)(v15 + 5), v11, 0, a4, a5, v10 & 1);
            sub_10029F104(&v60, v15, (uint64_t)(v15 + 26), v11, 1, a4, a5, 0);
            v16 = (_QWORD *)v9[1];
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = (_QWORD *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (_QWORD *)v9[2];
                v39 = *v17 == (_QWORD)v9;
                v9 = v17;
              }
              while (!v39);
            }
            v10 = 0;
            v9 = v17;
          }
          while (v17 != v5 + 6);
          v18 = (__int128 *)v60;
          v19 = (__n128 *)v61;
        }
        v66[0] = (double *)v63;
        v66[1] = (double *)&v59;
        v20 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v19 - (char *)v18) >> 4));
        v66[2] = (double *)&v64;
        v65[0] = (double *)v63;
        v65[1] = (double *)&v59;
        v65[2] = (double *)&v64;
        if (v19 == (__n128 *)v18)
          v21 = 0;
        else
          v21 = v20;
        sub_1002A0004(v18, v19, v65, v21, 1);
        v22 = v60;
        v23 = v61;
        v24 = v61 - v60;
        if (v61 != v60)
        {
          *((_QWORD *)v60 + 2) = 0;
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v24 >> 4)) >= 2)
          {
            v25 = 0;
            v26 = 128;
            v27 = 1;
            do
            {
              v28 = sub_10029FA68(v66, (double *)&v22[v26 - 128], (double *)&v22[v26 - 16]);
              v22 = v60;
              v23 = v61;
              v25 += v28;
              *(_QWORD *)&v60[v26] = v25;
              ++v27;
              v26 += 112;
            }
            while (v27 < 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 4));
          }
          LOWORD(v66[0]) = 0;
          if (v23 != v22)
          {
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = &v22[v29];
              if (!*(_DWORD *)&v22[v29 + 44])
              {
                v32 = *((_QWORD *)v31 + 9);
                if (v32 <= 1 && !*((_BYTE *)v66 + v32))
                {
                  sub_1002A1F90(&v60, v32, v30);
                  *((_BYTE *)v66 + *((_QWORD *)v31 + 9)) = 1;
                  v22 = v60;
                  v23 = v61;
                }
              }
              ++v30;
              v29 += 112;
            }
            while (v30 < 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 4));
          }
        }
        if (a3 == 1)
        {
          sub_1002A218C((uint64_t *)&v60);
          v33 = v60;
          v34 = v61;
          if (v61 != v60)
          {
            v35 = 0;
            v36 = 0;
            v37 = (v61 - v60) / 112;
            if (v37 <= 1)
              v37 = 1;
            v38 = v60 + 44;
            do
            {
              v39 = *(_QWORD *)(v38 - 28) > v36 && *(_DWORD *)v38 == 1;
              if (v39)
              {
                if (*(_QWORD *)(v38 + 4) == 0 && *(_QWORD *)(v38 + 12) != 0)
                  v36 = *(_QWORD *)(v38 - 28);
                v35 += (*(_QWORD *)(v38 + 4) == 0) & (*(_QWORD *)(v38 + 12) != 0);
              }
              v38 += 112;
              --v37;
            }
            while (v37);
LABEL_59:
            v5[8] = v35;
            v44 = v34 - v33;
            if (v44)
            {
              v45 = v44 / 112;
              v46 = *(_QWORD *)(a2 + 32);
              v47 = *(_QWORD *)(a2 + 8);
              v49 = a3 == 1 && v35 == 0;
              if (v45 <= 1)
                v45 = 1;
              v50 = v33 + 56;
              do
              {
                v51 = *(_QWORD *)(v47 + (((unint64_t)(v46 + *(v50 - 3)) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 376 * (((_DWORD)v46 + *((_DWORD *)v50 - 6)) & 0xF);
                v52 = v51 + 40;
                v53 = *((_DWORD *)v50 - 4);
                if (v49)
                  *(_BYTE *)(v52 + 168 * v53 + 104) = 0;
                if (*((_DWORD *)v50 - 3) == 1)
                {
                  v54 = v52 + 168 * v53;
                  *(_OWORD *)(v54 + 112) = *(_OWORD *)(v50 - 1);
                  *(_OWORD *)(v54 + 128) = *(_OWORD *)(v50 - 5);
                  if (*(_QWORD *)(v51 + 48) != *(_QWORD *)(v51 + 216)
                    && (a3 == 1 && *(v50 - 1) || a3 == 2 && *v50 != 2))
                  {
                    *(_BYTE *)(v52 + 168 * v53 + 104) = 0;
                  }
                }
                v50 += 14;
                --v45;
              }
              while (v45);
            }
LABEL_81:
            v61 = v33;
            operator delete(v33);
            goto LABEL_82;
          }
        }
        else
        {
          sub_1002A22B8((uint64_t *)&v60);
          v33 = v60;
          v34 = v61;
          if (v61 != v60)
          {
            v35 = 0;
            v40 = 0;
            v41 = (v61 - v60) / 112;
            if (v41 <= 1)
              v41 = 1;
            v42 = v60 + 44;
            do
            {
              if (*(_QWORD *)(v42 - 28) > v40 && *(_DWORD *)v42 == 1)
              {
                if (*(_QWORD *)(v42 + 4) < 2uLL && *(_QWORD *)(v42 + 12) > 1uLL)
                  v40 = *(_QWORD *)(v42 - 28);
                v35 += (*(_QWORD *)(v42 + 4) < 2uLL) & (*(_QWORD *)(v42 + 12) > 1uLL);
              }
              v42 += 112;
              --v41;
            }
            while (v41);
            goto LABEL_59;
          }
        }
        v5[8] = 0;
        v33 = v34;
        if (v34)
          goto LABEL_81;
      }
LABEL_82:
      v55 = (_QWORD *)v5[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v5[2];
          v39 = *v56 == (_QWORD)v5;
          v5 = v56;
        }
        while (!v39);
      }
      v5 = v56;
    }
    while (v56 != v58);
  }
}

void sub_100299A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100299AAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;

  v5 = (uint64_t *)(a2 + 8);
  v4 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    do
    {
      v6 = (uint64_t *)v4[5];
      if (v6 != v4 + 6)
      {
        do
        {
          v10 = (uint64_t *)v6[1];
          v11 = v10;
          v12 = v6;
          if (v10)
          {
            do
            {
              v13 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v13 = (uint64_t *)v12[2];
              v14 = *v13 == (_QWORD)v12;
              v12 = v13;
            }
            while (!v14);
          }
          v15 = *(_QWORD *)(a1 + 32) + v6[4];
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v15 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v15 & 0xF) + 32))
          {
            v16 = v6;
            if (v10)
            {
              do
              {
                v17 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v17 = (uint64_t *)v16[2];
                v14 = *v17 == (_QWORD)v16;
                v16 = v17;
              }
              while (!v14);
            }
            if ((uint64_t *)v4[5] == v6)
              v4[5] = (uint64_t)v17;
            v9 = (uint64_t *)v4[6];
            --v4[7];
            sub_1002503B4(v9, v6);
            operator delete(v6);
          }
          v6 = v13;
        }
        while (v13 != v4 + 6);
      }
      v7 = (uint64_t *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v4[2];
          v14 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v14);
      }
      v4 = v8;
    }
    while (v8 != v5);
    v4 = *(uint64_t **)a2;
  }
  if (v4 != v5)
  {
    do
    {
      v19 = (uint64_t *)v4[1];
      v20 = v19;
      v21 = v4;
      if (v19)
      {
        do
        {
          v22 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v21[2];
          v14 = *v22 == (_QWORD)v21;
          v21 = v22;
        }
        while (!v14);
      }
      if (v4[7] == 1)
      {
        v23 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(v4[5] + 32);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v23 & 0xF) + 24) = -1;
        v24 = v4;
        if (v19)
        {
          do
          {
            v25 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v25 = (uint64_t *)v24[2];
            v14 = *v25 == (_QWORD)v24;
            v24 = v25;
          }
          while (!v14);
        }
        if (*(uint64_t **)a2 == v4)
          *(_QWORD *)a2 = v25;
        v18 = *(uint64_t **)(a2 + 8);
        --*(_QWORD *)(a2 + 16);
        sub_1002503B4(v18, v4);
        sub_10004AAA0((uint64_t)(v4 + 5), (_QWORD *)v4[6]);
        operator delete(v4);
      }
      v4 = v22;
    }
    while (v22 != v5);
  }
}

_QWORD *sub_100299D0C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = (_QWORD *)*result;
  v4 = result[1] - *result;
  if (v4)
  {
    v5 = result;
    v6 = v4 / 40;
    if (v4 <= 40)
      v7 = 1 % v6;
    else
      v7 = 1;
    v8 = &v3[5 * v7];
    v9 = ~v6;
    v10 = v6 + 1;
    v11 = (_QWORD *)*result;
    v49 = a2;
    do
    {
      v12 = *v11;
      if ((_DWORD)a3 && v12 == *v8)
      {
        v13 = v7 + 1;
        if (v7 <= -2)
        {
          v45 = ((v10 + v7) & ~((v10 + v7) >> 63)) + v9 - v7;
          if (v45)
            v46 = 2;
          else
            v46 = 1;
          v47 = v46 + (v45 - (unint64_t)(v45 != 0)) / v6;
          if (v47 < 2)
            goto LABEL_67;
          v13 += (v47 & 0xFFFFFFFFFFFFFFFELL) * v6;
          v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
          do
            v48 -= 2;
          while (v48);
          if (v47 != (v47 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_67:
            do
              v13 += v6;
            while (v13 < 0);
          }
        }
        else if (v13 < v6)
        {
          v8 += 5;
          goto LABEL_14;
        }
        v13 %= v6;
        v8 = &v3[5 * v13];
      }
      else
      {
        v13 = v7;
      }
LABEL_14:
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_QWORD *)(v15 + (((unint64_t)(v14 + v12) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * (((_DWORD)v14 + (_DWORD)v12) & 0xF);
      v17 = v16 + 40;
      v18 = v11[1];
      v19 = v16 + 40 + 168 * v18;
      v20 = *(_QWORD *)(v16 + 24);
      v21 = *v8;
      if (v20 >= 1 && v12 != v21)
      {
        while (1)
        {
          v33 = *(_QWORD *)(v15 + (((unint64_t)(v21 + v14) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 376 * (((_DWORD)v21 + (_DWORD)v14) & 0xF);
          if (v20 != *(_QWORD *)(v33 + 24))
            goto LABEL_19;
          v34 = v33 + 40;
          v35 = v8[1];
          result = *(_QWORD **)(v19 + 8);
          if (result != *(_QWORD **)(v34 + 168 * v35 + 8))
            goto LABEL_19;
          result = *(_QWORD **)(v34 + 168 * v35 + 32);
          if (*(_QWORD **)(v19 + 32) != result)
            goto LABEL_19;
          result = *(_QWORD **)(v34 + 168 * v35 + 24);
          if (*(_QWORD **)(v19 + 24) != result)
            goto LABEL_19;
          result = *(_QWORD **)(v34 + 168 * v35 + 40);
          if (*(_QWORD **)(v19 + 40) != result || *(_QWORD *)(v19 + 16) != *(_QWORD *)(v34 + 168 * v35 + 16))
            goto LABEL_19;
          v23 = v13 + 1;
          if (v13 <= -2)
            break;
          if (v23 >= v6)
          {
LABEL_27:
            v23 %= v6;
            v8 = &v3[5 * v23];
            v21 = *v8;
            v13 = v23;
            if (v12 == *v8)
              goto LABEL_20;
          }
          else
          {
            v36 = v8[5];
            v8 += 5;
            v21 = v36;
            ++v13;
            if (v12 == v36)
              goto LABEL_20;
          }
        }
        v37 = ((v10 + v13) & ~((v10 + v13) >> 63)) + v9 - v13;
        if (v37)
          v38 = 2;
        else
          v38 = 1;
        v39 = v38 + (v37 - (unint64_t)(v37 != 0)) / v6;
        if (v39 < 2)
          goto LABEL_68;
        v23 += (v39 & 0xFFFFFFFFFFFFFFFELL) * v6;
        v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
        do
          v40 -= 2;
        while (v40);
        if (v39 != (v39 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_68:
          do
            v23 += v6;
          while (v23 < 0);
        }
        goto LABEL_27;
      }
LABEL_19:
      v23 = v13;
LABEL_20:
      v24 = *(_QWORD *)(v15 + (((unint64_t)(v21 + v14) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * (((_DWORD)v21 + (_DWORD)v14) & 0xF)
          + 168 * v8[1];
      v25 = v17 + 168 * v18;
      *(_QWORD *)(v25 + 80) = *(_QWORD *)(v8[4] + 32);
      *(_QWORD *)(v25 + 88) = v21;
      if (*(_QWORD *)(v19 + 32) == *(_QWORD *)(v24 + 72))
      {
        v26 = a3;
        v50 = v18;
        v27 = v5;
        v28 = v3;
        v29 = v11;
        v30 = v17;
        v31 = v9;
        result = (_QWORD *)sub_10028FED4((double *)(v19 + 48), (double *)(v24 + 88));
        v9 = v31;
        v32 = v30;
        v11 = v29;
        v3 = v28;
        v5 = v27;
        a2 = v49;
        a3 = v26;
        if ((_DWORD)result)
          *(_QWORD *)(v32 + 168 * v50 + 96) = *v8;
      }
      if ((a3 & 1) != 0)
      {
        v7 = v23;
      }
      else
      {
        v7 = v23 + 1;
        if (v23 <= -2)
        {
          v41 = ((v10 + v23) & ~((v10 + v23) >> 63)) + v9 - v23;
          if (v41)
            v42 = 2;
          else
            v42 = 1;
          v43 = v42 + (v41 - (unint64_t)(v41 != 0)) / v6;
          if (v43 < 2)
            goto LABEL_69;
          v7 += (v43 & 0xFFFFFFFFFFFFFFFELL) * v6;
          v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
          do
            v44 -= 2;
          while (v44);
          if (v43 != (v43 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_69:
            do
              v7 += v6;
            while (v7 < 0);
          }
LABEL_55:
          v7 %= v6;
          v8 = &v3[5 * v7];
          goto LABEL_7;
        }
        if (v7 >= v6)
          goto LABEL_55;
        v8 += 5;
      }
LABEL_7:
      v11 += 5;
    }
    while (v11 != (_QWORD *)v5[1]);
  }
  return result;
}

BOOL sub_10029A0F4(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;

  v4 = *a4;
  v5 = a3[3];
  v7 = a1[7];
  v6 = a1[8];
  v8 = *a4 + 48 * v7;
  v9 = (_QWORD *)(v8 + 24);
  v10 = (_QWORD *)(v5 + 24 * v6);
  if (v6 < 0)
    v10 = a3;
  v11 = a2[7];
  v12 = a2[8];
  if (v6 != v12 || v7 != v11)
    goto LABEL_28;
  v14 = a1[6];
  if (v14 != a2[6])
    goto LABEL_28;
  v15 = a2[9];
  v16 = a1[9];
  v17 = __OFSUB__(v15, v16);
  v18 = v15 - v16;
  if (v14)
  {
    if (v18 < 0 == v17)
      goto LABEL_18;
    v19 = (_QWORD *)(*v9 + 24 * v6);
    if (v6 < 0)
      v19 = (_QWORD *)v8;
  }
  else
  {
    v19 = v10;
    if (v18 < 0 == v17)
      goto LABEL_18;
  }
  v18 = v18 + ((uint64_t)(v19[1] - *v19) >> 4) - 1;
LABEL_18:
  if (v18 <= 1)
  {
    v20 = a1[27];
    if (v20 == a2[27])
    {
      v21 = a1[29];
      if (v21 == a2[29])
      {
        v22 = a1[28];
        if (v22 == a2[28])
        {
          v23 = a2[30];
          v24 = a1[30];
          v25 = __OFSUB__(v23, v24);
          v26 = v23 - v24;
          if (v20)
          {
            if (v26 < 0 == v25)
              goto LABEL_123;
            if (v21 >= 0)
              v27 = (_QWORD *)(*(_QWORD *)(v4 + 48 * v22 + 24) + 24 * v21);
            else
              v27 = (_QWORD *)(v4 + 48 * v22);
          }
          else
          {
            if (v26 < 0 == v25)
            {
LABEL_123:
              v28 = v26 < 2;
              v30 = a2[28];
              v29 = a2[29];
              if (v6 != v29 || v7 != v30)
                goto LABEL_60;
              goto LABEL_33;
            }
            if (v21 >= 0)
              v27 = (_QWORD *)(v5 + 24 * v21);
            else
              v27 = a3;
          }
          v26 = v26 + ((uint64_t)(v27[1] - *v27) >> 4) - 1;
          goto LABEL_123;
        }
      }
    }
  }
LABEL_28:
  v28 = 0;
  v30 = a2[28];
  v29 = a2[29];
  if (v6 != v29 || v7 != v30)
    goto LABEL_60;
LABEL_33:
  v32 = a1[6];
  if (v32 != a2[27])
    goto LABEL_60;
  v33 = a2[30];
  v34 = a1[9];
  v35 = __OFSUB__(v33, v34);
  v36 = v33 - v34;
  if (v32)
  {
    if (v36 < 0 == v35)
      goto LABEL_43;
    v37 = (_QWORD *)(*v9 + 24 * v6);
    if (v6 < 0)
      v37 = (_QWORD *)v8;
  }
  else
  {
    v37 = v10;
    if (v36 < 0 == v35)
      goto LABEL_43;
  }
  v36 = v36 + ((uint64_t)(v37[1] - *v37) >> 4) - 1;
LABEL_43:
  if (v36 > 1)
    goto LABEL_60;
  v38 = a1[27];
  if (v38 != a2[6] || a1[29] != v12 || a1[28] != v11)
    goto LABEL_60;
  v39 = a2[9];
  v40 = a1[30];
  v41 = __OFSUB__(v39, v40);
  v42 = v39 - v40;
  if (v38)
  {
    if (v42 < 0 == v41)
      goto LABEL_58;
    v43 = (_QWORD *)(v4 + 48 * v11);
    if (v12 >= 0)
      v43 = (_QWORD *)(v43[3] + 24 * v12);
LABEL_57:
    v42 = v42 + ((uint64_t)(v43[1] - *v43) >> 4) - 1;
    goto LABEL_58;
  }
  if (v42 < 0 != v41)
  {
    v43 = (_QWORD *)(v5 + 24 * v12);
    if (v12 < 0)
      v43 = a3;
    goto LABEL_57;
  }
LABEL_58:
  if (v42 < 2)
    ++v28;
LABEL_60:
  v45 = a1[28];
  v44 = a1[29];
  v46 = (_QWORD *)(v4 + 48 * v45);
  v47 = v46 + 3;
  v48 = (_QWORD *)(v5 + 24 * v44);
  if (v44 < 0)
    v48 = a3;
  if (v44 == v12 && v45 == v11)
  {
    v49 = a1[27];
    if (v49 == a2[6])
    {
      v50 = a2[9];
      v51 = a1[30];
      v52 = __OFSUB__(v50, v51);
      v53 = v50 - v51;
      if (v49)
      {
        if (v53 < 0 == v52)
          goto LABEL_74;
        v54 = (_QWORD *)(*v47 + 24 * v12);
        if (v44 < 0)
          v54 = v46;
      }
      else
      {
        v54 = v48;
        if (v53 < 0 == v52)
          goto LABEL_74;
      }
      v53 = v53 + ((uint64_t)(v54[1] - *v54) >> 4) - 1;
LABEL_74:
      if (v53 > 1)
        goto LABEL_89;
      v55 = a1[6];
      if (v55 != a2[27] || v6 != v29 || v7 != v30)
        goto LABEL_89;
      v56 = a2[30];
      v57 = a1[9];
      v58 = __OFSUB__(v56, v57);
      v59 = v56 - v57;
      if (v55)
      {
        if (v59 < 0 == v58)
          goto LABEL_87;
        v60 = (_QWORD *)(*v9 + 24 * v6);
        if (v6 < 0)
          v60 = (_QWORD *)v8;
      }
      else
      {
        v60 = v10;
        if (v59 < 0 == v58)
        {
LABEL_87:
          if (v59 < 2)
            ++v28;
          goto LABEL_89;
        }
      }
      v59 = v59 + ((uint64_t)(v60[1] - *v60) >> 4) - 1;
      goto LABEL_87;
    }
  }
LABEL_89:
  if (v44 != v29)
    return v28 == 2;
  if (v45 != v30)
    return v28 == 2;
  v61 = a1[27];
  if (v61 != a2[27])
    return v28 == 2;
  v62 = a2[30];
  v63 = a1[30];
  v64 = __OFSUB__(v62, v63);
  v65 = v62 - v63;
  if (v61)
  {
    if (v65 < 0 == v64)
      goto LABEL_101;
    v48 = (_QWORD *)(*v47 + 24 * v29);
    if (v44 < 0)
      v48 = v46;
  }
  else if (v65 < 0 == v64)
  {
    goto LABEL_101;
  }
  v65 = v65 + ((uint64_t)(v48[1] - *v48) >> 4) - 1;
LABEL_101:
  if (v65 > 1)
    return v28 == 2;
  v66 = a1[6];
  if (v66 != a2[6] || v6 != v12 || v7 != v11)
    return v28 == 2;
  v67 = a2[9];
  v68 = a1[9];
  v69 = __OFSUB__(v67, v68);
  v70 = v67 - v68;
  if (v66)
  {
    if (v70 < 0 == v69)
      goto LABEL_114;
    v10 = (_QWORD *)(*v9 + 24 * v6);
    if (v6 < 0)
      v10 = (_QWORD *)v8;
LABEL_113:
    v70 = v70 + ((uint64_t)(v10[1] - *v10) >> 4) - 1;
    goto LABEL_114;
  }
  if (v70 < 0 != v69)
    goto LABEL_113;
LABEL_114:
  if (v70 < 2)
    ++v28;
  return v28 == 2;
}

void sub_10029A500(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_10029A500(a1, *a2);
    sub_10029A500(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_10029A550(_QWORD *a1, uint64_t **a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  void **v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  BOOL v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  void **v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **v97;
  _QWORD *v98;
  uint64_t **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t **v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  void *v109;
  uint64_t v110;
  char *v112;
  uint64_t v113;
  _QWORD **v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  _QWORD **v119;
  _QWORD *v120[3];
  void *__p;
  char *v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;

  v124 = 0;
  v125 = 0;
  v126 = 0;
  v4 = a1[1];
  if (a1[2] != v4)
  {
    v5 = a1[4];
    v6 = (_QWORD *)(v4 + 8 * (v5 >> 4));
    v7 = *v6 + 376 * (v5 & 0xF);
    v8 = *(_QWORD *)(v4 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 376 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
    if (v7 != v8)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v113 = *(_QWORD *)(v4 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 376 * ((*((_DWORD *)a1 + 10) + (_DWORD)v5) & 0xF);
      while (1)
      {
        if (*(_BYTE *)(v7 + 32))
        {
          v7 += 376;
          if (v7 - *v6 == 6016)
            goto LABEL_36;
          goto LABEL_4;
        }
        v13 = (double)*(uint64_t *)(a3 + 24) + (*(double *)(v7 + 8) - *(double *)(a3 + 8)) * *(double *)(a3 + 32);
        if (v13 >= 0.0)
          v14 = 0.5;
        else
          v14 = -0.5;
        v15 = v13 + v14;
        sub_100284F14(v13 + v14);
        v16 = ceil(v15);
        v17 = floor(v15);
        if (v15 >= 0.0)
          v18 = v17;
        else
          v18 = v16;
        v19 = (double)*(uint64_t *)(a3 + 16) + (*(double *)v7 - *(double *)a3) * *(double *)(a3 + 32);
        if (v19 >= 0.0)
          v20 = 0.5;
        else
          v20 = -0.5;
        v21 = v19 + v20;
        sub_100284F14(v19 + v20);
        v22 = (uint64_t)v18;
        a4.n128_f64[0] = ceil(v21);
        v23 = floor(v21);
        if (v21 >= 0.0)
          a4.n128_f64[0] = v23;
        v24 = (uint64_t)a4.n128_f64[0];
        if (v11 < v126)
        {
          *(_QWORD *)v11 = v12;
          *((_QWORD *)v11 + 1) = v24;
          *((_QWORD *)v11 + 2) = v22;
          v11 += 24;
          goto LABEL_35;
        }
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL)
          sub_1000D02C0();
        if (0x5555555555555556 * ((v126 - v10) >> 3) > v25)
          v25 = 0x5555555555555556 * ((v126 - v10) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v126 - v10) >> 3) >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v25;
        if (v26)
        {
          if (v26 > 0xAAAAAAAAAAAAAAALL)
            sub_1000CDEB8();
          v27 = (char *)operator new(24 * v26);
          v28 = &v27[8 * ((v11 - v10) >> 3)];
          *(_QWORD *)v28 = v12;
          *((_QWORD *)v28 + 1) = v24;
          *((_QWORD *)v28 + 2) = v22;
          if (v11 == v10)
          {
LABEL_38:
            v30 = v28;
            v11 = v28 + 24;
            v124 = v28;
            v126 = &v27[24 * v26];
            if (!v10)
              goto LABEL_34;
            goto LABEL_33;
          }
        }
        else
        {
          v27 = 0;
          v28 = (char *)(8 * ((v11 - v10) >> 3));
          *(_QWORD *)v28 = v12;
          *((_QWORD *)v28 + 1) = v24;
          *((_QWORD *)v28 + 2) = v22;
          if (v11 == v10)
            goto LABEL_38;
        }
        v29 = v28;
        do
        {
          a4 = *(__n128 *)(v11 - 24);
          v30 = v29 - 24;
          *((_QWORD *)v29 - 1) = *((_QWORD *)v11 - 1);
          *(__n128 *)(v29 - 24) = a4;
          v11 -= 24;
          v29 -= 24;
        }
        while (v11 != v10);
        v11 = v28 + 24;
        v124 = v30;
        v126 = &v27[24 * v26];
        if (!v10)
          goto LABEL_34;
LABEL_33:
        operator delete(v10);
LABEL_34:
        v10 = v30;
        v8 = v113;
LABEL_35:
        v125 = v11;
        v7 += 376;
        if (v7 - *v6 == 6016)
        {
LABEL_36:
          v31 = v6[1];
          ++v6;
          v7 = v31;
        }
LABEL_4:
        ++v12;
        if (v7 == v8)
          goto LABEL_41;
      }
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_41:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3));
  if (v11 == v10)
    v33 = 0;
  else
    v33 = v32;
  sub_10029B120((uint64_t)v10, (__int128 *)v11, (uint64_t)&v114, v33, 1, a4);
  __p = 0;
  v122 = 0;
  v123 = 0;
  v35 = v124;
  v34 = v125;
  if (v124 == v125)
    goto LABEL_181;
  do
  {
    v36 = (uint64_t *)v35;
    v35 += 24;
    if (v35 != v34)
    {
      v37 = v36[2];
      v38 = v37 - v36[5];
      if (v38 <= 1)
      {
        v39 = v36 + 1;
        v112 = v35;
        while (1)
        {
          v40 = *v39 - *((_QWORD *)v35 + 1);
          if (v40 < 0)
            v40 = *((_QWORD *)v35 + 1) - *v39;
          if (v38 < 0)
            v38 = -v38;
          if ((unint64_t)v40 <= 1 && (unint64_t)v38 <= 1)
          {
            v43 = (char *)__p;
            v42 = v122;
            if (__p == v122)
            {
LABEL_69:
              memset(v120, 0, sizeof(v120));
              v119 = v120;
              v115 = 0;
              v116 = 0;
              v114 = &v115;
              v117 = 0;
              v118 = *(_OWORD *)v39;
              if ((unint64_t)v122 >= v123)
              {
                v51 = sub_10029CB0C((char **)&__p, (uint64_t)&v114);
              }
              else
              {
                *(_QWORD *)v122 = &v115;
                v48 = v115;
                *((_QWORD *)v42 + 1) = v115;
                v49 = v42 + 8;
                v50 = v116;
                *((_QWORD *)v42 + 2) = v116;
                if (v50)
                {
                  v48[2] = v49;
                  v114 = &v115;
                  v115 = 0;
                  v116 = 0;
                }
                else
                {
                  *(_QWORD *)v42 = v49;
                }
                *((_QWORD *)v42 + 3) = v117;
                *((_OWORD *)v42 + 2) = v118;
                v51 = v42 + 48;
              }
              v44 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v43) >> 4);
              v122 = v51;
              sub_10004AAA0((uint64_t)&v114, v115);
              sub_10004AAA0((uint64_t)&v119, v120[0]);
              v43 = (char *)__p;
            }
            else
            {
              v44 = 0;
              v45 = (char *)__p;
              while (1)
              {
                v46 = *((_QWORD *)v45 + 4) - *v39;
                if (v46 < 0)
                  v46 = *v39 - *((_QWORD *)v45 + 4);
                if ((unint64_t)v46 <= 1)
                {
                  v47 = *((_QWORD *)v45 + 5) - v37;
                  if (v47 < 0)
                    v47 = v37 - *((_QWORD *)v45 + 5);
                  if ((unint64_t)v47 < 2)
                    break;
                }
                ++v44;
                v45 += 48;
                if (v45 == v122)
                  goto LABEL_69;
              }
            }
            v52 = &v43[48 * v44];
            v53 = *v36;
            v55 = (void **)(v52 + 8);
            v54 = (_QWORD *)*((_QWORD *)v52 + 1);
            v56 = v52 + 8;
            v57 = v52 + 8;
            if (v54)
            {
              v58 = (_QWORD *)*((_QWORD *)v52 + 1);
              while (1)
              {
                while (1)
                {
                  v57 = v58;
                  v59 = v58[4];
                  if (v53 >= v59)
                    break;
                  v58 = (_QWORD *)*v57;
                  v56 = v57;
                  if (!*v57)
                    goto LABEL_83;
                }
                if (v59 >= v53)
                  break;
                v58 = (_QWORD *)v57[1];
                if (!v58)
                {
                  v56 = v57 + 1;
                  goto LABEL_83;
                }
              }
            }
            else
            {
LABEL_83:
              v60 = operator new(0x28uLL);
              v60[4] = v53;
              *v60 = 0;
              v60[1] = 0;
              v60[2] = v57;
              *v56 = v60;
              v61 = **(_QWORD **)v52;
              if (v61)
              {
                *(_QWORD *)v52 = v61;
                v60 = (_QWORD *)*v56;
              }
              v62 = *v55;
              v63 = v60 == *v55;
              *((_BYTE *)v60 + 24) = v63;
              if (!v63)
              {
                do
                {
                  v64 = v60[2];
                  if (*(_BYTE *)(v64 + 24))
                    break;
                  v65 = *(_BYTE **)(v64 + 16);
                  v66 = *(_QWORD *)v65;
                  if (*(_QWORD *)v65 == v64)
                  {
                    v69 = *((_QWORD *)v65 + 1);
                    if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), v67 = (_BYTE *)(v69 + 24), v70))
                    {
                      if (*(_QWORD **)v64 == v60)
                      {
                        *(_BYTE *)(v64 + 24) = 1;
                        v65[24] = 0;
                        v73 = *(_QWORD *)(v64 + 8);
                        *(_QWORD *)v65 = v73;
                        if (v73)
                          goto LABEL_100;
                      }
                      else
                      {
                        v71 = *(uint64_t **)(v64 + 8);
                        v72 = *v71;
                        *(_QWORD *)(v64 + 8) = *v71;
                        if (v72)
                        {
                          *(_QWORD *)(v72 + 16) = v64;
                          v65 = *(_BYTE **)(v64 + 16);
                        }
                        v71[2] = (uint64_t)v65;
                        *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v71;
                        *v71 = v64;
                        *(_QWORD *)(v64 + 16) = v71;
                        v65 = (_BYTE *)v71[2];
                        v64 = *(_QWORD *)v65;
                        *((_BYTE *)v71 + 24) = 1;
                        v65[24] = 0;
                        v73 = *(_QWORD *)(v64 + 8);
                        *(_QWORD *)v65 = v73;
                        if (v73)
LABEL_100:
                          *(_QWORD *)(v73 + 16) = v65;
                      }
                      *(_QWORD *)(v64 + 16) = *((_QWORD *)v65 + 2);
                      *(_QWORD *)(*((_QWORD *)v65 + 2) + 8 * (**((_QWORD **)v65 + 2) != (_QWORD)v65)) = v64;
                      *(_QWORD *)(v64 + 8) = v65;
LABEL_107:
                      *((_QWORD *)v65 + 2) = v64;
                      break;
                    }
                  }
                  else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), v67 = (_BYTE *)(v66 + 24), v68))
                  {
                    if (*(_QWORD **)v64 == v60)
                    {
                      v95 = v60[1];
                      *(_QWORD *)v64 = v95;
                      if (v95)
                      {
                        *(_QWORD *)(v95 + 16) = v64;
                        v65 = *(_BYTE **)(v64 + 16);
                      }
                      v60[2] = v65;
                      *(_QWORD *)(*(_QWORD *)(v64 + 16) + 8 * (**(_QWORD **)(v64 + 16) != v64)) = v60;
                      v60[1] = v64;
                      *(_QWORD *)(v64 + 16) = v60;
                      v65 = (_BYTE *)v60[2];
                      *((_BYTE *)v60 + 24) = 1;
                      v65[24] = 0;
                      v64 = *((_QWORD *)v65 + 1);
                      v74 = *(_QWORD **)v64;
                      *((_QWORD *)v65 + 1) = *(_QWORD *)v64;
                      if (v74)
LABEL_105:
                        v74[2] = v65;
                    }
                    else
                    {
                      *(_BYTE *)(v64 + 24) = 1;
                      v65[24] = 0;
                      v64 = *((_QWORD *)v65 + 1);
                      v74 = *(_QWORD **)v64;
                      *((_QWORD *)v65 + 1) = *(_QWORD *)v64;
                      if (v74)
                        goto LABEL_105;
                    }
                    *(_QWORD *)(v64 + 16) = *((_QWORD *)v65 + 2);
                    *(_QWORD *)(*((_QWORD *)v65 + 2) + 8 * (**((_QWORD **)v65 + 2) != (_QWORD)v65)) = v64;
                    *(_QWORD *)v64 = v65;
                    goto LABEL_107;
                  }
                  *(_BYTE *)(v64 + 24) = 1;
                  v60 = v65;
                  v65[24] = v65 == (_BYTE *)v62;
                  *v67 = 1;
                }
                while (v65 != (_BYTE *)v62);
              }
              ++*((_QWORD *)v52 + 2);
              v43 = (char *)__p;
              v54 = (_QWORD *)*((_QWORD *)__p + 6 * v44 + 1);
            }
            v75 = &v43[48 * v44];
            v76 = *(_QWORD *)v35;
            v77 = (void **)(v75 + 8);
            v78 = v75 + 8;
            v79 = v75 + 8;
            v39 = v36 + 1;
            if (v54)
            {
              while (1)
              {
                while (1)
                {
                  v79 = v54;
                  v80 = v54[4];
                  if (v76 >= v80)
                    break;
                  v54 = (_QWORD *)*v79;
                  v78 = v79;
                  if (!*v79)
                    goto LABEL_116;
                }
                if (v80 >= v76)
                  break;
                v54 = (_QWORD *)v79[1];
                if (!v54)
                {
                  v78 = v79 + 1;
                  goto LABEL_116;
                }
              }
            }
            else
            {
LABEL_116:
              v81 = operator new(0x28uLL);
              v81[4] = v76;
              *v81 = 0;
              v81[1] = 0;
              v81[2] = v79;
              *v78 = v81;
              v82 = **(_QWORD **)v75;
              if (v82)
              {
                *(_QWORD *)v75 = v82;
                v81 = (_QWORD *)*v78;
              }
              v83 = *v77;
              v63 = v81 == *v77;
              *((_BYTE *)v81 + 24) = v63;
              if (!v63)
              {
                do
                {
                  v84 = v81[2];
                  if (*(_BYTE *)(v84 + 24))
                    break;
                  v85 = *(_BYTE **)(v84 + 16);
                  v86 = *(_QWORD *)v85;
                  if (*(_QWORD *)v85 == v84)
                  {
                    v89 = *((_QWORD *)v85 + 1);
                    if (!v89 || (v90 = *(unsigned __int8 *)(v89 + 24), v87 = (_BYTE *)(v89 + 24), v90))
                    {
                      if (*(_QWORD **)v84 == v81)
                      {
                        *(_BYTE *)(v84 + 24) = 1;
                        v85[24] = 0;
                        v93 = *(_QWORD *)(v84 + 8);
                        *(_QWORD *)v85 = v93;
                        if (v93)
                          goto LABEL_133;
                      }
                      else
                      {
                        v91 = *(uint64_t **)(v84 + 8);
                        v92 = *v91;
                        *(_QWORD *)(v84 + 8) = *v91;
                        if (v92)
                        {
                          *(_QWORD *)(v92 + 16) = v84;
                          v85 = *(_BYTE **)(v84 + 16);
                        }
                        v91[2] = (uint64_t)v85;
                        *(_QWORD *)(*(_QWORD *)(v84 + 16) + 8 * (**(_QWORD **)(v84 + 16) != v84)) = v91;
                        *v91 = v84;
                        *(_QWORD *)(v84 + 16) = v91;
                        v85 = (_BYTE *)v91[2];
                        v84 = *(_QWORD *)v85;
                        *((_BYTE *)v91 + 24) = 1;
                        v85[24] = 0;
                        v93 = *(_QWORD *)(v84 + 8);
                        *(_QWORD *)v85 = v93;
                        if (v93)
LABEL_133:
                          *(_QWORD *)(v93 + 16) = v85;
                      }
                      *(_QWORD *)(v84 + 16) = *((_QWORD *)v85 + 2);
                      *(_QWORD *)(*((_QWORD *)v85 + 2) + 8 * (**((_QWORD **)v85 + 2) != (_QWORD)v85)) = v84;
                      *(_QWORD *)(v84 + 8) = v85;
LABEL_139:
                      *((_QWORD *)v85 + 2) = v84;
                      break;
                    }
                  }
                  else if (!v86 || (v88 = *(unsigned __int8 *)(v86 + 24), v87 = (_BYTE *)(v86 + 24), v88))
                  {
                    if (*(_QWORD **)v84 == v81)
                    {
                      v96 = v81[1];
                      *(_QWORD *)v84 = v96;
                      if (v96)
                      {
                        *(_QWORD *)(v96 + 16) = v84;
                        v85 = *(_BYTE **)(v84 + 16);
                      }
                      v81[2] = v85;
                      *(_QWORD *)(*(_QWORD *)(v84 + 16) + 8 * (**(_QWORD **)(v84 + 16) != v84)) = v81;
                      v81[1] = v84;
                      *(_QWORD *)(v84 + 16) = v81;
                      v85 = (_BYTE *)v81[2];
                      *((_BYTE *)v81 + 24) = 1;
                      v85[24] = 0;
                      v84 = *((_QWORD *)v85 + 1);
                      v94 = *(_QWORD **)v84;
                      *((_QWORD *)v85 + 1) = *(_QWORD *)v84;
                      if (v94)
LABEL_137:
                        v94[2] = v85;
                    }
                    else
                    {
                      *(_BYTE *)(v84 + 24) = 1;
                      v85[24] = 0;
                      v84 = *((_QWORD *)v85 + 1);
                      v94 = *(_QWORD **)v84;
                      *((_QWORD *)v85 + 1) = *(_QWORD *)v84;
                      if (v94)
                        goto LABEL_137;
                    }
                    *(_QWORD *)(v84 + 16) = *((_QWORD *)v85 + 2);
                    *(_QWORD *)(*((_QWORD *)v85 + 2) + 8 * (**((_QWORD **)v85 + 2) != (_QWORD)v85)) = v84;
                    *(_QWORD *)v84 = v85;
                    goto LABEL_139;
                  }
                  *(_BYTE *)(v84 + 24) = 1;
                  v81 = v85;
                  v85[24] = v85 == (_BYTE *)v83;
                  *v87 = 1;
                }
                while (v85 != (_BYTE *)v83);
              }
              ++*((_QWORD *)v75 + 2);
            }
          }
          v34 = v35 + 24;
          if (v35 + 24 == v125)
            break;
          v37 = v36[2];
          v38 = v37 - *((_QWORD *)v35 + 5);
          v35 += 24;
          if (v38 > 1)
          {
            v34 = v125;
            break;
          }
        }
        v35 = v112;
      }
    }
  }
  while (v35 != v34);
  v97 = (uint64_t **)__p;
  v98 = v122;
  if (__p == v122)
    goto LABEL_173;
  v99 = a2 + 1;
  v100 = 1;
  do
  {
    v103 = *v99;
    v104 = a2 + 1;
    v105 = a2 + 1;
    if (*v99)
    {
      while (1)
      {
        while (1)
        {
          v105 = (uint64_t **)v103;
          v106 = v103[4];
          if (v100 >= v106)
            break;
          v103 = *v105;
          v104 = v105;
          if (!*v105)
            goto LABEL_168;
        }
        if (v106 >= v100)
          break;
        v103 = v105[1];
        if (!v103)
        {
          v104 = v105 + 1;
          goto LABEL_168;
        }
      }
      v101 = v105;
      v102 = v105 + 5;
      if (v105 + 5 == v97)
        goto LABEL_160;
LABEL_159:
      sub_10029CFB8(v102, *v97, v97 + 1);
      goto LABEL_160;
    }
LABEL_168:
    v101 = operator new(0x48uLL);
    v101[7] = 0;
    v101[8] = 0;
    v101[6] = 0;
    v101[4] = v100;
    v101[5] = v101 + 6;
    *v101 = 0;
    v101[1] = 0;
    v101[2] = v105;
    *v104 = v101;
    v107 = (uint64_t *)**a2;
    v108 = v101;
    if (v107)
    {
      *a2 = v107;
      v108 = *v104;
    }
    sub_1000E05F4(a2[1], v108);
    a2[2] = (uint64_t *)((char *)a2[2] + 1);
    v102 = (uint64_t **)(v101 + 5);
    if (v101 + 5 != v97)
      goto LABEL_159;
LABEL_160:
    ++v100;
    v101[8] = v97[3];
    v97 += 6;
  }
  while (v97 != v98);
  v98 = __p;
LABEL_173:
  if (v98)
  {
    v109 = v98;
    if (v122 != (char *)v98)
    {
      v110 = (uint64_t)(v122 - 48);
      do
      {
        sub_10004AAA0(v110, *(_QWORD **)(v110 + 8));
        v63 = v110 == (_QWORD)v98;
        v110 -= 48;
      }
      while (!v63);
      v109 = __p;
    }
    v122 = (char *)v98;
    operator delete(v109);
  }
  v35 = v124;
LABEL_181:
  if (v35)
    operator delete(v35);
}

void sub_10029B048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(_QWORD *)(v26 - 136) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void **sub_10029B0B4(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  BOOL v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 48;
      do
      {
        sub_10004AAA0(v5, *(_QWORD **)(v5 + 8));
        v6 = v5 == (_QWORD)v2;
        v5 -= 48;
      }
      while (!v6);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_10029B120(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __int128 *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  __n128 *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  __n128 v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  unint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  unint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  __n128 *v86;
  __n128 v87;
  BOOL v88;
  __n128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  __int128 *v94;
  __int128 *v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  __n128 v101;
  __int128 v102;
  __n128 *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  __n128 *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  BOOL v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 *v133;
  __int128 *v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __int128 v144;
  __n128 v145;
  __int128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;

BOOL sub_10029BF74(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __n128 *v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  __n128 *v41;
  uint64_t v42;
  int v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  __n128 *v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  __n128 v62;

  v3 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 16))
      {
        v4 = *(_QWORD *)(a1 + 16);
        v5 = *(__n128 *)a1;
        v6 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 16) = v6;
        *(__n128 *)((char *)a2 - 24) = v5;
        a2[-1].n128_u64[1] = v4;
      }
      return 1;
    case 3uLL:
      v14 = (__n128 *)(a1 + 24);
      v15 = (__n128 *)((char *)a2 - 24);
      v16 = *(_QWORD *)(a1 + 40);
      v17 = a2[-1].n128_i64[1];
      if (v16 > *(_QWORD *)(a1 + 16))
      {
        if (v17 <= v16)
        {
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *v14 = v49;
          *(_QWORD *)(a1 + 40) = v48;
          if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 40))
          {
            v50 = *(_QWORD *)(a1 + 40);
            v51 = *v14;
            v52 = a2[-1].n128_i64[1];
            *v14 = *v15;
            *(_QWORD *)(a1 + 40) = v52;
            *v15 = v51;
            a2[-1].n128_u64[1] = v50;
          }
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 16);
          v19 = *(__n128 *)a1;
          v20 = a2[-1].n128_i64[1];
          *(__n128 *)a1 = *v15;
          *(_QWORD *)(a1 + 16) = v20;
          *v15 = v19;
          a2[-1].n128_u64[1] = v18;
        }
        return 1;
      }
      if (v17 <= v16)
        return 1;
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *v14;
      v32 = a2[-1].n128_u64[1];
      *v14 = *v15;
      goto LABEL_43;
    case 4uLL:
      v14 = (__n128 *)(a1 + 24);
      v15 = (__n128 *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 40);
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 64);
      if (v21 <= v22)
      {
        if (v23 > v21)
        {
          v33 = *(_QWORD *)(a1 + 40);
          v34 = *v14;
          *v14 = *v15;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v15 = v34;
          *(_QWORD *)(a1 + 64) = v33;
          if (*(_QWORD *)(a1 + 40) > v22)
          {
            v35 = *(_QWORD *)(a1 + 16);
            v36 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v14 = v36;
            *(_QWORD *)(a1 + 40) = v35;
          }
        }
      }
      else
      {
        if (v23 <= v21)
        {
          v53 = *(_QWORD *)(a1 + 16);
          v54 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *v14 = v54;
          *(_QWORD *)(a1 + 40) = v53;
          if (v23 <= *(_QWORD *)(a1 + 40))
            goto LABEL_40;
          v24 = *(_QWORD *)(a1 + 40);
          v25 = *v14;
          *v14 = *v15;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
        }
        else
        {
          v24 = *(_QWORD *)(a1 + 16);
          v25 = *(__n128 *)a1;
          *(__n128 *)a1 = *v15;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        }
        *v15 = v25;
        *(_QWORD *)(a1 + 64) = v24;
      }
LABEL_40:
      if ((int64_t)a2[-1].n128_u64[1] > *(_QWORD *)(a1 + 64))
      {
        v55 = (__n128 *)((char *)a2 - 24);
        v56 = *(_QWORD *)(a1 + 64);
        v57 = *v15;
        v58 = a2[-1].n128_i64[1];
        *v15 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 64) = v58;
        *v55 = v57;
        v55[1].n128_u64[0] = v56;
        if (*(_QWORD *)(a1 + 64) > *(_QWORD *)(a1 + 40))
        {
          v30 = *(_QWORD *)(a1 + 40);
          v31 = *v14;
          *v14 = *v15;
          v32 = *(_QWORD *)(a1 + 64);
LABEL_43:
          v14[1].n128_u64[0] = v32;
          *v15 = v31;
          v15[1].n128_u64[0] = v30;
          if (*(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 16))
          {
            v59 = *(_QWORD *)(a1 + 16);
            v60 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(_QWORD *)(a1 + 16) = v14[1].n128_u64[0];
            *v14 = v60;
            v14[1].n128_u64[0] = v59;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_10029C450((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    default:
      v7 = (__n128 *)(a1 + 48);
      v8 = (__n128 *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 64);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v26 = *(_QWORD *)(a1 + 40);
          v27 = *v8;
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v7 = v27;
          *(_QWORD *)(a1 + 64) = v26;
          if (*(_QWORD *)(a1 + 40) > v10)
          {
            v28 = *(_QWORD *)(a1 + 16);
            v29 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v8 = v29;
            *(_QWORD *)(a1 + 40) = v28;
          }
        }
      }
      else if (v11 <= v9)
      {
        v37 = *(_QWORD *)(a1 + 16);
        v38 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v8 = v38;
        *(_QWORD *)(a1 + 40) = v37;
        if (v11 > *(_QWORD *)(a1 + 40))
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *v8;
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v7 = v40;
          *(_QWORD *)(a1 + 64) = v39;
        }
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 16);
        v13 = *(__n128 *)a1;
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v7 = v13;
        *(_QWORD *)(a1 + 64) = v12;
      }
      v41 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2)
        return 1;
      v42 = 0;
      v43 = 0;
      break;
  }
  while (1)
  {
    v44 = v41[1].n128_i64[0];
    if (v44 > (int64_t)v7[1].n128_u64[0])
      break;
LABEL_33:
    v7 = v41;
    v42 += 24;
    v41 = (__n128 *)((char *)v41 + 24);
    if (v41 == a2)
      return 1;
  }
  v62 = *v41;
  v45 = v42;
  do
  {
    v46 = a1 + v45;
    *(_OWORD *)(v46 + 72) = *(_OWORD *)(a1 + v45 + 48);
    *(_QWORD *)(v46 + 88) = *(_QWORD *)(a1 + v45 + 64);
    if (v45 == -48)
    {
      *(__n128 *)a1 = v62;
      *(_QWORD *)(a1 + 16) = v44;
      if (++v43 != 8)
        goto LABEL_33;
      return &v41[1].n128_i8[8] == (__int8 *)a2;
    }
    v45 -= 24;
  }
  while (v44 > *(_QWORD *)(v46 + 40));
  v47 = a1 + v45;
  *(__n128 *)(v47 + 72) = v62;
  *(_QWORD *)(v47 + 88) = v44;
  if (++v43 != 8)
    goto LABEL_33;
  return &v41[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_10029C450(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = a2[1].n128_i64[0];
  v7 = a3[1].n128_i64[0];
  if (v6 <= (int64_t)a1[1].n128_u64[0])
  {
    if (v7 > v6)
    {
      v10 = a2[1].n128_u64[0];
      result = *a2;
      v11 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v11;
      *a3 = result;
      a3[1].n128_u64[0] = v10;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v12 = a1[1].n128_u64[0];
        result = *a1;
        v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      v8 = a1[1].n128_u64[0];
      result = *a1;
      v9 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v8;
      goto LABEL_10;
    }
    v14 = a1[1].n128_u64[0];
    result = *a1;
    v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v8 = a2[1].n128_u64[0];
      result = *a2;
      v16 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
  {
    v17 = a3[1].n128_u64[0];
    result = *a3;
    v18 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v18;
    *a4 = result;
    a4[1].n128_u64[0] = v17;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      v19 = a2[1].n128_u64[0];
      result = *a2;
      v20 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v20;
      *a3 = result;
      a3[1].n128_u64[0] = v19;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        v21 = a1[1].n128_u64[0];
        result = *a1;
        v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if ((int64_t)a5[1].n128_u64[0] > (int64_t)a4[1].n128_u64[0])
  {
    v23 = a4[1].n128_i64[0];
    result = *a4;
    v24 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v24;
    *a5 = result;
    a5[1].n128_u64[0] = v23;
    if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
    {
      v25 = a3[1].n128_u64[0];
      result = *a3;
      v26 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v26;
      *a4 = result;
      a4[1].n128_u64[0] = v25;
      if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
      {
        v27 = a2[1].n128_u64[0];
        result = *a2;
        v28 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v28;
        *a3 = result;
        a3[1].n128_u64[0] = v27;
        if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
        {
          v29 = a1[1].n128_u64[0];
          result = *a1;
          v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

__int128 *sub_10029C698(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  int64_t v44;
  int64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;

  if ((__int128 *)a1 == a2)
    return a3;
  v3 = (uint64_t)a2 - a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v3 >= 0x30)
  {
    v44 = (unint64_t)(v4 - 2) >> 1;
    v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        v46 = (2 * v45) | 1;
        v47 = (__int128 *)(a1 + 24 * v46);
        if (2 * v45 + 2 < v4)
        {
          v48 = *(_QWORD *)(a1 + 24 * v46 + 16);
          v49 = *((_QWORD *)v47 + 5);
          v47 = (__int128 *)((char *)v47 + 24 * (v48 > v49));
          if (v48 > v49)
            v46 = 2 * v45 + 2;
        }
        v50 = *(_QWORD *)(a1 + 24 * v45 + 16);
        if (*((_QWORD *)v47 + 2) <= v50)
        {
          v51 = (__int128 *)(a1 + 24 * v45);
          v60 = *v51;
          do
          {
            v52 = v51;
            v51 = v47;
            v53 = *v47;
            *((_QWORD *)v52 + 2) = *((_QWORD *)v47 + 2);
            *v52 = v53;
            if (v44 < v46)
              break;
            v54 = (2 * v46) | 1;
            v47 = (__int128 *)(a1 + 24 * v54);
            v55 = 2 * v46 + 2;
            if (v55 < v4)
            {
              v56 = *(_QWORD *)(a1 + 24 * v54 + 16);
              v57 = *((_QWORD *)v47 + 5);
              v47 = (__int128 *)((char *)v47 + 24 * (v56 > v57));
              if (v56 > v57)
                v54 = v55;
            }
            v46 = v54;
          }
          while (*((_QWORD *)v47 + 2) <= v50);
          *v51 = v60;
          *((_QWORD *)v51 + 2) = v50;
        }
      }
      v16 = v45-- <= 0;
    }
    while (!v16);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 48)
    {
      v6 = a2;
      do
      {
        if (*((_QWORD *)v6 + 2) > *(_QWORD *)(a1 + 16))
        {
          v7 = *((_QWORD *)v6 + 2);
          v8 = *v6;
          v9 = *(_QWORD *)(a1 + 16);
          *v6 = *(_OWORD *)a1;
          *((_QWORD *)v6 + 2) = v9;
          *(_OWORD *)a1 = v8;
          *(_QWORD *)(a1 + 16) = v7;
        }
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
LABEL_28:
      v5 = a3;
      goto LABEL_29;
    }
    v10 = a2;
    while (1)
    {
      if (*((_QWORD *)v10 + 2) > *(_QWORD *)(a1 + 16))
      {
        v11 = *((_QWORD *)v10 + 2);
        v12 = *v10;
        v13 = *(_QWORD *)(a1 + 16);
        *v10 = *(_OWORD *)a1;
        *((_QWORD *)v10 + 2) = v13;
        *(_OWORD *)a1 = v12;
        *(_QWORD *)(a1 + 16) = v11;
        if ((unint64_t)v4 < 3)
        {
          v17 = a1 + 24;
          v18 = 1;
          v19 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(a1 + 40) <= v19)
            goto LABEL_21;
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 40);
          v15 = *(_QWORD *)(a1 + 64);
          v16 = v14 <= v15;
          v17 = a1 + 24 + 24 * (v14 > v15);
          if (v16)
            v18 = 1;
          else
            v18 = 2;
          v19 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(v17 + 16) <= v19)
          {
LABEL_21:
            v58 = *(_OWORD *)a1;
            v20 = a1;
            do
            {
              v21 = v20;
              v20 = v17;
              v22 = *(_OWORD *)v17;
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v17 + 16);
              *(_OWORD *)v21 = v22;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18)
                break;
              v23 = (2 * v18) | 1;
              v17 = a1 + 24 * v23;
              v24 = 2 * v18 + 2;
              if (v24 < v4)
              {
                v25 = *(_QWORD *)(a1 + 24 * v23 + 16);
                v26 = *(_QWORD *)(v17 + 40);
                v17 += 24 * (v25 > v26);
                if (v25 > v26)
                  v23 = v24;
              }
              v18 = v23;
            }
            while (*(_QWORD *)(v17 + 16) <= v19);
            *(_OWORD *)v20 = v58;
            *(_QWORD *)(v20 + 16) = v19;
          }
        }
      }
      v10 = (__int128 *)((char *)v10 + 24);
      if (v10 == a3)
        goto LABEL_28;
    }
  }
LABEL_29:
  if (v3 >= 25)
  {
    v27 = v3 / 0x18uLL;
    do
    {
      v28 = 0;
      v59 = *(_OWORD *)a1;
      v61 = *(_QWORD *)(a1 + 16);
      v29 = (__int128 *)a1;
      do
      {
        v31 = v28 + 1;
        v32 = (__int128 *)((char *)v29 + 24 * v28 + 24);
        v33 = (2 * v28) | 1;
        v34 = 2 * v28 + 2;
        if (v34 < v27)
        {
          v35 = *((_QWORD *)v29 + 3 * v31 + 2);
          v36 = *((_QWORD *)v32 + 5);
          v32 = (__int128 *)((char *)v32 + 24 * (v35 > v36));
          if (v35 > v36)
            v33 = v34;
        }
        v30 = *v32;
        *((_QWORD *)v29 + 2) = *((_QWORD *)v32 + 2);
        *v29 = v30;
        v29 = v32;
        v28 = v33;
      }
      while (v33 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 = (__int128 *)((char *)a2 - 24);
      if (v32 == a2)
      {
        *((_QWORD *)v32 + 2) = v61;
        *v32 = v59;
      }
      else
      {
        v37 = *a2;
        *((_QWORD *)v32 + 2) = *((_QWORD *)a2 + 2);
        *v32 = v37;
        *a2 = v59;
        *((_QWORD *)a2 + 2) = v61;
        v38 = (uint64_t)v32 - a1 + 24;
        if (v38 >= 25)
        {
          v39 = (v38 / 0x18uLL - 2) >> 1;
          v40 = *((_QWORD *)v32 + 2);
          if (*(_QWORD *)(a1 + 24 * v39 + 16) > v40)
          {
            v62 = *v32;
            do
            {
              v41 = v32;
              v32 = (__int128 *)(a1 + 24 * v39);
              v42 = *v32;
              *((_QWORD *)v41 + 2) = *((_QWORD *)v32 + 2);
              *v41 = v42;
              if (!v39)
                break;
              v39 = (v39 - 1) >> 1;
            }
            while (*(_QWORD *)(a1 + 24 * v39 + 16) > v40);
            *v32 = v62;
            *((_QWORD *)v32 + 2) = v40;
          }
        }
      }
      v16 = v27-- <= 2;
    }
    while (!v16);
  }
  return v5;
}

char *sub_10029CB0C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555)
    sub_1000D02C0();
  if (0x5555555555555556 * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1000CDEB8();
    v9 = operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[3 * v5];
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 8);
  *v10 = *(_QWORD *)a2;
  v10[1] = v12;
  v13 = v10 + 1;
  v14 = *(_QWORD *)(a2 + 16);
  v10[2] = v14;
  if (v14)
  {
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)a2 = v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v3 = *a1;
    v4 = a1[1];
  }
  else
  {
    *v10 = v13;
  }
  v15 = (char *)&v9[3 * v8];
  v10[3] = *(_QWORD *)(a2 + 24);
  v9[3 * v5 + 2] = *(_OWORD *)(a2 + 32);
  v16 = (char *)(v10 + 6);
  if (v4 == v3)
  {
    *a1 = (char *)v10;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    v17 = 0;
    do
    {
      v19 = &v10[v17 / 8];
      *(v19 - 6) = *(_QWORD *)&v4[v17 - 48];
      v20 = &v4[v17 - 40];
      v21 = *(_QWORD *)v20;
      v10[v17 / 8 - 5] = *(_QWORD *)v20;
      v22 = (uint64_t)&v10[v17 / 8 - 5];
      v23 = *(_QWORD *)&v4[v17 - 32];
      *(v19 - 4) = v23;
      if (v23)
      {
        *(_QWORD *)(v21 + 16) = v22;
        *(_QWORD *)&v4[v17 - 48] = v20;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)&v4[v17 - 32] = 0;
      }
      else
      {
        *(v19 - 6) = v22;
      }
      v18 = &v10[v17 / 8];
      *(v18 - 3) = *(_QWORD *)&v4[v17 - 24];
      *((_OWORD *)v18 - 1) = *(_OWORD *)&v4[v17 - 16];
      v17 -= 48;
    }
    while (&v4[v17] != v3);
    v3 = *a1;
    v24 = a1[1];
    *a1 = (char *)&v10[v17 / 8];
    a1[1] = v16;
    a1[2] = v15;
    if (v24 == v3)
    {
      v3 = v24;
      if (!v24)
        return v16;
      goto LABEL_27;
    }
    v25 = (uint64_t)(v24 - 48);
    do
    {
      sub_10004AAA0(v25, *(_QWORD **)(v25 + 8));
      v26 = v25 == (_QWORD)v3;
      v25 -= 48;
    }
    while (!v26);
  }
  if (v3)
LABEL_27:
    operator delete(v3);
  return v16;
}

_QWORD *sub_10029CCFC(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = (_QWORD **)result;
    v8 = result + 1;
    do
    {
      result = sub_10029CE08(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = (uint64_t **)result;
        v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        *v10 = v11;
        v13 = (_QWORD *)**v7;
        if (v13)
        {
          *v7 = v13;
          v14 = *v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_1000E05F4(v7[1], v14);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

_QWORD *sub_10029CE08(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_10029CFB8(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v24 = 0;
LABEL_47:
      sub_10004AAA0((uint64_t)a1, v24);
      goto LABEL_48;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v35 = (uint64_t *)v10[1];
          if (!v35)
            break;
          do
          {
            v10 = v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      while (1)
      {
        v9 = v10;
        v14 = v13[4];
        v12[4] = v14;
        v15 = *v8;
        v16 = (uint64_t **)(v5 + 8);
        v17 = (uint64_t **)(v5 + 8);
        if (*v8)
          break;
LABEL_14:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        *v17 = v12;
        v18 = **(_QWORD **)v5;
        if (v18)
          goto LABEL_15;
LABEL_16:
        sub_1000E05F4(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (uint64_t *)v10[2];
          if (v10)
          {
            v21 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v22 = (uint64_t *)v10[1];
                if (!v22)
                  break;
                do
                {
                  v10 = v22;
                  v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
              {
                do
                {
                  v10 = v21;
                  v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v19 = (_QWORD *)v13[1];
        if (v19)
        {
          do
          {
            v4 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v20 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          v12 = v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          v16 = (uint64_t **)v15;
          if (v14 >= v15[4])
            break;
          v15 = (uint64_t *)*v15;
          v17 = v16;
          if (!*v16)
            goto LABEL_14;
        }
        v15 = (uint64_t *)v15[1];
      }
      while (v15);
      v17 = v16 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v16;
      v16[1] = v12;
      v18 = **(_QWORD **)v5;
      if (!v18)
        goto LABEL_16;
LABEL_15:
      *(_QWORD *)v5 = v18;
      v12 = *v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_10004AAA0(v5, v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = (uint64_t **)v5;
      v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    v25 = (uint64_t **)(v5 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = v4[4];
      v26[4] = v28;
      v29 = *v25;
      v30 = (uint64_t **)(v5 + 8);
      v31 = (uint64_t **)(v5 + 8);
      if (*v25)
        break;
LABEL_52:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)v5;
      if (v32)
        goto LABEL_53;
LABEL_54:
      sub_1000E05F4(*(uint64_t **)(v5 + 8), v27);
      ++*(_QWORD *)(v5 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v20 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v20);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = (uint64_t **)v29;
        if (v28 >= v29[4])
          break;
        v29 = (uint64_t *)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_52;
      }
      v29 = (uint64_t *)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)v5;
    if (!v32)
      goto LABEL_54;
LABEL_53:
    *(_QWORD *)v5 = v32;
    v27 = *v31;
    goto LABEL_54;
  }
}

BOOL sub_10029D2E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double *v5;
  double *v6;
  double *v7;
  int v8;
  double **v9;
  double **v10;
  double *v11;
  double *v12;
  double *v13;
  int v15;
  char v16;

  if (!*(_QWORD *)(a1 + 48))
  {
    v8 = sub_100283054((double *)a1, a3);
    return v8 > 0;
  }
  v5 = *(double **)a2;
  v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 - *(_QWORD *)a2 < 0x40)
    goto LABEL_23;
  v15 = 0;
  v16 = 0;
  if (v5 + 2 == v6)
    goto LABEL_23;
  do
  {
    if (!sub_10005B9D0((double *)a1, v5, v5 + 2, (uint64_t)&v15))
      break;
    v7 = v5 + 4;
    v5 += 2;
  }
  while (v7 != v6);
  if (v15)
    v8 = 1;
  else
    v8 = -1;
  if (v16)
  {
LABEL_10:
    v8 = 0;
    return v8 > 0;
  }
  if (!v15)
  {
LABEL_23:
    v8 = -1;
    return v8 > 0;
  }
  v10 = *(double ***)(a2 + 24);
  v9 = *(double ***)(a2 + 32);
  if (v10 != v9)
  {
    while (1)
    {
      v11 = *v10;
      v12 = v10[1];
      if ((unint64_t)((char *)v12 - (char *)*v10) >= 0x40)
      {
        v15 = 0;
        v16 = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            if (!sub_10005B9D0((double *)a1, v11, v11 + 2, (uint64_t)&v15))
              break;
            v13 = v11 + 4;
            v11 += 2;
          }
          while (v13 != v12);
          if (v16)
            goto LABEL_10;
          if (v15)
            goto LABEL_23;
          v9 = *(double ***)(a2 + 32);
        }
      }
      v10 += 3;
      if (v10 == v9)
        return v8 > 0;
    }
  }
  v8 = 1;
  return v8 > 0;
}

void sub_10029D448(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  BOOL v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  _QWORD *v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

uint64_t sub_10029D980(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  BOOL v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;

  v3 = a2[4];
  v4 = a3[4];
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v5 < v6;
  if (v5 != v6)
    return v7;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v4 + 32);
  if (v8 != v9
    || *(_QWORD *)(v3 + 24) != *(_QWORD *)(v4 + 24)
    || *(_QWORD *)(v3 + 40) != *(_QWORD *)(v4 + 40)
    || *(_QWORD *)(v3 + 16) != *(_QWORD *)(v4 + 16))
  {
    v20 = *(_QWORD *)(v3 + 16);
    v21 = *(_QWORD *)(v4 + 16);
    v7 = v20 < v21;
    if (v20 == v21)
    {
      v22 = *(_QWORD *)(v3 + 24);
      v23 = *(_QWORD *)(v4 + 24);
      v7 = v22 < v23;
      if (v22 == v23)
      {
        v24 = *(_QWORD *)(v3 + 40);
        v25 = *(_QWORD *)(v4 + 40);
        v26 = v8 < v9;
        v17 = v24 == v25;
        v27 = v24 < v25;
        if (v17)
          return v26;
        else
          return v27;
      }
    }
    return v7;
  }
  if (vabdd_f64(*(double *)(v3 + 64), *(double *)(v4 + 64)) >= 50.0)
    return sub_10028FED4((double *)(v3 + 48), (double *)(v4 + 48));
  v35 = *(_OWORD *)(v3 + 48);
  sub_1002900F4((int64_t)&v35);
  v34 = *(_OWORD *)(v4 + 48);
  sub_1002900F4((int64_t)&v34);
  if (v35 != v34)
  {
    v3 = a2[4];
    v4 = a3[4];
    return sub_10028FED4((double *)(v3 + 48), (double *)(v4 + 48));
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v15 = (_DWORD *)(*(_QWORD *)(v14 + (((unint64_t)(v13 + *a2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 376 * (((_DWORD)v13 + *(_DWORD *)a2) & 0xF));
  v16 = (_DWORD *)(*(_QWORD *)(v14 + (((unint64_t)(*a3 + v13) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 376 * ((*(_DWORD *)a3 + (_DWORD)v13) & 0xF));
  v17 = v15[4] == 2 && v16[4] == 2;
  if (v17)
    return sub_10029E31C(a1, a2, a3);
  v18 = v15[10];
  v19 = v18 == 3 && v15[52] == 3;
  v29 = v16[10];
  v30 = v29 == 3 && v16[52] == 3;
  if (v19 && !v30)
    return 1;
  if (!v19 && v30)
    return 0;
  v31 = v18 == 1 && v15[52] == 1;
  v32 = v29 == 1 && v16[52] == 1;
  if (v31 && !v32)
    return 1;
  v33 = v31 || !v32;
  if (*a2 < *a3)
    return v33;
  else
    return 0;
}

uint64_t sub_10029DC50(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = sub_10029D980(a4, a2, a1);
  result = sub_10029D980(a4, a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_10:
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    v25 = *a1;
    v26 = a1[1];
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *a2 = v25;
    a2[1] = v26;
    if (sub_10029D980(a4, a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = a3[1];
      *a2 = *a3;
      a2[1] = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    if (!sub_10029D980(a4, a2, a1))
      return 1;
    v20 = *a1;
    v21 = a1[1];
    v22 = *((_QWORD *)a1 + 4);
    v23 = *((_QWORD *)a2 + 4);
    v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *((_QWORD *)a1 + 4) = v23;
    *((_QWORD *)a2 + 4) = v22;
    result = 2;
    *a2 = v20;
    a2[1] = v21;
  }
  return result;
}

_QWORD *sub_10029DDC4(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = a2;
  v6 = a1[1];
  v22 = *a1;
  v23 = v6;
  v24 = *((_QWORD *)a1 + 4);
  if ((sub_10029D980(a3, &v22, (_QWORD *)(a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 += 5;
    while ((sub_10029D980(a3, &v22, v7) & 1) == 0);
  }
  else
  {
    v8 = (_QWORD *)a1 + 5;
    do
    {
      v7 = v8;
      if ((unint64_t)v8 >= v4)
        break;
      v9 = sub_10029D980(a3, &v22, v8);
      v8 = v7 + 5;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((sub_10029D980(a3, &v22, (_QWORD *)v4) & 1) != 0);
  }
  while ((unint64_t)v7 < v4)
  {
    v10 = *(_OWORD *)v7;
    v11 = *((_OWORD *)v7 + 1);
    v27 = v7[4];
    v25 = v10;
    v26 = v11;
    v12 = *(_OWORD *)v4;
    v13 = *(_OWORD *)(v4 + 16);
    v7[4] = *(_QWORD *)(v4 + 32);
    *(_OWORD *)v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v14 = v25;
    v15 = v26;
    *(_QWORD *)(v4 + 32) = v27;
    *(_OWORD *)v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    do
      v7 += 5;
    while (!sub_10029D980(a3, &v22, v7));
    do
      v4 -= 40;
    while ((sub_10029D980(a3, &v22, (_QWORD *)v4) & 1) != 0);
  }
  v16 = (__int128 *)(v7 - 5);
  if (v7 - 5 != (_QWORD *)a1)
  {
    v17 = *v16;
    v18 = *(_OWORD *)(v7 - 3);
    *((_QWORD *)a1 + 4) = *(v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(v7 - 1) = v24;
  *v16 = v19;
  *(_OWORD *)(v7 - 3) = v20;
  return v7;
}

uint64_t sub_10029DF20(__int128 *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v6 = 0;
  v7 = a1[1];
  v22 = *a1;
  v23 = v7;
  v24 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while ((sub_10029D980(a3, (__int128 *)((char *)a1 + v6), &v22) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 5;
    }
    while ((sub_10029D980(a3, a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 5;
    while (!sub_10029D980(a3, a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (unint64_t)a1 + v6;
    v11 = a2;
    do
    {
      v13 = *(_OWORD *)(v10 + 16);
      v25 = *(_OWORD *)v10;
      v12 = v25;
      v26 = v13;
      v27 = *(_QWORD *)(v10 + 32);
      v14 = v27;
      v16 = *(_OWORD *)v11;
      v15 = *((_OWORD *)v11 + 1);
      *(_QWORD *)(v10 + 32) = v11[4];
      *(_OWORD *)v10 = v16;
      *(_OWORD *)(v10 + 16) = v15;
      v11[4] = v14;
      *(_OWORD *)v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      do
        v10 += 40;
      while ((sub_10029D980(a3, (_QWORD *)v10, &v22) & 1) != 0);
      do
        v11 -= 5;
      while (!sub_10029D980(a3, v11, &v22));
    }
    while (v10 < (unint64_t)v11);
    v9 = v10 - 40;
  }
  if ((__int128 *)v9 != a1)
  {
    v17 = *(_OWORD *)v9;
    v18 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(_QWORD *)(v9 + 32) = v24;
  *(_OWORD *)v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_10029E07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 40;
      if (!sub_10029D980(a3, (_QWORD *)(a2 - 40), (_QWORD *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(v8 + 32) = v11;
      result = 1;
      *(_OWORD *)v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      sub_10029DC50((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      v24 = (__int128 *)(a1 + 40);
      v25 = (__int128 *)(a1 + 80);
      v26 = a2 - 40;
      sub_10029DC50((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      if (!sub_10029D980(a3, (_QWORD *)v26, (_QWORD *)(a1 + 80)))
        return 1;
      v27 = *v25;
      v28 = *(_OWORD *)(a1 + 96);
      v29 = *(_QWORD *)(a1 + 112);
      v30 = *(_QWORD *)(v26 + 32);
      v31 = *(_OWORD *)(v26 + 16);
      *v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(_QWORD *)(a1 + 112) = v30;
      *(_QWORD *)(v26 + 32) = v29;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      if (!sub_10029D980(a3, (_QWORD *)(a1 + 80), (_QWORD *)(a1 + 40)))
        return 1;
      v32 = *(_QWORD *)(a1 + 72);
      v34 = *v24;
      v33 = *(_OWORD *)(a1 + 56);
      v35 = *(_OWORD *)(a1 + 96);
      *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v25 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(_QWORD *)(a1 + 112) = v32;
      if (!sub_10029D980(a3, (_QWORD *)(a1 + 40), (_QWORD *)a1))
        return 1;
      v36 = *(_QWORD *)(a1 + 32);
      v38 = *(_OWORD *)a1;
      v37 = *(_OWORD *)(a1 + 16);
      v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v39;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v24 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      result = 1;
      *(_QWORD *)(a1 + 72) = v36;
      return result;
    case 5uLL:
      sub_10029EB08(a1, a1 + 40, a1 + 80, (__int128 *)(a1 + 120), (__int128 *)(a2 - 40), a3);
      return 1;
    default:
      v14 = (_QWORD *)(a1 + 80);
      sub_10029DC50((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_10029D980(a3, (_QWORD *)v15, v14))
    {
      v20 = *(_OWORD *)(v15 + 16);
      v40 = *(_OWORD *)v15;
      v41 = v20;
      v42 = *(_QWORD *)(v15 + 32);
      v21 = v16;
      do
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 96);
        *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 136) = v23;
        *(_QWORD *)(v22 + 152) = *(_QWORD *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          v18 = a1;
          goto LABEL_7;
        }
        v21 -= 40;
      }
      while ((sub_10029D980(a3, &v40, (_QWORD *)(v22 + 40)) & 1) != 0);
      v18 = a1 + v21 + 120;
LABEL_7:
      v19 = v41;
      *(_OWORD *)v18 = v40;
      *(_OWORD *)(v18 + 16) = v19;
      *(_QWORD *)(v18 + 32) = v42;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (_QWORD *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

BOOL sub_10029E31C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  double *v26;
  double *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  double *v36;
  double *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  BOOL v72;
  double v73;
  double v74;
  double v75;
  double v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  int v101;
  int v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120[2];
  double v121[2];
  double v122[2];
  double v123[2];
  double v124[2];
  double v125[2];

  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD **)(a1 + 16);
  v17 = (_QWORD *)a2[4];
  v18 = v17[1];
  if (v18 == 1)
  {
    v24 = v17[3];
    v25 = (uint64_t *)(*(_QWORD *)(*v16 + 48 * v17[2] + 24) + 24 * v24);
    if (v24 < 0)
      v25 = (uint64_t *)(*v16 + 48 * v17[2]);
    v22 = *v25;
    v23 = ((v25[1] - *v25) >> 4) - 1;
    v19 = v17[4];
  }
  else
  {
    if (v18)
      goto LABEL_11;
    v20 = v17[3];
    v19 = v17[4];
    if (v20 >= 0)
      v21 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 24 * v20);
    else
      v21 = *(uint64_t **)(a1 + 8);
    v22 = *v21;
    v23 = ((v21[1] - *v21) >> 4) - 1;
  }
  v26 = (double *)(v22 + 16 * ((v23 & ((v19 % v23) >> 63)) + v19 % v23));
  v6 = *v26;
  v5 = v26[1];
  v27 = (double *)(v22 + 16 * ((v23 & (((v19 + 1) % v23) >> 63)) + (v19 + 1) % v23));
  v9 = *v27;
  v10 = v27[1];
LABEL_11:
  v28 = (_QWORD *)a2[3];
  if (*v28 == 1)
  {
    v34 = v28[2];
    v35 = (uint64_t *)(*(_QWORD *)(*v16 + 48 * v28[1] + 24) + 24 * v34);
    if (v34 < 0)
      v35 = (uint64_t *)(*v16 + 48 * v28[1]);
    v32 = *v35;
    v33 = ((v35[1] - *v35) >> 4) - 1;
    v29 = v28[3];
  }
  else
  {
    if (*v28)
      goto LABEL_21;
    v30 = v28[2];
    v29 = v28[3];
    if (v30 >= 0)
      v31 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 24 * v30);
    else
      v31 = *(uint64_t **)(a1 + 8);
    v32 = *v31;
    v33 = ((v31[1] - *v31) >> 4) - 1;
  }
  v36 = (double *)(v32 + 16 * ((v33 & ((v29 % v33) >> 63)) + v29 % v33));
  v12 = *v36;
  v11 = v36[1];
  v37 = (double *)(v32 + 16 * ((v33 & (((v29 + 1) % v33) >> 63)) + (v29 + 1) % v33));
  v3 = *v37;
  v4 = v37[1];
LABEL_21:
  v38 = (_QWORD *)a3[3];
  if (*v38 == 1)
  {
    v44 = v38[2];
    v45 = *v16 + 48 * v38[1];
    v46 = (uint64_t *)(*(_QWORD *)(v45 + 24) + 24 * v44);
    if (v44 < 0)
      v46 = (uint64_t *)v45;
    v42 = *v46;
    v43 = ((v46[1] - *v46) >> 4) - 1;
    v39 = v38[3];
  }
  else
  {
    if (*v38)
      goto LABEL_30;
    v40 = v38[2];
    v39 = v38[3];
    v41 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 24 * v40);
    if (v40 < 0)
      v41 = *(uint64_t **)(a1 + 8);
    v42 = *v41;
    v43 = ((v41[1] - *v41) >> 4) - 1;
  }
  v47 = (double *)(v42 + 16 * ((v43 & ((v39 % v43) >> 63)) + v39 % v43));
  v111 = *v47;
  v112 = v47[1];
  v48 = (double *)(v42 + 16 * ((v43 & (((v39 + 1) % v43) >> 63)) + (v39 + 1) % v43));
  v7 = *v48;
  v8 = v48[1];
LABEL_30:
  v117 = v6;
  v118 = v5;
  v115 = v9;
  v116 = v10;
  v113 = v3;
  v114 = v4;
  v125[0] = v6 - v3;
  v124[0] = v10 - v4;
  v49 = v5 - v4;
  v123[0] = v5 - v4;
  v50 = v9 - v3;
  v122[0] = v9 - v3;
  v51 = vabdd_f64(v6, v3);
  v52 = vabdd_f64(v10, v4);
  v53 = vabdd_f64(v5, v4);
  v54 = vabdd_f64(v9, v3);
  if (v51 < v52)
    v51 = v52;
  if (v51 < v53)
    v51 = v53;
  if (v51 >= v54)
    v55 = v51;
  else
    v55 = v54;
  v56 = (v10 - v4) * (v6 - v3);
  v121[0] = v56;
  v57 = v49 * v50;
  v58 = v56 - v49 * v50;
  v119 = fabs(v56) + fabs(v49 * v50);
  v120[0] = v49 * v50;
  if (vabdd_f64(v56, v49 * v50) < v119 * 3.33066907e-16 && (v56 <= 0.0 || v57 > 0.0) && (v56 >= 0.0 || v57 < 0.0))
  {
    v109 = v12;
    v110 = v11;
    v108 = v55;
    v58 = sub_1001D0954(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
    v55 = v108;
    v12 = v109;
    v11 = v110;
    if (v58 == 0.0)
      goto LABEL_43;
  }
  else if (v58 == 0.0)
  {
LABEL_43:
    v59 = 0;
    goto LABEL_56;
  }
  if ((*(_QWORD *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v58 > 0.0)
      v59 = 1;
    else
      v59 = -1;
  }
  else
  {
    v60 = v55 * 2.22044605e-16;
    v61 = fabs(v58);
    if (v55 < 1.0)
      v60 = 2.22044605e-16;
    if (v58 > 0.0)
      v59 = 1;
    else
      v59 = -1;
    if (v61 <= v60)
      goto LABEL_43;
  }
LABEL_56:
  v117 = v6;
  v118 = v5;
  v115 = v9;
  v116 = v10;
  v113 = v7;
  v114 = v8;
  v125[0] = v6 - v7;
  v124[0] = v10 - v8;
  v62 = v5 - v8;
  v123[0] = v5 - v8;
  v63 = v9 - v7;
  v122[0] = v9 - v7;
  v64 = vabdd_f64(v6, v7);
  v65 = vabdd_f64(v10, v8);
  v66 = vabdd_f64(v5, v8);
  v67 = vabdd_f64(v9, v7);
  if (v64 < v65)
    v64 = v65;
  if (v64 < v66)
    v64 = v66;
  if (v64 >= v67)
    v68 = v64;
  else
    v68 = v67;
  v69 = (v10 - v8) * (v6 - v7);
  v121[0] = v69;
  v70 = v62 * v63;
  v71 = v69 - v62 * v63;
  v119 = fabs(v69) + fabs(v62 * v63);
  v120[0] = v62 * v63;
  if (vabdd_f64(v69, v62 * v63) < v119 * 3.33066907e-16 && (v69 <= 0.0 || v70 > 0.0) && (v69 >= 0.0 || v70 < 0.0))
  {
    v73 = v11;
    v74 = v12;
    v71 = sub_1001D0954(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
    v12 = v74;
    v11 = v73;
    if (v71 == 0.0)
      goto LABEL_69;
  }
  else if (v71 == 0.0)
  {
    goto LABEL_69;
  }
  if ((*(_QWORD *)&v71 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v71 > 0.0)
      v103 = 1;
    else
      v103 = -1;
    v72 = v59 < v103;
    if (v59 != v103)
      return v72;
    goto LABEL_80;
  }
  v75 = v68 * 2.22044605e-16;
  v76 = fabs(v71);
  if (v68 < 1.0)
    v75 = 2.22044605e-16;
  if (v71 > 0.0)
    v77 = 1;
  else
    v77 = -1;
  if (v76 > v75)
  {
    v72 = v59 < v77;
    if (v59 != v77)
      return v72;
    goto LABEL_80;
  }
LABEL_69:
  v72 = v59 < 0;
  if (v59)
    return v72;
LABEL_80:
  v117 = v12;
  v118 = v11;
  v115 = v3;
  v116 = v4;
  v113 = v7;
  v114 = v8;
  v125[0] = v12 - v7;
  v124[0] = v4 - v8;
  v78 = v11 - v8;
  v123[0] = v11 - v8;
  v79 = v3 - v7;
  v122[0] = v3 - v7;
  v80 = vabdd_f64(v12, v7);
  v81 = vabdd_f64(v4, v8);
  v82 = vabdd_f64(v11, v8);
  v83 = vabdd_f64(v3, v7);
  if (v80 < v81)
    v80 = v81;
  if (v80 < v82)
    v80 = v82;
  if (v80 >= v83)
    v84 = v80;
  else
    v84 = v83;
  v85 = (v4 - v8) * (v12 - v7);
  v121[0] = v85;
  v86 = v78 * v79;
  v87 = v85 - v78 * v79;
  v119 = fabs(v85) + fabs(v78 * v79);
  v120[0] = v78 * v79;
  if (vabdd_f64(v85, v78 * v79) >= v119 * 3.33066907e-16 || v85 > 0.0 && v86 <= 0.0)
    goto LABEL_93;
  v88 = v112;
  if (v85 >= 0.0 || v86 < 0.0)
  {
    v87 = sub_1001D0954(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
LABEL_93:
    v88 = v112;
  }
  if (v87 == 0.0)
  {
LABEL_95:
    v89 = 0;
    goto LABEL_96;
  }
  if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v87 > 0.0)
      v89 = 1;
    else
      v89 = -1;
  }
  else
  {
    v104 = v84 * 2.22044605e-16;
    v105 = fabs(v87);
    if (v84 < 1.0)
      v104 = 2.22044605e-16;
    if (v87 > 0.0)
      v89 = 1;
    else
      v89 = -1;
    if (v105 <= v104)
      goto LABEL_95;
  }
LABEL_96:
  v117 = v111;
  v118 = v88;
  v115 = v7;
  v116 = v8;
  v113 = v3;
  v114 = v4;
  v90 = v111 - v3;
  v125[0] = v111 - v3;
  v124[0] = v8 - v4;
  v91 = v88 - v4;
  v123[0] = v88 - v4;
  v92 = v7 - v3;
  v122[0] = v7 - v3;
  v93 = vabdd_f64(v111, v3);
  v94 = vabdd_f64(v8, v4);
  v95 = vabdd_f64(v88, v4);
  v96 = vabdd_f64(v7, v3);
  if (v93 < v94)
    v93 = v94;
  if (v93 < v95)
    v93 = v95;
  if (v93 >= v96)
    v97 = v93;
  else
    v97 = v96;
  v98 = v90 * (v8 - v4);
  v121[0] = v98;
  v99 = v91 * v92;
  v100 = v98 - v91 * v92;
  v119 = fabs(v98) + fabs(v91 * v92);
  v120[0] = v91 * v92;
  if (vabdd_f64(v98, v91 * v92) < v119 * 3.33066907e-16 && (v98 <= 0.0 || v99 > 0.0) && (v98 >= 0.0 || v99 < 0.0))
    v100 = sub_1001D0954(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
  if (v100 == 0.0)
    goto LABEL_110;
  if ((*(_QWORD *)&v100 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v100 > 0.0)
      v101 = 1;
    else
      v101 = -1;
  }
  else
  {
    v106 = v97 * 2.22044605e-16;
    v107 = fabs(v100);
    if (v97 < 1.0)
      v106 = 2.22044605e-16;
    if (v100 > 0.0)
      v101 = 1;
    else
      v101 = -1;
    if (v107 <= v106)
LABEL_110:
      v101 = 0;
  }
  v72 = v101 < v89;
  if (v101 == v89)
    return *a2 < *a3;
  return v72;
}

__n128 sub_10029EB08(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;

  sub_10029DC50((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a6);
  if (sub_10029D980(a6, a4, (_QWORD *)a3))
  {
    v12 = *(_OWORD *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_QWORD *)(a3 + 32);
    v15 = *((_QWORD *)a4 + 4);
    v16 = a4[1];
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v15;
    *((_QWORD *)a4 + 4) = v14;
    *a4 = v12;
    a4[1] = v13;
    if (sub_10029D980(a6, (_QWORD *)a3, (_QWORD *)a2))
    {
      v17 = *(_OWORD *)a2;
      v18 = *(_OWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a3 + 32);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 32) = v20;
      *(_QWORD *)(a3 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      if (sub_10029D980(a6, (_QWORD *)a2, (_QWORD *)a1))
      {
        v22 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a1 + 16);
        v24 = *(_QWORD *)(a1 + 32);
        v25 = *(_QWORD *)(a2 + 32);
        v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a2 + 32) = v24;
        *(_OWORD *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v23;
      }
    }
  }
  if (sub_10029D980(a6, a5, a4))
  {
    v28 = *a4;
    v29 = a4[1];
    v30 = *((_QWORD *)a4 + 4);
    v31 = *((_QWORD *)a5 + 4);
    v32 = a5[1];
    *a4 = *a5;
    a4[1] = v32;
    *((_QWORD *)a4 + 4) = v31;
    *((_QWORD *)a5 + 4) = v30;
    *a5 = v28;
    a5[1] = v29;
    if (sub_10029D980(a6, a4, (_QWORD *)a3))
    {
      v33 = *(_OWORD *)a3;
      v34 = *(_OWORD *)(a3 + 16);
      v35 = *(_QWORD *)(a3 + 32);
      v36 = *((_QWORD *)a4 + 4);
      v37 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v37;
      *(_QWORD *)(a3 + 32) = v36;
      *((_QWORD *)a4 + 4) = v35;
      *a4 = v33;
      a4[1] = v34;
      if (sub_10029D980(a6, (_QWORD *)a3, (_QWORD *)a2))
      {
        v38 = *(_OWORD *)a2;
        v39 = *(_OWORD *)(a2 + 16);
        v40 = *(_QWORD *)(a2 + 32);
        v41 = *(_QWORD *)(a3 + 32);
        v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v42;
        *(_QWORD *)(a2 + 32) = v41;
        *(_QWORD *)(a3 + 32) = v40;
        *(_OWORD *)a3 = v38;
        *(_OWORD *)(a3 + 16) = v39;
        if (sub_10029D980(a6, (_QWORD *)a2, (_QWORD *)a1))
        {
          result = *(__n128 *)a1;
          v43 = *(_OWORD *)(a1 + 16);
          v44 = *(_QWORD *)(a1 + 32);
          v45 = *(_QWORD *)(a2 + 32);
          v46 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v46;
          *(_QWORD *)(a1 + 32) = v45;
          *(_QWORD *)(a2 + 32) = v44;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v43;
        }
      }
    }
  }
  return result;
}

__int128 *sub_10029ECCC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  __n128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 *v43;
  __int128 *v44;
  __n128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        sub_10029EF98(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_10029D980(a4, v14, (_QWORD *)a1))
        {
          v15 = *v14;
          v16 = v14[1];
          v17 = *((_QWORD *)v14 + 4);
          v18 = *(_QWORD *)(a1 + 32);
          v19 = *(_OWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((_QWORD *)v14 + 4) = v18;
          *(_QWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v16;
          sub_10029EF98(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 40);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 41)
    {
      return v13;
    }
    else
    {
      v43 = v13;
      v44 = a2;
      v20 = v8 / 0x28uLL;
      do
      {
        v22 = 0;
        v45 = *(__n128 *)a1;
        v46 = *(_OWORD *)(a1 + 16);
        v47 = *(_QWORD *)(a1 + 32);
        v23 = a1;
        do
        {
          v26 = v23 + 40 * v22 + 40;
          v27 = (2 * v22) | 1;
          v28 = 2 * v22 + 2;
          if (v28 < v20
            && sub_10029D980(a4, (_QWORD *)(v23 + 40 * v22 + 40), (_QWORD *)(v23 + 40 * v22 + 80)))
          {
            v26 += 40;
            v27 = v28;
          }
          v24 = *(_OWORD *)v26;
          v25 = *(_OWORD *)(v26 + 16);
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v26 + 32);
          *(_OWORD *)v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
          v23 = v26;
          v22 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        v29 = (uint64_t)v44 - 40;
        v30 = v26 == (_QWORD)v44 - 40;
        v44 = (__int128 *)((char *)v44 - 40);
        if (v30)
        {
          *(_QWORD *)(v26 + 32) = v47;
          *(__n128 *)v26 = v45;
          *(_OWORD *)(v26 + 16) = v46;
        }
        else
        {
          v31 = *(__n128 *)v29;
          v32 = *(_OWORD *)(v29 + 16);
          *(_QWORD *)(v26 + 32) = *(_QWORD *)(v29 + 32);
          *(__n128 *)v26 = v31;
          *(_OWORD *)(v26 + 16) = v32;
          *(__n128 *)v29 = v45;
          *(_OWORD *)(v29 + 16) = v46;
          *(_QWORD *)(v29 + 32) = v47;
          v33 = v26 - a1 + 40;
          if (v33 >= 41)
          {
            v34 = (v33 / 0x28uLL - 2) >> 1;
            v35 = a1 + 40 * v34;
            if (sub_10029D980(a4, (_QWORD *)v35, (_QWORD *)v26))
            {
              v36 = *(_OWORD *)v26;
              v37 = *(_OWORD *)(v26 + 16);
              v50 = *(_QWORD *)(v26 + 32);
              v48 = v36;
              v49 = v37;
              do
              {
                v38 = v35;
                v39 = *(_OWORD *)v35;
                v40 = *(_OWORD *)(v35 + 16);
                *(_QWORD *)(v26 + 32) = *(_QWORD *)(v35 + 32);
                *(_OWORD *)v26 = v39;
                *(_OWORD *)(v26 + 16) = v40;
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
                v35 = a1 + 40 * v34;
                v26 = v38;
              }
              while ((sub_10029D980(a4, (_QWORD *)v35, &v48) & 1) != 0);
              v41 = v49;
              *(_OWORD *)v38 = v48;
              *(_OWORD *)(v38 + 16) = v41;
              *(_QWORD *)(v38 + 32) = v50;
            }
          }
        }
      }
      while (v20-- > 2);
      return v43;
    }
  }
  return a3;
}

__n128 sub_10029EF98(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_10029D980(a2, (_QWORD *)(a1 + 40 * v12), (_QWORD *)v13 + 5))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((sub_10029D980(a2, v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (sub_10029D980(a2, (_QWORD *)(a1 + 40 * v20), (_QWORD *)v13 + 5))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!sub_10029D980(a2, v13, &v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

double sub_10029F104(char **a1, double *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, _QWORD *a7, int a8)
{
  uint64_t v16;
  __int128 *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  char v37;
  BOOL v38;
  uint64_t *v40;
  unint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  char v50;
  _BOOL4 v51;
  uint64_t *v53;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  sub_10029F480(a6, a7, (_QWORD *)(a3 + 8), &v58, &v57, &v56);
  v16 = 0;
  if (*(_QWORD *)(a3 + 48) == *(_QWORD *)(a3 + 56))
    v17 = &v56;
  else
    v17 = &v57;
  v55 = *v17;
  v18 = *a2;
  v19 = a2[1];
  v20 = fabs(*a2);
  v21 = fabs(v19);
  v22 = (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
  v23 = *(_QWORD *)(a3 + 8);
  v24 = *a7 + 48 * *(_QWORD *)(a3 + 16);
  v25 = (_QWORD *)(v24 + 24);
  v27 = *(_QWORD *)(a3 + 24);
  v26 = *(_QWORD *)(a3 + 32);
  v28 = a6[3] + 24 * v27;
  if (v27 < 0)
    v28 = (uint64_t)a6;
  v29 = *((double *)&v58 + 1);
  v30 = *(double *)&v58;
  while (1)
  {
    v34 = fabs(v30);
    v35 = fabs(v29);
    if (v34 < v20)
      v34 = v20;
    if (v34 < v35)
      v34 = v35;
    if (v34 < v21)
      v34 = v21;
    v36 = v34 >= 1.0 ? v34 * 1000000000.0 : 1000000000.0;
    if (v30 != v18)
    {
      v37 = (*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22;
      if ((v37 & 1) != 0)
        break;
      v30 = vabdd_f64(v30, v18);
      if (v30 > v36 * 2.22044605e-16)
        break;
    }
    if (v29 == v19)
    {
      v38 = 1;
      if (v16 < -9)
        break;
    }
    else
    {
      if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      v29 = vabdd_f64(v29, v19);
      v30 = v36 * 2.22044605e-16;
      v38 = v29 <= v36 * 2.22044605e-16;
      if (v16 < -9)
        break;
    }
    if (!v38)
      break;
    v40 = (uint64_t *)v28;
    if (!v23)
      goto LABEL_7;
    if (v23 == 1)
    {
      v40 = (uint64_t *)(*v25 + 24 * v27);
      if (v27 < 0)
        v40 = (uint64_t *)v24;
LABEL_7:
      v31 = *v40;
      v32 = ((v40[1] - *v40) >> 4) - 1;
      v33 = (double *)(v31 + 16 * ((v32 & (((v26 - 1 + v16) % v32) >> 63)) + (v26 - 1 + v16) % v32));
      v30 = *v33;
      v29 = v33[1];
    }
    *(double *)&v58 = v30;
    *((double *)&v58 + 1) = v29;
    --v16;
  }
  v41 = 0;
  v42 = *((double *)&v55 + 1);
  v43 = *(double *)&v55;
  while (1)
  {
    v47 = fabs(v43);
    v48 = fabs(v42);
    if (v47 < v20)
      v47 = v20;
    if (v47 < v48)
      v47 = v48;
    if (v47 < v21)
      v47 = v21;
    v49 = v47 >= 1.0 ? v47 * 1000000000.0 : 1000000000.0;
    if (v43 != v18)
    {
      v50 = (*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22;
      if ((v50 & 1) != 0)
        break;
      v43 = vabdd_f64(v43, v18);
      if (v43 > v49 * 2.22044605e-16)
        break;
    }
    if (v42 == v19)
    {
      v51 = 1;
      if (v41 > 9)
        break;
    }
    else
    {
      if ((*(_QWORD *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      v42 = vabdd_f64(v42, v19);
      v43 = v49 * 2.22044605e-16;
      v51 = v42 <= v49 * 2.22044605e-16;
      if (v41 > 9)
        break;
    }
    if (!v51)
      break;
    v53 = (uint64_t *)v28;
    if (!v23)
      goto LABEL_39;
    if (v23 == 1)
    {
      v53 = (uint64_t *)(*v25 + 24 * v27);
      if (v27 < 0)
        v53 = (uint64_t *)v24;
LABEL_39:
      v44 = *v53;
      v45 = ((v53[1] - *v53) >> 4) - 1;
      v46 = (double *)(v44 + 16 * ((v45 & (((uint64_t)(v26 + 1 + v41) % v45) >> 63)) + (uint64_t)(v26 + 1 + v41) % v45));
      v43 = *v46;
      v42 = v46[1];
    }
    *(double *)&v55 = v43;
    *((double *)&v55 + 1) = v42;
    ++v41;
  }
  sub_10029F60C((uint64_t)a1, a4, a5, &v58, (int *)a3, a8);
  sub_10029F848(a1, a4, a5, &v55, (int *)a3);
  return *(double *)&v58;
}

uint64_t sub_10029F480(uint64_t *a1, _QWORD *a2, _QWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*a3 == 1)
  {
    v8 = a3[2];
    v7 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v8 >= 0)
      v7 = (uint64_t *)(v7[3] + 24 * v8);
  }
  else
  {
    if (*a3)
      return 0;
    v6 = a3[2];
    if (v6 >= 0)
      v7 = (uint64_t *)(a1[3] + 24 * v6);
    else
      v7 = a1;
  }
  v9 = *v7;
  v10 = ((v7[1] - *v7) >> 4) - 1;
  *a4 = *(_OWORD *)(v9 + 16 * ((v10 & ((a3[3] % v10) >> 63)) + a3[3] % v10));
  if (*a3 == 1)
  {
    v13 = a3[2];
    v12 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v13 >= 0)
      v12 = (uint64_t *)(v12[3] + 24 * v13);
  }
  else
  {
    if (*a3)
      return 0;
    v11 = a3[2];
    if (v11 >= 0)
      v12 = (uint64_t *)(a1[3] + 24 * v11);
    else
      v12 = a1;
  }
  v14 = *v12;
  v15 = ((v12[1] - *v12) >> 4) - 1;
  *a5 = *(_OWORD *)(v14 + 16 * ((v15 & (((a3[3] + 1) % v15) >> 63)) + (a3[3] + 1) % v15));
  if (*a3 == 1)
  {
    v19 = a3[2];
    v17 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v19 >= 0)
      v17 = (uint64_t *)(v17[3] + 24 * v19);
    goto LABEL_23;
  }
  if (*a3)
    return 0;
  v16 = a3[2];
  if (v16 >= 0)
    v17 = (uint64_t *)(a1[3] + 24 * v16);
  else
    v17 = a1;
LABEL_23:
  v20 = *v17;
  v21 = ((v17[1] - *v17) >> 4) - 1;
  *a6 = *(_OWORD *)(v20 + 16 * ((v21 & (((a3[3] + 2) % v21) >> 63)) + (a3[3] + 2) % v21));
  return 1;
}

void sub_10029F60C(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, int *a5, int a6)
{
  int v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[44];

  v11 = *a5;
  *(_OWORD *)&v27[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v27[20] = *(_OWORD *)(a5 + 6);
  *(_QWORD *)&v27[36] = *((_QWORD *)a5 + 5);
  v13 = *(_OWORD **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    v15 = *(_OWORD **)a1;
    v16 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - *(_QWORD *)a1) >> 4);
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) > 0x249249249249249)
      sub_1000D02C0();
    v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (_QWORD)v15) >> 4);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x124924924924924)
      v19 = 0x249249249249249;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 > 0x249249249249249)
        sub_1000CDEB8();
      v20 = (char *)operator new(112 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[112 * v16];
    *(_OWORD *)v21 = *a4;
    *((_OWORD *)v21 + 1) = xmmword_100382A50;
    *(_OWORD *)(v21 + 68) = *(_OWORD *)v27;
    *((_QWORD *)v21 + 4) = a2;
    *((_DWORD *)v21 + 10) = a3;
    *(_QWORD *)(v21 + 52) = 0;
    *(_QWORD *)(v21 + 44) = 0;
    *((_DWORD *)v21 + 15) = 0;
    *((_DWORD *)v21 + 16) = v11;
    *(_OWORD *)(v21 + 84) = *(_OWORD *)&v27[16];
    v14 = v21 + 112;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v27[28];
    if (v13 != v15)
    {
      do
      {
        v22 = *(v13 - 7);
        v23 = *(v13 - 5);
        *((_OWORD *)v21 - 6) = *(v13 - 6);
        *((_OWORD *)v21 - 5) = v23;
        *((_OWORD *)v21 - 7) = v22;
        v24 = *(v13 - 4);
        v25 = *(v13 - 3);
        v26 = *(v13 - 1);
        *((_OWORD *)v21 - 2) = *(v13 - 2);
        *((_OWORD *)v21 - 1) = v26;
        *((_OWORD *)v21 - 4) = v24;
        *((_OWORD *)v21 - 3) = v25;
        v21 -= 112;
        v13 -= 7;
      }
      while (v13 != v15);
      v13 = *(_OWORD **)a1;
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v20[112 * v19];
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v13 = *a4;
    v13[1] = xmmword_100382A50;
    *(_OWORD *)((char *)v13 + 68) = *(_OWORD *)v27;
    *((_QWORD *)v13 + 4) = a2;
    *((_DWORD *)v13 + 10) = a3;
    *(_QWORD *)((char *)v13 + 52) = 0;
    *(_QWORD *)((char *)v13 + 44) = 0;
    *((_DWORD *)v13 + 15) = 0;
    *((_DWORD *)v13 + 16) = v11;
    *(_OWORD *)((char *)v13 + 84) = *(_OWORD *)&v27[16];
    v14 = v13 + 7;
    v13[6] = *(_OWORD *)&v27[28];
  }
  *(_QWORD *)(a1 + 8) = v14;
  if (a6)
  {
    *(_OWORD *)(a1 + 24) = *a4;
    ++*(_QWORD *)(a1 + 40);
  }
}

void sub_10029F848(char **a1, uint64_t a2, int a3, _OWORD *a4, int *a5)
{
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[44];

  v9 = *a5;
  *(_OWORD *)&v25[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v25[20] = *(_OWORD *)(a5 + 6);
  *(_QWORD *)&v25[36] = *((_QWORD *)a5 + 5);
  v11 = a1[1];
  v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    v13 = *a1;
    v14 = 0x6DB6DB6DB6DB6DB7 * ((v11 - *a1) >> 4);
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x249249249249249)
      sub_1000D02C0();
    v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (_QWORD)v13) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x124924924924924)
      v17 = 0x249249249249249;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x249249249249249)
        sub_1000CDEB8();
      v18 = (char *)operator new(112 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[112 * v14];
    *(_OWORD *)v19 = *a4;
    *((_OWORD *)v19 + 1) = xmmword_100382A50;
    *(_OWORD *)(v19 + 68) = *(_OWORD *)v25;
    *((_QWORD *)v19 + 4) = a2;
    *((_DWORD *)v19 + 10) = a3;
    *((_DWORD *)v19 + 11) = 1;
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 7) = 0;
    *((_DWORD *)v19 + 16) = v9;
    *(_OWORD *)(v19 + 84) = *(_OWORD *)&v25[16];
    v12 = v19 + 112;
    *((_OWORD *)v19 + 6) = *(_OWORD *)&v25[28];
    if (v11 != v13)
    {
      do
      {
        v20 = *((_OWORD *)v11 - 7);
        v21 = *((_OWORD *)v11 - 5);
        *((_OWORD *)v19 - 6) = *((_OWORD *)v11 - 6);
        *((_OWORD *)v19 - 5) = v21;
        *((_OWORD *)v19 - 7) = v20;
        v22 = *((_OWORD *)v11 - 4);
        v23 = *((_OWORD *)v11 - 3);
        v24 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v19 - 1) = v24;
        *((_OWORD *)v19 - 4) = v22;
        *((_OWORD *)v19 - 3) = v23;
        v19 -= 112;
        v11 -= 112;
      }
      while (v11 != v13);
      v11 = *a1;
    }
    *a1 = v19;
    a1[1] = v12;
    a1[2] = &v18[112 * v17];
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_OWORD *)v11 = *a4;
    *((_OWORD *)v11 + 1) = xmmword_100382A50;
    *(_OWORD *)(v11 + 68) = *(_OWORD *)v25;
    *((_QWORD *)v11 + 4) = a2;
    *((_DWORD *)v11 + 10) = a3;
    *((_DWORD *)v11 + 11) = 1;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_DWORD *)v11 + 16) = v9;
    *(_OWORD *)(v11 + 84) = *(_OWORD *)&v25[16];
    v12 = v11 + 112;
    *((_OWORD *)v11 + 6) = *(_OWORD *)&v25[28];
  }
  a1[1] = v12;
}

uint64_t sub_10029FA68(double **a1, double *a2, double *a3)
{
  double *v6;
  double *v7;
  double v8;
  int v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t result;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  double v51;
  int v52;
  double *v53;
  double v54;
  int v55;
  double v56;
  double v58;

  v6 = *a1;
  v7 = a1[1];
  v58 = 1.0;
  v8 = sub_10005C128(v6, v7, a2, &v58);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v58 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v58 = 1.0;
  v13 = sub_10005C128(v11, v12, a3, &v58);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_87;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v58 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_87;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_85;
      v47 = fabs(v26);
      v48 = 2.22044605e-16;
      if (v47 >= 1.0)
        v48 = v47 * 2.22044605e-16;
      if (v47 > v48)
        goto LABEL_85;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_85;
      v28 = fabs(v27);
      v29 = 2.22044605e-16;
      if (v28 >= 1.0)
        v29 = v28 * 2.22044605e-16;
      if (v28 > v29)
      {
LABEL_85:
        if (v24 * v25 - v26 * *v23 + a2[1] * v27 + v26 * *a2 < 0.0)
          return 1;
      }
    }
    goto LABEL_87;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = v15 * v16 - v17 * *v14;
  if (v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_48;
      v30 = fabs(v17);
      v31 = 2.22044605e-16;
      if (v30 >= 1.0)
        v31 = v30 * 2.22044605e-16;
      if (v30 > v31)
        goto LABEL_48;
    }
    if (v16 == 0.0)
      goto LABEL_16;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_48;
    v32 = fabs(v18);
    v33 = 2.22044605e-16;
    if (v32 >= 1.0)
      v33 = v32 * 2.22044605e-16;
    if (v32 <= v33)
    {
LABEL_16:
      v20 = 0;
    }
    else
    {
LABEL_48:
      v20 = 0;
      result = 0;
      if (v19 + a3[1] * v18 + v17 * *a3 < 0.0)
        return result;
    }
LABEL_87:
    v42 = v9 < v20;
    if (v9 == v20)
    {
      v49 = a1[1];
      v58 = 1.0;
      v50 = sub_10005C128(v49, a2, a3, &v58);
      if (v50 == 0.0)
        return 0;
      if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v50 > 0.0)
          v52 = 1;
        else
          v52 = -1;
      }
      else
      {
        v51 = fabs(v50);
        if (v50 > 0.0)
          v52 = 1;
        else
          v52 = -1;
        if (v51 <= v58 * 2.22044605e-16)
          return 0;
      }
      v53 = a1[1];
      v58 = 1.0;
      v54 = sub_10005C128(v53, a3, a2, &v58);
      if (v54 != 0.0)
      {
        if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v54 > 0.0)
            v55 = 1;
          else
            v55 = -1;
          return !(v52 + v55) && v55 < v52;
        }
        v56 = fabs(v54);
        if (v54 > 0.0)
          v55 = 1;
        else
          v55 = -1;
        if (v56 > v58 * 2.22044605e-16)
          return !(v52 + v55) && v55 < v52;
      }
      v55 = 0;
      return !(v52 + v55) && v55 < v52;
    }
    return v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_59;
    v35 = fabs(v17);
    v36 = 2.22044605e-16;
    if (v35 >= 1.0)
      v36 = v35 * 2.22044605e-16;
    if (v35 > v36)
      goto LABEL_59;
  }
  if (v16 == 0.0)
    goto LABEL_26;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_59;
  v37 = fabs(v18);
  v38 = 2.22044605e-16;
  if (v37 >= 1.0)
    v38 = v37 * 2.22044605e-16;
  if (v37 <= v38)
  {
LABEL_26:
    v22 = 0;
    if (v17 != 0.0)
      goto LABEL_65;
  }
  else
  {
LABEL_59:
    v39 = v19 + a2[1] * v18 + v17 * *a2;
    if (v39 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v39 == 0.0)
      v22 = 0;
    if (v17 != 0.0)
    {
LABEL_65:
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_75;
      v40 = fabs(v17);
      v41 = 2.22044605e-16;
      if (v40 >= 1.0)
        v41 = v40 * 2.22044605e-16;
      if (v40 > v41)
        goto LABEL_75;
    }
  }
  if (v16 == 0.0)
    return v22 < 0;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v43 = fabs(v18);
    v44 = 2.22044605e-16;
    if (v43 >= 1.0)
      v44 = v43 * 2.22044605e-16;
    if (v43 <= v44)
      return v22 < 0;
  }
LABEL_75:
  v45 = v19 + a3[1] * v18 + v17 * *a3;
  if (v45 > 0.0)
    v46 = 1;
  else
    v46 = -1;
  if (v45 == 0.0)
    v46 = 0;
  return v22 < v46;
}

void sub_1002A0004(__int128 *a1, __n128 *a2, double **a3, uint64_t a4, char a5)
{
  __n128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  char v37;
  BOOL v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  BOOL v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __n128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __n128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __n128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;

uint64_t sub_1002A06DC(double **a1, uint64_t a2, uint64_t a3)
{
  double *v6;
  double *v7;
  double v8;
  int v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t result;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  double *v49;
  double v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  int v64;
  double *v65;
  double v66;
  int v67;
  double v68;
  double v69;

  v6 = *a1;
  v7 = a1[1];
  v69 = 1.0;
  v8 = sub_10005C128(v6, v7, (double *)a2, &v69);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v69 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v69 = 1.0;
  v13 = sub_10005C128(v11, v12, (double *)a3, &v69);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_89;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v69 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_89;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_87;
      v47 = fabs(v26);
      v48 = 2.22044605e-16;
      if (v47 >= 1.0)
        v48 = v47 * 2.22044605e-16;
      if (v47 > v48)
        goto LABEL_87;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_87;
      v28 = fabs(v27);
      v29 = 2.22044605e-16;
      if (v28 >= 1.0)
        v29 = v28 * 2.22044605e-16;
      if (v28 > v29)
      {
LABEL_87:
        if (v24 * v25 - v26 * *v23 + *(double *)(a2 + 8) * v27 + v26 * *(double *)a2 < 0.0)
          return 1;
      }
    }
    goto LABEL_89;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_59;
      v35 = fabs(v17);
      v36 = 2.22044605e-16;
      if (v35 >= 1.0)
        v36 = v35 * 2.22044605e-16;
      if (v35 > v36)
        goto LABEL_59;
    }
    if (v16 == 0.0)
      goto LABEL_26;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_59;
    v37 = fabs(v18);
    v38 = 2.22044605e-16;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    if (v37 <= v38)
    {
LABEL_26:
      v22 = 0;
      if (v17 == 0.0)
        goto LABEL_69;
    }
    else
    {
LABEL_59:
      v39 = v19 + *(double *)(a2 + 8) * v18 + v17 * *(double *)a2;
      if (v39 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      if (v39 == 0.0)
        v22 = 0;
      if (v17 == 0.0)
        goto LABEL_69;
    }
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_76;
    v40 = fabs(v17);
    v41 = 2.22044605e-16;
    if (v40 >= 1.0)
      v41 = v40 * 2.22044605e-16;
    if (v40 > v41)
    {
LABEL_76:
      v45 = v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3;
      if (v45 > 0.0)
        v46 = 1;
      else
        v46 = -1;
      if (v45 == 0.0)
        v46 = 0;
      v42 = v22 < v46;
      if (v22 == v46)
      {
LABEL_91:
        v51 = *(_DWORD *)(a2 + 44);
        v52 = *(_DWORD *)(a3 + 44);
        v42 = v51 < v52;
        if (v51 == v52)
        {
          v53 = *(_QWORD *)(a2 + 32);
          v54 = *(_QWORD *)(a3 + 32);
          v42 = v53 < v54;
          if (v53 == v54)
          {
            v55 = *(_QWORD *)(a2 + 72);
            v56 = *(_QWORD *)(a3 + 72);
            v42 = v55 < v56;
            if (v55 == v56)
            {
              v57 = *(_QWORD *)(a2 + 80);
              v58 = *(_QWORD *)(a3 + 80);
              v42 = v57 < v58;
              if (v57 == v58)
              {
                v59 = *(_QWORD *)(a2 + 88);
                v60 = *(_QWORD *)(a3 + 88);
                v42 = v59 < v60;
                if (v59 == v60)
                {
                  v61 = *(_QWORD *)(a2 + 104);
                  v62 = *(_QWORD *)(a3 + 104);
                  v42 = v61 < v62;
                  if (v61 == v62)
                    return *(_QWORD *)(a2 + 96) < *(_QWORD *)(a3 + 96);
                }
              }
            }
          }
        }
        return v42;
      }
      return v42;
    }
LABEL_69:
    if (v16 == 0.0)
      goto LABEL_70;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v43 = fabs(v18);
      v44 = 2.22044605e-16;
      if (v43 >= 1.0)
        v44 = v43 * 2.22044605e-16;
      if (v43 <= v44)
      {
LABEL_70:
        v42 = v22 < 0;
        if (!v22)
          goto LABEL_91;
        return v42;
      }
    }
    goto LABEL_76;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_48;
    v30 = fabs(v17);
    v31 = 2.22044605e-16;
    if (v30 >= 1.0)
      v31 = v30 * 2.22044605e-16;
    if (v30 > v31)
      goto LABEL_48;
  }
  if (v16 == 0.0)
    goto LABEL_16;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_48;
  v32 = fabs(v18);
  v33 = 2.22044605e-16;
  if (v32 >= 1.0)
    v33 = v32 * 2.22044605e-16;
  if (v32 <= v33)
  {
LABEL_16:
    v20 = 0;
  }
  else
  {
LABEL_48:
    v20 = 0;
    result = 0;
    if (v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3 < 0.0)
      return result;
  }
LABEL_89:
  v42 = v9 < v20;
  if (v9 == v20)
  {
    v49 = a1[1];
    v69 = 1.0;
    v50 = sub_10005C128(v49, (double *)a2, (double *)a3, &v69);
    if (v50 == 0.0)
      goto LABEL_91;
    if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v50 > 0.0)
        v64 = 1;
      else
        v64 = -1;
    }
    else
    {
      v63 = fabs(v50);
      if (v50 > 0.0)
        v64 = 1;
      else
        v64 = -1;
      if (v63 <= v69 * 2.22044605e-16)
        goto LABEL_91;
    }
    v65 = a1[1];
    v69 = 1.0;
    v66 = sub_10005C128(v65, (double *)a3, (double *)a2, &v69);
    if (v66 == 0.0)
      goto LABEL_111;
    if ((*(_QWORD *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v66 > 0.0)
        v67 = 1;
      else
        v67 = -1;
    }
    else
    {
      v68 = fabs(v66);
      if (v66 > 0.0)
        v67 = 1;
      else
        v67 = -1;
      if (v68 <= v69 * 2.22044605e-16)
LABEL_111:
        v67 = 0;
    }
    if (!(v64 + v67))
      return v67 < v64;
    goto LABEL_91;
  }
  return v42;
}

uint64_t sub_1002A0CBC(__int128 *a1, __int128 *a2, __int128 *a3, double **a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v8 = sub_1002A06DC(a4, (uint64_t)a2, (uint64_t)a1);
  result = sub_1002A06DC(a4, (uint64_t)a3, (uint64_t)a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v57 = a1[4];
      v62 = a1[5];
      v67 = a1[6];
      v37 = *a1;
      v42 = a1[1];
      v47 = a1[2];
      v52 = a1[3];
      v11 = a3[1];
      v10 = a3[2];
      *a1 = *a3;
      a1[1] = v11;
      a1[2] = v10;
      v12 = a3[6];
      v14 = a3[3];
      v13 = a3[4];
      a1[5] = a3[5];
      a1[6] = v12;
      a1[3] = v14;
      a1[4] = v13;
      *a3 = v37;
      a3[1] = v42;
      a3[5] = v62;
      a3[6] = v67;
      a3[4] = v57;
      v15 = v47;
      v16 = v52;
      result = 1;
LABEL_10:
      a3[2] = v15;
      a3[3] = v16;
      return result;
    }
    v60 = a1[4];
    v65 = a1[5];
    v70 = a1[6];
    v40 = *a1;
    v45 = a1[1];
    v50 = a1[2];
    v55 = a1[3];
    v28 = a2[1];
    v27 = a2[2];
    *a1 = *a2;
    a1[1] = v28;
    a1[2] = v27;
    v29 = a2[6];
    v31 = a2[3];
    v30 = a2[4];
    a1[5] = a2[5];
    a1[6] = v29;
    a1[3] = v31;
    a1[4] = v30;
    *a2 = v40;
    a2[1] = v45;
    a2[5] = v65;
    a2[6] = v70;
    a2[2] = v50;
    a2[3] = v55;
    a2[4] = v60;
    if (sub_1002A06DC(a4, (uint64_t)a3, (uint64_t)a2))
    {
      v61 = a2[4];
      v66 = a2[5];
      v71 = a2[6];
      v41 = *a2;
      v46 = a2[1];
      v51 = a2[2];
      v56 = a2[3];
      v33 = a3[1];
      v32 = a3[2];
      *a2 = *a3;
      a2[1] = v33;
      a2[2] = v32;
      v34 = a3[6];
      v36 = a3[3];
      v35 = a3[4];
      a2[5] = a3[5];
      a2[6] = v34;
      a2[3] = v36;
      a2[4] = v35;
      *a3 = v41;
      a3[1] = v46;
      a3[5] = v66;
      a3[6] = v71;
      a3[4] = v61;
      v15 = v51;
      v16 = v56;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v58 = a2[4];
    v63 = a2[5];
    v68 = a2[6];
    v38 = *a2;
    v43 = a2[1];
    v48 = a2[2];
    v53 = a2[3];
    v18 = a3[1];
    v17 = a3[2];
    *a2 = *a3;
    a2[1] = v18;
    a2[2] = v17;
    v19 = a3[6];
    v21 = a3[3];
    v20 = a3[4];
    a2[5] = a3[5];
    a2[6] = v19;
    a2[3] = v21;
    a2[4] = v20;
    *a3 = v38;
    a3[1] = v43;
    a3[5] = v63;
    a3[6] = v68;
    a3[2] = v48;
    a3[3] = v53;
    a3[4] = v58;
    if (!sub_1002A06DC(a4, (uint64_t)a2, (uint64_t)a1))
      return 1;
    v59 = a1[4];
    v64 = a1[5];
    v69 = a1[6];
    v39 = *a1;
    v44 = a1[1];
    v49 = a1[2];
    v54 = a1[3];
    v23 = a2[1];
    v22 = a2[2];
    *a1 = *a2;
    a1[1] = v23;
    a1[2] = v22;
    v24 = a2[6];
    v26 = a2[3];
    v25 = a2[4];
    a1[5] = a2[5];
    a1[6] = v24;
    a1[3] = v26;
    a1[4] = v25;
    *a2 = v39;
    a2[1] = v44;
    a2[5] = v64;
    a2[6] = v69;
    result = 2;
    a2[2] = v49;
    a2[3] = v54;
    a2[4] = v59;
  }
  return result;
}

__int128 *sub_1002A0F70(__int128 *a1, __int128 *a2, double **a3)
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = a2;
  v6 = a1[5];
  v43 = a1[4];
  v44 = v6;
  v45 = a1[6];
  v7 = a1[1];
  v39 = *a1;
  v40 = v7;
  v8 = a1[3];
  v41 = a1[2];
  v42 = v8;
  if ((sub_1002A06DC(a3, (uint64_t)&v39, (uint64_t)(a2 - 7)) & 1) != 0)
  {
    v9 = a1;
    do
      v9 += 7;
    while ((sub_1002A06DC(a3, (uint64_t)&v39, (uint64_t)v9) & 1) == 0);
  }
  else
  {
    v10 = (unint64_t)(a1 + 7);
    do
    {
      v9 = (__int128 *)v10;
      if (v10 >= (unint64_t)v4)
        break;
      v11 = sub_1002A06DC(a3, (uint64_t)&v39, v10);
      v10 = (unint64_t)(v9 + 7);
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 7;
    while ((sub_1002A06DC(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    v12 = *v9;
    v13 = v9[2];
    v47 = v9[1];
    v48 = v13;
    v46 = v12;
    v14 = v9[3];
    v15 = v9[4];
    v16 = v9[6];
    v51 = v9[5];
    v52 = v16;
    v49 = v14;
    v50 = v15;
    v17 = v4[6];
    v19 = v4[3];
    v18 = v4[4];
    v9[5] = v4[5];
    v9[6] = v17;
    v9[3] = v19;
    v9[4] = v18;
    v20 = *v4;
    v21 = v4[2];
    v9[1] = v4[1];
    v9[2] = v21;
    *v9 = v20;
    v22 = v46;
    v23 = v48;
    v4[1] = v47;
    v4[2] = v23;
    *v4 = v22;
    v24 = v49;
    v25 = v50;
    v26 = v52;
    v4[5] = v51;
    v4[6] = v26;
    v4[3] = v24;
    v4[4] = v25;
    do
      v9 += 7;
    while (!sub_1002A06DC(a3, (uint64_t)&v39, (uint64_t)v9));
    do
      v4 -= 7;
    while ((sub_1002A06DC(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  v27 = v9 - 7;
  if (v9 - 7 != a1)
  {
    v28 = *v27;
    v29 = *(v9 - 5);
    a1[1] = *(v9 - 6);
    a1[2] = v29;
    *a1 = v28;
    v30 = *(v9 - 4);
    v31 = *(v9 - 3);
    v32 = *(v9 - 1);
    a1[5] = *(v9 - 2);
    a1[6] = v32;
    a1[3] = v30;
    a1[4] = v31;
  }
  v33 = v39;
  v34 = v41;
  *(v9 - 6) = v40;
  *(v9 - 5) = v34;
  *v27 = v33;
  v35 = v42;
  v36 = v43;
  v37 = v45;
  *(v9 - 2) = v44;
  *(v9 - 1) = v37;
  *(v9 - 4) = v35;
  *(v9 - 3) = v36;
  return v9;
}

__int128 *sub_1002A1134(__int128 *a1, unint64_t a2, double **a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v6 = 0;
  v7 = a1[5];
  v42 = a1[4];
  v43 = v7;
  v44 = a1[6];
  v8 = a1[1];
  v38 = *a1;
  v39 = v8;
  v9 = a1[3];
  v40 = a1[2];
  v41 = v9;
  do
    v6 += 7;
  while ((sub_1002A06DC(a3, (uint64_t)&a1[v6], (uint64_t)&v38) & 1) != 0);
  v10 = &a1[v6];
  v11 = &a1[v6 - 7];
  if (v6 == 7)
  {
    do
    {
      if ((unint64_t)v10 >= a2)
        break;
      a2 -= 112;
    }
    while ((sub_1002A06DC(a3, a2, (uint64_t)&v38) & 1) == 0);
  }
  else
  {
    do
      a2 -= 112;
    while (!sub_1002A06DC(a3, a2, (uint64_t)&v38));
  }
  if ((unint64_t)v10 < a2)
  {
    v12 = &a1[v6];
    v13 = (__int128 *)a2;
    do
    {
      v14 = v12[5];
      v49 = v12[4];
      v50 = v14;
      v51 = v12[6];
      v15 = v12[1];
      v45 = *v12;
      v46 = v15;
      v16 = v12[3];
      v47 = v12[2];
      v48 = v16;
      v18 = v13[3];
      v17 = v13[4];
      v19 = v13[6];
      v12[5] = v13[5];
      v12[6] = v19;
      v12[3] = v18;
      v12[4] = v17;
      v21 = v13[1];
      v20 = v13[2];
      *v12 = *v13;
      v12[1] = v21;
      v12[2] = v20;
      v22 = v45;
      v23 = v47;
      v13[1] = v46;
      v13[2] = v23;
      *v13 = v22;
      v24 = v48;
      v25 = v49;
      v26 = v51;
      v13[5] = v50;
      v13[6] = v26;
      v13[3] = v24;
      v13[4] = v25;
      do
        v12 += 7;
      while ((sub_1002A06DC(a3, (uint64_t)v12, (uint64_t)&v38) & 1) != 0);
      do
        v13 -= 7;
      while (!sub_1002A06DC(a3, (uint64_t)v13, (uint64_t)&v38));
    }
    while (v12 < v13);
    v11 = v12 - 7;
  }
  if (v11 != a1)
  {
    v27 = *v11;
    v28 = v11[2];
    a1[1] = v11[1];
    a1[2] = v28;
    *a1 = v27;
    v29 = v11[3];
    v30 = v11[4];
    v31 = v11[6];
    a1[5] = v11[5];
    a1[6] = v31;
    a1[3] = v29;
    a1[4] = v30;
  }
  v32 = v38;
  v33 = v40;
  v11[1] = v39;
  v11[2] = v33;
  *v11 = v32;
  v34 = v41;
  v35 = v42;
  v36 = v44;
  v11[5] = v43;
  v11[6] = v36;
  v11[3] = v34;
  v11[4] = v35;
  return v11;
}

BOOL sub_1002A1300(__int128 *a1, __int128 *a2, double **a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v6 = 0x6DB6DB6DB6DB6DB7 * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 7;
      if (!sub_1002A06DC(a3, (uint64_t)(a2 - 7), (uint64_t)a1))
        return 1;
      v9 = a1[5];
      v77 = a1[4];
      v78 = v9;
      v79 = a1[6];
      v10 = a1[1];
      v73 = *a1;
      v74 = v10;
      v11 = a1[3];
      v75 = a1[2];
      v76 = v11;
      v13 = *(a2 - 6);
      v12 = *(a2 - 5);
      *a1 = *v8;
      a1[1] = v13;
      a1[2] = v12;
      v14 = *(a2 - 1);
      v16 = *(a2 - 4);
      v15 = *(a2 - 3);
      a1[5] = *(a2 - 2);
      a1[6] = v14;
      a1[3] = v16;
      a1[4] = v15;
      v17 = v74;
      *v8 = v73;
      *(a2 - 6) = v17;
      v18 = v79;
      v19 = v77;
      *(a2 - 2) = v78;
      *(a2 - 1) = v18;
      *(a2 - 3) = v19;
      v20 = v75;
      v21 = v76;
      goto LABEL_20;
    case 3:
      sub_1002A0CBC(a1, a1 + 7, a2 - 7, a3);
      return 1;
    case 4:
      v8 = a1 + 7;
      v38 = a1 + 14;
      v39 = a2 - 7;
      sub_1002A0CBC(a1, a1 + 7, a1 + 14, a3);
      if (!sub_1002A06DC(a3, (uint64_t)v39, (uint64_t)(a1 + 14)))
        return 1;
      v40 = a1[19];
      v77 = a1[18];
      v78 = v40;
      v79 = a1[20];
      v41 = a1[15];
      v73 = *v38;
      v74 = v41;
      v42 = a1[17];
      v75 = a1[16];
      v76 = v42;
      v44 = v39[1];
      v43 = v39[2];
      *v38 = *v39;
      a1[15] = v44;
      a1[16] = v43;
      v45 = v39[6];
      v47 = v39[3];
      v46 = v39[4];
      a1[19] = v39[5];
      a1[20] = v45;
      a1[17] = v47;
      a1[18] = v46;
      v48 = v74;
      *v39 = v73;
      v39[1] = v48;
      v49 = v79;
      v50 = v77;
      v39[5] = v78;
      v39[6] = v49;
      v51 = v76;
      v39[2] = v75;
      v39[3] = v51;
      v39[4] = v50;
      if (!sub_1002A06DC(a3, (uint64_t)(a1 + 14), (uint64_t)(a1 + 7)))
        return 1;
      v52 = a1[12];
      v77 = a1[11];
      v78 = v52;
      v79 = a1[13];
      v53 = a1[8];
      v73 = *v8;
      v74 = v53;
      v54 = a1[10];
      v75 = a1[9];
      v76 = v54;
      v55 = a1[15];
      *v8 = *v38;
      a1[8] = v55;
      v56 = a1[20];
      v57 = a1[18];
      a1[12] = a1[19];
      a1[13] = v56;
      v58 = a1[17];
      a1[9] = a1[16];
      a1[10] = v58;
      a1[11] = v57;
      v59 = v74;
      *v38 = v73;
      a1[15] = v59;
      v60 = v75;
      v61 = v76;
      v62 = v79;
      a1[19] = v78;
      a1[20] = v62;
      v63 = v77;
      a1[17] = v61;
      a1[18] = v63;
      a1[16] = v60;
      if (!sub_1002A06DC(a3, (uint64_t)(a1 + 7), (uint64_t)a1))
        return 1;
      v64 = a1[5];
      v77 = a1[4];
      v78 = v64;
      v79 = a1[6];
      v65 = a1[1];
      v73 = *a1;
      v74 = v65;
      v66 = a1[3];
      v75 = a1[2];
      v76 = v66;
      v67 = a1[8];
      *a1 = *v8;
      a1[1] = v67;
      v68 = a1[13];
      v69 = a1[11];
      a1[5] = a1[12];
      a1[6] = v68;
      v70 = a1[10];
      a1[2] = a1[9];
      a1[3] = v70;
      a1[4] = v69;
      v71 = v74;
      *v8 = v73;
      a1[8] = v71;
      v20 = v75;
      v21 = v76;
      v72 = v79;
      a1[12] = v78;
      a1[13] = v72;
      a1[11] = v77;
LABEL_20:
      result = 1;
      v8[2] = v20;
      v8[3] = v21;
      return result;
    case 5:
      sub_1002A16CC(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7, a3);
      return 1;
    default:
      v22 = (uint64_t)(a1 + 14);
      sub_1002A0CBC(a1, a1 + 7, a1 + 14, a3);
      v23 = a1 + 21;
      if (a1 + 21 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    if (sub_1002A06DC(a3, (uint64_t)v23, v22))
    {
      v30 = v23[5];
      v77 = v23[4];
      v78 = v30;
      v79 = v23[6];
      v31 = v23[1];
      v73 = *v23;
      v74 = v31;
      v32 = v23[3];
      v33 = v24;
      v75 = v23[2];
      v76 = v32;
      do
      {
        v34 = (__int128 *)((char *)a1 + v33);
        v35 = *(__int128 *)((char *)a1 + v33 + 304);
        v34[25] = *(__int128 *)((char *)a1 + v33 + 288);
        v34[26] = v35;
        v34[27] = *(__int128 *)((char *)a1 + v33 + 320);
        v36 = *(__int128 *)((char *)a1 + v33 + 240);
        v34[21] = *(__int128 *)((char *)a1 + v33 + 224);
        v34[22] = v36;
        v37 = *(__int128 *)((char *)a1 + v33 + 272);
        v34[23] = *(__int128 *)((char *)a1 + v33 + 256);
        v34[24] = v37;
        if (v33 == -224)
        {
          v26 = a1;
          goto LABEL_7;
        }
        v33 -= 112;
      }
      while ((sub_1002A06DC(a3, (uint64_t)&v73, (uint64_t)(v34 + 7)) & 1) != 0);
      v26 = (__int128 *)((char *)a1 + v33 + 336);
LABEL_7:
      v27 = v78;
      v26[4] = v77;
      v26[5] = v27;
      v26[6] = v79;
      v28 = v74;
      *v26 = v73;
      v26[1] = v28;
      v29 = v76;
      ++v25;
      v26[2] = v75;
      v26[3] = v29;
      if (v25 == 8)
        return v23 + 7 == a2;
    }
    v22 = (uint64_t)v23;
    v24 += 112;
    v23 += 7;
    if (v23 == a2)
      return 1;
  }
}

__n128 sub_1002A16CC(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, double **a6)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  sub_1002A0CBC(a1, a2, a3, a6);
  if (sub_1002A06DC(a6, (uint64_t)a4, (uint64_t)a3))
  {
    v76 = a3[4];
    v83 = a3[5];
    v90 = a3[6];
    v48 = *a3;
    v55 = a3[1];
    v62 = a3[2];
    v69 = a3[3];
    v13 = a4[1];
    v12 = a4[2];
    *a3 = *a4;
    a3[1] = v13;
    a3[2] = v12;
    v14 = a4[6];
    v16 = a4[3];
    v15 = a4[4];
    a3[5] = a4[5];
    a3[6] = v14;
    a3[3] = v16;
    a3[4] = v15;
    *a4 = v48;
    a4[1] = v55;
    a4[5] = v83;
    a4[6] = v90;
    a4[2] = v62;
    a4[3] = v69;
    a4[4] = v76;
    if (sub_1002A06DC(a6, (uint64_t)a3, (uint64_t)a2))
    {
      v77 = a2[4];
      v84 = a2[5];
      v91 = a2[6];
      v49 = *a2;
      v56 = a2[1];
      v63 = a2[2];
      v70 = a2[3];
      v18 = a3[1];
      v17 = a3[2];
      *a2 = *a3;
      a2[1] = v18;
      a2[2] = v17;
      v19 = a3[6];
      v21 = a3[3];
      v20 = a3[4];
      a2[5] = a3[5];
      a2[6] = v19;
      a2[3] = v21;
      a2[4] = v20;
      *a3 = v49;
      a3[1] = v56;
      a3[5] = v84;
      a3[6] = v91;
      a3[2] = v63;
      a3[3] = v70;
      a3[4] = v77;
      if (sub_1002A06DC(a6, (uint64_t)a2, (uint64_t)a1))
      {
        v78 = a1[4];
        v85 = a1[5];
        v92 = a1[6];
        v50 = *a1;
        v57 = a1[1];
        v64 = a1[2];
        v71 = a1[3];
        v23 = a2[1];
        v22 = a2[2];
        *a1 = *a2;
        a1[1] = v23;
        a1[2] = v22;
        v24 = a2[6];
        v26 = a2[3];
        v25 = a2[4];
        a1[5] = a2[5];
        a1[6] = v24;
        a1[3] = v26;
        a1[4] = v25;
        *a2 = v50;
        a2[1] = v57;
        a2[5] = v85;
        a2[6] = v92;
        a2[2] = v64;
        a2[3] = v71;
        a2[4] = v78;
      }
    }
  }
  if (sub_1002A06DC(a6, (uint64_t)a5, (uint64_t)a4))
  {
    v79 = a4[4];
    v86 = a4[5];
    v93 = a4[6];
    v51 = *a4;
    v58 = a4[1];
    v65 = a4[2];
    v72 = a4[3];
    v29 = a5[1];
    v28 = a5[2];
    *a4 = *a5;
    a4[1] = v29;
    a4[2] = v28;
    v30 = a5[6];
    v32 = a5[3];
    v31 = a5[4];
    a4[5] = a5[5];
    a4[6] = v30;
    a4[3] = v32;
    a4[4] = v31;
    *a5 = v51;
    a5[1] = v58;
    a5[5] = v86;
    a5[6] = v93;
    a5[2] = v65;
    a5[3] = v72;
    a5[4] = v79;
    if (sub_1002A06DC(a6, (uint64_t)a4, (uint64_t)a3))
    {
      v80 = a3[4];
      v87 = a3[5];
      v94 = a3[6];
      v52 = *a3;
      v59 = a3[1];
      v66 = a3[2];
      v73 = a3[3];
      v34 = a4[1];
      v33 = a4[2];
      *a3 = *a4;
      a3[1] = v34;
      a3[2] = v33;
      v35 = a4[6];
      v37 = a4[3];
      v36 = a4[4];
      a3[5] = a4[5];
      a3[6] = v35;
      a3[3] = v37;
      a3[4] = v36;
      *a4 = v52;
      a4[1] = v59;
      a4[5] = v87;
      a4[6] = v94;
      a4[2] = v66;
      a4[3] = v73;
      a4[4] = v80;
      if (sub_1002A06DC(a6, (uint64_t)a3, (uint64_t)a2))
      {
        v81 = a2[4];
        v88 = a2[5];
        v95 = a2[6];
        v53 = *a2;
        v60 = a2[1];
        v67 = a2[2];
        v74 = a2[3];
        v39 = a3[1];
        v38 = a3[2];
        *a2 = *a3;
        a2[1] = v39;
        a2[2] = v38;
        v40 = a3[6];
        v42 = a3[3];
        v41 = a3[4];
        a2[5] = a3[5];
        a2[6] = v40;
        a2[3] = v42;
        a2[4] = v41;
        *a3 = v53;
        a3[1] = v60;
        a3[5] = v88;
        a3[6] = v95;
        a3[2] = v67;
        a3[3] = v74;
        a3[4] = v81;
        if (sub_1002A06DC(a6, (uint64_t)a2, (uint64_t)a1))
        {
          v82 = a1[4];
          v89 = a1[5];
          v96 = a1[6];
          v54 = *a1;
          v61 = a1[1];
          v68 = (__n128)a1[2];
          v75 = a1[3];
          v44 = a2[1];
          v43 = a2[2];
          *a1 = *a2;
          a1[1] = v44;
          a1[2] = v43;
          v45 = a2[6];
          v47 = a2[3];
          v46 = a2[4];
          a1[5] = a2[5];
          a1[6] = v45;
          a1[3] = v47;
          a1[4] = v46;
          *a2 = v54;
          a2[1] = v61;
          a2[5] = v89;
          a2[6] = v96;
          result = v68;
          a2[2] = (__int128)v68;
          a2[3] = v75;
          a2[4] = v82;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1002A1A48(uint64_t a1, __n128 *a2, __n128 *a3, double **a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v29;
  _OWORD *v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  BOOL v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 *v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 *v64;
  __n128 *v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;

  if ((__n128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 112;
    if ((uint64_t)a2 - a1 >= 113)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 112 * v10);
      do
      {
        sub_1002A1DEC(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_1002A06DC(a4, (uint64_t)v14, a1))
        {
          v15 = v14[5];
          v77 = v14[4];
          v78 = v15;
          v79 = v14[6];
          v16 = v14[1];
          v73 = *v14;
          v74 = v16;
          v17 = v14[3];
          v75 = v14[2];
          v76 = v17;
          v19 = *(__n128 *)(a1 + 16);
          v18 = *(__n128 *)(a1 + 32);
          *v14 = *(__n128 *)a1;
          v14[1] = v19;
          v14[2] = v18;
          v20 = *(__n128 *)(a1 + 96);
          v22 = *(__n128 *)(a1 + 48);
          v21 = *(__n128 *)(a1 + 64);
          v14[5] = *(__n128 *)(a1 + 80);
          v14[6] = v20;
          v14[3] = v22;
          v14[4] = v21;
          v23 = v74;
          *(__n128 *)a1 = v73;
          *(__n128 *)(a1 + 16) = v23;
          v24 = v79;
          v25 = v77;
          *(__n128 *)(a1 + 80) = v78;
          *(__n128 *)(a1 + 96) = v24;
          v26 = v76;
          *(__n128 *)(a1 + 32) = v75;
          *(__n128 *)(a1 + 48) = v26;
          *(__n128 *)(a1 + 64) = v25;
          sub_1002A1DEC(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 113)
    {
      return v13;
    }
    else
    {
      v64 = v13;
      v65 = a2;
      v27 = (((unint64_t)v8 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        v29 = 0;
        v70 = *(__n128 *)(a1 + 64);
        v71 = *(__n128 *)(a1 + 80);
        v72 = *(__n128 *)(a1 + 96);
        v66 = *(__n128 *)a1;
        v67 = *(__n128 *)(a1 + 16);
        v30 = (_OWORD *)a1;
        v68 = *(__n128 *)(a1 + 32);
        v69 = *(__n128 *)(a1 + 48);
        do
        {
          v36 = (__n128 *)&v30[7 * v29 + 7];
          v37 = (2 * v29) | 1;
          v38 = 2 * v29 + 2;
          if (v38 < v27 && sub_1002A06DC(a4, (uint64_t)&v30[7 * v29 + 7], (uint64_t)&v30[7 * v29 + 14]))
          {
            v36 += 7;
            v37 = v38;
          }
          v31 = *v36;
          v32 = v36[2];
          v30[1] = v36[1];
          v30[2] = v32;
          *v30 = v31;
          v33 = v36[3];
          v34 = v36[4];
          v35 = v36[6];
          v30[5] = v36[5];
          v30[6] = v35;
          v30[3] = v33;
          v30[4] = v34;
          v30 = v36;
          v29 = v37;
        }
        while (v37 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        v39 = v65 - 7;
        v40 = v36 == &v65[-7];
        v65 -= 7;
        if (v40)
        {
          v36[1] = v67;
          v36[2] = v68;
          *v36 = v66;
          v36[5] = v71;
          v36[6] = v72;
          v36[3] = v69;
          v36[4] = v70;
        }
        else
        {
          v41 = *v39;
          v42 = v39[2];
          v36[1] = v39[1];
          v36[2] = v42;
          *v36 = v41;
          v43 = v39[3];
          v44 = v39[4];
          v45 = v39[6];
          v36[5] = v39[5];
          v36[6] = v45;
          v36[3] = v43;
          v36[4] = v44;
          v39[4] = v70;
          v39[5] = v71;
          v39[6] = v72;
          *v39 = v66;
          v39[1] = v67;
          v39[2] = v68;
          v39[3] = v69;
          v46 = (uint64_t)&v36[7] - a1;
          if (v46 >= 113)
          {
            v47 = (unint64_t)(((((unint64_t)v46 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                   - 2) >> 1;
            v48 = (__n128 *)(a1 + 112 * v47);
            if (sub_1002A06DC(a4, (uint64_t)v48, (uint64_t)v36))
            {
              v49 = *v36;
              v50 = v36[2];
              v74 = v36[1];
              v75 = v50;
              v73 = v49;
              v51 = v36[3];
              v52 = v36[4];
              v53 = v36[6];
              v78 = v36[5];
              v79 = v53;
              v76 = v51;
              v77 = v52;
              do
              {
                v54 = v48;
                v55 = *v48;
                v56 = v48[2];
                v36[1] = v48[1];
                v36[2] = v56;
                *v36 = v55;
                v57 = v48[3];
                v58 = v48[4];
                v59 = v48[6];
                v36[5] = v48[5];
                v36[6] = v59;
                v36[3] = v57;
                v36[4] = v58;
                if (!v47)
                  break;
                v47 = (v47 - 1) >> 1;
                v48 = (__n128 *)(a1 + 112 * v47);
                v36 = v54;
              }
              while ((sub_1002A06DC(a4, (uint64_t)v48, (uint64_t)&v73) & 1) != 0);
              v60 = v78;
              v54[4] = v77;
              v54[5] = v60;
              v54[6] = v79;
              v61 = v74;
              *v54 = v73;
              v54[1] = v61;
              v62 = v76;
              v54[2] = v75;
              v54[3] = v62;
            }
          }
        }
      }
      while (v27-- > 2);
      return v64;
    }
  }
  return a3;
}

__n128 sub_1002A1DEC(uint64_t a1, double **a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __n128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v38 = v4;
    v39 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 4))
    {
      v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4)) | 1;
      v13 = (__n128 *)(a1 + 112 * v12);
      v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && sub_1002A06DC(a2, a1 + 112 * v12, (uint64_t)&v13[7]))
      {
        v13 += 7;
        v12 = v14;
      }
      if ((sub_1002A06DC(a2, (uint64_t)v13, (uint64_t)v7) & 1) == 0)
      {
        v16 = v7[5];
        v35 = v7[4];
        v36 = v16;
        v37 = v7[6];
        v17 = v7[1];
        v31 = *v7;
        v32 = v17;
        v18 = v7[3];
        v33 = v7[2];
        v34 = v18;
        do
        {
          v19 = v13;
          v20 = *v13;
          v21 = v13[2];
          v7[1] = v13[1];
          v7[2] = v21;
          *v7 = v20;
          v22 = v13[3];
          v23 = v13[4];
          v24 = v13[6];
          v7[5] = v13[5];
          v7[6] = v24;
          v7[3] = v22;
          v7[4] = v23;
          if (v9 < v12)
            break;
          v25 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 112 * v25);
          v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            if (sub_1002A06DC(a2, a1 + 112 * v25, (uint64_t)&v13[7]))
            {
              v13 += 7;
              v25 = v26;
            }
          }
          v7 = v19;
          v12 = v25;
        }
        while (!sub_1002A06DC(a2, (uint64_t)v13, (uint64_t)&v31));
        v27 = v31;
        v28 = v33;
        v19[1] = v32;
        v19[2] = v28;
        *v19 = v27;
        result = v34;
        v29 = v35;
        v30 = v37;
        v19[5] = v36;
        v19[6] = v30;
        v19[3] = result;
        v19[4] = v29;
      }
    }
  }
  return result;
}

_QWORD *sub_1002A1F90(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  int v27;
  _QWORD *v28;

  v3 = *result;
  v4 = result[1];
  v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *result) >> 4);
  if (a3 + 1 < v5)
    v6 = a3 + 1;
  else
    v6 = 0;
  while (*(_QWORD *)(v3 + 112 * v6 + 72) != a2)
  {
    if (v6 + 1 < v5)
      ++v6;
    else
      v6 = 0;
  }
  if (v5 <= 1)
    v7 = 1;
  else
    v7 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *result) >> 4);
  if (v4 != v3)
  {
    v8 = *(_QWORD **)(v3 + 112 * a3 + 16);
    v9 = v8;
    v10 = 1;
    while (1)
    {
      result = *(_QWORD **)(v3 + 112 * v6 + 16);
      if (result != v9 && (v10 & 1) == 0)
      {
        v11 = v7;
        v12 = (_QWORD *)(v3 + 48);
        v13 = v7;
        v14 = (_QWORD *)(v3 + 48);
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            v15 = *(v14 - 4);
            if (v15 >= (uint64_t)v8 && v15 < (uint64_t)v9)
              ++*v14;
            v14 += 14;
            --v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v17 = *(v12 - 4);
            if (v17 >= (uint64_t)v8 || v17 < (uint64_t)v9)
              ++*v12;
            v12 += 14;
            --v11;
          }
          while (v11);
        }
        v19 = v7;
        v20 = (_QWORD *)(v3 + 56);
        v21 = v7;
        v22 = (_QWORD *)(v3 + 56);
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            v23 = *(v22 - 5);
            if (v23 > (uint64_t)v8 && v23 <= (uint64_t)v9)
              ++*v22;
            v22 += 14;
            --v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v25 = *(v20 - 5);
            if (v25 > (uint64_t)v8 || v25 <= (uint64_t)v9)
              ++*v20;
            v20 += 14;
            --v19;
          }
          while (v19);
        }
      }
      if (v6 == a3)
        break;
      v27 = *(_DWORD *)(v3 + 112 * v6 + 44);
      if (v27)
        v28 = v8;
      else
        v28 = result;
      if (!v27)
        v10 = 1;
      if (v27 == 1)
        v10 = 0;
      else
        v8 = v28;
      if (v6 + 1 < v5)
        ++v6;
      else
        v6 = 0;
      v9 = result;
      if (*(_QWORD *)(v3 + 112 * v6 + 72) != a2)
      {
        do
        {
          if (v6 + 1 < v5)
            ++v6;
          else
            v6 = 0;
        }
        while (*(_QWORD *)(v3 + 112 * v6 + 72) != a2);
        v9 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1002A218C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v3 / 112;
  v8 = v7 + 1;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  v10 = v1 + 44;
  do
  {
    v12 = *(_QWORD *)(v10 - 28);
    if (v12 > v6)
      v6 = *(_QWORD *)(v10 - 28);
    if (*(_DWORD *)v10 == 1 && *(_QWORD *)(v10 + 12) && *(_QWORD *)(v10 + 4) == 0)
      v8 = v12 + 1;
    v10 += 112;
    if (v4)
      v11 = 0;
    else
      v11 = v12 == v8;
    if (v11)
      v4 = v5;
    ++v5;
  }
  while (v9 != v5);
  v14 = 0;
  result = 0;
  v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7)
      v18 = 0;
    else
      v18 = v4 + 1;
    v17 = *(_QWORD *)(v1 + 112 * v4 + 16);
    if (v17 == v14)
    {
      v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 112 * v4 + 44) == 1)
      {
        v19 = v1 + 112 * v4;
        v21 = *(_QWORD *)(v19 + 48);
        v20 = *(_QWORD *)(v19 + 56);
        if (v17 < v6)
          v22 = v17 + 1;
        else
          v22 = 0;
        if (v21)
          v23 = 1;
        else
          v23 = v20 == 0;
        if (!v23)
          v16 = v22;
      }
    }
    *(_QWORD *)(v1 + 112 * v4 + 24) = result;
    v4 = v18;
    v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1002A22B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = *a1;
  v2 = a1[1];
  v3 = v2 - *a1;
  if (v2 == *a1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = v3 / 112;
  v8 = v7 + 1;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  v10 = v1 + 44;
  do
  {
    v12 = *(_QWORD *)(v10 - 28);
    if (v12 > v6)
      v6 = *(_QWORD *)(v10 - 28);
    if (*(_DWORD *)v10 == 1 && *(_QWORD *)(v10 + 12) > 1uLL && *(_QWORD *)(v10 + 4) < 2uLL)
      v8 = v12 + 1;
    v10 += 112;
    if (v4)
      v11 = 0;
    else
      v11 = v12 == v8;
    if (v11)
      v4 = v5;
    ++v5;
  }
  while (v9 != v5);
  v14 = 0;
  result = 0;
  v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7)
      v18 = 0;
    else
      v18 = v4 + 1;
    v17 = *(_QWORD *)(v1 + 112 * v4 + 16);
    if (v17 == v14)
    {
      v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 112 * v4 + 44) == 1)
      {
        v19 = v1 + 112 * v4;
        v21 = *(_QWORD *)(v19 + 48);
        v20 = *(_QWORD *)(v19 + 56);
        if (v17 < v6)
          v22 = v17 + 1;
        else
          v22 = 0;
        if (v21 <= 1 && v20 >= 2)
          v16 = v22;
      }
    }
    *(_QWORD *)(v1 + 112 * v4 + 24) = result;
    v4 = v18;
    v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

void sub_1002A23E4(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1002A23E4(a1, *a2);
    sub_1002A23E4(a1, a2[1]);
    v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

_QWORD *sub_1002A2434(uint64_t *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  int64_t i;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v1 = a1;
  v2 = a1 + 4;
  v3 = (uint64_t **)(a1 + 5);
  sub_1002A3D78((uint64_t)(a1 + 4), (_QWORD *)a1[5]);
  v1[4] = (uint64_t)v3;
  *v3 = 0;
  v61 = v1;
  v4 = (_QWORD *)v1[8];
  v1 += 8;
  *(v1 - 2) = 0;
  sub_1002A3DC4((uint64_t)(v1 - 1), v4);
  *(v1 - 1) = (uint64_t)v1;
  *v1 = 0;
  v1[1] = 0;
  v5 = (_QWORD *)*(v1 - 6);
  if (v5[5])
  {
    for (i = 0; (unint64_t)i < v5[5]; ++i)
    {
      v7 = 0;
      v62 = *(_QWORD *)(v5[1] + (((unint64_t)(v5[4] + i) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)v5 + 8) + (_DWORD)i) & 0xF)
          + 40;
      do
      {
        v8 = (_QWORD *)(v62 + 168 * v7);
        v10 = v8[1];
        v9 = v8[2];
        v11 = v8[3];
        v12 = *v3;
        v13 = v3;
        v14 = v3;
        if (!*v3)
          goto LABEL_25;
        do
        {
          while (1)
          {
            v14 = v12;
            v15 = v12[4];
            if (v10 != v15)
              break;
            v16 = v14[5];
            if (v9 != v16)
            {
              if (v9 < v16)
                goto LABEL_12;
              if (v16 >= v9)
                goto LABEL_50;
              goto LABEL_23;
            }
            v17 = v14[6];
            if (v11 >= v17)
            {
              if (v17 >= v11)
                goto LABEL_50;
              goto LABEL_23;
            }
LABEL_12:
            v12 = (uint64_t *)*v14;
            v13 = (uint64_t **)v14;
            if (!*v14)
              goto LABEL_25;
          }
          if (v10 < v15)
            goto LABEL_12;
          if (v15 >= v10)
            goto LABEL_50;
LABEL_23:
          v12 = (uint64_t *)v14[1];
        }
        while (v12);
        v13 = (uint64_t **)(v14 + 1);
LABEL_25:
        v18 = v3;
        v19 = (_QWORD **)v2;
        v20 = v14;
        v14 = operator new(0x58uLL);
        v14[4] = v10;
        v14[5] = v9;
        v14[6] = v11;
        v14[7] = -1;
        v14[10] = 0;
        v14[9] = 0;
        v14[8] = v14 + 9;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = v20;
        v2 = v19;
        *v13 = v14;
        v21 = (_QWORD *)**v19;
        v22 = v14;
        if (v21)
        {
          *v19 = v21;
          v22 = *v13;
        }
        v3 = v18;
        v23 = *v18;
        v24 = v22 == *v18;
        *((_BYTE *)v22 + 24) = v24;
        if (!v24)
        {
          do
          {
            v25 = v22[2];
            if (*(_BYTE *)(v25 + 24))
              break;
            v26 = *(uint64_t **)(v25 + 16);
            v27 = *v26;
            if (*v26 == v25)
            {
              v30 = v26[1];
              if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
              {
                if (*(uint64_t **)v25 == v22)
                {
                  *(_BYTE *)(v25 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
                    goto LABEL_42;
                }
                else
                {
                  v32 = *(uint64_t **)(v25 + 8);
                  v33 = *v32;
                  *(_QWORD *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(_QWORD *)(v33 + 16) = v25;
                    v26 = *(uint64_t **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
                  *v32 = v25;
                  *(_QWORD *)(v25 + 16) = v32;
                  v26 = (uint64_t *)v32[2];
                  v25 = *v26;
                  *((_BYTE *)v32 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v34 = *(_QWORD *)(v25 + 8);
                  *v26 = v34;
                  if (v34)
LABEL_42:
                    *(_QWORD *)(v34 + 16) = v26;
                }
                *(_QWORD *)(v25 + 16) = v26[2];
                *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                *(_QWORD *)(v25 + 8) = v26;
LABEL_48:
                v26[2] = v25;
                break;
              }
            }
            else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
            {
              if (*(uint64_t **)v25 == v22)
              {
                v55 = v22[1];
                *(_QWORD *)v25 = v55;
                if (v55)
                {
                  *(_QWORD *)(v55 + 16) = v25;
                  v26 = *(uint64_t **)(v25 + 16);
                }
                v22[2] = (uint64_t)v26;
                *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v22;
                v22[1] = v25;
                *(_QWORD *)(v25 + 16) = v22;
                v26 = (uint64_t *)v22[2];
                *((_BYTE *)v22 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(uint64_t **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
LABEL_46:
                  v35[2] = (uint64_t)v26;
              }
              else
              {
                *(_BYTE *)(v25 + 24) = 1;
                *((_BYTE *)v26 + 24) = 0;
                v25 = v26[1];
                v35 = *(uint64_t **)v25;
                v26[1] = *(_QWORD *)v25;
                if (v35)
                  goto LABEL_46;
              }
              *(_QWORD *)(v25 + 16) = v26[2];
              *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
              *(_QWORD *)v25 = v26;
              goto LABEL_48;
            }
            *(_BYTE *)(v25 + 24) = 1;
            v22 = v26;
            *((_BYTE *)v26 + 24) = v26 == v23;
            *v28 = 1;
          }
          while (v26 != v23);
        }
        ++v61[6];
LABEL_50:
        v37 = (void **)(v14 + 9);
        v36 = (_QWORD *)v14[9];
        v38 = v14 + 9;
        v39 = v14 + 9;
        if (v36)
        {
          while (1)
          {
            while (1)
            {
              v39 = v36;
              v40 = v36[4];
              if (i >= v40)
                break;
              v36 = (_QWORD *)*v39;
              v38 = v39;
              if (!*v39)
                goto LABEL_57;
            }
            if (v40 >= i)
              break;
            v36 = (_QWORD *)v39[1];
            if (!v36)
            {
              v38 = v39 + 1;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          v41 = operator new(0x28uLL);
          v41[4] = i;
          *v41 = 0;
          v41[1] = 0;
          v41[2] = v39;
          *v38 = v41;
          v42 = *(_QWORD *)v14[8];
          if (v42)
          {
            v14[8] = v42;
            v41 = (_QWORD *)*v38;
          }
          v43 = *v37;
          v24 = v41 == *v37;
          *((_BYTE *)v41 + 24) = v24;
          if (!v24)
          {
            do
            {
              v44 = v41[2];
              if (*(_BYTE *)(v44 + 24))
                break;
              v45 = *(_BYTE **)(v44 + 16);
              v46 = *(_QWORD *)v45;
              if (*(_QWORD *)v45 == v44)
              {
                v49 = *((_QWORD *)v45 + 1);
                if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), v47 = (_BYTE *)(v49 + 24), v50))
                {
                  if (*(_QWORD **)v44 == v41)
                  {
                    *(_BYTE *)(v44 + 24) = 1;
                    v45[24] = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *(_QWORD *)v45 = v53;
                    if (v53)
                      goto LABEL_74;
                  }
                  else
                  {
                    v51 = *(uint64_t **)(v44 + 8);
                    v52 = *v51;
                    *(_QWORD *)(v44 + 8) = *v51;
                    if (v52)
                    {
                      *(_QWORD *)(v52 + 16) = v44;
                      v45 = *(_BYTE **)(v44 + 16);
                    }
                    v51[2] = (uint64_t)v45;
                    *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v51;
                    *v51 = v44;
                    *(_QWORD *)(v44 + 16) = v51;
                    v45 = (_BYTE *)v51[2];
                    v44 = *(_QWORD *)v45;
                    *((_BYTE *)v51 + 24) = 1;
                    v45[24] = 0;
                    v53 = *(_QWORD *)(v44 + 8);
                    *(_QWORD *)v45 = v53;
                    if (v53)
LABEL_74:
                      *(_QWORD *)(v53 + 16) = v45;
                  }
                  *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                  *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                  *(_QWORD *)(v44 + 8) = v45;
LABEL_7:
                  *((_QWORD *)v45 + 2) = v44;
                  break;
                }
              }
              else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), v47 = (_BYTE *)(v46 + 24), v48))
              {
                if (*(_QWORD **)v44 == v41)
                {
                  v56 = v41[1];
                  *(_QWORD *)v44 = v56;
                  if (v56)
                  {
                    *(_QWORD *)(v56 + 16) = v44;
                    v45 = *(_BYTE **)(v44 + 16);
                  }
                  v41[2] = v45;
                  *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v41;
                  v41[1] = v44;
                  *(_QWORD *)(v44 + 16) = v41;
                  v45 = (_BYTE *)v41[2];
                  *((_BYTE *)v41 + 24) = 1;
                  v45[24] = 0;
                  v44 = *((_QWORD *)v45 + 1);
                  v54 = *(_QWORD **)v44;
                  *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                  if (!v54)
                    goto LABEL_6;
                }
                else
                {
                  *(_BYTE *)(v44 + 24) = 1;
                  v45[24] = 0;
                  v44 = *((_QWORD *)v45 + 1);
                  v54 = *(_QWORD **)v44;
                  *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                  if (!v54)
                    goto LABEL_6;
                }
                v54[2] = v45;
LABEL_6:
                *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                *(_QWORD *)v44 = v45;
                goto LABEL_7;
              }
              *(_BYTE *)(v44 + 24) = 1;
              v41 = v45;
              v45[24] = v45 == (_BYTE *)v43;
              *v47 = 1;
            }
            while (v45 != (_BYTE *)v43);
          }
          ++v14[10];
        }
        ++v7;
      }
      while (v7 != 2);
      v5 = (_QWORD *)v61[2];
    }
  }
  v63 = 1;
  v57 = (uint64_t *)*v2;
  if ((uint64_t **)*v2 != v3)
  {
    do
    {
      sub_1002A2BF4((uint64_t)v61, &v63, v57 + 4, v57 + 7, -1);
      v59 = (uint64_t *)v57[1];
      if (v59)
      {
        do
        {
          v60 = (uint64_t **)v59;
          v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (uint64_t **)v57[2];
          v24 = *v60 == v57;
          v57 = (uint64_t *)v60;
        }
        while (!v24);
      }
      v57 = (uint64_t *)v60;
    }
    while (v60 != v3);
  }
  sub_1002A2EDC(v61);
  sub_1002A3034(v61);
  sub_1002A396C((uint64_t)v61);
  return sub_1002A3C30(v61);
}

void sub_1002A2AA4(uint64_t a1, _QWORD *a2, unint64_t *a3, _BYTE *a4)
{
  _QWORD *v4;
  unint64_t i;
  _BOOL4 v10;
  uint64_t v11;
  int v12;

  v4 = *(_QWORD **)(a1 + 72);
  if (v4[5])
  {
    for (i = 0; i < v4[5]; ++i)
    {
      v11 = *(_QWORD *)(v4[1] + (((i + v4[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * (((_DWORD)i + *((_DWORD *)v4 + 8)) & 0xF);
      if (*(_BYTE *)(v11 + 32))
        goto LABEL_5;
      v12 = *(_DWORD *)(v11 + 40);
      if (v12 == 4)
      {
        if (*(_DWORD *)(v11 + 208) == 4)
        {
          v10 = *(double *)(v11 + 112) <= *(double *)(v11 + 280);
          goto LABEL_4;
        }
      }
      else if (v12 == 3 && *(_DWORD *)(v11 + 208) == 3)
      {
        goto LABEL_5;
      }
      sub_1002A4224(a1, v11, i, 0, a2, a3, a4);
      v10 = 1;
LABEL_4:
      sub_1002A4224(a1, v11, i, v10, a2, a3, a4);
LABEL_5:
      v4 = *(_QWORD **)(a1 + 72);
    }
  }
}

uint64_t sub_1002A2BBC(uint64_t a1)
{
  sub_1002A3DC4(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_1002A3D78(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

uint64_t sub_1002A2BF4(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (*a4 <= 0)
  {
    v5 = a5;
    v8 = result;
    if (a5 == -1)
      v5 = (*a2)++;
    *a4 = v5;
    v9 = (uint64_t *)a4[1];
    v10 = a4 + 2;
    if (v9 != a4 + 2)
    {
      v11 = (_QWORD *)(result + 40);
      do
      {
        v12 = *(_QWORD *)(v8 + 16);
        v13 = *(_QWORD *)(v12 + 32) + v9[4];
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + ((v13 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v13 & 0xF);
        if (!*(_BYTE *)(v14 + 32))
        {
          v15 = *(_DWORD *)(v14 + 40);
          v16 = *(_DWORD *)(v14 + 208);
          v17 = v15 == 3 && v16 == 3;
          if (!v17)
          {
            if (*(uint64_t *)(v14 + 24) <= 0)
            {
              if (v15 == 1)
              {
                if (v16 != 1)
                  goto LABEL_24;
              }
              else if (v15 != 2 || v16 != 2)
              {
LABEL_24:
                v20 = *(_QWORD *)(v14 + 48);
                v19 = *(_QWORD *)(v14 + 56);
                v21 = *(_QWORD *)(v14 + 64);
                v54 = v20;
                v55 = v19;
                v56 = v21;
                v22 = a3[1];
                v23 = a3[2];
                v24 = *a3;
                if (v20 == *a3 && v21 == v23 && v19 == v22)
                {
                  v22 = v19;
                  v23 = v21;
                  v24 = v20;
                }
                else
                {
                  v27 = (_QWORD *)*v11;
                  if (*v11)
                  {
                    v28 = (_QWORD *)(v8 + 40);
                    do
                    {
                      v32 = v27[4];
                      v33 = v32 < v20;
                      if (v32 == v20)
                      {
                        v34 = v27[5];
                        v33 = v34 < v19;
                        if (v34 == v19)
                          v33 = v27[6] < v21;
                      }
                      v29 = v33;
                      v30 = v29 == 0;
                      if (v29)
                        v31 = v27 + 1;
                      else
                        v31 = v27;
                      if (v30)
                        v28 = v27;
                      v27 = (_QWORD *)*v31;
                    }
                    while (*v31);
                    if (v28 != v11)
                    {
                      v46 = v28[4];
                      v47 = v20 < v46;
                      if (v20 == v46 && (v48 = v28[5], v47 = v19 < v48, v19 == v48))
                      {
                        if (v21 >= v28[6])
                        {
LABEL_83:
                          result = sub_1002A2BF4(v8, a2, &v54, v28 + 7, v5);
                          v22 = a3[1];
                          v23 = a3[2];
                          v24 = *a3;
                        }
                      }
                      else if (!v47)
                      {
                        goto LABEL_83;
                      }
                    }
                  }
                }
                v36 = *(_QWORD *)(v14 + 216);
                v35 = *(_QWORD *)(v14 + 224);
                v37 = *(_QWORD *)(v14 + 232);
                v54 = v36;
                v55 = v35;
                v56 = v37;
                if (v36 != v24 || v37 != v23 || v35 != v22)
                {
                  v38 = (_QWORD *)*v11;
                  if (*v11)
                  {
                    v39 = (_QWORD *)(v8 + 40);
                    do
                    {
                      v43 = v38[4];
                      v44 = v43 < v36;
                      if (v43 == v36)
                      {
                        v45 = v38[5];
                        v44 = v45 < v35;
                        if (v45 == v35)
                          v44 = v38[6] < v37;
                      }
                      v40 = v44;
                      v41 = v40 == 0;
                      if (v40)
                        v42 = v38 + 1;
                      else
                        v42 = v38;
                      if (v41)
                        v39 = v38;
                      v38 = (_QWORD *)*v42;
                    }
                    while (*v42);
                    if (v39 != v11)
                    {
                      v49 = v39[4];
                      v50 = v36 < v49;
                      if (v36 == v49)
                      {
                        v51 = v39[5];
                        v50 = v35 < v51;
                        if (v35 == v51)
                          v50 = v37 < v39[6];
                      }
                      if (!v50)
                        result = sub_1002A2BF4(v8, a2, &v54, v39 + 7, v5);
                    }
                  }
                }
              }
            }
            else if (*(_QWORD *)(v14 + 176) == *(_QWORD *)(v14 + 344))
            {
              goto LABEL_24;
            }
          }
        }
        v52 = (uint64_t *)v9[1];
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (uint64_t *)v9[2];
            v17 = *v53 == (_QWORD)v9;
            v9 = v53;
          }
          while (!v17);
        }
        v9 = v53;
      }
      while (v53 != v10);
    }
  }
  return result;
}

_QWORD *sub_1002A2EDC(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (_QWORD *)result[4];
  if (v1 != result + 5)
  {
    do
    {
      v2 = (_QWORD *)v1[8];
      if (v2 != v1 + 9)
      {
        v3 = result[2];
        v4 = *(_QWORD *)(v3 + 32);
        v5 = *(_QWORD *)(v3 + 8);
        do
        {
          v6 = *(_QWORD *)(v5 + (((unint64_t)(v4 + v2[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
             + 376 * (((_DWORD)v4 + *((_DWORD *)v2 + 8)) & 0xF);
          if (!*(_BYTE *)(v6 + 32))
          {
            v7 = *(_DWORD *)(v6 + 40) == 3 && *(_DWORD *)(v6 + 208) == 3;
            if (!v7)
            {
              v8 = v1[4];
              if (*(_QWORD *)(v6 + 48) == v8 && *(_QWORD *)(v6 + 64) == v1[6] && *(_QWORD *)(v6 + 56) == v1[5])
                *(_QWORD *)(v6 + 184) = v1[7];
              if (*(_QWORD *)(v6 + 216) == v8 && *(_QWORD *)(v6 + 232) == v1[6] && *(_QWORD *)(v6 + 224) == v1[5])
                *(_QWORD *)(v6 + 352) = v1[7];
            }
          }
          v9 = (_QWORD *)v2[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v2[2];
              v7 = *v10 == (_QWORD)v2;
              v2 = v10;
            }
            while (!v7);
          }
          v2 = v10;
        }
        while (v10 != v1 + 9);
      }
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          v7 = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!v7);
      }
      v1 = v12;
    }
    while (v12 != result + 5);
  }
  return result;
}

uint64_t *sub_1002A3034(uint64_t *result)
{
  _QWORD *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v34;
  uint64_t **v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t **v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v60;
  uint64_t **v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t **v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t **v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  uint64_t **v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;

  v1 = (_QWORD *)result[2];
  if (v1[5])
  {
    v2 = result;
    v3 = 0;
    v4 = (uint64_t **)(result + 8);
    do
    {
      v6 = (_QWORD *)(*(_QWORD *)(v1[1] + (((v1[4] + v3) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 376 * ((*((_DWORD *)v1 + 8) + (_DWORD)v3) & 0xF));
      v7 = v6[3];
      if (v7 > 0)
        v8 = -v7;
      else
        v8 = v3;
      v9 = v6[23];
      if (v9 != -1)
      {
        v10 = *v4;
        v11 = v4;
        v12 = (char *)v4;
        if (*v4)
        {
          v13 = *v4;
          while (1)
          {
            while (1)
            {
              v12 = (char *)v13;
              v14 = v13[4];
              if (v9 >= v14)
                break;
              v13 = *(uint64_t **)v12;
              v11 = (uint64_t **)v12;
              if (!*(_QWORD *)v12)
                goto LABEL_17;
            }
            if (v14 >= v9)
              break;
            v13 = (uint64_t *)*((_QWORD *)v12 + 1);
            if (!v13)
            {
              v11 = (uint64_t **)(v12 + 8);
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          v15 = v12;
          v12 = (char *)operator new(0x68uLL);
          *((_QWORD *)v12 + 4) = v9;
          *(_OWORD *)(v12 + 40) = xmmword_1003970F0;
          *((_QWORD *)v12 + 8) = 0;
          *((_QWORD *)v12 + 7) = v12 + 64;
          *((_QWORD *)v12 + 12) = 0;
          *((_QWORD *)v12 + 11) = 0;
          *((_QWORD *)v12 + 9) = 0;
          *((_QWORD *)v12 + 10) = v12 + 88;
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = v15;
          *v11 = (uint64_t *)v12;
          v16 = *(_QWORD *)v2[7];
          v17 = (uint64_t *)v12;
          if (v16)
          {
            v2[7] = v16;
            v17 = *v11;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v17);
          v10 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((_QWORD *)v12 + 5) = v9;
        v18 = v6[23];
        v19 = v4;
        v20 = (char *)v4;
        if (v10)
        {
          while (1)
          {
            while (1)
            {
              v20 = (char *)v10;
              v21 = v10[4];
              if (v18 >= v21)
                break;
              v10 = *(uint64_t **)v20;
              v19 = (uint64_t **)v20;
              if (!*(_QWORD *)v20)
                goto LABEL_27;
            }
            if (v21 >= v18)
              break;
            v10 = (uint64_t *)*((_QWORD *)v20 + 1);
            if (!v10)
            {
              v19 = (uint64_t **)(v20 + 8);
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          v22 = v20;
          v20 = (char *)operator new(0x68uLL);
          *((_QWORD *)v20 + 4) = v18;
          *(_OWORD *)(v20 + 40) = xmmword_1003970F0;
          *((_QWORD *)v20 + 8) = 0;
          *((_QWORD *)v20 + 7) = v20 + 64;
          *((_QWORD *)v20 + 12) = 0;
          *((_QWORD *)v20 + 11) = 0;
          *((_QWORD *)v20 + 9) = 0;
          *((_QWORD *)v20 + 10) = v20 + 88;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
          *((_QWORD *)v20 + 2) = v22;
          *v19 = (uint64_t *)v20;
          v23 = *(_QWORD *)v2[7];
          v24 = (uint64_t *)v20;
          if (v23)
          {
            v2[7] = v23;
            v24 = *v19;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v24);
          ++v2[9];
        }
        v26 = (uint64_t **)(v20 + 64);
        v25 = (uint64_t *)*((_QWORD *)v20 + 8);
        if (v25)
        {
          while (1)
          {
            while (1)
            {
              v27 = (uint64_t **)v25;
              v28 = v25[4];
              if (v8 >= v28)
                break;
              v25 = *v27;
              v26 = v27;
              if (!*v27)
                goto LABEL_37;
            }
            if (v28 >= v8)
              break;
            v25 = v27[1];
            if (!v25)
            {
              v26 = v27 + 1;
              goto LABEL_37;
            }
          }
        }
        else
        {
          v27 = (uint64_t **)(v20 + 64);
LABEL_37:
          v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v8;
          *v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          *v26 = v29;
          v30 = **((_QWORD **)v20 + 7);
          if (v30)
          {
            *((_QWORD *)v20 + 7) = v30;
            v31 = *v26;
          }
          else
          {
            v31 = v29;
          }
          result = sub_1000E05F4(*((uint64_t **)v20 + 8), v31);
          ++*((_QWORD *)v20 + 9);
        }
      }
      v32 = v6[44];
      if (v32 != -1 && v6[23] != v32)
      {
        v34 = *v4;
        v35 = v4;
        v36 = (char *)v4;
        if (*v4)
        {
          v37 = *v4;
          while (1)
          {
            while (1)
            {
              v36 = (char *)v37;
              v38 = v37[4];
              if (v32 >= v38)
                break;
              v37 = *(uint64_t **)v36;
              v35 = (uint64_t **)v36;
              if (!*(_QWORD *)v36)
                goto LABEL_52;
            }
            if (v38 >= v32)
              break;
            v37 = (uint64_t *)*((_QWORD *)v36 + 1);
            if (!v37)
            {
              v35 = (uint64_t **)(v36 + 8);
              goto LABEL_52;
            }
          }
        }
        else
        {
LABEL_52:
          v39 = v36;
          v36 = (char *)operator new(0x68uLL);
          *((_QWORD *)v36 + 4) = v32;
          *(_OWORD *)(v36 + 40) = xmmword_1003970F0;
          *((_QWORD *)v36 + 8) = 0;
          *((_QWORD *)v36 + 7) = v36 + 64;
          *((_QWORD *)v36 + 12) = 0;
          *((_QWORD *)v36 + 11) = 0;
          *((_QWORD *)v36 + 9) = 0;
          *((_QWORD *)v36 + 10) = v36 + 88;
          *(_QWORD *)v36 = 0;
          *((_QWORD *)v36 + 1) = 0;
          *((_QWORD *)v36 + 2) = v39;
          *v35 = (uint64_t *)v36;
          v40 = *(_QWORD *)v2[7];
          v41 = (uint64_t *)v36;
          if (v40)
          {
            v2[7] = v40;
            v41 = *v35;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v41);
          v34 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((_QWORD *)v36 + 5) = v32;
        v42 = v6[44];
        v43 = v4;
        v44 = (char *)v4;
        if (v34)
        {
          while (1)
          {
            while (1)
            {
              v44 = (char *)v34;
              v45 = v34[4];
              if (v42 >= v45)
                break;
              v34 = *(uint64_t **)v44;
              v43 = (uint64_t **)v44;
              if (!*(_QWORD *)v44)
                goto LABEL_62;
            }
            if (v45 >= v42)
              break;
            v34 = (uint64_t *)*((_QWORD *)v44 + 1);
            if (!v34)
            {
              v43 = (uint64_t **)(v44 + 8);
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          v46 = v44;
          v44 = (char *)operator new(0x68uLL);
          *((_QWORD *)v44 + 4) = v42;
          *(_OWORD *)(v44 + 40) = xmmword_1003970F0;
          *((_QWORD *)v44 + 8) = 0;
          *((_QWORD *)v44 + 7) = v44 + 64;
          *((_QWORD *)v44 + 12) = 0;
          *((_QWORD *)v44 + 11) = 0;
          *((_QWORD *)v44 + 9) = 0;
          *((_QWORD *)v44 + 10) = v44 + 88;
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = v46;
          *v43 = (uint64_t *)v44;
          v47 = *(_QWORD *)v2[7];
          v48 = (uint64_t *)v44;
          if (v47)
          {
            v2[7] = v47;
            v48 = *v43;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v48);
          ++v2[9];
        }
        v50 = (uint64_t **)(v44 + 64);
        v49 = (uint64_t *)*((_QWORD *)v44 + 8);
        if (v49)
        {
          while (1)
          {
            while (1)
            {
              v51 = (uint64_t **)v49;
              v52 = v49[4];
              if (v8 >= v52)
                break;
              v49 = *v51;
              v50 = v51;
              if (!*v51)
                goto LABEL_72;
            }
            if (v52 >= v8)
              break;
            v49 = v51[1];
            if (!v49)
            {
              v50 = v51 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
          v51 = (uint64_t **)(v44 + 64);
LABEL_72:
          v53 = (uint64_t *)operator new(0x28uLL);
          v53[4] = v8;
          *v53 = 0;
          v53[1] = 0;
          v53[2] = (uint64_t)v51;
          *v50 = v53;
          v54 = **((_QWORD **)v44 + 7);
          if (v54)
          {
            *((_QWORD *)v44 + 7) = v54;
            v55 = *v50;
          }
          else
          {
            v55 = v53;
          }
          result = sub_1000E05F4(*((uint64_t **)v44 + 8), v55);
          ++*((_QWORD *)v44 + 9);
        }
      }
      v56 = v6[23];
      v57 = v6[44];
      if (v57 != -1 && v56 != -1 && v56 != v57)
      {
        v60 = *v4;
        v61 = v4;
        v62 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v62 = (char *)v60;
              v63 = v60[4];
              if (v56 >= v63)
                break;
              v60 = *(uint64_t **)v62;
              v61 = (uint64_t **)v62;
              if (!*(_QWORD *)v62)
                goto LABEL_90;
            }
            if (v63 >= v56)
              break;
            v60 = (uint64_t *)*((_QWORD *)v62 + 1);
            if (!v60)
            {
              v61 = (uint64_t **)(v62 + 8);
              goto LABEL_90;
            }
          }
        }
        else
        {
LABEL_90:
          v64 = v62;
          v62 = (char *)operator new(0x68uLL);
          *((_QWORD *)v62 + 4) = v56;
          *(_OWORD *)(v62 + 40) = xmmword_1003970F0;
          *((_QWORD *)v62 + 8) = 0;
          *((_QWORD *)v62 + 7) = v62 + 64;
          *((_QWORD *)v62 + 12) = 0;
          *((_QWORD *)v62 + 11) = 0;
          *((_QWORD *)v62 + 9) = 0;
          *((_QWORD *)v62 + 10) = v62 + 88;
          *(_QWORD *)v62 = 0;
          *((_QWORD *)v62 + 1) = 0;
          *((_QWORD *)v62 + 2) = v64;
          *v61 = (uint64_t *)v62;
          v65 = *(_QWORD *)v2[7];
          v66 = (uint64_t *)v62;
          if (v65)
          {
            v2[7] = v65;
            v66 = *v61;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v66);
          ++v2[9];
          v57 = v6[44];
        }
        v68 = (uint64_t **)(v62 + 88);
        v67 = (char *)*((_QWORD *)v62 + 11);
        if (v67)
        {
          while (1)
          {
            while (1)
            {
              v69 = v67;
              v70 = *((_QWORD *)v67 + 4);
              if (v57 >= v70)
                break;
              v67 = *(char **)v69;
              v68 = (uint64_t **)v69;
              if (!*(_QWORD *)v69)
                goto LABEL_100;
            }
            if (v70 >= v57)
              break;
            v67 = (char *)*((_QWORD *)v69 + 1);
            if (!v67)
            {
              v68 = (uint64_t **)(v69 + 8);
              goto LABEL_100;
            }
          }
        }
        else
        {
          v69 = v62 + 88;
LABEL_100:
          v71 = v69;
          v69 = (char *)operator new(0x48uLL);
          *((_QWORD *)v69 + 4) = v57;
          *(_OWORD *)(v69 + 40) = 0u;
          *(_OWORD *)(v69 + 56) = 0u;
          *((_QWORD *)v69 + 6) = v69 + 56;
          *(_QWORD *)v69 = 0;
          *((_QWORD *)v69 + 1) = 0;
          *((_QWORD *)v69 + 2) = v71;
          *v68 = (uint64_t *)v69;
          v72 = **((_QWORD **)v62 + 10);
          v73 = (uint64_t *)v69;
          if (v72)
          {
            *((_QWORD *)v62 + 10) = v72;
            v73 = *v68;
          }
          result = sub_1000E05F4(*((uint64_t **)v62 + 11), v73);
          ++*((_QWORD *)v62 + 12);
          v57 = v6[44];
        }
        v74 = *v4;
        v75 = v4;
        v76 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              v76 = (char *)v74;
              v77 = v74[4];
              if (v57 >= v77)
                break;
              v74 = *(uint64_t **)v76;
              v75 = (uint64_t **)v76;
              if (!*(_QWORD *)v76)
                goto LABEL_110;
            }
            if (v77 >= v57)
              break;
            v74 = (uint64_t *)*((_QWORD *)v76 + 1);
            if (!v74)
            {
              v75 = (uint64_t **)(v76 + 8);
              goto LABEL_110;
            }
          }
        }
        else
        {
LABEL_110:
          v78 = v76;
          v76 = (char *)operator new(0x68uLL);
          *((_QWORD *)v76 + 4) = v57;
          *(_OWORD *)(v76 + 40) = xmmword_1003970F0;
          *((_QWORD *)v76 + 8) = 0;
          *((_QWORD *)v76 + 7) = v76 + 64;
          *((_QWORD *)v76 + 12) = 0;
          *((_QWORD *)v76 + 11) = 0;
          *((_QWORD *)v76 + 9) = 0;
          *((_QWORD *)v76 + 10) = v76 + 88;
          *(_QWORD *)v76 = 0;
          *((_QWORD *)v76 + 1) = 0;
          *((_QWORD *)v76 + 2) = v78;
          *v75 = (uint64_t *)v76;
          v79 = *(_QWORD *)v2[7];
          v80 = (uint64_t *)v76;
          if (v79)
          {
            v2[7] = v79;
            v80 = *v75;
          }
          result = sub_1000E05F4((uint64_t *)v2[8], v80);
          ++v2[9];
        }
        v82 = (uint64_t **)(v76 + 88);
        v81 = (char *)*((_QWORD *)v76 + 11);
        v83 = v6[23];
        if (v81)
        {
          while (1)
          {
            while (1)
            {
              v84 = v81;
              v85 = *((_QWORD *)v81 + 4);
              if (v83 >= v85)
                break;
              v81 = *(char **)v84;
              v82 = (uint64_t **)v84;
              if (!*(_QWORD *)v84)
                goto LABEL_120;
            }
            if (v85 >= v83)
              break;
            v81 = (char *)*((_QWORD *)v84 + 1);
            if (!v81)
            {
              v82 = (uint64_t **)(v84 + 8);
              goto LABEL_120;
            }
          }
        }
        else
        {
          v84 = v76 + 88;
LABEL_120:
          v86 = v84;
          v84 = (char *)operator new(0x48uLL);
          *((_QWORD *)v84 + 4) = v83;
          *(_OWORD *)(v84 + 40) = 0u;
          *(_OWORD *)(v84 + 56) = 0u;
          *((_QWORD *)v84 + 6) = v84 + 56;
          *(_QWORD *)v84 = 0;
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = v86;
          *v82 = (uint64_t *)v84;
          v87 = **((_QWORD **)v76 + 10);
          v88 = (uint64_t *)v84;
          if (v87)
          {
            *((_QWORD *)v76 + 10) = v87;
            v88 = *v82;
          }
          result = sub_1000E05F4(*((uint64_t **)v76 + 11), v88);
          ++*((_QWORD *)v76 + 12);
        }
        v90 = (uint64_t **)(v69 + 56);
        v89 = (uint64_t *)*((_QWORD *)v69 + 7);
        v91 = v89;
        if (v89)
        {
          do
          {
            v93 = v91[4];
            if (v8 >= v93)
            {
              if (v93 >= v8)
                goto LABEL_139;
              ++v91;
            }
            v91 = (uint64_t *)*v91;
          }
          while (v91);
          ++*((_QWORD *)v69 + 5);
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v94 = v89[4];
              if (v8 >= v94)
                break;
              v89 = *v92;
              v90 = v92;
              if (!*v92)
                goto LABEL_135;
            }
            if (v94 >= v8)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v90 = v92 + 1;
              goto LABEL_135;
            }
          }
        }
        else
        {
          ++*((_QWORD *)v69 + 5);
          v92 = (uint64_t **)(v69 + 56);
LABEL_135:
          v95 = (uint64_t *)operator new(0x28uLL);
          v95[4] = v8;
          *v95 = 0;
          v95[1] = 0;
          v95[2] = (uint64_t)v92;
          *v90 = v95;
          v96 = **((_QWORD **)v69 + 6);
          if (v96)
          {
            *((_QWORD *)v69 + 6) = v96;
            v97 = *v90;
          }
          else
          {
            v97 = v95;
          }
          result = sub_1000E05F4(*((uint64_t **)v69 + 7), v97);
          ++*((_QWORD *)v69 + 8);
        }
LABEL_139:
        v99 = (uint64_t **)(v84 + 56);
        v98 = (uint64_t *)*((_QWORD *)v84 + 7);
        v100 = v98;
        if (v98)
        {
          do
          {
            v102 = v100[4];
            if (v8 >= v102)
            {
              if (v102 >= v8)
                goto LABEL_5;
              ++v100;
            }
            v100 = (uint64_t *)*v100;
          }
          while (v100);
          ++*((_QWORD *)v84 + 5);
          while (1)
          {
            while (1)
            {
              v101 = (uint64_t **)v98;
              v103 = v98[4];
              if (v8 >= v103)
                break;
              v98 = *v101;
              v99 = v101;
              if (!*v101)
                goto LABEL_151;
            }
            if (v103 >= v8)
              break;
            v98 = v101[1];
            if (!v98)
            {
              v99 = v101 + 1;
              goto LABEL_151;
            }
          }
        }
        else
        {
          ++*((_QWORD *)v84 + 5);
          v101 = (uint64_t **)(v84 + 56);
LABEL_151:
          v104 = (uint64_t *)operator new(0x28uLL);
          v104[4] = v8;
          *v104 = 0;
          v104[1] = 0;
          v104[2] = (uint64_t)v101;
          *v99 = v104;
          v105 = **((_QWORD **)v84 + 6);
          if (v105)
          {
            *((_QWORD *)v84 + 6) = v105;
            v5 = *v99;
          }
          else
          {
            v5 = v104;
          }
          result = sub_1000E05F4(*((uint64_t **)v84 + 7), v5);
          ++*((_QWORD *)v84 + 8);
        }
      }
LABEL_5:
      ++v3;
      v1 = (_QWORD *)v2[2];
    }
    while (v3 < v1[5]);
  }
  return result;
}

uint64_t sub_1002A396C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;

  v1 = result;
  v2 = *(_QWORD **)(result + 56);
  v3 = (_QWORD *)(result + 64);
  if (v2 != (_QWORD *)(result + 64))
  {
    do
    {
      v4 = v2[12];
      if (v4)
      {
        if (v4 == 1)
        {
          if (*(_QWORD *)(v2[10] + 40) < 2uLL)
            v5 = 1;
          else
            v5 = 2;
          goto LABEL_23;
        }
        v6 = (_QWORD *)v2[10];
        if (v6 != v2 + 11)
        {
          v7 = 0;
          v8 = 1;
          while (v6[5] == 1)
          {
            v9 = *(_QWORD *)(v6[6] + 32);
            if ((v8 & 1) == 0)
            {
              v10 = v7 == v9;
              v9 = v7;
              if (!v10)
                break;
            }
            v11 = (_QWORD *)v6[1];
            if (v11)
            {
              do
              {
                v12 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v12 = (_QWORD *)v6[2];
                v10 = *v12 == (_QWORD)v6;
                v6 = v12;
              }
              while (!v10);
            }
            v8 = 0;
            v7 = v9;
            v6 = v12;
            if (v12 == v2 + 11)
              goto LABEL_22;
          }
          goto LABEL_24;
        }
      }
LABEL_22:
      v5 = 1;
LABEL_23:
      *((_DWORD *)v2 + 12) = v5;
LABEL_24:
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v10 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v10);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
  v30 = 0;
LABEL_32:
  if (v30 < *(_QWORD *)(v1 + 72))
  {
    v15 = *(_QWORD **)(v1 + 56);
    if (v15 != v3)
    {
      v16 = 0;
      ++v30;
      while (1)
      {
        if (!*((_DWORD *)v15 + 12))
        {
          v17 = (_QWORD *)v15[10];
          if (v17 != v15 + 11)
          {
            v18 = 0;
            v19 = 1;
            while (1)
            {
              v20 = (_QWORD *)*v3;
              if (!*v3)
                goto LABEL_64;
              v21 = v17[4];
              v22 = v3;
              do
              {
                v23 = v20[4];
                v24 = v23 < v21;
                if (v23 >= v21)
                  v25 = v20;
                else
                  v25 = v20 + 1;
                if (!v24)
                  v22 = v20;
                v20 = (_QWORD *)*v25;
              }
              while (*v25);
              if (v22 == v3)
                goto LABEL_64;
              if (v21 < v22[4])
                goto LABEL_64;
              if (v17[5] != 1)
              {
                result = sub_1002A3E68(v1, v15 + 5, v22 + 5);
                if (!(_DWORD)result)
                  goto LABEL_64;
              }
              if ((*((_DWORD *)v22 + 12) - 1) < 2)
                goto LABEL_55;
              if ((v19 & 1) != 0)
                break;
              if (v18 != *(_QWORD *)(v17[6] + 32))
                goto LABEL_64;
              v19 = 0;
              v26 = (_QWORD *)v17[1];
              if (!v26)
              {
                do
                {
LABEL_60:
                  v27 = (_QWORD *)v17[2];
                  v10 = *v27 == (_QWORD)v17;
                  v17 = v27;
                }
                while (!v10);
                goto LABEL_39;
              }
              do
              {
LABEL_56:
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26);
LABEL_39:
              v17 = v27;
              if (v27 == v15 + 11)
                goto LABEL_63;
            }
            v19 = 0;
            v18 = *(_QWORD *)(v17[6] + 32);
LABEL_55:
            v26 = (_QWORD *)v17[1];
            if (!v26)
              goto LABEL_60;
            goto LABEL_56;
          }
LABEL_63:
          v16 = 1;
          *((_DWORD *)v15 + 12) = 1;
        }
LABEL_64:
        v28 = (_QWORD *)v15[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v15[2];
            v10 = *v29 == (_QWORD)v15;
            v15 = v29;
          }
          while (!v10);
        }
        v15 = v29;
        if (v29 == v3)
        {
          if ((v16 & 1) != 0)
            goto LABEL_32;
          return result;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1002A3C30(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)result[2];
  v2 = v1[1];
  if (v1[2] != v2)
  {
    v3 = v1[4];
    v4 = v1[5];
    v5 = (uint64_t *)(v2 + 8 * (v3 >> 4));
    v6 = *v5;
    v7 = *v5 + 376 * (v3 & 0xF);
    v8 = *(_QWORD *)(v2 + (((v4 + v3) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (((_DWORD)v4 + (_DWORD)v3) & 0xF);
    if (v7 != v8)
    {
      v10 = (_QWORD *)result[8];
      result += 8;
      v9 = v10;
      if (v10)
      {
        do
        {
          v11 = *(_QWORD *)(v7 + 184);
          v12 = result;
          v13 = v9;
          do
          {
            v14 = v13[4];
            v15 = v14 < v11;
            if (v14 >= v11)
              v16 = v13;
            else
              v16 = v13 + 1;
            if (!v15)
              v12 = v13;
            v13 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v12 != result && v11 >= v12[4])
            *(_BYTE *)(v7 + 192) = *((_DWORD *)v12 + 12) == 1;
          v17 = *(_QWORD *)(v7 + 352);
          v18 = result;
          v19 = v9;
          do
          {
            v20 = v19[4];
            v21 = v20 < v17;
            if (v20 >= v17)
              v22 = v19;
            else
              v22 = v19 + 1;
            if (!v21)
              v18 = v19;
            v19 = (_QWORD *)*v22;
          }
          while (*v22);
          if (v18 != result && v17 >= v18[4])
            *(_BYTE *)(v7 + 360) = *((_DWORD *)v18 + 12) == 1;
          v7 += 376;
          if (v7 - *v5 == 6016)
          {
            v23 = v5[1];
            ++v5;
            v7 = v23;
          }
        }
        while (v7 != v8);
      }
      else
      {
        do
        {
          v7 += 376;
          if (v7 - v6 == 6016)
          {
            v24 = v5[1];
            ++v5;
            v6 = v24;
            v7 = v24;
          }
        }
        while (v7 != v8);
      }
    }
  }
  return result;
}

void sub_1002A3D78(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002A3D78(a1, *a2);
    sub_1002A3D78(a1, a2[1]);
    sub_10004AAA0((uint64_t)(a2 + 8), (_QWORD *)a2[9]);
    operator delete(a2);
  }
}

void sub_1002A3DC4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002A3DC4(a1, *a2);
    sub_1002A3DC4(a1, a2[1]);
    sub_1002A3E1C((uint64_t)(a2 + 10), (_QWORD *)a2[11]);
    sub_10004AAA0((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    operator delete(a2);
  }
}

void sub_1002A3E1C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002A3E1C(a1, *a2);
    sub_1002A3E1C(a1, a2[1]);
    sub_10004AAA0((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

uint64_t sub_1002A3E68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;

  if (*((_DWORD *)a3 + 2) != 2)
    return 0;
  v60 = 0;
  v61 = 0;
  v59 = (uint64_t *)&v60;
  sub_10029CCFC(&v59, (_QWORD *)a2[2], a2 + 3);
  v6 = (uint64_t *)a3[2];
  v7 = a3 + 3;
  if (v6 != a3 + 3)
  {
    v8 = v60;
    if (v60)
    {
LABEL_4:
      v9 = v6[4];
      v10 = (uint64_t *)&v60;
      v11 = v8;
      do
      {
        v12 = v11;
        v13 = v10;
        v14 = v11[4];
        v15 = (uint64_t **)(v11 + 1);
        if (v14 >= v9)
          v10 = v11;
        else
          ++v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
      if (v10 != (uint64_t *)&v60)
      {
        if (v14 < v9)
          v12 = v13;
        if (v9 >= v12[4])
        {
          v16 = (uint64_t **)(v13 + 1);
          if (v14 >= v9)
            v17 = v15;
          else
            v17 = v16;
          v18 = *v17;
          v19 = v10;
          if (*v17)
          {
            do
            {
              v20 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v20 = (uint64_t *)v19[2];
              v33 = *v20 == (_QWORD)v19;
              v19 = v20;
            }
            while (!v33);
          }
          if (v59 == v10)
            v59 = v20;
          --v61;
          sub_1002503B4(v8, v10);
          operator delete(v10);
        }
      }
      while (1)
      {
        v21 = (uint64_t *)v6[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (uint64_t *)v6[2];
            v33 = *v22 == (_QWORD)v6;
            v6 = v22;
          }
          while (!v33);
        }
        if (v22 == v7)
          break;
        v8 = v60;
        v6 = v22;
        if (v60)
          goto LABEL_4;
      }
    }
    else
    {
      do
      {
        v23 = (uint64_t *)v6[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t *)v6[2];
            v33 = *v24 == (_QWORD)v6;
            v6 = v24;
          }
          while (!v33);
        }
        v6 = v24;
      }
      while (v24 != v7);
    }
  }
  if (v61 != 1)
    goto LABEL_92;
  v26 = (uint64_t *)a3[2];
  if (v26 == v7)
  {
LABEL_93:
    v25 = 1;
    goto LABEL_94;
  }
  v27 = *a2;
  v28 = *a3;
  while (1)
  {
    v29 = v26[4];
    if (v29 < 0)
      break;
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                    + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v29) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v29) & 0xF);
    if (*(_DWORD *)(v30 + 40) != 2 || *(_DWORD *)(v30 + 208) != 2)
      goto LABEL_92;
    v31 = *(_QWORD *)(v30 + 184);
    v32 = *(_QWORD *)(v30 + 352);
    v33 = v31 == v27 && v32 == v28;
    if (!v33 && (v32 != v27 || v31 != v28))
      goto LABEL_92;
LABEL_86:
    v56 = (uint64_t *)v26[1];
    if (v56)
    {
      do
      {
        v57 = v56;
        v56 = (uint64_t *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        v57 = (uint64_t *)v26[2];
        v33 = *v57 == (_QWORD)v26;
        v26 = v57;
      }
      while (!v33);
    }
    v26 = v57;
    if (v57 == v7)
      goto LABEL_93;
  }
  v35 = *(_QWORD *)(a1 + 24);
  v38 = *(_QWORD **)(v35 + 8);
  v36 = (_QWORD *)(v35 + 8);
  v37 = v38;
  if (!v38)
    goto LABEL_86;
  v39 = -v29;
  v40 = v36;
  do
  {
    v41 = v37[4];
    v42 = v41 < v39;
    if (v41 >= v39)
      v43 = v37;
    else
      v43 = v37 + 1;
    if (!v42)
      v40 = v37;
    v37 = (_QWORD *)*v43;
  }
  while (*v43);
  if (v40 == v36)
    goto LABEL_86;
  if (v40[4] > v39)
    goto LABEL_86;
  v44 = (_QWORD *)v40[5];
  v45 = v40 + 6;
  if (v44 == v40 + 6)
    goto LABEL_86;
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(v46 + 32);
  v48 = *(_QWORD *)(v46 + 8);
  while (1)
  {
    v49 = *(_QWORD *)(v48 + (((unint64_t)(v47 + v44[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * (((_DWORD)v47 + *((_DWORD *)v44 + 8)) & 0xF);
    if (*(_DWORD *)(v49 + 40) != 2 || *(_DWORD *)(v49 + 208) != 2)
      break;
    v50 = *(_QWORD *)(v49 + 184);
    v51 = *(_QWORD *)(v49 + 352);
    if ((v50 != v27 || v51 != v28) && (v51 != v27 || v50 != v28))
      break;
    v54 = (_QWORD *)v44[1];
    if (v54)
    {
      do
      {
        v55 = v54;
        v54 = (_QWORD *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        v55 = (_QWORD *)v44[2];
        v33 = *v55 == (_QWORD)v44;
        v44 = v55;
      }
      while (!v33);
    }
    v44 = v55;
    if (v55 == v45)
      goto LABEL_86;
  }
LABEL_92:
  v25 = 0;
LABEL_94:
  sub_10004AAA0((uint64_t)&v59, v60);
  return v25;
}

void sub_1002A420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10004AAA0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1002A4224(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, unint64_t *a6, _BYTE *a7)
{
  uint64_t v7;
  BOOL v8;
  int v10;
  uint64_t v18;
  _QWORD *v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;

  v7 = a2 + 40 + 168 * a4;
  if (*(_DWORD *)(v7 + 160))
    v8 = 1;
  else
    v8 = *(_BYTE *)(v7 + 104) == 0;
  if (!v8 && !*(_BYTE *)(a2 + 40 + 168 * a4 + 164))
  {
    v10 = *(_DWORD *)v7;
    if (v10 == 4 || v10 == 1)
    {
      __p = 0;
      v21 = 0;
      v22 = 0;
      v18 = sub_1002A43A8((_QWORD *)a1, (uint64_t)&__p, a3, a4);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD **)(a1 + 72);
        sub_1002A4F3C(*a6, a5, &__p, v19, a2, *(_QWORD *)(v19[1] + (((unint64_t)(v19[4] + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v19 + 8) + (_DWORD)a3) & 0xF)+ 168 * a4+ 40, v18, *(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 64), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), a7);
      }
      else if ((unint64_t)(v21 - (_BYTE *)__p) >= 0x31)
      {
        sub_1002A454C((uint64_t)&__p, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
        sub_1002A4730(a5, (uint64_t)&__p);
        sub_1002A4860((_QWORD *)a1, *(uint64_t ***)(a1 + 80));
        ++*a6;
      }
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1002A4388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A43A8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v8 = *(_QWORD *)(*(_QWORD *)(a1[9] + 8)
                 + (((unint64_t)(*(_QWORD *)(a1[9] + 32) + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 376 * ((*(_DWORD *)(a1[9] + 32) + (_DWORD)a3) & 0xF);
  sub_1002A5184(a2, (double *)v8, a1[12], a1[13]);
  v20 = a3;
  v19 = a4;
  result = sub_1002A5420((uint64_t)a1, a3, a4, &v20, &v19, a2, 1);
  if (!(_DWORD)result)
  {
    v10 = v8 + 40;
    if (v20 == a3)
    {
LABEL_3:
      v11 = v10 + 168 * a4;
LABEL_4:
      result = 0;
      *(_DWORD *)(v11 + 160) = 3;
      return result;
    }
    v12 = *(_QWORD *)(v8 + 24);
    v13 = (_QWORD *)a1[9];
    if (v12 >= 1)
    {
      v14 = *(_QWORD *)(v13[1] + (((unint64_t)(v13[4] + v20) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)v13 + 8) + (_DWORD)v20) & 0xF);
      if (*(_QWORD *)(v14 + 24) == v12)
      {
        v15 = v14 + 40;
        v16 = *(_QWORD *)(v14 + 40 + 168 * v19 + 96);
        if (v16 == -1)
          v16 = *(_QWORD *)(v15 + 168 * v19 + 88);
        if (v16 == a3)
        {
          v11 = v15 + 168 * v19;
          goto LABEL_4;
        }
      }
    }
    v17 = 2 * v13[5] + 3;
    while (1)
    {
      result = sub_1002A5420((uint64_t)a1, a3, a4, &v20, &v19, a2, 0);
      if ((_DWORD)result)
        break;
      if (v20 == a3 && v19 == a4)
        goto LABEL_3;
      if (!--v17)
        return 6;
    }
  }
  return result;
}

void sub_1002A454C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  if ((unint64_t)&v4[-*(_QWORD *)a1] >= 0x50)
  {
    do
    {
      v7 = v3 + 16;
      if (!sub_1002A5B0C((double *)v3 + 2, (double *)v4 - 4, (double *)v3, (uint64_t)&v20, a3))
        return;
      v8 = *(char **)(a1 + 8);
      if (v8 != v7)
      {
        memmove(v3, v3 + 16, v8 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v9 = *(char **)a1;
      if (v7 == *(char **)a1)
      {
        sub_1002A5DB4((char **)a1, 0xFFFFFFFFFFFFFFFFLL);
        v9 = *(char **)a1;
        v10 = *(char **)(a1 + 8);
        if (v10 != *(char **)a1)
        {
LABEL_11:
          v11 = v10 - 16;
          *(_QWORD *)(a1 + 8) = v10 - 16;
          v12 = *(_QWORD *)(a1 + 16);
          if ((unint64_t)v11 >= v12)
            goto LABEL_15;
          goto LABEL_4;
        }
      }
      else
      {
        v10 = v7 - 16;
        *(_QWORD *)(a1 + 8) = v7 - 16;
        if (v7 - 16 != v9)
          goto LABEL_11;
      }
      sub_1002A5DB4((char **)a1, 0xFFFFFFFFFFFFFFFFLL);
      v9 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v11 >= v12)
      {
LABEL_15:
        v13 = (v11 - v9) >> 4;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60)
          sub_1000D02C0();
        v15 = v12 - (_QWORD)v9;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 60)
            sub_1000CDEB8();
          v17 = (char *)operator new(16 * v16);
          v18 = &v17[16 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v9;
          v19 = (uint64_t)v18;
          if (v11 == v9)
            goto LABEL_28;
          do
          {
LABEL_26:
            *(_OWORD *)(v19 - 16) = *((_OWORD *)v11 - 1);
            v19 -= 16;
            v11 -= 16;
          }
          while (v11 != v9);
          v11 = *(char **)a1;
        }
        else
        {
          v17 = 0;
          v18 = (char *)(16 * v13);
          *(_OWORD *)(16 * v13) = *(_OWORD *)v9;
          v19 = 16 * v13;
          if (v11 != v9)
            goto LABEL_26;
        }
LABEL_28:
        v4 = v18 + 16;
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v18 + 16;
        *(_QWORD *)(a1 + 16) = &v17[16 * v16];
        if (v11)
          operator delete(v11);
        goto LABEL_5;
      }
LABEL_4:
      *(_OWORD *)v11 = *(_OWORD *)v9;
      v4 = v11 + 16;
LABEL_5:
      *(_QWORD *)(a1 + 8) = v4;
      v3 = *(char **)a1;
    }
    while ((unint64_t)&v4[-*(_QWORD *)a1] > 0x40);
  }
}

void sub_1002A4730(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_1002AA1F4((uint64_t)a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
    MEMORY[0] = 0;
    MEMORY[8] = 0;
    MEMORY[0x10] = 0;
    v9 = *(const void **)a2;
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v10)
      goto LABEL_11;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    v9 = *(const void **)a2;
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (!v10)
      goto LABEL_11;
  }
  if (v10 < 0)
    sub_1000D02C0();
  v11 = (char *)operator new(v10);
  *v8 = v11;
  v8[1] = v11;
  v12 = &v11[16 * (v10 >> 4)];
  v8[2] = v12;
  memcpy(v11, v9, v10);
  v8[1] = v12;
LABEL_11:
  ++a1[5];
}

void sub_1002A4844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002A4860(_QWORD *result, uint64_t **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t **v70;
  uint64_t v72;
  char v73;

  v67 = result;
  v2 = (_QWORD *)result[2];
  v3 = v2[1];
  v4 = v2[2];
  v5 = (_QWORD *)(v3 + 8 * (v2[4] >> 4));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *v5 + 376 * (v2[4] & 0xFLL);
  v7 = a2 + 1;
  v8 = a2[2];
  v70 = a2 + 1;
  while (v4 != v3)
  {
    v9 = v2[5] + v2[4];
    if (v6 == *(_QWORD *)(v3 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v9 & 0xF))
      return result;
LABEL_10:
    v68 = v6;
    v69 = v5;
    v10 = 0;
    v11 = v6 + 40;
    v12 = 1;
    v72 = v6 + 40;
    while (2)
    {
      v13 = v12;
      v14 = v11 + 168 * v10;
      v15 = (_DWORD *)(v14 + 160);
      if ((*(_DWORD *)(v14 + 160) - 1) > 2)
        goto LABEL_11;
      v73 = v12;
      v16 = v8;
      v17 = *(_QWORD *)(v14 + 8);
      v18 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      v20 = v7;
      result = v7;
      for (i = *v7; *result; v20 = (uint64_t **)result)
      {
        while (1)
        {
          result = i;
          v22 = i[4];
          if (v17 == v22)
            break;
          if (v17 < v22)
            goto LABEL_15;
          if (v22 >= v17)
            goto LABEL_48;
LABEL_26:
          i = (uint64_t *)result[1];
          if (!i)
          {
            v20 = (uint64_t **)(result + 1);
            goto LABEL_28;
          }
        }
        v23 = result[5];
        if (v18 != v23)
        {
          if (v18 < v23)
            goto LABEL_15;
          if (v23 >= v18)
          {
LABEL_48:
            v8 = v16;
            *((_BYTE *)result + 56) = 1;
            if (*(_DWORD *)v14 != 4)
              goto LABEL_97;
            goto LABEL_56;
          }
          goto LABEL_26;
        }
        v24 = result[6];
        if (v19 >= v24)
        {
          if (v24 >= v19)
            goto LABEL_48;
          goto LABEL_26;
        }
LABEL_15:
        i = (uint64_t *)*result;
      }
LABEL_28:
      v25 = result;
      result = operator new(0x40uLL);
      result[4] = v17;
      result[5] = v18;
      result[6] = v19;
      *((_WORD *)result + 28) = 0;
      *((_BYTE *)result + 58) = 0;
      *result = 0;
      result[1] = 0;
      result[2] = v25;
      *v20 = result;
      v26 = (uint64_t *)**a2;
      v27 = result;
      if (v26)
      {
        *a2 = v26;
        v27 = *v20;
      }
      v7 = v70;
      v28 = *v70;
      v29 = v27 == *v70;
      *((_BYTE *)v27 + 24) = v29;
      if (!v29)
      {
        do
        {
          v30 = v27[2];
          if (*(_BYTE *)(v30 + 24))
            break;
          v31 = *(uint64_t **)(v30 + 16);
          v32 = *v31;
          if (*v31 == v30)
          {
            v35 = v31[1];
            if (!v35 || (v36 = *(unsigned __int8 *)(v35 + 24), v33 = (_BYTE *)(v35 + 24), v36))
            {
              if (*(uint64_t **)v30 == v27)
              {
                *(_BYTE *)(v30 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v39 = *(_QWORD *)(v30 + 8);
                *v31 = v39;
                if (v39)
                  goto LABEL_45;
              }
              else
              {
                v37 = *(uint64_t **)(v30 + 8);
                v38 = *v37;
                *(_QWORD *)(v30 + 8) = *v37;
                if (v38)
                {
                  *(_QWORD *)(v38 + 16) = v30;
                  v31 = *(uint64_t **)(v30 + 16);
                }
                v37[2] = (uint64_t)v31;
                *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v37;
                *v37 = v30;
                *(_QWORD *)(v30 + 16) = v37;
                v31 = (uint64_t *)v37[2];
                v30 = *v31;
                *((_BYTE *)v37 + 24) = 1;
                *((_BYTE *)v31 + 24) = 0;
                v39 = *(_QWORD *)(v30 + 8);
                *v31 = v39;
                if (v39)
LABEL_45:
                  *(_QWORD *)(v39 + 16) = v31;
              }
              *(_QWORD *)(v30 + 16) = v31[2];
              *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
              *(_QWORD *)(v30 + 8) = v31;
LABEL_54:
              v31[2] = v30;
              break;
            }
          }
          else if (!v32 || (v34 = *(unsigned __int8 *)(v32 + 24), v33 = (_BYTE *)(v32 + 24), v34))
          {
            if (*(uint64_t **)v30 == v27)
            {
              v65 = v27[1];
              *(_QWORD *)v30 = v65;
              if (v65)
              {
                *(_QWORD *)(v65 + 16) = v30;
                v31 = *(uint64_t **)(v30 + 16);
              }
              v27[2] = (uint64_t)v31;
              *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * (**(_QWORD **)(v30 + 16) != v30)) = v27;
              v27[1] = v30;
              *(_QWORD *)(v30 + 16) = v27;
              v31 = (uint64_t *)v27[2];
              *((_BYTE *)v27 + 24) = 1;
              *((_BYTE *)v31 + 24) = 0;
              v30 = v31[1];
              v40 = *(uint64_t **)v30;
              v31[1] = *(_QWORD *)v30;
              if (v40)
LABEL_52:
                v40[2] = (uint64_t)v31;
            }
            else
            {
              *(_BYTE *)(v30 + 24) = 1;
              *((_BYTE *)v31 + 24) = 0;
              v30 = v31[1];
              v40 = *(uint64_t **)v30;
              v31[1] = *(_QWORD *)v30;
              if (v40)
                goto LABEL_52;
            }
            *(_QWORD *)(v30 + 16) = v31[2];
            *(_QWORD *)(v31[2] + 8 * (*(_QWORD *)v31[2] != (_QWORD)v31)) = v30;
            *(_QWORD *)v30 = v31;
            goto LABEL_54;
          }
          *(_BYTE *)(v30 + 24) = 1;
          v27 = v31;
          *((_BYTE *)v31 + 24) = v31 == v28;
          *v33 = 1;
        }
        while (v31 != v28);
      }
      v8 = (uint64_t *)((char *)v16 + 1);
      a2[2] = (uint64_t *)((char *)v16 + 1);
      v11 = v72;
      *((_BYTE *)result + 56) = 1;
      if (*(_DWORD *)v14 != 4)
        goto LABEL_97;
LABEL_56:
      v41 = (_QWORD *)(v11 + 168 * (v10 ^ 1));
      v42 = v41[1];
      v43 = v41[2];
      v44 = v41[3];
      v45 = *v7;
      v46 = v7;
      result = v7;
      if (!*v7)
        goto LABEL_71;
      do
      {
        while (1)
        {
          result = v45;
          v47 = v45[4];
          if (v42 != v47)
            break;
          v48 = result[5];
          if (v43 != v48)
          {
            if (v43 < v48)
              goto LABEL_58;
            if (v48 >= v43)
              goto LABEL_96;
            goto LABEL_69;
          }
          v49 = result[6];
          if (v44 >= v49)
          {
            if (v49 >= v44)
              goto LABEL_96;
            goto LABEL_69;
          }
LABEL_58:
          v45 = (uint64_t *)*result;
          v46 = (uint64_t **)result;
          if (!*result)
            goto LABEL_71;
        }
        if (v42 < v47)
          goto LABEL_58;
        if (v47 >= v42)
          goto LABEL_96;
LABEL_69:
        v45 = (uint64_t *)result[1];
      }
      while (v45);
      v46 = (uint64_t **)(result + 1);
LABEL_71:
      v50 = result;
      result = operator new(0x40uLL);
      result[4] = v42;
      result[5] = v43;
      result[6] = v44;
      *((_WORD *)result + 28) = 0;
      *((_BYTE *)result + 58) = 0;
      *result = 0;
      result[1] = 0;
      result[2] = v50;
      *v46 = result;
      v51 = (uint64_t *)**a2;
      v52 = result;
      if (v51)
      {
        *a2 = v51;
        v52 = *v46;
      }
      v7 = v70;
      v53 = *v70;
      v29 = v52 == *v70;
      *((_BYTE *)v52 + 24) = v29;
      if (!v29)
      {
        do
        {
          v54 = v52[2];
          if (*(_BYTE *)(v54 + 24))
            break;
          v55 = *(uint64_t **)(v54 + 16);
          v56 = *v55;
          if (*v55 == v54)
          {
            v59 = v55[1];
            if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), v57 = (_BYTE *)(v59 + 24), v60))
            {
              if (*(uint64_t **)v54 == v52)
              {
                *(_BYTE *)(v54 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
                  goto LABEL_88;
              }
              else
              {
                v61 = *(uint64_t **)(v54 + 8);
                v62 = *v61;
                *(_QWORD *)(v54 + 8) = *v61;
                if (v62)
                {
                  *(_QWORD *)(v62 + 16) = v54;
                  v55 = *(uint64_t **)(v54 + 16);
                }
                v61[2] = (uint64_t)v55;
                *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v61;
                *v61 = v54;
                *(_QWORD *)(v54 + 16) = v61;
                v55 = (uint64_t *)v61[2];
                v54 = *v55;
                *((_BYTE *)v61 + 24) = 1;
                *((_BYTE *)v55 + 24) = 0;
                v63 = *(_QWORD *)(v54 + 8);
                *v55 = v63;
                if (v63)
LABEL_88:
                  *(_QWORD *)(v63 + 16) = v55;
              }
              *(_QWORD *)(v54 + 16) = v55[2];
              *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
              *(_QWORD *)(v54 + 8) = v55;
LABEL_94:
              v55[2] = v54;
              break;
            }
          }
          else if (!v56 || (v58 = *(unsigned __int8 *)(v56 + 24), v57 = (_BYTE *)(v56 + 24), v58))
          {
            if (*(uint64_t **)v54 == v52)
            {
              v66 = v52[1];
              *(_QWORD *)v54 = v66;
              if (v66)
              {
                *(_QWORD *)(v66 + 16) = v54;
                v55 = *(uint64_t **)(v54 + 16);
              }
              v52[2] = (uint64_t)v55;
              *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * (**(_QWORD **)(v54 + 16) != v54)) = v52;
              v52[1] = v54;
              *(_QWORD *)(v54 + 16) = v52;
              v55 = (uint64_t *)v52[2];
              *((_BYTE *)v52 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v64 = *(uint64_t **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v64)
LABEL_92:
                v64[2] = (uint64_t)v55;
            }
            else
            {
              *(_BYTE *)(v54 + 24) = 1;
              *((_BYTE *)v55 + 24) = 0;
              v54 = v55[1];
              v64 = *(uint64_t **)v54;
              v55[1] = *(_QWORD *)v54;
              if (v64)
                goto LABEL_92;
            }
            *(_QWORD *)(v54 + 16) = v55[2];
            *(_QWORD *)(v55[2] + 8 * (*(_QWORD *)v55[2] != (_QWORD)v55)) = v54;
            *(_QWORD *)v54 = v55;
            goto LABEL_94;
          }
          *(_BYTE *)(v54 + 24) = 1;
          v52 = v55;
          *((_BYTE *)v55 + 24) = v55 == v53;
          *v57 = 1;
        }
        while (v55 != v53);
      }
      v8 = (uint64_t *)((char *)v8 + 1);
      a2[2] = v8;
      v11 = v72;
LABEL_96:
      *((_BYTE *)result + 56) = 1;
LABEL_97:
      v13 = v73;
      if ((*v15 - 1) <= 2)
        *(_BYTE *)(v11 + 168 * v10 + 165) = 1;
LABEL_11:
      v12 = 0;
      v10 = 1;
      if ((v13 & 1) != 0)
        continue;
      break;
    }
    v5 = v69;
    v6 = v68 + 376;
    if (v68 + 376 - *v69 == 6016)
    {
      v5 = v69 + 1;
      v6 = v69[1];
    }
    v2 = (_QWORD *)v67[2];
    v3 = v2[1];
    v4 = v2[2];
  }
  if (v6)
    goto LABEL_10;
  return result;
}

void sub_1002A4F3C(unint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *a12 = 0;
  if (!a12[1])
  {
    a12[1] = 1;
    sub_1002AA8F0(a8, a10, a11, 1);
    sub_1002AAB14(a9, a10, a11, 1);
    v20 = a2[5];
    v18 = a1 >= v20;
    v19 = a1 - v20;
    if (a1 > v20)
      goto LABEL_3;
LABEL_5:
    if (v18)
      goto LABEL_14;
    v21 = a2[4];
    v22 = a2[1];
    v23 = (_QWORD *)(v22 + 8 * (v21 / 0xAA));
    if (a2[2] == v22)
    {
      v24 = 0;
      if (!a1)
      {
LABEL_13:
        sub_1002B47C4(a2, v23, v24);
        goto LABEL_14;
      }
    }
    else
    {
      v24 = *v23 + 24 * (v21 % 0xAA);
      if (!a1)
        goto LABEL_13;
    }
    v25 = a1 - 0x5555555555555555 * ((uint64_t)(v24 - *v23) >> 3);
    if (v25 < 1)
    {
      v26 = 169 - v25;
      v23 -= v26 / 0xAA;
      v24 = *v23 + 24 * (170 * (v26 / 0xAA) - v26) + 4056;
    }
    else
    {
      v23 += v25 / 0xAAuLL;
      v24 = *v23 + 24 * (v25 % 0xAAuLL);
    }
    goto LABEL_13;
  }
  v17 = a2[5];
  v18 = a1 >= v17;
  v19 = a1 - v17;
  if (a1 <= v17)
    goto LABEL_5;
LABEL_3:
  sub_1002B45C0(a2, v19);
LABEL_14:
  a3[1] = *a3;
  *(_DWORD *)(a6 + 160) = 4;
  *(_BYTE *)(a6 + 164) = 1;
  v27 = a4[1];
  if (a4[2] != v27)
  {
    v28 = a4[4];
    v29 = (uint64_t *)(v27 + 8 * (v28 >> 4));
    v30 = *v29;
    v31 = *v29 + 376 * (v28 & 0xF);
    v32 = *(_QWORD *)(v27 + (((a4[5] + v28) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*((_DWORD *)a4 + 10) + (_DWORD)v28) & 0xF);
    while (v31 != v32)
    {
      if (*(_BYTE *)(v31 + 204) || *(_BYTE *)(v31 + 205))
      {
        if (!*(_BYTE *)(v31 + 372))
          goto LABEL_21;
      }
      else
      {
        *(_DWORD *)(v31 + 200) = 0;
        if (!*(_BYTE *)(v31 + 372))
        {
LABEL_21:
          if (!*(_BYTE *)(v31 + 373))
            *(_DWORD *)(v31 + 368) = 0;
        }
      }
      v31 += 376;
      if (v31 - v30 == 6016)
      {
        v33 = v29[1];
        ++v29;
        v30 = v33;
        v31 = v33;
      }
    }
  }
}

void sub_1002A5184(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  double *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;

  v7 = *(char **)a1;
  v8 = *(char **)(a1 + 8);
  if (v8 - v7 == 16)
  {
    if (sub_1002A58D4((double *)v7, a2, a3, a4))
      return;
    v8 = *(char **)(a1 + 8);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v8[-*(_QWORD *)a1] >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
LABEL_46:
      sub_1000D02C0();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
LABEL_47:
        sub_1000CDEB8();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    *(_OWORD *)v17 = *(_OWORD *)a2;
    v10 = (double *)(v17 + 16);
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      v8 = *(char **)a1;
    }
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v18;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    v10 = (double *)(v8 + 16);
  }
  *(_QWORD *)(a1 + 8) = v10;
  if ((unint64_t)v10 - *(_QWORD *)a1 >= 0x21)
  {
    do
    {
      if (!sub_1002A5B0C(a2, v10 - 6, v10 - 4, (uint64_t)&v29, a4))
        return;
      if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 > 0x1FuLL)
      {
        v20 = (char *)(*(_QWORD *)(a1 + 8) - 32);
        *(_QWORD *)(a1 + 8) = v20;
        v19 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
        {
LABEL_30:
          v21 = *(char **)a1;
          v22 = (uint64_t)&v20[-*(_QWORD *)a1] >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            goto LABEL_46;
          v24 = v19 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 60)
              goto LABEL_47;
            v26 = (char *)operator new(16 * v25);
            v27 = &v26[16 * v22];
            *(_OWORD *)v27 = *(_OWORD *)a2;
            v28 = (uint64_t)v27;
            if (v20 == v21)
              goto LABEL_43;
            do
            {
LABEL_41:
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v20 - 1);
              v28 -= 16;
              v20 -= 16;
            }
            while (v20 != v21);
            v20 = *(char **)a1;
          }
          else
          {
            v26 = 0;
            v27 = (char *)(16 * v22);
            *(_OWORD *)(16 * v22) = *(_OWORD *)a2;
            v28 = 16 * v22;
            if (v20 != v21)
              goto LABEL_41;
          }
LABEL_43:
          v10 = (double *)(v27 + 16);
          *(_QWORD *)a1 = v28;
          *(_QWORD *)(a1 + 8) = v27 + 16;
          *(_QWORD *)(a1 + 16) = &v26[16 * v25];
          if (v20)
            operator delete(v20);
          goto LABEL_24;
        }
      }
      else
      {
        sub_1002A5DB4((char **)a1, 0xFFFFFFFFFFFFFFFELL);
        v20 = *(char **)(a1 + 8);
        v19 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
          goto LABEL_30;
      }
      *(_OWORD *)v20 = *(_OWORD *)a2;
      v10 = (double *)(v20 + 16);
LABEL_24:
      *(_QWORD *)(a1 + 8) = v10;
    }
    while ((unint64_t)v10 - *(_QWORD *)a1 > 0x20);
  }
}

uint64_t sub_1002A5420(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int *a5, uint64_t a6, int a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double **v24;
  double *v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  double **v38;
  double *v39;
  double *v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  BOOL v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  _QWORD *v65;
  BOOL v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int *v71;
  int v72;
  _QWORD *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v9 = *a5;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                  + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 32) + *(_DWORD *)a4) & 0xF)
      + 40;
  v11 = v10 + 168 * *a5;
  v12 = *(_QWORD *)(v11 + 96);
  if (v12 < 0)
  {
    v17 = *(_QWORD *)(v10 + 168 * v9 + 80);
    if (v17 < 0 || (v18 = *(_QWORD *)(v10 + 168 * v9 + 88), v18 < 0))
    {
      v15 = a7 == 0;
      goto LABEL_28;
    }
    v68 = *a4;
    v69 = a2;
    v70 = a3;
    v72 = a7;
    v71 = a5;
    *a4 = v18;
    v19 = *(_OWORD *)(v11 + 8);
    v20 = *(_OWORD *)(v11 + 24);
    v76 = *(_QWORD *)(v11 + 40);
    v74 = v19;
    v75 = v20;
    v22 = *(_QWORD *)(a1 + 96);
    v21 = *(_QWORD *)(a1 + 104);
    v73 = (_QWORD *)a1;
    if (*(_QWORD *)(v11 + 8))
    {
      v23 = *(_QWORD *)(v11 + 24);
      v24 = (double **)(**(_QWORD **)(a1 + 64) + 48 * *(_QWORD *)(v11 + 16));
      if (v23 >= 0)
        v24 = (double **)&v24[3][3 * v23];
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_QWORD *)(v11 + 32);
      if (v27 < v17)
        v28 = v17 - (v27 + 1);
      else
        v28 = v17 + ~v27 + (((char *)v25 - (char *)v26) >> 4);
      if ((v28 & 0x8000000000000000) == 0)
      {
        v29 = &v26[2 * v27 + 2];
        v30 = v28 + 1;
        do
        {
          sub_1002A6040(a6, v29, v22, v21);
          if (v29 + 2 == v25)
            v29 = v26;
          else
            v29 += 2;
          --v30;
        }
        while (v30);
      }
    }
    else
    {
      v36 = *(_QWORD *)(v11 + 24);
      v37 = *(_QWORD *)(v11 + 32);
      v38 = (double **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24) + 24 * v36);
      if (v36 < 0)
        v38 = *(double ***)(a1 + 56);
      v39 = *v38;
      v40 = v38[1];
      if (v37 < v17)
        v41 = v17 - (v37 + 1);
      else
        v41 = v17 + ~v37 + (((char *)v40 - (char *)v39) >> 4);
      if ((v41 & 0x8000000000000000) == 0)
      {
        v42 = &v39[2 * v37 + 2];
        v43 = v41 + 1;
        do
        {
          sub_1002A6040(a6, v42, v22, v21);
          if (v42 + 2 == v40)
            v42 = v39;
          else
            v42 += 2;
          --v43;
        }
        while (v43);
      }
    }
  }
  else
  {
    v68 = *a4;
    v69 = a2;
    v70 = a3;
    v72 = a7;
    v71 = a5;
    v73 = (_QWORD *)a1;
    *a4 = v12;
    v13 = *(_OWORD *)(v11 + 8);
    v14 = *(_OWORD *)(v11 + 24);
    v76 = *(_QWORD *)(v11 + 40);
    v74 = v13;
    v75 = v14;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v73[9] + 8)
                            + (((unint64_t)(*(_QWORD *)(v73[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*(_DWORD *)(v73[9] + 32) + *(_DWORD *)a4) & 0xF)
                + 32))
  {
    v15 = v72 == 0;
    v16 = 3;
    goto LABEL_29;
  }
  if (v72)
    *(_DWORD *)(v10 + 168 * v9 + 160) = 1;
  if ((sub_1002A5EDC((uint64_t)v73, v69, v70, a4, v71, v9, v68, (uint64_t *)&v74, v72) & 1) != 0)
  {
    v31 = *(_QWORD *)(*(_QWORD *)(v73[9] + 8)
                    + (((unint64_t)(*(_QWORD *)(v73[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*(_DWORD *)(v73[9] + 32) + *(_DWORD *)a4) & 0xF);
    v32 = *v71;
    v33 = v31 + 40 + 168 * *v71;
    if (*(_BYTE *)(v33 + 165))
      return 5;
    v34 = (_DWORD *)(v33 + 160);
    if (*(_DWORD *)(v33 + 160) == 2)
      return 5;
    sub_1002A5184(a6, (double *)v31, v73[12], v73[13]);
    if (*(_DWORD *)v33 == 4)
    {
      if (*(_DWORD *)(v31 + 200))
      {
        if (*(_DWORD *)(v31 + 368))
          goto LABEL_48;
      }
      else
      {
        *(_DWORD *)(v31 + 200) = 2;
        if (*(_DWORD *)(v31 + 368))
        {
LABEL_48:
          v44 = *(_QWORD *)(v31 + 24);
          if (v44 < 1)
            return 0;
LABEL_53:
          v45 = v73[3];
          v48 = *(_QWORD **)(v45 + 8);
          v46 = (_QWORD *)(v45 + 8);
          v47 = v48;
          if (!v48)
            goto LABEL_63;
          v49 = v46;
          do
          {
            v50 = v47[4];
            v51 = v50 < v44;
            if (v50 >= v44)
              v52 = v47;
            else
              v52 = v47 + 1;
            if (!v51)
              v49 = v47;
            v47 = (_QWORD *)*v52;
          }
          while (*v52);
          if (v49 == v46 || v49[4] > v44)
LABEL_63:
            v49 = v46;
          v53 = (_QWORD *)v49[5];
          v54 = v49 + 6;
          if (v53 == v49 + 6)
            return 0;
          v55 = *(_QWORD *)(v31 + 40 + 168 * v32 + 128);
          v56 = v73[2];
          v57 = *(_QWORD *)(v56 + 32);
          v58 = *(_QWORD *)(v56 + 8);
          while (1)
          {
            v59 = *(_QWORD *)(v58 + (((unint64_t)(v53[4] + v57) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*((_DWORD *)v53 + 8) + (_DWORD)v57) & 0xF);
            v60 = v59 + 40;
            v61 = *(_DWORD *)(v59 + 200);
            v62 = *(_QWORD *)(v59 + 168);
            if (v61)
              v63 = 0;
            else
              v63 = v62 == v55;
            if (v63)
            {
              *(_DWORD *)(v60 + 160) = 2;
              if (*(_DWORD *)(v60 + 328))
                v66 = 0;
              else
                v66 = *(_QWORD *)(v60 + 296) == v55;
              if (!v66)
              {
LABEL_75:
                v65 = (_QWORD *)v53[1];
                if (v65)
                  goto LABEL_83;
                goto LABEL_85;
              }
            }
            else
            {
              if (*(_DWORD *)(v60 + 328))
                v64 = 0;
              else
                v64 = *(_QWORD *)(v60 + 296) == v55;
              if (!v64)
                goto LABEL_75;
            }
            *(_DWORD *)(v60 + 328) = 2;
            v65 = (_QWORD *)v53[1];
            if (v65)
            {
              do
              {
LABEL_83:
                v67 = v65;
                v65 = (_QWORD *)*v65;
              }
              while (v65);
              goto LABEL_66;
            }
            do
            {
LABEL_85:
              v67 = (_QWORD *)v53[2];
              v15 = *v67 == (_QWORD)v53;
              v53 = v67;
            }
            while (!v15);
LABEL_66:
            result = 0;
            v53 = v67;
            if (v67 == v54)
              return result;
          }
        }
      }
      v34 = (_DWORD *)(v31 + 368);
    }
    *v34 = 2;
    v44 = *(_QWORD *)(v31 + 24);
    if (v44 < 1)
      return 0;
    goto LABEL_53;
  }
  v15 = v72 == 0;
LABEL_28:
  v16 = 1;
LABEL_29:
  if (v15)
    return v16 + 1;
  else
    return v16;
}

BOOL sub_1002A58D4(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v13;
  double v14;
  double v15;
  double v16;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v42;
  double v43;
  double v44;
  double v45;

  v7 = *a1;
  v8 = *a2;
  if (*a1 == *a2)
    goto LABEL_51;
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v13 = vabdd_f64(v7, v8);
    v14 = fabs(v7);
    v15 = fabs(v8);
    if (v14 < v15)
      v14 = v15;
    v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
    if (v13 <= v16)
    {
LABEL_51:
      v9 = a1[1];
      v10 = a2[1];
      if (v9 == v10)
        return 1;
      if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v42 = vabdd_f64(v9, v10);
        v43 = fabs(v9);
        v44 = fabs(v10);
        if (v43 < v44)
          v43 = v44;
        v45 = v43 >= 1.0 ? v43 * 2.22044605e-16 : 2.22044605e-16;
        if (v42 <= v45)
          return 1;
      }
    }
  }
  v18 = (double)*(uint64_t *)(a4 + 24) + (a1[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v18 >= 0.0)
    v19 = 0.5;
  else
    v19 = -0.5;
  v20 = v18 + v19;
  sub_100284F14(v18 + v19);
  v21 = ceil(v20);
  v22 = floor(v20);
  if (v20 >= 0.0)
    v21 = v22;
  v23 = (uint64_t)v21;
  v24 = (double)*(uint64_t *)(a4 + 16) + (*a1 - *(double *)a4) * *(double *)(a4 + 32);
  if (v24 >= 0.0)
    v25 = 0.5;
  else
    v25 = -0.5;
  v26 = v24 + v25;
  sub_100284F14(v24 + v25);
  v27 = ceil(v26);
  v28 = floor(v26);
  if (v26 >= 0.0)
    v27 = v28;
  v29 = (uint64_t)v27;
  v30 = (double)*(uint64_t *)(a4 + 24) + (a2[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v30 >= 0.0)
    v31 = 0.5;
  else
    v31 = -0.5;
  v32 = v30 + v31;
  sub_100284F14(v30 + v31);
  v33 = ceil(v32);
  v34 = floor(v32);
  if (v32 >= 0.0)
    v33 = v34;
  v35 = (uint64_t)v33;
  v36 = (double)*(uint64_t *)(a4 + 16) + (*a2 - *(double *)a4) * *(double *)(a4 + 32);
  if (v36 >= 0.0)
    v37 = 0.5;
  else
    v37 = -0.5;
  v38 = v36 + v37;
  sub_100284F14(v36 + v37);
  v39 = ceil(v38);
  v40 = floor(v38);
  if (v38 >= 0.0)
    v39 = v40;
  return v29 == (uint64_t)v39 && v23 == v35;
}

BOOL sub_1002A5B0C(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v42[2];
  uint64_t v43[2];
  uint64_t v44[2];
  double v45;

  v44[0] = 0x3FF0000000000000;
  v9 = sub_10005C128(a2, a3, a1, (double *)v44);
  if (v9 == 0.0
    || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= *(double *)v44 * 2.22044605e-16)
  {
    return 1;
  }
  v10 = (double)*(uint64_t *)(a5 + 24) + (a1[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v10 >= 0.0)
    v11 = 0.5;
  else
    v11 = -0.5;
  v12 = v10 + v11;
  sub_100284F14(v10 + v11);
  v13 = ceil(v12);
  v14 = floor(v12);
  if (v12 >= 0.0)
    v13 = v14;
  v44[1] = (uint64_t)v13;
  v15 = (double)*(uint64_t *)(a5 + 16) + (*a1 - *(double *)a5) * *(double *)(a5 + 32);
  if (v15 >= 0.0)
    v16 = 0.5;
  else
    v16 = -0.5;
  v17 = v15 + v16;
  sub_100284F14(v15 + v16);
  v18 = ceil(v17);
  v19 = floor(v17);
  if (v17 >= 0.0)
    v18 = v19;
  v44[0] = (uint64_t)v18;
  v20 = (double)*(uint64_t *)(a5 + 24) + (a2[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v20 >= 0.0)
    v21 = 0.5;
  else
    v21 = -0.5;
  v22 = v20 + v21;
  sub_100284F14(v20 + v21);
  v23 = ceil(v22);
  v24 = floor(v22);
  if (v22 >= 0.0)
    v23 = v24;
  v43[1] = (uint64_t)v23;
  v25 = (double)*(uint64_t *)(a5 + 16) + (*a2 - *(double *)a5) * *(double *)(a5 + 32);
  if (v25 >= 0.0)
    v26 = 0.5;
  else
    v26 = -0.5;
  v27 = v25 + v26;
  sub_100284F14(v25 + v26);
  v28 = ceil(v27);
  v29 = floor(v27);
  if (v27 >= 0.0)
    v28 = v29;
  v43[0] = (uint64_t)v28;
  v30 = (double)*(uint64_t *)(a5 + 24) + (a3[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v30 >= 0.0)
    v31 = 0.5;
  else
    v31 = -0.5;
  v32 = v30 + v31;
  sub_100284F14(v30 + v31);
  v33 = ceil(v32);
  v34 = floor(v32);
  if (v32 >= 0.0)
    v33 = v34;
  v42[1] = (uint64_t)v33;
  v35 = (double)*(uint64_t *)(a5 + 16) + (*a3 - *(double *)a5) * *(double *)(a5 + 32);
  v36 = v35 >= 0.0 ? 0.5 : -0.5;
  v37 = v35 + v36;
  sub_100284F14(v35 + v36);
  v38 = ceil(v37);
  v39 = floor(v37);
  if (v37 >= 0.0)
    v38 = v39;
  v42[0] = (uint64_t)v38;
  v45 = 1.0;
  v40 = sub_10028EE24(v43, v42, v44, &v45);
  return v40 == 0.0
      || (*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v40) <= v45 * 2.22044605e-16;
}

void sub_1002A5DB4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_1000D02C0();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1000CDEB8();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1002A5EDC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int *a5, int a6, uint64_t a7, uint64_t *a8, char a9)
{
  uint64_t v12;
  uint64_t result;
  int v16;
  int v17;

  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                  + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + *(_DWORD *)a4) & 0xF);
  if (*(uint64_t *)(v12 + 24) < 1)
  {
    if (*(_DWORD *)(v12 + 368) == 1)
      v16 = 1;
    else
      v16 = -1;
    if (*(_DWORD *)(v12 + 200) == 1)
      v17 = 0;
    else
      v17 = v16;
    *a5 = v17;
    if (v17 != -1)
      return 1;
    if (*(_DWORD *)(v12 + 200) != 3 || *(_DWORD *)(v12 + 368) != 3)
    {
      *a5 = -1;
      if (*(_DWORD *)(v12 + 40) == 4 && *(_DWORD *)(v12 + 208) == 4)
      {
        if (sub_1002A9E6C(a1, v12, a2, a5))
          return 1;
      }
      else if ((sub_1002A9FFC(a1, v12, a8, a5) & 1) != 0)
      {
        return 1;
      }
    }
    return 0;
  }
  else
  {
    result = sub_1002A667C(a1, a4, a5, a2, a3, a8);
    if ((_DWORD)result)
    {
      result = 1;
      if (a9)
      {
        if (*a4 == a7)
          *a5 = a6;
      }
    }
  }
  return result;
}

void sub_1002A6040(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  unint64_t v9;
  double *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;

  v7 = *(char **)a1;
  v8 = *(char **)(a1 + 8);
  if (v8 - v7 == 16)
  {
    if (sub_1002A58D4((double *)v7, a2, a3, a4))
      return;
    v8 = *(char **)(a1 + 8);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v8[-*(_QWORD *)a1] >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
LABEL_46:
      sub_1000D02C0();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
LABEL_47:
        sub_1000CDEB8();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[16 * v12];
    v18 = &v16[16 * v15];
    *(_OWORD *)v17 = *(_OWORD *)a2;
    v10 = (double *)(v17 + 16);
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      v8 = *(char **)a1;
    }
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v18;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    v10 = (double *)(v8 + 16);
  }
  *(_QWORD *)(a1 + 8) = v10;
  if ((unint64_t)v10 - *(_QWORD *)a1 >= 0x21)
  {
    do
    {
      if (!sub_1002A62DC(a2, v10 - 6, v10 - 4, (uint64_t)&v29, a4))
        return;
      if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 > 0x1FuLL)
      {
        v20 = (char *)(*(_QWORD *)(a1 + 8) - 32);
        *(_QWORD *)(a1 + 8) = v20;
        v19 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
        {
LABEL_30:
          v21 = *(char **)a1;
          v22 = (uint64_t)&v20[-*(_QWORD *)a1] >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            goto LABEL_46;
          v24 = v19 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 60)
              goto LABEL_47;
            v26 = (char *)operator new(16 * v25);
            v27 = &v26[16 * v22];
            *(_OWORD *)v27 = *(_OWORD *)a2;
            v28 = (uint64_t)v27;
            if (v20 == v21)
              goto LABEL_43;
            do
            {
LABEL_41:
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v20 - 1);
              v28 -= 16;
              v20 -= 16;
            }
            while (v20 != v21);
            v20 = *(char **)a1;
          }
          else
          {
            v26 = 0;
            v27 = (char *)(16 * v22);
            *(_OWORD *)(16 * v22) = *(_OWORD *)a2;
            v28 = 16 * v22;
            if (v20 != v21)
              goto LABEL_41;
          }
LABEL_43:
          v10 = (double *)(v27 + 16);
          *(_QWORD *)a1 = v28;
          *(_QWORD *)(a1 + 8) = v27 + 16;
          *(_QWORD *)(a1 + 16) = &v26[16 * v25];
          if (v20)
            operator delete(v20);
          goto LABEL_24;
        }
      }
      else
      {
        sub_1002A5DB4((char **)a1, 0xFFFFFFFFFFFFFFFELL);
        v20 = *(char **)(a1 + 8);
        v19 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
          goto LABEL_30;
      }
      *(_OWORD *)v20 = *(_OWORD *)a2;
      v10 = (double *)(v20 + 16);
LABEL_24:
      *(_QWORD *)(a1 + 8) = v10;
    }
    while ((unint64_t)v10 - *(_QWORD *)a1 > 0x20);
  }
}

BOOL sub_1002A62DC(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  double v57;

  v55 = 1.0;
  v9 = sub_10005C128(a2, a3, a1, &v55);
  if (v9 == 0.0 || (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= v55 * 2.22044605e-16)
  {
    v10 = a3[1];
    v11 = a2[1] - v10;
    v12 = *a3 - *a2;
    v13 = -v11;
    if (v12 == 0.0)
      goto LABEL_7;
    if (COERCE_UNSIGNED_INT64(fabs(*a3 - *a2)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v17 = fabs(v12);
      v18 = 2.22044605e-16;
      if (v17 >= 1.0)
        v18 = v17 * 2.22044605e-16;
      if (v17 <= v18)
      {
LABEL_7:
        if (v11 == 0.0)
          return 1;
        if (COERCE_UNSIGNED_INT64(fabs(a2[1] - v10)) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v14 = fabs(v13);
          v15 = 2.22044605e-16;
          if (v14 >= 1.0)
            v15 = v14 * 2.22044605e-16;
          if (v14 <= v15)
            return 1;
        }
      }
    }
    v16 = a1[1];
    if (v10 * v11 - v12 * *a3 + v16 * v13 + v12 * *a1 <= 0.0)
      return 1;
  }
  else
  {
    v16 = a1[1];
  }
  v19 = (double)*(uint64_t *)(a5 + 24) + (v16 - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v19 >= 0.0)
    v20 = 0.5;
  else
    v20 = -0.5;
  v21 = v19 + v20;
  sub_100284F14(v19 + v20);
  v22 = ceil(v21);
  v23 = floor(v21);
  if (v21 >= 0.0)
    v22 = v23;
  v56 = (uint64_t)v22;
  v24 = (double)*(uint64_t *)(a5 + 16) + (*a1 - *(double *)a5) * *(double *)(a5 + 32);
  if (v24 >= 0.0)
    v25 = 0.5;
  else
    v25 = -0.5;
  v26 = v24 + v25;
  sub_100284F14(v24 + v25);
  v27 = ceil(v26);
  v28 = floor(v26);
  if (v26 >= 0.0)
    v27 = v28;
  *(_QWORD *)&v55 = (uint64_t)v27;
  v29 = (double)*(uint64_t *)(a5 + 24) + (a2[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v29 >= 0.0)
    v30 = 0.5;
  else
    v30 = -0.5;
  v31 = v29 + v30;
  sub_100284F14(v29 + v30);
  v32 = ceil(v31);
  v33 = floor(v31);
  if (v31 >= 0.0)
    v32 = v33;
  v54 = (uint64_t)v32;
  v34 = (double)*(uint64_t *)(a5 + 16) + (*a2 - *(double *)a5) * *(double *)(a5 + 32);
  if (v34 >= 0.0)
    v35 = 0.5;
  else
    v35 = -0.5;
  v36 = v34 + v35;
  sub_100284F14(v34 + v35);
  v37 = ceil(v36);
  v38 = floor(v36);
  if (v36 >= 0.0)
    v37 = v38;
  v53 = (uint64_t)v37;
  v39 = (double)*(uint64_t *)(a5 + 24) + (a3[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v39 >= 0.0)
    v40 = 0.5;
  else
    v40 = -0.5;
  v41 = v39 + v40;
  sub_100284F14(v39 + v40);
  v42 = ceil(v41);
  v43 = floor(v41);
  if (v41 >= 0.0)
    v42 = v43;
  v52 = (uint64_t)v42;
  v44 = (double)*(uint64_t *)(a5 + 16) + (*a3 - *(double *)a5) * *(double *)(a5 + 32);
  if (v44 >= 0.0)
    v45 = 0.5;
  else
    v45 = -0.5;
  v46 = v44 + v45;
  sub_100284F14(v44 + v45);
  v47 = ceil(v46);
  v48 = floor(v46);
  if (v46 >= 0.0)
    v47 = v48;
  v51 = (uint64_t)v47;
  v57 = 1.0;
  v49 = sub_10028EE24(&v53, &v51, (uint64_t *)&v55, &v57);
  if (v49 != 0.0
    && ((*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v49) > v57 * 2.22044605e-16))
  {
    return 0;
  }
  if (v51 == v53 && v52 == v54)
    return 1;
  return (*(_QWORD *)&v55 - v51) * (v51 - v53) + (v56 - v52) * (v52 - v54) < 1;
}

uint64_t sub_1002A667C(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  void *v44[2];
  void *__p[2];
  __int128 v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD **)(v12 + 8);
  v13 = (_QWORD *)(v12 + 8);
  v14 = v15;
  if (!v15)
    goto LABEL_11;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                              + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v11) & 0xF)
                  + 24);
  v17 = v13;
  do
  {
    v18 = v14[4];
    v19 = v18 < v16;
    if (v18 >= v16)
      v20 = v14;
    else
      v20 = v14 + 1;
    if (!v19)
      v17 = v14;
    v14 = (_QWORD *)*v20;
  }
  while (*v20);
  if (v17 == v13 || v16 < v17[4])
LABEL_11:
    v17 = v13;
  v21 = (uint64_t)(v17 + 5);
  v48 = 0;
  v49 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  if (!sub_1002A6A08(a1, (uint64_t)&v48, v11, v17 + 5, a6))
  {
    v31 = 0;
    goto LABEL_70;
  }
  v22 = *(_QWORD *)(a1 + 16);
  v43 = v21;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  if ((sub_1002A95BC((uint64_t)&v43, v22) & 1) != 0)
  {
    v23 = sub_1002A9BF8(&v43, (uint64_t *)&v48);
    v47 = v23;
    if (v23)
    {
      v24 = v44[0];
      if (v44[0] != v44[1])
      {
        if (*(_QWORD *)(v43 + 8))
        {
          v25 = -1;
          v26 = -1;
          v27 = -1;
          while (2)
          {
            v28 = v24[2];
            v29 = *(_QWORD **)(v43 + 8);
            do
            {
              v30 = v29[4];
              if (v28 >= v30)
              {
                if (v30 >= v28)
                  goto LABEL_19;
                ++v29;
              }
              v29 = (_QWORD *)*v29;
            }
            while (v29);
            if (v26 < 0 || v27 == v28)
            {
              v26 = *v24;
              v25 = *((_DWORD *)v24 + 2);
              v27 = v24[2];
LABEL_19:
              v24 += 4;
              if (v24 == v44[1])
                goto LABEL_64;
              continue;
            }
            break;
          }
        }
        else
        {
          v26 = -1;
          v39 = -1;
          do
          {
            if (v26 < 0)
            {
              v39 = v24[2];
            }
            else if (v39 != v24[2])
            {
              goto LABEL_31;
            }
            v40 = *v24;
            v24 += 4;
            v26 = v40;
          }
          while (v24 != v44[1]);
          v25 = *((_DWORD *)v24 - 6);
LABEL_64:
          if ((v26 & 0x8000000000000000) == 0)
            goto LABEL_65;
        }
      }
    }
  }
  else
  {
    v47 = 0;
  }
LABEL_31:
  if (sub_1002A6D18(a1, a2, v21, a3, (uint64_t *)&v48, a4, a5))
    goto LABEL_66;
  if (!v47)
    goto LABEL_61;
  v32 = v44[0];
  if (v44[0] == v44[1])
    goto LABEL_61;
  if (*(_QWORD *)(v43 + 8))
  {
    v25 = -1;
    v26 = -1;
    v33 = -1;
    while (2)
    {
      v34 = v32[2];
      v35 = *(_QWORD **)(v43 + 8);
      do
      {
        v36 = v35[4];
        if (v34 >= v36)
        {
          if (v36 >= v34)
            goto LABEL_37;
          ++v35;
        }
        v35 = (_QWORD *)*v35;
      }
      while (v35);
      if (v26 < 0 || v33 == v34)
      {
        v26 = *v32;
        v25 = *((_DWORD *)v32 + 2);
        v33 = v32[2];
LABEL_37:
        v32 += 4;
        if (v32 == v44[1])
          goto LABEL_60;
        continue;
      }
      goto LABEL_61;
    }
  }
  v26 = -1;
  v37 = -1;
  do
  {
    if (v26 < 0)
    {
      v37 = v32[2];
    }
    else if (v37 != v32[2])
    {
      goto LABEL_61;
    }
    v38 = *v32;
    v32 += 4;
    v26 = v38;
  }
  while (v32 != v44[1]);
  v25 = *((_DWORD *)v32 - 6);
LABEL_60:
  if ((v26 & 0x8000000000000000) == 0)
  {
LABEL_65:
    *a2 = v26;
    *a3 = v25;
LABEL_66:
    v31 = 1;
    v41 = __p[1];
    if (!__p[1])
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_61:
  v31 = 0;
  v41 = __p[1];
  if (__p[1])
  {
LABEL_67:
    *(_QWORD *)&v46 = v41;
    operator delete(v41);
  }
LABEL_68:
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
LABEL_70:
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  return v31;
}

void sub_1002A698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_1002A6F88(&a9);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_1002A6A08(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t v43;

  v8 = a4 + 1;
  v9 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 != a4 + 1)
  {
    while (1)
    {
      v11 = v9[4];
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                      + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v11) & 0xF);
      if (*(_BYTE *)(v12 + 32))
        goto LABEL_45;
      v13 = v12 + 40;
      v14 = *(uint64_t **)a1;
      v15 = *(_QWORD **)(a1 + 8);
      if (v11 != a3)
      {
        sub_10029F104((char **)a2, (double *)v12, v13, v9[4], 0, *(uint64_t **)a1, *(_QWORD **)(a1 + 8), 0);
        sub_10029F104((char **)a2, (double *)v12, v12 + 208, v11, 1, *(uint64_t **)a1, *(_QWORD **)(a1 + 8), 0);
        goto LABEL_45;
      }
      v16 = sub_10029F104((char **)a2, (double *)v12, v13, a3, 0, *(uint64_t **)a1, *(_QWORD **)(a1 + 8), 0);
      v18 = *(_QWORD *)(v12 + 48);
      if (v18 == *a5)
      {
        v19 = *(_QWORD *)(v12 + 64);
        if (v19 == a5[2])
        {
          v20 = *(_QWORD *)(v12 + 56);
          if (v20 == a5[1])
            break;
        }
      }
LABEL_26:
      v27 = *(uint64_t **)a1;
      v28 = *(_QWORD **)(a1 + 8);
      v29 = sub_10029F104((char **)a2, (double *)v12, v12 + 208, a3, 1, *(uint64_t **)a1, v28, 0);
      v31 = *(_QWORD *)(v12 + 216);
      if (v31 == *a5)
      {
        v32 = *(_QWORD *)(v12 + 232);
        if (v32 == a5[2])
        {
          v33 = *(_QWORD *)(v12 + 224);
          if (v33 == a5[1])
          {
            v34 = *(_QWORD *)(v12 + 240);
            v35 = a5[3];
            v36 = __OFSUB__(v34, v35);
            v37 = v34 - v35;
            if (v31)
            {
              if (v37 < 0 == v36)
                goto LABEL_41;
              if (v32 >= 0)
                v38 = (uint64_t *)(*(_QWORD *)(*v28 + 48 * v33 + 24) + 24 * v32);
              else
                v38 = (uint64_t *)(*v28 + 48 * v33);
            }
            else
            {
              if (v37 < 0 == v36)
              {
LABEL_41:
                v39 = *(_QWORD *)(a2 + 40);
                if (!v39 || v37 < *(_QWORD *)(a2 + 48))
                {
                  *(double *)(a2 + 24) = v29;
                  *(_QWORD *)(a2 + 32) = v30;
                  *(_QWORD *)(a2 + 48) = v37;
                }
                *(_QWORD *)(a2 + 40) = v39 + 1;
                goto LABEL_45;
              }
              if (v32 >= 0)
                v38 = (uint64_t *)(v27[3] + 24 * v32);
              else
                v38 = v27;
            }
            v37 = v37 + ((v38[1] - *v38) >> 4) - 1;
            goto LABEL_41;
          }
        }
      }
LABEL_45:
      v40 = (_QWORD *)v9[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v9[2];
          v42 = *v41 == (_QWORD)v9;
          v9 = v41;
        }
        while (!v42);
      }
      v9 = v41;
      if (v41 == v8)
        goto LABEL_51;
    }
    v21 = *(_QWORD *)(v12 + 72);
    v22 = a5[3];
    v23 = __OFSUB__(v21, v22);
    v24 = v21 - v22;
    if (v18)
    {
      if (v24 < 0 == v23)
        goto LABEL_22;
      if (v19 >= 0)
        v25 = (uint64_t *)(*(_QWORD *)(*v15 + 48 * v20 + 24) + 24 * v19);
      else
        v25 = (uint64_t *)(*v15 + 48 * v20);
    }
    else
    {
      if (v24 < 0 == v23)
      {
LABEL_22:
        v26 = *(_QWORD *)(a2 + 40);
        if (!v26 || v24 < *(_QWORD *)(a2 + 48))
        {
          *(double *)(a2 + 24) = v16;
          *(_QWORD *)(a2 + 32) = v17;
          *(_QWORD *)(a2 + 48) = v24;
        }
        *(_QWORD *)(a2 + 40) = v26 + 1;
        goto LABEL_26;
      }
      if (v19 >= 0)
        v25 = (uint64_t *)(v14[3] + 24 * v19);
      else
        v25 = v14;
    }
    v24 = v24 + ((v25[1] - *v25) >> 4) - 1;
    goto LABEL_22;
  }
LABEL_51:
  v43 = *(_QWORD *)(a2 + 40);
  if (v43)
    sub_1002A6FC8(a2, (double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)+ (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)a3) & 0xF)));
  return v43 != 0;
}

BOOL sub_1002A6D18(uint64_t a1, _QWORD *a2, uint64_t a3, _DWORD *a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  int v38;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *a5;
  v10 = (a5[1] - *a5) / 112;
  if (a5[1] == *a5)
  {
LABEL_54:
    v14 = -1;
    if (v10 >= 2)
    {
LABEL_18:
      v20 = 0;
      v21 = 1;
      v22 = *(_QWORD **)(a3 + 8);
      while (1)
      {
        v24 = *(_QWORD *)(v9 + 112 * v21 + 16);
        if (v24 > v14)
          return v20 > 0;
        if (v24 != v14 || *(_DWORD *)(v9 + 112 * v21 + 44) != 1)
          goto LABEL_20;
        v26 = v9 + 112 * v21;
        v27 = *(_QWORD *)(v26 + 32);
        v28 = *(_QWORD *)(v8 + (((unint64_t)(*(_QWORD *)(v7 + 32) + v27) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 376 * ((*(_DWORD *)(v7 + 32) + (_DWORD)v27) & 0xF)
            + 40;
        v29 = *(_DWORD *)(v26 + 40);
        if (*(_BYTE *)(v28 + 168 * v29 + 165))
          goto LABEL_20;
        v30 = v28 + 168 * v29;
        v32 = *(_QWORD *)(v30 + 112);
        v31 = *(_QWORD *)(v30 + 120);
        if (v32 || v31 == 0)
          goto LABEL_20;
        v34 = *(_QWORD *)(v28 + 168 * v29 + 96);
        if (v34 == -1)
        {
          v34 = *(_QWORD *)(v28 + 168 * v29 + 88);
          if (!v22)
          {
LABEL_43:
            v37 = 2;
            if (v27 == a6)
              goto LABEL_46;
            goto LABEL_49;
          }
        }
        else if (!v22)
        {
          goto LABEL_43;
        }
        v35 = v22;
        while (1)
        {
          v36 = v35[4];
          if (v34 >= v36)
            break;
LABEL_39:
          v35 = (_QWORD *)*v35;
          if (!v35)
            goto LABEL_43;
        }
        if (v36 < v34)
          break;
        v37 = 1;
        if (v27 == a6)
        {
LABEL_46:
          if (v29 == a7)
          {
            v38 = 4;
            if (v20 < 4)
              goto LABEL_19;
            goto LABEL_20;
          }
        }
LABEL_49:
        if (v27 == a6)
          v38 = 3;
        else
          v38 = v37;
        if (v38 > v20)
        {
LABEL_19:
          v23 = v9 + 112 * v21;
          *a2 = *(_QWORD *)(v23 + 32);
          *a4 = *(_DWORD *)(v23 + 40);
          v20 = v38;
        }
LABEL_20:
        if (++v21 == v10)
          return v20 > 0;
      }
      ++v35;
      goto LABEL_39;
    }
  }
  else
  {
    v11 = *(_QWORD *)(v7 + 32);
    if (v10 <= 1)
      v12 = 1;
    else
      v12 = (a5[1] - *a5) / 112;
    v13 = (_DWORD *)(v9 + 44);
    while (1)
    {
      v14 = *(_QWORD *)(v13 - 7);
      if (v14 && *v13 != 0)
      {
        v16 = *(_QWORD *)(v8 + (((unint64_t)(*(_QWORD *)(v13 - 3) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 376 * ((*(v13 - 3) + (_DWORD)v11) & 0xF)
            + 40;
        v17 = *(v13 - 1);
        v18 = *(_DWORD *)(v16 + 168 * v17);
        v19 = v18 == 4 || v18 == 1;
        if (v19
          && *(_QWORD *)(*(_QWORD *)(v8 + (((unint64_t)(*(_QWORD *)(v9 + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 376 * ((*(_DWORD *)(v9 + 32) + (_DWORD)v11) & 0xF)
                       + 168 * *(int *)(v9 + 40)
                       + 184) == *(_QWORD *)(v16 + 168 * v17 + 144))
        {
          break;
        }
      }
      v13 += 28;
      if (!--v12)
        goto LABEL_54;
    }
    if (v10 >= 2)
      goto LABEL_18;
  }
  v20 = 0;
  return v20 > 0;
}

_QWORD *sub_1002A6F88(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1002A6FC8(uint64_t a1, double *a2)
{
  __int128 *v3;
  __n128 *v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double *v14[3];
  double *v15[3];

  v3 = *(__int128 **)a1;
  v4 = *(__n128 **)(a1 + 8);
  v15[0] = (double *)(a1 + 24);
  v15[1] = a2;
  v5 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (char *)v3) >> 4));
  v15[2] = (double *)(a1 + 56);
  v14[0] = (double *)(a1 + 24);
  v14[1] = a2;
  v14[2] = (double *)(a1 + 56);
  if (v4 == (__n128 *)v3)
    v6 = 0;
  else
    v6 = v5;
  sub_1002A7634(v3, v4, v14, v6, 1);
  v7 = *(__int128 **)a1;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v8)
  {
    *((_QWORD *)v7 + 2) = 0;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v8 >> 4)) >= 2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = sub_1002A70D4(v15, (double *)&v7[v9], (double *)&v7[v9 + 7]);
        v7 = *(__int128 **)a1;
        v13 = *(_QWORD *)(a1 + 8);
        v10 += v12;
        *(_QWORD *)(*(_QWORD *)a1 + v9 * 16 + 128) = v10;
        ++v11;
        v9 += 7;
      }
      while (v11 < 0x6DB6DB6DB6DB6DB7 * ((v13 - (uint64_t)v7) >> 4));
    }
  }
}

uint64_t sub_1002A70D4(double **a1, double *a2, double *a3)
{
  double *v6;
  double *v7;
  double v8;
  int v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t result;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  BOOL v48;
  double *v49;
  double v50;
  double v51;
  int v52;
  double *v53;
  double v54;
  int v55;
  double v56;
  double v57;

  v6 = *a1;
  v7 = a1[1];
  v57 = 1.0;
  v8 = sub_10005C128(v6, v7, a2, &v57);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v57 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v57 = 1.0;
  v13 = sub_10005C128(v11, v12, a3, &v57);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_87;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v57 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_87;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_85;
      v46 = fabs(v26);
      v47 = 2.22044605e-16;
      if (v46 >= 1.0)
        v47 = v46 * 2.22044605e-16;
      if (v46 > v47)
        goto LABEL_85;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_85;
      v28 = fabs(v27);
      v29 = 2.22044605e-16;
      if (v28 >= 1.0)
        v29 = v28 * 2.22044605e-16;
      if (v28 > v29)
      {
LABEL_85:
        if (v24 * v25 - v26 * *v23 + a2[1] * v27 + v26 * *a2 < 0.0)
          return 1;
      }
    }
    goto LABEL_87;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_59;
      v35 = fabs(v17);
      v36 = 2.22044605e-16;
      if (v35 >= 1.0)
        v36 = v35 * 2.22044605e-16;
      if (v35 > v36)
        goto LABEL_59;
    }
    if (v16 == 0.0)
      goto LABEL_26;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_59;
    v37 = fabs(v18);
    v38 = 2.22044605e-16;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    if (v37 <= v38)
    {
LABEL_26:
      v22 = 0;
      if (v17 != 0.0)
        goto LABEL_65;
    }
    else
    {
LABEL_59:
      v39 = v19 + a2[1] * v18 + v17 * *a2;
      if (v39 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      if (v39 == 0.0)
        v22 = 0;
      if (v17 != 0.0)
      {
LABEL_65:
        if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_75;
        v40 = fabs(v17);
        v41 = 2.22044605e-16;
        if (v40 >= 1.0)
          v41 = v40 * 2.22044605e-16;
        if (v40 > v41)
          goto LABEL_75;
      }
    }
    if (v16 == 0.0)
      goto LABEL_70;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v43 = fabs(v18);
      v44 = 2.22044605e-16;
      if (v43 >= 1.0)
        v44 = v43 * 2.22044605e-16;
      if (v43 <= v44)
      {
LABEL_70:
        v42 = 0;
        return v22 < v42;
      }
    }
LABEL_75:
    v45 = v19 + a3[1] * v18 + v17 * *a3;
    if (v45 > 0.0)
      v42 = 1;
    else
      v42 = -1;
    if (v45 == 0.0)
      v42 = 0;
    return v22 < v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_48;
    v30 = fabs(v17);
    v31 = 2.22044605e-16;
    if (v30 >= 1.0)
      v31 = v30 * 2.22044605e-16;
    if (v30 > v31)
      goto LABEL_48;
  }
  if (v16 == 0.0)
    goto LABEL_16;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_48;
  v32 = fabs(v18);
  v33 = 2.22044605e-16;
  if (v32 >= 1.0)
    v33 = v32 * 2.22044605e-16;
  if (v32 <= v33)
  {
LABEL_16:
    v20 = 0;
  }
  else
  {
LABEL_48:
    v20 = 0;
    result = 0;
    if (v19 + a3[1] * v18 + v17 * *a3 < 0.0)
      return result;
  }
LABEL_87:
  v48 = v9 <= v20;
  if (v9 == v20)
  {
    v49 = a1[1];
    v57 = 1.0;
    v50 = sub_10005C128(v49, a2, a3, &v57);
    if (v50 == 0.0)
      return 0;
    if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v50 > 0.0)
        v52 = 1;
      else
        v52 = -1;
    }
    else
    {
      v51 = fabs(v50);
      if (v50 > 0.0)
        v52 = 1;
      else
        v52 = -1;
      if (v51 <= v57 * 2.22044605e-16)
        return 0;
    }
    v53 = a1[1];
    v57 = 1.0;
    v54 = sub_10005C128(v53, a3, a2, &v57);
    if (v54 != 0.0)
    {
      if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v54 > 0.0)
          v55 = 1;
        else
          v55 = -1;
        goto LABEL_110;
      }
      v56 = fabs(v54);
      if (v54 > 0.0)
        v55 = 1;
      else
        v55 = -1;
      if (v56 > v57 * 2.22044605e-16)
        goto LABEL_110;
    }
    v55 = 0;
LABEL_110:
    if (v52 + v55)
      v48 = 1;
    else
      v48 = v55 <= v52;
  }
  return !v48;
}

void sub_1002A7634(__int128 *a1, __n128 *a2, double **a3, uint64_t a4, char a5)
{
  __n128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 *v36;
  char v37;
  BOOL v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  BOOL v86;
  uint64_t v87;
  __int128 *v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __n128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __n128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __n128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __n128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;

uint64_t sub_1002A7D0C(double **a1, uint64_t a2, uint64_t a3)
{
  double *v6;
  double *v7;
  double v8;
  int v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  int v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t result;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  double v48;
  BOOL v49;
  double *v50;
  double v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  int v65;
  double *v66;
  double v67;
  int v68;
  double v69;
  double v70;

  v6 = *a1;
  v7 = a1[1];
  v70 = 1.0;
  v8 = sub_10005C128(v6, v7, (double *)a2, &v70);
  if (v8 == 0.0)
  {
LABEL_2:
    v9 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
  }
  else
  {
    v10 = fabs(v8);
    if (v8 > 0.0)
      v9 = 1;
    else
      v9 = -1;
    if (v10 <= v70 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v11 = *a1;
  v12 = a1[1];
  v70 = 1.0;
  v13 = sub_10005C128(v11, v12, (double *)a3, &v70);
  if (v13 == 0.0)
    goto LABEL_13;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v9)
      goto LABEL_91;
    goto LABEL_32;
  }
  v21 = fabs(v13);
  if (v13 > 0.0)
    v20 = 1;
  else
    v20 = -1;
  if (v21 > v70 * 2.22044605e-16)
  {
    if (v9)
      goto LABEL_91;
LABEL_32:
    v23 = a1[1];
    v24 = v23[1];
    v25 = (*a1)[1] - v24;
    v26 = *v23 - **a1;
    v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_89;
      v47 = fabs(v26);
      v48 = 2.22044605e-16;
      if (v47 >= 1.0)
        v48 = v47 * 2.22044605e-16;
      if (v47 > v48)
        goto LABEL_89;
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_89;
      v28 = fabs(v27);
      v29 = 2.22044605e-16;
      if (v28 >= 1.0)
        v29 = v28 * 2.22044605e-16;
      if (v28 > v29)
      {
LABEL_89:
        if (v24 * v25 - v26 * *v23 + *(double *)(a2 + 8) * v27 + v26 * *(double *)a2 < 0.0)
          return 1;
      }
    }
    goto LABEL_91;
  }
LABEL_13:
  v14 = a1[1];
  v15 = v14[1];
  v16 = (*a1)[1] - v15;
  v17 = *v14 - **a1;
  v18 = -v16;
  v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_59;
      v35 = fabs(v17);
      v36 = 2.22044605e-16;
      if (v35 >= 1.0)
        v36 = v35 * 2.22044605e-16;
      if (v35 > v36)
        goto LABEL_59;
    }
    if (v16 == 0.0)
      goto LABEL_26;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_59;
    v37 = fabs(v18);
    v38 = 2.22044605e-16;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    if (v37 <= v38)
    {
LABEL_26:
      v22 = 0;
      if (v17 != 0.0)
        goto LABEL_65;
    }
    else
    {
LABEL_59:
      v39 = v19 + *(double *)(a2 + 8) * v18 + v17 * *(double *)a2;
      if (v39 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      if (v39 == 0.0)
        v22 = 0;
      if (v17 != 0.0)
      {
LABEL_65:
        if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_78;
        v40 = fabs(v17);
        v41 = 2.22044605e-16;
        if (v40 >= 1.0)
          v41 = v40 * 2.22044605e-16;
        if (v40 > v41)
          goto LABEL_78;
      }
    }
    if (v16 == 0.0)
      goto LABEL_70;
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v43 = fabs(v18);
      v44 = 2.22044605e-16;
      if (v43 >= 1.0)
        v44 = v43 * 2.22044605e-16;
      if (v43 <= v44)
      {
LABEL_70:
        v42 = v22 < 0;
        if (!v22)
          goto LABEL_93;
        return v42;
      }
    }
LABEL_78:
    v45 = v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3;
    if (v45 > 0.0)
      v46 = 1;
    else
      v46 = -1;
    if (v45 == 0.0)
      v46 = 0;
    v42 = v22 < v46;
    if (v22 == v46)
    {
LABEL_93:
      v52 = *(_DWORD *)(a2 + 44);
      v53 = *(_DWORD *)(a3 + 44);
      v42 = v52 < v53;
      if (v52 == v53)
      {
        v54 = *(_QWORD *)(a2 + 32);
        v55 = *(_QWORD *)(a3 + 32);
        v42 = v54 < v55;
        if (v54 == v55)
        {
          v56 = *(_QWORD *)(a2 + 72);
          v57 = *(_QWORD *)(a3 + 72);
          v42 = v56 < v57;
          if (v56 == v57)
          {
            v58 = *(_QWORD *)(a2 + 80);
            v59 = *(_QWORD *)(a3 + 80);
            v42 = v58 < v59;
            if (v58 == v59)
            {
              v60 = *(_QWORD *)(a2 + 88);
              v61 = *(_QWORD *)(a3 + 88);
              v42 = v60 < v61;
              if (v60 == v61)
              {
                v62 = *(_QWORD *)(a2 + 104);
                v63 = *(_QWORD *)(a3 + 104);
                v42 = v62 < v63;
                if (v62 == v63)
                  return *(_QWORD *)(a2 + 96) < *(_QWORD *)(a3 + 96);
              }
            }
          }
        }
      }
    }
    return v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_48;
    v30 = fabs(v17);
    v31 = 2.22044605e-16;
    if (v30 >= 1.0)
      v31 = v30 * 2.22044605e-16;
    if (v30 > v31)
      goto LABEL_48;
  }
  if (v16 == 0.0)
    goto LABEL_16;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_48;
  v32 = fabs(v18);
  v33 = 2.22044605e-16;
  if (v32 >= 1.0)
    v33 = v32 * 2.22044605e-16;
  if (v32 <= v33)
  {
LABEL_16:
    v20 = 0;
  }
  else
  {
LABEL_48:
    v20 = 0;
    result = 0;
    if (v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3 < 0.0)
      return result;
  }
LABEL_91:
  v49 = v9 <= v20;
  if (v9 != v20)
    return !v49;
  v50 = a1[1];
  v70 = 1.0;
  v51 = sub_10005C128(v50, (double *)a2, (double *)a3, &v70);
  if (v51 == 0.0)
    goto LABEL_93;
  if ((*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v51 > 0.0)
      v65 = 1;
    else
      v65 = -1;
  }
  else
  {
    v64 = fabs(v51);
    if (v51 > 0.0)
      v65 = 1;
    else
      v65 = -1;
    if (v64 <= v70 * 2.22044605e-16)
      goto LABEL_93;
  }
  v66 = a1[1];
  v70 = 1.0;
  v67 = sub_10005C128(v66, (double *)a3, (double *)a2, &v70);
  if (v67 != 0.0)
  {
    if ((*(_QWORD *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v67 > 0.0)
        v68 = 1;
      else
        v68 = -1;
      goto LABEL_120;
    }
    v69 = fabs(v67);
    if (v67 > 0.0)
      v68 = 1;
    else
      v68 = -1;
    if (v69 > v70 * 2.22044605e-16)
      goto LABEL_120;
  }
  v68 = 0;
LABEL_120:
  if (v65 + v68)
    goto LABEL_93;
  v49 = v68 <= v65;
  return !v49;
}

uint64_t sub_1002A82E8(__int128 *a1, __int128 *a2, __int128 *a3, double **a4)
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v8 = sub_1002A7D0C(a4, (uint64_t)a2, (uint64_t)a1);
  result = sub_1002A7D0C(a4, (uint64_t)a3, (uint64_t)a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v57 = a1[4];
      v62 = a1[5];
      v67 = a1[6];
      v37 = *a1;
      v42 = a1[1];
      v47 = a1[2];
      v52 = a1[3];
      v11 = a3[1];
      v10 = a3[2];
      *a1 = *a3;
      a1[1] = v11;
      a1[2] = v10;
      v12 = a3[6];
      v14 = a3[3];
      v13 = a3[4];
      a1[5] = a3[5];
      a1[6] = v12;
      a1[3] = v14;
      a1[4] = v13;
      *a3 = v37;
      a3[1] = v42;
      a3[5] = v62;
      a3[6] = v67;
      a3[4] = v57;
      v15 = v47;
      v16 = v52;
      result = 1;
LABEL_10:
      a3[2] = v15;
      a3[3] = v16;
      return result;
    }
    v60 = a1[4];
    v65 = a1[5];
    v70 = a1[6];
    v40 = *a1;
    v45 = a1[1];
    v50 = a1[2];
    v55 = a1[3];
    v28 = a2[1];
    v27 = a2[2];
    *a1 = *a2;
    a1[1] = v28;
    a1[2] = v27;
    v29 = a2[6];
    v31 = a2[3];
    v30 = a2[4];
    a1[5] = a2[5];
    a1[6] = v29;
    a1[3] = v31;
    a1[4] = v30;
    *a2 = v40;
    a2[1] = v45;
    a2[5] = v65;
    a2[6] = v70;
    a2[2] = v50;
    a2[3] = v55;
    a2[4] = v60;
    if (sub_1002A7D0C(a4, (uint64_t)a3, (uint64_t)a2))
    {
      v61 = a2[4];
      v66 = a2[5];
      v71 = a2[6];
      v41 = *a2;
      v46 = a2[1];
      v51 = a2[2];
      v56 = a2[3];
      v33 = a3[1];
      v32 = a3[2];
      *a2 = *a3;
      a2[1] = v33;
      a2[2] = v32;
      v34 = a3[6];
      v36 = a3[3];
      v35 = a3[4];
      a2[5] = a3[5];
      a2[6] = v34;
      a2[3] = v36;
      a2[4] = v35;
      *a3 = v41;
      a3[1] = v46;
      a3[5] = v66;
      a3[6] = v71;
      a3[4] = v61;
      v15 = v51;
      v16 = v56;
      result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if ((_DWORD)result)
  {
    v58 = a2[4];
    v63 = a2[5];
    v68 = a2[6];
    v38 = *a2;
    v43 = a2[1];
    v48 = a2[2];
    v53 = a2[3];
    v18 = a3[1];
    v17 = a3[2];
    *a2 = *a3;
    a2[1] = v18;
    a2[2] = v17;
    v19 = a3[6];
    v21 = a3[3];
    v20 = a3[4];
    a2[5] = a3[5];
    a2[6] = v19;
    a2[3] = v21;
    a2[4] = v20;
    *a3 = v38;
    a3[1] = v43;
    a3[5] = v63;
    a3[6] = v68;
    a3[2] = v48;
    a3[3] = v53;
    a3[4] = v58;
    if (!sub_1002A7D0C(a4, (uint64_t)a2, (uint64_t)a1))
      return 1;
    v59 = a1[4];
    v64 = a1[5];
    v69 = a1[6];
    v39 = *a1;
    v44 = a1[1];
    v49 = a1[2];
    v54 = a1[3];
    v23 = a2[1];
    v22 = a2[2];
    *a1 = *a2;
    a1[1] = v23;
    a1[2] = v22;
    v24 = a2[6];
    v26 = a2[3];
    v25 = a2[4];
    a1[5] = a2[5];
    a1[6] = v24;
    a1[3] = v26;
    a1[4] = v25;
    *a2 = v39;
    a2[1] = v44;
    a2[5] = v64;
    a2[6] = v69;
    result = 2;
    a2[2] = v49;
    a2[3] = v54;
    a2[4] = v59;
  }
  return result;
}

__int128 *sub_1002A859C(__int128 *a1, __int128 *a2, double **a3)
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 *v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = a2;
  v6 = a1[5];
  v43 = a1[4];
  v44 = v6;
  v45 = a1[6];
  v7 = a1[1];
  v39 = *a1;
  v40 = v7;
  v8 = a1[3];
  v41 = a1[2];
  v42 = v8;
  if ((sub_1002A7D0C(a3, (uint64_t)&v39, (uint64_t)(a2 - 7)) & 1) != 0)
  {
    v9 = a1;
    do
      v9 += 7;
    while ((sub_1002A7D0C(a3, (uint64_t)&v39, (uint64_t)v9) & 1) == 0);
  }
  else
  {
    v10 = (unint64_t)(a1 + 7);
    do
    {
      v9 = (__int128 *)v10;
      if (v10 >= (unint64_t)v4)
        break;
      v11 = sub_1002A7D0C(a3, (uint64_t)&v39, v10);
      v10 = (unint64_t)(v9 + 7);
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 7;
    while ((sub_1002A7D0C(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    v12 = *v9;
    v13 = v9[2];
    v47 = v9[1];
    v48 = v13;
    v46 = v12;
    v14 = v9[3];
    v15 = v9[4];
    v16 = v9[6];
    v51 = v9[5];
    v52 = v16;
    v49 = v14;
    v50 = v15;
    v17 = v4[6];
    v19 = v4[3];
    v18 = v4[4];
    v9[5] = v4[5];
    v9[6] = v17;
    v9[3] = v19;
    v9[4] = v18;
    v20 = *v4;
    v21 = v4[2];
    v9[1] = v4[1];
    v9[2] = v21;
    *v9 = v20;
    v22 = v46;
    v23 = v48;
    v4[1] = v47;
    v4[2] = v23;
    *v4 = v22;
    v24 = v49;
    v25 = v50;
    v26 = v52;
    v4[5] = v51;
    v4[6] = v26;
    v4[3] = v24;
    v4[4] = v25;
    do
      v9 += 7;
    while (!sub_1002A7D0C(a3, (uint64_t)&v39, (uint64_t)v9));
    do
      v4 -= 7;
    while ((sub_1002A7D0C(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  v27 = v9 - 7;
  if (v9 - 7 != a1)
  {
    v28 = *v27;
    v29 = *(v9 - 5);
    a1[1] = *(v9 - 6);
    a1[2] = v29;
    *a1 = v28;
    v30 = *(v9 - 4);
    v31 = *(v9 - 3);
    v32 = *(v9 - 1);
    a1[5] = *(v9 - 2);
    a1[6] = v32;
    a1[3] = v30;
    a1[4] = v31;
  }
  v33 = v39;
  v34 = v41;
  *(v9 - 6) = v40;
  *(v9 - 5) = v34;
  *v27 = v33;
  v35 = v42;
  v36 = v43;
  v37 = v45;
  *(v9 - 2) = v44;
  *(v9 - 1) = v37;
  *(v9 - 4) = v35;
  *(v9 - 3) = v36;
  return v9;
}

__int128 *sub_1002A8760(__int128 *a1, unint64_t a2, double **a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v6 = 0;
  v7 = a1[5];
  v42 = a1[4];
  v43 = v7;
  v44 = a1[6];
  v8 = a1[1];
  v38 = *a1;
  v39 = v8;
  v9 = a1[3];
  v40 = a1[2];
  v41 = v9;
  do
    v6 += 7;
  while ((sub_1002A7D0C(a3, (uint64_t)&a1[v6], (uint64_t)&v38) & 1) != 0);
  v10 = &a1[v6];
  v11 = &a1[v6 - 7];
  if (v6 == 7)
  {
    do
    {
      if ((unint64_t)v10 >= a2)
        break;
      a2 -= 112;
    }
    while ((sub_1002A7D0C(a3, a2, (uint64_t)&v38) & 1) == 0);
  }
  else
  {
    do
      a2 -= 112;
    while (!sub_1002A7D0C(a3, a2, (uint64_t)&v38));
  }
  if ((unint64_t)v10 < a2)
  {
    v12 = &a1[v6];
    v13 = (__int128 *)a2;
    do
    {
      v14 = v12[5];
      v49 = v12[4];
      v50 = v14;
      v51 = v12[6];
      v15 = v12[1];
      v45 = *v12;
      v46 = v15;
      v16 = v12[3];
      v47 = v12[2];
      v48 = v16;
      v18 = v13[3];
      v17 = v13[4];
      v19 = v13[6];
      v12[5] = v13[5];
      v12[6] = v19;
      v12[3] = v18;
      v12[4] = v17;
      v21 = v13[1];
      v20 = v13[2];
      *v12 = *v13;
      v12[1] = v21;
      v12[2] = v20;
      v22 = v45;
      v23 = v47;
      v13[1] = v46;
      v13[2] = v23;
      *v13 = v22;
      v24 = v48;
      v25 = v49;
      v26 = v51;
      v13[5] = v50;
      v13[6] = v26;
      v13[3] = v24;
      v13[4] = v25;
      do
        v12 += 7;
      while ((sub_1002A7D0C(a3, (uint64_t)v12, (uint64_t)&v38) & 1) != 0);
      do
        v13 -= 7;
      while (!sub_1002A7D0C(a3, (uint64_t)v13, (uint64_t)&v38));
    }
    while (v12 < v13);
    v11 = v12 - 7;
  }
  if (v11 != a1)
  {
    v27 = *v11;
    v28 = v11[2];
    a1[1] = v11[1];
    a1[2] = v28;
    *a1 = v27;
    v29 = v11[3];
    v30 = v11[4];
    v31 = v11[6];
    a1[5] = v11[5];
    a1[6] = v31;
    a1[3] = v29;
    a1[4] = v30;
  }
  v32 = v38;
  v33 = v40;
  v11[1] = v39;
  v11[2] = v33;
  *v11 = v32;
  v34 = v41;
  v35 = v42;
  v36 = v44;
  v11[5] = v43;
  v11[6] = v36;
  v11[3] = v34;
  v11[4] = v35;
  return v11;
}

BOOL sub_1002A892C(__int128 *a1, __int128 *a2, double **a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v6 = 0x6DB6DB6DB6DB6DB7 * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 7;
      if (!sub_1002A7D0C(a3, (uint64_t)(a2 - 7), (uint64_t)a1))
        return 1;
      v9 = a1[5];
      v77 = a1[4];
      v78 = v9;
      v79 = a1[6];
      v10 = a1[1];
      v73 = *a1;
      v74 = v10;
      v11 = a1[3];
      v75 = a1[2];
      v76 = v11;
      v13 = *(a2 - 6);
      v12 = *(a2 - 5);
      *a1 = *v8;
      a1[1] = v13;
      a1[2] = v12;
      v14 = *(a2 - 1);
      v16 = *(a2 - 4);
      v15 = *(a2 - 3);
      a1[5] = *(a2 - 2);
      a1[6] = v14;
      a1[3] = v16;
      a1[4] = v15;
      v17 = v74;
      *v8 = v73;
      *(a2 - 6) = v17;
      v18 = v79;
      v19 = v77;
      *(a2 - 2) = v78;
      *(a2 - 1) = v18;
      *(a2 - 3) = v19;
      v20 = v75;
      v21 = v76;
      goto LABEL_20;
    case 3:
      sub_1002A82E8(a1, a1 + 7, a2 - 7, a3);
      return 1;
    case 4:
      v8 = a1 + 7;
      v38 = a1 + 14;
      v39 = a2 - 7;
      sub_1002A82E8(a1, a1 + 7, a1 + 14, a3);
      if (!sub_1002A7D0C(a3, (uint64_t)v39, (uint64_t)(a1 + 14)))
        return 1;
      v40 = a1[19];
      v77 = a1[18];
      v78 = v40;
      v79 = a1[20];
      v41 = a1[15];
      v73 = *v38;
      v74 = v41;
      v42 = a1[17];
      v75 = a1[16];
      v76 = v42;
      v44 = v39[1];
      v43 = v39[2];
      *v38 = *v39;
      a1[15] = v44;
      a1[16] = v43;
      v45 = v39[6];
      v47 = v39[3];
      v46 = v39[4];
      a1[19] = v39[5];
      a1[20] = v45;
      a1[17] = v47;
      a1[18] = v46;
      v48 = v74;
      *v39 = v73;
      v39[1] = v48;
      v49 = v79;
      v50 = v77;
      v39[5] = v78;
      v39[6] = v49;
      v51 = v76;
      v39[2] = v75;
      v39[3] = v51;
      v39[4] = v50;
      if (!sub_1002A7D0C(a3, (uint64_t)(a1 + 14), (uint64_t)(a1 + 7)))
        return 1;
      v52 = a1[12];
      v77 = a1[11];
      v78 = v52;
      v79 = a1[13];
      v53 = a1[8];
      v73 = *v8;
      v74 = v53;
      v54 = a1[10];
      v75 = a1[9];
      v76 = v54;
      v55 = a1[15];
      *v8 = *v38;
      a1[8] = v55;
      v56 = a1[20];
      v57 = a1[18];
      a1[12] = a1[19];
      a1[13] = v56;
      v58 = a1[17];
      a1[9] = a1[16];
      a1[10] = v58;
      a1[11] = v57;
      v59 = v74;
      *v38 = v73;
      a1[15] = v59;
      v60 = v75;
      v61 = v76;
      v62 = v79;
      a1[19] = v78;
      a1[20] = v62;
      v63 = v77;
      a1[17] = v61;
      a1[18] = v63;
      a1[16] = v60;
      if (!sub_1002A7D0C(a3, (uint64_t)(a1 + 7), (uint64_t)a1))
        return 1;
      v64 = a1[5];
      v77 = a1[4];
      v78 = v64;
      v79 = a1[6];
      v65 = a1[1];
      v73 = *a1;
      v74 = v65;
      v66 = a1[3];
      v75 = a1[2];
      v76 = v66;
      v67 = a1[8];
      *a1 = *v8;
      a1[1] = v67;
      v68 = a1[13];
      v69 = a1[11];
      a1[5] = a1[12];
      a1[6] = v68;
      v70 = a1[10];
      a1[2] = a1[9];
      a1[3] = v70;
      a1[4] = v69;
      v71 = v74;
      *v8 = v73;
      a1[8] = v71;
      v20 = v75;
      v21 = v76;
      v72 = v79;
      a1[12] = v78;
      a1[13] = v72;
      a1[11] = v77;
LABEL_20:
      result = 1;
      v8[2] = v20;
      v8[3] = v21;
      return result;
    case 5:
      sub_1002A8CF8(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7, a3);
      return 1;
    default:
      v22 = (uint64_t)(a1 + 14);
      sub_1002A82E8(a1, a1 + 7, a1 + 14, a3);
      v23 = a1 + 21;
      if (a1 + 21 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    if (sub_1002A7D0C(a3, (uint64_t)v23, v22))
    {
      v30 = v23[5];
      v77 = v23[4];
      v78 = v30;
      v79 = v23[6];
      v31 = v23[1];
      v73 = *v23;
      v74 = v31;
      v32 = v23[3];
      v33 = v24;
      v75 = v23[2];
      v76 = v32;
      do
      {
        v34 = (__int128 *)((char *)a1 + v33);
        v35 = *(__int128 *)((char *)a1 + v33 + 304);
        v34[25] = *(__int128 *)((char *)a1 + v33 + 288);
        v34[26] = v35;
        v34[27] = *(__int128 *)((char *)a1 + v33 + 320);
        v36 = *(__int128 *)((char *)a1 + v33 + 240);
        v34[21] = *(__int128 *)((char *)a1 + v33 + 224);
        v34[22] = v36;
        v37 = *(__int128 *)((char *)a1 + v33 + 272);
        v34[23] = *(__int128 *)((char *)a1 + v33 + 256);
        v34[24] = v37;
        if (v33 == -224)
        {
          v26 = a1;
          goto LABEL_7;
        }
        v33 -= 112;
      }
      while ((sub_1002A7D0C(a3, (uint64_t)&v73, (uint64_t)(v34 + 7)) & 1) != 0);
      v26 = (__int128 *)((char *)a1 + v33 + 336);
LABEL_7:
      v27 = v78;
      v26[4] = v77;
      v26[5] = v27;
      v26[6] = v79;
      v28 = v74;
      *v26 = v73;
      v26[1] = v28;
      v29 = v76;
      ++v25;
      v26[2] = v75;
      v26[3] = v29;
      if (v25 == 8)
        return v23 + 7 == a2;
    }
    v22 = (uint64_t)v23;
    v24 += 112;
    v23 += 7;
    if (v23 == a2)
      return 1;
  }
}

__n128 sub_1002A8CF8(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, double **a6)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;

  sub_1002A82E8(a1, a2, a3, a6);
  if (sub_1002A7D0C(a6, (uint64_t)a4, (uint64_t)a3))
  {
    v76 = a3[4];
    v83 = a3[5];
    v90 = a3[6];
    v48 = *a3;
    v55 = a3[1];
    v62 = a3[2];
    v69 = a3[3];
    v13 = a4[1];
    v12 = a4[2];
    *a3 = *a4;
    a3[1] = v13;
    a3[2] = v12;
    v14 = a4[6];
    v16 = a4[3];
    v15 = a4[4];
    a3[5] = a4[5];
    a3[6] = v14;
    a3[3] = v16;
    a3[4] = v15;
    *a4 = v48;
    a4[1] = v55;
    a4[5] = v83;
    a4[6] = v90;
    a4[2] = v62;
    a4[3] = v69;
    a4[4] = v76;
    if (sub_1002A7D0C(a6, (uint64_t)a3, (uint64_t)a2))
    {
      v77 = a2[4];
      v84 = a2[5];
      v91 = a2[6];
      v49 = *a2;
      v56 = a2[1];
      v63 = a2[2];
      v70 = a2[3];
      v18 = a3[1];
      v17 = a3[2];
      *a2 = *a3;
      a2[1] = v18;
      a2[2] = v17;
      v19 = a3[6];
      v21 = a3[3];
      v20 = a3[4];
      a2[5] = a3[5];
      a2[6] = v19;
      a2[3] = v21;
      a2[4] = v20;
      *a3 = v49;
      a3[1] = v56;
      a3[5] = v84;
      a3[6] = v91;
      a3[2] = v63;
      a3[3] = v70;
      a3[4] = v77;
      if (sub_1002A7D0C(a6, (uint64_t)a2, (uint64_t)a1))
      {
        v78 = a1[4];
        v85 = a1[5];
        v92 = a1[6];
        v50 = *a1;
        v57 = a1[1];
        v64 = a1[2];
        v71 = a1[3];
        v23 = a2[1];
        v22 = a2[2];
        *a1 = *a2;
        a1[1] = v23;
        a1[2] = v22;
        v24 = a2[6];
        v26 = a2[3];
        v25 = a2[4];
        a1[5] = a2[5];
        a1[6] = v24;
        a1[3] = v26;
        a1[4] = v25;
        *a2 = v50;
        a2[1] = v57;
        a2[5] = v85;
        a2[6] = v92;
        a2[2] = v64;
        a2[3] = v71;
        a2[4] = v78;
      }
    }
  }
  if (sub_1002A7D0C(a6, (uint64_t)a5, (uint64_t)a4))
  {
    v79 = a4[4];
    v86 = a4[5];
    v93 = a4[6];
    v51 = *a4;
    v58 = a4[1];
    v65 = a4[2];
    v72 = a4[3];
    v29 = a5[1];
    v28 = a5[2];
    *a4 = *a5;
    a4[1] = v29;
    a4[2] = v28;
    v30 = a5[6];
    v32 = a5[3];
    v31 = a5[4];
    a4[5] = a5[5];
    a4[6] = v30;
    a4[3] = v32;
    a4[4] = v31;
    *a5 = v51;
    a5[1] = v58;
    a5[5] = v86;
    a5[6] = v93;
    a5[2] = v65;
    a5[3] = v72;
    a5[4] = v79;
    if (sub_1002A7D0C(a6, (uint64_t)a4, (uint64_t)a3))
    {
      v80 = a3[4];
      v87 = a3[5];
      v94 = a3[6];
      v52 = *a3;
      v59 = a3[1];
      v66 = a3[2];
      v73 = a3[3];
      v34 = a4[1];
      v33 = a4[2];
      *a3 = *a4;
      a3[1] = v34;
      a3[2] = v33;
      v35 = a4[6];
      v37 = a4[3];
      v36 = a4[4];
      a3[5] = a4[5];
      a3[6] = v35;
      a3[3] = v37;
      a3[4] = v36;
      *a4 = v52;
      a4[1] = v59;
      a4[5] = v87;
      a4[6] = v94;
      a4[2] = v66;
      a4[3] = v73;
      a4[4] = v80;
      if (sub_1002A7D0C(a6, (uint64_t)a3, (uint64_t)a2))
      {
        v81 = a2[4];
        v88 = a2[5];
        v95 = a2[6];
        v53 = *a2;
        v60 = a2[1];
        v67 = a2[2];
        v74 = a2[3];
        v39 = a3[1];
        v38 = a3[2];
        *a2 = *a3;
        a2[1] = v39;
        a2[2] = v38;
        v40 = a3[6];
        v42 = a3[3];
        v41 = a3[4];
        a2[5] = a3[5];
        a2[6] = v40;
        a2[3] = v42;
        a2[4] = v41;
        *a3 = v53;
        a3[1] = v60;
        a3[5] = v88;
        a3[6] = v95;
        a3[2] = v67;
        a3[3] = v74;
        a3[4] = v81;
        if (sub_1002A7D0C(a6, (uint64_t)a2, (uint64_t)a1))
        {
          v82 = a1[4];
          v89 = a1[5];
          v96 = a1[6];
          v54 = *a1;
          v61 = a1[1];
          v68 = (__n128)a1[2];
          v75 = a1[3];
          v44 = a2[1];
          v43 = a2[2];
          *a1 = *a2;
          a1[1] = v44;
          a1[2] = v43;
          v45 = a2[6];
          v47 = a2[3];
          v46 = a2[4];
          a1[5] = a2[5];
          a1[6] = v45;
          a1[3] = v47;
          a1[4] = v46;
          *a2 = v54;
          a2[1] = v61;
          a2[5] = v89;
          a2[6] = v96;
          result = v68;
          a2[2] = (__int128)v68;
          a2[3] = v75;
          a2[4] = v82;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1002A9074(uint64_t a1, __n128 *a2, __n128 *a3, double **a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v29;
  _OWORD *v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  BOOL v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 *v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 *v64;
  __n128 *v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  __n128 v72;
  __n128 v73;
  __n128 v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;

  if ((__n128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 112;
    if ((uint64_t)a2 - a1 >= 113)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 112 * v10);
      do
      {
        sub_1002A9418(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_1002A7D0C(a4, (uint64_t)v14, a1))
        {
          v15 = v14[5];
          v77 = v14[4];
          v78 = v15;
          v79 = v14[6];
          v16 = v14[1];
          v73 = *v14;
          v74 = v16;
          v17 = v14[3];
          v75 = v14[2];
          v76 = v17;
          v19 = *(__n128 *)(a1 + 16);
          v18 = *(__n128 *)(a1 + 32);
          *v14 = *(__n128 *)a1;
          v14[1] = v19;
          v14[2] = v18;
          v20 = *(__n128 *)(a1 + 96);
          v22 = *(__n128 *)(a1 + 48);
          v21 = *(__n128 *)(a1 + 64);
          v14[5] = *(__n128 *)(a1 + 80);
          v14[6] = v20;
          v14[3] = v22;
          v14[4] = v21;
          v23 = v74;
          *(__n128 *)a1 = v73;
          *(__n128 *)(a1 + 16) = v23;
          v24 = v79;
          v25 = v77;
          *(__n128 *)(a1 + 80) = v78;
          *(__n128 *)(a1 + 96) = v24;
          v26 = v76;
          *(__n128 *)(a1 + 32) = v75;
          *(__n128 *)(a1 + 48) = v26;
          *(__n128 *)(a1 + 64) = v25;
          sub_1002A9418(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 113)
    {
      return v13;
    }
    else
    {
      v64 = v13;
      v65 = a2;
      v27 = (((unint64_t)v8 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        v29 = 0;
        v70 = *(__n128 *)(a1 + 64);
        v71 = *(__n128 *)(a1 + 80);
        v72 = *(__n128 *)(a1 + 96);
        v66 = *(__n128 *)a1;
        v67 = *(__n128 *)(a1 + 16);
        v30 = (_OWORD *)a1;
        v68 = *(__n128 *)(a1 + 32);
        v69 = *(__n128 *)(a1 + 48);
        do
        {
          v36 = (__n128 *)&v30[7 * v29 + 7];
          v37 = (2 * v29) | 1;
          v38 = 2 * v29 + 2;
          if (v38 < v27 && sub_1002A7D0C(a4, (uint64_t)&v30[7 * v29 + 7], (uint64_t)&v30[7 * v29 + 14]))
          {
            v36 += 7;
            v37 = v38;
          }
          v31 = *v36;
          v32 = v36[2];
          v30[1] = v36[1];
          v30[2] = v32;
          *v30 = v31;
          v33 = v36[3];
          v34 = v36[4];
          v35 = v36[6];
          v30[5] = v36[5];
          v30[6] = v35;
          v30[3] = v33;
          v30[4] = v34;
          v30 = v36;
          v29 = v37;
        }
        while (v37 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        v39 = v65 - 7;
        v40 = v36 == &v65[-7];
        v65 -= 7;
        if (v40)
        {
          v36[1] = v67;
          v36[2] = v68;
          *v36 = v66;
          v36[5] = v71;
          v36[6] = v72;
          v36[3] = v69;
          v36[4] = v70;
        }
        else
        {
          v41 = *v39;
          v42 = v39[2];
          v36[1] = v39[1];
          v36[2] = v42;
          *v36 = v41;
          v43 = v39[3];
          v44 = v39[4];
          v45 = v39[6];
          v36[5] = v39[5];
          v36[6] = v45;
          v36[3] = v43;
          v36[4] = v44;
          v39[4] = v70;
          v39[5] = v71;
          v39[6] = v72;
          *v39 = v66;
          v39[1] = v67;
          v39[2] = v68;
          v39[3] = v69;
          v46 = (uint64_t)&v36[7] - a1;
          if (v46 >= 113)
          {
            v47 = (unint64_t)(((((unint64_t)v46 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                   - 2) >> 1;
            v48 = (__n128 *)(a1 + 112 * v47);
            if (sub_1002A7D0C(a4, (uint64_t)v48, (uint64_t)v36))
            {
              v49 = *v36;
              v50 = v36[2];
              v74 = v36[1];
              v75 = v50;
              v73 = v49;
              v51 = v36[3];
              v52 = v36[4];
              v53 = v36[6];
              v78 = v36[5];
              v79 = v53;
              v76 = v51;
              v77 = v52;
              do
              {
                v54 = v48;
                v55 = *v48;
                v56 = v48[2];
                v36[1] = v48[1];
                v36[2] = v56;
                *v36 = v55;
                v57 = v48[3];
                v58 = v48[4];
                v59 = v48[6];
                v36[5] = v48[5];
                v36[6] = v59;
                v36[3] = v57;
                v36[4] = v58;
                if (!v47)
                  break;
                v47 = (v47 - 1) >> 1;
                v48 = (__n128 *)(a1 + 112 * v47);
                v36 = v54;
              }
              while ((sub_1002A7D0C(a4, (uint64_t)v48, (uint64_t)&v73) & 1) != 0);
              v60 = v78;
              v54[4] = v77;
              v54[5] = v60;
              v54[6] = v79;
              v61 = v74;
              *v54 = v73;
              v54[1] = v61;
              v62 = v76;
              v54[2] = v75;
              v54[3] = v62;
            }
          }
        }
      }
      while (v27-- > 2);
      return v64;
    }
  }
  return a3;
}

__n128 sub_1002A9418(uint64_t a1, double **a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __n128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v38 = v4;
    v39 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 4))
    {
      v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4)) | 1;
      v13 = (__n128 *)(a1 + 112 * v12);
      v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && sub_1002A7D0C(a2, a1 + 112 * v12, (uint64_t)&v13[7]))
      {
        v13 += 7;
        v12 = v14;
      }
      if ((sub_1002A7D0C(a2, (uint64_t)v13, (uint64_t)v7) & 1) == 0)
      {
        v16 = v7[5];
        v35 = v7[4];
        v36 = v16;
        v37 = v7[6];
        v17 = v7[1];
        v31 = *v7;
        v32 = v17;
        v18 = v7[3];
        v33 = v7[2];
        v34 = v18;
        do
        {
          v19 = v13;
          v20 = *v13;
          v21 = v13[2];
          v7[1] = v13[1];
          v7[2] = v21;
          *v7 = v20;
          v22 = v13[3];
          v23 = v13[4];
          v24 = v13[6];
          v7[5] = v13[5];
          v7[6] = v24;
          v7[3] = v22;
          v7[4] = v23;
          if (v9 < v12)
            break;
          v25 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 112 * v25);
          v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            if (sub_1002A7D0C(a2, a1 + 112 * v25, (uint64_t)&v13[7]))
            {
              v13 += 7;
              v25 = v26;
            }
          }
          v7 = v19;
          v12 = v25;
        }
        while (!sub_1002A7D0C(a2, (uint64_t)v13, (uint64_t)&v31));
        v27 = v31;
        v28 = v33;
        v19[1] = v32;
        v19[2] = v28;
        *v19 = v27;
        result = v34;
        v29 = v35;
        v30 = v37;
        v19[5] = v36;
        v19[6] = v30;
        v19[3] = result;
        v19[4] = v29;
      }
    }
  }
  return result;
}

uint64_t sub_1002A95BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *i;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  _QWORD *v73;
  _QWORD *v74;

  v2 = **(_QWORD ***)a1;
  v3 = 1;
  if (v2 != (_QWORD *)(*(_QWORD *)a1 + 8))
  {
    v73 = (_QWORD *)(a1 + 32);
    v74 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v2[4];
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8)
                     + (((unint64_t)(*(_QWORD *)(a2 + 32) + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 376 * ((*(_DWORD *)(a2 + 32) + (_DWORD)v6) & 0xF);
      if (*(_BYTE *)(v7 + 32))
        goto LABEL_5;
      if (*(_DWORD *)(v7 + 40) == 1 && *(_DWORD *)(v7 + 208) == 1)
        return 0;
      v10 = *(_QWORD *)(v7 + 136);
      if (v10 == -1)
      {
        v10 = *(_QWORD *)(v7 + 128);
        v11 = *(_DWORD *)(v7 + 40);
        if (v11 == 4)
          goto LABEL_16;
      }
      else
      {
        v11 = *(_DWORD *)(v7 + 40);
        if (v11 == 4)
          goto LABEL_16;
      }
      if (v11 != 3)
        break;
      v18 = *(_QWORD *)(v7 + 304);
      if (v18 == -1)
      {
        if (v10 == *(_QWORD *)(v7 + 296))
          goto LABEL_64;
      }
      else if (v10 == v18)
      {
        goto LABEL_64;
      }
      for (i = *(_QWORD **)(*(_QWORD *)a1 + 8); i; i = (_QWORD *)*i)
      {
        v28 = i[4];
        if (v10 >= v28)
        {
          if (v28 >= v10)
            goto LABEL_64;
          ++i;
        }
      }
      v27 = *(_QWORD **)(a1 + 40);
      v26 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v27 >= v26)
      {
        v51 = (_QWORD *)*v73;
        v52 = ((uint64_t)v27 - *v73) >> 5;
        v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 59)
          goto LABEL_132;
        v54 = v26 - (_QWORD)v51;
        if (v54 >> 4 > v53)
          v53 = v54 >> 4;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0)
          v55 = 0x7FFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        if (v55)
        {
          if (v55 >> 59)
            goto LABEL_131;
          v56 = (char *)operator new(32 * v55);
        }
        else
        {
          v56 = 0;
        }
        v63 = &v56[32 * v52];
        *(_QWORD *)v63 = v6;
        *((_DWORD *)v63 + 2) = 0;
        *((_QWORD *)v63 + 2) = v10;
        *((_QWORD *)v63 + 3) = -1;
        v64 = v63;
        if (v27 != v51)
        {
          do
          {
            v65 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v64 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v64 - 1) = v65;
            v64 -= 32;
            v27 -= 4;
          }
          while (v27 != v51);
          v27 = (_QWORD *)*v73;
        }
        v66 = &v56[32 * v55];
        v67 = v63 + 32;
        *(_QWORD *)(a1 + 32) = v64;
        *(_QWORD *)(a1 + 40) = v63 + 32;
        *(_QWORD *)(a1 + 48) = v66;
        if (v27)
          operator delete(v27);
        *(_QWORD *)(a1 + 40) = v67;
        v14 = *(_QWORD *)(v7 + 304);
        if (v14 == -1)
        {
LABEL_19:
          v14 = *(_QWORD *)(v7 + 296);
          v15 = *(_DWORD *)(v7 + 208);
          v16 = v15 == 1 || v15 == 4;
          if (v16)
            goto LABEL_70;
          goto LABEL_23;
        }
      }
      else
      {
        *v27 = v6;
        *((_DWORD *)v27 + 2) = 0;
        v27[2] = v10;
        v27[3] = -1;
        *(_QWORD *)(a1 + 40) = v27 + 4;
        v14 = *(_QWORD *)(v7 + 304);
        if (v14 == -1)
          goto LABEL_19;
      }
LABEL_65:
      v15 = *(_DWORD *)(v7 + 208);
      if (v15 == 1 || v15 == 4)
      {
LABEL_70:
        if (v14 == v6)
          return 0;
        v40 = *(char **)(a1 + 16);
        v39 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v40 >= v39)
        {
          v41 = (char *)*v74;
          v42 = (uint64_t)&v40[-*v74] >> 5;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59)
LABEL_130:
            sub_1000D02C0();
          v44 = v39 - (_QWORD)v41;
          if (v44 >> 4 > v43)
            v43 = v44 >> 4;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
            v45 = 0x7FFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 59)
              goto LABEL_131;
            v46 = (char *)operator new(32 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[32 * v42];
          *(_QWORD *)v47 = v6;
          *((_DWORD *)v47 + 2) = 1;
          *((_QWORD *)v47 + 2) = v14;
          *((_QWORD *)v47 + 3) = -1;
          v48 = v47;
          if (v40 != v41)
          {
            do
            {
              v49 = *((_OWORD *)v40 - 1);
              *((_OWORD *)v48 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 32;
              v40 -= 32;
            }
            while (v40 != v41);
            v40 = (char *)*v74;
          }
          v50 = v47 + 32;
          *(_QWORD *)(a1 + 8) = v48;
          *(_QWORD *)(a1 + 16) = v47 + 32;
          *(_QWORD *)(a1 + 24) = &v46[32 * v45];
          if (v40)
            operator delete(v40);
          *(_QWORD *)(a1 + 16) = v50;
          v8 = (_QWORD *)v2[1];
          if (!v8)
          {
            do
            {
LABEL_90:
              v9 = (_QWORD *)v2[2];
              v16 = *v9 == (_QWORD)v2;
              v2 = v9;
            }
            while (!v16);
            goto LABEL_3;
          }
        }
        else
        {
          *(_QWORD *)v40 = v6;
          *((_DWORD *)v40 + 2) = 1;
          *((_QWORD *)v40 + 2) = v14;
          *((_QWORD *)v40 + 3) = -1;
          *(_QWORD *)(a1 + 16) = v40 + 32;
          v8 = (_QWORD *)v2[1];
          if (!v8)
            goto LABEL_90;
        }
        goto LABEL_6;
      }
LABEL_23:
      if (v15 != 3)
        goto LABEL_5;
      v17 = *(_QWORD *)(v7 + 136);
      if (v17 == -1)
      {
        if (v14 == *(_QWORD *)(v7 + 128))
          goto LABEL_5;
      }
      else if (v14 == v17)
      {
        goto LABEL_5;
      }
      for (j = *(_QWORD **)(*(_QWORD *)a1 + 8); j; j = (_QWORD *)*j)
      {
        v32 = j[4];
        if (v14 >= v32)
        {
          if (v32 >= v14)
            goto LABEL_5;
          ++j;
        }
      }
      v31 = *(_QWORD **)(a1 + 40);
      v30 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v31 >= v30)
      {
        v57 = (_QWORD *)*v73;
        v58 = ((uint64_t)v31 - *v73) >> 5;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 59)
LABEL_132:
          sub_1000D02C0();
        v60 = v30 - (_QWORD)v57;
        if (v60 >> 4 > v59)
          v59 = v60 >> 4;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0)
          v61 = 0x7FFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 59)
LABEL_131:
            sub_1000CDEB8();
          v62 = (char *)operator new(32 * v61);
        }
        else
        {
          v62 = 0;
        }
        v68 = &v62[32 * v58];
        *(_QWORD *)v68 = v6;
        *((_DWORD *)v68 + 2) = 1;
        *((_QWORD *)v68 + 2) = v14;
        *((_QWORD *)v68 + 3) = -1;
        v69 = v68;
        if (v31 != v57)
        {
          do
          {
            v70 = *((_OWORD *)v31 - 1);
            *((_OWORD *)v69 - 2) = *((_OWORD *)v31 - 2);
            *((_OWORD *)v69 - 1) = v70;
            v69 -= 32;
            v31 -= 4;
          }
          while (v31 != v57);
          v31 = (_QWORD *)*v73;
        }
        v71 = v68 + 32;
        *(_QWORD *)(a1 + 32) = v69;
        *(_QWORD *)(a1 + 40) = v68 + 32;
        *(_QWORD *)(a1 + 48) = &v62[32 * v61];
        if (v31)
        {
          operator delete(v31);
          *(_QWORD *)(a1 + 40) = v71;
LABEL_5:
          v8 = (_QWORD *)v2[1];
          if (!v8)
            goto LABEL_90;
          goto LABEL_6;
        }
        *(_QWORD *)(a1 + 40) = v71;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_90;
      }
      else
      {
        *v31 = v6;
        *((_DWORD *)v31 + 2) = 1;
        v31[2] = v14;
        v31[3] = -1;
        *(_QWORD *)(a1 + 40) = v31 + 4;
        v8 = (_QWORD *)v2[1];
        if (!v8)
          goto LABEL_90;
      }
      do
      {
LABEL_6:
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
LABEL_3:
      v2 = v9;
      if (v9 == (_QWORD *)(*(_QWORD *)a1 + 8))
        return 1;
    }
    if (v11 == 1)
    {
LABEL_16:
      if (v10 == v6)
        return 0;
      v13 = *(char **)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v13 < v12)
      {
        *(_QWORD *)v13 = v6;
        *((_DWORD *)v13 + 2) = 0;
        *((_QWORD *)v13 + 2) = v10;
        *((_QWORD *)v13 + 3) = -1;
        *(_QWORD *)(a1 + 16) = v13 + 32;
        v14 = *(_QWORD *)(v7 + 304);
        if (v14 == -1)
          goto LABEL_19;
        goto LABEL_65;
      }
      v19 = (char *)*v74;
      v20 = (uint64_t)&v13[-*v74] >> 5;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 59)
        goto LABEL_130;
      v22 = v12 - (_QWORD)v19;
      if (v22 >> 4 > v21)
        v21 = v22 >> 4;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
        v23 = 0x7FFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 59)
          goto LABEL_131;
        v24 = (char *)operator new(32 * v23);
      }
      else
      {
        v24 = 0;
      }
      v33 = &v24[32 * v20];
      *(_QWORD *)v33 = v6;
      *((_DWORD *)v33 + 2) = 0;
      *((_QWORD *)v33 + 2) = v10;
      *((_QWORD *)v33 + 3) = -1;
      v34 = v33;
      if (v13 != v19)
      {
        do
        {
          v35 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v34 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 32;
          v13 -= 32;
        }
        while (v13 != v19);
        v13 = (char *)*v74;
      }
      v36 = &v24[32 * v23];
      v37 = v33 + 32;
      *(_QWORD *)(a1 + 8) = v34;
      *(_QWORD *)(a1 + 16) = v33 + 32;
      *(_QWORD *)(a1 + 24) = v36;
      if (v13)
        operator delete(v13);
      *(_QWORD *)(a1 + 16) = v37;
    }
LABEL_64:
    v14 = *(_QWORD *)(v7 + 304);
    if (v14 == -1)
      goto LABEL_19;
    goto LABEL_65;
  }
  return v3;
}

uint64_t sub_1002A9BF8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1[4];
  v3 = a1[5];
  if (v2 == v3)
    return 1;
  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 != v5)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = (v7 - *a2) / 112;
    if (v8 <= 1)
      v8 = 1;
    if (v7 == v6)
    {
      v14 = v5 - v4 - 32;
      v15 = (char *)a1[1];
      if (v14 < 0x20)
        goto LABEL_54;
      v16 = (v14 >> 5) + 1;
      v15 = &v4[32 * (v16 & 0xFFFFFFFFFFFFFFELL)];
      v17 = v4 + 56;
      v18 = v16 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 4) = -1;
        *v17 = -1;
        v17 += 8;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_54:
        do
        {
          *((_QWORD *)v15 + 3) = -1;
          v15 += 32;
        }
        while (v15 != v5);
      }
    }
    else
    {
      v9 = (_DWORD *)(v6 + 44);
      v10 = a1[1];
      do
      {
LABEL_8:
        v11 = v8;
        v12 = v9;
        while (*(_QWORD *)(v12 - 3) != *(_QWORD *)v10 || *(v12 - 1) != *(_DWORD *)(v10 + 8) || *v12 != 1)
        {
          v12 += 28;
          if (!--v11)
          {
            *(_QWORD *)(v10 + 24) = -1;
            v10 += 32;
            if ((char *)v10 == v5)
              goto LABEL_23;
            goto LABEL_8;
          }
        }
        *(_QWORD *)(v10 + 24) = *(_QWORD *)(v12 - 7);
        v10 += 32;
      }
      while ((char *)v10 != v5);
    }
  }
LABEL_23:
  v19 = *a2;
  v20 = a2[1];
  v21 = (v20 - *a2) / 112;
  if (v21 <= 1)
    v21 = 1;
  if (v20 == v19)
  {
    v27 = v3 - v2 - 32;
    v28 = v2;
    if (v27 < 0x20)
      goto LABEL_55;
    v29 = (v27 >> 5) + 1;
    v28 = v2 + 32 * (v29 & 0xFFFFFFFFFFFFFFELL);
    v30 = (_QWORD *)(v2 + 56);
    v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -1;
      *v30 = -1;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_55:
      do
      {
        *(_QWORD *)(v28 + 24) = -1;
        v28 += 32;
      }
      while (v28 != v3);
    }
  }
  else
  {
    v22 = (_DWORD *)(v19 + 44);
    v23 = v2;
    do
    {
LABEL_28:
      v24 = v21;
      v25 = v22;
      while (*(_QWORD *)(v25 - 3) != *(_QWORD *)v23 || *(v25 - 1) != *(_DWORD *)(v23 + 8) || *v25 != 1)
      {
        v25 += 28;
        if (!--v24)
        {
          *(_QWORD *)(v23 + 24) = -1;
          v23 += 32;
          if (v23 == v3)
            goto LABEL_45;
          goto LABEL_28;
        }
      }
      *(_QWORD *)(v23 + 24) = *(_QWORD *)(v25 - 7);
      v23 += 32;
    }
    while (v23 != v3);
  }
LABEL_45:
  if (v4 == v5)
    return 1;
  v32 = v2;
  while (*(_QWORD *)(v32 + 16) != *((_QWORD *)v4 + 2) || *(_QWORD *)(v32 + 24) != *((_QWORD *)v4 + 3))
  {
    v32 += 32;
    if (v32 == v3)
    {
      v4 += 32;
      goto LABEL_45;
    }
  }
  return 0;
}

BOOL sub_1002A9E6C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL8 result;
  double v12;
  int v13;
  BOOL v15;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v21;

  v4 = *(_QWORD *)(a2 + 136);
  if (v4 == -1 && (v4 = *(_QWORD *)(a2 + 128), v4 == -1))
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                   + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v4) & 0xF);
    if (*(uint64_t *)(v5 + 24) > 0 || (v6 = *(_DWORD *)(v5 + 40), v6 == 1))
    {
      v7 = 1;
      goto LABEL_6;
    }
    v13 = *(_DWORD *)(v5 + 208);
    v7 = v13 == 1 || v13 == 4;
    if (v6 == 4)
    {
      v7 = 1;
      v15 = 1;
    }
    else
    {
      v15 = v13 == 4;
    }
    if (v15 || v13 == 1)
    {
LABEL_6:
      v8 = v4 == a3;
      v9 = *(_QWORD *)(a2 + 304);
      if (v9 != -1)
        goto LABEL_33;
      goto LABEL_7;
    }
  }
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 304);
  if (v9 != -1)
    goto LABEL_33;
LABEL_7:
  v9 = *(_QWORD *)(a2 + 296);
  if (v9 == -1)
  {
    v10 = 0;
    goto LABEL_9;
  }
LABEL_33:
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8)
                  + (((unint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) + (_DWORD)v9) & 0xF);
  if (*(uint64_t *)(v17 + 24) > 0 || (v18 = *(_DWORD *)(v17 + 40), v18 == 1))
  {
    v10 = 1;
  }
  else
  {
    v19 = *(_DWORD *)(v17 + 208);
    v10 = v19 == 1 || v19 == 4;
    if (v18 == 4)
    {
      v10 = 1;
      v21 = 1;
    }
    else
    {
      v21 = v19 == 1;
    }
    if (!v21 && v19 != 4)
    {
LABEL_9:
      if (!v8)
        goto LABEL_10;
LABEL_37:
      *a4 = !v8;
      return 1;
    }
  }
  if (v8 != (v9 == a3))
    goto LABEL_37;
LABEL_10:
  result = v7;
  if (v7)
  {
    v12 = *(double *)(a2 + 112);
    *a4 = 0;
    if (!v10)
      return result;
  }
  else
  {
    v12 = 0.0;
    if (!v10)
      return result;
  }
  result = 1;
  if (!v7 || *(double *)(a2 + 280) > v12)
  {
    *a4 = 1;
    return 1;
  }
  return result;
}

uint64_t sub_1002A9FFC(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *(_QWORD *)(a2 + 216);
  v5 = *(_QWORD *)(a2 + 184);
  v6 = *(_DWORD *)(a2 + 40);
  if (*(_QWORD *)(a2 + 48) == v4)
  {
    v7 = a3[1];
    if (v5 == -1)
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (*(_QWORD *)(a2 + 224) == v7)
          v11 = 0;
        else
          v11 = result;
        if ((v11 & 1) == 0)
          goto LABEL_46;
        return 1;
      }
    }
    else
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if ((_DWORD)result)
        {
          v10 = *(_QWORD *)(a2 + 224);
          if (v5 == *(_QWORD *)(a2 + 352))
          {
            if (v10 != v7)
              goto LABEL_46;
          }
          else if (v10 == v7)
          {
            goto LABEL_46;
          }
          return 1;
        }
        goto LABEL_46;
      }
    }
  }
  else
  {
    v9 = *a3;
    if (v5 == -1)
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (v4 == v9)
          v12 = 0;
        else
          v12 = result;
        if ((v12 & 1) == 0)
          goto LABEL_46;
        return 1;
      }
    }
    else
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        result = 1;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      else
      {
        result = 0;
        if (*(_DWORD *)(a2 + 208) != 1)
          return result;
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if ((_DWORD)result)
        {
          if (v5 == *(_QWORD *)(a2 + 352))
          {
            if (v4 != v9)
              goto LABEL_46;
          }
          else if (v4 == v9)
          {
            goto LABEL_46;
          }
          return 1;
        }
LABEL_46:
        result = 1;
        *a4 = 1;
      }
    }
  }
  return result;
}

void sub_1002AA1F4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1002AA750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002AA76C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002AA780(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002AA798(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1002AA7B0(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    v9 = (uint64_t *)a2[1];
    v10 = (uint64_t *)a2[2];
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v12 = v6[4];
        if (v8 == v12)
          break;
        if (v8 < v12)
          goto LABEL_3;
        if (v12 >= v8)
          return v11;
LABEL_14:
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_17;
        }
      }
      v13 = v11[5];
      if (v9 != v13)
      {
        if ((uint64_t)v9 < (uint64_t)v13)
          goto LABEL_3;
        if ((uint64_t)v13 >= (uint64_t)v9)
          return v11;
        goto LABEL_14;
      }
      v14 = v11[6];
      if ((uint64_t)v10 >= (uint64_t)v14)
      {
        if ((uint64_t)v14 >= (uint64_t)v10)
          return v11;
        goto LABEL_14;
      }
LABEL_3:
      v6 = *v11;
      v7 = v11;
      if (!*v11)
        goto LABEL_17;
    }
  }
  v11 = a1 + 1;
LABEL_17:
  v15 = v11;
  v16 = operator new(0x40uLL);
  v17 = *((_QWORD *)*a4 + 2);
  v16[2] = **a4;
  *((_QWORD *)v16 + 6) = v17;
  *((_WORD *)v16 + 28) = 0;
  *((_BYTE *)v16 + 58) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v15;
  *v7 = (uint64_t *)v16;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)v16;
  if (v18)
  {
    *a1 = v18;
    v19 = *v7;
  }
  sub_1000E05F4(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v16;
}

uint64_t sub_1002AA8F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void **v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int8x16_t v17;
  uint64_t v18;
  void (**v19)(std::exception *__hidden);
  unsigned __int8 v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;

  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 0;
  sub_1002AAD98(a1, a2, a3, (uint64_t)__p, &v20, 0, 0);
  v5 = (void **)__p[1];
  v6 = (void **)v22;
  v7 = v22 - (unint64_t)__p[1];
  if ((void *)v22 != __p[1])
  {
    v8 = (char *)__p[1] + 8 * ((unint64_t)v23 / 0x14);
    v9 = (_DWORD *)(*v8 + 200 * ((unint64_t)v23 % 0x14));
    while (v9 != (_DWORD *)(*((_QWORD *)__p[1] + (*((_QWORD *)&v23 + 1) + (_QWORD)v23) / 0x14uLL)
                           + 200 * ((*((_QWORD *)&v23 + 1) + (_QWORD)v23) % 0x14uLL)))
    {
      v10 = v9[10];
      if (v10 == 1)
      {
        if (v9[30] != 1)
          goto LABEL_26;
      }
      else if (v10 != 2 || v9[30] != 2)
      {
LABEL_26:
        if (a4)
        {
          v19 = &off_100401658;
          v17.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcod"
                                "e.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Interna"
                                "l.sdk/usr/local/include/boost/geometry/algorithms/detail/has_self_intersections.hpp";
          v17.i64[1] = (uint64_t)"BOOL boost::geometry::detail::overlay::has_self_intersections(const Geometry &, const St"
                                "rategy &, const RobustPolicy &, BOOL) [Geometry = boost::geometry::model::polygon<boost:"
                                ":geometry::model::d2::point_xy<double>>, Strategy = boost::geometry::strategies::relate:"
                                ":cartesian<>, RobustPolicy = boost::geometry::detail::robust_policy<boost::geometry::mod"
                                "el::d2::point_xy<double>, boost::geometry::model::point<long long, 2, boost::geometry::c"
                                "s::cartesian>, double>]";
          v18 = 129;
          sub_1002AAD38((uint64_t)&v19, &v17);
        }
        v12 = 1;
        *((_QWORD *)&v23 + 1) = 0;
        if (v7 >= 0x11)
          goto LABEL_13;
        goto LABEL_14;
      }
      if ((v9[4] - 3) >= 2)
        goto LABEL_26;
      v9 += 50;
      if ((_DWORD *)((char *)v9 - *v8) == (_DWORD *)4000)
      {
        v11 = (_DWORD *)v8[1];
        ++v8;
        v9 = v11;
      }
    }
  }
  v12 = 0;
  *((_QWORD *)&v23 + 1) = 0;
  if (v7 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v5);
      v6 = (void **)v22;
      v5 = (void **)((char *)__p[1] + 8);
      __p[1] = v5;
      v7 = v22 - (_QWORD)v5;
    }
    while ((_QWORD)v22 - (_QWORD)v5 > 0x10uLL);
  }
LABEL_14:
  v13 = v7 >> 3;
  if (v13 == 1)
  {
    v14 = 10;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    v14 = 20;
LABEL_18:
    *(_QWORD *)&v23 = v14;
  }
  if (v5 != v6)
  {
    do
    {
      v15 = *v5++;
      operator delete(v15);
    }
    while (v5 != v6);
    if ((void *)v22 != __p[1])
      *(_QWORD *)&v22 = v22 + (((unint64_t)__p[1] - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v12;
}

void sub_1002AAAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, char a15)
{
  std::exception::~exception(&a13);
  sub_1002B0C6C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1002AAB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1002B0C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AAB14(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  void **v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  int8x16_t v17;
  uint64_t v18;
  void (**v19)(std::exception *__hidden);
  unsigned __int8 v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;

  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 0;
  sub_1002B0D30(a1, a2, a3, (uint64_t)__p, &v20, 0, 0);
  v5 = (void **)__p[1];
  v6 = (void **)v22;
  v7 = v22 - (unint64_t)__p[1];
  if ((void *)v22 != __p[1])
  {
    v8 = (char *)__p[1] + 8 * ((unint64_t)v23 / 0x14);
    v9 = (_DWORD *)(*v8 + 200 * ((unint64_t)v23 % 0x14));
    while (v9 != (_DWORD *)(*((_QWORD *)__p[1] + (*((_QWORD *)&v23 + 1) + (_QWORD)v23) / 0x14uLL)
                           + 200 * ((*((_QWORD *)&v23 + 1) + (_QWORD)v23) % 0x14uLL)))
    {
      v10 = v9[10];
      if (v10 == 1)
      {
        if (v9[30] != 1)
          goto LABEL_26;
      }
      else if (v10 != 2 || v9[30] != 2)
      {
LABEL_26:
        if (a4)
        {
          v19 = &off_100401658;
          v17.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcod"
                                "e.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Interna"
                                "l.sdk/usr/local/include/boost/geometry/algorithms/detail/has_self_intersections.hpp";
          v17.i64[1] = (uint64_t)"BOOL boost::geometry::detail::overlay::has_self_intersections(const Geometry &, const St"
                                "rategy &, const RobustPolicy &, BOOL) [Geometry = boost::geometry::model::multi_polygon<"
                                "boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>>, Strategy"
                                " = boost::geometry::strategies::relate::cartesian<>, RobustPolicy = boost::geometry::det"
                                "ail::robust_policy<boost::geometry::model::d2::point_xy<double>, boost::geometry::model:"
                                ":point<long long, 2, boost::geometry::cs::cartesian>, double>]";
          v18 = 129;
          sub_1002AAD38((uint64_t)&v19, &v17);
        }
        v12 = 1;
        *((_QWORD *)&v23 + 1) = 0;
        if (v7 >= 0x11)
          goto LABEL_13;
        goto LABEL_14;
      }
      if ((v9[4] - 3) >= 2)
        goto LABEL_26;
      v9 += 50;
      if ((_DWORD *)((char *)v9 - *v8) == (_DWORD *)4000)
      {
        v11 = (_DWORD *)v8[1];
        ++v8;
        v9 = v11;
      }
    }
  }
  v12 = 0;
  *((_QWORD *)&v23 + 1) = 0;
  if (v7 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v5);
      v6 = (void **)v22;
      v5 = (void **)((char *)__p[1] + 8);
      __p[1] = v5;
      v7 = v22 - (_QWORD)v5;
    }
    while ((_QWORD)v22 - (_QWORD)v5 > 0x10uLL);
  }
LABEL_14:
  v13 = v7 >> 3;
  if (v13 == 1)
  {
    v14 = 10;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    v14 = 20;
LABEL_18:
    *(_QWORD *)&v23 = v14;
  }
  if (v5 != v6)
  {
    do
    {
      v15 = *v5++;
      operator delete(v15);
    }
    while (v5 != v6);
    if ((void *)v22 != __p[1])
      *(_QWORD *)&v22 = v22 + (((unint64_t)__p[1] - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v12;
}

void sub_1002AAD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, char a15)
{
  std::exception::~exception(&a13);
  sub_1002B0C6C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1002AAD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1002B0C6C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AAD38(uint64_t a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_1002B07C8((uint64_t)exception, a1, a2);
}

void sub_1002AAD80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1002AAD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7)
{
  double *v14;
  double *v15;
  double **v16;
  double **v17;
  uint64_t v18;
  double *v19;
  double *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  char v30;
  void *__p;
  void *v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  v14 = *(double **)a1;
  v15 = *(double **)(a1 + 8);
  if ((unint64_t)v15 - *(_QWORD *)a1 >= 0x20)
  {
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = -1;
    v26 = -1;
    sub_1002884D4(&__p, v14, v15, a3, a2, &v25, 0xAuLL);
  }
  v17 = *(double ***)(a1 + 24);
  v16 = *(double ***)(a1 + 32);
  if (v17 != v16)
  {
    v18 = 0;
    do
    {
      v19 = *v17;
      v20 = v17[1];
      if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
      {
        v25 = xmmword_100382A50;
        v26 = v18;
        sub_1002884D4(&__p, v19, v20, a3, a2, &v25, 0xAuLL);
        v16 = *(double ***)(a1 + 32);
      }
      ++v18;
      v17 += 3;
    }
    while (v17 != v16);
  }
  *(_QWORD *)&v25 = a1;
  *((_QWORD *)&v25 + 1) = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v23 = a2;
  v24 = a2;
  sub_1002AAF0C((uint64_t *)&__p, (uint64_t)&v25, (uint64_t)&v24, (uint64_t)&v23, 0x10uLL);
  v21 = *a5;
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  return v21 == 0;
}

void sub_1002AAEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AAF0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *i;
  BOOL v16;
  BOOL v17;
  _OWORD v20[2];
  void *__p;
  void *v22;
  uint64_t v23;
  char v24;

  v8 = *a1;
  v7 = (_BYTE *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((_BYTE *)v8 != v7)
    {
      v13 = (_BYTE *)(v8 + 216);
      do
      {
        v14 = (_BYTE *)(v8 + 120);
        if ((_BYTE *)(v8 + 120) != v7)
        {
          for (i = v13; i - 96 != v7; i += 120)
          {
            if (*(_QWORD *)(v8 + 48) >= *((_QWORD *)i - 8) && *(_QWORD *)(v8 + 32) <= *((_QWORD *)i - 6))
            {
              v16 = *(_QWORD *)(v8 + 56) >= *((_QWORD *)i - 7) && *(_QWORD *)(v8 + 40) <= *((_QWORD *)i - 5);
              v17 = v16 && *(_BYTE *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a2 + 40), *(double ***)a2, (int *)v8, *(_DWORD *)(a2 + 40), *(double ***)a2, (int *)i - 24, 0, *(unsigned __int8 *)(a2 + 44), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD **)(a2 + 24), *(_BYTE **)(a2 + 32)))return 0;
                v7 = (_BYTE *)a1[1];
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  __p = 0;
  v22 = 0;
  v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_100288F48(a1, (uint64_t *)v20, (char **)&__p);
  v12 = sub_1002AB0D4(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1002AB0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AB0D4(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *i;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *j;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  int64x2_t v61;
  int64x2_t v62;
  void *__p;
  char *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  __int128 v72[2];
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v14 = *a1;
  v15 = a1[2];
  if ((uint64_t)*a1 >= 0)
    v16 = *a1;
  else
    v16 = v14 + 1;
  v17 = v16 >> 1;
  if (v15 >= 0)
    v18 = a1[2];
  else
    v18 = v15 + 1;
  v19 = v18 >> 1;
  v20 = *((_OWORD *)a1 + 1);
  v21 = v15 - 2 * v19 + v14 - 2 * v17;
  v73 = *(_OWORD *)a1;
  v75 = *((_QWORD *)&v20 + 1);
  *((_QWORD *)&v72[0] + 1) = *((_QWORD *)&v73 + 1);
  v72[1] = v20;
  v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  v71 = 0;
  *(_QWORD *)&v72[0] = v74;
  v69 = 0;
  v70 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  __p = 0;
  v64 = 0;
  v65 = 0;
  sub_100289FEC(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  v23 = (char *)__p;
  v22 = v64;
  if (__p == v64)
    goto LABEL_32;
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = 0x8000000000000000;
  v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v62 = vdupq_n_s64(0x8000000000000000);
  v26 = 0x8000000000000000;
  v27 = (char *)__p;
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v29 = *(_QWORD **)v27;
    v30 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        v31 = v29[5];
        if (v31 >= v24)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    v26 = v30;
    v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      v32 = v29[6];
      if (v32 >= v28)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    v25 = v31;
    v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      v33 = v29[7];
      if (v33 < v24)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    v26 = v32;
    v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      v24 = v33;
      if (v33 <= v25)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25)
      goto LABEL_9;
LABEL_26:
    v62.i64[1] = v33;
    v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_1002AB838((__int128 *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (i = v23 + 8; i != v22; i += 8)
      {
        v38 = *(_QWORD *)v23;
        v39 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v23 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v38 + 32) <= *(_QWORD *)(v39 + 48))
        {
          v40 = *(_QWORD *)(v38 + 56) >= *(_QWORD *)(v39 + 40) && *(_QWORD *)(v38 + 40) <= *(_QWORD *)(v39 + 56);
          v41 = v40 && *(_BYTE *)(v38 + 96) == 0;
          if (v41 && *(_BYTE *)(v39 + 96) == 0)
          {
            if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v39, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
            v22 = v64;
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_1002AB6C8((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_1002AB6C8((__int128 *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v35 = (char *)v69;
    v34 = v70;
    if (a3 > 0x63 || (v70 - (_BYTE *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          v44 = v35;
          while (1)
          {
            v45 = *(_QWORD *)v43;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v43 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v46, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                v34 = v70;
              }
            }
            v44 += 8;
            if (v44 == v34)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_1002AB838(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v51 = (char *)v66;
    v50 = v67;
    if (a3 > 0x63 || (v67 - (_BYTE *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        v52 = 1;
      }
      else
      {
        do
        {
          v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (j = v51; j != v50; j += 8)
            {
              v55 = *(_QWORD *)v53;
              v56 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v53 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
              {
                v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
                v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
                if (v58 && *(_BYTE *)(v56 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v56, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                  v50 = v67;
                }
              }
            }
          }
          v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      v52 = sub_1002AB838(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v52 = 0;
  }
  if (__p)
  {
    v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_1002AB664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AB6C8(__int128 *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_1002ACE20(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002AB838(__int128 *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *i;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *j;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  int64x2_t v60;
  int64x2_t v61;
  void *__p;
  char *v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[2];
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v15 = *((_QWORD *)a1 + 2);
  v14 = *((_QWORD *)a1 + 3);
  v16 = *((_QWORD *)a1 + 1);
  if (v16 >= 0)
    v17 = *((_QWORD *)a1 + 1);
  else
    v17 = v16 + 1;
  v18 = v17 >> 1;
  if (v14 >= 0)
    v19 = *((_QWORD *)a1 + 3);
  else
    v19 = v14 + 1;
  v20 = a1[1];
  v73 = *a1;
  v71[0] = v73;
  v72 = v20;
  v74 = v15;
  v75 = (v19 >> 1)
      + v18
      + ((int)(((_DWORD)v14
              - 2 * (v19 >> 1)
              + (_DWORD)v16
              - 2 * (_DWORD)v18
              + (((v14 - 2 * (v19 >> 1) + (_DWORD)v16 - 2 * (_DWORD)v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_100289FEC(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  v22 = (char *)__p;
  v21 = v63;
  if (__p == v63)
    goto LABEL_32;
  v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = 0x8000000000000000;
  v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v61 = vdupq_n_s64(0x8000000000000000);
  v25 = 0x8000000000000000;
  v26 = (char *)__p;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v28 = *(_QWORD **)v26;
    v29 = *(_QWORD *)(*(_QWORD *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(_QWORD *)(*(_QWORD *)v26 + 32);
      v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        v30 = v28[5];
        if (v30 >= v23)
          goto LABEL_13;
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    v25 = v29;
    v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24)
        goto LABEL_14;
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      v31 = v28[6];
      if (v31 >= v27)
        goto LABEL_15;
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    v24 = v30;
    v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25)
        goto LABEL_16;
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      v32 = v28[7];
      if (v32 < v23)
        goto LABEL_25;
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    v25 = v31;
    v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      v23 = v32;
      if (v32 <= v24)
        goto LABEL_9;
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24)
      goto LABEL_9;
LABEL_26:
    v61.i64[1] = v32;
    v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (_BYTE *)__p) >> 3 >= a4)
  {
    if (sub_1002AB0D4(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8))
      goto LABEL_30;
    goto LABEL_98;
  }
  do
  {
    v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (i = v22 + 8; i != v21; i += 8)
      {
        v37 = *(_QWORD *)v22;
        v38 = *(_QWORD *)i;
        if (*(_QWORD *)(*(_QWORD *)v22 + 48) >= *(_QWORD *)(*(_QWORD *)i + 32)
          && *(_QWORD *)(v37 + 32) <= *(_QWORD *)(v38 + 48))
        {
          v39 = *(_QWORD *)(v37 + 56) >= *(_QWORD *)(v38 + 40) && *(_QWORD *)(v37 + 40) <= *(_QWORD *)(v38 + 56);
          v40 = v39 && *(_BYTE *)(v37 + 96) == 0;
          if (v40 && *(_BYTE *)(v38 + 96) == 0)
          {
            if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v37, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
            v21 = v63;
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002ABE30(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002ABE30(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    v34 = (char *)v68;
    v33 = v69;
    if (a3 > 0x63 || (v69 - (_BYTE *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          v43 = v34;
          while (1)
          {
            v44 = *(_QWORD *)v42;
            v45 = *(_QWORD *)v43;
            if (*(_QWORD *)(*(_QWORD *)v42 + 48) >= *(_QWORD *)(*(_QWORD *)v43 + 32)
              && *(_QWORD *)(v44 + 32) <= *(_QWORD *)(v45 + 48))
            {
              v46 = *(_QWORD *)(v44 + 56) >= *(_QWORD *)(v45 + 40) && *(_QWORD *)(v44 + 40) <= *(_QWORD *)(v45 + 56);
              v47 = v46 && *(_BYTE *)(v44 + 96) == 0;
              if (v47 && *(_BYTE *)(v45 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v44, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                v33 = v69;
              }
            }
            v43 += 8;
            if (v43 == v33)
              goto LABEL_73;
          }
        }
      }
    }
    else if (!sub_1002AB0D4(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    v50 = (char *)v65;
    v49 = v66;
    if (a3 > 0x63 || (v66 - (_BYTE *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        v51 = 1;
      }
      else
      {
        do
        {
          v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (j = v50; j != v49; j += 8)
            {
              v54 = *(_QWORD *)v52;
              v55 = *(_QWORD *)j;
              if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)j + 32)
                && *(_QWORD *)(v54 + 32) <= *(_QWORD *)(v55 + 48))
              {
                v56 = *(_QWORD *)(v54 + 56) >= *(_QWORD *)(v55 + 40) && *(_QWORD *)(v54 + 40) <= *(_QWORD *)(v55 + 56);
                v57 = v56 && *(_BYTE *)(v54 + 96) == 0;
                if (v57 && *(_BYTE *)(v55 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v54, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, 0, *(unsigned __int8 *)(a5 + 44), *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD **)(a5 + 24), *(_BYTE **)(a5 + 32)))goto LABEL_98;
                  v49 = v66;
                }
              }
            }
          }
          v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      v51 = sub_1002AB0D4(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    v51 = 0;
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_1002ABDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v26;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v26 = a21;
    if (!a21)
    {
LABEL_3:
      v27 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v26 = a21;
    if (!a21)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a24;
  if (!a24)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002ABE30(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  v13 = *a2;
  v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5)
    return sub_1002ABFA0(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  if (v13 != v12)
  {
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            v17 = *v13;
            v18 = *v16;
            if (*(_QWORD *)(*v13 + 48) >= *(_QWORD *)(*v16 + 32) && *(_QWORD *)(v17 + 32) <= *(_QWORD *)(v18 + 48))
            {
              v19 = *(_QWORD *)(v17 + 56) >= *(_QWORD *)(v18 + 40) && *(_QWORD *)(v17 + 40) <= *(_QWORD *)(v18 + 56);
              v20 = v19 && *(_BYTE *)(v17 + 96) == 0;
              if (v20 && *(_BYTE *)(v18 + 96) == 0)
              {
                result = sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32));
                if (!(_DWORD)result)
                  return result;
                v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002ABFA0(uint64_t *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  _QWORD v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v17 = *a1;
  v18 = a1[2];
  if (*a1 >= 0)
    v19 = *a1;
  else
    v19 = v17 + 1;
  v20 = v19 >> 1;
  v22 = *(_OWORD *)a1;
  v21 = *((_OWORD *)a1 + 1);
  v146 = *(_OWORD *)a1;
  v147 = v21;
  if (v18 >= 0)
    v23 = v18;
  else
    v23 = v18 + 1;
  v24 = v23 >> 1;
  v144[1] = *((_QWORD *)&v22 + 1);
  v145 = v21;
  v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(_QWORD *)&v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002ACE20(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002ACE20(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002ACE20(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_1002ACE20(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002ACE20(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002ACE20(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002ACE20(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002ACD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002ACE20(__int128 *a1, _QWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  BOOL v92;
  char *v94;
  char *v95;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  BOOL v103;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  BOOL v112;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  BOOL v121;
  int64x2_t v124;
  int64x2_t v125;
  void *__p;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144[2];
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v18 = *((_QWORD *)a1 + 2);
  v17 = *((_QWORD *)a1 + 3);
  v19 = *((_QWORD *)a1 + 1);
  if (v19 >= 0)
    v20 = *((_QWORD *)a1 + 1);
  else
    v20 = v19 + 1;
  v21 = v20 >> 1;
  v22 = *a1;
  v145 = a1[1];
  v146 = v22;
  if (v17 >= 0)
    v23 = v17;
  else
    v23 = v17 + 1;
  v24 = v23 >> 1;
  v144[0] = v22;
  v25 = v17 - 2 * v24 + v19 - 2 * v21;
  v147 = v18;
  v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100289FEC(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_100289FEC(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  v27 = (char *)v135;
  v26 = v136;
  if (v135 == v136)
    goto LABEL_147;
  v29 = (char *)__p;
  v28 = v127;
  if (a5 > (v136 - (_BYTE *)v135) >> 3 || a4 > 0x63 || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            v45 = *(_QWORD *)v27;
            v46 = *(_QWORD *)v44;
            if (*(_QWORD *)(*(_QWORD *)v27 + 48) >= *(_QWORD *)(*(_QWORD *)v44 + 32)
              && *(_QWORD *)(v45 + 32) <= *(_QWORD *)(v46 + 48))
            {
              v47 = *(_QWORD *)(v45 + 56) >= *(_QWORD *)(v46 + 40) && *(_QWORD *)(v45 + 40) <= *(_QWORD *)(v46 + 56);
              v48 = v47 && *(_BYTE *)(v45 + 96) == 0;
              if (v48 && *(_BYTE *)(v46 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                v28 = v127;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  v30 = 0x7FFFFFFFFFFFFFFFLL;
  v31 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v32 = 0x8000000000000000;
  v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    v34 = *(_QWORD **)v27;
    v35 = *(_QWORD *)(*(_QWORD *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        v36 = v34[5];
        if (v36 < v30)
          goto LABEL_16;
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v27 + 32);
      v33 = v35;
      if (v35 <= v32)
        goto LABEL_15;
    }
    v125.i64[0] = v35;
    v32 = v35;
    v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      v30 = v36;
      if (v36 <= v31)
        goto LABEL_17;
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      v37 = v34[6];
      if (v37 < v33)
        goto LABEL_18;
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    v31 = v36;
    v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      v33 = v37;
      if (v37 <= v32)
        goto LABEL_19;
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      v38 = v34[7];
      if (v38 >= v30)
        goto LABEL_28;
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    v32 = v37;
    v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31)
        goto LABEL_12;
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    v30 = v38;
    if (v38 <= v31)
      goto LABEL_12;
LABEL_29:
    v125.i64[1] = v38;
    v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    v39 = *(_QWORD **)v29;
    v40 = *(_QWORD *)(*(_QWORD *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        v41 = v39[5];
        if (v41 < v30)
          goto LABEL_35;
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v29 + 32);
      v33 = v40;
      if (v40 <= v32)
        goto LABEL_34;
    }
    v125.i64[0] = v40;
    v32 = v40;
    v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      v30 = v41;
      if (v41 <= v31)
        goto LABEL_36;
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      v42 = v39[6];
      if (v42 < v33)
        goto LABEL_37;
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    v31 = v41;
    v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      v33 = v42;
      if (v42 <= v32)
        goto LABEL_38;
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      v43 = v39[7];
      if (v43 >= v30)
        goto LABEL_47;
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    v32 = v42;
    v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31)
        goto LABEL_30;
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    v30 = v43;
    if (v43 <= v31)
      goto LABEL_30;
LABEL_48:
    v125.i64[1] = v43;
    v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002ABFA0(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    goto LABEL_278;
LABEL_72:
  v50 = v133;
  if (a5 > (v133 - (_BYTE *)v132) >> 3)
  {
    v52 = (char *)v135;
    v51 = v136;
    goto LABEL_75;
  }
  v52 = (char *)v135;
  v51 = v136;
  if (a5 <= (v130 - (_BYTE *)v129) >> 3 && a4 <= 0x63 && (v136 - (_BYTE *)v135) >> 3 >= a5)
  {
    v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      v66 = 0x7FFFFFFFFFFFFFFFLL;
      v67 = 0x8000000000000000;
      v68 = 0x8000000000000000;
      v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        v70 = *(_QWORD **)v52;
        v71 = *(_QWORD *)(*(_QWORD *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            v72 = v70[5];
            if (v72 < v66)
              goto LABEL_129;
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(_QWORD *)(*(_QWORD *)v52 + 32);
          v69 = v71;
          if (v71 <= v68)
            goto LABEL_128;
        }
        v125.i64[0] = v71;
        v68 = v71;
        v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          v66 = v72;
          if (v72 <= v67)
            goto LABEL_130;
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          v73 = v70[6];
          if (v73 < v69)
            goto LABEL_131;
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        v67 = v72;
        v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          v69 = v73;
          if (v73 <= v68)
            goto LABEL_132;
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          v74 = v70[7];
          if (v74 < v66)
            goto LABEL_133;
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        v68 = v73;
        v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          v66 = v74;
          if (v74 > v67)
            goto LABEL_142;
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002ABFA0(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002ABFA0(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    v115 = 0;
    v116 = (char *)__p;
    if (!__p)
      goto LABEL_280;
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51)
      goto LABEL_147;
  }
  else
  {
    do
    {
      v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          v55 = *(_QWORD *)v52;
          v56 = *(_QWORD *)v54;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v54 + 32)
            && *(_QWORD *)(v55 + 32) <= *(_QWORD *)(v56 + 48))
          {
            v57 = *(_QWORD *)(v55 + 56) >= *(_QWORD *)(v56 + 40) && *(_QWORD *)(v55 + 40) <= *(_QWORD *)(v56 + 56);
            v58 = v57 && *(_BYTE *)(v55 + 96) == 0;
            if (v58 && *(_BYTE *)(v56 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v50 = v133;
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    v52 = (char *)v135;
    if (v135 == v51)
      goto LABEL_147;
  }
  v53 = v130;
  if (v129 != v130)
  {
    do
    {
      v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          v61 = *(_QWORD *)v52;
          v62 = *(_QWORD *)v60;
          if (*(_QWORD *)(*(_QWORD *)v52 + 48) >= *(_QWORD *)(*(_QWORD *)v60 + 32)
            && *(_QWORD *)(v61 + 32) <= *(_QWORD *)(v62 + 48))
          {
            v63 = *(_QWORD *)(v61 + 56) >= *(_QWORD *)(v62 + 40) && *(_QWORD *)(v61 + 40) <= *(_QWORD *)(v62 + 56);
            v64 = v63 && *(_BYTE *)(v61 + 96) == 0;
            if (v64 && *(_BYTE *)(v62 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v53 = v130;
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  v76 = (char *)__p;
  v75 = v127;
  if (__p == v127)
    goto LABEL_198;
  v78 = (char *)v141;
  v77 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3
    || a5 > (v139 - (_BYTE *)v138) >> 3
    || a4 > 0x63
    || (v127 - (_BYTE *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          v89 = *(_QWORD *)v78;
          v90 = *(_QWORD *)v88;
          if (*(_QWORD *)(*(_QWORD *)v78 + 48) >= *(_QWORD *)(*(_QWORD *)v88 + 32)
            && *(_QWORD *)(v89 + 32) <= *(_QWORD *)(v90 + 48))
          {
            v91 = *(_QWORD *)(v89 + 56) >= *(_QWORD *)(v90 + 40) && *(_QWORD *)(v89 + 40) <= *(_QWORD *)(v90 + 56);
            v92 = v91 && *(_BYTE *)(v89 + 96) == 0;
            if (v92 && *(_BYTE *)(v90 + 96) == 0)
            {
              if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
              v75 = v127;
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        v77 = v142;
      }
      v78 += 8;
    }
    v95 = (char *)v138;
    v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            v100 = *(_QWORD *)v95;
            v101 = *(_QWORD *)v99;
            if (*(_QWORD *)(*(_QWORD *)v95 + 48) >= *(_QWORD *)(*(_QWORD *)v99 + 32)
              && *(_QWORD *)(v100 + 32) <= *(_QWORD *)(v101 + 48))
            {
              v102 = *(_QWORD *)(v100 + 56) >= *(_QWORD *)(v101 + 40)
                  && *(_QWORD *)(v100 + 40) <= *(_QWORD *)(v101 + 56);
              v103 = v102 && *(_BYTE *)(v100 + 96) == 0;
              if (v103 && *(_BYTE *)(v101 + 96) == 0)
              {
                if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                v75 = v127;
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  v79 = 0x7FFFFFFFFFFFFFFFLL;
  v80 = 0x8000000000000000;
  v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v125 = vdupq_n_s64(0x8000000000000000);
  v81 = 0x8000000000000000;
  v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    v83 = *(_QWORD **)v76;
    v84 = *(_QWORD *)(*(_QWORD *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81)
        goto LABEL_164;
LABEL_156:
      v85 = v83[5];
      if (v85 < v79)
        goto LABEL_157;
LABEL_165:
      if (v85 > v80)
        goto LABEL_166;
LABEL_158:
      v86 = v83[6];
      if (v86 < v82)
        goto LABEL_159;
LABEL_167:
      if (v86 > v81)
        goto LABEL_168;
LABEL_160:
      v87 = v83[7];
      if (v87 < v79)
        goto LABEL_161;
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(_QWORD *)(*(_QWORD *)v76 + 32);
      v82 = v84;
      if (v84 <= v81)
        goto LABEL_156;
LABEL_164:
      v125.i64[0] = v84;
      v81 = v84;
      v85 = v83[5];
      if (v85 >= v79)
        goto LABEL_165;
LABEL_157:
      v124.i64[1] = v85;
      v79 = v85;
      if (v85 <= v80)
        goto LABEL_158;
LABEL_166:
      v125.i64[1] = v85;
      v80 = v85;
      v86 = v83[6];
      if (v86 >= v82)
        goto LABEL_167;
LABEL_159:
      v124.i64[0] = v86;
      v82 = v86;
      if (v86 <= v81)
        goto LABEL_160;
LABEL_168:
      v125.i64[0] = v86;
      v81 = v86;
      v87 = v83[7];
      if (v87 >= v79)
        goto LABEL_169;
LABEL_161:
      v124.i64[1] = v87;
      v79 = v87;
      if (v87 > v80)
        goto LABEL_170;
    }
    v76 += 8;
    if (v76 != v127)
      continue;
    break;
  }
  if (!sub_1002ABFA0(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002ABFA0(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  v98 = (char *)v141;
  v97 = v142;
  if (a5 > (v142 - (_BYTE *)v141) >> 3 || a4 > 0x63 || (v133 - (_BYTE *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      v105 = v133;
      if (v132 != v133)
      {
        do
        {
          v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              v109 = *(_QWORD *)v98;
              v110 = *(_QWORD *)v108;
              if (*(_QWORD *)(*(_QWORD *)v98 + 48) >= *(_QWORD *)(*(_QWORD *)v108 + 32)
                && *(_QWORD *)(v109 + 32) <= *(_QWORD *)(v110 + 48))
              {
                v111 = *(_QWORD *)(v109 + 56) >= *(_QWORD *)(v110 + 40)
                    && *(_QWORD *)(v109 + 40) <= *(_QWORD *)(v110 + 56);
                v112 = v111 && *(_BYTE *)(v109 + 96) == 0;
                if (v112 && *(_BYTE *)(v110 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                  v105 = v133;
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002ABFA0((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v107 = (char *)v138;
  v106 = v139;
  if (a5 > (v139 - (_BYTE *)v138) >> 3 || a4 > 0x63 || (v130 - (_BYTE *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      v114 = v130;
      if (v129 != v130)
      {
        do
        {
          v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              v118 = *(_QWORD *)v107;
              v119 = *(_QWORD *)v117;
              if (*(_QWORD *)(*(_QWORD *)v107 + 48) >= *(_QWORD *)(*(_QWORD *)v117 + 32)
                && *(_QWORD *)(v118 + 32) <= *(_QWORD *)(v119 + 48))
              {
                v120 = *(_QWORD *)(v118 + 56) >= *(_QWORD *)(v119 + 40)
                    && *(_QWORD *)(v118 + 40) <= *(_QWORD *)(v119 + 56);
                v121 = v120 && *(_BYTE *)(v118 + 96) == 0;
                if (v121 && *(_BYTE *)(v119 + 96) == 0)
                {
                  if (!sub_1002ADCA0(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), *(_QWORD **)(a6 + 24), *(_BYTE **)(a6 + 32)))goto LABEL_278;
                  v114 = v130;
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002ABFA0(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  v115 = 1;
  v116 = (char *)__p;
  if (__p)
    goto LABEL_279;
LABEL_280:
  if (v129)
  {
    v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002ADBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
  {
    operator delete(__p);
    v34 = a20;
    if (!a20)
    {
LABEL_3:
      v35 = a23;
      if (!a23)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v34 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v34);
  v35 = a23;
  if (!a23)
  {
LABEL_4:
    v36 = a26;
    if (!a26)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  v36 = a26;
  if (!a26)
  {
LABEL_5:
    v37 = a29;
    if (!a29)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  v37 = a29;
  if (!a29)
  {
LABEL_6:
    v38 = a32;
    if (!a32)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  v38 = a32;
  if (!a32)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002ADCA0(int a1, double **a2, int *a3, int a4, double **a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, _BYTE *a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  double **v16;
  double *v17;
  double *v18;
  uint64_t v19;
  double **v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  double *v76;
  double *v77;
  double *v78;
  double *v79;
  uint64_t v80;
  unint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  int v106;
  double *v107;
  _QWORD *v108;
  int v109;
  double *v110;
  double *v111;
  uint64_t v114;
  double *v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  double *v119;
  uint64_t v120;
  int v121;
  double *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  uint64_t v128;
  uint64_t v129;
  double *v130;
  double *v131;
  char v132[16];
  int v133;
  char v134;
  uint64_t v135;
  __int16 v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[7];
  char v156;
  char v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _QWORD v161[7];
  char v162;
  char v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;

  v12 = a6;
  if (*((_BYTE *)a3 + 96) && (unint64_t)(*((_QWORD *)a3 + 10) + 1) < *((_QWORD *)a3 + 11)
    || *((_BYTE *)a6 + 96) && (unint64_t)(*((_QWORD *)a6 + 10) + 1) < *((_QWORD *)a6 + 11))
  {
    return 1;
  }
  v15 = *((_QWORD *)a3 + 3);
  if (v15 >= 0)
    v16 = (double **)&a2[3][3 * v15];
  else
    v16 = a2;
  v17 = *v16;
  v18 = v16[1];
  v19 = *((_QWORD *)a6 + 3);
  if (v19 >= 0)
    v20 = (double **)&a5[3][3 * v19];
  else
    v20 = a5;
  v130 = v20[1];
  v131 = *v20;
  v21 = *a3;
  v22 = *a6;
  v23 = *((_QWORD *)a3 + 13);
  v25 = *((_QWORD *)a3 + 8);
  v24 = *((_QWORD *)a3 + 9);
  v26 = &v17[2 * v25];
  v106 = a4;
  v121 = *a6;
  v110 = v18;
  v111 = v17;
  v128 = v25;
  if (v25 == v24)
  {
    v27 = &v17[2 * v25];
    v14 = 1;
    v107 = &v17[2 * v24];
    if (v26 == v107)
      return v14;
    goto LABEL_34;
  }
  v29 = 0;
  v122 = v26;
  v124 = *((_QWORD *)a3 + 9);
  v30 = 16 * v24 - 16 * v25;
  v31 = v26;
  v117 = *((_QWORD *)a3 + 13);
  v32 = v26;
  while (1)
  {
    v33 = v31;
    v34 = (double)*(uint64_t *)(a10 + 24) + (v31[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
    if (v34 >= 0.0)
      v35 = 0.5;
    else
      v35 = -0.5;
    sub_100284F14(v34 + v35);
    v36 = v32[2];
    v32 += 2;
    v37 = (double)*(uint64_t *)(a10 + 16) + (v36 - *(double *)a10) * *(double *)(a10 + 32);
    if (v37 >= 0.0)
      v38 = 0.5;
    else
      v38 = -0.5;
    v39 = v37 + v38;
    sub_100284F14(v37 + v38);
    v40 = ceil(v39);
    v41 = floor(v39);
    if (v39 >= 0.0)
      v40 = v41;
    v42 = (uint64_t)v40;
    if (v21 == 1)
    {
      if (*((_QWORD *)a6 + 4) <= v42)
      {
        v128 = v25;
        goto LABEL_31;
      }
      goto LABEL_17;
    }
    if (v21 != -1)
      break;
    if (*((_QWORD *)a6 + 6) >= v42)
    {
      v23 = v117 + v29;
      v128 += v29;
LABEL_31:
      v12 = a6;
      a4 = v106;
      v18 = v110;
      v17 = v111;
      v22 = v121;
      v27 = v33;
      v14 = 1;
      v107 = &v111[2 * v124];
      if (v27 == v107)
        return v14;
LABEL_34:
      v118 = v23;
      v43 = v27 + 2;
      v44 = &v17[2 * (v27 != v17)];
      if (v27 + 2 != v18)
        v44 = v27 + 2;
      v45 = v44 + 2;
      v46 = &v17[2 * (v44 != v17)];
      if (v45 != v18)
        v46 = v45;
      v119 = v46;
      v109 = -v21;
      v123 = -v22;
      v47 = v128;
      v120 = a4;
      v108 = v12;
LABEL_43:
      v50 = (double)*(uint64_t *)(a10 + 24) + (v27[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
      if (v50 >= 0.0)
        v51 = 0.5;
      else
        v51 = -0.5;
      sub_100284F14(v50 + v51);
      v52 = (double)*(uint64_t *)(a10 + 16) + (*v27 - *(double *)a10) * *(double *)(a10 + 32);
      if (v52 >= 0.0)
        v53 = 0.5;
      else
        v53 = -0.5;
      v54 = v52 + v53;
      sub_100284F14(v52 + v53);
      v55 = ceil(v54);
      v56 = floor(v54);
      if (v54 >= 0.0)
        v55 = v56;
      v57 = (uint64_t)v55;
      if (v109 == 1)
      {
        if (v12[4] > v57)
          return 1;
      }
      else if (v109 == -1 && v12[6] < v57)
      {
        return 1;
      }
      v161[0] = a3;
      v161[1] = v47;
      v129 = v47;
      v115 = v43;
      v116 = v27;
      v161[2] = v27;
      v161[3] = v43;
      v161[4] = v119;
      v161[5] = v17;
      v161[6] = v18;
      v162 = 1;
      v163 = 0;
      v58 = *(_OWORD *)(a10 + 16);
      v164 = *(_OWORD *)a10;
      v165 = v58;
      v166 = *(_QWORD *)(a10 + 32);
      v60 = v12[8];
      v59 = v12[9];
      v61 = &v131[2 * v60];
      v62 = v12[13];
      v114 = v62;
      if (v60 == v59)
        goto LABEL_75;
      v63 = 0;
      v125 = v12[9];
      v64 = 16 * v59 - 16 * v60;
      v65 = v12[8];
      v66 = &v131[2 * v60];
      while (1)
      {
        v67 = (double)*(uint64_t *)(a10 + 24) + (v61[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v67 >= 0.0)
          v68 = 0.5;
        else
          v68 = -0.5;
        sub_100284F14(v67 + v68);
        v69 = v66[2];
        v66 += 2;
        v70 = (double)*(uint64_t *)(a10 + 16) + (v69 - *(double *)a10) * *(double *)(a10 + 32);
        if (v70 >= 0.0)
          v71 = 0.5;
        else
          v71 = -0.5;
        v72 = v70 + v71;
        sub_100284F14(v70 + v71);
        v73 = ceil(v72);
        v74 = floor(v72);
        if (v72 >= 0.0)
          v73 = v74;
        v75 = (uint64_t)v73;
        if (v121 == 1)
        {
          if (*((_QWORD *)a3 + 4) <= v75)
          {
            v114 = v62;
            v60 = v65;
LABEL_74:
            v59 = v125;
LABEL_75:
            v126 = &v131[2 * v59];
            if (v61 == v126)
            {
LABEL_39:
              ++v118;
              v12 = v108;
              v18 = v110;
              v17 = v111;
              v48 = v129;
LABEL_40:
              v27 = v116 + 2;
              v43 = v115 + 2;
              v47 = v48 + 1;
              v49 = v119 + 2;
              if (v119 + 2 == v18)
                v49 = &v17[2 * (v119 != v17)];
              v119 = v49;
              if (v115 == v107)
                return 1;
              goto LABEL_43;
            }
            v76 = v61 + 2;
            if (v61 + 2 == v130)
              v76 = &v131[2 * (v61 != v131)];
            v77 = v76 + 2;
            v78 = &v131[2 * (v76 != v131)];
            if (v77 == v130)
              v79 = v78;
            else
              v79 = v77;
            v80 = ++v118 - v114;
            v12 = v108;
            v48 = v129;
            while (2)
            {
              v82 = (double)*(uint64_t *)(a10 + 24) + (v61[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
              if (v82 >= 0.0)
                v83 = 0.5;
              else
                v83 = -0.5;
              sub_100284F14(v82 + v83);
              v84 = (double)*(uint64_t *)(a10 + 16) + (*v61 - *(double *)a10) * *(double *)(a10 + 32);
              if (v84 >= 0.0)
                v85 = 0.5;
              else
                v85 = -0.5;
              v86 = v84 + v85;
              sub_100284F14(v84 + v85);
              v87 = ceil(v86);
              v88 = floor(v86);
              if (v86 >= 0.0)
                v87 = v88;
              v89 = (uint64_t)v87;
              if (v123 == 1)
              {
                if (*((_QWORD *)a3 + 4) > v89)
                  goto LABEL_127;
              }
              else if (v123 == -1 && *((_QWORD *)a3 + 6) < v89)
              {
                goto LABEL_127;
              }
              v90 = *((_QWORD *)a3 + 2);
              if (a1 != v106)
              {
                v91 = *((_QWORD *)a3 + 3);
                v93 = v108[2];
                v92 = v108[3];
                goto LABEL_117;
              }
              v91 = *((_QWORD *)a3 + 3);
              v93 = v108[2];
              v92 = v108[3];
              if (v90 != v93)
                goto LABEL_117;
              if (v91 == v92)
              {
                if (a7)
                {
                  if (v48 >= v60 || (a8 & 1) == 0)
                  {
                    v92 = *((_QWORD *)a3 + 3);
                    v93 = *((_QWORD *)a3 + 2);
                    if (v48 < v60)
                      goto LABEL_117;
LABEL_84:
                    v61 += 2;
                    ++v60;
                    if (v79 + 2 == v130)
                      v79 = &v131[2 * (v79 != v131)];
                    else
                      v79 += 2;
                    --v80;
                    if (v61 == v126)
                    {
LABEL_127:
                      v18 = v110;
                      v17 = v111;
                      goto LABEL_40;
                    }
                    continue;
                  }
LABEL_111:
                  if (!v80)
                    goto LABEL_84;
                  if (!v48)
                  {
                    v92 = *((_QWORD *)a3 + 3);
                    v93 = *((_QWORD *)a3 + 2);
                    if (*((_QWORD *)a3 + 11) - 2 <= v60)
                      goto LABEL_84;
LABEL_117:
                    v155[0] = v108;
                    v155[1] = v60;
                    v155[2] = v61;
                    v155[3] = v61 + 2;
                    v155[4] = v79;
                    v155[5] = v131;
                    v155[6] = v130;
                    v156 = 0;
                    v157 = 0;
                    v94 = *(_OWORD *)(a10 + 16);
                    v158 = *(_OWORD *)a10;
                    v159 = v94;
                    v160 = *(_QWORD *)(a10 + 32);
                    v133 = 0;
                    v134 = 0;
                    v135 = -1;
                    v136 = 0;
                    v137 = 0;
                    v144 = 0;
                    v145 = 0;
                    v146 = 0;
                    v152 = 1;
                    v153 = 0;
                    v154 = 0;
                    v138 = a1;
                    v139 = v90;
                    v140 = v91;
                    v141 = v48;
                    v142 = xmmword_1003970F0;
                    v143 = 1;
                    v147 = v120;
                    v148 = v93;
                    v149 = v92;
                    v150 = v60;
                    v151 = xmmword_1003970F0;
                    v95 = a11[5];
                    sub_1002AE5F8((uint64_t)v161, (uint64_t)v155, (uint64_t)v132, a9, a10, a11);
                    v96 = a11[4];
                    v97 = a11[1];
                    v98 = a11[2];
                    v99 = (_QWORD *)(v97 + 8 * (v96 / 0x14));
                    if (v98 == v97)
                    {
                      v100 = 0;
                      if (!v95)
                        goto LABEL_124;
                    }
                    else
                    {
                      v100 = *v99 + 200 * (v96 % 0x14);
                      if (!v95)
                        goto LABEL_124;
                    }
                    v101 = v95 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v100 - *v99) >> 3);
                    if (v101 < 1)
                    {
                      v102 = 19 - v101;
                      v99 -= v102 / 0x14;
                      v100 = *v99 + 200 * (20 * (v102 / 0x14) - v102) + 3800;
                    }
                    else
                    {
                      v99 += v101 / 0x14uLL;
                      v100 = *v99 + 200 * (v101 % 0x14uLL);
                    }
LABEL_124:
                    v48 = v129;
                    v103 = a11[5] + v96;
                    v104 = (_QWORD *)(v97 + 8 * (v103 / 0x14));
                    if (v98 == v97)
                    {
                      v81 = 0;
                      if (!v100)
                        goto LABEL_84;
                    }
                    else
                    {
                      v81 = *v104 + 200 * (v103 % 0x14);
                      if (v100 == v81)
                        goto LABEL_84;
                    }
                    if (20 * (v104 - v99) - 0x70A3D70A3D70A3D7 * ((uint64_t)(v81 - *v104) >> 3) != 0x8F5C28F5C28F5C29 * ((uint64_t)(v100 - *v99) >> 3))
                    {
                      v14 = 0;
                      *a12 = 1;
                      return v14;
                    }
                    goto LABEL_84;
                  }
                }
                else if (a8)
                {
                  goto LABEL_111;
                }
                v92 = *((_QWORD *)a3 + 3);
              }
              break;
            }
            v93 = *((_QWORD *)a3 + 2);
            goto LABEL_117;
          }
        }
        else
        {
          if (v121 != -1)
          {
            v61 = &v131[2 * v60];
            goto LABEL_74;
          }
          if (*((_QWORD *)a3 + 6) >= v75)
          {
            v114 += v63;
            v60 += v63;
            goto LABEL_74;
          }
        }
        ++v65;
        ++v62;
        ++v63;
        v61 = v66;
        v64 -= 16;
        if (!v64)
          goto LABEL_39;
      }
    }
LABEL_17:
    ++v25;
    ++v23;
    ++v29;
    v31 = v32;
    v30 -= 16;
    if (!v30)
      return 1;
  }
  v27 = v122;
  v12 = a6;
  a4 = v106;
  v18 = v110;
  v17 = v111;
  v22 = v121;
  v23 = v117;
  v14 = 1;
  v107 = &v111[2 * v124];
  if (v122 != v107)
    goto LABEL_34;
  return v14;
}

_QWORD *sub_1002AE5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[32];
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];
  char v57;
  _QWORD v58[6];
  char v59;
  _QWORD v60[3];
  _QWORD v61[3];
  _BYTE v62[40];
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  _DWORD v67[7];
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  double *v74[2];
  __int128 *v75[2];

  v73 = a6;
  v51[0] = a1;
  v51[1] = a2;
  v11 = sub_10028D8E0((uint64_t)&v52, a1, a2, a5);
  v56[0] = a1;
  v56[1] = a5;
  v56[2] = v11;
  v56[3] = &v53;
  v57 = 0;
  v58[0] = a2;
  v58[1] = a5;
  v58[2] = &v54;
  v58[3] = &v55;
  v59 = 0;
  v60[1] = v56;
  v60[2] = v58;
  v61[1] = v58;
  v61[2] = v56;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(double **)(a2 + 16);
  v14 = *(double **)(a2 + 24);
  v75[0] = *(__int128 **)(a1 + 16);
  v75[1] = (__int128 *)v12;
  v74[0] = v13;
  v74[1] = v14;
  v42 = xmmword_100393CB0;
  v43 = 0uLL;
  v44 = 1uLL;
  *(double *)&v40 = *(double *)v12 - *(double *)v75[0];
  *(double *)&v41 = *v14 - *v13;
  *((double *)&v40 + 1) = *(double *)(v12 + 8) - *((double *)v75[0] + 1);
  *((double *)&v41 + 1) = v14[1] - v13[1];
  sub_10028DDD8((uint64_t)&v40, v75, v74, (uint64_t)v56, (uint64_t)v58, (uint64_t)v62);
  v71 = a4;
  v72 = a5;
  if (LOBYTE(v67[0]) != 100)
  {
    v15 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)v49 = *(_OWORD *)(a3 + 160);
    *(_OWORD *)&v49[16] = v15;
    v50 = *(_QWORD *)(a3 + 192);
    v16 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)&v45[16] = *(_OWORD *)(a3 + 96);
    v46 = v16;
    v17 = *(_OWORD *)(a3 + 144);
    v47 = *(_OWORD *)(a3 + 128);
    v48 = v17;
    v18 = *(_OWORD *)(a3 + 48);
    v42 = *(_OWORD *)(a3 + 32);
    v43 = v18;
    v19 = *(_OWORD *)(a3 + 80);
    v44 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)v45 = v19;
    v20 = *(_OWORD *)(a3 + 16);
    v40 = *(_OWORD *)a3;
    v41 = v20;
    switch(LOBYTE(v67[0]))
    {
      case 'c':
        if (!BYTE1(v67[0]))
        {
          if (v69)
          {
            sub_1002AF8E8(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
          }
          else
          {
            sub_1002AFFAC(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
            LODWORD(v41) = 5;
          }
          goto LABEL_19;
        }
        sub_1002AFB88(a1, a2, &v40, (uint64_t)&v73, (uint64_t)v51, (uint64_t)v60);
        return v73;
      case 'i':
        v40 = *(_OWORD *)&v62[8];
        *(_QWORD *)&v45[24] = v64;
        *(_OWORD *)&v45[8] = v63;
        *(_QWORD *)&v49[24] = v66;
        *(_OWORD *)&v49[8] = v65;
        v21 = v73;
        v22 = v73[2];
        v23 = v73[1];
        v24 = 20 * ((v22 - v23) >> 3) - 1;
        LODWORD(v41) = 2;
        if (v22 == v23)
          v24 = 0;
        v25 = v68 == 1;
        *((_DWORD *)&v42 + 20 * (v68 != 1) + 2) = 1;
        *((_DWORD *)&v42 + 20 * v25 + 2) = 2;
        v26 = v21[5] + v21[4];
        if (v24 == v26)
          goto LABEL_22;
        goto LABEL_23;
      case 'm':
        if (v70 == 1)
          sub_1002AEA10(a1, a2, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v60);
        else
          sub_1002AEE2C(a2, a1, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v61);
        goto LABEL_19;
      case 't':
        sub_1002AF24C(a1, a2, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v60);
        goto LABEL_19;
      default:
        if (LOBYTE(v67[0]) != 101 || BYTE1(v67[0]))
          return v73;
        sub_1002AFFAC(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
LABEL_19:
        v21 = v73;
        v27 = v73[2];
        v23 = v73[1];
        v28 = 20 * ((v27 - v23) >> 3) - 1;
        if (v27 == v23)
          v28 = 0;
        v26 = v73[5] + v73[4];
        if (v28 == v26)
        {
LABEL_22:
          sub_1002B020C((uint64_t)v21);
          v23 = v21[1];
          v26 = v21[5] + v21[4];
        }
LABEL_23:
        v29 = *(_QWORD *)(v23 + 8 * (v26 / 0x14)) + 200 * (v26 % 0x14);
        *(_OWORD *)v29 = v40;
        v30 = v41;
        v31 = v42;
        v32 = v44;
        *(_OWORD *)(v29 + 48) = v43;
        *(_OWORD *)(v29 + 64) = v32;
        *(_OWORD *)(v29 + 16) = v30;
        *(_OWORD *)(v29 + 32) = v31;
        v33 = *(_OWORD *)v45;
        v34 = *(_OWORD *)&v45[16];
        v35 = v47;
        *(_OWORD *)(v29 + 112) = v46;
        *(_OWORD *)(v29 + 128) = v35;
        *(_OWORD *)(v29 + 80) = v33;
        *(_OWORD *)(v29 + 96) = v34;
        v36 = v48;
        v37 = *(_OWORD *)v49;
        v38 = *(_OWORD *)&v49[16];
        *(_QWORD *)(v29 + 192) = v50;
        *(_OWORD *)(v29 + 160) = v37;
        *(_OWORD *)(v29 + 176) = v38;
        *(_OWORD *)(v29 + 144) = v36;
        ++v21[5];
        break;
    }
  }
  return v73;
}

void sub_1002AEA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  double v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  double v41;

  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v9 = a5[10];
    if (v9 == 1)
      goto LABEL_4;
  }
  else if (v8 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 104) = 0x412E848000000000;
    v9 = a5[10];
    if (v9 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 184) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v10 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    v9 = a5[10];
    if (v9 == 1)
      goto LABEL_4;
  }
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 184) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v11;
  }
LABEL_11:
  v12 = a5[7];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v41 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v41);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (!(v12 + v18))
      goto LABEL_21;
  }
  else
  {
    v25 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v25 <= v41 * 2.22044605e-16)
    {
LABEL_12:
      v18 = 0;
      if (v12)
        goto LABEL_13;
LABEL_21:
      v26 = a3 + 40;
      *(_DWORD *)(v26 + 80 * (v18 != -1)) = 1;
      *(_DWORD *)(v26 + 80 * (v18 == -1)) = 2;
      return;
    }
    if (!(v12 + v18))
      goto LABEL_21;
  }
LABEL_13:
  v19 = *(_QWORD *)(a6 + 16);
  v20 = *(uint64_t **)(v19 + 16);
  v21 = *(uint64_t **)(v19 + 24);
  v22 = (uint64_t *)sub_10028ED14(v19);
  v41 = 1.0;
  v23 = sub_10028EE24(v20, v21, v22, &v41);
  if (v23 == 0.0)
  {
LABEL_14:
    v24 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
  }
  else
  {
    v27 = fabs(v23);
    if (v23 > 0.0)
      v24 = 1;
    else
      v24 = -1;
    if (v27 <= v41 * 2.22044605e-16)
      goto LABEL_14;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_10028ED14(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v41 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v41);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v41 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v24 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v24 == -1)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 120) = v35;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v24)
  {
    v36 = (v24 == 1) ^ (v33 == 0);
    if (v33 * v12 == -1)
    {
      v37 = sub_100291358(a6);
      if (sub_1002913F0(a6) * v37 == 1 && sub_1002914A8(a6) * v33 == -1)
        v36 ^= 1u;
    }
    v38 = a3 + 40;
    *(_DWORD *)(v38 + 80 * v36) = 1;
    *(_DWORD *)(v38 + 80 * (v36 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else
  {
    if (v12 == v24)
    {
      v39 = 4;
      *(_DWORD *)(a3 + 40) = 4;
    }
    else
    {
      if (v24 == 1)
        v40 = 2;
      else
        v40 = 1;
      *(_DWORD *)(a3 + 40) = v40;
      v39 = 3;
    }
    *(_DWORD *)(a3 + 120) = v39;
  }
}

void sub_1002AEE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  double v40;

  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    v10 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    v9 = a5[10];
    if (v9 != 1)
      goto LABEL_6;
LABEL_9:
    *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 184) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a3 + 104) = 0x412E848000000000;
  v9 = a5[10];
  if (v9 == 1)
    goto LABEL_9;
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 184) = 0;
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v11;
  }
LABEL_11:
  v12 = a5[5];
  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v40 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v40);
  if (v17 == 0.0)
    goto LABEL_12;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 > v40 * 2.22044605e-16)
    {
      if (v12 + v18)
        goto LABEL_25;
      goto LABEL_20;
    }
LABEL_12:
    v18 = 0;
    if (v12)
      goto LABEL_25;
LABEL_20:
    v20 = a3 + 40;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0)
    v18 = 1;
  else
    v18 = -1;
  if (!(v12 + v18))
    goto LABEL_20;
LABEL_25:
  v21 = *(_QWORD *)(a6 + 16);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_10028ED14(v21);
  v40 = 1.0;
  v25 = sub_10028EE24(v22, v23, v24, &v40);
  if (v25 == 0.0)
  {
LABEL_26:
    v26 = 0;
    goto LABEL_36;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
  }
  else
  {
    v27 = fabs(v25);
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v27 <= v40 * 2.22044605e-16)
      goto LABEL_26;
  }
LABEL_36:
  v28 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 24);
  v30 = (uint64_t *)sub_10028ED14(v28);
  v31 = *(uint64_t **)(*(_QWORD *)(a6 + 8) + 24);
  v40 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v40);
  if (v32 == 0.0)
  {
LABEL_37:
    v33 = 0;
    goto LABEL_47;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
  }
  else
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 <= v40 * 2.22044605e-16)
      goto LABEL_37;
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1)
      v35 = 1;
    else
      v35 = 3;
    *(_DWORD *)(a3 + 40) = v35;
    *(_DWORD *)(a3 + 120) = 1;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v26)
  {
    v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 == -1)
    {
      v37 = sub_100291358(a6);
      if (sub_1002913F0(a6) * v37 == 1 && sub_1002914A8(a6) * v33 == -1)
        v36 ^= 1u;
    }
    v38 = a3 + 40;
    *(_DWORD *)(v38 + 80 * v36) = 1;
    *(_DWORD *)(v38 + 80 * (v36 ^ 1)) = 2;
    *(_BYTE *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 120) = 4;
  }
  else
  {
    if (v26 == 1)
      v39 = 2;
    else
      v39 = 1;
    *(_DWORD *)(a3 + 120) = v39;
    *(_DWORD *)(a3 + 40) = 3;
  }
}

void sub_1002AF24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  double v38;
  int v39;
  double v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  double v47;
  int v48;
  double v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  double v54;
  int v55;
  double v56;
  BOOL v57;
  int v58;
  char v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  double v73;
  BOOL v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  double v80;

  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 104) = 0;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(_QWORD *)(a3 + 104) = 0x412E848000000000;
    v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
      *(_QWORD *)(a3 + 184) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    v11 = *(_OWORD *)(a4 + 40);
    *(_QWORD *)(a3 + 104) = *(_QWORD *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v11;
    v10 = a5[10];
    if (v10 == 1)
      goto LABEL_4;
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_100393CB0;
    *(_QWORD *)(a3 + 184) = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a3 + 184) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v12;
  }
LABEL_11:
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 16);
  v15 = *(uint64_t **)(v13 + 24);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = 0;
    goto LABEL_22;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v80 * 2.22044605e-16)
      goto LABEL_12;
  }
LABEL_22:
  v20 = a5[7];
  v21 = *(_QWORD *)(a6 + 8);
  v22 = *(uint64_t **)(v21 + 16);
  v23 = *(uint64_t **)(v21 + 24);
  v24 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 16));
  v80 = 1.0;
  v25 = sub_10028EE24(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    v26 = 0;
    goto LABEL_33;
  }
  if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0)
      v26 = 1;
    else
      v26 = -1;
    if (v26 * v20 != -1)
      goto LABEL_33;
LABEL_24:
    v27 = *(_QWORD *)(a6 + 8);
    v28 = *(uint64_t **)(v27 + 16);
    v29 = *(uint64_t **)(v27 + 24);
    v30 = (uint64_t *)sub_10028ED14(v27);
    v80 = 1.0;
    v31 = sub_10028EE24(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0)
          v32 = 1;
        else
          v32 = -1;
        if (v32 != v20)
          goto LABEL_139;
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 40) = 3;
          v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1)
            v42 = 1;
          else
            v42 = 2;
          *(_DWORD *)(a3 + 40) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          v69 = *(_QWORD *)(a6 + 16);
          v70 = *(uint64_t **)(v69 + 24);
          v71 = (uint64_t *)sub_10028ED14(v69);
          v72 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
          v80 = 1.0;
          v73 = sub_10028EE24(v70, v71, v72, &v80);
          if (v73 == 0.0)
            goto LABEL_141;
          if ((*(_QWORD *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
          }
          else
          {
            v75 = fabs(v73);
            if (v73 > 0.0)
              v76 = 1;
            else
              v76 = -1;
            if (v75 <= v80 * 2.22044605e-16)
              goto LABEL_141;
          }
          if (v76 == v26)
          {
            if (v26 == 1)
              v78 = 1;
            else
              v78 = 2;
            *(_DWORD *)(a3 + 40) = v78;
            if (v26 == 1)
              v42 = 2;
            else
              v42 = 1;
            goto LABEL_165;
          }
        }
        v74 = v26 == 1;
        if (v26 == 1)
          v79 = 2;
        else
          v79 = 1;
        *(_DWORD *)(a3 + 40) = v79;
LABEL_170:
        if (v74)
          v62 = 1;
        else
          v62 = 2;
        goto LABEL_173;
      }
      v41 = fabs(v31);
      if (v31 > 0.0)
        v32 = 1;
      else
        v32 = -1;
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20)
          goto LABEL_139;
        goto LABEL_52;
      }
    }
    v32 = 0;
    if (v20)
      goto LABEL_139;
    goto LABEL_52;
  }
  v33 = fabs(v25);
  if (v25 > 0.0)
    v26 = 1;
  else
    v26 = -1;
  if (v33 <= v80 * 2.22044605e-16)
    goto LABEL_23;
  if (v26 * v20 == -1)
    goto LABEL_24;
LABEL_33:
  v34 = *(_QWORD *)(a6 + 16);
  v35 = *(uint64_t **)(v34 + 24);
  v36 = (uint64_t *)sub_10028ED14(v34);
  v37 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v80 = 1.0;
  v38 = sub_10028EE24(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    v39 = 0;
    goto LABEL_61;
  }
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
  }
  else
  {
    v40 = fabs(v38);
    if (v38 > 0.0)
      v39 = 1;
    else
      v39 = -1;
    if (v40 <= v80 * 2.22044605e-16)
      goto LABEL_34;
  }
LABEL_61:
  v43 = *(_QWORD *)(a6 + 8);
  v44 = *(uint64_t **)(v43 + 16);
  v45 = *(uint64_t **)(v43 + 24);
  v46 = (uint64_t *)sub_10028ED14(v43);
  v80 = 1.0;
  v47 = sub_10028EE24(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(_QWORD *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0)
        v48 = 1;
      else
        v48 = -1;
      goto LABEL_72;
    }
    v49 = fabs(v47);
    if (v47 > 0.0)
      v48 = 1;
    else
      v48 = -1;
    if (v49 > v80 * 2.22044605e-16)
      goto LABEL_72;
  }
  v48 = 0;
LABEL_72:
  v50 = *(_QWORD *)(a6 + 16);
  v51 = *(uint64_t **)(v50 + 16);
  v52 = *(uint64_t **)(v50 + 24);
  v53 = (uint64_t *)sub_10028ED14(v50);
  v80 = 1.0;
  v54 = sub_10028EE24(v51, v52, v53, &v80);
  if (v54 == 0.0)
    goto LABEL_73;
  if ((*(_QWORD *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0)
      v55 = 1;
    else
      v55 = -1;
    goto LABEL_83;
  }
  v56 = fabs(v54);
  v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16)
LABEL_73:
    v55 = 0;
LABEL_83:
  if (v26)
    v57 = 1;
  else
    v57 = v55 * v20 == 1;
  v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39)
      v59 = 1;
    else
      v59 = v58;
    if ((v59 & 1) != 0)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 40) = 3;
        if (v55 == 1)
          v66 = 2;
        else
          v66 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v66;
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1)
          v60 = 1;
        else
          v60 = 2;
        *(_DWORD *)(a3 + 40) = v60;
        if (v55 == 1)
          v61 = 2;
        else
          v61 = 1;
        if (v58)
          v62 = 3;
        else
          v62 = v61;
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        v67 = v55 == 1;
        if (v55 == 1)
          v68 = 2;
        else
          v68 = 1;
        *(_DWORD *)(a3 + 40) = v68;
        if (v67)
          v42 = 1;
        else
          v42 = 2;
LABEL_165:
        *(_DWORD *)(a3 + 120) = v42;
        *(_BYTE *)(a3 + 20) = 1;
        return;
      }
      if (v18 != -v55)
        return;
      if (v55 == 1)
        v77 = 2;
      else
        v77 = 1;
      *(_DWORD *)(a3 + 40) = v77;
      *(_DWORD *)(a3 + 120) = v77;
      if (v58)
      {
        v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(_BYTE *)(a3 + 20) = 1;
      return;
    }
LABEL_141:
    v62 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 120) = v62;
    return;
  }
  if (v55 == 1)
    v63 = 2;
  else
    v63 = 1;
  *(_DWORD *)(a3 + 40) = v63;
  if (v26 == 1 || v20 == 1)
    v65 = 1;
  else
    v65 = 2;
  if (v58)
    v65 = 3;
  *(_DWORD *)(a3 + 120) = v65;
  if ((v58 & 1) == 0)
    goto LABEL_121;
}

double sub_1002AF8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  double v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double result;
  double v42;

  v12 = sub_10028FED4((double *)(a4 + 64), (double *)(a4 + 120));
  v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 16) = 5;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v12 + 8);
  v14 = *(_QWORD *)(v13 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v13 + 40);
  *(_QWORD *)(a3 + 104) = v14;
  v15 = *(_QWORD *)(v13 + 80);
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(v13 + 64);
  *(_QWORD *)(a3 + 184) = v15;
  v16 = *(_DWORD *)(a5 + 36);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(uint64_t **)(v17 + 16);
  v19 = *(uint64_t **)(v17 + 24);
  v20 = (uint64_t *)sub_10028ED14(v17);
  v42 = 1.0;
  v21 = sub_10028EE24(v18, v19, v20, &v42);
  if (v21 != 0.0)
  {
    if ((*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0)
        v22 = 1;
      else
        v22 = -1;
      goto LABEL_3;
    }
    v39 = fabs(v21);
    if (v21 > 0.0)
      v22 = 1;
    else
      v22 = -1;
    if (v39 > v42 * 2.22044605e-16)
      goto LABEL_3;
  }
  v22 = 0;
LABEL_3:
  v23 = *(_QWORD *)(a6 + 16);
  v24 = *(uint64_t **)(v23 + 16);
  v25 = *(uint64_t **)(v23 + 24);
  v26 = (uint64_t *)sub_10028ED14(v23);
  v42 = 1.0;
  v27 = sub_10028EE24(v24, v25, v26, &v42);
  if (v27 == 0.0)
    goto LABEL_4;
  if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v27 > 0.0)
      v28 = 1;
    else
      v28 = -1;
    goto LABEL_5;
  }
  v40 = fabs(v27);
  v28 = v27 > 0.0 ? 1 : -1;
  if (v40 <= v42 * 2.22044605e-16)
LABEL_4:
    v28 = 0;
LABEL_5:
  if (v16 == 1)
    v29 = v22;
  else
    v29 = v28;
  v30 = v29 * v16;
  if (v30 == 1)
    v31 = 1;
  else
    v31 = 2;
  if (v30 == 1)
    v32 = 2;
  else
    v32 = 1;
  if (v30)
  {
    v33 = v32;
  }
  else
  {
    v31 = 4;
    v33 = 4;
  }
  *(_DWORD *)(a3 + 40) = v31;
  *(_DWORD *)(a3 + 120) = v33;
  if (v22)
  {
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(*(_QWORD *)(a1 + 24) + 8))
                          * (v35 - *(double *)(*(_QWORD *)(a1 + 24) + 8))
                          + (*(double *)a3 - **(double **)(a1 + 24)) * (*(double *)a3 - **(double **)(a1 + 24));
    if (v28)
    {
LABEL_19:
      v36 = *(double **)(a2 + 24);
      v37 = *v36;
      v38 = v36[1];
      goto LABEL_38;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      sub_10028DB80(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(_QWORD *)(a1 + 32);
      *(_BYTE *)(a1 + 80) = 1;
    }
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(a1 + 72)) * (v35 - *(double *)(a1 + 72))
                          + (*(double *)a3 - *(double *)(a1 + 64)) * (*(double *)a3 - *(double *)(a1 + 64));
    if (v28)
      goto LABEL_19;
  }
  if (!*(_BYTE *)(a2 + 80))
  {
    sub_10028DB80(a2, *(double **)(a2 + 24), a2 + 32);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)*(_QWORD *)(a2 + 32);
    *(_BYTE *)(a2 + 80) = 1;
    v34 = *(double *)a3;
    v35 = *(double *)(a3 + 8);
  }
  v37 = *(double *)(a2 + 64);
  v38 = *(double *)(a2 + 72);
LABEL_38:
  result = (v35 - v38) * (v35 - v38) + (v34 - v37) * (v34 - v37);
  *(double *)(a3 + 192) = result;
  return result;
}

void sub_1002AFB88(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  double v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  double v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  double v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[36];
  __int128 v53;
  __int128 v54;
  _BYTE v55[36];
  __int128 v56;
  int v57;
  __int128 v58;

  v58 = *a3;
  v56 = *(__int128 *)((char *)a3 + 20);
  v57 = *((_DWORD *)a3 + 9);
  v9 = *(__int128 *)((char *)a3 + 76);
  v54 = *(__int128 *)((char *)a3 + 60);
  *(_OWORD *)v55 = v9;
  *(_OWORD *)&v55[16] = *(__int128 *)((char *)a3 + 92);
  *(_DWORD *)&v55[32] = *((_DWORD *)a3 + 27);
  v53 = *(__int128 *)((char *)a3 + 44);
  v10 = *((_QWORD *)a3 + 14);
  v11 = *(__int128 *)((char *)a3 + 124);
  *(_DWORD *)&v52[32] = *((_DWORD *)a3 + 47);
  v12 = *(__int128 *)((char *)a3 + 172);
  *(_OWORD *)v52 = *(__int128 *)((char *)a3 + 156);
  *(_OWORD *)&v52[16] = v12;
  v13 = *(__int128 *)((char *)a3 + 140);
  v50 = v11;
  v51 = v13;
  v14 = *((_QWORD *)a3 + 24);
  v15 = *(_DWORD *)(a5 + 496);
  if (*(_DWORD *)(a5 + 492) == 1)
  {
    v16 = *(_QWORD *)(a6 + 8);
    v17 = *(uint64_t **)(v16 + 16);
    v18 = *(uint64_t **)(v16 + 24);
    v19 = (uint64_t *)sub_10028ED14(v16);
    v49 = 1.0;
    v20 = sub_10028EE24(v17, v18, v19, &v49);
    if (v20 != 0.0
      && ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v20) > v49 * 2.22044605e-16))
    {
      if (v20 <= 0.0)
        v21 = 1;
      else
        v21 = 2;
      v22 = *(_QWORD **)a4;
      v23 = *(_QWORD *)(*(_QWORD *)a4 + 16);
      v24 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v58 = *(_OWORD *)(a5 + 328);
      *(_OWORD *)&v55[12] = *(_OWORD *)(a5 + 400);
      *(_QWORD *)&v55[28] = *(_QWORD *)(a5 + 416);
      *(_OWORD *)&v52[12] = *(_OWORD *)(a5 + 424);
      *(_QWORD *)&v52[28] = *(_QWORD *)(a5 + 440);
      if (v23 == v24)
        v25 = 0;
      else
        v25 = 20 * ((v23 - v24) >> 3) - 1;
      v26 = v22[5] + v22[4];
      if (v25 == v26)
      {
        sub_1002B020C((uint64_t)v22);
        v24 = v22[1];
        v26 = v22[5] + v22[4];
      }
      v27 = *(_QWORD *)(v24 + 8 * (v26 / 0x14)) + 200 * (v26 % 0x14);
      *(_OWORD *)v27 = v58;
      *(_OWORD *)(v27 + 20) = v56;
      v28 = v53;
      *(_OWORD *)(v27 + 60) = v54;
      *(_OWORD *)(v27 + 76) = *(_OWORD *)v55;
      *(_OWORD *)(v27 + 92) = *(_OWORD *)&v55[16];
      *(_OWORD *)(v27 + 44) = v28;
      v29 = v51;
      *(_OWORD *)(v27 + 124) = v50;
      v30 = *(_OWORD *)v52;
      *(_OWORD *)(v27 + 172) = *(_OWORD *)&v52[16];
      *(_OWORD *)(v27 + 156) = v30;
      *(_DWORD *)(v27 + 16) = 5;
      *(_DWORD *)(v27 + 36) = v57;
      *(_DWORD *)(v27 + 40) = v21;
      *(_DWORD *)(v27 + 108) = *(_DWORD *)&v55[32];
      *(_QWORD *)(v27 + 112) = v10;
      *(_DWORD *)(v27 + 120) = 3;
      *(_DWORD *)(v27 + 188) = *(_DWORD *)&v52[32];
      *(_OWORD *)(v27 + 140) = v29;
      *(_QWORD *)(v27 + 192) = v14;
      ++v22[5];
    }
  }
  if (v15 == 1)
  {
    v31 = *(_QWORD *)(a6 + 16);
    v32 = *(uint64_t **)(v31 + 16);
    v33 = *(uint64_t **)(v31 + 24);
    v34 = (uint64_t *)sub_10028ED14(v31);
    v49 = 1.0;
    v35 = sub_10028EE24(v32, v33, v34, &v49);
    if (v35 != 0.0
      && ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v35) > v49 * 2.22044605e-16))
    {
      v36 = a5 + 304;
      if (v35 <= 0.0)
        v37 = 1;
      else
        v37 = 2;
      v38 = *(_QWORD **)a4;
      v39 = v38[2];
      v40 = v38[1];
      v58 = *(_OWORD *)(v36 + 8);
      v41 = *(_OWORD *)(v36 + 40);
      *(_QWORD *)&v55[28] = *(_QWORD *)(v36 + 56);
      *(_OWORD *)&v55[12] = v41;
      v42 = *(_OWORD *)(v36 + 64);
      *(_QWORD *)&v52[28] = *(_QWORD *)(v36 + 80);
      *(_OWORD *)&v52[12] = v42;
      if (v39 == v40)
        v43 = 0;
      else
        v43 = 20 * ((v39 - v40) >> 3) - 1;
      v44 = v38[5] + v38[4];
      if (v43 == v44)
      {
        sub_1002B020C((uint64_t)v38);
        v40 = v38[1];
        v44 = v38[5] + v38[4];
      }
      v45 = *(_QWORD *)(v40 + 8 * (v44 / 0x14)) + 200 * (v44 % 0x14);
      *(_OWORD *)v45 = v58;
      *(_OWORD *)(v45 + 20) = v56;
      v46 = v53;
      *(_OWORD *)(v45 + 60) = v54;
      *(_OWORD *)(v45 + 76) = *(_OWORD *)v55;
      *(_OWORD *)(v45 + 92) = *(_OWORD *)&v55[16];
      *(_OWORD *)(v45 + 44) = v46;
      *(_QWORD *)(v45 + 112) = v10;
      v47 = v51;
      *(_OWORD *)(v45 + 124) = v50;
      v48 = *(_OWORD *)v52;
      *(_OWORD *)(v45 + 172) = *(_OWORD *)&v52[16];
      *(_DWORD *)(v45 + 16) = 5;
      *(_DWORD *)(v45 + 36) = v57;
      *(_DWORD *)(v45 + 40) = 3;
      *(_DWORD *)(v45 + 108) = *(_DWORD *)&v55[32];
      *(_DWORD *)(v45 + 120) = v37;
      *(_DWORD *)(v45 + 188) = *(_DWORD *)&v52[32];
      *(_OWORD *)(v45 + 156) = v48;
      *(_OWORD *)(v45 + 140) = v47;
      *(_QWORD *)(v45 + 192) = v14;
      ++v38[5];
    }
  }
}

void sub_1002AFFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  double v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  double v32;
  int v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;

  v9 = sub_10028FED4((double *)(a4 + 64), (double *)(a4 + 120));
  v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 16) = 6;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v9 + 8);
  v11 = *(_QWORD *)(v10 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(a3 + 104) = v11;
  v12 = *(_QWORD *)(v10 + 80);
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(v10 + 64);
  *(_QWORD *)(a3 + 184) = v12;
  v13 = *(_QWORD *)(a6 + 16);
  v14 = *(uint64_t **)(v13 + 24);
  v15 = (uint64_t *)sub_10028ED14(v13);
  v16 = (uint64_t *)sub_10028ED14(*(_QWORD *)(a6 + 8));
  v38 = 1.0;
  v17 = sub_10028EE24(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    v18 = 0;
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v19 = fabs(v17);
    if (v17 > 0.0)
      v18 = 1;
    else
      v18 = -1;
    if (v19 <= v38 * 2.22044605e-16)
      goto LABEL_2;
  }
LABEL_12:
  v20 = *(_QWORD *)(a6 + 8);
  v21 = *(uint64_t **)(v20 + 16);
  v22 = *(uint64_t **)(v20 + 24);
  v23 = (uint64_t *)sub_10028ED14(v20);
  v38 = 1.0;
  v24 = sub_10028EE24(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    v25 = 0;
    goto LABEL_23;
  }
  if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
  }
  else
  {
    v26 = fabs(v24);
    if (v24 > 0.0)
      v25 = 1;
    else
      v25 = -1;
    if (v26 <= v38 * 2.22044605e-16)
      goto LABEL_13;
  }
LABEL_23:
  v28 = *(_QWORD *)(a6 + 8);
  v27 = *(_QWORD *)(a6 + 16);
  v29 = *(uint64_t **)(v28 + 16);
  v30 = *(uint64_t **)(v28 + 24);
  v31 = (uint64_t *)sub_10028ED14(v27);
  v38 = 1.0;
  v32 = sub_10028EE24(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    v33 = 0;
    goto LABEL_34;
  }
  if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v34 = fabs(v32);
    if (v32 > 0.0)
      v33 = 1;
    else
      v33 = -1;
    if (v34 > v38 * 2.22044605e-16)
      goto LABEL_34;
    goto LABEL_24;
  }
  if (v32 > 0.0)
    v33 = 1;
  else
    v33 = -1;
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1)
      v36 = v25 == -1;
    else
      v36 = v18 == -1;
    if (v36)
      v37 = 2;
    else
      v37 = 1;
    *(_DWORD *)(a3 + 40) = v37;
    if (v36)
      v35 = 1;
    else
      v35 = 2;
  }
  else
  {
    v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 120) = v35;
}

void sub_1002B020C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x14;
  v4 = v2 - 20;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_1000CDEB8();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFA0uLL);
      sub_100190D1C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFA0uLL);
    sub_100190EA8((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFA0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_1000CDEB8();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_1000CDEB8();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

